<?xml version="1.0"?><st-source><!-- Name: Tools-StartupOrderingToolNotice: Copyright 2005-2013 Cincom Systems, Inc.  All rights reserved.Comment: A code tool that appears in the browser when a subsystem is selected. Attempts to show a graphical representation of that subsystem's position in the startup sequence.DbIdentifier: bear73DbTrace: 400868DbUsername: nrossDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'Browser-BrowserUI' '') #(#any 'HotDraw Framework' ''))PackageName: Tools-StartupOrderingToolParcel: #('Tools-StartupOrderingTool')ParcelName: Tools-StartupOrderingToolPrerequisiteParcels: #(#('Browser-BrowserUI' '') #('HotDraw Framework' ''))PrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1Post-Load Block: 	[:package | Refactory.HotDraw.Tool reinitialize]Post-Unload Block: 	[Refactory.HotDraw.Tool reinitialize]Date: 7:22:46 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 7:22:46 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>StartupOrderingDrawing</name><environment>Tools</environment><super>Refactory.HotDraw.Drawing</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw Framework</category><attributes><package>Tools-StartupOrderingTool</package></attributes></class><comment><class-id>Tools.StartupOrderingDrawing</class-id><body>This is a drawing subclass for showing startup sequence diagrams. Subsystems that require other subsystems will be drawn lower down than their prerequisites, and with arrows pointing to the prerequisite subsystems.</body></comment><class><name>StartupOrderingDrawingController</name><environment>Tools</environment><super>Refactory.HotDraw.DrawingController</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rolloverFigure </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-StartupOrderingTool</category><attributes><package>Tools-StartupOrderingTool</package></attributes></class><comment><class-id>Tools.StartupOrderingDrawingController</class-id><body>StartupOrderingDrawingController is a controller for StartupOrderingDrawings which implements a quick and dirty figure rollover. It tracks mouse motion events and notifies those figures that can display rollover state about state changes. A figure with a rollover state should implement #showRolloverState and #showNormalState methods.Instance Variables:	rolloverFigure	&lt;Figure&gt;	The figure under the cursor the last time a motion event was process. On motion events, when this is different from the current figure, both are notified appropriately.</body></comment><class><name>SubsystemOrderingSelectionPolicy</name><environment>Tools</environment><super>Refactory.Browser.CodeToolSelectionPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-BrowserUI</category><attributes><package>Tools-StartupOrderingTool</package></attributes></class><comment><class-id>Tools.SubsystemOrderingSelectionPolicy</class-id><body>This implements a selection policy for startup sequence diagrams. Primarily, it controls the name we display in the browser tab and makes sure we get the appropriate code tool for the selected objects. </body></comment><class><name>SubsystemOrderCodeTool</name><environment>Tools</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subsystemEditor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-StoreExtensions</category><attributes><package>Tools-StartupOrderingTool</package></attributes></class><comment><class-id>Tools.SubsystemOrderCodeTool</class-id><body>A tool for showing the prerequisite relations between the selected class and other subsystems. Most of the work is actually pawned off on the edtior.Instance Variables:	subsystemEditor	&lt;SubsystemOrderingEditor&gt;	</body></comment><class><name>SubsystemOrderingEditor</name><environment>Tools</environment><super>Refactory.HotDraw.DrawingEditor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>showAll mainClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw Framework</category><attributes><package>Tools-StartupOrderingTool</package></attributes></class><comment><class-id>Tools.SubsystemOrderingEditor</class-id><body>This is an application model for displaying the startup order dependencies of Subsystem classes in the browser.Instance Variables:	mainClass	&lt;Subsystem&gt;	If this diagram should be centered around a single class, it will be listed here. In that case we will highlight that class, may show only its prerequisites/dependents (see showAll). If this is not set, we show all subsystems, with nothing highlighted.	showAll	&lt;Boolean&gt;	If mainClass is set, should we show all subsystems, or just those that are its prerequisites/dependents.</body></comment><class><name>SubsystemFigure</name><environment>Tools</environment><super>Refactory.HotDraw.RectangleFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw Framework</category><attributes><package>Tools-StartupOrderingTool</package></attributes></class><comment><class-id>Tools.SubsystemFigure</class-id><body>SubsystemFigure is used to display a box corresponding to a Subsystem in a diagram that shows the startup sequence dependencies between subsystems.</body></comment><methods><class-id>Tools.StartupOrderingDrawing</class-id> <category>accessing</category><body package="Tools-StartupOrderingTool">menuAt: aPoint 	| mb item |	mb := MenuBuilder new.	item := MenuItem labeled: (#ShowAllSubsystems &lt;&lt; #browser &gt;&gt; 'Show All').	item value: #toggleShowAll.	item indication: self showAll.	mb addItem: item.	^mb menu.</body><body package="Tools-StartupOrderingTool">showAll	^self model showAll.</body><body package="Tools-StartupOrderingTool">toggleShowAll	self model toggleShowAll.</body></methods><methods><class-id>Tools.StartupOrderingDrawing</class-id> <category>controller accessing</category><body package="Tools-StartupOrderingTool">defaultControllerClass	^StartupOrderingDrawingController</body></methods><methods><class-id>Tools.StartupOrderingDrawingController</class-id> <category>events</category><body package="Tools-StartupOrderingTool">handleEvent: anEvent 	super handleEvent: anEvent.	anEvent isMotionEvent ifTrue: [self mouseMovedEvent: anEvent]</body><body package="Tools-StartupOrderingTool">mouseMovedEvent: anEvent	| figure |	figure := model drawing figureAt: (self sensor mousePointFor: anEvent).	figure == rolloverFigure ifTrue: [^self].	(rolloverFigure respondsTo: #showNormalState) ifTrue: [rolloverFigure showNormalState].	(figure respondsTo: #showRolloverState) ifTrue: [figure showRolloverState].	rolloverFigure := figure</body></methods><methods><class-id>Tools.SubsystemOrderingSelectionPolicy</class-id> <category>accessing-classes</category><body package="Tools-StartupOrderingTool">codeToolClassForClass: aBehavior 	^(aBehavior inheritsFrom: Subsystem) ifTrue: [Tools.SubsystemOrderCodeTool] ifFalse: [nil].</body></methods><methods><class-id>Tools.SubsystemOrderingSelectionPolicy</class-id> <category>accessing</category><body package="Tools-StartupOrderingTool">name	^(#SubsystemStartupOrdering &lt;&lt; #browser &gt;&gt; 'Startup Order') asString</body></methods><methods><class-id>Tools.SubsystemOrderingSelectionPolicy class</class-id> <category>class initialization</category><body package="Tools-StartupOrderingTool">initialize	(Refactory.Browser.CodeModel dependents includes: self) 		ifFalse: [Refactory.Browser.CodeModel addDependent: self].	self addSelectionPolicy.</body><body package="Tools-StartupOrderingTool">obsolete	Refactory.Browser.CodeModel removeDependent: self.	^super obsolete.</body></methods><methods><class-id>Tools.SubsystemOrderCodeTool</class-id> <category>accessing</category><body package="Tools-StartupOrderingTool">subsystemEditor	^subsystemEditor isNil 		ifTrue: [subsystemEditor := SubsystemOrderingEditor new]		ifFalse: [subsystemEditor]</body><body package="Tools-StartupOrderingTool">subsystemEditor: aSubsystemOrderingEditor	subsystemEditor := aSubsystemOrderingEditor</body></methods><methods><class-id>Tools.SubsystemOrderCodeTool</class-id> <category>updating</category><body package="Tools-StartupOrderingTool">updateContents	super updateContents.	self updateDrawing</body><body package="Tools-StartupOrderingTool">updateDisplay	super updateDisplay.	self updateDrawing</body><body package="Tools-StartupOrderingTool">updateDrawing	[self nonMetaClass notNil		ifTrue: [^self subsystemEditor displayClass: self nonMetaClass]		ifFalse: [self subsystemEditor clearDrawing]]		on: MessageNotUnderstood		do: [:ex | ex return].</body></methods><methods><class-id>Tools.SubsystemOrderCodeTool</class-id> <category>tab APIs</category><body package="Tools-StartupOrderingTool">isActive	^self narrowestSelectionType == #object and:		[(self selectedClass ifNil: [^false]) inheritsFrom: Subsystem]</body><body package="Tools-StartupOrderingTool">tabName	^(#SubsystemStartupOrdering &lt;&lt; #browser &gt;&gt; 'Startup Order') asString</body></methods><methods><class-id>Tools.SubsystemOrderingEditor</class-id> <category>accessing</category><body package="Tools-StartupOrderingTool">clearDrawing	self drawing removeAll: self drawing figures copy</body><body package="Tools-StartupOrderingTool">displayClass: aClass 	| allFigures classToFigureMap maxY |	self clearDrawing.	mainClass := aClass.	allFigures := self allFiguresFor: aClass.	classToFigureMap := Dictionary new.	allFigures do: [:each | classToFigureMap at: each model put: each].	self layout: allFigures accordingTo: classToFigureMap.	self connectFigures: allFigures accordingTo: classToFigureMap.	"There's an odd problem that it clips the bottom of the last figure, so get out the hatchet and add some pixels"	maxY := allFigures inject: 0 into: [:max :each | max max: each corner y].	drawing		addAll: allFigures;		recomputePreferredBounds;		mergeBounds: (0 @ 0 corner: 1 @ (maxY + 10)).</body><body package="Tools-StartupOrderingTool">mainClass	^mainClass.</body><body package="Tools-StartupOrderingTool">showAll	^showAll.</body><body package="Tools-StartupOrderingTool">toggleShowAll	showAll := showAll not.	self updateDrawing.</body></methods><methods><class-id>Tools.SubsystemOrderingEditor</class-id> <category>drawing description</category><body package="Tools-StartupOrderingTool">drawingClass	"What type of drawing should we create?"	^StartupOrderingDrawing</body><body package="Tools-StartupOrderingTool">toolNames	^(Array with: (#StartupOrderingTool &lt;&lt; #browser &gt;&gt; 'System Startup Ordering Tool') asString)</body></methods><methods><class-id>Tools.SubsystemOrderingEditor</class-id> <category>layout</category><body package="Tools-StartupOrderingTool">allFiguresFor: aClass	| all classes |	classes := showAll		ifTrue: [Subsystem allSubclasses]		ifFalse:			[all := Set new.			all addAll: aClass allPrerequisiteSystemsRecursively.			all addAll: aClass allDependentSystemsRecursively.			all add: aClass.			all].	^classes collect: [:each | 		| figure |		figure := SubsystemFigure on: each.		aClass == each ifTrue: [figure lineWidth: 3].		figure].</body><body package="Tools-StartupOrderingTool">connectFigures: allFigures accordingTo: classToFigureMap	"Connect systems to their prerequisites with lines"	| lines |	lines := OrderedCollection new.	allFigures do: [:each | 		each theClass current allPrerequisiteSystems do: [:eachPrerequisite | 			classToFigureMap at: eachPrerequisite				ifPresent: [:prerequisiteFigure | 					lines						add:							(each								connectFromPoint: (each topCenter)								to: prerequisiteFigure								at: prerequisiteFigure bottomCenter)]]].	allFigures addAll: lines.</body><body package="Tools-StartupOrderingTool">layout: figures accordingTo: classToFigureMap	"Calculate a reasonable position at which to draw each figure."	| grouped rightMost early |	grouped := figures groupedBy: [:each | each model activationEvent].	early := grouped at: #earlySystemInstallation ifAbsent: [#()].	early do: [:each | 		each			layoutIn: classToFigureMap			withSpacing: 175 @ 50			startingFrom: 5 @ 5].	rightMost := early inject: 0 into: [:max :each | max max: each corner x].	(grouped at: #returnFromSnapshot ifAbsent: [#()]) do:[:each | 		each			layoutIn: classToFigureMap			withSpacing: 175 @ 50			startingFrom: (rightMost + 5) @ 5].</body></methods><methods><class-id>Tools.SubsystemOrderingEditor</class-id> <category>updating</category><body package="Tools-StartupOrderingTool">updateDrawing	self clearDrawing.	mainClass isNil ifFalse: [self displayClass: mainClass].</body></methods><methods><class-id>Tools.SubsystemOrderingEditor</class-id> <category>initialize-release</category><body package="Tools-StartupOrderingTool">initialize	super initialize.	showAll := false.</body></methods><methods><class-id>Tools.SubsystemOrderingEditor</class-id> <category>interface opening</category><body package="Tools-StartupOrderingTool">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	(builder bindings at: #drawing) container scrollGrid x: 10; y: 10.</body></methods><methods><class-id>Tools.SubsystemFigure</class-id> <category>accessing</category><body package="Tools-StartupOrderingTool">label	| label |	label := self theClass name asComposedText.	(self model activationEvent == #earlySystemInstallation) 		ifTrue: [label text emphasizeAllWith: #italic].	^label.</body><body package="Tools-StartupOrderingTool">menuAt: aPoint	| mb showAllMenuItem |	mb := MenuBuilder new.	showAllMenuItem := MenuItem labeled: (#ShowAllSubsystems &lt;&lt; #browser &gt;&gt; 'Show All').	showAllMenuItem value: [self drawing toggleShowAll].	showAllMenuItem indication: self drawing showAll.	mb 		addItem: showAllMenuItem;		line;		add: (#BrowseClass &lt;&lt; #browser &gt;&gt; 'Browse Class') -&gt; [self model browse].	^mb menu.</body><body package="Tools-StartupOrderingTool">on: aClass	self theClass: aClass.</body><body package="Tools-StartupOrderingTool">showNormalState	self lineWidth: self lineWidth - 1.	self invalidate</body><body package="Tools-StartupOrderingTool">showRolloverState	self lineWidth: self lineWidth + 1.	self invalidate</body><body package="Tools-StartupOrderingTool">theClass	^model</body><body package="Tools-StartupOrderingTool">theClass: aClass	model := aClass.	bounds := (self label bounds expandedBy: 10@2).</body></methods><methods><class-id>Tools.SubsystemFigure</class-id> <category>printing</category><body package="Tools-StartupOrderingTool">printOn: aStream	super printOn: aStream.	aStream nextPut: $(.	aStream print: model.	aStream nextPut: $).</body></methods><methods><class-id>Tools.SubsystemFigure</class-id> <category>initialize-release</category><body package="Tools-StartupOrderingTool">initialize	super initialize.	self transparent.</body></methods><methods><class-id>Tools.SubsystemFigure</class-id> <category>layout</category><body package="Tools-StartupOrderingTool">layoutIn: classToFigureMap withSpacing: aPoint startingFrom: startPoint	"A crude layout algorithm. We are always lower down than our prerequisites. Within a 'layer' of things at an equivalent level of prerequisites, lay them out arbitrarily left to right, so just find the rightmost one that's in our layer so far, and be to the right of that"	| y figureWithMaximumXAtThisY x prerequisitesInThisDiagram |	(self bounds notNil and: [self bounds origin y &gt; 0]) ifTrue: [^self].	prerequisitesInThisDiagram := self model current allPrerequisiteSystems select: [:each |		classToFigureMap includesKey: each].	 prerequisitesInThisDiagram do: [:each |		(classToFigureMap at: each) layoutIn: classToFigureMap withSpacing: aPoint startingFrom: startPoint].	y := prerequisitesInThisDiagram inject: startPoint y into: [:max :each |		(((classToFigureMap at: each) bounds origin y) + aPoint y) max: max].	figureWithMaximumXAtThisY := classToFigureMap 		inject: nil 		into:  [:max :each |			each origin y = y				ifFalse: [max]				ifTrue: [					max isNil						ifTrue: [each]						ifFalse: [max origin x &lt;= each origin x ifTrue: [each] ifFalse: [max]]]].	x := figureWithMaximumXAtThisY isNil 		ifTrue: [startPoint x] 		ifFalse: [((figureWithMaximumXAtThisY origin x + aPoint x) 			max: (figureWithMaximumXAtThisY corner x + 5)) 				max: startPoint x].	"It seems silly to do both direct access and also use the accessor, but bounds: only flushes cache, doesn't actually set the bounds."	bounds := ((x @ y) corner: (x + bounds corner x) @ (y + bounds corner y)).	self bounds: bounds.</body></methods><methods><class-id>Tools.SubsystemFigure</class-id> <category>displaying</category><body package="Tools-StartupOrderingTool">displayFigureOn: aGraphicsContext	| text |	super displayFigureOn: aGraphicsContext.	text := self label.	text displayOn: aGraphicsContext		at: (self extent - text extent) // 2 + self origin + (1 @ 0)</body></methods><methods><class-id>Tools.SubsystemFigure class</class-id> <category>instance creation</category><body package="Tools-StartupOrderingTool">on: aClass	^self new on: aClass.</body></methods><methods><class-id>Refactory.HotDraw.Tool class</class-id> <category>tool states</category><body package="Tools-StartupOrderingTool">subsystemStartupOrderToolStates	"This method was automatically generated by the HotDraw ToolStateMachineEditor.	To edit this method, evaluate the comment below"	"| states transitions stateTable |	states := ((Core.OrderedCollection new) add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'System Startup Ordering Tool'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 154 y: 34); instVarAt: 5 put: false; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Menu'; instVarAt: 3 put: '[:tool :event | ]'; instVarAt: 4 put: (Core.Point x: 327 y: 127); instVarAt: 5 put: false; instVarAt: 6 put: true; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Compare Editions'; instVarAt: 3 put: '[:tool :event | | startFigure endFigure origin |origin := tool valueAt: #startPoint.tool drawing 	invalidateRectangle:		(Rectangle vertex: origin vertex: (tool valueAt: #lastPoint))	repairNow: true.startFigure := tool valueAt: #figure.endFigure := tool figureAtEvent: event.startFigure ~~ endFigure ifTrue: [startFigure compareVersionTo: endFigure model]]'; instVarAt: 4 put: (Core.Point x: 392 y: 479); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); add: (Refactory.HotDraw.ToolStateModel basicNew instVarAt: 1 put: nil; instVarAt: 2 put: 'Browse'; instVarAt: 3 put: '[:tool :event | (tool figureAtEvent: event) model browse]'; instVarAt: 4 put: (Core.Point x: 41 y: 311); instVarAt: 5 put: true; instVarAt: 6 put: false; yourself); yourself).	stateTable := Dictionary new.	states do: [:each | stateTable at: each name put: each].	transitions := OrderedCollection new.	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'System Startup Ordering Tool'); to: (stateTable at: 'Menu'); type: (Refactory.HotDraw.TransitionType basicNew instVarAt: 1 put: #yellowButtonPress; yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 284.922 y: 86.8465); add: (Core.Point x: 327 y: 115); add: (Core.Point x: 369.818 y: 141.254); yourself); yourself).	transitions add: (ToolStateTransitionModel new from: (stateTable at: 'System Startup Ordering Tool'); to: (stateTable at: 'Browse'); type: (Refactory.HotDraw.FigureTransitionType basicNew instVarAt: 1 put: #doubleClick; instVarAt: 2 put: ((Core.Array new: 1) at: 1 put: Tools.SubsystemFigure; yourself); yourself); points: ((Core.OrderedCollection new) add: (Core.Point x: 222.159 y: 87.8792); add: (Core.Point x: 64.5494 y: 310.117); yourself); yourself).	ToolStateMachineEditor openWithStates: states connections: transitions"	Tool states at: 'System Startup Ordering Tool' put: (ToolState name: 'System Startup Ordering Tool' command: [:tool :event | ]).	Tool states at: 'Compare Editions' put: (EndToolState name: 'Compare Editions' command: [:tool :event | | startFigure endFigure origin |origin := tool valueAt: #startPoint.tool drawing 	invalidateRectangle:		(Rectangle vertex: origin vertex: (tool valueAt: #lastPoint))	repairNow: true.startFigure := tool valueAt: #figure.endFigure := tool figureAtEvent: event.startFigure ~~ endFigure ifTrue: [startFigure compareVersionTo: endFigure model]]).	Tool states at: 'Browse' put: (EndToolState name: 'Browse' command: [:tool :event | (tool figureAtEvent: event) model browse]).	(Tool stateFor: 'System Startup Ordering Tool') yellowButtonPress: ((SimpleTransitionTable new) goto: (Tool stateFor: 'Menu'); yourself).	(Tool stateFor: 'System Startup Ordering Tool') doubleClick: ((FigureTransitionTable new)  on: SubsystemFigure goto: (Tool stateFor: 'Browse'); yourself).</body></methods><methods><class-id>Tools.SubsystemOrderCodeTool class</class-id> <category>interface specs</category><body package="Tools-StartupOrderingTool">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #DrawingEditor #defaultString: 'Drawing Editor' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1355 1080 ) 			#colors: #(#{UI.LookPreferences} ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #versionEditor 					#flags: 0 					#majorKey: #{Tools.SubsystemOrderingEditor} 					#minorKey: #windowSpec 					#clientKey: #subsystemEditor ) ) ) )</body></methods><methods><class-id>Tools.SubsystemOrderingEditor class</class-id> <category>interface specs</category><body package="Tools-StartupOrderingTool">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #DrawingEditor #defaultString: 'Drawing Editor' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1355 1080 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#flags: 11 					#component: #drawing ) 				 ) ) )</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>tool registration</category><body package="Tools-StartupOrderingTool">subsystemOrderCodeToolClass	&lt;tool&gt;	^SubsystemOrderCodeTool</body></methods><initialize><class-id>Tools.SubsystemOrderingSelectionPolicy</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>RectangleFigure</name><environment>Refactory.HotDraw</environment><super>Refactory.HotDraw.Figure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Figures</category><attributes><package>HotDraw Framework</package></attributes></class><class><name>CodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel menu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>DrawingEditor</name><environment>Refactory.HotDraw</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>buttons drawing </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Framework</category><attributes><package>HotDraw Framework</package></attributes></class><class><name>DrawingController</name><environment>Refactory.HotDraw</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tool </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Framework</category><attributes><package>HotDraw Framework</package></attributes></class><class><name>CodeToolSelectionPolicy</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tool Selection Policies</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>Drawing</name><environment>Refactory.HotDraw</environment><super>Refactory.HotDraw.CompositeFigure</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selections handles controller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HotDraw-Framework</category><attributes><package>HotDraw Framework</package></attributes></class></st-source>