<?xml version="1.0"?><st-source><!-- Name: UniqueObjectTable-BytecodeArrayNotice: Copyright 1999-2013 Cincom Systems, Inc.  All rights reserved.Comment: This package implements an example unique object table that maintains all bytecode arrays unique across the image.  To install the unique bytecode array table, load the package and evaluate	BytecodeArrayTable new installTypical image space savings range from 3% to 8%.  Note that once the table is installed, the package cannot be unloaded.  The runtime packager is amended to not unify bytecode arrays (since they will be unique anyway).  Moreover, the runtime packager will rehash the bytecode array table while packaging the image.DbIdentifier: bear73DbTrace: 400870DbUsername: nrossDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'UniqueObjectTable' '') #(#any 'SUnit' '') #(#any 'RuntimePackager' ''))PackageName: UniqueObjectTable-BytecodeArrayParcel: #('UniqueObjectTable-BytecodeArray')PrerequisiteDescriptions: #(#(#name 'UniqueObjectTable' #componentType #package) #(#name 'SUnit' #componentType #package) #(#name 'RuntimePackager' #componentType #package))PrerequisiteParcels: #(#('UniqueObjectTable' '') #('SUnit' '') #('RuntimePackager' ''))PrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1Date: 7:23:14 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 7:23:14 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>BytecodeArray</name><environment>Kernel</environment><super>Core.ByteArray</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Methods</category><attributes><package>UniqueObjectTable-BytecodeArray</package></attributes></class><comment><class-id>Kernel.BytecodeArray</class-id><body>This class models a bytecode array used by compiled methods to hold on to bytecodes.  The instances of this class referred to by compiled methods are unique across the image.</body></comment><class><name>BytecodeArrayTable</name><environment>Kernel</environment><super>Core.UniqueObjectTable</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Methods</category><attributes><package>UniqueObjectTable-BytecodeArray</package></attributes></class><comment><class-id>Kernel.BytecodeArrayTable</class-id><body>initializationPolicy	^self fastPolicy</body></comment><class><name>BytecodeArrayTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>UniqueObjectTable-BytecodeArray</package></attributes></class><methods><class-id>Kernel.BytecodeArray</class-id> <category>converting</category><body package="UniqueObjectTable-BytecodeArray">asByteArray	^ByteArray withAll: self</body><body package="UniqueObjectTable-BytecodeArray">asByteString	"Answer an instance of ByteString which is = to self."	^super copy changeClassTo: ByteString</body><body package="UniqueObjectTable-BytecodeArray">asBytecodeArray	^self</body></methods><methods><class-id>Kernel.BytecodeArray</class-id> <category>private</category><body package="UniqueObjectTable-BytecodeArray">bytecodes: aByteArray	self size = aByteArray size ifFalse:		[			self error:				#errMustBeEqualByteArraySize					&lt;&lt; #dialogs					&gt;&gt; 'aByteArray size must be equal to receiver size'		].	self		replaceFrom: 1		to: self size		with: aByteArray		startingAt: 1</body><body package="UniqueObjectTable-BytecodeArray">maxPrintElements	^self size</body></methods><methods><class-id>Kernel.BytecodeArray</class-id> <category>copying</category><body package="UniqueObjectTable-BytecodeArray">copy	"The instances of this class are to be unique across the image"	^self</body></methods><methods><class-id>Kernel.BytecodeArray</class-id> <category>printing</category><body package="UniqueObjectTable-BytecodeArray">printOn: aStream	aStream nextPutAll: '0x'.	aStream nextPut: $[.	(1 to: self size)		do:			[:index |				(self at: index)					printOn: aStream					base: 16					digitsToPad: 2					highDigit: 2			]		separatedBy: [aStream space].	aStream nextPut: $]</body></methods><methods><class-id>Kernel.BytecodeArray class</class-id> <category>private</category><body package="UniqueObjectTable-BytecodeArray">rehash	^self bytecodeArrayTable rehash</body></methods><methods><class-id>Kernel.BytecodeArray class</class-id> <category>instance creation</category><body package="UniqueObjectTable-BytecodeArray">bytecodeArrayTable	^BytecodeArrayTable new</body><body package="UniqueObjectTable-BytecodeArray">fromByteArray: aByteArray	^self bytecodeArrayTable uniqueObjectFor: aByteArray</body></methods><methods><class-id>Kernel.BytecodeArrayTable</class-id> <category>public - enumerating</category><body package="UniqueObjectTable-BytecodeArray">install	CompiledCode allGeneralInstances do: [:each | each normalize]</body></methods><methods><class-id>Kernel.BytecodeArrayTable</class-id> <category>private - object collection</category><body package="UniqueObjectTable-BytecodeArray">allStoredUniqueObjectClasses	^Array with: BytecodeArray</body></methods><methods><class-id>Kernel.BytecodeArrayTable</class-id> <category>private - comparing</category><body package="UniqueObjectTable-BytecodeArray">is: anObject equivalentTo: anotherObject	"Scan backwards to give less priority to flags"	anObject size = anotherObject size ifFalse: [^false].	anObject size to: 1 by: -1 do:		[:eachIndex |			(anObject at: eachIndex)				= (anotherObject at: eachIndex)					ifFalse: [^false]		].	^true</body></methods><methods><class-id>Kernel.BytecodeArrayTable</class-id> <category>private - internment</category><body package="UniqueObjectTable-BytecodeArray">createUniqueObjectFor: aByteArray	| answer |	answer := BytecodeArray new: aByteArray size.	answer bytecodes: aByteArray.	answer isImmutable: true.	^answer</body></methods><methods><class-id>Kernel.BytecodeArrayTable</class-id> <category>private</category><body package="UniqueObjectTable-BytecodeArray">initializationPolicy	^self fastPolicy</body></methods><methods><class-id>BytecodeArrayTest</class-id> <category>testing</category><body package="UniqueObjectTable-BytecodeArray">assertBytecodeArrayTableIsConsistent	| compiledMethods bytecodeArrays |	ObjectMemory garbageCollect.	compiledMethods := CompiledCode allGeneralInstances.	bytecodeArrays := compiledMethods		inject: Set new		into: [:uniqueBytecodeArrays :each | uniqueBytecodeArrays add: each bytesInstVar; yourself].	self assert: (bytecodeArrays allSatisfy: [:each | each class == BytecodeArray]).	self assert: BytecodeArrayTable new numberOfRememberedUniqueObjects = bytecodeArrays size.	compiledMethods do:		[:each |			| existingBytecodeArray internedBytecodeArray |			existingBytecodeArray := each bytesInstVar.			internedBytecodeArray := BytecodeArrayTable new existingUniqueObjectFor: existingBytecodeArray.			self assert: existingBytecodeArray == internedBytecodeArray		]</body><body package="UniqueObjectTable-BytecodeArray">testBytecodeArrayTableIsConsistent	self assertBytecodeArrayTableIsConsistent</body><body package="UniqueObjectTable-BytecodeArray">testConversionToByteArray	self assert: BytecodeArray new asByteArray class == ByteArray</body><body package="UniqueObjectTable-BytecodeArray">testConversionToByteString	self assert: BytecodeArray new asByteString class == ByteString</body><body package="UniqueObjectTable-BytecodeArray">testCopying	| bytecodeArray |	bytecodeArray := BytecodeArray new.	self assert: bytecodeArray copy == bytecodeArray</body><body package="UniqueObjectTable-BytecodeArray">testInternmentWorks	| sortableBytecodeArrays sortedBytecodeArrays |	sortableBytecodeArrays := BytecodeArray allInstances collect: [:each | each asByteString].	sortedBytecodeArrays := SortedCollection sortBlock: [:x :y | (x trueCompare: y) ~= 1].	"x &lt;= y"	sortedBytecodeArrays addAll: sortableBytecodeArrays.	1 to: sortedBytecodeArrays size - 1 do:		[:eachPivot |			self assert:				(sortedBytecodeArrays at: eachPivot)					~= (sortedBytecodeArrays at: eachPivot + 1)		].	self assertBytecodeArrayTableIsConsistent</body><body package="UniqueObjectTable-BytecodeArray">testInternmentWorksAfterReinstallation	BytecodeArrayTable new install; rehash.	self testInternmentWorks</body></methods><methods><class-id>RuntimePackager.RuntimeManagerStripper class</class-id> <category>stripping</category><body package="UniqueObjectTable-BytecodeArray">createFinalImage	"Create the final image before the save.  RuntimeManager dependents are	notified of events through changed messages."	| notifier  tickRatePerClass |	notifier := RuntimeProgressNotifier open.	notifier log: 'Creating final runtime image'.	RuntimeManager changed: #aboutToStripImage.	"Suppress the splash screen and herald if desired"	DeploymentOptionsSystem suppressSplashScreenAndHerald: (StrippingOptions includes: #suppressSplashScreen).	"Supress the ability to raise the EmergencyEvaluator"	self suppressEmergencyEvaluator: notifier.	"do preliminary operations that do not need to be seen as referenced."	self createFinalImageHiddenLogic: notifier.	" remove unreferenced items and force a relinkSystem when done "	SystemUtils modifySystem: [		self discardUnreferencedMethodsClassesAndGlobals: notifier.		self discardLoadableNameSpaces: notifier.		notifier log: 'Linking System'. ].	notifier log: 'Cleaning up DeferredBindings'.	self cleanUpDeferredBindings.	" finish stripping the image "	tickRatePerClass := Smalltalk allClasses size // 50.	( StrippingOptions includes: #mergeLiterals ) ifTrue: [		notifier tickRate: tickRatePerClass.		self mergeLiterals: notifier ].	( StrippingOptions includes: #mergeMethods ) ifTrue: [		notifier tickRate: tickRatePerClass.		self mergeMethods: notifier. ].	( StrippingOptions includes: #useRuntimeCompiledMethod ) ifTrue: [		notifier tickRate: tickRatePerClass.		self installCompactMethods: notifier. ].	" garbage collection more time "	notifier log: 'Global garbage collect again'.	ObjectMemory globalGarbageCollect.	" rebuild the unique symbol table "	notifier log: 'Rehashing symbol table'.	Symbol rehash.	" rebuild the unique bytecode array table "	notifier log: 'Rehashing bytecode array table'.	BytecodeArray rehash.	" that's all follks "	notifier log: 'Done'.	notifier close.	RuntimeManager changed: #imageStrippingComplete.	^true</body></methods><methods><class-id>RuntimePackager.RuntimeBuilderOptionsEditor</class-id> <category>internals</category><body package="UniqueObjectTable-BytecodeArray">copyValuesFromSubject	"Copy options values from the options object to its editor"		self removeCompiler value: subject removeCompiler.	self doThreeSaves value: subject doThreeSaves.	self skipScan value: subject skipScan.	self suppressSplashScreen value: subject suppressSplashScreen.	self clearParcelPath value: subject clearParcelPath.	self packageExternalInterfaces value: subject packageExternalInterfaces.	self removeOrganization value: subject removeOrganization.	self startupClass		value:			(subject startupClass isNil				ifTrue: ['']				ifFalse: [subject startupClass fullName asString]).	self startupMethod		value:			(subject startupMethod isNil				ifTrue: ['']				ifFalse: [subject startupMethod asString]).	self errorNotifierClass		value:			(subject errorNotifierClass isNil				ifTrue: ['']				ifFalse: [subject errorNotifierClass fullName asString]).	self imageDumperClass		value:			(subject imageDumperClass isNil				ifTrue: ['']				ifFalse: [subject imageDumperClass fullName asString]).	self errorLogPath value: subject errorLogPath.	self imagePath value: subject imagePath.	self useAutoLoader value: subject useAutoLoader.	self headlessImage value: subject headlessImage.	self mergeLiterals value: subject mergeLiterals.	self mergeMethods value: subject mergeMethods.	self osUnix value: subject osUnix.	self osWindows value: subject osWindows.	self uiLookMac value: subject uiLookMac.	self uiLookMotif value: subject uiLookMotif.	self uiLookWindows value: subject uiLookWindows.	self useRuntimeCompiledMethod value: subject useRuntimeCompiledMethod.	self stripGlobals value: subject stripGlobals.	self traceLevel value: subject traceLevel.	" set prestrip class and method "	self prestripClass		value:			(subject prestripClass isNil				ifTrue: ['']				ifFalse: [subject prestripClass fullName asString]).	self prestripMethod		value:			(subject prestripMethod isNil				ifTrue: ['']				ifFalse: [subject prestripMethod asString]).	" set last window action "	subject continueOnLastWin		ifTrue: [self lastWindowCloseAction value: #continue]		ifFalse:			[subject shutdownOnLastWin				ifTrue: [self lastWindowCloseAction value: #shutdown]				ifFalse: [self lastWindowCloseAction value: #standard]].	" set up parcel information "	parcelOptions := Dictionary new.	subject parcelOptions		keysAndValuesDo:			[:key :value | 			parcelOptions				at: key				put: value copy].	self buildParcelList</body><body package="UniqueObjectTable-BytecodeArray">copyValuesToSubject	"Copy options values back to the options object holding them"		| changedAspects |	super copyValuesToSubject.	changedAspects := Set new.	" see what was changed.  Only certain aspects are checked"	#(#removeCompiler #headlessImage #useRuntimeCompiledMethod #errorNotifierClass #imageDumperClass #startupClass #startupMethod)		do:			[:aspect | 			(self perform: aspect) value = (subject perform: aspect)				ifFalse: [changedAspects add: aspect]].	#(#osWindows #osUnix)		do:			[:aspect | 			(self perform: aspect) value = (subject perform: aspect)				ifFalse: [changedAspects add: #operatingSystems]].	#(#uiLookMac #uiLookMotif #uiLookWindows)		do:			[:aspect | 			(self perform: aspect) value = (subject perform: aspect)				ifFalse: [changedAspects add: #uiLooks]].	" transfer values to the subject "	subject removeCompiler: self removeCompiler value.	subject doThreeSaves: self doThreeSaves value.	subject skipScan: self skipScan value.	subject suppressSplashScreen: self suppressSplashScreen value.	subject clearParcelPath: self clearParcelPath value.	subject packageExternalInterfaces: self packageExternalInterfaces value.	subject removeOrganization: self removeOrganization value.	subject shutdownOnLastWin: self lastWindowCloseAction value == #shutdown.	subject continueOnLastWin: self lastWindowCloseAction value == #continue.	subject		startupClass:			(self startupClass value = ''				ifTrue: [nil]				ifFalse: [self classNamed: self startupClass value]).	subject		startupMethod:			(self startupClass value = ''				ifTrue: [nil]				ifFalse: [self startupMethod value asSymbol]).	subject		errorNotifierClass:			(self errorNotifierClass value = ''				ifTrue: [nil]				ifFalse: [self classNamed: self errorNotifierClass value]).	subject		imageDumperClass:			(self imageDumperClass value = ''				ifTrue: [nil]				ifFalse: [self classNamed: self imageDumperClass value]).	subject		prestripClass:			(self prestripClass value = ''				ifTrue: [nil]				ifFalse: [self classNamed: self prestripClass value]).	subject		prestripMethod:			(self prestripClass value = ''				ifTrue: [nil]				ifFalse: [self prestripMethod value asSymbol]).	subject errorLogPath: self errorLogPath value.	subject imagePath: self imagePath value.	currentParcel notNil		ifTrue:			[" force any pending values to be processed "			self parcelList selectionIndex: 0].	subject useAutoLoader: self useAutoLoader value.	subject headlessImage: self headlessImage value.	subject mergeLiterals: self mergeLiterals value.	subject mergeMethods: self mergeMethods value.	subject osUnix: self osUnix value.	subject osWindows: self osWindows value.	subject uiLookMac: self uiLookMac value.	subject uiLookMotif: self uiLookMotif value.	subject uiLookWindows: self uiLookWindows value.	subject useRuntimeCompiledMethod: self useRuntimeCompiledMethod value.	subject stripGlobals: self stripGlobals value.	subject traceLevel: self traceLevel value.	subject parcelOptions: parcelOptions.	subject removeNonloadableParcels.	" tell interested parties about the change "	subject changed: #values with: changedAspects</body></methods><methods><class-id>RuntimePackager.RuntimeBuilderOptions</class-id> <category>actions</category><body package="UniqueObjectTable-BytecodeArray">setDefaultValues	"Set options to their default values"	| changedAspects saveOperatingSystems	saveUILooks saveRemoveCompiler |	" save certain aspects for which changes are of interest "	changedAspects := Set new.	saveRemoveCompiler := self removeCompiler.	saveOperatingSystems := operatingSystems.	saveUILooks := uiLooks.	" set new values "	strippingOptions := Set new.	operatingSystems := Set new.	uiLooks := Set new.	" set canned options "	self removeCompiler: false.	self shutdownOnLastWin: true.	self doThreeSaves: false.	self skipScan: false.	self clearParcelPath: true.	self suppressSplashScreen: true.	self useAutoLoader: true.	self headlessImage: false.	self packageExternalInterfaces: true.	self removeOrganization: true.	self mergeLiterals: false.	self mergeMethods: false.	self useRuntimeCompiledMethod: false.	self startupClass: nil.	self startupMethod: nil.	self prestripClass: nil.	self prestripMethod: nil.	self errorNotifierClass: RuntimeEmergencyNotifier.	self imageDumperClass: RuntimeFullDumper.	self errorLogPath: 'error.log'.	self imagePath: 'runtime'.	self traceLevel: 0.	self stripGlobals: true.	operatingSystems addAll: #(#win #unix #mac).	self uiLookWindows: true.	self uiLookMac: true.	self uiLookMotif: true.	" clear parcel options "	parcelOptions := Dictionary new.	" look at some options that may have been changed "	self hasBeenEdited ifTrue: [		saveRemoveCompiler = self removeCompiler ifFalse: [			changedAspects add: #removeCompiler ].		saveOperatingSystems asSortedCollection =			operatingSystems asSortedCollection ifFalse: [			changedAspects add: #operatingSystems ].		saveUILooks asSortedCollection =			uiLooks asSortedCollection ifFalse: [			changedAspects add: #uiLooks ] ].	" notify interested parties that things have changed. "	self changed: #values with: changedAspects.</body></methods><methods><class-id>Kernel.CompiledCode</class-id> <category>private - normalization</category><body package="UniqueObjectTable-BytecodeArray">bytesInstVar: aByteArray	bytes := aByteArray asBytecodeArray</body><body package="UniqueObjectTable-BytecodeArray">normalize	"Assume the BytecodeArray instance may not be in the table,	therefore intern it as opposed to sending it asBytecodeArray"	self convertShortIntoNormal.	self bytesInstVar: (BytecodeArray fromByteArray: self bytesInstVar)</body></methods><methods><class-id>RuntimePackager.RuntimeBuilderOptionsEditor class</class-id> <category>interface specs</category><body package="UniqueObjectTable-BytecodeArray">strippingSpec	"Tools.UIPainter new openOnClass: self andSelector: #strippingSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Stripping' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 840 525 1259 838 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 187 ) 					#label: 'Prestrip Class' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 220 ) 					#label: 'Prestrip Method' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 20 152 ) 					#label: 'Trace Level' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 19 13 ) 					#name: #removeOrganization 					#model: #removeOrganization 					#label: 'Remove system organization' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 19 35 ) 					#name: #packageExternalInterfaces 					#model: #packageExternalInterfaces 					#label: 'Package external interfaces' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 19 57 ) 					#name: #useRuntimeCompiledMethod 					#model: #useRuntimeCompiledMethod 					#label: 'Use compact compiled methods' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 19 79 ) 					#name: #mergeLiterals 					#model: #mergeLiterals 					#label: 'Merge literals' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 19 101 ) 					#name: #mergeMethods 					#model: #mergeMethods 					#label: 'Merge methods' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 20 123 ) 					#name: #stripGlobals 					#model: #stripGlobals 					#label: 'Remove unreferenced globals' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 148 154 ) 					#model: #traceLevel 					#label: 'None' 					#select: 0 ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 227 154 ) 					#model: #traceLevel 					#label: 'Medium' 					#select: 2 ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 321 154 ) 					#model: #traceLevel 					#label: 'High' 					#select: 4 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 148 187 367 208 ) 					#name: #prestripClass 					#model: #prestripClass 					#menu: #prestripClassMenu ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 381 187 407 208 ) 					#model: #findPrestripClass 					#label: '?' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 148 220 367 241 ) 					#name: #prestripMethod 					#model: #prestripMethod 					#menu: #prestripMethodMenu ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 381 220 407 241 ) 					#model: #findPrestripMethod 					#label: '?' 					#defaultable: true ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>RuntimeBuilderOptionsEditor</name><environment>RuntimePackager</environment><super>RuntimePackager.RuntimeBuilderEditor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>edittingBuilder tabs errorNotifierClass errorLogPath shutdownOnLastWin startupClass startupMethod removeCompiler imagePath doThreeSaves installEmergencyEvaluator removeOrganization packageExternalInterfaces uiLookMac uiLookMotif osMac osUnix uiLookWindows osWindows headlessImage useRuntimeCompiledMethod parcelOptions parcelIsLoadable stripParcel parcelList currentParcel parcelPath mergeLiterals mergeByteCodes useAutoLoader imageDumperClass lastWindowCloseAction prestripClass prestripMethod saveParcel parcelSaveOption mergeMethods clearParcelPath parcelUnloadBeforeStrip traceLevel stripGlobals skipScan suppressSplashScreen </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RuntimePackager</category><attributes><package>RuntimePackager</package></attributes></class><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class><class><name>ByteArray</name><environment>Core</environment><super>Core.IntegerArray</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Arrayed</category><attributes><package>Collections-Arrayed</package></attributes></class><class><name>CompiledCode</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>bytes </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>RuntimeBuilderOptions</name><environment>RuntimePackager</environment><super>RuntimePackager.RuntimeBuilderEditableObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>errorNotifierClass errorLogPath imageDumperClass startupClass startupMethod imagePath strippingOptions uiLooks operatingSystems parcelOptions prestripClass prestripMethod traceLevel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RuntimePackager</category><attributes><package>RuntimePackager</package></attributes></class><class><name>UniqueObjectTable</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>mutex hashBucketTombstone policy </inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>Collections-Support</category><attributes><package>UniqueObjectTable</package></attributes></class></st-source>