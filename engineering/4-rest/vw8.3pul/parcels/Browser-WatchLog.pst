<?xml version="1.0"?><st-source><!-- Name: Browser-WatchLogNotice: Copyright 2015-2017 Cincom Systems, Inc.  All rights reserved.Comment: This package contains classes for the refactoring browser's 'Watches' tool.DbIdentifier: bear73DbTrace: 501649DbUsername: smichaelDbVersion: 8.3 - 1DevelopmentPrerequisites: #(#(#any 'Browser-BrowserUI' ''))PackageName: Browser-WatchLogParcel: #('Browser-WatchLog')ParcelName: Browser-WatchLogPrerequisiteDescriptions: #(#(#name 'Browser-BrowserUI' #componentType #package))PrerequisiteParcels: #(#('Browser-BrowserUI' ''))PrintStringCache: (8.3 - 1,smichael)Version: 8.3 - 1Date: 3:26:56 PM June 30, 2017 --><time-stamp>From VisualWorks®, Pre-Release 8.3 (jun17.4) of June 23, 2017 on June 30, 2017 at 3:26:56 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>BrowserWatchLogTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>document style timestampStyle objectStyle objects sourceStyle sources paused </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-WatchLog</package></attributes></class><comment><class-id>Refactory.Browser.BrowserWatchLogTool</class-id><body>BrowserWatchLogTool is a CodeTool that uses the RB's scope to display watch log entries from watch probes. Selecting a method will limit the logging only probes in that method, a class to all probes in that class, a pundle to all probes in all classes in the pundle(s).Instance Variables:	paused		&lt;Boolean&gt;					Is the tool currently not recording log entries	document		&lt;ValueModel of: Text2.Document&gt;	The document containing the log entries	objects		&lt;SequenceableCollection of: Object&gt;	The objects logged	sources		&lt;RunArray of: MethodDescription&gt;	The methods that created log entries	style			&lt;DocumentStyle&gt;				The default styling for the log document	objectStyle	&lt;DocumentStyle&gt;				A style for objects in the log document	sourceStyle	&lt;DocumentStyle&gt;				A style for methods in the log document	timestampStyle	&lt;DocumentStyle&gt;				A style for timestamps in the log document</body></comment><methods><class-id>Refactory.Browser.BrowserWatchLogTool</class-id> <category>private</category><body package="Browser-WatchLog">checkAlive	builder == nil ifTrue: [self release].	^builder ~~ nil</body><body package="Browser-WatchLog">newCounter	| counter |	counter := 0.	#{CraftedSmalltalk.WatchLog} ifDefinedDo: [:watchClass | counter := watchClass nextCounterValue].	^Text2.DocumentSpan		fromString: (counter printFormat: '???????')		style: timestampStyle</body><body package="Browser-WatchLog">newCounter: aCounterValue	^Text2.DocumentSpan		fromString: (aCounterValue printFormat: '???????')		style: timestampStyle</body><body package="Browser-WatchLog">newLineSeparator	^Text2.DocumentSpan fromString: (String with: (Character codePoint: 16r2028))</body><body package="Browser-WatchLog">newLog: aMessage	^Text2.DocumentSpan fromString: aMessage style: style</body><body package="Browser-WatchLog">newObject: anObject property: aSelector	^Text2.DocumentSpan fromString: (aSelector isEmpty ifTrue: [''] ifFalse: [aSelector trimSeparators, ': ']), (Trippy.Inspector safePrintStringOf: anObject) style: objectStyle</body><body package="Browser-WatchLog">newParagraphSeparator	^Text2.DocumentSpan fromString: (String with: (Character codePoint: 16r2029))</body><body package="Browser-WatchLog">newSource: aMethodDefinition	^Text2.DocumentSpan fromString: aMethodDefinition implementingClass name, '&gt;&gt;', aMethodDefinition selector asString style: sourceStyle</body><body package="Browser-WatchLog">newSpace	^Text2.DocumentSpan fromString: ' ' style: style</body><body package="Browser-WatchLog">newTab	^Text2.DocumentSpan fromString: '	' style: style</body><body package="Browser-WatchLog">newTimestamp	| now |	now := Timestamp now.	^Text2.DocumentSpan		fromString: (Locale current printAsTime: now policyNamed: #short) string		style: timestampStyle</body><body package="Browser-WatchLog">newTimestamp: now	^Text2.DocumentSpan		fromString: (Locale current printAsTime: now policyNamed: #short) string		style: timestampStyle</body></methods><methods><class-id>Refactory.Browser.BrowserWatchLogTool</class-id> <category>aspects</category><body package="Browser-WatchLog">document	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^document isNil		ifTrue:			[document := (Text2.Document fromString: '' style: style) asValue]		ifFalse:			[document]</body><body package="Browser-WatchLog">documentView	"Return the document widget in the tool, if it is built yet, otherwise nil."	builder == nil ifTrue: [^nil].	^(builder componentAt: #DocumentView)		ifNil: [nil]		ifNotNil: [:component | component widget]</body><body package="Browser-WatchLog">pauseButton	"Return the pause/resume button widget in the tool, if it is built yet, otherwise nil."	builder == nil ifTrue: [^nil].	^(builder componentAt: #PauseButton)		ifNil: [nil]		ifNotNil: [:component | component widget]</body></methods><methods><class-id>Refactory.Browser.BrowserWatchLogTool</class-id> <category>tab management</category><body package="Browser-WatchLog">isActive	^codeModel state isNil or: [codeModel state hasSelection and: [codeModel state isData not]]</body><body package="Browser-WatchLog">tabName	OSSystemSupport concreteClass == UnixSystemSupport ifTrue: [^#WatchLogUnix &lt;&lt; #browser &gt;&gt; 'Watches'].	^#WatchLog &lt;&lt; #browser &gt;&gt; '∂ Watches'</body></methods><methods><class-id>Refactory.Browser.BrowserWatchLogTool</class-id> <category>testing</category><body package="Browser-WatchLog">isActiveTool	^codeModel notNil and: [codeModel tabList selection == self]</body><body package="Browser-WatchLog">isInScope: aMethodDefinition	| state selectedSelectors selectedPundles mclass selectedClasses sclass |	(state := codeModel state) ifNil: [^false].		"If we have methods selected, make sure the selected methods includes aMethodDefinition&gt;&gt;selector"	selectedSelectors := state selectors.	(selectedSelectors notEmpty and: [(selectedSelectors includes: aMethodDefinition selector) not]) ifTrue: [^false].		"If we have classes selected, make sure the selected classes includes aMethodDefinition&gt;&gt;mclass"	mclass := aMethodDefinition implementingClass instanceBehavior.	sclass := mclass whichClassIncludesSelector: aMethodDefinition selector.	selectedClasses := Set new.	state selectedClasses do: [:each | selectedClasses addAll: each withAllSuperclasses].	(state selectedClasses notEmpty and: [(selectedClasses includes: sclass) not]) ifTrue: [^true].		"If we have pundles selected, make sure the selected pundles include aMethodDefinition&gt;&gt;mclass"	selectedPundles := state pundles.	selectedPundles isEmpty ifTrue: [^false].	selectedClasses := Set new.	selectedPundles do: [:pundle | pundle allClasses do: [:each | selectedClasses addAll: each actual withAllSuperclasses]].	^selectedClasses includes: sclass</body><body package="Browser-WatchLog">isMethodScope	^codeModel state notNil and: [codeModel state selectors notEmpty]</body><body package="Browser-WatchLog">shouldRecordEntry	^paused not and: [self isActiveTool]</body></methods><methods><class-id>Refactory.Browser.BrowserWatchLogTool</class-id> <category>logging</category><body package="Browser-WatchLog">log: aDocument	self documentView ifNotNil: [:view |		view invalidateSelectionWhile: [			view inputPosition: 0.			view collapse.			view document size &gt; 0 ifTrue: [view insert: (Text2.Document fromSegment: self newParagraphSeparator)].			view inputPosition: 0.			view collapse.			view insertDocument: aDocument].		self documentView isInFocusedWindow ifFalse: [			self documentView invalidateNow]]</body><body package="Browser-WatchLog">reportLogEvent: aWatchEvent	| entry |	self checkAlive ifFalse: [^self].	self shouldRecordEntry ifFalse: [^self].	(self isInScope: aWatchEvent method) ifFalse: [^self].	(entry := OrderedCollection new)		add: (self newTimestamp: aWatchEvent timestamp);		add: self newTab;		add: (self newCounter: aWatchEvent counter);		add: self newTab.	self isMethodScope ifFalse: [		entry			add: (self newSource: aWatchEvent method);			add: self newLineSeparator;			add: self newTab;			add: self newTab].	entry add: (self newLog: aWatchEvent description).	sources := sources addFirst: aWatchEvent description.	objects := objects copyWith: aWatchEvent receiver.	self log: (Text2.Document fromSegments: entry asArray)</body><body package="Browser-WatchLog">reportPropertyEvent: aWatchEvent	| entry |	self checkAlive ifFalse: [^self].	self shouldRecordEntry ifFalse: [^self].	(self isInScope: aWatchEvent method) ifFalse: [^self].	(entry := OrderedCollection new)		add: (self newTimestamp: aWatchEvent timestamp);		add: self newTab;		add: (self newCounter: aWatchEvent counter);		add: self newTab.	self isMethodScope ifFalse: [		entry			add: (self newSource: aWatchEvent method);			add: self newLineSeparator;			add: self newTab;			add: self newTab].	entry add: (self newObject: aWatchEvent value property: aWatchEvent property).	sources := sources addFirst: aWatchEvent method.	objects := objects copyWith: aWatchEvent value.	self log: (Text2.Document fromSegments: entry asArray)</body></methods><methods><class-id>Refactory.Browser.BrowserWatchLogTool</class-id> <category>actions</category><body package="Browser-WatchLog">clear	self initializeStyles.	sources := RunArray new.	objects := WeakArray new.	self document value: (Text2.Document fromString: '' style: style)</body><body package="Browser-WatchLog">pause	paused := paused not.	self updateWidgets</body></methods><methods><class-id>Refactory.Browser.BrowserWatchLogTool</class-id> <category>subcanvases</category><body package="Browser-WatchLog">updateDisplay	super updateDisplay.	self updateWidgets</body><body package="Browser-WatchLog">updateWidgets	self documentView ifNotNil: [:view | view showParagraphStriping: true].	self pauseButton ifNotNil: [:view | view label: (UI.Label with: (paused ifTrue: ['Resume'] ifFalse: ['Pause']))]</body></methods><methods><class-id>Refactory.Browser.BrowserWatchLogTool</class-id> <category>initialize-release</category><body package="Browser-WatchLog">initialize	super initialize.	paused := false.	self initializeStyles.	self clear.	#{CraftedSmalltalk.WatchLog} ifDefinedDo: [:watchClass |		watchClass			when: #log send: #reportLogEvent: to: self;			when: #object send: #reportPropertyEvent: to: self]</body><body package="Browser-WatchLog">initializeStyles	style := Text2.DocumentStyle default copy		tabs: #(160 224), (292 + 32 to: 2048 by: 32) asArray;		intern.	timestampStyle := style copy		color: (ColorValue brightness: 0.33);		intern.	sourceStyle := style copy		cursor: #fingerPointer;		action: (Text2.DocumentActionScript new			block: [:view :segment |				| methodDefinition |				methodDefinition := sources at: sources size - segment line paragraph number + 1.				RefactoringBrowser open navigator					selectClass: methodDefinition implementingClass;					setSelector: methodDefinition selector;					changed];			yourself);		intern.	objectStyle := style copy		cursor: #fingerPointer;		action: (Text2.DocumentActionScript new			block: [:view :segment | (objects at: objects size - segment line paragraph number + 1) inspect];			yourself);		intern</body><body package="Browser-WatchLog">release	#{CraftedSmalltalk.WatchLog} ifDefinedDo: [:watchClass |		watchClass			removeActionsWithReceiver: self forEvent: #log;			removeActionsWithReceiver: self forEvent: #object].	super release</body></methods><methods><class-id>Refactory.Browser.BrowserWatchLogTool class</class-id> <category>resources</category><body package="Browser-WatchLog">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&lt;new item&gt;' ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.BrowserWatchLogTool class</class-id> <category>interface specs</category><body package="Browser-WatchLog">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 1179 619 1379 819 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 0 0 70 0 25 0 ) 					#name: #PauseButton 					#model: #pause 					#label: 'Pause' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 75 0 0 0 145 0 25 0 ) 					#name: #ClearButton 					#model: #clear 					#label: 'Clear' 					#defaultable: true ) 				#(#{UI.DocumentViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 30 0 0 1 0 1 ) 					#name: #DocumentView 					#flags: 15 					#isOpaque: true 					#model: #document 					#isWrapped: true 					#isReadOnly: true 					#showHiddenCharacters: false 					#showLineStriping: false 					#continuousAccept: false 					#showInputCursor: false 					#showSelection: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>tool registration</category><body package="Browser-WatchLog">watchLogToolClass	&lt;tool: 10000&gt;	^BrowserWatchLogTool</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>CodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel menu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class></st-source>