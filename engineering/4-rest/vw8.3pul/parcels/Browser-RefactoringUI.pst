<?xml version="1.0"?><st-source><!-- Name: Browser-RefactoringUINotice: Copyright 1999-2016 Cincom Systems, Inc.  All rights reserved.Portions © 1998-2002 The Refactory, IncComment: This package contains the additional UI classes that are related to the refactorings.DbIdentifier: bear73DbTrace: 491975DbUsername: kgreekDbVersion: 8.2 - 3DevelopmentPrerequisites: #(#(#any 'Browser-BaseUI' '') #(#any 'Browser-Refactorings' ''))PackageName: Browser-RefactoringUIParcel: #('Browser-RefactoringUI')ParcelName: Browser-RefactoringUIPrerequisiteParcels: #(#('Browser-BaseUI' '') #('Browser-Refactorings' ''))PrintStringCache: (8.2 - 3,kgreek)Version: 8.2 - 3Date: 3:26:54 PM June 30, 2017 --><time-stamp>From VisualWorks®, Pre-Release 8.3 (jun17.4) of June 23, 2017 on June 30, 2017 at 3:26:54 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>VariableTypeDialog</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classList model </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Refactorings UI</category><attributes><package>Browser-RefactoringUI</package></attributes></class><comment><class-id>Refactory.Browser.VariableTypeDialog</class-id><body>VariableTypeDialog is a dialog that allows the user to enter the class of the object (i.e., its type). It is used when extracting a method to another class through an instance variable. We perform a quick and dirty type analysis that catches most types, but we allow the user to change what our guess is through this dialog.Instance Variables	classList	&lt;MultiSelectionInList&gt;	the list of possible types (selected ones are the real types)	model	&lt;RBRootNamespace&gt;	our model to use for getting class names</body></comment><class><name>MethodNameDialog</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>argumentList selectorHolder methodName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Refactorings UI</category><attributes><package>Browser-RefactoringUI</package></attributes></class><comment><class-id>Refactory.Browser.MethodNameDialog</class-id><body>MethodNameDialog is a dialog that allows one to enter a selector for a method. In addition to entering the selector, the user can also reorder the parameters.Instance Variables:	argumentList	&lt;SelectionInList&gt;	the method's parameters	methodName	&lt;RBMethodName&gt;	the method name object that contains both the parameters and the selector	selector	&lt;ValueModel&gt;	the symbol for the selector name</body></comment><class><name>CompositeRefactoryChangeInspector</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>changeDescription changeTree originalCode change dialog changesMenu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Refactorings UI</category><attributes><package>Browser-RefactoringUI</package></attributes></class><comment><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id><body>CompositeRefactoryChangeInspector is a special inspector for RefactoryChange objects.Instance Variables	change	&lt;RefactoryChange&gt;	the top level change object	changeDescription	&lt;ValueHolder on: String&gt;	the description of the change selected at the top	changes	&lt;SelectionInList on: RefactoryChange&gt;	the list of changes at the top of the window	changeTree	&lt;SelectionInTree on: RefactoryChange&gt;	the list of changes at the top of the window	dialog	&lt;SimpleDialog&gt;	if we are opened in a dialog, this is the containing dialog	originalCode	&lt;ValueHolder on: String&gt;	what the code in the image currently looks like for the change	changesMenu &lt;Menu&gt; menu in the change's list pane; instance side so we can disable/enable menu items on accept/cancel of edits in the text pane</body></comment><class><name>MethodNameAndInitialValueDialog</name><environment>Refactory.Browser</environment><super>Refactory.Browser.MethodNameDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>initialValueHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RefactoringUI</category><attributes><package>Browser-RefactoringUI</package></attributes></class><comment><class-id>Refactory.Browser.MethodNameAndInitialValueDialog</class-id><body>Add a simple text field to the superclass' method name dialog.Instance Variables	initialValueHolder	&lt;ValueModel&gt;	value holder around string to use as initial value for new parameter</body></comment><shared-variable><name>PromptOnRefactoring</name><environment>Refactory.Browser.BrowserApplicationModel</environment><private>false</private><constant>false</constant><category>variables</category><initializer>false</initializer><attributes><package>Browser-RefactoringUI</package></attributes></shared-variable><methods><class-id>Refactory.Browser.VariableTypeDialog</class-id> <category>initialize-release</category><body package="Browser-RefactoringUI">chooseClassesFromList: aCollection initialSelections: selectedItems 	self classList list: aCollection asList.	self classList selections: selectedItems</body><body package="Browser-RefactoringUI">initialize	super initialize.	model := RBRootNameSpace new.	classList := MultiSelectionInList new</body><body package="Browser-RefactoringUI">model: aRBNameSpace 	model := aRBNameSpace</body></methods><methods><class-id>Refactory.Browser.VariableTypeDialog</class-id> <category>aspects</category><body package="Browser-RefactoringUI">classList	^classList</body></methods><methods><class-id>Refactory.Browser.VariableTypeDialog</class-id> <category>private</category><body package="Browser-RefactoringUI">classModelsForName: aString	| classes |	classes := Set new.	model allClassesDo: 			[:each |			each name = aString asSymbol ifTrue: [classes add: each].			each fullName = aString ifTrue: [classes add: each]].	^classes</body></methods><methods><class-id>Refactory.Browser.VariableTypeDialog</class-id> <category>actions</category><body package="Browser-RefactoringUI">addMoreClassesToList	| selection |	selection := IncrementalSearchDialog selectClass ifNil: [^self].	(self classModelsForName: selection name asString) do: 			[:each |			(self classList list includes: each)				ifFalse: [self classList list add: each]].	self classList list sort: #displayString ascending</body></methods><methods><class-id>Refactory.Browser.VariableTypeDialog</class-id> <category>interface opening</category><body package="Browser-RefactoringUI">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self visualBlockFor: #classList		is: 			[:view :index | 			Label with: (view sequence at: index) fullName attributes: view textStyle]</body></methods><methods><class-id>Refactory.Browser.VariableTypeDialog class</class-id> <category>querying</category><body package="Browser-RefactoringUI">chooseClassesFromList: aCollection initialSelections: selectedItems model: aRBNameSpace cancel: cancelBlock 	| dialog |	dialog := self new.	dialog model: aRBNameSpace.	dialog chooseClassesFromList: aCollection initialSelections: selectedItems.	^dialog open 		ifTrue: [dialog classList selections]		ifFalse: [cancelBlock value]</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>aspects</category><body package="Browser-RefactoringUI">argumentList		^argumentList</body><body package="Browser-RefactoringUI">selectorHolder		^selectorHolder</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>accessing</category><body package="Browser-RefactoringUI">arguments	^argumentList list</body><body package="Browser-RefactoringUI">methodPattern		| stream |	stream := String new writeStream.	self selector numArgs &gt; 0		ifTrue:			[self selector keywords				with: self argumentList list				do:					[:keyword :arg | 					stream						nextPutAll: keyword;						nextPut: $ ;						nextPutAll: arg;						nextPut: $ ]]		ifFalse: [stream nextPutAll: self selector].	^stream contents</body><body package="Browser-RefactoringUI">selector	^selectorHolder value asSymbol</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>initialize-release</category><body package="Browser-RefactoringUI">arguments: aCollection		self argumentList list: aCollection asList.	methodName arguments: aCollection asOrderedCollection</body><body package="Browser-RefactoringUI">initialize		super initialize.	methodName := RBMethodName		selector: #''		arguments: OrderedCollection new.	argumentList := SelectionInList new.	selectorHolder := '' asValue.	self argumentList selectionIndexHolder onChangeSend: #changedSelection to:			self</body><body package="Browser-RefactoringUI">methodNameModel: anRBMethodName		self arguments: anRBMethodName arguments.	anRBMethodName selector notNil		ifTrue: [self selector: anRBMethodName selector].	methodName := anRBMethodName</body><body package="Browser-RefactoringUI">release	super release.	self argumentList selectionIndexHolder retractInterestsFor: self</body><body package="Browser-RefactoringUI">selector: aSelector	selectorHolder value: aSelector</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>changing</category><body package="Browser-RefactoringUI">changedSelection	| index |	index := self argumentList selectionIndex.	index &gt; 1 ifTrue: [self enable: #up] ifFalse: [self disable: #up].	index &lt; self argumentList list size &amp; (index &gt; 0)		ifTrue: [self enable: #down]		ifFalse: [self disable: #down].	self changedSelector</body><body package="Browser-RefactoringUI">changedSelector	methodName selector: self selector.	methodName isValid 		ifTrue: 			[self enable: #ok.			self printSelector]		ifFalse: 			[self disable: #ok.			self printNoSelector]</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>actions</category><body package="Browser-RefactoringUI">down	| index |	index := self argumentList selectionIndex.	methodName moveArgument: (self argumentList list at: index + 1)		before: self argumentList selection.	self argumentList list swap: index with: index + 1.	self argumentList selectionIndex: index + 1</body><body package="Browser-RefactoringUI">up	| index |	index := self argumentList selectionIndex.	methodName moveArgument: self argumentList selection		before: (self argumentList list at: index - 1).	self argumentList list swap: index with: index - 1.	self argumentList selectionIndex: index - 1</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>private</category><body package="Browser-RefactoringUI">canEnableAccept		^methodName isValid</body><body package="Browser-RefactoringUI">methodLabel: aString		(builder componentAt: #methodPattern)		ifNotNil: [:component | component labelString: aString]</body><body package="Browser-RefactoringUI">printNoSelector	self methodLabel: 		((#NA1pArgSelectorRequired &lt;&lt; #browser &gt;&gt; 'Not available: &lt;1p&gt; argument selector required') 			expandMacrosWith: self arguments size)</body><body package="Browser-RefactoringUI">printSelector	self methodLabel: self methodPattern</body><body package="Browser-RefactoringUI">updateOKButton		self canEnableAccept		ifTrue: [self enable: #ok]		ifFalse: [self disable: #ok]</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>interface opening</category><body package="Browser-RefactoringUI">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self changedSelection.	(self builder componentAt: #selectorField) widget controller 		continuousAccept: true</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog</class-id> <category>drag-drop</category><body package="Browser-RefactoringUI">dragDrop: aDragContext		| index movee list listView |	listView := aDragContext sourceData contextWidget.	index := self targetInsertionIndex: listView.	movee := self argumentList selection.	list := self arguments.	self argumentList		list:			((list first: index) copyWithout: movee) , (List with: movee)				, ((list allButFirst: index) copyWithout: movee).	methodName arguments: self arguments asOrderedCollection</body><body package="Browser-RefactoringUI">dragEntry: aDragContext		^#dropEffectMove</body><body package="Browser-RefactoringUI">dragExit: aDragContext		aDragContext sourceData contextWidget invalidate.	^#dropEffectNone</body><body package="Browser-RefactoringUI">dragOver: aDragContext	| listView index gc y |	listView := aDragContext sourceData contextWidget.	index := self targetInsertionIndex: listView.	listView invalidate.	listView topComponent checkForEvents.		[gc := listView graphicsContext.	gc paint: SymbolicPaint menuSelectionBackground.	y := index * listView lineGrid + 1.	gc		lineWidth: 2;		displayArcBBoxOrigin: 7 @ y - 5			extent: 9 asPoint			startAngle: 0			sweepAngle: 360;		displayLineFrom: 12 @ y			to: (listView bounds right - 8 min: listView preferredWidth) @ y]			uiEventFor: listView topComponent.	^#dropEffectMove</body><body package="Browser-RefactoringUI">dragStart: aController		| ds dm data |	data := DragDropData new.	data contextWindow: self mainWindow.	data contextWidget: aController view.	data contextApplication: self.	ds := DropSource new.	dm := DragDropManager withDropSource: ds withData: data.	dm doDragDrop</body><body package="Browser-RefactoringUI">targetInsertionIndex: aListView		| localY |	localY := (aListView		globalPointToLocal:			InputState default mousePoint - aListView topComponent globalOrigin) y.	^(localY / aListView lineGrid asFloat) rounded min: self arguments size</body><body package="Browser-RefactoringUI">wantToDrag: aController	^self argumentList selection notNil</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>aspects</category><body package="Browser-RefactoringUI">changeDescription	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^changeDescription isNil		ifTrue:			[changeDescription := Text new asValue]		ifFalse:			[changeDescription]</body><body package="Browser-RefactoringUI">changeTree	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^changeTree isNil		ifTrue:			[changeTree := SelectionInTree new]		ifFalse:			[changeTree]</body><body package="Browser-RefactoringUI">originalCode	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^originalCode isNil		ifTrue:			[originalCode := Text new asValue]		ifFalse:			[originalCode]</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>actions</category><body package="Browser-RefactoringUI">close	self closeRequest.	dialog notNil ifTrue: [dialog close]</body><body package="Browser-RefactoringUI">executeAll	self showWaitCursorWhile: [self performChange: change].	self close</body><body package="Browser-RefactoringUI">executeChange	self performChange: self changeTree selection</body><body package="Browser-RefactoringUI">inspectChange	self changeTree selection superInspect</body><body package="Browser-RefactoringUI">removeChange	| removedChanges |	change removeChange: self changeTree selection.	removedChanges := self changeTree selection withAllChanges.	self removeFromTree: removedChanges.	self changedChange</body><body package="Browser-RefactoringUI">removeClass	| class removedChanges |	class := self changeTree selection changeObject.	class isNil ifTrue: [^self].	removedChanges := OrderedCollection new.	change withAllChanges do: 			[:each | 			each changeObject == class 				ifTrue: 					[removedChanges addAll: each withAllChanges.					change removeChange: each]].	self removeFromTree: removedChanges.	self changedChange</body><body package="Browser-RefactoringUI">removeNameSpace		| removedChanges namespace |	(namespace := self changeTree selection definingNamespace) ifNil: [^self].	removedChanges := OrderedCollection new.	change withAllChanges		do:			[:each | 			each definingNamespace == namespace				ifTrue:					[removedChanges addAll: each withAllChanges.					change removeChange: each]].	self removeFromTree: removedChanges.	self changedChange</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>initialize-release</category><body package="Browser-RefactoringUI">initializeChangesMenu	changesMenu := self class changesMenu.</body><body package="Browser-RefactoringUI">initializeDialogMenu	changesMenu := self class dialogChangesMenu.</body><body package="Browser-RefactoringUI">initializeFor: aRefactoryChange 	change := aRefactoryChange.	self changeTree list: (TreeModel 				on: aRefactoryChange				displayRoot: false				childrenWith: [:each | each changes]).	self changeTree tree expandFully: 1.	self disableMenu: self changesMenu except: #('Execute All').</body><body package="Browser-RefactoringUI">inspect: aRefactoryChange	self initializeFor: aRefactoryChange.	self open</body><body package="Browser-RefactoringUI">inspectDialog: aRefactoryChange	self initializeDialogMenu.	self initializeFor: aRefactoryChange.	dialog := SimpleDialog new.	dialog openFor: self interface: #dialogSpec.</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>private</category><body package="Browser-RefactoringUI">originalCodeForChange	^self changeTree selection originalCode</body><body package="Browser-RefactoringUI">removeFromTree: removedChanges 	removedChanges 		reverseDo: [:each | self changeTree list remove: each ifAbsent: []]</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>menu</category><body package="Browser-RefactoringUI">changeDescriptionWidgetMenu	"We've changed the text widget to be editable but we want the non-editable menu, so that the user accepts or cancels edits from the 'navigator' widget menu, not from this menu.  Ideally, we would have Accept and Cancel in this menu as well or instead and enable/disable the 'navigator' widget's menu appropriately when it was invoked, but that is more work."	^TextEditorController editGroup</body><body package="Browser-RefactoringUI">changesMenu		changesMenu ifNil: [		| menu |		menu := self class changesMenu.		menu			augmentFrom: self class			to: CompositeRefactoryChangeInspector			menuName: #changesMenu			for: self.		changesMenu := menu ].	^changesMenu</body><body package="Browser-RefactoringUI">clearChangesMenu		changesMenu := nil</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>changing</category><body package="Browser-RefactoringUI">changedChange	| selectedChange changeText originalText originalFragments changeFragments |	selectedChange := self changeTree selection.	self dialogEnable: #executeAllButton.	selectedChange isNil		ifTrue: 			[changeDescription value: '' asText.			originalCode value: '' asText.			self disableMenu: self changesMenu except: #('Execute All').			^self].	changeText := selectedChange printString asText.	originalText := self originalCodeForChange asText.	originalFragments := originalText smalltalkOrWordAndWhitespaceFragments.	changeFragments := changeText smalltalkOrWordAndWhitespaceFragments.	(originalFragments differences: changeFragments)		do: #applyAnyDifferenceTextEmphases.	changeDescription value: changeText.	originalCode value: originalText.	self enableMenu: self changesMenu except: #('Accept' 'Cancel')</body><body package="Browser-RefactoringUI">changedSource	"The user has edited the text in the inspector and called 'Accept;  update the source in the AddMethodChange accordingly."	| selectedChange |	selectedChange := self changeTree selection.	selectedChange isNil ifTrue: [^self].	selectedChange source:		(RBParser parseMethod: self changeDescriptionString) formattedCode.	self enableMenu: self changesMenu except: #('Accept' 'Cancel').	self dialogEnable: #executeAllButton.</body><body package="Browser-RefactoringUI">changedText	self enableMenu: self changesMenu except: #('Execute' 'Execute All').	self dialogDisable: #executeAllButton.</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>accessing</category><body package="Browser-RefactoringUI">changeDescriptionString	^self changeDescription value string</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>widget properties</category><body package="Browser-RefactoringUI">dialogDisable: aSymbol	| component |	dialog isNil ifTrue: [^self].	dialog builder isNil ifTrue: [^self].	component := dialog builder componentAt: aSymbol.	component notNil ifTrue: [component disable].</body><body package="Browser-RefactoringUI">dialogEnable: aSymbol	| component |	dialog isNil ifTrue: [^self].	dialog builder isNil ifTrue: [^self].	component := dialog builder componentAt: aSymbol.	component notNil ifTrue: [component enable].</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector class</class-id> <category>interface opening</category><body package="Browser-RefactoringUI">openDialogOn: aRefactoryBuilder 	self new inspectDialog: aRefactoryBuilder</body><body package="Browser-RefactoringUI">openOn: aRefactoryBuilder 	self new inspect: aRefactoryBuilder</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector class</class-id> <category>notifications</category><body package="Browser-RefactoringUI">instanceMethodsChanged	Screen default allScheduledControllersDo: 			[:each | 			(each model isKindOf: self) ifTrue: [each model clearChangesMenu]]</body></methods><methods><class-id>Refactory.Browser.MethodNameAndInitialValueDialog</class-id> <category>aspects</category><body package="Browser-RefactoringUI">initialValue		^initialValueHolder value</body><body package="Browser-RefactoringUI">initialValue: aString		initialValueHolder value: aString</body><body package="Browser-RefactoringUI">initialValueHolder		^initialValueHolder</body></methods><methods><class-id>Refactory.Browser.MethodNameAndInitialValueDialog</class-id> <category>initialize-release</category><body package="Browser-RefactoringUI">initialize		super initialize.	initialValueHolder := String new asValue.	initialValueHolder onChangeSend: #updateOKButton to: self</body></methods><methods><class-id>Refactory.Browser.MethodNameAndInitialValueDialog</class-id> <category>private</category><body package="Browser-RefactoringUI">canEnableAccept		^super canEnableAccept and: [self initialValue notEmpty]</body></methods><methods><class-id>Refactory.Browser.Refactoring class</class-id> <category>accessing</category><body package="Browser-RefactoringUI">initializeRefactoringOptions	"self initializeRefactoringOptions"		RefactoringOptions := IdentityDictionary new.	RefactoringOptions		at: #implementorToInline			put:				[:ref :imps | 				BrowserApplicationModel basicNew					choose:						#WhichImpToInline &lt;&lt; #browser &gt;&gt; 'Which implementation should be inlined?'					fromList: imps					values: imps					lines: 5					cancel: [nil]];		at: #methodName			put:				[:ref :methodName | 				| dialog |				dialog := MethodNameDialog new methodNameModel: methodName.				dialog open					ifTrue: [methodName]					ifFalse: [nil]];		at: #selfArgumentName			put:				[:ref | 				ref					request:						#EnterNameForSelf &lt;&lt; #browser &gt;&gt;								'Enter name for argument to refer to "self" in extracted method'];		at: #selectVariableToMoveTo			put:				[:ref :class :selector | 				| parseTree nameList ignoreList |				parseTree := class parseTreeFor: selector.				parseTree isNil					ifTrue:						[parseTree := RBMethodNode							selector: #value							body: (RBSequenceNode statements: #())].				nameList := OrderedCollection new.				nameList					add:							(#DashesArgumentsDashes &lt;&lt; #browser &gt;&gt; '---- Arguments ----') asString;					addAll: parseTree argumentNames asSortedCollection;					add:							(#DashesInstanceVariablesDashes &lt;&lt; #browser &gt;&gt;										'---- Instance Variables ----') asString.				ignoreList := OrderedCollection					with: 1					with: nameList size.				nameList addAll: class allInstanceVariableNames asSortedCollection.				BrowserApplicationModel basicNew					choose:						#SelectVariableToMoveMethod &lt;&lt; #browser &gt;&gt;								'Select variable to move method into:'					fromList: nameList					values: nameList					ignore: ignoreList					initialSelection: nil					lines: 8					cancel: [nil]];		at: #variableTypes			put:				[:ref :types :selected | 				VariableTypeDialog					chooseClassesFromList: types					initialSelections: selected					model: ref model					cancel: [nil]];		at: #extractAssignment			put:				[:ref :varName | 				ref					confirm:						(#ExtractAssignmentOf1sAtEndQ &lt;&lt; #browser &gt;&gt;								'Do you want to extract the assignment of &lt;1s&gt;&lt;n&gt;at the end of selection?'							expandMacrosWith: varName)];		at: #inlineExpression			put:				[:ref :string | 				ref					confirm:						(#Inline1sOrUseTempQ &lt;&lt; #browser &gt;&gt;								'Do you want to inline "&lt;1s&gt;"? If not, it will be assigned as a temporary.'							expandMacrosWith: string)];		at: #alreadyDefined			put:				[:ref :class :selector | 				ref					confirm:						(#x1sDefinedIn2pUseAnywayQ &lt;&lt; #browser &gt;&gt;								'&lt;1s&gt; is already defined in the &lt;2p&gt; hierarchy.&lt;n&gt;Extracting it to an existing selector may change behavior.&lt;n&gt;Do you wish to use &lt;1s&gt; anyway?'							expandMacrosWith: selector with: class)];		at: #useExistingMethod			put:				[:ref :selector | 				ref					confirm:						(#UseExistingMethod1sQ &lt;&lt; #browser &gt;&gt;								'Use existing method &lt;1s&gt; instead of creating new method?'							expandMacrosWith: selector)];		at: #openBrowser			put: [:ref :env | env openEditor];		at: #sharedVariableScopeExpansion			put:				[:ref :var | 				BrowserApplicationModel basicNew					choose:						(#HowToHandle1sReferencesQ &lt;&lt; #browser &gt;&gt;								'How do you want to handle references to "&lt;1s&gt;"?' expandMacrosWith:								var)					fromList:						(Array							with: (#CreateAccessors &lt;&lt; #browser &gt;&gt; 'Create Accessors') asString							with: (#SpecificImport &lt;&lt; #browser &gt;&gt; 'Specific Import') asString)					values: #(#createAccessors: #specificImport:)					lines: 5					cancel: [nil]]</body><body package="Browser-RefactoringUI">promptOnRefactoring	^self refactoringOptions at: #promptOnRefactoring ifAbsent: [false]</body><body package="Browser-RefactoringUI">promptOnRefactoring: aBoolean	^self refactoringOptions at: #promptOnRefactoring put: aBoolean</body></methods><methods><class-id>Refactory.Browser.Refactoring</class-id> <category>utilities</category><body package="Browser-RefactoringUI">confirm: aString 	^Dialog confirm: aString</body><body package="Browser-RefactoringUI">promptOnRefactoring	^self options at: #promptOnRefactoring ifAbsent: [false]</body><body package="Browser-RefactoringUI">request: aString	^Dialog request: aString</body></methods><methods><class-id>Refactory.Browser.RefactoryChange</class-id> <category>user interface</category><body package="Browser-RefactoringUI">inspect	^CompositeRefactoryChangeInspector openOn: self asCompositeChange</body><body package="Browser-RefactoringUI">superInspect	^super inspect</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>error handling</category><body package="Browser-RefactoringUI">handleError: aBlock	"Errors:  the refactoring is aborted, the user is warned.  If an Error has a parameter, it is a block that is evaluated if the user confirms.	Warnings:  the user's response to a confirm popUp decides if the refactoring proceeds or aborts.  If a warning has a parameter, we use a true/false/nil 3-valued-logic confirmer.  The parameter is an Association whose key is the text of a third button in the confirmer and whose value is the block evaluated if that third button is pressed;  the result of evaluating the block then gives the response (we check == true so 'abort and do something else' blocks that do not return booleans can be reused from e.g. those of error parameters).  While some blocks will be trivial in time, others can be less so - we therefore show the wait cursor while running them."		^[self showWaitCursorWhile: aBlock]		on: Refactoring preconditionSignal		do:			[:ex | 			ex isResumable				ifTrue:					[| messageText response |					messageText := ex description last == $?						ifTrue: [ex description]						ifFalse:							[#x1sNProceedQ &lt;&lt; #browser &gt;&gt; '&lt;1s&gt;&lt;n&gt;Do you want to proceed?'								expandMacrosWith: ex description].					response := ex parameter						ifNil: [self confirm: messageText]						ifNotNil:							[self								confirm: messageText								orAlternate: ex parameter key].					response						ifNil:							[response := self showWaitCursorWhile: [ex parameter value value]].					response == true ifTrue: [ex resume]]				ifFalse:					[ex parameter						ifNil: [self warn: ex description]						ifNotNil:							[(self confirm: ex description) ifTrue: [ex parameter value]]].			ex return: nil]</body></methods><methods><class-id>Refactory.Browser.BrowserApplicationModel</class-id> <category>accessing</category><body package="Browser-RefactoringUI">performChange: aRefactoringChange 	RefactoryChangeManager instance performChange: aRefactoringChange</body><body package="Browser-RefactoringUI">performChange: aRefactoringChange withMessage: aString 	RefactoryChangeManager instance performChange: aRefactoringChange		withMessage: aString</body><body package="Browser-RefactoringUI">performRefactoring: aRefactoring	aRefactoring primitiveExecute.	aRefactoring promptOnRefactoring		ifTrue: [CompositeRefactoryChangeInspector openDialogOn: aRefactoring changes asCompositeChange]		ifFalse: [RefactoryChangeManager instance performChange: aRefactoring changes]</body></methods><methods><class-id>Refactory.Browser.VariableTypeDialog class</class-id> <category>interface specs</category><body package="Browser-RefactoringUI">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #SelectVariableType 				#defaultString: 'Select variable type' 				#catalogID: #browser ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 680 395 1000 655 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 30 0 0 1 ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #SelectClassesToMoveToC 						#defaultString: 'Select classes to move to:' 						#catalogID: #browser ) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 30 0 -5 1 -40 1 ) 					#name: #classList 					#model: #classList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.333333 -3 1 0.5 1 ) 					#name: #accept 					#model: #accept 					#label: 					#(#{Kernel.UserMessage} 						#key: #OK 						#defaultString: 'OK' 						#catalogID: #IDE ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.666666 -3 1 0.5 1 ) 					#name: #cancel 					#model: #cancel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #IDE ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} -5 1 15 0 1 0.5 ) 					#name: #addMoreClassesToList 					#model: #addMoreClassesToList 					#label: 					#(#{Kernel.UserMessage} 						#key: #MoreDots 						#defaultString: 'More...' 						#catalogID: #IDE ) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.MethodNameDialog class</class-id> <category>interface specs</category><body package="Browser-RefactoringUI">dialogControlsSpec	"Tools.UIPainter new openOnClass: self andSelector: #dialogControlsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #MethodName 				#defaultString: 'Method Name'  				#catalogID: #browser ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 840 525 1240 825 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} -5 0.5 0 0 1 0 ) 					#name: #ok 					#model: #accept 					#label: 					#(#{Kernel.UserMessage} 						#key: #OK 						#defaultString: 'OK' 						#catalogID: #IDE ) 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0.5 0 0 ) 					#name: #cancel 					#model: #cancel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #IDE ) 					#defaultable: true ) ) ) )</body><body package="Browser-RefactoringUI">mainControlsSpec	"Tools.UIPainter new openOnClass: self andSelector: #mainControlsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #MethodName 				#defaultString: 'Method Name' 				#catalogID: #IDE ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 840 525 1240 825 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 200 0 -35 1 250 0 ) 					#name: #methodPatternBox 					#label: 					#(#{Kernel.UserMessage} 						#key: #ResultingPattern 						#defaultString: 'Resulting Pattern' 						#catalogID: #IDE ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 25 0 0 1 ) 					#name: #selectorLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #SelectorC 						#defaultString: 'Selector:' 						#catalogID: #IDE ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 -35 1 50 0 ) 					#name: #selectorField 					#model: #selectorHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSelector ) 					#type: #string ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 75 0 0 1 ) 					#name: #argumentLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #ArgumentOrderC 						#defaultString: 'Argument Order:' 						#catalogID: #IDE ) ) 				#(#{UI.SequenceViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragExitSelector 						#dragExit: #dragEnterSelector 						#dragEntry: #dragStartSelector 						#dragStart: #dragOkSelector 						#wantToDrag: #dropSelector 						#dragDrop: #dragOverSelector 						#dragOver: ) 					#layout: #(#{Graphics.LayoutFrame} 5 0 75 0 -35 1 190 0 ) 					#name: #argumentList 					#model: #argumentList ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -30 1 75 0 -5 1 100 0 ) 					#name: #up 					#isOpaque: true 					#model: #up 					#label: #upImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -30 1 105 0 -5 1 130 0 ) 					#name: #down 					#isOpaque: true 					#model: #down 					#label: #downImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 220 0 -45 1 245 0 ) 					#name: #methodPattern 					#label: 					#(#{Kernel.UserMessage} 						#key: #LTnoSelectorGT 						#defaultString: '&lt;no selector&gt;' 						#catalogID: #IDE ) ) ) ) )</body><body package="Browser-RefactoringUI">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #MethodName 				#defaultString: 'Method Name' 				#catalogID: #browser ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 840 525 1240 825 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 265 0 ) 					#name: #mainControlsCanvas 					#flags: 0 					#minorKey: #mainControlsSpec ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 265 0 0 1 0 1 ) 					#name: #dialogControlsComposite 					#flags: 0 					#minorKey: #dialogControlsSpec ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector</class-id> <category>menu</category><body package="Browser-RefactoringUI">menuItemStandardInspector	&lt;menuItem: 'Standard Inspect'		nameKey: nil		enablement: nil		indication: nil		menu: #(#changesMenu)		position: 50.1&gt;	self inspectChange</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector class</class-id> <category>interface specs</category><body package="Browser-RefactoringUI">dialogSpec	"Tools.UIPainter new openOnClass: self andSelector: #dialogSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #Changes 				#defaultString: 'Changes' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 544 383 1152 834 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -2 0.333333 ) 					#name: #changeTree 					#model: #changeTree 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedChange ) 					#menu: #changesMenu 					#useModifierKeys: true 					#selectionType: #highlight 					#useIcons: #none ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.333333 0 1 2 0.333333 ) 					#name: #ResizingSplitter1 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 50 					#aboveWidgets: 'changes changeTree ' 					#belowWidgets: 'changeDescription ResizingSplitter2 originalCode ImageLabel ChangeLabel' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 2 0 2 0.333333 ) 					#name: #ImageLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #ImageC 						#defaultString: 'Image:' 						#catalogID: #browser ) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 29 0.333333 -2 0.5 -30 1 ) 					#name: #originalCode 					#model: #originalCode 					#isReadOnly: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0.3333 2 0.5 -30 1 ) 					#name: #ResizingSplitter2 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'originalCode' 					#belowWidgets: 'changeDescription ChangeLabel' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 2 0.5 2 0.333333 ) 					#name: #ChangeLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #ChangeC 						#defaultString: 'Change:' 						#catalogID: #browser ) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 29 0.333333 0 1 -30 1 ) 					#name: #changeDescription 					#model: #changeDescription 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedText ) 					#menu: #changeDescriptionWidgetMenu 					#isReadOnly: false 					#tabRequiresControl: true ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -29 1 0 1 -28 1 ) 					#name: #Divider1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 0.333333 -26 1 50 0.333333 -1 1 ) 					#name: #executeAllButton 					#model: #executeAll 					#label: 					#(#{Kernel.UserMessage} 						#key: #ExecuteAll						#defaultString: 'Execute All' 						#catalogID: #IDE ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 0.666666 -26 1 50 0.666666 -1 1 ) 					#name: #abortButton 					#model: #close 					#label: 					#(#{Kernel.UserMessage} 						#key: #Close						#defaultString: 'Close' 						#catalogID: #IDE ) 					#defaultable: true ) ) ) )</body><body package="Browser-RefactoringUI">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #Changes #defaultString: 'Changes' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1408 1051 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -2 0.333333 ) 					#name: #changeTree 					#model: #changeTree 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedChange ) 					#menu: #changesMenu 					#useModifierKeys: true 					#selectionType: #highlight 					#useIcons: #none ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.333333 0 1 2 0.333333 ) 					#name: #ResizingSplitter1 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'changes changeTree ' 					#belowWidgets: 'changeDescription ResizingSplitter2 originalCode ImageLabel ChangeLabel' ) 			#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 2 0 2 0.333333 ) 					#name: #ImageLabel 					#label: #(#{Kernel.UserMessage} #key: #ImageC #defaultString: 'Image:' #catalogID: #browser) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 29 0.333333 -2 0.5 0 1 ) 					#name: #originalCode 					#model: #originalCode 					#isReadOnly: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.5 0 0.3333 2 0.5 0 1 ) 					#name: #ResizingSplitter2 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'originalCode' 					#belowWidgets: 'changeDescription ChangeLabel' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 2 0.5 2 0.333333 ) 					#name: #ChangeLabel 					#label: #(#{Kernel.UserMessage} #key: #ChangeC #defaultString: 'Change:' #catalogID: #browser) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 29 0.333333 0 1 0 1 ) 					#name: #changeDescription 					#model: #changeDescription 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #changedText ) 					#isReadOnly: false 					#menu: #changeDescriptionWidgetMenu ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CompositeRefactoryChangeInspector class</class-id> <category>resources</category><body package="Browser-RefactoringUI">changesMenu	"MenuEditor new openOnClass: self andSelector: #changesMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #ExecuteAll #defaultString: 'Execute All' #catalogID: #browser) 				#value: #executeAll ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Execute #defaultString: 'Execute' #catalogID: #browser) 				#value: #executeChange ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Accept #defaultString: 'Accept' #catalogID: #browser)				#value: #changedSource ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Cancel #defaultString: 'Cancel' #catalogID: #browser)				#value: #changedChange ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Remove #defaultString: 'Remove' #catalogID: #browser) 				#value: #removeChange ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveClass #defaultString: 'Remove Class' #catalogID: #browser) 				#value: #removeClass ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveNameSpace #defaultString: 'Remove Name Space' #catalogID: #browser) 				#nameKey: #removeNameSpace 				#value: #removeNameSpace ) ) #(2 2 3 ) nil ) decodeAsLiteralArray</body><body package="Browser-RefactoringUI">dialogChangesMenu	"MenuEditor new openOnClass: self andSelector: #dialogChangesMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Execute #defaultString: 'Execute' #catalogID: #browser) 				#value: #executeChange ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Accept #defaultString: 'Accept' #catalogID: #browser)				#value: #changedSource ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Cancel #defaultString: 'Cancel' #catalogID: #browser)				#value: #changedChange ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Remove #defaultString: 'Remove' #catalogID: #browser) 				#value: #removeChange ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveClass #defaultString: 'Remove Class' #catalogID: #browser) 				#value: #removeClass ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveNameSpace #defaultString: 'Remove Name Space' #catalogID: #browser) 				#nameKey: #removeNameSpace 				#value: #removeNameSpace ) ) #(1 2 3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.MethodNameAndInitialValueDialog class</class-id> <category>interface specs</category><body package="Browser-RefactoringUI">initialValueSpec	"Tools.UIPainter new openOnClass: self andSelector: #initialValueSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #MethodName 				#defaultString: 'Method Name' 				#catalogID: #browser ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 838 ) 			#bounds: #(#{Graphics.Rectangle} 840 525 1240 875 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 26 0 0 1 ) 					#name: #initialValueLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #InitialValueC 						#defaultString: 'Initial Value:' 						#catalogID: #IDE ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 26 0 -35 1 51 0 ) 					#name: #initialValueHolder 					#model: #initialValueHolder 					#type: #string ) ) ) )</body><body package="Browser-RefactoringUI">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #sizeType #specifiedSize #positionType #positionSystemDefault #openType #advanced ) 			#label: 			#(#{Kernel.UserMessage} 				#key: #MethodNameAndInitialValue 				#defaultString: 'Method Name &amp; Initial Value' 				#catalogID: #IDE ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 803 509 1203 879 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 265 0 ) 					#name: #mainControlsCanvas 					#flags: 0 					#minorKey: #mainControlsSpec ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 260 0 0 1 330 0 ) 					#name: #initialValueCanvas 					#flags: 0 					#minorKey: #initialValueSpec ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 330 0 0 1 0 1 ) 					#name: #dialogControlsComposite 					#flags: 0 					#minorKey: #dialogControlsSpec ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>BrowserApplicationModel</name><environment>Refactory.Browser</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>Refactoring</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model options methodClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Refactorings</category><attributes><package>Browser-Refactorings</package></attributes></class><class><name>RefactoryChange</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class><class><name>BrowserDialog</name><environment>Refactory.Browser</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BaseUI</package></attributes></class></st-source>