<?xml version="1.0"?><st-source><!-- Name: Lens-BOSSNotice: Copyright 2011-2013 Cincom Systems, Inc.  All rights reserved.Comment: Contains extensions to allow Lens objects to be stored in BOSS.DbIdentifier: bear73DbTrace: 400475DbUsername: nrossDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'Lens-Runtime' '') #(#any 'BOSS' ''))PackageName: Lens-BOSSParcel: #('Lens-BOSS')ParcelName: Lens-BOSSPrerequisiteDescriptions: #(#(#name 'Lens-Runtime' #componentType #package) #(#name 'BOSS' #componentType #package))PrerequisiteParcels: #(#('Lens-Runtime' '') #('BOSS' ''))PrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1Date: 7:08:22 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 7:08:22 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Lens.LensRegistry</class-id> <category>binary storage</category><body package="Lens-BOSS">representBinaryOn: binWriter	" Since a LensRegistry doesn't actually	store Associations, represent it more efficiently	as a sequence of keys and values. "	| cont creator |	cont := (Array new: self size * 2) writeStream.	self keysAndValuesDo: [:key :value | cont nextPut: key; nextPut: value].	creator := (MessageSend			receiver: self class			selector: #withKeysAndValues:			argument: cont contents).	^binWriter expectCycles		ifTrue: [AbstractBinaryObjectStorage indexImportSendSelf -&gt;			(Array				with: #createSpecialObject:				with: (BOSSSpecialObjectLoader message: creator))]		ifFalse: [creator]</body></methods><methods><class-id>Lens.LensCommandVariable</class-id> <category>binary storage</category><body package="Lens-BOSS">representBinaryOn: binWriter	" By default, objects do nothing special	to represent themselves in binary form. "	^nil</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>LensCommandVariable</name><environment>Lens</environment><super>Lens.LensExpressionSurrogate</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name variable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-Private-Transporter</category><attributes><package>Lens-Runtime</package></attributes></class><class><name>LensRegistry</name><environment>Lens</environment><super>Core.Dictionary</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>keyArray </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-Private-Support</category><attributes><package>Lens-Runtime</package></attributes></class></st-source>