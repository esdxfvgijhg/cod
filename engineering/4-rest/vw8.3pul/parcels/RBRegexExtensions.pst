<?xml version="1.0"?><st-source><!-- Name: RBRegexExtensionsNotice: Copyright 2002-2013 Cincom Systems, Inc.  All rights reserved.Comment: Provides a Regular Expression browser tab that allows to search through source code using regular expressions, or to replace matches of a regular expression. Requires Regex11 goodie.DbIdentifier: bear73DbTrace: 400796DbUsername: nrossDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'Browser-SmalllintUI' '') #(#any 'Regex11' ''))PackageName: RBRegexExtensionsParcel: #('RBRegexExtensions')PrerequisiteParcels: #(#('Browser-SmalllintUI' '') #('Regex11' ''))PrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1Date: 7:16:09 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 7:16:09 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>RegexCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.SmalllintCodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>searchHolder replaceHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>RBRegexExtensions</package></attributes></class><comment><class-id>Refactory.Browser.RegexCodeTool</class-id><body>RegexCodeTool is the browser tab that allows to enter a regular expression and an optional substitution pattern, and search for (and optionally replace) occurrences of the regular expression.Instance Variables:	searchHolder	&lt;ValueHolder on: String&gt;	Holds onto the string with the regular expression to search for.	replaceHolder	&lt;ValueHolder on: String&gt;	Holds onto a substitution pattern, if provided. A substitution pattern can be a string, or a string with subexpression placeholders. See the comment to RegexTransformationRule for details.</body></comment><class><name>RegexTransformationRule</name><environment>Refactory.Browser</environment><super>Refactory.Browser.TransformationRule</super><private>false</private><indexed-type>none</indexed-type><inst-vars>regex replacementString </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Lint</category><attributes><package>RBRegexExtensions</package></attributes></class><comment><class-id>Refactory.Browser.RegexTransformationRule</class-id><body>RegexTransformationRule transforms code by searching for a regular expression in the source and replacing its matches with replacementString (see below).Instance Variables:	regex	&lt;RxMatcher&gt;	The regular expression matcher used in the search.	replacementString	&lt;String&gt;	The substitution pattern. In the simplest form, it is a string that replaces all matches of the regular expression. It can also contain subexpression references. A subexpression reference has the form $N, where N is the number of the subexpression (subexpression numbering is explained in Regex documentation). During substitution, subexpression references are expanded to substrings of the original code that matched parts of the regular expression.</body></comment><methods><class-id>Refactory.Browser.RegexCodeTool</class-id> <category>private</category><body package="RBRegexExtensions">doesRegex: aRegex match: aString 	aRegex matchesIn: aString do: [:each | ^true].	^false</body></methods><methods><class-id>Refactory.Browser.RegexCodeTool</class-id> <category>aspects</category><body package="RBRegexExtensions">replaceHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^replaceHolder isNil		ifTrue:			[replaceHolder := String new asValue]		ifFalse:			[replaceHolder]</body><body package="RBRegexExtensions">searchHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^searchHolder isNil		ifTrue:			[searchHolder := String new asValue]		ifFalse:			[searchHolder]</body></methods><methods><class-id>Refactory.Browser.RegexCodeTool</class-id> <category>updating</category><body package="RBRegexExtensions">updateRunning	super updateRunning.	checkerProcess notNil 		ifTrue: [self disable: #replace]		ifFalse: [self enable: #replace]</body></methods><methods><class-id>Refactory.Browser.RegexCodeTool</class-id> <category>actions</category><body package="RBRegexExtensions">find	| regex rule |	regex := self searchHolder value asRegex.	rule := BlockLintRule new.	rule name: (#MatchesRegularExpression &lt;&lt; #browser &gt;&gt; 'Matches regular expression') asString.	rule methodBlock: 			[:context :result | 			(self doesRegex: regex match: context methodSource) 				ifTrue: [result addClass: context selectedClass selector: context selector]].	self runRule: rule</body><body package="RBRegexExtensions">replace	self runRule: (RegexTransformationRule 				named: (#RegularExpressionTransformations &lt;&lt; #browser &gt;&gt; 'Regular Expression Transformations') asString				searchFor: self searchHolder value				replaceWith: self replaceHolder value)</body></methods><methods><class-id>Refactory.Browser.RegexCodeTool</class-id> <category>tab APIs</category><body package="RBRegexExtensions">tabName	^(#RegularExpression &lt;&lt; #browser &gt;&gt; 'Regular Expression') asString</body></methods><methods><class-id>Refactory.Browser.RegexTransformationRule</class-id> <category>accessing</category><body package="RBRegexExtensions">checkMethod: aSmalllintContext 	| source changed |	changed := false.	source := regex copy: aSmalllintContext methodSource				translatingMatchesUsing: 					[:each | 					changed := true.					self replacementStringForMatch].	changed 		ifTrue: 			[changes 				compile: source				in: aSmalllintContext selectedClass				classified: aSmalllintContext protocol]</body></methods><methods><class-id>Refactory.Browser.RegexTransformationRule</class-id> <category>private</category><body package="RBRegexExtensions">replacementStringForMatch	| readStream char writeStream |	writeStream := WriteStream on: (String new: 20).	readStream := ReadStream on: replacementString.	[readStream atEnd] whileFalse: 			[char := readStream next.			char == $$ 				ifTrue: [writeStream nextPutAll: (self stringForMatch: readStream)]				ifFalse: [writeStream nextPut: char]].	^writeStream contents</body><body package="RBRegexExtensions">stringForMatch: readStream 	| submatch |	readStream atEnd ifTrue: [^'$'].	(readStream peekFor: $_) ifTrue: [^regex subexpression: 1].	submatch := self submatchIn: readStream.	^submatch isNil ifTrue: ['$'] ifFalse: [submatch]</body><body package="RBRegexExtensions">submatchIn: readStream 	| submatches count char |	submatches := regex subexpressionCount - 1.	count := 0.	[readStream atEnd] whileFalse: 			[char := readStream peek.			(char between: $0 and: $9) 				ifFalse: [^regex subexpression: count + 1].			count := count * 10 + (char asInteger - $0 asInteger).			count &gt; submatches 				ifTrue: 					[count := count // 10.					^regex subexpression: count + 1].			readStream next].	^regex subexpression: count + 1</body></methods><methods><class-id>Refactory.Browser.RegexTransformationRule</class-id> <category>initialize-release</category><body package="RBRegexExtensions">searchFor: aString replaceWith: replaceString 	regex := aString asRegex.	replacementString := replaceString</body></methods><methods><class-id>Refactory.Browser.RegexTransformationRule class</class-id> <category>instance creation</category><body package="RBRegexExtensions">named: aString searchFor: searchString replaceWith: replaceString 	^(self new)		name: aString;		searchFor: searchString replaceWith: replaceString;		yourself</body></methods><methods><class-id>Refactory.Browser.RegexCodeTool class</class-id> <category>resources</category><body package="RBRegexExtensions">mainMenu	"MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #SearchDots #defaultString: 'Search...' #catalogID: #browser) 				#nameKey: #'Rewriter Search' 				#value: 				#action: ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #ReplaceDots #defaultString: 'Replace...' #catalogID: #browser) 				#nameKey: #'Rewriter Replace' 				#value: 				#action: ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.RegexCodeTool class</class-id> <category>interface specs</category><body package="RBRegexExtensions">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 512 384 940 681 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 2 2 ) 					#name: #Label7 					#label: #(#{Kernel.UserMessage} #key: #SearchForC #defaultString: 'Search for:' #catalogID: #browser) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 2 0 -2 1 27 0 ) 					#name: #search 					#model: #searchHolder ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 2 30 ) 					#name: #Label6 					#label: #(#{Kernel.UserMessage} #key: #ReplaceWithC #defaultString: 'Replace with:' #catalogID: #browser) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 30 0 -2 1 55 0 ) 					#name: #replace 					#model: #replaceHolder ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 90 0 0 1 92 0 ) 					#name: #Divider1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -40 0.25 96 0 40 0.25 120 0 ) 					#name: #run 					#model: #find 					#label: #(#{Kernel.UserMessage} #key: #SearchDots #defaultString: 'Search...' #catalogID: #browser) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -40 0.5 96 0 40 0.5 120 0 ) 					#name: #replace 					#model: #replace 					#label: #(#{Kernel.UserMessage} #key: #ReplaceDots #defaultString: 'Replace...' #catalogID: #browser) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -40 0.75 96 0 40 0.75 120 0 ) 					#name: #abort 					#flags: 40 					#model: #abort 					#label: #(#{Kernel.UserMessage} #key: #Abort #defaultString: 'Abort' #catalogID: #browser) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 58 0 -127 1 83 0 ) 					#name: #action 					#flags: 0 					#model: #actionHolder ) 				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.LayoutFrame} -125 1 58 0 -2 1 83 0 ) 					#name: #percentDone 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #blue ) 						#setBackgroundColor: #(#{Graphics.ColorValue} #white ) ) 					#model: #percentDoneHolder 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>tool registration</category><body package="RBRegexExtensions">regexToolClass	&lt;tool&gt;	^RegexCodeTool</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>SmalllintCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lintRuleList transformationList percentDoneHolder actionHolder checkerProcess isTransformationRule </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-SmalllintUI</package></attributes></class><class><name>TransformationRule</name><environment>Refactory.Browser</environment><super>Refactory.Browser.LintRule</super><private>false</private><indexed-type>none</indexed-type><inst-vars>changes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Lint</category><attributes><package>Browser-Smalllint</package></attributes></class></st-source>