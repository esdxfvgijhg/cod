<?xml version="1.0"?><st-source><!-- Name: ExternalWebBrowserNotice: Copyright 1999-2013 Cincom Systems, Inc.  All rights reserved.Comment: This package provides a simple API for launching a browser.  If the user is on Windows, or using Netscape/Mozilla, it will reuse an existing browser if so told.The API (for now) isExternalWebBrowser open: 'alink'At this time (27 Mar 2007), it is very much an evolvant work in progress. I'd like to end up with something similar in utility to:http://docs.python.org/lib/module-webbrowser.htmlDbIdentifier: bear73DbTrace: 400119DbUsername: nrossDbVersion: 7.10 - 1PackageName: ExternalWebBrowserParcel: #('ExternalWebBrowser')ParcelName: ExternalWebBrowserPrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1VisualworksVersion: VisualWorks®, Pre-Release 7.5 (jan07.2) of January 15, 2007Date: 5:37:39 AM April 3, 2013 --><time-stamp>From VisualWorks®, Pre-Release 7.10 (mar13.4) of March 22, 2013 on April 3, 2013 at 5:37:39 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ExternalWebBrowser</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>activeWindow shouldLaunchNewWindow currentExternalBrowser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ExternalWebBrowser</package></attributes></class><comment><class-id>ExternalWebBrowser</class-id><body>BrowserLaunchService is the object that handles the launching of external browsers across platforms.</body></comment><class><name>UnixBrowserLaunchService</name><environment>Smalltalk</environment><super>ExternalWebBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browsing-Assist</category><attributes><package>ExternalWebBrowser</package></attributes></class><comment><class-id>UnixBrowserLaunchService</class-id><body>UnixBrowserLaunchService launches a default Unix browser</body></comment><class><name>BrowserLaunchFailed</name><environment>Smalltalk</environment><super>Core.Exception</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browsing-Assist</category><attributes><package>ExternalWebBrowser</package></attributes></class><comment><class-id>BrowserLaunchFailed</class-id><body>BrowserLaunchFailed is raised if a default browser was not found </body></comment><class><name>WindowsBrowserLaunchService</name><environment>Smalltalk</environment><super>ExternalWebBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browsing-Assist</category><attributes><package>ExternalWebBrowser</package></attributes></class><comment><class-id>WindowsBrowserLaunchService</class-id><body>WindowsBrowserLaunchService launches a default Windows browser</body></comment><class><name>OsxBrowserLaunchService</name><environment>Smalltalk</environment><super>ExternalWebBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browsing-Assist</category><attributes><package>ExternalWebBrowser</package></attributes></class><comment><class-id>OsxBrowserLaunchService</class-id><body>Uses the 'open' command. From the 'open' man page..."... The open command opens a file (or a directory or URL), just as if you had     double-clicked the file's icon. If no application name is specified, the     default application as determined via LaunchServices is used to open the     specified files.     If the file is in the form of a URL, the file will be opened as a URL..."</body></comment><methods><class-id>ExternalWebBrowser</class-id> <category>accessing</category><body package="ExternalWebBrowser">activeWindow	^activeWindow</body><body package="ExternalWebBrowser">activeWindow: anObject	activeWindow := anObject</body><body package="ExternalWebBrowser">currentExternalBrowser	^(currentExternalBrowser isNil or: [currentExternalBrowser isEmpty])		ifTrue: [currentExternalBrowser := self class getDefaultBrowserPath]		ifFalse: [currentExternalBrowser]</body><body package="ExternalWebBrowser">currentExternalBrowser: anObject	currentExternalBrowser := anObject.</body><body package="ExternalWebBrowser">shouldLaunchNewWindow	^shouldLaunchNewWindow isNil		ifTrue: [shouldLaunchNewWindow := false]		ifFalse: [shouldLaunchNewWindow]</body><body package="ExternalWebBrowser">shouldLaunchNewWindow: anObject	shouldLaunchNewWindow := anObject</body></methods><methods><class-id>ExternalWebBrowser</class-id> <category>private</category><body package="ExternalWebBrowser">fallbackBrowserOpen: link	BrowserLaunchFailed signalWith: 'Browser Launch Failed. \Cannot find a default browser' withCRs</body><body package="ExternalWebBrowser">privateOpenBrowserOn: link	self subclassResponsibility</body></methods><methods><class-id>ExternalWebBrowser</class-id> <category>api</category><body package="ExternalWebBrowser">openBrowserOn: link 	[self privateOpenBrowserOn: link] fork</body></methods><methods><class-id>ExternalWebBrowser class</class-id> <category>testing</category><body package="ExternalWebBrowser">matchesPlatform	^self subclassResponsibility</body></methods><methods><class-id>ExternalWebBrowser class</class-id> <category>accessing</category><body package="ExternalWebBrowser">current	"Transitional implementation. we're going to move all this instance side stuff over to the class side real soon now."	^self new</body></methods><methods><class-id>ExternalWebBrowser class</class-id> <category>instance creation</category><body package="ExternalWebBrowser">new	^self subclassForPlatform basicNew</body><body package="ExternalWebBrowser">new: aWindow	^self new activeWindow: aWindow</body><body package="ExternalWebBrowser">subclassForPlatform	"Classes deeper in the heirarchy take precedence over their parents"	self allSubclasses do: [:subclass | 		subclass subclassForPlatform ifNotNil: [:anAnswer | ^anAnswer].		subclass matchesPlatform ifTrue: [^subclass]].	^nil</body></methods><methods><class-id>ExternalWebBrowser class</class-id> <category>API</category><body package="ExternalWebBrowser">open: aString	self current openBrowserOn: aString</body></methods><methods><class-id>ExternalWebBrowser class</class-id> <category>defaults</category><body package="ExternalWebBrowser">getDefaultBrowserPath	^nil</body></methods><methods><class-id>UnixBrowserLaunchService</class-id> <category>private-unix</category><body package="ExternalWebBrowser">getBrowserArgs: link	^self isMozillaBrowser ifTrue: [self getMozillaArgs: link] ifFalse: [Array with: link]</body><body package="ExternalWebBrowser">openExistingUnix: link	^UnixProcess forkJob: self currentExternalBrowser arguments: (self getBrowserArgs: link)</body><body package="ExternalWebBrowser">openNewUnix: link	^UnixProcess forkJob: self currentExternalBrowser arguments: (Array with: link)</body></methods><methods><class-id>UnixBrowserLaunchService</class-id> <category>private-mozilla</category><body package="ExternalWebBrowser">getMozillaArgs: link	self shouldLaunchNewWindow ifTrue: [^Array with: link].	^Array with: '-remote' with: 'openURL(''' , link , ''')'</body></methods><methods><class-id>UnixBrowserLaunchService</class-id> <category>testing</category><body package="ExternalWebBrowser">isFailedReuseOfMozilla: resultString	self isMozillaBrowser		ifFalse: [^false].	^'*no running*' match: resultString asLowercase</body><body package="ExternalWebBrowser">isMozillaBrowser	| browserString |	browserString := self currentExternalBrowser asLowercase.	^('*netscape*' match: browserString) or: ['*mozilla*' match: browserString]</body></methods><methods><class-id>UnixBrowserLaunchService</class-id> <category>api</category><body package="ExternalWebBrowser">privateOpenBrowserOn: link	| result |	result := UnixProcess forkJob: self currentExternalBrowser arguments: (self getBrowserArgs: link).	(self isFailedReuseOfMozilla: result) ifTrue: [self openNewUnix: link]</body></methods><methods><class-id>UnixBrowserLaunchService class</class-id> <category>testing</category><body package="ExternalWebBrowser">matchesPlatform	^OSHandle currentOS== #unix and: [OsxBrowserLaunchService matchesPlatform not]</body></methods><methods><class-id>UnixBrowserLaunchService class</class-id> <category>defaults</category><body package="ExternalWebBrowser">getDefaultBrowserPath	"Return an empty string if the browser can not be found, clients are not expecting nil."	^#('/etc/alternatives/x-www-browser' '/usr/bin/gnome-open' '/usr/bin/xdg-open')		detect: [:path | path asFilename exists] ifNone: [String new]</body></methods><methods><class-id>WindowsBrowserLaunchService</class-id> <category>api</category><body package="ExternalWebBrowser">privateOpenBrowserOn: link	| os |	os := OSSystemSupport concreteClass new.	os ShellExecute: nil		with: (os encodeWide: 'open')		with: (os encodeWide: link)		with: nil		with: nil		with: 1</body></methods><methods><class-id>WindowsBrowserLaunchService class</class-id> <category>defaults</category><body package="ExternalWebBrowser">getDefaultBrowserPath	"try two different tacks to get the default browser"	| app |	app := self getWinKey: '' using: #('http' 'shell' 'open' 'command') andRoot: #HKEY_CLASSES_ROOT.	app isNil ifTrue: [		app := self getWinKey: '' using: #('htmlfile' 'shell' 'open' 'command') andRoot: #HKEY_CLASSES_ROOT].	^app</body><body package="ExternalWebBrowser">getWinKey: keyname using: path andRoot: root	| ifc rootCode |	ifc := OSSystemSupport concreteClass new.	rootCode := ifc perform: root.	^ifc getVariableWithRoot: rootCode path: path name: keyname ifAbsent: [nil]</body></methods><methods><class-id>WindowsBrowserLaunchService class</class-id> <category>testing</category><body package="ExternalWebBrowser">matchesPlatform	^OSHandle currentOS == #win32</body></methods><methods><class-id>OsxBrowserLaunchService</class-id> <category>api</category><body package="ExternalWebBrowser">privateOpenBrowserOn: link	[UnixProcess		forkJob: 'open'		arguments: (Array with: link)]		on: Error		do:			[:ex | 			self fallbackBrowserOpen: link.			ex return]</body></methods><methods><class-id>OsxBrowserLaunchService class</class-id> <category>testing</category><body package="ExternalWebBrowser">matchesPlatform	^'*MacOSX' match: OSHandle currentPlatformID</body></methods><methods><class-id>OS.Win32SystemSupport class</class-id> <category>libraries</category><body package="ExternalWebBrowser">shell32_dll	&lt;library: #win&gt;	^'shell32.dll'</body></methods><methods><class-id>OS.Win32SystemSupport</class-id> <category>procedures</category><body package="ExternalWebBrowser">ShellExecute: hwnd with: lpOperation with: lpFile with: lpParameters with: lpDirectory with: nShowCmd	"Regardless of whether TCHAR is defined as CHAR or WCHAR, this function is defined as a W variant	and so it must take W arguments."	&lt;C: unsigned int ShellExecuteW(				HWND hwnd,				LPCWSTR lpOperation,				LPCWSTR lpFile,				LPCWSTR lpParameters,				LPCWSTR lpDirectory,				int nShowCmd )&gt;	^self externalAccessFailedWith: _errorCode</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Exception</name><environment>Core</environment><super>Core.GenericException</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class><class><name>Win32SystemSupport</name><environment>OS</environment><super>OS.OSSystemSupport</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private OS.Win32SystemSupportDictionary.*			</imports><category>OS-Support</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>kernel32.dll</item> <item>gdi32.dll</item> <item>advapi32.dll</item> <item>user32.dll</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>OS-PC</package></attributes></class></st-source>