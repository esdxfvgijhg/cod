<?xml version="1.0"?><st-source><!-- Name: MemoryPolicyStressTestNotice: Copyright 2010-2013 Cincom Systems, Inc.  All rights reserved.DbIdentifier: bear73DbTrace: 414264DbUsername: avalloudDbVersion: 8.0 - 2DevelopmentPrerequisites: #(#(#any 'MemoryPolicyChecker' ''))PackageName: MemoryPolicyStressTestParcel: #('MemoryPolicyStressTest')PrerequisiteDescriptions: #(#(#name 'MemoryPolicyChecker' #componentType #package))PrerequisiteParcels: #(#('MemoryPolicyChecker' ''))PrintStringCache: (8.0 - 2,avalloud)Version: 8.0 - 2Date: 9:31:16 AM October 25, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.0 (oct13.4) of October 25, 2013 on October 25, 2013 at 9:31:16 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>AbstractMemoryPolicyStressTest</name><environment>Smalltalk</environment><super>MemoryPolicyTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MemoryPolicyStressTest</package></attributes></class><class><name>MemoryPolicyGCStressTest</name><environment>Smalltalk</environment><super>AbstractMemoryPolicyStressTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MemoryPolicyStressTest</package></attributes></class><class><name>MemoryPolicyGCDeepMarkStackStressTest</name><environment>Smalltalk</environment><super>MemoryPolicyGCStressTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MemoryPolicyStressTest</package></attributes></class><class><name>MemoryPolicyGCLessMemoryStressTest</name><environment>Smalltalk</environment><super>MemoryPolicyGCStressTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MemoryPolicyStressTest</package></attributes></class><class><name>MemoryPolicyScavengeStressTest</name><environment>Smalltalk</environment><super>AbstractMemoryPolicyStressTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MemoryPolicyStressTest</package></attributes></class><class><name>MemoryPolicyIGCStressTest</name><environment>Smalltalk</environment><super>AbstractMemoryPolicyStressTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MemoryPolicyStressTest</package></attributes></class><class><name>MemoryPolicyNoIGCStressTest</name><environment>Smalltalk</environment><super>MemoryPolicyIGCStressTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>previousAllowIncGC </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MemoryPolicyStressTest</package></attributes></class><methods><class-id>AbstractMemoryPolicyStressTest</class-id> <category>setup - sizes</category><body package="MemoryPolicyStressTest">byteAllocationSizes	^(-1 to: 11) collect: [:each | 1 bitShift: each]</body><body package="MemoryPolicyStressTest">garbagePercentages	^#(0 10 25 40 50 65 75 90)</body><body package="MemoryPolicyStressTest">pointerAllocationSizes	^(-1 to: 8) collect: [:each | 1 bitShift: each]</body></methods><methods><class-id>AbstractMemoryPolicyStressTest</class-id> <category>setup</category><body package="MemoryPolicyStressTest">flushNewSpace	self objectMemory flushNewSpace</body><body package="MemoryPolicyStressTest">garbageCollect	self objectMemory garbageCollect</body><body package="MemoryPolicyStressTest">globalGarbageCollect	self objectMemory globalGarbageCollect</body><body package="MemoryPolicyStressTest">setUp	self globalGarbageCollect</body><body package="MemoryPolicyStressTest">tearDown	self globalGarbageCollect</body></methods><methods><class-id>MemoryPolicyGCStressTest</class-id> <category>setup</category><body package="MemoryPolicyStressTest">availableMemory	| availableMemory |	availableMemory := self memoryUpperBound * 3 // 4		- self dynamicallyAllocatedFootprint		+ self availableFreeOldSpaceBytes		- (self preferredGrowthIncrement * 3).	self assert: availableMemory &gt; (128 bitShift: 20).	^availableMemory</body><body package="MemoryPolicyStressTest">largeStorageArrayClass	^LargeArray</body><body package="MemoryPolicyStressTest">numberOfAllocationsOfType: aClasswithSize: anInteger	| fixedSlotBytes indexedSlotBytes bytesPerObject allocations roundedAllocations |	fixedSlotBytes := aClass instSize * self bytesPerOOP.	indexedSlotBytes := aClass isBits ifTrue: [anInteger] ifFalse: [anInteger * self bytesPerOOP].	bytesPerObject := self bytesPerOTE + fixedSlotBytes + indexedSlotBytes.	allocations := self availableMemory // (bytesPerObject + self bytesPerOOP).	roundedAllocations := allocations * 255 // 256.	^roundedAllocations</body><body package="MemoryPolicyStressTest">stressGarbageAllocationRepetitionCount	^3</body></methods><methods><class-id>MemoryPolicyGCStressTest</class-id> <category>testing - GC stress</category><body package="MemoryPolicyStressTest">stressGarbageAllocationOfType: garbageClasswithSize: anIntegerandGarbagePercent: aPercentage	"The variable emergencyStopVH is for debugging purposes.  It is meant to be	a value holder that changes value when the image encounters a memory	emergency, but before the process monitor comes up.  If, at that point, the	image does not change the value holder to true, then since this process will	not be stopped, the image will summarily crash"	| numberOfAllocations "emergencyStopVH" |	"emergencyStopVH := Smalltalk at: #emergencyStop."	numberOfAllocations := self numberOfAllocationsOfType: garbageClass withSize: anInteger.	self stressGarbageAllocationRepetitionCount timesRepeat:		[			| nonGarbage writeIndex |			nonGarbage := self largeStorageArrayClass new: numberOfAllocations.			writeIndex := 1.			numberOfAllocations // 100 timesRepeat:				[					100 - aPercentage timesRepeat:						[							nonGarbage at: writeIndex put: (garbageClass new: anInteger).							"[emergencyStopVH value] whileTrue: [(Delay forSeconds: 1) wait]."							writeIndex := writeIndex + 1						].					aPercentage timesRepeat:						[							garbageClass new: anInteger.							"[emergencyStopVH value] whileTrue: [(Delay forSeconds: 1) wait]"						]				]		]</body><body package="MemoryPolicyStressTest">testByteAllocationStress	self garbagePercentages do:		[:eachPercentage |			self byteAllocationSizes do:				[:eachSize |					self						stressGarbageAllocationOfType: ByteArray						withSize: eachSize						andGarbagePercent: eachPercentage				]		]</body><body package="MemoryPolicyStressTest">testHugeNumberOfEphemerons	"Assumes setUp and tearDown perform a GC"	| bigEphemerons garbage ephemerons |	bigEphemerons := nil.	garbage := LargeArray new: 5000000.	1 to: garbage size do: [:x | garbage at: x put: Object new].	ephemerons := self largeStorageArrayClass new: garbage size.	1 to: ephemerons size do:		[:x |			ephemerons				at: x				put: (Ephemeron new key: (garbage at: x); yourself)		].	self flushNewSpace.	bigEphemerons := Array new: ephemerons size.	1 to: bigEphemerons size do:		[:x | bigEphemerons at: x put: (ephemerons at: x)].	garbage := nil.	ephemerons := nil</body><body package="MemoryPolicyStressTest">testPointerAllocationStress	self garbagePercentages do:		[:eachPercentage |			self pointerAllocationSizes do:				[:eachSize |					self						stressGarbageAllocationOfType: Array						withSize: eachSize						andGarbagePercent: eachPercentage				]		]</body></methods><methods><class-id>MemoryPolicyGCDeepMarkStackStressTest</class-id> <category>setup</category><body package="MemoryPolicyStressTest">largeStorageArrayClass	^Array</body><body package="MemoryPolicyStressTest">stressGarbageAllocationRepetitionCount	^1</body></methods><methods><class-id>MemoryPolicyGCDeepMarkStackStressTest</class-id> <category>setup - sizes</category><body package="MemoryPolicyStressTest">garbagePercentages	^#(0 25 50 75 90)</body></methods><methods><class-id>MemoryPolicyGCLessMemoryStressTest</class-id> <category>setup</category><body package="MemoryPolicyStressTest">availableMemory	^super availableMemory // 2</body></methods><methods><class-id>MemoryPolicyScavengeStressTest</class-id> <category>testing - scavenge stress</category><body package="MemoryPolicyStressTest">testCreateLotsOfByteGarbage	self byteAllocationSizes do:		[:eachSize |			| outerRepetitions |			outerRepetitions := 500 // (eachSize sqrtFloor sqrtFloor max: 1).			outerRepetitions timesRepeat: [1000000 timesRepeat: [ByteArray new: eachSize]]		]</body><body package="MemoryPolicyStressTest">testCreateLotsOfPointerGarbage	self pointerAllocationSizes do:		[:eachSize |			| outerRepetitions |			outerRepetitions := 500 // (eachSize sqrtFloor sqrtFloor max: 1).			outerRepetitions timesRepeat: [1000000 timesRepeat: [Array new: eachSize]]		]</body><body package="MemoryPolicyStressTest">testPointCreation	"This test may cause VM failure in different ways.	* The hardLowSpaceLimit is not large enough to accomodate a full scavenge,	leading to VM failure to scavenge because too much data is tenured.	* The contiguousSpaceSafetyMargin is not large enough to accomodate a full	scavenge, leading to VM failure to scavenge because of the points ordered	collection"	| points maxsize numObjects |	maxsize := self memoryUpperBound.	numObjects := maxsize // 100.	points := OrderedCollection new.	numObjects timesRepeat: [points add: 1 @ 2]</body></methods><methods><class-id>MemoryPolicyIGCStressTest</class-id> <category>stress - become:</category><body package="MemoryPolicyStressTest">testIGCLargeArrayBecome	"About 13 seconds on 2.5ghz 32 bit Windows"	| x y |	x := Array new: 5000.	y := Array new: 5000.	self sysOopRegistryReservedSlot1: x.	self sysOopRegistryReservedSlot2: y.	self flushNewSpace.	self startIGC.	10000000 timesRepeat:		[			x become: y.  x become: y.  x become: y.  x become: y.  x become: y.			x become: y.  x become: y.  x become: y.  x become: y.  x become: y.		].	self sysOopRegistryReservedSlot1: nil.	self sysOopRegistryReservedSlot2: nil.	self finishIGC</body><body package="MemoryPolicyStressTest">testIGCLargeWeakArrayBecome	"About 12 seconds on 2.5ghz 32 bit Windows"	| x y |	x := WeakArray new: 5000.	y := WeakArray new: 5000.	self sysOopRegistryReservedSlot1: x.	self sysOopRegistryReservedSlot2: y.	self flushNewSpace.	self startIGC.	10000000 timesRepeat:		[			x become: y.  x become: y.  x become: y.  x become: y.  x become: y.			x become: y.  x become: y.  x become: y.  x become: y.  x become: y.		].	self sysOopRegistryReservedSlot1: nil.	self sysOopRegistryReservedSlot2: nil.	self finishIGC</body><body package="MemoryPolicyStressTest">testIGCSmallArrayBecome	"About 13 seconds on 2.5ghz 32 bit Windows"	| x y |	x := Array new: 5.	y := Array new: 5.	self sysOopRegistryReservedSlot1: x.	self sysOopRegistryReservedSlot2: y.	self flushNewSpace.	self startIGC.	10000000 timesRepeat:		[			x become: y.  x become: y.  x become: y.  x become: y.  x become: y.			x become: y.  x become: y.  x become: y.  x become: y.  x become: y.		].	self sysOopRegistryReservedSlot1: nil.	self sysOopRegistryReservedSlot2: nil.	self finishIGC</body><body package="MemoryPolicyStressTest">testIGCSmallWeakArrayBecome	"About 12 seconds on 2.5ghz 32 bit Windows"	| x y |	x := WeakArray new: 5.	y := WeakArray new: 5.	self sysOopRegistryReservedSlot1: x.	self sysOopRegistryReservedSlot2: y.	self flushNewSpace.	self startIGC.	10000000 timesRepeat:		[			x become: y.  x become: y.  x become: y.  x become: y.  x become: y.			x become: y.  x become: y.  x become: y.  x become: y.  x become: y.		].	self sysOopRegistryReservedSlot1: nil.	self sysOopRegistryReservedSlot2: nil.	self finishIGC</body><body package="MemoryPolicyStressTest">testIGCVeryLargeArrayBecome	"About 13 seconds on 2.5ghz 32 bit Windows"	| x y |	x := Array new: 5000000.	y := Array new: 5000000.	self sysOopRegistryReservedSlot1: x.	self sysOopRegistryReservedSlot2: y.	self flushNewSpace.	self startIGC.	10000000 timesRepeat:		[			x become: y.  x become: y.  x become: y.  x become: y.  x become: y.			x become: y.  x become: y.  x become: y.  x become: y.  x become: y.		].	self sysOopRegistryReservedSlot1: nil.	self sysOopRegistryReservedSlot2: nil.	self finishIGC</body><body package="MemoryPolicyStressTest">testIGCVeryLargeWeakArrayBecome	"About 1.2 seconds on 2.5ghz 32 bit Windows"	| x y |	x := WeakArray new: 5000000.	y := WeakArray new: 5000000.	self sysOopRegistryReservedSlot1: x.	self sysOopRegistryReservedSlot2: y.	self flushNewSpace.	self startIGC.	10000000 timesRepeat:		[			x become: y.  x become: y.  x become: y.  x become: y.  x become: y.			x become: y.  x become: y.  x become: y.  x become: y.  x become: y.		].	self sysOopRegistryReservedSlot1: nil.	self sysOopRegistryReservedSlot2: nil.	self finishIGC</body></methods><methods><class-id>MemoryPolicyIGCStressTest</class-id> <category>setup</category><body package="MemoryPolicyStressTest">setUp	super setUp.	self garbageCollect</body><body package="MemoryPolicyStressTest">tearDown	super tearDown.	self sysOopRegistryReservedSlot1: nil.	self sysOopRegistryReservedSlot2: nil</body></methods><methods><class-id>MemoryPolicyIGCStressTest</class-id> <category>stress - isWeakContainer:</category><body package="MemoryPolicyStressTest">testIGCFlipLargeObjectWeakness	"About 30 seconds on 2.5ghz 32 bit Windows"	| garbage |	garbage := WeakArray new: (10 bitShift: 20).	self flushNewSpace.	10000 timesRepeat:		[			garbage isWeakContainer: garbage isWeakContainer not.			self igcInterruptible: false objects: nil bytes: (1 bitShift: 18)		].	self finishIGC</body><body package="MemoryPolicyStressTest">testIGCLargeWeakArrayNilling	"About 18 seconds on 2.5ghz 32 bit Windows"	| garbage |	garbage := LargeWeakArray new: 500000.	250 timesRepeat:		[			garbage isWeakContainer: false.			1 to: garbage size do:				[:each |					garbage						at: each						put: Object new				].			self flushNewSpace.			garbage isWeakContainer: true.			self incrementalGCStep		].	self finishIGC</body><body package="MemoryPolicyStressTest">testIGCLargeWeakArrayWeaknessChange	"About 8 seconds on 2.5ghz 32 bit Windows"	| x |	x := WeakArray new: 5000.	self sysOopRegistryReservedSlot1: x.	self flushNewSpace.	self startIGC.	800000 timesRepeat:		[			x isWeakContainer: false.  x isWeakContainer: false.  x isWeakContainer: false.			x isWeakContainer: false.  x isWeakContainer: false.  x isWeakContainer: false.			x isWeakContainer: false.  x isWeakContainer: false.  x isWeakContainer: false.			x isWeakContainer: false.		].	self sysOopRegistryReservedSlot1: nil.	self finishIGC</body><body package="MemoryPolicyStressTest">testIGCSmallWeakArrayWeaknessChange	"About 0.4 seconds on 2.5ghz 32 bit Windows"	| x |	x := WeakArray new: 5.	self sysOopRegistryReservedSlot1: x.	self flushNewSpace.	self startIGC.	800000 timesRepeat:		[			x isWeakContainer: false.  x isWeakContainer: false.  x isWeakContainer: false.			x isWeakContainer: false.  x isWeakContainer: false.  x isWeakContainer: false.			x isWeakContainer: false.  x isWeakContainer: false.  x isWeakContainer: false.			x isWeakContainer: false.		].	self sysOopRegistryReservedSlot1: nil.	self finishIGC</body></methods><methods><class-id>MemoryPolicyIGCStressTest</class-id> <category>setup - sysoop registry</category><body package="MemoryPolicyStressTest">sysOopRegistry	^ObjectMemory objectRegisteredWithEngineFor: 'sysOopRegistry'</body><body package="MemoryPolicyStressTest">sysOopRegistryReservedSlot1	^self sysOopRegistry at: self sysOopRegistrySlotBase - 1</body><body package="MemoryPolicyStressTest">sysOopRegistryReservedSlot1: anObject	self sysOopRegistry at: self sysOopRegistrySlotBase - 1 put: anObject</body><body package="MemoryPolicyStressTest">sysOopRegistryReservedSlot2	^self sysOopRegistry at: self sysOopRegistrySlotBase</body><body package="MemoryPolicyStressTest">sysOopRegistryReservedSlot2: anObject	self sysOopRegistry at: self sysOopRegistrySlotBase put: anObject</body><body package="MemoryPolicyStressTest">sysOopRegistrySlotBase	^64</body></methods><methods><class-id>MemoryPolicyIGCStressTest</class-id> <category>stress</category><body package="MemoryPolicyStressTest">testIGC100kByteGarbage	"About 10 seconds on 2.5ghz 32 bit Windows"	| garbage |	garbage := Array new: 300.	250 timesRepeat:		[			1 to: garbage size do:				[:each |					garbage						at: each						put: (ByteArray new: 102400)				]		].	self finishIGC</body><body package="MemoryPolicyStressTest">testIGCWithCompiledCodeFillerA	"About 10 seconds on 2.5ghz 32 bit Windows"	| methods garbage |	methods := CompiledCode allGeneralInstances.	garbage := OrderedCollection new.	[		self dynamicallyAllocatedFootprint * 11 // 10			&lt; self memoryUpperBound	] whileTrue: [garbage add: (methods collect: [:each | each copy])].	self garbageCollect.	30 timesRepeat: [self incrementalGCRun].	self finishIGC</body><body package="MemoryPolicyStressTest">testIGCWithCompiledCodeFillerB	"About 10 seconds on 2.5ghz 32 bit Windows"	| methods garbage |	methods := CompiledCode allGeneralInstances.	garbage := OrderedCollection new.	[		self dynamicallyAllocatedFootprint * 11 // 10			&lt; self memoryUpperBound	] whileTrue: [methods do: [:each | garbage add: each copy]].	self garbageCollect.	30 timesRepeat: [self incrementalGCRun].	self finishIGC</body></methods><methods><class-id>MemoryPolicyIGCStressTest</class-id> <category>setup - helpers</category><body package="MemoryPolicyStressTest">finishIGC	[self currentObjectMemory incGCIsResting]		whileFalse: [self incrementalGCStep]</body><body package="MemoryPolicyStressTest">igcInterruptible: aBoolean objects: objectQuota bytes: byteQuota	self objectMemory		primMeasureIGCIsInterruptible: aBoolean		objects: objectQuota		bytes: byteQuota</body><body package="MemoryPolicyStressTest">incrementalGCRun	[		self igcInterruptible: false objects: nil bytes: nil.		self currentObjectMemory incGCIsResting	] whileFalse</body><body package="MemoryPolicyStressTest">incrementalGCStep	^self memoryPolicy incrementalGC</body><body package="MemoryPolicyStressTest">startIGC	[self currentObjectMemory incGCIsMarking]		whileFalse: [self incrementalGCStep]</body></methods><methods><class-id>MemoryPolicyIGCStressTest</class-id> <category>setup - object memory</category><body package="MemoryPolicyStressTest">dynamicallyAllocatedFootprint	^self currentObjectMemory dynamicallyAllocatedFootprint</body></methods><methods><class-id>MemoryPolicyNoIGCStressTest</class-id> <category>setup</category><body package="MemoryPolicyStressTest">setUp	super setUp.	self previousAllowIncGC: self memoryPolicy allowIncGC.	self memoryPolicy allowIncGC: false</body><body package="MemoryPolicyStressTest">tearDown	super tearDown.	self memoryPolicy allowIncGC: self previousAllowIncGC</body></methods><methods><class-id>MemoryPolicyNoIGCStressTest</class-id> <category>setup - helpers</category><body package="MemoryPolicyStressTest">finishIGC	^self</body><body package="MemoryPolicyStressTest">igcInterruptible: aBoolean objects: objectQuota bytes: byteQuota	^self</body><body package="MemoryPolicyStressTest">incrementalGCRun	^self</body><body package="MemoryPolicyStressTest">incrementalGCStep	^self</body><body package="MemoryPolicyStressTest">startIGC	^self</body></methods><methods><class-id>MemoryPolicyNoIGCStressTest</class-id> <category>accessing</category><body package="MemoryPolicyStressTest">previousAllowIncGC	^previousAllowIncGC</body><body package="MemoryPolicyStressTest">previousAllowIncGC: anObject	previousAllowIncGC := anObject</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>MemoryPolicyTest</name><environment>Smalltalk</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentObjectMemory cachedObjectMemory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>MemoryPolicyChecker</package></attributes></class></st-source>