<?xml version="1.0"?><st-source><!-- Name: MiniChangeSetManagerNotice: Copyright 1999-2013 Cincom Systems, Inc.  All rights reserved.Comment: Place a tool in the VisualLauncher's tool dock for interfacing with the change set manager.DbIdentifier: bear73DbTrace: 400479DbUsername: nrossDbVersion: 7.10 - 1PackageName: MiniChangeSetManagerParcel: #('MiniChangeSetManager')PrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1Date: 6:44:43 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 6:44:43 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>MiniChangeSetManager</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>labelHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Changes</category><attributes><package>MiniChangeSetManager</package></attributes></class><comment><class-id>Tools.MiniChangeSetManager</class-id><body>MiniChangeSetManager is the application model of the tiny one-line application intended for the launcher's status bar. It displays the currently selected change set, allows one to change the change set, and do basic connection information management.Instance Variables:	labelHolder	&lt;AspectAdaptor&gt; on the current change set holder in the ChangeSet class, displaying its #displayString property in the application.</body></comment><methods><class-id>Tools.MiniChangeSetManager</class-id> <category>private</category><body package="MiniChangeSetManager">current	^ChangeSet current</body><body package="MiniChangeSetManager">installLabelController	| controller |	controller := ControllerWithSelectMenu new.	controller		selectMenuHolder: [self changeSetSelectionMenu];		menuHolder: [self changeSetContextMenu];		performer: self.	(self widgetAt: #label) controller: controller</body><body package="MiniChangeSetManager">updateLabel	self builder notNil ifTrue:		[(self widgetAt: #label) updateDisplayContents]</body></methods><methods><class-id>Tools.MiniChangeSetManager</class-id> <category>actions</category><body package="MiniChangeSetManager">browseChanges	ChangeSetManager browseChangedMethodsIn: self current</body><body package="MiniChangeSetManager">createChangeSet	ChangeSetManager createChangeSet</body><body package="MiniChangeSetManager">editChangeSet	ChangeEditor new		sourceHolder: ChangeSet currentChangeSetHolder;		open</body><body package="MiniChangeSetManager">fileInChanges	ChangeSetManager fileIntoChangeSet: self current</body><body package="MiniChangeSetManager">fileIntoNewChangeSets	ChangeSetManager fileIntoNewChangeSets</body><body package="MiniChangeSetManager">fileOutAll	ChangeSetManager fileOutAllChangeSets: NamedChangeSet changeSetList</body><body package="MiniChangeSetManager">fileOutChanges	ChangeSetManager fileOutChangeSet: self current</body><body package="MiniChangeSetManager">forgetChanges	ChangeSetManager forgetChangesIn: self current</body><body package="MiniChangeSetManager">generateImportScript	ChangeSetManager writeImportScriptFor: self current</body><body package="MiniChangeSetManager">generateRemovalScript	ChangeSetManager writeRemovalScriptFor: self current</body><body package="MiniChangeSetManager">inspectChangeSet	self current copy inspect</body><body package="MiniChangeSetManager">openChangeSetManager	ChangeSetManager open</body><body package="MiniChangeSetManager">removeChangeSet	ChangeSetManager removeChangeSet: self current</body><body package="MiniChangeSetManager">removeChangesFromSystem	ChangeSetManager removeFromSystemChangesIn: self current</body><body package="MiniChangeSetManager">renameChangeSet	ChangeSetManager renameChangeSet: self current.	self updateLabel</body></methods><methods><class-id>Tools.MiniChangeSetManager</class-id> <category>notifications</category><body package="MiniChangeSetManager">update: aspectSymbol with: parameterObject from: originatorObject	^(originatorObject == ChangeSet or: [originatorObject == NamedChangeSet changeSetList]) 			ifTrue: [self updateLabel]			ifFalse: 				[super update: aspectSymbol with: parameterObject from: originatorObject]</body></methods><methods><class-id>Tools.MiniChangeSetManager</class-id> <category>initialize-release</category><body package="MiniChangeSetManager">initialize	super initialize.	labelHolder := (AspectAdaptor forAspect: #displayString)		subjectChannel: ChangeSet currentChangeSetHolder.	ChangeSet addDependent: self.	NamedChangeSet changeSetList addDependent: self</body><body package="MiniChangeSetManager">postBuildWith: aBuilder 	self installLabelController</body><body package="MiniChangeSetManager">preBuildWith: aBuilder 	super preBuildWith: aBuilder.	aBuilder visualAt: #changeSetIcon put: (ToolbarIconLibrary visualFor: #edit)</body><body package="MiniChangeSetManager">release	super release.	ChangeSet removeDependent: self.	NamedChangeSet changeSetList removeDependent: self.	labelHolder release</body></methods><methods><class-id>Tools.MiniChangeSetManager</class-id> <category>aspects</category><body package="MiniChangeSetManager">labelHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^labelHolder isNil		ifTrue:			[labelHolder := String new asValue]		ifFalse:			[labelHolder]</body></methods><methods><class-id>Tools.MiniChangeSetManager</class-id> <category>menu building</category><body package="MiniChangeSetManager">changeSetContextMenu	| menu |	menu := self class changeSetContextMenu.	menu		augmentFrom: self class		to: MiniChangeSetManager		menuName: #changeSetContextMenu		for: self.	^menu</body><body package="MiniChangeSetManager">changeSetSelectionMenu	| menu current |	menu := Menu new.	current := self current.	NamedChangeSet changeSetList  do: [:each |		| item |		item := MenuItem labeled: each displayString.		item value: [:controller | ChangeSet current: each].		each = current ifTrue: [item beOn].		menu addItem: item].	menu		addLine;		addItem: ((MenuItem labeled: #NewChangeSetDots &lt;&lt; #menus &gt;&gt; 'New Change Set...')			value: [:controller | self createChangeSet]).	^menu</body></methods><methods><class-id>Tools.MiniChangeSetManager class</class-id> <category>interface specs</category><body package="MiniChangeSetManager">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #labels) 			#bounds: #(#{Graphics.Rectangle} 512 384 712 584 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.Rectangle} 0 -1 22 24 ) 					#name: #changeSetIcon 					#label: #changeSetIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 0 0 0 1 21 0 ) 					#name: #label 					#flags: 0 					#model: #labelHolder 					#helpText: #(#{Kernel.UserMessage} #key: #ChangeSetLabel #defaultString: 'Change sets. Left-click to select, right-click to manage.' #catalogID: #labels) 					#isReadOnly: true ) ) ) )</body></methods><methods><class-id>Tools.MiniChangeSetManager class</class-id> <category>resources</category><body package="MiniChangeSetManager">changeSetContextMenu	"Tools.MenuEditor new openOnClass: self andSelector: #changeSetContextMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_NewDot #defaultString: '&amp;New...' #catalogID: #menus) 				#nameKey: #createChangeSet 				#value: #createChangeSet ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Edit #defaultString: '&amp;Edit' #catalogID: #menus) 				#nameKey: #editChangeSet 				#value: #editChangeSet ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_Inspect #defaultString: '&amp;Inspect' #catalogID: #menus) 				#nameKey: #inspectChangeSet 				#value: #inspectChangeSet 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #inspect ) ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_BrowseMethods #defaultString: '&amp;Browse Methods' #catalogID: #menus) 				#nameKey: #browseChanges 				#value: #browseChanges ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_RenameDot #defaultString: '&amp;Rename...' #catalogID: #menus) 				#nameKey: #renameChangeSet 				#value: #renameChangeSet ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #Remove #defaultString: 'Remove' #catalogID: #menus) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #_ForgetChanges #defaultString: '&amp;Forget Changes...' #catalogID: #menus) 							#nameKey: #forgetChanges 							#value: #forgetChanges ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #_RemoveChangeSet #defaultString: '&amp;Remove Change Set...' #catalogID: #menus) 							#nameKey: #removeChangeSet 							#value: #removeChangeSet 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #delete ) ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #RemoveChangedCode1 #defaultString: 'Remove Changed Code from &amp;System...' #catalogID: #menus) 							#nameKey: #removeChangesFromSystem 							#value: #removeChangesFromSystem ) ) #(3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #File #defaultString: 'File' #catalogID: #menus) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #_FileInDot #defaultString: '&amp;File In...' #catalogID: #menus) 							#nameKey: #fileInChanges 							#value: #fileInChanges 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileIn ) ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #FileInto_New #defaultString: 'File into &amp;New...' #catalogID: #menus) 							#nameKey: #fileIntoNewChangeSets 							#value: #fileIntoNewChangeSets ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #File_Out #defaultString: 'File &amp;Out...' #catalogID: #menus) 							#nameKey: #fileOutChanges 							#value: #fileOutChanges 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #FileOut_All #defaultString: 'File out &amp;All...' #catalogID: #menus) 							#nameKey: #fileOutAll 							#value: #fileOutAll ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #Write_ImportScript #defaultString: 'Write &amp;Import Script...' #catalogID: #menus) 							#nameKey: #generateImportScript 							#value: #generateImportScript ) 						#(#{UI.MenuItem} 							#rawLabel: #(#{Kernel.UserMessage} #key: #Write_RemovalScript #defaultString: 'Write &amp;Removal Script...' #catalogID: #menus) 							#nameKey: #generateRemovalScript 							#value: #generateRemovalScript ) ) #(2 2 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: #(#{Kernel.UserMessage} #key: #_OpenChangeSetManager #defaultString: '&amp;Open Change Set Manager' #catalogID: #menus) 				#nameKey: #openChangeSetManager 				#value: #openChangeSetManager 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #edit ) ) ) #(1 5 1 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Tools.VisualLauncherToolDock</class-id> <category>component definitions</category><body package="MiniChangeSetManager">miniChangeSetManager	&lt;component: 10 class: #{Tools.MiniChangeSetManager} spec: #windowSpec&gt;	^self newTool: Tools.MiniChangeSetManager</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>VisualLauncherToolDock</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tools </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>