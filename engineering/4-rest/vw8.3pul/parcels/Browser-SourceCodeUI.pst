<?xml version="1.0"?><st-source><!-- Name: Browser-SourceCodeUINotice: Copyright 1999-2017 Cincom Systems, Inc.  All rights reserved.Comment: This package contains classes for the refactoring browser's source code editing interface.DbIdentifier: bear73DbTrace: 502932DbUsername: cgundelDbVersion: 8.3 - 10DevelopmentPrerequisites: #(#(#any 'Browser-BrowserUI' '') #(#any 'Browser-Support' '') #(#any 'Browser-TypeInferencer' ''))PackageName: Browser-SourceCodeUIParcel: #('Browser-SourceCodeUI')ParcelName: Browser-SourceCodeUIPrerequisiteDescriptions: #(#(#name 'Browser-BrowserUI' #componentType #package) #(#name 'Browser-Support' #componentType #package) #(#name 'Browser-TypeInferencer' #componentType #package))PrerequisiteParcels: #(#('Browser-BrowserUI' '') #('Browser-Support' '') #('Browser-TypeInferencer' ''))PrintStringCache: (8.3 - 10,cgundel)Version: 8.3 - 10Date: 3:26:56 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.4) of June 23, 2017 on June 30, 2017 at 3:26:56 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>UrlCommentHighlightDecoration</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RBProgramNodeVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>document decoratingOffset style </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.UrlCommentHighlightDecoration</class-id><body>UrlCommentHighlightDecoration is an RBParseNode visitor that detects URLs inside of comments and decorates them based on the current theme of a SourceCodeEditor.Instance Variables	decoratingOffset	&lt;ArithmeticValue&gt;	The offset in to the document to style	document		&lt;Document&gt;		The document to style	style			&lt;DocumentStyle&gt;	The style from a source code editors theme to style with</body></comment><class><name>BrowserDocumentTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>documentHolder savedState </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserDocumentTool</class-id><body>BrowserDocumentTool is an abstract class for all the CodeTools that have a document display.Subclasses must implement the following messages:	actions		acceptDocument			defines the action that is taken when a save is performedInstance Variables	documentHolder	&lt;ValueModel with: Text2.Document&gt;	The document being edited in its un-edited form	savedState		&lt;Text2.Document | nil&gt;				A copy of the document for an edit in progress when switching between RB buffers</body></comment><class><name>BrowserOverviewTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDocumentTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserOverviewTool</class-id><body>I show a terse "Overview of the Browser" style message when nothing is selected in the browser. It is a hope that this makes the "nothing selected" state a little less arbitrary, and provides a hook to ease a first time user into the browser.</body></comment><class><name>SmalltalkAutoQuote</name><environment>Refactory.Browser</environment><super>UI.ViewBehavior</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports>			private Text2.*			</imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SmalltalkAutoQuote</class-id><body>SmalltalkAutoQuote is a plugin that intercepts key down events in a document editor. If those key down events are for quote characters or delimiters, it will attempt to determine if it should add or remove or skip over a close delimiter automatically.Instance Variables	view	&lt;DocumentView&gt;	The document view being augmented</body></comment><class><name>SmalllintDecoration</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RBProgramNodeVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>context document warningStyle style decoratingOffset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SmalllintDecoration</class-id><body>SmalllintDecoration is a decoration for the SourceCodeEditor that runs select SmallLint tools against the parse tree and styles parts of the editors document based on lint feedback, when the editor is idle.Instance Variables	context		&lt;SmalllintContext&gt;	The SmallLint rule runner	decoratingOffset	&lt;ArithmeticValue&gt;	The offset in to the document to style	document		&lt;Document&gt;		The document to style	style			&lt;DocumentStyle&gt;	The style from a source code editors theme to style with	warningStyle	&lt;DocumentStyle&gt;	The style for the warnings produced by the lint matchersShared Variables:	LintRules	&lt;Array of: Symbol&gt;		The list of lint rules to run against a method compilation</body></comment><class><name>BrowserSourceCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDocumentTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>probes hasOpenedSearch </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserSourceCodeTool</class-id><body>BrowserSourceCodeTool is a CodeTool that modifies source code methods.Instance Variables:	probes			&lt;Collection of: SourceCodeProbe&gt; Where probes are and how big they are	hasOpenedSearch	&lt;Boolean&gt; If the search tool has been opened by this tool already or not</body></comment><class><name>UrlHighlightDecoration</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.UrlHighlightDecoration</class-id><body>UrlHighlightDecoration is a 'workspace' decorator for SourceCodeEditor that detects URLs and decorates them based on the current theme of a SourceCodeEditor.</body></comment><class><name>SmalltalkAutocompleteSearch</name><environment>Refactory.Browser</environment><super>UI.DocumentAutocompleteSearch</super><private>false</private><indexed-type>none</indexed-type><inst-vars>node inferenceTime </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SmalltalkAutocompleteSearch</class-id><body>SmalltalkAutocompleteSearch is an image searcher across different categories of Smalltalk search results, such as selectors, pragmas, literals, classes, shared variables etc. It is paired with SmalltalkAutocompleteModel to present the results generated by this class.Instance Variables:	inferenceTime	&lt;SmallInteger&gt;	Time spent doing type inferencing	node			&lt;RBProgramNode&gt;	The current selectionNode from the SourceCodeEditor</body></comment><class><name>SourceCodeErrorHandler</name><environment>Refactory.Browser</environment><super>Kernel.CompilerErrorHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>document style errorStyle warningStyle decoratingOffset reason editor commentStyle hasScrolled retry selection </inst-vars><class-inst-vars></class-inst-vars><imports>			private Text2.*			</imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SourceCodeErrorHandler</class-id><body>SourceCodeErrorHandler responds to error and warning messages from a SmalltalkCompiler and uses that information to style portions of a document.Instance Variables	decoratingOffset	&lt;ArithmeticValue&gt;	The offset in to the document to style	document		&lt;Document&gt;		The document to style	selection		&lt;Interval&gt;			The selection in document which migiht be updated for a retry	errorStyle		&lt;DocumentStyle&gt;	The styling for an error message	reason		&lt;Symbol&gt;			The reason this styling is happening (#OnSave, #OnIdle, #OnType)	style			&lt;DocumentStyle&gt;	The default style for content that has an error or warning	editor		&lt;SourceCodeEditor&gt;	The source code editor we're interacting with	warningStyle	&lt;DocumentStyle&gt;	The styling for a warning message	commentStyle	&lt;DocumentStyle&gt;	The styling for a comment	hasScrolled	&lt;Boolean&gt;		Has already scrolled to a message	retry			&lt;BlockClosure&gt;		A block to call after an action to correct a mistake is made</body></comment><class><name>BrowserDocumentationTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDocumentTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserDocumentationTool</class-id><body>BrowserDocumentationTool is a CodeTool that edits package, class and namespace comments.</body></comment><class><name>DocumentSuggestionTab</name><environment>Refactory.Browser</environment><super>Text2.DocumentSegment</super><private>false</private><indexed-type>none</indexed-type><inst-vars>string </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.DocumentSuggestionTab</class-id><body>DocumentSuggestionTab represents a segment in a document that is a suggestion or a substituion.Instance Variables:	string	&lt;String&gt;	A string to represent the suggestion</body></comment><class><name>BrowserCopyrightNoticeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDocumentationTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserCopyrightNoticeTool</class-id><body>BrowserCopyrightNoticeTool is a CodeTool that edits package copyright notices.</body></comment><class><name>SmalltalkAutoIndent</name><environment>Refactory.Browser</environment><super>UI.ViewBehavior</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Text2.*			</imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SmalltalkAutoIndent</class-id><body>SmalltalkAutoIndent is a plugin that intercepts new lines being inserted in to a document editor and adds tabbing based on the current line tabbing. It uses Smalltalk semantics to suggest fewer or more tabs for the new line.Instance Variables	view	&lt;DocumentView&gt;	The document view being augmented</body></comment><class><name>BrowserDeclarationTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDocumentTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserDeclarationTool</class-id><body>BrowserDeclarationTool is a CodeTool that edits class and namespace definitions.</body></comment><class><name>BrowserSharedVariableInitializerTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDeclarationTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserSharedVariableInitializerTool</class-id><body>BrowserSharedVariableInitializerTool is a CodeTool that edits shared variable initializer source code.</body></comment><class><name>FlowSuggestionTab</name><environment>Refactory.Browser</environment><super>Text2.FlowSegment</super><private>false</private><indexed-type>none</indexed-type><inst-vars>position segment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.FlowSuggestionTab</class-id><body>FlowSuggestionTab represents a DocumentSuggestionTab on a line.Instance Variables	position		&lt;Integer&gt;	The position of the breakpoint in the paragraph.	segment		&lt;DocumentSuggestionTab&gt;	The DocumentSuggestionTab represented</body></comment><class><name>SmalltalkAutocompleteModel</name><environment>Refactory.Browser</environment><super>UI.DocumentAutocompleteModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>theme </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SmalltalkAutocompleteModel</class-id><body>SmalltalkAutocompleteModel is an application model that is presented inside an autocomplete window. This class is customised to present Smalltalk results from a SmalltalkAutocompleteSearch and is used by the plugin SmalltalkAutocomplete.Instance Variables:	theme	&lt;SourceCodeTheme&gt;	The theme from the SourceCodeEditor	styles			&lt;Dictionary&gt;	A cache of styles from SourceCodeTheme for a search result category	matchingStyles	&lt;Dictionary&gt;	A cache of styles from SourceCodeTheme for a search result category with underlines</body></comment><class><name>SourceCodeTheme</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name source author website styles default </inst-vars><class-inst-vars></class-inst-vars><imports>			private Text2.*			</imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SourceCodeTheme</class-id><body>SourceCodeTheme provides a programming language agnostic set of styles that can be applied against a programming language that has been parsed. It achieves this by using a set of style selectors that start narrow and broaden as the parsed content matches more loosely.An example might be: punctuation -&gt; definition -&gt; comment -&gt; smalltalk. In this scenario the tightest match would be a Smalltalk double-quote " character to indicate the start and stop of a comment section. It is Smalltalk punctuation. However, the parser might not be a Smalltalk parser and may have a comment punctuation of its own, so a theme style would probably provide a non-smalltalk specific style for punctuation -&gt; definition -&gt; comment.Another example would be variable, versus variable -&gt; temporary or variable -&gt; parameter, which describe three different kinds of variables and may all be styled differently. A parser could attempt to find variable -&gt; context, but the theme may not have a style selector for that. It might have a selector for variable though, in which case it would match to that one instead.The naming and approach for style selectors comes from the popular theming interface by MacroMate. The selectors used by SourceCodeTheme closely resemble those used by TextMate and other text editors who have adopted the MacroMate approach to theming. See https://manual.macromates.com/en/themes for more detail.The class side of SourceCodeTheme provides a pragma for describing a theme, complete with author information and an external website address if someone who likes the theme wants to get more information. The theme must at the very least provide a default style, where each style is a DocumentStyle instance that has been interned (#intern). Failure to intern the styles can cause significantly performance penalties when the SourceCodeEditor attempts to compare its new decorated document with its old decorated document. Without the interning, every new decorated document will appear to be different to the old decorated document and no quick merging will be possible.Many themes are based off of the default font size, font name, etc.. which can be changed via settings or in the case of font size even in an editor itself. When such a change is made, all theme instances are reconstructed. To re-install the current theme, each theme needs a source set that can be executed to get a new version of the theme to be installed.Instance Variables	author	&lt;String&gt;			The name of the person(s) who created the theme	default	&lt;DocumentStyle&gt;	The default style when a style selector is not matched	name	&lt;String&gt;			The name of the theme	source	&lt;MessageSend&gt;	Returns a new copy of the theme	styles	&lt;Dictionary of: &lt;Array of: Symbol&gt; -&gt; DocumentStyle&gt;		The styles to match against style selectors	website	&lt;String&gt;			An optional website address for the theme</body></comment><class><name>SourceCodeEditor</name><environment>Refactory.Browser</environment><super>UI.DocumentView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decorations plugins theme evaluator needsRedecoration warning parseTree parserClass acceptAnimationCancel language errorHandlerClass timingStatistics compilerClass </inst-vars><class-inst-vars>defaultTheme compilationPragmas evaluationPragmas enablement </class-inst-vars><imports>			private Text2.*			</imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SourceCodeEditor</class-id><body>SourceCodeEditor is a code-aware document editor for writing source code in a (primarily Smalltalk) programming language. It is designed to be contextually sensitive for evaluation or refactoring actions, provide syntactical highlighting with styling changes, provide error and warning feedback based on a parser and 'decorators' as well as provide 'plugins' to modify the editors interaction based on the programming language.Plugins typically hook in to the ViewEventController of the editor to intercept keystroke or mouse events when the editor is in a particular state, usually #active. Examples of plugins include auto-indenting content when a new line is created, or auto-quoting content when a delimiter key is pressed.Decorations are used during syntax highlighting, which is performed every time the document is changed but also after an 'idle' period. Some decoration information, such as warnings, are not relevant to a developer until they have a moment to stop and catch their breath. Other decorations such as a syntax highlighting decorator run all the time. The result of the decorations is compared to the currently decorated document and a set of changes is identified, allowing the merging of changes caused by re-decoration to be rapidly applied.Instance Variables	decorations		&lt;OrderedCollection of: Object&gt;	During syntax highlighting, all registered decorators are applied to the document	plugins			&lt;OrderedCollection of: Object&gt;	Plugins hook in to the event system for the receiver to intercept and modify interactions	theme			&lt;SourceCodeTheme&gt;			Provides styling information based on styling selectors to be used be decorations	needsRedecoration		&lt;Boolean&gt;						Internal indicator to know if re-decoration should occur	warning			&lt;Document&gt;					A warning to display against the source code that isn't inferred via parsing or compiling	parseTree 		&lt;RBParseNode&gt;					The result of parsing the current document	acceptAnimationCancel	&lt;BlockClosure&gt;			A private block closure that will cancel the active accept animation	timingStatistics	&lt;OrderedCollection&gt;			A cache of timings for 'Time It'	language		&lt;Symbol&gt;						The programming language the source code is written for	evaluator		&lt;Object&gt;						Implements an interface to provide evaluation of code	parserClass		&lt;RBParser&gt;						The parser used to parse the document contents and create the parseTree	compilerClass	&lt;Compiler&gt;						The compiler used to compile the document contents	errorHandlerClass	&lt;CompilerErrorHandler&gt;		The error handler for compilationClass Instance Variables	defaultTheme		&lt;SourceCodeTheme&gt;	The default theme to apply to all editors unless an editor has a specific override	compilationPragmas	&lt;OrderedCollection of: Tools.Pragma&gt;	Code to run when performing a compilation	evaluationPragmas	&lt;OrderedCollection of: Tools.Pragma&gt;	Code to run when performing an evaluation	enablement		&lt;Dictionary&gt;			Maps plugin and decoration classes to a boolean to indicate if they should be used or notShared Variables	ErrorsLevel			&lt;Symbol&gt;					The reason level at which errors should display (#OnSave, #OnIdle, #OnType)	WarningsLevel		&lt;Symbol&gt;					The reason level at which warnings should display (#OnSave, #OnIdle, #OnType)	DisplayStates		&lt;Dictionary&gt;				The dictionary of states (#OnStart #OnSave, #OnIdle, #OnType) and the installed collection of reason levels which govern when errors or warnings should display.	IdleDelayMilliseconds	&lt;Integer&gt;					The threshhold after which decorations should begin displaying some indication that the user is idle at the keyboard.</body></comment><class><name>SourceCodeDialogModel</name><environment>Refactory.Browser</environment><super>UI.ViewBehavior</super><private>false</private><indexed-type>none</indexed-type><inst-vars>position icon optionsStyle options suboptionsStyle suboptions iconBaseline </inst-vars><class-inst-vars></class-inst-vars><imports>			private Text2.*			</imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SourceCodeDialogModel</class-id><body>SourceCodeDialogModel is a kind of "inline modal dialog" in the source code editor. When the input cursor is in a warning or an error, specific actions may have shortcut keys that can be used. Those keys are owned by the inline modal dialog as long as it has input cursor "focus", but you can navigate away with the cursor keys or with a mouse click at any time. When it does not have "focus", the shortcuts will not be owned by that particular inline modal dialog and it will visually remove the indications of which keys are bound to it.Instance Variables:	icon			&lt;AlphaCompositedImage&gt;	The icon to display	iconBaseline	&lt;Integer&gt;				The baseline of the icon	position		&lt;Integer&gt;				The position in a document this dialog was previously inserted	options		&lt;(Collection of: (Array))&gt;	The options to be displayed	optionsStyle	&lt;DocumentStyle&gt;		The styling for the inserted dialog	suboptions	&lt;(Collection of: (Array))&gt;		The suboptions to be displayed	suboptionsStyle	&lt;DocumentStyle&gt;		The styling for the inserted dialog</body></comment><class><name>BrowserSharedVariableTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDeclarationTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.BrowserSharedVariableTool</class-id><body>BrowserSharedVariableTool is a CodeTool that edits shared variable definitions.</body></comment><class><name>SourceCodeSearch</name><environment>Refactory.Browser</environment><super>UI.DocumentSearch</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SourceCodeSearch</class-id><body>SourceCodeSearch is a variation on Text2.DocumentSearch which will search the parse tree when the find criteria looks like a multi-arg keyword selector.</body></comment><class><name>SyntaxHighlightDecoration</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RBProgramNodeVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>document theme methodVariables blockVariables temporaryVariables targetClass redefinedVariables depth methodSelector decoratingOffset environment reason </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SyntaxHighlightDecoration</class-id><body>SyntaxHighlightDecoration is an RBParseNode visitor that styles each node based on the node type matched to the SourceCodeTheme instance of a SourceCodeEditor. It styles the entire document with the default style of the theme, then styles individual nodes using style selectors for that node against the matched document style in the theme.If Searchlight-Core is loaded, its SearchDatabase will be used to mark message sends that are invalid.Instance Variables	decoratingOffset	&lt;ArithmeticValue&gt;	The offset in to the document to style	document		&lt;Document&gt;		The document to style	depth			&lt;ArithmeticValue&gt;	The current parenthesis or block closure depth	blockVariables	&lt;Collection of: String&gt;	The current names of scoped in block variables	methodSelector	&lt;Symbol&gt;			The selector for the method being decorated	methodVariables	&lt;Collection of: String&gt;	The names of the method parameter variables	redefinedVariables	&lt;Collection of: String&gt;	The names of variables that have been invalidly redefined in scope	targetClass	&lt;Behavior&gt;				The class this code is to be compiled against	environment	&lt;NameSpace&gt;		The namespace this code is to be compiled against	temporaryVariables	&lt;Collection&gt;	The names of the temporary variables in scope	theme	&lt;SourceCodeTheme&gt;		The theme to match style selectors against	reason	&lt;Symbol&gt;					The reason this code is being compiled</body></comment><class><name>UrlDetector</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>characters position links unicodeProperties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.UrlDetector</class-id><body>UrlDetector takes either a CharacterArray (eg: String, Text) or a Document (similar, but can provide its own unicode properties) and detects within its content the locations of characters that appear to make up a URL.Instance Variables	characters	&lt;CharacterArray&gt;				The characters to scan	links		&lt;OrderedCollection of: Interval&gt;	The locations of URLs	position		&lt;ArithmeticValue&gt;				The current scan position	unicodeProperties	&lt;UnicodeProperties&gt;	The unicode properties used to describe delimiters</body></comment><class><name>SourceCodeDatabase</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>implementorsIndex </inst-vars><class-inst-vars>default </class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SourceCodeDatabase</class-id><body>SourceCodeDatabase stores a cache of all implementors in the system, which is unique from the symbol table in that it only contains symbols that are used for method implementations.Instance Variables	implementorsIndex	&lt;Dictionary of: Symbol -&gt; (IdentitySet of: Behavior)&gt;	all symbols in the system that implement a method, pointing to the classes that implement those methodsClass Instance Variables	default				&lt;SourceCodeDatabase&gt;	The active singleton</body></comment><class><name>SourceCodeEditorSpec</name><environment>Refactory.Browser</environment><super>UI.DocumentViewSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SourceCodeEditorSpec</class-id><body>SourceCodeEditorSpec describes the properties of an instance of a SourceCodeEditor.</body></comment><class><name>DeclarationHighlightDecoration</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RBProgramNodeVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>document targetClass decoratingOffset reason instanceVariableStyle errorStyle invalidStyle warningStyle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.DeclarationHighlightDecoration</class-id><body>DeclarationHighlightDecoration has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables	decoratingOffset	&lt;ArithmeticValue&gt;		The offset in to the document to style	document		&lt;Document&gt;			The document to style	errorStyle		&lt;DocumentStyle&gt;		The styling for an error message	warningStyle	&lt;DocumentStyle&gt;		The styling for an warning message	invalidStyle		&lt;DocumentStyle&gt;		The styling for the underlined content	instanceVariableStyle		&lt;DocumentStyle&gt;		The styling for a valid instance variable	reason			&lt;Symbol&gt;				The reason this styling is happening (#OnSave, #OnIdle, #OnType)	targetClass		&lt;Behavior&gt;				The class this code is to be compiled against</body></comment><class><name>SmalltalkAutocomplete</name><environment>Refactory.Browser</environment><super>UI.DocumentAutocomplete</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SmalltalkAutocomplete</class-id><body>SmalltalkAutocomplete is a plugin that performs a search through the image based on the current node being edited in a SourceCodeEditor to provide suggestions that popup in an autocomplete style window aligned to the content being written.</body></comment><class><name>SourceCodeDialog</name><environment>Refactory.Browser</environment><super>UI.ViewBehavior</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports>			private Text2.*			</imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><comment><class-id>Refactory.Browser.SourceCodeDialog</class-id><body>SourceCodeDialog reacts to the presence of SourceCodeDialogModel properties on styles in a source code editor and shows/hides keyboard shortcuts for the dialog options. If one of the shortcut keys is pressed while the input cursor is on the segment containing the dialog, the dialog action is activated rather than typing the key. This makes the dialog an inline-modal-dialog inside the source code editor.Instance Variables:	view	&lt;SourceCodeEditor&gt;	The source code editor this plugin belongs to</body></comment><shared-variable><name>CachedComment</name><environment>Refactory.Browser.DeclarationHighlightDecoration</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><shared-variable><name>CachedInstanceVariables</name><environment>Refactory.Browser.DeclarationHighlightDecoration</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><shared-variable><name>CachedClassInstanceVariables</name><environment>Refactory.Browser.DeclarationHighlightDecoration</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><shared-variable><name>LintRules</name><environment>Refactory.Browser.SmalllintDecoration</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><shared-variable><name>FontSize</name><environment>Refactory.Browser.SourceCodeTheme</environment><private>false</private><constant>false</constant><category>accessing - settings</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><shared-variable><name>FontName</name><environment>Refactory.Browser.SourceCodeTheme</environment><private>false</private><constant>false</constant><category>accessing - settings</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><shared-variable><name>DisplayStates</name><environment>Refactory.Browser.SourceCodeEditor</environment><private>false</private><constant>false</constant><category>private</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><shared-variable><name>ErrorsLevel</name><environment>Refactory.Browser.SourceCodeEditor</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><shared-variable><name>WarningsLevel</name><environment>Refactory.Browser.SourceCodeEditor</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><shared-variable><name>IdleDelayMilliseconds</name><environment>Refactory.Browser.SourceCodeEditor</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><shared-variable><name>KeywordControls</name><environment>Refactory.Browser.SyntaxHighlightDecoration</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><shared-variable><name>KeywordOperators</name><environment>Refactory.Browser.SyntaxHighlightDecoration</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><shared-variable><name>DomainSearchThreshold</name><environment>Refactory.Browser.UrlDetector</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><shared-variable><name>KnownProtocols</name><environment>Refactory.Browser.UrlDetector</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><shared-variable><name>CommonDomainSuffixes</name><environment>Refactory.Browser.UrlDetector</environment><private>false</private><constant>false</constant><category>accessing</category><attributes><package>Browser-SourceCodeUI</package></attributes></shared-variable><methods><class-id>Refactory.Browser.UrlCommentHighlightDecoration</class-id> <category>visitor-double dispatching</category><body package="Browser-SourceCodeUI">acceptCommentNode: aCommentInterval"	Matches the right thing in the following lines:		http://foo.com/blah_blah		http://foo.com/blah_blah/		(Something like http://foo.com/blah_blah)		http://foo.com/blah_blah_(wikipedia)		http://foo.com/more_(than)_one_(parens)		(Something like http://foo.com/blah_blah_(wikipedia))		http://foo.com/blah_(wikipedia)#cite-1		http://foo.com/blah_(wikipedia)_blah#cite-1		http://foo.com/unicode_(âª)_in_parens		http://foo.com/(something)?after=parens		http://foo.com/blah_blah.		http://foo.com/blah_blah/.		&lt;http://foo.com/blah_blah&gt;		&lt;http://foo.com/blah_blah/&gt;		http://foo.com/blah_blah,		http://foo.org.		(http://foo.org.)		http://www.extinguishedscholar.com/wpglob/?p=364.		http://âªdf.ws/1234		rdar://1234		rdar:/1234		x-yojimbo-item://6303E4C1-6A6E-45A6-AB9D-3A908F59AE0E		message://%3c330e7f840905021726r6a4ba78dkf1fd71420c1bf6ff@mail.gmail.com%3e		http://â¡.ws/ä¨¹		www.c.ws/ä¨¹		&lt;tag&gt;http://example.com&lt;/tag&gt;		Just a www.example.com link.		http://example.com/something?with,commas,in,url, but not at end		What about &lt;mailto:gruber@daringfireball.net?subject=TEST&gt; (including brokets).		mailto:name@example.com		bit.ly/foo		âis.gd/foo/â		WWW.EXAMPLE.COM		http://www.asianewsphoto.com/(S(neugxif4twuizg551ywh3f55))/Web_ENG/View_DetailPhoto.aspx?PicId=752		http://www.asianewsphoto.com/(S(neugxif4twuizg551ywh3f55))		http://lcweb2.loc.gov/cgi-bin/query/h?pp/horyd:@field(NUMBER+@band(thc+5a46634))		http://example.com/quotes-are-âpartâ		âªdf.ws/1234		example.com		example.com/		Should fail against:		6:00p		filename.txt		http://#"[	| links link action |	links := UrlDetector detect: document from: aCommentInterval first + 1 to: aCommentInterval last - 1.	links do: [:linkInterval |		link := (document copyBetween: decoratingOffset + aCommentInterval first + linkInterval first - 1 and: decoratingOffset + aCommentInterval first + linkInterval last) asString.		action := Text2.DocumentActionHyperlink new			url: link;			yourself.		document			replaceBetween: decoratingOffset + aCommentInterval first + linkInterval first - 1			and: decoratingOffset + aCommentInterval first + linkInterval last			apply: [style copy action: action; intern]]] on: Error do: [:ex | ]</body></methods><methods><class-id>Refactory.Browser.UrlCommentHighlightDecoration</class-id> <category>visiting</category><body package="Browser-SourceCodeUI">visitComments: aNode	aNode comments do: [:each | self acceptCommentNode: each]</body><body package="Browser-SourceCodeUI">visitNode: aNode	super visitNode: aNode.	self visitComments: aNode</body></methods><methods><class-id>Refactory.Browser.UrlCommentHighlightDecoration</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">initialize: aDocument editor: aSourceCodeEditor offset: aDecoratingOffset reason: aReason	document := aDocument.	decoratingOffset := aDecoratingOffset.	style := aSourceCodeEditor theme match: #(markup link)</body></methods><methods><class-id>Refactory.Browser.UrlCommentHighlightDecoration class</class-id> <category>testing</category><body package="Browser-SourceCodeUI">isForWorkspace	^false</body></methods><methods><class-id>Refactory.Browser.UrlCommentHighlightDecoration class</class-id> <category>instance creation</category><body package="Browser-SourceCodeUI">decorate: aDocument parseTree: aParseTree editor: aSourceCodeEditor offset: decoratingOffset reason: aReason	^(self new initialize: aDocument editor: aSourceCodeEditor offset: decoratingOffset reason: aReason)		visitNode: aParseTree;		yourself</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool</class-id> <category>actions</category><body package="Browser-SourceCodeUI">acceptDocument	"Accept the document back from the editor widget in to the tool and do whatever it is the tool needs to do to save it to the runtime system."	^self subclassResponsibility</body><body package="Browser-SourceCodeUI">cancelDocument	"Restore the tool back to an un-edited state, canceling any edits that have taken place but adding to the undo/redo stack so that the cancel can be undone."		self editorWidget ifNotNil: [:editor | ^editor revert].	self document: documentHolder value</body><body package="Browser-SourceCodeUI">navigateToClass: aBinding	(self updateRequest and: [self changeRequest]) ifFalse: [^self].	codeModel setBinding: aBinding</body><body package="Browser-SourceCodeUI">navigateToInstanceVariable: anInstanceVariable	| state newState |	(self updateRequest and: [self changeRequest]) ifFalse: [^self].	self environment isClassContainer ifTrue: [		state := codeModel navigator getState.		state instanceVariables: (Array with: anInstanceVariable).		codeModel navigator updateWithState: state.		^self].		(newState := codeModel navigator getState copy)		instanceVariables: (Array with: anInstanceVariable).	(RefactoringBrowser open navigator)		setState: newState;		changed</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">doItReceiver	| classOrNameSpace |	classOrNameSpace := self classOrNameSpace.	^classOrNameSpace isNameSpace ifTrue: [nil] ifFalse: [classOrNameSpace]</body><body package="Browser-SourceCodeUI">document		^documentHolder value</body><body package="Browser-SourceCodeUI">document: aDocument	documentHolder value: aDocument asDocument</body><body package="Browser-SourceCodeUI">editorWidget	"Return the editor widget in the tool, if it is built yet, otherwise nil."	builder == nil ifTrue: [^nil].	^(builder componentAt: #documentEditor)		ifNil: [nil]		ifNotNil: [:component | component widget]</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool</class-id> <category>updating</category><body package="Browser-SourceCodeUI">okToChangeToolFocus		| choice |	choice := Dialog 				choose: (#AcceptUnsavedTextChanges &lt;&lt; #browser &gt;&gt; 'Accept unsaved text changes?')				labels: (Array with: (#Yes &lt;&lt; #browser &gt;&gt; 'Yes') with: (#No &lt;&lt; #browser &gt;&gt; 'No') with: (#Cancel &lt;&lt; #browser &gt;&gt; 'Cancel'))				values: #(#yes #no #cancel)				default: #yes.	choice = #cancel ifTrue: [^false].	choice = #yes ifTrue: [^self acceptDocument].	self cancelDocument.	^true</body><body package="Browser-SourceCodeUI">updateRequest	^super updateRequest and: [self isEditing not or: [self okToChangeToolFocus]]</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool</class-id> <category>menu accessing</category><body package="Browser-SourceCodeUI">rebuildMenus	"The Edit menu for this tool is composed from the mainMenu of the receivers class + the contextMenu of the editor."	| contextMenu baseMenu |	self editorWidget ifNotNil: [:editor | editor menuHolder: self documentMenuWithAcceptAndRevert].	super rebuildMenus.	baseMenu := menu.	menu := [		contextMenu := self documentMenu value copy.		contextMenu augmentFrom: self class to: BrowserDocumentTool menuName: #editMenu for: self.		contextMenu menuItems do: [:each |			each actionPerformer: [self editorWidget].			each value: [self editorWidget handleEvent: (CommandEvent menuItem: each)]].		(contextMenu menuItemForCommandID: #selectAll) ifNotNil: [:menuItem | menuItem visible: [true]].		baseMenu copy			addPart: contextMenu;			yourself]</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool</class-id> <category>aspects</category><body package="Browser-SourceCodeUI">documentHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^documentHolder</body><body package="Browser-SourceCodeUI">documentMenu	"Subclasses should override this method to specify the context menu of the editor."	^ValueHolder with: self editorWidget contextMenu</body><body package="Browser-SourceCodeUI">documentMenuWithAcceptAndRevert	"Take the standard documentMenu but prepend custom Accept and Revert actions for the context menu only."	^[	| contextMenu |		contextMenu := UI.Menu new.		contextMenu addItemGroup: (Array			with: ((MenuItem forCommand: #accept) value: [self acceptDocument]; yourself)			with: ((MenuItem forCommand: #cancelText) value: [self cancelDocument]; yourself)).		contextMenu addPart: self documentMenu value.		contextMenu]</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">initialize	super initialize.	documentHolder := Text2.Document new asValue</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool</class-id> <category>subcanvases</category><body package="Browser-SourceCodeUI">isWorkspace	^self subclassResponsibility</body><body package="Browser-SourceCodeUI">saveState	self editorWidget ifNotNil: [:widget | savedState := widget document]</body><body package="Browser-SourceCodeUI">updateDisplay	super updateDisplay.	self rebuildMenus.	self editorWidget ifNotNil: [:editor |		editor evaluator: self.		editor isWorkspace: self isWorkspace.		editor margin: Rectangle zero].	savedState == nil ifTrue: [^self].	self editorWidget ifNotNil: [:editor | editor document: savedState].	savedState := nil</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool</class-id> <category>testing</category><body package="Browser-SourceCodeUI">canRedo	^self editorWidget canRedo</body><body package="Browser-SourceCodeUI">canUndo	^self editorWidget canUndo</body><body package="Browser-SourceCodeUI">hasChanged	self editorWidget ifNotNil: [:editor | ^self document asString ~= editor document asString].	^false</body><body package="Browser-SourceCodeUI">isEditing	^super isEditing or: [self hasChanged]</body><body package="Browser-SourceCodeUI">isFindOpen	^self editorWidget		ifNil: [false]		ifNotNil: [:editor | editor search isOpen]</body><body package="Browser-SourceCodeUI">isMethodDocument	self editorWidget document isProbableSmalltalkCode ifFalse: [^false].	self editorWidget parserClass parseMethod: self editorWidget document onError: [:s :p | ^false].	^true</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool</class-id> <category>private</category><body package="Browser-SourceCodeUI">performRefactoring: aRefactoring 	aRefactoring isNil ifTrue: [^self].	self handleError: [		super performRefactoring: aRefactoring.		codeModel navigate.		self updateContents]</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool</class-id> <category>private - compiling</category><body package="Browser-SourceCodeUI">changeWithPackageAndParcelInformation: anAddMethodChange		| package newSelector packages |	(package := self methodPackage) ifNil: [^nil].	anAddMethodChange package: package.	newSelector := anAddMethodChange selector.	newSelector ~= self selector		ifTrue:			[(anAddMethodChange changeObject includesSelector: newSelector)				ifTrue:					[(self						confirm:							(#x1sIsAlreadyDefinedIn2pReplaceQ &lt;&lt; #browser &gt;&gt;									'&lt;1s&gt; is already defined in &lt;2p&gt;.&lt;n&gt;Replace definition?'								expandMacrosWith: newSelector								with: anAddMethodChange changeObject)) ifFalse: [^nil].					packages := self storeRegistry						ifNil: [#()]						ifNotNil:							[:registry | 							registry								allContainingPackagesForSelector: newSelector								class: anAddMethodChange changeObject].					packages notEmpty						ifTrue:							[package := packages asArray first.							anAddMethodChange package: package]]				ifFalse: [^anAddMethodChange]].	(self shouldOverrideInPackage: package)		ifTrue: [^self overrideInPackageChange: anAddMethodChange].	^anAddMethodChange</body><body package="Browser-SourceCodeUI">methodPackage		| class selector items registry packages containerPackages |	(registry := self storeRegistry) ifNil: [^nil].	(class := self methodClass) ifNil: [^self package].	selector := self selector.	(selector notNil and: 			[(items := registry allContainingPackagesForSelector: selector class: class) 				notEmpty]) 		ifTrue: [^items asArray first].	packages := self packages asSet.	packages isEmpty ifTrue: [^nil].	containerPackages := packages 				select: [:each | (each definesClass: class) or: [each extendsClass: class]].	containerPackages isEmpty ifTrue: [containerPackages := packages].	containerPackages := containerPackages 				asSortedCollection: [:a :b | a name &lt; b name].	^containerPackages size = 1 		ifTrue: [containerPackages first]		ifFalse: 			[self 				choose: (#WhichPackage &lt;&lt; #browser &gt;&gt; 'Which package ')				fromList: (containerPackages collect: [:each | each displayString])				values: containerPackages				lines: 5				cancel: [nil]]</body><body package="Browser-SourceCodeUI">objectPackage	| classOrNameSpace registry |	(registry := self storeRegistry) ifNil: [^nil].	(classOrNameSpace := self classOrNameSpace) ifNil: [^self package].	^classOrNameSpace isBehavior 		ifTrue: [registry containingPackageForClass: classOrNameSpace]		ifFalse: [registry containingPackageForNameSpaceSymbol: classOrNameSpace absoluteSymbol]</body><body package="Browser-SourceCodeUI">overrideInPackageChange: anAddMethodChange		anAddMethodChange package: self package.	^(CompositeRefactoryChange named: anAddMethodChange name)		addChange: (MoveMethodToOverrideInPackageChange 					class: self selectedClass					selector: anAddMethodChange selector					package: self package);		addChange: (AddOverrideChange 					for: (Override forSelector: anAddMethodChange selector							class: anAddMethodChange changeObject));		addChange: anAddMethodChange;		yourself</body><body package="Browser-SourceCodeUI">shouldOverrideInPackage: package		^self packages notEmpty and: 			[(self packages includes: package) not 				and: [self confirm: (#CreateOverrideForMethod &lt;&lt; #browser &gt;&gt; 'Create override for method?')]]</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool</class-id> <category>actions - find &amp; replace</category><body package="Browser-SourceCodeUI">findNext	"Perform a findNext operation on the editor."	self editorWidget handleEvent: (CommandEvent commandID: #findNext)</body><body package="Browser-SourceCodeUI">findPrevious	"Perform a findPrevious operation on the editor."	self editorWidget handleEvent: (CommandEvent commandID: #findPrevious)</body><body package="Browser-SourceCodeUI">openFind	"Toggle the find tool for the editor."		self editorWidget handleEvent: (CommandEvent commandID: #find)</body><body package="Browser-SourceCodeUI">openFindAndReplace	"Toggle the find and replace tool for the editor."	self editorWidget handleEvent: (CommandEvent commandID: #replace)</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool</class-id> <category>actions - compilation</category><body package="Browser-SourceCodeUI">defineCompiledMethod: aCompiledMethod	"Specifically trap and report the DuplicateBindingsError but ensure we do not abort processing."	| change |	change := ExecuteCodeChange definition: aCompiledMethod getSource for: nil.	change package: self objectPackage.		self showWaitCursorWhile: [		[[self performChange: change]			on: DuplicateBindingsError do: [:ex | 				self warn: ex errorString.				ex proceed]]				on: Error do: [:exception |					exception isResumable						ifTrue: [(self confirm: ((#x1snDoYouWantToContinue &lt;&lt; #browser &gt;&gt; '&lt;1s&gt;&lt;n&gt;Do you want to continue?') expandMacrosWith: exception errorString)) ifTrue: [exception proceed]]						ifFalse: [self warn: exception errorString].					exception return: nil]].	^change changeObject</body><body package="Browser-SourceCodeUI">installCompiledMethod: aCompiledMethod	| basicChange adjustedChange |	basicChange := AddMethodChange		compile: aCompiledMethod getSource		in: aCompiledMethod mclass		classified: self protocol.	basicChange inheritProtocol.	basicChange tool: self.	adjustedChange := self changeWithPackageAndParcelInformation: basicChange.	adjustedChange ifNil: [^false].	self performChange: adjustedChange.		aCompiledMethod isProbed ifTrue: [		| unprobedMethod |		unprobedMethod := aCompiledMethod mclass compiledMethodAt: basicChange selector.		aCompiledMethod mclass addSelector: basicChange selector withMethod: aCompiledMethod.		#{CraftedSmalltalk.PDPManager} ifDefinedDo: [:managerClass |			managerClass changedMethodFrom: unprobedMethod to: aCompiledMethod by: self]].		basicChange definedSelector ifNotNil: [:selector |		self selector = selector ifFalse: [codeModel setSelector: selector]].		^true</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool</class-id> <category>actions - undo/redo</category><body package="Browser-SourceCodeUI">redoDocumentEdit	"Perform a redo operation on the editor."	self editorWidget handleEvent: (CommandEvent commandID: #redo)</body><body package="Browser-SourceCodeUI">undoDocumentEdit	"Perform an undo operation on the editor."	self editorWidget handleEvent: (CommandEvent commandID: #undo)</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool</class-id> <category>refactoring</category><body package="Browser-SourceCodeUI">abstractInstanceVariable: aString 	self 		performRefactoring: (AbstractInstanceVariableRefactoring variable: aString				class: (self selectedClass whichClassDefinesInstVar: aString))</body><body package="Browser-SourceCodeUI">addInstanceVariable	self navigator addInstanceVariableIn: self selectedClass.	self updateContents</body><body package="Browser-SourceCodeUI">addInstanceVariable: aVariableName	self performRefactoring: (AddInstanceVariableRefactoring variable: aVariableName class: self selectedClass)</body><body package="Browser-SourceCodeUI">browseInstanceVariableReaders	| name |	(name := self selectedVariableName) ifNil: [^self].	self browseInstanceVariableReaders: name</body><body package="Browser-SourceCodeUI">browseInstanceVariableReaders: aVariableName	self navigator browseGlobalInstVarReadersTo: aVariableName in: self selectedClass</body><body package="Browser-SourceCodeUI">browseInstanceVariableReferences	| name |	(name := self selectedVariableName) ifNil: [^self].	self browseInstanceVariableReferences: name</body><body package="Browser-SourceCodeUI">browseInstanceVariableReferences: aVariableName	self navigator browseGlobalInstVarRefsTo: aVariableName in: self selectedClass</body><body package="Browser-SourceCodeUI">browseInstanceVariableWriters	| name |	(name := self selectedVariableName) ifNil: [^self].	self browseInstanceVariableWriters: name</body><body package="Browser-SourceCodeUI">browseInstanceVariableWriters: aVariableName	self navigator browseGlobalInstVarWritersTo: aVariableName in: self selectedClass</body><body package="Browser-SourceCodeUI">createInstanceVariableAccessors	| name |	name := self selectedVariableName.	name isNil ifTrue: [^self].	self createInstanceVariableAccessors: name</body><body package="Browser-SourceCodeUI">createInstanceVariableAccessors: aString	self performRefactoring: (CreateAccessorsForVariableRefactoring 				variable: aString				class: (self selectedClass whichClassDefinesInstVar: aString))</body><body package="Browser-SourceCodeUI">protectInstanceVariable	| name |	name := self selectedVariableName.	name isNil ifTrue: [^self].	self protectInstanceVariable: name</body><body package="Browser-SourceCodeUI">protectInstanceVariable: aString 	self 		performRefactoring: (ProtectInstanceVariableRefactoring variable: aString				class: (self selectedClass whichClassDefinesInstVar: aString))</body><body package="Browser-SourceCodeUI">pushDownInstanceVariable	self pushDownInstanceVariable: self editorWidget selection</body><body package="Browser-SourceCodeUI">pushDownInstanceVariable: aVariableName	self performRefactoring: (PushDownInstanceVariableRefactoring variable: aVariableName class: self selectedClass)</body><body package="Browser-SourceCodeUI">pushUpInstanceVariable	| name |	name := self selectedVariableName.	name isNil ifTrue: [^self].	self pushUpInstanceVariable: name</body><body package="Browser-SourceCodeUI">pushUpInstanceVariable: aString	self performRefactoring: (PullUpInstanceVariableRefactoring		variable: aString		class: (self selectedClass whichClassDefinesInstVar: aString) superclass)</body><body package="Browser-SourceCodeUI">removeInstanceVariable	self removeInstanceVariable: self editorWidget selection</body><body package="Browser-SourceCodeUI">removeInstanceVariable: aVariableName	self changeRequest ifFalse: [^self].	self navigator removeInstanceVariable: aVariableName fromClass: self selectedClass</body><body package="Browser-SourceCodeUI">renameInstanceVariable	| name |	name := self selectedVariableName.	name isNil ifTrue: [^self].	self renameInstanceVariable: name</body><body package="Browser-SourceCodeUI">renameInstanceVariable: aVariableName	self navigator renameInstanceVariable: aVariableName		in: (self selectedClass whichClassDefinesInstVar: aVariableName).	self updateContents</body><body package="Browser-SourceCodeUI">selectedVariableName	"Guess the variable name from the selection. Search outwards from the selection (just anchor, partial, or whole) to get the whole alphaNumeric text."	^self editorWidget selectedVariableName</body></methods><methods><class-id>Refactory.Browser.BrowserOverviewTool</class-id> <category>tab APIs</category><body package="Browser-SourceCodeUI">isActive	^self narrowestSelectionType isNil</body><body package="Browser-SourceCodeUI">tabName	^#Overview &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.BrowserOverviewTool</class-id> <category>aspects</category><body package="Browser-SourceCodeUI">documentMenu	^ValueHolder with: self class documentMenu</body></methods><methods><class-id>Refactory.Browser.BrowserOverviewTool</class-id> <category>resources</category><body package="Browser-SourceCodeUI">overviewText	| stream |	stream := TextStream on: String new.	stream		nextPutAll: 'The ';		emphasis: #italic;		nextPutAll: 'System Browser';		emphasis: nil;		nextPutAll: ' presents a structured view of the Cincom Smalltalk class library. Use it for browsing classes and their method definitions in the current image. You can browse classes as they are organized into packages or browse a specific class hierarchy. Method definitions are browsed as they are defined in each selected class. ';		emphasis: nil;		nextPutAll: 'As the principal programming tool in Cincom Smalltalk, you can use the browser to define new packages, classes, and name spaces, as well as for editing and refactoring any portion of the class library.For complete documentation, start with the ';		emphasis: #bold;		nextPutAll: 'Help';		emphasis: nil;		nextPutAll: ' menu or refer to the discussion of "Browsing and Editing Smalltalk Code" in the ';		emphasis: #italic;		nextPutAll: 'VisualWorks Application Developer''s Guide';		emphasis: nil;		nextPutAll: ':http://www.cincomsmalltalk.com/main/documentation/VisualWorks/AppDevGuide.pdfTutorials are also available to illustrate the System Browser and other tools in action:http://www.cincomsmalltalk.com/main/developer-community/tutorials'.	^stream contents</body></methods><methods><class-id>Refactory.Browser.BrowserOverviewTool</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">doItReceiverClass	"Even though this is a read-only tool, we still need a DoIt receiver class in order to find the language,	 which then allows us to correctly decorate URLs."	^Object</body></methods><methods><class-id>Refactory.Browser.BrowserOverviewTool</class-id> <category>interface opening</category><body package="Browser-SourceCodeUI">postBuildWith: aBuilder	"Do not install the overview document until after the SCE has been fully configured.	 The widget requires an evaluator which implements #doItReceivleClass, otherwise	 we cannot find the language that enables URL decoration in the document."	self editorWidget ifNotNil: [:editor |		editor evaluator: self.		editor isReadOnly: true.		editor isWorkspace: self isWorkspace.		editor margin: Rectangle zero].	self document: self overviewText</body></methods><methods><class-id>Refactory.Browser.BrowserOverviewTool</class-id> <category>menu accessing</category><body package="Browser-SourceCodeUI">rebuildMenus	"This is a read-only tool"	self editorWidget ifNotNil: [:editor | editor menuHolder: self documentMenu].</body></methods><methods><class-id>Refactory.Browser.BrowserOverviewTool</class-id> <category>subcanvases</category><body package="Browser-SourceCodeUI">isWorkspace	^true</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutoQuote</class-id> <category>private</category><body package="Browser-SourceCodeUI">applyCloseDelimiterBetween: openCharacter and: closeCharacter	"Check 1: Is the close delimiter to the right of the cursor?"	(view inputPosition &lt; view document size and: [(view document at: view inputPosition + 1) == closeCharacter]) ifFalse: [^false].		"Check 2: Paragraph is balanced?"	(self isBalanced: openCharacter and: closeCharacter) ifFalse: [^false].		"Pretend they typed the character by moving right one character."	view moveRight.	^true</body><body package="Browser-SourceCodeUI">applyOpenDelimiterBetween: openCharacter and: closeCharacter	"Check 1: Alpha-numerics to the right of the input cursor?"	(view inputPosition &lt; view document size and: [(view document at: view inputPosition + 1) isAlphaNumeric]) ifTrue: [^false].		"Check 2: Paragraph is balanced?"	(self isBalanced: openCharacter and: closeCharacter) ifFalse: [^false].		self insert: openCharacter and: closeCharacter.	^true</body><body package="Browser-SourceCodeUI">applyQuote: character		| inputPosition skipBalanceCheck |	skipBalanceCheck := false.	inputPosition := view inputPosition + 1.		"Check 1: Alpha-numerics to the right of the input cursor?"	(view inputPosition &lt; view document size and: [(view document at: inputPosition) isAlphaNumeric]) ifTrue: [^false].		"Check 2: Are we inside a comment?"	character ~~ $" ifTrue: [		view selectionNode ifNotNil: [:node |			node allCommentsDo: [:commentInterval |				(commentInterval includes: inputPosition)					ifTrue: [^false]]]].		"Check 3: Are we | and are we the first inside a block with arguments"	character == $| and: [		| isInBlockWithParameters |		isInBlockWithParameters := (inputPosition - 1 to: view selectionStartParagraph start + 1 by: -1)			detect: [:position | '[:' includes: (view document at: position)]			ifFound: [:position | (view document at: position) = $:]			ifNone: [false].		isInBlockWithParameters ifTrue: [			| areParametersClosed |			areParametersClosed := (inputPosition - 1 to: view selectionStartParagraph start + 1 by: -1)				detect: [:position | '[|' includes: (view document at: position)]				ifFound: [:position | (view document at: position) = $|]				ifNone: [false].			areParametersClosed ifFalse: [^false].			skipBalanceCheck := true]].		"Check 4: Is the paragraph balanced?"	skipBalanceCheck ifFalse: [		| open previousWasQuote |		open := false.		previousWasQuote := false.		view selectionStartParagraph start + 1 to: view selectionStopParagraph stop do: [:index |			(view document at: index) = character				ifTrue: [					previousWasQuote						ifTrue: [previousWasQuote := false]						ifFalse: [							open ifTrue: [previousWasQuote := true].							open := open not]]				ifFalse: [previousWasQuote := false]].		open ifTrue: [^false]].		"Check 5: Are we typing a close quote?"	(view inputPosition &lt; view document size and: [(view document at: inputPosition) = character]) ifTrue: [		view moveRight.		^true].		"Check 6: Are we typing a close | which can be a space+| if typed immediately after Check #3"	((view inputPosition + 1) &lt; view document size and: [(view document at: inputPosition) isSeparator and: [(view document at: inputPosition + 1) = character]]) ifTrue: [		view moveByGrapheme: 2.		^true].		"Insert two quotes."	character = $| ifTrue: [		self insertTemporariesBoundary.		^true].	self insert: character and: character.	^true</body><body package="Browser-SourceCodeUI">applySelectionBetween: openCharacter and: closeCharacter	| selection start stop |	selection := view selection asString.	start := Array		with: (view selectionStartPosition &gt; 0 ifTrue: [view document at: view selectionStartPosition])		with: (view selectionStopPosition &gt; 0 ifTrue: [view document at: view selectionStopPosition]).	stop := Array		with: (view selectionStartPosition &lt; view document size ifTrue: [view document at: view selectionStartPosition + 1])		with: (view selectionStopPosition &lt; view document size ifTrue: [view document at: view selectionStopPosition + 1]).		"Scenario 1: Quotes are contained in the selection, remove them."	(selection size &gt; 2 and: [start last = openCharacter and: [stop first = closeCharacter]]) ifTrue: [		^view insert: ((selection allButFirst: 1) allButLast: 1)].		"Scenario 2: Quotes are around the selection, remove them."	(selection size &gt; 2 and: [start first = openCharacter and: [stop last = closeCharacter]]) ifTrue: [		view selectBetween: view selectionStartPosition - 1 and: view selectionStopPosition + 1.		^view insert: selection].		"Scenario 3: The selection contains a suggestion tab only, replace the selection."	view selection size = 1 ifTrue: [		view selection offsetsAndSegmentsDo: [:offset :segment |			segment isSuggestionTab ifTrue: [				^self insert: openCharacter and: closeCharacter]]].		"Scenario 4: Quote the selection."	view insert: (String with: openCharacter).	view insert: selection.	view insert: (String with: closeCharacter)</body><body package="Browser-SourceCodeUI">insert: openCharacter and: closeCharacter		| change |	change := view newChange: #autoquote with: (Text2.Document fromString: (String with: openCharacter with: closeCharacter) style: view currentStyle).	change newAnchorPosition: change newAnchorPosition - 1.	change newInputPosition: change newInputPosition - 1.	view performChange: change</body><body package="Browser-SourceCodeUI">insertTemporariesBoundary		| change |	change := view newChange: #autoquote with: (Text2.Document fromString: '|  |' style: view currentStyle).	change newAnchorPosition: change newAnchorPosition - 2.	change newInputPosition: change newInputPosition - 2.	view performChange: change</body><body package="Browser-SourceCodeUI">isBalanced: openCharacter and: closeCharacter		| character quoted commented depth charactered |	quoted := false.	commented := false.	charactered := false.	depth := 0.	1 to: view document size do: [:index |		character := (view document at: index).		(quoted not and: [commented not and: [charactered not]]) ifTrue: [			character = openCharacter ifTrue: [depth := depth + 1].			character = closeCharacter ifTrue: [depth := depth - 1]].		(commented not and: [character = $']) ifTrue: [quoted := quoted not].		(quoted not and: [character = $"]) ifTrue: [commented := commented not].		(commented not and: [quoted not and: [charactered not and: [character = $$]]]) ifTrue: [charactered := charactered not]].	^depth = 0 and: [quoted not and: [commented not]]</body><body package="Browser-SourceCodeUI">isQuotedPairRemovable	| inputPosition left right leftIndex rightIndex |	view hasSelection ifTrue: [^false].		inputPosition := view inputPosition.	inputPosition = 0 ifTrue: [^false].	inputPosition = view document size ifTrue: [^false].	"Check 1: Are we between two matching quite pairs?"	left := view document at: inputPosition.	right := view document at: inputPosition + 1.	leftIndex := view openDelimiters indexOf: left ifAbsent: [^false].	rightIndex := view closeDelimiters indexOf: right ifAbsent: [^false].	leftIndex = rightIndex ifFalse: [^false].		"Check 2: Is the paragraph balanced?"	(self isBalanced: left and: right) ifFalse: [^false].		^true</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutoQuote</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">initialize: aDocumentView	view := aDocumentView</body></methods><methods><class-id>Refactory.Browser.SmalllintDecoration</class-id> <category>visitor-double dispatching</category><body package="Browser-SourceCodeUI">acceptMethodNode: aMethodNode	self overridesSpecialMessage: aMethodNode.	self definesEqualsNotHash:  aMethodNode.	LintRules do: [:each |		| rule answer |		rule := ParseTreeLintRule perform: each.		answer := rule matcher executeTree: aMethodNode initialAnswer: nil.		(answer ~~ nil and: [answer hasErrors not]) ifTrue: [			self insertWarning: rule name from: answer start to: answer stop]]</body><body package="Browser-SourceCodeUI">definesEqualsNotHash: aMethodNode	| other |	(#(= hash) includes: aMethodNode selector) ifFalse: [^self].	other := #(= hash) copyWithout: aMethodNode selector.	(context selectedClass includesSelector: other first) ifTrue: [^self].	self insertWarning: (#DefinesEqButNotHash &lt;&lt; #browser &gt;&gt; 'Defines = but not hash') expandMacros at: 1</body><body package="Browser-SourceCodeUI">overridesSpecialMessage: aMethodNode	((context selectedClass isMeta		ifTrue: [BlockLintRule metaclassShouldNotOverride]		ifFalse: [BlockLintRule classShouldNotOverride])		anySatisfy: [:each | each = aMethodNode selector]) ifFalse: [^self].	self insertWarning: (#OverridesASpecialMessage &lt;&lt; #browser &gt;&gt; 'Overrides a "special" message') expandMacros at: 1</body></methods><methods><class-id>Refactory.Browser.SmalllintDecoration</class-id> <category>private</category><body package="Browser-SourceCodeUI">insertWarning: message at: position		^self insertWarning: message from: position to: position</body><body package="Browser-SourceCodeUI">insertWarning: message from: start to: stop	| errorDocument safeStart safeStop endOfLine |	errorDocument := Text2.Document fromSegment: (Text2.DocumentImage fromImage: SourceCodeDialogModel warningIcon baseline: SourceCodeDialogModel warningBaseline style: warningStyle).	errorDocument insertAt: 0 with: ' ' style: warningStyle.	errorDocument insertAt: 2 with: ' ', message, ' ' style: warningStyle.	safeStart := ((start + decoratingOffset) min: document size) max: 1.	safeStop := ((stop + decoratingOffset) min: document size) max: 0.	(safeStart &gt; safeStop) ifTrue: [safeStart := safeStop - 1].	safeStart := safeStart max: 0.	endOfLine := document nextParagraphBreakAfter: safeStart.	safeStop := safeStop min: endOfLine.	document replaceBetween: safeStart and: safeStop apply: [style].	safeStart = 0 ifTrue: [^self].	document replaceBetween: safeStart - 1 and: safeStart apply: [		style copy			annotationStyle: #dodge;			annotation: errorDocument;			yourself].	^false</body></methods><methods><class-id>Refactory.Browser.SmalllintDecoration</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">initialize: aDocument editor: aSourceCodeEditor offset: aDecoratingOffset reason: aReason	super initialize.	document := aDocument.	context := SmalllintContext newNoCache.	context selectedClass: aSourceCodeEditor doItReceiverClass.	decoratingOffset := aDecoratingOffset.	style := aSourceCodeEditor theme match: #(invalid illegal).	warningStyle := aSourceCodeEditor theme match: #(invalid warning)</body></methods><methods><class-id>Refactory.Browser.SmalllintDecoration class</class-id> <category>instance creation</category><body package="Browser-SourceCodeUI">decorate: aDocument parseTree: aParseTree editor: aSourceCodeEditor offset: aDecoratingOffset reason: aReason		(SourceCodeEditor shouldDisplayWarnings: aReason) ifFalse: [^self].	aSourceCodeEditor doItReceiverClass == nil ifTrue: [^self].	(aSourceCodeEditor doItReceiverClass compilerClass inheritsFrom: SmalltalkCompiler) ifFalse: [^self].	^(self new initialize: aDocument editor: aSourceCodeEditor offset: aDecoratingOffset reason: aReason)		visitNode: aParseTree;		yourself</body></methods><methods><class-id>Refactory.Browser.SmalllintDecoration class</class-id> <category>class initialization</category><body package="Browser-SourceCodeUI">initialize	"self initialize"		LintRules := #(		"bugs"		booleanPrecedence		"intention revealing"		collectSelectNotUsed indexOf literalArrayCharacters minMax sizeCheck		"possible bugs"		equalNotUsed fileBlocks modifiesCollection returnInEnsure returnsIfTrue threeElementPoint usesAdd		"unnecessary code"		asOrderedCollectionNotNeeded extraBlock unnecessaryAssignment)</body></methods><methods><class-id>Refactory.Browser.SmalllintDecoration class</class-id> <category>testing</category><body package="Browser-SourceCodeUI">isForWorkspace	^false</body></methods><methods><class-id>Refactory.Browser.BrowserSourceCodeTool</class-id> <category>testing</category><body package="Browser-SourceCodeUI">canAccept	^self selectors size &lt;= 1</body><body package="Browser-SourceCodeUI">canExtractMethod	^self editorWidget canExtractSelection</body><body package="Browser-SourceCodeUI">canFormat	^self selectors size &lt;= 1</body><body package="Browser-SourceCodeUI">canRevert	^self selectors size &lt;= 1</body><body package="Browser-SourceCodeUI">hasChanged	self editorWidget ifNil: [^false].	self editorWidget isReadOnly ifTrue: [^false].	^self hasSourceCodeChanged or: [self hasProbesChanged]</body><body package="Browser-SourceCodeUI">hasProbesChanged	self editorWidget ifNotNil: [:editor | ^probes ~= editor markupDocumentSegments].	^false</body><body package="Browser-SourceCodeUI">hasSourceCodeChanged	self editorWidget ifNotNil: [:editor | ^self document asString ~= editor documentWithoutMarkup asString].	^false</body></methods><methods><class-id>Refactory.Browser.BrowserSourceCodeTool</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">doItEnvironment	| compiledMethod |	(self selectors size &gt; 1 or: [self selectedClass isNil])		ifTrue: [^self classOrNameSpace environment].	self selector isNil ifTrue: [^self classOrNameSpace environment].	compiledMethod := self methodClass compiledMethodAt: self selector ifAbsent: [		^self methodClass environment].	^compiledMethod environment</body><body package="Browser-SourceCodeUI">doItExpectPattern	^true</body><body package="Browser-SourceCodeUI">doItReceiverClass	self editorWidget isReadOnly ifTrue: [^nil].	^self methodClass</body><body package="Browser-SourceCodeUI">protocol	| selections currentCategory |	selections := self protocols.	currentCategory := self definition ifNotNil: #protocol.	selections isEmpty ifTrue: [^currentCategory].	selections size = 1 ifTrue: [^selections any].	^(selections includes: currentCategory)		ifTrue: [currentCategory]		ifFalse: [selections any]</body></methods><methods><class-id>Refactory.Browser.BrowserSourceCodeTool</class-id> <category>actions</category><body package="Browser-SourceCodeUI">acceptDocument	"Accept the document back from the editor and format it if that's a setting that is set. If the editor contents do not currently compile, do nothing."	| compiledMethod |	self selectors size &gt; 1 ifTrue: [^self].	_.BrowserCodeTool.SaveAutoFormat == true ifTrue: [self formatDocument].	compiledMethod := self editorWidget compileMethod: #OnSave retry: [self acceptDocument].	compiledMethod ifNil: [^false].		self hasSourceCodeChanged ifFalse: [		self editorWidget animateAccept.		self hasProbesChanged ifTrue: [self probesUpdated: compiledMethod].		^true].		self editorWidget accept.	probes := self editorWidget markupDocumentSegments.	^self installCompiledMethod: compiledMethod</body><body package="Browser-SourceCodeUI">extractMethod	self editorWidget extractMethod</body><body package="Browser-SourceCodeUI">formatDocument	"Format the document in the editor using the editors current parser."	self editorWidget format</body></methods><methods><class-id>Refactory.Browser.BrowserSourceCodeTool</class-id> <category>updating</category><body package="Browser-SourceCodeUI">changedMethodFrom: oldMethod to: newMethod by: aBrowser	self mainWindow		ifNil: [^self]		ifNotNil: [:window | window isOpen ifFalse: [^self]].	aBrowser == self ifTrue: [^self].	(newMethod selector == self selector and: [newMethod mclass == self methodClass]) ifFalse: [^self].	self editorWidget ifNotNil: [:editor |		editor isOpen ifFalse: [^self].		self hasChanged ifTrue: [editor warning: (#MethodHasBeenChanged &lt;&lt; #browser &gt;&gt; 'Method has been changed since editing began') expandMacros. ^self].		self updateContents]</body><body package="Browser-SourceCodeUI">okToChangeToolFocus	| choice |	(self hasSourceCodeChanged not and: [self hasProbesChanged])		ifFalse: [^super okToChangeToolFocus].	choice := Dialog				choose: #AcceptUnsavedProbeDefinitionChanges &lt;&lt; #browser						&gt;&gt; 'Accept unsaved probe defintion changes?'				labels: (Array						with: #Yes &lt;&lt; #browser &gt;&gt; 'Yes'						with: #No &lt;&lt; #browser &gt;&gt; 'No'						with: #Cancel &lt;&lt; #browser &gt;&gt; 'Cancel')				values: #(#yes #no #cancel)				default: #yes.	choice = #cancel ifTrue: [^false].	choice = #yes ifTrue: [^self acceptDocument].	self cancelDocument.	^true</body><body package="Browser-SourceCodeUI">probesUpdated: aCompiledMethod	"A probe has been added, removed or its mode changed. If the source code hasn't been modified in any other way, auto-save the method to install the probe changes."	| existingMethod |	self hasSourceCodeChanged ifTrue: [^self].	self hasProbesChanged ifFalse: [^self].	existingMethod := aCompiledMethod mclass compiledMethodAt: self editorWidget parseTree selector ifAbsent: [^self].	probes := self editorWidget markupDocumentSegments.		aCompiledMethod sourcePointer: existingMethod sourcePointer.	aCompiledMethod mclass replaceMethodAt: self editorWidget parseTree selector withMethod: aCompiledMethod.	#{CraftedSmalltalk.PDPManager} ifDefinedDo: [:managerClass |		managerClass changedMethodFrom: existingMethod to: aCompiledMethod by: self]</body><body package="Browser-SourceCodeUI">showMultipleMethods	| compiledMethod sources source spacing spacingStyle |		sources := Text2.Document new.	spacingStyle := (self editorWidget theme match: #(entity name function)) copy.	spacingStyle		alignment: #center;		adornment: #jaggedUnderline;		adornmentColor: spacingStyle color;		paragraphSpacing: 8.	spacing := Text2.Document		fromString: (String with: Character cr),			'							',			(String with: Character cr)		style: spacingStyle intern.			self editorWidget invalidationSuppressWhile: [		self selectors do: [:selector |			(compiledMethod := self methodClass compiledMethodAt: selector ifAbsent: [nil]) == nil ifFalse: [				source := self methodClass sourceCodeForMethod: compiledMethod at: selector.					self editorWidget privateDocument: source asString asDocument.					self editorWidget compileMethod: #OnStart].				sources insertAt: sources size with: self editorWidget document]			separatedBy: [sources insertAt: sources size with: spacing]].		self editorWidget ifNotNil: [:editor | editor isReadOnly: true].	self document: sources</body><body package="Browser-SourceCodeUI">updateContents	| compiledMethod source |	probes := OrderedCollection new.	self editorWidget ifNotNil: [:editor |		editor isReadOnly: false.		editor highlights: #()].		self selectedClass isNil ifTrue: [^self document: ''].	self selectors size &gt; 1 ifTrue: [^self showMultipleMethods].	self selector isNil ifTrue: [^self document: self selectedClass sourceCodeTemplate].	compiledMethod := self methodClass compiledMethodAt: self selector ifAbsent: [^self document: ''].	source := self methodClass sourceCodeForMethod: compiledMethod at: self selector.	self documentHolder setValue: source string.	self editorWidget ifNotNil: [:editor |		editor compiledMethod: compiledMethod.		probes := editor markupDocumentSegments.		self updateSelection]</body><body package="Browser-SourceCodeUI">updateSelection	| interval strings |	builder window isOpen ifFalse: [^self].	codeModel state instanceVariable notNil ifTrue: [		self editorWidget highlightInstanceVariable: codeModel state instanceVariable].		strings := self environment searchStringsForClass: self methodClass selector: self selector.	strings isEmpty ifTrue: [		interval := self environment selectionIntervalFor: self editorWidget document inMethod: self selector class: self methodClass.			interval == nil ifFalse: [self editorWidget selectBetween: interval first - 1 and: interval last].		^self].	hasOpenedSearch == true ifFalse: [		hasOpenedSearch := true.		self editorWidget find].	self editorWidget isFindOpen		ifTrue: [			| string |			string := strings first asString.			(string notEmpty and: [string first = $*]) ifTrue: [string := string allButFirst: 1].			(string notEmpty and: [string last = $*]) ifTrue: [string := string allButLast: 1].			self editorWidget search reset.			self editorWidget searchDocument: string]		ifFalse: [			interval := self environment selectionIntervalFor: self editorWidget document inMethod: self selector class: self methodClass.			interval == nil ifFalse: [self editorWidget selectBetween: interval first - 1 and: interval last]]</body></methods><methods><class-id>Refactory.Browser.BrowserSourceCodeTool</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">initialize	super initialize.	#{PDPManager} ifDefinedDo: [:manager | manager notifyOnMethodChanged: self]</body><body package="Browser-SourceCodeUI">release	#{PDPManager} ifDefinedDo: [:manager | manager revokeMethodChangeNotificationFor: self].	super release</body></methods><methods><class-id>Refactory.Browser.BrowserSourceCodeTool</class-id> <category>tab management</category><body package="Browser-SourceCodeUI">isActive		^codeModel state notNil		and:			[codeModel selector notNil				or: [codeModel protocol notNil and: [codeModel isData not]]]</body><body package="Browser-SourceCodeUI">tabName		^#BrowserSourceCodeToolName &lt;&lt; #browser &gt;&gt; 'Source'</body></methods><methods><class-id>Refactory.Browser.BrowserSourceCodeTool</class-id> <category>subcanvases</category><body package="Browser-SourceCodeUI">isWorkspace	^false</body><body package="Browser-SourceCodeUI">updateDisplay	super updateDisplay.	self editorWidget ifNotNil: [:widget |		self hasChanged ifFalse: [self updateContents].		widget removeActionsWithReceiver: self forEvent: #probesUpdated.		widget when: #probesUpdated send: #probesUpdated: to: self]</body></methods><methods><class-id>Refactory.Browser.BrowserSourceCodeTool</class-id> <category>refactoring</category><body package="Browser-SourceCodeUI">inlineParameter: aVariableName selector: aSelector	self handleError: [		| ref |		ref := InlineParameterRefactoring 			inlineParameter: aVariableName			in: self doItReceiverClass			selector: aSelector.		ref execute.		codeModel setSelector: ref newSelector]</body><body package="Browser-SourceCodeUI">removeParameter: aVariableName selector: aSelector	self handleError: [		| ref |		ref := RemoveParameterRefactoring 			removeParameter: aVariableName			in: self doItReceiverClass			selector: aSelector.		ref execute.		codeModel setSelector: ref newSelector]</body></methods><methods><class-id>Refactory.Browser.UrlHighlightDecoration class</class-id> <category>instance creation</category><body package="Browser-SourceCodeUI">decorate: aDocument editor: aSourceCodeEditor offset: decoratingOffset reason: aReason	| links link action style |[		style := aSourceCodeEditor theme match: #(markup link).	links := UrlDetector detect: aDocument.	links do: [:linkInterval |		link := (aDocument copyBetween: decoratingOffset + linkInterval first - 1 and: decoratingOffset + linkInterval last) asString.		action := Text2.DocumentActionHyperlink new			url: link;			yourself.		aDocument			replaceBetween: decoratingOffset + linkInterval first - 1			and: decoratingOffset + linkInterval last			apply: [style copy action: action; intern]]] on: Error do: [:ex | ]</body></methods><methods><class-id>Refactory.Browser.UrlHighlightDecoration class</class-id> <category>testing</category><body package="Browser-SourceCodeUI">isForWorkspace	^true</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutocompleteSearch</class-id> <category>plugins - sources</category><body package="Browser-SourceCodeUI">selectorSuggestions: aNode receiver: aReceiverNode type: aType into: aSearchBlock		| classes interface |	classes := Set new.	inferenceTime := Time millisecondsToRun: [		aNode isValidForTypeInferencing: false.		interface := TypeInferencer.TypeInterface on: (TypeInferencer.Type of: view doItReceiverClass) in: view doItEnvironment.		(aReceiverNode asVirtualType: interface) addInferredInto: interface.		interface resolve do: [:eachType |			| isMeta behavior |			isMeta := eachType behavior isMeta.			behavior := eachType behavior.			[behavior notNil and: [behavior isMeta == isMeta]] whileTrue: [				classes add: behavior.				behavior := behavior superclass]].		aNode isValidForTypeInferencing: true].		classes notEmpty ifTrue: [		| accepted |		requireFirstLetterMatch := false.		accepted := false.		SourceCodeDatabase default implementorsIndex keysAndValuesDo: [:symbol :implementors |			| implementor |			implementor := implementors detect: [:each | classes includes: each] ifNone: [nil].			implementor ~~ nil ifTrue: [				accepted := (aSearchBlock value: symbol asSymbol value: implementor value: aType) or: [accepted]]].		requireFirstLetterMatch := true.		accepted ifTrue: [^self]].		"Try again without narrowing to a specific receiver."	SourceCodeDatabase default implementorsIndex keysAndValuesDo: [:symbol :implementors |		aSearchBlock value: symbol value: nil value: aType]</body><body package="Browser-SourceCodeUI">selectorSuggestions: aNode type: aType into: aSearchBlock		self selectorSuggestions: aNode receiver: aNode receiver type: aType into: aSearchBlock</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutocompleteSearch</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">initialize: aSourceCodeEditor for: aWord	super initialize: aSourceCodeEditor for: aWord.	inferenceTime := 0.	node := aSourceCodeEditor selectionNode.	word first = $# ifTrue: [word := word allButFirst: 1].	word isEmpty ifTrue: [^self].	search := FuzzyStringSearch criteria: word caseInsensitive: word first isLowercase</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutocompleteSearch</class-id> <category>api</category><body package="Browser-SourceCodeUI">search	"No results for an empty word."	word isEmpty ifTrue: [^#()].		"Only suggest if we have an understanding of the code structure."	node == nil ifTrue: [^#()].			"Don't suggest for keyword messages, this would require adjusting existing keyword selector parts and that might be a future enhancement."	(node isMessage and: [node isKeyword]) ifTrue: [^#()].	searchTime := Time millisecondsToRun: [		| truths |		truths := Dictionary new.		self class sources keysAndValuesDo: [:selector :test |			(truths at: test ifAbsentPut: [node perform: test]) ifTrue: [				self perform: selector with: [:aSuggestion :anObject :aClassification |					Processor yield.					self suggest: aSuggestion for: anObject as: aClassification]]]].		^search suggestions</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutocompleteSearch</class-id> <category>testing</category><body package="Browser-SourceCodeUI">isUndeclaredVariable: aVariableNode	| targetClass |	(#('self' 'super' 'thisContext') includes: aVariableNode name) ifTrue: [^false].	(aVariableNode whoDefines: aVariableNode name) == nil ifFalse: [^false].	(targetClass := view doItReceiverClass) == nil ifTrue: [^true].	(targetClass allInstVarNames includes: aVariableNode name) ifTrue: [^false].	^(SystemUtils		resolveBindingAsReference: aVariableNode name		inClass: targetClass		inEnvironment: view doItEnvironment) == nil</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutocompleteSearch</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">inferenceTime	^inferenceTime</body></methods><methods><class-id>Refactory.Browser.SourceCodeErrorHandler</class-id> <category>private</category><body package="Browser-SourceCodeUI">allNames: ns do: aBlock	ns localBindings do: [:b |		aBlock value: ns value: b key.		b isForNameSpace			ifTrue: [self allNames: b value do: aBlock]]</body><body package="Browser-SourceCodeUI">compare: aString against: anotherString andMaybeAddTo: scoreNameCollection	| score |	score := aString asLowercase spellAgainst: anotherString.	score &gt; 50 ifTrue: [scoreNameCollection add: score -&gt; aString]</body><body package="Browser-SourceCodeUI">expandLastPosition: last	| test each |	test := last + 1.	[test &lt;= document size and: [		each := document at: test.		each isSeparator or: [each == $.]]]			whileTrue: [test := test + 1].	test := test - 1.	test = last ifFalse: [document replaceBetween: last and: test apply: [style]].	^test</body><body package="Browser-SourceCodeUI">extraPseudoVariableNames	"Names not included in variable scopes,	but which the corrector still needs to suggest as receivers."	^#('true' 'false' 'nil')</body><body package="Browser-SourceCodeUI">spellingCorrectionsOf: aString from: codeStream 	"Attempt to correct the spelling of an undeclared variable."	| oldPattern candidates inclusionSet answer |	candidates := OrderedCollection new.	oldPattern := aString asLowercase.	codeStream namesAndValuesDo: 		[:name :value | self compare: name against: oldPattern andMaybeAddTo: candidates].	self extraPseudoVariableNames do: 		[:name | self compare: name against: oldPattern andMaybeAddTo: candidates].	inclusionSet := Set new.	answer := SortedCollection sortBlock: [:a1 :a2 | a1 &gt; a2].	candidates do:		[:each |			(inclusionSet includes: each value) ifFalse:				[					inclusionSet add: each value.					answer add: each				]		].	^answer asArray collect: [:i | i value]</body></methods><methods><class-id>Refactory.Browser.SourceCodeErrorHandler</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">initialize: aDocument editor: aSourceCodeEditor selector: aSelector offset: aDecoratingOffset reason: aReason	| theme |	super initialize.	selector := aSelector.	editor := aSourceCodeEditor.	document := aDocument.	selection := editor selectionStartPosition to: editor selectionStopPosition.	self class: aSourceCodeEditor doItReceiverClass.	decoratingOffset := aDecoratingOffset.	reason := aReason.	hasScrolled := false.	theme := aSourceCodeEditor theme.	style := theme match: #(invalid illegal).	errorStyle := theme match: #(invalid error).	warningStyle := theme match: #(invalid warning).	commentStyle := theme match: #(invalid unused)</body></methods><methods><class-id>Refactory.Browser.SourceCodeErrorHandler</class-id> <category>error handling</category><body package="Browser-SourceCodeUI">error: type with: message at: sourcePosition	"This message is sent for errors during parsing.	Possible values of type:		#syntax, message = error message		#newSelector, message = selector, sourcePosition is array of (source range,			keyword positions or nil).	Note: this comment is duplicated in all subclasses."	type = #syntax ifTrue: [		| aPosition |		(SourceCodeEditor shouldDisplayErrors: reason) ifFalse: [^self abort].				"Syntax errors can be caused by running past the end of the stream, so reset the error reporting back to the end of the content if that happens."		(aPosition := sourcePosition) + decoratingOffset &gt; document size ifTrue: [			aPosition := document size - decoratingOffset].				^self error: ((#SyntaxErrorColonMessage &lt;&lt; #dialogs &gt;&gt; 'Syntax Error: &lt;1s&gt;') expandMacrosWith: (self cleanMessage: message)) at: aPosition].	type = #newSelector ifTrue: [self newSelector: message range: sourcePosition first keywordPositions: sourcePosition last].	^false</body><body package="Browser-SourceCodeUI">error: type with: message in: node from: codeStream	"This message is sent for errors during	code generation.  Possible values of type:		#error, message = error message		#warning, message = error message		#readBeforeWritten, message = var name		#neverRead, message = var name, node = assignment		#neverUsed, message = var name		#redeclared, message = var name		#redeclaredBlockArg, message = var name		#undeclared, message = var Association		#undeclaredStore, message = var Association, node = assignment		#undeclaredSoftLink, message = BindingReference		#noEffect, message = nil, node = statement		#notOptimized, message = argument index, node = message send.	Note: this comment is duplicated in all subclasses."	reason = #OnStart ifFalse: [		self newUnderline: node with: [style].		type = #noEffect ifTrue: [self commentStyling: node].		type = #neverUsed ifTrue: [self commentStyling: node]].	(SourceCodeEditor shouldDisplayErrors: reason) ifTrue: [		type = #error ifTrue: [			^self				error: (self cleanMessage: message)				at: (node isNil ifTrue: [0] ifFalse: [node sourcePosition first])].		type = #duplicateBindings ifTrue: [^self duplicateBindings: message from: node].		type = #redeclared ifTrue: [^self redeclared: message from: node].		type = #redeclaredBlockArg ifTrue: [^self redeclaredBlockArg: message in: node from: codeStream].		type = #undeclared ifTrue: [^self undeclared: message in: node from: codeStream].		type = #undeclaredStore ifTrue: [^self undeclaredStore: message in: node from: codeStream].		type = #undeclaredSoftLink ifTrue: [^self undeclaredSoftLink: message in: node from: codeStream]].	(SourceCodeEditor shouldDisplayWarnings: reason) ifTrue: [		type = #warning ifTrue: [self warning: message from: node].		type = #readBeforeWritten ifTrue: [self readBeforeWritten: message from: node].		type = #neverRead ifTrue: [self neverRead: message from: node].		type = #neverUsed ifTrue: [self neverUsed: message from: node].		type = #notOptimized ifTrue: [self notOptimized: node becauseOf: message].		type = #noEffect ifTrue: [^self noEffect: node]].	^(#(error duplicateBindings redeclared redeclaredBlockArg undeclared undeclaredStore undeclaredSoftLink) includes: type)		ifTrue: [self abort]		ifFalse: [false]</body></methods><methods><class-id>Refactory.Browser.SourceCodeErrorHandler</class-id> <category>actions</category><body package="Browser-SourceCodeUI">check: compiledMethod selector: aSelector	"Add some additional source code warnings if appropriate."	| realReason |	realReason := reason.	reason := #OnSave.	document isEmpty ifFalse: [		editor warning isNil ifFalse: [			editor preserveCursorsWhile: [				self newWarning: editor warning at: 0]]].	reason := realReason.	compiledMethod == nil ifTrue: [^self].	aSelector == nil ifTrue: [^self].	(class includesSelector: aSelector) ifFalse: [^self].	class superclass isNil ifTrue: [^compiledMethod].	(class superclass whichClassIncludesSelector: aSelector) ifNotNil: [:superImplementation |		((superImplementation compiledMethodAt: aSelector) equivalentTo: compiledMethod) ifFalse: [^compiledMethod].		self newWarning: ((#IdenticalMethodInSuperclass1 &lt;&lt; #browser &gt;&gt; 'Method equivalently defined in superclass &lt;1s&gt;') expandMacrosWith: superImplementation name) at: 0]</body></methods><methods><class-id>Refactory.Browser.SourceCodeErrorHandler</class-id> <category>error handling - warnings</category><body package="Browser-SourceCodeUI">commentStyling: node	self newUnderline: node with: [commentStyle]</body><body package="Browser-SourceCodeUI">neverRead: variableName from: variableNode	self		newWarning: ((#RemoveNeverUsedAssignments &lt;&lt; #dialogs &gt;&gt; 'Remove unused assignment to &lt;1s&gt;') expandMacrosWith: variableName)		action: [			| stop |			stop := variableNode postAssignerSourcePosition.			stop := (stop + 1 to: document size) detect: [:i | (document at: i) isSeparator not].			self clearFrom: variableNode variable sourcePosition first to: stop - 1]		at: variableNode sourcePosition first - 1</body><body package="Browser-SourceCodeUI">neverUsed: variableName from: variableNode	self showDialog: (self newWarningDialog			option: ((#RemoveNeverUsed &lt;&lt; #dialogs &gt;&gt; 'Remove unused variable &lt;1s&gt;') expandMacrosWith: variableName)			shortcut: $R			action: [self performAction: [self removeTemporaryDeclaration: variableNode]])		between: variableNode sourcePosition first - 1		and: (reason = #OnStart ifTrue: [variableNode sourcePosition first] ifFalse: [variableNode sourcePosition last])</body><body package="Browser-SourceCodeUI">newSelector: message range: sourcePosition keywordPositions: keywordPositions</body><body package="Browser-SourceCodeUI">noEffect: node	| last |	last := (self expandLastPosition: node sourcePosition last + decoratingOffset) - decoratingOffset.	self showDialog:		(self newWarningDialog			option: ((#RemoveNoEffect &lt;&lt; #dialogs &gt;&gt; 'Remove code that has no effect') expandMacros)			shortcut: $R			action: [self performAction: [self clearFrom: node sourcePosition first to: last]])		between: node sourcePosition first - 1		and: (reason = #OnStart ifTrue: [node sourcePosition first] ifFalse: [last]).	^true</body><body package="Browser-SourceCodeUI">notOptimized: node becauseOf: message</body><body package="Browser-SourceCodeUI">readBeforeWritten: variableName from: variableNode	self		newWarning: ((#NoValueAssignedYet &lt;&lt; #dialogs &gt;&gt; '&lt;1s&gt; has no value assigned yet') expandMacrosWith: variableName)		at: variableNode sourcePosition first - 1</body><body package="Browser-SourceCodeUI">warning: message from: node	self		newWarning: (self cleanMessage: message)		at: node sourcePosition first - 1</body></methods><methods><class-id>Refactory.Browser.SourceCodeErrorHandler</class-id> <category>error handling - errors</category><body package="Browser-SourceCodeUI">duplicateBindings: name from: node	| dialog |	(dialog := self newErrorDialog)		option: (#AmbiguousSoftLink &lt;&lt; #dialogs &gt;&gt; 'Ambiguous class or variable &lt;1s&gt;'				expandMacrosWith: name asString).	(self suggestionsForDuplicateBindingReference: name) keysAndValuesDo: [:index :suggestion |		index = 1 ifTrue: [dialog suboption: (#SuggestionsCorrect &lt;&lt; #dialogs &gt;&gt; 'Correct') expandMacros].		dialog			suboption: suggestion asString			shortcut: (index &lt; 10 ifTrue: [Character codePoint: $1 codePoint + index - 1] ifFalse: [nil])			action: [self performAction: [self replaceNode: node with: suggestion asString]]].	self showDialog: dialog at: node sourcePosition first - 1.	^self abort</body><body package="Browser-SourceCodeUI">error: message at: aPosition	self newError: message at:  aPosition - 1.	^self abort</body><body package="Browser-SourceCodeUI">redeclared: variableName from: variableNode	| isParameterVariable |	isParameterVariable := (document at: (variableNode sourcePosition first - 1)) = $:.	isParameterVariable		ifTrue: [			self				newError: ((#ErrorRedeclaredVariable &lt;&lt; #dialogs &gt;&gt; 'Redeclared variable &lt;1s&gt;')					expandMacrosWith: variableName)				at: variableNode sourcePosition first - 1]		ifFalse: [			self				newError: ((#RemoveRedeclaredVariable &lt;&lt; #dialogs &gt;&gt; 'Remove redeclared variable &lt;1s&gt;')					expandMacrosWith: variableName)				action: [self clearNode: variableNode]				at: variableNode sourcePosition first - 1].	^self abort</body><body package="Browser-SourceCodeUI">redeclaredBlockArg: variableName in: variableNode from: codeStream	^self redeclared: variableName from: variableNode</body><body package="Browser-SourceCodeUI">undeclared: variableBinding from: first to: last stream: codeStream assignment: isAssignment	| dialog actions suggestions |	(reason = #OnSave and: [self isForWorkspace]) ifTrue: [		WorkspaceCompilerErrorHandler silentlyDeclareVariables ifTrue: [			"Silently create the binding if it's a local looking name"			(#(local both) includes: (self variableNameType: variableBinding key)) ifTrue: [				self addWorkspaceVariableBinding: variableBinding.				"Continue"				^true]]].	(SourceCodeEditor shouldDisplayErrors: reason) ifFalse: [		reason = #OnStart ifFalse: [self newUnderlineBetween: first - 1 and: last with: [style]].		^self abort].	dialog := self newErrorDialog.	actions := self actionsForUndeclared: variableBinding from: first to: last stream: codeStream assignment: isAssignment.	suggestions := self suggestionsForUndeclared: variableBinding from: first to: last stream: codeStream assignment: isAssignment.		(actions isEmpty and: [suggestions isEmpty])		ifTrue: [dialog option: (#UnknownUndeclared &lt;&lt; #dialogs &gt;&gt; 'Undeclared') expandMacros]		ifFalse: [dialog option: (#UnknownDeclare &lt;&lt; #dialogs &gt;&gt; 'Declare') expandMacros].	suggestions notEmpty ifTrue: [dialog suboption: (#SuggestionsCorrect &lt;&lt; #dialogs &gt;&gt; 'Correct') expandMacros].	actions do: [:action |		dialog			option: action key			shortcut: action key first			action: [self performAction: action value]].			suggestions keysAndValuesDo: [:index :suggestion |		dialog			suboption: suggestion asString			shortcut: (index &lt; 10 ifTrue: [Character codePoint: $1 codePoint + index - 1] ifFalse: [nil])			action: [self performAction: [self replaceFrom: first to: last with: suggestion asString]]].	self showDialog: dialog between: first - 1 and: (reason = #OnStart ifTrue: [first] ifFalse: [last]).	^self abort</body><body package="Browser-SourceCodeUI">undeclared: variableBinding in: variableNode from: codeStream	(variableBinding environment == Undeclared and: [Undeclared includesKey: variableBinding key])		ifTrue: [^self].			^self undeclared: variableBinding from: variableNode sourcePosition first to: variableNode sourcePosition last stream: codeStream assignment: false</body><body package="Browser-SourceCodeUI">undeclaredSoftLink: bindingReference in: variableNode from: codeStream	| dialog |	(SourceCodeEditor shouldDisplayErrors: reason) ifFalse: [		reason = #OnStart ifFalse: [self newUnderline: variableNode with: [style]].		^self abort].	(dialog := self newErrorDialog)		option: (#AmbiguousSoftLink &lt;&lt; #dialogs &gt;&gt; 'Ambiguous class or variable &lt;1s&gt;'				expandMacrosWith: bindingReference asString).	(self suggestionsForMisspeltBindingReference: bindingReference) keysAndValuesDo: [:index :suggestion |		index = 1 ifTrue: [dialog suboption: (#SuggestionsCorrect &lt;&lt; #dialogs &gt;&gt; 'Correct') expandMacros].		dialog			suboption: suggestion asString			shortcut: (index &lt; 10 ifTrue: [Character codePoint: $1 codePoint + index - 1] ifFalse: [nil])			action: [self performAction: [self replaceNode: variableNode with: suggestion asString]]].	self		showDialog: dialog		between: variableNode sourcePosition first - 1		and: (reason = #OnStart ifTrue: [variableNode sourcePosition first] ifFalse: [variableNode sourcePosition last]).	^self abort</body><body package="Browser-SourceCodeUI">undeclaredStore: variableBinding in: assignmentNode from: codeStream	(variableBinding environment == Undeclared and: [Undeclared includesKey: variableBinding key])		ifTrue: [^self].			^self undeclared: variableBinding from: assignmentNode variable sourcePosition first to: assignmentNode variable sourcePosition last stream: codeStream assignment: true</body></methods><methods><class-id>Refactory.Browser.SourceCodeErrorHandler</class-id> <category>private - styling</category><body package="Browser-SourceCodeUI">cleanMessage: message	| string |	string := message expandMacros.	(string last: 3) = ' -&gt;'  ifTrue: [^string allButLast: 3].	^string</body><body package="Browser-SourceCodeUI">newError: message action: action at: aPosition	| dialog |	(dialog := self newErrorDialog)		option: message		shortcut: message first		action: [self performAction: action].	self showDialog: dialog at: aPosition</body><body package="Browser-SourceCodeUI">newError: message at: aPosition	| dialog |	(dialog := self newErrorDialog) option: message.	self showDialog: dialog at: aPosition</body><body package="Browser-SourceCodeUI">newErrorDialog	^SourceCodeDialogModel icon: #error style: errorStyle</body><body package="Browser-SourceCodeUI">newUnderline: aNode with: aBlockClosure	aNode == nil ifTrue: [^self].	aNode sourcePosition ifNil: [^self].	self newUnderlineBetween: aNode sourcePosition first - 1 and: aNode sourcePosition last with: aBlockClosure</body><body package="Browser-SourceCodeUI">newUnderlineBetween: start and: stop with: aBlockClosure	document		replaceBetween: start + decoratingOffset		and: stop + decoratingOffset		apply: aBlockClosure</body><body package="Browser-SourceCodeUI">newWarning: message action: action at: aPosition	| dialog |	(dialog := self newWarningDialog)		option: message		shortcut: message first		action: [self performAction: action].	self showDialog: dialog at: aPosition</body><body package="Browser-SourceCodeUI">newWarning: message at: aPosition	| dialog |	(dialog := self newWarningDialog) option: message.	self showDialog: dialog at: aPosition</body><body package="Browser-SourceCodeUI">newWarningDialog	^SourceCodeDialogModel icon: #warning style: warningStyle</body><body package="Browser-SourceCodeUI">showDialog: aDialog at: aPosition	self showDialog: aDialog between: aPosition and: aPosition + 1</body><body package="Browser-SourceCodeUI">showDialog: aDialog between: aStart and: aStop	| start stop underlined |	start := aStart &gt;= document size ifTrue: [document size - 1] ifFalse: [aStart].	stop := aStop &gt; document size ifTrue: [document size] ifFalse: [aStop].	start &lt; 0 ifTrue: [^self].	aDialog position: start + decoratingOffset.	hasScrolled := hasScrolled or: [reason ~~ #OnSave].	document replaceBetween: start + decoratingOffset and: start + decoratingOffset + 1 apply: [		style copy			annotationStyle: #dodge;			annotation:				(hasScrolled					ifTrue: [aDialog asDocumentWithoutShortcuts]					ifFalse: [aDialog asDocumentWithShortcuts]);			propertyAt: #dialog put: aDialog;			intern].		underlined := style copy		propertyAt: #dialog put: aDialog;		intern.	document replaceBetween: start + decoratingOffset + 1 and: stop + decoratingOffset apply: [underlined].		hasScrolled ifFalse: [		hasScrolled := true.		editor collapse: (editor flow cursorAtPosition: start + decoratingOffset).		editor scrollTo: (0 @ (editor inputLine bottom) negated).		editor scrollTo: (0 @ (editor inputLine top) negated)].</body></methods><methods><class-id>Refactory.Browser.SourceCodeErrorHandler</class-id> <category>private - undeclared</category><body package="Browser-SourceCodeUI">addClass: className from: first to: last	| dialog navigator name newClass |	dialog := ClassCreationDialog new.	name := className asString.	name first isLowercase ifTrue:		[name at: 1 put: name first asUppercase].	navigator := (editor evaluator respondsTo: #navigator)		ifTrue: [editor evaluator navigator]		ifFalse: [Refactory.Browser.BrowserNavigator new].	dialog nameHolder value: name.	self isForWorkspace ifFalse: [dialog nameSpace: environment].	dialog package: navigator package.	dialog open ifTrue: [newClass := navigator createClassFromDialog: dialog].	newClass ifNil: [^self].	newClass name asString = className asString ifTrue: [^self].	self replaceFrom: first to: last with: newClass name asString</body><body package="Browser-SourceCodeUI">addClassSharedVariable: name from: first to: last	| poolClass newName navigator |	poolClass := class instanceBehavior.	newName := SystemUtils validateStaticVariableName: name for: editor.	newName == nil ifTrue: [^self].	navigator := (editor evaluator respondsTo: #navigator)		ifTrue: [editor evaluator navigator]		ifFalse: [Refactory.Browser.Navigator new].	navigator setPackage: navigator package while: [poolClass addClassVarName: newName asSymbol].	newName asString ~= name asString ifTrue: [self replaceFrom: first to: last with: newName asString].	SourceFileManager default logChange: poolClass storeString, ' addClassVarName: ', newName storeString</body><body package="Browser-SourceCodeUI">addInstanceVariable: name from: first to: last	| newName |	newName := SystemUtils validateInstanceVariableName: name for: editor.	newName == nil ifTrue: [^self].	class addInstVarName: newName asString.	newName asString ~= name asString ifTrue: [self replaceFrom: first to: last with: newName asString].	SourceFileManager default logChange: class storeString, ' addInstVarName: ', newName asString storeString</body><body package="Browser-SourceCodeUI">addNameSpaceSharedVariable: name from: first to: last	| newName navigator |	newName := SystemUtils validateStaticVariableName: name		confirm: [:msg :vname | Dialog confirm: msg for: editor]		warn: [:msg | Dialog warn: msg for: editor].	newName == nil ifTrue: [^self].	navigator := (editor evaluator respondsTo: #navigator)		ifTrue: [editor evaluator navigator]		ifFalse: [Refactory.Browser.Navigator new].	navigator setPackage: navigator package while: [		environment			defineSharedVariable: newName			private: false			constant: false			category: nil			initializer: nil].	newName asString ~= name asString ifTrue: [self replaceFrom: first to: last with: newName asString].</body><body package="Browser-SourceCodeUI">addTemporaryVariable: name at: endTemps	"Declare the undeclared name as a method temp.	Eventually we should offer the option of declaring	it in the local scope, or the compiler should figure	out what scope is the most appropriate."	| replacement |	(document at: endTemps + 1) = $|		ifTrue:		"Paste in before vertical bar"			[replacement := name , ' '.			(document at: endTemps) = Character space				ifFalse: [replacement := ' ' , replacement]]		ifFalse:		"No temp declarations yet; have to insert whole line"			[replacement := '| ' , name , ' |' , (String with: Character cr) , (String with: Character tab)].	self replaceBetween: endTemps and: endTemps with: replacement</body><body package="Browser-SourceCodeUI">addUndeclared: name	| binding |	binding := VariableBinding key: name asSymbol value: nil.	SystemUtils undeclareNewBinding: binding</body><body package="Browser-SourceCodeUI">addWorkspaceVariable: name	"Declare the undeclared name as an environment temp."	self addWorkspaceVariable: name value: nil</body><body package="Browser-SourceCodeUI">addWorkspaceVariable: name value: aValue	"Declare the undeclared name as an environment temp."	self addWorkspaceVariableBinding: (VariableBinding key: name asSymbol value: aValue)</body><body package="Browser-SourceCodeUI">addWorkspaceVariableBinding: aVariableBinding	"Declare the undeclared name as an environment temp."		aVariableBinding key: aVariableBinding key asSymbol.	environment simpleAddBinding: aVariableBinding.	(environment bindingFor: aVariableBinding key) value: aVariableBinding value</body><body package="Browser-SourceCodeUI">removeTemporaryDeclaration: aVariableNode	| start stop expandedStart expandedStop replacement leftBar rightBar |	replacement := String new.	expandedStart := start := aVariableNode sourcePosition first + decoratingOffset - 1.	expandedStop := stop := aVariableNode sourcePosition last + decoratingOffset.		leftBar := (document at: start) = $|.	rightBar := (document at: stop + 1) = $|.		leftBar ifFalse: [expandedStart := document previousWordBreakBefore: start].	rightBar ifFalse: [expandedStop := document nextWordBreakAfter: stop].	(expandedStart ~= start and: [expandedStop ~= stop]) ifTrue: [replacement := ' ' copy].		leftBar := (document at: expandedStart) = $|.	rightBar := (document at: expandedStop + 1) = $|.	(leftBar and: [rightBar]) ifTrue: [		expandedStart := expandedStart - 1.		expandedStop := expandedStop + 1.		replacement := String new].		self replaceBetween: expandedStart and: expandedStop with: replacement</body></methods><methods><class-id>Refactory.Browser.SourceCodeErrorHandler</class-id> <category>private - suggestions</category><body package="Browser-SourceCodeUI">suggestionsForDuplicateBindingReference: name	| list lc score oldPattern |	oldPattern := name asLowercase.	lc := oldPattern first.	list := SortedCollection sortBlock: [:a1 :a2 | a1 &gt; a2].	self allNames: Root do: [:ns :key |		key first asLowercase = lc			ifTrue: [(score := key asLowercase spellAgainst: oldPattern) &gt; 50				ifTrue: [list add: score-&gt;(ns-&gt;key)]]].	^list asArray collect: [:a || bd |		bd := a value key fullyQualifiedReferenceOf: a value value.		bd makeUnambiguous].</body><body package="Browser-SourceCodeUI">suggestionsForMisspeltBindingReference: bindingReference	| list |	list := OrderedCollection with: Smalltalk.	bindingReference path do: [:key | | next oldPattern lc |		oldPattern := key asLowercase.		lc := oldPattern first.		next := OrderedCollection new.		list := list reject: [:bind | bind isBindingReference and: [bind binding isForGeneral]].		list do: [:bind | | ns |			ns := bind isBindingReference ifTrue: [bind value] ifFalse: [bind].			ns namesAndBindingsDo: [:realKey :b |				(realKey first asLowercase = lc						and: [(realKey asLowercase spellAgainst: oldPattern) &gt; 50])					ifTrue: [next add: (ns asNameSpace fullyQualifiedReferenceOf: realKey)]]].		list := next].	^list</body><body package="Browser-SourceCodeUI">suggestionsForUndeclared: binding from: first to: last stream: codeStream assignment: isAssignment	| suggestions |	binding key isEmpty ifTrue: [^#()].	suggestions := self spellingCorrectionsOf: binding key from: codeStream.	suggestions isEmpty ifTrue: [		| oldPattern lc score |		oldPattern := binding key asLowercase.		lc := oldPattern first.		suggestions := SortedCollection sortBlock: [:a1 :a2 | a1 &gt; a2].		self allNames: Root do: [:ns :key |			key first asLowercase = lc				ifTrue: [(score := key asLowercase spellAgainst: oldPattern) &gt; 50				ifTrue: [suggestions add: score-&gt;(ns-&gt;key)]]].		suggestions := suggestions asArray collect: [:a || bd |			bd := a value key fullyQualifiedReferenceOf: a value value.			bd makeUnambiguous asString]].	^suggestions select: [:each | each first isUppercase = binding key first isUppercase]</body><body package="Browser-SourceCodeUI">variableNameType: aVariableName	aVariableName first asUppercase = aVariableName first asLowercase ifTrue: [^#both].	^aVariableName first isUppercase ifTrue: [#global] ifFalse: [#local]</body></methods><methods><class-id>Refactory.Browser.SourceCodeErrorHandler</class-id> <category>testing</category><body package="Browser-SourceCodeUI">isForWorkspace	^environment isKindOf: WorkspaceVariablePool</body></methods><methods><class-id>Refactory.Browser.SourceCodeErrorHandler</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">retry	^retry</body><body package="Browser-SourceCodeUI">retry: anObject	retry := anObject</body></methods><methods><class-id>Refactory.Browser.SourceCodeErrorHandler</class-id> <category>private - editing</category><body package="Browser-SourceCodeUI">clearBetween: start and: stop	"Clear between start..stop in document positions."	selection := selection first to: (selection last - (stop - start)).	editor selectBetween: start and: stop.	editor clear</body><body package="Browser-SourceCodeUI">clearFrom: first to: last	"Clear from first to last in relative positions"	self clearBetween: first + decoratingOffset - 1 and: last + decoratingOffset</body><body package="Browser-SourceCodeUI">clearNode: variableNode	self clearFrom: variableNode sourcePosition first to: variableNode sourcePosition last</body><body package="Browser-SourceCodeUI">performAction: anAction	editor invalidateSelectionWhile: [		anAction value.		retry cull: selection first cull: selection last]</body><body package="Browser-SourceCodeUI">replaceBetween: start and: stop with: replacementString	"Replace between start..stop in document positions with replacementString."	selection := selection first to: (selection last - (stop - start) + replacementString size).	editor selectBetween: start and: stop.	editor insert: replacementString</body><body package="Browser-SourceCodeUI">replaceFrom: first to: last with: replacementString	"Replace from first to last in relative positions with replacementString"	self replaceBetween: first + decoratingOffset - 1 and: last + decoratingOffset with: replacementString</body><body package="Browser-SourceCodeUI">replaceNode: variableNode with: replacementName	self replaceFrom: variableNode sourcePosition first to: variableNode sourcePosition last with: replacementName</body></methods><methods><class-id>Refactory.Browser.SourceCodeErrorHandler</class-id> <category>private - actions</category><body package="Browser-SourceCodeUI">actionsForGlobalUndeclared: name from: first to: last stream: codeStream assignment: isAssignment	| suggestions |	suggestions := OrderedCollection new.	isAssignment ifFalse: [		suggestions add: (#CreateClass &lt;&lt; #dialogs &gt;&gt; 'Class') expandMacros -&gt; [			self addClass: name from: first to: last]].	class == UndefinedObject ifFalse: [		suggestions add: ((#AddSharedVariable &lt;&lt; #dialogs &gt;&gt; 'Shared Variable to &lt;1s&gt;') expandMacrosWith: class name) -&gt; [			self addClassSharedVariable: name from: first to: last]].	(environment name ~~ nil and: [self isForWorkspace not]) ifTrue: [		suggestions add: ((#AddGlobalSharedVariable &lt;&lt; #dialogs &gt;&gt; 'Namespace Shared Variable to &lt;1s&gt;') expandMacrosWith: environment name) -&gt; [			self addNameSpaceSharedVariable: name from: first to: last]].	suggestions add: (#DeclareUndeclared &lt;&lt; #dialogs &gt;&gt; 'Undeclared List') expandMacros -&gt; [		self addUndeclared: name].	^suggestions</body><body package="Browser-SourceCodeUI">actionsForLocalUndeclared: name from: first to: last stream: codeStream	| actions endTemps |	endTemps := codeStream homeStream topNode body sourcePosition first + decoratingOffset - 1.	actions := OrderedCollection new.	(environment isKindOf: WorkspaceVariablePool)		ifTrue: [			actions add: (#AddWorkspaceVariable &lt;&lt; #dialogs &gt;&gt; 'Workspace Variable') expandMacros -&gt; [				self addWorkspaceVariable: name]].	actions add: (#AddTemporaryVariable &lt;&lt; #dialogs &gt;&gt; 'Temporary Variable') expandMacros -&gt; [		self addTemporaryVariable: name at: endTemps].	class ~~ UndefinedObject ifTrue: [		actions add: (#AddInstanceVariable &lt;&lt; #dialogs &gt;&gt; 'Instance Variable') expandMacros -&gt; [			self addInstanceVariable: name from: first to: last]].	^actions</body><body package="Browser-SourceCodeUI">actionsForUndeclared: binding from: first to: last stream: codeStream assignment: isAssignment	| actions mode |	binding key isEmpty ifTrue: [^#()].		actions := OrderedCollection new.	mode := isAssignment		ifTrue: [#both]		ifFalse: [self variableNameType: binding key].		(#(local both) includes: mode) ifTrue: [		actions addAll: (self actionsForLocalUndeclared: binding key from: first to: last stream: codeStream)].	(#(global both) includes: mode) ifTrue: [		actions addAll: (self actionsForGlobalUndeclared: binding key from: first to: last stream: codeStream assignment: isAssignment)].	^actions</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentationTool</class-id> <category>testing</category><body package="Browser-SourceCodeUI">hasReadOnlyComment	^self isReadOnly or: [self commentObject isNil or: [self commentObject == Store.Registry nullPackage]]</body><body package="Browser-SourceCodeUI">isEnabled	^self commentObject notNil</body><body package="Browser-SourceCodeUI">isMethodDocument	^self commentObject isBehavior and: [super isMethodDocument]</body><body package="Browser-SourceCodeUI">isReadOnly	^codeModel isReadOnly</body><body package="Browser-SourceCodeUI">shouldSaveAsMethod	^Dialog		choose: #SmalltalkCodeInCommentsConfirmation &gt;&gt; 'This text looks like a Smalltalk method, but you are on the class comment tab.' &lt;&lt; #browser		labels: (Array			with: #AcceptAsCommment &gt;&gt; 'Accept as comment' &lt;&lt; #browser			with: #AcceptAsMethod &gt;&gt; 'Accept as method' &lt;&lt; #browser)		values: #(false true)		default: true</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentationTool</class-id> <category>private</category><body package="Browser-SourceCodeUI">commentObject	| object |	object := self classOrNameSpace.	object isNil ifTrue: [object := self pundle].	^object</body><body package="Browser-SourceCodeUI">defaultClassComment	| typer class vars commentStream |	class := self commentObject.	typer := (RefactoryTyper new)				runOn: class;				yourself.	commentStream := WriteStream on: String new.	commentStream		emphasis: #bold;		nextPutAll: class name;		nextPutAll: (#HasNotBeenCommented &lt;&lt; #browser &gt;&gt; ' has not been commented.') asString;		emphasis: nil;		nextPutAll: (#CommentShouldStateClassPurposeEtc &lt;&lt; #browser &gt;&gt; '  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.') asString;		cr;		cr.	self printSubclassResponsibilitiesFor: class on: commentStream.	vars := class instVarNames.	vars notEmpty 		ifTrue: 			[commentStream				nextPutAll: (#InstanceVariablesC &lt;&lt; #browser &gt;&gt; 'Instance Variables:') asString;				cr.			self 				printVariables: vars				types: typer				on: commentStream].	^commentStream contents</body><body package="Browser-SourceCodeUI">defaultCodeComponentComment	^(#ThisObjectHasNotBeenCommented &lt;&lt; #browser &gt;&gt; 'This object has not been commented.') asString</body><body package="Browser-SourceCodeUI">defaultComment	self showWaitCursorWhile: 			[| object |			object := self commentObject.			^object isBehavior 				ifTrue: [self defaultClassComment]				ifFalse: 					[object isNameSpace 						ifTrue: [self defaultNameSpaceComment]						ifFalse: [self defaultCodeComponentComment]]]</body><body package="Browser-SourceCodeUI">defaultNameSpaceComment	^(#ThisNameSpaceHasNotBeenCommented &lt;&lt; #browser &gt;&gt; 'This name space has not been commented.') asString</body><body package="Browser-SourceCodeUI">generateDefaultComment	self document: self defaultComment</body><body package="Browser-SourceCodeUI">printSubclassResponsibilitiesFor: class on: commentStream 	| protocols selectors |	selectors := class 				whichSelectorsReferTo: 'subclassResponsibility' asSymbol.	selectors isEmpty ifTrue: [^self].	commentStream		nextPutAll: (#SubclassesMustImplementTheseC &lt;&lt; #browser &gt;&gt; 'Subclasses must implement the following messages:') asString;		cr.	protocols := (selectors 				collect: [:each | BrowserEnvironment new whichProtocolIncludes: each in: class]) 					asSet asSortedCollection.	selectors := selectors asSortedCollection.	protocols do: 			[:protocol | 			commentStream				tab;				nextPutAll: protocol;				cr.			selectors do: 					[:sel | 					protocol == (BrowserEnvironment new whichProtocolIncludes: sel in: class) 						ifTrue: 							[commentStream								tab;								tab;								nextPutAll: sel;								cr]]].	commentStream cr</body><body package="Browser-SourceCodeUI">printVariables: vars types: aRefactoryTyper on: commentStream 	vars asSortedCollection do: 			[:each | 			commentStream				tab;				nextPutAll: each;				tab;				nextPut: $&lt;.			aRefactoryTyper printTypeFor: each on: commentStream.			commentStream				nextPutAll: ((#DescriptionOf1s &lt;&lt; #browser &gt;&gt; '&gt;	description of &lt;1s&gt;')					expandMacrosWith: each);				cr].	commentStream cr</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentationTool</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">doItEnvironment	^self doItReceiverClass environment</body><body package="Browser-SourceCodeUI">doItExpectPattern	^self isMethodDocument</body><body package="Browser-SourceCodeUI">doItReceiverClass	^self selectedClass		ifNil: [self doItReceiver class]		ifNotNil: [:aClass | aClass]</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentationTool</class-id> <category>tab management</category><body package="Browser-SourceCodeUI">appendWarningIconTo: aVisualRow	self commentObject		ifNotNil:			[:object | object needsComment ifTrue: [aVisualRow add: GeneralIcons warning]].	^aVisualRow</body><body package="Browser-SourceCodeUI">isActive	^self commentObject notNil</body><body package="Browser-SourceCodeUI">isDefaultSelectionCandidate	^self protocol isNil		and:			[self selector isNil				and:					[self commentObject notNil and: [self commentObject comment size &gt; 0]]]</body><body package="Browser-SourceCodeUI">tabGraphic	| row |	row := super tabGraphic.	^self appendWarningIconTo: row</body><body package="Browser-SourceCodeUI">tabIcon	^self commentObject ifNotNil: [:object | object safeToolListIcon]</body><body package="Browser-SourceCodeUI">tabName	^#BrowserComment &lt;&lt; #browser &gt;&gt; 'Comment'</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentationTool</class-id> <category>subcanvases</category><body package="Browser-SourceCodeUI">isWorkspace	^true</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentationTool</class-id> <category>actions</category><body package="Browser-SourceCodeUI">acceptDocument	| object change |	self editorWidget accept.	(self isMethodDocument and: [self shouldSaveAsMethod]) ifTrue: [		| compiled |		compiled := self editorWidget compileMethod: #OnSave retry: [self acceptDocument].		compiled ifNotNil: [			^self installCompiledMethod: compiled]].	object := self commentObject.	change := (object isBehavior or: [object isNameSpace])		ifTrue: [CommentChange object: object comment: self document asString]		ifFalse: [CodeComponentCommentChange codeComponent: object comment: self document asString].	self performChange: change.	codeModel update.	self navigator refreshLists.	^true</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentationTool</class-id> <category>updating</category><body package="Browser-SourceCodeUI">updateContents	| comment |	builder ifNil: [^self].	self commentObject isNil ifTrue: [		self document: (Text2.Document fromString: '' style: self editorWidget theme default).		self editorWidget isReadOnly: true.		^self].	self editorWidget isReadOnly: self hasReadOnlyComment.		comment := String withAll: self commentObject comment.	comment := (self commentObject needsComment and: [comment isEmpty])		ifTrue: [self defaultComment]		ifFalse: [comment].	self document asString = comment ifTrue: [^self].	self document: (Text2.Document fromString: comment style: self editorWidget theme default).</body></methods><methods><class-id>Refactory.Browser.DocumentSuggestionTab</class-id> <category>converting</category><body package="Browser-SourceCodeUI">asString	^string</body><body package="Browser-SourceCodeUI">splitFrom: anOffset	anOffset = 0 ifTrue: [^self copy].	^self class fromString: string style: style</body><body package="Browser-SourceCodeUI">splitFrom: start to: stop	(start = 0 and: [stop = self size]) ifTrue: [^self copy].	^self class fromString: '' style: style</body><body package="Browser-SourceCodeUI">splitTo: anOffset	anOffset = self size ifTrue: [^self copy].	^self class fromString: string style: style</body></methods><methods><class-id>Refactory.Browser.DocumentSuggestionTab</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">at: anIndex	anIndex = 1 ifFalse: [self subscriptBoundsErrorFor: #at: index: anIndex].	^$ </body><body package="Browser-SourceCodeUI">size	"Return the number of elements in the receiver."	^1</body></methods><methods><class-id>Refactory.Browser.DocumentSuggestionTab</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">initialize: aString style: aDocumentStyle	string := aString.	style := Text2.DocumentStyle intern: aDocumentStyle</body></methods><methods><class-id>Refactory.Browser.DocumentSuggestionTab</class-id> <category>testing</category><body package="Browser-SourceCodeUI">isEquivalentTo: aDocumentSegment	"Returns true if aDocumentSegment could be a drop in replacement for the receiver."	^(super isEquivalentTo: aDocumentSegment) and: [aDocumentSegment string = string]</body><body package="Browser-SourceCodeUI">isGraphemeBreakPosition: aLinkPosition as: aPosition	^true</body><body package="Browser-SourceCodeUI">isLineBreakPosition: aLinkPosition as: aPosition	^aLinkPosition = 0 or: [aLinkPosition = self size]</body><body package="Browser-SourceCodeUI">isSuggestionTab	^true</body><body package="Browser-SourceCodeUI">isWordBreakPosition: aLinkPosition as: aPosition	^aLinkPosition = 0 or: [aLinkPosition = self size]</body></methods><methods><class-id>Refactory.Browser.DocumentSuggestionTab</class-id> <category>printing</category><body package="Browser-SourceCodeUI">printOn: aStream	aStream		nextPut: $';		nextPutAll: string;		nextPut: $'</body><body package="Browser-SourceCodeUI">printOn: aStream from: start to: stop	self printOn: aStream</body></methods><methods><class-id>Refactory.Browser.DocumentSuggestionTab</class-id> <category>private</category><body package="Browser-SourceCodeUI">string	^string</body></methods><methods><class-id>Refactory.Browser.DocumentSuggestionTab class</class-id> <category>instance creation</category><body package="Browser-SourceCodeUI">fromString: aString style: aDocumentStyle	^self new initialize: aString style: aDocumentStyle</body></methods><methods><class-id>Refactory.Browser.BrowserCopyrightNoticeTool</class-id> <category>tab management</category><body package="Browser-SourceCodeUI">appendWarningIconTo: aVisualRow	"Ignore missing Copyright"	^aVisualRow</body><body package="Browser-SourceCodeUI">isActive	^self narrowestSelectionType == #codeComponent</body><body package="Browser-SourceCodeUI">tabName	^#BrowserCopyrightTool &lt;&lt; #browser &gt;&gt; 'Copyright'</body></methods><methods><class-id>Refactory.Browser.BrowserCopyrightNoticeTool</class-id> <category>actions</category><body package="Browser-SourceCodeUI">acceptDocument	self editorWidget accept.	self performChange:		((CodeComponentPropertyChange component: self codeComponent)			propertyAt: #notice			put: self document asString).	codeModel update.	self navigator refreshLists.	^true</body></methods><methods><class-id>Refactory.Browser.BrowserCopyrightNoticeTool</class-id> <category>updating</category><body package="Browser-SourceCodeUI">updateContents		| notice |	builder ifNil: [^self].	notice := Text2.Document fromString:		(String withAll: (self codeComponent			ifNil: ['']			ifNotNil: [:codeComponent | codeComponent copyrightNotice ifNil: ['']]))		style: self editorWidget theme default.	self document asString = notice asString ifTrue: [^self].	self document: notice</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutoIndent</class-id> <category>private</category><body package="Browser-SourceCodeUI">lineIndentTabsCount: aView	| depth quoted commented return |	"Detect open/close brackets for a depth counter. If it's unbalanced, then adjust the tabbing on the new line."	depth := 0.	quoted := commented := return := false.	aView selectionStopLine start to: aView selectionStopPosition - 1 do: [:index |		| character |		character := aView document at: index + 1.		quoted			ifTrue: [character == $' ifTrue: [quoted := false]]			ifFalse: [				commented					ifTrue: [character == $" ifTrue: [commented := false]]					ifFalse: [						character == $" ifTrue: [commented := true].						character == $' ifTrue: [quoted := true].						character == $[ ifTrue: [depth := depth + 1].						character == $] ifTrue: [depth := depth - 1. return := false].						character == $^ ifTrue: [return := true]]]].	(depth = 0 and: [return]) ifTrue: [depth := depth - 1].	"If we have a full-stop and the previous line ends with a semi-colon, then drop back a depth."	aView selectionStopPosition &gt; 0 ifTrue: [		| last |		last := aView document at: aView selectionStopPosition.		last = $. ifTrue: [			aView selectionStopLine previousLine isNil ifFalse: [				aView selectionStopLine previousLine stop &gt; 1 ifTrue: [					(aView document at: aView selectionStopLine previousLine stop - 1) = $; ifTrue: [						depth := depth - 1]]]]].	"Detect the leading tabs of a line and keep them plus whatever depth modifier we have added."	aView selectionStopLine start to: aView selectionStopPosition - 1 do: [:index |		(aView document at: index + 1) == Character tab ifFalse: [^(index - aView selectionStopLine start + depth) max: 0]].	^((aView selectionStopPosition - aView selectionStopLine start) + depth) max: 0</body></methods><methods><class-id>Refactory.Browser.BrowserDeclarationTool</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">doItEnvironment	| change classOrNameSpace |	[		change := ExecuteCodeChange definition: self editorWidget document for: nil.		change package: self objectPackage.		change nameSpace = Root ifFalse: [^change nameSpace]	] on: Error do: [:ex |].		classOrNameSpace := self classOrNameSpace.	^classOrNameSpace isNameSpace		ifTrue: [classOrNameSpace]		ifFalse: [self doItReceiver ifNil: [Smalltalk] ifNotNil: [:receiver | receiver environment]]</body><body package="Browser-SourceCodeUI">doItExpectPattern	^self isMethodDocument</body><body package="Browser-SourceCodeUI">doItReceiverClass	^self selectedClass		ifNil: [self doItReceiver class]		ifNotNil: [:theClass |			self editorWidget document isProbableSmalltalkCode ifTrue: [^theClass].			theClass isMeta ifTrue: [theClass] ifFalse: [theClass class]]</body><body package="Browser-SourceCodeUI">document: aDocument	super document: aDocument.		"Cause the definition to be evaluated and styled on-open, which is a different behaviour to what we want from methods which we only want to be evaluated when the developer starts to change things."	self editorWidget ifNotNil: [:widget | widget compileMethod: #OnSave]</body></methods><methods><class-id>Refactory.Browser.BrowserDeclarationTool</class-id> <category>templates</category><body package="Browser-SourceCodeUI">bytesClassTemplate	^self classTemplateFor: #bytes</body><body package="Browser-SourceCodeUI">categoryForNewObject	^#'Some Category'</body><body package="Browser-SourceCodeUI">classTemplate	^self classTemplateFor: #none</body><body package="Browser-SourceCodeUI">classTemplateFor: aSymbol	^'&lt;1s&gt; defineClass: #&lt;2s&gt;	superclass: #{&lt;3s&gt;}	indexedType: #&lt;4s&gt;	private: false	instanceVariableNames: ''&lt;5s&gt;''	classInstanceVariableNames: ''''	imports: ''''	category: &lt;6p&gt;' 		expandMacrosWithArguments: (OrderedCollection new			add: self nameSpace unambiguousName;			add: #NameOfClass &lt;&lt; #browser &gt;&gt; 'NameOfClass';			add: #NameOfSuperclass &lt;&lt; #browser &gt;&gt; 'NameOfSuperclass';			add: aSymbol;			add: (aSymbol == #bytes				ifTrue: ['']				ifFalse: [(#instVarName1InstVarName2 &lt;&lt; #browser &gt;&gt; 'instVarName1 instVarName2')]);			add: '';			yourself)</body><body package="Browser-SourceCodeUI">defaultTemplate		^self pundle isNil		ifTrue: [self nameSpace definition asText]		ifFalse: [self template]</body><body package="Browser-SourceCodeUI">definitionOfBinding: binding 	| ns |	binding isForGeneral ifFalse: [^binding value definition].	ns := Root whoDefinesBinding: binding.	ns isNil ifTrue: [^''].	^ns definitionOfStatic: binding</body><body package="Browser-SourceCodeUI">indexedClassTemplate	^self classTemplateFor: #objects</body><body package="Browser-SourceCodeUI">nameSpaceTemplate	^'&lt;1s&gt; defineNameSpace: #&lt;2s&gt;	private: false	imports: ''			private Smalltalk.*			''	category: &lt;3p&gt;' 		expandMacrosWith: self nameSpace unambiguousName		with: #NameSpace &lt;&lt; #browser &gt;&gt; 'NameSpace'		with: self categoryForNewObject asString</body><body package="Browser-SourceCodeUI">sharedVariableTemplateFor: aNameSpace 	^'&lt;1s&gt; defineSharedVariable: #&lt;2s&gt;	private: false	constant: false	category: &lt;3p&gt;	initializer: nil'		expandMacrosWith: aNameSpace unambiguousName		with: #NameOfBinding &lt;&lt; #browser &gt;&gt; 'NameOfBinding'		with: (self protocol isNil 				ifTrue: [self categoryForNewObject]				ifFalse: [self protocol]) asString</body><body package="Browser-SourceCodeUI">template	^self classTemplate</body></methods><methods><class-id>Refactory.Browser.BrowserDeclarationTool</class-id> <category>tab management</category><body package="Browser-SourceCodeUI">isActive	^self binding notNil</body><body package="Browser-SourceCodeUI">tabIcon	^self binding value ifNotNil: [:object | object safeToolListIcon]</body><body package="Browser-SourceCodeUI">tabName	^#BrowserDeclarationToolName &lt;&lt; #browser &gt;&gt; 'Definition'</body></methods><methods><class-id>Refactory.Browser.BrowserDeclarationTool</class-id> <category>actions</category><body package="Browser-SourceCodeUI">acceptDocument	"Accept the document back from the editor and format it if that's a setting that is set. If the editor contents do not currently compile, do nothing."	| compiledMethod definedObject |	compiledMethod := self editorWidget compileMethod: #OnSave retry: [self acceptDocument].	compiledMethod ifNil: [^false].	self hasChanged ifFalse: [		self editorWidget animateAccept.		^true].		self editorWidget accept.	self isMethodDocument ifTrue: [^self installCompiledMethod: compiledMethod].	(definedObject := self defineCompiledMethod: compiledMethod) ifNil: [^false].	definedObject isBehavior ifTrue: [codeModel setClass: definedObject].	definedObject isNameSpace ifTrue: [codeModel setNameSpace: definedObject].	(definedObject isBindingReference and: [definedObject isDefined]) ifTrue: [codeModel setBinding: definedObject binding].	^true</body></methods><methods><class-id>Refactory.Browser.BrowserDeclarationTool</class-id> <category>subcanvases</category><body package="Browser-SourceCodeUI">isWorkspace	^false</body></methods><methods><class-id>Refactory.Browser.BrowserDeclarationTool</class-id> <category>aspects</category><body package="Browser-SourceCodeUI">documentMenu	"The context menu contains dynamically constructed menu items"	^[ | documentMenu variableMenu selection |	documentMenu := super documentMenu value.	self selectedClass == nil ifFalse: [		selection := self editorWidget selection asString trimSeparators.		(self selectedClass allInstVarNames includes: selection) ifTrue: [			variableMenu := self class documentMenu.			variableMenu menuItems do: [:menuItem |				| selector |				selector := (menuItem value, ':') asSymbol.				menuItem value: [self perform: selector with: selection]].			documentMenu addPart: variableMenu]].	documentMenu]</body></methods><methods><class-id>Refactory.Browser.BrowserDeclarationTool</class-id> <category>updating</category><body package="Browser-SourceCodeUI">binding	^self selectedBinding</body><body package="Browser-SourceCodeUI">updateContents	| binding |	binding := self binding.	self document: (binding isNil 		ifTrue: [self defaultTemplate]		ifFalse: [self definitionOfBinding: binding])</body></methods><methods><class-id>Refactory.Browser.BrowserSharedVariableInitializerTool</class-id> <category>updating</category><body package="Browser-SourceCodeUI">binding	| binding name |	(binding := self selectedBinding) ifNil: [^nil].	name := self sharedVariableName.	^name notNil ifTrue: [binding value bindingFor: name] ifFalse: [nil]</body><body package="Browser-SourceCodeUI">defaultTemplate	^self template</body><body package="Browser-SourceCodeUI">nameSpace	| binding |	(binding := self selectedBinding) ifNil: [^Smalltalk].	^binding isForGeneral 		ifTrue: [self objectName asQualifiedReference environment]		ifFalse: [binding value]</body><body package="Browser-SourceCodeUI">template	^''</body></methods><methods><class-id>Refactory.Browser.BrowserSharedVariableInitializerTool</class-id> <category>tab management</category><body package="Browser-SourceCodeUI">isActive	^codeModel sharedVariableName notNil</body><body package="Browser-SourceCodeUI">tabIcon	^self binding value ifNotNil: [:object | object class safeToolListIcon]</body><body package="Browser-SourceCodeUI">tabName	^#BrowserInitializerToolName &lt;&lt; #browser &gt;&gt; 'Initializer'</body></methods><methods><class-id>Refactory.Browser.BrowserSharedVariableInitializerTool</class-id> <category>private</category><body package="Browser-SourceCodeUI">objectPackage	^self package</body></methods><methods><class-id>Refactory.Browser.BrowserSharedVariableInitializerTool</class-id> <category>actions</category><body package="Browser-SourceCodeUI">acceptDocument	"Accept the document back from the editor and format it if that's a setting that is set. If the editor contents do not currently compile, do nothing."	| compiledMethod initializer |	compiledMethod := self editorWidget compileMethod: #OnSave retry: [self acceptDocument].	compiledMethod ifNil: [^false].	self hasChanged ifFalse: [		self editorWidget animateAccept.		^true].		self editorWidget accept.	self document isEmpty ifTrue: [		self binding beStaticallyDefined: false.		self binding initialize: nil.		^true].		initializer := self binding environment compileInitializer: self document asString.	initializer method sourcePointer: self document asString.	self binding beStaticallyDefined: true. 	self binding initializer: initializer.	^true</body></methods><methods><class-id>Refactory.Browser.BrowserSharedVariableInitializerTool</class-id> <category>templates</category><body package="Browser-SourceCodeUI">definitionOfBinding: binding 	binding isForGeneral ifFalse: [^self defaultTemplate].	^binding sourceCode		ifNil: [self defaultTemplate]		ifNotNil: [:text | text string]</body></methods><methods><class-id>Refactory.Browser.FlowSuggestionTab</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">start	^position + paragraph start</body><body package="Browser-SourceCodeUI">stop	^position + paragraph start + 1</body><body package="Browser-SourceCodeUI">string	^'{', segment string, '}'</body><body package="Browser-SourceCodeUI">style	^segment style</body></methods><methods><class-id>Refactory.Browser.FlowSuggestionTab</class-id> <category>printing</category><body package="Browser-SourceCodeUI">debugString	^'[suggestion-tab]'</body></methods><methods><class-id>Refactory.Browser.FlowSuggestionTab</class-id> <category>converting</category><body package="Browser-SourceCodeUI">coordinateAtPixelX: aPixelX device: aGraphicsDevice	^(aPixelX - bounds left) &lt; contentWidth half ifTrue: [0] ifFalse: [1]</body><body package="Browser-SourceCodeUI">pixelXAtCoordinate: aCoordinateX device: aGraphicsDevice	aCoordinateX &lt; 0 ifTrue: [self error: 'out of bounds'].	aCoordinateX &gt; 1 ifTrue: [self error: 'out of bounds'].	^bounds left + (aCoordinateX * contentWidth)</body></methods><methods><class-id>Refactory.Browser.FlowSuggestionTab</class-id> <category>testing</category><body package="Browser-SourceCodeUI">isSimilarTo: aFlowSegment	^(super isSimilarTo: aFlowSegment) and: [self string = aFlowSegment string]</body></methods><methods><class-id>Refactory.Browser.FlowSuggestionTab</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">initialize: aParagraph between: aStart and: aStop style: aStyle level: aLevel device: aDevice	| font fontDescription extent |	super initialize: aParagraph between: aStart and: aStop style: aStyle level: aLevel device: aDevice.	segment := aParagraph document segmentAtPositionAfter: aStart + aParagraph start ifAbsent: [self error: 'inconceivable'].	position := aStart.	fontDescription := self style fontDescription copy.	fontDescription pixelSize: fontDescription pixelSize - 1.	font := aDevice defaultFontPolicy findFont: fontDescription.	extent := self string measureWithFont: font from: 1 to: self string size.	contentWidth := extent x.	contentHeight := font height + 2.	baseline := font ascent</body></methods><methods><class-id>Refactory.Browser.FlowSuggestionTab</class-id> <category>displaying</category><body package="Browser-SourceCodeUI">displayOn: aGraphicsContext y: y	| fontDescription |	fontDescription := self style fontDescription copy.	fontDescription pixelSize: fontDescription pixelSize - 1.	aGraphicsContext font: fontDescription.	(aGraphicsContext paint isKindOf: SymbolicPaint) ifFalse: [		aGraphicsContext paint: aGraphicsContext paint asHiliteColor].	self string		displayOn: aGraphicsContext		from: 1		to: self string size		at: bounds left @ y</body></methods><methods><class-id>Refactory.Browser.FlowSuggestionTab class</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">documentSegmentClass	^DocumentSuggestionTab</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutocompleteModel</class-id> <category>private - window</category><body package="Browser-SourceCodeUI">configureStyles	theme := view theme.	styles := Dictionary new.	matchingStyles := Dictionary new.	defaultStyle := view theme default copy		padding: self padding;		color: ColorValue darkGray;		intern.	defaultRightAlignedStyle := defaultStyle copy		alignment: #right;		intern</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutocompleteModel</class-id> <category>private - presentation</category><body package="Browser-SourceCodeUI">argumentsForPragma: aSelectorName	| arguments |	arguments := Pragma allNamed: aSelectorName asSymbol from: view doItReceiverClass to: Object.	arguments isEmpty		ifTrue: [arguments := (1 to: aSelectorName asSymbol numArgs) collect: [:each | each printString]]		ifFalse: [arguments := arguments any arguments collect: [:each | each class name]].	^arguments</body><body package="Browser-SourceCodeUI">isBlockArgument: anArgumentName	^(anArgumentName asLowercase indexOfSubCollection: 'block' startingAt: 1) &gt; 0</body><body package="Browser-SourceCodeUI">lookupMatchingStyle: styleName	^matchingStyles at: styleName ifAbsentPut: [		(theme match: styleName ifAbsent: [theme default]) copy			padding: self padding;			adornment: #underline;			intern]</body><body package="Browser-SourceCodeUI">lookupStyle: styleName	^styles at: styleName ifAbsentPut: [		(theme match: styleName ifAbsent: [theme default]) copy			padding: self padding;			intern]</body><body package="Browser-SourceCodeUI">reduceBehaviors: behaviors	| reduced |	reduced := Set withAll: behaviors.	behaviors do: [:aBehavior |		(aBehavior allSuperclasses anySatisfy: [:aSuperclass | reduced includes: aSuperclass]) ifTrue: [			reduced remove: aBehavior]].	^reduced</body></methods><methods><class-id>Refactory.Browser.SourceCodeTheme</class-id> <category>api</category><body package="Browser-SourceCodeUI">install	"Install the receiver as the active source code editing theme."	SourceCodeEditor defaultTheme: self</body><body package="Browser-SourceCodeUI">match: aSelectorArray	"Match an array of symbols against theme styles, return a DocumentStyle."	^self match: aSelectorArray ifAbsent: [default]</body><body package="Browser-SourceCodeUI">match: aSelectorArray ifAbsent: absentBlock	"Match an array of symbols against theme styles, return a DocumentStyle."	| selectorArray |	selectorArray := aSelectorArray.	[selectorArray isEmpty] whileFalse: [		styles at: selectorArray ifPresent: [:matched | ^matched].		selectorArray := selectorArray allButLast: 1].	^absentBlock value</body><body package="Browser-SourceCodeUI">set: aSelectorArray color: aColorValue	self set: aSelectorArray style:		((styles at: aSelectorArray ifAbsent: [default]) copy			color: aColorValue;			yourself)</body><body package="Browser-SourceCodeUI">set: aSelectorArray font: aFontDescription	self set: aSelectorArray style:		((styles at: aSelectorArray ifAbsent: [default]) copy			fontDescription: aFontDescription;			yourself)</body><body package="Browser-SourceCodeUI">set: aSelectorArray style: aDocumentStyle	styles at: aSelectorArray put: aDocumentStyle intern</body></methods><methods><class-id>Refactory.Browser.SourceCodeTheme</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">author	"Return the name of the author of the receivers theme."	^author</body><body package="Browser-SourceCodeUI">author: anObject	"Set the name of the author of the receivers theme."	author := anObject</body><body package="Browser-SourceCodeUI">default	"Return the default document style for the receivers theme."	^default</body><body package="Browser-SourceCodeUI">default: anObject	"Set the default document style for the receivers theme."	default := anObject intern</body><body package="Browser-SourceCodeUI">name	"Return the name of the receivers theme."	^name</body><body package="Browser-SourceCodeUI">name: anObject	"Set the name of the receivers theme."	name := anObject</body><body package="Browser-SourceCodeUI">source	^source</body><body package="Browser-SourceCodeUI">source: anObject	source := anObject</body><body package="Browser-SourceCodeUI">styles	"Return the dictionary of style selector -&gt; style styles for the receiver."	^styles</body><body package="Browser-SourceCodeUI">styles: anObject	"Set the styles for this theme. The default style is removed from the dictionary and stored in the default instance variable."	styles := Dictionary new.	anObject keysAndValuesDo: [:key :value |		styles at: key put: value intern].	default == DocumentStyle default ifFalse: [^self].	default := (styles at: #(default) ifAbsent: [DocumentStyle default]) intern</body><body package="Browser-SourceCodeUI">website	"Return the (optional) website address of the receivers theme."	^website</body><body package="Browser-SourceCodeUI">website: anObject	"Set the (optional) website address of the receivers theme."	website := anObject</body></methods><methods><class-id>Refactory.Browser.SourceCodeTheme</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">initialize	name := 'Untitled'.	author := 'Unknown'.	website := ''.	styles := Dictionary new.	default := DocumentStyle default</body></methods><methods><class-id>Refactory.Browser.SourceCodeTheme</class-id> <category>comparing</category><body package="Browser-SourceCodeUI">= aTheme	^aTheme class == self class and: [aTheme source == source and: [aTheme name = name]]</body><body package="Browser-SourceCodeUI">hash	^source hash bitXor: name hash</body></methods><methods><class-id>Refactory.Browser.SourceCodeTheme</class-id> <category>printing</category><body package="Browser-SourceCodeUI">printOn: aStream	aStream nextPutAll: name</body></methods><methods><class-id>Refactory.Browser.SourceCodeTheme class</class-id> <category>schemes</category><body package="Browser-SourceCodeUI">chalkColors	^#(	16r151515 16r202020 16r303030 16r505050		16rb0b0b0 16rd0d0d0 16re0e0e0 16rf5f5f5		16rfb9fb1 16reda987 16rddb26f 16racc267		16r12cfc0 16r6fc2ef 16re1a3ee 16rdeaf8f )</body><body package="Browser-SourceCodeUI">defaultColors	^#(	16r151515 16r202020 16r303030 16r505050		16rb0b0b0 16rd0d0d0 16re0e0e0 16rf5f5f5		16rac4142 16rd28445 16rf4bf75 16r90a959		 16r75b5aa 16r6a9fb5 16raa759f 16r8f5536 )</body><body package="Browser-SourceCodeUI">eightiesColors	^#(	16r2d2d2d 16r393939 16r515151 16r747369		16ra09f93 16rd3d0c8 16re8e6df 16rf2f0ec		16rf2777a 16rf99157 16rffcc66 16r99cc99		16r66cccc 16r6699cc 16rcc99cc 16rd27b53 )</body><body package="Browser-SourceCodeUI">greenscreenColors	^#(	16r001100 16r003300 16r005500 16r007700		16r009900 16r00bb00 16r00dd00 16r00ff00		16r007700 16r009900 16r007700 16r00bb00		16r005500 16r009900 16r00bb00 16r005500 )</body><body package="Browser-SourceCodeUI">mochaColors	^#(	16r3b3228 16r534636 16r645240 16r7f705a		16rb8afad 16rd0c8c6 16re9e1dd 16rf5eeeb		16rcb6077 16rd28b71 16rf4bc87 16rbeb55b		16r7bbda4 16r8ab3b5 16ra89bb9 16rbb9584 )</body><body package="Browser-SourceCodeUI">monokaiColors	^#(	16r272822 16r383830 16r49483a 16r75715e		16ra59f85 16rf8f8f2 16rf5f4f1 16rf9f8f5		16rf92672 16rfd971f 16rf4bf75 16ra6e22e		16ra1efe4 16r66d9ef 16rae81ff 16rcc6633 )</body><body package="Browser-SourceCodeUI">oceanColors	^#(	16r2b303b 16r343d46 16r4f5b66 16r65737e		16ra7adba 16rc0c5ce 16rdfe1e8 16reff1f5		16rbf616a 16rd08770 16rebcb8b 16ra3be8c		16r96b5b4 16r8fa1b3 16rb48ead 16rab7967 )</body><body package="Browser-SourceCodeUI">railscastsColors	^#(	16r2b2b2b 16r272935 16r3a4055 16r5a657e		16rd4cfc9 16re6e1dc 16rf4f1ed 16rf9f7f3		16rda4939 16rcc7833 16rffc66d 16ra5c261		16r519f50 16r6d9cbe 16rb6b3eb 16rbc9458 )</body><body package="Browser-SourceCodeUI">solarizedColors	^#(	16r002b36 16r073642 16r586e75 16r657b83		16r839496 16r93a1a1 16reee8d5 16rfdf6e3		16rdc332f 16rcb4b16 16rb58900 16r859900		16r2aa198 16r268bd2 16r6c71c4 16rd33682 )</body><body package="Browser-SourceCodeUI">thirtyTwentyFourColors	^#(	16r090300 16r3a3432 16r4a4543 16r5c5855		16r807d7c 16ra5a2a2 16rd6d5d4 16rf7f7f7		16rdb2d20 16re8bbd0 16rfded02 16r01a252		16rb5e4f4 16r01a03e4 16ra16a94 16rcdab53 )</body><body package="Browser-SourceCodeUI">tomorrowColors	^#(	16r1d1f21 16r282a2e 16r373b41 16r969896		16rb4b7b4 16rc5c8c6 16re0e0e0 16rffffff		16rcc6666 16rde935f 16rf0c674 16rb5bd68		16r8abeb7 16r81a2be 16rb294bb 16ra3685a )</body></methods><methods><class-id>Refactory.Browser.SourceCodeTheme class</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">themes	"Return instances of the receiver for all them definitions."		^(Pragma allNamed: #theme in: self class) collect: [:pragma |		(self perform: pragma selector)			source: (MessageSend receiver: pragma methodClass selector: pragma selector);			yourself]</body></methods><methods><class-id>Refactory.Browser.SourceCodeTheme class</class-id> <category>templates</category><body package="Browser-SourceCodeUI">dark16: hexcodes16 default: defaultStyle	"Return a set of document styles for standard style selectors templated off of a colour scheme of 16 colours, arranged to create a 'dark' looking theme."	| colors color default brackets bolded |	(bolded := defaultStyle fontDescription copy) boldness: 0.7.	colors := hexcodes16 collect: [:each | self hexColorValue: each].	(default := defaultStyle copy)		paragraphBackgroundColor: (colors at: 1);		color: (colors at: 6);		annotationBackgroundColor: (ColorValue hue: (colors at: 1) hue saturation: (colors at: 1) saturation brightness: (colors at: 1) brightness * 1.75).	brackets := OrderedCollection new.	(self lighten: (colors at: 5) depth: 8) keysAndValuesDo: [:index :each |		brackets add:			(Association				key: (Array with: #punctuation with: #brackets with: ('depth', (index - 1) printString) asSymbol)				value: (default copy					color: each;					yourself))].	brackets add: #(punctuation brackets) -&gt; brackets last value.	color := [:index | default copy color: (colors at: index + 1); intern].	^Dictionary new		at: #(default) put: default;		at: #(comment) put: (color value: 3);		at: #(variable parameter function) put: ((color value: 8) copy			fontDescription: bolded;			intern);		at: #(variable) put: (color value: 8);		at: #(punctuation definition comment) put: (color value: 3);		at: #(punctuation definition string) put: (color value: 5);		at: #(punctuation definition parameters) put: (color value: 5);		at: #(punctuation definition array) put: (color value: 5);		at: #(punctuation definition entity) put: (color value: 16rD);		addAll: brackets;		at: #(punctuation delimiters) put: (color value: 5);		at: #(punctuation assignment) put: (color value: 5);		at: #(punctuation endOfStatement) put: (color value: 5);		at: #(punctuation cascade) put: (color value: 5);		at: #(keyword other binaryMethod) put: (color value: 16rD);		at: #(keyword control) put: (color value: 5);		at: #(keyword operator) put: (color value: 5);		at: #(keyword missing) put: ((color value: 5) copy adornment: #dashedUnderline; intern);		at: #(keyword) put: (color value: 16rE);		at: #(entity name function) put: ((color value: 16rD) copy			fontDescription: bolded;			backgroundColor: CoverageValue transparent;			paragraphBackgroundColor: ((colors at: 1) blendWith: ColorValue black weight: 0.33);			intern);		at: #(entity name class) put: (color value: 16rA);		at: #(entity name tag) put: (color value: 8);		at: #(string) put: (color value: 16rB);		at: #(constant character) put: (color value: 16rC);		at: #(constant symbol) put: (color value: 16rB);		at: #(constant numeric) put: (color value: 9);		at: #(constant boolean) put: (color value: 9);		at: #(meta selector) put: (color value: 16rE);		at: #(markup link) put: ((color value: 9) copy			cursor: #fingerPointer;			adornment: #underline;			adornmentColor: (colors at: 10);			intern);		at: #(markup inserted) put: (color value: 16rB);		at: #(markup deleted) put: (color value: 16rB);		at: #(markup changed) put: (color value: 16rE);		at: #(invalid illegal) put: ((color value: 16r2) copy									adornmentColor: (colors at: 16r8 + 1);									adornment: #underline;									intern);		at: #(invalid error) put: self defaultErrorStyle;		at: #(invalid warning) put: self defaultWarningStyle;		at: #(markup watch) put: self defaultWatchStyle;		at: #(markup breakpoint) put: self defaultBreakpointStyle;		at: #(markup breakpoint disabled) put: self defaultDisabledBreakpointStyle;		yourself</body><body package="Browser-SourceCodeUI">darken: aColor depth: aDepth	"From aColor, return aDepths worth of darker colours"	| hue saturation brightness depth |	depth := aDepth - 1.	hue := aColor hue.	saturation := aColor saturation.	brightness := aColor brightness.	^(0 to: depth) collect: [:each | ColorValue hue: hue saturation: saturation brightness: brightness * (1 - (each / depth))]</body><body package="Browser-SourceCodeUI">hexColorValue: anRGBInteger	"AnInteger doesn't really have to be in hex, but it commonly is. Example use:	16rFFFF00 -&gt; Red: FF, Green: FF, Blue: 00 -&gt; ColorValue orange."	^ColorValue		red: ((anRGBInteger bitShift: -16) bitAnd: 16rFF) asFloat / 255.0		green: ((anRGBInteger bitShift: -8) bitAnd: 16rFF) asFloat / 255.0		blue: (anRGBInteger bitAnd: 16rFF) asFloat / 255.0</body><body package="Browser-SourceCodeUI">light16: hexcodes16 default: defaultStyle	"Return a set of document styles for standard style selectors templated off of a colour scheme of 16 colours, arranged to create a 'light' looking theme."	| colors color default brackets bolded |	(bolded := defaultStyle fontDescription copy) boldness: 0.7.	colors := hexcodes16 collect: [:each | self hexColorValue: each].	(default := defaultStyle copy)		paragraphBackgroundColor: (colors at: 8);		color: (colors at: 3);		annotationBackgroundColor: (ColorValue hue: (colors at: 8) hue saturation: (colors at: 8) saturation brightness: (colors at: 8) brightness / 1.1).	brackets := OrderedCollection new.	(self darken: (colors at: 2) depth: 8) keysAndValuesDo: [:index :each |		brackets add:			(Association				key: (Array with: #punctuation with: #brackets with: ('depth', (index - 1) printString) asSymbol)				value: (default copy					color: each;					yourself))].	brackets add: #(punctuation brackets) -&gt; brackets last value.	color := [:index | default copy color: (colors at: index + 1); intern].	^Dictionary new		at: #(default) put: default;		at: #(comment) put: (color value: 4);		at: #(variable parameter function) put: ((color value: 8) copy			fontDescription: bolded;			intern);		at: #(variable) put: (color value: 8);		at: #(punctuation definition comment) put: (color value: 4);		at: #(punctuation definition string) put: (color value: 2);		at: #(punctuation definition parameters) put: (color value: 2);		at: #(punctuation definition array) put: (color value: 2);		at: #(punctuation definition entity) put: (color value: 16rD);		addAll: brackets;		at: #(punctuation delimiters) put: (color value: 2);		at: #(punctuation assignment) put: (color value: 2);		at: #(punctuation endOfStatement) put: (color value: 2);		at: #(punctuation cascade) put: (color value: 2);		at: #(keyword other binaryMethod) put: (color value: 16rD);		at: #(keyword control) put: (color value: 2);		at: #(keyword operator) put: (color value: 2);		at: #(keyword missing) put: ((color value: 2) copy adornment: #dashedUnderline; intern);		at: #(keyword) put: (color value: 16rE);		at: #(entity name function) put: ((color value: 16rD) copy			fontDescription: bolded;			paragraphBackgroundColor: ((colors at: 8) blendWith: ColorValue white weight: 0.66);			intern);		at: #(entity name class) put: (color value: 16r9);		at: #(entity name tag) put: (color value: 8);		at: #(string) put: (color value: 16rB);		at: #(constant character) put: (color value: 16rC);		at: #(constant symbol) put: (color value: 16rB);		at: #(constant numeric) put: (color value: 9);		at: #(constant boolean) put: (color value: 9);		at: #(meta selector) put: (color value: 16rE);		at: #(markup link) put: ((color value: 9) copy			cursor: #fingerPointer;			adornment: #underline;			adornmentColor: (colors at: 10);			intern);		at: #(markup inserted) put: (color value: 16rB);		at: #(markup deleted) put: (color value: 16rB);		at: #(markup changed) put: (color value: 16rE);		at: #(invalid illegal) put: ((color value: 16r2) copy									adornmentColor: (colors at: 16r8 + 1);									adornment: #underline;									intern);		at: #(invalid error) put: self defaultErrorStyle;		at: #(invalid warning) put: self defaultWarningStyle;		at: #(markup watch) put: self defaultWatchStyle;		at: #(markup breakpoint) put: self defaultBreakpointStyle;		at: #(markup breakpoint disabled) put: self defaultDisabledBreakpointStyle;		yourself</body><body package="Browser-SourceCodeUI">lighten: aColor depth: aDepth	"From aColor, return aDepths worth of lighter colours"	| hue saturation brightness depth |	depth := aDepth - 1.	hue := aColor hue.	saturation := aColor saturation.	brightness := aColor brightness.	^(0 to: depth) collect: [:each | ColorValue hue: hue saturation: saturation brightness: brightness + ((1 - brightness) * (each / depth))]</body></methods><methods><class-id>Refactory.Browser.SourceCodeTheme class</class-id> <category>settings</category><body package="Browser-SourceCodeUI">defaultBreakpointStyle	"A default style for displaying breakpoints used by most themes."		^self defaultStyle copy		color: ColorValue white;		backgroundColor: (ColorValue red: 0 green: 86 / 255 blue: 156 / 255);		intern</body><body package="Browser-SourceCodeUI">defaultDisabledBreakpointStyle	"A default style for displaying breakpoints used by most themes."		^self defaultStyle copy		color: ColorValue white;		backgroundColor: (ColorValue brightness: 0.75);		intern</body><body package="Browser-SourceCodeUI">defaultErrorStyle	"A default style for displaying error messages used by most themes."		^self defaultStyle copy		padding: ((0 @ 1) corner: (0 @ 1));		color: ColorValue white;		backgroundColor: (ColorValue red: 215 / 255 green: 39 / 255 blue: 39 / 255);		intern</body><body package="Browser-SourceCodeUI">defaultFontDescription	"A default font description used by most themes and sized dynamically, using the Editor's font size setting,	 relative to the standard font description for source code editing.		 Until we get to virtual FontDescriptions we need to refresh all themes during image startup,	 applying a platform specific base pixel size."	^FontDescription new		family: ((self fontName tokensBasedOn: $,) collect: #trimBlanks);		pixelSize: (((UI.Skins.SkinRegistry current platformBasePixelSize + self fontSize) max: 4) min: 24);		boldness: 0.5;		italic: false;		setDefaultEncodings;		yourself</body><body package="Browser-SourceCodeUI">defaultStyle	"A default style used by most themes"		^Text2.DocumentStyle new		fontDescription: self defaultFontDescription;		annotationBackgroundColor: (ColorValue red: 230 / 255 green: 230 / 255 blue: 230 / 255);		padding: ((8 @ 0) corner: (8 @ 0));		lineSpacing: 0;		paragraphSpacing: 1;		intern</body><body package="Browser-SourceCodeUI">defaultWarningStyle	"A default style for displaying warning messages used by most themes."	^self defaultStyle copy		padding: ((0 @ 1) corner: (0 @ 1));		color: ColorValue white;		backgroundColor: (ColorValue red: 215 / 255 green: 150 / 255 blue: 0 / 255);		intern</body><body package="Browser-SourceCodeUI">defaultWatchStyle	"A default style for displaying watches used by most themes."		^self defaultStyle copy		color: ColorValue white;		backgroundColor: (ColorValue red: 29 / 255 green: 174 / 255 blue: 203 / 255);		intern</body><body package="Browser-SourceCodeUI">fontName	"Return the default styles font name(s) separated by comma."	^FontName ifNil: [FontName := 'verdana, liberation sans, nimbus sans L, helvetica, arial, sans*, *']</body><body package="Browser-SourceCodeUI">fontName: anObject	"Set the default styles font name(s) separated by comma."	anObject = FontName ifTrue: [^self].	FontName := anObject.	SourceCodeEditor reinstallDefaultTheme</body><body package="Browser-SourceCodeUI">fontSize	"Return the default styles font size relative to the standard text editor size."	^FontSize ifNil: [FontSize := 0]</body><body package="Browser-SourceCodeUI">fontSize: aSize	"Set the default styles font size relative to the standard text editor size."	| fontSize |	fontSize := FontSize.	FontSize := (aSize max: -12) min: 12.	fontSize = FontSize ifTrue: [^self].	SourceCodeEditor reinstallDefaultTheme.	self changed: #fontSize</body><body package="Browser-SourceCodeUI">reset	"Helper method to reset text styles and themes after merging/loading significant code changes."		"self reset"	FontName := nil.	FontSize := 0</body></methods><methods><class-id>Refactory.Browser.SourceCodeTheme class</class-id> <category>instance creation</category><body package="Browser-SourceCodeUI">new	^super new initialize</body></methods><methods><class-id>Refactory.Browser.SourceCodeTheme class</class-id> <category>utility</category><body package="Browser-SourceCodeUI">resetStylesAndThemes	"Helper method to reset text styles and themes after merging/loading significant code changes."		"self resetStylesAndThemes"	UI.Skins.Default.DefaultSkin clearAll.	Text2.DocumentStyle reset.	Refactory.Browser.SourceCodeTheme reset.	Refactory.Browser.SourceCodeEditor reinstallDefaultTheme.	UI.Skins.SkinRegistry factoryMethodSelector: UI.Skins.SkinRegistry factoryMethodSelector</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>accessing - performing</category><body package="Browser-SourceCodeUI">compilerClass	"Return the compiler class used for the receiver."		^compilerClass ifNil: [self defaultCompilerClass]</body><body package="Browser-SourceCodeUI">compilerClass: aCompilerClass	"Set the compiler class for the document."	compilerClass := aCompilerClass.	self reinitializePlugins</body><body package="Browser-SourceCodeUI">doItContext	^[evaluator doItContext]		on: evaluator class messageNotUnderstoodSignal		do: [:ex | ex return: nil]</body><body package="Browser-SourceCodeUI">doItEnvironment	^[evaluator doItEnvironment]		on: evaluator class messageNotUnderstoodSignal		do: [:ex | ex return: (self doItReceiver == nil ifTrue: [Smalltalk] ifFalse: [nil])]</body><body package="Browser-SourceCodeUI">doItExpectPattern	^[evaluator doItExpectPattern]		on: evaluator class messageNotUnderstoodSignal		do: [:ex | ex return: false]</body><body package="Browser-SourceCodeUI">doItReceiver	^[evaluator doItReceiver]		on: evaluator class messageNotUnderstoodSignal		do: [:ex | ex return: nil]</body><body package="Browser-SourceCodeUI">doItReceiverAllowed	^[evaluator doItReceiverAllowed]		on: evaluator class messageNotUnderstoodSignal		do: [:ex | ex return: true]</body><body package="Browser-SourceCodeUI">doItReceiverClass	^[evaluator doItReceiverClass]		on: evaluator class messageNotUnderstoodSignal		do: [:ex | ex return: nil]</body><body package="Browser-SourceCodeUI">doItValue: anObject	^[evaluator doItValue: anObject]		on: evaluator class messageNotUnderstoodSignal		do: [:ex | ex return: anObject]</body><body package="Browser-SourceCodeUI">errorHandlerClass	"Return the error handler class used for the receiver."		^errorHandlerClass ifNil: [self defaultErrorHandlerClass]</body><body package="Browser-SourceCodeUI">errorHandlerClass: anErrorHandlerClass	"Set the error handler class for the document."	errorHandlerClass := anErrorHandlerClass.	self redecorate</body><body package="Browser-SourceCodeUI">evaluator	^evaluator</body><body package="Browser-SourceCodeUI">evaluator: anEvaluator	evaluator := anEvaluator.	self reinitializePlugins</body><body package="Browser-SourceCodeUI">language	"Return the language this receiver is programming for."	^language ifNil: [self defaultLanguage]</body><body package="Browser-SourceCodeUI">language: aSymbol	"Set the language this receiver is programming for."	language := aSymbol.	self reinitializePlugins</body><body package="Browser-SourceCodeUI">parserClass	"Return the parser used for the receiver."	^parserClass ifNil: [self defaultParserClass]</body><body package="Browser-SourceCodeUI">parserClass: aParserClass	"Set the parser class for the document."	parserClass := aParserClass.	self reinitializePlugins</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - evaluating</category><body package="Browser-SourceCodeUI">compileExpression: aReason	"Compile the current selection as an expression"	^self compileExpression: aReason retry: [self compileExpression: aReason]</body><body package="Browser-SourceCodeUI">compileExpression: aReason retry: aRetryBlock	"Compile the current selection as an expression"	^self		compileExpressionBetween: self selectionStartPosition		and: self selectionStopPosition		reason: aReason		retry: aRetryBlock</body><body package="Browser-SourceCodeUI">compileMethod: aReason	"Compile the entire source as a method."		^self compileMethod: aReason retry: [self compileMethod: aReason]</body><body package="Browser-SourceCodeUI">compileMethod: aReason retry: aRetryBlock	"Compile the entire source as a method."		self isWorkspace ifTrue: [^self decorateWorkspace: aReason].	^self compileMethodBetween: 0 and: document size reason: aReason retry: aRetryBlock</body><body package="Browser-SourceCodeUI">evaluationMenuGroup	^3</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - zooming</category><body package="Browser-SourceCodeUI">zoomIn	SourceCodeTheme fontSize: SourceCodeTheme fontSize + 1</body><body package="Browser-SourceCodeUI">zoomOut	SourceCodeTheme fontSize: SourceCodeTheme fontSize - 1</body><body package="Browser-SourceCodeUI">zoomReset	SourceCodeTheme fontSize: 0</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">defaultCompilerClass	self doItReceiverClass == nil ifTrue: [^nil].	^self doItReceiverClass compilerClass</body><body package="Browser-SourceCodeUI">defaultDecorations	| enablement |	enablement := self class enablement.	^(self languageServices language: self language category: #editorDecorations ifAbsent: [#()])		select: [:each | enablement at: each ifAbsent: [true]]</body><body package="Browser-SourceCodeUI">defaultDelimiterEscaping	^self languageServices language: self language category: #delimiterEscaping ifAbsent: [nil]</body><body package="Browser-SourceCodeUI">defaultErrorHandlerClass	^self languageServices language: self language category: #compilationErrorHandlerClass ifAbsent: [SourceCodeErrorHandler]</body><body package="Browser-SourceCodeUI">defaultLanguage	^self languageServices languageForClass: self doItReceiverClass ifAbsent: [#unknown]</body><body package="Browser-SourceCodeUI">defaultParserClass	^self languageServices language: self language category: #parserClass ifAbsent: [RBParser]</body><body package="Browser-SourceCodeUI">defaultPlugins	| enablement |	enablement := self class enablement.	^(self languageServices language: self language category: #editorPlugins ifAbsent: [#()])		select: [:each | enablement at: each ifAbsent: [true]]</body><body package="Browser-SourceCodeUI">defaultReadOnly	^false</body><body package="Browser-SourceCodeUI">defaultShowInputCursor	^true</body><body package="Browser-SourceCodeUI">defaultTheme	^self class defaultTheme</body><body package="Browser-SourceCodeUI">initialize	super initialize.	needsRedecoration := false</body><body package="Browser-SourceCodeUI">initializeDefaults	parseTree := nil.	timingStatistics := OrderedCollection with: nil.	super initializeDefaults</body><body package="Browser-SourceCodeUI">initializePlugins	controller == nil ifTrue: [^self].	self plugins do: [:each | controller addBehavior: (each on: self)]</body><body package="Browser-SourceCodeUI">initializeSearch	search := SourceCodeSearch on: self</body><body package="Browser-SourceCodeUI">languageServices	^LanguageServices default</body><body package="Browser-SourceCodeUI">reinitializePlugins	self releasePlugins.	self initializePlugins</body><body package="Browser-SourceCodeUI">release	self releasePlugins.	super release.</body><body package="Browser-SourceCodeUI">releasePlugins	controller == nil ifTrue: [^self].	controller removeAllCustomBehaviors</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>private - evaluation</category><body package="Browser-SourceCodeUI">compileExpressionBetween: start and: stop reason: aReason retry: aRetryBlock	"Compile an expression between start..stop"		| defaultStyle source decorated partialParseTree method errorHandler parameters |	self doItReceiverClass ifNil: [^nil].		(controller hasActionEvent: #evaluating) ifTrue: [		controller handleEvent: (CommandEvent commandID: #evaluating)].		document splitBetweenPosition: start.	document splitBetweenPosition: stop.	defaultStyle := self theme default.	source := document copyBetween: start and: stop apply: [defaultStyle].	decorated := source copy.	start = 0 ifFalse: [decorated insertAt: 0 with: (document copyBetween: 0 and: start)].	stop = document size ifFalse: [decorated insertAt: decorated size with: (document copyBetween: stop and: document size)].	self censorMarkupIn: source.	partialParseTree := self parserClass parseExpressionWithErrors: source.	self decorations do: [:each |		each isForWorkspace ifFalse: [			each decorate: decorated parseTree: partialParseTree editor: self offset: start reason: aReason]].	errorHandler := self errorHandlerClass new initialize: decorated editor: self selector: nil offset: start reason: aReason.	errorHandler retry: aRetryBlock.		[method := self compilerClass new		compile: source readStream		in: self doItContext		allowReceiver: self doItReceiverAllowed		class: self doItReceiver class		environment: self doItEnvironment		noPattern: true		notifying: nil		ifFail: [nil]		handler: errorHandler]		on: UserNotification do: [:exception |			errorHandler error: exception description at: 1.			exception isResumable				ifTrue: [exception resume]				ifFalse: [exception return]].	method == nil ifFalse: [method := self finalizeCompiledMethod: method source: source expectPattern: false].	(parameters := Array new: 5)		at: 1 put: method;		at: 2 put: decorated;		at: 3 put: start;		at: 4 put: stop;		at: 5 put: aReason.	self class evaluationPragmas do: [:compilationExtension |		method == nil ifFalse: [			parameters at: 1 put: method.			method := self perform: compilationExtension withArguments: parameters]].		errorHandler check: method selector: nil.	self invalidateSelectionWhile: [		self preserveCursorsWhile: [			flow merge: decorated]].		^method</body><body package="Browser-SourceCodeUI">compileMethodBetween: start and: stop reason: aReason retry: aRetryBlock	"Compile between start..stop as a method."		| defaultStyle source decorated method errorHandler selector parameters |	self doItReceiverClass ifNil: [^nil].	controller handleEvent: (CommandEvent commandID: #evaluating).	document splitBetweenPosition: start.	document splitBetweenPosition: stop.	defaultStyle := self theme default.	source := document copyBetween: start and: stop apply: [defaultStyle].	decorated := source copy.	start = 0 ifFalse: [decorated insertAt: 0 with: (document copyBetween: 0 and: start)].	stop = document size ifFalse: [decorated insertAt: decorated size with: (document copyBetween: stop and: document size)].	self censorMarkupIn: source.	selector := nil.	self doItExpectPattern		ifFalse: [parseTree := self parserClass parseExpressionWithErrors: source]		ifTrue: [			parseTree := self parserClass parseMethodWithErrors: source.			selector := parseTree selector].	self decorations do: [:each |		each isForWorkspace ifFalse: [			each decorate: decorated parseTree: parseTree editor: self offset: start reason: aReason]].	self styleMarkupIn: decorated.	errorHandler := self errorHandlerClass new initialize: decorated editor: self selector: selector offset: start reason: aReason.	errorHandler retry: aRetryBlock.		[method := self compilerClass new		compile: source readStream		in: nil		allowReceiver: self doItReceiverAllowed		class: self doItReceiverClass		environment: self doItEnvironment		noPattern: self doItExpectPattern not		notifying: nil		ifFail: [nil]		handler: errorHandler]		on: UserNotification do: [:exception |			errorHandler error: exception description at: 1.			exception isResumable				ifTrue: [exception resume]				ifFalse: [exception return]].		method == nil ifFalse: [method := self finalizeCompiledMethod: method source: source expectPattern: true].	(parameters := Array new: 5)		at: 1 put: method;		at: 2 put: decorated;		at: 3 put: start;		at: 4 put: stop;		at: 5 put: aReason.	self class compilationPragmas do: [:compilationExtension |		method == nil ifFalse: [			parameters at: 1 put: method.			method := self perform: compilationExtension withArguments: parameters]].	errorHandler check: method selector: selector.	aReason = #OnSave ifTrue: [needsRedecoration := false].	self invalidateSelectionWhile: [		self preserveCursorsWhile: [			flow merge: decorated]].		^method</body><body package="Browser-SourceCodeUI">decorateWorkspace: aReason	"Decorate the entire document as a workspace."	| defaultStyle workspace |	defaultStyle := self theme default.	workspace := document copyBetween: 0 and: document size apply: [:style | style mergeFontProperties: defaultStyle].	self decorations do: [:each |		each isForWorkspace ifTrue: [			each decorate: workspace editor: self offset: 0 reason: aReason]].		aReason = #OnSave ifTrue: [needsRedecoration := false].	self invalidateSelectionWhile: [		self preserveCursorsWhile: [			flow merge: workspace]].		^nil</body><body package="Browser-SourceCodeUI">evaluateExpressionDo: aBlock retry: aRetryBlock	"Evaluate the selection as an expression and pass the result to aBlock if it compiled."		| compiled context result selectionInterval |	selectionInterval := self selectionInterval.	self compileMethod: #OnType.	compiled := self		compileExpressionBetween: selectionInterval first and: selectionInterval last		reason: #OnSave		retry: [:start :stop |			self selectBetween: start and: stop.			aRetryBlock value].	compiled ifNil: [^self].	result := UI.Cursor wait showWhile: [		(context := self doItContext) isNil			ifTrue: [self doItReceiver performMethod: compiled]			ifFalse: [self doItReceiver performMethod: compiled with: context]].	SourceFileManager default logChange: self selection asString.	^aBlock value: result</body><body package="Browser-SourceCodeUI">finalizeCompiledMethod: aCompiledMethod source: aSourceCode expectPattern: doItExpectPattern	| method |	method := aCompiledMethod.	self doItReceiverAllowed ifFalse: [method mclass: UndefinedObject].	method environment: self doItEnvironment.	"Do not set the source if there is a context, as that means we're in a debugger and accessing temporaries is done using generated source code that must be gotten from decompilation. eg: (t1 tempAt: 1), etc."	(doItExpectPattern or: [self doItContext isNil]) ifTrue: [		method attributeMessages isNil ifTrue: [method := AnnotatedMethod fromMethod: method].		method attributeMessages:			(method attributeMessages ifNil: [#()]),			(Array with: (Message selector: #__hasSelector: argument: doItExpectPattern)).		method sourcePointer: aSourceCode asString].	^method</body><body package="Browser-SourceCodeUI">selectedVariableBinding	| name |	name := self selectedVariableName.	name isNil ifTrue: [^nil].	^SystemUtils		resolveBindingAsReference: self selectionNode name		inClass: self doItReceiverClass		inEnvironment: self doItEnvironment</body><body package="Browser-SourceCodeUI">selectedVariableName	| node |	node := self selectionNode.	^(node notNil and: [node isVariable]) ifTrue: [node name] ifFalse: [nil]</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>private - modification</category><body package="Browser-SourceCodeUI">backspaceContinued	self resetCursorAnimation.	self backspaceMarkup ifTrue: [^self].	self invalidateSelectionWhile: [		super backspaceContinued.		needsRedecoration := true.		self compileMethod: #OnType].	currentEditState := #backspace</body><body package="Browser-SourceCodeUI">backspaceMarkup	| position direction |	position := flow cursorAsPosition: inputCursor direction: #leftToRight.	direction := flow directionAtLeftOfCursor: inputCursor.		direction = #leftToRight		ifTrue: [			position = 0 ifTrue: [^false].			(document segmentAtPositionBefore: position ifAbsent: [^false]) isMarkupNode ifTrue: [				self expandToIncludeTouchingMarkup.				self clear.				^true]]		ifFalse: [			position = document size ifTrue: [^false].			(document segmentAtPositionAfter: position ifAbsent: [^false]) isMarkupNode ifTrue: [				self expandToIncludeTouchingMarkup.				self clear.				^true]].	^false</body><body package="Browser-SourceCodeUI">backspaceNew	self backspaceMarkup ifTrue: [^self].	super backspaceNew</body><body package="Browser-SourceCodeUI">deleteContinued	self resetCursorAnimation.	self deleteMarkup ifTrue: [^self].	self invalidateSelectionWhile: [		super deleteContinued.		needsRedecoration := true.		self compileMethod: #OnType].	currentEditState := #delete</body><body package="Browser-SourceCodeUI">deleteMarkup	| position direction |	position := flow cursorAsPosition: inputCursor direction: #leftToRight.	direction := flow directionAtRightOfCursor: inputCursor.		direction = #rightToLeft		ifTrue: [			position = 0 ifTrue: [^false].			(document segmentAtPositionBefore: position ifAbsent: [^false]) isMarkupNode ifTrue: [				self expandToIncludeTouchingMarkup.				self clear.				^true]]		ifFalse: [			position = document size ifTrue: [^false].			(document segmentAtPositionAfter: position ifAbsent: [^false]) isMarkupNode ifTrue: [				self expandToIncludeTouchingMarkup.				self clear.				^true]].	^false</body><body package="Browser-SourceCodeUI">deleteNew	self deleteMarkup ifTrue: [^self].	super deleteNew</body><body package="Browser-SourceCodeUI">markedTypingComplete	self resetCursorAnimation.	self invalidateSelectionWhile: [		super markedTypingComplete.		needsRedecoration := true.		self compileMethod: #OnType]</body><body package="Browser-SourceCodeUI">markedTypingContinued: aString	self resetCursorAnimation.	self invalidateSelectionWhile: [		super markedTypingContinued: aString.		needsRedecoration := true.		self compileMethod: #OnType].	currentEditState := #markedTyping</body><body package="Browser-SourceCodeUI">performChange: change	| newEditState |	self resetCursorAnimation.	self invalidateSelectionWhile: [		super performChange: change.		newEditState := currentEditState.		needsRedecoration := true.		self compileMethod: #OnType].	currentEditState := newEditState.	^change</body><body package="Browser-SourceCodeUI">performChange: aType with: replacement	self expandSelectionToIncludeOverlappingMarkup.	^super performChange: aType with: replacement</body><body package="Browser-SourceCodeUI">performChange: aType with: replacement direction: direction	self expandSelectionToIncludeOverlappingMarkup.	^super performChange: aType with: replacement direction: direction</body><body package="Browser-SourceCodeUI">typingContinued: aString	self resetCursorAnimation.	self invalidateSelectionWhile: [		super typingContinued: aString.		needsRedecoration := true.		self compileMethod: #OnType].	currentEditState := #typing</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - undo/redo</category><body package="Browser-SourceCodeUI">redo	self invalidateSelectionWhile: [		super redo.		needsRedecoration := true.		self compileMethod: #OnType]</body><body package="Browser-SourceCodeUI">undo	self invalidateSelectionWhile: [		super undo.		needsRedecoration := true.		self compileMethod: #OnType]</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">closeDelimiters	"Returns characters that are typically close delimiters."	^self languageServices language: self language category: #closeDelimiters ifAbsent: [super closeDelimiters]</body><body package="Browser-SourceCodeUI">compiledMethod: aCompiledMethod	"Set the source code document to aCompiledMethod's source code."	self warning: nil.	self document: aCompiledMethod asSourceCodeDocument</body><body package="Browser-SourceCodeUI">contextualParseTree	"Return a temporary parse tree which is contextual to where the cursor is."	^self parserClass		parseExpression: (document copyBetween: self paragraphStartPosition and: self paragraphStopPosition)		onError: [:s :p | ^nil]</body><body package="Browser-SourceCodeUI">decorations	"Return the receivers decorators or the default decorators if none are set on the receiver."	^decorations ifNil: [self defaultDecorations]</body><body package="Browser-SourceCodeUI">decorations: anObject	"Set the receivers decorators."	decorations = anObject ifTrue: [^self].	decorations := anObject.	self redecorate</body><body package="Browser-SourceCodeUI">isWorkspace	^settings at: #isWorkspace ifAbsent: [true]</body><body package="Browser-SourceCodeUI">isWorkspace: aBoolean	settings at: #isWorkspace put: aBoolean</body><body package="Browser-SourceCodeUI">nestingDelimiters	"Returns a set of characters that are typically used to nest as delimiters."		^self languageServices language: self language category: #nestingDelimiters ifAbsent: [super nestingDelimiters]</body><body package="Browser-SourceCodeUI">openDelimiters	"Returns characters that are typically open delimiters."	^self languageServices language: self language category: #openDelimiters ifAbsent: [super openDelimiters]</body><body package="Browser-SourceCodeUI">parseTree	"Return the last valid parse tree node, which may be nil."	parseTree ifNil: [self compileMethod: #OnType].	^parseTree</body><body package="Browser-SourceCodeUI">plugins	"Return the receivers plugins."		^plugins ifNil: [self defaultPlugins]</body><body package="Browser-SourceCodeUI">plugins: anArray	"Set the receivers plugins."	plugins := anArray.	self reinitializePlugins</body><body package="Browser-SourceCodeUI">selectionNode	"Return the current best match parse node for the selection, which may be nil if no best match can be found."	| interval node rootNode |	self isWorkspace		ifTrue: [			interval := (self selectionStartPosition - self paragraphStartPosition + 1) to: (self selectionStopPosition - self paragraphStartPosition + 1).			rootNode := self contextualParseTree]		ifFalse: [			interval := (self selectionStartPosition + 1) to: (self selectionStopPosition + 1).			rootNode := self parseTree].	[self hasSelection		ifTrue: [			node := rootNode whichNodeIsContainedBy: interval.			node isNil ifTrue: [node := rootNode bestNodeFor: interval]]		ifFalse: [			node := rootNode bestNodeForPosition: self selectionStartPosition]]		on: Error do: [:ex | node := nil].	^node</body><body package="Browser-SourceCodeUI">selectionReceiverClass	"If the current selectionNode is a message node, attempt to determine the type of the receiver"	| classes |	classes := self selectionReceiverClasses		remove: UndefinedObject ifAbsent: [];		yourself.	classes size = 1 ifTrue: [^classes any].	^nil</body><body package="Browser-SourceCodeUI">selectionReceiverClasses	"If the current selectionNode is a message node, attempt to determine the type of the receiver"	^self selectionReceiverClasses: self selectionNode</body><body package="Browser-SourceCodeUI">selectionReceiverClasses: aSelectionNode	"If the aSelectionNode is a message node, attempt to determine the type of the receiver"	^aSelectionNode propertyAt: #selectionReceiverClasses ifAbsent: [		| interface selectionReceiverClasses |		interface := aSelectionNode inferReceiverTypeInterfaceOn: self doItReceiverClass in: self doItEnvironment.		selectionReceiverClasses := interface == nil			ifTrue: [#()]			ifFalse: [interface resolve collect: #behavior].		aSelectionNode propertyAt: #selectionReceiverClasses put: selectionReceiverClasses.		selectionReceiverClasses]</body><body package="Browser-SourceCodeUI">theme	"Return the theme for the receiver or if none is set, return the default theme."	^theme ifNil: [self defaultTheme]</body><body package="Browser-SourceCodeUI">theme: anObject	"Set the theme for the receiver."		theme = anObject ifTrue: [^self].	theme := anObject.	self redecorate</body><body package="Browser-SourceCodeUI">warning	"Return a warning that can be specified for the entire source code."	^warning</body><body package="Browser-SourceCodeUI">warning: anObject	"Set a warning to be displayed for the entire source code"	warning := anObject</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - browsing</category><body package="Browser-SourceCodeUI">browseMethodLabel	^(#BrowseMethodLabel &lt;&lt; #menus &gt;&gt; 'Browse Method (&lt;1p&gt;)')		expandMacrosWith: self selectionReceiverClass</body><body package="Browser-SourceCodeUI">highlightInstanceVariable: aVariableName	| references |	references := OrderedCollection new.	parseTree nodesDo: [:each |		(each isVariable and: [each references: aVariableName]) ifTrue: [			references add: each]].	highlights := references collect: [:each |		DocumentHighlight color: ColorValue lightYellow between: (each start - 1) and: each stop direction: #rightToLeft].	self invalidate</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>private - displaying</category><body package="Browser-SourceCodeUI">configureGraphicsContext: aGraphicsContext	super configureGraphicsContext: aGraphicsContext.	self theme default paragraphBackgroundColor == CoverageValue transparent ifFalse: [		aGraphicsContext clientDataAt: #showParagraphStripingColor			put: (self theme default paragraphBackgroundColor blendWith: ColorValue white)].			self theme default backgroundColor == CoverageValue transparent ifFalse: [		aGraphicsContext clientDataAt: #showLineStripingColor			put: (self theme default backgroundColor blendWith: ColorValue white)]</body><body package="Browser-SourceCodeUI">invalidateCursor	"Invalidate the cursor position."	super invalidateCursor.	(self justBecameIdle and: [needsRedecoration]) ifTrue: [		needsRedecoration := false.		((self class shouldDisplayErrors: #OnType) or: [			(self class shouldDisplayErrors: #OnIdle) or: [				(self class shouldDisplayWarnings: #OnType) or: [					self class shouldDisplayWarnings: #OnIdle]]]) ifFalse: [^self].		self invalidateSelectionWhile: [self compileMethod: #OnIdle]]</body><body package="Browser-SourceCodeUI">invalidationSuppressWhile: aBlock	"Do not redraw anything while performing aBlock. If the widget is not in a window, redrawing is irrelevant, so run the block anyway."	self topComponent ifNotNil: [:topComponent |		topComponent sensor ifNotNil: [:sensor |			^sensor invalidationSuppressWhile: aBlock]].	aBlock value</body><body package="Browser-SourceCodeUI">justBecameIdle	| timeSinceLastAction |	timeSinceLastAction := Time millisecondClockValue - cursorAnimationStart.	^timeSinceLastAction between: self idleDelayMilliseconds and: (self idleDelayMilliseconds + self cursorAnimationSpeed)</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>private - decoration</category><body package="Browser-SourceCodeUI">idleDelayMilliseconds	^IdleDelayMilliseconds</body><body package="Browser-SourceCodeUI">isIdle	"Asked by decorations, to see if they should provide more information than less based on whether the developer has become idle at their keyboard."	cursorAnimationStart == nil ifTrue: [^false].	^(Time millisecondClockValue - cursorAnimationStart) &gt; self idleDelayMilliseconds</body><body package="Browser-SourceCodeUI">redecorateProbes	"Redecorate the probes in the source code only."	| redecorated |	flow device isOpen ifFalse: [^self].	self isOpen ifFalse: [^self].	redecorated := document copy.	self styleMarkupIn: redecorated.	self resetIdle.	self invalidationSuppressWhile: [flow merge: redecorated].	self invalidateNow</body><body package="Browser-SourceCodeUI">resetIdle	"Reset the idle counter to a point where the editor is idle."	needsRedecoration := true.	cursorAnimationStart := Time millisecondClockValue - self idleDelayMilliseconds</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>visual properties</category><body package="Browser-SourceCodeUI">backgroundColor	"The theme dictates the background color of the receiver, rather than the platform settings."		| backgroundColor |	self isEnabled ifFalse: [^super backgroundColor].	(backgroundColor := self theme default paragraphBackgroundColor) = Graphics.CoverageValue transparent ifTrue: [		^super backgroundColor].	^backgroundColor</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - editing</category><body package="Browser-SourceCodeUI">animateAccept	"Add a subtle animation to indicate an accept has taken place."	| borderComponent border acceptAnimation acceptInvalidate |	(borderComponent := self findParent: [:each | each isKindOf: BorderedWrapper]) ifNil: [^self].	(border := borderComponent border) class == SkinnedSimpleBorder ifFalse: [^self].	border := border copy.	acceptAnimationCancel == nil ifFalse: [acceptAnimationCancel value].	acceptInvalidate := [		borderComponent isOpen ifTrue: [			| gc |			gc := [borderComponent graphicsContext] on: Error do: [:ex | nil].			gc == nil ifFalse: [				border displayOn: gc forDisplayBox: borderComponent bounds using: nil]].	].	acceptAnimation := borderComponent animateOnce: [:step |		border highlightWeight: 1 - step.		acceptInvalidate value].	acceptAnimationCancel := [		acceptAnimation stop.		border highlightWeight: 0.		acceptInvalidate value].</body><body package="Browser-SourceCodeUI">basicAccept	"Add a subtle animation to indicate an accept has taken place."	| previous |	model == nil ifTrue: [^true].	(controller requestValueChange: model value to: document) ifFalse: [^false].	self triggerEvent: #changing.	model removeDependent: self.	previous := model value.	model value: self documentWithoutMarkup.	model changed: #accepted.	model addDependent: self.	isAccepted := true.	self animateAccept.	controller valueChange: previous to: model value.	self triggerEvent: #changed.	^true</body><body package="Browser-SourceCodeUI">correctionsMenu	| menu node selector receiverClasses potentials parts offset |	self isCorrectableNode ifFalse: [		menu := UI.Menu new.		menu addItem: ((UI.MenuItem labeled: 'No suggestions') enabled: false; yourself).		^menu].		node := self selectionNode.	(node isMethod or: [node isMessage or: [node isTagNode]]) ifTrue: [		selector := node selector.		parts := node selectorParts].	node isVariable ifTrue: [		selector := node name.		parts := Array with: node token.		potentials := [:suggestor |			node allScopedArgumentVariables do: suggestor.			node allScopedTemporaryVariables do: suggestor]].		node isTagNode ifTrue: [		potentials := [:suggestor |			self doItReceiverClass recognizedMethodPragmas do: suggestor]].		potentials == nil ifTrue: [		potentials := (receiverClasses := self selectionReceiverClasses) isEmpty			ifTrue: [[:suggestor | SourceCodeDatabase default implementorsIndex keysDo: suggestor]]			ifFalse: [[:suggestor | receiverClasses do: [:each | each allSelectors do: suggestor]]]].	menu := node propertyAt: #corrections ifAbsent: [nil].	menu == nil ifTrue: [		| corrections |		corrections := SpellingCorrector correct: selector against: potentials.		menu := UI.Menu new.		offset := self isWorkspace			ifTrue: [self paragraphStartPosition]			ifFalse: [0].		corrections do: [:suggestion |			| stream selectorParts |			selectorParts := OrderedCollection new.			stream := suggestion asString readStream.			[stream atEnd] whileFalse: [				selectorParts add: (stream throughAll: ':')].			parts size = selectorParts size ifTrue: [				menu addItem: ((UI.MenuItem labeled: suggestion)					value: [						selectorParts reverse with: parts reverse do: [:new :old |							new = old value ifFalse: [								self anchorPosition: old start + offset - 1.								self inputPosition: old stop + offset.								self insert: new]]];					yourself)]].		menu menuItems isEmpty ifTrue: [			menu addItem: ((UI.MenuItem labeled: 'No suggestions') enabled: false; yourself)].		node propertyAt: #corrections put: menu].		^menu</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - find/replace</category><body package="Browser-SourceCodeUI">findClosed		self compileMethod: #OnSave</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>testing</category><body package="Browser-SourceCodeUI">canAddInstanceVariable	^self doItReceiverClass ~~ UndefinedObject</body><body package="Browser-SourceCodeUI">canBrowseImplementors	^self isMessageNode or: [self isVariableNode and: [self selectionNode name = 'super']]</body><body package="Browser-SourceCodeUI">canBrowseMethod	^self canBrowseImplementors and: [self selectionReceiverClass notNil]</body><body package="Browser-SourceCodeUI">canEvaluateCode	| theCompilerClass |	(theCompilerClass := self compilerClass) == nil ifTrue: [^false].	^(theCompilerClass includesBehavior: SmalltalkCompiler) or: [		(theCompilerClass respondsTo: #treatsAsSimpleSmalltalk:) and: [			theCompilerClass treatsAsSimpleSmalltalk: self document]]</body><body package="Browser-SourceCodeUI">canEvaluateSelection	self isFocusedView ifFalse: [		self focusedDocumentViewDo: [:view | ^view canEvaluateSelection].		self focusedTextEditorDo: [:aController | ^true]].	self hasSelection ifTrue: [^true].	^self paragraphStartPosition ~= self paragraphStopPosition</body><body package="Browser-SourceCodeUI">canExtractSelection	^self hasSelection and: [self isReadOnly not and: [self doItExpectPattern]]</body><body package="Browser-SourceCodeUI">canInlineMethod	^self doItExpectPattern and: [self isMessageNode and: [self selectionNode isMethod not]]</body><body package="Browser-SourceCodeUI">canTimeIt	^self isActive and: [self hasSelection]</body><body package="Browser-SourceCodeUI">hasEvaluateSelection	self isFocusedView ifFalse: [		self focusedDocumentViewDo: [:view | ^view hasEvaluateSelection].		self focusedTextEditorDo: [:aController | ^true]].	^true</body><body package="Browser-SourceCodeUI">hasNoSelection	^self hasSelection not</body><body package="Browser-SourceCodeUI">isAssignmentNode	^self selectionNode		ifNil: [false]		ifNotNil: [:node | node isAssignment]</body><body package="Browser-SourceCodeUI">isClassNode	| binding |	^self selectionNode		ifNil: [false]		ifNotNil: [:node |			node isVariable ifFalse: [^false].			binding := SystemUtils				resolveBindingAsReference: node name				inClass: self doItReceiverClass				inEnvironment: self doItEnvironment.			^binding ~~ nil and: [binding isForClass]]</body><body package="Browser-SourceCodeUI">isCorrectableNode	^self isUnknownMessageNode or: [self isUndeclaredVariableNode]</body><body package="Browser-SourceCodeUI">isImplementorFindableNode	| node |	self isMessageNode ifTrue: [^true].	(node := self selectionNode) == nil ifTrue: [^false].	^node isVariable and: [node name = 'super']</body><body package="Browser-SourceCodeUI">isInstanceVariableNode	self isVariableNode ifFalse: [^false].	self doItReceiverClass ifNil: [^false].	^self selectionNode isLocalVariable not and: [self doItReceiverClass allInstVarNames includes: self selectionNode name]</body><body package="Browser-SourceCodeUI">isMessageNode	| node |	(node := self selectionNode) == nil ifTrue: [^false].	node isMethod ifTrue: [		| start stop |		start := self selectionStartPosition.		stop := self selectionStopPosition.		self parseTree allCommentsDo: [:commentInterval |			((commentInterval includes: start) or: [commentInterval includes: stop]) ifTrue: [				^false]].		^true].	^node isMessage or: [node isTagNode]</body><body package="Browser-SourceCodeUI">isNameSpaceNode	| binding |	^self selectionNode		ifNil: [false]		ifNotNil: [:node |			node isVariable ifFalse: [^false].			binding := SystemUtils				resolveBindingAsReference: node name				inClass: self doItReceiverClass				inEnvironment: self doItEnvironment.			^binding ~~ nil and: [binding value isNameSpace]]</body><body package="Browser-SourceCodeUI">isParameterVariableDeclarationNode	| node |	self isParameterVariableNode ifFalse: [^false].	node := self selectionNode.	^node parent isBlock or: [node parent isMethod]</body><body package="Browser-SourceCodeUI">isParameterVariableNode	| node definingNode |	self isVariableNode ifFalse: [^false].	node := self selectionNode.	(definingNode := node whoDefines: node name) ifNil: [^false].	(definingNode isMethod or: [definingNode isBlock]) ifFalse: [^false].	^definingNode arguments includes: node</body><body package="Browser-SourceCodeUI">isRenamableVariableNode	^self isInstanceVariableNode or: [self isParameterVariableNode or: [self isTemporaryVariableNode]]</body><body package="Browser-SourceCodeUI">isSelectorNode	^self selectionNode		ifNil: [false]		ifNotNil: [:node |			node isLiteralNode and: [				node value isSymbol]]</body><body package="Browser-SourceCodeUI">isSharedVariableNode	| binding |	^self selectionNode		ifNil: [false]		ifNotNil: [:node |			node isVariable ifFalse: [^false].			binding := SystemUtils				resolveBindingAsReference: node name				inClass: self doItReceiverClass				inEnvironment: self doItEnvironment.			^binding ~~ nil and: [binding isForGeneral and: [binding value isNameSpace not]]]</body><body package="Browser-SourceCodeUI">isSymbolNode	^self selectionNode		ifNil: [false]		ifNotNil: [:node |			node isLiteralNode and: [				node value isSymbol]]</body><body package="Browser-SourceCodeUI">isTemporaryOrParameterVariableNode	^self isTemporaryVariableNode or: [self isParameterVariableNode]</body><body package="Browser-SourceCodeUI">isTemporaryVariableDeclarationNode	| node |	self isTemporaryVariableNode ifFalse: [^false].	node := self selectionNode.	^node parent isSequence</body><body package="Browser-SourceCodeUI">isTemporaryVariableNode	| node definingNode |	self isVariableNode ifFalse: [^false].	node := self selectionNode.	(definingNode := node whoDefines: node name) ifNil: [^false].	definingNode isSequence ifFalse: [^false].	^definingNode temporaries includes: node</body><body package="Browser-SourceCodeUI">isTypedMessageNode	^self isMessageNode and: [self selectionReceiverClasses notEmpty]</body><body package="Browser-SourceCodeUI">isUndeclaredVariableNode	| node style undeclaredVariableStyle |	self isVariableNode ifFalse: [^false].	node := self selectionNode.	style := self document styleAt: node start.	undeclaredVariableStyle := self theme match: #(invalid illegal undeclaredVariable).	^(undeclaredVariableStyle propertyAt: #selector ifAbsent: [^false]) == (style propertyAt: #selector ifAbsent: [^false])</body><body package="Browser-SourceCodeUI">isUnknownMessageNode	self isMessageNode ifFalse: [^false].	^(SourceCodeDatabase default implementorsIndex includesKey: self selectionNode selector) not</body><body package="Browser-SourceCodeUI">isVariableDeclarationNode	^self isTemporaryVariableDeclarationNode or: [self isParameterVariableDeclarationNode]</body><body package="Browser-SourceCodeUI">isVariableNode	^self selectionNode		ifNil: [false]		ifNotNil: [:node | node isVariable and: [self isClassNode not and: [node isMissingVariable not]]]</body><body package="Browser-SourceCodeUI">isVariableReferenceNode	^self isVariableNode and: [self isVariableDeclarationNode not]</body><body package="Browser-SourceCodeUI">shouldOfferAddInstanceVariable	^self isClassNode and: [self selectionNode name = self doItReceiverClass name]</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>refactorings - instance variables</category><body package="Browser-SourceCodeUI">abstractInstanceVariable: variableName	evaluator abstractInstanceVariable: variableName</body><body package="Browser-SourceCodeUI">addInstanceVariable: aVariableName	evaluator addInstanceVariable: aVariableName</body><body package="Browser-SourceCodeUI">createInstanceVariableAccessors: variableName	evaluator createInstanceVariableAccessors: variableName</body><body package="Browser-SourceCodeUI">protectInstanceVariable: variableName	evaluator protectInstanceVariable: variableName</body><body package="Browser-SourceCodeUI">pushDownInstanceVariable: variableName	evaluator pushDownInstanceVariable: variableName</body><body package="Browser-SourceCodeUI">pushUpInstanceVariable: variableName	evaluator pushUpInstanceVariable: variableName</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>refactorings - variables</category><body package="Browser-SourceCodeUI">canBindTight	^self doItExpectPattern and: [self isTemporaryVariableNode]</body><body package="Browser-SourceCodeUI">canCreateInstVar	^self doItExpectPattern and: [self isTemporaryVariableNode]</body><body package="Browser-SourceCodeUI">canInlineParameter	^self doItExpectPattern and: [self isParameterVariableNode]</body><body package="Browser-SourceCodeUI">canInlineTemporary	^self doItExpectPattern and: [self isAssignmentNode]</body><body package="Browser-SourceCodeUI">canRemoveParameter	^self doItExpectPattern and: [self isParameterVariableNode]</body><body package="Browser-SourceCodeUI">canRenameVariable	^self doItExpectPattern and: [self isRenamableVariableNode]</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>events - mouse</category><body package="Browser-SourceCodeUI">mouseDoubleClickAt: aPoint	"Variation on regular text editing: double clicking past the end of the line, select the whole line. This is a preferred behaviour of Smalltalk programmers."	self inputCursor: (flow cursorAtPixel: aPoint).	aPoint x &gt; self inputLine right ifTrue: [		self becomeSelectingWord.		^self invalidateSelectionWhile: [			anchorCursor := inputCursor.			self selectParagraph]].	super mouseDoubleClickAt: aPoint</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>private</category><body package="Browser-SourceCodeUI">selectionReceiverClassWithMessageNode: aMessageNode selector: aSelector	| receiverClass |	aMessageNode receiver isBlock ifTrue: [^BlockClosure].	aMessageNode receiver isLiteralNode ifTrue: [		^aMessageNode receiver value class].	aMessageNode receiver isVariable ifTrue: [		^self selectionReceiverClassWithVariableNode: aMessageNode receiver selector: aSelector].	aMessageNode receiver isMessage ifTrue: [		aMessageNode receiver selector = #class ifTrue: [			receiverClass := self selectionReceiverClassWithMessageNode: aMessageNode receiver selector: aSelector.			receiverClass == nil ifFalse: [^receiverClass class].			^nil].		aMessageNode receiver selector = #yourself ifTrue: [			^self selectionReceiverClassWithMessageNode: aMessageNode receiver selector: aSelector]].	^nil</body><body package="Browser-SourceCodeUI">selectionReceiverClassWithVariableNode: aVariableNode selector: aSelector	| binding resolved |	aVariableNode name = 'self' ifTrue: [^self doItReceiverClass].	aVariableNode name = 'super' ifTrue: [^self doItReceiverClass superclass].	aVariableNode name = 'thisContext' ifTrue: [^MethodContext].	binding := SystemUtils		resolveBindingAsReference: aVariableNode name		inClass: self doItReceiverClass		inEnvironment: self doItEnvironment.	binding == nil ifTrue: [^nil].	(resolved := (Tools.MethodDefinition class: binding value class selector: aSelector) resolve) == nil ifTrue: [^nil].	^resolved method mclass</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - selecting</category><body package="Browser-SourceCodeUI">escapeDelimitersFor: anOpenDelimiter and: aCloseDelimiter		self defaultDelimiterEscaping ifNotNil: [:rules |		rules at: (Array with: anOpenDelimiter with: aCloseDelimiter) ifPresent: [:escapes | ^escapes]].	^super escapeDelimitersFor: anOpenDelimiter and: aCloseDelimiter</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>private - loading</category><body package="Browser-SourceCodeUI">load: aDocument into: aFlow between: aStart and: aStop	| defaultStyle subsection |	defaultStyle := self theme default.	subsection := aDocument copyBetween: aStart and: aStop apply: [:style | style mergeFontProperties: defaultStyle].	self isWorkspace ifTrue: [		"With the exception of when it is styled as Smalltalk, Workspace content only needs to be decorated here.		 Other users of SourceCodeEditor will be decorating on the fly when compiling."		self decorations do: [:each |			each isForWorkspace ifTrue: [				each decorate: subsection editor: self offset: 0 reason: #OnStart]]].	aFlow insert: subsection.	aFlow clearDirty</body><body package="Browser-SourceCodeUI">load: aDocument into: aFlow finish: aState	super load: aDocument into: aFlow finish: aState.	self preserveFindWhile: [		self invalidateSelectionWhile: [			self resetIdle.			self reinitializePlugins.			self doItReceiverClass == nil				ifTrue: [self compileMethod: #OnSave]				ifFalse: [self compileMethod: #OnStart]]]</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>accessing - markup</category><body package="Browser-SourceCodeUI">documentWithoutMarkup	"Return the source code without markup."		^self removeMarkupIn: document copy</body><body package="Browser-SourceCodeUI">expandSelectionToIncludeOverlappingMarkup	"Expand the current selection to include overlapped markup."		| start stop |	self hasSelection ifFalse: [^#()].	start := self selectionStartPosition.	stop := self selectionStopPosition.	self markup do: [:aSourceCodeProbe |		| insideInterval includesStart |		insideInterval := (aSourceCodeProbe first + 1) to: (aSourceCodeProbe last - 1).		includesStart := insideInterval includes: start.		(insideInterval includes: stop) ifTrue: [			"Selection inside a markup, do nothing"			includesStart ifTrue: [^self].			stop := aSourceCodeProbe last].		includesStart ifTrue: [start := aSourceCodeProbe first]].	self invalidateSelectionWhile: [		inputCursor := flow cursorAtPosition: start direction: #rightToLeft.		anchorCursor := flow cursorAtPosition: stop direction: #rightToLeft]</body><body package="Browser-SourceCodeUI">expandToIncludeTouchingMarkup	"Expand the current selection to include touching markup."		| start stop |	start := self selectionStartPosition.	stop := self selectionStopPosition.	self markup do: [:aSourceCodeProbe |		(aSourceCodeProbe includes: start) ifTrue: [start := aSourceCodeProbe first].		(aSourceCodeProbe includes: stop) ifTrue: [stop := aSourceCodeProbe last]].	self invalidateSelectionWhile: [		inputCursor := flow cursorAtPosition: start direction: #rightToLeft.		anchorCursor := flow cursorAtPosition: stop direction: #rightToLeft]</body><body package="Browser-SourceCodeUI">markup	"Returns the intervals for all markup."		^self markupIn: document</body><body package="Browser-SourceCodeUI">markupDocumentSegments	"Returns the document segments representing markup."		^(self markupIn: document) collect: [:aSourceCodeProbe |		Array			with: (self documentSegmentForMarkup: aSourceCodeProbe in: document)			with: (document copyBetween: aSourceCodeProbe first + 1 and: aSourceCodeProbe last - 1) asString]</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>private - markup</category><body package="Browser-SourceCodeUI">censorMarkup: aMarkupInterval in: aDocument	(self documentSegmentForMarkup: aMarkupInterval in: aDocument)		censor: aMarkupInterval in: aDocument</body><body package="Browser-SourceCodeUI">censorMarkupIn: aDocument	(self markupIn: aDocument) do: [:aMarkupInterval |		self censorMarkup: aMarkupInterval in: aDocument].	^aDocument</body><body package="Browser-SourceCodeUI">documentSegmentForMarkup: aMarkupInterval in: aDocument	^aDocument segmentAtPositionAfter: aMarkupInterval first ifAbsent: [self error: 'out of bounds']</body><body package="Browser-SourceCodeUI">markupIn: aDocument	"Return the markup ranges."		| anchor probes |	anchor := nil.	probes := OrderedCollection new.	aDocument offsetsAndSegmentsDo: [:offset :segment |		(segment isKindOf: Text2.DocumentMarkupOpen) ifTrue: [			anchor == nil				ifTrue: [anchor := offset]				ifFalse: [self error: 'unexpected breakpoint start inside markup']].		(segment isKindOf: Text2.DocumentMarkupClose) ifTrue: [			anchor == nil				ifTrue: ["a breakpoint end without a start, which we shall ignore"]				ifFalse: [					probes add: (Interval from: anchor to: offset + segment size).					anchor := nil]]].	anchor == nil ifFalse: [		"a breakpoint start without an end, which we shall ignore"		anchor := nil].	^probes</body><body package="Browser-SourceCodeUI">removeMarkup: aMarkupInterval in: aDocument	^(self documentSegmentForMarkup: aMarkupInterval in: aDocument)		remove: aMarkupInterval in: aDocument</body><body package="Browser-SourceCodeUI">removeMarkupIn: aDocument	(self markupIn: aDocument) reverseDo: [:aMarkupInterval |		self removeMarkup: aMarkupInterval in: aDocument].	^aDocument</body><body package="Browser-SourceCodeUI">styleMarkup: aMarkupInterval in: aDocument	| probeStyle |	probeStyle := self theme		match: (self documentSegmentForMarkup: aMarkupInterval in: aDocument) styleTag		ifAbsent: [^self].		aDocument replaceBetween: aMarkupInterval first and: aMarkupInterval last apply: [:style |		style copy			color: probeStyle color;			backgroundColor: probeStyle backgroundColor;			intern].	^aDocument</body><body package="Browser-SourceCodeUI">styleMarkupIn: aDocument	(self markupIn: aDocument) do: [:aMarkupInterval | self styleMarkup: aMarkupInterval in: aDocument].	^aDocument</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>accessing - menus</category><body package="Browser-SourceCodeUI">contextMenu	^UI.Menu new		augmentFrom: self class to: self class menuName: #contextMenu for: self;		yourself</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor class</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">defaultTheme	"Return the default theme for all SourceCodeEditors."	^defaultTheme</body><body package="Browser-SourceCodeUI">defaultTheme: aTheme	"Set the default theme for all SourceCodeEditors and update them all."	defaultTheme := aTheme.	self updateAllInstances</body><body package="Browser-SourceCodeUI">defaultThemeKey	"Return the unique selector the default theme."	^defaultTheme source selector</body><body package="Browser-SourceCodeUI">defaultThemeKey: aDefaultThemeKey	"Set the default theme by using the themes unique selector."	self defaultTheme: ((SourceCodeTheme perform: aDefaultThemeKey)				source: (MessageSend receiver: SourceCodeTheme selector: aDefaultThemeKey);				yourself).	self changed: #defaultThemeKey</body><body package="Browser-SourceCodeUI">enablement	"Return a dictionary of booleans keyed against classes."	^enablement ifNil: [enablement := Dictionary new]</body><body package="Browser-SourceCodeUI">errorsLevel	"Return the reason level at which errors should display (#OnSave, #OnIdle, #OnType)"	^ErrorsLevel</body><body package="Browser-SourceCodeUI">errorsLevel: aReason	"Set the reason level at which errors should display (#OnSave, #OnIdle, #OnType)"	ErrorsLevel := aReason</body><body package="Browser-SourceCodeUI">warningsLevel	"Return the reason level at which warnings should display (#OnSave, #OnIdle, #OnType)"	^WarningsLevel</body><body package="Browser-SourceCodeUI">warningsLevel: aReason	"Set the reason level at which warnings should display (#OnSave, #OnIdle, #OnType)"	WarningsLevel := aReason</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor class</class-id> <category>private</category><body package="Browser-SourceCodeUI">reinstallDefaultTheme	"Send when SourceCodeTheme is rebuilt with a new basis (eg: font-name, font-size, etc)"	[ | source |	source := defaultTheme source.	source == nil ifTrue: [^self].	(defaultTheme := source value)		source: source] on: Error do: [:exception | ^self].	self updateAllInstances</body><body package="Browser-SourceCodeUI">updateAllInstances	self allGeneralInstancesDo: [:each | self updateInstance: each]</body><body package="Browser-SourceCodeUI">updateInstance: anSourceCodeEditor	anSourceCodeEditor isOpen ifFalse: [^self].	[anSourceCodeEditor redecorate.	anSourceCodeEditor reinitializePlugins]		uiEventFor: ([anSourceCodeEditor topComponent]			on: Error do: [:exception | ^self])</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor class</class-id> <category>class initialization</category><body package="Browser-SourceCodeUI">initialize	"self initialize"	enablement := Dictionary new.	(defaultTheme := SourceCodeTheme default)		source: (MessageSend receiver: SourceCodeTheme selector: #default).	WarningsLevel := #OnSave.	ErrorsLevel := #OnSave.	IdleDelayMilliseconds := CursorBlinkRate * 5.	(DisplayStates := Dictionary new)		at: #OnStart put: #();		at: #OnType put: #(OnType);		at: #OnIdle put: #(OnType OnIdle);		at: #OnSave put: #(OnType OnIdle OnSave)</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor class</class-id> <category>testing</category><body package="Browser-SourceCodeUI">shouldDisplayErrors: aReason	"Returns true if aReason fits the setting of ErrorsLevel"	^(DisplayStates at: aReason ifAbsent: [^false]) includes: ErrorsLevel</body><body package="Browser-SourceCodeUI">shouldDisplayWarnings: aReason	"Returns true if aReason fits the setting of WarningsLevel"	^(DisplayStates at: aReason ifAbsent: [^false]) includes: WarningsLevel</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor class</class-id> <category>compiling</category><body package="Browser-SourceCodeUI">compilationPragmas		^compilationPragmas ifNil: [		compilationPragmas := (Pragma allNamed: #compilation: from: SourceCodeEditor to: self sortedByArgument: 1)			collect: #selector]</body><body package="Browser-SourceCodeUI">evaluationPragmas		^evaluationPragmas ifNil: [		evaluationPragmas := (Pragma allNamed: #evaluation: from: SourceCodeEditor to: self sortedByArgument: 1)			collect: #selector]</body><body package="Browser-SourceCodeUI">instanceMethodsChanged	compilationPragmas := nil.	evaluationPragmas := nil</body></methods><methods><class-id>Refactory.Browser.SourceCodeDialogModel</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">icon: anIcon style: aStyle	icon := self class perform: (anIcon, 'Icon') asSymbol.	iconBaseline := self class perform: (anIcon, 'Baseline') asSymbol.	optionsStyle := aStyle.	suboptionsStyle := optionsStyle copy		backgroundColor: optionsStyle backgroundColor asShadowColor;		intern.	options := OrderedCollection new.	suboptions := OrderedCollection new.</body><body package="Browser-SourceCodeUI">position: anObject	position := anObject</body></methods><methods><class-id>Refactory.Browser.SourceCodeDialogModel</class-id> <category>private</category><body package="Browser-SourceCodeUI">action: anAction style: aStyle	^aStyle copy		adornment: #underline;		adornmentColor: aStyle color;		cursor: #fingerPointer;		action: (DocumentActionScript new			block: anAction;			yourself);		intern</body><body package="Browser-SourceCodeUI">removeShortcuts: anOptions	^anOptions collect: [:option | Array with: option first with: nil with: option last]</body><body package="Browser-SourceCodeUI">writeIconInto: aDocument	aDocument		insert: ' ' style: optionsStyle;		insert: (Text2.DocumentImage				fromImage: icon				baseline: iconBaseline				style: optionsStyle);		insert: ' ' style: optionsStyle</body><body package="Browser-SourceCodeUI">writeLineBreakInto: aDocument	aDocument		insert: (String with: Character cr with: Character space) style: suboptionsStyle;		insert: (DocumentInlineDocument document: Document new width: icon width style: suboptionsStyle);		insert: ' ' style: suboptionsStyle</body><body package="Browser-SourceCodeUI">writeOption: aLabel action: anAction into: aDocument style: aStyle	aDocument insert: aLabel style: (self action: anAction style: aStyle)</body><body package="Browser-SourceCodeUI">writeOption: aLabel into: aDocument style: aStyle	aDocument insert: aLabel style: aStyle</body><body package="Browser-SourceCodeUI">writeOption: aLabel shortcut: aShortcutKeyCharacter action: anAction into: aDocument style: aStyle	| style shortcutStyle |	anAction == nil ifTrue: [^self writeOption: aLabel into: aDocument style: aStyle].	aLabel first = aShortcutKeyCharacter ifTrue: [^self writeOptionWithShortcut: aLabel action: anAction into: aDocument style: aStyle].	aShortcutKeyCharacter == nil ifTrue: [^self writeOption: aLabel action: anAction into: aDocument style: aStyle].		style := self action: anAction style: aStyle.	shortcutStyle := style copy		adornment: #doubleUnderline;		intern.	aDocument		insert: (String with: aShortcutKeyCharacter) style: shortcutStyle;		insert: ' ' style: aStyle;		insert: aLabel style: style.</body><body package="Browser-SourceCodeUI">writeOptionWithShortcut: aLabel action: anAction into: aDocument style: aStyle	| style shortcutStyle |	style := self action: anAction style: aStyle.	shortcutStyle := style copy		adornment: #doubleUnderline;		intern.	aDocument insert: (aLabel first: 1) style: shortcutStyle.	aDocument insert: (aLabel allButFirst: 1) style: style</body><body package="Browser-SourceCodeUI">writeOptions: anOptions into: aDocument style: aStyle	| separator |	anOptions isEmpty ifTrue: [^self].	separator := anOptions first last == nil ifTrue: [': '] ifFalse: [', '].	anOptions		do: [:option |			[:label :shortcut :action |				self					writeOption: label					shortcut: shortcut					action: action					into: aDocument					style: aStyle			] valueWithArguments: option]		separatedBy: [			aDocument insert: separator style: aStyle.			separator := ', '].	aDocument insert: ' ' style: aStyle</body></methods><methods><class-id>Refactory.Browser.SourceCodeDialogModel</class-id> <category>converting</category><body package="Browser-SourceCodeUI">asDocumentWithShortcuts	| document |	document := Text2.Document new.	self writeIconInto: document.	options isEmpty ifFalse: [self writeOptions: options into: document style: optionsStyle].	suboptions isEmpty ifFalse: [		self writeLineBreakInto: document.		self writeOptions: suboptions into: document style: suboptionsStyle].	^document</body><body package="Browser-SourceCodeUI">asDocumentWithoutShortcuts	| document |	document := Text2.Document new.	self writeIconInto: document.	options isEmpty ifFalse: [self writeOptions: (self removeShortcuts: options) into: document style: optionsStyle].	suboptions isEmpty ifFalse: [		self writeLineBreakInto: document.		self writeOptions: (self removeShortcuts: suboptions) into: document style: suboptionsStyle].	^document</body></methods><methods><class-id>Refactory.Browser.SourceCodeDialogModel</class-id> <category>configuring</category><body package="Browser-SourceCodeUI">option: description	options add: (Array with: description with: nil with: nil)</body><body package="Browser-SourceCodeUI">option: description action: aBlockClosure	options add: (Array with: description with: nil with: aBlockClosure)</body><body package="Browser-SourceCodeUI">option: description shortcut: shortcutKeyCharacter action: aBlockClosure	options add: (Array with: description with: shortcutKeyCharacter with: aBlockClosure)</body><body package="Browser-SourceCodeUI">suboption: description	suboptions add: (Array with: description with: nil with: nil)</body><body package="Browser-SourceCodeUI">suboption: description action: aBlockClosure	suboptions add: (Array with: description with: nil with: aBlockClosure)</body><body package="Browser-SourceCodeUI">suboption: description shortcut: shortcutKeyCharacter action: aBlockClosure	suboptions add: (Array with: description with: shortcutKeyCharacter with: aBlockClosure)</body></methods><methods><class-id>Refactory.Browser.SourceCodeDialogModel</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">position	^position</body></methods><methods><class-id>Refactory.Browser.SourceCodeDialogModel</class-id> <category>enumerating</category><body package="Browser-SourceCodeUI">shortcutsAndActionsDo: aBlockClosure	options do: [:option |		[:label :shortcut :action |			shortcut == nil ifFalse: [aBlockClosure value: shortcut value: action]		] valueWithArguments: option].	suboptions do: [:option |		[:label :shortcut :action |			shortcut == nil ifFalse: [aBlockClosure value: shortcut value: action]		] valueWithArguments: option]</body></methods><methods><class-id>Refactory.Browser.SourceCodeDialogModel class</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">errorBaseline	^11</body><body package="Browser-SourceCodeUI">errorIcon	^AlphaCompositedImage image: ((Image extent: 12@12 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???1&lt;@&lt;/?O@OK?20C2?1&lt;@&lt;/&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????E@C2?=,@&lt;/??@OK??0C2?=,@&lt;/&lt;R@OK?@O???0C???&lt;@????@O???0C???&lt;@????,PC2??&lt;@&lt;/??@@@@?0@@@O&lt;@&lt;/&gt;0@OK?@O???0C???&lt;@????@O???0C???=W@OK??0C2??&lt;@&lt;/??@@@@?0@@@O&lt;@&lt;/??@OK?U C2?0C???&lt;@????@O???0P@&lt;/?Y@OK??0C2??&lt;@&lt;/??@@@@?0@@@O&lt;@&lt;/??@OK?6@C2?0L@&lt;/&lt;@????@O???58@&lt;/??@OK??0C2??&lt;@&lt;/??@@@@?0@@@O&lt;@&lt;/??@OK??0C2?50@&lt;/&lt;@????@O???= @&lt;/??@OK??0C2??&lt;@&lt;/??@@@@?0@@@O&lt;@&lt;/??@OK??0C2?=X@&lt;/&lt;@????L@C2??&lt;@&lt;/??@OK??0C2??&lt;@&lt;/??@OK??0C2??&lt;@&lt;/??@OK??0C2??&lt;@&lt;/&lt;0@OK?Y C2??&lt;@&lt;/??@OK??0C2??&lt;@&lt;/??@@@@?0@@@O&lt;@&lt;/??@OK??0C2??&lt;@&lt;/=&amp;@OK?U@C2??&lt;@&lt;/??@OK??0C2??&lt;@&lt;/??@@@@?0@@@O&lt;@&lt;/??@OK??0C2??&lt;@&lt;/=T@OK?@O???3,@&lt;/&gt;.@OK?&gt;@C2??&lt;@&lt;/??@OK??0C2??&lt;@&lt;/?5@OK?''PC2?3T@&lt;/&lt;@????@O???0C???&lt;@????DPC2?48@&lt;/=0@OK?[ C2?4,@&lt;/&lt;N@OK?@O???0C???&lt;@????')))</body><body package="Browser-SourceCodeUI">warningBaseline	^12</body><body package="Browser-SourceCodeUI">warningIcon	^AlphaCompositedImage image: ((Image extent: 14@14 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???00@??=P@O??\PC??7D@??=M@O??B C??0C???&lt;@????@O???0C???&lt;@????@O???0H@??=6@O??&lt;@C???&lt;@????@O???0C???&lt;@???/@O??\PC??0H@??&lt;@????@O???0C???&lt;A@O??( C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O??(0C??0D@??&lt;@????@O???7H@????@O???0C???&lt;@;.;?@@@@?0@@@O&lt;@@@C?@CL3?0B**/&lt;@????@O??]PC??0C???&lt;I@O??; C???&lt;@????@O???0C???&lt;@????@O???0C.;/&lt;@H"K?@BH"?0C???&lt;@???0@O??BPC??40@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0@"H/&lt;@L3O?@O???0C???&lt;@??=L@O??\ C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@"H#?@BH"?0C]7_&lt;@????@O???0C??7H@??=2@O???0C???&lt;@????@O???0C???&lt;@????@I&amp;Y?0@@@O&lt;@3L3?@O???0C???&lt;@????@O??\ C??40@????@O???0C???&lt;@????@O???0C???&lt;@L3O?@ADQ?0C???&lt;@????@O???0C???&lt;@??=N@O??BPC??&gt;8@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O??&lt;@C??0$@??&lt;@????\ C???&lt;@????@O???0C???&lt;@????@CL3?0@QD_&lt;@????@O???0C???&lt;@??=5@O??@O???0C???&lt;A@O??(0C???&lt;@????@O???0C???&lt;@@@C?@@@@?0C???&lt;@????@O??)PC??0D@??&lt;@????@O???0C???&lt;B@O??] C???D@????@O???0C???&lt;@????@O??;0C??7D@??&lt;B@O??@O???0C???&lt;@????@O???0C???&lt;@????C@C??5@@??=1@O??\PC??44@??&lt;J@O??@O???0C???&lt;@????@O???0@a')))</body></methods><methods><class-id>Refactory.Browser.SourceCodeDialogModel class</class-id> <category>instance creation</category><body package="Browser-SourceCodeUI">icon: anIcon style: aStyle	^self new icon: anIcon style: aStyle</body></methods><methods><class-id>Refactory.Browser.BrowserSharedVariableTool</class-id> <category>tab management</category><body package="Browser-SourceCodeUI">isActive	^codeModel sharedVariableName notNil		or: [codeModel isData and: [codeModel protocol notNil]]</body><body package="Browser-SourceCodeUI">tabIcon	^self binding value ifNotNil: [:object | object class safeToolListIcon]</body><body package="Browser-SourceCodeUI">tabName	^#BrowserSourceCodeToolName &lt;&lt; #browser &gt;&gt; 'Source'</body></methods><methods><class-id>Refactory.Browser.BrowserSharedVariableTool</class-id> <category>updating</category><body package="Browser-SourceCodeUI">binding	| binding name |	(binding := self selectedBinding) ifNil: [^nil].	name := self sharedVariableName.	^name notNil ifTrue: [binding value bindingFor: name] ifFalse: [nil]</body><body package="Browser-SourceCodeUI">defaultTemplate	^self template</body><body package="Browser-SourceCodeUI">nameSpace	| binding |	(binding := self selectedBinding) ifNil: [^Smalltalk].	^binding isForGeneral 		ifTrue: [self objectName asQualifiedReference environment]		ifFalse: [binding value]</body><body package="Browser-SourceCodeUI">template	^self sharedVariableTemplateFor: self nameSpace</body></methods><methods><class-id>Refactory.Browser.BrowserSharedVariableTool</class-id> <category>private</category><body package="Browser-SourceCodeUI">objectPackage	^self package</body></methods><methods><class-id>Refactory.Browser.SourceCodeSearch</class-id> <category>private - find / replace</category><body package="Browser-SourceCodeUI">find: aString	| found eachView |	found := OrderedCollection new.	((aString occurrencesOf: $:) &gt; 1 and: [(aString occurrencesOf: $ ) == 0])		ifTrue: 			["Search the parse tree for senders of aString, if there is a parse tree to search"			eachView := view firstInCompound.			[eachView notNil] whileTrue: 					[| symbol |					symbol := aString asSymbol.					((eachView respondsTo: #parseTree) and: [eachView parseTree]) notNil						ifTrue: 							[eachView parseTree nodesDo: 									[:each |									(each isMessage or: [each isTagNode])										ifTrue: 											[(each isKeyword and: [each selector = symbol])												ifTrue: [found add: eachView -&gt; (each start - 1 to: each stop)]]]].					eachView := eachView successor]].	^found , (super find: aString)		sort: [:a :b | a value first &lt;= b value first]</body></methods><methods><class-id>Refactory.Browser.SyntaxHighlightDecoration</class-id> <category>visitor-double dispatching</category><body package="Browser-SourceCodeUI">acceptAssignmentNode: anAssignmentNode	super acceptAssignmentNode: anAssignmentNode.	anAssignmentNode hasErrors ifTrue: [^self].	self		apply: #(punctuation assignment smalltalk)		between: anAssignmentNode assignmentPosition - 1		and: anAssignmentNode assignmentPosition + 1</body><body package="Browser-SourceCodeUI">acceptBlockArgument: aVariableNode	self acceptVariableDeclarationNode: aVariableNode.	aVariableNode hasErrors ifTrue: [^self].	self apply: #(punctuation definition parameters) between: aVariableNode start - 2 and: aVariableNode start - 1</body><body package="Browser-SourceCodeUI">acceptBlockArguments: aBlockNode	aBlockNode arguments isEmpty ifTrue: [^self].	aBlockNode hasErrors ifFalse: [		aBlockNode bar isNil ifFalse: [			self apply: #(punctuation definition parameters) between: aBlockNode bar - 1 and: aBlockNode bar]].	aBlockNode arguments do: [:each | self acceptBlockArgument: each]</body><body package="Browser-SourceCodeUI">acceptBlockNode: aBlockNode	| style |	aBlockNode hasErrors ifFalse: [		style := Array with: #punctuation with: #brackets with: ('depth', depth printString) asSymbol with: #smalltalk.		self apply: style between: aBlockNode left - 1 and: aBlockNode left.		self apply: style between: aBlockNode right - 1 and: aBlockNode right].	self scopeIn: (aBlockNode arguments collect: #name) into: blockVariables do: [		self acceptBlockArguments: aBlockNode.		depth := depth + 1.		self visitNode: aBlockNode body.		depth := depth - 1]</body><body package="Browser-SourceCodeUI">acceptCascadeNode: aCascadeNode	super acceptCascadeNode: aCascadeNode.	aCascadeNode hasErrors ifTrue: [^self].	aCascadeNode messages isEmpty ifTrue: [^self].	aCascadeNode semicolons do: [:each |		self apply: #(punctuation cascade smalltalk) between: each - 1 and: each]</body><body package="Browser-SourceCodeUI">acceptCommentNode: aCommentNode	self apply: #(punctuation definition comment) between: aCommentNode first - 1 and: aCommentNode first.	self apply: #(punctuation definition comment) between: aCommentNode last - 1 and: aCommentNode last.	self apply: #(comment) between: aCommentNode first  and: aCommentNode last - 1</body><body package="Browser-SourceCodeUI">acceptLiteralArrayNode: aRBLiteralArrayNode	super acceptLiteralArrayNode: aRBLiteralArrayNode.	aRBLiteralArrayNode hasErrors ifTrue: [^self].	(aRBLiteralArrayNode start + decoratingOffset &gt; 0 and: [(document at: aRBLiteralArrayNode start + decoratingOffset) = $#])		ifTrue: [self apply: #(punctuation definition array smalltalk) between: aRBLiteralArrayNode start - 1 and: aRBLiteralArrayNode start + 1]		ifFalse: [self apply: #(punctuation definition array smalltalk) between: aRBLiteralArrayNode start - 1 and: aRBLiteralArrayNode start].	self apply: #(punctuation definition array smalltalk) between: aRBLiteralArrayNode stop - 1 and: aRBLiteralArrayNode stop</body><body package="Browser-SourceCodeUI">acceptLiteralBindingReference: aLiteralNode	self apply: #(entity name class) on: aLiteralNode.	self apply: #(punctuation definition entity) between: aLiteralNode start -1 and: aLiteralNode start + 1.	self apply: #(punctuation definition entity) between: aLiteralNode stop -1 and: aLiteralNode stop</body><body package="Browser-SourceCodeUI">acceptLiteralCharacter: aLiteralNode	self apply: #(constant character smalltalk) on: aLiteralNode</body><body package="Browser-SourceCodeUI">acceptLiteralFalse: aLiteralNode	self apply: #(constant language false smalltalk) on: aLiteralNode</body><body package="Browser-SourceCodeUI">acceptLiteralNil: aLiteralNode	self apply: #(constant language nil smalltalk) on: aLiteralNode</body><body package="Browser-SourceCodeUI">acceptLiteralNode: aLiteralNode	aLiteralNode hasErrors ifTrue: [^self].	aLiteralNode value == nil ifTrue: [^self acceptLiteralNil: aLiteralNode].	aLiteralNode value == true ifTrue: [^self acceptLiteralTrue: aLiteralNode].	aLiteralNode value == false ifTrue: [^self acceptLiteralFalse: aLiteralNode].	aLiteralNode value isBindingReference ifTrue: [^self acceptLiteralBindingReference: aLiteralNode].	aLiteralNode value class == Character ifTrue: [^self acceptLiteralCharacter: aLiteralNode].	(aLiteralNode value isKindOf: Number) ifTrue: [^self acceptLiteralNumber: aLiteralNode].	aLiteralNode value isSymbol ifTrue: [^self acceptLiteralSymbol: aLiteralNode].	self acceptLiteralString: aLiteralNode</body><body package="Browser-SourceCodeUI">acceptLiteralNumber: aLiteralNode	self apply: #(constant numeric smalltalk) on: aLiteralNode</body><body package="Browser-SourceCodeUI">acceptLiteralString: aLiteralNode		self apply: #(string) on: aLiteralNode.	self apply: #(punctuation definition string) between: aLiteralNode start -1 and: aLiteralNode start.	self apply: #(punctuation definition string) between: aLiteralNode stop -1 and: aLiteralNode stop</body><body package="Browser-SourceCodeUI">acceptLiteralSymbol: aLiteralNode	self apply: #(constant symbol smalltalk) on: aLiteralNode</body><body package="Browser-SourceCodeUI">acceptLiteralTrue: aLiteralNode	self apply: #(constant language true smalltalk) on: aLiteralNode</body><body package="Browser-SourceCodeUI">acceptMessageNode: aMessageNode	| style |	aMessageNode hasErrors ifFalse: [		aMessageNode hasParentheses ifTrue: [			(aMessageNode isCascaded not or: [aMessageNode isFirstCascaded]) ifTrue: [				style := Array with: #punctuation with: #brackets with: ('depth', depth printString) asSymbol with: #smalltalk.				aMessageNode parentheses do: [:each |					self apply: style between: each first - 1 and: each first.					self apply: style between: each last - 1 and: each last]]].		style := #(keyword).		aMessageNode isBinary ifTrue: [style := #(keyword other binaryMethod smalltalk)].		(KeywordOperators includes: aMessageNode selector) ifTrue: [style := #(keyword operator)].		(KeywordControls includes: aMessageNode selector) ifTrue: [style := #(keyword control)].		(self isValidMessageSend: aMessageNode) ifFalse: [style := #(keyword missing)].		aMessageNode selectorParts do: [:part | self apply: style on: part]].	depth := depth + 1.	super acceptMessageNode: aMessageNode.	depth := depth - 1</body><body package="Browser-SourceCodeUI">acceptMethodNode: aMethodNode	| stop |	methodSelector := aMethodNode selector.	aMethodNode hasErrors ifFalse: [		stop := aMethodNode selectorParts last stop.		aMethodNode arguments isEmpty ifFalse: [			stop := stop max: aMethodNode arguments last stop].		self apply: #(entity name function smalltalk) between: 0 and: stop].	self scopeIn: (aMethodNode arguments collect: #name) into: methodVariables do: [		aMethodNode arguments do: [:each | self acceptVariableDeclarationNode: each].		aMethodNode tagsDo: [:each | self visitNode: each].		self visitNode: aMethodNode body]</body><body package="Browser-SourceCodeUI">acceptReturnNode: aReturnNode	aReturnNode hasErrors ifFalse: [		self apply: #(keyword return smalltalk) between: aReturnNode start - 1 and: aReturnNode start].	super acceptReturnNode: aReturnNode</body><body package="Browser-SourceCodeUI">acceptSequenceNode: aSequenceNode	self scopeIn: (aSequenceNode temporaries collect: #name) into: temporaryVariables do: [		self acceptTemporaries: aSequenceNode.		aSequenceNode statements do: [:each | self visitNode: each]].	aSequenceNode hasErrors ifTrue: [^self].	aSequenceNode statements isEmpty ifTrue: [^self].	aSequenceNode periods do: [:each | self apply: #(punctuation endOfStatement smalltalk) between: each - 1 and: each]</body><body package="Browser-SourceCodeUI">acceptTagNode: aTagNode	aTagNode hasErrors ifFalse: [		self apply: #(entity name tag) on: aTagNode.		targetClass == nil ifFalse: [			(((targetClass isMeta ifTrue: [targetClass soleInstance] ifFalse: [targetClass]) recognizedMethodPragmas: (targetClass isMeta ifTrue: [#class] ifFalse: [#instance]))				includes: aTagNode selector) ifFalse: [					super acceptTagNode: aTagNode.					aTagNode selectorParts do: [:each |						self apply: #(invalid illegal unknownPragma) on: each].						^self applyWarning: (#UnknownPragma &lt;&lt; #dialogs &gt;&gt; 'Unknown Pragma') expandMacros at: aTagNode start + 1]]].	super acceptTagNode: aTagNode</body><body package="Browser-SourceCodeUI">acceptTemporaries: aSequenceNode	aSequenceNode temporaries isEmpty ifTrue: [^self].	aSequenceNode temporaries do: [:each |		self acceptVariableDeclarationNode: each.		each comments do: [:temporaryComment | self acceptCommentNode: temporaryComment]].	aSequenceNode hasErrors ifTrue: [^self].	self apply: #(punctuation definition parameters smalltalk) between: aSequenceNode leftBar - 1 and: aSequenceNode leftBar.	self apply: #(punctuation definition parameters smalltalk) between: aSequenceNode rightBar - 1and: aSequenceNode rightBar</body><body package="Browser-SourceCodeUI">acceptVariableDeclarationNode: aVariableNode	| style |	aVariableNode hasErrors ifTrue: [^self].	style := nil.	(methodVariables includes: aVariableNode name) ifTrue: [style := #(variable parameter function smalltalk)].	(style == nil and: [blockVariables includes: aVariableNode name]) ifTrue: [style := #(variable parameter block smalltalk)].	(style == nil and: [temporaryVariables includes: aVariableNode name]) ifTrue: [style := #(variable parameter temporary smalltalk)].	style == nil ifTrue: [style := #(variable parameter instance smalltalk)].	(redefinedVariables occurrencesOf: aVariableNode name) &gt; 1 ifTrue: [style := #(invalid illegal repeatedDefinition)].	self apply: style on: aVariableNode</body><body package="Browser-SourceCodeUI">acceptVariableNode: aVariableNode	| style binding |	aVariableNode hasErrors ifTrue: [^self].	style := nil.	(methodVariables includes: aVariableNode name) ifTrue: [style := #(variable function smalltalk)].	(style == nil and: [blockVariables includes: aVariableNode name]) ifTrue: [style := #(variable block smalltalk)].	(style == nil and: [temporaryVariables includes: aVariableNode name]) ifTrue: [style := #(variable temporary smalltalk)].	aVariableNode isSelf ifTrue: [style := #(variable language self smalltalk)].	aVariableNode isSuper ifTrue: [style := #(variable language super smalltalk)].	aVariableNode name = 'thisContext' ifTrue: [style := #(variable language thisContext smalltalk)].	targetClass ~~ nil ifTrue: [		(style == nil and: [targetClass allInstVarNames includes: aVariableNode name]) ifTrue: [style := #(variable instance smalltalk)].		style == nil ifTrue: [			binding := SystemUtils				resolveBindingAsReference: aVariableNode name				inClass: targetClass				inEnvironment: environment.			binding == nil ifFalse: [				style := #(entity name class smalltalk).				self apply: style on: aVariableNode.				^self applyHover: (self usefulVariableBindingString: binding) on: aVariableNode]]].	style == nil ifTrue: [ 		style := reason = #OnStart			ifTrue: [#(variable)]			ifFalse: [#(invalid illegal undeclaredVariable)]].	(redefinedVariables occurrencesOf: aVariableNode name) &gt; 1 ifTrue: [style := #(invalid illegal repeatedDefinition)].	self apply: style on: aVariableNode</body><body package="Browser-SourceCodeUI">isValidMessageSend: aMessageNode	| receiver receiverClass |	receiver := aMessageNode receiver.	(receiver isKindOf: RBLiteralNode) ifTrue: [		(receiver value isKindOf: Behavior) ifTrue: [receiverClass := receiver value].		(receiver value isKindOf: BindingReference) ifTrue: [receiverClass := BindingReference].		receiverClass == nil ifTrue: [receiverClass := receiver value class]].		receiver class == RBVariableNode ifTrue: [		targetClass == nil ifTrue: [^true].		receiver isSelf ifTrue: [			methodSelector = aMessageNode selector ifTrue: [^true].			receiverClass := targetClass].		receiver isSuper ifTrue: [receiverClass := targetClass superclass].		receiverClass == nil ifTrue: [			| binding |			binding := SystemUtils				resolveBindingAsReference: receiver name				inClass: targetClass				inEnvironment: environment.			binding == nil ifFalse: [receiverClass := binding value class]]].	receiverClass == nil ifTrue: [		^SourceCodeDatabase default implementorsIndex includesKey: aMessageNode selector].	^receiverClass canUnderstand: aMessageNode selector</body></methods><methods><class-id>Refactory.Browser.SyntaxHighlightDecoration</class-id> <category>private</category><body package="Browser-SourceCodeUI">apply: aStyle between: start and: stop	| themeStyle |	theme == nil ifTrue: [^self].	(start between: 0 and: document size) ifFalse: [^self].	(stop between: 0 and: document size) ifFalse: [^self].	start &gt;= stop ifTrue: [^self].	themeStyle := theme match: aStyle ifAbsent: [^self].	document replaceBetween: start + decoratingOffset and: stop + decoratingOffset apply: [:style | themeStyle]</body><body package="Browser-SourceCodeUI">apply: aStyle on: aNode	| start stop |	"Some nodes stop position is dependent on its subnodes which may contain errors and therefore not have a token position in the source stream."	[start := aNode start - 1.	stop := aNode stop] on: Error do: [:exception | ^self].	self apply: aStyle between: start and: stop</body><body package="Browser-SourceCodeUI">applyHover: aHoverMessage on: aNode	| start stop |	aNode name = aHoverMessage ifTrue: [^self].	aNode name size &gt; aHoverMessage size ifTrue: [^self].		"Some nodes stop position is dependent on its subnodes which may contain errors and therefore not have a token position in the source stream."	[start := aNode start - 1.	stop := aNode stop] on: Error do: [:exception | ^self].	(start between: 0 and: document size) ifFalse: [^self].	(stop between: 0 and: document size) ifFalse: [^self].	start &gt;= stop ifTrue: [^self].	document replaceBetween: start + decoratingOffset and: stop + decoratingOffset apply: [:style | style copy hover: aHoverMessage; yourself]</body><body package="Browser-SourceCodeUI">applyWarning: message at: aPosition	| doc position warningStyle illegalStyle |	(SourceCodeEditor shouldDisplayWarnings: reason) ifFalse: [^self].		warningStyle := theme match: #(invalid warning).	illegalStyle := theme match: #(invalid illegal).		(doc := Text2.Document new)		insertAt: doc size with: ' ' style: warningStyle;		insertAt: doc size with:			(Text2.DocumentImage				fromImage: SourceCodeDialogModel warningIcon				baseline: SourceCodeDialogModel warningBaseline				style: warningStyle);		insertAt: doc size with: ' ' style: warningStyle;		insertAt: doc size with: message style: warningStyle;		insertAt: doc size with: ' ' style: warningStyle.	position := aPosition + decoratingOffset.	position := position &gt;= document size ifTrue: [document size - 1] ifFalse: [aPosition].	position &lt; 0 ifTrue: [^self].	document replaceBetween: position and: position + 1 apply: [		illegalStyle copy			annotationStyle: #dodge;			annotation: doc;			yourself].</body><body package="Browser-SourceCodeUI">scopeIn: variableNames into: aVariableScope do: aBlockClosure	redefinedVariables addAll: variableNames.	aVariableScope addAll: variableNames.	aBlockClosure ensure: [		aVariableScope removeAll: variableNames.		redefinedVariables removeAll: variableNames]</body><body package="Browser-SourceCodeUI">usefulVariableBindingString: aVariableBinding	| displayString home |	displayString := aVariableBinding key asString.	home := aVariableBinding environment.	home == nil ifTrue: [^nil].	[home == Smalltalk or: [home == Root or: [home == nil]]] whileFalse: [		home name == nil ifTrue: [^displayString].		displayString := home name, '.', displayString.		home := home environment].	^displayString</body></methods><methods><class-id>Refactory.Browser.SyntaxHighlightDecoration</class-id> <category>visiting</category><body package="Browser-SourceCodeUI">visitComments: aNode	aNode comments do: [:each | self acceptCommentNode: each]</body><body package="Browser-SourceCodeUI">visitNode: aNode	super visitNode: aNode.	self visitComments: aNode</body></methods><methods><class-id>Refactory.Browser.SyntaxHighlightDecoration</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">initialize: aDocument editor: aSourceCodeEditor offset: aDecoratingOffset reason: aReason	super initialize.	document := aDocument.	theme := aSourceCodeEditor theme.	targetClass := aSourceCodeEditor doItReceiverClass.	environment := aSourceCodeEditor doItEnvironment.	decoratingOffset := aDecoratingOffset.	reason := aReason.	depth := 0.	methodVariables := Bag new.	blockVariables := Bag new.	redefinedVariables := Bag new.	temporaryVariables := Bag new.	aSourceCodeEditor doItEnvironment bindingsDo: [:binding |		binding isForGeneral ifTrue: [			(SystemUtils				resolveBindingForReference: (BindingReference simpleName: binding key)				inClass: targetClass				inEnvironment: environment) notNil ifTrue: [temporaryVariables add: binding key asString]]].	(targetClass notNil and: [targetClass inheritsFrom: ExternalInterface]) ifTrue: [temporaryVariables add: '_errorCode']</body></methods><methods><class-id>Refactory.Browser.SyntaxHighlightDecoration</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">document	^document</body><body package="Browser-SourceCodeUI">document: anObject	document := anObject</body></methods><methods><class-id>Refactory.Browser.SyntaxHighlightDecoration class</class-id> <category>instance creation</category><body package="Browser-SourceCodeUI">decorate: aDocument parseTree: aParseTree editor: aSourceCodeEditor offset: decoratingOffset reason: aReason	^(self new initialize: aDocument editor: aSourceCodeEditor offset: decoratingOffset reason: aReason)		visitNode: aParseTree;		yourself</body></methods><methods><class-id>Refactory.Browser.SyntaxHighlightDecoration class</class-id> <category>class initialization</category><body package="Browser-SourceCodeUI">initialize	"self initialize"	KeywordControls := #(or: and: | &amp; xor: not == ~= = ~~).	KeywordOperators := #(ifTrue: ifFalse: ifTrue:ifFalse: ifFalse:ifTrue: ifNil: ifNotNil: ifNil:ifNotNil: ifNotNil:ifNil: whileTrue: whileFalse: timesRepeat: whileTrue whileFalse repeat fork newProcess on:do: do: select: reject: collect: inject:into: ,)</body></methods><methods><class-id>Refactory.Browser.SyntaxHighlightDecoration class</class-id> <category>testing</category><body package="Browser-SourceCodeUI">isForWorkspace	^false</body></methods><methods><class-id>Refactory.Browser.UrlDetector</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">initialize: aCharactersArray	unicodeProperties := Text2.UnicodeProperties default.	characters := aCharactersArray.	position := 1.	links := OrderedCollection new</body><body package="Browser-SourceCodeUI">initialize: aDocument from: start to: stop	unicodeProperties := aDocument unicodeProperties.	characters := Subsequence sequence: aDocument from: start to: stop.	position := 1.	links := OrderedCollection new</body></methods><methods><class-id>Refactory.Browser.UrlDetector</class-id> <category>api</category><body package="Browser-SourceCodeUI">detect	"Detect all sequences of characters that appear to be a URL."	| next |	characters size &gt; (DomainSearchThreshold * 10) ifTrue: [^links].	[		next := self protocol.		next = position ifTrue: [next := self www].		next = position ifTrue: [next := self domain].		position := next + 1.		position &gt; characters size	] whileFalse.	^links</body></methods><methods><class-id>Refactory.Browser.UrlDetector</class-id> <category>parsing</category><body package="Browser-SourceCodeUI">domain	"Detect all sequences of characters that might be a URL if it were a domain name without a protocol prefix."	| character base dot slash suffixes |	characters size &gt; DomainSearchThreshold ifTrue: [^position].	suffixes := CommonDomainSuffixes.	dot := false.	slash := false.	base := position.	[position &lt;= characters size] whileTrue: [		character := characters at: position.		character = $. ifTrue: [dot := true].		character = $/ ifTrue: [slash := true].		(character = $/ and: [dot]) ifTrue: [			base = position ifTrue: [^position].			position := self path.			links add: (base to: position).			^position].		(character isAlphaNumeric or: ['.-/' includes: character]) ifFalse: [			position = base ifFalse: [position := position - 1].			suffixes do: [:suffix |				((position - suffix size + 1) &gt;= base and: [					self caseInsensitiveSubstringMatch: suffix startingAt: position - suffix size + 1])					ifTrue: [						links add: (base to: position).						^position]].			^position].		position := position + 1].	slash ifFalse: [		suffixes do: [:suffix |			(self caseInsensitiveSubstringMatch: suffix startingAt: characters size - suffix size + 1) ifTrue: [				links add: (base to: characters size).				^characters size]]].	^characters size</body><body package="Browser-SourceCodeUI">path	"Detect all sequences of characters that appear to be the path section of a URL."	| index character count base depth rewind pastHost |	"initialize depth"	depth := Dictionary new.	unicodeProperties openDelimiters do: [:each | depth at: each put: 0].	"1..3 forward slashes"	index := position + 1.	count := 0.	[index &lt;= characters size and: [count &lt; 3 and: [(characters at: index) = $/]]] whileTrue: [		index := index + 1.		count := count + 1].	(index &lt;= characters size and: [(characters at: index) = $#]) ifTrue: [^position].	"Some sort of pathing sequence"	base := index.	rewind := 1.	pastHost := false.	[index &lt;= characters size] whileTrue: [		character := characters at: index.		character isSeparator ifTrue: [			index = base ifTrue: [^position].			^index - rewind].		('`;:''"&lt;' includes: character) ifTrue: [			index = base ifTrue: [^position].			^index - rewind].		(unicodeProperties openDelimiters includes: character) ifTrue: [			depth at: character put: (depth at: character) + 1].		(unicodeProperties closeDelimiters includes: character) ifTrue: [			| delimeterIndex open |			delimeterIndex := unicodeProperties nestingDelimiters indexOf: character.			open := unicodeProperties nestingDelimiters at: delimeterIndex - 1.			depth at: open put: (depth at: open) - 1.			(depth at: open) &lt; 0 ifTrue: [				index = base ifTrue: [^position].				^index - rewind]].		rewind := (pastHost not and: [character = $.]) ifTrue: [2] ifFalse: [1].		character = $/ ifTrue: [pastHost := true].		index := index + 1].	^characters size</body><body package="Browser-SourceCodeUI">protocol	"Detect all sequences of characters that appear to be a URL with a protocol."	| scheme path |	(characters at: position) = $: ifFalse: [^position].	(scheme := self scheme) = position ifTrue: [^position].	(KnownProtocols anySatisfy: [:protocol |		(scheme + protocol size) &lt;= position and: [			self caseInsensitiveSubstringMatch: protocol startingAt: scheme]])		ifFalse: [^position].		(path := self path) = position ifTrue: [^position].	links add: (scheme to: path).	^path</body><body package="Browser-SourceCodeUI">scheme	"Detect all sequences of characters backward from a colon that might comprise of a URL protocol scheme."	| index character |	index := position - 1.	[index &lt; 1] whileFalse: [		character := characters at: index.		(character isAlphabetic or: ['+-.' includes: character]) ifFalse: [			^index + 1].		index := index - 1].	^1</body><body package="Browser-SourceCodeUI">www	"Detect all sequences of characters that might be a URL if it is a domain name that starts with a common prefix such as www. or www1. or www999. ..."	| index count base path |	characters size &gt; DomainSearchThreshold ifTrue: [^position].	((self caseInsensitiveSubstringMatch: 'www' startingAt: position) or: [		self caseInsensitiveSubstringMatch: 'ftp' startingAt: position])			ifFalse: [^position].	index := position + 3.	count := 0.	[index &lt;= characters size and: [count &lt; 3 and: [(characters at: index) isDigit]]] whileTrue: [		index := index + 1.		count := count + 1].		index = characters size ifTrue: [^index].	(characters at: index) = $. ifFalse: [^index].		base := position.	position := index.	(path := self path) = position ifTrue: [^position].	links add: (base to: path).	^path</body></methods><methods><class-id>Refactory.Browser.UrlDetector</class-id> <category>private</category><body package="Browser-SourceCodeUI">caseInsensitiveSubstringMatch: aString startingAt: anIndex	| i |	i := anIndex - 1.	i &lt; 0 ifTrue: [^false].	aString do: [:each |		(i := i + 1) &gt; characters size ifTrue: [^false].		each = (characters at: i) asLowercase ifFalse: [^false]].	^true</body></methods><methods><class-id>Refactory.Browser.UrlDetector class</class-id> <category>class initialization</category><body package="Browser-SourceCodeUI">initialize	"self initialize"	DomainSearchThreshold := 2000.	KnownProtocols := #('aaa' 'aaas' 'about' 'acap' 'acct' 'afp' 'afs' 'attachment' 'beshare' 'bitcoin' 'callto' 'cap' 'chrome' 'chrome-extension' 'cid' 'coap' 'coaps' 'content' 'cvs' 'data' 'dav' 'dict' 'dns' 'facetime' 'fax' 'feed' 'file' 'finger' 'fish' 'ftp' 'geo' 'git' 'go' 'gopher' 'gtalk' 'h232' 'hcp' 'http' 'https' 'iax' 'icap' 'im' 'imap' 'info' 'ipp' 'irc' 'irc6' 'ircs' 'iris' 'jabber' 'itms' 'jar' 'jms' 'keyparc' 'ldap' 'ldaps' 'magnet' 'mailserver' 'mailto' 'maps' 'message' 'mid' 'mms' 'ms-help' 'msnim' 'msrp' 'msrps' 'mtqp' 'mumble' 'mupdate' 'mvn' 'news' 'nfs' 'nntp' 'notes' 'pkcs11' 'platform' 'pop' 'pres' 'proxy' 'psyc' 'query' 'reload' 'res' 'resource' 'rmi' 'rsync' 'rtmp' 'rtsp' 'session' 'service' 'sftp' 'shttp' 'sieve' 'sip' 'sips' 'skype' 'smb' 'sms' 'snews' 'snmp' 'ssh' 'stun' 'stuns' 'svn' 'tag' 'tel' 'telnet' 'tftp' 'things' 'thismessage' 'tn3270' 'tip' 'turn' 'turns' 'udp' 'urn' 'view-source' 'wais' 'webcal' 'ws' 'wss' 'wtai' 'wyciwyg' 'xmpp' 'xri').	CommonDomainSuffixes := #('.com' '.org' '.net' '.ws' '.info').</body></methods><methods><class-id>Refactory.Browser.UrlDetector class</class-id> <category>instance creation</category><body package="Browser-SourceCodeUI">detect: aCharactersArray	"Detect all sequences of characters in aCharactersArray that appear to be a URL."		^self new		initialize: aCharactersArray;		detect</body><body package="Browser-SourceCodeUI">detect: aDocument from: start to: stop	"Detect all sequences of characters in aDocument from start..stop that appear to be a URL."		^self new		initialize: aDocument from: start to: stop;		detect</body></methods><methods><class-id>Refactory.Browser.SourceCodeDatabase</class-id> <category>changes - pundles</category><body package="Browser-SourceCodeUI">loadPundle: aPundle		| pundle |	pundle := Store.Registry packageNamed: aPundle name.	pundle == nil ifTrue: [^self].	pundle classModelsDo: [:model |		| behavior |		behavior := model actual.		(model selectorsMeta: false) do: [:selector | self addSelector: selector class: behavior].		(model selectorsMeta: true) do: [:selector | self addSelector: selector class: behavior class]]</body><body package="Browser-SourceCodeUI">unloadPundle: aPundle		self cleanup</body></methods><methods><class-id>Refactory.Browser.SourceCodeDatabase</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">cleanup		self cleanupBehaviorsIndex: implementorsIndex</body><body package="Browser-SourceCodeUI">cleanupBehaviorsIndex: anIndex	"Because some unload mechanisms do not report all the changes to the ChangeSet correctly, run through our database and remove invalid references."	| trim |	trim := OrderedCollection new.	anIndex keysAndValuesDo: [:selector :behaviors |		| cleanup |		cleanup := behaviors select: [:behavior |			behavior isObsolete or: [				behavior == Undeclared or: [					(behavior includesSelector: selector) not]]].		cleanup isEmpty ifFalse: [			behaviors removeAll: cleanup asSet.			behaviors isEmpty ifTrue: [trim add: selector]]].	trim do: [:each | anIndex removeKey: each]</body><body package="Browser-SourceCodeUI">initialize		implementorsIndex := IdentityDictionary new</body><body package="Browser-SourceCodeUI">update		SystemUtils allClassesDo: [:behavior |		behavior selectorsAndMethodsDo: [:selector :method | self addSelector: selector class: behavior].		behavior class selectorsAndMethodsDo: [:selector :method | self addSelector: selector class: behavior class]]</body></methods><methods><class-id>Refactory.Browser.SourceCodeDatabase</class-id> <category>changes - parcels</category><body package="Browser-SourceCodeUI">loadParcel: aParcel		aParcel classesAndSelectorsDo: [:class :selectors |		selectors do: [:selector | self addSelector: selector class: class]].	self cleanup</body><body package="Browser-SourceCodeUI">unloadComponent: aParcel		self unloadParcel: aParcel</body><body package="Browser-SourceCodeUI">unloadParcel: aParcel		aParcel isLoaded ifFalse: [^self].	self cleanup</body></methods><methods><class-id>Refactory.Browser.SourceCodeDatabase</class-id> <category>changes - selectors</category><body package="Browser-SourceCodeUI">addSelector: selector class: class		(implementorsIndex at: selector ifAbsentPut: [IdentitySet new])		add: class</body><body package="Browser-SourceCodeUI">addSelector: selector class: class attributes: attributes		self addSelector: selector class: class</body><body package="Browser-SourceCodeUI">removeSelector: selector class: class		| entry |	entry := implementorsIndex at: selector ifAbsent: [^self].	entry remove: class ifAbsent: [^self].	entry isEmpty ifTrue: [implementorsIndex removeKey: selector]</body></methods><methods><class-id>Refactory.Browser.SourceCodeDatabase</class-id> <category>updating</category><body package="Browser-SourceCodeUI">update: aspectSymbol with: parameterObject from: originatorObject		aspectSymbol isSymbol ifFalse: [^super update: aspectSymbol with: parameterObject from: originatorObject].	(self respondsTo: aspectSymbol) ifFalse: [^super update: aspectSymbol with: parameterObject from: originatorObject].	self perform: aspectSymbol withArguments: parameterObject</body></methods><methods><class-id>Refactory.Browser.SourceCodeDatabase</class-id> <category>accessing</category><body package="Browser-SourceCodeUI">implementorsIndex		^implementorsIndex</body></methods><methods><class-id>Refactory.Browser.SourceCodeDatabase class</class-id> <category>class initialization</category><body package="Browser-SourceCodeUI">initialize	"self initialize"		self rebuild.	self register</body><body package="Browser-SourceCodeUI">obsolete		self unregister.	super obsolete</body></methods><methods><class-id>Refactory.Browser.SourceCodeDatabase class</class-id> <category>instance creation</category><body package="Browser-SourceCodeUI">default	^default ifNil: [default := self new]</body><body package="Browser-SourceCodeUI">new		^super new initialize</body><body package="Browser-SourceCodeUI">reset	default := nil</body></methods><methods><class-id>Refactory.Browser.SourceCodeDatabase class</class-id> <category>private</category><body package="Browser-SourceCodeUI">register	(ChangeSet dependents includes: self) ifTrue: [^self].	ChangeSet addDependent: self</body><body package="Browser-SourceCodeUI">unregister	ChangeSet removeDependent: self</body></methods><methods><class-id>Refactory.Browser.SourceCodeDatabase class</class-id> <category>updating</category><body package="Browser-SourceCodeUI">rebuild		| replacement |	(replacement := self new) update.	default := replacement</body><body package="Browser-SourceCodeUI">update: aspectSymbol with: parameterObject from: originatorObject		self default update: aspectSymbol with: parameterObject from: originatorObject</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditorSpec</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">defaultReadOnly	^false</body><body package="Browser-SourceCodeUI">defaultShowInputCursor	^true</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditorSpec</class-id> <category>private</category><body package="Browser-SourceCodeUI">dispatchTo: policy with: builder	^policy sourceCodeEditor: self into: builder</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditorSpec class</class-id> <category>resources</category><body package="Browser-SourceCodeUI">iconForWidgetTree	^ToolbarIconLibrary visualFor: #sourceCodeEditorWidget</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditorSpec class</class-id> <category>private-interface building</category><body package="Browser-SourceCodeUI">componentName	"Identification of component"	^(#SourceCodeEditor &lt;&lt; #UIPainter &gt;&gt; 'Source Code Editor') asString</body></methods><methods><class-id>Refactory.Browser.DeclarationHighlightDecoration</class-id> <category>private</category><body package="Browser-SourceCodeUI">declaredVariables: aClass	aClass superclass == nil ifTrue: [^#()].	^(self declaredVariables: aClass superclass), (aClass instVarNames collect: [:each | aClass -&gt; each])</body><body package="Browser-SourceCodeUI">namesIn: aString 	| names stream nameStream position |	names := OrderedCollection new.	stream := ReadStream on: aString.		[stream skipSeparators.	stream atEnd] whileFalse: 				[nameStream := WriteStream on: (String new: 10).				position := stream position.				[stream atEnd or: [stream peek isSeparator]] 					whileFalse: [nameStream nextPut: stream next].				names add: position -&gt; nameStream contents].	^names</body><body package="Browser-SourceCodeUI">parseComment: aComment header: header	| reading variables |	reading := aComment readStream.	reading throughAll: header.	reading through: Character cr.	variables := Dictionary new.	[reading atEnd] whileFalse: [		| line lineReading variableName comment |		line := reading through: Character cr.		line isEmpty ifTrue: [^variables].		lineReading := line readStream.		lineReading skipSeparators.		variableName := lineReading upToSeparator.		lineReading skipSeparators.		comment := (lineReading through: Character cr) trimSeparators.		variables at: variableName put: (self typeInformationDocument: (self parseType: comment))].	^variables</body><body package="Browser-SourceCodeUI">parseComment: aComment into: instanceVariables and: classInstanceVariables	CachedComment = aComment ifTrue: [		instanceVariables addAll: CachedInstanceVariables.		classInstanceVariables addAll: CachedClassInstanceVariables.		^self].		instanceVariables addAll: (self parseComment: aComment header: 'Instance Variables').	instanceVariables addAll: (self parseComment: aComment header: 'Instance variables').	classInstanceVariables addAll: (self parseComment: aComment header: 'Class Instance Variables').	classInstanceVariables addAll: (self parseComment: aComment header: 'Class Instance variables').	classInstanceVariables addAll: (self parseComment: aComment header: 'Class instance variables').		CachedComment := aComment.	CachedInstanceVariables := instanceVariables copy.	CachedClassInstanceVariables := classInstanceVariables copy</body><body package="Browser-SourceCodeUI">parseType: aDescription	| depth reading |	aDescription isEmpty ifTrue: [^Array with: nil with: ''].	aDescription first = $&lt; ifFalse: [^Array with: nil with: aDescription].		depth := 0.	reading := aDescription readStream.	[reading atEnd] whileFalse: [		reading peek = $&lt; ifTrue: [depth := depth + 1].		reading peek = $&gt; ifTrue: [			depth := depth - 1.			depth = 0 ifTrue: [				reading next.				^Array with: (aDescription copyFrom: 1 to: reading position) with: reading upToEnd trimSeparators]].		reading next].	depth &gt; 0 ifTrue: [^Array with: nil with: aDescription].	self unreachableCode</body><body package="Browser-SourceCodeUI">typeInformationDocument: typeInformation	| typeDocument |	typeInformation == nil ifTrue: [^nil].	typeDocument := Text2.Document new.	typeDocument insertAt: typeDocument size with: ' '.	typeDocument first ~~ nil ifTrue: [		typeDocument			insertAt: typeDocument size			with: typeInformation first			style: (Text2.DocumentStyle default copy				color: ColorValue darkGray;				intern).		typeDocument insertAt: typeDocument size with: ' '].		typeDocument insertAt: typeDocument size with: typeInformation last.	typeDocument insertAt: typeDocument size with: ' '.	^typeDocument</body></methods><methods><class-id>Refactory.Browser.DeclarationHighlightDecoration</class-id> <category>visitor-double dispatching</category><body package="Browser-SourceCodeUI">acceptInstanceVariable: aLiteralNode variable: variableName at: variableOffset existing: existingVariables types: types target: aTargetClass hasComment: hasComment	| variableStyle message isRead isWritten error warning typeInformationDocument |		typeInformationDocument := types at: variableName ifAbsent: [nil].	variableStyle := instanceVariableStyle.	error := warning := nil.		(typeInformationDocument == nil and: [hasComment]) ifTrue: [		variableStyle := invalidStyle.		warning := #UncommentedVariable &lt;&lt; #browser &gt;&gt; 'Variable not commented'].		existingVariables		detect: [:each | each value = variableName]		ifFound: [:existing |			variableStyle := invalidStyle.			error := (#DuplicateVariable &lt;&lt; #browser &gt;&gt; 'Duplicate variable from &lt;1s&gt;') expandMacrosWith: existing key name].		isRead := isWritten := false.	aTargetClass withAllSubclasses do: [:eachClass |		isRead := isRead or: [(eachClass whichSelectorsRead: variableName) notEmpty].		isWritten := isWritten or: [(eachClass whichSelectorsRead: variableName) notEmpty]].	(isRead not and: [isWritten not])		ifTrue: [			variableStyle := invalidStyle.			warning := #InstVarNotUsed &lt;&lt; #browser &gt;&gt; 'Variable not referenced']		ifFalse: [			isRead ifFalse: [				variableStyle := invalidStyle.				warning := #InstVarNeverRead &lt;&lt; #browser &gt;&gt; 'Variable only written, never read'].			isWritten ifFalse: [				variableStyle := invalidStyle.				warning := #InstVarNeverWritten &lt;&lt; #browser &gt;&gt; 'Variable only read, never written or initialized']].	document		replaceBetween: decoratingOffset + aLiteralNode start + variableOffset		and: decoratingOffset + aLiteralNode start + variableOffset + variableName size		apply: [:style |			variableStyle copy				hover: typeInformationDocument;				intern].			(warning notNil and: [SourceCodeEditor shouldDisplayWarnings: reason]) ifTrue: [		message := Text2.Document new.		message insertAt: 0 with: '  ', warning expandMacros, ' ' style: warningStyle.		message insertAt: 1 with: (Text2.DocumentImage			fromImage: SourceCodeDialogModel warningIcon			baseline: SourceCodeDialogModel warningBaseline			style: warningStyle).		document			replaceBetween: decoratingOffset + aLiteralNode start + variableOffset			and: decoratingOffset + aLiteralNode start + variableOffset + 1			apply: [:style |				style copy					annotation: message;					annotationStyle: #dodge;					intern]].		(error notNil and: [SourceCodeEditor shouldDisplayErrors: reason]) ifTrue: [		message := Text2.Document new.		message insertAt: 0 with: '  ', error, ' ' style: errorStyle.		message insertAt: 1 with: (Text2.DocumentImage			fromImage: SourceCodeDialogModel errorIcon			baseline: SourceCodeDialogModel errorBaseline			style: errorStyle).		document			replaceBetween: decoratingOffset + aLiteralNode start + variableOffset			and: decoratingOffset + aLiteralNode start + variableOffset + 1			apply: [:style |				style copy					annotation: message;					annotationStyle: #dodge;					intern]].</body><body package="Browser-SourceCodeUI">acceptInstanceVariables: aLiteralNode types: types target: aTargetClass hasComment: hasComment	| existingVariables newVariables duplicates |	aLiteralNode isLiteralNode ifFalse: [^self].	aLiteralNode value isCharacters ifFalse: [^self].		existingVariables := #().	aTargetClass superclass == nil ifFalse: [existingVariables := self declaredVariables: aTargetClass superclass].		newVariables := self namesIn: aLiteralNode value.	newVariables keysAndValuesDo: [:index :variable |		duplicates := existingVariables, ((newVariables first: index - 1) collect: [:each | aTargetClass -&gt; each value]).		self acceptInstanceVariable: aLiteralNode variable: variable value at: variable key existing: duplicates types: types target: aTargetClass hasComment: hasComment]</body><body package="Browser-SourceCodeUI">acceptMessageNode: aMessageNode	super acceptMessageNode: aMessageNode.	targetClass ifNil: [^self].			(#(	#defineClass:superclass:indexedType:private:instanceVariableNames:classInstanceVariableNames:imports:category:	#defineClass:superclass:indexedType:private:instanceVariableNames:classInstanceVariableNames:imports:category:attributes:	) includes: aMessageNode selector) ifTrue: [		| instanceVariables classInstanceVariables hasComment theTargetClass |		instanceVariables := Dictionary new.		classInstanceVariables := Dictionary new.		hasComment := false.		targetClass ~~ nil ifFalse: [^self].		theTargetClass := targetClass isMeta ifTrue: [targetClass soleInstance] ifFalse: [targetClass].		hasComment := theTargetClass hasComment.		self parseComment: theTargetClass comment string into: instanceVariables and: classInstanceVariables.		self acceptInstanceVariables: (aMessageNode arguments at: 5) types: instanceVariables target: theTargetClass hasComment: hasComment.		self acceptInstanceVariables: (aMessageNode arguments at: 6) types: classInstanceVariables target: theTargetClass class hasComment: hasComment]</body></methods><methods><class-id>Refactory.Browser.DeclarationHighlightDecoration</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">initialize: aDocument editor: aSourceCodeEditor offset: aDecoratingOffset reason: aReason	super initialize.	document := aDocument.	targetClass := aSourceCodeEditor doItReceiverClass.	decoratingOffset := aDecoratingOffset.	reason := aReason.		invalidStyle := aSourceCodeEditor theme match: #(invalid illegal).	errorStyle := aSourceCodeEditor theme match: #(invalid error).	warningStyle := aSourceCodeEditor theme match: #(invalid warning).	instanceVariableStyle := aSourceCodeEditor theme match: #(variable parameter instance smalltalk)</body></methods><methods><class-id>Refactory.Browser.DeclarationHighlightDecoration class</class-id> <category>testing</category><body package="Browser-SourceCodeUI">isForWorkspace	^false</body></methods><methods><class-id>Refactory.Browser.DeclarationHighlightDecoration class</class-id> <category>instance creation</category><body package="Browser-SourceCodeUI">decorate: aDocument parseTree: aParseTree editor: aSourceCodeEditor offset: decoratingOffset reason: aReason	^(self new initialize: aDocument editor: aSourceCodeEditor offset: decoratingOffset reason: aReason)		visitNode: aParseTree;		yourself</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutocomplete</class-id> <category>testing</category><body package="Browser-SourceCodeUI">canSuggest: anEvent	^view isWorkspace not		and: [anEvent hasModifiers not		and: [super canSuggest: anEvent]]</body><body package="Browser-SourceCodeUI">isInCommentOrNonSymbolLiteral	| node inputPosition |	(node := view selectionNode) == nil ifTrue: [^false].	((node isKindOf: Refactory.Browser.RBLiteralNode) and: [node value isSymbol not])		ifTrue: [^true].	inputPosition := view inputPosition + 1.	node allCommentsDo: [:commentInterval |		(commentInterval includes: inputPosition) ifTrue: [^true]].	^false</body><body package="Browser-SourceCodeUI">isSuggestableWord: aWord	aWord isEmpty ifTrue: [^false].	^(aWord first isAlphabetic or: ['#_' includes: aWord first]) and: [(aWord allButFirst: 1) allSatisfy: [:each | each isAlphaNumeric or: [':_' includes: each]]]</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutocomplete</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">newAutocompleteModel	^SmalltalkAutocompleteModel new		configure: self;		yourself</body><body package="Browser-SourceCodeUI">newSearcher: word	^SmalltalkAutocompleteSearch on: view for: word</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutocomplete</class-id> <category>private</category><body package="Browser-SourceCodeUI">currentWordInterval	| start stop pair word |	start := stop := view inputPosition.	pair := view document eitherSideOf: start.		(pair first ~~ nil and: [pair first isAlphaNumeric or: ['#:.' includes: pair first]]) ifTrue: [		start := view document previousWordBreakBefore: start].	(pair last ~~ nil and: [pair last isAlphaNumeric or: [pair last == $:]]) ifTrue: [		stop := view document nextWordBreakAfter: stop].		[start &gt; 0 and: [start &lt; view document size and: [(view document at: start + 1) = $:]]] whileTrue: [		start := view document previousWordBreakBefore: start].	(start &gt; 0 and: [(view document at: start) = $#]) ifTrue: [start := start - 1].		[stop &lt; view document size and: [(view document at: stop + 1) = $:]] whileTrue: [		stop := view document nextWordBreakAfter: stop].		"Shrink to the right most dotted portion of the word."	word := view document copyBetween: start and: stop.	(word includes: $.) ifTrue: [start := start + (word lastIndexOf: $.)].		^start to: stop</body><body package="Browser-SourceCodeUI">trailingPunctuation: aCurrentWordInterval	"If typing onto a new line with nothing on it except what has been written for the suggestion, add a smalltalk . or ;	 to make the line non-interfering with the next line if there is one."	| document head tail parent |	document := view document.	head := document copyBetween: view paragraphStartPosition				and: aCurrentWordInterval first.	tail := document copyBetween: aCurrentWordInterval last				and: view paragraphStopPosition.	"If there's other content on the line, do not provide trailing punctuation"	(head trimSeparators isEmpty and: [tail trimSeparators isEmpty])		ifFalse: [^nil].	"If we're at the end of the document, do not provide trailing punctuation"	aCurrentWordInterval last = view document size ifTrue: [^nil].	(parent := view selectionNode) ifNil: [^'.'].	parent isMethod		ifTrue: 			["if the cursor is in the method node, we've inserted the method's selector. It's wrong to insert a . or ; here"			^nil].		[parent := parent parent.	parent notNil]			whileTrue: [parent isCascade ifTrue: [^';']].	^'.'</body></methods><methods><class-id>Refactory.Browser.SourceCodeDialog</class-id> <category>initialize-release</category><body package="Browser-SourceCodeUI">initialize: aDocumentView	view := aDocumentView</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-editor</category><body package="Browser-SourceCodeUI">toolsEditorEnablementSetting: aSettingName	^BooleanSetting on:		((PluggableAdaptor on: Refactory.Browser.SourceCodeEditor enablement)			getBlock: [:m | m at: aSettingName ifAbsent: [true]]			putBlock: [:m :v |				m at: aSettingName put: v.				Refactory.Browser.SourceCodeEditor updateAllInstances]			updateBlock: [:m :a :p | a = aSettingName])</body></methods><methods><class-id>Kernel.CompiledMethod</class-id> <category>converting</category><body package="Browser-SourceCodeUI">asSourceCodeDocument	^Text2.Document fromString: (self mclass sourceCodeForMethod: self at: self selector) string</body></methods><methods><class-id>Text2.DocumentSegment</class-id> <category>testing</category><body package="Browser-SourceCodeUI">isMarkupNode	^false</body><body package="Browser-SourceCodeUI">isSuggestionTab	^false</body></methods><methods><class-id>Kernel.CompiledInitializer</class-id> <category>converting</category><body package="Browser-SourceCodeUI">asSourceCodeDocument	^Text2.Document fromString: self getSource string</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>building</category><body package="Browser-SourceCodeUI">sourceCodeEditor: spec into: builder	| model component |	model := spec modelInBuilder: builder.	component := self sourceCodeEditorClass model: model.	^self documentView: spec component: component into: builder</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>implementation classes</category><body package="Browser-SourceCodeUI">sourceCodeEditorClass	^Refactory.Browser.SourceCodeEditor</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool class</class-id> <category>resources</category><body package="Browser-SourceCodeUI">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#commandID: #accept 				#value: #acceptDocument ) 			#(#{UI.MenuItem} 				#commandID: #cancelText 				#value: #cancelDocument ) 			#(#{UI.MenuItem} 				#commandID: #find 				#value: #openFind ) 			#(#{UI.MenuItem} 				#commandID: #replace 				#value: #openFindAndReplace ) 			#(#{UI.MenuItem} 				#commandID: #findNext 				#value: #findNext 				#enabled: false 				#enablementSelector: #isFindOpen ) 			#(#{UI.MenuItem} 				#commandID: #findPrevious 				#value: #findPrevious 				#enabled: false 				#enablementSelector: #isFindOpen ) 			#(#{UI.MenuItem} 				#commandID: #undo 				#value: #undoDocumentEdit 				#enablementSelector: #canUndo ) 			#(#{UI.MenuItem} 				#commandID: #redo 				#value: #redoDocumentEdit 				#enablementSelector: #canRedo ) ) #(2 4 2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.BrowserDocumentTool class</class-id> <category>interface specs</category><body package="Browser-SourceCodeUI">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 1180 620 1380 820 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Refactory.Browser.SourceCodeEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #documentEditor 					#isOpaque: true 					#model: #documentHolder 					#isWrapped: true 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#continuousAccept: false 					#showInputCursor: true 					#showSelection: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserOverviewTool class</class-id> <category>resources</category><body package="Browser-SourceCodeUI">documentMenu	"Tools.MenuEditor new openOnClass: self andSelector: #standardViewMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Copy' 				#nameKey: #copy 				#value: #clipboardCopy 				#labelImage: #(#{UI.ResourceRetriever} #{GeneralIcons} #editCopy ) 				#command: #copy ) 			#(#{UI.MenuItem} 				#rawLabel: 'Find...' 				#nameKey: #find 				#value: #find 				#command: #find ) ) #(1 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutoQuote</class-id> <category>actions - editing</category><body package="Browser-SourceCodeUI">backspace: anEvent	&lt;state: #active modifiers: #() key: #Backspace&gt;	self isQuotedPairRemovable ifFalse: [^#continue].	view invalidateSelectionWhile: [		view moveLeft.		view selectRight; selectRight.		view backspace].	anEvent stop</body><body package="Browser-SourceCodeUI">insert: anEvent	"If the event is to insert a character, detect if it should attempt an auto-quote for that character."	&lt;state: #active event: #KeyDown&gt;	| character index action openCharacter closeCharacter |	view isWorkspace ifTrue: [^self].	anEvent keyValue class == Character ifFalse: [^self].	(view unicodeProperties isControlCharacter: anEvent keyValue) ifTrue: [^self].		"If we're typing after a $, it's a character they're programming so skip this"	(view inputPosition &gt;= 1 and: [(view document at: view inputPosition) = $$]) ifTrue: [^self].		action := nil.	character := anEvent keyValue.	(index := view openDelimiters indexOf: character) &gt; 0 ifTrue: [		openCharacter := character.		closeCharacter := view closeDelimiters at: index.		action := [self applyOpenDelimiterBetween: openCharacter and: closeCharacter]].	(index := view closeDelimiters indexOf: character) &gt; 0 ifTrue: [		openCharacter := view openDelimiters at: index.		closeCharacter := character.		action == nil			ifTrue: [action := [self applyCloseDelimiterBetween: openCharacter and: closeCharacter]]			ifFalse: [action := [self applyQuote: character]]].	"Not typing quote or delimiter characters."	action == nil ifTrue: [^self].	view hasSelection ifTrue: [		view endCurrentEdit.		self applySelectionBetween: openCharacter and: closeCharacter.		anEvent stop.		^self].	action value ifTrue: [anEvent stop]</body></methods><methods><class-id>Refactory.Browser.BrowserSourceCodeTool class</class-id> <category>resources</category><body package="Browser-SourceCodeUI">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#commandID: #accept 				#value: #acceptDocument 				#enablementSelector: #canAccept ) 			#(#{UI.MenuItem} 				#commandID: #format 				#value: #formatDocument 				#enablementSelector: #canFormat ) 			#(#{UI.MenuItem} 				#commandID: #cancelText 				#value: #cancelDocument 				#enablementSelector: #canRevert ) 			#(#{UI.MenuItem} 				#commandID: #find 				#value: #openFind ) 			#(#{UI.MenuItem} 				#commandID: #replace 				#value: #openFindAndReplace ) 			#(#{UI.MenuItem} 				#commandID: #findNext 				#value: #findNext 				#enabled: false 				#enablementSelector: #isFindOpen ) 			#(#{UI.MenuItem} 				#commandID: #findPrevious 				#value: #findPrevious 				#enabled: false 				#enablementSelector: #isFindOpen ) 			#(#{UI.MenuItem} 				#commandID: #undo 				#value: #undoDocumentEdit 				#enablementSelector: #canUndo ) 			#(#{UI.MenuItem} 				#commandID: #redo 				#value: #redoDocumentEdit 				#enablementSelector: #canRedo ) ) #(3 4 2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutocompleteSearch</class-id> <category>plugins - sources</category><body package="Browser-SourceCodeUI">accessorSuggestions: aSearchBlock	&lt;source: #isMethod&gt;	| behavior |	behavior := view doItReceiverClass.	behavior == nil ifTrue: [^self].		behavior instVarNames do: [:instanceVariableName |		(behavior whichClassIncludesSelector: instanceVariableName asSymbol) == nil			ifTrue: [aSearchBlock value: instanceVariableName asSymbol value: behavior value: #accessor].		(behavior whichClassIncludesSelector: (instanceVariableName, ':') asSymbol) == nil			ifTrue: [aSearchBlock value: (instanceVariableName, ':') value: behavior value: #accessor]]</body><body package="Browser-SourceCodeUI">globalSuggestions: aSearchBlock	&lt;source: #isVariable&gt;		| index |	node isVariableDeclaration ifTrue: [^self].	(index := node name lastIndexOf: $.) &gt; 0 ifTrue: [		| base environment |		base := node name copyFrom: 1 to: index - 1.		environment := SystemUtils resolveBindingAsReference: base inClass: view doItReceiverClass inEnvironment: view doItEnvironment.		environment == nil ifFalse: [			environment isForNameSpace ifTrue: [				environment value withAllNameSpacesDo: [:aNameSpace |					aNameSpace ~~ Undeclared ifTrue: [						aNameSpace localNamesAndBindingsDo: [:key :binding |							aSearchBlock value: key value: binding environment value: #sharedVariable]]].				^self]]].		  SystemUtils allClassesDo: [:aClass |		aSearchBlock value: aClass name value: aClass environment value: #class.		aClass asNameSpace keysAndValuesDo: [:key :value |			aSearchBlock value: key value: aClass value: #sharedVariable]].	Root withAllNameSpacesDo: [:aNameSpace |		aNameSpace environment == nil ifFalse: [			aSearchBlock value: aNameSpace name value: aNameSpace environment value: #namespace.			aNameSpace ~~ Undeclared ifTrue: [				aNameSpace localNamesAndBindingsDo: [:key :binding |					binding isForGeneral ifTrue: [						aSearchBlock value: key value: binding environment value: #sharedVariable]]]]]</body><body package="Browser-SourceCodeUI">pragmaSuggestions: aSearchBlock	&lt;source: #isTagNode&gt;		| receiverClass |	(receiverClass := view doItReceiverClass) == nil ifTrue: [^self].	receiverClass recognizedMethodPragmas do: [:selector |		aSearchBlock value: selector value: nil value: #pragma]</body><body package="Browser-SourceCodeUI">scopedVariableSuggestions: aSearchBlock	&lt;source: #isVariable&gt;		node isVariableDeclaration ifTrue: [^self].		aSearchBlock value: 'nil' value: '' value: #specialVariable.	aSearchBlock value: 'true' value: '' value: #specialVariable.	aSearchBlock value: 'false' value: '' value: #specialVariable.		view doItReceiverClass ifNotNil: [:receiverClass |		| aClass |		view doItReceiverAllowed ifTrue: [			aSearchBlock value: 'self' value: receiverClass name value: #specialVariable.			view isWorkspace ifFalse: [				receiverClass superclass == nil ifFalse: [					aSearchBlock value: 'super' value: receiverClass superclass name value: #specialVariable].				aSearchBlock value: 'thisContext' value: 'MethodContext' value: #specialVariable]].		aClass := receiverClass.		[aClass == nil] whileFalse: [			aClass instVarNames do: [:each |				aSearchBlock value: each value: aClass name value: #instanceVariable].			aClass class instVarNames do: [:each |				aSearchBlock value: each value: aClass name value: #classInstanceVariable].			aClass := aClass superclass]].		node allScopedArgumentVariables do: [:each | aSearchBlock value: each value: '' value: #parameterVariable].	node allScopedTemporaryVariables do: [:each | aSearchBlock value: each value: '' value: #temporaryVariable]</body><body package="Browser-SourceCodeUI">selectorPrecedenceSuggestions: aSearchBlock	&lt;source: #isMessage&gt;		(node parent isMessage and: [node parent precedence == 2]) ifFalse: [^self].	self selectorSuggestions: node receiver: node parent type: #selector into: aSearchBlock</body><body package="Browser-SourceCodeUI">selectorRecursionSuggestions: aSearchBlock	"If the selector being implemented is not yet installed on the class, include its selector as a suggestion"	&lt;source: #isMessage&gt;		| top selector mclass |	(mclass := view doItReceiverClass) == nil ifTrue: [^self].	(top := node top) isMethod ifFalse: [^self].	selector := top selector.	(mclass includesSelector: selector) ifTrue: [^self].	aSearchBlock value: selector value: mclass value: #selector</body><body package="Browser-SourceCodeUI">selectorSuffixSuggestions: aSearchBlock	&lt;source: #isMessage&gt;		prefix == nil ifFalse: [^self].	(node parent isMessage and: [node parent selector last = $:]) ifFalse: [^self].	prefix := node parent selector.	self selectorSuggestions: node parent type: #suffixSelector into: aSearchBlock.	prefix := nil</body><body package="Browser-SourceCodeUI">selectorSuggestions: aSearchBlock	&lt;source: #isMessage&gt;		| searchBlock |	searchBlock := aSearchBlock.		"Filter out suffix suggestions, they come from selectorSuffixSuggestions: instead."	(node parent isMessage and: [node parent selector last = $:]) ifTrue: [		searchBlock := [:aSuggestion :anObject :aClassification |			(aSuggestion includes: $:)				ifTrue: [false]				ifFalse: [aSearchBlock value: aSuggestion value: anObject value: aClassification]		]].	self selectorSuggestions: node type: #selector into: searchBlock</body><body package="Browser-SourceCodeUI">superSelectorSuggestions: aSearchBlock	&lt;source: #isMethod&gt;	| behavior visited |	behavior := view doItReceiverClass.	behavior == nil ifTrue: [^self].	"Exclude already implemented selectors"	visited := Set withAll: behavior selectors.		"Search the super hierarchy for unimplemented selectors"	behavior := behavior superclass.	[behavior notNil] whileTrue: [		behavior selectorsAndMethodsDo: [:selector :method |			(visited includes: selector) ifFalse: [				visited add: selector.				aSearchBlock value: selector value: behavior value: #selector]].		behavior := behavior superclass]</body><body package="Browser-SourceCodeUI">symbolSuggestions: aSearchBlock	&lt;source: #isLiteralNode&gt;		| symbolTable hashBucketTombstone skip |	node value isSymbol ifFalse: [^self].		"Every symbol we search for has been instantiated by the RBParser and some stack	 frames probably reference it too. Symbols being used by the program tend to have	 dozens of references, so we use a guess threshold to filter out newly created symbols."	skip := nil.	(node value allOwnersWeakly: true) size &lt;= 8 ifTrue: [skip := node value].		symbolTable := Symbol symbolTable.	hashBucketTombstone := symbolTable hashBucketTombstone.	symbolTable allHashBucketsDo: [:eachHashBucket |		eachHashBucket do: [:symbol |			symbol == hashBucketTombstone ifFalse: [				symbol == skip ifFalse: [					aSearchBlock value: symbol value: nil value: #symbol]]]]</body><body package="Browser-SourceCodeUI">undeclaredVariableSuggestions: aSearchBlock	&lt;source: #isVariable&gt;		| visited |	visited := Set new.	node top nodesDo: [:each |		each ~~ node ifTrue: [			(each isVariable and: [each isVariableDeclaration not]) ifTrue: [				(visited includes: each) ifFalse: [					visited add: each.					(self isUndeclaredVariable: each) ifTrue: [						aSearchBlock value: each name value: '' value: #undeclaredVariable]]]]]</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutoIndent</class-id> <category>actions - editing</category><body package="Browser-SourceCodeUI">insertNewline: anEvent view: aView	"Insert a new line followed by an appropriate number of tabs for Smalltalk."		&lt;state: #active modifiers: #() key: #Enter&gt;		| newline |	aView isWorkspace ifTrue: [^#continue].		anEvent stop.	newline := String new writeStream.	newline nextPut: Character cr.	(self lineIndentTabsCount: aView) timesRepeat: [newline nextPut: Character tab].	aView endCurrentEdit.	aView insert: newline contents.	aView endCurrentEdit</body></methods><methods><class-id>Refactory.Browser.BrowserDeclarationTool class</class-id> <category>resources</category><body package="Browser-SourceCodeUI">documentMenu	"Tools.MenuEditor new openOnClass: self andSelector: #instanceVariableMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#commandID: #browseInstVarRefs 				#value: #browseInstanceVariableReferences ) 			#(#{UI.MenuItem} 				#commandID: #browseInstVarReaders 				#value: #browseInstanceVariableReaders ) 			#(#{UI.MenuItem} 				#commandID: #browseInstVarWriters 				#value: #browseInstanceVariableWriters ) 			#(#{UI.MenuItem} 				#commandID: #renameVariable 				#value: #renameInstanceVariable ) 			#(#{UI.MenuItem} 				#commandID: #removeInstanceVariable 				#value: #removeInstanceVariable ) 			#(#{UI.MenuItem} 				#commandID: #createInstanceVariableAccessors 				#value: #createInstanceVariableAccessors ) 			#(#{UI.MenuItem} 				#commandID: #pushUpInstanceVariable 				#value: #pushUpInstanceVariable ) 			#(#{UI.MenuItem} 				#commandID: #pushDownInstanceVariable 				#value: #pushDownInstanceVariable ) 			#(#{UI.MenuItem} 				#commandID: #abstractInstanceVariable 				#value: #abstractInstanceVariable ) 			#(#{UI.MenuItem} 				#commandID: #protectInstanceVariable 				#value: #protectInstanceVariable ) ) #(3 3 4 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutocompleteModel</class-id> <category>plugins - presentations</category><body package="Browser-SourceCodeUI">accessorPresentation: anImplementor matched: aSelectorName indicies: aMatchingIndices	&lt;presentation: #accessor&gt;	| output |	output := OrderedCollection new.	output add: anImplementor name asString.	output add: (Array with: aSelectorName asString with: aMatchingIndices with: #(keyword)).	(aSelectorName includes: $:) ifTrue: [		output add: (Array with: ' anObject' with: #() with: #(variable))].	output add: (Array with: ' (accessor template)' with: #() with: #(comment)).	^output</body><body package="Browser-SourceCodeUI">globalPresentation: aGlobalEnvironment matched: aGlobalName indicies: aMatchingIndices	&lt;presentation: #class&gt;	&lt;presentation: #namespace&gt;	&lt;presentation: #sharedVariable&gt;	^Array with: (aGlobalEnvironment name copyReplaceAll: ' ' with: (Array with: 16rA0)) with: (Array with: aGlobalName with: aMatchingIndices with: #(entity name))</body><body package="Browser-SourceCodeUI">instanceVariablePresentation: aVariableSource matched: aVariableName incidies: aMatchingIndices	&lt;presentation: #instanceVariable&gt;	&lt;presentation: #classInstanceVariable&gt;	^Array with: aVariableSource with: (Array with: aVariableName with: aMatchingIndices with: #(variable instance))</body><body package="Browser-SourceCodeUI">pragmaPresentation: unused matched: aSelectorName indicies: aMatchingIndices	&lt;presentation: #pragma&gt;	| arguments keywords matchingIndex matchingIndices output |	arguments := self argumentsForPragma: aSelectorName.	output := OrderedCollection with: ''.	"Unary"	arguments isEmpty ifTrue: [		output add: (Array with: aSelectorName asString with: aMatchingIndices with: #(entity name tag)).		^output].		keywords := aSelectorName asSymbol keywords.	matchingIndex := 0.	matchingIndices := aMatchingIndices copy.	(1 to: keywords size)		do: [:index |			| keyword parameter matchedIndices |			keyword := (keywords at: index) asString.			parameter := arguments at: index.			(self isBlockArgument: parameter) ifTrue: [parameter := '[', parameter, ']'].			matchingIndex := matchingIndex + keyword size.			matchedIndices := matchingIndices select: [:each | each &lt;= matchingIndex].			matchedIndices notEmpty ifTrue: [				matchingIndices := matchingIndices allButFirst: matchedIndices size.				matchedIndices := matchedIndices collect: [:each | each - (matchingIndex - keyword size)]].			output add: (Array with: keyword with: matchedIndices with: #(entity name tag)).			output add: (Array with: ' ' with: #() with: #(variable)).			output add: (Array with: parameter with: #() with: #(variable))]		separatedBy: [output add: (Array with: ' ' with: #() with: #(entity name tag))].	^output</body><body package="Browser-SourceCodeUI">selectorPresentation: anImplementor matched: aSelectorName indicies: aMatchingIndices	&lt;presentation: #selector&gt;	| basic behaviors reducedBehaviors method source pattern keywords keywordSelector matchingIndex matchingIndices output |	keywordSelector := #(keyword).	aSelectorName first isAlphabetic ifFalse: [keywordSelector := #(keyword binary)].	(_.SyntaxHighlightDecoration.KeywordOperators includes: aSelectorName) ifTrue: [keywordSelector := #(keyword operator)].	(_.SyntaxHighlightDecoration.KeywordControls includes: aSelectorName) ifTrue: [keywordSelector := #(keyword control)].	basic := Array with: '' with: (Array with: aSelectorName asString with: aMatchingIndices with: keywordSelector).	anImplementor == nil		ifFalse: [behaviors := Array with: anImplementor]		ifTrue: [behaviors := SourceCodeDatabase default implementorsIndex at: aSelectorName ifAbsent: [^basic]].	reducedBehaviors := self reduceBehaviors: behaviors.	reducedBehaviors isEmpty ifTrue: [^basic].	output := OrderedCollection new.	reducedBehaviors size = 1		ifTrue: [output add: (reducedBehaviors any name asString copyReplaceAll: ' ' with: (String with: 16rA0 asCharacter))]		ifFalse: [output add: ((#numberOfTypes &lt;&lt; #dialogs &gt;&gt; '&lt;1p&gt; types') expandMacrosWith: behaviors size)].	basic := output copyWith: (Array with: aSelectorName asString with: aMatchingIndices with: keywordSelector).	method := reducedBehaviors any compiledMethodAt: aSelectorName ifAbsent: [^basic].	source := method getSource ifNil: [^basic].	pattern := method compilerClass parserClass new		initPattern: source		notifying: (SilentCompilerErrorHandler new failBlock: [])		saveComments: false		return: [:p | p].	"Unary"	(pattern at: 2) isEmpty ifTrue: [		output add: (Array with: pattern first asString with: aMatchingIndices with: keywordSelector).		^output].		keywords := (pattern at: 1) keywords.	matchingIndex := 0.	matchingIndices := aMatchingIndices copy.	(1 to: keywords size)		do: [:index |			| keyword parameter matchedIndices |			keyword := (keywords at: index) asString.			parameter := ((pattern at: 2) at: index) variable name.			(self isBlockArgument: parameter) ifTrue: [parameter := '[', parameter, ']'].			matchingIndex := matchingIndex + keyword size.			matchedIndices := matchingIndices select: [:each | each &lt;= matchingIndex].			matchedIndices notEmpty ifTrue: [				matchingIndices := matchingIndices allButFirst: matchedIndices size.				matchedIndices := matchedIndices collect: [:each | each - (matchingIndex - keyword size)]].			output add: (Array with: keyword with: matchedIndices with: keywordSelector).			output add: (Array with: ' ' with: #() with: #(variable)).			output add: (Array with: parameter with: #() with: #(variable))]		separatedBy: [output add: (Array with: ' ' with: #() with: keywordSelector)].	^output</body><body package="Browser-SourceCodeUI">specialVariablePresentation: aVariableSource matched: aVariableName incidies: aMatchingIndices	&lt;presentation: #specialVariable&gt;	^Array with: aVariableSource with: (Array with: aVariableName with: aMatchingIndices with: (#(variable language) copyWith: aVariableName asSymbol))</body><body package="Browser-SourceCodeUI">suffixSelectorPresentation: anImplementorAndPrefix matched: aSelectorName indicies: aMatchingIndices	&lt;presentation: #suffixSelector&gt;	| selector implementor |	implementor := anImplementorAndPrefix first.	selector := anImplementorAndPrefix last.	^self selectorPresentation: implementor matched: (selector, aSelectorName) asSymbol indicies: (aMatchingIndices collect: [:each | each + selector size])</body><body package="Browser-SourceCodeUI">symbolPresentation: aNothing matched: aSymbolName incidies: aMatchingIndices	&lt;presentation: #symbol&gt;	^Array with: '' with: (Array with: aSymbolName with: aMatchingIndices with: #(constant symbol))</body><body package="Browser-SourceCodeUI">undeclaredVariablePresentation: aVariableSource matched: aVariableName incidies: aMatchingIndices	&lt;presentation: #undeclaredVariable&gt;	^Array with: aVariableSource with: (Array with: aVariableName with: aMatchingIndices with: #(invalid illegal undeclaredVariable))</body><body package="Browser-SourceCodeUI">variablePresentation: aVariableSource matched: aVariableName incidies: aMatchingIndices	&lt;presentation: #temporaryVariable&gt;	&lt;presentation: #parameterVariable&gt;	^Array with: aVariableSource with: (Array with: aVariableName with: aMatchingIndices with: #(variable))</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutocompleteModel</class-id> <category>plugins - accepting</category><body package="Browser-SourceCodeUI">accessorAccept: aSelectorName object: anImplementor	&lt;accept: #accessor&gt;	| style basic |	style := view currentStyle.	basic := Document fromString: aSelectorName asString style: style.	(aSelectorName includes: $:)		ifTrue: [			basic insert: (' anObject	&lt;1s&gt; := anObject' expandMacrosWith: (aSelectorName copyWithout: $:)) style: style]		ifFalse: [			basic insert: ('	^&lt;1s&gt;' expandMacrosWith: aSelectorName) style: style].	^basic</body><body package="Browser-SourceCodeUI">globalAccept: aSuggestion object: anEnvironment	&lt;accept: #sharedVariable&gt;	&lt;accept: #class&gt;	&lt;accept: #namespace&gt;		| acceptance binding |	binding := SystemUtils resolveBindingAsReference: aSuggestion inClass: view doItReceiverClass inEnvironment: view doItEnvironment.	acceptance := aSuggestion.	binding == nil ifTrue: [		binding := anEnvironment bindingFor: aSuggestion.		binding == nil ifFalse: [			"Original search was constrained, so only use the name, not the full name."			acceptance := (view selectionNode name includes: $.)				ifTrue: [binding key]				ifFalse: [binding environment fullName, '.', binding key]]].	acceptance := acceptance asString.	^Document fromString: acceptance asString style: view currentStyle</body><body package="Browser-SourceCodeUI">pragmaAccept: aSelectorName object: anImplementor	&lt;accept: #pragma&gt;	| arguments keywords output style |	style := view currentStyle.	arguments := self argumentsForPragma: aSelectorName.	"Unary"	arguments isEmpty ifTrue: [^Document fromString: aSelectorName asString style: style].		keywords := aSelectorName asSymbol keywords.	output := Document new.	style := view currentStyle.	(1 to: keywords size)		do: [:index |			| keyword parameter |			keyword := (keywords at: index) asString.			parameter := arguments at: index.			output insert: keyword asString style: style.			output insert: ' ' style: style.			output insert: (DocumentSuggestionTab fromString: parameter asString style: style)]		separatedBy: [output insert: ' ' style: style].	^output</body><body package="Browser-SourceCodeUI">regularAccept: aSuggestion object: anObject	&lt;accept: #specialVariable&gt;	&lt;accept: #instanceVariable&gt;	&lt;accept: #classInstanceVariable&gt;	&lt;accept: #temporaryVariable&gt;	&lt;accept: #parameterVariable&gt;	&lt;accept: #undeclaredVariable&gt;		^Document fromString: aSuggestion asString style: view currentStyle</body><body package="Browser-SourceCodeUI">selectorAccept: aSelectorName object: anImplementor	&lt;accept: #selector&gt;	| behaviors reducedBehaviors method source pattern keywords output style basic |	style := view currentStyle.	basic := Document fromString: aSelectorName asString style: style.	anImplementor == nil		ifFalse: [behaviors := Array with: anImplementor]		ifTrue: [behaviors := SourceCodeDatabase default implementorsIndex at: aSelectorName ifAbsent: [^basic]].	reducedBehaviors := self reduceBehaviors: behaviors.	reducedBehaviors isEmpty ifTrue: [^basic].	method := reducedBehaviors any compiledMethodAt: aSelectorName ifAbsent: [^basic].	source := method getSource ifNil: [^basic].	pattern := method compilerClass parserClass new		initPattern: source		notifying: (SilentCompilerErrorHandler new failBlock: [])		saveComments: false		return: [:p | p].	"Unary"	(pattern at: 2) isEmpty ifTrue: [^basic].		keywords := (pattern at: 1) keywords.	output := Document new.	style := view currentStyle.	(1 to: keywords size)		do: [:index |			| keyword parameter |			keyword := (keywords at: index) asString.			parameter := ((pattern at: 2) at: index) variable name.			output insert: keyword asString style: style.			output insert: ' ' style: style.			(self isBlockArgument: parameter) ifTrue: [output insert: '[' style: style].			output insert: (DocumentSuggestionTab fromString: parameter asString style: style).			(self isBlockArgument: parameter) ifTrue: [output insert: ']' style: style]]		separatedBy: [output insert: ' ' style: style].	^output</body><body package="Browser-SourceCodeUI">suffixSelectorAccept: aSelectorName object: anImplementorAndPrefix	&lt;accept: #suffixSelector&gt;	| behaviors reducedBehaviors method source pattern keywords output style basic selector selectorName implementor parameters |	implementor := anImplementorAndPrefix first.	selector := anImplementorAndPrefix last.	selector := view selectionNode parent selector.	selectorName := (selector, aSelectorName) asSymbol.	style := view currentStyle.	basic := Document fromString: aSelectorName asString style: style.	implementor == nil		ifFalse: [behaviors := Array with: implementor]		ifTrue: [behaviors := SourceCodeDatabase default implementorsIndex at: selectorName ifAbsent: [^basic]].	reducedBehaviors := self reduceBehaviors: behaviors.	reducedBehaviors isEmpty ifTrue: [^basic].	method := reducedBehaviors any compiledMethodAt: selectorName ifAbsent: [^basic].	source := method getSource ifNil: [^basic].	pattern := method compilerClass parserClass new		initPattern: source		notifying: (SilentCompilerErrorHandler new failBlock: [])		saveComments: false		return: [:p | p].		keywords := (pattern at: 1) keywords allButFirst: (selector occurrencesOf: $:).	parameters := (pattern at: 2) allButFirst: (selector occurrencesOf: $:).	output := Document new.	style := view currentStyle.	(1 to: keywords size)		do: [:index |			| keyword parameter |			keyword := (keywords at: index) asString.			parameter := (parameters at: index) variable name.			output insert: keyword asString style: style.			output insert: ' ' style: style.			(self isBlockArgument: parameter) ifTrue: [output insert: '[' style: style].			output insert: (DocumentSuggestionTab fromString: parameter asString style: style).			(self isBlockArgument: parameter) ifTrue: [output insert: ']' style: style]]		separatedBy: [output insert: ' ' style: style].	^output</body><body package="Browser-SourceCodeUI">symbolAccept: aSuggestion object: anObject	&lt;accept: #symbol&gt;		^Document fromString: '#', aSuggestion asString style: view currentStyle</body></methods><methods><class-id>Refactory.Browser.SourceCodeTheme class</class-id> <category>themes</category><body package="Browser-SourceCodeUI">blackAndWhite	&lt;theme&gt;	| defaultStyle bolded |	defaultStyle := self defaultStyle.	(bolded := defaultStyle fontDescription copy) boldness: 0.7.	^self new		name: 'Black and White';		author: 'Cincom';		website: 'http://www.cincom.com';		styles: (Dictionary new			at: #(default) put: defaultStyle;			at: #(variable parameter function) put: (defaultStyle copy				fontDescription: bolded;				intern);			at: #(entity name function) put: (defaultStyle copy				fontDescription: bolded;				intern);			at: #(punctuation) put: (defaultStyle copy				color: ColorValue darkGray;				intern);			at: #(keyword missing) put: (defaultStyle copy adornment: #dashedUnderline; intern);			at: #(markup link) put: (defaultStyle copy				cursor: #fingerPointer;				color: ColorValue blue;				adornmentColor: ColorValue blue;				adornment: #underline;				intern);			at: #(invalid illegal) put: (defaultStyle copy adornmentColor: ColorValue red; adornment: #underline; intern);			at: #(invalid error) put: self defaultErrorStyle;			at: #(invalid warning) put: self defaultWarningStyle;			at: #(markup watch) put: self defaultWatchStyle;			at: #(markup breakpoint) put: self defaultBreakpointStyle;			at: #(markup breakpoint disabled) put: self defaultBreakpointStyle;			yourself)</body><body package="Browser-SourceCodeUI">chalkDark	&lt;theme&gt;	^self new		name: 'Chalk (Dark)';		author: 'Chris Kempson';		website: 'http://chriskempson.com';		styles: (self dark16: self chalkColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">chalkLight	&lt;theme&gt;	^self new		name: 'Chalk (Light)';		author: 'Chris Kempson';		website: 'http://chriskempson.com';		styles: (self light16: self chalkColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">default	"The default theme is designed to provide high contrast on a white background. Thematically it moves from a strong blue to describe 'self' and classes, through to dark reds to describe immutables, such as numbers, symbols and strings. Inbetween, you'll find dark blues and magentas to describe variables. A philosophical choice was made with comment colours. Traditionally they were an olive color to allow them to blend away, but by choosing a strong green, we indicate them affirmatively rather than negatively."	&lt;theme&gt;	| default bold invalid unknown link darkBlue |	default := self defaultStyle.	(bold := default fontDescription copy)		boldness: 0.7.	(invalid := default copy)		adornmentColor: ColorValue darkRed;		adornment: #underline.	(unknown := default copy)		color: ColorValue red;		adornmentColor: ColorValue darkRed;		adornment: #dashedUnderline.		"Color for links"	darkBlue := self hexColorValue: 16r000080.	link := default copy		color: ColorValue blue;		cursor: #fingerPointer;		adornment: #underline;		adornmentColor: darkBlue;		yourself.	^self new		name: 'Default';		author: 'Michael Lucas-Smith';		website: 'http://www.cincomsmalltalk.com';		default: default;		set: #(entity name function) style:			(default copy				fontDescription: bold;				paragraphBackgroundColor: (ColorValue brightness: 0.975);				paragraphSpacing: 1;				yourself);		set: #(variable parameter function) font: bold;		set: #(variable parameter function) color: ColorValue darkMagenta;		set: #(variable instance) color: darkBlue;		set: #(variable parameter) color: ColorValue darkMagenta;		set: #(variable) color: ColorValue darkMagenta;		set: #(variable language) color: ColorValue blue;		set: #(variable language thisContext) color: ColorValue orange;		set: #(comment) color: ColorValue darkGreen;		set: #(punctuation definition comment) color: ColorValue darkGreen;		set: #(punctuation definition parameters) color: ColorValue darkCyan;		set: #(punctuation definition array) color: ColorValue darkRed;		set: #(punctuation definition entity) color: ColorValue purple;		set: #(punctuation) color: ColorValue darkGray;		set: #(keyword control) color: ColorValue darkGray;		set: #(keyword missing) style: unknown;		set: #(entity name class) color: ColorValue blue;		set: #(entity name tag) color: ColorValue darkRed;		set: #(string) color: ColorValue darkRed;		set: #(punctuation definition string) color: ColorValue darkRed;		set: #(constant) color: ColorValue darkRed;		set: #(markup link) style: link;		set: #(markup watch) style: self defaultWatchStyle;		set: #(markup breakpoint) style: self defaultBreakpointStyle;		set: #(markup breakpoint disabled) style: self defaultDisabledBreakpointStyle;		set: #(invalid illegal) style: invalid;		set: #(invalid illegal repeatedDefinition) style: (invalid copy color: ColorValue red; yourself);		set: #(invalid error) style: self defaultErrorStyle;		set: #(invalid warning) style: self defaultWarningStyle;		set: #(invalid unused) color: ColorValue olive;		yourself</body><body package="Browser-SourceCodeUI">eightiesDark	&lt;theme&gt;	^self new		name: 'Eighties (Dark)';		author: 'Chris Kempson';		website: 'http://chriskempson.com';		styles: (self dark16: self eightiesColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">eightiesLight	&lt;theme&gt;	^self new		name: 'Eighties (Light)';		author: 'Chris Kempson';		website: 'http://chriskempson.com';		styles: (self light16: self eightiesColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">greenscreenDark	&lt;theme&gt;	| terminalStyle |	(terminalStyle := self defaultStyle copy)		fontDescription: (terminalStyle fontDescription copy			family: #('menlo' 'monaco' 'consolas' 'inconsolata' 'lucida*' 'courier*' 'nimbus mono*' 'mono*');			yourself);		intern.	^self new		name: 'Green Screen (Dark)';		author: 'Chris Kempson';		website: 'http://chriskempson.com';		styles: (self dark16: self greenscreenColors default: terminalStyle)</body><body package="Browser-SourceCodeUI">greenscreenLight	&lt;theme&gt;	| terminalStyle |	(terminalStyle := self defaultStyle copy)		fontDescription: (terminalStyle fontDescription copy			family: #('menlo' 'monaco' 'consolas' 'inconsolata' 'lucida*' 'courier*' 'nimbus mono*' 'mono*');			yourself);		intern.	^self new		name: 'Green Screen (Light)';		author: 'Chris Kempson';		website: 'http://chriskempson.com';		styles: (self light16: self greenscreenColors default: terminalStyle)</body><body package="Browser-SourceCodeUI">hiContrastStyle	"Based off of  the Legacy StyleDescription.	Hi- contrast elements, and an off white background.	This style demonstrates customization of style selector syntax elements."	&lt;theme&gt;	| default fontItalic  bracketColors brackets colorStyleBlock red midBlue orange purple olive darkCyan darkMagenta darkRed  black lightGray  plusBold   green fontBoldItalic |	default := self defaultStyle copy.	fontItalic := self defaultFontDescription copy italic: true.	fontBoldItalic := (self defaultFontDescription copy) boldness: 0.5 ; italic: true.	"fontBold := (self defaultFontDescription copy) boldness: 1."	plusBold := (self defaultFontDescription copy) boldness: 1; pixelSize:  self defaultFontDescription pixelSize + 3.	default paragraphBackgroundColor: (self hexColorValue: 16rFBFBFB).	"Color matching brackets with varying shades of purple."	bracketColors := #(16r660066 16r751975 16r853385 16r944D94 16rA366A3 16rB280B2 16rC299C2 16rD1B2D1).	brackets := OrderedCollection new.	bracketColors keysAndValuesDo: [:index :each |		brackets add:			(Association				key: (Array with: #punctuation with: #brackets with: ('depth', (index - 1) printString) asSymbol)				value: (default copy color: (self hexColorValue: each); intern))].	brackets add: #(punctuation brackets) -&gt; brackets last value.	colorStyleBlock := [:hex | default copy color: (self hexColorValue: hex); intern].	black := colorStyleBlock value: 16r00000000.	red := colorStyleBlock value: 16rff0000.	midBlue := colorStyleBlock value: 16r0000A0.	"blue := colorStyleBlock value: 16r0000FF."	orange := colorStyleBlock value: 16rffa500.	purple := colorStyleBlock value: 16r800080.	olive := colorStyleBlock value: 16r808000.	darkCyan := colorStyleBlock value: 16r008b8b.	darkMagenta := colorStyleBlock value: 16r8b008b.	darkRed := colorStyleBlock value: 16r8b0000.	lightGray :=  colorStyleBlock value: 16rFBFBFB.	green := colorStyleBlock value: 16r005500.	"navy := colorStyleBlock value: 16r000080."	^self new		name: 'Hi Contrast Style';		author: 'Arden Thomas';		website: 'http://www.cincomsmalltalk.com';		styles: (Dictionary new			at: #(default) put: default;			at: #(comment) put: (olive copy fontDescription: fontItalic);			at: #(variable parameter function smalltalk) put: (darkMagenta copy fontDescription: plusBold; intern);			at: #(variable function smalltalk) put: darkMagenta;			at: #(variable block smalltalk) put: black;			at: #(variable parameter block smalltalk) put: black;			at: #(variable temporary smalltalk) put: black;			at: #(variable parameter temporary smalltalk) put: black;			at: #(variable) put: darkCyan;			at: #(punctuation definition comment) put: olive;			at: #(punctuation definition string) put: midBlue;			at: #(punctuation definition parameters) put: darkCyan;			at: #(punctuation definition array) put: black;			at: #(punctuation definition entity) put: purple;			addAll: brackets;			at: #(punctuation endOfStatement) put: black;			at: #(punctuation cascade) put: black;			at: #(punctuation assignment) put: black;			at: #(punctuation delimiters) put: black;			at: #(keyword other binaryMethod) put: midBlue;			at: #(keyword operator) put: midBlue;			at: #(keyword missing) put: red;			at: #(keyword) put: (midBlue "copy  fontDescription: fontItalic; intern");			at: #(entity name function) put: (black copy	fontDescription: plusBold;	intern);			at: #(entity name class) put: black;			at: #(entity name tag) put: midBlue;			at: #(string) put: darkRed;			at: #(constant character) put: darkRed;			at: #(constant symbol) put: darkRed;			at: #(constant numeric) put: darkRed;			at: #(constant language false smalltalk) put: black;			at: #(constant language nil smalltalk) put: black;			at: #(constant language true smalltalk) put: black;			at: #(variable language self smalltalk) put: (green copy fontDescription: fontBoldItalic); 			at: #(variable language super smalltalk) put: darkCyan;			at: #(variable language thisContext smalltalk) put: orange;			at: #(meta selector) put: black;			at: #(meta selector paragraphBackgroundColor) put: lightGray;			at: #(markup link) put: (midBlue copy				cursor: #fingerPointer;				adornment: #underline;				adornmentColor: (self hexColorValue: 16r000080);				intern);			at: #(markup inserted) put: black;			at: #(markup deleted) put: black;			at: #(markup changed) put: black;			at: #(invalid illegal) put: (red copy adornmentColor: darkRed; adornment: #underline; intern);			at: #(invalid illegal repeatedDefinition) put: red;			at: #(invalid error) put: self defaultErrorStyle;			at: #(invalid warning) put: self defaultWarningStyle;			at: #(markup watch) put: self defaultWatchStyle;			at: #(markup breakpoint) put: self defaultBreakpointStyle;			at: #(markup breakpoint disabled) put: self defaultDisabledBreakpointStyle;			yourself)</body><body package="Browser-SourceCodeUI">kempsonDark	&lt;theme&gt;	^self new		name: 'Kempson (Dark)';		author: 'Chris Kempson';		website: 'http://chriskempson.com';		styles: (self dark16: self defaultColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">kempsonLight	&lt;theme&gt;	^self new		name: 'Kempson (Light)';		author: 'Chris Kempson';		website: 'http://chriskempson.com';		styles: (self light16: self defaultColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">legacyStyle	"Translation of a legacy StyleDescription.	 Demonstrates style selector syntax required to distinguish various legacy elements."	&lt;theme&gt;	| default fontItalic fontBold bracketColors brackets colorStyleBlock red blue orange purple olive darkCyan darkMagenta darkRed navy black |	default := self defaultStyle.	fontItalic := self defaultFontDescription copy italic: true.	fontBold := (self defaultFontDescription copy) boldness: 0.7.	"Color matching brackets with varying shades of purple."	bracketColors := #(16r660066 16r751975 16r853385 16r944D94 16rA366A3 16rB280B2 16rC299C2 16rD1B2D1).	brackets := OrderedCollection new.	bracketColors keysAndValuesDo: [:index :each |		brackets add:			(Association				key: (Array with: #punctuation with: #brackets with: ('depth', (index - 1) printString) asSymbol)				value: (default copy color: (self hexColorValue: each); intern))].	brackets add: #(punctuation brackets) -&gt; brackets last value.	colorStyleBlock := [:hex | default copy color: (self hexColorValue: hex); intern].	black := colorStyleBlock value: 16r00000000.	red := colorStyleBlock value: 16rff0000.	blue := colorStyleBlock value: 16r0000ff.	orange := colorStyleBlock value: 16rffa500.	purple := colorStyleBlock value: 16r800080.	olive := colorStyleBlock value: 16r808000.	darkCyan := colorStyleBlock value: 16r008b8b.	darkMagenta := colorStyleBlock value: 16r8b008b.	darkRed := colorStyleBlock value: 16r8b0000.	navy := colorStyleBlock value: 16r000080.	^self new		name: 'Legacy Style';		author: 'Cincom';		website: 'http://www.cincom.com';		styles: (Dictionary new			at: #(default) put: default;			at: #(comment) put: (olive copy fontDescription: fontItalic);			at: #(variable parameter function smalltalk) put: (darkMagenta copy				fontDescription: fontBold;				intern);			at: #(variable function smalltalk) put: darkMagenta;			at: #(variable block smalltalk) put: darkCyan;			at: #(variable parameter block smalltalk) put: darkCyan;			at: #(variable temporary smalltalk) put: darkCyan;			at: #(variable parameter temporary smalltalk) put: darkCyan;			at: #(variable) put: navy;			at: #(punctuation definition comment) put: olive;			at: #(punctuation definition string) put: black;			at: #(punctuation definition parameters) put: darkCyan;			at: #(punctuation definition array) put: darkRed;			at: #(punctuation definition entity) put: purple;			addAll: brackets;			at: #(punctuation endOfStatement) put: black;			at: #(punctuation cascade) put: black;			at: #(punctuation assignment) put: black;			at: #(punctuation delimiters) put: black;			at: #(keyword other binaryMethod) put: black;			at: #(keyword operator) put: black;			at: #(keyword missing) put: red;			at: #(keyword) put: black;			at: #(entity name function) put: (black copy 				fontDescription: fontBold;				intern);			at: #(entity name class) put: purple;			at: #(entity name tag) put: darkRed;			at: #(string) put: black;			at: #(constant character) put: darkRed;			at: #(constant symbol) put: darkRed;			at: #(constant numeric) put: darkRed;			at: #(constant language false smalltalk) put: darkRed;			at: #(constant language nil smalltalk) put: darkRed;			at: #(constant language true smalltalk) put: darkRed;			at: #(variable language self smalltalk) put: blue;			at: #(variable language super smalltalk) put: blue;			at: #(variable language thisContext smalltalk) put: orange;			at: #(meta selector) put: black;			at: #(markup link) put: (blue copy				cursor: #fingerPointer;				adornment: #underline;				adornmentColor: (self hexColorValue: 16r000080);				intern);			at: #(markup inserted) put: black;			at: #(markup deleted) put: black;			at: #(markup changed) put: black;			at: #(invalid illegal) put: (red copy adornmentColor: darkRed; adornment: #underline; intern);			at: #(invalid illegal repeatedDefinition) put: red;			at: #(invalid error) put: self defaultErrorStyle;			at: #(invalid warning) put: self defaultWarningStyle;			at: #(markup watch) put: self defaultWatchStyle;			at: #(markup breakpoint) put: self defaultBreakpointStyle;			at: #(markup breakpoint disabled) put: self defaultDisabledBreakpointStyle;			yourself)</body><body package="Browser-SourceCodeUI">mochaDark	&lt;theme&gt;	^self new		name: 'Mocha (Dark)';		author: 'Chris Kempson';		website: 'http://chriskempson.com';		styles: (self dark16: self mochaColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">mochaLight	&lt;theme&gt;	^self new		name: 'Mocha (Light)';		author: 'Chris Kempson';		website: 'http://chriskempson.com';		styles: (self light16: self mochaColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">monokaiDark	&lt;theme&gt;	^self new		name: 'Monokai (Dark)';		author: 'Wimer Hazenberg';		website: 'http://www.monokai.nl';		styles: (self dark16: self monokaiColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">monokaiLight	&lt;theme&gt;	^self new		name: 'Monokai (Light)';		author: 'Wimer Hazenberg';		website: 'http://www.monokai.nl';		styles: (self light16: self monokaiColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">oceanDark	&lt;theme&gt;	^self new		name: 'Ocean (Dark)';		author: 'Chris Kempson';		website: 'http://chriskempson.com';		styles: (self dark16: self oceanColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">oceanLight	&lt;theme&gt;	^self new		name: 'Ocean (Light)';		author: 'Chris Kempson';		website: 'http://chriskempson.com';		styles: (self light16: self oceanColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">railscastsDark	&lt;theme&gt;	^self new		name: 'Railscasts (Dark)';		author: 'Ryan Bates';		website: 'http://railscasts.com';		styles: (self dark16: self railscastsColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">railscastsLight	&lt;theme&gt;	^self new		name: 'Railscasts (Light)';		author: 'Ryan Bates';		website: 'http://railscasts.com';		styles: (self light16: self railscastsColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">randomColors	&lt;theme&gt;	| defaultStyle random randomStyle brackets randomColor |	defaultStyle := self defaultStyle.	random := Random new.	randomColor := [ColorValue hue: random next saturation: (random next * 0.75 + 0.125) brightness: 0.75].	randomStyle := [defaultStyle copy		color: randomColor value;		intern].	brackets := OrderedCollection new.	(self lighten: randomColor value depth: 8) keysAndValuesDo: [:index :each |		brackets add:			(Association				key: (Array with: #punctuation with: #brackets with: ('depth', (index - 1) printString) asSymbol)				value: (defaultStyle copy					color: each;					intern))].	brackets add: #(punctuation brackets) -&gt; brackets last value.	^self new		name: 'Random Colors';		author: 'Cincom';		website: 'http://www.cincom.com';		styles: (Dictionary new			at: #(default) put: defaultStyle;			at: #(comment) put: randomStyle value;			at: #(variable parameter function) put: randomStyle value;			at: #(variable temporary) put: randomStyle value;			at: #(variable) put: randomStyle value;			at: #(punctuation definition comment) put: randomStyle value;			at: #(punctuation definition string) put: randomStyle value;			at: #(punctuation definition parameters) put: randomStyle value;			at: #(punctuation definition array) put: randomStyle value;			at: #(punctuation definition entity) put: randomStyle value;			at: #(punctuation endOfStatement) put: randomStyle value;			addAll: brackets;			at: #(punctuation cascade) put: randomStyle value;			at: #(punctuation assignment) put: randomStyle value;			at: #(punctuation delimiters) put: randomStyle value;			at: #(keyword other binaryMethod) put: randomStyle value;			at: #(keyword operator) put: randomStyle value;			at: #(keyword missing) put: (randomStyle value copy adornment: #dashedUnderline; intern);			at: #(keyword) put: randomStyle value;			at: #(entity name function) put: (randomStyle value copy				paragraphBackgroundColor: (ColorValue brightness: 0.9);				intern);			at: #(entity name class) put: randomStyle value;			at: #(entity name tag) put: randomStyle value;			at: #(string) put: randomStyle value;			at: #(constant character) put: randomStyle value;			at: #(constant symbol) put: randomStyle value;			at: #(constant numeric) put: randomStyle value;			at: #(meta selector) put: randomStyle value;			at: #(markup link) put: (randomStyle value copy				cursor: #fingerPointer;				adornment: #underline;				adornmentColor: ColorValue blue;				intern);			at: #(markup inserted) put: randomStyle value;			at: #(markup deleted) put: randomStyle value;			at: #(markup changed) put: randomStyle value;			at: #(invalid illegal) put: (randomStyle value copy adornmentColor: (ColorValue red: 215 / 255 green: 39 / 255 blue: 39 / 255); adornment: #bottomline; intern);			at: #(invalid error) put: self defaultErrorStyle;			at: #(invalid warning) put: self defaultWarningStyle;			at: #(markup watch) put: self defaultWatchStyle;			at: #(markup breakpoint) put: self defaultBreakpointStyle;			at: #(markup breakpoint disabled) put: self defaultDisabledBreakpointStyle;			yourself)</body><body package="Browser-SourceCodeUI">solarizedDark	&lt;theme&gt;	^self new		name: 'Solarized (Dark)';		author: 'Ethan Schoonover';		website: 'http://ethanschoonover.com/solarized';		styles: (self dark16: self solarizedColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">solarizedLight	&lt;theme&gt;	^self new		name: 'Solarized (Light)';		author: 'Ethan Schoonover';		website: 'http://ethanschoonover.com/solarized';		styles: (self light16: self solarizedColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">thirtyTwentyFourDark	&lt;theme&gt;	^self new		name: '3024 (Dark)';		author: 'Jan T. Sott';		website: 'http://github.com/idleberg';		styles: (self dark16: self thirtyTwentyFourColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">thirtyTwentyFourLight	&lt;theme&gt;	^self new		name: '3024 (Light)';		author: 'Jan T. Sott';		website: 'http://github.com/idleberg';		styles: (self light16: self thirtyTwentyFourColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">tomorrowDark	&lt;theme&gt;	^self new		name: 'Tomorrow (Dark)';		author: 'Chris Kempson';		website: 'http://chriskempson.com';		styles: (self dark16: self tomorrowColors default: self defaultStyle)</body><body package="Browser-SourceCodeUI">tomorrowLight	&lt;theme&gt;	^self new		name: 'Tomorrow (Light)';		author: 'Chris Kempson';		website: 'http://chriskempson.com';		styles: (self light16: self tomorrowColors default: self defaultStyle)</body></methods><methods><class-id>Refactory.Browser.SourceCodeTheme class</class-id> <category>pragmas</category><body package="Browser-SourceCodeUI">pragmas	&lt;pragmas: #class&gt;	^#(theme)</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - evaluating</category><body package="Browser-SourceCodeUI">displayDate	&lt;state: #active command: #codeSnippetInsertDate&gt;	self insert: Date today printString</body><body package="Browser-SourceCodeUI">doIt	&lt;state: #active command: #doIt&gt;	&lt;menu: #(contextMenu) position: 40.1 insert: #(		command: #doIt		visibility: #canEvaluateCode		enablement: #canEvaluateSelection)&gt;	self hasSelection ifFalse: [self selectParagraph].	^self doItValue: (self evaluateExpressionDo: [:result | result] retry: [self doIt])</body><body package="Browser-SourceCodeUI">inspectIt	&lt;state: #active command: #inspectIt&gt;	&lt;menu: #(contextMenu) position: 40.2 insert: #(		command: #inspectIt		visibility: #canEvaluateCode		enablement: #canEvaluateSelection)&gt;	self hasSelection ifFalse: [self selectParagraph].	self evaluateExpressionDo: [:result | result inspect] retry: [self inspectIt]</body><body package="Browser-SourceCodeUI">printIt	&lt;state: #active command: #printIt&gt;	&lt;menu: #(contextMenu) position: 40.3 insert: #(		command: #printIt		visibility: #canEvaluateCode		enablement: #canEvaluateSelection)&gt;	| insertPosition |	self hasSelection ifFalse: [self selectParagraph].	insertPosition := self selectionStopPosition.	self evaluateExpressionDo: [:result |		self collapsePosition: insertPosition.		self insert: ' ', result printString.		self anchorPosition: insertPosition]		retry: [self printIt]</body><body package="Browser-SourceCodeUI">timeIt	&lt;state: #active command: #timeIt&gt;	&lt;menu: #(contextMenu) position: 40.4 insert: #(		command: #timeIt		visibility: #canEvaluateCode		enablement: #canEvaluateSelection)&gt;	| repeats time timingDocument timingStyle average script compiled context receiver selectionInterval |	repeats := 1.	InputState default shiftDown ifTrue: [repeats := 10].		self hasSelection ifFalse: [self selectParagraph].	selectionInterval := self selectionInterval.	script := self selection asString trimSeparators.	timingStatistics first = script ifFalse: [timingStatistics := OrderedCollection with: script].	self compileMethod: #OnType.	compiled := self		compileExpressionBetween: selectionInterval first and: selectionInterval last		reason: #OnSave retry: [:start :stop |			self selectBetween: start and: stop.			self timeIt].	compiled ifNil: [^self].	context := self doItContext.	receiver := self doItReceiver.	UI.Cursor wait showWhile: [		repeats timesRepeat: [			time := Time millisecondsToRun: [				context isNil					ifTrue: [receiver performMethod: compiled]					ifFalse: [receiver performMethod: compiled with: context]].			timingStatistics add: time]].		average := (timingStatistics allButFirst: 1) inject: 0 into: [:all :each | all + each].	average := average / (timingStatistics size - 1).		timingStyle := self theme default copy		padding: ((0 @ 0) corner: (0 @ 3));		color: ColorValue white;		backgroundColor: ColorValue orange;		paragraphBackgroundColor: CoverageValue transparent;		intern.	timingDocument := Document fromString: ' Execution time: ~', time printString, 'ms | ' style: timingStyle.	timingDocument		insertAt: timingDocument size		with: (DocumentSpark fromData: (timingStatistics allButFirst: 1) style: timingStyle) asDocument.	timingDocument		insertAt: timingDocument size		with: ' | average: ~', average asFloat floor printString, 'ms of ', (timingStatistics size - 1) printString, ' samples '		style: timingStyle.	needsRedecoration := false.		self invalidateSelectionWhile: [		flow replaceBetween: selectionInterval first and: ((selectionInterval first + 1) min: document size) apply: [:aStyle |			aStyle copy				annotationStyle: #dodge;				annotation: timingDocument;				yourself]]</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - zooming</category><body package="Browser-SourceCodeUI">commandZoomIn: event	&lt;state: #active command: #zoomIn&gt;	&lt;state: #activeReadOnly command: #zoomIn&gt;	self zoomIn</body><body package="Browser-SourceCodeUI">commandZoomOut: event	&lt;state: #active command: #zoomOut&gt;	&lt;state: #activeReadOnly command: #zoomOut&gt;	self zoomOut</body><body package="Browser-SourceCodeUI">commandZoomReset: event	&lt;state: #active command: #zoomReset&gt;	&lt;state: #activeReadOnly command: #zoomReset&gt;	self zoomReset</body><body package="Browser-SourceCodeUI">mouseWheelZoomWindows: event	"When on the windows platform, allow resizing of the current theme fontSize using control+wheel"	&lt;state: #active event: #MouseWheel&gt;	&lt;state: #activeReadOnly event: #MouseWheel&gt;	NativeGUIPolicy current shouldZoomWithModifiedMouseWheel ifFalse: [^self].	InputState default ctrlDown ifFalse: [^self].	event up		ifTrue: [self zoomOut]		ifFalse: [self zoomIn]</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - browsing</category><body package="Browser-SourceCodeUI">browseClass	&lt;state: #active command: #browseClassHierarchy&gt;	&lt;menu: #(contextMenu) position: 30.1 insert: #(		command: #browseClassHierarchy		visibility: #isClassNode)&gt;	| binding |	binding := self selectedVariableBinding.	binding isNil ifTrue: [^self].	(InputState default shiftDown and: [evaluator notNil and: [evaluator respondsTo: #navigateToClass:]]) ifTrue: [		^evaluator navigateToClass: binding].	(RefactoringBrowser open navigator)		setBinding: binding;		changed</body><body package="Browser-SourceCodeUI">browseGlobalReferences	&lt;state: #active command: #browseGlobalClassReferences&gt;	&lt;state: #active command: #browseGlobalSharedVariableReferences&gt;	&lt;menu: #(contextMenu) position: 30.2 insert: #(		command: #browseGlobalClassReferences		visibility: #isClassNode)&gt;	&lt;menu: #(contextMenu) position: 30.2 insert: #(		command: #browseGlobalSharedVariableReferences		visibility: #isSharedVariableNode)&gt;	| binding results |	binding := self selectedVariableBinding.	results := BrowserEnvironment new referencesTo: binding.	results notEmpty		ifTrue: [results openEditor]		ifFalse: [Dialog warn:			(#NoReferencesOf1pFound &lt;&lt; #browser &gt;&gt; 'No references of &lt;1p&gt; found'				expandMacrosWith: binding printString)]</body><body package="Browser-SourceCodeUI">browseImplementors	&lt;state: #active command: #browseGlobalImplementors&gt;	&lt;menu: #(contextMenu) position: 30.2 insert: #(		command: #browseGlobalImplementors		visibility: #canBrowseImplementors)&gt;	| node results selector |	results := nil.	(self isVariableNode and: [self selectionNode name = 'super']) ifTrue: [		(node := self selectionNode) isNil ifTrue: [^self].		selector := node parent selector.		results := (BrowserEnvironment new forClasses: self doItReceiverClass allSuperclasses)			implementorsOf: self parseTree selector].	self isMessageNode ifTrue: [		(node := self selectionNode) isNil ifTrue: [^self].		selector := node selector.		results := BrowserEnvironment new implementorsOf: selector].	results == nil ifTrue: [^self].	results notEmpty		ifTrue: [results openEditor]		ifFalse: [Dialog warn:			(#NoImplementorsOf1pFound &lt;&lt; #browser &gt;&gt; 'No implementors of &lt;1p&gt; found'				expandMacrosWith: selector)]</body><body package="Browser-SourceCodeUI">browseInstanceVariable	&lt;state: #active command: #browseInstVarRefs&gt;	&lt;menu: #(contextMenu) position: 30.1 insert: #(		command: #browseInstVarRefs		visibility: #isInstanceVariableNode)&gt;	| node |	self isInstanceVariableNode ifFalse: [^self].	(node := self selectionNode) isNil ifTrue: [^self].	evaluator navigateToInstanceVariable: node name</body><body package="Browser-SourceCodeUI">browseMethod	&lt;state: #active command: #browseMethod&gt;	&lt;menu: #(contextMenu) position: 30.3 insert: #(		command: #browseMethod		label: #browseMethodLabel		visibility: #canBrowseMethod)&gt;	| node receiverClass superCall selector method |	node := self selectionNode.	(receiverClass := self selectionReceiverClass) == nil ifTrue: [^self].	selector := (superCall := node isVariable and: [node name = 'super'])		ifTrue: [node parent selector]		ifFalse: [node selector].	method := (MethodDefinition class: receiverClass selector: selector) resolve.	method == nil ifTrue: [^Dialog warn: #MessageNotUnderstood &lt;&lt; #dialogs &gt;&gt; 'This message is not implemented'].	method := method method.	(RefactoringBrowser open navigator)		perform: (superCall ifTrue: [#beHierarchy] ifFalse: [#yourself]);		selectClass: method mclass;		setSelector: selector;		changed</body><body package="Browser-SourceCodeUI">browseSenders	&lt;state: #active command: #browseGlobalSenders&gt;	&lt;menu: #(contextMenu) position: 30.1 insert: #(		command: #browseGlobalSenders		visibility: #isMessageNode)&gt;	| node results |	self isMessageNode ifFalse: [^self].	(node := self selectionNode) isNil ifTrue: [^self].	(results := BrowserEnvironment new referencesTo: node selector)		searchStrings: (Array with: node selector keywords first).	results notEmpty		ifTrue: [results openEditor]		ifFalse: [Dialog warn:			(#NoSendersOf1pFound &lt;&lt; #browser &gt;&gt; 'No senders of &lt;1p&gt; found'				expandMacrosWith: node selector)]</body><body package="Browser-SourceCodeUI">browseSharedVariable	&lt;state: #active command: #browseSharedVariable&gt;	&lt;state: #active command: #browseNameSpace&gt;	&lt;menu: #(contextMenu) position: 30.1 insert: #(		command: #browseSharedVariable		visibility: #isSharedVariableNode)&gt;	&lt;menu: #(contextMenu) position: 30.1 insert: #(		command: #browseNameSpace		visibility: #isNameSpaceNode)&gt;	| binding |	binding := self selectedVariableBinding.	binding isNil ifTrue: [^self].	(RefactoringBrowser open navigator)		setBinding: binding;		changed</body><body package="Browser-SourceCodeUI">browseSymbolImplementors	&lt;state: #active command: #globalSymbollImplementors&gt;	&lt;menu: #(contextMenu) position: 30.1 insert: #(		command: #globalSymbollImplementors		visibility: #isSymbolNode)&gt;	| node results |	self isSymbolNode ifFalse: [^self].	(node := self selectionNode) isNil ifTrue: [^self].	results := BrowserEnvironment new implementorsOf: node value.	results notEmpty		ifTrue: [results openEditor]		ifFalse: [Dialog warn:			(#NoImplementorsOf1pFound &lt;&lt; #browser &gt;&gt; 'No implementors of &lt;1p&gt; found'				expandMacrosWith: node value)]</body><body package="Browser-SourceCodeUI">browseSymbolReferences	&lt;state: #active command: #globalSymbolReferences&gt;	&lt;menu: #(contextMenu) position: 30.2 insert: #(		command: #globalSymbolReferences		visibility: #isSymbolNode)&gt;	| node results references |	node := self selectionNode.	self isSymbolNode ifFalse: [^self].	results := OrEnvironment		onEnvironment: (references := BrowserEnvironment new referencesTo: node value)		or: (BrowserEnvironment new implementorsOf: node value).	results label: references label.	results notEmpty		ifTrue: [results openEditor]		ifFalse: [Dialog warn:			(#NoSendersOf1pFound &lt;&lt; #browser &gt;&gt; 'No senders of &lt;1p&gt; found'				expandMacrosWith: node value)]</body><body package="Browser-SourceCodeUI">browseTemporaryVariable	&lt;state: #active command: #browseTempVarRefs&gt;	&lt;menu: #(contextMenu) position: 30.1 insert: #(		command: #browseTempVarRefs		visibility: #isTemporaryOrParameterVariableNode)&gt;	| node |	self isTemporaryOrParameterVariableNode ifFalse: [^self].	(node := self selectionNode) isNil ifTrue: [^self].	highlights := node referencingNodes collect: [:each |		DocumentHighlight color: ColorValue lightYellow between: (each start - 1) and: each stop direction: #rightToLeft].	self invalidate</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>private - decoration</category><body package="Browser-SourceCodeUI">redecorate	"Perform the same job as decorate, but ensure that the idle time has passed so that decoration will happen for all decorators."	&lt;state: #active modifiers: #() key: #Escape&gt;	flow device isOpen ifFalse: [^self].	self isOpen ifFalse: [^self].	self resetIdle.	self invalidationSuppressWhile: [self compileMethod: #OnIdle].	self invalidate</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - shortcuts</category><body package="Browser-SourceCodeUI">shortcutColonEqual	&lt;state: #active command: #codeSnippetColonEqual&gt;	self insert: ':=' copy</body><body package="Browser-SourceCodeUI">shortcutIfFalse	&lt;state: #active command: #codeSnippetIfFalse&gt;	self insert: 'ifFalse: ' copy</body><body package="Browser-SourceCodeUI">shortcutIfTrue	&lt;state: #active command: #codeSnippetIfTrue&gt;	self insert: 'ifTrue: ' copy</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - tabbing</category><body package="Browser-SourceCodeUI">tab	&lt;state: #active key: #Tab&gt;	self insert: (String with: Character tab)</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - editing</category><body package="Browser-SourceCodeUI">correct	&lt;itemInMenu: #(contextMenu) position: 1&gt;		^(MenuItem labeled: 'Correct...')		visibility: #isCorrectableNode;		submenu: [self correctionsMenu];		yourself</body><body package="Browser-SourceCodeUI">indentSelection	&lt;state: #active command: #indent&gt;		| selection position startCursor stopCursor |	self hasSelection ifFalse: [^self].	startCursor := self selectionStartCursor.	stopCursor := self selectionStopCursor.	inputCursor := startCursor x = self selectionStartLine size		ifTrue: [0 @ (startCursor y + 1)]		ifFalse: [flow cursorMoveToStartOfLine: startCursor].	anchorCursor := stopCursor x = 0		ifTrue: [stopCursor]		ifFalse: [flow cursorMoveToEndOfLine: stopCursor].	selection := self selection.	position := selection size.	[position := selection previousNewlineBreakBefore: position.	selection insertAt: position with: (String with: Character tab) style: currentStyle.	position = 0] whileFalse.	self invalidateSelectionWhile: [		self performChange: #indentSelection with: selection.		anchorCursor := flow cursorAtPosition: self anchorPosition - selection size direction: #rightToLeft]</body><body package="Browser-SourceCodeUI">insertNewline	&lt;state: #active key: #Enter&gt;	self insert: (String with: Character cr).	self endCurrentEdit</body><body package="Browser-SourceCodeUI">unindentSelection	&lt;state: #active command: #unindent&gt;		| selection position startCursor stopCursor |	self hasSelection ifFalse: [^self].	startCursor := self selectionStartCursor.	stopCursor := self selectionStopCursor.	inputCursor := startCursor x = self selectionStartLine size		ifTrue: [0 @ (startCursor y + 1)]		ifFalse: [flow cursorMoveToStartOfLine: startCursor].	anchorCursor := stopCursor x = 0		ifTrue: [stopCursor]		ifFalse: [flow cursorMoveToEndOfLine: stopCursor].	selection := self selection.	position := selection size.	[position := selection previousNewlineBreakBefore: position.	(selection at: position + 1) == Character tab ifTrue: [		selection replaceBetween: position and: position + 1 with: String new].	position = 0] whileFalse.	self invalidateSelectionWhile: [		self performChange: #indentSelection with: selection.		anchorCursor := flow cursorAtPosition: self anchorPosition - selection size direction: #rightToLeft]</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>refactorings - instance variables</category><body package="Browser-SourceCodeUI">abstractInstanceVariable	&lt;state: #active command: #abstractInstanceVariable&gt;	&lt;menu: #(contextMenu) position: 60.8 insert: #(		command: #abstractInstanceVariable		visibility: #isInstanceVariableNode)&gt;	| node |	node := self selectionNode.	(node isNil or: [node isVariable not]) ifTrue: [		^Dialog warn: #CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node'].	node isLocalVariable ifTrue: [^self].	(self compileMethod: #OnSave) ifNil: [^self].	self abstractInstanceVariable: node name</body><body package="Browser-SourceCodeUI">addInstanceVariable	&lt;state: #active command: #addInstanceVariable&gt;	&lt;menu: #(contextMenu) position: 60.14 insert: #(		command: #addInstanceVariable		visibility: #shouldOfferAddInstanceVariable)&gt;	evaluator addInstanceVariable</body><body package="Browser-SourceCodeUI">addUndeclaredInstanceVariable	&lt;menu: #(contextMenu) position: 60.13 insert: #(		command: #addInstanceVariable		visibility: #isUndeclaredVariableNode)&gt;	self addInstanceVariable: self selectionNode name</body><body package="Browser-SourceCodeUI">createInstanceVariableAccessors	&lt;state: #active command: #createInstanceVariableAccessors&gt;	&lt;menu: #(contextMenu) position: 60.9 insert: #(		command: #createInstanceVariableAccessors		visibility: #isInstanceVariableNode)&gt;	| node |	node := self selectionNode.	(node isNil or: [node isVariable not]) ifTrue: [		^Dialog warn: #CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node'].	node isLocalVariable ifTrue: [^self].	(self compileMethod: #OnSave) ifNil: [^self].	self createInstanceVariableAccessors: node name</body><body package="Browser-SourceCodeUI">protectInstanceVariable	&lt;state: #active command: #protectInstanceVariable&gt;	&lt;menu: #(contextMenu) position: 60.10 insert: #(		command: #protectInstanceVariable		visibility: #isInstanceVariableNode)&gt;	| node |	node := self selectionNode.	(node isNil or: [node isVariable not]) ifTrue: [		^Dialog warn: #CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node'].	node isLocalVariable ifTrue: [^self].	(self compileMethod: #OnSave) ifNil: [^self].	self protectInstanceVariable: node name</body><body package="Browser-SourceCodeUI">pushDownInstanceVariable	&lt;state: #active command: #pushDownInstanceVariable&gt;	&lt;menu: #(contextMenu) position: 60.12 insert: #(		command: #pushDownInstanceVariable		visibility: #isInstanceVariableNode)&gt;	| node |	node := self selectionNode.	(node isNil or: [node isVariable not]) ifTrue: [		^Dialog warn: #CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node'].	node isLocalVariable ifTrue: [^self].	(self compileMethod: #OnSave) ifNil: [^self].	self pushDownInstanceVariable: node name</body><body package="Browser-SourceCodeUI">pushUpInstanceVariable	&lt;state: #active command: #pushUpInstanceVariable&gt;	&lt;menu: #(contextMenu) position: 60.11 insert: #(		command: #pushUpInstanceVariable		visibility: #isInstanceVariableNode)&gt;	| node |	node := self selectionNode.	(node isNil or: [node isVariable not]) ifTrue: [		^Dialog warn: #CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node'].	node isLocalVariable ifTrue: [^self].	(self compileMethod: #OnSave) ifNil: [^self].	self pushUpInstanceVariable: node name</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>refactorings - selection</category><body package="Browser-SourceCodeUI">extractMethod	&lt;state: #active command: #extractMethod&gt;	&lt;menu: #(contextMenu) position: 70.1 insert: #(		command: #extractMethod		visibility: #canExtractSelection		enablement: #hasSelection)&gt;		| selectionInterval |	self hasSelection ifFalse: [^self].	selectionInterval := self selectionInterval.	evaluator updateRequest ifFalse: [^self].	(self compileMethod: #OnSave) ifNil: [^self].		evaluator performRefactoring:		((ExtractMethodRefactoring			extract: ((selectionInterval first + 1) to: selectionInterval last)			from: parseTree selector			in: self doItReceiverClass)				sourceTree: parseTree;				yourself)</body><body package="Browser-SourceCodeUI">extractToComponent	&lt;state: #active command: #extractToComponent&gt;	&lt;menu: #(contextMenu) position: 70.2 insert: #(		command: #extractToComponent		visibility: #canExtractSelection		enablement: #hasSelection)&gt;	| selectionInterval |	self hasSelection ifFalse: [^self].	selectionInterval := self selectionInterval.	evaluator updateRequest ifFalse: [^self].	(self compileMethod: #OnSave) ifNil: [^self].		evaluator performRefactoring:		((ExtractMethodToComponentRefactoring			extract: ((selectionInterval first + 1) to: selectionInterval last)			from: parseTree selector			in: self doItReceiverClass)				sourceTree: parseTree;				yourself)</body><body package="Browser-SourceCodeUI">extractToTemporary	&lt;state: #active command: #extractToTemp&gt;	&lt;menu: #(contextMenu) position: 70.3 insert: #(		command: #extractToTemp		visibility: #canExtractSelection		enablement: #hasSelection)&gt;	| node newName selectionInterval |	self hasSelection ifFalse: [^self].	selectionInterval := self selectionInterval.	evaluator updateRequest ifFalse: [^self].		node := self selectionNode.	(node isNil or: [node isValue not]) ifTrue: [		^Dialog warn: #CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node'].	(self compileMethod: #OnSave) ifNil: [^self].	newName := Dialog request: #EnterNameForTemporaryC &lt;&lt; #browser &gt;&gt; 'Enter name forTemporary:'.	evaluator performRefactoring:		((ExtractToTemporaryRefactoring			extract: ((selectionInterval first + 1) to: selectionInterval last)			to: newName			from: parseTree selector			in: self doItReceiverClass)				sourceTree: parseTree;				yourself)</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>refactorings - source</category><body package="Browser-SourceCodeUI">format	"Format the document using the receivers current parser."	&lt;state: #active command: #format&gt;	| formatter |	(self compileMethod: #OnSave) ifNil: [^self].	formatter := parseTree formatterClass new.	self invalidateSelectionWhile: [		self basicSelectAll.		self insert: (formatter format: parseTree)]</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>refactorings - variables</category><body package="Browser-SourceCodeUI">bindTight	&lt;state: #active command: #bindTight&gt;	&lt;menu: #(contextMenu) position: 60.5 insert: #(		command: #bindTight		visibility: #canBindTight)&gt;		| node |	node := self selectionNode.	(node isNil or: [node isVariable not]) ifTrue: [		^Dialog warn: #CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node'].	(self compileMethod: #OnSave) ifNil: [^self].	evaluator performRefactoring:		((MoveVariableDefinitionRefactoring			bindTight: node sourceInterval			in: self doItReceiverClass			selector: parseTree selector)				sourceTree: parseTree;				yourself)</body><body package="Browser-SourceCodeUI">createInstVar	&lt;state: #active command: #createInstVar&gt;	&lt;menu: #(contextMenu) position: 60.3 insert: #(		command: #createInstVar		visibility: #canCreateInstVar)&gt;		| node |	node := self selectionNode.	(node isNil or: [node isVariable not]) ifTrue: [		^Dialog warn: (#CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node')].	(self compileMethod: #OnSave) ifNil: [^self].	evaluator performRefactoring:		(TemporaryToInstanceVariableRefactoring 			class: self doItReceiverClass			selector: parseTree selector			variable: node name)</body><body package="Browser-SourceCodeUI">inlineParameter	&lt;state: #active command: #inlineParameter&gt;	&lt;menu: #(contextMenu) position: 60.4 insert: #(		command: #inlineParameter		visibility: #canInlineParameter)&gt;		| node |	node := self selectionNode.	(node isNil or: [node isVariable not]) ifTrue: [		^Dialog  warn: (#CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node')].	(self compileMethod: #OnSave) ifNil: [^self].	evaluator inlineParameter: node name selector: parseTree selector</body><body package="Browser-SourceCodeUI">inlineTemporary	&lt;state: #active command: #inlineTemporary&gt;	&lt;menu: #(contextMenu) position: 60.7 insert: #(		command: #inlineTemporary		visibility: #canInlineTemporary)&gt;		| node selectionInterval |	self hasSelection ifFalse: [^self].	selectionInterval := self selectionInterval.	evaluator updateRequest ifFalse: [^self].		node := self selectionNode.	(node isNil or: [node isAssignment not]) ifTrue: [		^Dialog warn: #CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node'].	(self compileMethod: #OnSave) ifNil: [^self].	evaluator performRefactoring:		((InlineTemporaryRefactoring			inline: ((selectionInterval first + 1) to: selectionInterval last)			from: parseTree selector			in: self doItReceiverClass)				sourceTree: parseTree;				yourself)</body><body package="Browser-SourceCodeUI">removeParameter	&lt;state: #active command: #removeParameter&gt;	&lt;menu: #(contextMenu) position: 60.2 insert: #(		command: #removeParameter		visibility: #canRemoveParameter)&gt;	| node |	node := self selectionNode.	(node isNil or: [node isVariable not]) ifTrue: [		^Dialog warn: (#CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node')].	(self compileMethod: #OnSave) ifNil: [^self].	evaluator removeParameter: node name selector: parseTree selector</body><body package="Browser-SourceCodeUI">renameVariable	&lt;state: #active command: #renameVariable&gt;	&lt;menu: #(contextMenu) position: 60.1 insert: #(		command: #renameVariable		visibility: #canRenameVariable)&gt;	| newName node |	node := self selectionNode.	(node isNil or: [node isVariable not]) ifTrue: [		^Dialog warn: #CouldNotFindTheNode &lt;&lt; #browser &gt;&gt; 'Could not find the node'].	node isSelf ifTrue: [^self].	node isSuper ifTrue: [^self].	node name = 'thisContext' ifTrue: [^self].	(self compileMethod: #OnSave) ifNil: [^self].	node isLocalVariable ifFalse: [^evaluator renameInstanceVariable: node name].	newName := Dialog		request: #EnterNewNameC &lt;&lt; #browser &gt;&gt; 'Enter new name:'		initialAnswer: node name.	newName isEmpty ifTrue: [^self].	evaluator performRefactoring:		((RenameTemporaryRefactoring			renameTemporaryFrom: node sourceInterval			to: newName			in: self doItReceiverClass			selector: parseTree selector)				sourceTree: parseTree;				yourself)</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>refactorings - methods</category><body package="Browser-SourceCodeUI">inlineMethod	&lt;state: #active command: #inlineMethod&gt;	&lt;menu: #(contextMenu) position: 60.6 insert: #(		command: #inlineMethod		visibility: #canInlineMethod)&gt;	| node refactoring |	self canInlineMethod ifFalse: [^self].	node := self selectionNode.	(node isNil or: [node isMessage not]) ifTrue: [		^Dialog warn: #CouldNotFindMessageSend &lt;&lt; #browser &gt;&gt; 'Could not find message send'].	(self compileMethod: #OnSave) ifNil: [^self].	refactoring := (node receiver isVariable and: [#('self' 'super') includes: node receiver name])		ifTrue:			[InlineMethodRefactoring				inline: node sourceInterval				inMethod: parseTree selector				forClass: self doItReceiverClass]		ifFalse:			[InlineMethodFromComponentRefactoring				inline: node sourceInterval				inMethod: parseTree selector				forClass: self doItReceiverClass].	refactoring sourceTree: parseTree.	evaluator performRefactoring: refactoring</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - unfocused</category><body package="Browser-SourceCodeUI">debugItOther	&lt;state: #inactive command: #debugIt&gt;	self focusedDocumentViewDo: [:view | ^view debugIt].	self focusedTextEditorDo: [:aController | ^aController debugIt]</body><body package="Browser-SourceCodeUI">doItOther	&lt;state: #inactive command: #doIt&gt;	self focusedDocumentViewDo: [:view | ^view doIt].	self focusedTextEditorDo: [:aController | ^aController doIt]</body><body package="Browser-SourceCodeUI">inspectItOther	&lt;state: #inactive command: #inspectIt&gt;	self focusedDocumentViewDo: [:view | ^view inspectIt].	self focusedTextEditorDo: [:aController | ^aController inspectIt]</body><body package="Browser-SourceCodeUI">printItOther	&lt;state: #inactive command: #printIt&gt;	self focusedDocumentViewDo: [:view | ^view printIt].	self focusedTextEditorDo: [:aController | ^aController printIt]</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - selecting</category><body package="Browser-SourceCodeUI">selectInnerScope	&lt;state: #active command: #selectInnerScope&gt;		| node selectionInterval next |	self isWorkspace ifTrue: [^self].	self hasSelection ifFalse: [^self].	selectionInterval := (self selectionStartPosition + 1) to: self selectionStopPosition.	node := self selectionNode.	node children isEmpty ifTrue: [node := node bestTokenFor: selectionInterval].	(node isKindOf: RBToken) ifTrue: [		^self selectBetween: node start - 1 and: node stop].	[next := node children isEmpty		ifTrue: [node bestTokenFor: node sourceInterval]		ifFalse: [node children first].	node ~~ next and: [node sourceInterval = next sourceInterval]] whileTrue.	self selectBetween: next start - 1 and: next stop</body><body package="Browser-SourceCodeUI">selectNextScope	&lt;state: #active command: #selectNextScope&gt;		| node selectionInterval token tokens index |	self isWorkspace ifTrue: [^self].	self hasSelection ifFalse: [^self selectOuterScope].	selectionInterval := (self selectionStartPosition + 1) to: self selectionStopPosition.	node := self selectionNode.	token := node bestTokenFor: selectionInterval.	tokens := parseTree allLeafNodesAndTokens.	token := (selectionInterval = token sourceInterval and: [tokens last ~~ token])		ifTrue: [			index := tokens identityIndexOf: token.			index = 0 ifTrue: [^self selectInnerScope].			tokens at: index + 1]		ifFalse: [token].	self selectBetween: token start - 1 and: token stop</body><body package="Browser-SourceCodeUI">selectOuterScope	&lt;state: #active command: #selectOuterScope&gt;		| node selectionInterval |	self isWorkspace ifTrue: [^self].	selectionInterval := (self selectionStartPosition + 1) to: self selectionStopPosition.	((node := self selectionNode) == nil or: [node parent == nil]) ifTrue: [		self selectionStartPosition == 0 ifTrue: [			node := parseTree allLeafNodesAndTokens first.			self selectBetween: node start - 1 and: node stop].		self selectionStopPosition == self document size ifTrue: [			node := parseTree allLeafNodesAndTokens last.			self selectBetween: node start - 1 and: node stop].		^self].	node := node sourceInterval = selectionInterval		ifTrue: [			node parent sourceInterval = node sourceInterval				ifTrue: [node parent parent]				ifFalse: [node parent]]		ifFalse: [			| token |			token := node bestTokenFor: selectionInterval.			token sourceInterval = selectionInterval				ifTrue: [node]				ifFalse: [token]].	self selectBetween: node start - 1 and: node stop</body><body package="Browser-SourceCodeUI">selectPreviousScope	&lt;state: #active command: #selectPreviousScope&gt;		| node selectionInterval token tokens index |	self isWorkspace ifTrue: [^self].	self hasSelection ifFalse: [^self selectOuterScope].	selectionInterval := (self selectionStartPosition + 1) to: self selectionStopPosition.	node := self selectionNode.	token := node bestTokenFor: selectionInterval.	tokens := parseTree allLeafNodesAndTokens.	token := (selectionInterval = token sourceInterval and: [tokens first ~~ token])		ifTrue: [			index := tokens identityIndexOf: token.			index = 0 ifTrue: [^self selectInnerScope].			tokens at: index - 1]		ifFalse: [token].	self selectBetween: token start - 1 and: token stop</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor</class-id> <category>actions - clipboard</category><body package="Browser-SourceCodeUI">clipboardCopy	"Copy the current selection in to the clipboard."	&lt;menu: #(contextMenu) position: 20.2 insert: #(		command: #copy		enablement: #canCopy		icon: #(#{UI.ResourceRetriever} #{GeneralIcons} #editCopy))&gt;	super clipboardCopy</body><body package="Browser-SourceCodeUI">clipboardCut	"Cut the current selection in to the clipboard."	&lt;menu: #(contextMenu) position: 20.1 insert: #(		command: #cut		enablement: #canCut		icon: #(#{UI.ResourceRetriever} #{GeneralIcons} #editCut))&gt;	super clipboardCut</body><body package="Browser-SourceCodeUI">clipboardPaste	"Insert the current clipboard contents."	&lt;menu: #(contextMenu) position: 20.3 insert: #(		command: #paste		enablement: #canPaste		icon: #(#{UI.ResourceRetriever} #{GeneralIcons} #editPaste))&gt;		super clipboardPaste</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditor class</class-id> <category>compiling</category><body package="Browser-SourceCodeUI">pragmas	&lt;pragmas: #instance&gt;		^#(compilation: evaluation:)</body></methods><methods><class-id>Refactory.Browser.SourceCodeEditorSpec class</class-id> <category>resources</category><body package="Browser-SourceCodeUI">paletteIcon	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 3790 3790)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6520 6520 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 2537 4882)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H!@@@@@BL3L3L3L3L3L3L3LP@@@@@#MDQDQDQDQDQDP3D@@@@@H3P"H"H"H"H"H$L1@@@@@BL4H"H"H"H"H"ICLP@@@@@#MBQDIBQDH"H"P3D@@@@@H3P$P"P"QBH"H$L1@@@@@BL4IDH$H$P"H"ICLP@@@@@#MBQBIBIDH"H"P3D@@@@@H3P$P"P"QBH"H$L1@@@@@BL4IDP$IDP"H"ICLP@@@@@#MBH"H"H"H"H"P3D@@@@@H3P"H"H"H"@ H$L1@@@@@BL4IDP$IDP"@"ICLP@@@@@#MBQBIBIDH H"P3D@@@@@H3P$P"P"QBHBH$L1@@@@@BL4IDH$H$P"@"ICLP@@@@@#MBQBIBIDH H"P3D@@@@@H3P$QBP$QBHBH$L1@@@@@BL4H"H"H"H HBICLP@@@@@#MBH"H"H"H"H"P3D@@@@@H3QDQDQDQDQDQDL1@@@@@BL3L3L3L3L3L3L3LP@@@@@QDQDQDQDQDQDQDQD@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body></methods><methods><class-id>Refactory.Browser.SmalltalkAutocomplete</class-id> <category>actions - events</category><body package="Browser-SourceCodeUI">evaluating: anEvent	&lt;state: #active command: #evaluating&gt;		self cancelSearch.	self hideWindow.	^#continue</body></methods><methods><class-id>Refactory.Browser.SourceCodeDialog</class-id> <category>events</category><body package="Browser-SourceCodeUI">inputCursorEnter: anEvent	&lt;state: #* command: #inputCursorEnter&gt;	| flow document segment dialog |	flow := anEvent propertyAt: #flow ifAbsent: [^self].	document := flow document.	segment := document segmentAtPositionAfter: flow start ifAbsent: [^self].	dialog := segment style propertyAt: #dialog ifAbsent: [^self].		view invalidateSelectionWhile: [		view flow replaceBetween: dialog position and: dialog position + 1 apply: [:style |			style copy				annotation: dialog asDocumentWithShortcuts;				intern]]</body><body package="Browser-SourceCodeUI">inputCursorExit: anEvent	&lt;state: #* command: #inputCursorExit&gt;		| flow segment dialog inputSegment inputDialog |	flow := anEvent propertyAt: #flow ifAbsent: [^self].	segment := view document segmentAtPositionAfter: flow start ifAbsent: [^self].	dialog := segment style propertyAt: #dialog ifAbsent: [^self].	inputSegment := view document segmentAtPositionAfter: view inputPosition ifAbsent: [^self].	inputDialog := inputSegment style propertyAt: #dialog ifAbsent: [nil].	inputDialog == dialog ifTrue: [^self].		view invalidateSelectionWhile: [		view flow replaceBetween: dialog position and: dialog position + 1 apply: [:style |			style copy				annotation: dialog asDocumentWithoutShortcuts;				intern]]</body><body package="Browser-SourceCodeUI">keyDown: anEvent	&lt;state: #active event: #KeyDown&gt;	| segment dialog key |	segment := view document segmentAtPositionAfter: view inputPosition ifAbsent: [^#continue].	dialog := segment style propertyAt: #dialog ifAbsent: [^#continue].	(key := anEvent keyValue) class == Character ifFalse: [^#continue].	key := key asUppercase.	dialog shortcutsAndActionsDo: [:shortcut :action |		shortcut asUppercase = key ifTrue: [			action value.			^anEvent stop]].	^#continue</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-editor</category><body package="Browser-SourceCodeUI">toolsEditorDecorationsDeclarationHighlight	&lt;setting: #(tools editor decorationDeclarationHighlight) position: 11.2&gt;	^(self toolsEditorEnablementSetting: Refactory.Browser.DeclarationHighlightDecoration)		label: 'Class Comment Highlighting'</body><body package="Browser-SourceCodeUI">toolsEditorDecorationsSmallLint	&lt;setting: #(tools editor decorationSmallLint) position: 11.3&gt;	^(self toolsEditorEnablementSetting: Refactory.Browser.SmalllintDecoration)		label: 'Code Critic Warnings'</body><body package="Browser-SourceCodeUI">toolsEditorDecorationsSyntaxHighlight	&lt;setting: #(tools editor decorationSyntaxHighlight) position: 11.1&gt;	^(self toolsEditorEnablementSetting: Refactory.Browser.SyntaxHighlightDecoration)		label: 'Syntax Highlighting'</body><body package="Browser-SourceCodeUI">toolsEditorDecorationsURLinComment	&lt;setting: #(tools editor decorationURLinComment) position: 11.4&gt;	^(self toolsEditorEnablementSetting: Refactory.Browser.UrlCommentHighlightDecoration)		label: 'URL Highlighting (in code comments)'</body><body package="Browser-SourceCodeUI">toolsEditorDecorationsURLinDocumentation	&lt;setting: #(tools editor decorationURLinDocumentation) position: 11.5&gt;	^(self toolsEditorEnablementSetting: Refactory.Browser.UrlHighlightDecoration)		label: 'URL Highlighting (in documentation)'</body><body package="Browser-SourceCodeUI">toolsEditorErrors	&lt;setting: #(tools editor errors) position: 1.0&gt;	| choices labels |	choices := #(OnSave OnIdle OnType).	labels := #('On Save' 'On Idle' 'On Type').	^((EnumerationSetting keys: choices choices: choices labels: labels)		on: Refactory.Browser.SourceCodeEditor aspect: #errorsLevel)		default: #OnSave;		label: #ToolsEditorErrorsLevel &lt;&lt; #browser &gt;&gt; 'Errors Level';		helpText: #ToolsEditorErrorsLevelHelpText &lt;&lt; #browser &gt;&gt; 'Specifies how often to display errors.'</body><body package="Browser-SourceCodeUI">toolsEditorFontName	&lt;setting: #(tools editor fontName) position: 3.0&gt;	^(StringSetting on: Refactory.Browser.SourceCodeTheme aspect: #fontName)		label: #ToolsEditorFontName &lt;&lt; #browser &gt;&gt; 'Font Name';		helpText: #ToolsEditorFontNameHelpText &lt;&lt; #browser &gt;&gt; 'Specifies a comma separated list of font names which can be partially matched with a wildcard (*).'</body><body package="Browser-SourceCodeUI">toolsEditorFontSize	&lt;setting: #(tools editor fontSize) position: 3.1&gt;	| range keys labels |	range := -12 to: 12.	range size odd ifFalse: [self error: 'For symmetry, please use a range that is odd numbered in size'].	keys := range collect: [:e | e printString asSymbol].	labels := range collect: #printString.	(range size + 1) half + 1 to: range size do: [:i | labels at: i put: '+', (labels at: i)].	labels at: (range size + 1) half put: 'Default'.	^((EnumerationSetting keys: keys choices: range labels: labels)		on: Refactory.Browser.SourceCodeTheme aspect: #fontSize)		label: #ToolsEditorFontSize &lt;&lt; #browser &gt;&gt; 'Font Size';		helpText: #ToolsEditorFontSizeHelpText &lt;&lt; #browser &gt;&gt; 'Specifies the font size for the code editor.'</body><body package="Browser-SourceCodeUI">toolsEditorLevelsGap	&lt;setting: #(tools editor themeGap) position: 1.999&gt;	^SettingsPageSeparator new</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>pages</category><body package="Browser-SourceCodeUI">toolsEditorPage	&lt;settingsPage: #(tools editor)&gt;	^ModularSettingsPage new		label: #ToolsEditor &lt;&lt; #browser &gt;&gt; 'Editor';		icon: (ListIconLibrary visualFor: #textPage);		settings: (self settingsWithPrefix: #(tools editor))</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-editor</category><body package="Browser-SourceCodeUI">toolsEditorPluginsAutoComplete	&lt;setting: #(tools editor pluginAutoComplete) position: 10.3&gt;	^(self toolsEditorEnablementSetting: Refactory.Browser.SmalltalkAutocomplete)		label: 'Auto Complete'</body><body package="Browser-SourceCodeUI">toolsEditorPluginsAutoIndent	&lt;setting: #(tools editor pluginAutoIndent) position: 10.2&gt;	^(self toolsEditorEnablementSetting: Refactory.Browser.SmalltalkAutoIndent)		label: 'Auto Indent'</body><body package="Browser-SourceCodeUI">toolsEditorPluginsAutoQuote	&lt;setting: #(tools editor pluginAutoQuote) position: 10.1&gt;	^(self toolsEditorEnablementSetting: Refactory.Browser.SmalltalkAutoQuote)		label: 'Auto Quote'</body><body package="Browser-SourceCodeUI">toolsEditorPluginsGap	&lt;setting: #(tools editor pluginsGap) position: 9.999&gt;	^SettingsPageSeparator new</body><body package="Browser-SourceCodeUI">toolsEditorTheme	&lt;setting: #(tools editor theme) position: 2&gt;	| themes keys labels |	(themes := Refactory.Browser.SourceCodeTheme themes) sort: [:a :b | a name &lt;= b name].	keys := themes collect: [:each | each source selector].	labels := themes collect: [:each | each name].	^((EnumerationSetting keys: keys choices: keys labels: labels)		on: Refactory.Browser.SourceCodeEditor aspect: #defaultThemeKey)		default: #default;		label: #ToolsEditorTheme &lt;&lt; #browser &gt;&gt; 'Theme';		helpText: #ToolsEditorThemeHelpText &lt;&lt; #browser &gt;&gt; 'Specifies a colour theme for the source code editor.'</body><body package="Browser-SourceCodeUI">toolsEditorWarnings	&lt;setting: #(tools editor warnings) position: 1.1&gt;	| choices labels |	choices := #(OnSave OnIdle OnType).	labels := #('On Save' 'On Idle' 'On Type').	^((EnumerationSetting keys: choices choices: choices labels: labels)		on: Refactory.Browser.SourceCodeEditor aspect: #warningsLevel)		default: #OnSave;		label: #ToolsEditorWarningsLevel &lt;&lt; #browser &gt;&gt; 'Warnings Level';		helpText: #ToolsEditorWarningsLevelHelpText &lt;&lt; #browser &gt;&gt; 'Specifies how often to display warnings.'</body></methods><methods><class-id>Refactory.Browser.LanguageServices</class-id> <category>service categories</category><body package="Browser-SourceCodeUI">compilationErrorHandlerCategory	&lt;category: #value&gt;	^#compilationErrorHandlerClass</body><body package="Browser-SourceCodeUI">editorDeclarationsCategory	&lt;category: #array&gt;	^#editorDecorations</body><body package="Browser-SourceCodeUI">editorPluginsCategory	&lt;category: #array&gt;	^#editorPlugins</body></methods><methods><class-id>Refactory.Browser.LanguageServices</class-id> <category>smalltalk</category><body package="Browser-SourceCodeUI">smalltalkCompilationErrorHandlerClass	&lt;language: #smalltalk category: #compilationErrorHandlerClass&gt;	^SourceCodeErrorHandler</body></methods><methods><class-id>Refactory.Browser.LanguageServices</class-id> <category>smalltalk - editor plugins</category><body package="Browser-SourceCodeUI">smalltalkEditorAutocomplete	&lt;language: #smalltalk category: #editorPlugins priority: 10&gt;	^SmalltalkAutocomplete</body><body package="Browser-SourceCodeUI">smalltalkEditorAutoIndent	&lt;language: #smalltalk category: #editorPlugins priority: 2&gt;	^SmalltalkAutoIndent</body><body package="Browser-SourceCodeUI">smalltalkEditorAutoquote	&lt;language: #smalltalk category: #editorPlugins priority: 1&gt;	^SmalltalkAutoQuote</body></methods><methods><class-id>Refactory.Browser.LanguageServices</class-id> <category>smalltalk - editor decorations</category><body package="Browser-SourceCodeUI">smalltalkEditorDeclarationHighlightDecoration	&lt;language: #smalltalk category: #editorDecorations&gt;	^DeclarationHighlightDecoration</body><body package="Browser-SourceCodeUI">smalltalkEditorSmalllintDecoration	&lt;language: #smalltalk category: #editorDecorations&gt;	^SmalllintDecoration</body><body package="Browser-SourceCodeUI">smalltalkEditorSyntaxHighlightDecoration	&lt;language: #smalltalk category: #editorDecorations priority: 1&gt;	^SyntaxHighlightDecoration</body><body package="Browser-SourceCodeUI">smalltalkEditorUrlCommentHighlightDecoration	&lt;language: #smalltalk category: #editorDecorations&gt;	^UrlCommentHighlightDecoration</body></methods><methods><class-id>Refactory.Browser.LanguageServices</class-id> <category>smalltalk - editor plugins</category><body package="Browser-SourceCodeUI">sourceCodeEditorDialog	&lt;language: #smalltalk category: #editorPlugins priority: 100&gt;	^SourceCodeDialog</body></methods><methods><class-id>Core.SystemEventInterest class</class-id> <category>dependencies-pragma</category><body package="Browser-SourceCodeUI">reinstallStylesAndThemes	"The locale might change the default fonts and font sizes and the current skin may be using different text styles if the machine architecture has changed.  Until we have virtual FontDefinitions, we need to reinitialize things at this later point during startup."	&lt;triggerAtSystemEvent: #returnFromSnapshot&gt;		UI.Skins.SkinRegistry reinitializeTextStyles.	Refactory.Browser.SourceCodeEditor reinstallDefaultTheme</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>tool registration</category><body package="Browser-SourceCodeUI">copyrightNoticeToolClass	&lt;tool: 36&gt;	^BrowserCopyrightNoticeTool</body><body package="Browser-SourceCodeUI">declarationToolClass	&lt;tool: 40&gt;	^BrowserDeclarationTool</body><body package="Browser-SourceCodeUI">documentationToolClass	&lt;tool: 30&gt;	^BrowserDocumentationTool</body><body package="Browser-SourceCodeUI">overviewToolClass	&lt;tool: 1000&gt;	^BrowserOverviewTool</body><body package="Browser-SourceCodeUI">sharedVariableClass	&lt;tool: 10&gt;	^BrowserSharedVariableTool</body><body package="Browser-SourceCodeUI">sharedVariableInitializerClass	&lt;tool: 10.1&gt;	^BrowserSharedVariableInitializerTool</body><body package="Browser-SourceCodeUI">sourceCodeToolClass	&lt;tool: 20&gt;	^BrowserSourceCodeTool</body></methods><initialize><class-id>Refactory.Browser.SmalllintDecoration</class-id></initialize><initialize><class-id>Refactory.Browser.SourceCodeEditor</class-id></initialize><initialize><class-id>Refactory.Browser.SyntaxHighlightDecoration</class-id></initialize><initialize><class-id>Refactory.Browser.UrlDetector</class-id></initialize><initialize><class-id>Refactory.Browser.SourceCodeDatabase</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>DocumentSearch</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view compositeComponent layoutComponent searchBarComponent originalState searchDocument searchEditorWidget searchBarComposite matches replaceDocument isOpen selection replaceEditorWidget replaceButtonWidget replaceAllButtonWidget mode activeSearch resultCountWidget originalLayout </inst-vars><class-inst-vars></class-inst-vars><imports>			private Text2.*			</imports><category></category><attributes><package>UIBasics-Text2</package></attributes></class><class><name>DocumentViewSpec</name><environment>UI</environment><super>UI.MenuComponentSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isWrapped isReadOnly showHiddenCharacters showLineStriping autoAccept continuousAccept showInputCursor showSelection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>UIBasics-Text2</package></attributes></class><class><name>DocumentSegment</name><environment>Text2</environment><super>Core.Collection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>style </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Graphics-Text2-Document</package></attributes></class><class><name>CodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel menu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>UILookPolicy</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Support</category><attributes><package>UIBuilder-Support</package></attributes></class><class><name>DocumentAutocompleteSearch</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>search requireFirstLetterMatch prefix searchTime view word exactMatchFound </inst-vars><class-inst-vars>sources </class-inst-vars><imports></imports><category></category><attributes><package>UIBasics-Text2</package></attributes></class><class><name>CompiledInitializer</name><environment>Kernel</environment><super>Kernel.CompiledMainBlock</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>environment binding sourceCode </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>FlowSegment</name><environment>Text2</environment><super>Core.Object</super><private>true</private><indexed-type>none</indexed-type><inst-vars>paragraph line contentWidth contentHeight bounds baseline level annotationFlow annotationOffset </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Graphics-Text2-Flow</package></attributes></class><class><name>ViewBehavior</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id actions bindings </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Interface-Framework</package></attributes></class><class><name>DocumentAutocomplete</name><environment>UI</environment><super>UI.ViewBehavior</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view autocompleteModel searchProcess windowSemaphore searchSemaphore </inst-vars><class-inst-vars></class-inst-vars><imports>			private Text2.*			</imports><category></category><attributes><package>UIBasics-Text2</package></attributes></class><class><name>CompilerErrorHandler</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>failBlock retryBlock class selector errorHandlers environment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Compiler-Support</category><attributes><package>System-Compiler-Support</package></attributes></class><class><name>DocumentAutocompleteModel</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>list gap defaultStyle defaultRightAlignedStyle styles matchingStyles views view openingSemaphore opened autocomplete positionTop positionBottom </inst-vars><class-inst-vars>presentations acceptors </class-inst-vars><imports>			Text2.*			</imports><category></category><attributes><package>UIBasics-Text2</package></attributes></class><class><name>CompiledMethod</name><environment>Kernel</environment><super>Kernel.CompiledMainBlock</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>mclass sourceCode </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>LanguageServices</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>languages </inst-vars><class-inst-vars>default </class-inst-vars><imports></imports><category></category><attributes><package>Browser-Support</package></attributes></class><class><name>DocumentView</name><environment>UI</environment><super>UI.AutoScrollingView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>flow document inputCursor anchorCursor undoHistory redoHistory menuHolder currentStyle preferredX currentEditState widgetState margin currentHover settings cursorAnimationStart search isAccepted highlights invalidating mouseCursor predecessor successor interconnectionCompound </inst-vars><class-inst-vars></class-inst-vars><imports>			private Text2.*			</imports><category></category><attributes><package>UIBasics-Text2</package></attributes></class><class><name>RBProgramNodeVisitor</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Parse Tree Matching</category><attributes><package>Browser-Parser</package></attributes></class></st-source>