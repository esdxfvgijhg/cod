<?xml version="1.0"?><st-source><!-- Name: Tools-Settings-VWNotice: Copyright 1999-2017 Cincom Systems, Inc.  All rights reserved.Comment: Tools-Settings-VW uses the Tools-Settings framework to provide a VisualWorks specific settings tool.DbIdentifier: bear73DbTrace: 502732DbUsername: kgreekDbVersion: 8.3 - 2DevelopmentPrerequisites: #(#(#any 'Tools-Settings' '') #(#any 'Tools-Settings-Commands' '') #(#any 'Tools-Workspace' ''))PackageName: Tools-Settings-VWParcel: #('Tools-Settings-VW')ParcelName: Tools-Settings-VWPrerequisiteDescriptions: #(#(#name 'Tools-Settings') #(#name 'Tools-Settings-Commands' #componentType #package) #(#name 'Tools-Workspace' #componentType #package))PrerequisiteParcels: #(#('Tools-Settings' '') #('Tools-Settings-Commands' '') #('Tools-Workspace' ''))PrintStringCache: (8.3 - 2,kgreek)Version: 8.3 - 2Date: 3:26:50 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.4) of June 23, 2017 on June 30, 2017 at 3:26:50 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>TranscriptSettingsPage</name><environment>Tools</environment><super>Tools.ModularSettingsPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings</category><attributes><package>Tools-Settings-VW</package></attributes></class><comment><class-id>Tools.TranscriptSettingsPage</class-id><body>When Transcript settings are applied, it is desireable to have those settings apply immediately.  In order for this to take place, #setupTranscript needs to be sent to HeadlessImage current.  This settings page is a specialized ModularSettingsPage registers an interest in when settings have been applied.   When this happens, this class arranges for #setupTranscript to be sent (see #triggered).</body></comment><class><name>VisualWorksSettings</name><environment>Tools</environment><super>Tools.SettingsDomain</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-VW</category><attributes><package>Tools-Settings-VW</package></attributes></class><comment><class-id>Tools.VisualWorksSettings</class-id><body>VisualWorksSettings contains definitions of pages and settings controlling the VisualWorks environment. If you need to add your own settings that will control VisualWorks environments or your extensions of it, this is the place to add them. If you need to add settings to your application that has nothing to do with VisualWorks IDE, you need to create a subclass of SettingsDomain specifically for your application.</body></comment><class><name>VisualWorksHomePage</name><environment>Tools</environment><super>Tools.SettingsManagerPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars>directoryModule pathHolder setting helpTextHolder hasChanges localTriggerChannel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-VW</category><attributes><package>Tools-Settings-VW</package></attributes></class><comment><class-id>Tools.VisualWorksHomePage</class-id><body>VisualWorksHomePage is the implementation of the System page of the settings tool. It is an example of a settings tool page that has a unique interface and behavior and displays information not managed by the settings framework.Instance Variables:	directoryModule	&lt;DirectorySettingModule&gt; The module for the directory setting.	hasChanges	&lt;Boolean&gt;	Set to true whenever there are unaccepted changes; determines whether changes should indeed be applied when the manager says so.	helpTextHolder	&lt;ValueHolder with: String&gt;	The holder of the blurb text (read-only).	pathHolder	&lt;ValueHolder with: String&gt; The holder of the path string; the aspect of the path input field.	localTriggerChannel	&lt;ValueHolder with: Boolean&gt; The trigger channel used by controls of this page, required to ensure they are all accepted before the page tries to accept.</body></comment><class><name>VisualWorksMemoryPolicyPage</name><environment>Tools</environment><super>Tools.SettingsManagerPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars>settings localTriggerChannel defaultMemoryHolder currentMemoryHolder currentMemoryPolicyClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-VW</category><attributes><package>Tools-Settings-VW</package></attributes></class><comment><class-id>Tools.VisualWorksMemoryPolicyPage</class-id><body>VisualWorksMemoryPolicyPage is the implementation of the MemoryPolicy page of the settings tool.  This page exposes the three most commonly tuned settings (growth regime, memory upper bound and free memory upper bound) for the memory policy of the system.    Users are encouraged to read the class comment of MemoryPolicy and ObjectMemory to understand how these settings (and other tunable settings on MemoryPolicy) effect the system and their application.This page shows the current values being used by the system, along with maintaing a list of default values for the settings.  BufferedValueHolders are used to to accept the edit values.Instance Variables	currentMemoryPolicyClass &lt;ValueModel on: Object&gt;	The class of the current memory policy for display purposes.	currentMemoryHolder	&lt;ValueModel on: Integer&gt;	See above	defaultMemoryHolder	&lt;BufferedValueHolder on: Integer&gt;	See above	localTriggerChannel	&lt;ValueModel on: Boolean&gt;	When true, then trigger the BufferedValueHolders to accept their edit value	settings	&lt;(Collection of: SettingModel)&gt;	The SettingModels for the memory policy parameters that this SettingsPage exposes</body></comment><methods><class-id>Tools.TranscriptSettingsPage</class-id> <category>initialize-release</category><body package="Tools-Settings-VW">manager: aSettingsManager	super manager: aSettingsManager.	manager triggerChannel		onChangeSend: #triggered		to: self</body></methods><methods><class-id>Tools.TranscriptSettingsPage</class-id> <category>notifications</category><body package="Tools-Settings-VW">triggered	HeadlessImage current setupTranscript</body></methods><methods><class-id>Tools.TranscriptSettingsPage</class-id> <category>interface management</category><body package="Tools-Settings-VW">postBuildWith: aBuilder	"The settings page (the receiver) wants to be the last dependent in the dependents collection	 for triggerChannel.   This is to ensure that the transcript changes are applied at 	 the right time.  If this was not done, then #setupTranscript is sent too soon and the right changes	 would not be applied."	super postBuildWith: aBuilder.	manager triggerChannel retractInterestsFor: self.	manager triggerChannel		onChangeSend: #triggered		to: self</body></methods><methods><class-id>Tools.VisualWorksSettings</class-id> <category>accessing</category><body package="Tools-Settings-VW">label	^(#VisualWorksSettings &lt;&lt; #labels &gt;&gt; 'VisualWorks Settings') asString</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>private</category><body package="Tools-Settings-VW">sourceAssociationToStringBlock	^[:association | association value]</body><body package="Tools-Settings-VW">sourceAssociationsModel	"Note that this is intended to work in concert with the old framework."	^BlockValue with:		[ | manager list |		manager := SourceFileManager default.		list := (UISettings preferenceModelFor: #sources) value.		list removeAllSuchThat: [:any | true].		manager fileIndicesDo:			[:index |			list addLast: index -&gt; (manager nameStringAt: index)].		list]</body><body package="Tools-Settings-VW">sourceDirectoriesModel	"Note that this is intended to work in concert with the old framework."	^BlockValue with:		[ | list |		list := (UISettings preferenceModelFor: #sourceDirs) value.		list removeAllSuchThat: [:ign| true].		list addAll: (SourceFileManager default sourceFileDirectories collect: [:ea| ea asString]) asSortedStrings.		list]</body><body package="Tools-Settings-VW">stringToSourceAssociationBlock	^	[:oldAssociation :newName | 	| index manager |	index := oldAssociation key.	manager := SourceFileManager default.	manager 		file: index		name: (SystemUtils makeFilenamePortable: newName)		writable: (manager isReadOnly: index) not]</body><body package="Tools-Settings-VW">stringToSourceDirectoryBlock	^	[:oldName :newName | 	SourceFileManager default		changeSourceDirectoryFrom: oldName to: newName]</body></methods><methods><class-id>Tools.VisualWorksHomePage</class-id> <category>private</category><body package="Tools-Settings-VW">accept	| dir |	localTriggerChannel value: true.	dir := [pathHolder value asFilename] on: OsError do: [:ex | ex return: nil].	(dir notNil and: [dir definitelyExists and: [dir isDirectory]])		ifFalse: [AbortAcceptRequest 			from: self			message: (#errVWHome &lt;&lt; #dialogs &gt;&gt; 'This path is not a directory. Please try again')].	"Close-down all managed files so that the new variable can take effect."	SourceFileManager default close.	SystemUtils setEnvironmentVariable: 'VISUALWORKS' value: pathHolder value.	(pathHolder value = (SystemUtils getEnvironmentVariable: 'VISUALWORKS' ifAbsent: [nil])) ifFalse:		[AbortAcceptRequest			from: self			message: ((#errVWHomeNoSet &lt;&lt; #dialogs &gt;&gt; 'Unable to set the VISUALWORKS environment variable.&lt;n&gt;On Windows, you may not have the proper permissions to write to the system registry.&lt;n&gt;Please contact your system administrator.') expandMacros)].	hasChanges := false</body><body package="Tools-Settings-VW">baseDirectoryNameFrom: aFilename	^aFilename tail = 'image'		ifTrue: [aFilename directory]		ifFalse: [aFilename]</body><body package="Tools-Settings-VW">helpText	^#VisualWorksHomeExplanation &lt;&lt; #dialogs 		&gt;&gt; 'This is the default location of the VisualWorks home directory, $(VISUALWORKS), which is used to find many of the system files, such as parcels that can be loaded or system source code.Supply the name of the main directory, of which "image", "parcels", and "bin" are sub-directories. On Windows, this value is stored in the system registry, and you should not need to set it again. On all other platforms, the location is stored in an environment variable. On UNIX, the value is set only for the current session in VisualWorks.'</body><body package="Tools-Settings-VW">reset	self pathHolder value: 		(SystemUtils			getEnvironmentVariable: 'VISUALWORKS'			ifAbsent: [String new]).	hasChanges := false</body></methods><methods><class-id>Tools.VisualWorksHomePage</class-id> <category>aspects</category><body package="Tools-Settings-VW">helpTextHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^helpTextHolder isNil		ifTrue:			[helpTextHolder := String new asValue]		ifFalse:			[helpTextHolder]</body><body package="Tools-Settings-VW">pathHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^pathHolder isNil		ifTrue:			[pathHolder := String new asValue]		ifFalse:			[pathHolder]</body></methods><methods><class-id>Tools.VisualWorksHomePage</class-id> <category>initialize-release</category><body package="Tools-Settings-VW">initialize	super initialize.	self helpTextHolder value: self helpText asString.	setting := (StringSetting forNameOfDirectory on: self pathHolder)		id: #(directory);		label: (#VisualWorksHomeDirectory &lt;&lt; #dialogs &gt;&gt; 'VisualWorks home directory').	self reset</body><body package="Tools-Settings-VW">manager: aManager	super manager: aManager.	localTriggerChannel := manager triggerChannel value asValue.	manager triggerChannel		onChangeSend: #triggered		to: self</body></methods><methods><class-id>Tools.VisualWorksHomePage</class-id> <category>notifications</category><body package="Tools-Settings-VW">tickle	hasChanges := true.	super tickle</body><body package="Tools-Settings-VW">triggered	localTriggerChannel value: manager triggerChannel value.	manager triggerChannel value		ifTrue: [hasChanges ifTrue: [self accept]]		ifFalse: [self reset]</body></methods><methods><class-id>Tools.VisualWorksHomePage</class-id> <category>accessing</category><body package="Tools-Settings-VW">directoryModule	^directoryModule ifNil: 		[directoryModule := (DirectorySettingModule on: setting) page: self; yourself]</body><body package="Tools-Settings-VW">triggerChannel	^localTriggerChannel</body></methods><methods><class-id>Tools.VisualWorksHomePage</class-id> <category>actions</category><body package="Tools-Settings-VW">detectAndPasteDirectory	self directoryModule valueHolder value: 		(self baseDirectoryNameFrom: Filename defaultDirectory) asString</body></methods><methods><class-id>Tools.VisualWorksMemoryPolicyPage</class-id> <category>aspects</category><body package="Tools-Settings-VW">currentMemoryHolder	^currentMemoryHolder isNil		ifTrue: [currentMemoryHolder := 0 asValue]		ifFalse: [currentMemoryHolder]</body><body package="Tools-Settings-VW">currentMemoryPolicyClass	^currentMemoryPolicyClass isNil		ifTrue: [currentMemoryPolicyClass := ObjectMemory currentMemoryPolicy class asValue]		ifFalse: [currentMemoryPolicyClass]</body><body package="Tools-Settings-VW">defaultMemoryHolder	^defaultMemoryHolder isNil		ifTrue: [defaultMemoryHolder := 0 asValue]		ifFalse: [defaultMemoryHolder]</body></methods><methods><class-id>Tools.VisualWorksMemoryPolicyPage</class-id> <category>accessing</category><body package="Tools-Settings-VW">helpText	^#MemorySettingsHelp &lt;&lt; #dialogs &gt;&gt; 'These options determine the parameters used by the default memory policy.  The "Memory" option specifies the hard upper limit for heap growth.  Attempts to grow the heap beyond this limit will be curtailed.  Growing memory close to the memory upper bound will result in a low space signal.  When this occurrs, the currently active process is interrupted to signal a low-space condition.Memory policies have been significantly changed as of 7.7.1.  See the vwMemoryMgmt.pdf document in the doc/TechNotes folder, as well as the release notes for 7.7.1.'</body><body package="Tools-Settings-VW">interestingMethods	| interestingMethods |	interestingMethods := super interestingMethods asOrderedCollection.	settings do: [:each |		interestingMethods addAll: each interestingMethods].	^interestingMethods</body><body package="Tools-Settings-VW">settings	^settings</body></methods><methods><class-id>Tools.VisualWorksMemoryPolicyPage</class-id> <category>initialize-release</category><body package="Tools-Settings-VW">manager: aSettingsManager	super manager: aSettingsManager.	manager triggerChannel		onChangeSend: #triggered		to: self</body><body package="Tools-Settings-VW">memoryUpperBound: memorySetting	"The setting should be the memory policy group setting."	settings := Array with: memorySetting.	localTriggerChannel := false asValue.	defaultMemoryHolder := self modelFor: memorySetting.	currentMemoryHolder := nil asValue.	self loadCurrentValues</body><body package="Tools-Settings-VW">modelFor: aSetting	| holder |	holder := BufferedValueHolder 		subject: aSetting		triggerChannel: localTriggerChannel.	holder onChangeSend: #tickle to: self.	^holder</body><body package="Tools-Settings-VW">release	super release.	manager triggerChannel		retractInterestsFor: self</body></methods><methods><class-id>Tools.VisualWorksMemoryPolicyPage</class-id> <category>actions</category><body package="Tools-Settings-VW">accept	localTriggerChannel value: true</body><body package="Tools-Settings-VW">importSnapshots: aCollection	"Here we are cheating and applying the saved setting outright	instead of just pushing the values into the widgets. Might want to	work on this part more."	| policySnapshot  |	settings do:		[:each |		policySnapshot := aCollection			detect: [:some | some id = each id]			ifNone: [nil].		policySnapshot ifNotNil: [each restoreFrom: policySnapshot]]</body><body package="Tools-Settings-VW">reset	localTriggerChannel value: false</body><body package="Tools-Settings-VW">resetUIStateToDefault	defaultMemoryHolder value: defaultMemoryHolder subject default</body><body package="Tools-Settings-VW">setDefaultsNow	self accept.	ObjectMemory installMemoryPolicyAfterSnapshot.	self loadCurrentValues</body></methods><methods><class-id>Tools.VisualWorksMemoryPolicyPage</class-id> <category>notifications</category><body package="Tools-Settings-VW">triggered	manager triggerChannel value		ifTrue: [self accept]		ifFalse: [self reset]</body></methods><methods><class-id>Tools.VisualWorksMemoryPolicyPage</class-id> <category>private</category><body package="Tools-Settings-VW">loadCurrentValues	| currentPolicy |	currentPolicy := ObjectMemory currentMemoryPolicy.	currentMemoryHolder value: currentPolicy memoryUpperBound</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>generated resources</category><body package="Tools-Settings-VW">properties	^ToolbarIconLibrary visualFor: #properties</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>pages</category><body package="Tools-Settings-VW">browserPage	&lt;settingsPage: #(tools browser)&gt;	^ModularSettingsPage new		label: #Browser &lt;&lt; #labels &gt;&gt; 'Browser';		icon: (ListIconLibrary visualFor: #specs);		settings: (self settingsWithPrefix: #(tools browser))</body><body package="Tools-Settings-VW">loadingOptionsPage	&lt;settingsPage: #(system loading)&gt;	^ModularSettingsPage new		label: #Loading &lt;&lt; #labels &gt;&gt; 'Loading';		icon: (ListIconLibrary visualFor: #loadOptions);		settings: (self settingsWithPrefix: #(loading))</body><body package="Tools-Settings-VW">lookAndFeelPage	&lt;settingsPage: #(lookAndFeel) position: -30&gt;	^ModularSettingsPage new		label: #LookAndFeel &lt;&lt; #labels &gt;&gt; 'Look and Feel';		icon: (ListIconLibrary visualFor: #window);		addAllSettings: 			(self settingsWithPrefix: #(lookAndFeel) 				except: #(windowPlacement mouseButtonOrder));		useRadioButtonsForEnumerations;		addSetting:			(self settingWithId: #(lookAndFeel windowPlacement));		addSetting:			(self settingWithId: #(lookAndFeel mouseButtonOrder))</body><body package="Tools-Settings-VW">memoryPolicyPage	&lt;settingsPage: #(system memoryPolicy)&gt;	^VisualWorksMemoryPolicyPage new		label: #MemoryPolicy &lt;&lt; #labels &gt;&gt; 'Memory Policy';		icon: (ListIconLibrary visualFor: #chip);			memoryUpperBound: (self settingWithId: #(base memoryPolicy memoryUpperBound))</body><body package="Tools-Settings-VW">messageCatalogsPage	&lt;settingsPage: #(system messageCatalogs)&gt;	^SequenceSettingPage new		label: #MessageCatalogs &lt;&lt; #labels &gt;&gt; 'Message Catalogs';		icon: (ListIconLibrary visualFor: #bubble);		setting: (self settingWithId: #(files messageDirectories))</body><body package="Tools-Settings-VW">parcelDirectoriesPage	&lt;settingsPage: #(system parcelDirectories)&gt;	^SequenceSettingPage new		label: #ParcelPath &lt;&lt; #labels &gt;&gt; 'Parcel Path';		icon: (ListIconLibrary visualFor: #loadedParcel);		setting: (self settingWithId: #(files parcelDirectories))</body><body package="Tools-Settings-VW">printingPSOptionsPage	&lt;settingsPage: #(system printing psOptions)&gt;	^ModularSettingsPage new		label: #PostScriptOptions &lt;&lt; #labels &gt;&gt; 'PostScript Options';		icon: (ListIconLibrary visualFor: #psPrinter);		settings: (self settingsWithPrefix: #(system printing psOptions))</body><body package="Tools-Settings-VW">printingPage	&lt;settingsPage: #(system printing)&gt;	^ModularSettingsPage new		label: #Printing &lt;&lt; #labels &gt;&gt; 'Printing';		icon: (ListIconLibrary visualFor: #printer);		useRadioButtonsForEnumerations;		settings: (self settingsWithPrefix: #(printing))</body><body package="Tools-Settings-VW">sourceDirectoriesPage	"Note that this page does not work with the lower-level settings framework,	it works with the source file manager itself--in other words, this page contains	no Setting."	&lt;settingsPage: #(system source sourceDirectories)&gt;	| sourceDirectoriesModel |	sourceDirectoriesModel := self sourceDirectoriesModel.	^(SequenceSettingPage new)		label: #SourceDirectories &lt;&lt; #labels &gt;&gt; 'Source Directories';		icon: (ListIconLibrary visualFor: #folder);		listHolder: sourceDirectoriesModel			displayBlock: [:string | string]			acceptBlock: self stringToSourceDirectoryBlock			validationBlock: self filenameMustExistValidationBlock;		postAcceptBlock: [sourceDirectoriesModel resetValue];		helpText: #sourceDirectoriesHelpText &lt;&lt; #dialogs &gt;&gt; 'This page displays the names of directories containing the source files of classes in the image. Directories in the list can be renamed, which is necessary if you rename directories on the disk. When a directory in this list is renamed, the new name is used to access any source files contained in that directory. See the help text of the "Source Files" page for more information on the source files.'</body><body package="Tools-Settings-VW">sourceFilesPage	"Note that this page does not work with the lower-level settings framework,	it works with the source file manager itself."	&lt;settingsPage: #(system source sourceFiles)&gt;	| sourceAssociationsModel |	sourceAssociationsModel := self sourceAssociationsModel.	^(SequenceSettingPage new)		label: #SourceFiles &lt;&lt; #labels &gt;&gt; 'Source Files';		icon: (ListIconLibrary visualFor: #twoPages);		listHolder: sourceAssociationsModel			displayBlock: self sourceAssociationToStringBlock			acceptBlock: self stringToSourceAssociationBlock			validationBlock: self filenameMustExistValidationBlock;		postAcceptBlock: [sourceAssociationsModel resetValue];		helpText: #sourceFilesHelpText &lt;&lt; #dialogs &gt;&gt; 'The source code of classes in the image is stored in a number of files on the disk. The system (the Smalltalk image) holds onto the names of those files. The list on this page displays those names. For example, the first entry in this list is always the name of the main sources file, the one that contains the source of all the base classes such as Collections and Streams.If one of the files on the disk is moved or renamed, the system still tries to use the old file name to access the code it contains. When this happens, you get a message notifying you that a file could not be opened. This page allows you to restore such broken source references. To do that, select the name of the file that has been renamed or moved, and change it to the correct name.'</body><body package="Tools-Settings-VW">sourcePage	&lt;settingsPage: #(system source)&gt;	^ModularSettingsPage new		label: #Source &lt;&lt; #labels &gt;&gt; 'Source';		icon: (ListIconLibrary visualFor: #twoPages);		useRadioButtonsForEnumerations;		settings: (self settingsWithPrefix: #(files))</body><body package="Tools-Settings-VW">systemPage	&lt;settingsPage: #(system) position: -20&gt;	^VisualWorksHomePage new		label: #System &lt;&lt; #labels &gt;&gt; 'System';		icon: (ListIconLibrary visualFor: #balloon)</body><body package="Tools-Settings-VW">toolsPage	&lt;settingsPage: #(tools) position: -10&gt;	^ModularSettingsPage new		label: #Tools &lt;&lt; #labels &gt;&gt; 'Tools';		icon: (ListIconLibrary visualFor: #tools);		settings: (self settingsWithPrefix: #(tools))</body><body package="Tools-Settings-VW">transcriptPage	&lt;settingsPage: #(system transcript)&gt;	^TranscriptSettingsPage new		label: #Transcript &lt;&lt; #labels &gt;&gt; 'Transcript';		icon: (ListIconLibrary visualFor: #printer);		settings: (self settingsWithPrefix: #(system transcript))</body><body package="Tools-Settings-VW">warningsPage	&lt;settingsPage: #(tools warnings)&gt;	^ModularSettingsPage new		label: #Warnings &lt;&lt; #labels &gt;&gt; 'Warnings';		icon: (ListIconLibrary visualFor: #warning);		settings: (self settingsWithPrefix: #(tools warnings))</body><body package="Tools-Settings-VW">workspacePage	&lt;settingsPage: #(tools workspaces)&gt;	^ModularSettingsPage new		label: #Workspace &lt;&lt; #labels &gt;&gt; 'Workspace';		icon: (ListIconLibrary visualFor: #notepad);		settings: (self settingsWithPrefix: #(tools workspaces))</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-tools</category><body package="Tools-Settings-VW">lookAndFeel70OpenDialogsAtCursor	&lt;setting: #(lookAndFeel openDialogsAtCursor)&gt;	^(BooleanSetting on: #{UIBuilder.OpenDialogsAtCursor})		default: false;		label: #OpenDialogsAtCursor &lt;&lt; #labels &gt;&gt; 'Open dialog boxes centered at mouse cursor';		helpText: #OpenDialogsAtCursorHelp &lt;&lt; #dialogs &gt;&gt; 'When this option is off (default), dialog boxes open centered inside the current window, or inside the screen if there is no current window. When on, dialog boxes open centered at the mouse cursor.'</body><body package="Tools-Settings-VW">tools10iconLabelLength	&lt;setting: #(tools iconLabelLength)&gt;	| list keys |	list := UISettings iconLengthList.	keys := list collect: [:each | each key].	^((EnumerationSetting				keys: (keys collect: [:each | each asSymbol])				choices: keys				labels: (list collect: [:each | each value asString]))			onUISetting: #iconLabelLength)		label: #IconLabelLength1 &lt;&lt; #labels &gt;&gt; 'Icon label length';		helpText: #IconLabelLengthHelpText &lt;&lt; #dialogs &gt;&gt; 'The number of characters that are displayed in an icon''s label varies depending on the window manager.  Window managers also differ as to how they display icon labels that are longer than the maximum.  Some window managers display only the beginning of such a label, which is usually readable.  Others, however, display the middle of the label, often making a long label unreadable.To make such long labels more readable, you can suggest a maximum icon label length.  Any icon label longer than the maximum is compressed by dropping the middle characters.  The specified maximum size is only a hint, which the window manager is free to ignore.'</body><body package="Tools-Settings-VW">tools20textSize	&lt;setting: #(tools textSize)&gt;	| adaptor |	adaptor := PluggableAdaptor on: (UISettings preferenceModelFor: #textSize).	adaptor		getBlock: [:m | m value]		putBlock: [:m :v |			m value: v.			UI.Skins.SkinRegistry setDefaultTo: v]		updateBlock: [ :m :a :p | true ].	^((EnumerationSetting 				keys: #(small default large fixed)				choices: #(small default large fixed)				labels: (Array with: (#Small &lt;&lt; #dialogs &gt;&gt; 'Small') with: (#Medium &lt;&lt; #dialogs &gt;&gt; 'Medium') with: (#Large &lt;&lt; #dialogs &gt;&gt; 'Large') with: (#Fixed &lt;&lt; #dialogs &gt;&gt; 'Fixed')))			on: adaptor)		default: #default;		label: #TextSizeSetting &lt;&lt; #labels &gt;&gt; 'Text size';		helpText: #TestSizeSettingHelpText &lt;&lt; #dialogs &gt;&gt; 'The default TextAttributes describes how text will be rendered in VisualWorks.  As delivered, the default is set to "default".  It can be set to:	small		slightly smaller than "default", useful for 		small displays on the order of 640x480 pixels	default		the usual style, suitable for 1024x768 displays	large		slightly larger style, for 1600x1280 hi-res displays	fixed		(Ignored for Native or Default Skins)		similar to "default", but all characters are the same		size--this is useful for presenting table-oriented data		or in a terminal emulator.'</body><body package="Tools-Settings-VW">tools24UseNativeDialogs	&lt;setting: #(#tools #useNativeDialogs)&gt;	^(BooleanSetting on: #{Dialog.UseNativeDialogs})		default: true;		label: #UseNativeFileDialogs &lt;&lt; #labels &gt;&gt; 'Use native file dialogs';		helpText: #UseNativeFileDialogsHelpText &lt;&lt; #dialogs					&gt;&gt; 'When this option is enabled, platform file dialogs are used to get the names of files to save or open. When turned off, portable VisualWorks dialogs are used. Currently this option has effect only on Windows and OSX.'</body><body package="Tools-Settings-VW">tools25WarnOnExitWithoutSaving	&lt;setting: #(tools warnOnExitWithoutSaving)&gt;	^(BooleanSetting on: #{ObjectMemory.WarnOnExitWithoutSaving})		default: false;		label: #WarnOnExitWithoutSavingImage &lt;&lt; #labels &gt;&gt; 'Warn on exit without saving the image';		helpText: #WarnOnExitWithoutSavingImageHelp &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, exiting without saving the image shows a dialog warning about the potential of losing changes in workspaces and unaccepted changes in code views.'</body><body package="Tools-Settings-VW">tools40DebugSettingsErrors	&lt;setting: #(tools debugSettingsErrors)&gt;	^(BooleanSetting on: #{SettingsDomain.DebugSettingsErrors})		default: false;		label: #DebugSettingsManagerErrors &lt;&lt; #labels &gt;&gt; 'Debug Settings Manager errors';		helpText: #DebugSettingsManagerErrorsHelpText &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, if a setting or a page definition method cause an error, they are replaced in the final UI with a widget saying that an error has occurred and allowing to rerun the offending method to debug its cause.'</body><body package="Tools-Settings-VW">workspaceAutoDeclare	&lt;setting: #(tools workspaces workspaceAutoDeclare)&gt;	^(BooleanSetting on: WorkspaceCompilerErrorHandler aspect: #silentlyDeclareVariables)		default: true;		label: #silentlyDeclareWorkspaceVariables &lt;&lt; #labels &gt;&gt; 'Silently declare workspace variables';		helpText: #silentlyDeclareWorkspaceVariablesHelp &lt;&lt; #dialogs &gt;&gt; 'This modifies how the compiler treats assignments to undeclared variables when evaluating an expression. If checked, the compiler will automatically assume that the variable should be a workspace local variable. If not checked, the compiler will ask you what kind of variable you intended, or allow you to check the spelling. This applies only to assignments--reading an undeclared variable always brings up the dialog.'</body><body package="Tools-Settings-VW">workspaceStatusBar	&lt;setting: #(tools workspaces workspaceStatusBar)&gt;	^(BooleanSetting on: AbstractWorkspace aspect: #showStatusBar)		default: true;		label: #showStatusBarByDefault &lt;&lt; #labels &gt;&gt; 'Show status bar by default';		helpText: #workspaceStatusBar &lt;&lt; #dialogs &gt;&gt; 'If checked, all new workspaces come up with the status bar visible. If unchecked, all new workspaces come up with the status bar hidden. Changing this setting does not affect existing workspaces.'</body><body package="Tools-Settings-VW">workspaceToolbar	&lt;setting: #(tools workspaces workspaceToolbar)&gt;	^(BooleanSetting on: AbstractWorkspace aspect: #showToolBar)		default: true;		label: #showToolbarByDefault &lt;&lt; #labels &gt;&gt; 'Show toolbar by default';		helpText: #workspaceShowToolbarByDefault &lt;&lt; #dialogs &gt;&gt; 'If checked, all new workspaces come up with the toolbar visible. If unchecked, all new workspaces come up with the toolbar hidden. Changing this setting does not affect existing workspaces.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-files</category><body package="Tools-Settings-VW">files10fileOutType	&lt;setting: #(files fileOutType)&gt;	^((EnumerationSetting				choices: #(ChunkSourceFileFormat XMLSourceFileFormat)				labels: (Array with: (#ChunkFormat &lt;&lt; #dialogs &gt;&gt; 'Chunk Format') with: (#XMLFormat &lt;&lt; #dialogs &gt;&gt; 'XML Format')))			onUISetting: #fileOutType)		default: #XMLSourceFileFormat;		label: #DefaultFileOutType &lt;&lt; #labels &gt;&gt; 'Default file-out type';		helpText: #DefaultFileOutTypeHelpText &lt;&lt; #dialogs &gt;&gt; 'The setting on this page controls which file-out format is used by programming tools that do not control this feature themselves (file-in uses #canFormatStream: to decide the appropriate setting for a given file''s code).Smalltalk chunk format saves Smalltalk programs in a form similar to that used in previous versions of VisualWorks, with Smalltalk expressions separated by exclamation marks. (NameSpace-influenced features, e.g. class definitions, are not file-out-compatible with old pre-NameSpace VisualWorks releases.)XML format saves Smalltalk programs using an XML markup set designed to capture more detailed meta-information about the program than Smalltalk chunk format, so it supports more powerful tools for manipulating source files. (Performance differences between it and chunk are completely invisible for all ordinary purposes; if you had to search all source in files containing 30,000 classes and their methods, chunk would be faster than XML.)'</body><body package="Tools-Settings-VW">files20MessageDirectories	&lt;setting: #(files messageDirectories)&gt;	^((SequenceSetting of: FilenameSetting mustExist) onUISetting: #messagesList)		label: #UserMessageDirectories &lt;&lt; #labels &gt;&gt; 'User Message Directories';		helpText: #UserMessageDirectoriesHelpText &lt;&lt; #dialogs &gt;&gt; 'Message Catalog settingsThe list view specifies which directories contain message catalog files. You can add, remove, or change directories in the list. Note that these directories are top level directories--the message catalog files are in subdirectories, where each subdirectory is given a name that identifies the language group for which it is intended.To add a directory, type the directory''s name into the input field, and press the Add button.To delete a directory, select it in the list and press Delete.To change a directory, select it in the list, change the name which appears in the input field, and then press Change.'</body><body package="Tools-Settings-VW">files30ParcelDirectories	&lt;setting: #(files parcelDirectories)&gt;	^((SequenceSetting of: FilenameSetting) onUISetting: #parcelPath)		label: #ParcelDirectories &lt;&lt; #labels &gt;&gt; 'Parcel Directories';		helpText: #parcelPathHelp &lt;&lt; #dialogs &gt;&gt; 'Parcel Search Path SettingsUse this page to set the sequence of directories that are searched when loading Parcels. Parcels are typically loaded from files, and so the loading mechanism searches through files in directories on the search path to locate a suitable parcel file.If a Parcel has prerequisite parcels, they are also searched for in the directories and in the order specified in this list.Note that ''.'' is used in this list to indicate the directory in which the current parcel is being loaded from, not the directory in which the system is running. Thus, ''.'' can be used to search for a parcel''s prerequisites in the same directory as the parcel.To add a directory to the search path, enter the directory name into the input field, and press the Add button.To delete a directory, select it in the list and press Delete.To change a directory, select it in the list, change the name which appears in the input field, and then press Change.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-printing</category><body package="Tools-Settings-VW">printing10documentPrinting	&lt;setting: #(printing documentPrinting)&gt;	^((EnumerationSetting				keys: #(hostPrinting postScriptPrinting)				choices: #(false true)				labels: (Array with: (#Host &lt;&lt; #dialogs &gt;&gt; 'Host') with: (#PostScript &lt;&lt; #dialogs &gt;&gt; 'PostScript')))			on: #{Printer.UsePostscriptPrinting})		default: #hostPrinting;		label: #DocumentPrinting1 &lt;&lt;#labels &gt;&gt; 'Document printing';		helpText: #DocumentPrintingHelpText &lt;&lt; #dialogs &gt;&gt; 'Allows you to choose whether Document based printing will be by Host native printer drivers (MS Windows or Mac OS) or always in Postscript. If Host Printing is selected on a Unix platform, the system will use PostScript at print time.'</body><body package="Tools-Settings-VW">printing10textPrinting	&lt;setting: #(printing textPrinting)&gt;	^((EnumerationSetting				keys: #(documentPrinting plainTextPrinting)				choices: #(false true)				labels: (Array with: (#Document &lt;&lt; #dialogs &gt;&gt; 'Document') with: (#PlainText &lt;&lt; #dialogs &gt;&gt; 'Plain Text')))			on: #{ComposedText.UsePlainTextPrinting})		default: #documentPrinting;		label: #TextPrinting1 &lt;&lt; #labels &gt;&gt; 'Text printing';		helpText: #TextPrintingHelpText &lt;&lt; #dialogs &gt;&gt; 'Use this option to choose how text view hardcopy is processed -- either by the Document system or simply written in plain text to a file ''temp.prt'' (located in the home directory).'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-look and feel</category><body package="Tools-Settings-VW">lookAndFeel12skinSelection	&lt;setting: #(lookAndFeel defaultSkin)&gt;	| skins choices names |	names := OrderedCollection new.	choices := OrderedCollection new.	skins := Pragma allNamed: #skin: in: UI.Skins.SkinRegistry class.	skins := skins sort: [ :a :b | (a argumentAt: 1) &lt; (b argumentAt: 1) ].	skins do: [ :pragma |		names add: (pragma argumentAt: 1).		choices add: pragma selector.	].	^((EnumerationSetting keys: choices choices: choices labels: names) on: UI.Skins.SkinRegistry aspect: #factoryMethodSelector)		default: #nativeSkin;		label: #UserInterfaceSkin &lt;&lt; #labels &gt;&gt; 'Skin';		helpText: #UserInterfaceSkinHelpText &lt;&lt; #dialogs &gt;&gt; 'Selects the skin to use when the ''Skinned'' Look is selected.'</body><body package="Tools-Settings-VW">lookAndFeel25editKeyBindings	&lt;setting: #(lookAndFeel keyBindings)&gt;	^ExternalSetting new		label: #EditKeyBindings &lt;&lt; #labels &gt;&gt; 'Key Bindings';		editorBlock: [ Cursor wait showWhile: [ Tools.CommandBindingsEditor.BindingEditor open ] ];		helpText: #EditKeyBindingsHelpText &lt;&lt; #dialogs &gt;&gt; 'Opens an editor that allows you to explore and edit the key bindings for commands. Note that the key bindings are not saved with the preferences. You can save and load key bindings from the editor window.'</body><body package="Tools-Settings-VW">lookAndFeel40windowPlacement	&lt;setting: #(lookAndFeel windowPlacement)&gt;	^((EnumerationSetting				keys: #(auto user) 				choices: #(false true)				labels: (Array with: (#Automatic &lt;&lt; #dialogs &gt;&gt; 'Automatic') with: (#ByUser &lt;&lt; #dialogs &gt;&gt; 'By User')))			onUISetting: #windowPlacement)		default: #auto;		label: #WindowPlacement1 &lt;&lt; #labels &gt;&gt; 'Window placement';		helpText: #WindowPlacementHelpText &lt;&lt; #dialogs &gt;&gt; 'This option determines whether newly created windows are positioned on the screen by the user or are automatically positioned under the current mouse position with the default size.'</body><body package="Tools-Settings-VW">lookAndFeel50mouseButtonOrder	&lt;setting: #(lookAndFeel mouseButtonOrder)&gt;	^((EnumerationSetting				keys: #(#swo #sow) 				choices: #(false true)				labels: (Array with: (#selectWindowOperate &lt;&lt; #dialogs &gt;&gt; '&lt;select&gt; &lt;window&gt; &lt;operate&gt;') with: (#selectOperateWindow &lt;&lt; #dialogs &gt;&gt; '&lt;select&gt; &lt;operate&gt; &lt;window&gt;')))			onUISetting: #mouseButtons)		default: #swo;		label: #MouseButtonOrder1 &lt;&lt; #labels &gt;&gt; 'Mouse button order';		helpText: #MouseButtonOrderHelpText &lt;&lt; #dialogs &gt;&gt; 'This setting selects what mouse buttons perform what functions. The first option binds the right mouse button to the &lt;operate&gt; menu of the current view, while the middle button opens the &lt;window&gt; menu. The second option swaps the roles of the middle and the right buttons. The second option is the traditional Smalltalk-80 button configuration (also known as red, yellow, blue). The first option, however, is the default because it works better with two-button mice. For those, the &lt;window&gt; function becomes unassigned while the right button remains bound to the more frequently used &lt;operate&gt; menu.'</body><body package="Tools-Settings-VW">lookAndFeel60IgnoreButtonDoubleClick	&lt;setting: #(lookAndFeel ignoreButtonDoubleClick)&gt;	^(BooleanSetting on: #{BasicButtonController.IgnoreDoubleClick})		default: false;		label: #IgnoreActionButtonDoubleClicks &lt;&lt; #labels &gt;&gt; 'Ignore action button double clicks';		helpText: #IgnoreActionButtonDoubleClicksHelp &lt;&lt; #dialogs &gt;&gt; 'When this option is off (default), rapid clicks on action buttons are recognized as separate clicks no matter how quickly the button is clicked. When the option is on, they are considered to be double clicks and in effect ignored.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-memory policy</category><body package="Tools-Settings-VW">memoryUpperBoundSetting	&lt;setting: #(base memoryPolicy memoryUpperBound)&gt;	^((IntegerSetting min: (64 bitShift: 20)) on: ObjectMemory currentMemoryPolicy class aspect: #defaultMemoryUpperBound)		id: #(memoryPolicy defaultMemoryUpperBound);		default: ObjectMemory currentMemoryPolicy class initialDefaultMemoryUpperBound</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-PS options</category><body package="Tools-Settings-VW">psOptions05Level	&lt;setting: #(system printing psOptions level)&gt;	^((EnumerationSetting keys: #(#'1' #'2' #'3') choices: #(1 2 3)) on: PostScriptPrinter		aspect: #languageLevel)		label: #LanguageLevel &lt;&lt; #labels &gt;&gt; 'Language level';		default: #'3';		helpText: #LanguageLevelHelpText &lt;&lt; #dialogs 					&gt;&gt; 'PostScript printer language implementation level.  Choose the implementation version supported by your printer.'</body><body package="Tools-Settings-VW">psOptions10Color	&lt;setting: #(system printing psOptions printsColor)&gt;	^(BooleanSetting on: PostScriptPrinter aspect: #printsColor)		default: false;		label: #ColorPrinting &lt;&lt; #labels &gt;&gt; 'Color printing';		helpText: #ColorPrintingHelpText &lt;&lt; #dialogs &gt;&gt; 'Enable color printing to PostScript printers that implement PostScript Level 2. If you attempt to print PostScript generated for such a printer on a Level 1 printer, you will not get any output.'</body><body package="Tools-Settings-VW">psOptions20InvertLandscape	&lt;setting: #(system printing psOptions invertLandscape)&gt;	^(BooleanSetting on: PostScriptPrinter aspect: #invertLandscape)		default: false;		label: #InvertLandscape &lt;&lt; #labels &gt;&gt; 'Invert landscape position';		helpText: #InvertLandscapeHelpText &lt;&lt; #dialogs &gt;&gt; 'Rotate landscape orientation 180 degrees.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-loading</category><body package="Tools-Settings-VW">loading10allowLoadingParcels	&lt;setting: #(loading allowLoadingParcels)&gt;	^(BooleanSetting on: ImageConfigurationSystem aspect: #allowParcelLoading)		default: true;		label: #AllowParcelLoading &lt;&lt; #labels &gt;&gt; 'Allow Command-Line Parcel Loading (-pcl,-cnf)';		helpText: #AllowParcelLoadingHelpText &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, it will be possible to load parcels from the command-line using the -pcl and -cnf options. Note that this is a potential security risk for packaged applications, and you may want to disable it for those uses.'</body><body package="Tools-Settings-VW">loading12useDefaultConfigFile	&lt;setting: #(loading useDefaultConfigFile)&gt;	^(BooleanSetting on: ImageConfigurationSystem aspect: #useDefaultConfigFile)		default: true;		label: #UseDefaultConfigFile &lt;&lt; #labels &gt;&gt; 'Look for Default Config File (imagename.cnf)';		helpText: #UseDefaultConfigFileHelpText &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, on startup the image will look for a file named "&lt;imagename&gt;.cnf". If it is found, this will be treated as a config file (see the -cnf flag) and loaded. Note that this is a potential security risk for packaged applications, and you may want to disable it for those uses.'</body><body package="Tools-Settings-VW">loading15allowFilein	&lt;setting: #(loading allowFilein)&gt;	^(BooleanSetting on: ImageConfigurationSystem aspect: #allowFilein)		default: true;		label: #AllowFileIn &lt;&lt; #labels &gt;&gt; 'Allow Command-Line File-ins (-filein, headless-startup.st)';		helpText: #AllowFileinHelpText &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, it will be possible to run arbitrary code from a Smalltalk file specified on the command line, using the -filein option. Note that this is a potential security risk for packaged applications, and you may want to disable it for those uses. This setting also controls whether the headless image startup file is read or not.'</body><body package="Tools-Settings-VW">loading20allowExpressions	&lt;setting: #(loading allowExpressions)&gt;	^(BooleanSetting on: ImageConfigurationSystem aspect: #allowExpressions)		default: true;		label: #AllowExpressions &lt;&lt; #labels &gt;&gt; 'Allow Command-Line Expressions(-doit,-evaluate)';		helpText: #AllowExpressionsHelpText &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, it will be possible to run arbitrary code on the command line, using the -doit and -evaluate options. Note that this is a potential security risk for packaged applications, and you may want to disable it for those uses.'</body><body package="Tools-Settings-VW">loading25allowSettings	&lt;setting: #(loading allowSettings)&gt;	^(BooleanSetting on: ImageConfigurationSystem aspect: #allowSettings)		default: true;		label: #AllowSettings &lt;&lt; #labels &gt;&gt; 'Allow Command-Line Settings (-settings)';		helpText: #AllowSettingsHelpText &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, it will be possible to load settings on the command line using the -settings option. Note that this is a potential (although small) security risk for packaged applications, and you may want to disable it for those uses.'</body><body package="Tools-Settings-VW">loading30allowDevelopment	&lt;setting: #(loading allowDevelopment)&gt;	^(BooleanSetting on: ImageConfigurationSystem aspect: #allowDevelopment)		default: true;		label: #AllowDevelopment &lt;&lt; #labels &gt;&gt; 'Allow Command-Line Runtime Mode (-development,-runtime)';		helpText: #AllowDevelopmentHelpText &lt;&lt; #dialogs &gt;&gt; 'When this option is enabled, it will be possible to set whether the image is in runtime or development mode from the command line. Note that this is a possible security risk for packaged applications, and you may want to disable it for those uses.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-transcript</category><body package="Tools-Settings-VW">transcriptFileName	&lt;setting: #(system transcript transcriptFileName) position: 30&gt;	^(StringSetting			on: HeadlessImage current			aspect: #transcriptFilename)	default: HeadlessImage current defaultTranscriptFilename;	label: #TranscriptFileName &lt;&lt; #labels &gt;&gt; 'Transcript File Name';	helpText: #TranscriptToFileNameHelp &lt;&lt; #dialogs &gt;&gt; 'If logging the transcript to a file, which file should we use. Note that this setting will not take effect until the image restarts, or until HeadlessImage&gt;&gt;setUpTranscript is run.'</body><body package="Tools-Settings-VW">transcriptToFile	&lt;setting: #(system transcript transcriptToFile) position: 10&gt;	^(BooleanSetting 			on: HeadlessImage current			aspect: #transcriptToFile)	default: false;	label: #TranscriptToFile &lt;&lt; #labels &gt;&gt; 'Send Transcript writes to a file';	helpText: #TranscriptToFileHelp &lt;&lt; #dialogs &gt;&gt; 'When running with a GUI, should writes to the Transcript also be sent to a file. Note that this setting will not take effect until the image restarts, or until HeadlessImage&gt;&gt;setUpTranscript is run.'</body><body package="Tools-Settings-VW">transcriptToFileHeadless	&lt;setting: #(system transcript transcriptToFileHeadless) position: 20&gt;	^(BooleanSetting 			on: HeadlessImage current			aspect: #transcriptToFileHeadless)	default: true;	label: #TranscriptToFileHeadless &lt;&lt; #labels &gt;&gt; 'Send headless Transcript writes to a file';	helpText: #TranscriptToFileHeadlessHelp &lt;&lt; #dialogs &gt;&gt; 'When the system is headless, should writes to the Transcript also be sent to a file. Note that this setting will not take effect until the image restarts, or until HeadlessImage&gt;&gt;setUpTranscript is run.'</body><body package="Tools-Settings-VW">transcriptToStandardOut	&lt;setting: #(system transcript transcriptToStandardOut) position: 40&gt;	^(BooleanSetting 			on: HeadlessImage current			aspect: #transcriptToStandardOut)	default: false;	label: #TranscriptToStandardOut &lt;&lt; #labels &gt;&gt; 'Send Transcript writes to standard out (if available)';	helpText: #TranscriptToStandardOutHelp &lt;&lt; #dialogs &gt;&gt; 'Should writes to the Transcript also be sent to the standard output stream. Note that standard out may not be available on all platforms, or with all VMs. If it is not available, this will be ignored. Also note that this setting will not take effect until the image restarts, or until HeadlessImage&gt;&gt;setUpTranscript is run.'</body><body package="Tools-Settings-VW">transcriptToStandardOutHeadless	&lt;setting: #(system transcript transcriptToStandardOutHeadless) position: 50&gt;	^(BooleanSetting 			on: HeadlessImage current			aspect: #transcriptToStandardOutHeadless)	default: true;	label: #TranscriptToStandardOutHeadless &lt;&lt; #labels &gt;&gt; 'Send headless Transcript writes to standard out (if available)';	helpText: #TranscriptToStandardOutHeadlessHelp &lt;&lt; #dialogs &gt;&gt; 'When the system is running headless, should writes to the Transcript also be sent to the standard output stream. Note that standard out may not be available on all platforms, or with all VMs. If it is not available, this will be ignored. Also note that this setting will not take effect until the image restarts, or until HeadlessImage&gt;&gt;setUpTranscript is run.'</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-deprecation</category><body package="Tools-Settings-VW">deprecation05RaiseException	&lt;setting: #(#deprecation #raiseException)&gt;	^(BooleanSetting on: Deprecated aspect: #raiseException)		label: #DeprecateRaiseException &lt;&lt; #labels &gt;&gt; 'Raise Exceptions';		helpText: #DeprecateRaiseExceptionHelp &lt;&lt; #labels					&gt;&gt; 'Raise a proceedable exception whenever deprecated messages are encountered.'</body><body package="Tools-Settings-VW">deprecation10LogToTranscript	&lt;setting: #(#deprecation #logToTranscript)&gt;	^(BooleanSetting on: Deprecated aspect: #logToTranscript)		label: #DeprecateLogToTranscript &lt;&lt; #labels &gt;&gt; 'Log To Transcript';		helpText: #DeprecateLogToTranscriptHelp &lt;&lt; #labels					&gt;&gt; 'Enable transcript logging when deprecated messages are encountered.'</body><body package="Tools-Settings-VW">deprecationPage	&lt;settingsPage: #(#deprecation) position: -15&gt;	^(ModularSettingsPage new)		label: #Deprecation &lt;&lt; #labels &gt;&gt; 'Deprecation';		icon: GeneralIcons deprecationWarning;		settings: (self settingsWithPrefix: #(#deprecation))</body></methods><methods><class-id>Tools.VisualWorksHomePage class</class-id> <category>interface specs</category><body package="Tools-Settings-VW">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 512 384 768 628 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 50 0 ) 					#name: #ModuleSubcanvas 					#flags: 0 					#majorKey: #{DirectorySettingModule} 					#minorKey: #windowSpec 					#clientKey: #directoryModule ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 55 160 80 ) 					#name: #pasteButton 					#model: #detectAndPasteDirectory 					#label: 					#(#{Kernel.UserMessage} 						#key: #PasteCurrent 						#defaultString: 'Paste Current' 						#catalogID: #dialogs ) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 95 0 0 1 0 1 ) 					#name: #HelpTextEditor 					#flags: 4 					#model: #helpTextHolder 					#style: #small 					#isReadOnly: true 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>Tools.VisualWorksMemoryPolicyPage class</class-id> <category>interface specs</category><body package="Tools-Settings-VW">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec}		#window: #(#{UI.WindowSpec}			#label: #(#{Kernel.UserMessage}				#key: #UnlabeledCanvas				#defaultString: 'Unlabeled Canvas'				#catalogID: #labels)			#bounds: #(#{Graphics.Rectangle} 576 412 904 756))		#component: #(#{UI.SpecCollection}			#collection: #(#(#{UI.LabelSpec}				#layout: #(#{UI.AlignmentOrigin} 0 0 30 0 0 1)				#name: #Label1				#label: #(#{UserMessage}					#key: #CurrentPolicyC					#catalogID: #labels					#defaultString: 'Current policy:')) #(#{UI.InputFieldSpec}				#layout: #(#{Graphics.LayoutFrame} 0 0.332317 7 0 0 1.0 32 0)				#name: #InputField1				#model: #currentMemoryPolicyClass				#isReadOnly: true				#type: #object) #(#{UI.LabelSpec}				#layout: #(#{UI.AlignmentOrigin} 0 0 60 0 0 1)				#name: #Label6				#label: #(#{Kernel.UserMessage}					#key: #UpperBounds					#defaultString: 'Upper Bounds'					#catalogID: #labels)) #(#{UI.LabelSpec}				#layout: #(#{UI.AlignmentOrigin} 0 0.332317 60 0 0 1)				#name: #Label4				#label: #(#{Kernel.UserMessage}					#key: #Default					#defaultString: 'Default'					#catalogID: #labels)) #(#{UI.LabelSpec}				#layout: #(#{UI.AlignmentOrigin} 0 0.667683 60 0 0 1)				#name: #Label5				#label: #(#{Kernel.UserMessage}					#key: #Current					#defaultString: 'Current'					#catalogID: #labels)) #(#{UI.DividerSpec}				#layout: #(#{Graphics.LayoutFrame} 0 0 65 0 0 1.0 68 0)				#name: #Divider1) #(#{UI.LabelSpec}				#layout: #(#{UI.AlignmentOrigin} 0 0 96 0 0 1)				#name: #Label2				#label: #(#{Kernel.UserMessage}					#key: #MemoryC					#defaultString: 'Memory:'					#catalogID: #labels)) #(#{UI.InputFieldSpec}				#layout: #(#{Graphics.LayoutFrame} 0 0.332317 73 0 0 0.667683 98 0)				#name: #defaultMemoryField				#model: #defaultMemoryHolder				#type: #number				#formatString: '#,##0') #(#{UI.InputFieldSpec}				#layout: #(#{Graphics.LayoutFrame} 0 0.667683 73 0 0 1.0 98 0)				#name: #currentMemoryField				#model: #currentMemoryHolder				#isReadOnly: true				#type: #number				#formatString: '#,##0') #(#{UI.ActionButtonSpec}				#layout: #(#{Graphics.LayoutFrame} 0 0.332317 113 0 0 0.667683 138 0)				#name: #setNowButton				#model: #setDefaultsNow				#label: #(#{Kernel.UserMessage}					#key: #MakeCurrent					#defaultString: 'Make Current'					#catalogID: #labels)				#defaultable: true))))</body></methods><methods><class-id>Tools.ListIconLibrary class</class-id> <category>resources</category><body package="Tools-Settings-VW">loadOptions16x16	"UIMaskEditor new openOnClass: self andSelector: #loadOptions16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1735 2666 3630)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 5075 6456)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[170 170 170 170 170 170 234 170 170 171 90 170 170 173 66 170 170 170 106 170 171 170 106 186 173 170 106 182 181 90 105 84 164 166 102 146 168 166 102 138 170 166 102 170 170 166 102 170 170 166 102 170 170 166 102 170 170 170 170 170 170 170 170 170])</body><body package="Tools-Settings-VW">loadOptions16x16mask	"UIMaskEditor new openOnClass: self andSelector: #loadOptions16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 128 0 0 1 192 0 0 3 224 0 0 0 128 0 0 16 132 0 0 48 134 0 0 124 159 0 0 50 166 0 0 18 164 0 0 2 160 0 0 2 160 0 0 2 160 0 0 2 160 0 0 0 0 0 0 0 0 0 0])</body><body package="Tools-Settings-VW">psPrinter16x16	"Tools.UIMaskEditor new openOnClass: self andSelector: #psPrinter16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 9) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 5548 scaledGreen: 5548 scaledBlue: 5548); at: 3 put: (Graphics.ColorValue scaledRed: 6869 scaledGreen: 6869 scaledBlue: 6869); at: 4 put: (Graphics.ColorValue scaledRed: 3170 scaledGreen: 3170 scaledBlue: 3170); at: 5 put: Graphics.ColorValue white; at: 6 put: Graphics.ColorValue yellow; at: 7 put: Graphics.ColorValue red; at: 8 put: (Graphics.ColorValue scaledRed: 2113 scaledGreen: 2113 scaledBlue: 2113); at: 9 put: (Graphics.ColorValue scaledRed: 4227 scaledGreen: 4227 scaledBlue: 4227); yourself)) usingBits: #[68 68 68 68 68 68 68 68 68 68 71 119 112 68 68 68 68 68 71 102 4 4 68 68 68 68 71 102 4 64 68 68 68 68 71 102 0 0 68 68 68 68 71 102 102 96 68 68 68 68 135 102 102 103 34 4 68 72 40 136 136 136 40 4 68 130 34 34 34 34 136 4 68 129 17 17 17 17 136 4 68 129 17 17 21 81 136 4 68 129 17 17 17 17 128 68 68 129 17 17 17 17 4 68 68 67 51 51 51 48 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68 68])</body><body package="Tools-Settings-VW">psPrinter16x16mask	"UIMaskEditor new openOnClass: self andSelector: #printer16x16mask"	&lt;resource: #image&gt;	^CachedImage on: ((Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 7 240 0 0 7 240 0 0 7 240 0 0 7 240 0 0 7 252 0 0 15 254 0 0 31 254 0 0 63 254 0 0 63 254 0 0 63 254 0 0 63 252 0 0 63 248 0 0 31 240 0 0 0 0 0 0 0 0 0 0]))</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - file</category><body package="Tools-Settings-VW">menuItemSetVisualWorksHome	"VisualLauncher someInstance setVisualWorksHome"	&lt;vwPrivileged&gt;	&lt;menuItemForCommand: #setVisualWorksHome		nameKey: nil		menu: #(#menuBar #file)		position: 1000.1&gt;	VisualWorksSettings openManagerPage: #(#system)</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - system</category><body package="Tools-Settings-VW">menuItemVisualWorksSettings	&lt;vwPrivileged&gt;	&lt;menuItemForCommand: #vwOpenSettings		icon: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #settings )		nameKey: nil		menu: #(#menuBar #system)		position: 1000.1&gt;	SettingsManager openOrRaise: VisualWorksSettings</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>toolbar</category><body package="Tools-Settings-VW">toolbarItemVisualWorksSettings	&lt;vwPrivileged&gt;	&lt;menuItemForCommand: #vwOpenSettings		icon: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #settings )		nameKey: nil		menu: #(#launcherToolBar)		position: 10.2		helpText: #(#EditTheSystemOptions #menus 'Edit the system options')&gt;	SettingsManager openOrRaise: VisualWorksSettings</body></methods><methods><class-id>UI.CommandRegistry class</class-id> <category>commands - launcher</category><body package="Tools-Settings-VW">openVisualWorksSettingsCommand	&lt;command: #vwOpenSettings&gt;	^Command		label: (#_Settings &lt;&lt; #menus &gt;&gt; '&amp;Settings' )		group: #launcher		bindings: #()</body><body package="Tools-Settings-VW">setVisualWorksHomeCommand	&lt;command: #setVisualWorksHome&gt;	^Command		label: (#_SetVisualWorksHome &lt;&lt; #menus &gt;&gt; '&amp;Set VisualWorks Home...' )		group: #launcher		bindings: #()</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>SettingsManagerPage</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>manager id position label icon children definingMethod </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-UI</category><attributes><package>Tools-Settings</package></attributes></class><class><name>ModularSettingsPage</name><environment>Tools</environment><super>Tools.SettingsManagerPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars>settings modules spec preferredModuleClasses enablementTrackers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-UI</category><attributes><package>Tools-Settings</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>SettingsDomain</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cachedSettings cachedPages unappliedSnapshots </inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>Tools-Settings</category><attributes><package>Tools-Settings</package></attributes></class></st-source>