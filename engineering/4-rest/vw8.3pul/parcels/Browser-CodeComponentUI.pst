<?xml version="1.0"?><st-source><!-- Name: Browser-CodeComponentUINotice: Copyright 1999-2017 Cincom Systems, Inc.  All rights reserved.Portions © 1998-2002 The Refactory, IncComment: This package contains classes for the refactoring browser's code component tools.DbIdentifier: bear73DbTrace: 501800DbUsername: willowDbVersion: 8.3 - 3DevelopmentPrerequisites: #(#(#any 'Browser-SourceCodeUI' '') #(#any 'ExternalWebBrowser-Text' ''))PackageName: Browser-CodeComponentUIParcel: #('Browser-CodeComponentUI')ParcelName: Browser-CodeComponentUIPrerequisiteDescriptions: #(#(#name 'Browser-SourceCodeUI' #componentType #package) #(#name 'ExternalWebBrowser-Text' #componentType #package))PrerequisiteParcels: #(#('Browser-SourceCodeUI' '') #('ExternalWebBrowser-Text' ''))PrintStringCache: (8.3 - 3,willow)Version: 8.3 - 3Date: 3:26:56 PM June 30, 2017 --><time-stamp>From VisualWorks®, Pre-Release 8.3 (jun17.4) of June 23, 2017 on June 30, 2017 at 3:26:56 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>CodeComponentInspectPropertiesTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inspector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Browser-CodeComponentUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentInspectPropertiesTool</class-id><body>I bridge between the RB Code Tool API and the Trippy Inspector to show properties for a code compnent that are not dealt with specifically by a specific tool. I avoid properties that ought not be messed with.</body></comment><class><name>CodeComponentPropertiesTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>propertiesList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-CodeComponentUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id><body>I am a code tool that is used to edit the properties of packages and parcels.Different viewers are registered with me using the instance side &lt;properties: number&gt; method tab. See the method protocol 'registered properties' for examples.Instance Variables:	propertiesList	&lt;SelectionInList&gt;	the different property tools</body></comment><class><name>CodeComponentPropertiesInspector</name><environment>Refactory.Browser</environment><super>Tools.Trippy.PartListAbstractInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>propertyParts </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Browser-CodeComponentUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentPropertiesInspector</class-id><body>I provide an inspector like experience for editing the properties of a code component. I was really just designed to be used in an "embedded" mode and should always be pointed at a CodeComponent.I collaborate with a special Part subclass: CodeComponentProperty.From an interaction point-of-view, I'm modeled somewhat after a DictionaryInspector.Instance Variables:	propertyParts	&lt;List&gt;	a collection of CodeComponentProperty</body></comment><class><name>CodeComponentBlockTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDocumentTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>property argumentCount name helpTopic defaultSource </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-CodeComponentUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentBlockTool</class-id><body>CodeComponentBlockTool is a code tool that edits the property blocks of packages and parcels.Instance Variables:	argumentCount		&lt;Integer&gt;	the number of arguments that the block should have	defaultSource	&lt;String&gt;	the source string to use if this property is not yet set	helpTopic	&lt;String&gt;	the help topic to use for the help: API	name	&lt;String | UserMessage&gt;	the name that tool shows up in the UI as	property &lt;Symbol&gt;	the property block that we are editing</body></comment><class><name>CodeComponentInspectorField</name><environment>Refactory.Browser</environment><super>Tools.Trippy.Part</super><private>false</private><indexed-type>none</indexed-type><inst-vars>key </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Browser-CodeComponentUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentInspectorField</class-id><body>I provide a facade to the property entries of a CodeComponent. My 'object' is meant to be a CodeComponent.Instance Variables:	key	&lt;Symbol&gt;	which property key I'm representing</body></comment><class><name>CodeComponentSummaryTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-CodeComponentUI</package></attributes></class><comment><class-id>Refactory.Browser.CodeComponentSummaryTool</class-id><body>Display a summary/overview view of the selected code component.</body></comment><methods><class-id>Refactory.Browser.CodeComponentInspectPropertiesTool</class-id> <category>initialize-release</category><body package="Browser-CodeComponentUI">initialize		super initialize.	inspector := Tools.Trippy.InspectorHolder		with: (CodeComponentPropertiesInspector on: nil).	^self</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectPropertiesTool</class-id> <category>updating</category><body package="Browser-CodeComponentUI">updateContents	inspector inspector initialize: self codeComponent</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectPropertiesTool</class-id> <category>accessing</category><body package="Browser-CodeComponentUI">inspector	^inspector</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectPropertiesTool</class-id> <category>help</category><body package="Browser-CodeComponentUI">helpTopic	^'topic:vw.help.tools.browser.properties'</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectPropertiesTool</class-id> <category>tab APIs</category><body package="Browser-CodeComponentUI">tabName	^#InspectAll &gt;&gt; 'Inspect All' &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>aspects</category><body package="Browser-CodeComponentUI">newPropertyView: propertyTool container: aContainer	| view |	view := CompositePart new.	view		client: propertyTool		spec: propertyTool class windowSpec decodeAsLiteralArray		builder: builder newSubBuilder.	view container: aContainer.	view layoutComponentSubtreeIfNeeded.	^view</body><body package="Browser-CodeComponentUI">propertiesList	^propertiesList</body><body package="Browser-CodeComponentUI">propertyPort	| port |	port := PartPort new.	port childCreationBlock: [:propertyTool :container | self newPropertyView: propertyTool container: container].	port selectionSlot: propertiesList selectionHolder.	^port</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>subcanvases</category><body package="Browser-CodeComponentUI">subcanvases		^super subcanvases		, (propertiesList list select: [:each | each builder notNil])</body><body package="Browser-CodeComponentUI">updateDisplay	self selectedProperty ifNotNil: [:prop | prop updateDisplay]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>initialize-release</category><body package="Browser-CodeComponentUI">codeModel: aCodeModel	super codeModel: aCodeModel.	self initProperitesList</body><body package="Browser-CodeComponentUI">createProperties	"Don't call this before codeModel is set, as many of the property setting selectors need to grab my codeModel."	| selectors |	selectors := Pragma		allNamed: #property:		in: self class		sortedByArgument: 1.	^List withAll: (selectors collect: [:each | self perform: each selector])</body><body package="Browser-CodeComponentUI">initProperitesList	"Don't call this before codeModel is set, as many of the property setting selectors need to grab my codeModel."	propertiesList := SelectionInList with: self createProperties.	propertiesList selectionIndex: 1</body><body package="Browser-CodeComponentUI">release	propertiesList list do: [:each | each release].	super release</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>changing</category><body package="Browser-CodeComponentUI">changedSelection	self updateContents</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>updating</category><body package="Browser-CodeComponentUI">updateContents	self selectedProperty ifNotNil: [:prop | prop updateContents]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>menu accessing</category><body package="Browser-CodeComponentUI">menu	^[self selectedProperty		ifNil: [super menu]		ifNotNil: [:prop | prop menu value]]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>accessing</category><body package="Browser-CodeComponentUI">activeTool	^self selectedProperty</body><body package="Browser-CodeComponentUI">selectedProperty	^propertiesList selection</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>help</category><body package="Browser-CodeComponentUI">helpTopic	^self selectedProperty		ifNotNil: [:property | property helpTopic]		ifNil: [super helpTopic]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>tab APIs</category><body package="Browser-CodeComponentUI">isActive	^self narrowestSelectionType == #codeComponent</body><body package="Browser-CodeComponentUI">tabName	^#Properties &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>private</category><body package="Browser-CodeComponentUI">validatePropertySelectionChange: aSequenceController	"First part denies selecting nothing."		aSequenceController view selectionIndex		~= aSequenceController view targetIndex ifFalse: [^false].	^self updateRequest</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesInspector</class-id> <category>actions</category><body package="Browser-CodeComponentUI">add	| newKey |	newKey := self requestNewPropertyKey ifNil: [^self].	(object properties includesKey: newKey)		ifFalse: [object propertyAt: newKey put: ''].	self refresh.	self select: (propertyParts detect: [:each | each key == newKey])</body><body package="Browser-CodeComponentUI">removeSelected	self selections		do:			[:each | 			each isProtected				ifFalse:					[object						propertyAt: each key						put: nil]].	self refresh</body><body package="Browser-CodeComponentUI">requestNewPropertyKey	| string key |	string := (Dialog		request: #AddNewKeyC &lt;&lt; #dialogs &gt;&gt; 'Add new key:'		initialAnswer: ''		onCancel: [^nil]) trimBlanks.	string size = 0 ifTrue: [^nil].	key := string asSymbol.	(CodeComponentInspectorField protectedKeys includes: key)		ifTrue:			[^Dialog				warn:					(#ProtectedKey &gt;&gt; 'Protected Key: &lt;1s&gt;' &lt;&lt; #browser expandMacrosWith: key)].	^key</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesInspector</class-id> <category>decomposing</category><body package="Browser-CodeComponentUI">partAt: anIndex	^propertyParts at: anIndex</body><body package="Browser-CodeComponentUI">partCount	^object		ifNil: [0]		ifNotNil: [propertyParts size]</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesInspector</class-id> <category>properties</category><body package="Browser-CodeComponentUI">dragControllerClass	^Tools.Trippy.ReplaceOnlyDragController</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesInspector</class-id> <category>private</category><body package="Browser-CodeComponentUI">refresh		propertyParts := object		ifNil: [List new]		ifNotNil:			[(object properties keys asList				collect: [:each | CodeComponentInspectorField named: each in: object]) sorted].	super refresh</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesInspector</class-id> <category>menu management</category><body package="Browser-CodeComponentUI">buildFieldListMenu	| menu |	menu := super buildFieldListMenu.	menu addLine.	self addAddAndRemoveItemsTo: menu.	^menu</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesInspector</class-id> <category>updating</category><body package="Browser-CodeComponentUI">update: aspectSymbol with: parameter from: sender	"Some aspect of the model has changed."	(sender == documentHolder and: [aspectSymbol == #accepted])		ifTrue: [^self postAccept].	^super update: aspectSymbol with: parameter from: sender</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>actions</category><body package="Browser-CodeComponentUI">acceptDocument	| block codeComponent compiledMethod |	compiledMethod := self editorWidget compileMethod: #OnSave.	compiledMethod ifNil: [^false].	self hasChanged ifFalse: [		self editorWidget animateAccept.		^true].	codeComponent := self codeComponent.	codeComponent isNil ifTrue: [^false].	block := nil performMethod: compiledMethod.	(block isKindOf: BlockClosure) ifFalse: [		self editorWidget warning: (#DidNotEvaluateToABlock &lt;&lt; #browser &gt;&gt; 'Did not evaluate to a block') expandMacros.		self editorWidget compileMethod: #OnSave.		^false].	block numArgs ~= argumentCount ifTrue: [		self editorWidget warning: ((#BlockDoesNotHaveCorrectNumArgs1s &lt;&lt; #browser &gt;&gt; 'Block does not have the correct number of arguments (&lt;1s&gt;)')			expandMacrosWith: argumentCount printString).		self editorWidget compileMethod: #OnSave.		^false].	self editorWidget accept.	codeComponent perform: ((#x1sC &lt;&lt; #browser &gt;&gt; '&lt;1s&gt;:')			expandMacrosWith: property) asSymbol		with: block.	self updateContents.	^true</body><body package="Browser-CodeComponentUI">cancelDocument	self editorWidget ifNotNil: [:editor | editor warning: nil].	super cancelDocument</body><body package="Browser-CodeComponentUI">restore	| codeComponent |	codeComponent := self codeComponent.	codeComponent isNil 		ifFalse: [codeComponent perform: (property , ':') asSymbol with: nil].	self updateContents</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>initialize-release</category><body package="Browser-CodeComponentUI">argumentCount: anInteger	argumentCount := anInteger</body><body package="Browser-CodeComponentUI">defaultSource: aString 	defaultSource := aString</body><body package="Browser-CodeComponentUI">helpTopic: aString 	helpTopic := aString</body><body package="Browser-CodeComponentUI">name: anObject	name := anObject</body><body package="Browser-CodeComponentUI">property: aSymbol	property := aSymbol</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>updating</category><body package="Browser-CodeComponentUI">defaultBlockSource	^defaultSource</body><body package="Browser-CodeComponentUI">updateContents	| codeComponent block |	self updateDisplay.	codeComponent := self codeComponent.	property isNil | codeComponent isNil ifTrue: [^self document: ''].	block := codeComponent perform: property.	self editorWidget warning: nil.	self document:		(block			ifNil: [self defaultBlockSource]			ifNotNil:				[block isString					ifTrue: [block]					ifFalse: [block method getSource asString]])</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>tab APIs</category><body package="Browser-CodeComponentUI">tabName	^name asString</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>accessing</category><body package="Browser-CodeComponentUI">doItEnvironment	| codeComponent |	codeComponent := self codeComponent.	codeComponent isNil ifTrue: [^Smalltalk].	^codeComponent class environmentForActionBlocks</body><body package="Browser-CodeComponentUI">doItExpectPattern	^false</body><body package="Browser-CodeComponentUI">doItReceiver	^nil</body><body package="Browser-CodeComponentUI">doItReceiverAllowed	^false</body><body package="Browser-CodeComponentUI">doItReceiverClass	^Object</body><body package="Browser-CodeComponentUI">helpTopic	^helpTopic</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool</class-id> <category>subcanvases</category><body package="Browser-CodeComponentUI">isWorkspace	^false</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool class</class-id> <category>instance creation</category><body package="Browser-CodeComponentUI">postLoadBlock	"Named with the 'Block' because postLoad is superclass implemented."	^(self new)		property: #postLoadBlock;		name: #PostLoad &lt;&lt; #browser &gt;&gt; 'Post-load';		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'topic:vw.help.tools.browser.properties.postload';		yourself</body><body package="Browser-CodeComponentUI">postUnload	^(self new)		property: #postUnloadBlock;		name: #PostUnload &gt;&gt; 'Post-unload ' &lt;&lt; #browser;		argumentCount: 0;		defaultSource: '[]';		helpTopic: 'topic:vw.help.tools.browser.properties.postunload';		yourself</body><body package="Browser-CodeComponentUI">preLoad	^(self new)		property: #preLoadBlock;		name: #PreLoad &gt;&gt; 'Pre-load' &lt;&lt; #browser;		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'topic:vw.help.tools.browser.properties.preload';		yourself</body><body package="Browser-CodeComponentUI">preRead	^(self new)		property: #preReadBlock;		name: #PreRead &gt;&gt; 'Pre-read' &lt;&lt; #browser;		argumentCount: 0;		defaultSource: '[booleanExpression]';		helpTopic: 'topic:vw.help.tools.browser.properties.preread';		yourself</body><body package="Browser-CodeComponentUI">prerequisiteVersionSelection	^(self new)		property: #versionSelectionBlock;		name: #PrerequisiteVersionSelection &gt;&gt; 'Prerequisite Version Selection' &lt;&lt; #browser;		argumentCount: 3;		defaultSource: '[:parcelName :versionString :requiredVersionString |booleanExpression]';		helpTopic: 'topic:vw.help.tools.browser.properties.prereqVersion';		yourself</body><body package="Browser-CodeComponentUI">preSave	^(self new)		property: #preSaveBlock;		name: #PreSave &gt;&gt; 'Pre-save' &lt;&lt; #browser;		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'topic:vw.help.tools.browser.properties.presave';		yourself</body><body package="Browser-CodeComponentUI">preUnload	^(self new)		property: #preUnloadBlock;		name: #PreUnload &gt;&gt; 'Pre-unload' &lt;&lt; #browser;		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'topic:vw.help.tools.browser.properties.preunload';		yourself</body><body package="Browser-CodeComponentUI">warningSuppression	^(self new)		property: #warningSuppressionBlock;		name: #WarningSuppression &lt;&lt; #browser &gt;&gt; 'Warning Suppression';		argumentCount: 1;		defaultSource:				'[:prerequisiteName |booleanExpression]';		helpTopic: 'topic:vw.help.tools.browser.properties.warning';		yourself</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectorField</class-id> <category>accessing</category><body package="Browser-CodeComponentUI">codeComponent	^object</body><body package="Browser-CodeComponentUI">displayIcon	self isProtected ifFalse: [^super displayIcon].	^VisualStack with: super displayIcon with: GeneralIcons protectedSubscript</body><body package="Browser-CodeComponentUI">key	^key</body><body package="Browser-CodeComponentUI">partName	^key printString</body><body package="Browser-CodeComponentUI">value	^self codeComponent propertyAt: key</body><body package="Browser-CodeComponentUI">value: anObject		RefactoryChangeManager instance		performChange:			((CodeComponentPropertyChange component: self codeComponent) propertyAt:					key put: anObject)</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectorField</class-id> <category>comparing</category><body package="Browser-CodeComponentUI">&lt;= aPropertyPart	^self isProtected ~= aPropertyPart isProtected		ifTrue: [aPropertyPart isProtected]		ifFalse: [key &lt;= aPropertyPart key]</body><body package="Browser-CodeComponentUI">sameTypeEquals: aPart	^key = aPart key and: [self codeComponent = aPart codeComponent]</body><body package="Browser-CodeComponentUI">specificHash	^self codeComponent hash bitXor: key hash</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectorField</class-id> <category>printing</category><body package="Browser-CodeComponentUI">displayString	^key asString</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectorField</class-id> <category>testing</category><body package="Browser-CodeComponentUI">isProtected	^self class protectedKeys includes: key</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectorField</class-id> <category>initialize-release</category><body package="Browser-CodeComponentUI">key: aSymbol 	key := aSymbol</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectorField class</class-id> <category>instance creation</category><body package="Browser-CodeComponentUI">named: aPropertyKey in: aCodeComponent	^(self new)		key: aPropertyKey;		object: aCodeComponent;		yourself</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectorField class</class-id> <category>utility</category><body package="Browser-CodeComponentUI">protectedKeys	^CodeComponent binaryActions , CodeComponent volatilePropertyKeys		, CodeComponent uneditablePropertyKeys</body></methods><methods><class-id>Refactory.Browser.CodeComponentSummaryTool</class-id> <category>private</category><body package="Browser-CodeComponentUI">connectionsTextOn: aTextStream	"Show a line for each connection according to the connections toolText."		| connections |	self		heading: #Repositories &lt;&lt; #browser &gt;&gt; 'Repositories'		textOn: aTextStream.	connections := (self codeComponent isKindOf: Store.PundleModel)		ifTrue:			[(self codeComponent databaseInformations				reject: [:each | each dbIdentifier isEmpty])				sorted: [:a :b | a dbIdentifier &lt; b dbIdentifier]]		ifFalse: [#()].	connections isEmpty ifTrue: [^self noneTextOn: aTextStream].	connections		do: [:each | aTextStream nextPutAllText: each toolText]		separatedBy: [aTextStream cr]</body><body package="Browser-CodeComponentUI">heading: aStringable textOn: aTextStream	"Place a section header for the summary with specific styling on aTextStream."		aTextStream		emphasize: #(#large #bold)			during: [aTextStream nextPutAll: aStringable asString];		cr</body><body package="Browser-CodeComponentUI">nameTextOn: aTextStream	"Print the name at the top big and bold."		aTextStream		emphasize: #(#large #bold #underline)		during: [aTextStream nextPutAll: self codeComponent name]</body><body package="Browser-CodeComponentUI">noneTextOn: aTextStream	"Handy for emitting the &lt;none&gt; text for different sections."		^aTextStream		emphasize:			(Array				with: #color -&gt; SymbolicPaint inactiveForeground				with: #italic)		during: [aTextStream nextPutAll: (#None &lt;&lt; #browser &gt;&gt; '&lt;None&gt;') asString]</body><body package="Browser-CodeComponentUI">prerequisiteTextOn: aTextStream	"Print the prerequisite section. Provide annotations for the cases where the two prerequisite streams do not match."	self heading: #Prerequisites &lt;&lt; #browser &gt;&gt; 'Prerequisites'		textOn: aTextStream.	self codeComponent prerequisiteDescriptions isEmpty		ifTrue: [^self noneTextOn: aTextStream].	self codeComponent prerequisiteDescriptions do: 			[:each |			aTextStream nextPutAll: each name.			each isParcelOnly				ifTrue: 					[aTextStream						space;						emphasize: (Array with: #color -&gt; ColorValue red with: #italic)							during: 								[aTextStream nextPutAll: ('(&lt;1s&gt;)'											expandMacrosWith: #ParcelOnly &lt;&lt; #IDE &gt;&gt; 'Parcel Only')]].			each isStoreOnly				ifTrue: 					[aTextStream						space;						emphasize: (Array with: #color -&gt; ColorValue orange with: #italic)							during: 								[aTextStream									nextPutAll: ('(&lt;1s&gt;)' expandMacrosWith: #StoreOnly &lt;&lt; #IDE &gt;&gt; 'Store Only')]].			aTextStream cr]</body><body package="Browser-CodeComponentUI">summaryText		| stream |	stream := TextStream on: String new.	self nameTextOn: stream.	stream		cr;		cr.	self connectionsTextOn: stream.	stream		cr;		cr.	self prerequisiteTextOn: stream.	^stream contents</body></methods><methods><class-id>Refactory.Browser.CodeComponentSummaryTool</class-id> <category>tab APIs</category><body package="Browser-CodeComponentUI">tabName		^#Summary &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.CodeComponentSummaryTool</class-id> <category>interface opening</category><body package="Browser-CodeComponentUI">postBuildWith: aBuilder		super postBuildWith: aBuilder.	(self textController)		readOnly: true;		selectable: true</body></methods><methods><class-id>Refactory.Browser.CodeComponentSummaryTool</class-id> <category>updating</category><body package="Browser-CodeComponentUI">updateContents	"What a pain, TextEditorView makes this (where this equals messing with the tabs via the style) kind of hard, so we have to get down and dirty with its guts."		| newText view paragraph newStyle widths left tabs |	newText := self summaryText addHyperlinkEmphases.	self textController ifNil: [^self].	view := self textController view.	paragraph := view displayContents.	newStyle := paragraph textStyle copy.	widths := newText computeMinimumTabWidthsUsing: view graphicsContext.	left := 0.	tabs := widths collect: [:each | left := left + each + 45].	newStyle useTabs: #(1) , tabs.	paragraph		compositionWidth: view wrappingBox width		text: newText		style: newStyle		fitWidth: true.	view		displayContents: paragraph;		invalidate</body></methods><methods><class-id>Refactory.Browser.CodeComponentSummaryTool class</class-id> <category>instance creation</category><body package="Browser-CodeComponentUI">postLoadBlock	"Named with the 'Block' because postLoad is superclass implemented."	^(self new)		property: #postLoadBlock;		name: #PostLoad &lt;&lt; #browser &gt;&gt; 'Post-load';		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'topic:vw.help.tools.browser.properties.postload';		yourself</body><body package="Browser-CodeComponentUI">postUnload	^(self new)		property: #postUnloadBlock;		name: #PostUnload &gt;&gt; 'Post-unload ' &lt;&lt; #browser;		argumentCount: 0;		defaultSource: '[]';		helpTopic: 'topic:vw.help.tools.browser.properties.postunload';		yourself</body><body package="Browser-CodeComponentUI">preLoad	^(self new)		property: #preLoadBlock;		name: #PreLoad &gt;&gt; 'Pre-load' &lt;&lt; #browser;		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'topic:vw.help.tools.browser.properties.preload';		yourself</body><body package="Browser-CodeComponentUI">preRead	^(self new)		property: #preReadBlock;		name: #PreRead &gt;&gt; 'Pre-read' &lt;&lt; #browser;		argumentCount: 0;		defaultSource: '[booleanExpression]';		helpTopic: 'topic:vw.help.tools.browser.properties.preread';		yourself</body><body package="Browser-CodeComponentUI">prerequisiteVersionSelection	^(self new)		property: #versionSelectionBlock;		name: #PrerequisiteVersionSelection &gt;&gt; 'Prerequisite Version Selection' &lt;&lt; #browser;		argumentCount: 3;		defaultSource: '[:parcelName :versionString :requiredVersionString |booleanExpression]';		helpTopic: 'topic:vw.help.tools.browser.properties.prereqVersion';		yourself</body><body package="Browser-CodeComponentUI">preSave	^(self new)		property: #preSaveBlock;		name: #PreSave &gt;&gt; 'Pre-save' &lt;&lt; #browser;		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'topic:vw.help.tools.browser.properties.presave';		yourself</body><body package="Browser-CodeComponentUI">preUnload	^(self new)		property: #preUnloadBlock;		name: #PreUnload &gt;&gt; 'Pre-unload' &lt;&lt; #browser;		argumentCount: 1;		defaultSource: '[:package | ]';		helpTopic: 'topic:vw.help.tools.browser.properties.preunload';		yourself</body><body package="Browser-CodeComponentUI">warningSuppression	^(self new)		property: #warningSuppressionBlock;		name: #WarningSuppression &lt;&lt; #browser &gt;&gt; 'Warning Suppression';		argumentCount: 1;		defaultSource:				'[:prerequisiteName |booleanExpression]';		helpTopic: 'topic:vw.help.tools.browser.properties.warning';		yourself</body></methods><methods><class-id>Refactory.Browser.CodeComponentInspectPropertiesTool class</class-id> <category>interface specs</category><body package="Browser-CodeComponentUI">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 720 450 920 650 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #inspectorCanvas 					#majorKey: #{Tools.Trippy.InspectorHolder} 					#minorKey: #windowSpec 					#clientKey: #inspector ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool</class-id> <category>registered properties</category><body package="Browser-CodeComponentUI">miscProperties	&lt;property: 200&gt;	^CodeComponentInspectPropertiesTool new codeModel: codeModel</body><body package="Browser-CodeComponentUI">postLoadActionProperty	&lt;property: 80&gt;	^CodeComponentBlockTool postLoadBlock codeModel: codeModel</body><body package="Browser-CodeComponentUI">postUnloadActionProperty	&lt;property: 100&gt;	^CodeComponentBlockTool postUnload codeModel: codeModel</body><body package="Browser-CodeComponentUI">preLoadActionProperty	&lt;property: 70&gt;	^CodeComponentBlockTool preLoad codeModel: codeModel</body><body package="Browser-CodeComponentUI">preReadActionProperty	&lt;property: 60&gt;	^CodeComponentBlockTool preRead codeModel: codeModel</body><body package="Browser-CodeComponentUI">prerequisiteVersionSelectionActionProperty	&lt;property: 50&gt;	^CodeComponentBlockTool prerequisiteVersionSelection codeModel: codeModel</body><body package="Browser-CodeComponentUI">preSaveActionProperty	&lt;property: 110&gt;	^CodeComponentBlockTool preSave codeModel: codeModel</body><body package="Browser-CodeComponentUI">preUnloadActionProperty	&lt;property: 90&gt;	^CodeComponentBlockTool preUnload codeModel: codeModel</body><body package="Browser-CodeComponentUI">summaryProperty		&lt;property: 10&gt;	^CodeComponentSummaryTool codeModel: codeModel</body><body package="Browser-CodeComponentUI">warningSuppressionActionProperty	&lt;property: 40&gt;	^CodeComponentBlockTool warningSuppression codeModel: codeModel</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool class</class-id> <category>interface specs</category><body package="Browser-CodeComponentUI">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 640 512 840 712 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.25 0 1 ) 					#name: #propertiesList 					#model: #propertiesList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSelection 						#requestValueChangeSelector: 						#validatePropertySelectionChange: ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.25 0 0 2 0.25 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'propertiesList' 					#belowWidgets: 'propertyPort' ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.25 0 0 0 1 0 1 ) 					#name: #propertyPort 					#flags: 0 					#component: #propertyPort ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CodeComponentPropertiesTool class</class-id> <category>method tags</category><body package="Browser-CodeComponentUI">propertyTags	&lt;pragmas: #instance&gt;	^#(#property:)</body></methods><methods><class-id>Refactory.Browser.CodeComponentBlockTool class</class-id> <category>interface specs</category><body package="Browser-CodeComponentUI">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 1096 607 1462 832 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Refactory.Browser.SourceCodeEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -40 1 ) 					#name: #documentEditor 					#isOpaque: true 					#model: #documentHolder 					#isWrapped: true 					#isReadOnly: false 					#showHiddenCharacters: false 					#showLineStriping: false 					#continuousAccept: false 					#showInputCursor: true 					#showSelection: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -308 1 -32 1 -208 1 -4 1 ) 					#name: #okButton 					#model: #acceptDocument 					#label: 					#(#{Kernel.UserMessage} 						#key: #Apply 						#defaultString: 'Apply' 						#catalogID: #browser ) 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -205 1 -32 1 -105 1 -4 1 ) 					#name: #cancelButton 					#model: #cancelDocument 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #browser ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -102 1 -32 1 -2 1 -4 1 ) 					#name: #restoreButton 					#model: #restore 					#label: 					#(#{Kernel.UserMessage} 						#key: #RestoreDefault 						#defaultString: 'Restore Default' 						#catalogID: #browser ) 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.CodeComponentSummaryTool class</class-id> <category>resources</category><body package="Browser-CodeComponentUI">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Copy 					#defaultString: '&amp;Copy' 					#catalogID: #browser ) 				#nameKey: #'Copy Selection' 				#value: 				#action: 				#command: #copy 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.GeneralIcons} #editCopy ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_FindDots 					#defaultString: '&amp;Find...' 					#catalogID: #browser ) 				#nameKey: #'Find Text' 				#value: 				#action: 				#command: #find ) ) #(1 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>tool registration</category><body package="Browser-CodeComponentUI">codeComponentToolClass	&lt;tool: 35&gt;	^CodeComponentPropertiesTool</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>CodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel menu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>BrowserTextTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>savedText changed textHolder originalText menuBarMenu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>PartListAbstractInspector</name><environment>Tools.Trippy</environment><super>Tools.Trippy.Inspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>driver segmentListHolder fieldListHolder dragController undoHistory documentHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>BrowserDocumentTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>documentHolder savedState </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Browser-SourceCodeUI</package></attributes></class><class><name>Part</name><environment>Tools.Trippy</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class></st-source>