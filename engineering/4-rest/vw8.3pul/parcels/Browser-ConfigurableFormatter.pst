<?xml version="1.0"?><st-source><!-- Name: Browser-ConfigurableFormatterNotice: Copyright 1999-2013 Cincom Systems, Inc.  All rights reserved.Portions © 1998-2002 The Refactory, IncComment: Browser-ConfigurableFormatter provides an alternate code formatter to the stock one provided in VisualWorks. This alternate has a variety of options for tuning the formatting algorithm.UsageTo change the browser to use another formatter, execute:	RBProgramNode formatterClass: RBConfigurableFormatterAn alternate formatter settings page is added for this formatter to the settings tool. Use it to tune and tweak the RBConfigurableFormatter's various abilities.ImplementationJohn Brant and Don Roberts put the original ConfigurableFormatter together in response to community desires to have a formatter with a high degree of tunability. While it may suit some, it was found more difficult to produce "classicaly formatted" Smalltalk code, as per either the Blue Book examples or SmalltalkWithStyle (Kent Beck) examples. The original authors, as does the current maintainer, prefer the stock RBFormatter.DbIdentifier: bear73DbTrace: 400679DbUsername: nrossDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#bundle 'Base VisualWorks' '') #(#package 'Browser-BrowserUI' '') #(#package 'Browser-Namespace' '') #(#package 'Browser-Parser' '') #(#package 'Tools-Settings' '') #(#package 'Tools-Settings-VW' ''))PackageName: Browser-ConfigurableFormatterParcel: #('Browser-ConfigurableFormatter')PrerequisiteParcels: #(#('Base VisualWorks' '') #('Browser-BrowserUI' '') #('Browser-Namespace' '') #('Browser-Parser' '') #('Tools-Settings' '') #('Tools-Settings-VW' ''))PrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1Date: 7:16:13 AM April 3, 2013 --><time-stamp>From VisualWorks®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 7:16:13 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>RBConfigurableFormatter</name><environment>Refactory.Browser</environment><super>Refactory.Browser.RBProgramNodeVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeStream indent lookaheadCode originalSource lineStart </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Parser</category><attributes><package>Browser-ConfigurableFormatter</package></attributes></class><comment><class-id>Refactory.Browser.RBConfigurableFormatter</class-id><body>RBConfigurableFormatter formats the Refactoring Browser's parse trees. It has many more formatting options than the default formatter used by the classic RB.  For some refactorings the RB must reformat the code after the change, so it is good to have a formatter configured to your tastes.  To change the RB to use another formatter, execute "RBProgramNode formatterClass: YourFormatterClass".Instance Variables:	codeStream	&lt;PositionableStream&gt;	the stream we are writing our output to	indent	&lt;Integer&gt;	how many times are we indenting a new line -- indents are normally tabs but could be any whitespace string	lineStart	&lt;Integer&gt;	the position of the character that started the current line. This is used for calculating the line length.	lookaheadCode	&lt;Dictionary key: RBProgramNode value: String&gt;	sometimes we need to lookahead while formatting, this dictionary contains the nodes that have already been formatted by lookahead	originalSource	&lt;String&gt;	the original source before we started formatting. This is used to extract the comments from the original source.</body></comment><class><name>FormatterSettingOption</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value targetBinding </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-BaseUI</category><attributes><package>Browser-ConfigurableFormatter</package></attributes></class><class><name>DefaultFormatterSettingsPage</name><environment>Refactory.Browser</environment><super>Tools.SettingsManagerPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars>optionsList formattedTextHolder numericHolder textHolder booleanHolder browseAutoFormatModule saveAutoFormatModule </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Support</category><attributes><package>Browser-ConfigurableFormatter</package></attributes></class><comment><class-id>Refactory.Browser.DefaultFormatterSettingsPage</class-id><body>I am the UI for editing the properties of the formatter.Instance Variables	booleanHolder	&lt;ValueModel&gt;	a value holder for boolean values	descriptionHolder	&lt;ValueModel&gt;	a value holder for the description of the selected property	formattedTextHolder	&lt;ValueModel&gt;	a value holder for the formatted method	numericHolder	&lt;ValueModel&gt;	a value holder for numeric values	optionsList	&lt;SelectionInList&gt;	the list of the formatter options	textHolder	&lt;ValueModel&gt;	a value holder for text values	valueSubcanvas	&lt;FormatterConfigurationTool&gt;	the subcanvas for the current propertyShared Variables	Descriptions	&lt;Dictionary&gt;	the descriptions of the formatter properties	Names	&lt;Dictionary&gt;	the user friendly names of the properites</body></comment><class><name>ConfigurableFormatterSettingsPage</name><environment>Refactory.Browser</environment><super>Tools.SettingsManagerPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars>optionsList formattedTextHolder numericHolder textHolder booleanHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Support</category><attributes><package>Browser-ConfigurableFormatter</package></attributes></class><comment><class-id>Refactory.Browser.ConfigurableFormatterSettingsPage</class-id><body>The following comment was cloned from the original comment of FormatterSettingsPage==========================================================I amd the UI for editing the properites of the formatter.Instance Variables:	booleanHolder	&lt;ValueModel&gt;	a value holder for boolean values	descriptionHolder	&lt;ValueModel&gt;	a value holder for the description of the selected property	formattedTextHolder	&lt;ValueModel&gt;	a value holder for the formatted method	numericHolder	&lt;ValueModel&gt;	a value holder for numeric values	optionsList	&lt;SelectionInList&gt;	the list of the formatter options	textHolder	&lt;ValueModel&gt;	a value holder for text values	valueSubcanvas	&lt;FormatterConfigurationTool&gt;	the subcanvas for the current propertyShared Variables:	Descriptions	&lt;Dictionary&gt;	the descriptions of the formatter properties	Names	&lt;Dictionary&gt;	the user friendly names of the properites</body></comment><shared-variable><name>MethodSignatureOnMultipleLines</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>false</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>NumberOfArgumentsForMultiLine</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>2</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>IndentsForKeywords</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>1</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>PeriodsAtEndOfBlock</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>false</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>FormatCommentWithStatements</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>true</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>StringInsideBlocks</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>String new</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>NewLineBeforeFirstCascade</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>true</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>PeriodsAtEndOfMethod</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>false</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>NewLinesAfterTemporaries</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>1</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>LineUpBlockBrackets</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>false</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>PeriodsAsTerminators</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>false</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>IndentString</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>String with: Character tab</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>StringInsideParentheses</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>String new</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>MinimumNewLinesBetweenStatements</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>1</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>NewLineBeforeFirstKeyword</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>true</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>NewLinesAfterMethodPattern</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>1</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>MaxLineLength</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>75</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>StringFollowingReturn</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>String new</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>NewLineAfterCascade</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>true</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>NewLinesBeforeMethodBody</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>1</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>RetainBlankLinesBetweenStatements</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>false</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>NewLinesAfterMethodComment</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>1</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>UseTraditionalBinaryPrecedenceForParentheses</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>configuration settings</category><initializer>true</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><shared-variable><name>TraditionalBinaryPrecedence</name><environment>Refactory.Browser.RBConfigurableFormatter</environment><private>false</private><constant>false</constant><category>other shares</category><initializer>#(#($| $&amp; $?) #($= $~ $&lt; $&gt;) #($- $+) #($* $/ $% $\) #($@))</initializer><attributes><package>Browser-ConfigurableFormatter</package></attributes></shared-variable><methods><class-id>Refactory.Browser.RBConfigurableFormatter</class-id> <category>private</category><body package="Browser-ConfigurableFormatter">bracketWith: bracketString around: aBlock 	bracketString isEmpty ifTrue: [^aBlock value].	codeStream nextPut: bracketString first.	^aBlock ensure: [codeStream nextPut: bracketString last]</body><body package="Browser-ConfigurableFormatter">currentLineLength	^codeStream position - lineStart</body><body package="Browser-ConfigurableFormatter">formattedSourceFor: aNode 	^lookaheadCode at: aNode		ifAbsentPut: [self class format: aNode withIndents: indent]</body><body package="Browser-ConfigurableFormatter">indent: anInteger around: aBlock 	indent := indent + anInteger.	^aBlock ensure: [indent := indent - anInteger]</body><body package="Browser-ConfigurableFormatter">indentAround: aBlock 	self indent: 1 around: aBlock</body><body package="Browser-ConfigurableFormatter">isLineTooLong: aString 	^self currentLineLength + aString size &gt;= MaxLineLength</body><body package="Browser-ConfigurableFormatter">needsParenthesisFor: aNode 	| parent grandparent |	parent := aNode parent.	(parent isNil or: [parent isMessage not]) ifTrue: [^false].	(aNode isMessage and: [parent isMessage and: [parent receiver == aNode]]) 		ifTrue: 			[grandparent := parent parent.			(grandparent notNil and: [grandparent isCascade]) ifTrue: [^true]].	aNode precedence &lt; parent precedence ifTrue: [^false].	(parent receiver ~~ aNode and: [aNode precedence &gt;= parent precedence]) 		ifTrue: [^true].	(parent receiver == aNode 		and: [aNode precedence &gt; parent precedence or: [aNode isKeyword]]) 			ifTrue: [^true].	aNode isBinary ifFalse: [^false].	^UseTraditionalBinaryPrecedenceForParentheses 		and: [self precedenceOf: parent selector greaterThan: aNode selector]</body><body package="Browser-ConfigurableFormatter">newLine	self newLines: 1</body><body package="Browser-ConfigurableFormatter">newLines: anInteger	anInteger + IndentString size = 0 ifTrue: [codeStream space].	anInteger timesRepeat: [codeStream cr].	lineStart := codeStream position.	indent timesRepeat: [codeStream nextPutAll: IndentString]</body><body package="Browser-ConfigurableFormatter">newLinesBeforeStartingAt: anIndex 	| count cr lf index char |	(anIndex isNil or: [anIndex &gt; originalSource size]) ifTrue: [^0].	cr := Character value: 13.	lf := Character value: 10.	count := 0.	index := anIndex - 1.	[index &gt; 0 and: [(char := originalSource at: index) isSeparator]] 		whileTrue: 			[char == lf 				ifTrue: 					[count := count + 1.					(originalSource at: (index - 1 max: 1)) == cr ifTrue: [index := index - 1]].			char == cr ifTrue: [count := count + 1].			index := index - 1].	^count</body><body package="Browser-ConfigurableFormatter">precedenceOf: parentSelector greaterThan: childSelector 	"Put parenthesis around things that are preceived to have 'lower' precedence. For example, 'a + b * c' 	-&gt; '(a + b) * c' but 'a * b + c' -&gt; 'a * b + c'"	| childIndex parentIndex |	childIndex := 0.	parentIndex := 0.	1 to: TraditionalBinaryPrecedence size		do: 			[:i | 			((TraditionalBinaryPrecedence at: i) includes: parentSelector first) 				ifTrue: [parentIndex := i].			((TraditionalBinaryPrecedence at: i) includes: childSelector first) 				ifTrue: [childIndex := i]].	^childIndex &lt; parentIndex</body><body package="Browser-ConfigurableFormatter">space	codeStream space</body><body package="Browser-ConfigurableFormatter">willBeMultiline: aNode 	^(self formattedSourceFor: aNode) includes: Character cr</body><body package="Browser-ConfigurableFormatter">writeString: aString 	| index |	index := aString lastIndexOf: Character cr ifAbsent: [0].	codeStream nextPutAll: aString.	index &gt; 0 		ifTrue: [lineStart := codeStream position - (aString size - index)]</body></methods><methods><class-id>Refactory.Browser.RBConfigurableFormatter</class-id> <category>private-formatting</category><body package="Browser-ConfigurableFormatter">addNewLinesBeforeStatementStartingAt: anInteger 	| newLines |	newLines := MinimumNewLinesBetweenStatements 				max: (RetainBlankLinesBetweenStatements 						ifTrue: [self newLinesBeforeStartingAt: anInteger]						ifFalse: [0]).	newLines = 0 ifTrue: [self space] ifFalse: [self newLines: newLines]</body><body package="Browser-ConfigurableFormatter">formatBlock: aBlockNode	(LineUpBlockBrackets and: [self willBeMultiline: aBlockNode body]) ifTrue:			[self newLine] ifFalse: [codeStream nextPutAll: StringInsideBlocks].	self formatBlockArgumentsFor: aBlockNode.	self visitNode: aBlockNode body.	^(LineUpBlockBrackets and: [self willBeMultiline: aBlockNode body]) ifTrue:			[self newLine] ifFalse: [codeStream nextPutAll: StringInsideBlocks]</body><body package="Browser-ConfigurableFormatter">formatBlockArgumentsFor: aBlockNode	aBlockNode arguments isEmpty ifTrue: [^self].	aBlockNode arguments		do:			[:each | 			codeStream nextPut: $:.			self visitNode: each.			FormatCommentWithStatements ifTrue: [self formatCommentsFor: each].			self space].	codeStream nextPutAll: '| '.	(self willBeMultiline: aBlockNode body) ifTrue: [self newLine]</body><body package="Browser-ConfigurableFormatter">formatCommentsFor: aNode 	originalSource isNil ifTrue: [^self].	aNode comments do: 			[:each | 			codeStream				space;				nextPutAll: (originalSource copyFrom: each first to: each last)]</body><body package="Browser-ConfigurableFormatter">formatMethodBodyFor: aMethodNode	self		indentAround:			[self newLines: NewLinesAfterMethodPattern.			self formatMethodCommentFor: aMethodNode.			NewLinesBeforeMethodBody isZero				ifFalse: [self newLines: NewLinesBeforeMethodBody].			self formatTagsFor: aMethodNode.			self visitNode: aMethodNode body]</body><body package="Browser-ConfigurableFormatter">formatMethodCommentFor: aMethodNode	originalSource isNil ifTrue: [^self].	(FormatCommentWithStatements		ifTrue: [aMethodNode methodComments]		ifFalse: [aMethodNode comments])		do:			[:each | 			codeStream				nextPutAll:					(originalSource						copyFrom: each first						to: each last).			self newLines: NewLinesAfterMethodComment]</body><body package="Browser-ConfigurableFormatter">formatMethodPatternFor: aMethodNode 	aMethodNode arguments isEmpty		ifTrue: [codeStream nextPutAll: aMethodNode selector]		ifFalse: 			[self				with: aMethodNode selectorParts				and: aMethodNode arguments				do: 					[:key :arg | 					codeStream nextPutAll: key value.					self space.					self visitNode: arg]				separatedBy: 					[MethodSignatureOnMultipleLines						ifTrue: [self newLine]						ifFalse: [self space]]]</body><body package="Browser-ConfigurableFormatter">formatSelectorAndArguments: aMessageNode 	| newLineBetweenArguments |	newLineBetweenArguments := self isMultiLineMessage: aMessageNode.	self indent: IndentsForKeywords		around: 			[self 				formatSelectorAndArguments: aMessageNode				firstSeparator: (newLineBetweenArguments &amp; NewLineBeforeFirstKeyword 						ifTrue: [[self newLine]]						ifFalse: [[self space]])				restSeparator: (newLineBetweenArguments 						ifTrue: [[self newLine]]						ifFalse: [[self space]])]</body><body package="Browser-ConfigurableFormatter">formatSelectorAndArguments: aMessageNode firstSeparator: firstBlock restSeparator: restBlock 	| separatorBlock |	separatorBlock := firstBlock.	aMessageNode isUnary 		ifTrue: 			[(self isLineTooLong: aMessageNode selector) 				ifTrue: [self newLine]				ifFalse: [separatorBlock value].			codeStream nextPutAll: aMessageNode selector]		ifFalse: 			[aMessageNode selectorParts with: aMessageNode arguments				do: 					[:selector :argument | 					(self isLineTooLong: selector value) 						ifTrue: [self newLine]						ifFalse: [separatorBlock value].					separatorBlock := restBlock.					self indentAround: 							[codeStream nextPutAll: selector value.							((self willBeMultiline: argument) 								or: [self isLineTooLong: (self formattedSourceFor: argument)]) 									ifTrue: [self newLine]									ifFalse: [self space].							self visitNode: argument]]]</body><body package="Browser-ConfigurableFormatter">formatSequenceCommentsFor: aSequenceNode	originalSource isNil ifTrue: [^self].	aSequenceNode comments		do:			[:each | 			codeStream				nextPutAll:					(originalSource						copyFrom: each first						to: each last).			self newLine]</body><body package="Browser-ConfigurableFormatter">formatSequenceNodeStatementsFor: aSequenceNode 	| statements |	statements := aSequenceNode statements.	statements isEmpty ifTrue: [^self].	1 to: statements size		do: 			[:i | 			self visitNode: (statements at: i).			(i &lt; statements size or: 					[aSequenceNode parent ifNil: [self class periodsAsTerminators]						ifNotNil: 							[:parent | 							parent isBlock 								ifTrue: [self class periodsAtEndOfBlock]								ifFalse: [self class periodsAtEndOfMethod]]]) 				ifTrue: [codeStream nextPut: $.].			self formatStatementCommentsFor: (statements at: i).			i &lt; statements size 				ifTrue: 					[self addNewLinesBeforeStatementStartingAt: (statements at: i + 1) start]]</body><body package="Browser-ConfigurableFormatter">formatStatementCommentsFor: aStatementNode	originalSource isNil ifTrue: [^self].	FormatCommentWithStatements ifFalse: [^self].	aStatementNode statementComments		do:			[:each | 			codeStream				tab;				nextPutAll:						(originalSource								copyFrom: each first								to: each last)]</body><body package="Browser-ConfigurableFormatter">formatTagsFor: aMethodNode	| newLineBetweenArguments |	newLineBetweenArguments := false.	aMethodNode		tagsDo:			[:each | 			newLineBetweenArguments := newLineBetweenArguments or: [self isMultiLineMessage: each].			self visitNode: each].	(newLineBetweenArguments or: [aMethodNode tagCount &gt; 1]) ifTrue: [self newLine]</body><body package="Browser-ConfigurableFormatter">formatTemporariesFor: aSequenceNode	aSequenceNode temporaries isEmpty ifTrue: [^self].	self		bracketWith: '|'		around:			[self space.			aSequenceNode temporaries				do:					[:each | 					self visitNode: each.					FormatCommentWithStatements ifTrue: [self formatCommentsFor: each].					self space]].	self newLines: NewLinesAfterTemporaries</body><body package="Browser-ConfigurableFormatter">isMultiLineMessage: aMessageNode	| messageStream |	(aMessageNode arguments		allSatisfy: [:each | each isLiteralNode or: [each isVariable]])		ifTrue: [^false].	aMessageNode arguments size &gt;= NumberOfArgumentsForMultiLine		ifTrue: [^true].	(aMessageNode arguments		anySatisfy:			[:each | self indent: IndentsForKeywords + 1 around: [self willBeMultiline: each]])		ifTrue: [^true].	aMessageNode isUnary ifTrue: [^self isLineTooLong: aMessageNode selector].	messageStream := WriteStream on: (String new: 100).	self		with: aMessageNode selectorParts		and: aMessageNode arguments		do:			[:sel :arg | 			messageStream				nextPutAll: sel value;				space;				nextPutAll: (self formattedSourceFor: arg)]		separatedBy: [messageStream space].	^self isLineTooLong: messageStream contents</body></methods><methods><class-id>Refactory.Browser.RBConfigurableFormatter</class-id> <category>visitor-double dispatching</category><body package="Browser-ConfigurableFormatter">acceptAssignmentNode: anAssignmentNode 	self visitNode: anAssignmentNode variable.	codeStream nextPutAll: ' := '.	self visitNode: anAssignmentNode value</body><body package="Browser-ConfigurableFormatter">acceptBlockNode: aBlockNode	self bracketWith: '[]' around: [self formatBlock: aBlockNode]</body><body package="Browser-ConfigurableFormatter">acceptCDeclarationNode: aCDeclarationNode		self		indentAround:			[self				bracketWith: '&lt;&gt;'				around:					[codeStream						nextPutAll: 'C: ';						nextPutAll: aCDeclarationNode arguments first value]].	self newLine</body><body package="Browser-ConfigurableFormatter">acceptCascadeNode: aCascadeNode 	self visitNode: aCascadeNode receiver.	self indentAround: 			[NewLineBeforeFirstCascade ifTrue: [self newLine] ifFalse: [self space].			aCascadeNode messages do: 					[:each | 					self indentAround: 							[self 								formatSelectorAndArguments: each								firstSeparator: []								restSeparator: ((self isMultiLineMessage: each) 										ifTrue: [[self newLine]]										ifFalse: [[self space]])]]				separatedBy: 					[codeStream nextPut: $;.					NewLineAfterCascade ifTrue: [self newLine] ifFalse: [self space]]]</body><body package="Browser-ConfigurableFormatter">acceptLiteralArrayNode: aLiteralArrayNode 	codeStream nextPut: $#.	aLiteralArrayNode looksLikeStructuredArrayEncoding 		ifTrue: [self formatStructuredLiteralArray: aLiteralArrayNode]		ifFalse: [self formatSimpleLiteralArray: aLiteralArrayNode]</body><body package="Browser-ConfigurableFormatter">acceptLiteralNode: aLiteralNode 	self writeString: aLiteralNode token storeString</body><body package="Browser-ConfigurableFormatter">acceptMessageNode: aMessageNode 	self visitNode: aMessageNode receiver.	self formatSelectorAndArguments: aMessageNode</body><body package="Browser-ConfigurableFormatter">acceptMethodNode: aMethodNode 	self formatMethodPatternFor: aMethodNode.	self formatMethodBodyFor: aMethodNode</body><body package="Browser-ConfigurableFormatter">acceptOptimizedNode: anOptimizedNode	codeStream nextPutAll: '##'.	self 		bracketWith: '()' 		around: [self indentAround: [self visitNode: anOptimizedNode body]]</body><body package="Browser-ConfigurableFormatter">acceptPatternBlockNode: aRBPatternBlockNode 	codeStream nextPut: $`.	self 		bracketWith: '{}' 		around: [self formatBlock: aRBPatternBlockNode]</body><body package="Browser-ConfigurableFormatter">acceptPatternWrapperBlockNode: aRBPatternWrapperBlockNode	self visitNode: aRBPatternWrapperBlockNode wrappedNode.	codeStream nextPut: $`.	self 		bracketWith: '{}' 		around: [self formatBlock: aRBPatternWrapperBlockNode]</body><body package="Browser-ConfigurableFormatter">acceptReturnNode: aReturnNode 	codeStream		nextPut: $^;		nextPutAll: StringFollowingReturn.	self visitNode: aReturnNode value</body><body package="Browser-ConfigurableFormatter">acceptSequenceNode: aSequenceNode 	self formatTemporariesFor: aSequenceNode.	self formatSequenceCommentsFor: aSequenceNode.	self formatSequenceNodeStatementsFor: aSequenceNode</body><body package="Browser-ConfigurableFormatter">acceptTagNode: aTagNode	self		indentAround:			[self				bracketWith: '&lt;&gt;'				around:					[self						formatSelectorAndArguments: aTagNode						firstSeparator: nil						restSeparator:							((self isMultiLineMessage: aTagNode) ifTrue: [[self newLine]] ifFalse: [[self space]])]].	self newLine</body><body package="Browser-ConfigurableFormatter">acceptVariableNode: aVariableNode 	codeStream nextPutAll: aVariableNode name</body><body package="Browser-ConfigurableFormatter">formatSimpleLiteralArray: aLiteralArrayNode	self bracketWith: (aLiteralArrayNode isForByteArray ifTrue: ['[]'] ifFalse: ['()']) around: [aLiteralArrayNode contents do: [:each | self visitNode: each] separatedBy: [self space]]</body><body package="Browser-ConfigurableFormatter">formatStructuredLiteralArray: aLiteralArrayNode	| ratchet |	self		bracketWith:			(aLiteralArrayNode isForByteArray				ifTrue: ['[]']				ifFalse: ['()'])		around:			[self				indentAround:					[ratchet := false.					aLiteralArrayNode contents						do:							[:each | 							ratchet ifTrue: [self newLine].							ratchet := ratchet not.							self visitNode: each]						separatedBy: [self space]]]</body></methods><methods><class-id>Refactory.Browser.RBConfigurableFormatter</class-id> <category>visiting</category><body package="Browser-ConfigurableFormatter">visitNode: aNode	| needsParenthesis |	(lookaheadCode includesKey: aNode)		ifTrue: [^self writeString: (lookaheadCode at: aNode)].	needsParenthesis := self needsParenthesisFor: aNode.	self		bracketWith:			(needsParenthesis				ifTrue: ['()']				ifFalse: [''])		around:			[needsParenthesis ifTrue: [codeStream nextPutAll: StringInsideParentheses].			super visitNode: aNode.			(FormatCommentWithStatements or: [aNode isMethod or: [aNode isSequence]])				ifFalse: [self formatCommentsFor: aNode].			needsParenthesis				ifTrue: [codeStream nextPutAll: StringInsideParentheses]]</body></methods><methods><class-id>Refactory.Browser.RBConfigurableFormatter</class-id> <category>initialize-release</category><body package="Browser-ConfigurableFormatter">indent: anInteger	indent := anInteger</body><body package="Browser-ConfigurableFormatter">initialize	super initialize.	lineStart := 0.	indent := 0.	lookaheadCode := IdentityDictionary new.	codeStream := WriteStream on: (String new: 256)</body></methods><methods><class-id>Refactory.Browser.RBConfigurableFormatter</class-id> <category>utility</category><body package="Browser-ConfigurableFormatter">with: firstCollection and: secondCollection do: aBlock separatedBy: separatorBlock 	firstCollection isEmpty ifTrue: [^self].	aBlock		value: firstCollection first		value: secondCollection first.	2		to: firstCollection size		do: 			[:i | 			separatorBlock value.			aBlock				value: (firstCollection at: i)				value: (secondCollection at: i)]</body></methods><methods><class-id>Refactory.Browser.RBConfigurableFormatter</class-id> <category>public interface</category><body package="Browser-ConfigurableFormatter">format: aParseTree 	originalSource := aParseTree source.	self visitNode: aParseTree.	^codeStream contents</body></methods><methods><class-id>Refactory.Browser.RBConfigurableFormatter class</class-id> <category>settings</category><body package="Browser-ConfigurableFormatter">formatCommentWithStatements	^FormatCommentWithStatements</body><body package="Browser-ConfigurableFormatter">formatCommentWithStatements: aBoolean 	FormatCommentWithStatements := aBoolean</body><body package="Browser-ConfigurableFormatter">indentString	^IndentString</body><body package="Browser-ConfigurableFormatter">indentString: aString	IndentString := aString</body><body package="Browser-ConfigurableFormatter">indentsForKeywords	^IndentsForKeywords</body><body package="Browser-ConfigurableFormatter">indentsForKeywords: anInteger	IndentsForKeywords := anInteger</body><body package="Browser-ConfigurableFormatter">lineUpBlockBrackets	^LineUpBlockBrackets</body><body package="Browser-ConfigurableFormatter">lineUpBlockBrackets: aBoolean	LineUpBlockBrackets := aBoolean</body><body package="Browser-ConfigurableFormatter">maxLineLength	^MaxLineLength</body><body package="Browser-ConfigurableFormatter">maxLineLength: anInteger 	MaxLineLength := anInteger</body><body package="Browser-ConfigurableFormatter">methodSignatureOnMultipleLines	^MethodSignatureOnMultipleLines</body><body package="Browser-ConfigurableFormatter">methodSignatureOnMultipleLines: aBoolean	MethodSignatureOnMultipleLines := aBoolean</body><body package="Browser-ConfigurableFormatter">minimumNewLinesBetweenStatements	^MinimumNewLinesBetweenStatements</body><body package="Browser-ConfigurableFormatter">minimumNewLinesBetweenStatements: anInteger 	MinimumNewLinesBetweenStatements := anInteger</body><body package="Browser-ConfigurableFormatter">newLineAfterCascade	^NewLineAfterCascade</body><body package="Browser-ConfigurableFormatter">newLineAfterCascade: aBoolean	NewLineAfterCascade := aBoolean</body><body package="Browser-ConfigurableFormatter">newLineBeforeFirstCascade	^NewLineBeforeFirstCascade</body><body package="Browser-ConfigurableFormatter">newLineBeforeFirstCascade: aBoolean	NewLineBeforeFirstCascade := aBoolean</body><body package="Browser-ConfigurableFormatter">newLineBeforeFirstKeyword	^NewLineBeforeFirstKeyword</body><body package="Browser-ConfigurableFormatter">newLineBeforeFirstKeyword: aBoolean	NewLineBeforeFirstKeyword := aBoolean</body><body package="Browser-ConfigurableFormatter">newLinesAfterMethodComment	 ^NewLinesAfterMethodComment</body><body package="Browser-ConfigurableFormatter">newLinesAfterMethodComment: anInteger	 NewLinesAfterMethodComment := anInteger.</body><body package="Browser-ConfigurableFormatter">newLinesAfterMethodPattern	^NewLinesAfterMethodPattern</body><body package="Browser-ConfigurableFormatter">newLinesAfterMethodPattern: anInteger	NewLinesAfterMethodPattern := anInteger</body><body package="Browser-ConfigurableFormatter">newLinesAfterTemporaries	^NewLinesAfterTemporaries</body><body package="Browser-ConfigurableFormatter">newLinesAfterTemporaries: anInteger	NewLinesAfterTemporaries := anInteger</body><body package="Browser-ConfigurableFormatter">newLinesBeforeMethodBody		^NewLinesBeforeMethodBody</body><body package="Browser-ConfigurableFormatter">newLinesBeforeMethodBody: anInteger	NewLinesBeforeMethodBody := anInteger</body><body package="Browser-ConfigurableFormatter">numberOfArgumentsForMultiLine	^NumberOfArgumentsForMultiLine</body><body package="Browser-ConfigurableFormatter">numberOfArgumentsForMultiLine: anInteger	NumberOfArgumentsForMultiLine := anInteger</body><body package="Browser-ConfigurableFormatter">periodsAsTerminators	^PeriodsAtEndOfBlock and: [PeriodsAtEndOfMethod]</body><body package="Browser-ConfigurableFormatter">periodsAsTerminators: aBoolean 	PeriodsAtEndOfBlock := aBoolean.	PeriodsAtEndOfMethod := aBoolean</body><body package="Browser-ConfigurableFormatter">periodsAtEndOfBlock	^PeriodsAtEndOfBlock</body><body package="Browser-ConfigurableFormatter">periodsAtEndOfBlock: aBoolean 	PeriodsAtEndOfBlock := aBoolean</body><body package="Browser-ConfigurableFormatter">periodsAtEndOfMethod	^PeriodsAtEndOfMethod</body><body package="Browser-ConfigurableFormatter">periodsAtEndOfMethod: aBoolean 	PeriodsAtEndOfMethod := aBoolean</body><body package="Browser-ConfigurableFormatter">retainBlankLinesBetweenStatements	^RetainBlankLinesBetweenStatements</body><body package="Browser-ConfigurableFormatter">retainBlankLinesBetweenStatements: aBoolean	RetainBlankLinesBetweenStatements := aBoolean</body><body package="Browser-ConfigurableFormatter">stringFollowingReturn	^StringFollowingReturn</body><body package="Browser-ConfigurableFormatter">stringFollowingReturn: aString	StringFollowingReturn := aString</body><body package="Browser-ConfigurableFormatter">stringInsideBlocks	^StringInsideBlocks</body><body package="Browser-ConfigurableFormatter">stringInsideBlocks: aString 	StringInsideBlocks := aString</body><body package="Browser-ConfigurableFormatter">stringInsideParentheses	^StringInsideParentheses</body><body package="Browser-ConfigurableFormatter">stringInsideParentheses: aString 	StringInsideParentheses := aString</body><body package="Browser-ConfigurableFormatter">traditionalBinaryPrecedence	^TraditionalBinaryPrecedence</body><body package="Browser-ConfigurableFormatter">traditionalBinaryPrecedence: anArray	TraditionalBinaryPrecedence := anArray</body><body package="Browser-ConfigurableFormatter">useTraditionalBinaryPrecedenceForParentheses	^UseTraditionalBinaryPrecedenceForParentheses</body><body package="Browser-ConfigurableFormatter">useTraditionalBinaryPrecedenceForParentheses: aBoolean 	UseTraditionalBinaryPrecedenceForParentheses := aBoolean</body></methods><methods><class-id>Refactory.Browser.RBConfigurableFormatter class</class-id> <category>public interface</category><body package="Browser-ConfigurableFormatter">format: aParseTree 	^self format: aParseTree withIndents: 0</body><body package="Browser-ConfigurableFormatter">format: aParseTree withIndents: anInteger 	^(self new)		indent: anInteger;		format: aParseTree</body></methods><methods><class-id>Refactory.Browser.FormatterSettingOption</class-id> <category>accessing</category><body package="Browser-ConfigurableFormatter">apply	targetBinding value: value</body><body package="Browser-ConfigurableFormatter">help	"Search for a method which has been tagged to be the help for the current value, and run that if possible. Otherwise nil."	| candidates |	candidates := Pragma		allNamed: #help:		in: self class.	(candidates		detect: [:each | each arguments first = targetBinding key]		ifNone: []) ifNotNil: [:found | ^self perform: found selector].	^String new</body><body package="Browser-ConfigurableFormatter">name	"Search for a method which has been tagged to be the name for the current value, and run that if possible. Otherwise synthesize something pretty."	| candidates |	candidates := Pragma		allNamed: #name:		in: self class.	(candidates		detect: [:each | each arguments first = targetBinding key]		ifNone: []) ifNotNil: [:found | ^self perform: found selector].	^(targetBinding key piecesCutWhere: [:a :b | b isUppercase and: [a isUppercase not]])		fold: [:a :b | a , ' ' , b]</body><body package="Browser-ConfigurableFormatter">reset	value := targetBinding value</body><body package="Browser-ConfigurableFormatter">setting	^(self settingType		on: targetBinding		aspect: #value) id: (#(#tools #browser #formatter) copyWith: targetBinding key)</body><body package="Browser-ConfigurableFormatter">settingType	value isInteger ifTrue: [^IntegerSetting].	value isString ifTrue: [^StringSetting].	(value isKindOf: Boolean) ifTrue: [^BooleanSetting].	^self shouldNotImplement</body><body package="Browser-ConfigurableFormatter">targetBinding	^targetBinding</body><body package="Browser-ConfigurableFormatter">targetBinding: aVariableBinding	targetBinding := aVariableBinding.	self reset</body><body package="Browser-ConfigurableFormatter">value	^value</body><body package="Browser-ConfigurableFormatter">value: anObject	value := anObject</body></methods><methods><class-id>Refactory.Browser.FormatterSettingOption</class-id> <category>comparing</category><body package="Browser-ConfigurableFormatter">&lt;= anOption	^self name &lt;= anOption name</body></methods><methods><class-id>Refactory.Browser.FormatterSettingOption</class-id> <category>printing</category><body package="Browser-ConfigurableFormatter">displayString	^self name</body></methods><methods><class-id>Refactory.Browser.FormatterSettingOption class</class-id> <category>instance creation</category><body package="Browser-ConfigurableFormatter">all	"Return all options that can be constructed from the RBConfigurableFormatter's shares which are in the 'configuration settings' category/protocol."	"self all"	^(RBConfigurableFormatter asNameSpace dataBindings		select: [:each | each category asString = 'configuration settings'])		collect: [:each | self new targetBinding: each]</body></methods><methods><class-id>Refactory.Browser.DefaultFormatterSettingsPage</class-id> <category>private</category><body package="Browser-ConfigurableFormatter">apply	self options do: [:each | each apply]</body><body package="Browser-ConfigurableFormatter">applyOptionsWhile: aBlock	| backup |	backup := Dictionary new.	self options		do:			[:each | 			backup				at: each targetBinding				put: each targetBinding value].	^[self apply.	aBlock value] ensure: [backup keysAndValuesDo: [:key :value | key value: value]]</body><body package="Browser-ConfigurableFormatter">exampleMethod	^'at: anIndex put: anObject	"this is a method comment"	| temp number |	temp := ''''.	1 to: 10 do: [:i | temp := temp , (i odd ifTrue: [(i * 2) printString] ifFalse: [i printString])].	number := Number readFrom: temp readStream.	number odd ifTrue: [Dialog warn: ''Something is really screwed up''. ^self].	^number // 2'</body><body package="Browser-ConfigurableFormatter">hideAll	#(#numberOptionCanvas #booleanOptionCanvas #stringOptionCanvas)		do:			[:each | 			(builder componentAt: each)				isEnabled: false;				isVisible: false]</body><body package="Browser-ConfigurableFormatter">installOptions	optionsList list do: [:each | each apply]</body><body package="Browser-ConfigurableFormatter">options	^optionsList list</body><body package="Browser-ConfigurableFormatter">selectedOption	^optionsList selection</body><body package="Browser-ConfigurableFormatter">showCorrectEditor	| object |	self hideAll.	object := self selectedOption ifNotNil: [:option | option value].	object isString		ifTrue:			[textHolder value: object.			self showEditor: #stringOptionCanvas].	object isInteger		ifTrue:			[numericHolder value: object.			self showEditor: #numberOptionCanvas].	(object isKindOf: Boolean)		ifTrue:			[booleanHolder value: object.			self showEditor: #booleanOptionCanvas]</body><body package="Browser-ConfigurableFormatter">showEditor: aSymbol	(builder componentAt: aSymbol)		isEnabled: true;		isVisible: true</body><body package="Browser-ConfigurableFormatter">updateExample	| parseTree newText |	parseTree := RBParser		parseMethod: formattedTextHolder value		onError:			[:s :p | ^Dialog warn: #InvalidMethodSource &lt;&lt; #browser &gt;&gt; 'Invalid method source'].	newText := self		applyOptionsWhile: [RBConfigurableFormatter format: parseTree].	#{Refactory.CodeHighlighter.CodeHighlightingParser}		ifDefinedDo:			[:highlighter | newText := highlighter formatMethod: newText asText].	formattedTextHolder value: newText</body><body package="Browser-ConfigurableFormatter">updatePopUpHelp	"Oh that popUpHelp were a block and could be polled on each query. Someday. So we set the new helpText, and then pretend the mouse just entered the list."	| view |	view := self widgetAt: #optionsList.	view		helpText:			(self selectedOption				ifNil: [self class noSelectionHelp]				ifNotNil: [:option | option help]).	#{FlyByHelpTracker} ifDefinedDo: [ :tracker | tracker default noticeEntryInto: view controller ].</body></methods><methods><class-id>Refactory.Browser.DefaultFormatterSettingsPage</class-id> <category>changing</category><body package="Browser-ConfigurableFormatter">changedBoolean	self selectedOption value: booleanHolder value.	self updateExample.	self tickle</body><body package="Browser-ConfigurableFormatter">changedNumber	self selectedOption value: numericHolder value.	self updateExample.	self tickle</body><body package="Browser-ConfigurableFormatter">changedSelectedOption	self updatePopUpHelp.	self showCorrectEditor</body><body package="Browser-ConfigurableFormatter">changedString	| string originalString |	originalString := textHolder value asString.	string := originalString select: [:each | each isSeparator].	string ~= originalString		ifTrue:			[Dialog warn: #NonSeparatorsNotValid &lt;&lt; #browser &gt;&gt; 'Non-separator characters are not valid.'.			textHolder value: string].	self selectedOption value: string.	self updateExample.	self tickle</body></methods><methods><class-id>Refactory.Browser.DefaultFormatterSettingsPage</class-id> <category>aspects</category><body package="Browser-ConfigurableFormatter">booleanHolder	^booleanHolder</body><body package="Browser-ConfigurableFormatter">browseAutoFormatModule	^browseAutoFormatModule</body><body package="Browser-ConfigurableFormatter">formattedTextHolder	^formattedTextHolder</body><body package="Browser-ConfigurableFormatter">numericHolder	^numericHolder</body><body package="Browser-ConfigurableFormatter">optionsList	^optionsList</body><body package="Browser-ConfigurableFormatter">saveAutoFormatModule	^saveAutoFormatModule</body><body package="Browser-ConfigurableFormatter">textHolder	^textHolder</body></methods><methods><class-id>Refactory.Browser.DefaultFormatterSettingsPage</class-id> <category>accessing</category><body package="Browser-ConfigurableFormatter">settings	^(self options collect: [:each | each setting])		,			(List				with: saveAutoFormatModule setting				with: browseAutoFormatModule setting)</body><body package="Browser-ConfigurableFormatter">triggerChannel	^manager triggerChannel</body></methods><methods><class-id>Refactory.Browser.DefaultFormatterSettingsPage</class-id> <category>initialize-release</category><body package="Browser-ConfigurableFormatter">initAutoFormatModules	| setting |	setting := (BooleanSetting		on: BrowserCodeTool		aspect: #saveAutoFormat)		id: #(#tools #browser #formatter #saveAutoFormat).	setting		default: false;		label: #SaveAutoFormatLabel &lt;&lt; #browser &gt;&gt; 'Save Auto Formats?';		helpText:				#SaveAutoFormatHelp &lt;&lt; #browser						&gt;&gt; 'Automatically format code when saving (accepting).'.	saveAutoFormatModule := setting createModuleFor: self.	setting := (BooleanSetting		on: BrowserCodeTool		aspect: #browseAutoFormat)		id: #(#tools #browser #formatter #browseAutoFormat).	setting		default: false;		label: #BrowseAutoFormatLabel &lt;&lt; #browser &gt;&gt; 'Browse Auto Formats?';		helpText:				#BrowseAutoFormatHelp &lt;&lt; #browser						&gt;&gt; 'Automatically format code when browsing (viewing).'.	browseAutoFormatModule := setting createModuleFor: self</body><body package="Browser-ConfigurableFormatter">initOptionsList	| options |	options := FormatterSettingOption all.	options sort.	optionsList := SelectionInList with: options</body><body package="Browser-ConfigurableFormatter">initTypedHolders	booleanHolder := false asValue.	textHolder := String new asValue.	numericHolder := 0 asValue</body><body package="Browser-ConfigurableFormatter">initialize	super initialize.	self initTypedHolders.	self initOptionsList.	self initializeFormattedText</body><body package="Browser-ConfigurableFormatter">initializeFormattedText	formattedTextHolder := self exampleMethod asValue.	self updateExample</body><body package="Browser-ConfigurableFormatter">manager: aSettingsManager	super manager: aSettingsManager.	manager triggerChannel		onChangeSend: #apply		to: self.	saveAutoFormatModule page: self.	browseAutoFormatModule page: self</body></methods><methods><class-id>Refactory.Browser.DefaultFormatterSettingsPage</class-id> <category>actions</category><body package="Browser-ConfigurableFormatter">importOptionSnapshots: aCollection	| optionsByID |	optionsByID := Dictionary new.	self options		do:			[:each | 			optionsByID				at: each targetBinding key				put: each].	aCollection		do:			[:each | 			optionsByID				at: each id last				ifPresent:					[:option | option value: (option settingType new fromXML: each stateNodes first)]]</body><body package="Browser-ConfigurableFormatter">importSnapshots: aCollection	aCollection		do:			[:each | 			saveAutoFormatModule id = each id ifTrue: [saveAutoFormatModule importSnapshot: each].			browseAutoFormatModule id = each id ifTrue: [browseAutoFormatModule importSnapshot: each]].	self importOptionSnapshots: aCollection.	self showCorrectEditor.	self updateExample.	self tickle</body><body package="Browser-ConfigurableFormatter">resetUIStateToDefault	saveAutoFormatModule resetUIStateToDefault.	browseAutoFormatModule resetUIStateToDefault.	self options		do:			[:each | 			each targetBinding reinitializeValue.			each reset].	self updateExample</body></methods><methods><class-id>Refactory.Browser.DefaultFormatterSettingsPage class</class-id> <category>accessing</category><body package="Browser-ConfigurableFormatter">noSelectionHelp	^(#noOptionSelectedHint &lt;&lt; #store		&gt;&gt; 'Select an option in the list and change its value in the field below.') asText		emphasizeAllWith:			(Array				with: #italic				with: #color -&gt; SymbolicPaint inactiveForeground)</body></methods><methods><class-id>Refactory.Browser.ConfigurableFormatterSettingsPage</class-id> <category>initialize-release</category><body package="Browser-ConfigurableFormatter">initOptionsList	| options |	options := FormatterSettingOption all.	options sort.	optionsList := SelectionInList with: options</body><body package="Browser-ConfigurableFormatter">initTypedHolders	booleanHolder := false asValue.	textHolder := String new asValue.	numericHolder := 0 asValue</body><body package="Browser-ConfigurableFormatter">initialize	super initialize.	self initTypedHolders.	self initOptionsList.	self initializeFormattedText</body><body package="Browser-ConfigurableFormatter">initializeFormattedText	formattedTextHolder := self exampleMethod asValue.	self updateExample</body><body package="Browser-ConfigurableFormatter">manager: aSettingsManager	super manager: aSettingsManager.	manager triggerChannel onChangeSend: #apply to: self</body></methods><methods><class-id>Refactory.Browser.ConfigurableFormatterSettingsPage</class-id> <category>private</category><body package="Browser-ConfigurableFormatter">apply	self options do: [:each | each apply]</body><body package="Browser-ConfigurableFormatter">applyOptionsWhile: aBlock	| backup |	backup := Dictionary new.	self options		do:			[:each | 			backup				at: each targetBinding				put: each targetBinding value].	^[self apply.	aBlock value] ensure: [backup keysAndValuesDo: [:key :value | key value: value]]</body><body package="Browser-ConfigurableFormatter">exampleMethod	^'at: anIndex put: anObject	"this is a method comment"	| temp number |	temp := ''''.	1 to: 10 do: [:i | temp := temp , (i odd ifTrue: [(i * 2) printString] ifFalse: [i printString])].	number := Number readFrom: temp readStream.	number odd ifTrue: [Dialog warn: ''Something is really screwed up''. ^self].	^number // 2'</body><body package="Browser-ConfigurableFormatter">hideAll	#(#numberOptionCanvas #booleanOptionCanvas #stringOptionCanvas)		do:			[:each | 			(builder componentAt: each)				isEnabled: false;				isVisible: false]</body><body package="Browser-ConfigurableFormatter">installOptions	optionsList list do: [:each | each apply]</body><body package="Browser-ConfigurableFormatter">options	^optionsList list</body><body package="Browser-ConfigurableFormatter">selectedOption	^optionsList selection</body><body package="Browser-ConfigurableFormatter">showCorrectEditor	| object |	self hideAll.	object := self selectedOption ifNotNil: [:option | option value].	object isString		ifTrue:			[textHolder value: object.			self showEditor: #stringOptionCanvas].	object isInteger		ifTrue:			[numericHolder value: object.			self showEditor: #numberOptionCanvas].	(object isKindOf: Boolean)		ifTrue:			[booleanHolder value: object.			self showEditor: #booleanOptionCanvas]</body><body package="Browser-ConfigurableFormatter">showEditor: aSymbol	(builder componentAt: aSymbol)		isEnabled: true;		isVisible: true</body><body package="Browser-ConfigurableFormatter">updateExample	| parseTree newText |	parseTree := RBParser		parseMethod: formattedTextHolder value		onError:			[:s :p | ^Dialog warn: #InvalidMethodSource &lt;&lt; #browser &gt;&gt; 'Invalid method source'].	newText := self		applyOptionsWhile: [RBConfigurableFormatter format: parseTree].	#{Refactory.CodeHighlighter.CodeHighlightingParser}		ifDefinedDo:			[:highlighter | newText := highlighter formatMethod: newText asText].	formattedTextHolder value: newText</body><body package="Browser-ConfigurableFormatter">updatePopUpHelp	"Oh that popUpHelp were a block and could be polled on each query. Someday. So we set the new helpText, and then pretend the mouse just entered the list."	| view |	view := self widgetAt: #optionsList.	view		helpText:			(self selectedOption				ifNil: [self class noSelectionHelp]				ifNotNil: [:option | option help]).	#{FlyByHelpTracker} ifDefinedDo: [ :tracker | tracker default noticeEntryInto: view controller ].</body></methods><methods><class-id>Refactory.Browser.ConfigurableFormatterSettingsPage</class-id> <category>accessing</category><body package="Browser-ConfigurableFormatter">settings	^(self options collect: [:each | each setting])</body><body package="Browser-ConfigurableFormatter">triggerChannel	^manager triggerChannel</body></methods><methods><class-id>Refactory.Browser.ConfigurableFormatterSettingsPage</class-id> <category>changing</category><body package="Browser-ConfigurableFormatter">changedBoolean	self selectedOption value: booleanHolder value.	self updateExample.	self tickle</body><body package="Browser-ConfigurableFormatter">changedNumber	self selectedOption value: numericHolder value.	self updateExample.	self tickle</body><body package="Browser-ConfigurableFormatter">changedSelectedOption	self updatePopUpHelp.	self showCorrectEditor</body><body package="Browser-ConfigurableFormatter">changedString	| string originalString |	originalString := textHolder value asString.	string := originalString select: [:each | each isSeparator].	string ~= originalString		ifTrue:			[Dialog warn: #NonSeparatorsNotValid &lt;&lt; #browser &gt;&gt; 'Non-separator characters are not valid.'.			textHolder value: string].	self selectedOption value: string.	self updateExample.	self tickle</body></methods><methods><class-id>Refactory.Browser.ConfigurableFormatterSettingsPage</class-id> <category>actions</category><body package="Browser-ConfigurableFormatter">importOptionSnapshots: aCollection	| optionsByID |	optionsByID := Dictionary new.	self options		do:			[:each | 			optionsByID				at: each targetBinding key				put: each].	aCollection		do:			[:each | 			optionsByID				at: each id last				ifPresent:					[:option | option value: (option settingType new fromXML: each stateNodes first)]]</body><body package="Browser-ConfigurableFormatter">importSnapshots: aCollection	self importOptionSnapshots: aCollection.	self showCorrectEditor.	self updateExample.	self tickle</body><body package="Browser-ConfigurableFormatter">resetUIStateToDefault		self options do: [:each |			each targetBinding reinitializeValue.			each reset].	self updateExample</body></methods><methods><class-id>Refactory.Browser.ConfigurableFormatterSettingsPage</class-id> <category>aspects</category><body package="Browser-ConfigurableFormatter">booleanHolder	^booleanHolder</body><body package="Browser-ConfigurableFormatter">formattedTextHolder	^formattedTextHolder</body><body package="Browser-ConfigurableFormatter">numericHolder	^numericHolder</body><body package="Browser-ConfigurableFormatter">optionsList	^optionsList</body><body package="Browser-ConfigurableFormatter">textHolder	^textHolder</body></methods><methods><class-id>Refactory.Browser.ConfigurableFormatterSettingsPage class</class-id> <category>accessing</category><body package="Browser-ConfigurableFormatter">noSelectionHelp	^(#noOptionSelectedHint &lt;&lt; #store		&gt;&gt; 'Select an option in the list and change its value in the field below.') asText		emphasizeAllWith:			(Array				with: #italic				with: #color -&gt; SymbolicPaint inactiveForeground)</body></methods><methods><class-id>Refactory.Browser.FormatterSettingOption</class-id> <category>names</category><body package="Browser-ConfigurableFormatter">nameFormatCommentWithStatements	&lt;name: #FormatCommentWithStatements&gt;	^'Format comments beside their statements'</body><body package="Browser-ConfigurableFormatter">nameIndentString	&lt;name: #IndentString&gt;	^'Indent string'</body><body package="Browser-ConfigurableFormatter">nameIndentsForKeywords	&lt;name: #IndentsForKeywords&gt;	^'Indents for keywords'</body><body package="Browser-ConfigurableFormatter">nameLineUpBlockBrackets	&lt;name: #LineUpBlockBrackets&gt;	^'Line up block brackets []'</body><body package="Browser-ConfigurableFormatter">nameMaxLineLength	&lt;name: #MaxLineLength&gt;	^'Max line length'</body><body package="Browser-ConfigurableFormatter">nameMethodSignatureOnMultipleLines	&lt;name: #MethodSignatureOnMultipleLines&gt;	^'Method signature on multiple lines'</body><body package="Browser-ConfigurableFormatter">nameMinimumNewLinesBetweenStatements	&lt;name: #MinimumNewLinesBetweenStatements&gt;	^'Minimum new lines between statements'</body><body package="Browser-ConfigurableFormatter">nameNewLineAfterCascade	&lt;name: #NewLineAfterCascade&gt;	^'New line after cascade'</body><body package="Browser-ConfigurableFormatter">nameNewLineBeforeFirstCascade	&lt;name: #NewLineBeforeFirstCascade&gt;	^'New line before first cascade'</body><body package="Browser-ConfigurableFormatter">nameNewLineBeforeFirstKeyword	&lt;name: #NewLineBeforeFirstKeyword&gt;	^'New line before first keyword'</body><body package="Browser-ConfigurableFormatter">nameNewLinesAfterMethodComment	&lt;name: #NewLinesAfterMethodComment&gt;	^'New lines after method comment'</body><body package="Browser-ConfigurableFormatter">nameNewLinesAfterMethodPattern	&lt;name: #NewLinesAfterMethodPattern&gt;	^'New lines after method pattern'</body><body package="Browser-ConfigurableFormatter">nameNewLinesAfterTemporaries	&lt;name: #NewLinesAfterTemporaries&gt;	^'New lines after temporaries'</body><body package="Browser-ConfigurableFormatter">nameNewLinesBeforeMethodBody	&lt;name: #NewLinesBeforeMethodBody&gt;	^'New lines before method body'</body><body package="Browser-ConfigurableFormatter">nameNumberOfArgumentsForMultiLine	&lt;name: #NumberOfArgumentsForMultiLine&gt;	^'Number of arguments for multiline messages'</body><body package="Browser-ConfigurableFormatter">namePeriodsAtEndOfBlock	&lt;name: #PeriodsAtEndOfBlock&gt;	^'Period at end of block'</body><body package="Browser-ConfigurableFormatter">namePeriodsAtEndOfMethod	&lt;name: #PeriodsAtEndOfMethod&gt;	^'Period at end of method'</body><body package="Browser-ConfigurableFormatter">nameRetainBlankLinesBetweenStatements	&lt;name: #RetainBlankLinesBetweenStatements&gt;	^'Retain blank lines between statements'</body><body package="Browser-ConfigurableFormatter">nameStringFollowingReturn	&lt;name: #StringFollowingReturn&gt;	^'String following return (^)'</body><body package="Browser-ConfigurableFormatter">nameStringInsideBlocks	&lt;name: #StringInsideBlocks&gt;	^'String inside block brackets []'</body><body package="Browser-ConfigurableFormatter">nameStringInsideParentheses	&lt;name: #StringInsideParentheses&gt;	^'String inside parentheses ()'</body><body package="Browser-ConfigurableFormatter">nameUseTraditionalBinaryPrecedenceForParentheses	&lt;name: #UseTraditionalBinaryPrecedenceForParentheses&gt;	^'Parenthesize expressions based on arithemetic order not left-to-right precendence'</body></methods><methods><class-id>Refactory.Browser.FormatterSettingOption</class-id> <category>help</category><body package="Browser-ConfigurableFormatter">helpFormatCommentWithStatements	&lt;help: #FormatCommentWithStatements&gt;	^'Format comments beside the statement they occurred in. If this is unchecked, then comments will be put beside the node they occurred in the original source.'</body><body package="Browser-ConfigurableFormatter">helpIndentString	&lt;help: #IndentString&gt;	^'This is the string that is used for indenting lines.'</body><body package="Browser-ConfigurableFormatter">helpIndentsForKeywords	&lt;help: #IndentsForKeywords&gt;	^'When formatting a multi-line message, how many more times should we indent?'</body><body package="Browser-ConfigurableFormatter">helpLineUpBlockBrackets	&lt;help: #LineUpBlockBrackets&gt;	^'Should the block brackets [] be aligned when formatting a multi-line block?'</body><body package="Browser-ConfigurableFormatter">helpMaxLineLength	&lt;help: #MaxLineLength&gt;	^'How long should a line be before the formatter breaks it into multiple lines. Comments are not affected.'</body><body package="Browser-ConfigurableFormatter">helpMethodSignatureOnMultipleLines	&lt;help: #MethodSignatureOnMultipleLines&gt;	^'Should keyword method signatures be displayed on multiple lines?'</body><body package="Browser-ConfigurableFormatter">helpMinimumNewLinesBetweenStatements	&lt;help: #MinimumNewLinesBetweenStatements&gt;	^'How many new lines should be placed between the previous statement''s period and the next statement?'</body><body package="Browser-ConfigurableFormatter">helpNewLineAfterCascade	&lt;help: #NewLineAfterCascade&gt;	^'Should a new line be added between each cascaded message? If not, the next message will begin on the same line as the previous message.'</body><body package="Browser-ConfigurableFormatter">helpNewLineBeforeFirstCascade	&lt;help: #NewLineBeforeFirstCascade&gt;	^'When formatting a cascaded message, should a new line be added before the first message?'</body><body package="Browser-ConfigurableFormatter">helpNewLineBeforeFirstKeyword	&lt;help: #NewLineBeforeFirstKeyword&gt;	^'When formatting a multi-line keyword message, should we add a new line before the first keyword?'</body><body package="Browser-ConfigurableFormatter">helpNewLinesAfterMethodComment	&lt;help: #NewLinesAfterMethodComment&gt;	^'How many new lines should be added after each method comment and the start of the method?'</body><body package="Browser-ConfigurableFormatter">helpNewLinesAfterMethodPattern	&lt;help: #NewLinesAfterMethodPattern&gt;	^'How many new lines should be added after the method pattern and the method body?'</body><body package="Browser-ConfigurableFormatter">helpNewLinesAfterTemporaries	&lt;help: #NewLinesAfterTemporaries&gt;	^'How many new lines should be added after formatting temporary variables (e.g., | a b c |)?'</body><body package="Browser-ConfigurableFormatter">helpNewLinesBeforeMethodBody	&lt;help: #NewLinesBeforeMethodBody&gt;	^'How many new lines should be inserted before the actual method body of code?'</body><body package="Browser-ConfigurableFormatter">helpNumberOfArgumentsForMultiLine	&lt;help: #NumberOfArgumentsForMultiLine&gt;	^'How many arguments are required to always format a message on multiple lines?'</body><body package="Browser-ConfigurableFormatter">helpPeriodsAsTerminators	&lt;help: #PeriodsAsTerminators&gt;	^'Should we add a period after every statement? If this is unchecked, only the necessary periods are added.'</body><body package="Browser-ConfigurableFormatter">helpPeriodsAtEndOfBlock	&lt;help: #PeriodsAtEndOfBlock&gt;	^'Should we add a period after the last statement in a block?'</body><body package="Browser-ConfigurableFormatter">helpPeriodsAtEndOfMethod	&lt;help: #PeriodsAtEndOfMethod&gt;	^'Should we add a period after the last statement in a method?'</body><body package="Browser-ConfigurableFormatter">helpRetainBlankLinesBetweenStatements	&lt;help: #RetainBlankLinesBetweenStatements&gt;	^'Should blank lines between statements in the original source be retained.'</body><body package="Browser-ConfigurableFormatter">helpStringFollowingReturn	&lt;help: #StringFollowingReturn&gt;	^'What string if any is displayed immediately following a return ^?'</body><body package="Browser-ConfigurableFormatter">helpStringInsideBlocks	&lt;help: #StringInsideBlocks&gt;	^'What string if any is displayed inside the brackets of a block []?'</body><body package="Browser-ConfigurableFormatter">helpStringInsideParentheses	&lt;help: #StringInsideParentheses&gt;	^'What string if any is displayed inside parentheses ()?'</body><body package="Browser-ConfigurableFormatter">helpUseTraditionalBinaryPrecedenceForParentheses	&lt;help: #UseTraditionalBinaryPrecedenceForParentheses&gt;	^'Should we parethesize expressions based on standard precendence of other languages? For example, should 3 + 4 * 2 be formatted as (3 + 4) * 2?'</body></methods><methods><class-id>Refactory.Browser.FormatterSettingOption class</class-id> <category>tags</category><body package="Browser-ConfigurableFormatter">helpTags	&lt;pragmas: #instance&gt;	^#(#help:)</body><body package="Browser-ConfigurableFormatter">nameTags	&lt;pragmas: #instance&gt;	^#(#name:)</body></methods><methods><class-id>Refactory.Browser.DefaultFormatterSettingsPage class</class-id> <category>interface specs</category><body package="Browser-ConfigurableFormatter">booleanOptionSpec	"Tools.UIPainter new openOnClass: self andSelector: #booleanSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 720 450 920 650 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CheckBoxSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 0 0.5 0 0.5 ) 					#name: #enabled 					#model: #booleanHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedBoolean ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #Enabled 						#defaultString: 'Enabled' 						#catalogID: #browser ) ) ) ) )</body><body package="Browser-ConfigurableFormatter">exampleSpec	"Tools.UIPainter new openOnClass: self andSelector: #exampleSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #FormatterConfiguration 				#defaultString: 'Formatter Configuration' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 720 449 1291 900 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 20 0 0 1 0 1 ) 					#name: #formattedText 					#model: #formattedTextHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateExample ) 					#tabRequiresControl: true 					#isWrapped: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 20 0 0 1 ) 					#name: #exampleLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #ExampleC 						#defaultString: 'Example:' 						#catalogID: #browser ) ) ) ) )</body><body package="Browser-ConfigurableFormatter">numberOptionSpec	"UIPainter new openOnClass: self andSelector: #integerSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #numeric 					#model: #numericHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedNumber ) 					#type: #number 					#formatString: '0' ) ) ) )</body><body package="Browser-ConfigurableFormatter">optionsSpec	"Tools.UIPainter new openOnClass: self andSelector: #optionsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #FormatterConfiguration 				#defaultString: 'Formatter Configuration' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 720 449 1291 900 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 20 0 0 1 ) 					#name: #optionLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #OptionsC 						#defaultString: 'Options:' 						#catalogID: #browser ) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 20 0 0 1 -30 1 ) 					#name: #optionsList 					#model: #optionsList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSelectedOption ) 					#helpText: #noSelectionHelp 					#style: #system 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -30 1 0 1 0 1 ) 					#name: #booleanOptionCanvas 					#flags: 48 					#minorKey: #booleanOptionSpec ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -30 1 0 1 0 1 ) 					#name: #numberOptionCanvas 					#flags: 48 					#minorKey: #numberOptionSpec ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -30 1 0 1 0 1 ) 					#name: #stringOptionCanvas 					#flags: 48 					#minorKey: #stringOptionSpec ) ) ) )</body><body package="Browser-ConfigurableFormatter">stringOptionSpec	"Tools.UIPainter new openOnClass: self andSelector: #textSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 720 450 920 650 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedString ) 					#style: #system 					#tabRequiresControl: true ) ) ) )</body><body package="Browser-ConfigurableFormatter">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #FormatterConfiguration 				#defaultString: 'Formatter Configuration' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 840 525 1411 976 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.5 0 1 2 0.5 ) 					#name: #splitter 					#horizontal: true 					#minAboveSize: 80 					#minBelowSize: 50 					#aboveWidgets: 'optionsCanvas' 					#belowWidgets: 'exampleCanvas' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -2 0.5 ) 					#name: #optionsCanvas 					#flags: 0 					#minorKey: #optionsSpec ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 2 0.5 0 1 0 1 ) 					#name: #exampleCanvas 					#flags: 0 					#minorKey: #exampleSpec ) ) ) )</body></methods><methods><class-id>Refactory.Browser.ConfigurableFormatterSettingsPage class</class-id> <category>interface specs</category><body package="Browser-ConfigurableFormatter">booleanOptionSpec	"Tools.UIPainter new openOnClass: self andSelector: #booleanSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 720 450 920 650 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CheckBoxSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 0 0.5 0 0.5 ) 					#name: #enabled 					#model: #booleanHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedBoolean ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #Enabled 						#defaultString: 'Enabled' 						#catalogID: #browser ) ) ) ) )</body><body package="Browser-ConfigurableFormatter">exampleSpec	"Tools.UIPainter new openOnClass: self andSelector: #exampleSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #FormatterConfiguration 				#defaultString: 'Formatter Configuration' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 720 449 1291 900 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 20 0 0 1 0 1 ) 					#name: #formattedText 					#model: #formattedTextHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateExample ) 					#tabRequiresControl: true 					#isWrapped: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 20 0 0 1 ) 					#name: #exampleLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #ExampleC 						#defaultString: 'Example:' 						#catalogID: #browser ) ) ) ) )</body><body package="Browser-ConfigurableFormatter">numberOptionSpec	"UIPainter new openOnClass: self andSelector: #integerSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #UnlabeledCanvas #defaultString: 'Unlabeled Canvas' #catalogID: #browser) 			#bounds: #(#{Graphics.Rectangle} 800 600 1000 800 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #numeric 					#model: #numericHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedNumber ) 					#type: #number 					#formatString: '0' ) ) ) )</body><body package="Browser-ConfigurableFormatter">optionsSpec	"Tools.UIPainter new openOnClass: self andSelector: #optionsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #FormatterConfiguration 				#defaultString: 'Formatter Configuration' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 720 449 1291 900 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 20 0 0 1 ) 					#name: #optionLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #OptionsC 						#defaultString: 'Options:' 						#catalogID: #browser ) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 20 0 0 1 -30 1 ) 					#name: #optionsList 					#model: #optionsList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedSelectedOption ) 					#helpText: #noSelectionHelp 					#style: #system 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -30 1 0 1 0 1 ) 					#name: #booleanOptionCanvas 					#flags: 48 					#minorKey: #booleanOptionSpec ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -30 1 0 1 0 1 ) 					#name: #numberOptionCanvas 					#flags: 48 					#minorKey: #numberOptionSpec ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -30 1 0 1 0 1 ) 					#name: #stringOptionCanvas 					#flags: 48 					#minorKey: #stringOptionSpec ) ) ) )</body><body package="Browser-ConfigurableFormatter">stringOptionSpec	"Tools.UIPainter new openOnClass: self andSelector: #textSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 720 450 920 650 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #text 					#model: #textHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedString ) 					#style: #system 					#tabRequiresControl: true ) ) ) )</body><body package="Browser-ConfigurableFormatter">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #FormatterConfiguration 				#defaultString: 'Formatter Configuration' 				#catalogID: #browser ) 			#bounds: #(#{Graphics.Rectangle} 840 525 1411 976 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.5 0 1 2 0.5 ) 					#name: #splitter 					#horizontal: true 					#minAboveSize: 80 					#minBelowSize: 50 					#aboveWidgets: 'optionsCanvas' 					#belowWidgets: 'exampleCanvas' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -2 0.5 ) 					#name: #optionsCanvas 					#flags: 0 					#minorKey: #optionsSpec ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 2 0.5 0 1 0 1 ) 					#name: #exampleCanvas 					#flags: 0 					#minorKey: #exampleSpec ) ) ) )</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-formatter</category><body package="Browser-ConfigurableFormatter">configurableFormatterPage	&lt;settingsPage: #(#tools #formatter #configurable)&gt;	^Refactory.Browser.ConfigurableFormatterSettingsPage new		label: #ConfigurableFormatter &lt;&lt; #IDE &gt;&gt; 'Configurable Formatter'</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>SettingsManagerPage</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>manager id position label icon children definingMethod </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-UI</category><attributes><package>Tools-Settings</package></attributes></class><class><name>RBProgramNodeVisitor</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Parse Tree Matching</category><attributes><package>Browser-Parser</package></attributes></class></st-source>