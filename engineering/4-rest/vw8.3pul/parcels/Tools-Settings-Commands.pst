<?xml version="1.0"?><st-source><!-- Name: Tools-Settings-CommandsNotice: Copyright 1999-2017 Cincom Systems, Inc.  All rights reserved.Comment: This package contains the key binding editor for the commands frameworkDbIdentifier: bear73DbTrace: 499367DbUsername: smichaelDbVersion: 8.3 - 2DevelopmentPrerequisites: #(#(#any 'Assets' '') #(#any 'Tools-Settings' ''))PackageName: Tools-Settings-CommandsParcel: #('Tools-Settings-Commands')ParcelName: Tools-Settings-CommandsPrerequisiteDescriptions: #(#(#name 'Assets' #componentType #package) #(#name 'Tools-Settings' #componentType #package))PrerequisiteParcels: #(#('Assets' '') #('Tools-Settings' ''))PrintStringCache: (8.3 - 2,smichael)Version: 8.3 - 2Date: 3:26:50 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.4) of June 23, 2017 on June 30, 2017 at 3:26:50 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>CommandBindingsEditor</name><environment>Tools</environment><private>false</private><imports>			private Smalltalk.*			private UI.*			</imports><category></category><attributes><package>Tools-Settings-Commands</package></attributes></name-space><class><name>EditorAssets</name><environment>Tools.CommandBindingsEditor</environment><super>AlphaBlendedIcons</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tools-Settings-Commands</package></attributes></class><comment><class-id>Tools.CommandBindingsEditor.EditorAssets</class-id><body>This class holds assets (graphics) used by the BindingEditor.</body></comment><class><name>BasePanel</name><environment>Tools.CommandBindingsEditor</environment><super>UI.Panel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tools-Settings-Commands</package></attributes></class><comment><class-id>Tools.CommandBindingsEditor.BasePanel</class-id><body>This class is the subclass for all of the panels used in the binding editor. It has two purposes: firstly to specify the layoutChildren:inFrame protocol and set that method to be the layout mechanism, and secondly to enable pragma-based event handling, specifically mouse handling.Subclasses must implement the following messages:	initialize-release		layoutChildren:inFrame:</body></comment><class><name>CommandPanel</name><environment>Tools.CommandBindingsEditor</environment><super>Tools.CommandBindingsEditor.BasePanel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>commandId categoryPanel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tools-Settings-Commands</package></attributes></class><comment><class-id>Tools.CommandBindingsEditor.CommandPanel</class-id><body>This class displays a command label and three BindingPanels which represent the bindings for the command for platforms #isMacOSX, #isMSWindows, and #isX11, in that order.Instance Variables	categoryPanel	&lt;CategoryPanel&gt;	the CategoryPanel containing this command panel	commandId		&lt;Symbol&gt;			the id of the command that this panel represents</body></comment><class><name>BindingPanel</name><environment>Tools.CommandBindingsEditor</environment><super>Tools.CommandBindingsEditor.BasePanel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>commandPanel platform </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tools-Settings-Commands</package></attributes></class><comment><class-id>Tools.CommandBindingsEditor.BindingPanel</class-id><body>This class represents the intersection of a command and a platform, and displays the keys that are bound to that command on the given platform. It has any &gt; 0 number of BindingLabels as children, each of which represents a keystroke. The last binding label child can have a nil keystroke, in which case it represents a lack of bindings if it is the only child, or a temporary placeholder whilst a new key press is accepted to add a key binding.Instance Variables	commandPanel	&lt;CommandPanel&gt;	the CommandPanel containing this binding panel	platform			&lt;Symbol&gt;			one of #isMacOSX | #isMSWindows | #isX11, indicating the platform for which this binding panel is displaying keystrokes</body></comment><class><name>Column</name><environment>Tools.CommandBindingsEditor</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isExpanded left right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tools-Settings-Commands</package></attributes></class><comment><class-id>Tools.CommandBindingsEditor.Column</class-id><body>This class holds the details of a column in the EditorPanel table layout.Instance Variables	isExpanded	&lt;Boolean&gt;	whether the column is expanded/visible	left			&lt;Integer&gt;	left edge of the column	right		&lt;Integer&gt;	right edge of the column (inclusive - hence left == right is a one pixel column)</body></comment><class><name>BindingEditor</name><environment>Tools.CommandBindingsEditor</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hasChanges editorPanel headerPanel commandRegistry registrySelectionHolder commandRegistryList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tools-Settings-Commands</package></attributes></class><comment><class-id>Tools.CommandBindingsEditor.BindingEditor</class-id><body>This application is an editor for key bindings for the command system. It's not much of a model - the data is represented by the panel structure starting at the #EditorPanel component.Instance Variables	hasChanges		&lt;Boolean&gt;	true if there are changed bindings that haven't been applied.	editorPanel		&lt;EditorPanel&gt;	the top level panel for this application.	headerPanel		&lt;HeaderPanel&gt;	the header panel for the application.	commandRegistry	&lt;CommandRegistry&gt;	the specific resistry being edited (private, local, or global)</body></comment><class><name>BindingLabel</name><environment>Tools.CommandBindingsEditor</environment><super>UI.Label</super><private>false</private><indexed-type>none</indexed-type><inst-vars>keystroke bindingPanel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tools-Settings-Commands</package></attributes></class><comment><class-id>Tools.CommandBindingsEditor.BindingLabel</class-id><body>This subclass of Label represents a keystroke in the binding editor. It can change how it is displayed (default / selected / waiting for a keypress) and the text it displays in the default situation corresponds to the keystroke if represents. This representation depends on the platform its parent bindingPanel represents.Instance Variables	bindingPanel	&lt;BindingPanel&gt;	the binding panel containing this label	keystroke		&lt;Keystroke&gt;	the keystroke that this label represents.</body></comment><class><name>CategoryPanel</name><environment>Tools.CommandBindingsEditor</environment><super>Tools.CommandBindingsEditor.BasePanel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>category parentPanel level </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>category1</category><attributes><package>Tools-Settings-Commands</package></attributes></class><comment><class-id>Tools.CommandBindingsEditor.CategoryPanel</class-id><body>This class displays a category of commands. Apart from category labels and controls, the children are instances of CommandPanel.Instance Variables	category			&lt;Symbol&gt;		The symbol representing the category.	parentPanel		&lt;EditorPanel | CategoryPanel&gt;	The parent panel containing this category panel.	level			&lt;Integer&gt;		The indentation level of this category panel.</body></comment><class><name>ColumnHeaderPanel</name><environment>Tools.CommandBindingsEditor</environment><super>Tools.CommandBindingsEditor.BasePanel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>editorPanel columnLabels </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>category1</category><attributes><package>Tools-Settings-Commands</package></attributes></class><comment><class-id>Tools.CommandBindingsEditor.ColumnHeaderPanel</class-id><body>This class displays the column labels at the top of the window and the popup menu to select which columns are visible.Instance Variables	columnLabels	&lt;Collection&gt;		The labels for each of the column headings	editorPanel		&lt;EditorPanel&gt;	The EditorPanel containing this category panel.</body></comment><class><name>EditorPanel</name><environment>Tools.CommandBindingsEditor</environment><super>Tools.CommandBindingsEditor.BasePanel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>columns activeBindingLabel animator animationPhase commandRegistry </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tools-Settings-Commands</package></attributes></class><comment><class-id>Tools.CommandBindingsEditor.EditorPanel</class-id><body>This class is the topmost panel in a structure representing key bindings for commands. The structure is EditorPanel -&gt; CategoryPanel* -&gt; CommandPanel* -&gt; 3 x BindingPanel -&gt; BindingLabel*, with some additional components in the structure representing category/command labels, column headers, disclosure controls and popup menu triggers.One instance of this panel is contained in a scroller, managed nominally by an instance of BindingEditor, although in practice this class is where the action happens.Instance Variables	activeBindingLabel	&lt;BindingLabel&gt;				the BindingLabel that is currently waiting for a keypress	animationPhase		&lt;Number&gt;					the phase 0..1 of the animator that drives the keypress graphic	animator			&lt;Timer&gt;						the animator that drives the keypress graphic. It invalidates the BindingLabel on each tick.	columns				&lt;Collection of: Column&gt;		the columns (1..5) in the table.	commandRegistry	&lt;CommandRegistry&gt;			the specific resistry being edited (private, local, or global)</body></comment><methods><class-id>Tools.CommandBindingsEditor.BasePanel</class-id> <category>event driven</category><body package="Tools-Settings-Commands">getEventHandler		^self</body><body package="Tools-Settings-Commands">handleEvent: anEvent	self eventReactions reactTo: anEvent</body><body package="Tools-Settings-Commands">handlerForMouseEvent: aMouseEvent	| child |	child := super handlerForMouseEvent: aMouseEvent.	child ifNotNil: [ ^child ].	^(self isEnabled and: [ self containsMouseEvent: aMouseEvent ])		ifTrue: [ self ]		ifFalse: [ nil ]</body></methods><methods><class-id>Tools.CommandBindingsEditor.BasePanel</class-id> <category>initialize-release</category><body package="Tools-Settings-Commands">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	self layoutAlgorithm: [ :frame :children | self layoutChildren: children inFrame: frame ].	^self</body><body package="Tools-Settings-Commands">layoutChildren: children inFrame: frame	self subclassResponsibility</body></methods><methods><class-id>Tools.CommandBindingsEditor.BasePanel</class-id> <category>testing</category><body package="Tools-Settings-Commands">isCategoryPanel	^false</body><body package="Tools-Settings-Commands">isCommandPanel	^false</body><body package="Tools-Settings-Commands">isEditorPanel	^false</body></methods><methods><class-id>Tools.CommandBindingsEditor.CommandPanel</class-id> <category>accessing</category><body package="Tools-Settings-Commands">bindingPanels	^self children allButFirst: 1</body><body package="Tools-Settings-Commands">categoryPanel	^categoryPanel</body><body package="Tools-Settings-Commands">categoryPanel: anObject	categoryPanel := anObject</body><body package="Tools-Settings-Commands">command	^self editorPanel commandRegistry commandsById at: commandId ifAbsent: [ nil ].</body><body package="Tools-Settings-Commands">commandId	^commandId</body><body package="Tools-Settings-Commands">commandId: aSymbol	| label |	commandId := aSymbol.	label := (Label with: commandId) textStyle: self currentSkin defaultTextStyle.	self add: (label asVisualPart id: #command)</body><body package="Tools-Settings-Commands">editorPanel	^categoryPanel editorPanel</body></methods><methods><class-id>Tools.CommandBindingsEditor.CommandPanel</class-id> <category>bounds accessing</category><body package="Tools-Settings-Commands">preferredExtent	| extent |	extent := super preferredExtent.	categoryPanel ifNotNil: [		extent := (self editorPanel column: 4) right @ extent y.	].	^extent</body></methods><methods><class-id>Tools.CommandBindingsEditor.CommandPanel</class-id> <category>displaying</category><body package="Tools-Settings-Commands">displayOn: aGC	| b |	b := self bounds.	aGC paint: ColorValue white.	aGC displayRectangle: (b insetBy: (15@0 corner: 0@1)).	aGC paint: (ColorValue brightness: 232 / 256).	aGC displayLineFrom: (b left + 10) @ (b bottom - 1) to: b right @ (b bottom - 1).	aGC paint: ColorValue black.	super displayOn: aGC.</body></methods><methods><class-id>Tools.CommandBindingsEditor.CommandPanel</class-id> <category>uilayout</category><body package="Tools-Settings-Commands">labelColumnPreferredWidth	^self nestedIndentation + (self children at: 1) preferredWidth + 30</body><body package="Tools-Settings-Commands">labelIndentation	"Indent CommandPanel label the same as its associated CategoryPanel label."	^self categoryPanel labelIndentation</body><body package="Tools-Settings-Commands">layoutChildren: children inFrame: frame	"We need to adjust the frame for the BindingPanel children of a CommandPanel contained in a nested CategoryPanel."	| ab |	ab := children collect: #preferredBounds.	ab size == 4		ifTrue: 			[(ab at: 1) moveBy: self labelIndentation @ 5.			2 to: 4				do: 					[:index |					(ab at: index)						moveBy: ((self editorPanel column: index) center								- ((ab at: index) width / 2) - self widthAdjustment)								@ 0]].	^ab</body><body package="Tools-Settings-Commands">nestedIndentation	"Width relies on the nested label indentation of the associated CategoryPanel." 	^self categoryPanel nestedIndentation + self labelIndentation</body><body package="Tools-Settings-Commands">updateColumnWidths	self editorPanel adjustColumn: 1 widthAtLeast: self labelColumnPreferredWidth</body><body package="Tools-Settings-Commands">widthAdjustment	"We need to certain layout widths for a CommandPanel contained in a nested CategoryPanel.	 These CategoryPanels are indented from their parent panels, and the artificial column width is adjusted to accommodate the required nesting width."	^categoryPanel level * self labelIndentation</body></methods><methods><class-id>Tools.CommandBindingsEditor.CommandPanel</class-id> <category>testing</category><body package="Tools-Settings-Commands">isCommandPanel	^true</body></methods><methods><class-id>Tools.CommandBindingsEditor.CommandPanel class</class-id> <category>instance creation</category><body package="Tools-Settings-Commands">categoryPanel: categoryPanel commandId: aSymbol command: aCommand	| panel |	panel := self new commandId: aSymbol; categoryPanel: categoryPanel; yourself.	categoryPanel add: panel.	#(#isMacOSX #isMSWindows #isX11) do: [ :plat |		| keystrokes |		keystrokes := aCommand keystrokes isEmpty 			ifTrue: [ nil ]			ifFalse: [ (aCommand keystrokes at: plat ifAbsent: [ nil ]) ifNotNil: #copy ].		BindingPanel commandPanel: panel platform: plat keystrokes: keystrokes	].	^panel</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingPanel</class-id> <category>actions</category><body package="Tools-Settings-Commands">actionAddKeystroke: focusedChild	self isEmpty ifFalse: [		self add: (BindingLabel bindingPanel: self keystroke: nil).		commandPanel relayout.		self invalidateNow.	].	self editorPanel activeBindingLabel: self children last.</body><body package="Tools-Settings-Commands">actionRemoveKeystroke: focusedChild	self remove: focusedChild.	self editorPanel hasChanges: true.	self children isEmpty ifTrue: [		self add: (BindingLabel bindingPanel: self keystroke: nil)	].	self commandPanel relayout.	self invalidateNow.</body><body package="Tools-Settings-Commands">actionReplaceKeystroke: focusedChild	self editorPanel activeBindingLabel: focusedChild.</body><body package="Tools-Settings-Commands">actionResetToDefault: focusedChild	self resetToDefault.	self editorPanel hasChanges: true.	self commandPanel relayout.	self invalidateNow.</body><body package="Tools-Settings-Commands">resetToDefault	self keystrokes: (commandPanel command keystrokes at: platform ifAbsent: [ nil ])</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingPanel</class-id> <category>accessing</category><body package="Tools-Settings-Commands">column	platform == #isMacOSX ifTrue: [ ^2 ].	platform == #isMSWindows ifTrue: [ ^3 ].	^4</body><body package="Tools-Settings-Commands">commandPanel	^commandPanel</body><body package="Tools-Settings-Commands">commandPanel: anObject	commandPanel := anObject</body><body package="Tools-Settings-Commands">editorPanel	^commandPanel editorPanel</body><body package="Tools-Settings-Commands">isDefault	| defaults |	defaults := commandPanel command keystrokes at: platform ifAbsent: [ nil ].	defaults ifNil: [ ^self isEmpty ].	defaults size = self children size ifFalse: [ ^false ].	defaults keysAndValuesDo: [ :index :stroke |		(self children at: index) graphic keystroke = stroke ifFalse: [ ^false ].	].	^true.</body><body package="Tools-Settings-Commands">isEmpty	^self children size = 1 and: [ (self children at: 1) graphic keystroke isNil ]</body><body package="Tools-Settings-Commands">keystrokes	^ (self children collect: [ :c | c graphic keystroke]) reject: #isNil</body><body package="Tools-Settings-Commands">keystrokes: aKeystrokeArray	self removeAll: self children copy.	(aKeystrokeArray isNil or: [ aKeystrokeArray isEmpty ]) ifTrue: [		self add: (BindingLabel bindingPanel: self keystroke: nil)	] ifFalse: [		aKeystrokeArray do: [ :keystroke |			self add: (BindingLabel bindingPanel: self keystroke: keystroke)		]	]</body><body package="Tools-Settings-Commands">platform	^platform</body><body package="Tools-Settings-Commands">platform: anObject	platform := anObject</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingPanel</class-id> <category>displaying</category><body package="Tools-Settings-Commands">displayChild: aChild on: aGC	| box translation clip |	box := aChild frame.	translation := aGC translation.	clip := aGC clippingBounds.	(clip intersects: box) ifFalse: [ ^self ].		[		aGC translateBy: box origin.		aChild displayOn: aGC	] ensure: [		aGC translation: translation; clippingRectangle: clip	]</body><body package="Tools-Settings-Commands">displayDefaultMarkerOn: aGC	self isDefault ifFalse: [		| oldPaint b |		oldPaint := aGC paint.		b := self bounds.		aGC paint: (ColorValue red: 0 green: 127 blue: 0 range: 255).		aGC displayRectangle: (3 @ 1 corner: 5 @ (b bottom - 2)).		aGC paint: oldPaint	].</body><body package="Tools-Settings-Commands">displayOn: aGC	(self editorPanel column: self column) isExpanded ifTrue: [		self displayDefaultMarkerOn: aGC.		super displayOn: aGC.	]</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingPanel</class-id> <category>bounds accessing</category><body package="Tools-Settings-Commands">preferredExtent	| extent |	extent := super preferredExtent.	commandPanel ifNotNil: [		extent := (self editorPanel column: self column) width @ (extent y + 5)	].	^extent</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingPanel</class-id> <category>event driven</category><body package="Tools-Settings-Commands">childAtGlobalPoint: point		| local |	local := self globalPointToLocal: point.	self children do: [ :each |		| f |		f := each frame.		(f top &lt;= local y) &amp; (f bottom &gt;= local y) ifTrue: [ ^each ]	].	^nil</body><body package="Tools-Settings-Commands">didResignActiveBindingPanel	(self children size &gt; 1 and: [ self children last graphic keystroke isNil ]) ifTrue: [		self remove: self children last.		commandPanel relayout.		self invalidateNow.	]</body><body package="Tools-Settings-Commands">showContextMenuForMouseEvent: event	| menuView result target |	self editorPanel activeBindingLabel ifNotNil: [		self editorPanel activeBindingLabel: nil.		^self.	].	menuView := MenuView model: BindingPanel keystrokeMenu.	self isDefault ifFalse: [		(menuView menu menuItemWithValue: #actionResetToDefault:) enable.	].	self isEmpty ifFalse: [		(menuView menu menuItemWithValue: #actionReplaceKeystroke:) enable.		(menuView menu menuItemWithValue: #actionRemoveKeystroke:) enable.	].	result := menuView openFromView: self event: event.	target := self childAtGlobalPoint: event point.	result value ifNotNil: [ :selector | self perform: selector with: target ]</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingPanel</class-id> <category>initialize-release</category><body package="Tools-Settings-Commands">createTooltip	^self editorPanel activeBindingLabel ifNotNil: [ :x | 		x container == self			ifTrue: [ 'Waiting for a key press for this command - click to cancel' ]			ifFalse: [ 'Waiting for a key press - click to cancel' ]	] ifNil: [		self isDefault			ifTrue: [ 'Click to edit this keystroke' ]			ifFalse: [ '(Overridden) Click to edit this keystroke' ]	]</body><body package="Tools-Settings-Commands">initialize	super initialize.	self tooltip: [ self createTooltip   ].	^self.</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingPanel</class-id> <category>uilayout</category><body package="Tools-Settings-Commands">layoutChildren: children inFrame: frame	| ab y w |	ab := children collect: #preferredBounds.	w := self bounds width - 10.	y := 5.	commandPanel ifNotNil: [		ab do:  [ :b |			b moveBy: ((w - b width) / 2 + 5) @ y.			y := y + b height		]	].	^ab</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingPanel class</class-id> <category>instance creation</category><body package="Tools-Settings-Commands">commandPanel: commandPanel platform: platform keystrokes: keystrokes	| panel |	panel := self new platform: platform; commandPanel: commandPanel; keystrokes: keystrokes; yourself.	commandPanel add: panel.	^panel</body><body package="Tools-Settings-Commands">dummyLabel	^'Shift+Alt+Ctrl+Meta+PageDown'</body><body package="Tools-Settings-Commands">dummyOSXLabel	^Screen default isMacOSX		ifTrue: [ 'ââ¥â§âF99' ]		ifFalse: [ 'Cmd+Alt+Shift+Ctrl+PageDown' ]</body></methods><methods><class-id>Tools.CommandBindingsEditor.Column</class-id> <category>accessing</category><body package="Tools-Settings-Commands">center	^(right + left) // 2</body><body package="Tools-Settings-Commands">isExpanded	^isExpanded</body><body package="Tools-Settings-Commands">isExpanded: aBoolean	isExpanded := aBoolean</body><body package="Tools-Settings-Commands">left	^left</body><body package="Tools-Settings-Commands">left: anObject	left := anObject</body><body package="Tools-Settings-Commands">right	^right</body><body package="Tools-Settings-Commands">right: anObject	right := anObject</body><body package="Tools-Settings-Commands">width	^right - left + 1</body><body package="Tools-Settings-Commands">width: w	right := left + w - 1</body><body package="Tools-Settings-Commands">widthAtLeast: w	self width: (self width max: w)</body></methods><methods><class-id>Tools.CommandBindingsEditor.Column</class-id> <category>initialize-release</category><body package="Tools-Settings-Commands">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	isExpanded := true.	left := 0.	right := -1.	^self</body></methods><methods><class-id>Tools.CommandBindingsEditor.Column class</class-id> <category>instance creation</category><body package="Tools-Settings-Commands">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingEditor</class-id> <category>interface closing</category><body package="Tools-Settings-Commands">requestForWindowClose	hasChanges ifTrue: [		| result |		result := SimpleDialog new			choose: 'There are unapplied changes. Close anyway?'			labels: (Array with: 'Yes' with: 'No')			values: #(#yes #no)			default: #no			for: builder window.		result == #no ifTrue: [ ^false ].	].	^super requestForWindowClose.</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingEditor</class-id> <category>initialize-release</category><body package="Tools-Settings-Commands">initialize	"Initialize a newly created instance. This method must answer the receiver.	 Don't set the commandRegistry until basic initialization is complete."	super initialize.	commandRegistryList := self availableCommandRegistryList asValue.	hasChanges := false.	^self</body><body package="Tools-Settings-Commands">onRegistry: aCommandRegistry	"Set up the RegistryList combo with the appropriate current selected value."	(aCommandRegistry == nil or: [		(CommandRegistry withAllSubclasses includes: aCommandRegistry class) not ])		ifTrue: [ 			self registrySelectionHolder value: ''. 			commandRegistry := NullCommandRegistry new ]		ifFalse: [ 			self registrySelectionHolder value: aCommandRegistry class name. 			commandRegistry := aCommandRegistry ].	editorPanel := EditorPanel onRegistry: commandRegistry.	headerPanel := ColumnHeaderPanel editorPanel: editorPanel.</body><body package="Tools-Settings-Commands">release	self registrySelectionHolder retractInterestsFor: self.	super release</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingEditor</class-id> <category>actions</category><body package="Tools-Settings-Commands">actionApply	 (builder componentAt: #EditorPanel) component component component actionApply</body><body package="Tools-Settings-Commands">actionHTML	 self generateHTMLToFile ifNotNil: [ :filename | ExternalWebBrowser open: filename asString ]</body><body package="Tools-Settings-Commands">actionLoad	 (builder componentAt: #EditorPanel) component component component actionLoad</body><body package="Tools-Settings-Commands">actionSave	 (builder componentAt: #EditorPanel) component component component actionSave</body><body package="Tools-Settings-Commands">generateHTMLToFile	| filename |	commandRegistry isEmpty ifTrue: [ ^nil ].	filename := self temporaryFilenameWithPrefix: 'VisualWorks-KeyBindings' suffix: '.html'.	filename ifNotNil: [ commandRegistry writeHTMLCheatSheetToFilename: filename ].	^filename</body><body package="Tools-Settings-Commands">temporaryFilenameWithPrefix: prefix suffix: suffix	"TODO: replace this with a core supported temporary filename facility"	"I copied this from WebVelocity. SUnit tools does something similar"	| dirname filename |	"Presume this is ok for all unices"	dirname := '/tmp'.	(OSHandle isMSWindows)		ifTrue: [ dirname := SystemUtils getEnvironmentVariable: 'TEMP' ifAbsent: [ SystemUtils getEnvironmentVariable: 'TMP' ifAbsent: [ 'c:\temp\' ] ] ].	(OSHandle isMacOSX)		ifTrue: [ dirname := SystemUtils getEnvironmentVariable: 'TMPDIR' ifAbsent: [ '/tmp' ] ].	dirname := dirname asFilename.	(dirname definitelyExists and: [ dirname isDirectory ])		ifFalse: [ ^nil ].	filename := dirname / (prefix , '-' , Time microsecondClock printString , '-' , suffix).	^filename asAbsoluteFilename</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingEditor</class-id> <category>interface opening</category><body package="Tools-Settings-Commands">postBuildWith: aBuilder 	| ed |	(ed := aBuilder componentAt: #EditorPanel) == nil ifFalse: [		ed component component scrollerComponent scrollOffsetHolder grid: 24 @ 24.		self enableActionButtons ]</body><body package="Tools-Settings-Commands">postOpenWith: aBuilder 	self registrySelectionHolder onChangeSend: #changedRegistrySelection to: self.	self fitToContents.</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingEditor</class-id> <category>accessing</category><body package="Tools-Settings-Commands">commandRegistry	commandRegistry == nil ifTrue: [		commandRegistry := NullCommandRegistry new ].	^commandRegistry</body><body package="Tools-Settings-Commands">hasChanges	^hasChanges</body><body package="Tools-Settings-Commands">hasChanges: aBoolean	hasChanges := aBoolean.	(builder componentAt: #ApplyButton) component component isEnabled: aBoolean.</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingEditor</class-id> <category>resources</category><body package="Tools-Settings-Commands">editorPanel	editorPanel == nil ifTrue: [		editorPanel := EditorPanel onRegistry: self commandRegistry ].	^editorPanel</body><body package="Tools-Settings-Commands">headerPanel	headerPanel == nil ifTrue: [		headerPanel := ColumnHeaderPanel editorPanel: self editorPanel ].	^headerPanel</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingEditor</class-id> <category>private</category><body package="Tools-Settings-Commands">availableCommandRegistryList	^CommandRegistry withAllSubclasses collect: #name</body><body package="Tools-Settings-Commands">enableActionButtons	| enablement |	enablement := commandRegistry isEmpty not.	(builder componentAt: #SaveButton) component component isEnabled: enablement; invalidate.	(builder componentAt: #LoadButton) component component isEnabled: enablement; invalidate.	(builder componentAt: #HTMLButton) component component isEnabled: enablement; invalidate.</body><body package="Tools-Settings-Commands">fitToContents	| width extent |	extent := (self widgetAt: #RegistryList) preferredExtent.	editorPanel adjustColumn: 1 widthAtLeast: extent x.	width := editorPanel preferredWidth asInteger max: editorPanel basicWidth.	builder window minimumSize: width @ 400.	builder window maximumSize: width @ 2000.	builder window isMapped		ifTrue: 			[| db |			builder window				minimumWidth: width				height: 400				maximumWidth: width				height: 2000.			db := builder window displayBox.			db width: width.			builder window displayBox: db]</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingEditor</class-id> <category>aspects</category><body package="Tools-Settings-Commands">commandRegistryList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^commandRegistryList isNil		ifTrue:			[commandRegistryList := List new asValue]		ifFalse:			[commandRegistryList]</body><body package="Tools-Settings-Commands">registrySelectionHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^registrySelectionHolder isNil		ifTrue:			[registrySelectionHolder := String new asValue]		ifFalse:			[registrySelectionHolder]</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingEditor</class-id> <category>changing</category><body package="Tools-Settings-Commands">changedRegistrySelection	| currentRegistry registryName registryClass |	currentRegistry := commandRegistry class name.	Cursor wait showWhile: [		registryName := self registrySelectionHolder value.		registryName = commandRegistry class name ifTrue: [ ^self ].		registryName isEmpty 			ifTrue: [ commandRegistry := NullCommandRegistry new ]			ifFalse: [				registryClass := registryName asQualifiedReference bindingOrNil value.				registryClass == nil					ifTrue: [ self registrySelectionHolder value: commandRegistry class name ]					ifFalse: [ commandRegistry := registryClass perform: #instance ] ].		currentRegistry = commandRegistry class name ifFalse: [			editorPanel onRegistry: commandRegistry.			self enableActionButtons ] ].	self hasChanges: false.</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingEditor class</class-id> <category>interface opening</category><body package="Tools-Settings-Commands">open	"Override to use the currently-open editor, if one exists."	^self raiseSingleInstance ifNil: [self openWithRegistry: CommandRegistry instance]</body><body package="Tools-Settings-Commands">openWithRegistry: aCommandRegistry	^self openOn: (super new onRegistry: aCommandRegistry)</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingLabel</class-id> <category>accessing</category><body package="Tools-Settings-Commands">bindingPanel	^bindingPanel</body><body package="Tools-Settings-Commands">bindingPanel: anObject	bindingPanel := anObject</body><body package="Tools-Settings-Commands">editorPanel	^bindingPanel editorPanel</body><body package="Tools-Settings-Commands">isWaitingForKey	^self editorPanel activeBindingLabel		ifNil: [ false ]		ifNotNil: [ :x | x graphic == self ]</body><body package="Tools-Settings-Commands">keystroke	^keystroke</body><body package="Tools-Settings-Commands">keystroke: anObject	keystroke := anObject.	self text: (keystroke		ifNil: [ ' ' ]		ifNotNil: [			(bindingPanel platform == #isMacOSX and: [ Screen default isMacOSX ])				ifTrue: [ keystroke asStringForOSX ]				ifFalse: [ keystroke asStringForWindows ]		]	)</body><body package="Tools-Settings-Commands">setKeystrokeByUser: aKeystroke	self keystroke: aKeystroke.	self editorPanel hasChanges: true.	bindingPanel relayout.	bindingPanel invalidateNow.</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingLabel</class-id> <category>displaying</category><body package="Tools-Settings-Commands">displayOn: aGC	self isWaitingForKey ifTrue: [		| r img container |		container := self editorPanel activeBindingLabel.		r := container bounds.			r top: r top - 2.		r bottom: r bottom + 2.		r left: 4 - container frame left.		r right: bindingPanel bounds width - container frame left - 4.		img := self editorPanel animationPhase &lt; 0.5			ifTrue: [ EditorAssets Keys ]			ifFalse: [ EditorAssets Keys_HL ].		img displayOn: aGC at: (r center - (img extent / 2)).		^self.	].	super displayOn: aGC.</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingLabel</class-id> <category>initialize-release</category><body package="Tools-Settings-Commands">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	keystroke := nil.	self textStyle: self currentSkin defaultTextStyle.	^self</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingLabel class</class-id> <category>instance creation</category><body package="Tools-Settings-Commands">bindingPanel: aBindingPanel keystroke: aKeystroke		^self new bindingPanel: aBindingPanel; keystroke: aKeystroke; yourself</body></methods><methods><class-id>Tools.CommandBindingsEditor.CategoryPanel</class-id> <category>private</category><body package="Tools-Settings-Commands">isExpanded	^(self children at: 1) idleGraphic ~= EditorAssets Disclosure_Closed_Normal</body><body package="Tools-Settings-Commands">makeDisclosureControl	| inst |	inst := ClickableGraphic new.	inst idleGraphic: EditorAssets Disclosure_Closed_Normal.	inst mouseDownGraphic: EditorAssets Disclosure_Open_Normal.	inst when: Clicked do: [		self editorPanel activeBindingLabel: nil.		inst idleGraphic: (			inst idleGraphic == EditorAssets Disclosure_Closed_Normal				ifTrue: [ EditorAssets Disclosure_Open_Normal ]				ifFalse: [ EditorAssets Disclosure_Closed_Normal ]		).		"Adjust column widths as new nested panels are exposed."		self updateColumnWidths.		self relayout.		self topComponent model fitToContents.		self editorPanel invalidateNow.	].	inst id: #disclosure.	^inst</body></methods><methods><class-id>Tools.CommandBindingsEditor.CategoryPanel</class-id> <category>initialize-release</category><body package="Tools-Settings-Commands">initialize	super initialize.	level := 0.	self add: self makeDisclosureControl.	^self</body></methods><methods><class-id>Tools.CommandBindingsEditor.CategoryPanel</class-id> <category>accessing</category><body package="Tools-Settings-Commands">category	^category</body><body package="Tools-Settings-Commands">category: anObject	| label |	category := anObject.	label := Label with: category asText allBold.	label textStyle: self currentSkin defaultTextStyle.	self add: (label asVisualPart id: #category; yourself)</body><body package="Tools-Settings-Commands">categoryPanels	^(self children allButFirst: 2) select: #isCategoryPanel</body><body package="Tools-Settings-Commands">commandPanels	^(self children allButFirst: 2) select: #isCommandPanel</body><body package="Tools-Settings-Commands">commands: commands	commands keys asSortedCollection do: [ :id | CommandPanel categoryPanel: self commandId: id command: (commands at: id) ]</body><body package="Tools-Settings-Commands">editorPanel	^parentPanel ifNotNil: [ :parent | parent isEditorPanel ifTrue: [ parent ] ifFalse: [ parent editorPanel ] ]</body><body package="Tools-Settings-Commands">level	^level</body><body package="Tools-Settings-Commands">level: anObject	level := anObject</body><body package="Tools-Settings-Commands">overrides	"Collect overrides from all CommandPanels and all nested CategoryPanels."	| overrides |	overrides := IdentityDictionary new.	self commandPanels do: [ :commandPanel |		| bindings |		bindings := IdentityDictionary new.		commandPanel bindingPanels do: [ :bindingPanel |			bindingPanel isDefault ifFalse: [ bindings at: bindingPanel platform put: bindingPanel keystrokes ]		].		bindings isEmpty ifFalse: [ overrides at: commandPanel commandId put: bindings ]	].	self categoryPanels do: [ :categoryPanel |		overrides addAll: categoryPanel overrides	].	^overrides</body><body package="Tools-Settings-Commands">overrides: overrides	"Install overrides for CommandPanels and all nested CategoryPanels."	self commandPanels do: [ :commandPanel |		| bindings |		bindings := overrides at: commandPanel commandId ifAbsent: [ IdentityDictionary new ].		commandPanel bindingPanels do: [ :bindingPanel |			| platform keystrokes |			platform := bindingPanel platform.			keystrokes := bindings at: platform ifAbsent: [ commandPanel command ifNotNil: [:cmd | cmd keystrokes at: platform ifAbsent: [ nil ] ] ].			bindingPanel keystrokes: keystrokes.		].		self categoryPanels do: [ :categoryPanel | categoryPanel overrides: overrides ].	]</body><body package="Tools-Settings-Commands">parentPanel	^parentPanel</body><body package="Tools-Settings-Commands">parentPanel: anObject	parentPanel := anObject</body></methods><methods><class-id>Tools.CommandBindingsEditor.CategoryPanel</class-id> <category>bounds accessing</category><body package="Tools-Settings-Commands">preferredExtent	| extent |	extent := super preferredExtent.	self editorPanel ifNotNil: [		extent := (self editorPanel column: 5) right @ extent y.	].	^extent</body></methods><methods><class-id>Tools.CommandBindingsEditor.CategoryPanel</class-id> <category>uilayout</category><body package="Tools-Settings-Commands">labelColumnPreferredWidth	^self nestedIndentation + (self children at: 2) preferredWidth + 30</body><body package="Tools-Settings-Commands">labelIndentation	^(self children at: 1) preferredWidth + 5</body><body package="Tools-Settings-Commands">layoutChildren: children inFrame: frame	| ab headerHeight |	ab := children collect: #preferredBounds.	parentPanel ifNotNil: [		headerHeight := (ab first: 2) inject: 0 into: [ :h :b | h max: b height ].		"Vertical Centering"		(ab first: 2) do: [ :b | b moveBy: 0 @ ((headerHeight - b height) / 2 + 5) ].		"Disclosure (item 1) + Label (item 2) + separator"		(ab at: 2) moveBy: ((ab at: 1) right + 5) @ 0.		"CommandPanels and nested CategoryPanels"		self isExpanded ifTrue: [			| y |			y := headerHeight + 10.			3 to: ab size do: [ :index |				| inset |				"Inset nested CategoryPanel to create the next level,				 and compensate for any label column width adjustments."				inset := Point zero.				(children at: index) isCategoryPanel ifTrue: [					inset := self labelIndentation @ 5.					(ab at: index) width: ((ab at: index) width - self labelIndentation) ].				level &gt; 0 ifTrue: [ 					(ab at: index) width: ((ab at: index) width - self nestedIndentation) ].				(ab at: index) moveBy: ((0 @ y) + inset).				y := y + (ab at: index) height.			].		] ifFalse: [			3 to: ab size do: [ :index | 				(ab at: index) top: -9999; bottom: -9999			]		]	].	^ab</body><body package="Tools-Settings-Commands">nestedIndentation	level = 0 ifTrue: [ ^0 ].	^self parentPanel nestedIndentation + self labelIndentation.</body><body package="Tools-Settings-Commands">updateColumnWidths	self editorPanel adjustColumn: 1 widthAtLeast: self labelColumnPreferredWidth.	self isExpanded ifFalse: [ ^self ].	self commandPanels do: #updateColumnWidths.	self categoryPanels do: #updateColumnWidths.</body></methods><methods><class-id>Tools.CommandBindingsEditor.CategoryPanel</class-id> <category>testing</category><body package="Tools-Settings-Commands">isCategoryPanel	^true</body></methods><methods><class-id>Tools.CommandBindingsEditor.CategoryPanel class</class-id> <category>instance creation</category><body package="Tools-Settings-Commands">parentPanel: parentPanel fromGroup: commandsGroup	| panel category |	category := commandsGroup group labelDisplayString.	panel := (self new) category: category; parentPanel: parentPanel; yourself.	panel commands: commandsGroup commands.	parentPanel isEditorPanel ifFalse: [panel level: parentPanel level + 1].	(commandsGroup subgroups) do: [ :each |		self parentPanel: panel fromGroup: each ].	parentPanel add: panel.	^panel</body></methods><methods><class-id>Tools.CommandBindingsEditor.ColumnHeaderPanel</class-id> <category>accessing</category><body package="Tools-Settings-Commands">editorPanel	^editorPanel</body><body package="Tools-Settings-Commands">editorPanel: anObject	editorPanel := anObject</body></methods><methods><class-id>Tools.CommandBindingsEditor.ColumnHeaderPanel</class-id> <category>private</category><body package="Tools-Settings-Commands">makeColumnControl	| inst |	inst := ClickableGraphic new.	inst idleGraphic: EditorAssets Popup_Normal.	inst mouseOverGraphic: EditorAssets Popup_HL.	inst when: Clicked do: [		| menuView |		menuView := MenuView model: self class columnHeaderMenu.		2 to: 4 do: [ :each | (menuView menu menuItemWithValue: each) indication: (editorPanel column: each) isExpanded ].		(menuView openFromView: self) ifNotNil: [ :menuItem | editorPanel toggleColumn: menuItem value. self relayout. self invalidateNow. ].	].	inst id: #columnControl.	^inst</body></methods><methods><class-id>Tools.CommandBindingsEditor.ColumnHeaderPanel</class-id> <category>displaying</category><body package="Tools-Settings-Commands">displayOn: aGC	| bounds |	bounds := self bounds.	aGC paint: (ColorValue brightness: 15 / 16).	aGC displayRectangle: bounds.	aGC paint: ColorValue black.	super displayOn: aGC.	aGC paint: (ColorValue brightness: 13 / 16).	aGC displayLineFrom: bounds left @ (bounds bottom - 1) to: bounds right @( bounds bottom - 1)</body></methods><methods><class-id>Tools.CommandBindingsEditor.ColumnHeaderPanel</class-id> <category>initialize-release</category><body package="Tools-Settings-Commands">initialize	| style |	super initialize.	style := self currentSkin defaultTextStyle.	columnLabels := Array		with: ((Label with: 'OS X') textStyle: style; asVisualPart)		with: ((Label with: 'Windows') textStyle: style; asVisualPart)		with: ((Label with: 'X11') textStyle: style; asVisualPart).	self addAll: columnLabels.	self add: self makeColumnControl.	^self</body></methods><methods><class-id>Tools.CommandBindingsEditor.ColumnHeaderPanel</class-id> <category>uilayout</category><body package="Tools-Settings-Commands">layoutChildren: children inFrame: frame	| ab headerHeight toggleFrame |	ab := children collect: #preferredBounds.	editorPanel ifNotNil: [		headerHeight := ab inject: 0 into: [ :h :b | h max: b height ].		"Vertical Centering and offset to account for subpanel structure under the editor panel"		ab do: [ :b | b moveBy: 10 @ ((headerHeight - b height) / 2 + 5) ].		"Set the outer bounds for the labelled columns"		(ab at: 4) moveBy: (editorPanel column: 5) left @ 0.		"Center each column label"		1 to: 3 do: [ :index | 			| c |			c := editorPanel column: index + 1.			c isExpanded				ifTrue: [ (ab at: index) moveBy: (c center - ((ab at: index) width / 2)) @ 0 ]				ifFalse: [ (ab at: index) top: -9999; bottom: -9999 ]		].		"Center the toggle graphic"		toggleFrame := ab at: 4.		toggleFrame moveBy: (((editorPanel column: 5) width - (toggleFrame width)) / 2) @ 0.	].	^ab</body></methods><methods><class-id>Tools.CommandBindingsEditor.ColumnHeaderPanel class</class-id> <category>instance creation</category><body package="Tools-Settings-Commands">editorPanel: editorPanel	^self new editorPanel: editorPanel; yourself.</body></methods><methods><class-id>Tools.CommandBindingsEditor.EditorPanel</class-id> <category>actions</category><body package="Tools-Settings-Commands">actionApply	commandRegistry overrides: self overrides.	self hasChanges: false.</body><body package="Tools-Settings-Commands">actionLoad	| filenameString |	filenameString := Dialog		requestFileName: #LoadCommandKeyBindingsFromFileNamed &lt;&lt; #labels &gt;&gt; 'Load Key Bindings XML from file named:'		default: 'VisualWorksKeyBindings.xml'		version: #mustBeOld.	filenameString isEmpty ifTrue: [ ^self ].	self overrides: (CommandRegistry readOverridesFromFilename: filenameString)</body><body package="Tools-Settings-Commands">actionSave	| filenameString |	filenameString := Dialog		requestFileName: #SaveCommandKeyBindingsToFileNamed &lt;&lt; #labels &gt;&gt; 'Save Key Bindings XML to file named:'		default: 'VisualWorksKeyBindings.xml'.	filenameString isEmpty ifTrue: [ ^self ].	CommandRegistry writeOverrides: self overrides toFilename: filenameString.</body></methods><methods><class-id>Tools.CommandBindingsEditor.EditorPanel</class-id> <category>accessing</category><body package="Tools-Settings-Commands">activeBindingLabel	^activeBindingLabel</body><body package="Tools-Settings-Commands">activeBindingLabel: aBindingLabel	aBindingLabel == activeBindingLabel ifTrue: [ ^self ].	activeBindingLabel ifNotNil: [		| bindingPanel |		bindingPanel := activeBindingLabel graphic bindingPanel.		animator stop.		activeBindingLabel := nil.		bindingPanel invalidateNow.		InputState default captureNextKey: nil.		bindingPanel didResignActiveBindingPanel.	].	activeBindingLabel := aBindingLabel.	activeBindingLabel ifNotNil: [		| abl |		"Bind this locally otherwise we continue to reference the ivar"		abl := activeBindingLabel.		animationPhase := 0.		animator := self animate: [ :v |			animationPhase := v.			abl graphic bindingPanel invalidateNow.		 ] duration: 1 seconds framesPerSecond: 2.		InputState default captureNextKey: [ :event |			animator stop.			abl graphic setKeystrokeByUser: event asKeystroke.			self activeBindingLabel: nil.		].	].</body><body package="Tools-Settings-Commands">adjustColumn: index widthAtLeast: value	| col expanded |	col := columns at: index.	col widthAtLeast: value.	expanded := col.	index + 1 to: columns size do: [ :i2 |		| next x |		x := expanded right  + 1.		next := columns at: i2.		next right: x + next width - 1.		next left: x.		next isExpanded ifTrue: [ expanded := next ].	]</body><body package="Tools-Settings-Commands">animationPhase	^animationPhase</body><body package="Tools-Settings-Commands">categoryPanels	^self children</body><body package="Tools-Settings-Commands">column: index	^columns at: index</body><body package="Tools-Settings-Commands">columns	^columns</body><body package="Tools-Settings-Commands">commandRegistry	^commandRegistry</body><body package="Tools-Settings-Commands">hasChanges: aBoolean	self topComponent ifNotNil: [ : tc | tc model hasChanges: aBoolean ].</body><body package="Tools-Settings-Commands">overrides	| overrides |	overrides := IdentityDictionary new.	self categoryPanels do: [ :categoryPanel |		overrides addAll: categoryPanel overrides	].	^overrides</body><body package="Tools-Settings-Commands">overrides: overrides	self categoryPanels do: [ :categoryPanel |		categoryPanel overrides: overrides	].	self hasChanges: true.	self relayout.	self invalidateNow.</body><body package="Tools-Settings-Commands">toggleColumn: index	| c |	c := columns at: index.	c isExpanded: c isExpanded not.	1 to: 4 do: [ :i | (self column: i) width: 0 ].	self updateColumnWidths.	self relayout.	self topComponent model fitToContents.	self invalidateNow.</body></methods><methods><class-id>Tools.CommandBindingsEditor.EditorPanel</class-id> <category>initialize-release</category><body package="Tools-Settings-Commands">createPanelStructure	commandRegistry commandsByGroup do: [ :commandsGroup |		CategoryPanel parentPanel: self fromGroup: commandsGroup.	]</body><body package="Tools-Settings-Commands">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	columns := OrderedCollection new.	1 to: 5 do: [ :i | columns add: Column new ].	(columns at: 2) isExpanded: Screen default isMacOSX.	(columns at: 3) isExpanded: Screen default isMSWindows.	(columns at: 4) isExpanded: Screen default isX11.	self hasChanges: false.	^self</body><body package="Tools-Settings-Commands">onRegistry: aCommandRegistry	commandRegistry := aCommandRegistry.	self components removeAll.	self createPanelStructure.	self setOverrides.</body><body package="Tools-Settings-Commands">setOverrides	self overrides: commandRegistry overrides.</body></methods><methods><class-id>Tools.CommandBindingsEditor.EditorPanel</class-id> <category>displaying</category><body package="Tools-Settings-Commands">displayOn: aGC	| bounds |	super displayOn: aGC.	aGC paint: (ColorValue brightness: 13 / 16).	bounds := self bounds.	((columns allButFirst: 1) select: #isExpanded) do: [ :column |		| left |		left := column left + 10.		aGC displayLineFrom: left @ bounds top to: left @ bounds bottom.			].</body></methods><methods><class-id>Tools.CommandBindingsEditor.EditorPanel</class-id> <category>bounds accessing</category><body package="Tools-Settings-Commands">preferredExtent	| extent |	extent := super preferredExtent.	extent x: (extent x max: ((self columns collect: #width) inject: 0 into: [ :a :b | a + b ])).	^extent + 30</body></methods><methods><class-id>Tools.CommandBindingsEditor.EditorPanel</class-id> <category>uilayout</category><body package="Tools-Settings-Commands">basicWidth	"This is the basic minimum width for the EditorPanel UI."	^335</body><body package="Tools-Settings-Commands">layoutChildren: children inFrame: frame	| top |	self updateColumnWidths.	top := frame top + 5.	^self categoryPanels collect: 			[:child |			| bounds |			bounds := (frame left + 10) @ top extent: child preferredExtent.			top := top + bounds height + 5.			bounds]</body><body package="Tools-Settings-Commands">updateColumnWidths	"Reset basic UI width after toggling binding column exposure, which sets column width back to zero."	(self column: 1) width == 0 ifTrue: [		| part bindingWidth osxBindingWidth bindingColumnsWidth |		part := BindingPanel dummyLabel asVisualPart.		bindingWidth := part preferredWidth.		part := BindingPanel dummyOSXLabel asVisualPart.		osxBindingWidth := part preferredWidth.		bindingColumnsWidth := 0.		(self column: 2) isExpanded ifTrue: [ 			self adjustColumn: 2 widthAtLeast: osxBindingWidth + 10.			bindingColumnsWidth := bindingColumnsWidth + ((self column: 2) width) ].		3 to: 4 do: [ :i | 			(self column: i) isExpanded ifTrue: [ 				self adjustColumn: i widthAtLeast: bindingWidth + 10.				bindingColumnsWidth := bindingColumnsWidth + ((self column: i) width) ] ].		self adjustColumn: 1 widthAtLeast: (self basicWidth - bindingColumnsWidth).			(self column: 5) width: EditorAssets Popup_Normal width + 20.	].	self categoryPanels do: #updateColumnWidths.</body></methods><methods><class-id>Tools.CommandBindingsEditor.EditorPanel</class-id> <category>testing</category><body package="Tools-Settings-Commands">isEditorPanel	^true</body></methods><methods><class-id>Tools.CommandBindingsEditor.EditorPanel class</class-id> <category>instance creation</category><body package="Tools-Settings-Commands">onRegistry: aCommandRegistry	^super new onRegistry: aCommandRegistry.</body></methods><methods><class-id>Tools.CommandBindingsEditor.EditorAssets class</class-id> <category>png imports</category><body package="Tools-Settings-Commands">Disclosure_Closed_Normal	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'Disclosure_Closed_Normal.png'&gt;	&lt;md5sum: #[227 118 13 79 133 47 230 184 4 241 133 179 241 93 91 93]&gt;	^[AlphaCompositedImage image: ((Image extent: 10@10 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C????BYFQ$26Q$YBU$YFP@YFQ$@FQ$Y@A$YFP@YFQ$@O???0C???&lt;@????2VQ$YO=$YFS/YFQ$R&amp;Q$Y@A$YFP@YFQ$@FQ$Y@C???&lt;@????@O???01$YFR-YFQ$?6Q$YO5$YFQ;YFQ$@VQ$Y@A$YFP@????@O???0C???&lt;@YFQ$@VQ$YG-$YFS=YFQ$?6Q$YJ5$YFPLYFQ$@O???0C???&lt;@????@FQ$Y@A$YFP@YFQ$R&amp;Q$YN=$YFS?YFQ$2&amp;Q$Y@C???&lt;@????@O???0A$YFP@YFQ$@FQ$YD%$YFS/YFQ$?6Q$YL)$YFP@????@O???0C???&lt;@YFQ$@VQ$YG)$YFS=YFQ$?6Q$YJ5$YFPLYFQ$@O???0C???&lt;@????CFQ$YJ5$YFS?YFQ$?VQ$YG-$YFPAYFQ$@FQ$Y@C???&lt;@????@O???&lt;%$YFS?YFQ$;6Q$YD)$YFP@YFQ$@FQ$Y@A$YFP@????@O???0C???&gt;?YFQ$26Q$YBU$YFP@YFQ$@FQ$Y@A$YFP@YFQ$@O???0@a')))] once</body><body package="Tools-Settings-Commands">Disclosure_Open_Normal	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'Disclosure_Open_Normal.png'&gt;	&lt;md5sum: #[248 220 218 199 249 70 59 111 90 37 65 153 147 44 228 173]&gt;	^[AlphaCompositedImage image: ((Image extent: 10@10 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&gt;?YFQ$2FQ$Y@1$YFP@YFQ$@FQ$Y@A$YFP@YFQ$CFQ$YL!$YFS@YFQ$26Q$YO=$YFR,YFQ$@VQ$Y@A$YFP@YFQ$@VQ$YJ1$YFS?YFQ$36Q$YBU$YFS0YFQ$?6Q$YG-$YFP@YFQ$@FQ$YG-$YFS?YFQ$&lt;FQ$YBQ$YFP@YFQ$R&amp;Q$YO1$YFS&lt;YFQ$RVQ$YD%$YFS&lt;YFQ$?FQ$YD)$YFP@YFQ$@FQ$Y@A$YFQ=YFQ$?6Q$YOA$YFS0YFQ$?6Q$YG1$YFP@YFQ$@FQ$Y@A$YFP@YFQ$@VQ$YJ5$YFS?YFQ$?6Q$YJ1$YFPAYFQ$@FQ$Y@A$YFP@YFQ$@FQ$Y@A$YFPMYFQ$2VQ$YL%$YFPMYFQ$@FQ$Y@A$YFP@YFQ$@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0@a')))] once</body><body package="Tools-Settings-Commands">Keys	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'Keys.png'&gt;	&lt;md5sum: #[223 97 24 222 72 182 193 158 21 95 147 227 234 69 5 202]&gt;	^[AlphaCompositedImage image: ((Image extent: 47@15 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C????? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ @C???&lt;@ HB@@O???0C???&lt;@?????8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ H@@????@HB@ @C???&lt;@????@O????&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@@O???0B@ H@@?????8B@ O?5=_W?=_W5??W5=_?5=_W?=_W5??W5=_?5=_W?=_W5??W5=_?5=_W?=_W5?71&lt;_@C???&lt;@????@O????&gt;@ HC?=_W5??W5=_?5=_W?=_W5??W5=_?5=_W?=_W5??W5=_?5=_W?=_W5??W5=_=&lt;_G0@????@O???0C????? HB@??W5=_?5=_W?=_W5??W5=_?5=_W?=_W5??W5=_?5=_W?=_W5??W5=_?5=_W?_G1&lt;@O????&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ @C????? HB@??W5=_?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ H@@?????8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@?8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/?&amp;9.[?''):^?0@@@O?I2\''?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@@O????&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?-KR4?3X6M/&lt;6M#[?@@@@?:&amp;)*_?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ @C????? HB@??W5=_?&amp;9.[?9.[&amp;?5-[V?&lt;@@@C?@@@@?3X6M/&gt;4-KS?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ HC? HB@??W5=_?&amp;9.[?9.[&amp;?&gt;[&amp;9/=JR$+?R$)J?7!8^O?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ H@@?????8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/=JR$+?-KR4?&gt;[&amp;9/?]7]7?/;&gt;??&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@@O????&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?V5-[?;&gt;?/??&amp;9.[?*Z&amp;)?18^G/?S4=O?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ O&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?4=OS?18^G/?I2\''?G!8^?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ @C????? HB@??W5=_?&amp;9.[?9.[&amp;?7!8^O&lt;6M#[?$)JR?;R4-O?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ H@@?????8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/=[V5/?/;&gt;??&gt;[&amp;9/?&amp;9.[?Z&amp;)*?:&amp;)*_?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@?8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/&gt;F!([?M#X6?9JR$/&lt;^G!;?-KR4?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@@O????&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?9.[&amp;?:&amp;)*_&gt;F!([?M#X6?7!8^O?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ @C????? HB@??W5=_?&amp;9.[?9.[&amp;?5-[V?&gt;?/;??9.[&amp;?&gt;[&amp;9/=*Z&amp;+?''):^?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ HC? HB@??W5=_?&amp;9.[?9.[&amp;?3X6M/&gt;F!([?$)JR?6)*Z/=*Z&amp;+?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ H@@?????8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/&gt;^'');?9.[&amp;?&gt;[&amp;9/&gt;^'');?V5-[?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@@O????&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?V5-[?;&gt;?/??&amp;9.[?/;&gt;??18^G/?S4=O?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ O&gt;@ HC?=_W5?&gt;[&amp;9/?I2\''?M#X6?&gt;[&amp;9/?&amp;9.[?4=OS?0@@@O?]7]7?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ @C????? HB@??W5=_?&amp;9.[?9.[&amp;?3X6M/&lt;^G!;?R$)J?18^G/&gt;4-KS?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ H@@?????8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/=[V5/?R$)J?0@@@O&lt;6M#[?*Z&amp;)?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@?8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@@O????&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?9.[&amp;?=7]7_?I2\''?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ @C????? HB@??W5=_?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ HC? HB@??W5=_?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ H@@?????8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@@O????&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ O&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ @C????? HB@??W5=_?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ H@@?????8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@?8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@@O????&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ @C????? HB@??W5=_?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ H@@?????8B@ O?L3L3?3L3L?&lt;3L3O?L3L3?3L3L?&lt;3L3O?L3L3?3L3L?&lt;3L3O?L3L3?3L3L?8FA PCL3L0@????@O????&gt;@ HC?3L3L?&lt;3L3O?L3L3?3L3L?&lt;3L3O?L3L3?3L3L?&lt;3L3O?L3L3?3L3L?&lt;3L3O&gt;A XD@3L3L@O???0C????? HB@?&lt;3L3O?L3L3?3L3L?&lt;3L3O?L3L3?3L3L?&lt;3L3O?L3L3?3L3L?&lt;3L3O?L3L3? XFA@L3L3@B@ H@@=_W5?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ H@@3L3L@L3L3@C???&lt;@ HB@@OW5=_&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@@L3L3@CL3L0@????@HB@ @C5=_W? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ @CL3L0@3L3L')))] once</body><body package="Tools-Settings-Commands">Keys_HL	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'Keys_HL.png'&gt;	&lt;md5sum: #[250 170 135 149 158 139 88 67 132 54 69 168 87 58 106 221]&gt;	^[AlphaCompositedImage image: ((Image extent: 47@15 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C????? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ @C???&lt;@ HB@@O???0C???&lt;@?????8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ H@@????@HB@ @C???&lt;@????@O????&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@@O???0B@ H@@?????8B@ O?5=_W?=_W5??W5=_?5=_W?=_W5??W5=_?5=_W?=_W5??W5=_?5=_W?=_W5?71&lt;_@C???&lt;@????@O????&gt;@ HC?-;^7?;^7-?&gt;7-;_?-;^7?;^7-?&gt;7-;_?-;^7?;^7-?&gt;7-;_?-;^7?;^7-?=&lt;_G0@????@O???0C????? HB@??W5=_?5=_W?=_W5??W5=_?5=_W?=_W5??W5=_?5=_W?=_W5??W5=_?5=_W?_G1&lt;@O????&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ @C????? HB@?;^7-??&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;??????&gt;@ H@@?????8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@?8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/?&amp;9.[?''):^?0@@@O?I2\''?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@@O????&gt;@ HC?-;^7?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[??????8B@ @C????? HB@??W5=_?&amp;9.[?9.[&amp;?5-[V?&lt;@@@C?@@@@?3X6M/&gt;4-KS?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ HC? HB@??W5=_?&amp;9.[?9.[&amp;?&gt;[&amp;9/=JR$+?R$)J?7!8^O?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ H@@?????8B@ O&gt;7-;_?9.[&amp;?&gt;[&amp;9/?&amp;9.[?8LV4?=Z@M/?V C[?5F8@?=&gt;&gt;*_?&amp;9.[?9.[&amp;?&gt;[&amp;9/?????? HB@@O????&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?V5-[?;&gt;?/??&amp;9.[?*Z&amp;)?18^G/?S4=O?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ O&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?4=OS?18^G/?I2\''?G!8^?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ @C????? HB@?;^7-??&amp;9.[?9.[&amp;?&gt;[&amp;9/?W"T+?8LV4?&gt;[&amp;9/?%8M7?8,2??&gt;[&amp;9/?&amp;9.[?9.[&amp;??????&gt;@ H@@?????8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/=[V5/?/;&gt;??&gt;[&amp;9/?&amp;9.[?Z&amp;)*?:&amp;)*_?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@?8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/&gt;F!([?M#X6?9JR$/&lt;^G!;?-KR4?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@@O????&gt;@ HC?-;^7?&gt;[&amp;9/?&amp;9.[?9.[&amp;?=.!^O?V C[?7[BR?&gt;CE-O?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[??????8B@ @C????? HB@??W5=_?&amp;9.[?9.[&amp;?5-[V?&gt;?/;??9.[&amp;?&gt;[&amp;9/=*Z&amp;+?''):^?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ HC? HB@??W5=_?&amp;9.[?9.[&amp;?3X6M/&gt;F!([?$)JR?6)*Z/=*Z&amp;+?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ H@@?????8B@ O&gt;7-;_?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?=&gt;&gt;*_?\*X[?5(@6?=.!^O?&amp;9.[?9.[&amp;?&gt;[&amp;9/?????? HB@@O????&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?V5-[?;&gt;?/??&amp;9.[?/;&gt;??18^G/?S4=O?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ O&gt;@ HC?=_W5?&gt;[&amp;9/?I2\''?M#X6?&gt;[&amp;9/?&amp;9.[?4=OS?0@@@O?]7]7?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ @C????? HB@?;^7-??&amp;9.[?9.[&amp;?&gt;[&amp;9/?^-9;?9.[&amp;?&gt;[&amp;9/?^-9;?6YE[?&gt;[&amp;9/?&amp;9.[?9.[&amp;??????&gt;@ H@@?????8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/=[V5/?R$)J?0@@@O&lt;6M#[?*Z&amp;)?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@?8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@@O????&gt;@ HC?-;^7?&gt;[&amp;9/?&amp;9.[?9.[&amp;?=Z@M/?U]1;?58%J?=U7G/? 1[S?9.[&amp;?&gt;[&amp;9/?&amp;9.[??????8B@ @C????? HB@??W5=_?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ HC? HB@??W5=_?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ H@@?????8B@ O&gt;7-;_?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;W 7_?#4&lt;''?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?????? HB@@O????&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ O&gt;@ HC?=_W5?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?3L3L?8B@ @C????? HB@?;^7-??&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;??????&gt;@ H@@?????8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@?8B@ O?5=_W?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?L3L3? HB@@O????&gt;@ HC?-;^7?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[??????8B@ @C????? HB@??W5=_?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&gt;[&amp;9/?&amp;9.[?9.[&amp;?&lt;3L3O&gt;@ H@@?????8B@ O?L3L3?3L3L?&lt;3L3O?L3L3?3L3L?&lt;3L3O?L3L3?3L3L?&lt;3L3O?L3L3?3L3L?8FA PCL3L0@????@O????&gt;@ HC???????????????????????????????????????????????????????????&gt;A XD@????@O???0C????? HB@?&lt;3L3O?L3L3?3L3L?&lt;3L3O?L3L3?3L3L?&lt;3L3O?L3L3?3L3L?&lt;3L3O?L3L3? XFA@L3L3@B@ H@@=_W5?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ H@@3L3L@L3L3@C???&lt;@ HB@@K^7-?&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@@O???0C???&lt;@????@HB@ @C5=_W? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ O&gt;@ HC? HB@?8B@ @CL3L0@3L3L')))] once</body><body package="Tools-Settings-Commands">Popup_HL	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'Popup_HL.png'&gt;	&lt;md5sum: #[105 76 141 219 46 195 62 23 68 100 69 236 124 14 96 47]&gt;	^[AlphaCompositedImage image: ((Image extent: 10@8 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???=+?78@]_=&gt;@@C???&lt;@????@O???0C???=5?78@Z?=&gt;@@C???&lt;@????!_=&gt;@O;?_ AP?78@@O???0C???=P?78@?/=&gt;@H[?_ @@????@O???0[?_ CJ?78@;/=&gt;@BC?_ @ ?78@;/=&gt;@L+?_ @F?78@@O???0C???&lt;@????HO=&gt;@N??_ CJ?78@2_=&gt;@N??_ @ ?78@@O???0C???&lt;@????@O???0C???=P?78@?/=&gt;@O;?_ AP?78@@O???0C???&lt;@????@O???0C???&lt;@????@O???7W?_ A6?78@@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;b')))] once</body><body package="Tools-Settings-Commands">Popup_Normal	"WARNING: This code was automatically generated during asset import. Regeneration will destroy any manual edits."	&lt;file: 'Popup_Normal.png'&gt;	&lt;md5sum: #[61 101 86 6 208 172 117 133 195 127 213 15 30 182 210 105]&gt;	^[AlphaCompositedImage image: ((Image extent: 10@8 depth: 32 bitsPerPixel: 32 palette: (Graphics.FixedPalette redShift: 0 redMask: 255 greenShift: 8 greenMask: 255 blueShift: 16 blueMask: 255) usingBits: (ByteArray fromPackedString: '@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???=+@@@@]P@@@@@@@@@@@@@@@@@@@@@@@@A5@@@@Z0@@@@C???&lt;@????!P@@@O8@@@AP@@@@@@@@@@@@@@AP@@@@? @@@HX@@@@@????@O???0X@@@CJ@@@@; @@@B@@@@@ @@@@; @@@L(@@@@F@@@@@O???0C???&lt;@@@@@H@@@@N&lt;@@@CJ@@@@2P@@@N&lt;@@@@ @@@@@@@@@@C???&lt;@????@@@@@@@@@@AP@@@@? @@@O8@@@AP@@@@@@@@@@@@@@@@????@O???0@@@@@@@@@@@@@@@GT@@@A6@@@@@@@@@@@@@@@@@@@@@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;@????@O???0C???&lt;b')))] once</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingPanel</class-id> <category>event driven</category><body package="Tools-Settings-Commands">button1Down: event	&lt;event: #Button1Down&gt;	self showContextMenuForMouseEvent: event</body><body package="Tools-Settings-Commands">button2Down: event	&lt;event: #Button2Down&gt;	self showContextMenuForMouseEvent: event</body><body package="Tools-Settings-Commands">mouseEnter: event	&lt;event: #MouseEnter&gt;	self announceFrameEntered.</body><body package="Tools-Settings-Commands">mouseExit: event	&lt;event: #MouseExit&gt;	self announceFrameExited</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingPanel class</class-id> <category>resources</category><body package="Tools-Settings-Commands">keystrokeMenu	"Tools.MenuEditor new openOnClass: self andSelector: #keystrokeMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Replace Keystroke' 				#enabled: false 				#value: 				#actionReplaceKeystroke: ) 			#(#{UI.MenuItem} 				#rawLabel: 'Remove Keystroke' 				#enabled: false 				#value: 				#actionRemoveKeystroke: ) 			#(#{UI.MenuItem} 				#rawLabel: 'Add Keystroke' 				#value: 				#actionAddKeystroke: ) 			#(#{UI.MenuItem} 				#rawLabel: 'Reset to Default' 				#enabled: false 				#value: 				#actionResetToDefault: ) ) #(4 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Tools.CommandBindingsEditor.BindingEditor class</class-id> <category>interface specs</category><body package="Tools-Settings-Commands">registryListSpec	"Tools.UIPainter new openOnClass: self andSelector: #registryListSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 578 437 861 461 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 10 0 5 0 50 13 ) 					#name: #RegistryLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #RegistryC 						#defaultString: 'Registry:' 						#catalogID: #labels ) ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 65 0 0 0 0 1 22 0 ) 					#name: #registrySelection 					#flags: 0 					#model: #registrySelectionHolder 					#tabable: true 					#isReadOnly: false 					#comboList: #commandRegistryList ) ) ) )</body><body package="Tools-Settings-Commands">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #EditKeyBindings 				#defaultString: 'Key Bindings' 				#catalogID: #labels ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 389 120 1049 780 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 24 0 0 1 -32 1 ) 					#name: #EditorPanel 					#flags: 1 					#component: #editorPanel ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -32 1 0 1 -31 1 ) 					#name: #Divider1 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 10 0 -28 1 75 24 ) 					#name: #SaveButton 					#model: #actionSave 					#helpText: 'Save the overridden bindings as an XML file' 					#label: 'Save' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 90 0 -28 1 75 24 ) 					#name: #LoadButton 					#model: #actionLoad 					#helpText: 'Load previously saved XML binding overrides' 					#label: 'Load' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} 170 0 -28 1 75 24 ) 					#name: #HTMLButton 					#model: #actionHTML 					#helpText: 'Open a view of the installed bindings in a HTML Browser' 					#label: 'HTML' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutSizedOrigin} -85 1 -28 1 75 24 ) 					#name: #ApplyButton 					#flags: 40 					#model: #actionApply 					#label: 'Apply' 					#defaultable: true ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 24 0 ) 					#name: #HeaderPanel 					#flags: 0 					#component: #headerPanel ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 0 0 230 24 ) 					#name: #RegistryList 					#flags: 0 					#minorKey: #registryListSpec ) ) ) )</body></methods><methods><class-id>Tools.CommandBindingsEditor.ColumnHeaderPanel class</class-id> <category>resources</category><body package="Tools-Settings-Commands">columnHeaderMenu	"Tools.MenuEditor new openOnClass: self andSelector: #columnHeaderMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'OS X' 				#value: 2 				#indication: true ) 			#(#{UI.MenuItem} 				#rawLabel: 'Windows' 				#value: 3 				#indication: true ) 			#(#{UI.MenuItem} 				#rawLabel: 'X11' 				#value: 4 				#indication: true ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>AlphaBlendedIcons</name><environment>Smalltalk</environment><super>Core.Assets</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Tools-Resources</package></attributes></class><class><name>Panel</name><environment>UI</environment><super>Graphics.CompositePart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>layoutAlgorithm isInUpdate cachedPreferredExtent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>Label</name><environment>UI</environment><super>Graphics.VisualComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text attributes width offset needsScan fontPolicy verticalAlignment forceBold </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Support</category><attributes><package>UIBasics-Support</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>