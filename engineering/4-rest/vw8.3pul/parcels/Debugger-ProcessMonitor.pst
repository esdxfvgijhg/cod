<?xml version="1.0"?><st-source><!-- Name: Debugger-Process MonitorNotice: Copyright 2003-2016 Cincom Systems, Inc.  All rights reserved.Comment: This package provides a monitory (ProcessMonitor and its support classes) to view the Processes that are runnable in the image  It can be opened from the launcher from the Debug menu, and can also be opened by using pressing the control key and \.DbIdentifier: bear73DbTrace: 496354DbUsername: willowDbVersion: 8.3 - 1DevelopmentPrerequisites: #(#(#any 'Debugger-UI' ''))PackageName: Debugger-Process MonitorParcel: #('Debugger-Process Monitor')ParcelName: Debugger-Process MonitorPrerequisiteParcels: #(#('Debugger-UI' ''))PrintStringCache: (8.3 - 1,willow)Version: 8.3 - 1Post-Load Block: 	[ :pkg |  Process allInstances do: [:p | p priority = 50 ifFalse: [p setIsSystemProcess]].]Date: 3:26:59 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.4) of June 23, 2017 on June 30, 2017 at 3:26:59 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ProcessMonitorRecord</name><environment>CraftedSmalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>state processTag processHash priority topContext type name underDebug windowLabel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CrafProcessMonitor</category><attributes><package>Debugger-Process Monitor</package></attributes></class><comment><class-id>CraftedSmalltalk.ProcessMonitorRecord</class-id><body>ProcessMonitorRecord holds the process information to be displayed in the Process Monitor UI list.Instance Variables	name	&lt;String&gt;	the process name or creator	priority	&lt;Integer&gt;	the process priority	processHash	&lt;Integer&gt;	the identityHash of the process	processTag	&lt;Integer&gt;	a numeric index tag	state	&lt;String&gt;	a readable state value : active, blocked, etc.	topContext	&lt;String&gt;	the name of the waiting context	type	&lt;Boolean&gt;	true if this is a system process, false if it is a user process	underDebug	&lt;Boolean&gt;	whether or not the process is being debugged	windowLabel	&lt;String&gt;	the process UI window label, or nil if not applicable</body></comment><class><name>ProcessMonitorClient</name><environment>CraftedSmalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>service intervalHolder samplerProcess isSampling processRecords displayList numProcHolder memSizeHolder sortBlock tabs processListWidget filterSelection record </inst-vars><class-inst-vars>defaultFilter </class-inst-vars><imports></imports><category>Debugger-Process Monitor</category><attributes><package>Debugger-Process Monitor</package></attributes></class><class><name>ProcessMonitorService</name><environment>CraftedSmalltalk</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>processes tags </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CrafProcessMonitor</category><attributes><package>Debugger-Process Monitor</package></attributes></class><class><name>ProcessTag</name><environment>CraftedSmalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Debugger-Process Monitor</package></attributes></class><comment><class-id>CraftedSmalltalk.ProcessTag</class-id><body>ProcessTag is a unique identifier for a process. It is mapped by a ProcessMonitorServer to the corresponding Process. If it is to be used in a multi-image environment, it should either be passed by reference or augmented by a UUID of some sort. Either option may be somewhat heavyweight, so this may be a subject for future consideration.The advantage of the ProcessTag is that if it is being held strongly, even across multiple images, the Process can be held weakly and can be collected by a garbage collector.</body></comment><methods><class-id>CraftedSmalltalk.ProcessMonitorRecord</class-id> <category>accessing</category><body package="Debugger-Process Monitor">name	^name</body><body package="Debugger-Process Monitor">printOn: aStream	aStream nextPutAll: (#NameC &lt;&lt; #pdp &gt;&gt; 'Name: ') asString;		nextPutAll: name; space; space;		nextPutAll: (#PriorityC &lt;&lt; #pdp &gt;&gt; 'Priority: ') asString;		print: priority.</body><body package="Debugger-Process Monitor">priority	^priority</body><body package="Debugger-Process Monitor">processHash	^processHash</body><body package="Debugger-Process Monitor">processTag	^processTag</body><body package="Debugger-Process Monitor">state	^state</body><body package="Debugger-Process Monitor">topContext	^topContext</body><body package="Debugger-Process Monitor">type	^type		ifTrue: [(#system &lt;&lt; #pdp &gt;&gt; 'system') asString]		ifFalse: [(#user &lt;&lt; #pdp &gt;&gt; 'user') asString]</body><body package="Debugger-Process Monitor">windowLabel	^windowLabel</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorRecord</class-id> <category>initialize-release</category><body package="Debugger-Process Monitor">basicOn: aProcess withTag: aTag	self initializeNameForProcess: aProcess.	priority := aProcess priority.	underDebug := aProcess isUnderDebug.	state := underDebug ifTrue: ['d ' ] ifFalse: ['  '].	state := state , aProcess processState asString.	topContext := aProcess suspendedContext.	(topContext notNil and: [topContext method == (Semaphore compiledMethodAt: #wait)])		ifTrue: [topContext := topContext sender].	topContext := topContext printString.	type := aProcess isSystemProcess.	type isNil ifTrue: [type := false].	processHash := aProcess identityHash.	processTag := aTag</body><body package="Debugger-Process Monitor">initializeNameForProcess: aProcess	name := aProcess name.	name notNil		ifTrue: [^self].	name := aProcess processCreationMethod.	name := name notNil		ifTrue: [name nameString]		ifFalse: ['nil'].	aProcess name: name.</body><body package="Debugger-Process Monitor">on: aProcess withTag: aTag	aProcess priority &gt; Processor activeProcess priority		ifTrue: [[self basicOn: aProcess withTag: aTag] valueUnpreemptively]		ifFalse: [self basicOn: aProcess withTag: aTag]</body><body package="Debugger-Process Monitor">onWindow: aWindow withTag: aTag	windowLabel := aWindow label.	windowLabel := windowLabel isNil		ifTrue: [aWindow printString]		ifFalse: [windowLabel asString].	self basicOn: aWindow windowProcess withTag: aTag</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorRecord</class-id> <category>testing</category><body package="Debugger-Process Monitor">isSystemProcess	^type</body><body package="Debugger-Process Monitor">isUnderDebug	^underDebug</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorRecord</class-id> <category>comparing</category><body package="Debugger-Process Monitor">= aRecord	^self processTag = aRecord processTag		and: [self name = aRecord name]</body><body package="Debugger-Process Monitor">hash	^self processTag hash</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorRecord class</class-id> <category>instance creation</category><body package="Debugger-Process Monitor">on: aProcess withTag: aTag	^self new on: aProcess withTag: aTag</body><body package="Debugger-Process Monitor">onWindow: aWindow withTag: aTag	^self new onWindow: aWindow withTag: aTag</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient</class-id> <category>updating</category><body package="Debugger-Process Monitor">displayProcessRecords	| selectedRecords nLines scrollPosition |	nLines := displayList list size.	scrollPosition := processListWidget scrollOffsetHolder value.	selectedRecords := displayList selections.	displayList list: (SortedCollection withAll: (self filter: processRecords) sortBlock: sortBlock) asList.	displayList selections: selectedRecords.	displayList list size &gt;= nLines		ifTrue: [processListWidget scrollTo: scrollPosition].</body><body package="Debugger-Process Monitor">setProcessListPage	(self widgetAt: #tabControl) client: self		spec: (#(#processSpec #windowProcessSpec) at: tabs selectionIndex)</body><body package="Debugger-Process Monitor">tabsChanged	self createSortBlockFor: #name.	self updateList.	self setProcessListPage</body><body package="Debugger-Process Monitor">updateList	processRecords := tabs selectionIndex = 1		ifTrue: [service processList]		ifFalse: [service windowProcessList].	self displayProcessRecords.	self updateStatusBar.	self spawnNextSampler.</body><body package="Debugger-Process Monitor">updateStatusBar	numProcHolder value: ((#SystemC1sUserC2s &lt;&lt; #pdp &gt;&gt; 'System: &lt;1s&gt;  User: &lt;2s&gt;')			expandMacrosWith: self numOfSystemProcesses			with: self numOfUserProcesses).	memSizeHolder  value: ((#MemoryC1s &lt;&lt; #pdp &gt;&gt; 'Memory: &lt;1p&gt; MB')			expandMacrosWith: service dynamicallyAllocatedFootprint // 1024 / 1024.0).</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient</class-id> <category>initialize-release</category><body package="Debugger-Process Monitor">initialize	super initialize.	self filterSelection onChangeSend: #displayProcessRecords to: self</body><body package="Debugger-Process Monitor">noticeOfWindowClose: aWindow	EventQueue allInstancesDo: [:each | each restoreReadSynchSignals].	(ObjectMemory hardLowSpaceLimit = 0		and: [Dialog confirm: 'Perform GC on exit?'])			ifTrue: [ObjectMemory globalGarbageCollect].	service proceedUserProcesses.	self release.	super noticeOfWindowClose: aWindow</body><body package="Debugger-Process Monitor">on: aProcMonServer 	service := aProcMonServer.	intervalHolder := 2000 asValue.	displayList := MultiSelectionInListSortAware new.	record := nil asValue.	numProcHolder := '' asValue.	memSizeHolder := '' asValue.	self createSortBlockFor: #name.	tabs := SelectionInList new.	tabs 		list: 			(List 				with: (#Processes &lt;&lt; #pdp &gt;&gt; 'Processes')				with: (#Windows &lt;&lt; #pdp &gt;&gt; 'Windows'));		selectionIndex: 1.	isSampling := true.</body><body package="Debugger-Process Monitor">release	self stopSampling.	super release.</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient</class-id> <category>actions</category><body package="Debugger-Process Monitor">changeProcessPriority	| answer |	self hasSelection		ifFalse: [^self].	answer := Dialog request: (#EnterNewPriority &lt;&lt; #pdp &gt;&gt; 'Enter new priority') initialAnswer: self selectedProcessRecord priority printString.	answer isEmpty		ifTrue: [^self].	answer := answer asNumber rounded.	(answer &lt; 1 or: [answer &gt; (Processor highestPriority - 1)])		ifTrue: [^self].	displayList selections do: [:rec | service changeProcessTagged: rec processTag priorityTo: answer]</body><body package="Debugger-Process Monitor">compactingGC	ObjectMemory compactingGC</body><body package="Debugger-Process Monitor">debugProcess	(displayList selections anySatisfy: [:rec | rec isSystemProcess])		ifTrue:			[(Dialog confirm: (#DebuggingSystemProcessMayHarm &lt;&lt; #pdp &gt;&gt; 'Debugging a system process may harm the system.	Continue debug?'))				ifFalse: [^self]].	displayList selections do: [:rec | service debugProcessTagged: rec processTag]</body><body package="Debugger-Process Monitor">dumpProcess	| aString strm |	aString := Dialog requestFileName: (#SaveStackDump &lt;&lt; #pdp &gt;&gt; 'Save stack dump into file named:')				default: 'stackdump.txt'.	(aString isNil or: [aString isEmpty]) ifTrue: [^self].	strm := aString asFilename writeStream.	[displayList selections do:		[:rec |		rec printOn: strm.		strm cr.		strm nextPutAll: (service stackStringOfProcessTagged: rec processTag).		strm cr.].	] 		ensure: [strm close]</body><body package="Debugger-Process Monitor">globalCompactingGC	ObjectMemory globalCompactingGC</body><body package="Debugger-Process Monitor">inspectProcess	displayList selections do: [:rec | service inspectProcessTagged: rec processTag]</body><body package="Debugger-Process Monitor">proceedAllAndExit	service proceedUserProcesses.	self exit</body><body package="Debugger-Process Monitor">proceedAllProcesses	service proceedUserProcesses</body><body package="Debugger-Process Monitor">proceedProcess	displayList selections do: [:rec | service proceedProcessTagged: rec processTag]</body><body package="Debugger-Process Monitor">terminateProcess	| message |	message := displayList selections size = 1		ifTrue: [#TerminateSelectedProcessQ &lt;&lt; #pdp &gt;&gt; 'Terminate "&lt;1s&gt;"?'					expandMacrosWith: displayList selections first name]		ifFalse: [#TerminateSelected1pProcessesQ &lt;&lt; #pdp &gt;&gt; 'Terminate the &lt;1p&gt; selected processes?' 					expandMacrosWith: displayList selections size].	(Dialog confirm: message) 		ifFalse: [^self].	displayList selections do: [:rec | service terminateProcessTagged: rec processTag]</body><body package="Debugger-Process Monitor">toggleSampling	isSampling := isSampling not.	self spawnNextSampler.	(builder componentAt: #sampleCntrl) widget labelString: self sampleCntrlLabel</body><body package="Debugger-Process Monitor">viewProcess		displayList selections		do:			[:rec | 			| holder |			holder := ('&lt;1p&gt;&lt;n&gt;&lt;2s&gt;'				expandMacrosWith: rec				with: (service stackStringOfProcessTagged: rec processTag)) asValue.			[ComposedTextView				edit: holder				label:					(#ProcessViewOf1s &lt;&lt; #pdp &gt;&gt; 'Process view of &lt;1s&gt;'						expandMacrosWith: rec name)				extent: 500 @ 350] forkAt: Processor userSchedulingPriority]</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient</class-id> <category>accessing</category><body package="Debugger-Process Monitor">enableProceed	^self hasSelection and: [(displayList selections anySatisfy: [:rec | rec state ~= '  paused']) not]</body><body package="Debugger-Process Monitor">intervalHolder	^intervalHolder</body><body package="Debugger-Process Monitor">labelFor: aSymbol	^self perform: aSymbol</body><body package="Debugger-Process Monitor">memSizeHolder	^memSizeHolder</body><body package="Debugger-Process Monitor">numProcHolder	^numProcHolder</body><body package="Debugger-Process Monitor">processList	^displayList</body><body package="Debugger-Process Monitor">record	^record</body><body package="Debugger-Process Monitor">sampleCntrlLabel	^isSampling		ifTrue: [(#Stop &lt;&lt; #pdp &gt;&gt; 'Stop')]		ifFalse: [(#Start &lt;&lt; #pdp &gt;&gt; 'Start')]</body><body package="Debugger-Process Monitor">tabs	^tabs</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient</class-id> <category>interface opening</category><body package="Debugger-Process Monitor">postBuildWith: aBuilder	super postBuildWith: aBuilder.	builder == aBuilder		ifTrue: [builder window damageRepairPolicy: DoubleBufferingWindowDisplayPolicy new]		ifFalse: [processListWidget := (aBuilder componentAt: #processList) widget].</body><body package="Debugger-Process Monitor">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self setProcessListPage.	self updateList.</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient</class-id> <category>private</category><body package="Debugger-Process Monitor">enableDebug	^self menuCommandEnablement and: [(displayList selections anySatisfy: [:rec | rec isUnderDebug]) not]</body><body package="Debugger-Process Monitor">filter: aCollection	^aCollection select: self processFilterBlock</body><body package="Debugger-Process Monitor">hasSelection	^displayList selectionIndexes notEmpty</body><body package="Debugger-Process Monitor">menuCommandEnablement	^self hasSelection</body><body package="Debugger-Process Monitor">numOfSystemProcesses	^(processRecords inject: 0 into: [:s :p | s + (p isSystemProcess ifTrue: [1] ifFalse: [0])]) printString</body><body package="Debugger-Process Monitor">numOfUserProcesses	^(processRecords inject: 0 into: [:s :p | s + (p isSystemProcess ifTrue: [0] ifFalse: [1])]) printString</body><body package="Debugger-Process Monitor">processFilterBlock	^self class perform: (self filterSelection value)</body><body package="Debugger-Process Monitor">selectedProcessRecord	^displayList selections first</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient</class-id> <category>actions - sorting</category><body package="Debugger-Process Monitor">createSortBlockFor: field	| ascSortBlock dscSortBlock |	ascSortBlock := [:x :y | (x perform: field) &lt;= (y perform: field)].	dscSortBlock := [:x :y | (x perform: field) &gt;= (y perform: field)].	sortBlock := self processList sortAspect == field		ifTrue:			[self processList sortDirection == #asc				ifTrue:					[self processList sortDirection: #dsc.					ascSortBlock]				ifFalse:					[self processList sortDirection: #asc.					dscSortBlock]]		ifFalse:			[self processList sortAspect: field.			self processList sortDirection: #dsc.			ascSortBlock].</body><body package="Debugger-Process Monitor">recordNameLabelPressed	self sortField: #name</body><body package="Debugger-Process Monitor">recordPriorityLabelPressed	self sortField: #priority</body><body package="Debugger-Process Monitor">recordProcessHashLabelPressed	self sortField: #processHash</body><body package="Debugger-Process Monitor">recordStateLabelPressed	self sortField: #state</body><body package="Debugger-Process Monitor">recordTopContextLabelPressed	self sortField: #topContext</body><body package="Debugger-Process Monitor">recordTypeLabelPressed	self sortField: #type</body><body package="Debugger-Process Monitor">recordWindowLabelLabelPressed	self sortField: #windowLabel</body><body package="Debugger-Process Monitor">sortField: field 	self createSortBlockFor: field.	self displayProcessRecords.</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient</class-id> <category>controlling</category><body package="Debugger-Process Monitor">spawnNextSampler	samplerProcess notNil		ifTrue: [samplerProcess terminate].	isSampling		ifFalse: [^self].	samplerProcess := 	[	(Delay forMilliseconds: intervalHolder value) wait.	self mainWindow send: #updateList to: self.	] newProcess.	samplerProcess name: 'ProcessMonitorSampler'.	samplerProcess isSystemProcess: true.	samplerProcess resume.</body><body package="Debugger-Process Monitor">stopSampling	samplerProcess isNil		ifTrue: [^self].	samplerProcess terminate.	samplerProcess := nil</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient</class-id> <category>aspects</category><body package="Debugger-Process Monitor">filterSelection	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^filterSelection isNil		ifTrue:			[filterSelection := self class defaultProcessFilter asValue]		ifFalse:			[filterSelection]</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient</class-id> <category>menus</category><body package="Debugger-Process Monitor">exit	self closeRequest</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient class</class-id> <category>instance creation</category><body package="Debugger-Process Monitor">openOn: aService	^(self new on: aService) open</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient class</class-id> <category>filters</category><body package="Debugger-Process Monitor">allProcessesFilter	^[:p | true].</body><body package="Debugger-Process Monitor">defaultProcessFilter	^defaultFilter</body><body package="Debugger-Process Monitor">defaultToAllProcesses	defaultFilter := self allProcessesFilter.</body><body package="Debugger-Process Monitor">defaultToSystemProcesses	defaultFilter := self systemProcessesFilter.</body><body package="Debugger-Process Monitor">defaultToUserProcesses	defaultFilter := self userProcessesFilter.</body><body package="Debugger-Process Monitor">systemProcessesFilter	^[:p | p isSystemProcess].</body><body package="Debugger-Process Monitor">userProcessesFilter	^[:p | p isSystemProcess not].</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient class</class-id> <category>class initialization</category><body package="Debugger-Process Monitor">initialize	defaultFilter := #userProcessesFilter</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorService</class-id> <category>actions</category><body package="Debugger-Process Monitor">changeProcessTagged: aTag priorityTo: newPriority	^self do: [:p | p priority: newPriority] forProcessTagged: aTag</body><body package="Debugger-Process Monitor">debugProcessTagged: aTag	^self do: [:p | p debug] forProcessTagged: aTag</body><body package="Debugger-Process Monitor">inspectProcessTagged: aTag	^self do: [:each | [each inspect] forkAt: Processor userSchedulingPriority] forProcessTagged: aTag</body><body package="Debugger-Process Monitor">proceedProcessTagged: aTag	^self do: [:p | p proceed] forProcessTagged: aTag</body><body package="Debugger-Process Monitor">proceedUserProcesses	Processor proceedUserProcesses</body><body package="Debugger-Process Monitor">stackStringOfProcessTagged: aTag	self do: [:p | ^p stackString] forProcessTagged: aTag.	^''</body><body package="Debugger-Process Monitor">terminateProcessTagged: aTag	^self		do: [:process | process terminate]		forProcessTagged: aTag</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorService</class-id> <category>accessing</category><body package="Debugger-Process Monitor">dynamicallyAllocatedFootprint	^ObjectMemory current dynamicallyAllocatedFootprint</body><body package="Debugger-Process Monitor">processList	| strongProcesses |	strongProcesses := Process allGeneralInstances reject: [:p | p isTerminated].	^self processListFrom: strongProcesses</body><body package="Debugger-Process Monitor">processListFrom: strongProcesses	| strm oldProcesses oldTags |	oldProcesses := processes.	oldTags := tags.	processes := WeakArray withAll: strongProcesses.	tags := Array new: processes size.		"Preserve tag mappings for processes that appear		in both the old and new lists"	oldTags == nil		ifFalse: [1 to: processes size do:			[:index | |  proc oldIndex |			proc := processes at: index.			oldIndex := oldProcesses identityIndexOf: proc.			oldIndex = 0 ifFalse: [tags at: index put: (oldTags at: oldIndex)].			]].	1 to: tags size do: [:index |		(tags at: index) == nil ifTrue: [tags at: index put: Object new]].	strm := WriteStream on: (Array new: processes size).	processes with: tags do:		[:process :tag |		strm nextPut: (ProcessMonitorRecord on: process withTag: tag)		].	^strm contents</body><body package="Debugger-Process Monitor">windowProcessList	| strongProcesses |	strongProcesses := OrderedCollection new.	Window allGeneralInstancesDo:  [:win |		(win isOpen and: [win windowManager isKindOf: WindowManager])			ifTrue:  [| p |				p := win windowProcess.				(p notNil and: [p isTerminated not])					ifTrue: [strongProcesses add: p]]].	^self processListFrom: strongProcesses</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorService</class-id> <category>private</category><body package="Debugger-Process Monitor">do: aBlock forProcessTagged: aTag	| process index |	index := tags identityIndexOf: aTag.	index = 0 ifTrue: [^nil].	process := processes at: index.	process = processes tombstone ifTrue: [^nil].	^aBlock value: process</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorService class</class-id> <category>instance creation</category><body package="Debugger-Process Monitor">open	^ProcessMonitorClient openOn: self new</body></methods><methods><class-id>CraftedSmalltalk.ProcessTag</class-id> <category>printing</category><body package="Debugger-Process Monitor">printOn: aStream	super printOn: aStream.	aStream space; print: self identityHash</body></methods><methods><class-id>Kernel.CompiledCode</class-id> <category>printing</category><body package="Debugger-Process Monitor">nameString	| aStream |	aStream := (String new: 256) writeStream.	self printNameOn: aStream inClass: nil.	^aStream contents</body></methods><methods><class-id>Core.Process</class-id> <category>accessing</category><body package="Debugger-Process Monitor">processCreationMethod	| ctx stack |	stack := OrderedCollection new.	ctx := Processor activeProcess == self		ifTrue: [thisContext]		ifFalse: [suspendedContext].	ctx isNil		ifTrue: [^nil].	stack add: ctx.	[(ctx := stack last sender) isNil		ifTrue: [^stack first method homeMethod].	stack size &gt;= 3		ifTrue: [stack removeFirst].	stack addLast: ctx] repeat</body><body package="Debugger-Process Monitor">processState	Processor activeProcess == self		ifTrue: [^#active].	suspendedContext isNil		ifTrue: [^#terminated].	myList isNil		ifTrue:			[^(Processor isPaused: self)				ifTrue: [#paused]	"paused is really suspended"				ifFalse: [#suspend]].	^(Processor isRunable: self)		ifTrue: [#runable]		ifFalse: [#blocked]</body></methods><methods><class-id>Core.Process</class-id> <category>printing</category><body package="Debugger-Process Monitor">stackString	| strm |	strm := (String new: 1000) writeStream.	self printStackOn: strm.	^strm contents</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient class</class-id> <category>interface specs</category><body package="Debugger-Process Monitor">processSpec	"Tools.UIPainter new openOnClass: self andSelector: #processSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #ProcessMonitor 				#defaultString: 'Process Monitor' 				#catalogID: #pdp ) 			#bounds: #(#{Graphics.Rectangle} 700 525 1298 932 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 30 0 ) 					#name: #Subcanvas1 					#flags: 0 					#minorKey: #showProcessSpec ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showVerticalLines false #allowColumnReordering true #rowSize 30 #allowColumnResizing true #allowSorting true #showHorizontalLines false ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 30 0 0 1 0 1 ) 					#name: #processList 					#model: #processList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #debugProcess ) 					#menu: #processMenu 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'record name' 							#label: 							#(#{Kernel.UserMessage} 								#key: #NameOrCreator 								#defaultString: 'Name or Creator' 								#catalogID: #pdp ) 							#labelIsImage: false 							#width: 240 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'record priority' 							#label: 							#(#{Kernel.UserMessage} 								#key: #Priority 								#defaultString: 'Priority' 								#catalogID: #pdp ) 							#labelIsImage: false 							#width: 60 							#rendererType: #Text 							#editorType: #None 							#type: #number 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'record processHash' 							#label: 							#(#{Kernel.UserMessage} 								#key: #Hash 								#defaultString: 'Hash' 								#catalogID: #pdp ) 							#labelIsImage: false 							#width: 50 							#rendererType: #Text 							#editorType: #None 							#type: #number 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'record state' 							#label: 							#(#{Kernel.UserMessage} 								#key: #State 								#defaultString: 'State' 								#catalogID: #pdp ) 							#labelIsImage: false 							#width: 65 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'record type' 							#label: 							#(#{Kernel.UserMessage} 								#key: #Type 								#defaultString: 'Type' 								#catalogID: #pdp ) 							#labelIsImage: false 							#width: 50 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'record topContext' 							#label: 							#(#{Kernel.UserMessage} 								#key: #WaitingContext 								#defaultString: 'Waiting Context' 								#catalogID: #pdp ) 							#labelIsImage: false 							#width: 300 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) ) 					#multipleSelections: true 					#labelsAsButtons: true ) ) ) )</body><body package="Debugger-Process Monitor">showProcessSpec	"Tools.UIPainter new openOnClass: self andSelector: #showProcessSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 720 450 1170 529 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.RadioButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Core.Point} 10 5 ) 					#name: #ShowAllRadioButton 					#model: #filterSelection 					#label: 					#(#{Kernel.UserMessage} 						#key: #ShowAll 						#defaultString: 'Show all' 						#catalogID: #pdp ) 					#select: #allProcessesFilter ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 110 5 ) 					#name: #ShowUserRadioButton 					#model: #filterSelection 					#label: 					#(#{Kernel.UserMessage} 						#key: #UserOnly 						#defaultString: 'User only' 						#catalogID: #pdp ) 					#select: #userProcessesFilter ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Core.Point} 210 5 ) 					#name: #ShowSystemRadioButton 					#model: #filterSelection 					#label: 					#(#{Kernel.UserMessage} 						#key: #SystemOnly 						#defaultString: 'System only' 						#catalogID: #pdp ) 					#select: #systemProcessesFilter ) ) ) )</body><body package="Debugger-Process Monitor">windowProcessSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowProcessSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #ProcessMonitor #defaultString: 'Process Monitor' #catalogID: #pdp) 			#bounds: #(#{Graphics.Rectangle} 640 512 1238 919 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showVerticalLines false #allowColumnReordering true #rowSize 30 #allowColumnResizing true #allowSorting true #showHorizontalLines false ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #processList 					#model: #processList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #debugProcess ) 					#menu: #processMenu 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'record windowLabel' 							#label: #(#{Kernel.UserMessage} #key: #Window #defaultString: 'Window' #catalogID: #pdp) 							#labelIsImage: false 							#width: 140 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'record name' 							#label: #(#{Kernel.UserMessage} #key: #ProcessNameOrCreator #defaultString: 'Process name or creator' #catalogID: #pdp) 							#labelIsImage: false 							#width: 180 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'record priority' 							#label: #(#{Kernel.UserMessage} #key: #Priority #defaultString: 'Priority' #catalogID: #pdp) 							#labelIsImage: false 							#width: 60 							#rendererType: #Text 							#editorType: #None 							#type: #number 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'record processHash' 							#label: #(#{Kernel.UserMessage} #key: #Hash #defaultString: 'Hash' #catalogID: #pdp) 							#labelIsImage: false 							#width: 50 							#rendererType: #Text 							#editorType: #None 							#type: #number 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'record state' 							#label: #(#{Kernel.UserMessage} #key: #State #defaultString: 'State' #catalogID: #pdp) 							#labelIsImage: false 							#width: 65 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'record type' 							#label: #(#{Kernel.UserMessage} #key: #Type #defaultString: 'Type' #catalogID: #pdp) 							#labelIsImage: false 							#width: 50 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true ) 							#model: #'record topContext' 							#label: #(#{Kernel.UserMessage} #key: #WaitingContext #defaultString: 'Waiting Context' #catalogID: #pdp) 							#labelIsImage: false 							#width: 300 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) ) 					#multipleSelections: true 					#labelsAsButtons: true ) ) ) )</body><body package="Debugger-Process Monitor">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #ProcessMonitor 				#defaultString: 'Process Monitor' 				#catalogID: #pdp ) 			#bounds: #(#{Graphics.Rectangle} 426 361 1024 768 ) 			#flags: 4 			#menu: #menu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 90 0 20 0 -110 1 49 0 ) 					#name: #Slider1 					#model: #intervalHolder 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #SetSamplingInterval 						#defaultString: 'Set sampling interval' 						#catalogID: #pdp ) 					#orientation: #horizontal 					#start: 250 					#stop: 5000 					#step: 50 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -100 1 19 0 -35 1 44 0 ) 					#name: #InputField1 					#model: #intervalHolder 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #SetSamplingInterval 						#defaultString: 'Set sampling interval' 						#catalogID: #pdp ) 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -30 1 21 0 ) 					#name: #Label1 					#label: 					#(#{Kernel.UserMessage} 						#key: #ms 						#defaultString: 'ms' 						#catalogID: #pdp ) ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 0 0 -2 1 55 0 ) 					#name: #GroupBox1 					#label: 					#(#{Kernel.UserMessage} 						#key: #Sample 						#defaultString: 'Sample' 						#catalogID: #pdp ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 13 20 77 45 ) 					#name: #sampleCntrl 					#model: #toggleSampling 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #ControlSamplingProcess 						#defaultString: 'Control sampling process' 						#catalogID: #pdp ) 					#label: #sampleCntrlLabel 					#defaultable: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -28 1 0 0.5 0 1 ) 					#name: #numProcsLbl 					#flags: 12 					#model: #numProcHolder 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #NumberOfProcesses 						#defaultString: 'Number of processes' 						#catalogID: #pdp ) 					#isReadOnly: true 					#tabRequiresControl: true 					#isWrapped: false ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.5 -28 1 0 1 0 1 ) 					#name: #TextEditor1 					#flags: 12 					#model: #memSizeHolder 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #AmountOfAllocatedMemory 						#defaultString: 'Amount of allocated memory' 						#catalogID: #pdp ) 					#isReadOnly: true 					#tabRequiresControl: true 					#isWrapped: false ) 				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 60 0 0 1 -30 1 ) 					#name: #tabControl 					#model: #tabs 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #tabsChanged ) 					#tabable: false 					#labels: #() ) ) ) )</body></methods><methods><class-id>CraftedSmalltalk.ProcessMonitorClient class</class-id> <category>resources</category><body package="Debugger-Process Monitor">menu	"Tools.MenuEditor new openOnClass: self andSelector: #menu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Monitor 					#defaultString: '&amp;Monitor' 					#catalogID: #pdp ) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ProceedAllPaused 								#defaultString: '&amp;Proceed All Paused' 								#catalogID: #pdp ) 							#value: #proceedAllProcesses ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Proceed_AllAndClose 								#defaultString: 'Proceed &amp;All and Close' 								#catalogID: #pdp ) 							#value: #proceedAllAndExit ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Close 								#defaultString: '&amp;Close' 								#catalogID: #pdp ) 							#value: #exit ) ) #(2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Process 					#defaultString: '&amp;Process' 					#catalogID: #pdp ) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Inspect 								#defaultString: '&amp;Inspect' 								#catalogID: #pdp ) 							#value: #inspectProcess 							#enablementSelector: #menuCommandEnablement 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #inspect ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ViewStack 								#defaultString: '&amp;View Stack' 								#catalogID: #pdp ) 							#value: #viewProcess 							#enablementSelector: #menuCommandEnablement ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Dump_StackDots 								#defaultString: 'Dump &amp;Stack...' 								#catalogID: #pdp ) 							#value: #dumpProcess 							#enablementSelector: #menuCommandEnablement 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileSave ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Debug 								#defaultString: '&amp;Debug' 								#catalogID: #pdp ) 							#value: #debugProcess 							#enablementSelector: #enableDebug ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_ChangePriorityDots 								#defaultString: '&amp;Change Priority...' 								#catalogID: #pdp ) 							#value: #changeProcessPriority 							#enablementSelector: #menuCommandEnablement ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_Proceed 								#defaultString: '&amp;Proceed' 								#catalogID: #pdp ) 							#value: #proceedProcess 							#enablementSelector: #enableProceed 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #debugRun ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_TerminateDots 								#defaultString: '&amp;Terminate...' 								#catalogID: #pdp ) 							#value: #terminateProcess 							#enablementSelector: #menuCommandEnablement 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #delete ) ) ) #(3 3 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Garbage 					#defaultString: '&amp;Garbage' 					#catalogID: #pdp ) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_CompactingGC 								#defaultString: '&amp;Compacting GC' 								#catalogID: #pdp ) 							#value: #compactingGC ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #_GlobalCompactingGC 								#defaultString: '&amp;Global Compacting GC' 								#catalogID: #pdp ) 							#value: #globalCompactingGC ) ) #(2 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body><body package="Debugger-Process Monitor">processMenu	"Tools.MenuEditor new openOnClass: self andSelector: #processMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Inspect 					#defaultString: '&amp;Inspect' 					#catalogID: #pdp ) 				#value: #inspectProcess 				#enablementSelector: #menuCommandEnablement 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #inspect ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ViewStack 					#defaultString: '&amp;View Stack' 					#catalogID: #pdp ) 				#value: #viewProcess 				#enablementSelector: #menuCommandEnablement ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Dump_StackDots 					#defaultString: 'Dump &amp;Stack...' 					#catalogID: #pdp ) 				#value: #dumpProcess 				#enablementSelector: #menuCommandEnablement 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileSave ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Debug 					#defaultString: '&amp;Debug' 					#catalogID: #pdp ) 				#value: #debugProcess 				#enablementSelector: #enableDebug ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ChangePriorityDots 					#defaultString: '&amp;Change Priority...' 					#catalogID: #pdp ) 				#value: #changeProcessPriority 				#enablementSelector: #menuCommandEnablement ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_Proceed 					#defaultString: '&amp;Proceed' 					#catalogID: #pdp ) 				#value: #proceedProcess 				#enablementSelector: #enableProceed 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #debugRun ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_TerminateDots 					#defaultString: '&amp;Terminate...' 					#catalogID: #pdp ) 				#value: #terminateProcess 				#enablementSelector: #menuCommandEnablement 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #delete ) ) ) #(3 3 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="Debugger-Process Monitor">menuItemOpenProcessMonitor	&lt;menuItemForCommand: #openProcessMonitor		icon: nil		nameKey: nil		menu: #(#menuBar #probes)		position: 100&gt;	ProcessMonitorService open</body></methods><methods><class-id>UI.CommandRegistry class</class-id> <category>commands - debugger</category><body package="Debugger-Process Monitor">openProcessMonitorCommand	&lt;command: #openProcessMonitor&gt;	^Command		label: (#OpenProcess_Monitor &lt;&lt; #pdp &gt;&gt; 'Open Process Monitor')		group: #debugger		bindings: #()</body></methods><initialize><class-id>CraftedSmalltalk.ProcessMonitorClient</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>CompiledCode</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>bytes </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>Process</name><environment>Core</environment><super>Core.Link</super><private>false</private><indexed-type>none</indexed-type><inst-vars>suspendedContext priority myList systemRecords interruptProtect environment isSystem name debugger locale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Processes</category><attributes><package>Kernel-Processes</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>