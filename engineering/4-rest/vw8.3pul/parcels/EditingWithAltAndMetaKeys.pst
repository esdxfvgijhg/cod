<?xml version="1.0"?><st-source><!-- Name: EditingWithAltAndMetaKeysNotice: Copyright 1999-2013 Cincom Systems, Inc.  All rights reserved.Comment: This package restores various alt-key and meta-key combinations to TextEditors, that existed in VisualWorks 7.6 and previous versions.DbIdentifier: bear73DbTrace: 400466DbUsername: nrossDbVersion: 7.10 - 1PackageName: EditingWithAltAndMetaKeysParcel: #('EditingWithAltAndMetaKeys')PrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1Date: 12:57:11 PM May 5, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (may17.1) of May 5, 2017 on May 5, 2017 at 12:57:11 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>UI.ParagraphEditor</class-id> <category>editing-functions</category><body package="EditingWithAltAndMetaKeys">altCharacterKey: aChar 	"If 'alt' is held down, do a special function, otherwise, insert the character into the stream. 	'Alt' means the 'command' key on the Macintosh."	"ScheduledControllers activeController sensor keyboardEvent"	| cValue |	aChar hasAlt ifFalse: [^self normalCharacterKey: aChar].	cValue := aChar keyValue asLowercase.	(self altKeys includesKey: cValue)		ifFalse: [^self normalCharacterKey: aChar].	^self perform: (self altKeys at: cValue)		with: aChar</body></methods><methods><class-id>UI.ParagraphEditor</class-id> <category>accessing</category><body package="EditingWithAltAndMetaKeys">altKeys	^self feelPolicy altKeys</body></methods><methods><class-id>UI.ParagraphEditor</class-id> <category>editing-functions</category><body package="EditingWithAltAndMetaKeys">metaCharacterKey: aChar	"If 'meta' is held down, do a special function, otherwise, insert the character into the stream. 	'Meta' means 'option' on the Macintosh."	| cValue |	aChar hasAlt		ifFalse: [^self normalCharacterKey: aChar].	cValue := aChar keyValue.	(self metaKeys includesKey: cValue)		ifFalse: [^self normalCharacterKey: aChar].	^self perform: (self metaKeys at: cValue) with: aChar</body></methods><methods><class-id>UI.ParagraphEditor</class-id> <category>accessing</category><body package="EditingWithAltAndMetaKeys">metaKeys	^self feelPolicy metaKeys</body></methods><methods><class-id>UI.UIFeelPolicy</class-id> <category>keyboard Bindings</category><body package="EditingWithAltAndMetaKeys">altEditKeys	"Add the default Macintosh/Win95 key maps to the 'AltKeys' dictionary	(for 'command' editing keys on the mac, 'alt' on all other platforms)."	| a |	a := self altKeys.	self supportsCodeEditing		ifTrue: 			[a at: $t put: #displayIfTrueKey:.			a at: $f put: #displayIfFalseKey:.			a at: $g put: #displayColonEqualKey:.			a at: $d put: #doItOrDisplayDateKey:.			a at: $p put: #printItKey:.			a at: $q put: #inspectItKey:.			a at: $b put: #debugItKey:.			a at: $e put: #explainKey:]		ifFalse: 			[a at: $f put: #findDialogKey:.			a at: $g put: #findAgainKey:.			a at: $d put: #displayDateKey:].	a at: $s put: #acceptKey:.	a at: $a put: #selectAllKey:.	a at: $l put: #findKey:.	a at: $r put: #replaceKey:.	a at: $x put: #cutKey:.	a at: $c put: #copyKey:.	a at: $v put: #pasteKey:.	a at: $z put: #undoKey:.	a at: $j put: #selectCurrentTypeInKey:.	self ensureAltProcessingForAlphabeticKeys</body><body package="EditingWithAltAndMetaKeys">ensureAltProcessingForAlphabeticKeys	| dispatchTable makeAltKey |	dispatchTable := self keyboard.	makeAltKey := [:code | dispatchTable bindValue: #altCharacterKey: to: (Character value: code)].	$A asInteger to: $Z asInteger do: makeAltKey.	$a asInteger to: $z asInteger do: makeAltKey</body></methods><methods><class-id>UI.UIFeelPolicy</class-id> <category>initialize</category><body package="EditingWithAltAndMetaKeys">initialize	self keyboardDispatchTable.	self altEditKeys.	self metaEditKeys</body></methods><methods><class-id>UI.UIFeelPolicy</class-id> <category>keyboard Bindings</category><body package="EditingWithAltAndMetaKeys">metaEditKeys	"Add the default Macintosh/Win95 key maps to the 'self metaKeys' dictionary.	(for 'option' editing keys on the mac)."	self metaKeys at: $x put: #cutKey:.	"cut"	self metaKeys at: $c put: #copyKey:.	"copy"	self metaKeys at: $v put: #pasteKey:.	"paste"	self metaKeys at: $z put: #undoKey:.	"undo"	self keyboard bindValue: #metaCharacterKey: to: $x.	"cut"	self keyboard bindValue: #metaCharacterKey: to: $c.	"copy"	self keyboard bindValue: #metaCharacterKey: to: $v.	"paste"	self keyboard bindValue: #metaCharacterKey: to: $V.	"paste from buffer"	self keyboard bindValue: #metaCharacterKey: to: $z.	"undo"	self keyboard bindValue: #metaCharacterKey: to: $l	"find"</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>UIFeelPolicy</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>altKeys keyboard metaKeys supportsCodeEditing </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>UIBuilder-Support</category><attributes><package>UIBuilder-Support</package></attributes></class><class><name>ParagraphEditor</name><environment>UI</environment><super>UI.ControllerWithMenu</super><private>false</private><indexed-type>none</indexed-type><inst-vars>beginTypeInIndex anchorIndex emphasisHere dispatchTable charComposer textHasChanged feelPolicy supportCodeEditingFeels localMenuItems extendingDown </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>UIBasics-Support</category><attributes><package>UIBasics-Support</package></attributes></class></st-source>