<?xml version="1.0"?><st-source><!-- Name: OracleThapiEXDINotice: Copyright 1999-2016 Cincom Systems, Inc.  All rights reserved.Comment: Contains the Oracle-specific protocols for the External Database Interface (EXDI) in multi-threaded mode.  By using this package with a properly-configured Oracle client (8.0.x and later), you can interact Oracle Database servers in multi-threaded mode.Further information on the EXDI framework can be found in the "Database Application Developer's Guide" (located in the /doc subdirectory of the VisualWorks installation).DbIdentifier: bear73DbTrace: 491487DbUsername: nrossDbVersion: 8.2 - 2DevelopmentPrerequisites: #(#(#any 'DLLCC' '') #(#any 'OracleEXDI' ''))HideSource: falsePackageName: OracleThapiEXDIParcel: #('OracleThapiEXDI')ParcelName: OracleThapiEXDIPrerequisiteParcels: #(#('OracleEXDI' ''))PrintStringCache: (8.2 - 2,nross)SaveSource: trueVersion: 8.2 - 2Date: 1:31:03 PM June 3, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (jun16.1) of June 3, 2016 on June 3, 2016 at 1:31:03 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>OracleThreadedInterface</name><environment>Database</environment><super>Database.OracleInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.OracleThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>OracleThapiEXDI</package></attributes></class><comment><class-id>Database.OracleThreadedInterface</class-id><body>This class defines multi-threaded calling conventions for the Oracle OCI.</body></comment><class><name>Oracle64BitThreadedInterface</name><environment>Database</environment><super>Database.OracleThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.Oracle64BitThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>OracleThapiEXDI</package></attributes></class><comment><class-id>Database.Oracle64BitThreadedInterface</class-id><body>This class defines 64-bit multi-threaded calling conventions for the Oracle OCI. It should only be used in 64-bit images, running on a 64-bit VM.The 64-bit VM regards "long int" as a 64-bit integer, but the Oracle libraries are faithful to the original spec, which uses 32-bit integers. Thus, a few changes were made to the 64-bit classes, almost entirely directed at changing the word "long int" to "int", which is seen by the 64-bit VM as a 32-bit integer.</body></comment><class><name>OracleSolarisThreadedInterface</name><environment>Database</environment><super>Database.OracleThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.OracleSolarisThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libclntsh.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>OracleThapiEXDI</package></attributes></class><comment><class-id>Database.OracleSolarisThreadedInterface</class-id><body>This class defines multi-threaded calling conventions for the Oracle OCI on the Solaris platform.   Please refer to the environment variable on your machine for the path containing necessary Oracle library files.</body></comment><class><name>OracleMacOSXThreadedInterface</name><environment>Database</environment><super>Database.OracleThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.OracleMacOSXThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libclntsh.dylib</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>OracleThapiEXDI</package></attributes></class><comment><class-id>Database.OracleMacOSXThreadedInterface</class-id><body>This class defines multi-threaded calling conventions for the Oracle OCI on the MacOSX (Intel) platform.   Please refer to the environment variable on your machine for the path containing necessary Oracle library files.</body></comment><class><name>OracleAIXThreadedInterface</name><environment>Database</environment><super>Database.OracleThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.OracleAIXThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libclntsh.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>OracleThapiEXDI</package></attributes></class><comment><class-id>Database.OracleAIXThreadedInterface</class-id><body>This class defines multi-threaded calling conventions for the Oracle OCI on the AIX platform.  Please refer to the environment variable on your machine for the path containing necessary Oracle library files.</body></comment><class><name>OracleThreadedSession</name><environment>Database</environment><super>Database.OracleSession</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Oracle THAPI</category><attributes><package>OracleThapiEXDI</package></attributes></class><comment><class-id>Database.OracleThreadedSession</class-id><body>OracleSession is the concrete implementation of multi-threaded session services using the Oracle OCI library.</body></comment><class><name>OracleNT64ThreadedInterface</name><environment>Database</environment><super>Database.Oracle64BitThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.OracleNT64ThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>oci.dll</item> <item>advapi32.dll</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>OracleThapiEXDI</package></attributes></class><comment><class-id>Database.OracleNT64ThreadedInterface</class-id><body>This class defines multi-threaded calling conventions for the Oracle OCI on the 64-bit Windows (Intel) platform.   Please refer to the environment variable on your machine for the path containing necessary Oracle library files.</body></comment><class><name>OracleMacOSX64ThreadedInterface</name><environment>Database</environment><super>Database.Oracle64BitThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.OracleMacOSX64ThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libclntsh.dylib</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>OracleThapiEXDI</package></attributes></class><comment><class-id>Database.OracleMacOSX64ThreadedInterface</class-id><body>This class defines multi-threaded calling conventions for the Oracle OCI on the 64-bit MacOSX (Intel) platform.   Please refer to the environment variable on your machine for the path containing necessary Oracle library files.</body></comment><class><name>OracleNTThreadedInterface</name><environment>Database</environment><super>Database.OracleThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.OracleNTThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>oci.dll</item> <item>advapi32.dll</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>OracleThapiEXDI</package></attributes></class><comment><class-id>Database.OracleNTThreadedInterface</class-id><body>This class defines multi-threaded calling conventions for the Oracle OCI on the Windows NT platform.   Please refer to the environment variable on your machine for the path containing necessary Oracle library files.</body></comment><class><name>OracleLinuxThreadedInterface</name><environment>Database</environment><super>Database.OracleThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.OracleLinuxThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libclntsh.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>OracleThapiEXDI</package></attributes></class><comment><class-id>Database.OracleLinuxThreadedInterface</class-id><body>This class defines multi-threaded calling conventions for the Oracle OCI on the Linux (Intel) platform.   Please refer to the environment variable on your machine for the path containing necessary Oracle library files.</body></comment><class><name>OracleThreadedConnection</name><environment>Database</environment><super>Database.OracleConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>connectionPool </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Oracle THAPI</category><attributes><package>OracleThapiEXDI</package></attributes></class><comment><class-id>Database.OracleThreadedConnection</class-id><body>OracleConnection is the concrete class implementation of multi-threaded connection services using the Oracle OCI library.</body></comment><class><name>OracleSolaris64ThreadedInterface</name><environment>Database</environment><super>Database.Oracle64BitThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.OracleSolaris64ThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libclntsh.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>OracleThapiEXDI</package></attributes></class><comment><class-id>Database.OracleSolaris64ThreadedInterface</class-id><body>This class defines multi-threaded calling conventions for the Oracle OCI on the 64-bit Solaris platform.   Please refer to the environment variable on your machine for the path containing necessary Oracle library files.</body></comment><class><name>OracleConnectionPool</name><environment>Database</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>henvHolder herrHolder hcpoolHolder environment username password poolName poolNameLen connMin connMax connIncr connection connections encoding unicodeEncoding oracleEncodingId oracleUnicodeEncodingId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Oracle</category><attributes><package>OracleThapiEXDI</package></attributes></class><comment><class-id>Database.OracleConnectionPool</class-id><body>OracleConnectionPool is the concrete class implementation of connection pooling using the Oracle (9 and above) OCI library.Instance Variables	connection		&lt;OracleThreadedConnection&gt;	connection is used to connect to the API in OracleThapiEXDI.	connections		&lt;Set&gt;	connections is the collection of the connections using this connection pool.	connIncr		 &lt;SmallInteger&gt;		The next increment for connections to be opened to the database if the current number of connections are less than connMax.	connMax		&lt;SmallInteger&gt;	The maximum number of connections that can be opened to the database.	connMin		&lt;SmallInteger&gt;	The minimum number of connections in the connection pool.	poolName		&lt;String&gt;	The name of the connection pool connected to.	poolNameLen	&lt;SmallInteger&gt;	The length of the string pointed to by poolName.	hcpoolHolder 	&lt;ValueHolder&gt;	A private value holder which remembers the pointer for the current OCI 	environment handle.	henvHolder		&lt;ValueHolder on: (CPointer | nil)&gt;		A private value holder which remembers the pointer for the current OCI 	environment handle, if any.  The value holder is shared with the executor object.	herrHolder		&lt;ValueHolder on: (CPointer | nil)&gt;		A private value holder which remembers the pointer for the current OCI error handle, if any.  The value holder is shared with the executor object.	username			&lt;String | nil&gt;			Name of current user; driver will signal if required and == nil.	password			&lt;String | nil&gt;		Password of current user; driver will signal if required and == nil.	environment			&lt;String | nil&gt;			Logical or physical name for environment; driver will signal if required and == nil.	encoding	&lt;Symbol&gt;		A symbol remembers the encoding selection.	unicodeEncoding 	&lt;Symbol&gt;		A symbol remembers the encoding selection for Unicode columns.	oracleEncodingId &lt;Integer&gt;			An integer which remembers the Oracle client-side character set ID. 	oracleUnicodeEncodingId &lt;Integer&gt;		An integer which remembers the Oracle client-side national character set ID. </body></comment><class><name>OracleLinux64ThreadedInterface</name><environment>Database</environment><super>Database.Oracle64BitThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.OracleLinux64ThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libclntsh.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>OracleThapiEXDI</package></attributes></class><comment><class-id>Database.OracleLinux64ThreadedInterface</class-id><body>This class defines multi-threaded calling conventions for the Oracle OCI on the 64-bit Linux (Intel) platform.   Please refer to the environment variable on your machine for the path containing necessary Oracle library files.</body></comment><shared-variable><name>OracleThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>OracleThapiEXDI</package></attributes></shared-variable><shared-variable><name>OracleSolarisThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>OracleThapiEXDI</package></attributes></shared-variable><shared-variable><name>OracleLinux64ThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>OracleThapiEXDI</package></attributes></shared-variable><shared-variable><name>OracleSolaris64ThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>OracleThapiEXDI</package></attributes></shared-variable><shared-variable><name>Oracle64BitThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>OracleThapiEXDI</package></attributes></shared-variable><shared-variable><name>OracleLinuxThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>OracleThapiEXDI</package></attributes></shared-variable><shared-variable><name>OracleMacOSXThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>OracleThapiEXDI</package></attributes></shared-variable><shared-variable><name>OracleMacOSX64ThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>OracleThapiEXDI</package></attributes></shared-variable><shared-variable><name>OracleNT64ThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>OracleThapiEXDI</package></attributes></shared-variable><shared-variable><name>OracleNTThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>OracleThapiEXDI</package></attributes></shared-variable><shared-variable><name>OracleAIXThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>OracleThapiEXDI</package></attributes></shared-variable><methods><class-id>Database.OracleThreadedInterface</class-id> <category>defines</category><body package="OracleThapiEXDI">OCI_ATTR_CONN_BUSY_COUNT	&lt;C: #define  OCI_ATTR_CONN_BUSY_COUNT  179  	&gt;</body><body package="OracleThapiEXDI">OCI_ATTR_CONN_OPEN_COUNT	&lt;C: #define  OCI_ATTR_CONN_OPEN_COUNT  180  	&gt;</body><body package="OracleThapiEXDI">OCI_ATTR_CONN_TIMEOUT	&lt;C: #define  OCI_ATTR_CONN_TIMEOUT  181  	&gt;</body><body package="OracleThapiEXDI">OCI_CPOOL	&lt;C: #define OCI_CPOOL 0x0200	&gt;</body><body package="OracleThapiEXDI">OCI_CPOOL_REINITIALIZE	&lt;C: #define OCI_CPOOL_REINITIALIZE 0x111	&gt;</body><body package="OracleThapiEXDI">OCI_HTYPE_CPOOL	&lt;C: #define OCI_HTYPE_CPOOL  26  	&gt;</body></methods><methods><class-id>Database.OracleThreadedInterface</class-id> <category>types</category><body package="OracleThapiEXDI">OCICPool	&lt;C: typedef struct __OCICPool  OCICPool&gt;</body></methods><methods><class-id>Database.OracleThreadedInterface</class-id> <category>structs</category><body package="OracleThapiEXDI">__OCICPool	&lt;C: struct __OCICPool&gt;</body></methods><methods><class-id>Database.Oracle64BitThreadedInterface</class-id> <category>types</category><body package="OracleThapiEXDI">sb4	&lt;C: typedef signed int sb4&gt;</body><body package="OracleThapiEXDI">ub4	&lt;C: typedef unsigned int ub4&gt;</body></methods><methods><class-id>Database.OracleSolarisThreadedInterface class</class-id> <category>private</category><body package="OracleThapiEXDI">platformSymbol	"this must contain the platform symbol that will	match that returned by determinePlatformType."	^#sun5_unix</body></methods><methods><class-id>Database.OracleMacOSXThreadedInterface class</class-id> <category>private</category><body package="OracleThapiEXDI">platformSymbol	^#macOSX</body></methods><methods><class-id>Database.OracleAIXThreadedInterface class</class-id> <category>private</category><body package="OracleThapiEXDI">platformSymbol	"this must contain the platform symbol that will	match that returned by determinePlatformType."	^#aix_unix</body></methods><methods><class-id>Database.OracleThreadedSession class</class-id> <category>class initialization</category><body package="OracleThapiEXDI">initialize	super initialize.	self install.</body></methods><methods><class-id>Database.OracleThreadedSession class</class-id> <category>private-accessing</category><body package="OracleThapiEXDI">connectionClass	^OracleThreadedConnection</body></methods><methods><class-id>Database.OracleNT64ThreadedInterface class</class-id> <category>private</category><body package="OracleThapiEXDI">platformSymbol	"this must contain the platform symbol that will	match that returned by determinePlatformType."	^#nt64</body></methods><methods><class-id>Database.OracleMacOSX64ThreadedInterface class</class-id> <category>private</category><body package="OracleThapiEXDI">platformSymbol	"this must contain the platform symbol that will	match that returned by determinePlatformType."	^#macOSX64</body></methods><methods><class-id>Database.OracleNTThreadedInterface class</class-id> <category>private</category><body package="OracleThapiEXDI">platformSymbol	"this must contain the platform symbol that will	match that returned by determinePlatformType."	^#nt</body></methods><methods><class-id>Database.OracleLinuxThreadedInterface class</class-id> <category>private</category><body package="OracleThapiEXDI">platformSymbol	"this must contain the platform symbol that will	match that returned by determinePlatformType."	^#linux_i386_unix</body></methods><methods><class-id>Database.OracleThreadedConnection</class-id> <category>testing</category><body package="OracleThapiEXDI">isNonBlocking	^true</body></methods><methods><class-id>Database.OracleThreadedConnection</class-id> <category>private-execution</category><body package="OracleThapiEXDI">acquireExternal: aPassword	"Acquire the external resources involved with a connection to the 	SQL-environment."	| xif name pw env pool useConnectionPool |	xif := self class xif.	self authenticationMode == xif OCI_CRED_EXT ifTrue: [		name := ''.		pw := ''.	] ifFalse: [		name := self username.		pw := aPassword.	].	pool := self connectionPool.	useConnectionPool := (pool class name  == #OracleConnectionPool).	useConnectionPool ifTrue: [		env := pool environment.	] ifFalse: [		env := self environment.	].	env isNil ifTrue:		[ env := self class defaultEnvironment ].	[ env isString ] whileFalse:		[ env := self class requiredEnvironmentSignal raiseRequest  ].	env := self class mapLogical: env.	[ "Begin unwind protection (1)"		"Allocate necessary handles."		useConnectionPool ifFalse: [ 			self supportEnvNlsCreate ifTrue: [				self unprotectedAllocHenvWithNls			] ifFalse: [				self unprotectedAllocHenv			] 		].		["Begin unwind protection (2)"		useConnectionPool ifTrue: [			self serverAttachConnectionPoolExternal.		] ifFalse: [			self serverAttachEnvironmentExternal: (env asByteArrayEncoding: self encoding).		].		self setAttribute: self hsrvr type: #OCI_ATTR_SERVER 		  descriptor: self hsvcctx type: #OCI_HTYPE_SVCCTX.		( (name size == 0) and: [ pw size == 0 ]) ifTrue: [			self authenticationMode: xif OCI_CRED_EXT.		] ifFalse: [			self authenticationMode: xif OCI_CRED_RDBMS.			self setAttribute: name type: #OCI_ATTR_USERNAME  		  		descriptor: self hsess type: #OCI_HTYPE_SESSION .			self setAttribute: pw type: #OCI_ATTR_PASSWORD 		  		descriptor: self hsess type: #OCI_HTYPE_SESSION.		]. 		self setAttribute: self htxn type: #OCI_ATTR_TRANS               	descriptor: self hsvcctx type: #OCI_HTYPE_SVCCTX.		[ "Begin unwind protection (3)"			self sessionBeginExternal.			self setAttribute: self hsess type: #OCI_ATTR_SESSION 	      		descriptor: self hsvcctx type: #OCI_HTYPE_SVCCTX.		"End unwind protection (3)" ]			ifCurtailed:				[self  sessionEndExternal].		"End unwind protection (2)" ]			ifCurtailed: [self  serverDetachExternal].	"End unwind protection (1)" ]		ifCurtailed:			[	"Something went wrong so we must implicitly free any handles we've allocated."				useConnectionPool ifFalse: [ self  unprotectedFreeHenv ]. 			].	self singleStatementTransactions</body><body package="OracleThapiEXDI">dismissExternal	"Release the external resources."	[ "Begin unwind protection (1)"	self sessionEndExternal.	self serverDetachExternal.	"End unwind protection (1)" ] 		ensure: [ 	"Whether or not there was a failure, there's no point in hanging									on to stuff."					(self connectionPool class name == #OracleConnectionPool) ifFalse: [						self unprotectedFreeHenv 					].				].</body><body package="OracleThapiEXDI">serverAttachConnectionPoolExternal	"Create an access path to a data source for OCI operations."	| rtval xif herr hsrvr pool |		xif := self class xif.	self unprotectedAllocHsvcctx.	self unprotectedAllocHsrvr.	self unprotectedAllocHsess.	self unprotectedAllocHtxn.	pool := self connectionPool.	herr := self herr.	hsrvr := self hsrvr.	rtval := xif OCIServerAttach:hsrvr						   with: herr						   with: (pool poolName asByteArrayEncoding: self encoding)						   with: pool poolNameLen						   with: (xif OCI_CPOOL) .	(traceLevel &gt;= 1) ifTrue:	[(self traceStream) 	print: rtval; 	nextPutAll: ' = OCIAttachServer( hsrvr = ';	nextPutAll: (hsrvr referentAddress printStringRadix:16);	nextPutAll: ', herr = ';	nextPutAll: (herr referentAddress printStringRadix:16);	nextPutAll: ', environment = ';	nextPutAll: pool poolName;	nextPutAll: ', size = '; print: pool poolNameLen;	nextPutAll: ', #OCI_CPOOL )'.	self class trace: self emitTrace].	(rtval == xif OCI_SUCCESS) ifFalse: 		[ 	| errs |			errs := self getErrors.			^self class unableToConnectToSQLenvironmentSignal raiseWith: errs errorString: errs first dbmsErrorString ].</body><body package="OracleThapiEXDI">serverDetachExternal	| rtval xif hsrvr herr |		xif := self class xif.	hsrvr := self hsrvr.	herr := self herr.	[ "Begin unwind protection (1)"	rtval := xif OCIServerDetach: hsrvr 						    with: herr                                         with: xif OCI_DEFAULT.	(traceLevel &gt;= 1) ifTrue:	[(self traceStream) 	print: rtval; 	nextPutAll: ' = OCIServerDetach( hsrvr = ';	nextPutAll: ( hsrvr referentAddress printStringRadix:16);	nextPutAll: ', herr = ';	nextPutAll: ( herr referentAddress printStringRadix:16);	nextPutAll: ', OCI_DEFAULT )'.	self class trace: self emitTrace].	"End unwind protection (1)" ]		ensure:[ 	self unprotectedFreeHtxn.					self unprotectedFreeHsess.					self unprotectedFreeHsrvr.					self unprotectedFreeHsvcctx.					(self connectionPool class name == #OracleConnectionPool) ifFalse: [						self unprotectedFreeHerr  					].				].</body></methods><methods><class-id>Database.OracleThreadedConnection</class-id> <category>accessing</category><body package="OracleThapiEXDI">connectionPool	^connectionPool</body><body package="OracleThapiEXDI">connectionPool: aConnectionPool	connectionPool := aConnectionPool</body></methods><methods><class-id>Database.OracleThreadedConnection class</class-id> <category>class initialization</category><body package="OracleThapiEXDI">initialize	"OracleThreadedConnection initialize"	super initialize.		PlatformType := self platformType.	self initializeExternalInterfaceMap.	self initializeAttributeTypeConversionMap.</body><body package="OracleThapiEXDI">initializeAttributeTypeConversionMap	"OracleConnection initializeAttributeTypeConversionMap."	"Connection Pool Handle Attributes:"	AttributeTypeConversionMap 	   	add: #OCI_ATTR_CONN_TIMEOUT-&gt;#unsignedLongAt:;	   	add: #OCI_ATTR_CONN_BUSY_COUNT-&gt;#unsignedLongAt:;	   	add: #OCI_ATTR_CONN_OPEN_COUNT-&gt;#unsignedLongAt:</body><body package="OracleThapiEXDI">initializeExternalInterfaceMap	"self initializeExternalInterfaceMap"	xifMap := IdentityDictionary new.	self privateThreadedInterfaces do: [:each |		xifMap at: (each platformSymbol) put: each name]</body><body package="OracleThapiEXDI">privateThreadedInterfaces	"Return collection of loaded threaded interfaces	note - this method depends on the naming convention	that threaded interfaces have the word Threaded in them,	and non-threaded do not --	e.g. OracleThreadedNTInterface"	^OracleInterface withAllSubclasses 		select: [:ea |			(ea name indexOfSubCollection: 'Threaded' startingAt: 1) ~= 0]</body></methods><methods><class-id>Database.OracleThreadedConnection class</class-id> <category>private-accessing</category><body package="OracleThapiEXDI">interfaceClass	"Answer the class to use as the OracleInterface for the current platform."	| interfaceClassName | 	interfaceClassName := xifMap at: self platformType ifAbsent: [nil].	^self environment at: interfaceClassName ifAbsent: [nil]</body><body package="OracleThapiEXDI">sessionClass	"Answer the class to use for session objects associated with receiver."	^OracleThreadedSession</body></methods><methods><class-id>Database.OracleThreadedConnection class</class-id> <category>accessing</category><body package="OracleThapiEXDI">kind	^#OracleThreaded</body></methods><methods><class-id>Database.OracleThreadedConnection class</class-id> <category>private-instance creation</category><body package="OracleThapiEXDI">newForConnectionPool: aConnectionPool	"Answer a new OracleThreadedConnection associated with aConnectionPool."	| conn |	(conn := self basicNew) initialize.	conn connectionPool: aConnectionPool.	conn henv: aConnectionPool henv.	conn herr: aConnectionPool herr.	conn oracleEncodingId: aConnectionPool oracleEncodingId.	conn encoding: aConnectionPool encoding.	conn oracleUnicodeEncodingId: aConnectionPool oracleUnicodeEncodingId.	conn unicodeEncoding: aConnectionPool unicodeEncoding.	aConnectionPool connections add: conn.	^conn</body></methods><methods><class-id>Database.OracleThreadedConnection class</class-id> <category>testing</category><body package="OracleThapiEXDI">isThreaded		^true</body></methods><methods><class-id>Database.OracleSolaris64ThreadedInterface class</class-id> <category>private</category><body package="OracleThapiEXDI">platformSymbol	"this must contain the platform symbol that will	match that returned by determinePlatformType."	^#unix_sysV_sun_solaris64</body></methods><methods><class-id>Database.OracleConnectionPool</class-id> <category>pool</category><body package="OracleThapiEXDI">create	"Acquire the external resources involved with a connection pool to the 	SQL-environment."	| xif name pw env connClass conn |	connClass := self class connectionClass.	xif := connClass xif.	conn := self connection.	name := self username.	[ name isString ] whileFalse:		[ name := connClass requiredUsernameSignal raiseRequest ].	pw := self password.	[ pw isString ] whileFalse:		[ pw := connClass requiredPasswordSignal raiseRequest  ].	(env := self environment) isNil ifTrue:		[ env := connClass defaultEnvironment ].	[ env isString ] whileFalse:		[ env := connClass requiredEnvironmentSignal raiseRequest  ].	env := connClass mapLogical: env.	conn oracleEncodingId: self oracleEncodingId.	conn encoding: self encoding.	conn oracleUnicodeEncodingId: self oracleUnicodeEncodingId.	conn unicodeEncoding: self unicodeEncoding.	[ "Begin unwind protection (1)"		"Allocate necessary handles."		conn supportEnvNlsCreate ifTrue: [			conn unprotectedAllocHenvWithNls		] ifFalse: [			conn unprotectedAllocHenv		]. 		conn unprotectedAllocHerr.		self encoding isNil ifTrue: [			self encoding: conn encoding		].		self henv: conn henv.		self herr: conn herr.		["Begin unwind protection (2)"		self connectionPoolCreateExternal.		( (name size == 0) and: [ pw size == 0 ]) ifTrue: [			conn authenticationMode: xif OCI_CRED_EXT.		] ifFalse: [			conn authenticationMode: xif OCI_CRED_RDBMS.		]. 		"End unwind protection (2)" ]		ifCurtailed:			[self  unprotectedFreeHcpool ].	"End unwind protection (1)" ]		ifCurtailed:			[	"Something went wrong so we must implicitly free any handles we've allocated."				conn  unprotectedFreeHerr.				conn  unprotectedFreeHenv.			].</body><body package="OracleThapiEXDI">destroy	| conns conn |	(conns := self connections) isEmpty ifFalse: [		conns do: [ :each | (each isConnected) ifTrue:[ each disconnect ]].	].	conn := self connection.	[ "Begin unwind protection (1)"		self connectionPoolDestroyExternal.	"End unwind protection (1)" ]		ensure:[ self unprotectedFreeHcpool.				conn unprotectedFreeHerr.				conn unprotectedFreeHenv ].</body><body package="OracleThapiEXDI">getConnection	^self class connectionClass newForConnectionPool: self</body><body package="OracleThapiEXDI">getConnectionBusyCount	"Returns the number of busy connections."	^self connection 		getAttribute:#OCI_ATTR_CONN_BUSY_COUNT		descriptor: self hcpool		type: #OCI_HTYPE_CPOOL</body><body package="OracleThapiEXDI">getConnectionOpenCount	"Returns the number of open connections."	^self connection 		getAttribute:#OCI_ATTR_CONN_OPEN_COUNT		descriptor: self hcpool		type: #OCI_HTYPE_CPOOL</body><body package="OracleThapiEXDI">getConnectionTimeout 	"Get connections timeout value (in seconds)."	^self connection 		getAttribute:#OCI_ATTR_CONN_TIMEOUT		descriptor: self hcpool		type: #OCI_HTYPE_CPOOL</body><body package="OracleThapiEXDI">setConnectionTimeout: anInteger 	"Connections idle for more than this time value (in seconds) are terminated, if this attribute is not set, the connections are never timed out."	self connection 		setAttribute: anInteger		type: #OCI_ATTR_CONN_TIMEOUT		descriptor: self hcpool		type: #OCI_HTYPE_CPOOL</body></methods><methods><class-id>Database.OracleConnectionPool</class-id> <category>private-accessing</category><body package="OracleThapiEXDI">connection	^connection</body><body package="OracleThapiEXDI">connection: aConnection	connection := aConnection</body><body package="OracleThapiEXDI">hcpool	^hcpoolHolder value</body><body package="OracleThapiEXDI">hcpool: aCPointerOrNil	hcpoolHolder value: aCPointerOrNil.</body><body package="OracleThapiEXDI">hcpoolHolder	^hcpoolHolder</body><body package="OracleThapiEXDI">hcpoolHolder: aValueHolder	hcpoolHolder := aValueHolder</body><body package="OracleThapiEXDI">henv	^henvHolder value</body><body package="OracleThapiEXDI">henv: aCPointerOrNil	henvHolder value: aCPointerOrNil.</body><body package="OracleThapiEXDI">henvHolder	^henvHolder</body><body package="OracleThapiEXDI">henvHolder: aValueHolder	henvHolder := aValueHolder</body><body package="OracleThapiEXDI">herr	^herrHolder value</body><body package="OracleThapiEXDI">herr: aCPointerOrNil	herrHolder value: aCPointerOrNil.</body><body package="OracleThapiEXDI">herrHolder	^herrHolder</body><body package="OracleThapiEXDI">herrHolder: aValueHolder	herrHolder := aValueHolder</body></methods><methods><class-id>Database.OracleConnectionPool</class-id> <category>accessing</category><body package="OracleThapiEXDI">connIncr	"Get the next increment for connections to be opened to the database if the current number of connections are less than connMax."	^connIncr</body><body package="OracleThapiEXDI">connIncr: anInteger	"Set the next increment for connections to be opened to the database if the current number of connections are less than connMax."	connIncr := anInteger</body><body package="OracleThapiEXDI">connMax	"Get the maximum number of connections that can be opened to the database."	^connMax</body><body package="OracleThapiEXDI">connMax: anInteger	"Set the maximum number of connections that can be opened to the database."	connMax := anInteger</body><body package="OracleThapiEXDI">connMin	"Get the minimum number of connections in the connection pool."	^connMin</body><body package="OracleThapiEXDI">connMin: anInteger	"Set the minimum number of connections in the connection pool."	connMin := anInteger</body><body package="OracleThapiEXDI">connections	"Returns the collection of the connections in the connection pool."	^connections</body><body package="OracleThapiEXDI">encoding	^encoding</body><body package="OracleThapiEXDI">encoding: aSymbol	encoding := aSymbol</body><body package="OracleThapiEXDI">environment	"Answer the environment to use when connecting to the SQL-environment."	^environment</body><body package="OracleThapiEXDI">environment: aString 	"Set the environment to use when connecting to the SQL-environment.	An empty string should be used to specify the 'default' environment.  If the	environment is nil, the driver will raise a proceedable exception	(requiredEnvironmentSignal on a connection class) when connecting."	environment := aString</body><body package="OracleThapiEXDI">oracleEncodingId	^oracleEncodingId</body><body package="OracleThapiEXDI">oracleEncodingId: anEncodingId	oracleEncodingId := anEncodingId</body><body package="OracleThapiEXDI">oracleUnicodeEncodingId	^oracleUnicodeEncodingId</body><body package="OracleThapiEXDI">oracleUnicodeEncodingId: anEncodingId	oracleUnicodeEncodingId := anEncodingId</body><body package="OracleThapiEXDI">password	"Answer the password to use when connecting to the SQL-environment."	^password</body><body package="OracleThapiEXDI">password: aString 	"Set the password to use when connecting to the SQL-environment. 	Passwords are not required by all database systems (or on all platforms). 	An empty string should be used for the no-password case.  If the password	is nil, the driver will raise a proceedable exception (requiredPasswordSignal	on a connection class) when connecting."	password := aString</body><body package="OracleThapiEXDI">poolName	"Returns the name of the connection pool."	^poolName</body><body package="OracleThapiEXDI">poolName: aString	"Sets the name of the connection pool."	poolName := aString</body><body package="OracleThapiEXDI">poolNameLen	"Gets the length of the string pointed to by poolName."	^poolNameLen</body><body package="OracleThapiEXDI">poolNameLen: anInteger	"Sets the length of the string pointed to by poolName."	poolNameLen := anInteger</body><body package="OracleThapiEXDI">unicodeEncoding	"Answer the character set name for Unicode columns."	^unicodeEncoding</body><body package="OracleThapiEXDI">unicodeEncoding: anEncoding	unicodeEncoding := anEncoding</body><body package="OracleThapiEXDI">username	"Answer the username to use when connecting to the SQL-environment."	^username</body><body package="OracleThapiEXDI">username: aString	"Set the username to use when connecting to the SQL-environment.	An empty string should be used  to connect as the default user unless the driver	requires something else.  If the username is nil, the driver will raise a proceedable	exception (requiredUsernameSignal on a connection class) when connecting."	username := aString</body></methods><methods><class-id>Database.OracleConnectionPool</class-id> <category>private-handles</category><body package="OracleThapiEXDI">unprotectedAllocHcpool		| xif connClass conn hcpoolPointerPointer |	connClass := self class connectionClass.	xif := connClass xif.	conn := self connection.	["Begin unwind protection (1)"	hcpoolPointerPointer := xif OCICPool pointerType perform: xif mallocSelector with: 1.	conn allocHandlePointerExternal: hcpoolPointerPointer type: #OCI_HTYPE_CPOOL.	self hcpool: hcpoolPointerPointer contents.	"End unwind protection (1)"] 		ensure: [ hcpoolPointerPointer == nil ifFalse:  [ hcpoolPointerPointer freePointer ] ].</body><body package="OracleThapiEXDI">unprotectedFreeHcpool	 | hcpool |	self connection freeHandlePointerExternal:  self hcpool type: #OCI_HTYPE_CPOOL.	(hcpool := self hcpool) == nil ifFalse:  [ hcpool freePointer ].</body></methods><methods><class-id>Database.OracleConnectionPool</class-id> <category>initialize-release</category><body package="OracleThapiEXDI">initialize	"Establish initial value for instance variables.	OracleConnectionPool initialize."	henvHolder := nil asValue. 	herrHolder := nil asValue. 	hcpoolHolder := nil asValue.	connMin := 1.	connMax := 5.	connIncr := 1.	connection := self class connectionClass new.	connections := Set new.	self oracleEncodingId: 0.	self oracleUnicodeEncodingId: 0.</body></methods><methods><class-id>Database.OracleConnectionPool</class-id> <category>private-execution</category><body package="OracleThapiEXDI">connectionPoolCreateExternal	"Create a connection pool."	| rtval xif herr hcpool henv connClass conn szPoolNamePointerPointer poolNameLenPointer poolNamePointerType poolNameLenPointerType address lenAddress encodedEnv encodedUsername encodedPassword |	connClass := self class connectionClass.	xif := connClass xif.	conn := self connection.		henv := self henv.	herr := self herr.	self unprotectedAllocHcpool.	hcpool := self hcpool.	encodedEnv := self environment asByteArrayEncoding: self encoding.	encodedUsername := self username asByteArrayEncoding: self encoding.	encodedPassword := self password asByteArrayEncoding: self encoding.	[ "Begin unwind protection (1)"	poolNamePointerType := xif OraText pointerType.	address := poolNamePointerType primMalloc: 128 pointerKind: poolNamePointerType kind.	szPoolNamePointerPointer := CPointer new newDatum: address ofType: poolNamePointerType pointerType.	poolNameLenPointerType := CIntegerType short pointerType.	lenAddress := poolNameLenPointerType primMalloc: 4 pointerKind: poolNameLenPointerType kind.     poolNameLenPointer := CPointer new newDatum: lenAddress ofType: poolNameLenPointerType. 	rtval := xif OCIConnectionPoolCreate: henv 				with: herr 				with: hcpool 				with: szPoolNamePointerPointer 				with: poolNameLenPointer 				with: encodedEnv				with: encodedEnv size 				with: self connMin 				with: self connMax 				with: self connIncr 				with: encodedUsername 				with: encodedUsername size				with: encodedPassword 				with: encodedPassword size				with: (xif OCI_DEFAULT).		poolName := szPoolNamePointerPointer contents copyCStringFromHeap: self encoding asUppercase asSymbol.		poolNameLen := poolNameLenPointer contents.	"End unwind protection (1)" ]		ensure:[  			szPoolNamePointerPointer == nil ifFalse:  [ szPoolNamePointerPointer freePointer ].			poolNameLenPointer == nil ifFalse:  [ poolNameLenPointer freePointer ].		].	(rtval == xif OCI_SUCCESS) ifFalse: 		[ 	| errs |			errs := conn  getErrors.			^connClass unableToCreateConnectionPoolSignal raiseWith: errs errorString: errs first dbmsErrorString ].</body><body package="OracleThapiEXDI">connectionPoolDestroyExternal	"Destroy the connection pool."	| rtval xif herr hcpool connClass conn |	connClass := self class connectionClass.	conn := self connection.	xif := connClass xif.	herr := self herr.	hcpool := self hcpool.	rtval := xif OCIConnectionPoolDestroy: hcpool 			with: herr 			with: (xif OCI_DEFAULT).	(rtval == xif OCI_SUCCESS) ifFalse:		[| errs |		errs := conn  getErrors.		^connClass unableToDestroyConnectionPoolSignal raiseWith: errs errorString: errs first dbmsErrorString].</body></methods><methods><class-id>Database.OracleConnectionPool class</class-id> <category>private-accessing</category><body package="OracleThapiEXDI">connectionClass	"Answer the class to use for connection objects associated with the receiver."	^OracleThreadedConnection</body></methods><methods><class-id>Database.OracleConnectionPool class</class-id> <category>instance creation</category><body package="OracleThapiEXDI">new	^self basicNew initialize</body></methods><methods><class-id>Database.OracleConnectionPool class</class-id> <category>examples</category><body package="OracleThapiEXDI">example1	" Create the connection pool, the username and password are not necessarily the same as that in each connection in the pool. "	"OracleConnectionPool example1"	| aBlock pool mutex isWorking answers numBusy data |	pool := OracleConnectionPool new.	pool		username: 'scott';		password: 'tiger';		environment: 'jazzbo81.cincom.com'.	pool create.	Transcript show: 'New pool with timeout = ' , pool getConnectionTimeout printString; cr.	answers := Dictionary new.	isWorking := Semaphore new.	mutex := Semaphore forMutualExclusion.	aBlock := 			[:tableName | 			| conn sess ansStrm |			conn := pool getConnection.			conn				username: 'scott';				password: 'tiger'.			conn connect.			sess := conn getSession.			sess prepare: 'select * from ' , tableName.			sess execute.			ansStrm := sess answer.			data := ansStrm upToEnd.			sess disconnect.			conn disconnect.			mutex critical: 					[answers at: tableName put: data.					"Don't signal until all three connections have been put to rest."					answers size = 3 ifTrue: [isWorking signal]]].	"Start the three simultaneous connection processes."	#('emp' 'bonus' 'dept') do: 			[:tableName | 			| proc |			proc := aBlock newProcessWithArguments: (Array with: tableName).			proc priority: 30.			proc resume].	"Just to see what they're doing, print out how many connections are active."	[(numBusy := pool getConnectionBusyCount) = 0] whileTrue: 			[(Delay forMilliseconds: 50) wait.			Transcript show: 'n=' , numBusy printString; cr].	[(numBusy := pool getConnectionBusyCount) &gt; 0] whileTrue: 			[(Delay forMilliseconds: 50) wait.			Transcript show: 'n=' , numBusy printString; cr].	Transcript show: 'n=' , numBusy printString; cr; cr.	" Wait until all of the work is done before the connection pool is destroyed."	isWorking wait.	" Destroy the connection pool."	pool destroy.	"Now print the answers collected."	answers values do: 			[:ans | 			Transcript show: ans printString; cr; cr]</body></methods><methods><class-id>Database.OracleLinux64ThreadedInterface class</class-id> <category>private</category><body package="OracleThapiEXDI">platformSymbol	"this must contain the platform symbol that will	match that returned by determinePlatformType."	^#linux_x86_64_unix</body></methods><methods><class-id>Database.OracleConnection class</class-id> <category>threaded</category><body package="OracleThapiEXDI">newBeThreaded	"return a new instance that will run under thapi"	^self threadedConnectionClass new</body><body package="OracleThapiEXDI">threadedConnectionClass	^OracleThreadedConnection</body></methods><methods><class-id>Database.OracleThreadedInterface</class-id> <category>procedures - binding</category><body package="OracleThapiEXDI">OCIBindByName: stmtp with: bindp with: errhp with: placeholder with: placeh_len with: valuep with: value_sz with: dty with: indp with: alenp with: rcodep with: maxarr_len with: curelep with: mode	&lt;C: sword _threaded OCIBindByName(OCIStmt * stmtp, OCIBind * * bindp, OCIError * errhp, const OraText * placeholder, sb4 placeh_len, void * valuep, sb4 value_sz, ub2 dty, void * indp, ub2 * alenp, ub2 * rcodep, ub4 maxarr_len, ub4 * curelep, ub4 mode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCIBindByPos: stmtp with: bindp with: errhp with: position with: valuep with: value_sz with: dty with: indp with: alenp with: rcodep with: maxarr_len with: curelep with: mode	&lt;C: sword _threaded OCIBindByPos(OCIStmt * stmtp, OCIBind * * bindp, OCIError * errhp, ub4 position, void * valuep, sb4 value_sz, ub2 dty, void * indp, ub2 * alenp, ub2 * rcodep, ub4 maxarr_len, ub4 * curelep, ub4 mode)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Database.OracleThreadedInterface</class-id> <category>procedures-connection</category><body package="OracleThapiEXDI">OCIConnectionPoolCreate: envhp with: errhp with: poolhp with: poolName with: poolNameLen with: dblink with: dblinkLen with: connMin with: connMax with: connIncr with: poolUsername with: poolUserLen with: poolPassword with: poolPassLen with: mode	&lt;C: sword OCIConnectionPoolCreate(OCIEnv *envhp, OCIError *errhp, OCICPool *poolhp, OraText **poolName, sb4 *poolNameLen, const OraText *dblink, sb4 dblinkLen, ub4 connMin, ub4 connMax, ub4 connIncr, const OraText *poolUsername, sb4 poolUserLen, const OraText *poolPassword, sb4 poolPassLen, ub4 mode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCIConnectionPoolDestroy: poolhp with: errhp with: mode	&lt;C: sword OCIConnectionPoolDestroy ( OCICPool *poolhp, OCIError *errhp, ub4 mode )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCIServerAttach: srvhp with: errhp with: dblink with: dblink_len with: mode	&lt;C: sword _threaded OCIServerAttach(OCIServer * srvhp, OCIError * errhp, const OraText * dblink, sb4 dblink_len, ub4 mode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCIServerDetach: srvhp with: errhp with: mode	&lt;C: sword _threaded OCIServerDetach(OCIServer * srvhp, OCIError * errhp, ub4 mode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCISessionBegin: svchp with: errhp with: usrhp with: credt with: mode	&lt;C: sword _threaded OCISessionBegin(OCISvcCtx * svchp, OCIError * errhp, OCISession * usrhp, ub4 credt, ub4 mode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCISessionEnd: svchp with: errhp with: usrhp with: mode	&lt;C: sword _threaded OCISessionEnd(OCISvcCtx * svchp, OCIError * errhp, OCISession * usrhp, ub4 mode)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Database.OracleThreadedInterface</class-id> <category>procedures-initialize</category><body package="OracleThapiEXDI">OCIEnvInit: envp with: mode with: xtramem_sz with: usrmempp	&lt;C: sword _threaded OCIEnvInit(OCIEnv * * envp, ub4 mode, size_t xtramem_sz, void * * usrmempp)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Database.OracleThreadedInterface</class-id> <category>procedures - statement</category><body package="OracleThapiEXDI">OCIStmtExecute: svchp with: stmtp with: errhp with: iters with: rowoff with: snap_in with: snap_out with: mode	&lt;C: sword _threaded OCIStmtExecute(OCISvcCtx * svchp, OCIStmt * stmtp, OCIError * errhp, ub4 iters, ub4 rowoff, const OCISnapshot * snap_in, OCISnapshot * snap_out, ub4 mode)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCIStmtPrepare: stmtp with: errhp with: stmt with: stmt_len with: language with: mode	&lt;C: sword _threaded OCIStmtPrepare(OCIStmt * stmtp, OCIError * errhp, const OraText * stmt, ub4 stmt_len, ub4 language, ub4 mode)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Database.OracleThreadedInterface</class-id> <category>procedures - transaction</category><body package="OracleThapiEXDI">OCITransCommit: svchp with: errhp with: flags	&lt;C: sword _threaded OCITransCommit(OCISvcCtx * svchp, OCIError * errhp, ub4 flags)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCITransRollback: svchp with: errhp with: flags	&lt;C: sword _threaded OCITransRollback(OCISvcCtx * svchp, OCIError * errhp, ub4 flags)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCITransStart: svchp with: errhp with: timeout with: flags	&lt;C: sword _threaded OCITransStart(OCISvcCtx * svchp, OCIError * errhp, uword timeout, ub4 flags)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Database.OracleThreadedInterface</class-id> <category>procedures - defining</category><body package="OracleThapiEXDI">OCIDefineByPos: stmtp with: defnp with: errhp with: position with: valuep with: value_sz with: dty with: indp with: rlenp with: rcodep with: mode	&lt;C: sword _threaded OCIDefineByPos(OCIStmt * stmtp, OCIDefine * * defnp, OCIError * errhp, ub4 position, void * valuep, sb4 value_sz, ub2 dty, void * indp, ub2 * rlenp, ub2 * rcodep, ub4 mode)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Database.OracleThreadedInterface</class-id> <category>procedures-attributes</category><body package="OracleThapiEXDI">OCIAttrSet: trgthndlp with: trghndltyp with: attributep with: size with: attrtype with: errhp	&lt;C: sword _threaded OCIAttrSet(void * trgthndlp, ub4 trghndltyp, void * attributep, ub4 size, ub4 attrtype, OCIError * errhp)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCIDescribeAny: svchp with: errhp with: objptr with: objnm_len with: objptr_typ with: info_level with: objtyp  with: dschp 	&lt;C: sword _threaded OCIDescribeAny(OCISvcCtx * svchp, OCIError * errhp, const OraText * objptr, ub4 objnm_len, ub1 objptr_typ,  ub1 info_level, ub1 objtyp, OCIDescribe * dschp)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Database.OracleThreadedInterface</class-id> <category>procedures - timestamp</category><body package="OracleThapiEXDI">OCIDateTimeConstruct: hndl with: err with: datetime with: year with: month with: day with: hour with: min with: sec with: fsec with: timezone with: timezone_length	&lt;C: sword _threaded OCIDateTimeConstruct ( dvoid         *hndl,                             OCIError      *err,                             OCIDateTime   *datetime,                             sb2           year,                             ub1           month,                             ub1           day,                             ub1           hour,                             ub1           min,                             ub1           sec,                             ub4           fsec,                             OraText       *timezone,                             size_t        timezone_length )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCIDateTimeGetDate: hndl with: err with: datetime with: year with: month with: day	&lt;C: sword _threaded OCIDateTimeGetDate( dvoid *hndl, 				OCIError *err, 				const OCIDateTime *datetime, 				sb2 *year, 				ub1 *month, 				ub1 *day )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCIDateTimeGetTime: hndl with: err with: datetime with: hour with: min with: sec with: fsec	&lt;C: sword _threaded OCIDateTimeGetTime ( dvoid         *hndl,                           OCIError      *err,                           OCIDateTime   *datetime,                           ub1           *hour,                          ub1           *min,                           ub1           *sec,                           ub4           *fsec )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCIDateTimeGetTimeZoneName: hndl with: err with: datetime with: buf with: buflen	&lt;C: sword _threaded OCIDateTimeGetTimeZoneName ( dvoid              *hndl,                                   OCIError           *err,                                   const OCIDateTime  *datetime,                                   ub1                *buf,                                  ub4                *buflen)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCIDateTimeSysTimeStamp: hndl with: err with: datetime	&lt;C: sword _threaded OCIDateTimeSysTimeStamp ( dvoid          *hndl,                                OCIError       *err,                                 OCIDateTime    *datetime )&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Database.OracleThreadedInterface</class-id> <category>procedures - LOB</category><body package="OracleThapiEXDI">OCILobAssign: envp with: errhp with: lobp with: lobpp	&lt;C: sword _threaded OCILobAssign(OCIEnv *  envp, OCIError * errhp, OCILobLocator * lobp, OCILobLocator ** lobpp)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCILobGetChunkSize: svchp with: errhp with: lobp with: chunk_size	&lt;C: sword _threaded OCILobGetChunkSize(OCISvcCtx * svchp, OCIError * errhp, OCILobLocator * lobp, ub4 * chunk_size)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCILobGetLength: svchp with: errhp with: lobp with: lenp	&lt;C: sword _threaded OCILobGetLength(OCISvcCtx * svchp, OCIError * errhp, OCILobLocator * lobp, ub4 * lenp)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCILobLocatorAssign: svchp with: errhp with: lobp with: lobpp	&lt;C: sword _threaded OCILobLocatorAssign(OCISvcCtx * svchp, OCIError * errhp, OCILobLocator * lobp, OCILobLocator ** lobpp)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCILobRead: svchp with: errhp with: lobp with: amtp with: offset with: bufp with: bufl with: ctxp with: cbfp with: csid with: csfrm	&lt;C: sword _threaded OCILobRead(OCISvcCtx * svchp, OCIError * errhp, OCILobLocator * lobp, ub4 * amtp, ub4 offset, void * bufp, ub4 bufl, void * ctxp, sb4 (* cbfp)(void * ctxp, const void * bufp, ub4 len, ub1 piece), ub2 csid, ub1 csfrm)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OracleThapiEXDI">OCILobWrite: svchp with: errhp with: lobp with: amtp with: offset with: bufp with: buflen with: piece with: ctxp with: cbfp with: csid with: csfrm	&lt;C: sword _threaded OCILobWrite(OCISvcCtx * svchp, OCIError * errhp, OCILobLocator * lobp, ub4 * amtp, ub4 offset, void * bufp, ub4 buflen, ub1 piece, void * ctxp, sb4 (* cbfp)(void * ctxp, void * bufp, ub4 * len, ub1 * piece), ub2 csid, ub1 csfrm)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><initialize><class-id>Database.OracleThreadedSession</class-id></initialize><initialize><class-id>Database.OracleThreadedConnection</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>OracleConnection</name><environment>Database</environment><super>Database.ExternalDatabaseConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>henvHolder herrHolder hsvcctxHolder hsrvrHolder hsessHolder htxnHolder executionMode transactionMode authenticationMode useStatementCaching attributeLengthPointerHolder attributePointerHolder parameterPointerHolder descriptorPointerHolder unicodeEncoding oracleEncodingId oracleUnicodeEncodingId </inst-vars><class-inst-vars>signalMap libraryInitialized </class-inst-vars><imports></imports><category>Database-Oracle</category><attributes><package>OracleEXDI</package></attributes></class><class><name>OracleInterface</name><environment>Database</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>encoding </inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.OracleInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>OracleEXDI</package></attributes></class><class><name>OracleSession</name><environment>Database</environment><super>Database.ExternalDatabaseSession</super><private>false</private><indexed-type>none</indexed-type><inst-vars>resultsCache hstmtHolder herrHolder bindValuePointersHolder maxLongBytes queryIsPLSQL currentRowIndex totalRows rowsInBlock dependentLobs sqlPointerHolder maxBindSize answerLobProxy defaultDisplayLobSize isReleasedFromCacheHolder lobBufferSize reuseColumnBuffers definePointerHolder bindPointerHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Oracle</category><attributes><package>OracleEXDI</package></attributes></class></st-source>