<?xml version="1.0"?><st-source><!-- Name: SQLite3EXDINotice: Copyright 2006-2008 Olaf UrbanPortions © 2009-2015 Cincom Systems, Inc. All rights reserved.This utility is made available to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.Comment: Contains the sqlite3-specfic protocols for the External Database Interface (EXDI).Works with sqlite 3.x.  Some SQL UNION protocol requires 3.6.18 or better.1) SQLite3 version 3.6.8 and newer adds support for parentheses in FTS3 query patterns using the
	SQLITE_ENABLE_FTS3_PARENTHESIS
compile-time option.  Note that this is not the default - you must set it to true when compiling.  This option modifies the query pattern parser in FTS3 to (among other things) allow query expressions to contain nested parenthesis.  If it is absent, then SQLite3EXDI and StoreForSQLite3 will work OK, but some complex queries (wther hand-crafted or Glorp-created) can give wrong results.  For example,
	WHERE x = 2 AND: (y = 3 OR: z = 40)
will #sqlPrint as:
	x = 2 AND y = 3 OR z = 40
so if x = 1, y = 2, z = 40 then (doing left to right with no parens) we get an overall true instead of the expected false.

2) This utility works with 32-bit sqlite3 binaries in a 32-bit image and with 64-bit binaries in a 64-bit image.  On a 64-bit Windows machine, put the 64-bit sqlite3.dll in C:\Windows\System32 (or equivalent) and the 32-bit sqlite3.dll in C:\Windows\SysWOW64 (or equivalent), whereas on a 32-bit machine, put the 32-bit sqlite3.dll in C:\Windows\System32. On Linux, both libraries are listed in the SQLite3Interface class definition, so the first (32-bit) and then the second (64-bit) will be tried:  a given image should find the right library if both are visible to it.  If required, set LD_LIBRARY_PATH, or alter the preselected directories (e.g. you can copy the 64-bit 'libsqlite3.so' file into your installation's 'bin/linuxx86_64' directory and adjust the libraryDirectories entry accordingly).DbIdentifier: bear73DbTrace: 480260DbUsername: yliDbVersion: 8.2 - 3DevelopmentPrerequisites: #(#(#any 'Database' '') #(#any 'DLLCC' ''))PackageName: SQLite3EXDIParcel: #('SQLite3EXDI')ParcelName: SQLite3EXDIPrerequisiteDescriptions: #(#(#name 'Database') #(#name 'DLLCC' #applicability #store))PrerequisiteParcels: #(#('Database' ''))PrintStringCache: (8.2 - 3,yli)Version: 8.2 - 3Date: 12:36:23 PM December 11, 2015 --><time-stamp>From VisualWorks®, Pre-Release 8.2 (dec15.2) of December 11, 2015 on December 11, 2015 at 12:36:23 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SQLite3ColumnDescription</name><environment>Database</environment><super>Database.ExternalDatabaseColumnDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>internalType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SQLite3EXDI</category><attributes><package>SQLite3EXDI</package></attributes></class><class><name>SQLite3Interface</name><environment>Database</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.SQLite3InterfaceDictionary.*			</imports><category>SQLiteEXDI</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>[win]sqlite3.dll</item> <item>[linux]sqlite-3.so</item> <item>[linux]libsqlite3.so.0</item> <item>[mac]libsqlite3.dylib</item></libraryFiles><libraryDirectories><item>.</item> <item>[win]$(windir)</item> <item>[win]$(windir)\system32</item> <item>[win]$(VISUALWORKS)\bin\win</item> <item>[linux]$(VISUALWORKS)/bin/linux86</item> <item>[linux]/usr/local/lib</item> <item>[linux]/opt/local/lib</item> <item>[linux]/usr/lib</item> <item>[linux]/opt/lib</item> <item>[mac]/usr/local/lib</item> <item>[mac]/usr/lib</item></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>SQLite3EXDI</package></attributes></class><class><name>SQLite3ThreadedInterface</name><environment>Database</environment><super>Database.SQLite3Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.SQLite3ThreadedInterfaceDictionary.*			</imports><category>SQLite3EXDI</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>SQLite3EXDI</package></attributes></class><class><name>SQLite3Connection</name><environment>Database</environment><super>Database.ExternalDatabaseConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sqliteHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SQLite3EXDI</category><attributes><package>SQLite3EXDI</package></attributes></class><class><name>SQLite3NonThreadedInterface</name><environment>Database</environment><super>Database.SQLite3Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.SQLite3NonThreadedInterfaceDictionary.*			</imports><category>SQLite3EXDI</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>SQLite3EXDI</package></attributes></class><class><name>SQLite3ThreadedConnection</name><environment>Database</environment><super>Database.SQLite3Connection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SQLite3EXDI</category><attributes><package>SQLite3EXDI</package></attributes></class><class><name>SQLite3Cursor</name><environment>Database</environment><super>Database.ExternalDatabaseSession</super><private>false</private><indexed-type>none</indexed-type><inst-vars>statementHolder executeState skipNextFetch executeError sqlPointerHolder bindingPointersHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SQLite3EXDI</category><attributes><package>SQLite3EXDI</package></attributes></class><class><name>SQLite3ThreadedCursor</name><environment>Database</environment><super>Database.SQLite3Cursor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SQLite3EXDI</category><attributes><package>SQLite3EXDI</package></attributes></class><class><name>SQLite3Buffer</name><environment>Database</environment><super>Database.ExternalDatabaseBuffer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>index cursor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SQLite3EXDI</category><attributes><package>SQLite3EXDI</package></attributes></class><class><name>SQLite3Transaction</name><environment>Database</environment><super>Database.ExternalDatabaseTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SQLite3EXDI</category><attributes><package>SQLite3EXDI</package></attributes></class><shared-variable><name>SQLite3InterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>SQLite3EXDI</package></attributes></shared-variable><shared-variable><name>SQLite3NonThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>SQLite3EXDI</package></attributes></shared-variable><shared-variable><name>SQLite3ThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>SQLite3EXDI</package></attributes></shared-variable><shared-variable><name>AccessorMappings</name><environment>Database.SQLite3Buffer</environment><private>false</private><constant>false</constant><category>mapping</category><attributes><package>SQLite3EXDI</package></attributes></shared-variable><shared-variable><name>MutatorMappings</name><environment>Database.SQLite3Buffer</environment><private>false</private><constant>false</constant><category>mapping</category><attributes><package>SQLite3EXDI</package></attributes></shared-variable><shared-variable><name>RegisteredSQLiteConnections</name><environment>Database.SQLite3Connection</environment><private>false</private><constant>false</constant><category>maps</category><attributes><package>SQLite3EXDI</package></attributes></shared-variable><shared-variable><name>RegisteredSQLiteCursors</name><environment>Database.SQLite3Cursor</environment><private>false</private><constant>false</constant><category>maps</category><attributes><package>SQLite3EXDI</package></attributes></shared-variable><shared-variable><name>SignalMap</name><environment>Database.SQLite3Cursor</environment><private>false</private><constant>false</constant><category>maps</category><attributes><package>SQLite3EXDI</package></attributes></shared-variable><methods><class-id>Database.SQLite3ColumnDescription</class-id> <category>accessing</category><body package="SQLite3EXDI">internalType	^internalType</body><body package="SQLite3EXDI">internalType: anObject	internalType := anObject</body></methods><methods><class-id>Database.SQLite3Interface</class-id> <category>variables</category><body package="SQLite3EXDI">sqlite3_temp_directory	&lt;C: char * sqlite3_temp_directory&gt;</body><body package="SQLite3EXDI">sqlite3_temp_directory: aValue	&lt;C: char * sqlite3_temp_directory&gt;</body><body package="SQLite3EXDI">sqlite3_version	&lt;C: const char sqlite3_version[]&gt;</body><body package="SQLite3EXDI">sqlite3_version: aValue	&lt;C: const char sqlite3_version[]&gt;</body></methods><methods><class-id>Database.SQLite3Interface</class-id> <category>defines</category><body package="SQLite3EXDI">SQLITE3_TEXT	&lt;C: #define SQLITE3_TEXT 3	&gt;</body><body package="SQLite3EXDI">SQLITE_ABORT	&lt;C: #define SQLITE_ABORT 4	&gt;</body><body package="SQLite3EXDI">SQLITE_ALTER_TABLE	&lt;C: #define SQLITE_ALTER_TABLE 26	&gt;</body><body package="SQLite3EXDI">SQLITE_ANALYZE	&lt;C: #define SQLITE_ANALYZE 28	&gt;</body><body package="SQLite3EXDI">SQLITE_ANY	&lt;C: #define SQLITE_ANY 5	&gt;</body><body package="SQLite3EXDI">SQLITE_ATTACH	&lt;C: #define SQLITE_ATTACH 24	&gt;</body><body package="SQLite3EXDI">SQLITE_AUTH	&lt;C: #define SQLITE_AUTH 23	&gt;</body><body package="SQLite3EXDI">SQLITE_BLOB	&lt;C: #define SQLITE_BLOB 4	&gt;</body><body package="SQLite3EXDI">SQLITE_BUSY	&lt;C: #define SQLITE_BUSY 5	&gt;</body><body package="SQLite3EXDI">SQLITE_CANTOPEN	&lt;C: #define SQLITE_CANTOPEN 14	&gt;</body><body package="SQLite3EXDI">SQLITE_CONSTRAINT	&lt;C: #define SQLITE_CONSTRAINT 19	&gt;</body><body package="SQLite3EXDI">SQLITE_COPY	&lt;C: #define SQLITE_COPY 0	&gt;</body><body package="SQLite3EXDI">SQLITE_CORRUPT	&lt;C: #define SQLITE_CORRUPT 11	&gt;</body><body package="SQLite3EXDI">SQLITE_CREATE_INDEX	&lt;C: #define SQLITE_CREATE_INDEX 1	&gt;</body><body package="SQLite3EXDI">SQLITE_CREATE_TABLE	&lt;C: #define SQLITE_CREATE_TABLE 2	&gt;</body><body package="SQLite3EXDI">SQLITE_CREATE_TEMP_INDEX	&lt;C: #define SQLITE_CREATE_TEMP_INDEX 3	&gt;</body><body package="SQLite3EXDI">SQLITE_CREATE_TEMP_TABLE	&lt;C: #define SQLITE_CREATE_TEMP_TABLE 4	&gt;</body><body package="SQLite3EXDI">SQLITE_CREATE_TEMP_TRIGGER	&lt;C: #define SQLITE_CREATE_TEMP_TRIGGER 5	&gt;</body><body package="SQLite3EXDI">SQLITE_CREATE_TEMP_VIEW	&lt;C: #define SQLITE_CREATE_TEMP_VIEW 6	&gt;</body><body package="SQLite3EXDI">SQLITE_CREATE_TRIGGER	&lt;C: #define SQLITE_CREATE_TRIGGER 7	&gt;</body><body package="SQLite3EXDI">SQLITE_CREATE_VIEW	&lt;C: #define SQLITE_CREATE_VIEW 8	&gt;</body><body package="SQLite3EXDI">SQLITE_DELETE	&lt;C: #define SQLITE_DELETE 9	&gt;</body><body package="SQLite3EXDI">SQLITE_DENY	&lt;C: #define SQLITE_DENY 1	&gt;</body><body package="SQLite3EXDI">SQLITE_DETACH	&lt;C: #define SQLITE_DETACH 25	&gt;</body><body package="SQLite3EXDI">SQLITE_DONE	&lt;C: #define SQLITE_DONE 101	&gt;</body><body package="SQLite3EXDI">SQLITE_DROP_INDEX	&lt;C: #define SQLITE_DROP_INDEX 10	&gt;</body><body package="SQLite3EXDI">SQLITE_DROP_TABLE	&lt;C: #define SQLITE_DROP_TABLE 11	&gt;</body><body package="SQLite3EXDI">SQLITE_DROP_TEMP_INDEX	&lt;C: #define SQLITE_DROP_TEMP_INDEX 12	&gt;</body><body package="SQLite3EXDI">SQLITE_DROP_TEMP_TABLE	&lt;C: #define SQLITE_DROP_TEMP_TABLE 13	&gt;</body><body package="SQLite3EXDI">SQLITE_DROP_TEMP_TRIGGER	&lt;C: #define SQLITE_DROP_TEMP_TRIGGER 14	&gt;</body><body package="SQLite3EXDI">SQLITE_DROP_TEMP_VIEW	&lt;C: #define SQLITE_DROP_TEMP_VIEW 15	&gt;</body><body package="SQLite3EXDI">SQLITE_DROP_TRIGGER	&lt;C: #define SQLITE_DROP_TRIGGER 16	&gt;</body><body package="SQLite3EXDI">SQLITE_DROP_VIEW	&lt;C: #define SQLITE_DROP_VIEW 17	&gt;</body><body package="SQLite3EXDI">SQLITE_EMPTY	&lt;C: #define SQLITE_EMPTY 16	&gt;</body><body package="SQLite3EXDI">SQLITE_ERROR	&lt;C: #define SQLITE_ERROR 1	&gt;</body><body package="SQLite3EXDI">SQLITE_FLOAT	&lt;C: #define SQLITE_FLOAT 2	&gt;</body><body package="SQLite3EXDI">SQLITE_FORMAT	&lt;C: #define SQLITE_FORMAT 24	&gt;</body><body package="SQLite3EXDI">SQLITE_FULL	&lt;C: #define SQLITE_FULL 13	&gt;</body><body package="SQLite3EXDI">SQLITE_IGNORE	&lt;C: #define SQLITE_IGNORE 2	&gt;</body><body package="SQLite3EXDI">SQLITE_INSERT	&lt;C: #define SQLITE_INSERT 18	&gt;</body><body package="SQLite3EXDI">SQLITE_INTEGER	&lt;C: #define SQLITE_INTEGER 1	&gt;</body><body package="SQLite3EXDI">SQLITE_INTERNAL	&lt;C: #define SQLITE_INTERNAL 2	&gt;</body><body package="SQLite3EXDI">SQLITE_INTERRUPT	&lt;C: #define SQLITE_INTERRUPT 9	&gt;</body><body package="SQLite3EXDI">SQLITE_IOERR	&lt;C: #define SQLITE_IOERR 10	&gt;</body><body package="SQLite3EXDI">SQLITE_LIMIT_ATTACHED	&lt;C: #define SQLITE_LIMIT_ATTACHED  7	&gt;</body><body package="SQLite3EXDI">SQLITE_LIMIT_COLUMN	&lt;C: #define SQLITE_LIMIT_COLUMN  2	&gt;</body><body package="SQLite3EXDI">SQLITE_LIMIT_COMPOUND_SELECT	&lt;C: #define SQLITE_LIMIT_COMPOUND_SELECT  4	&gt;</body><body package="SQLite3EXDI">SQLITE_LIMIT_EXPR_DEPTH	&lt;C: #define SQLITE_LIMIT_EXPR_DEPTH  3	&gt;</body><body package="SQLite3EXDI">SQLITE_LIMIT_FUNCTION_ARG	&lt;C: #define SQLITE_LIMIT_FUNCTION_ARG  6	&gt;</body><body package="SQLite3EXDI">SQLITE_LIMIT_LENGTH	&lt;C: #define SQLITE_LIMIT_LENGTH 0	&gt;</body><body package="SQLite3EXDI">SQLITE_LIMIT_LIKE_PATTERN_LENGTH	&lt;C: #define SQLITE_LIMIT_LIKE_PATTERN_LENGTH  8	&gt;</body><body package="SQLite3EXDI">SQLITE_LIMIT_SQL_LENGTH	&lt;C: #define SQLITE_LIMIT_SQL_LENGTH                1	&gt;</body><body package="SQLite3EXDI">SQLITE_LIMIT_TRIGGER_DEPTH	&lt;C: #define SQLITE_LIMIT_TRIGGER_DEPTH  10	&gt;</body><body package="SQLite3EXDI">SQLITE_LIMIT_VARIABLE_NUMBER	&lt;C: #define SQLITE_LIMIT_VARIABLE_NUMBER  9	&gt;</body><body package="SQLite3EXDI">SQLITE_LIMIT_VDBE_OP	&lt;C: #define SQLITE_LIMIT_VDBE_OP  5	&gt;</body><body package="SQLite3EXDI">SQLITE_LIMIT_WORKER_THREADS	&lt;C: #define SQLITE_LIMIT_WORKER_THREADS  11	&gt;</body><body package="SQLite3EXDI">SQLITE_LOCKED	&lt;C: #define SQLITE_LOCKED 6	&gt;</body><body package="SQLite3EXDI">SQLITE_MISMATCH	&lt;C: #define SQLITE_MISMATCH 20	&gt;</body><body package="SQLite3EXDI">SQLITE_MISUSE	&lt;C: #define SQLITE_MISUSE 21	&gt;</body><body package="SQLite3EXDI">SQLITE_NOLFS	&lt;C: #define SQLITE_NOLFS 22	&gt;</body><body package="SQLite3EXDI">SQLITE_NOMEM	&lt;C: #define SQLITE_NOMEM 7	&gt;</body><body package="SQLite3EXDI">SQLITE_NOTADB	&lt;C: #define SQLITE_NOTADB 26	&gt;</body><body package="SQLite3EXDI">SQLITE_NOTFOUND	&lt;C: #define SQLITE_NOTFOUND 12	&gt;</body><body package="SQLite3EXDI">SQLITE_NULL	&lt;C: #define SQLITE_NULL 5	&gt;</body><body package="SQLite3EXDI">SQLITE_OK	&lt;C: #define SQLITE_OK 0	&gt;</body><body package="SQLite3EXDI">SQLITE_PERM	&lt;C: #define SQLITE_PERM 3	&gt;</body><body package="SQLite3EXDI">SQLITE_PRAGMA	&lt;C: #define SQLITE_PRAGMA 19	&gt;</body><body package="SQLite3EXDI">SQLITE_PROTOCOL	&lt;C: #define SQLITE_PROTOCOL 15	&gt;</body><body package="SQLite3EXDI">SQLITE_RANGE	&lt;C: #define SQLITE_RANGE 25	&gt;</body><body package="SQLite3EXDI">SQLITE_READ	&lt;C: #define SQLITE_READ 20	&gt;</body><body package="SQLite3EXDI">SQLITE_READONLY	&lt;C: #define SQLITE_READONLY 8	&gt;</body><body package="SQLite3EXDI">SQLITE_REINDEX	&lt;C: #define SQLITE_REINDEX 27	&gt;</body><body package="SQLite3EXDI">SQLITE_ROW	&lt;C: #define SQLITE_ROW 100	&gt;</body><body package="SQLite3EXDI">SQLITE_SCHEMA	&lt;C: #define SQLITE_SCHEMA 17	&gt;</body><body package="SQLite3EXDI">SQLITE_SELECT	&lt;C: #define SQLITE_SELECT 21	&gt;</body><body package="SQLite3EXDI">SQLITE_STATIC	&lt;C: #define SQLITE_STATIC ((void(*)(void*))0)	&gt;</body><body package="SQLite3EXDI">SQLITE_TEXT	&lt;C: #define SQLITE_TEXT 3	&gt;</body><body package="SQLite3EXDI">SQLITE_TOOBIG	&lt;C: #define SQLITE_TOOBIG 18	&gt;</body><body package="SQLite3EXDI">SQLITE_TRANSACTION	&lt;C: #define SQLITE_TRANSACTION 22	&gt;</body><body package="SQLite3EXDI">SQLITE_UPDATE	&lt;C: #define SQLITE_UPDATE 23	&gt;</body><body package="SQLite3EXDI">SQLITE_UTF16	&lt;C: #define SQLITE_UTF16 4	&gt;</body><body package="SQLite3EXDI">SQLITE_UTF16BE	&lt;C: #define SQLITE_UTF16BE 3	&gt;</body><body package="SQLite3EXDI">SQLITE_UTF16LE	&lt;C: #define SQLITE_UTF16LE 2	&gt;</body><body package="SQLite3EXDI">SQLITE_UTF8	&lt;C: #define SQLITE_UTF8 1	&gt;</body><body package="SQLite3EXDI">SQLITE_VERSION	&lt;C: #define SQLITE_VERSION "3.2.7"	&gt;</body><body package="SQLite3EXDI">SQLITE_VERSION_NUMBER	&lt;C: #define SQLITE_VERSION_NUMBER 3002007	&gt;</body><body package="SQLite3EXDI">_INC_STDARG	&lt;C: #define _INC_STDARG 	&gt;</body><body package="SQLite3EXDI">_SQLITE3_H_	&lt;C: #define _SQLITE3_H_ 	&gt;</body><body package="SQLite3EXDI">_UINTPTR_T_DEFINED	&lt;C: #define _UINTPTR_T_DEFINED 	&gt;</body><body package="SQLite3EXDI">_VA_LIST_DEFINED	&lt;C: #define _VA_LIST_DEFINED 	&gt;</body><body package="SQLite3EXDI">_W64	&lt;C: #define _W64 	&gt;</body><body package="SQLite3EXDI">__DATE__	&lt;C: #define __DATE__ "December 13, 2005"	&gt;</body><body package="SQLite3EXDI">__FILE__	&lt;C: #define __FILE__ 	&gt;</body><body package="SQLite3EXDI">__LINE__	&lt;C: #define __LINE__ 0	&gt;</body><body package="SQLite3EXDI">__STDC__	&lt;C: #define __STDC__ 1	&gt;</body><body package="SQLite3EXDI">__TIME__	&lt;C: #define __TIME__ "11:09:09 pm"	&gt;</body></methods><methods><class-id>Database.SQLite3Interface</class-id> <category>types</category><body package="SQLite3EXDI">sqlite3	&lt;C: typedef struct __sqlite3 sqlite3&gt;</body><body package="SQLite3EXDI">sqlite3_callback	&lt;C: typedef int (* sqlite3_callback)(void * , int, char * * , char * * )&gt;</body><body package="SQLite3EXDI">sqlite3_context	&lt;C: typedef struct __sqlite3_context sqlite3_context&gt;</body><body package="SQLite3EXDI">sqlite3_stmt	&lt;C: typedef struct __sqlite3_stmt sqlite3_stmt&gt;</body><body package="SQLite3EXDI">sqlite3_value	&lt;C: typedef struct Mem sqlite3_value&gt;</body><body package="SQLite3EXDI">sqlite_int64	&lt;C: typedef long long sqlite_int64&gt;</body><body package="SQLite3EXDI">sqlite_uint64	&lt;C: typedef unsigned long long sqlite_uint64&gt;</body><body package="SQLite3EXDI">uintptr_t	&lt;C: typedef unsigned int uintptr_t&gt;</body><body package="SQLite3EXDI">va_list	&lt;C: typedef char * va_list&gt;</body></methods><methods><class-id>Database.SQLite3Interface</class-id> <category>structs</category><body package="SQLite3EXDI">Mem	&lt;C: struct Mem&gt;</body><body package="SQLite3EXDI">__sqlite3	&lt;C: struct __sqlite3&gt;</body><body package="SQLite3EXDI">__sqlite3_context	&lt;C: struct __sqlite3_context&gt;</body><body package="SQLite3EXDI">__sqlite3_stmt	&lt;C: struct __sqlite3_stmt&gt;</body></methods><methods><class-id>Database.SQLite3Interface</class-id> <category>macros</category><body package="SQLite3EXDI">_ADDRESSOF: v	&lt;C: #define _ADDRESSOF(v) (&amp;(v ))	&gt;</body><body package="SQLite3EXDI">_APALIGN: t with: ap	&lt;C: #define _APALIGN(t, ap) (__builtin_alignof(t ))	&gt;</body><body package="SQLite3EXDI">_INTSIZEOF: n	&lt;C: #define _INTSIZEOF(n) ((sizeof(n )+sizeof(int)-1)&amp;~(sizeof(int)-1))	&gt;</body><body package="SQLite3EXDI">_SLOTSIZEOF: t	&lt;C: #define _SLOTSIZEOF(t) (sizeof(t ))	&gt;</body><body package="SQLite3EXDI">va_arg: ap with: t	&lt;C: #define va_arg(ap, t) (*(t *)((ap +=_INTSIZEOF(t ))-_INTSIZEOF(t )))	&gt;</body><body package="SQLite3EXDI">va_end: ap	&lt;C: #define va_end(ap) ( ap =(va_list)0)	&gt;</body><body package="SQLite3EXDI">va_start: ap with: v	&lt;C: #define va_start(ap, v) ( ap =(va_list)_ADDRESSOF(v )+_INTSIZEOF(v ))	&gt;</body></methods><methods><class-id>Database.SQLite3Interface</class-id> <category>procedures</category><body package="SQLite3EXDI">sqlite3_aggregate_context: _arg1 with: nBytes	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_aggregate_count: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_bind_blob: _arg1 with: _arg2 with: _arg3 with: n with: _arg4	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_bind_double: arg1 with: arg2 with: arg3	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_bind_int64: arg1 with: arg2 with: arg3	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_bind_int: arg1 with: arg2 with: arg3	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_bind_null: arg1 with: arg2	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_bind_parameter_count: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_bind_parameter_index: _arg1 with: zName	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_bind_parameter_name: arg1 with: arg2	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_bind_text16: arg1 with: arg2 with: arg3 with: arg4 with: arg5	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_bind_text: _arg1 with: _arg2 with: _arg3 with: n with: _arg4	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_bind_value: arg1 with: arg2 with: arg3	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_busy_handler: arg1 with: arg2 with: arg3	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_busy_timeout: _arg1 with: ms	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_changes: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_clear_bindings: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_close: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_collation_needed16: arg1 with: arg2 with: arg3	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_collation_needed: arg1 with: arg2 with: arg3	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_column_blob: _arg1 with: iCol	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_column_bytes16: _arg1 with: iCol	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_column_bytes: _arg1 with: iCol	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_column_count: pStmt	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_column_decltype16: arg1 with: arg2	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_column_decltype: _arg1 with: i	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_column_double: _arg1 with: iCol	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_column_int64: _arg1 with: iCol	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_column_int: _arg1 with: iCol	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_column_name16: arg1 with: arg2	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_column_name: arg1 with: arg2	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_column_text16: _arg1 with: iCol	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_column_text: _arg1 with: iCol	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_column_type: _arg1 with: iCol	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_commit_hook: arg1 with: arg2 with: arg3	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_complete16: sql	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_complete: sql	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_create_collation16: _arg1 with: zName with: eTextRep with: _arg2 with: xCompare	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_create_collation: _arg1 with: zName with: eTextRep with: _arg2 with: xCompare	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_create_function16: _arg1 with: zFunctionName with: nArg with: eTextRep with: _arg2 with: xFunc with: xStep with: xFinal	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_create_function: _arg1 with: zFunctionName with: nArg with: eTextRep with: _arg2 with: xFunc with: xStep with: xFinal	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_data_count: pStmt	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_db_handle: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_errcode: db	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_errmsg16: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_errmsg: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_exec: _arg1 with: sql with: _arg2 with: _arg3 with: errmsg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_expired: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_finalize: pStmt	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_free: z	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_free_table: result	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_get_autocommit: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_get_auxdata: arg1 with: arg2	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_get_table: _arg1 with: sql with: resultp with: nrow with: ncolumn with: errmsg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_global_recover: argArray	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_interrupt: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_key: db with: pKey with: nKey	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_last_insert_rowid: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_libversion	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_libversion_number	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_mprintf: argArray	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_open16: filename with: ppDb	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_open: filename with: ppDb	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_prepare16: db with: zSql with: nBytes with: ppStmt with: pzTail	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_prepare16_v2: db with: zSql with: nBytes with: ppStmt with: pzTail	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_prepare: db with: zSql with: nBytes with: ppStmt with: pzTail	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_prepare_v2: db with: zSql with: nBytes with: ppStmt with: pzTail	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_profile: _arg1 with: xProfile with: _arg2	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_progress_handler: arg1 with: arg2 with: arg3 with: arg4	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_rekey: db with: pKey with: nKey	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_reset: pStmt	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_result_blob: arg1 with: arg2 with: arg3 with: arg4	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_result_double: arg1 with: arg2	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_result_error16: arg1 with: arg2 with: arg3	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_result_error: arg1 with: arg2 with: arg3	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_result_int64: arg1 with: arg2	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_result_int: arg1 with: arg2	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_result_null: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_result_text16: arg1 with: arg2 with: arg3 with: arg4	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_result_text16be: arg1 with: arg2 with: arg3 with: arg4	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_result_text16le: arg1 with: arg2 with: arg3 with: arg4	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_result_text: arg1 with: arg2 with: arg3 with: arg4	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_result_value: arg1 with: arg2	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_set_authorizer: _arg1 with: xAuth with: pUserData	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_set_auxdata: arg1 with: arg2 with: arg3 with: arg4	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_sleep: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_snprintf: argArray	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_step: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_total_changes: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_trace: _arg1 with: xTrace with: _arg2	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_transfer_bindings: arg1 with: arg2	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_user_data: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_value_blob: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_value_bytes16: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_value_bytes: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_value_double: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_value_int64: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_value_int: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_value_text16: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_value_text16be: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_value_text16le: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_value_text: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_value_type: arg	self subclassResponsibility</body><body package="SQLite3EXDI">sqlite3_vmprintf: arg1 with: arg2	self subclassResponsibility</body></methods><methods><class-id>Database.SQLite3Interface</class-id> <category>private-binding</category><body package="SQLite3EXDI">prepare: sqlString connectionHandle: sqliteHandle statementHandle: staementHandle		| sql |	sql := sqlString sqliteAsByteArray changeClassToThatOf: ''.	^[self sqlite3_prepare_v2: sqliteHandle with: sql with: sql size with: staementHandle with: 0]		on: ExternalObjectNotFoundError		do:			[:ex | ex return:				(self sqlite3_prepare: sqliteHandle with: sql with: sql size with: staementHandle with: 0)]</body></methods><methods><class-id>Database.SQLite3Interface class</class-id> <category>private</category><body package="SQLite3EXDI">libraryFilesSearchSignals	"This class is expected to provide a list of exceptions which should be ignored	when the library is not found whilst searching for it under the wrong platfrom name."	^ExternalLibraryHolder libraryNotFoundSignal</body><body package="SQLite3EXDI">platformSymbol	"this must contain the platform symbol that will	match that returned by determinePlatformType."	"platform symbols known today include:	#nt				Windows/NT	#win95 		Windows95	#hp_unix		HP/UX	#sun5_unix	Solaris	#aix_unix		AIX	#alpha_unix	DEC/Unix	#os2			OS/2	#powermac	Power Mac	#mac			Mac 68K	#linux_i386_unix 	Linux"		^#unknown</body></methods><methods><class-id>Database.SQLite3Connection</class-id> <category>private-accessing</category><body package="SQLite3EXDI">isolationLevel: anIsolationLevel 	"not supported"</body><body package="SQLite3EXDI">sqlite	^sqliteHolder value contents</body><body package="SQLite3EXDI">sqlite: aValue 	sqliteHolder value: aValue</body><body package="SQLite3EXDI">xif	^self class xif</body></methods><methods><class-id>Database.SQLite3Connection</class-id> <category>private-finalization</category><body package="SQLite3EXDI">executor	| ex |	ex := super executor.	ex sqliteHolder: sqliteHolder.	^ex</body><body package="SQLite3EXDI">key	^sqliteHolder</body></methods><methods><class-id>Database.SQLite3Connection</class-id> <category>private-library calls</category><body package="SQLite3EXDI">acquireExternal: aPassword 	"Acquire the external resources involved with a connection to the 	SQL-environment."	"The username, password, and environment variables may be nil to indicate that	the proper value is unknown or an empty string to indicate that the DBMS is expected	to take the default. If the value for one of these variables is required, raise the proceedable	signal requiredUsernameSignal, requiredPasswordSignal, or requiredEnvironmentSignal and	use the proceed value.  Do not record this value in the instance variable."	| env |	(env := self environment) isNil 		ifTrue: [env := self class defaultEnvironment].	[env isString] 		whileFalse: [env := self class requiredEnvironmentSignal raiseRequest].	env := self class mapLogical: env.		["Allocate necessary handles."	self unprotectedAllocSQLite.	self serverAttachEnvironmentExternal: env] 			ifCurtailed: 				["Something went wrong so we must implicitly free any handles we've allocated."				self unprotectedFreeSQLite].</body><body package="SQLite3EXDI">dismissExternal	"Release the external resources."	"All activity within this method must function with only the instance	variables defined in the executor object."	[sqliteHolder value ifNotNil: [:p | self xif sqlite3_close: p contents]] 		ensure: [self unprotectedFreeSQLite]</body><body package="SQLite3EXDI">serverAttachEnvironmentExternal: env 	((self class supportMethod: #sqlite3_open:with:) and: [ (self xif sqlite3_open: (env sqliteAsByteArray changeClassToThatOf: '') with: sqliteHolder value) = 0 ]) ifFalse: [ ^self class unableToConnectToSQLenvironmentSignal raise ]</body><body package="SQLite3EXDI">unprotectedAllocSQLite	self sqlite: self xif sqlite3 pointerType malloc</body><body package="SQLite3EXDI">unprotectedFreeSQLite	| pointer |	pointer := sqliteHolder value.	self sqlite: nil.	pointer notNil ifTrue: [pointer free]</body></methods><methods><class-id>Database.SQLite3Connection</class-id> <category>accessing</category><body package="SQLite3EXDI">dbmsVersion	"This method returns the SQLIte3 library (which is the server) version number as a string,	encoded as M.m.p.q. The last digit (q) is not available in the integer version number (see &gt;&gt;dbmsVersionNo)."	^self xif isNil		ifTrue: [InvalidConnectionState raiseWith: 'Not connected to server (sqlite3 shared library).']		ifFalse: [self xif sqlite3_libversion copyCStringFromHeap]</body><body package="SQLite3EXDI">dbmsVersionNo	"This method returns the SQLIte3 library (which is the server) version number as an integer in the form	Mmmmppp, so 3.7.11 means (3 007 011), or 3007011."	^self xif isNil		ifTrue: [InvalidConnectionState raiseWith: 'Not connected to server (sqlite3 shared library).']		ifFalse: [self xif sqlite3_libversion_number]</body><body package="SQLite3EXDI">getLimitOf: category	"Return the current limit of the given category, or nil if not connected. Eg., 		self getLimitOf: xif SQLITE_LIMIT_COMPOUND_SELECT."	^self hasConnection		ifTrue: [self xif sqlite3_limit: self sqlite category: category newLimit: -1]		ifFalse: [nil]</body><body package="SQLite3EXDI">getLimits	"Print my version and limit settings to the Transcript.	From https://www.sqlite.org/c3ref/c_limit_attached.html#sqlitelimitlength ."	| xif |	self hasConnection		ifFalse: [^InvalidConnectionState raiseWith: 'Not connected to server (sqlite3 database file).'].	xif := self xif.	^(Dictionary new)				at: 'SQLITE_LIMIT_LENGTH' put: (self getLimitOf: xif SQLITE_LIMIT_LENGTH);				at: 'SQLITE_LIMIT_SQL_LENGTH' put: (self getLimitOf: xif SQLITE_LIMIT_SQL_LENGTH);				at: 'SQLITE_LIMIT_COLUMN' put: (self getLimitOf: xif SQLITE_LIMIT_COLUMN);				at: 'SQLITE_LIMIT_EXPR_DEPTH' put: (self getLimitOf: xif SQLITE_LIMIT_EXPR_DEPTH);				at: 'SQLITE_LIMIT_COMPOUND_SELECT' put: (self getLimitOf: xif SQLITE_LIMIT_COMPOUND_SELECT);				at: 'SQLITE_LIMIT_VDBE_OP' put: (self getLimitOf: xif SQLITE_LIMIT_VDBE_OP);				at: 'SQLITE_LIMIT_FUNCTION_ARG' put: (self getLimitOf: xif SQLITE_LIMIT_FUNCTION_ARG);				at: 'SQLITE_LIMIT_ATTACHED' put: (self getLimitOf: xif SQLITE_LIMIT_ATTACHED);				at: 'SQLITE_LIMIT_LIKE_PATTERN_LENGTH' put: (self getLimitOf: xif SQLITE_LIMIT_LIKE_PATTERN_LENGTH);				at: 'SQLITE_LIMIT_VARIABLE_NUMBER' put: (self getLimitOf: xif SQLITE_LIMIT_VARIABLE_NUMBER);				at: 'SQLITE_LIMIT_TRIGGER_DEPTH' put: (self getLimitOf: xif SQLITE_LIMIT_TRIGGER_DEPTH);				at: 'SQLITE_LIMIT_WORKER_THREADS' put: (self getLimitOf: xif SQLITE_LIMIT_WORKER_THREADS);				yourself.</body><body package="SQLite3EXDI">lastAutoIncrementValue	^self xif sqlite3_last_insert_rowid: self sqlite</body><body package="SQLite3EXDI">rowCount	^self xif sqlite3_changes: self sqlite</body><body package="SQLite3EXDI">showLimits	"Print my version and limit settings to the Transcript. This requires that I am connected."	Transcript		show: 'SQLite3 version =&gt; ' , self dbmsVersion; cr.	self getLimits keysAndValuesDo: 			[:key :value |			Transcript				show: key , ' =&gt; ' , value printString; cr]</body></methods><methods><class-id>Database.SQLite3Connection</class-id> <category>private-transaction</category><body package="SQLite3EXDI">beginExternal	super beginExternal.	(self getSession)		prepare: 'BEGIN';		execute;		answer;		disconnect</body><body package="SQLite3EXDI">commitExternal	super commitExternal ifFalse: [^false].	(self getSession)		prepare: 'COMMIT';		execute;		answer;		disconnect.	^true</body><body package="SQLite3EXDI">rollbackExternal	super rollbackExternal ifFalse: [^false].	(self getSession)		prepare: 'ROLLBACK';		execute;		answer;		disconnect.	^true</body></methods><methods><class-id>Database.SQLite3Connection</class-id> <category>initialize-release</category><body package="SQLite3EXDI">initialize 	super initialize.	sqliteHolder := nil asValue</body><body package="SQLite3EXDI">sqliteHolder: anObject	sqliteHolder := anObject</body></methods><methods><class-id>Database.SQLite3Connection</class-id> <category>testing</category><body package="SQLite3EXDI">hasConnection	"This method returns true iff the database file has been loaded."	^sqliteHolder value notNil and: [self sqlite notNil]</body></methods><methods><class-id>Database.SQLite3Connection class</class-id> <category>activation</category><body package="SQLite3EXDI">pause	^self quiesce</body><body package="SQLite3EXDI">resume	^self activate</body></methods><methods><class-id>Database.SQLite3Connection class</class-id> <category>private-accessing</category><body package="SQLite3EXDI">columnDescriptionClass	"Answer the class to use for column description objects associated with receiver."	^SQLite3ColumnDescription</body><body package="SQLite3EXDI">interfaceClass	"Answer the correct interface class"	^SQLite3NonThreadedInterface</body><body package="SQLite3EXDI">sessionClass	^SQLite3Cursor</body><body package="SQLite3EXDI">transactionClass	^SQLite3Transaction</body><body package="SQLite3EXDI">xif	"Answer the ExternalInterface subclass instance to use."	xif isNil ifTrue: [self initializeExternalInterface].	^xif</body></methods><methods><class-id>Database.SQLite3Connection class</class-id> <category>accessing</category><body package="SQLite3EXDI">kind	^#SQLite3</body></methods><methods><class-id>Database.SQLite3Connection class</class-id> <category>class initialization</category><body package="SQLite3EXDI">initialize	self xif: nil.	self initRegistry</body><body package="SQLite3EXDI">initializeExternalInterface	"Reset Interface with the right interface class based on the current platform."		| xifClass |	xifClass := self interfaceClass.	self		xif:			(xifClass notNil				ifTrue: [xifClass new]				ifFalse: [nil]).	xif isNil		ifTrue:			[^ExternalDatabaseNotification raiseErrorString: (#incorrectlyInstalledDriver &lt;&lt; #SQLite &gt;&gt;							'The &lt;1s&gt; Driver is not correctly installed.'						expandMacrosWith: self version asString)]</body><body package="SQLite3EXDI">version	^(#SQLiteEXDIversion &lt;&lt; #SQLite &gt;&gt;			'SQLite3 Database Interface - Release 8.x') asString</body></methods><methods><class-id>Database.SQLite3Connection class</class-id> <category>private-activation</category><body package="SQLite3EXDI">install	self subclasses do: [:each | each install].	self xif: nil.	self returnFromSnapshot</body></methods><methods><class-id>Database.SQLite3Connection class</class-id> <category>private-registry</category><body package="SQLite3EXDI">registry	"Answer with the registry."	"Subclasses must override if they have registries."	^RegisteredSQLiteConnections</body><body package="SQLite3EXDI">registry: aCollection 	RegisteredSQLiteConnections := aCollection</body></methods><methods><class-id>Database.SQLite3ThreadedConnection class</class-id> <category>class initialization</category><body package="SQLite3EXDI">initialize	self xif: nil</body></methods><methods><class-id>Database.SQLite3ThreadedConnection class</class-id> <category>accessing</category><body package="SQLite3EXDI">kind	^#'SQLite3 Threaded'</body></methods><methods><class-id>Database.SQLite3ThreadedConnection class</class-id> <category>private-accessing</category><body package="SQLite3EXDI">interfaceClass	"Answer the correct interface class"	^SQLite3ThreadedInterface</body><body package="SQLite3EXDI">sessionClass	^SQLite3ThreadedCursor</body></methods><methods><class-id>Database.SQLite3Cursor</class-id> <category>private-binding</category><body package="SQLite3EXDI">bindBlob: aByteArray at: position 	self releaseOldBindingAt: position.	^self xif 		sqlite3_bind_blob: self statement		with: position		with: (bindingPointersHolder value at: position put: aByteArray copyToHeap)		with: aByteArray size		with: 0</body><body package="SQLite3EXDI">bindExternal	"Bind values to parameters in the query, avoiding unnecessary rebinding	where possible."	"Subclasses that do not support binding must override this method	to provide a substitute."	"For each bind marker in the query fragments, get the corresponding	value from the bindInput object.  If the value isn't already bound,	bind and remember it."	| bindIndex |	bindIndex := 0.	2 to: queryFragments size by: 2 do:		[:index || bindMarker value |		bindIndex := bindIndex + 1.		bindMarker := queryFragments at: index.		value := self inBindInputAt: bindMarker.		self bindValue: value at: bindIndex.		(self boundValueAt: bindMarker is: value) ifFalse: 			[self bindValues at: bindMarker put: value]].</body><body package="SQLite3EXDI">bindInteger: anInteger at: position 	^self xif 		sqlite3_bind_int64: self statement		with: position		with: anInteger</body><body package="SQLite3EXDI">bindNil: ignored at: position 	^self xif sqlite3_bind_null: self statement with: position</body><body package="SQLite3EXDI">bindObject: anObject at: position	self error: 'Unbindable value'</body><body package="SQLite3EXDI">bindReal: aDouble at: position 	^self xif 		sqlite3_bind_double: self statement		with: position		with: aDouble</body><body package="SQLite3EXDI">bindString: aString at: position 	self releaseOldBindingAt: position.	^self xif 		sqlite3_bind_text: self statement		with: position		with: (bindingPointersHolder value at: position				put: (aString copyToHeapEncoding: #utf8))		with: aString sqliteAsByteArray size		with: 0 "self xif SQLITE_STATIC"</body><body package="SQLite3EXDI">bindValue: aValue at: aPosition 	| res errs pos |	pos := aPosition.	aPosition isString 		ifTrue: 			[pos := self xif sqlite3_bind_parameter_index: self statement						with: aPosition asString copy].	pos &gt; (self xif sqlite3_bind_parameter_count: self statement) 		ifTrue: [^self class connectionClass invalidDescriptorCountSignal raise].	(res := aValue sqliteBindOn: self at: pos) = self xif SQLITE_OK 		ifFalse: 			[errs := Array with: ((ExternalDatabaseError new)								dbmsErrorCode: res;								dbmsErrorString: self getErrorString).			self class connectionClass unableToBindSignal raiseWith: errs				errorString: errs first dbmsErrorString]</body><body package="SQLite3EXDI">prepareExternal		| errs res sqlString |	sqlString := queryFragments size == 1		ifTrue: [queryFragments first]		ifFalse:			[| sqlStream |			sqlStream := WriteStream on: (String new: query size * 2).			sqlStream nextPutAll: queryFragments first.			2				to: queryFragments size				by: 2				do:					[:index | 					sqlStream						nextPutAll: '?';						nextPutAll: (queryFragments at: index + 1)].			sqlStream contents].	(res := self xif		prepare: sqlString		connectionHandle: connection sqlite		statementHandle: statementHolder value) = 0 ifTrue: [^self].	errs := Array		with:			((ExternalDatabaseError new)				dbmsErrorCode: res;				dbmsErrorString: self getErrorString).	self class connectionClass unableToPrepareSignal		raiseWith: errs		errorString: errs first dbmsErrorString</body><body package="SQLite3EXDI">releaseBindings	| p d |	p := sqlPointerHolder value.	sqlPointerHolder value: nil.	p notNil ifTrue: [p isNull ifFalse: [p freePointer]].	d := bindingPointersHolder value.	bindingPointersHolder value: Dictionary new.	d do: [:pp | pp isNull ifFalse: [pp freePointer]].	super releaseBindings</body><body package="SQLite3EXDI">releaseOldBindingAt: position 	| old |	old := bindingPointersHolder value removeKey: position ifAbsent: [nil].	(old notNil and: [old isNull not]) ifTrue: [old freePointer]</body></methods><methods><class-id>Database.SQLite3Cursor</class-id> <category>private-finalization</category><body package="SQLite3EXDI">bindingPointersHolder: anObject	bindingPointersHolder := anObject</body><body package="SQLite3EXDI">executor	| ex |	ex := super executor.	ex sqlPointerHolder: sqlPointerHolder.	ex bindingPointersHolder: bindingPointersHolder.	ex statementHolder: statementHolder.	^ex</body><body package="SQLite3EXDI">finalizeExternal	"Release all external resource."	self releaseBuffersAndAdaptors.	self releaseBindings.	super finalizeExternal</body><body package="SQLite3EXDI">key	^statementHolder</body><body package="SQLite3EXDI">sqlPointerHolder: anObject	sqlPointerHolder := anObject</body><body package="SQLite3EXDI">statementHolder: aValueHolder	statementHolder := aValueHolder</body></methods><methods><class-id>Database.SQLite3Cursor</class-id> <category>private-execution</category><body package="SQLite3EXDI">cancelExternal	^self</body><body package="SQLite3EXDI">executeExternal	executeState := self xif sqlite3_step: self statement.	skipNextFetch := true.	((executeState = self xif SQLITE_DONE and: 			[self cancelAnswerSetExternal.			true]) 		or: [executeState = self xif SQLITE_ROW]) ifTrue: [^self].	executeError := self getErrorString</body><body package="SQLite3EXDI">getErrorString	^self getStringFrom: (self xif sqlite3_errmsg: connection sqlite)</body><body package="SQLite3EXDI">getStringFrom: aCharPointer 	aCharPointer isNull ifTrue: [^''].	^aCharPointer copyCStringFromHeap: #utf8</body><body package="SQLite3EXDI">moreResultsExternal	^false</body><body package="SQLite3EXDI">readyExternal	^true</body><body package="SQLite3EXDI">resultsExternal	| errs |	(executeState = self xif SQLITE_DONE 		or: [executeState = self xif SQLITE_ROW]) ifTrue: [^self].	errs := Array with: ((ExternalDatabaseError new)						dbmsErrorCode: executeState;						dbmsErrorString: executeError).	self class connectionClass unableToExecuteSQLSignal raiseWith: errs		errorString: errs first dbmsErrorString</body></methods><methods><class-id>Database.SQLite3Cursor</class-id> <category>private-answer set</category><body package="SQLite3EXDI">advanceExternal	| state errs |	skipNextFetch 		ifTrue: 			[skipNextFetch := false.			^executeState = self xif SQLITE_DONE ifTrue: [nil] ifFalse: [self]].	state := self xif sqlite3_step: self statement.	state = self xif SQLITE_DONE 		ifTrue: 			[self cancelAnswerSetExternal.			^nil].	state = self xif SQLITE_ROW ifTrue: [^self].	errs := Array with: ((ExternalDatabaseError new)						dbmsErrorCode: state;						dbmsErrorString: self getErrorString).	self class connectionClass unableToFetchDataSignal raiseWith: errs		errorString: errs first dbmsErrorString"***** Revisionlist ***** ----»""Change: Copyright © CS Component Studio GmbH: 10.01. 2006, OU""creator: SQLite3EXDI""«---- ***** Revisionlist *****"</body><body package="SQLite3EXDI">allocateRowBufferExternal: aColumn 	^SQLite3Buffer new forIndex: aColumn cursor: self</body><body package="SQLite3EXDI">cancelAnswerSetExternal	| st |	((st := self statement) isNil or: [st isNull]) ifTrue: [^self].	self xif sqlite3_reset: st</body><body package="SQLite3EXDI">getColumnDescriptionExternal: aColumn 	| desc str |	aColumn &gt; (self xif sqlite3_column_count: self statement) ifTrue: [^nil].	desc := self class connectionClass columnDescriptionClass new.	desc		name: (self getStringFrom: (self xif sqlite3_column_name: self statement							with: aColumn - 1));		internalType: (self xif sqlite3_column_type: self statement					with: aColumn - 1).	str := (self 				getStringFrom: (self xif sqlite3_column_decltype: self statement						with: aColumn - 1)) 					readStream.	desc type: (str upTo: $().	str atEnd 		ifTrue: [desc maxColumnConstraint: 20]		ifFalse: 			[desc maxColumnConstraint: (Integer readFrom: str).			str peek = $, 				ifTrue: 					[desc precision: desc maxColumnConstraint.					str next.					desc scale: (Integer readFrom: str)]].	^desc</body><body package="SQLite3EXDI">getFieldExternal: aColumn 	^(self rowBuffers at: aColumn) value</body><body package="SQLite3EXDI">hasAnswerSetExternal	| st |	^(st := self statement) notNil 		and: [(self xif sqlite3_column_count: st) &gt; 0]</body></methods><methods><class-id>Database.SQLite3Cursor</class-id> <category>private-library calls</category><body package="SQLite3EXDI">acquireExternal	statementHolder value: self xif sqlite3_stmt pointerType malloc</body><body package="SQLite3EXDI">dismissExternal	| st |	st := statementHolder value.	statementHolder value: nil.	(st notNil and: [st isNull not and: [st referentAddress notNil]]) 		ifTrue: 			[self xif sqlite3_finalize: st contents.			st freePointer]</body><body package="SQLite3EXDI">xif	^self class xif</body></methods><methods><class-id>Database.SQLite3Cursor</class-id> <category>sps-db-layer</category><body package="SQLite3EXDI">flattenResultTemplate: template onto: descStream	" *** This method was defined by ExternalDatabaseSession as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="SQLite3EXDI">nextViaTemplate: template	" *** This method was defined by ExternalDatabaseSession as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Database.SQLite3Cursor</class-id> <category>initialize-release</category><body package="SQLite3EXDI">initialize	"Initialize a newly created instance. This method must answer the receiver."	sqlPointerHolder := nil asValue.	bindingPointersHolder := Dictionary new asValue.	super initialize.	statementHolder := nil asValue.	executeState := nil.	skipNextFetch := true</body></methods><methods><class-id>Database.SQLite3Cursor</class-id> <category>private</category><body package="SQLite3EXDI">statement	^statementHolder value ifNotNil: [:x | x isNull ifFalse: [x contents]]</body></methods><methods><class-id>Database.SQLite3Cursor</class-id> <category>data processing</category><body package="SQLite3EXDI">rowCount		^connection rowCount</body></methods><methods><class-id>Database.SQLite3Cursor class</class-id> <category>class initialization</category><body package="SQLite3EXDI">initialize	self initRegistry.	self initializeSignalMap</body><body package="SQLite3EXDI">initializeSignalMap	SignalMap := IdentityDictionary new</body></methods><methods><class-id>Database.SQLite3Cursor class</class-id> <category>private-registry</category><body package="SQLite3EXDI">registry	"Answer with the registry."	"Subclasses must override if they have registries."	^RegisteredSQLiteCursors</body><body package="SQLite3EXDI">registry: aCollection 	RegisteredSQLiteCursors := aCollection</body></methods><methods><class-id>Database.SQLite3Cursor class</class-id> <category>accessing</category><body package="SQLite3EXDI">connectionClass	^SQLite3Connection</body></methods><methods><class-id>Database.SQLite3ThreadedCursor class</class-id> <category>accessing</category><body package="SQLite3EXDI">connectionClass	^SQLite3ThreadedConnection</body></methods><methods><class-id>Database.SQLite3Buffer</class-id> <category>initialize-release</category><body package="SQLite3EXDI">forIndex: aColumn cursor: aCursor 	index := aColumn - 1.	cursor := aCursor</body><body package="SQLite3EXDI">initialize	super initialize.	encoding := #utf8.	count := 0</body></methods><methods><class-id>Database.SQLite3Buffer</class-id> <category>private-values</category><body package="SQLite3EXDI">getByteArray	| result |	result := ByteArray 				new: (cursor xif sqlite3_column_bytes: cursor statement with: index).	(cursor xif sqlite3_column_blob: cursor statement with: index) 		copyAt: 0		to: result		size: result size		startingAt: 1.	^result</body><body package="SQLite3EXDI">getInteger	^cursor xif sqlite3_column_int64: cursor statement with: index</body><body package="SQLite3EXDI">getNil	^nil</body><body package="SQLite3EXDI">getReal	^cursor xif sqlite3_column_double: cursor statement with: index</body><body package="SQLite3EXDI">getString	^cursor 		getStringFrom: (cursor xif sqlite3_column_text: cursor statement with: index)</body></methods><methods><class-id>Database.SQLite3Buffer</class-id> <category>accessing</category><body package="SQLite3EXDI">at: anIndex 	self shouldNotImplement.	^nil</body><body package="SQLite3EXDI">at: anIndex put: anObject 	self shouldNotImplement</body><body package="SQLite3EXDI">value	| type |	type := cursor xif sqlite3_column_type: cursor statement with: index.	^self perform: (AccessorMappings at: type)</body><body package="SQLite3EXDI">value: newValue	self halt</body></methods><methods><class-id>Database.SQLite3Buffer class</class-id> <category>class initialization</category><body package="SQLite3EXDI">initialize	AccessorMappings := Dictionary new.	AccessorMappings		at: 1 put: #getInteger;		at: 2 put: #getReal;		at: 3 put: #getString;		at: 4 put: #getByteArray;		at: 5 put: #getNil</body></methods><methods><class-id>Database.SQLite3Transaction</class-id> <category>private-finalization</category><body package="SQLite3EXDI">key	" *** This method was defined by ExternalDatabaseFramework as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body></methods><methods><class-id>Database.SQLite3Transaction</class-id> <category>private-library calls</category><body package="SQLite3EXDI">acquireExternal	" *** This method was defined by ExternalDatabaseFramework as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="SQLite3EXDI">beginExternal</body><body package="SQLite3EXDI">commitExternal</body><body package="SQLite3EXDI">dismissExternal	" *** This method was defined by ExternalDatabaseFramework as a subclass responsibility.	Replace its body with a proper implementation. *** "	self error: 'Subclass responsibility stub not reimplemented'</body><body package="SQLite3EXDI">rollbackExternal</body></methods><methods><class-id>Database.SQLite3Transaction</class-id> <category>initialize-release</category><body package="SQLite3EXDI">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Database.SQLite3Transaction class</class-id> <category>accessing</category><body package="SQLite3EXDI">connectionClass	^SQLite3Connection</body></methods><methods><class-id>Database.SQLite3Transaction class</class-id> <category>private-registry</category><body package="SQLite3EXDI">registry: aCollection 	self shouldNotImplement</body></methods><methods><class-id>Core.Integer</class-id> <category>private-sqlite</category><body package="SQLite3EXDI">sqliteBindOn: aCursor at: position 	^aCursor bindInteger: self at: position</body></methods><methods><class-id>Core.String</class-id> <category>private-sqlite</category><body package="SQLite3EXDI">sqliteAsByteArray	^self asByteArrayEncoding: #utf8</body></methods><methods><class-id>Core.Number</class-id> <category>private-sqlite</category><body package="SQLite3EXDI">sqliteBindOn: aCursor at: position 	^aCursor bindReal: self asDouble at: position</body></methods><methods><class-id>Core.ByteArray</class-id> <category>private-sqlite</category><body package="SQLite3EXDI">sqliteBindOn: aCursor at: position 	^aCursor bindBlob: self at: position</body></methods><methods><class-id>Core.UndefinedObject</class-id> <category>private-sqlite</category><body package="SQLite3EXDI">sqliteBindOn: aCursor at: position 	^aCursor bindNil: self at: position</body></methods><methods><class-id>Core.Object</class-id> <category>private-sqlite</category><body package="SQLite3EXDI">sqliteBindOn: aCursor at: position 	^aCursor bindObject: self at: position</body></methods><methods><class-id>Core.LargeInteger</class-id> <category>private-sqlite</category><body package="SQLite3EXDI">sqliteBindOn: aCursor at: position	"Verify that self is within range of a 64-bit signed number (SQLite expects signed integers)."	(-9223372036854775808 &lt;= self and: [self &lt;= 9223372036854775807])		ifFalse: 			[ExternalDatabaseConnection unsupportedDataTypeSignal				raiseRequestErrorString: 'LargeInteger out of range: -9223372036854775808 .. 9223372036854775807'].	^aCursor bindInteger: self at: position</body></methods><methods><class-id>Core.CharacterArray</class-id> <category>private-sqlite</category><body package="SQLite3EXDI">sqliteBindOn: aCursor at: position 	^aCursor bindString: self string at: position</body></methods><methods><class-id>Database.SQLite3ThreadedInterface</class-id> <category>procedures</category><body package="SQLite3EXDI">sqlite3_aggregate_context: _arg1 with: nBytes 	&lt;C: void _threaded *  sqlite3_aggregate_context(sqlite3_context * _arg1, int nBytes)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_aggregate_count: arg 	&lt;C: int _threaded sqlite3_aggregate_count(sqlite3_context * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_blob: _arg1 with: _arg2 with: _arg3 with: n with: _arg4 	&lt;C: int _threaded sqlite3_bind_blob(sqlite3_stmt * _arg1, int _arg2, const void * _arg3, int n, void (* _arg4)(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_double: arg1 with: arg2 with: arg3 	&lt;C: int _threaded sqlite3_bind_double(sqlite3_stmt * , int, double)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_int64: arg1 with: arg2 with: arg3 	&lt;C: int _threaded sqlite3_bind_int64(sqlite3_stmt * , int, sqlite_int64)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_int: arg1 with: arg2 with: arg3 	&lt;C: int _threaded sqlite3_bind_int(sqlite3_stmt * , int, int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_null: arg1 with: arg2 	&lt;C: int _threaded sqlite3_bind_null(sqlite3_stmt * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_parameter_count: arg 	&lt;C: int _threaded sqlite3_bind_parameter_count(sqlite3_stmt * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_parameter_index: _arg1 with: zName 	&lt;C: int _threaded sqlite3_bind_parameter_index(sqlite3_stmt * _arg1, const char * zName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_parameter_name: arg1 with: arg2 	&lt;C: const char _threaded *  sqlite3_bind_parameter_name(sqlite3_stmt * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_text16: arg1 with: arg2 with: arg3 with: arg4 with: arg5 	&lt;C: int _threaded sqlite3_bind_text16(sqlite3_stmt * , int, const void * , int, void (* )(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_text: _arg1 with: _arg2 with: _arg3 with: n with: _arg4 	&lt;C: int _threaded sqlite3_bind_text(sqlite3_stmt * _arg1, int _arg2, const char * _arg3, int n, void (* _arg4)(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_value: arg1 with: arg2 with: arg3 	&lt;C: int _threaded sqlite3_bind_value(sqlite3_stmt * , int, const sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_busy_handler: arg1 with: arg2 with: arg3 	&lt;C: int _threaded sqlite3_busy_handler(sqlite3 * , int (* )(void * , int), void * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_busy_timeout: _arg1 with: ms 	&lt;C: int _threaded sqlite3_busy_timeout(sqlite3 * _arg1, int ms)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_changes: arg 	&lt;C: int _threaded sqlite3_changes(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_clear_bindings: arg 	&lt;C: int _threaded sqlite3_clear_bindings(sqlite3_stmt * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_close: arg 	&lt;C: int _threaded sqlite3_close(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_collation_needed16: arg1 with: arg2 with: arg3 	&lt;C: int _threaded sqlite3_collation_needed16(sqlite3 * , void * , void (* )(void * _arg1, sqlite3 * _arg2, int eTextRep, const void * _arg3))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_collation_needed: arg1 with: arg2 with: arg3 	&lt;C: int _threaded sqlite3_collation_needed(sqlite3 * , void * , void (* )(void * _arg1, sqlite3 * _arg2, int eTextRep, const char * _arg3))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_blob: _arg1 with: iCol 	&lt;C: const void _threaded *  sqlite3_column_blob(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_bytes16: _arg1 with: iCol 	&lt;C: int _threaded sqlite3_column_bytes16(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_bytes: _arg1 with: iCol 	&lt;C: int _threaded sqlite3_column_bytes(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_count: pStmt 	&lt;C: int _threaded sqlite3_column_count(sqlite3_stmt * pStmt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_decltype16: arg1 with: arg2 	&lt;C: const void _threaded *  sqlite3_column_decltype16(sqlite3_stmt * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_decltype: _arg1 with: i 	&lt;C: const char _threaded *  sqlite3_column_decltype(sqlite3_stmt * _arg1, int i)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_double: _arg1 with: iCol 	&lt;C: double _threaded sqlite3_column_double(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_int64: _arg1 with: iCol 	&lt;C: sqlite_int64 _threaded sqlite3_column_int64(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_int: _arg1 with: iCol 	&lt;C: int _threaded sqlite3_column_int(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_name16: arg1 with: arg2 	&lt;C: const void _threaded *  sqlite3_column_name16(sqlite3_stmt * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_name: arg1 with: arg2 	&lt;C: const char _threaded *  sqlite3_column_name(sqlite3_stmt * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_text16: _arg1 with: iCol 	&lt;C: const void  * _threaded sqlite3_column_text16(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_text: _arg1 with: iCol 	&lt;C: const unsigned char *  _threaded  sqlite3_column_text(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_type: _arg1 with: iCol 	&lt;C: int _threaded sqlite3_column_type(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_commit_hook: arg1 with: arg2 with: arg3 	&lt;C: void  * _threaded  sqlite3_commit_hook(sqlite3 * , int (* )(void * ), void * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_complete16: sql 	&lt;C: int _threaded sqlite3_complete16(const void * sql)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_complete: sql 	&lt;C: int _threaded sqlite3_complete(const char * sql)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_create_collation16: _arg1 with: zName with: eTextRep with: _arg2 with: xCompare 	&lt;C: int _threaded sqlite3_create_collation16(sqlite3 * _arg1, const char * zName, int eTextRep, void * _arg2, int (* xCompare)(void * , int, const void * , int, const void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_create_collation: _arg1 with: zName with: eTextRep with: _arg2 with: xCompare 	&lt;C: int _threaded sqlite3_create_collation(sqlite3 * _arg1, const char * zName, int eTextRep, void * _arg2, int (* xCompare)(void * , int, const void * , int, const void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_create_function16: _arg1 with: zFunctionName with: nArg with: eTextRep with: _arg2 with: xFunc with: xStep with: xFinal 	&lt;C: int _threaded sqlite3_create_function16(sqlite3 * _arg1, const void * zFunctionName, int nArg, int eTextRep, void * _arg2, void (* xFunc)(sqlite3_context * , int, sqlite3_value * * ), void (* xStep)(sqlite3_context * , int, sqlite3_value * * ), void (* xFinal)(sqlite3_context * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_create_function: _arg1 with: zFunctionName with: nArg with: eTextRep with: _arg2 with: xFunc with: xStep with: xFinal 	&lt;C: int _threaded sqlite3_create_function(sqlite3 * _arg1, const char * zFunctionName, int nArg, int eTextRep, void * _arg2, void (* xFunc)(sqlite3_context * , int, sqlite3_value * * ), void (* xStep)(sqlite3_context * , int, sqlite3_value * * ), void (* xFinal)(sqlite3_context * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_data_count: pStmt 	&lt;C: int _threaded sqlite3_data_count(sqlite3_stmt * pStmt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_db_handle: arg 	&lt;C: sqlite3 _threaded *  sqlite3_db_handle(sqlite3_stmt * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_errcode: db 	&lt;C: int _threaded sqlite3_errcode(sqlite3 * db)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_errmsg16: arg 	&lt;C: const void _threaded *  sqlite3_errmsg16(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_errmsg: arg 	&lt;C: const char _threaded *  sqlite3_errmsg(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_exec: _arg1 with: sql with: _arg2 with: _arg3 with: errmsg 	&lt;C: int _threaded sqlite3_exec(sqlite3 * _arg1, const char * sql, sqlite3_callback _arg2, void * _arg3, char * * errmsg)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_expired: arg 	&lt;C: int _threaded sqlite3_expired(sqlite3_stmt * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_finalize: pStmt 	&lt;C: int _threaded sqlite3_finalize(sqlite3_stmt * pStmt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_free: z 	&lt;C: void _threaded sqlite3_free(char * z)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_free_table: result 	&lt;C: void _threaded sqlite3_free_table(char * * result)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_get_autocommit: arg 	&lt;C: int _threaded sqlite3_get_autocommit(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_get_auxdata: arg1 with: arg2 	&lt;C: void _threaded *  sqlite3_get_auxdata(sqlite3_context * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_get_table: _arg1 with: sql with: resultp with: nrow with: ncolumn with: errmsg 	&lt;C: int _threaded sqlite3_get_table(sqlite3 * _arg1, const char * sql, char * * * resultp, int * nrow, int * ncolumn, char * * errmsg)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_global_recover: argArray 	&lt;C: int _threaded sqlite3_global_recover(...)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_interrupt: arg 	&lt;C: void _threaded sqlite3_interrupt(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_key: db with: pKey with: nKey 	&lt;C: int _threaded sqlite3_key(sqlite3 * db, const void * pKey, int nKey)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_last_insert_rowid: arg 	&lt;C: sqlite_int64 _threaded sqlite3_last_insert_rowid(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_libversion	&lt;C: const char _threaded *  sqlite3_libversion(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_libversion_number	&lt;C: int _threaded sqlite3_libversion_number(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_limit: arg category: categoryId newLimit: newValue	&lt;C: int _threaded sqlite3_limit(sqlite3 *, int, int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_mprintf: argArray 	&lt;C: char _threaded *  sqlite3_mprintf(const char * , ...)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_open16: filename with: ppDb 	&lt;C: int _threaded sqlite3_open16(const void * filename, sqlite3 * * ppDb)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_open: filename with: ppDb 	&lt;C: int _threaded sqlite3_open(const char * filename, sqlite3 * * ppDb)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_prepare16: db with: zSql with: nBytes with: ppStmt with: pzTail 	&lt;C: int _threaded sqlite3_prepare16(sqlite3 * db, const void * zSql, int nBytes, sqlite3_stmt * * ppStmt, const void * * pzTail)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_prepare16_v2: db with: zSql with: nBytes with: ppStmt with: pzTail		&lt;C: int _threaded sqlite3_prepare16_v2(sqlite3 * db, const void * zSql, int nBytes, sqlite3_stmt * * ppStmt, const void * * pzTail)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_prepare: db with: zSql with: nBytes with: ppStmt with: pzTail 	&lt;C: int _threaded sqlite3_prepare(sqlite3 * db, const char * zSql, int nBytes, sqlite3_stmt * * ppStmt, const char * * pzTail)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_prepare_v2: db with: zSql with: nBytes with: ppStmt with: pzTail		&lt;C: int _threaded sqlite3_prepare_v2(sqlite3 * db, const char * zSql, int nBytes, sqlite3_stmt * * ppStmt, const char * * pzTail)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_profile: _arg1 with: xProfile with: _arg2 	&lt;C: void _threaded *  sqlite3_profile(sqlite3 * _arg1, void (* xProfile)(void * , const char * , sqlite_uint64), void * _arg2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_progress_handler: arg1 with: arg2 with: arg3 with: arg4 	&lt;C: void _threaded sqlite3_progress_handler(sqlite3 * , int, int (* )(void * ), void * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_rekey: db with: pKey with: nKey 	&lt;C: int _threaded sqlite3_rekey(sqlite3 * db, const void * pKey, int nKey)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_reset: pStmt 	&lt;C: int _threaded sqlite3_reset(sqlite3_stmt * pStmt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_blob: arg1 with: arg2 with: arg3 with: arg4 	&lt;C: void _threaded sqlite3_result_blob(sqlite3_context * , const void * , int, void (* )(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_double: arg1 with: arg2 	&lt;C: void _threaded sqlite3_result_double(sqlite3_context * , double)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_error16: arg1 with: arg2 with: arg3 	&lt;C: void _threaded sqlite3_result_error16(sqlite3_context * , const void * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_error: arg1 with: arg2 with: arg3 	&lt;C: void _threaded sqlite3_result_error(sqlite3_context * , const char * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_int64: arg1 with: arg2 	&lt;C: void _threaded sqlite3_result_int64(sqlite3_context * , sqlite_int64)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_int: arg1 with: arg2 	&lt;C: void _threaded sqlite3_result_int(sqlite3_context * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_null: arg 	&lt;C: void _threaded sqlite3_result_null(sqlite3_context * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_text16: arg1 with: arg2 with: arg3 with: arg4 	&lt;C: void _threaded sqlite3_result_text16(sqlite3_context * , const void * , int, void (* )(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_text16be: arg1 with: arg2 with: arg3 with: arg4 	&lt;C: void _threaded sqlite3_result_text16be(sqlite3_context * , const void * , int, void (* )(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_text16le: arg1 with: arg2 with: arg3 with: arg4 	&lt;C: void _threaded sqlite3_result_text16le(sqlite3_context * , const void * , int, void (* )(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_text: arg1 with: arg2 with: arg3 with: arg4 	&lt;C: void _threaded sqlite3_result_text(sqlite3_context * , const char * , int, void (* )(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_value: arg1 with: arg2 	&lt;C: void _threaded sqlite3_result_value(sqlite3_context * , sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_set_authorizer: _arg1 with: xAuth with: pUserData 	&lt;C: int _threaded sqlite3_set_authorizer(sqlite3 * _arg1, int (* xAuth)(void * , int, const char * , const char * , const char * , const char * ), void * pUserData)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_set_auxdata: arg1 with: arg2 with: arg3 with: arg4 	&lt;C: void _threaded sqlite3_set_auxdata(sqlite3_context * , int, void * , void (* )(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_sleep: arg 	&lt;C: int _threaded sqlite3_sleep(int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_snprintf: argArray 	&lt;C: char _threaded *  sqlite3_snprintf(int, char * , const char * , ...)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_step: arg 	&lt;C: int _threaded sqlite3_step(sqlite3_stmt * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_total_changes: arg 	&lt;C: int _threaded sqlite3_total_changes(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_trace: _arg1 with: xTrace with: _arg2 	&lt;C: void _threaded *  sqlite3_trace(sqlite3 * _arg1, void (* xTrace)(void * , const char * ), void * _arg2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_transfer_bindings: arg1 with: arg2 	&lt;C: int _threaded sqlite3_transfer_bindings(sqlite3_stmt * , sqlite3_stmt * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_user_data: arg 	&lt;C: void _threaded *  sqlite3_user_data(sqlite3_context * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_blob: arg 	&lt;C: const void _threaded *  sqlite3_value_blob(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_bytes16: arg 	&lt;C: int _threaded sqlite3_value_bytes16(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_bytes: arg 	&lt;C: int _threaded sqlite3_value_bytes(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_double: arg 	&lt;C: double _threaded sqlite3_value_double(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_int64: arg 	&lt;C: sqlite_int64 _threaded sqlite3_value_int64(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_int: arg 	&lt;C: int _threaded sqlite3_value_int(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_text16: arg 	&lt;C: const void _threaded *  sqlite3_value_text16(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_text16be: arg 	&lt;C: const void _threaded *  sqlite3_value_text16be(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_text16le: arg 	&lt;C: const void _threaded *  sqlite3_value_text16le(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_text: arg 	&lt;C: const unsigned char *  _threaded sqlite3_value_text(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_type: arg 	&lt;C: int _threaded sqlite3_value_type(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_vmprintf: arg1 with: arg2 	&lt;C: char _threaded *  sqlite3_vmprintf(const char * , va_list)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Database.SQLite3NonThreadedInterface</class-id> <category>procedures</category><body package="SQLite3EXDI">sqlite3_aggregate_context: _arg1 with: nBytes 	&lt;C: void *  sqlite3_aggregate_context(sqlite3_context * _arg1, int nBytes)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_aggregate_count: arg 	&lt;C: int sqlite3_aggregate_count(sqlite3_context * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_blob: _arg1 with: _arg2 with: _arg3 with: n with: _arg4 	&lt;C: int sqlite3_bind_blob(sqlite3_stmt * _arg1, int _arg2, const void * _arg3, int n, void (* _arg4)(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_double: arg1 with: arg2 with: arg3 	&lt;C: int sqlite3_bind_double(sqlite3_stmt * , int, double)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_int64: arg1 with: arg2 with: arg3 	&lt;C: int sqlite3_bind_int64(sqlite3_stmt * , int, sqlite_int64)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_int: arg1 with: arg2 with: arg3 	&lt;C: int sqlite3_bind_int(sqlite3_stmt * , int, int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_null: arg1 with: arg2 	&lt;C: int sqlite3_bind_null(sqlite3_stmt * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_parameter_count: arg 	&lt;C: int sqlite3_bind_parameter_count(sqlite3_stmt * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_parameter_index: _arg1 with: zName 	&lt;C: int sqlite3_bind_parameter_index(sqlite3_stmt * _arg1, const char * zName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_parameter_name: arg1 with: arg2 	&lt;C: const char *  sqlite3_bind_parameter_name(sqlite3_stmt * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_text16: arg1 with: arg2 with: arg3 with: arg4 with: arg5 	&lt;C: int sqlite3_bind_text16(sqlite3_stmt * , int, const void * , int, void (* )(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_text: _arg1 with: _arg2 with: _arg3 with: n with: _arg4 	&lt;C: int sqlite3_bind_text(sqlite3_stmt * _arg1, int _arg2, const char * _arg3, int n, void (* _arg4)(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_bind_value: arg1 with: arg2 with: arg3 	&lt;C: int sqlite3_bind_value(sqlite3_stmt * , int, const sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_busy_handler: arg1 with: arg2 with: arg3 	&lt;C: int sqlite3_busy_handler(sqlite3 * , int (* )(void * , int), void * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_busy_timeout: _arg1 with: ms 	&lt;C: int sqlite3_busy_timeout(sqlite3 * _arg1, int ms)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_changes: arg 	&lt;C: int sqlite3_changes(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_clear_bindings: arg 	&lt;C: int sqlite3_clear_bindings(sqlite3_stmt * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_close: arg 	&lt;C: int sqlite3_close(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_collation_needed16: arg1 with: arg2 with: arg3 	&lt;C: int sqlite3_collation_needed16(sqlite3 * , void * , void (* )(void * _arg1, sqlite3 * _arg2, int eTextRep, const void * _arg3))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_collation_needed: arg1 with: arg2 with: arg3 	&lt;C: int sqlite3_collation_needed(sqlite3 * , void * , void (* )(void * _arg1, sqlite3 * _arg2, int eTextRep, const char * _arg3))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_blob: _arg1 with: iCol 	&lt;C: const void *  sqlite3_column_blob(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_bytes16: _arg1 with: iCol 	&lt;C: int sqlite3_column_bytes16(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_bytes: _arg1 with: iCol 	&lt;C: int sqlite3_column_bytes(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_count: pStmt 	&lt;C: int sqlite3_column_count(sqlite3_stmt * pStmt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_decltype16: arg1 with: arg2 	&lt;C: const void *  sqlite3_column_decltype16(sqlite3_stmt * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_decltype: _arg1 with: i 	&lt;C: const char *  sqlite3_column_decltype(sqlite3_stmt * _arg1, int i)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_double: _arg1 with: iCol 	&lt;C: double sqlite3_column_double(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_int64: _arg1 with: iCol 	&lt;C: sqlite_int64 sqlite3_column_int64(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_int: _arg1 with: iCol 	&lt;C: int sqlite3_column_int(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_name16: arg1 with: arg2 	&lt;C: const void *  sqlite3_column_name16(sqlite3_stmt * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_name: arg1 with: arg2 	&lt;C: const char *  sqlite3_column_name(sqlite3_stmt * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_text16: _arg1 with: iCol 	&lt;C: const void *  sqlite3_column_text16(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_text: _arg1 with: iCol 	&lt;C: const unsigned char *  sqlite3_column_text(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_column_type: _arg1 with: iCol 	&lt;C: int sqlite3_column_type(sqlite3_stmt * _arg1, int iCol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_commit_hook: arg1 with: arg2 with: arg3 	&lt;C: void *  sqlite3_commit_hook(sqlite3 * , int (* )(void * ), void * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_complete16: sql 	&lt;C: int sqlite3_complete16(const void * sql)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_complete: sql 	&lt;C: int sqlite3_complete(const char * sql)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_create_collation16: _arg1 with: zName with: eTextRep with: _arg2 with: xCompare 	&lt;C: int sqlite3_create_collation16(sqlite3 * _arg1, const char * zName, int eTextRep, void * _arg2, int (* xCompare)(void * , int, const void * , int, const void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_create_collation: _arg1 with: zName with: eTextRep with: _arg2 with: xCompare 	&lt;C: int sqlite3_create_collation(sqlite3 * _arg1, const char * zName, int eTextRep, void * _arg2, int (* xCompare)(void * , int, const void * , int, const void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_create_function16: _arg1 with: zFunctionName with: nArg with: eTextRep with: _arg2 with: xFunc with: xStep with: xFinal 	&lt;C: int sqlite3_create_function16(sqlite3 * _arg1, const void * zFunctionName, int nArg, int eTextRep, void * _arg2, void (* xFunc)(sqlite3_context * , int, sqlite3_value * * ), void (* xStep)(sqlite3_context * , int, sqlite3_value * * ), void (* xFinal)(sqlite3_context * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_create_function: _arg1 with: zFunctionName with: nArg with: eTextRep with: _arg2 with: xFunc with: xStep with: xFinal 	&lt;C: int sqlite3_create_function(sqlite3 * _arg1, const char * zFunctionName, int nArg, int eTextRep, void * _arg2, void (* xFunc)(sqlite3_context * , int, sqlite3_value * * ), void (* xStep)(sqlite3_context * , int, sqlite3_value * * ), void (* xFinal)(sqlite3_context * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_data_count: pStmt 	&lt;C: int sqlite3_data_count(sqlite3_stmt * pStmt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_db_handle: arg 	&lt;C: sqlite3 *  sqlite3_db_handle(sqlite3_stmt * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_errcode: db 	&lt;C: int sqlite3_errcode(sqlite3 * db)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_errmsg16: arg 	&lt;C: const void *  sqlite3_errmsg16(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_errmsg: arg 	&lt;C: const char *  sqlite3_errmsg(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_exec: _arg1 with: sql with: _arg2 with: _arg3 with: errmsg 	&lt;C: int sqlite3_exec(sqlite3 * _arg1, const char * sql, sqlite3_callback _arg2, void * _arg3, char * * errmsg)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_expired: arg 	&lt;C: int sqlite3_expired(sqlite3_stmt * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_finalize: pStmt 	&lt;C: int sqlite3_finalize(sqlite3_stmt * pStmt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_free: z 	&lt;C: void sqlite3_free(char * z)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_free_table: result 	&lt;C: void sqlite3_free_table(char * * result)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_get_autocommit: arg 	&lt;C: int sqlite3_get_autocommit(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_get_auxdata: arg1 with: arg2 	&lt;C: void *  sqlite3_get_auxdata(sqlite3_context * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_get_table: _arg1 with: sql with: resultp with: nrow with: ncolumn with: errmsg 	&lt;C: int sqlite3_get_table(sqlite3 * _arg1, const char * sql, char * * * resultp, int * nrow, int * ncolumn, char * * errmsg)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_global_recover: argArray 	&lt;C: int sqlite3_global_recover(...)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_interrupt: arg 	&lt;C: void sqlite3_interrupt(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_key: db with: pKey with: nKey 	&lt;C: int sqlite3_key(sqlite3 * db, const void * pKey, int nKey)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_last_insert_rowid: arg 	&lt;C: sqlite_int64 sqlite3_last_insert_rowid(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_libversion	&lt;C: const char *  sqlite3_libversion(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_libversion_number	&lt;C: int sqlite3_libversion_number(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_limit: arg category: categoryId newLimit: newValue	"int sqlite3_limit(sqlite3*, int id, int newVal);	Returns the prior value. If newValue is within the allowed range, it is accepted, otherwise prior value is merely returned."	&lt;C: int sqlite3_limit(sqlite3 *, int, int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_mprintf: argArray 	&lt;C: char *  sqlite3_mprintf(const char * , ...)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_open16: filename with: ppDb 	&lt;C: int sqlite3_open16(const void * filename, sqlite3 * * ppDb)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_open: filename with: ppDb 	&lt;C: int sqlite3_open(const char * filename, sqlite3 * * ppDb)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_prepare16: db with: zSql with: nBytes with: ppStmt with: pzTail 	&lt;C: int sqlite3_prepare16(sqlite3 * db, const void * zSql, int nBytes, sqlite3_stmt * * ppStmt, const void * * pzTail)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_prepare16_v2: db with: zSql with: nBytes with: ppStmt with: pzTail		&lt;C: int sqlite3_prepare16_v2(sqlite3 * db, const void * zSql, int nBytes, sqlite3_stmt * * ppStmt, const void * * pzTail)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_prepare: db with: zSql with: nBytes with: ppStmt with: pzTail 	&lt;C: int sqlite3_prepare(sqlite3 * db, const char * zSql, int nBytes, sqlite3_stmt * * ppStmt, const char * * pzTail)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_prepare_v2: db with: zSql with: nBytes with: ppStmt with: pzTail		&lt;C: int sqlite3_prepare_v2(sqlite3 * db, const char * zSql, int nBytes, sqlite3_stmt * * ppStmt, const char * * pzTail)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_profile: _arg1 with: xProfile with: _arg2 	&lt;C: void *  sqlite3_profile(sqlite3 * _arg1, void (* xProfile)(void * , const char * , sqlite_uint64), void * _arg2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_progress_handler: arg1 with: arg2 with: arg3 with: arg4 	&lt;C: void sqlite3_progress_handler(sqlite3 * , int, int (* )(void * ), void * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_rekey: db with: pKey with: nKey 	&lt;C: int sqlite3_rekey(sqlite3 * db, const void * pKey, int nKey)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_reset: pStmt 	&lt;C: int sqlite3_reset(sqlite3_stmt * pStmt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_blob: arg1 with: arg2 with: arg3 with: arg4 	&lt;C: void sqlite3_result_blob(sqlite3_context * , const void * , int, void (* )(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_double: arg1 with: arg2 	&lt;C: void sqlite3_result_double(sqlite3_context * , double)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_error16: arg1 with: arg2 with: arg3 	&lt;C: void sqlite3_result_error16(sqlite3_context * , const void * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_error: arg1 with: arg2 with: arg3 	&lt;C: void sqlite3_result_error(sqlite3_context * , const char * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_int64: arg1 with: arg2 	&lt;C: void sqlite3_result_int64(sqlite3_context * , sqlite_int64)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_int: arg1 with: arg2 	&lt;C: void sqlite3_result_int(sqlite3_context * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_null: arg 	&lt;C: void sqlite3_result_null(sqlite3_context * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_text16: arg1 with: arg2 with: arg3 with: arg4 	&lt;C: void sqlite3_result_text16(sqlite3_context * , const void * , int, void (* )(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_text16be: arg1 with: arg2 with: arg3 with: arg4 	&lt;C: void sqlite3_result_text16be(sqlite3_context * , const void * , int, void (* )(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_text16le: arg1 with: arg2 with: arg3 with: arg4 	&lt;C: void sqlite3_result_text16le(sqlite3_context * , const void * , int, void (* )(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_text: arg1 with: arg2 with: arg3 with: arg4 	&lt;C: void sqlite3_result_text(sqlite3_context * , const char * , int, void (* )(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_result_value: arg1 with: arg2 	&lt;C: void sqlite3_result_value(sqlite3_context * , sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_set_authorizer: _arg1 with: xAuth with: pUserData 	&lt;C: int sqlite3_set_authorizer(sqlite3 * _arg1, int (* xAuth)(void * , int, const char * , const char * , const char * , const char * ), void * pUserData)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_set_auxdata: arg1 with: arg2 with: arg3 with: arg4 	&lt;C: void sqlite3_set_auxdata(sqlite3_context * , int, void * , void (* )(void * ))&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_sleep: arg 	&lt;C: int sqlite3_sleep(int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_snprintf: argArray 	&lt;C: char *  sqlite3_snprintf(int, char * , const char * , ...)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_step: arg 	&lt;C: int sqlite3_step(sqlite3_stmt * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_total_changes: arg 	&lt;C: int sqlite3_total_changes(sqlite3 * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_trace: _arg1 with: xTrace with: _arg2 	&lt;C: void *  sqlite3_trace(sqlite3 * _arg1, void (* xTrace)(void * , const char * ), void * _arg2)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_transfer_bindings: arg1 with: arg2 	&lt;C: int sqlite3_transfer_bindings(sqlite3_stmt * , sqlite3_stmt * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_user_data: arg 	&lt;C: void *  sqlite3_user_data(sqlite3_context * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_blob: arg 	&lt;C: const void *  sqlite3_value_blob(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_bytes16: arg 	&lt;C: int sqlite3_value_bytes16(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_bytes: arg 	&lt;C: int sqlite3_value_bytes(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_double: arg 	&lt;C: double sqlite3_value_double(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_int64: arg 	&lt;C: sqlite_int64 sqlite3_value_int64(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_int: arg 	&lt;C: int sqlite3_value_int(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_text16: arg 	&lt;C: const void *  sqlite3_value_text16(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_text16be: arg 	&lt;C: const void *  sqlite3_value_text16be(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_text16le: arg 	&lt;C: const void *  sqlite3_value_text16le(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_text: arg 	&lt;C: const unsigned char *  sqlite3_value_text(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_value_type: arg 	&lt;C: int sqlite3_value_type(sqlite3_value * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="SQLite3EXDI">sqlite3_vmprintf: arg1 with: arg2 	&lt;C: char *  sqlite3_vmprintf(const char * , va_list)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><initialize><class-id>Database.SQLite3Connection</class-id></initialize><initialize><class-id>Database.SQLite3ThreadedConnection</class-id></initialize><initialize><class-id>Database.SQLite3Cursor</class-id></initialize><initialize><class-id>Database.SQLite3Buffer</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>UndefinedObject</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ExternalDatabaseTransaction</name><environment>Database</environment><super>Database.ExternalDatabaseFramework</super><private>false</private><indexed-type>none</indexed-type><inst-vars>memberCountHolder remainingCountHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Interface</category><attributes><package>Database</package></attributes></class><class><name>ExternalDatabaseSession</name><environment>Database</environment><super>Database.ExternalDatabaseFramework</super><private>false</private><indexed-type>none</indexed-type><inst-vars>connection query queryFragments bindInput bindTemplate bindOutput useNamedOutputBinding bindValues resultTemplate allocateForEachRow blockFactor numColumns columnDescriptions rowAdaptors rowBuffersHolder bufferIndex answerStream currentRow scrollable needBinding </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Interface</category><attributes><package>Database</package></attributes></class><class><name>ByteArray</name><environment>Core</environment><super>Core.IntegerArray</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Arrayed</category><attributes><package>Collections-Arrayed</package></attributes></class><class><name>Number</name><environment>Core</environment><super>Core.ArithmeticValue</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Integer</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>ExternalInterface</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>includeFiles includeDirectories libraryFiles libraryDirectories virtual optimizationLevel </class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>External-Interface</category><attributes><package>External-Interface</package></attributes></class><class><name>CharacterArray</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>String</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>ExternalDatabaseColumnDescription</name><environment>Database</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name index type length precision scale nullable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Interface</category><attributes><package>Database</package></attributes></class><class><name>ExternalDatabaseConnection</name><environment>Database</environment><super>Database.ExternalDatabaseFramework</super><private>false</private><indexed-type>none</indexed-type><inst-vars>transaction username password environment transactionCoordinator cachedSession isolationLevel encoding </inst-vars><class-inst-vars>environmentMap xif xifMap dependents </class-inst-vars><imports></imports><category>Database-Interface</category><attributes><package>Database</package></attributes></class><class><name>LargeInteger</name><environment>Core</environment><super>Core.Integer</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>ExternalDatabaseBuffer</name><environment>Database</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>databaseType encoding elementSize count bufferPointer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Interface</category><attributes><package>Database</package></attributes></class></st-source>