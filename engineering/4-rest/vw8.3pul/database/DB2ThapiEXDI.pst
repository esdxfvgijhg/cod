<?xml version="1.0"?><st-source><!-- Name: DB2ThapiEXDINotice: Copyright 2008-2013 Cincom Systems, Inc.  All rights reserved.Comment: Provides a THAPI (threaded interconnect) interface to the DB2 client libraries.OverviewThe DB2ThapiEXDI parcel contains the DB2/UDB specfic protocols for the External Database Interface (EXDI). It provides the same functionality as DB2EXDI, with the added ability to do multi-threaded database access. Using this parcel along with a properly configured DB2 client, one can interact with DB2 servers (6.x and higher).  DocumentationComplete information on the EXDI framework can be found in the "Database Application Developer's Guide" (located in the /doc subdirectory of the VisualWorks installation). For additional information on the threaded interconnect, see the "DLL and C Connect User''s Guide".AuthorAnthony Boris <anthonyvb@yandex.ru> is the original author of this code. Some improvements made by Cincom Systems, Inc.LicenseThe contents of this file are subject to the Cincom Public License (CPL) <http://www.cincomsmalltalk.com/CincomSmalltalkWiki/CPL>; you may not use it except in compliance with the license. Software distributed under the license is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the license for the specific language governing rights and limitations under the license.Portions created by Anthony Boris are copyright (c) 2000-2009. All Rights Reserved.DbIdentifier: bear73DbTrace: 400814DbUsername: nrossDbVersion: 7.10 - 3DevelopmentPrerequisites: #(#(#any 'DB2EXDI' '') #(#any 'DLLCC' ''))HideSource: falsePackageName: DB2ThapiEXDIParcel: #('DB2ThapiEXDI')ParcelName: DB2ThapiEXDIPrerequisiteDescriptions: #(#(#name 'DB2EXDI') #(#name 'DLLCC' #componentType #package #applicability #store))PrerequisiteParcels: #(#('DB2EXDI' ''))PrintStringCache: (7.10 - 3,nross)SaveSource: trueVersion: 7.10 - 3Date: 7:29:23 AM April 3, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (mar13.5) of April 3, 2013 on April 3, 2013 at 7:29:23 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>DB2CLIThreadedInterface</name><environment>Database</environment><super>Database.DB2CLIInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.DB2CLIThreadedInterfaceDictionary.*			</imports><category>Database-DB2</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libdb2.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>DB2ThapiEXDI</package></attributes></class><comment><class-id>Database.DB2CLIThreadedInterface</class-id><body>DB2CLIThreadedInterface defines multi-threaded calling conventions for the DB2 CLI.</body></comment><class><name>DB2CLIMacOSXThreadedInterface</name><environment>Database</environment><super>Database.DB2CLIThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.DB2CLIMacOSXThreadedInterfaceDictionary.*			</imports><category>Database-DB2</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libdb2.dylib</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DB2ThapiEXDI</package></attributes></class><comment><class-id>Database.DB2CLIMacOSXThreadedInterface</class-id><body>DB2CLIMacOSXThreadedInterface defines multi-threaded calling conventions for the DB2 CLI on the Mac OSX platform.</body></comment><class><name>DB2CLI64BitThreadedInterface</name><environment>Database</environment><super>Database.DB2CLIThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.DB2CLI64BitThreadedInterfaceDictionary.*			</imports><category>Database-DB2</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libdb2.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>DB2ThapiEXDI</package></attributes></class><comment><class-id>Database.DB2CLI64BitThreadedInterface</class-id><body>DB2CLI64BitThreadedInterface defines multi-threaded calling conventions for the DB2 CLI on 64-bit platforms.</body></comment><class><name>DB2CLILinux64ThreadedInterface</name><environment>Database</environment><super>Database.DB2CLI64BitThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.DB2CLILinux64ThreadedInterfaceDictionary.*			</imports><category>Database-DB2</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libdb2.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DB2ThapiEXDI</package></attributes></class><comment><class-id>Database.DB2CLILinux64ThreadedInterface</class-id><body>DB2CLILinux64BitThreadedInterface defines multi-threaded calling conventions for the DB2 CLI on the 64-bit Linux platform.</body></comment><class><name>DB2CLILinuxThreadedInterface</name><environment>Database</environment><super>Database.DB2CLIThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.DB2CLILinuxThreadedInterfaceDictionary.*			</imports><category>Database-DB2</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libdb2.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DB2ThapiEXDI</package></attributes></class><comment><class-id>Database.DB2CLILinuxThreadedInterface</class-id><body>DB2CLILinuxThreadedInterface defines multi-threaded calling conventions for the DB2 CLI on the Linux platform.</body></comment><class><name>DB2ThreadedConnection</name><environment>Database</environment><super>Database.DB2Connection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accessProtect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-DB2</category><attributes><package>DB2ThapiEXDI</package></attributes></class><comment><class-id>Database.DB2ThreadedConnection</class-id><body>DB2ThreadedConnection is the concrete class implementation of multi-threaded connection services using the DB2 CLI library.Instance Variables:	accessProtect	&lt;Semaphore&gt;			The Semaphore is used to serialize the access of DB2 thread-unsafe routines.</body></comment><class><name>DB2CLISolaris64ThreadedInterface</name><environment>Database</environment><super>Database.DB2CLI64BitThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.DB2CLISolaris64ThreadedInterfaceDictionary.*			</imports><category>Database-DB2</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libdb2.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DB2ThapiEXDI</package></attributes></class><comment><class-id>Database.DB2CLISolaris64ThreadedInterface</class-id><body>DB2CLISolaris64BitThreadedInterface defines multi-threaded calling conventions for the DB2 CLI on the 64-bit Solaris platform.</body></comment><class><name>DB2CLISolarisThreadedInterface</name><environment>Database</environment><super>Database.DB2CLIThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.DB2CLISolarisThreadedInterfaceDictionary.*			</imports><category>Database-DB2</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libdb2.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DB2ThapiEXDI</package></attributes></class><comment><class-id>Database.DB2CLISolarisThreadedInterface</class-id><body>DB2CLISolarisThreadedInterface defines multi-threaded calling conventions for the DB2 CLI on the Solaris platform.</body></comment><class><name>DB2CLIAIXThreadedInterface</name><environment>Database</environment><super>Database.DB2CLIThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.DB2CLIAIXThreadedInterfaceDictionary.*			</imports><category>Database-DB2</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libdb2.a(shr.o)</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DB2ThapiEXDI</package></attributes></class><comment><class-id>Database.DB2CLIAIXThreadedInterface</class-id><body>DB2CLIAIXThreadedInterface defines multi-threaded calling conventions for the DB2 CLI on the AIX platform.</body></comment><class><name>DB2CLIWinThreadedInterface</name><environment>Database</environment><super>Database.DB2CLIThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.DB2CLIWinThreadedInterfaceDictionary.*			</imports><category>Database-DB2</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>db2cli.dll</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DB2ThapiEXDI</package></attributes></class><comment><class-id>Database.DB2CLIWinThreadedInterface</class-id><body>DB2CLIWinThreadedInterface defines multi-threaded calling conventions for the DB2 CLI on the Windows platform.</body></comment><class><name>DB2ThreadedSession</name><environment>Database</environment><super>Database.DB2Session</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accessProtect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-DB2</category><attributes><package>DB2ThapiEXDI</package></attributes></class><comment><class-id>Database.DB2ThreadedSession</class-id><body>DB2ThreadedSession is the concrete implementation of multi-threaded session services using the DB2 CLI library.Instance Variables:	accessProtect	&lt;Semaphore&gt;			The Semaphore is used to serialize the access of DB2 thread-unsafe routines.</body></comment><class><name>DB2CLIWin64ThreadedInterface</name><environment>Database</environment><super>Database.DB2CLI64BitThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.DB2CLIWin64ThreadedInterfaceDictionary.*			</imports><category>Database-DB2</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>db2cli64.dll</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DB2ThapiEXDI</package></attributes></class><comment><class-id>Database.DB2CLIWin64ThreadedInterface</class-id><body>DB2CLIWin64BitThreadedInterface defines multi-threaded calling conventions for the DB2 CLI on the 64-bit Windows platform.</body></comment><shared-variable><name>DB2CLI64BitThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DB2ThapiEXDI</package></attributes></shared-variable><shared-variable><name>DB2CLIAIXThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DB2ThapiEXDI</package></attributes></shared-variable><shared-variable><name>DB2CLISolarisThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DB2ThapiEXDI</package></attributes></shared-variable><shared-variable><name>DB2CLILinux64ThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DB2ThapiEXDI</package></attributes></shared-variable><shared-variable><name>DB2CLIWin64ThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DB2ThapiEXDI</package></attributes></shared-variable><shared-variable><name>DB2CLIThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DB2ThapiEXDI</package></attributes></shared-variable><shared-variable><name>DB2CLILinuxThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DB2ThapiEXDI</package></attributes></shared-variable><shared-variable><name>DB2CLIMacOSXThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DB2ThapiEXDI</package></attributes></shared-variable><shared-variable><name>DB2CLIWinThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DB2ThapiEXDI</package></attributes></shared-variable><shared-variable><name>DB2CLISolaris64ThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>DB2ThapiEXDI</package></attributes></shared-variable><shared-variable><name>RegisteredDB2ThreadedSessions</name><environment>Database.DB2ThreadedSession</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DB2ThapiEXDI</package></attributes></shared-variable><shared-variable><name>RegisteredDB2ThreadedConnections</name><environment>Database.DB2ThreadedConnection</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DB2ThapiEXDI</package></attributes></shared-variable><methods><class-id>Database.DB2CLIThreadedInterface class</class-id> <category>class initialization</category><body package="DB2ThapiEXDI">initialize	super initialize</body></methods><methods><class-id>Database.DB2ThreadedConnection</class-id> <category>connections</category><body package="DB2ThapiEXDI">getSession	"Answer an instance of the driver's subclass of ExternalDatabaseSession."	"this needs access protection when multiple processes contain sessions	which were obtained from a common connection"	accessProtect critical: [^super getSession].</body></methods><methods><class-id>Database.DB2ThreadedConnection</class-id> <category>initialize-release</category><body package="DB2ThapiEXDI">initialize	super initialize.	accessProtect := Semaphore forMutualExclusion.</body></methods><methods><class-id>Database.DB2ThreadedConnection</class-id> <category>private-ObjectLens</category><body package="DB2ThapiEXDI">retainSession: session	"Remember a session for reuse via the next getSession"	"this needs access protection when multiple processes contain sessions	which were obtained from a common connection"	accessProtect critical: [super retainSession: session].</body></methods><methods><class-id>Database.DB2ThreadedConnection class</class-id> <category>class initialization</category><body package="DB2ThapiEXDI">initialize	"DB2ThreadedConnection initialize"		super initialize.</body><body package="DB2ThapiEXDI">initializeExternalInterface	"Reset xif call with the right interface class based on the current platform."	| xifClass |	xifClass := self interfaceClass.	self xif: (xifClass notNil			ifTrue: [xifClass new]			ifFalse: [nil]).	xif isNil ifTrue: [^Dialog warn: 'The DB2 CLI Driver is not correctly installed.' withCRs].	self initializeInformationTypeConversionMap.</body><body package="DB2ThapiEXDI">initializeInterfaceMapping		xifMap := IdentityDictionary new.	xifMap at: #nt put: #DB2CLIWinThreadedInterface.	xifMap at: #win95 put: #DB2CLIWinThreadedInterface.	xifMap at: #linux_i386_unix put: #DB2CLILinuxThreadedInterface.	xifMap at: #aix_unix put: #DB2CLIAIXThreadedInterface.	xifMap at: #sun5_unix put: #DB2CLIThreadedSolarisInterface.	xifMap at: #macOSX put: #DB2CLIMacOSXThreadedInterface.	xifMap at: #nt64 put: #DB2CLIWin64ThreadedInterface.	xifMap at: #linux_x86_64_unix put: #DB2CLILinux64ThreadedInterface.	xifMap at: #unix_sysV_sun_solaris64 put: #DB2CLISolaris64ThreadedInterface.	xifMap at: #unknown put: #DB2CLILinuxThreadedInterface</body><body package="DB2ThapiEXDI">interfaceClass	| interfaceClassName |  	xifMap isNil		ifTrue: [self initializeInterfaceMapping].	interfaceClassName := xifMap at: self platformType ifAbsent: [nil].	^interfaceClassName notNil		ifTrue: [ self environment at: interfaceClassName ifAbsent: [nil] ]		ifFalse: [nil]</body><body package="DB2ThapiEXDI">kind	^#'DB2/UDBThreaded'</body><body package="DB2ThapiEXDI">sessionClass	^DB2ThreadedSession</body></methods><methods><class-id>Database.DB2ThreadedConnection class</class-id> <category>private-registry</category><body package="DB2ThapiEXDI">registry	^RegisteredDB2ThreadedConnections</body><body package="DB2ThapiEXDI">registry: aCollection	RegisteredDB2ThreadedConnections := aCollection</body></methods><methods><class-id>Database.DB2ThreadedSession</class-id> <category>data processing</category><body package="DB2ThapiEXDI">cancelExecution	"Cancel the function running on a different thread"	| xif rc |	self hstmt isNil ifTrue: [ ^self ].	xif := self class xif.	rc := xif SQLCancel: self hstmt.	( traceLevel &gt;= 3 ) ifTrue:		[ (self traceStream)			print: rc;  nextPutAll: ' = SQLCancel( hstmt = ';			nextPutAll: (self hstmt printStringRadix: 16);			nextPutAll: ')'.	         self class trace: self emitTrace ].	rc == xif SQL_SUCCESS ifFalse:		[ "errs := self getStatementErrors."		self class connectionClass externalDatabaseErrorSignal raiseSignal ].</body></methods><methods><class-id>Database.DB2ThreadedSession</class-id> <category>private-execution</category><body package="DB2ThapiEXDI">executeExternal	"Execute the prepared SQL text."	"Really DB2 must serialize all calls"	accessProtect critical: [super executeExternal].</body></methods><methods><class-id>Database.DB2ThreadedSession</class-id> <category>initialize-release</category><body package="DB2ThapiEXDI">initialize	super initialize.	accessProtect := Semaphore forMutualExclusion.</body></methods><methods><class-id>Database.DB2ThreadedSession class</class-id> <category>private</category><body package="DB2ThapiEXDI">connectionClass	^DB2ThreadedConnection</body></methods><methods><class-id>Database.DB2ThreadedSession class</class-id> <category>private-registry</category><body package="DB2ThapiEXDI">registry	^RegisteredDB2ThreadedSessions</body><body package="DB2ThapiEXDI">registry: aCollection	RegisteredDB2ThreadedSessions := aCollection</body></methods><methods><class-id>Database.DB2CLIThreadedInterface</class-id> <category>procedures</category><body package="DB2ThapiEXDI">SQLAllocConnect: henv with: phdbc	&lt;C: SQLRETURN _threaded  SQLAllocConnect(SQLHENV henv, SQLHDBC * phdbc)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLAllocEnv: phenv	&lt;C: SQLRETURN _threaded  SQLAllocEnv(SQLHENV * phenv)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLAllocHandle: fHandleType with: hInput with: phOutput	&lt;C: SQLRETURN _threaded  SQLAllocHandle(SQLSMALLINT fHandleType, SQLHANDLE hInput, SQLHANDLE * phOutput)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLAllocHandleStd: fHandleType with: hInput with: phOutput	&lt;C: SQLRETURN _threaded  SQLAllocHandleStd(SQLSMALLINT fHandleType, SQLHANDLE hInput, SQLHANDLE * phOutput)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLAllocStmt: hdbc with: phstmt	&lt;C: SQLRETURN _threaded  SQLAllocStmt(SQLHDBC hdbc, SQLHSTMT * phstmt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLBindFileToCol: hstmt with: icol with: FileName with: FileNameLength with: FileOptions with: MaxFileNameLength with: StringLength with: IndicatorValue	&lt;C: SQLRETURN _threaded  SQLBindFileToCol(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLCHAR * FileName, SQLSMALLINT * FileNameLength, SQLUINTEGER * FileOptions, SQLSMALLINT MaxFileNameLength, SQLINTEGER * StringLength, SQLINTEGER * IndicatorValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLBindFileToParam: hstmt with: ipar with: fSqlType with: FileName with: FileNameLength with: FileOptions with: MaxFileNameLength with: IndicatorValue	&lt;C: SQLRETURN _threaded  SQLBindFileToParam(SQLHSTMT hstmt, SQLUSMALLINT ipar, SQLSMALLINT fSqlType, SQLCHAR * FileName, SQLSMALLINT * FileNameLength, SQLUINTEGER * FileOptions, SQLSMALLINT MaxFileNameLength, SQLINTEGER * IndicatorValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLBindParam: StatementHandle with: ParameterNumber with: ValueType with: ParameterType with: LengthPrecision with: ParameterScale with: ParameterValue with: StrLen_or_Ind	&lt;C: SQLRETURN _threaded  SQLBindParam(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNumber, SQLSMALLINT ValueType, SQLSMALLINT ParameterType, SQLUINTEGER LengthPrecision, SQLSMALLINT ParameterScale, SQLPOINTER ParameterValue, SQLINTEGER * StrLen_or_Ind)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLBindParameter: hstmt with: ipar with: fParamType with: fCType with: fSqlType with: cbColDef with: ibScale with: rgbValue with: cbValueMax with: pcbValue	&lt;C: SQLRETURN _threaded  SQLBindParameter(SQLHSTMT hstmt, SQLUSMALLINT ipar, SQLSMALLINT fParamType, SQLSMALLINT fCType, SQLSMALLINT fSqlType, SQLUINTEGER cbColDef, SQLSMALLINT ibScale, SQLPOINTER rgbValue, SQLINTEGER cbValueMax, SQLINTEGER * pcbValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLBrowseConnect: hdbc with: szConnStrIn with: cbConnStrIn with: szConnStrOut with: cbConnStrOutMax with: pcbConnStrOut	&lt;C: SQLRETURN _threaded  SQLBrowseConnect(SQLHDBC hdbc, SQLCHAR * szConnStrIn, SQLSMALLINT cbConnStrIn, SQLCHAR * szConnStrOut, SQLSMALLINT cbConnStrOutMax, SQLSMALLINT * pcbConnStrOut)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLBrowseConnectW: hdbc with: szConnStrIn with: cbConnStrIn with: szConnStrOut with: cbConnStrOutMax with: pcbConnStrOut	&lt;C: SQLRETURN _threaded  SQLBrowseConnectW(SQLHDBC hdbc, SQLWCHAR * szConnStrIn, SQLSMALLINT cbConnStrIn, SQLWCHAR * szConnStrOut, SQLSMALLINT cbConnStrOutMax, SQLSMALLINT * pcbConnStrOut)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLBuildDataLink: hStmt with: pszLinkType with: cbLinkType with: pszDataLocation with: cbDataLocation with: pszComment with: cbComment with: pDataLink with: cbDataLinkMax with: pcbDataLink	&lt;C: SQLRETURN _threaded  SQLBuildDataLink(SQLHSTMT hStmt, SQLCHAR * pszLinkType, SQLINTEGER cbLinkType, SQLCHAR * pszDataLocation, SQLINTEGER cbDataLocation, SQLCHAR * pszComment, SQLINTEGER cbComment, SQLCHAR * pDataLink, SQLINTEGER cbDataLinkMax, SQLINTEGER * pcbDataLink)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLBulkOperations: StatementHandle with: Operation	&lt;C: SQLRETURN _threaded  SQLBulkOperations(SQLHSTMT StatementHandle, SQLSMALLINT Operation)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLCancel: hstmt	&lt;C: SQLRETURN _threaded  SQLCancel(SQLHSTMT hstmt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLCloseCursor: hStmt	&lt;C: SQLRETURN _threaded  SQLCloseCursor(SQLHSTMT hStmt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLColAttribute: hstmt with: icol with: fDescType with: rgbDesc with: cbDescMax with: pcbDesc with: pfDesc	&lt;C: SQLRETURN _threaded  SQLColAttribute(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLUSMALLINT fDescType, SQLPOINTER rgbDesc, SQLSMALLINT cbDescMax, SQLSMALLINT * pcbDesc, SQLPOINTER pfDesc)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLColAttributeW: hstmt with: iCol with: iField with: pCharAttr with: cbCharAttrMax with: pcbCharAttr with: pNumAttr	&lt;C: SQLRETURN _threaded  SQLColAttributeW(SQLHSTMT hstmt, SQLUSMALLINT iCol, SQLUSMALLINT iField, SQLPOINTER pCharAttr, SQLSMALLINT cbCharAttrMax, SQLSMALLINT * pcbCharAttr, SQLPOINTER pNumAttr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLColAttributes: hstmt with: icol with: fDescType with: rgbDesc with: cbDescMax with: pcbDesc with: pfDesc	&lt;C: SQLRETURN _threaded  SQLColAttributes(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLUSMALLINT fDescType, SQLPOINTER rgbDesc, SQLSMALLINT cbDescMax, SQLSMALLINT * pcbDesc, SQLINTEGER * pfDesc)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLColAttributesW: hstmt with: icol with: fDescType with: rgbDesc with: cbDescMax with: pcbDesc with: pfDesc	&lt;C: SQLRETURN _threaded  SQLColAttributesW(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLUSMALLINT fDescType, SQLPOINTER rgbDesc, SQLSMALLINT cbDescMax, SQLSMALLINT * pcbDesc, SQLINTEGER * pfDesc)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLColumnPrivileges: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szTableName with: cbTableName with: szColumnName with: cbColumnName	&lt;C: SQLRETURN _threaded  SQLColumnPrivileges(SQLHSTMT hstmt, SQLCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR * szTableName, SQLSMALLINT cbTableName, SQLCHAR * szColumnName, SQLSMALLINT cbColumnName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLColumnPrivilegesW: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szTableName with: cbTableName with: szColumnName with: cbColumnName	&lt;C: SQLRETURN _threaded  SQLColumnPrivilegesW(SQLHSTMT hstmt, SQLWCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR * szTableName, SQLSMALLINT cbTableName, SQLWCHAR * szColumnName, SQLSMALLINT cbColumnName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLColumns: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szTableName with: cbTableName with: szColumnName with: cbColumnName	&lt;C: SQLRETURN _threaded  SQLColumns(SQLHSTMT hstmt, SQLCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR * szTableName, SQLSMALLINT cbTableName, SQLCHAR * szColumnName, SQLSMALLINT cbColumnName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLColumnsW: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szTableName with: cbTableName with: szColumnName with: cbColumnName	&lt;C: SQLRETURN _threaded  SQLColumnsW(SQLHSTMT hstmt, SQLWCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR * szTableName, SQLSMALLINT cbTableName, SQLWCHAR * szColumnName, SQLSMALLINT cbColumnName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLConnect: hdbc with: szDSN with: cbDSN with: szUID with: cbUID with: szAuthStr with: cbAuthStr	&lt;C: SQLRETURN _threaded  SQLConnect(SQLHDBC hdbc, SQLCHAR * szDSN, SQLSMALLINT cbDSN, SQLCHAR * szUID, SQLSMALLINT cbUID, SQLCHAR * szAuthStr, SQLSMALLINT cbAuthStr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLConnectWInt: hdbc with: szDSN with: cbDSN with: szUID with: cbUID with: szAuthStr with: cbAuthStr	&lt;C: SQLRETURN _threaded  SQLConnectWInt(SQLHDBC hdbc, SQLWCHAR * szDSN, SQLSMALLINT cbDSN, SQLWCHAR * szUID, SQLSMALLINT cbUID, SQLWCHAR * szAuthStr, SQLSMALLINT cbAuthStr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLCopyDesc: hDescSource with: hDescTarget	&lt;C: SQLRETURN _threaded  SQLCopyDesc(SQLHDESC hDescSource, SQLHDESC hDescTarget)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLDataSources: henv with: fDirection with: szDSN with: cbDSNMax with: pcbDSN with: szDescription with: cbDescriptionMax with: pcbDescription	&lt;C: SQLRETURN _threaded  SQLDataSources(SQLHENV henv, SQLUSMALLINT fDirection, SQLCHAR * szDSN, SQLSMALLINT cbDSNMax, SQLSMALLINT * pcbDSN, SQLCHAR * szDescription, SQLSMALLINT cbDescriptionMax, SQLSMALLINT * pcbDescription)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLDataSourcesW: henv with: fDirection with: szDSN with: cbDSNMax with: pcbDSN with: szDescription with: cbDescriptionMax with: pcbDescription	&lt;C: SQLRETURN _threaded  SQLDataSourcesW(SQLHENV henv, SQLUSMALLINT fDirection, SQLWCHAR * szDSN, SQLSMALLINT cbDSNMax, SQLSMALLINT * pcbDSN, SQLWCHAR * szDescription, SQLSMALLINT cbDescriptionMax, SQLSMALLINT * pcbDescription)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLDescribeColW: hstmt with: icol with: szColName with: cbColNameMax with: pcbColName with: pfSqlType with: pcbColDef with: pibScale with: pfNullable	&lt;C: SQLRETURN _threaded  SQLDescribeColW(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLWCHAR * szColName, SQLSMALLINT cbColNameMax, SQLSMALLINT * pcbColName, SQLSMALLINT * pfSqlType, SQLUINTEGER * pcbColDef, SQLSMALLINT * pibScale, SQLSMALLINT * pfNullable)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLDescribeParam: hstmt with: ipar with: pfSqlType with: pcbParamDef with: pibScale with: pfNullable	&lt;C: SQLRETURN _threaded  SQLDescribeParam(SQLHSTMT hstmt, SQLUSMALLINT ipar, SQLSMALLINT * pfSqlType, SQLUINTEGER * pcbParamDef, SQLSMALLINT * pibScale, SQLSMALLINT * pfNullable)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLDisconnect: hdbc	&lt;C: SQLRETURN _threaded  SQLDisconnect(SQLHDBC hdbc)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLDriverConnect: hdbc with: hwnd with: szConnStrIn with: cbConnStrIn with: szConnStrOut with: cbConnStrOutMax with: pcbConnStrOut with: fDriverCompletion	&lt;C: SQLRETURN _threaded  SQLDriverConnect(SQLHDBC hdbc, SQLHWND hwnd, SQLCHAR * szConnStrIn, SQLSMALLINT cbConnStrIn, SQLCHAR * szConnStrOut, SQLSMALLINT cbConnStrOutMax, SQLSMALLINT * pcbConnStrOut, SQLUSMALLINT fDriverCompletion)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLDriverConnectW: hdbc with: hwnd with: szConnStrIn with: cbConnStrIn with: szConnStrOut with: cbConnStrOutMax with: pcbConnStrOut with: fDriverCompletion	&lt;C: SQLRETURN _threaded  SQLDriverConnectW(SQLHDBC hdbc, SQLHWND hwnd, SQLWCHAR * szConnStrIn, SQLSMALLINT cbConnStrIn, SQLWCHAR * szConnStrOut, SQLSMALLINT cbConnStrOutMax, SQLSMALLINT * pcbConnStrOut, SQLUSMALLINT fDriverCompletion)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLDrivers: henv with: fDirection with: szDriverDesc with: cbDriverDescMax with: pcbDriverDesc with: szDriverAttributes with: cbDrvrAttrMax with: pcbDrvrAttr	&lt;C: SQLRETURN _threaded  SQLDrivers(SQLHENV henv, SQLUSMALLINT fDirection, SQLCHAR * szDriverDesc, SQLSMALLINT cbDriverDescMax, SQLSMALLINT * pcbDriverDesc, SQLCHAR * szDriverAttributes, SQLSMALLINT cbDrvrAttrMax, SQLSMALLINT * pcbDrvrAttr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLEndTran: fHandleType with: hHandle with: fType	&lt;C: SQLRETURN _threaded  SQLEndTran(SQLSMALLINT fHandleType, SQLHANDLE hHandle, SQLSMALLINT fType)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLError: henv with: hdbc with: hstmt with: szSqlState with: pfNativeError with: szErrorMsg with: cbErrorMsgMax with: pcbErrorMsg	&lt;C: SQLRETURN _threaded  SQLError(SQLHENV henv, SQLHDBC hdbc, SQLHSTMT hstmt, SQLCHAR * szSqlState, SQLINTEGER * pfNativeError, SQLCHAR * szErrorMsg, SQLSMALLINT cbErrorMsgMax, SQLSMALLINT * pcbErrorMsg)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLErrorW: henv with: hdbc with: hstmt with: szSqlState with: pfNativeError with: szErrorMsg with: cbErrorMsgMax with: pcbErrorMsg	&lt;C: SQLRETURN _threaded  SQLErrorW(SQLHENV henv, SQLHDBC hdbc, SQLHSTMT hstmt, SQLWCHAR * szSqlState, SQLINTEGER * pfNativeError, SQLWCHAR * szErrorMsg, SQLSMALLINT cbErrorMsgMax, SQLSMALLINT * pcbErrorMsg)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLExecDirect: hstmt with: szSqlStr with: cbSqlStr	&lt;C: SQLRETURN _threaded  SQLExecDirect(SQLHSTMT hstmt, SQLCHAR * szSqlStr, SQLINTEGER cbSqlStr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLExecDirectW: hstmt with: szSqlStr with: cbSqlStr	&lt;C: SQLRETURN _threaded  SQLExecDirectW(SQLHSTMT hstmt, SQLWCHAR * szSqlStr, SQLINTEGER cbSqlStr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLExecute: hstmt	&lt;C: SQLRETURN _threaded  SQLExecute(SQLHSTMT hstmt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLExtendedBind: hstmt with: fBindCol with: cRecords with: pfCType with: rgbValue with: cbValueMax with: puiPrecisionCType with: psScaleCType with: pcbValue with: piIndicatorPtr with: pfParamType with: pfSQLType with: pcbColDef with: pibScale	&lt;C: SQLRETURN _threaded  SQLExtendedBind(SQLHSTMT hstmt, SQLSMALLINT fBindCol, SQLSMALLINT cRecords, SQLSMALLINT * pfCType, SQLPOINTER * rgbValue, SQLINTEGER * cbValueMax, SQLUINTEGER * puiPrecisionCType, SQLSMALLINT * psScaleCType, SQLINTEGER * * pcbValue, SQLINTEGER * * piIndicatorPtr, SQLSMALLINT * pfParamType, SQLSMALLINT * pfSQLType, SQLUINTEGER * pcbColDef, SQLSMALLINT * pibScale)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLExtendedFetch: hstmt with: fFetchType with: irow with: pcrow with: rgfRowStatus	&lt;C: SQLRETURN _threaded  SQLExtendedFetch(SQLHSTMT hstmt, SQLUSMALLINT fFetchType, SQLINTEGER irow, SQLUINTEGER * pcrow, SQLUSMALLINT * rgfRowStatus)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLExtendedPrepare: hstmt with: pszSqlStmt with: cbSqlStmt with: cPars with: sStmtType with: cStmtAttrs with: piStmtAttr with: pvParams	&lt;C: SQLRETURN _threaded  SQLExtendedPrepare(SQLHSTMT hstmt, SQLCHAR * pszSqlStmt, SQLINTEGER cbSqlStmt, SQLINTEGER cPars, SQLSMALLINT sStmtType, SQLINTEGER cStmtAttrs, SQLINTEGER * piStmtAttr, SQLINTEGER * pvParams)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLFetchScroll: StatementHandle with: FetchOrientation with: FetchOffset	&lt;C: SQLRETURN _threaded  SQLFetchScroll(SQLHSTMT StatementHandle, SQLSMALLINT FetchOrientation, SQLINTEGER FetchOffset)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLForeignKeys: hstmt with: szPkCatalogName with: cbPkCatalogName with: szPkSchemaName with: cbPkSchemaName with: szPkTableName with: cbPkTableName with: szFkCatalogName with: cbFkCatalogName with: szFkSchemaName with: cbFkSchemaName with: szFkTableName with: cbFkTableName	&lt;C: SQLRETURN _threaded  SQLForeignKeys(SQLHSTMT hstmt, SQLCHAR * szPkCatalogName, SQLSMALLINT cbPkCatalogName, SQLCHAR * szPkSchemaName, SQLSMALLINT cbPkSchemaName, SQLCHAR * szPkTableName, SQLSMALLINT cbPkTableName, SQLCHAR * szFkCatalogName, SQLSMALLINT cbFkCatalogName, SQLCHAR * szFkSchemaName, SQLSMALLINT cbFkSchemaName, SQLCHAR * szFkTableName, SQLSMALLINT cbFkTableName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLForeignKeysW: hstmt with: szPkCatalogName with: cbPkCatalogName with: szPkSchemaName with: cbPkSchemaName with: szPkTableName with: cbPkTableName with: szFkCatalogName with: cbFkCatalogName with: szFkSchemaName with: cbFkSchemaName with: szFkTableName with: cbFkTableName	&lt;C: SQLRETURN _threaded  SQLForeignKeysW(SQLHSTMT hstmt, SQLWCHAR * szPkCatalogName, SQLSMALLINT cbPkCatalogName, SQLWCHAR * szPkSchemaName, SQLSMALLINT cbPkSchemaName, SQLWCHAR * szPkTableName, SQLSMALLINT cbPkTableName, SQLWCHAR * szFkCatalogName, SQLSMALLINT cbFkCatalogName, SQLWCHAR * szFkSchemaName, SQLSMALLINT cbFkSchemaName, SQLWCHAR * szFkTableName, SQLSMALLINT cbFkTableName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLFreeConnect: hdbc	&lt;C: SQLRETURN _threaded  SQLFreeConnect(SQLHDBC hdbc)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLFreeEnv: henv	&lt;C: SQLRETURN _threaded  SQLFreeEnv(SQLHENV henv)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLFreeHandle: fHandleType with: hHandle	&lt;C: SQLRETURN _threaded  SQLFreeHandle(SQLSMALLINT fHandleType, SQLHANDLE hHandle)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLFreeStmt: hstmt with: fOption	&lt;C: SQLRETURN _threaded  SQLFreeStmt(SQLHSTMT hstmt, SQLUSMALLINT fOption)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetConnectAttr: ConnectionHandle with: Attribute with: Value with: BufferLength with: StringLength	&lt;C: SQLRETURN _threaded  SQLGetConnectAttr(SQLHDBC ConnectionHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER * StringLength)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetConnectAttrW: hdbc with: fAttribute with: rgbValue with: cbValueMax with: pcbValue	&lt;C: SQLRETURN _threaded  SQLGetConnectAttrW(SQLHDBC hdbc, SQLINTEGER fAttribute, SQLPOINTER rgbValue, SQLINTEGER cbValueMax, SQLINTEGER * pcbValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetConnectOption: hdbc with: fOption with: pvParam	&lt;C: SQLRETURN _threaded  SQLGetConnectOption(SQLHDBC hdbc, SQLUSMALLINT fOption, SQLPOINTER pvParam)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetCursorName: hstmt with: szCursor with: cbCursorMax with: pcbCursor	&lt;C: SQLRETURN _threaded  SQLGetCursorName(SQLHSTMT hstmt, SQLCHAR * szCursor, SQLSMALLINT cbCursorMax, SQLSMALLINT * pcbCursor)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetCursorNameW: hstmt with: szCursor with: cbCursorMax with: pcbCursor	&lt;C: SQLRETURN _threaded  SQLGetCursorNameW(SQLHSTMT hstmt, SQLWCHAR * szCursor, SQLSMALLINT cbCursorMax, SQLSMALLINT * pcbCursor)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetData: hstmt with: icol with: fCType with: rgbValue with: cbValueMax with: pcbValue	&lt;C: SQLRETURN _threaded  SQLGetData(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLSMALLINT fCType, SQLPOINTER rgbValue, SQLINTEGER cbValueMax, SQLINTEGER * pcbValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetDataLinkAttr: hStmt with: fAttrType with: pDataLink with: cbDataLink with: pAttribute with: cbAttributeMax with: pcbAttribute	&lt;C: SQLRETURN _threaded  SQLGetDataLinkAttr(SQLHSTMT hStmt, SQLSMALLINT fAttrType, SQLCHAR * pDataLink, SQLINTEGER cbDataLink, SQLPOINTER pAttribute, SQLINTEGER cbAttributeMax, SQLINTEGER * pcbAttribute)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetDescField: DescriptorHandle with: RecNumber with: FieldIdentifier with: Value with: BufferLength with: StringLength	&lt;C: SQLRETURN _threaded  SQLGetDescField(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier, SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER * StringLength)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetDescFieldW: hdesc with: iRecord with: iField with: rgbValue with: cbValueMax with: pcbValue	&lt;C: SQLRETURN _threaded  SQLGetDescFieldW(SQLHDESC hdesc, SQLSMALLINT iRecord, SQLSMALLINT iField, SQLPOINTER rgbValue, SQLINTEGER cbValueMax, SQLINTEGER * pcbValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetDescRec: DescriptorHandle with: RecNumber with: Name with: BufferLength with: StringLength with: Type with: SubType with: Length with: Precision with: Scale with: Nullable	&lt;C: SQLRETURN _threaded  SQLGetDescRec(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLCHAR * Name, SQLSMALLINT BufferLength, SQLSMALLINT * StringLength, SQLSMALLINT * Type, SQLSMALLINT * SubType, SQLINTEGER * Length, SQLSMALLINT * Precision, SQLSMALLINT * Scale, SQLSMALLINT * Nullable)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetDescRecW: hdesc with: iRecord with: szName with: cbNameMax with: pcbName with: pfType with: pfSubType with: pLength with: pPrecision with: pScale with: pNullable	&lt;C: SQLRETURN _threaded  SQLGetDescRecW(SQLHDESC hdesc, SQLSMALLINT iRecord, SQLWCHAR * szName, SQLSMALLINT cbNameMax, SQLSMALLINT * pcbName, SQLSMALLINT * pfType, SQLSMALLINT * pfSubType, SQLINTEGER * pLength, SQLSMALLINT * pPrecision, SQLSMALLINT * pScale, SQLSMALLINT * pNullable)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetDiagField: fHandleType with: hHandle with: iRecNumber with: fDiagIdentifier with: pDiagInfo with: cbDiagInfoMax with: pcbDiagInfo	&lt;C: SQLRETURN _threaded  SQLGetDiagField(SQLSMALLINT fHandleType, SQLHANDLE hHandle, SQLSMALLINT iRecNumber, SQLSMALLINT fDiagIdentifier, SQLPOINTER pDiagInfo, SQLSMALLINT cbDiagInfoMax, SQLSMALLINT * pcbDiagInfo)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetDiagFieldW: fHandleType with: handle with: iRecord with: fDiagField with: rgbDiagInfo with: cbDiagInfoMax with: pcbDiagInfo	&lt;C: SQLRETURN _threaded  SQLGetDiagFieldW(SQLSMALLINT fHandleType, SQLHANDLE handle, SQLSMALLINT iRecord, SQLSMALLINT fDiagField, SQLPOINTER rgbDiagInfo, SQLSMALLINT cbDiagInfoMax, SQLSMALLINT * pcbDiagInfo)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetDiagRec: fHandleType with: hHandle with: iRecNumber with: pszSqlState with: pfNativeError with: pszErrorMsg with: cbErrorMsgMax with: pcbErrorMsg	&lt;C: SQLRETURN _threaded  SQLGetDiagRec(SQLSMALLINT fHandleType, SQLHANDLE hHandle, SQLSMALLINT iRecNumber, SQLCHAR * pszSqlState, SQLINTEGER * pfNativeError, SQLCHAR * pszErrorMsg, SQLSMALLINT cbErrorMsgMax, SQLSMALLINT * pcbErrorMsg)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetDiagRecW: fHandleType with: handle with: iRecord with: szSqlState with: pfNativeError with: szErrorMsg with: cbErrorMsgMax with: pcbErrorMsg	&lt;C: SQLRETURN _threaded  SQLGetDiagRecW(SQLSMALLINT fHandleType, SQLHANDLE handle, SQLSMALLINT iRecord, SQLWCHAR * szSqlState, SQLINTEGER * pfNativeError, SQLWCHAR * szErrorMsg, SQLSMALLINT cbErrorMsgMax, SQLSMALLINT * pcbErrorMsg)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetEnvAttr: henv with: Attribute with: Value with: BufferLength with: StringLength	&lt;C: SQLRETURN _threaded  SQLGetEnvAttr(SQLHENV henv, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER * StringLength)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetFunctions: hdbc with: fFunction with: pfExists	&lt;C: SQLRETURN _threaded  SQLGetFunctions(SQLHDBC hdbc, SQLUSMALLINT fFunction, SQLUSMALLINT * pfExists)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetInfo: hdbc with: fInfoType with: rgbInfoValue with: cbInfoValueMax with: pcbInfoValue	&lt;C: SQLRETURN _threaded  SQLGetInfo(SQLHDBC hdbc, SQLUSMALLINT fInfoType, SQLPOINTER rgbInfoValue, SQLSMALLINT cbInfoValueMax, SQLSMALLINT * pcbInfoValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetInfoW: hdbc with: fInfoType with: rgbInfoValue with: cbInfoValueMax with: pcbInfoValue	&lt;C: SQLRETURN _threaded  SQLGetInfoW(SQLHDBC hdbc, SQLUSMALLINT fInfoType, SQLPOINTER rgbInfoValue, SQLSMALLINT cbInfoValueMax, SQLSMALLINT * pcbInfoValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetLength: hstmt with: LocatorCType with: Locator with: StringLength with: IndicatorValue	&lt;C: SQLRETURN _threaded  SQLGetLength(SQLHSTMT hstmt, SQLSMALLINT LocatorCType, SQLINTEGER Locator, SQLINTEGER * StringLength, SQLINTEGER * IndicatorValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetPosition: hstmt with: LocatorCType with: SourceLocator with: SearchLocator with: SearchLiteral with: SearchLiteralLength with: FromPosition with: LocatedAt with: IndicatorValue	&lt;C: SQLRETURN _threaded  SQLGetPosition(SQLHSTMT hstmt, SQLSMALLINT LocatorCType, SQLINTEGER SourceLocator, SQLINTEGER SearchLocator, SQLCHAR * SearchLiteral, SQLINTEGER SearchLiteralLength, SQLUINTEGER FromPosition, SQLUINTEGER * LocatedAt, SQLINTEGER * IndicatorValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetSQLCA: henv with: hdbc with: hstmt with: pSqlca	&lt;C: SQLRETURN _threaded  SQLGetSQLCA(SQLHENV henv, SQLHDBC hdbc, SQLHSTMT hstmt, struct sqlca * pSqlca)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetStmtAttr: StatementHandle with: Attribute with: Value with: BufferLength with: StringLength	&lt;C: SQLRETURN _threaded  SQLGetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER * StringLength)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetStmtAttrW: hstmt with: fAttribute with: rgbValue with: cbValueMax with: pcbValue	&lt;C: SQLRETURN _threaded  SQLGetStmtAttrW(SQLHSTMT hstmt, SQLINTEGER fAttribute, SQLPOINTER rgbValue, SQLINTEGER cbValueMax, SQLINTEGER * pcbValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetStmtOption: hstmt with: fOption with: pvParam	&lt;C: SQLRETURN _threaded  SQLGetStmtOption(SQLHSTMT hstmt, SQLUSMALLINT fOption, SQLPOINTER pvParam)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetSubString: hstmt with: LocatorCType with: SourceLocator with: FromPosition with: ForLength with: TargetCType with: rgbValue with: cbValueMax with: StringLength with: IndicatorValue	&lt;C: SQLRETURN _threaded  SQLGetSubString(SQLHSTMT hstmt, SQLSMALLINT LocatorCType, SQLINTEGER SourceLocator, SQLUINTEGER FromPosition, SQLUINTEGER ForLength, SQLSMALLINT TargetCType, SQLPOINTER rgbValue, SQLINTEGER cbValueMax, SQLINTEGER * StringLength, SQLINTEGER * IndicatorValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLGetTypeInfo: hstmt with: fSqlType	&lt;C: SQLRETURN _threaded  SQLGetTypeInfo(SQLHSTMT hstmt, SQLSMALLINT fSqlType)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLMoreResults: hstmt	&lt;C: SQLRETURN _threaded  SQLMoreResults(SQLHSTMT hstmt)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLNativeSql: hdbc with: szSqlStrIn with: cbSqlStrIn with: szSqlStr with: cbSqlStrMax with: pcbSqlStr	&lt;C: SQLRETURN _threaded  SQLNativeSql(SQLHDBC hdbc, SQLCHAR * szSqlStrIn, SQLINTEGER cbSqlStrIn, SQLCHAR * szSqlStr, SQLINTEGER cbSqlStrMax, SQLINTEGER * pcbSqlStr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLNativeSqlW: hdbc with: szSqlStrIn with: cbSqlStrIn with: szSqlStr with: cbSqlStrMax with: pcbSqlStr	&lt;C: SQLRETURN _threaded  SQLNativeSqlW(SQLHDBC hdbc, SQLWCHAR * szSqlStrIn, SQLINTEGER cbSqlStrIn, SQLWCHAR * szSqlStr, SQLINTEGER cbSqlStrMax, SQLINTEGER * pcbSqlStr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLNumParams: hstmt with: pcpar	&lt;C: SQLRETURN _threaded  SQLNumParams(SQLHSTMT hstmt, SQLSMALLINT * pcpar)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLNumResultCols: hstmt with: pccol	&lt;C: SQLRETURN _threaded  SQLNumResultCols(SQLHSTMT hstmt, SQLSMALLINT * pccol)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLParamData: hstmt with: prgbValue	&lt;C: SQLRETURN _threaded  SQLParamData(SQLHSTMT hstmt, SQLPOINTER * prgbValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLParamOptions: hstmt with: crow with: pirow	&lt;C: SQLRETURN _threaded  SQLParamOptions(SQLHSTMT hstmt, SQLUINTEGER crow, SQLUINTEGER * pirow)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLPrepare: hstmt with: szSqlStr with: cbSqlStr	&lt;C: SQLRETURN _threaded  SQLPrepare(SQLHSTMT hstmt, SQLCHAR * szSqlStr, SQLINTEGER cbSqlStr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLPrepareW: hstmt with: szSqlStr with: cbSqlStr	&lt;C: SQLRETURN _threaded  SQLPrepareW(SQLHSTMT hstmt, SQLWCHAR * szSqlStr, SQLINTEGER cbSqlStr)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLPrimaryKeys: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szTableName with: cbTableName	&lt;C: SQLRETURN _threaded  SQLPrimaryKeys(SQLHSTMT hstmt, SQLCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR * szTableName, SQLSMALLINT cbTableName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLPrimaryKeysW: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szTableName with: cbTableName	&lt;C: SQLRETURN _threaded  SQLPrimaryKeysW(SQLHSTMT hstmt, SQLWCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR * szTableName, SQLSMALLINT cbTableName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLProcedureColumns: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szProcName with: cbProcName with: szColumnName with: cbColumnName	&lt;C: SQLRETURN _threaded  SQLProcedureColumns(SQLHSTMT hstmt, SQLCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR * szProcName, SQLSMALLINT cbProcName, SQLCHAR * szColumnName, SQLSMALLINT cbColumnName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLProcedureColumnsW: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szProcName with: cbProcName with: szColumnName with: cbColumnName	&lt;C: SQLRETURN _threaded  SQLProcedureColumnsW(SQLHSTMT hstmt, SQLWCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR * szProcName, SQLSMALLINT cbProcName, SQLWCHAR * szColumnName, SQLSMALLINT cbColumnName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLProcedures: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szProcName with: cbProcName	&lt;C: SQLRETURN _threaded  SQLProcedures(SQLHSTMT hstmt, SQLCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR * szProcName, SQLSMALLINT cbProcName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLProceduresW: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szProcName with: cbProcName	&lt;C: SQLRETURN _threaded  SQLProceduresW(SQLHSTMT hstmt, SQLWCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR * szProcName, SQLSMALLINT cbProcName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLPutData: hstmt with: rgbValue with: cbValue	&lt;C: SQLRETURN _threaded  SQLPutData(SQLHSTMT hstmt, SQLPOINTER rgbValue, SQLINTEGER cbValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLRowCount: hstmt with: pcrow	&lt;C: SQLRETURN _threaded  SQLRowCount(SQLHSTMT hstmt, SQLINTEGER * pcrow)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetColAttributes: hstmt with: icol with: pszColName with: cbColName with: fSQLType with: cbColDef with: ibScale with: fNullable	&lt;C: SQLRETURN _threaded  SQLSetColAttributes(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLCHAR * pszColName, SQLSMALLINT cbColName, SQLSMALLINT fSQLType, SQLUINTEGER cbColDef, SQLSMALLINT ibScale, SQLSMALLINT fNullable)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetConnectAttr: hdbc with: fOption with: pvParam with: fStrLen	&lt;C: SQLRETURN _threaded  SQLSetConnectAttr(SQLHDBC hdbc, SQLINTEGER fOption, SQLPOINTER pvParam, SQLINTEGER fStrLen)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetConnectAttrW: hdbc with: fAttribute with: rgbValue with: cbValue	&lt;C: SQLRETURN _threaded  SQLSetConnectAttrW(SQLHDBC hdbc, SQLINTEGER fAttribute, SQLPOINTER rgbValue, SQLINTEGER cbValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetConnectOption: hdbc with: fOption with: vParam	&lt;C: SQLRETURN _threaded  SQLSetConnectOption(SQLHDBC hdbc, SQLUSMALLINT fOption, SQLUINTEGER vParam)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetConnection: hdbc	&lt;C: SQLRETURN _threaded  SQLSetConnection(SQLHDBC hdbc)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetCursorName: hstmt with: szCursor with: cbCursor	&lt;C: SQLRETURN _threaded  SQLSetCursorName(SQLHSTMT hstmt, SQLCHAR * szCursor, SQLSMALLINT cbCursor)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetCursorNameW: hstmt with: szCursor with: cbCursor	&lt;C: SQLRETURN _threaded  SQLSetCursorNameW(SQLHSTMT hstmt, SQLWCHAR * szCursor, SQLSMALLINT cbCursor)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetDescField: DescriptorHandle with: RecNumber with: FieldIdentifier with: Value with: BufferLength	&lt;C: SQLRETURN _threaded  SQLSetDescField(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier, SQLPOINTER Value, SQLINTEGER BufferLength)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetDescFieldW: DescriptorHandle with: RecNumber with: FieldIdentifier with: Value with: BufferLength	&lt;C: SQLRETURN _threaded  SQLSetDescFieldW(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier, SQLPOINTER Value, SQLINTEGER BufferLength)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetDescRec: DescriptorHandle with: RecNumber with: Type with: SubType with: Length with: Precision with: Scale with: Data with: StringLength with: Indicator	&lt;C: SQLRETURN _threaded  SQLSetDescRec(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT Type, SQLSMALLINT SubType, SQLINTEGER Length, SQLSMALLINT Precision, SQLSMALLINT Scale, SQLPOINTER Data, SQLINTEGER * StringLength, SQLINTEGER * Indicator)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetEnvAttr: henv with: Attribute with: Value with: StringLength	&lt;C: SQLRETURN _threaded  SQLSetEnvAttr(SQLHENV henv, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER StringLength)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetParam: hstmt with: ipar with: fCType with: fSqlType with: cbParamDef with: ibScale with: rgbValue with: pcbValue	&lt;C: SQLRETURN _threaded  SQLSetParam(SQLHSTMT hstmt, SQLUSMALLINT ipar, SQLSMALLINT fCType, SQLSMALLINT fSqlType, SQLUINTEGER cbParamDef, SQLSMALLINT ibScale, SQLPOINTER rgbValue, SQLINTEGER * pcbValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetPos: hstmt with: irow with: fOption with: fLock	&lt;C: SQLRETURN _threaded  SQLSetPos(SQLHSTMT hstmt, SQLUSMALLINT irow, SQLUSMALLINT fOption, SQLUSMALLINT fLock)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetScrollOptions: hstmt with: fConcurrency with: crowKeyset with: crowRowset	&lt;C: SQLRETURN _threaded  SQLSetScrollOptions(SQLHSTMT hstmt, SQLUSMALLINT fConcurrency, SQLINTEGER crowKeyset, SQLUSMALLINT crowRowset)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetStmtAttr: hstmt with: fOption with: pvParam with: fStrLen	&lt;C: SQLRETURN _threaded  SQLSetStmtAttr(SQLHSTMT hstmt, SQLINTEGER fOption, SQLPOINTER pvParam, SQLINTEGER fStrLen)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetStmtAttrW: hstmt with: fAttribute with: rgbValue with: cbValueMax	&lt;C: SQLRETURN _threaded  SQLSetStmtAttrW(SQLHSTMT hstmt, SQLINTEGER fAttribute, SQLPOINTER rgbValue, SQLINTEGER cbValueMax)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSetStmtOption: hstmt with: fOption with: vParam	&lt;C: SQLRETURN _threaded  SQLSetStmtOption(SQLHSTMT hstmt, SQLUSMALLINT fOption, SQLUINTEGER vParam)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSpecialColumns: hstmt with: fColType with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szTableName with: cbTableName with: fScope with: fNullable	&lt;C: SQLRETURN _threaded  SQLSpecialColumns(SQLHSTMT hstmt, SQLUSMALLINT fColType, SQLCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR * szTableName, SQLSMALLINT cbTableName, SQLUSMALLINT fScope, SQLUSMALLINT fNullable)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLSpecialColumnsW: hstmt with: fColType with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szTableName with: cbTableName with: fScope with: fNullable	&lt;C: SQLRETURN _threaded  SQLSpecialColumnsW(SQLHSTMT hstmt, SQLUSMALLINT fColType, SQLWCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR * szTableName, SQLSMALLINT cbTableName, SQLUSMALLINT fScope, SQLUSMALLINT fNullable)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLStatistics: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szTableName with: cbTableName with: fUnique with: fAccuracy	&lt;C: SQLRETURN _threaded  SQLStatistics(SQLHSTMT hstmt, SQLCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR * szTableName, SQLSMALLINT cbTableName, SQLUSMALLINT fUnique, SQLUSMALLINT fAccuracy)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLStatisticsW: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szTableName with: cbTableName with: fUnique with: fAccuracy	&lt;C: SQLRETURN _threaded  SQLStatisticsW(SQLHSTMT hstmt, SQLWCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR * szTableName, SQLSMALLINT cbTableName, SQLUSMALLINT fUnique, SQLUSMALLINT fAccuracy)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLTablePrivileges: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szTableName with: cbTableName	&lt;C: SQLRETURN _threaded  SQLTablePrivileges(SQLHSTMT hstmt, SQLCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR * szTableName, SQLSMALLINT cbTableName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLTablePrivilegesW: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szTableName with: cbTableName	&lt;C: SQLRETURN _threaded  SQLTablePrivilegesW(SQLHSTMT hstmt, SQLWCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR * szTableName, SQLSMALLINT cbTableName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLTables: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szTableName with: cbTableName with: szTableType with: cbTableType	&lt;C: SQLRETURN _threaded  SQLTables(SQLHSTMT hstmt, SQLCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR * szTableName, SQLSMALLINT cbTableName, SQLCHAR * szTableType, SQLSMALLINT cbTableType)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLTablesW: hstmt with: szCatalogName with: cbCatalogName with: szSchemaName with: cbSchemaName with: szTableName with: cbTableName with: szTableType with: cbTableType	&lt;C: SQLRETURN _threaded  SQLTablesW(SQLHSTMT hstmt, SQLWCHAR * szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR * szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR * szTableName, SQLSMALLINT cbTableName, SQLWCHAR * szTableType, SQLSMALLINT cbTableType)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLTransact: henv with: hdbc with: fType	&lt;C: SQLRETURN _threaded  SQLTransact(SQLHENV henv, SQLHDBC hdbc, SQLUSMALLINT fType)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Database.DB2CLIThreadedInterface</class-id> <category>unknown protocol</category><body package="DB2ThapiEXDI">SQLBindCol: hstmt with: icol with: fCType with: rgbValue with: cbValueMax with: pcbValue	&lt;C: SQLRETURN _threaded  SQLBindCol(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLSMALLINT fCType, SQLPOINTER rgbValue, SQLINTEGER cbValueMax, SQLINTEGER * pcbValue)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLDescribeCol: hstmt with: icol with: szColName with: cbColNameMax with: pcbColName with: pfSqlType with: pcbColDef with: pibScale with: pfNullable	&lt;C: SQLRETURN _threaded  SQLDescribeCol(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLCHAR * szColName, SQLSMALLINT cbColNameMax, SQLSMALLINT * pcbColName, SQLSMALLINT * pfSqlType, SQLUINTEGER * pcbColDef, SQLSMALLINT * pibScale, SQLSMALLINT * pfNullable)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="DB2ThapiEXDI">SQLFetch: hstmt	&lt;C: SQLRETURN _threaded  SQLFetch(SQLHSTMT hstmt)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><initialize><class-id>Database.DB2CLIThreadedInterface</class-id></initialize><initialize><class-id>Database.DB2ThreadedConnection</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>DB2CLIInterface</name><environment>Database</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>encoding </inst-vars><class-inst-vars>getSelectorMap fSqlTypeToConversionMap fetchBufferSizeBlocks putSelectorMap fCTypeFromConversionMap fSqlTypeFromConversionMap valueSizeBlocks valuePrecisionBlocks dataChunkSize conversionBufferMap </class-inst-vars><imports>			private Database.DB2CLIInterfaceDictionary.*			</imports><category>Database-DB2</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>DB2EXDI</package></attributes></class><class><name>DB2Session</name><environment>Database</environment><super>Database.ExternalDatabaseSession</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hstmtHolder resultsCache bindValuePointersHolder mustResendQueryHolder maxLongData currentRowIndex rowsInBlock totalRows pRowsFetchedHolder sqlStatementAttributeCache paramSetSize queryIsCALL mustCloseCursorHolder deferCursorClosing answerBlob rowStatus </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-DB2</category><attributes><package>DB2EXDI</package></attributes></class><class><name>DB2Connection</name><environment>Database</environment><super>Database.ExternalDatabaseConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hdbcHolder supportedFunctions generalInformationCache blobHstmt unicodeEncoding </inst-vars><class-inst-vars>apiXif apiXifMap </class-inst-vars><imports></imports><category>Database-DB2</category><attributes><package>DB2EXDI</package></attributes></class></st-source>