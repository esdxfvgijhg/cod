<?xml version="1.0"?><st-source><!-- Name: ODBCThapiEXDINotice: Copyright 2008-2016 Cincom Systems, Inc.  All rights reserved.Comment: Provides a THAPI (threaded interconnect) interface to the ODBC client libraries.To create a new thread connection simply use ODBCConnection>>newBeThreaded.Further information on the EXDI can be found in the "Database Application Developer''s Guide" (located in the /doc subdirectory of the VisualWorks installation).  For additional information on the threaded interconnect, see the "DLL and C Connect User''s Guide".DbIdentifier: bear73DbTrace: 494857DbUsername: yliDbVersion: 8.3 - 1DevelopmentPrerequisites: #(#(#any 'ODBCEXDI' '') #(#any 'DLLCC' ''))HideSource: falsePackageName: ODBCThapiEXDIParcel: #('ODBCThapiEXDI')ParcelName: ODBCThapiEXDIPrerequisiteParcels: #(#('ODBCEXDI' ''))PrintStringCache: (8.3 - 1,yli)SaveSource: trueVersion: 8.3 - 1Date: 12:18:34 PM October 7, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (oct16.1) of October 7, 2016 on October 7, 2016 at 12:18:34 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ODBCCLIThreadedInterface</name><environment>Database</environment><super>Database.ODBCCLIInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.ODBCCLIThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>ODBCThapiEXDI</package></attributes></class><comment><class-id>Database.ODBCCLIThreadedInterface</class-id><body>ODBCCLIThreadedInterface defines multi-threaded calling conventions for the ODBC connect.</body></comment><class><name>ODBCCLISolarisThreadedInterface</name><environment>Database</environment><super>Database.ODBCCLIThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.ODBCCLISolarisThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libiodbc.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>ODBCThapiEXDI</package></attributes></class><comment><class-id>Database.ODBCCLISolarisThreadedInterface</class-id><body>ODBCCLISolarisThreadedInterface defines the multi-threaded ODBC calling conventions on Solaris platform.</body></comment><class><name>ODBCCLI64BitThreadedInterface</name><environment>Database</environment><super>Database.ODBCCLIThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.ODBCCLI64BitThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>ODBCThapiEXDI</package></attributes></class><comment><class-id>Database.ODBCCLI64BitThreadedInterface</class-id><body>This class defines 64-bit calling conventions for the ODBC client interface api. It should only be used in 64-bit images, running on a 64-bit VM.The 64-bit VM currently regards "long int" as a 64-bit integer, but the 64-bit ODBC libraries see long as 32-bits, so long has been replaced by int. In addition, the 64-bit ODBC api has updated some functions, upgrading some parameters to 64-bits. Those api changes are reflected here.</body></comment><class><name>ODBCCLINT64ThreadedInterface</name><environment>Database</environment><super>Database.ODBCCLI64BitThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.ODBCCLINT64ThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>odbc32.dll</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>ODBCThapiEXDI</package></attributes></class><comment><class-id>Database.ODBCCLINT64ThreadedInterface</class-id><body>ODBCCLINT64ThreadedInterface is used with 64-bit windows. See the class comment if ODBCCLINT64Interface for more details about the DLL used.</body></comment><class><name>ODBC2ThreadedConnection</name><environment>Database</environment><super>Database.ODBC2Connection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accessProtect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-ODBC</category><attributes><package>ODBCThapiEXDI</package></attributes></class><comment><class-id>Database.ODBC2ThreadedConnection</class-id><body>ODBCThreadedConnection defines multi-threaded calling conventions for the ODBC APIs.Instance Variables:	accessProtect	&lt;Semaphore&gt;	A Semaphore used to synchronize the communication among the connections in different threads.</body></comment><class><name>ODBCCLIAIXThreadedInterface</name><environment>Database</environment><super>Database.ODBCCLIThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.ODBCCLIAIXThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libiodbc.a</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>ODBCThapiEXDI</package></attributes></class><comment><class-id>Database.ODBCCLIAIXThreadedInterface</class-id><body>ODBCCLIAIXThreadedInterface defines the multi-threaded ODBC calling conventions on AIX platform.</body></comment><class><name>ODBCThreadedSession</name><environment>Database</environment><super>Database.ODBCSession</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accessProtect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-ODBC</category><attributes><package>ODBCThapiEXDI</package></attributes></class><comment><class-id>Database.ODBCThreadedSession</class-id><body>ODBC3ThreadedSession is the concrete implementation of multi-threaded ODBC session services.Instance Variables:	accessProtect	&lt;Semaphore&gt;	A Semaphore used to synchronize the communication among the sessions in different threads.</body></comment><class><name>ODBCThreadedConnection</name><environment>Database</environment><super>Database.ODBCConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accessProtect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-ODBC</category><attributes><package>ODBCThapiEXDI</package></attributes></class><comment><class-id>Database.ODBCThreadedConnection</class-id><body>ODBC3ThreadedConnection defines multi-threaded calling conventions using the ODBC 3.0 APIs.Instance Variables:	accessProtect	&lt;Semaphore&gt;	A Semaphore used to synchronize the communication among the connections in different threads.</body></comment><class><name>ODBCCLILinuxThreadedInterface</name><environment>Database</environment><super>Database.ODBCCLIThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.ODBCCLILinuxThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libiodbc.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>ODBCThapiEXDI</package></attributes></class><comment><class-id>Database.ODBCCLILinuxThreadedInterface</class-id><body>ODBCCLILinuxThreadedInterface defines the multi-threaded ODBC calling conventions on Linux (Intel) platforms.</body></comment><class><name>ODBCCLILinux64ThreadedInterface</name><environment>Database</environment><super>Database.ODBCCLI64BitThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.ODBCCLILinux64ThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libodbc.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>ODBCThapiEXDI</package></attributes></class><comment><class-id>Database.ODBCCLILinux64ThreadedInterface</class-id><body>ODBCCLILinux64ThreadedInterface is used with 64-bit Linux platforms.</body></comment><class><name>ODBCCLIMacOSXThreadedInterface</name><environment>Database</environment><super>Database.ODBCCLIThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.ODBCCLIMacOSXThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libiodbc.dylib</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>ODBCThapiEXDI</package></attributes></class><comment><class-id>Database.ODBCCLIMacOSXThreadedInterface</class-id><body>ODBCCLIMacOSXThreadedInterface defines the multi-threaded ODBC calling conventions on Mac OSX platform.</body></comment><class><name>ODBCCLINTThreadedInterface</name><environment>Database</environment><super>Database.ODBCCLIThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.ODBCCLINTThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>odbc32.dll</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>ODBCThapiEXDI</package></attributes></class><comment><class-id>Database.ODBCCLINTThreadedInterface</class-id><body>ODBCCLINTThreadedInterface defines the multi-threaded ODBC calling conventions on Windows NT platform.</body></comment><class><name>ODBC2ThreadedSession</name><environment>Database</environment><super>Database.ODBC2Session</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accessProtect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-ODBC</category><attributes><package>ODBCThapiEXDI</package></attributes></class><comment><class-id>Database.ODBC2ThreadedSession</class-id><body>ODBCThreadedSession defines multi-threaded session services using the ODBC APIs.Instance Variables:	accessProtect	&lt;Semaphore&gt;	description of accessProtect</body></comment><class><name>ODBCCLIMacOSX64ThreadedInterface</name><environment>Database</environment><super>Database.ODBCCLI64BitThreadedInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.ODBCCLIMacOSX64ThreadedInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libiodbc.dylib</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>ODBCThapiEXDI</package></attributes></class><comment><class-id>Database.ODBCCLIMacOSX64ThreadedInterface</class-id><body>ODBCCLIMacOSX64ThreadedInterface is used with 64-bit Mac OSX platform.</body></comment><shared-variable><name>RegisteredODBCThreadedConnections</name><environment>Database.ODBC2ThreadedConnection</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ODBCThapiEXDI</package></attributes></shared-variable><shared-variable><name>ODBCCLILinuxThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>ODBCThapiEXDI</package></attributes></shared-variable><shared-variable><name>ODBCCLISolarisThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>ODBCThapiEXDI</package></attributes></shared-variable><shared-variable><name>ODBCCLINT64ThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>ODBCThapiEXDI</package></attributes></shared-variable><shared-variable><name>ODBCCLIMacOSX64ThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>ODBCThapiEXDI</package></attributes></shared-variable><shared-variable><name>ODBCCLIMacOSXThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>ODBCThapiEXDI</package></attributes></shared-variable><shared-variable><name>ODBCCLINTThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>ODBCThapiEXDI</package></attributes></shared-variable><shared-variable><name>ODBCCLIThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>ODBCThapiEXDI</package></attributes></shared-variable><shared-variable><name>ODBCCLIAIXThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>ODBCThapiEXDI</package></attributes></shared-variable><shared-variable><name>ODBCCLI64BitThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>ODBCThapiEXDI</package></attributes></shared-variable><shared-variable><name>ODBCCLILinux64ThreadedInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>ODBCThapiEXDI</package></attributes></shared-variable><shared-variable><name>RegisteredODBCThreadedSessions</name><environment>Database.ODBC2ThreadedSession</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ODBCThapiEXDI</package></attributes></shared-variable><shared-variable><name>RegisteredODBC3ThreadedConnections</name><environment>Database.ODBCThreadedConnection</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ODBCThapiEXDI</package></attributes></shared-variable><shared-variable><name>RegisteredODBC3ThreadedSessions</name><environment>Database.ODBCThreadedSession</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>ODBCThapiEXDI</package></attributes></shared-variable><methods><class-id>Database.ODBCCLIThreadedInterface class</class-id> <category>class initialization</category><body package="ODBCThapiEXDI">initialize	super initialize</body></methods><methods><class-id>Database.ODBCCLISolarisThreadedInterface class</class-id> <category>class initialization</category><body package="ODBCThapiEXDI">initialize	super initialize.</body></methods><methods><class-id>Database.ODBCCLI64BitThreadedInterface</class-id> <category>types</category><body package="ODBCThapiEXDI">SQLLEN	&lt;C: typedef long SQLLEN&gt;</body><body package="ODBCThapiEXDI">SQLULEN	&lt;C: typedef unsigned long SQLULEN&gt;</body></methods><methods><class-id>Database.ODBCCLI64BitThreadedInterface</class-id> <category>defines</category><body package="ODBCThapiEXDI">UINT64	&lt;C: typedef unsigned long UINT64&gt;</body></methods><methods><class-id>Database.ODBCCLI64BitThreadedInterface</class-id> <category>accessing</category><body package="ODBCThapiEXDI">longIntegerType	"This returns the CIntegerType used in some malloc: calls for a long int."	^CIntegerType longLong</body></methods><methods><class-id>Database.ODBCCLI64BitThreadedInterface class</class-id> <category>class initialization</category><body package="ODBCThapiEXDI">initialize	super initialize.</body></methods><methods><class-id>Database.ODBCCLINT64ThreadedInterface class</class-id> <category>class initialization</category><body package="ODBCThapiEXDI">initialize	super initialize.</body></methods><methods><class-id>Database.ODBC2ThreadedConnection</class-id> <category>initialize-release</category><body package="ODBCThapiEXDI">initialize	super initialize.	accessProtect := Semaphore forMutualExclusion.</body></methods><methods><class-id>Database.ODBC2ThreadedConnection</class-id> <category>connections</category><body package="ODBCThapiEXDI">getSession	"Answer an instance of the driver's subclass of ExternalDatabaseSession."	"this needs access protection when multiple processes contain sessions	which were obtained from a common connection"	accessProtect critical: [^super getSession].</body></methods><methods><class-id>Database.ODBC2ThreadedConnection class</class-id> <category>accessing</category><body package="ODBCThapiEXDI">kind	"Answer a symbol representing the type of DMBS the receiver provides services for."	^#'ODBC 3.0 Threaded (Generic)'</body><body package="ODBCThapiEXDI">sessionClass	"Answer the class to use for session objects associated with receiver."	^ODBC2ThreadedSession</body><body package="ODBCThapiEXDI">version	^'Database Connect for ODBC Threaded - Release 3.5'</body></methods><methods><class-id>Database.ODBC2ThreadedConnection class</class-id> <category>class initialization</category><body package="ODBCThapiEXDI">initialize	"ODBCThreadedConnection initialize"	self initRegistry.</body><body package="ODBCThapiEXDI">initializeInterfaceMapping	xifMap := IdentityDictionary new.	xifMap at: #nt put: #ODBCCLINTThreadedInterface.	xifMap at: #nt64 put: #ODBCCLINT64ThreadedInterface.	xifMap at: #win95 put: #ODBCCLINTThreadedInterface.	xifMap at: #macOSX put: #ODBCCLIMacOSXThreadedInterface.	xifMap at: #macOSX64 put: #ODBCCLIMacOSX64ThreadedInterface.	xifMap at: #linux_i386_unix put: #ODBCCLILinuxThreadedInterface.	xifMap at: #linux_x86_64_unix put: #ODBCCLILinux64ThreadedInterface.	xifMap at: #aix_unix put: #ODBCCLIAIXInterface.	xifMap at: #sun5_unix put: #ODBCCLISolarisThreadedInterface.	xifMap at: #unknown put: #ODBCCLINTThreadedInterface</body></methods><methods><class-id>Database.ODBC2ThreadedConnection class</class-id> <category>private-registry</category><body package="ODBCThapiEXDI">registry	^RegisteredODBCThreadedConnections</body><body package="ODBCThapiEXDI">registry: aCollection	RegisteredODBCThreadedConnections := aCollection</body></methods><methods><class-id>Database.ODBC2ThreadedConnection class</class-id> <category>threading</category><body package="ODBCThapiEXDI">isThreaded		^true</body></methods><methods><class-id>Database.ODBCCLIAIXThreadedInterface class</class-id> <category>class initialization</category><body package="ODBCThapiEXDI">initialize	super initialize.</body></methods><methods><class-id>Database.ODBCThreadedSession</class-id> <category>initialize-release</category><body package="ODBCThapiEXDI">initialize	super initialize.	accessProtect := Semaphore forMutualExclusion.</body></methods><methods><class-id>Database.ODBCThreadedSession class</class-id> <category>accessing</category><body package="ODBCThapiEXDI">connectionClass	"Answer the class to use for connection objects associated with receiver."	^ODBCThreadedConnection</body></methods><methods><class-id>Database.ODBCThreadedSession class</class-id> <category>private-registry</category><body package="ODBCThapiEXDI">registry	^RegisteredODBC3ThreadedSessions</body><body package="ODBCThapiEXDI">registry: aCollection	RegisteredODBC3ThreadedSessions := aCollection</body></methods><methods><class-id>Database.ODBCThreadedSession class</class-id> <category>class initialization</category><body package="ODBCThapiEXDI">initialize	"ODBC3ThreadedSession initialize"	super initialize.</body></methods><methods><class-id>Database.ODBCThreadedConnection</class-id> <category>connections</category><body package="ODBCThapiEXDI">getSession	"Answer an instance of the driver's subclass of ExternalDatabaseSession."	"this needs access protection when multiple processes contain sessions	which were obtained from a common connection"	accessProtect critical: [^super getSession].</body></methods><methods><class-id>Database.ODBCThreadedConnection</class-id> <category>initialize-release</category><body package="ODBCThapiEXDI">initialize	super initialize.	accessProtect := Semaphore forMutualExclusion.</body></methods><methods><class-id>Database.ODBCThreadedConnection class</class-id> <category>accessing</category><body package="ODBCThapiEXDI">kind	"Answer a symbol representing the type of DMBS the receiver provides services for."	^#'ODBC 3.0 Threaded (Generic)'</body><body package="ODBCThapiEXDI">sessionClass	"Answer the class to use for session objects associated with receiver."	^ODBCThreadedSession</body><body package="ODBCThapiEXDI">version	^'Database Connect for ODBC Threaded - Release 3.5'</body></methods><methods><class-id>Database.ODBCThreadedConnection class</class-id> <category>threading</category><body package="ODBCThapiEXDI">isThreaded		^true</body></methods><methods><class-id>Database.ODBCThreadedConnection class</class-id> <category>class initialization</category><body package="ODBCThapiEXDI">initialize	"ODBCThreadedConnection initialize"	self initRegistry.</body><body package="ODBCThapiEXDI">initializeInterfaceMapping	xifMap := IdentityDictionary new.	xifMap at: #nt put: #ODBCCLINTThreadedInterface.	xifMap at: #nt64 put: #ODBCCLINT64ThreadedInterface.	xifMap at: #win95 put: #ODBCCLINTThreadedInterface.	xifMap at: #macOSX put: #ODBCCLIMacOSXThreadedInterface.	xifMap at: #linux_i386_unix put: #ODBCCLILinuxThreadedInterface.	xifMap at: #aix_unix put: #ODBCCLIAIXInterface.	xifMap at: #sun5_unix put: #ODBCCLISolarisThreadedInterface.	xifMap at: #unknown put: #ODBCCLINTThreadedInterface</body></methods><methods><class-id>Database.ODBCThreadedConnection class</class-id> <category>private-registry</category><body package="ODBCThapiEXDI">registry	^RegisteredODBC3ThreadedConnections</body><body package="ODBCThapiEXDI">registry: aCollection	RegisteredODBC3ThreadedConnections := aCollection</body></methods><methods><class-id>Database.ODBCCLILinuxThreadedInterface class</class-id> <category>class initialization</category><body package="ODBCThapiEXDI">initialize	super initialize.</body></methods><methods><class-id>Database.ODBCCLIMacOSXThreadedInterface class</class-id> <category>class initialization</category><body package="ODBCThapiEXDI">initialize	super initialize.</body></methods><methods><class-id>Database.ODBCCLINTThreadedInterface class</class-id> <category>class initialization</category><body package="ODBCThapiEXDI">initialize	super initialize</body></methods><methods><class-id>Database.ODBC2ThreadedSession</class-id> <category>initialize-release</category><body package="ODBCThapiEXDI">initialize	super initialize.	accessProtect := Semaphore forMutualExclusion.</body></methods><methods><class-id>Database.ODBC2ThreadedSession class</class-id> <category>private-registry</category><body package="ODBCThapiEXDI">registry	^RegisteredODBCThreadedSessions</body><body package="ODBCThapiEXDI">registry: aCollection	RegisteredODBCThreadedSessions := aCollection</body></methods><methods><class-id>Database.ODBC2ThreadedSession class</class-id> <category>class initialization</category><body package="ODBCThapiEXDI">initialize	"ODBCThreadedSession initialize"	super initialize.</body></methods><methods><class-id>Database.ODBC2ThreadedSession class</class-id> <category>accessing</category><body package="ODBCThapiEXDI">connectionClass	"Answer the class to use for connection objects associated with receiver."	^ODBC2ThreadedConnection</body></methods><methods><class-id>Database.ODBC2Connection class</class-id> <category>threading</category><body package="ODBCThapiEXDI">isThreaded		^false</body><body package="ODBCThapiEXDI">newBeThreaded	"return a new instance that will run under thapi"	^self threadedConnectionClass new</body><body package="ODBCThapiEXDI">threadedConnectionClass	^ODBC2ThreadedConnection</body></methods><methods><class-id>Database.ODBCCLIThreadedInterface</class-id> <category>procedures</category><body package="ODBCThapiEXDI">SQLAllocConnect: henv with: phdbc	&lt;C: RETCODE _threaded SQLAllocConnect(HENV henv, HDBC * phdbc)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLAllocEnv: phenv	&lt;C: RETCODE _threaded SQLAllocEnv(HENV * phenv)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLAllocStmt: hdbc with: phstmt	&lt;C: RETCODE _threaded SQLAllocStmt(HDBC hdbc, HSTMT * phstmt)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLBindCol: hstmt with: icol with: fCType with: rgbValue with: cbValueMax with: pcbValue	&lt;C: RETCODE _threaded SQLBindCol(HSTMT hstmt, UWORD icol, SWORD fCType, PTR rgbValue, SDWORD cbValueMax, SDWORD * pcbValue)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLBindParameter: hstmt with: ipar with: fParamType with: fCType with: fSqlType with: cbColDef with: ibScale with: rgbValue with: cbValueMax with: pcbValue	&lt;C: RETCODE _threaded SQLBindParameter(HSTMT hstmt, UWORD ipar, SWORD fParamType, SWORD fCType, SWORD fSqlType, UDWORD cbColDef, SWORD ibScale, PTR rgbValue, SDWORD cbValueMax, SDWORD * pcbValue)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLBrowseConnect: hdbc with: szConnStrIn with: cbConnStrIn with: szConnStrOut with: cbConnStrOutMax with: pcbConnStrOut	&lt;C: RETCODE _threaded SQLBrowseConnect(HDBC hdbc, UCHAR * szConnStrIn, SWORD cbConnStrIn, UCHAR * szConnStrOut, SWORD cbConnStrOutMax, SWORD * pcbConnStrOut)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLCancel: hstmt	&lt;C: RETCODE _threaded SQLCancel(HSTMT hstmt)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLColAttributes: hstmt with: icol with: fDescType with: rgbDesc with: cbDescMax with: pcbDesc with: pfDesc	&lt;C: RETCODE _threaded SQLColAttributes(HSTMT hstmt, UWORD icol, UWORD fDescType, PTR rgbDesc, SWORD cbDescMax, SWORD * pcbDesc, SDWORD * pfDesc)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLColumnPrivileges: hstmt with: szTableQualifier with: cbTableQualifier with: szTableOwner with: cbTableOwner with: szTableName with: cbTableName with: szColumnName with: cbColumnName	&lt;C: RETCODE _threaded SQLColumnPrivileges(HSTMT hstmt, UCHAR * szTableQualifier, SWORD cbTableQualifier, UCHAR * szTableOwner, SWORD cbTableOwner, UCHAR * szTableName, SWORD cbTableName, UCHAR * szColumnName, SWORD cbColumnName)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLColumns: hstmt with: szTableQualifier with: cbTableQualifier with: szTableOwner with: cbTableOwner with: szTableName with: cbTableName with: szColumnName with: cbColumnName	&lt;C: RETCODE _threaded SQLColumns(HSTMT hstmt, UCHAR * szTableQualifier, SWORD cbTableQualifier, UCHAR * szTableOwner, SWORD cbTableOwner, UCHAR * szTableName, SWORD cbTableName, UCHAR * szColumnName, SWORD cbColumnName)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLConnect: hdbc with: szDSN with: cbDSN with: szUID with: cbUID with: szAuthStr with: cbAuthStr	&lt;C: RETCODE _threaded SQLConnect(HDBC hdbc, UCHAR * szDSN, SWORD cbDSN, UCHAR * szUID, SWORD cbUID, UCHAR * szAuthStr, SWORD cbAuthStr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLDataSources: henv with: fDirection with: szDSN with: cbDSNMax with: pcbDSN with: szDescription with: cbDescriptionMax with: pcbDescription	&lt;C: RETCODE _threaded SQLDataSources(HENV henv, UWORD fDirection, UCHAR * szDSN, SWORD cbDSNMax, SWORD * pcbDSN, UCHAR * szDescription, SWORD cbDescriptionMax, SWORD * pcbDescription)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLDescribeCol: hstmt with: icol with: szColName with: cbColNameMax with: pcbColName with: pfSqlType with: pcbColDef with: pibScale with: pfNullable	&lt;C: RETCODE _threaded SQLDescribeCol(HSTMT hstmt, UWORD icol, UCHAR * szColName, SWORD cbColNameMax, SWORD * pcbColName, SWORD * pfSqlType, UDWORD * pcbColDef, SWORD * pibScale, SWORD * pfNullable)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLDescribeParam: hstmt with: ipar with: pfSqlType with: pcbColDef with: pibScale with: pfNullable	&lt;C: RETCODE _threaded SQLDescribeParam(HSTMT hstmt, UWORD ipar, SWORD * pfSqlType, UDWORD * pcbColDef, SWORD * pibScale, SWORD * pfNullable)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLDisconnect: hdbc	&lt;C: RETCODE _threaded SQLDisconnect(HDBC hdbc)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLDriverConnect: hdbc with: hwnd with: szConnStrIn with: cbConnStrIn with: szConnStrOut with: cbConnStrOutMax with: pcbConnStrOut with: fDriverCompletion	&lt;C: RETCODE _threaded SQLDriverConnect(HDBC hdbc, HWND hwnd, UCHAR * szConnStrIn, SWORD cbConnStrIn, UCHAR * szConnStrOut, SWORD cbConnStrOutMax, SWORD * pcbConnStrOut, UWORD fDriverCompletion)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLDrivers: henv with: fDirection with: szDriverDesc with: cbDriverDescMax with: pcbDriverDesc with: szDriverAttributes with: cbDrvrAttrMax with: pcbDrvrAttr	&lt;C: RETCODE _threaded SQLDrivers(HENV henv, UWORD fDirection, UCHAR * szDriverDesc, SWORD cbDriverDescMax, SWORD * pcbDriverDesc, UCHAR * szDriverAttributes, SWORD cbDrvrAttrMax, SWORD * pcbDrvrAttr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLError: henv with: hdbc with: hstmt with: szSqlState with: pfNativeError with: szErrorMsg with: cbErrorMsgMax with: pcbErrorMsg	&lt;C: RETCODE _threaded SQLError(HENV henv, HDBC hdbc, HSTMT hstmt, UCHAR * szSqlState, SDWORD * pfNativeError, UCHAR * szErrorMsg, SWORD cbErrorMsgMax, SWORD * pcbErrorMsg)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLExecDirect: hstmt with: szSqlStr with: cbSqlStr	&lt;C: RETCODE _threaded SQLExecDirect(HSTMT hstmt, UCHAR * szSqlStr, SDWORD cbSqlStr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLExecute: hstmt	&lt;C: RETCODE _threaded SQLExecute(HSTMT hstmt)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLExtendedFetch: hstmt with: fFetchType with: irow with: pcrow with: rgfRowStatus	&lt;C: RETCODE _threaded SQLExtendedFetch(HSTMT hstmt, UWORD fFetchType, SDWORD irow, UDWORD * pcrow, UWORD * rgfRowStatus)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLFetch: hstmt	&lt;C: RETCODE _threaded SQLFetch(HSTMT hstmt)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLForeignKeys: hstmt with: szPkTableQualifier with: cbPkTableQualifier with: szPkTableOwner with: cbPkTableOwner with: szPkTableName with: cbPkTableName with: szFkTableQualifier with: cbFkTableQualifier with: szFkTableOwner with: cbFkTableOwner with: szFkTableName with: cbFkTableName	&lt;C: RETCODE _threaded SQLForeignKeys(HSTMT hstmt, UCHAR * szPkTableQualifier, SWORD cbPkTableQualifier, UCHAR * szPkTableOwner, SWORD cbPkTableOwner, UCHAR * szPkTableName, SWORD cbPkTableName, UCHAR * szFkTableQualifier, SWORD cbFkTableQualifier, UCHAR * szFkTableOwner, SWORD cbFkTableOwner, UCHAR * szFkTableName, SWORD cbFkTableName)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLFreeConnect: hdbc	&lt;C: RETCODE _threaded SQLFreeConnect(HDBC hdbc)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLFreeEnv: henv	&lt;C: RETCODE _threaded SQLFreeEnv(HENV henv)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLFreeStmt: hstmt with: fOption	&lt;C: RETCODE _threaded SQLFreeStmt(HSTMT hstmt, UWORD fOption)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetConnectOption: hdbc with: fOption with: pvParam	&lt;C: RETCODE _threaded SQLGetConnectOption(HDBC hdbc, UWORD fOption, PTR pvParam)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetCursorName: hstmt with: szCursor with: cbCursorMax with: pcbCursor	&lt;C: RETCODE _threaded SQLGetCursorName(HSTMT hstmt, UCHAR * szCursor, SWORD cbCursorMax, SWORD * pcbCursor)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetData: hstmt with: icol with: fCType with: rgbValue with: cbValueMax with: pcbValue	&lt;C: RETCODE _threaded SQLGetData(HSTMT hstmt, UWORD icol, SWORD fCType, PTR rgbValue, SDWORD cbValueMax, SDWORD * pcbValue)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetFunctions: hdbc with: fFunction with: pfExists	&lt;C: RETCODE _threaded SQLGetFunctions(HDBC hdbc, UWORD fFunction, UWORD * pfExists)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetInfo: hdbc with: fInfoType with: rgbInfoValue with: cbInfoValueMax with: pcbInfoValue	&lt;C: RETCODE _threaded SQLGetInfo(HDBC hdbc, UWORD fInfoType, PTR rgbInfoValue, SWORD cbInfoValueMax, SWORD * pcbInfoValue)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetStmtOption: hstmt with: fOption with: pvParam	&lt;C: RETCODE _threaded SQLGetStmtOption(HSTMT hstmt, UWORD fOption, PTR pvParam)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetTypeInfo: hstmt with: fSqlType	&lt;C: RETCODE _threaded SQLGetTypeInfo(HSTMT hstmt, SWORD fSqlType)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLMoreResults: hstmt	&lt;C: RETCODE _threaded SQLMoreResults(HSTMT hstmt)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLNativeSql: hdbc with: szSqlStrIn with: cbSqlStrIn with: szSqlStr with: cbSqlStrMax with: pcbSqlStr	&lt;C: RETCODE _threaded SQLNativeSql(HDBC hdbc, UCHAR * szSqlStrIn, SDWORD cbSqlStrIn, UCHAR * szSqlStr, SDWORD cbSqlStrMax, SDWORD * pcbSqlStr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLNumParams: hstmt with: pcpar	&lt;C: RETCODE _threaded SQLNumParams(HSTMT hstmt, SWORD * pcpar)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLNumResultCols: hstmt with: pccol	&lt;C: RETCODE _threaded SQLNumResultCols(HSTMT hstmt, SWORD * pccol)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLParamData: hstmt with: prgbValue	&lt;C: RETCODE _threaded SQLParamData(HSTMT hstmt, PTR * prgbValue)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLParamOptions: hstmt with: crow with: pirow	&lt;C: RETCODE _threaded SQLParamOptions(HSTMT hstmt, UDWORD crow, UDWORD * pirow)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLPrepare: hstmt with: szSqlStr with: cbSqlStr	&lt;C: RETCODE _threaded SQLPrepare(HSTMT hstmt, UCHAR * szSqlStr, SDWORD cbSqlStr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLPrimaryKeys: hstmt with: szTableQualifier with: cbTableQualifier with: szTableOwner with: cbTableOwner with: szTableName with: cbTableName	&lt;C: RETCODE _threaded SQLPrimaryKeys(HSTMT hstmt, UCHAR * szTableQualifier, SWORD cbTableQualifier, UCHAR * szTableOwner, SWORD cbTableOwner, UCHAR * szTableName, SWORD cbTableName)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLProcedureColumns: hstmt with: szProcQualifier with: cbProcQualifier with: szProcOwner with: cbProcOwner with: szProcName with: cbProcName with: szColumnName with: cbColumnName	&lt;C: RETCODE _threaded SQLProcedureColumns(HSTMT hstmt, UCHAR * szProcQualifier, SWORD cbProcQualifier, UCHAR * szProcOwner, SWORD cbProcOwner, UCHAR * szProcName, SWORD cbProcName, UCHAR * szColumnName, SWORD cbColumnName)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLProcedures: hstmt with: szProcQualifier with: cbProcQualifier with: szProcOwner with: cbProcOwner with: szProcName with: cbProcName	&lt;C: RETCODE _threaded SQLProcedures(HSTMT hstmt, UCHAR * szProcQualifier, SWORD cbProcQualifier, UCHAR * szProcOwner, SWORD cbProcOwner, UCHAR * szProcName, SWORD cbProcName)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLPutData: hstmt with: rgbValue with: cbValue	&lt;C: RETCODE _threaded SQLPutData(HSTMT hstmt, PTR rgbValue, SDWORD cbValue)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLRowCount: hstmt with: pcrow	&lt;C: RETCODE _threaded SQLRowCount(HSTMT hstmt, SDWORD * pcrow)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetConnectOption: hdbc with: fOption with: vParam	&lt;C: RETCODE _threaded SQLSetConnectOption(HDBC hdbc, UWORD fOption, UDWORD vParam)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetCursorName: hstmt with: szCursor with: cbCursor	&lt;C: RETCODE _threaded SQLSetCursorName(HSTMT hstmt, UCHAR * szCursor, SWORD cbCursor)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetEnvAttr: henv with: attrName with: valuePointer with: attrType	&lt;C: RETCODE _threaded SQLSetEnvAttr(HENV henv, SDWORD attrName, PTR valuePointer, SDWORD attrType)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetParam: hstmt with: ipar with: fCType with: fSqlType with: cbColDef with: ibScale with: rgbValue with: pcbValue	&lt;C: RETCODE _threaded SQLSetParam(HSTMT hstmt, UWORD ipar, SWORD fCType, SWORD fSqlType, UDWORD cbColDef, SWORD ibScale, PTR rgbValue, SDWORD * pcbValue)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetPos: hstmt with: irow with: fOption with: fLock	&lt;C: RETCODE _threaded SQLSetPos(HSTMT hstmt, UWORD irow, UWORD fOption, UWORD fLock)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetScrollOptions: hstmt with: fConcurrency with: crowKeyset with: crowRowset	&lt;C: RETCODE _threaded SQLSetScrollOptions(HSTMT hstmt, UWORD fConcurrency, SDWORD crowKeyset, UWORD crowRowset)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetStmtOption: hstmt with: fOption with: vParam	&lt;C: RETCODE _threaded SQLSetStmtOption(HSTMT hstmt, UWORD fOption, UDWORD vParam)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSpecialColumns: hstmt with: fColType with: szTableQualifier with: cbTableQualifier with: szTableOwner with: cbTableOwner with: szTableName with: cbTableName with: fScope with: fNullable	&lt;C: RETCODE _threaded SQLSpecialColumns(HSTMT hstmt, UWORD fColType, UCHAR * szTableQualifier, SWORD cbTableQualifier, UCHAR * szTableOwner, SWORD cbTableOwner, UCHAR * szTableName, SWORD cbTableName, UWORD fScope, UWORD fNullable)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLStatistics: hstmt with: szTableQualifier with: cbTableQualifier with: szTableOwner with: cbTableOwner with: szTableName with: cbTableName with: fUnique with: fAccuracy	&lt;C: RETCODE _threaded SQLStatistics(HSTMT hstmt, UCHAR * szTableQualifier, SWORD cbTableQualifier, UCHAR * szTableOwner, SWORD cbTableOwner, UCHAR * szTableName, SWORD cbTableName, UWORD fUnique, UWORD fAccuracy)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLTablePrivileges: hstmt with: szTableQualifier with: cbTableQualifier with: szTableOwner with: cbTableOwner with: szTableName with: cbTableName	&lt;C: RETCODE _threaded SQLTablePrivileges(HSTMT hstmt, UCHAR * szTableQualifier, SWORD cbTableQualifier, UCHAR * szTableOwner, SWORD cbTableOwner, UCHAR * szTableName, SWORD cbTableName)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLTables: hstmt with: szTableQualifier with: cbTableQualifier with: szTableOwner with: cbTableOwner with: szTableName with: cbTableName with: szTableType with: cbTableType	&lt;C: RETCODE _threaded SQLTables(HSTMT hstmt, UCHAR * szTableQualifier, SWORD cbTableQualifier, UCHAR * szTableOwner, SWORD cbTableOwner, UCHAR * szTableName, SWORD cbTableName, UCHAR * szTableType, SWORD cbTableType)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLTransact: henv with: hdbc with: fType	&lt;C: RETCODE _threaded SQLTransact(HENV henv, HDBC hdbc, UWORD fType)&gt;	^self externalAccessFailed</body></methods><methods><class-id>Database.ODBCCLIThreadedInterface</class-id> <category>procedures 3.0</category><body package="ODBCThapiEXDI">SQLAllocHandle: handleType with: inputHandle with: outputHandlePtr	&lt;C: RETCODE _threaded SQLAllocHandle(      SWORD   handleType,      SQLHANDLE     inputHandle,      SQLHANDLE *   outputHandlePtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLCloseCursor: statementHandle	&lt;C: RETCODE _threaded SQLCloseCursor(     SQLHSTMT     statementHandle)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLColAttribute: statementHandle with: columnNumber with: fieldIdentifier with: characterAttributePtr with: bufferLength with: stringLengthPtr with: numericAttributePtr	&lt;C: RETCODE _threaded SQLColAttribute (      SQLHSTMT        statementHandle,      SQLUSMALLINT    columnNumber,      SQLUSMALLINT    fieldIdentifier,      SQLPOINTER      characterAttributePtr,      SQLSMALLINT     bufferLength,      SQLSMALLINT *   stringLengthPtr,      SQLLEN *        numericAttributePtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLEndTran: handleType with: handle with: completionType	&lt;C: RETCODE _threaded SQLEndTran(     SQLSMALLINT   handleType,     SQLHANDLE     handle,     SQLSMALLINT   completionType)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLFetchScroll: statementHandle with: fetchOrientation with: fetchOffset	&lt;C: RETCODE _threaded SQLFetchScroll(      SQLHSTMT      statementHandle,      SQLSMALLINT   fetchOrientation,      SQLLEN        fetchOffset)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLFreeHandle: handleType with: handle	&lt;C: RETCODE _threaded SQLFreeHandle(     SQLSMALLINT   handleType,     SQLHANDLE     handle)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetConnectAttr: connectionHandle with: attribute with: valuePtr with: bufferLength with: stringLengthPtr	&lt;C: RETCODE _threaded SQLGetConnectAttr(     SQLHDBC        connectionHandle,     SQLINTEGER     attribute,     SQLPOINTER     valuePtr,     SQLINTEGER     bufferLength,     SQLINTEGER *   stringLengthPtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetConnectAttrW: connectionHandle with: attribute with: valuePtr with: bufferLength with: stringLengthPtr	&lt;C: RETCODE _threaded SQLGetConnectAttrW(     SQLHDBC        connectionHandle,     SQLINTEGER     attribute,     SQLPOINTER     valuePtr,     SQLINTEGER     bufferLength,     SQLINTEGER *   stringLengthPtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetDescField: descriptorHandle with: recNumber with: fieldIdentifier with: valuePtr with: bufferLength with: stringLengthPtr	&lt;C: RETCODE _threaded SQLGetDescField(     SQLHDESC        descriptorHandle,     SQLSMALLINT     recNumber,     SQLSMALLINT     fieldIdentifier,     SQLPOINTER      valuePtr,     SQLINTEGER      bufferLength,     SQLINTEGER *    stringLengthPtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetDescFieldW: descriptorHandle with: recNumber with: fieldIdentifier with: valuePtr with: bufferLength with: stringLengthPtr	&lt;C: RETCODE _threaded SQLGetDescFieldW(     SQLHDESC        descriptorHandle,     SQLSMALLINT     recNumber,     SQLSMALLINT     fieldIdentifier,     SQLPOINTER      valuePtr,     SQLINTEGER      bufferLength,     SQLINTEGER *    stringLengthPtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetDescRec: descriptorHandle with: recNumber with: name with: bufferLength with: stringLengthPtr with: typePtr with: subTypePtr with: lengthPtr with: precisionPtr with: scalePtr with: nullablePtr	&lt;C: RETCODE _threaded SQLGetDescRec(      SQLHDESC        descriptorHandle,      SQLSMALLINT     recNumber,      SQLCHAR *       name,      SQLSMALLINT     bufferLength,      SQLSMALLINT *   stringLengthPtr,      SQLSMALLINT *   typePtr,      SQLSMALLINT *   subTypePtr,      SQLLEN *        lengthPtr,      SQLSMALLINT *   precisionPtr,      SQLSMALLINT *   scalePtr,      SQLSMALLINT *   nullablePtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetDescRecW: descriptorHandle with: recNumber with: name with: bufferLength with: stringLengthPtr with: typePtr with: subTypePtr with: lengthPtr with: precisionPtr with: scalePtr with: nullablePtr	&lt;C: RETCODE _threaded SQLGetDescRecW(      SQLHDESC        descriptorHandle,      SQLSMALLINT     recNumber,      SQLCHAR *       name,      SQLSMALLINT     bufferLength,      SQLSMALLINT *   stringLengthPtr,      SQLSMALLINT *   typePtr,      SQLSMALLINT *   subTypePtr,      SQLLEN *        lengthPtr,      SQLSMALLINT *   precisionPtr,      SQLSMALLINT *   scalePtr,      SQLSMALLINT *   nullablePtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetDiagField: handleType with: handle with: recNumber with: diagIdentifier with: diagInfoPtr with: bufferLength with: stringLengthPtr	&lt;C: RETCODE _threaded SQLGetDiagField(     SQLSMALLINT     handleType,     SQLHANDLE       handle,     SQLSMALLINT     recNumber,     SQLSMALLINT     diagIdentifier,     SQLPOINTER      diagInfoPtr,     SQLSMALLINT     bufferLength,     SQLSMALLINT *   stringLengthPtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetDiagFieldW: handleType with: handle with: recNumber with: diagIdentifier with: diagInfoPtr with: bufferLength with: stringLengthPtr	&lt;C: RETCODE _threaded SQLGetDiagFieldW(     SQLSMALLINT     handleType,     SQLHANDLE       handle,     SQLSMALLINT     recNumber,     SQLSMALLINT     diagIdentifier,     SQLPOINTER      diagInfoPtr,     SQLSMALLINT     bufferLength,     SQLSMALLINT *   stringLengthPtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetDiagRec: handleType with: handle with: recNumber with: sqlState with: nativeErrorPtr with: messageText with: bufferLength with: textLengthPtr	&lt;C: RETCODE _threaded SQLGetDiagRec(     SQLSMALLINT     handleType,     SQLHANDLE       handle,     SQLSMALLINT     recNumber,     SQLCHAR *       sqlState,     SQLINTEGER *    nativeErrorPtr,     SQLCHAR *       messageText,     SQLSMALLINT     bufferLength,     SQLSMALLINT *   textLengthPtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetDiagRecW: handleType with: handle with: recNumber with: sqlState with: nativeErrorPtr with: messageText with: bufferLength with: textLengthPtr	&lt;C: RETCODE _threaded SQLGetDiagRecW(     SQLSMALLINT     handleType,     SQLHANDLE       handle,     SQLSMALLINT     recNumber,     SQLCHAR *       sqlState,     SQLINTEGER *    nativeErrorPtr,     SQLCHAR *       messageText,     SQLSMALLINT     bufferLength,     SQLSMALLINT *   textLengthPtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetEnvAttr: environmentHandle with: attribute with: valuePtr with: bufferLength with: stringLengthPtr	&lt;C: RETCODE _threaded SQLGetEnvAttr(     SQLHENV        environmentHandle,     SQLINTEGER     attribute,     SQLPOINTER     valuePtr,     SQLINTEGER     bufferLength,     SQLINTEGER *   stringLengthPtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetStmtAttr: statementHandle with: attribute with: valuePtr with: bufferLength with: stringLength	&lt;C: RETCODE _threaded SQLGetStmtAttr(     SQLHSTMT        statementHandle,     SQLINTEGER      attribute,     SQLPOINTER      valuePtr,     SQLINTEGER      bufferLength,     SQLINTEGER *    stringLength)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetStmtAttrW: statementHandle with: attribute with: valuePtr with: bufferLength with: stringLength	&lt;C: RETCODE _threaded SQLGetStmtAttrW(     SQLHSTMT        statementHandle,     SQLINTEGER      attribute,     SQLPOINTER      valuePtr,     SQLINTEGER      bufferLength,     SQLINTEGER *    stringLength)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetConnectAttr: connectionHandle with: attribute with: valuePtr with: stringLength	&lt;C: RETCODE _threaded SQLSetConnectAttr(	SQLHDBC connectionHandle, 	SQLINTEGER attribute, 	SQLPOINTER valuePtr, 	SQLINTEGER stringLength)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetConnectAttrW: connectionHandle with: attribute with: valuePtr with: stringLength	&lt;C: RETCODE _threaded SQLSetConnectAttrW(SQLHDBC connectionHandle, SQLINTEGER attribute, SQLPOINTER valuePtr, SQLINTEGER stringLength)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetDescField: descriptorHandle with: recNumber with: fieldIdentifier with: valuePtr with: bufferLength	&lt;C: RETCODE _threaded SQLSetDescField (     SQLHDESC      descriptorHandle,     SQLSMALLINT   recNumber,     SQLSMALLINT   fieldIdentifier,     SQLPOINTER    valuePtr,     SQLINTEGER    bufferLength)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetDescFieldW: descriptorHandle with: recNumber with: fieldIdentifier with: valuePtr with: bufferLength	&lt;C: RETCODE _threaded SQLSetDescFieldW(     SQLHDESC      descriptorHandle,     SQLSMALLINT   recNumber,     SQLSMALLINT   fieldIdentifier,     SQLPOINTER    valuePtr,     SQLINTEGER    bufferLength)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetDescRec: descriptorHandle with: recNumber with: type with: subType with: length with: precision with: scale with: dataPtr with: stringLengthPtr with: indicatorPtr	&lt;C: RETCODE _threaded SQLSetDescRec(      SQLHDESC      descriptorHandle,      SQLSMALLINT   recNumber,      SQLSMALLINT   type,      SQLSMALLINT   subType,      SQLLEN        length,      SQLSMALLINT   precision,      SQLSMALLINT   scale,      SQLPOINTER    dataPtr,      SQLLEN *      stringLengthPtr,      SQLLEN *      indicatorPtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetDescRecW: descriptorHandle with: recNumber with: type with: subType with: length with: precision with: scale with: dataPtr with: stringLengthPtr with: indicatorPtr	&lt;C: RETCODE _threaded SQLSetDescRecW(      SQLHDESC      descriptorHandle,      SQLSMALLINT   recNumber,      SQLSMALLINT   type,      SQLSMALLINT   subType,      SQLLEN        length,      SQLSMALLINT   precision,      SQLSMALLINT   scale,      SQLPOINTER    dataPtr,      SQLLEN *      stringLengthPtr,      SQLLEN *      indicatorPtr)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetEnvAttrW: henv with: attrName with: valuePointer with: attrType	&lt;C: RETCODE _threaded SQLSetEnvAttrW(HENV henv, SDWORD attrName, PTR valuePointer, SDWORD attrType)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetStmtAttr: statementHandle with: attribute with: valuePtr with: stringLength	&lt;C: RETCODE _threaded SQLSetStmtAttr(SQLHSTMT statementHandle, SQLINTEGER attribute, SQLPOINTER valuePtr, SQLINTEGER stringLength)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetStmtAttrW: statementHandle with: attribute with: valuePtr with: stringLength	&lt;C: RETCODE _threaded SQLSetStmtAttrW(SQLHSTMT statementHandle, SQLINTEGER attribute, SQLPOINTER valuePtr, SQLINTEGER stringLength)&gt;	^self externalAccessFailed</body></methods><methods><class-id>Database.ODBCCLI64BitThreadedInterface</class-id> <category>procedures</category><body package="ODBCThapiEXDI">SQLBindCol: hstmt with: icol with: fCType with: rgbValue with: cbValueMax with: pcbValue	&lt;C: RETCODE _threaded SQLBindCol(HSTMT hstmt, UWORD icol, SWORD fCType, PTR rgbValue, SQLLEN cbValueMax, SQLLEN * pcbValue)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLBindParameter: hstmt with: ipar with: fParamType with: fCType with: fSqlType with: cbColDef with: ibScale with: rgbValue with: cbValueMax with: pcbValue	&lt;C: RETCODE _threaded SQLBindParameter(HSTMT hstmt, UWORD ipar, SWORD fParamType, SWORD fCType, SWORD fSqlType, SQLULEN cbColDef, SWORD ibScale, PTR rgbValue, SQLLEN cbValueMax, SQLLEN * pcbValue)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLColAttributes: hstmt with: icol with: fDescType with: rgbDesc with: cbDescMax with: pcbDesc with: pfDesc	&lt;C: RETCODE _threaded SQLColAttributes(HSTMT hstmt, UWORD icol, UWORD fDescType, PTR rgbDesc, SWORD cbDescMax, SWORD * pcbDesc, SQLLEN * pfDesc)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLDescribeCol: hstmt with: icol with: szColName with: cbColNameMax with: pcbColName with: pfSqlType with: pcbColDef with: pibScale with: pfNullable	&lt;C: RETCODE _threaded SQLDescribeCol(HSTMT hstmt, UWORD icol, UCHAR * szColName, SWORD cbColNameMax, SWORD * pcbColName, SWORD * pfSqlType, SQLULEN * pcbColDef, SWORD * pibScale, SWORD * pfNullable)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLDescribeParam: hstmt with: ipar with: pfSqlType with: pcbColDef with: pibScale with: pfNullable	&lt;C: RETCODE _threaded SQLDescribeParam(HSTMT hstmt, UWORD ipar, SWORD * pfSqlType, SQLULEN * pcbColDef, SWORD * pibScale, SWORD * pfNullable)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLExtendedFetch: hstmt with: fFetchType with: irow with: pcrow with: rgfRowStatus	&lt;C: RETCODE _threaded SQLExtendedFetch(HSTMT hstmt, UWORD fFetchType, SQLLEN irow, SQLULEN * pcrow, UWORD * rgfRowStatus)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLGetData: hstmt with: icol with: fCType with: rgbValue with: cbValueMax with: pcbValue	&lt;C: RETCODE _threaded SQLGetData(HSTMT hstmt, UWORD icol, SWORD fCType, PTR rgbValue, SQLLEN cbValueMax, SQLLEN * pcbValue)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLParamOptions: hstmt with: crow with: pirow	&lt;C: RETCODE _threaded SQLParamOptions(HSTMT hstmt, SQLULEN crow, SQLULEN * pirow)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLPutData: hstmt with: rgbValue with: cbValue	&lt;C: RETCODE _threaded SQLPutData(HSTMT hstmt, PTR rgbValue, SQLLEN cbValue)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLRowCount: hstmt with: pcrow	&lt;C: RETCODE _threaded SQLRowCount(HSTMT hstmt, SQLLEN * pcrow)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetConnectOption: hdbc with: fOption with: vParam	&lt;C: RETCODE _threaded SQLSetConnectOption(HDBC hdbc, UWORD fOption, SQLULEN vParam)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetParam: hstmt with: ipar with: fCType with: fSqlType with: cbColDef with: ibScale with: rgbValue with: pcbValue	&lt;C: RETCODE _threaded SQLSetParam(HSTMT hstmt, UWORD ipar, SWORD fCType, SWORD fSqlType, SQLULEN cbColDef, SWORD ibScale, PTR rgbValue, SQLLEN * pcbValue)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetPos: hstmt with: irow with: fOption with: fLock	&lt;C: RETCODE _threaded SQLSetPos(HSTMT hstmt, UINT64 irow, UWORD fOption, UWORD fLock)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetScrollOptions: hstmt with: fConcurrency with: crowKeyset with: crowRowset	&lt;C: RETCODE _threaded SQLSetScrollOptions(HSTMT hstmt, UWORD fConcurrency, SQLLEN crowKeyset, UWORD crowRowset)&gt;	^self externalAccessFailed</body><body package="ODBCThapiEXDI">SQLSetStmtOption: hstmt with: fOption with: vParam	&lt;C: RETCODE _threaded SQLSetStmtOption(HSTMT hstmt, UWORD fOption, SQLULEN vParam)&gt;	^self externalAccessFailed</body></methods><initialize><class-id>Database.ODBCCLIThreadedInterface</class-id></initialize><initialize><class-id>Database.ODBCCLISolarisThreadedInterface</class-id></initialize><initialize><class-id>Database.ODBCCLI64BitThreadedInterface</class-id></initialize><initialize><class-id>Database.ODBCCLINT64ThreadedInterface</class-id></initialize><initialize><class-id>Database.ODBC2ThreadedConnection</class-id></initialize><initialize><class-id>Database.ODBCCLIAIXThreadedInterface</class-id></initialize><initialize><class-id>Database.ODBCThreadedSession</class-id></initialize><initialize><class-id>Database.ODBCThreadedConnection</class-id></initialize><initialize><class-id>Database.ODBCCLILinuxThreadedInterface</class-id></initialize><initialize><class-id>Database.ODBCCLIMacOSXThreadedInterface</class-id></initialize><initialize><class-id>Database.ODBCCLINTThreadedInterface</class-id></initialize><initialize><class-id>Database.ODBC2ThreadedSession</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ODBC2Session</name><environment>Database</environment><super>Database.ExternalDatabaseSession</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hstmtHolder resultsCache bindValuePointers mustResendQueryHolder fetchLongResultsAnyOrder maxLongData sqlStatementOptionCache queryIsPROC unicode encoding unicodeEncoding lobBufferSize currentRowIndex rowsInBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-ODBC</category><attributes><package>ODBCEXDI</package></attributes></class><class><name>ODBCSession</name><environment>Database</environment><super>Database.ODBC2Session</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pNumRowsFetchedHolder pRowStatusArrayHolder pParamsProcessedHolder pParamStatusArrayHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-ODBC</category><attributes><package>ODBCEXDI</package></attributes></class><class><name>ODBCCLIInterface</name><environment>Database</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>encoding </inst-vars><class-inst-vars>getSelectorMap fSqlTypeToConversionMap fetchBufferSizeBlocks putSelectorMap fCTypeFromConversionMap fSqlTypeFromConversionMap valueSizeBlocks valuePrecisionBlocks dataChunkSize </class-inst-vars><imports>			private Database.ODBCCLIInterfaceDictionary.*			</imports><category>Database-External-Libraries</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>ODBCEXDI</package></attributes></class><class><name>ODBC2Connection</name><environment>Database</environment><super>Database.ExternalDatabaseConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hdbcHolder supportedFunctions generalInformationCache unicodeEncoding sqlConnectionOptionCache </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-ODBC</category><attributes><package>ODBCEXDI</package></attributes></class><class><name>ODBCConnection</name><environment>Database</environment><super>Database.ODBC2Connection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-ODBC</category><attributes><package>ODBCEXDI</package></attributes></class></st-source>