<?xml version="1.0"?><st-source><!-- Name: Opentalk-Tools-BasicNotice: Copyright 1999-2014 Cincom Systems, Inc.  All rights reserved.Comment: Opentalk-Tools-Basic defines a subcanvas for listing brokers, object adaptors, and potentially other distributed system components, along with several classes ancillary to that subcanvas.Copyright: Copyright © 1999-2002 Cincom Systems, Inc.All Rights ReservedDbIdentifier: bear73DbTrace: 449599DbUsername: tkoganDbVersion: 8.1 - 1DevelopmentPrerequisites: #(#(#any 'Opentalk-Core' ''))PackageName: Opentalk-Tools-BasicParcel: #('Opentalk-Tools-Basic')ParcelName: Opentalk-Tools-BasicPrerequisiteParcels: #(#('Opentalk-Core' ''))PrintStringCache: (8.1 - 1,tkogan)Version: 8.1 - 1Date: 12:36:25 PM October 31, 2014 --><time-stamp>From VisualWorks®, Pre-Release 8.1 (oct14.4) of October 31, 2014 on October 31, 2014 at 12:36:25 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>AssociationDisplayFrame</name><environment>Opentalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>association </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-Tools-Basic</category><attributes><package>Opentalk-Tools-Basic</package></attributes></class><comment><class-id>Opentalk.AssociationDisplayFrame</class-id><body>AssociationDisplayFrame implements a wrapper used to display associations in DataSets.Instance Variables:	association	&lt;Association&gt;	the 'framed' association</body></comment><class><name>FilterableListSubcanvas</name><environment>Opentalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectionInList selectionHolder selectionIndexHolder unfilteredList filteredList filter filterList filterKey </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-Tools-Basic</category><attributes><package>Opentalk-Tools-Basic</package></attributes></class><class><name>ComponentListSubcanvas</name><environment>Opentalk</environment><super>Opentalk.FilterableListSubcanvas</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-Tools-Basic</category><attributes><package>Opentalk-Tools-Basic</package></attributes></class><class><name>ComponentDisplayFrame</name><environment>Opentalk</environment><super>Opentalk.AssociationDisplayFrame</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Opentalk-Tools-Basic</category><attributes><package>Opentalk-Tools-Basic</package></attributes></class><comment><class-id>Opentalk.ComponentDisplayFrame</class-id><body>ComponentDisplayFrame implements a wrapper used to display associations, with a broker or adaptor as their 'value', in a DataSet.</body></comment><methods><class-id>Opentalk.AssociationDisplayFrame</class-id> <category>accessing</category><body package="Opentalk-Tools-Basic">association	^association</body><body package="Opentalk-Tools-Basic">association: anAssociation	association := anAssociation</body><body package="Opentalk-Tools-Basic">key	^association key</body><body package="Opentalk-Tools-Basic">value	^association value</body></methods><methods><class-id>Opentalk.AssociationDisplayFrame</class-id> <category>redirection</category><body package="Opentalk-Tools-Basic">doesNotUnderstand: aMessage	^self association value 		perform: aMessage selector		withArguments: aMessage arguments</body></methods><methods><class-id>Opentalk.AssociationDisplayFrame</class-id> <category>comparing</category><body package="Opentalk-Tools-Basic">= aComponentDisplayFrame	^self association = aComponentDisplayFrame association</body><body package="Opentalk-Tools-Basic">hash	^association hash</body></methods><methods><class-id>Opentalk.AssociationDisplayFrame class</class-id> <category>sorting</category><body package="Opentalk-Tools-Basic">sortBlock	^[:x :y | x association key &lt;= y association key ]</body></methods><methods><class-id>Opentalk.AssociationDisplayFrame class</class-id> <category>instance creation</category><body package="Opentalk-Tools-Basic">association: anAssociation	^( self new )		association: anAssociation;		yourself</body></methods><methods><class-id>Opentalk.FilterableListSubcanvas</class-id> <category>private</category><body package="Opentalk-Tools-Basic">addFilter: aSymbol 	| filterKeyValue oldFilter |	filterKeyValue := filterKey perform: aSymbol.	filter isNil		ifTrue:	[	filter := [ :listItem | ( listItem perform: aSymbol) = filterKeyValue ]				]		ifFalse:	[	oldFilter := filter.					filter := [ :listItem | ( listItem perform: aSymbol) = filterKeyValue											and: [ oldFilter value: listItem ] ]				]</body><body package="Opentalk-Tools-Basic">deselect	"Deselect the current selection (if any)."	selectionIndexHolder value: 0.</body><body package="Opentalk-Tools-Basic">filterTemplates	self subclassResponsibility</body><body package="Opentalk-Tools-Basic">hasFilter: index	"Answer whether one of the receiver's filters is set to on."	^index &lt;= filterList size and: [(filterList at: index) notNil]</body><body package="Opentalk-Tools-Basic">switchFilter: index perform: aSymbol	self changeRequest ifFalse: [^false].	index &gt; filterList size		ifTrue:			[ filterList := filterList , ( Array new: index - filterList size ) ].	( ( filterList at: index ) isNil )		ifTrue:	[	( self selectionIndex &gt; 0 )						ifTrue:	[	filterKey := filteredList at: self selectionIndex.									filterList at: index put: aSymbol								]				]		ifFalse:	[	filterList at: index put: nil				].	self changed: #filter with: index.	self updateList</body><body package="Opentalk-Tools-Basic">updateListSelection: newIndex	( self selectionIndex between: 1 and: selectionInList list size )		ifTrue:	[ selectionInList list					at: self selectionIndex					put: ( filteredList at: self selectionIndex )				]</body><body package="Opentalk-Tools-Basic">updateSelection: newIndex	self deselect.	selectionInList selectionIndex: newIndex.	self updateListSelection: newIndex</body></methods><methods><class-id>Opentalk.FilterableListSubcanvas</class-id> <category>initialize-release</category><body package="Opentalk-Tools-Basic">initialize	self initializeUnfilteredList.	filteredList := unfilteredList copy.	selectionInList := SelectionInListSortAware with: filteredList.	selectionIndexHolder := self selectionInList selectionIndexHolder.	selectionHolder := self selectionInList selectionHolder.	selectionHolder onChangeSend: #changedSelection to: self.	filter := [:change | true].	filterList := #().	super initialize.</body><body package="Opentalk-Tools-Basic">initializeUnfilteredList	self subclassResponsibility</body><body package="Opentalk-Tools-Basic">noticeOfWindowClose: aWindow	"... called only if subcanvas is used independently."	self release.	^super noticeOfWindowClose: aWindow</body><body package="Opentalk-Tools-Basic">release	selectionHolder retractInterestsFor: self.	super release</body></methods><methods><class-id>Opentalk.FilterableListSubcanvas</class-id> <category>accessing</category><body package="Opentalk-Tools-Basic">selectionHolder	^selectionHolder</body><body package="Opentalk-Tools-Basic">selectionInList	^selectionInList</body><body package="Opentalk-Tools-Basic">selectionIndex	^selectionIndexHolder value</body><body package="Opentalk-Tools-Basic">selectionIndexHolder	^selectionIndexHolder</body></methods><methods><class-id>Opentalk.FilterableListSubcanvas</class-id> <category>menu</category><body package="Opentalk-Tools-Basic">listMenu	^Menu new</body><body package="Opentalk-Tools-Basic">listMenuHolder	^[ self listMenu ]</body></methods><methods><class-id>Opentalk.FilterableListSubcanvas</class-id> <category>update</category><body package="Opentalk-Tools-Basic">changedSelection	"... intentionally null."</body><body package="Opentalk-Tools-Basic">updateList	| oldItem newIndex |	self initializeUnfilteredList.	( self selectionIndex &gt; 0 )		ifTrue: [ oldItem := selectionHolder value ].	filter := nil.	filterList do: [:aSymbol | aSymbol notNil ifTrue: [self addFilter: aSymbol]].	( filter isNil )		ifTrue:	[	filter := [:change | true].					filteredList := unfilteredList copy				]		ifFalse:	[	filteredList := unfilteredList select: filter ].	newIndex := ( oldItem == nil )					ifTrue:	[ 0 ]					ifFalse:	[ filteredList indexOf: oldItem ].	selectionInList list: filteredList.	self updateSelection: newIndex</body></methods><methods><class-id>Opentalk.ComponentListSubcanvas</class-id> <category>aspects</category><body package="Opentalk-Tools-Basic">classnameFilterAdaptor	^(PluggableAdaptor on: self)		getBlock: [:m | m hasFilter: 1 ]		putBlock: [:m :v | m switchFilter:1 perform: #classname ]		updateBlock: [:m :a :p | a == #filter and: [ p = 1 ] ]</body><body package="Opentalk-Tools-Basic">hostAddressFilterAdaptor	^(PluggableAdaptor on: self)		getBlock: [:m | m hasFilter: 2 ]		putBlock: [:m :v | m switchFilter: 2 perform: #hostAddress ]		updateBlock: [:m :a :p | a == #filter and: [ p = 2 ] ]</body><body package="Opentalk-Tools-Basic">portFilterAdaptor	^(PluggableAdaptor on: self)		getBlock: [:m | m hasFilter: 3 ]		putBlock: [:m :v | m switchFilter: 3 perform: #port ]		updateBlock: [:m :a :p | a == #filter and: [ p = 3 ] ]</body><body package="Opentalk-Tools-Basic">protocolTagFilterAdaptor	^(PluggableAdaptor on: self)		getBlock: [:m | m hasFilter: 4 ]		putBlock: [:m :v | m switchFilter: 4 perform: #protocolTag ]		updateBlock: [:m :a :p | a == #filter and: [ p = 4 ] ]</body></methods><methods><class-id>Opentalk.ComponentListSubcanvas</class-id> <category>initialize-release</category><body package="Opentalk-Tools-Basic">initializeUnfilteredList	| sc |	sc := SortedCollection sortBlock: ComponentDisplayFrame sortBlock.	OpentalkSystem componentRegistry associationsDo: [ :assoc | sc add: ( ComponentDisplayFrame association: assoc ) ].	unfilteredList := DependentList withAll: sc</body><body package="Opentalk-Tools-Basic">release	super release</body></methods><methods><class-id>Opentalk.ComponentListSubcanvas</class-id> <category>actions</category><body package="Opentalk-Tools-Basic">decrementPort	| c pn |	c := selectionHolder value.	pn := c port.	c changePort: pn - 1.	c changed</body><body package="Opentalk-Tools-Basic">incrementPort	| c pn |	c := selectionHolder value.	pn := c port.	c changePort: pn + 1.	c changed</body><body package="Opentalk-Tools-Basic">inspectComponent	selectionHolder value value inspect</body><body package="Opentalk-Tools-Basic">removeComponent		| id |	id := selectionHolder value key.	(OpentalkSystem componentAtId: id) stop.	OpentalkSystem deregisterId: id.	self updateList</body><body package="Opentalk-Tools-Basic">selectionHolderClassnameStringLabelPressed	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock |	ascSortBlock := [:x :y | x classnameString printString &lt;= y classnameString printString].	dscSortBlock := [:x :y | x classnameString printString &gt;= y classnameString printString].	sortBlock := self selectionInList sortAspect == #selectionHolderClassnameString		ifTrue: [			self selectionInList sortDirection == #asc				ifTrue: [self selectionInList sortDirection: #dsc.					ascSortBlock]				ifFalse: [self selectionInList sortDirection: #asc.					dscSortBlock]]		ifFalse: [self selectionInList sortAspect: #selectionHolderClassnameString.				self selectionInList sortDirection: #dsc.				ascSortBlock].	self selectionInList list:		(SortedCollection withAll: (self selectionInList list)			sortBlock: sortBlock) asList.</body><body package="Opentalk-Tools-Basic">selectionHolderHostAddressStringLabelPressed	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock |	ascSortBlock := [:x :y | x hostAddressString printString &lt;= y hostAddressString printString].	dscSortBlock := [:x :y | x hostAddressString printString &gt;= y hostAddressString printString].	sortBlock := self selectionInList sortAspect == #selectionHolderHostAddressString		ifTrue: [			self selectionInList sortDirection == #asc				ifTrue: [self selectionInList sortDirection: #dsc.					ascSortBlock]				ifFalse: [self selectionInList sortDirection: #asc.					dscSortBlock]]		ifFalse: [self selectionInList sortAspect: #selectionHolderHostAddressString.				self selectionInList sortDirection: #dsc.				ascSortBlock].	self selectionInList list:		(SortedCollection withAll: (self selectionInList list)			sortBlock: sortBlock) asList.</body><body package="Opentalk-Tools-Basic">selectionHolderKeyLabelPressed	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock |	ascSortBlock := [:x :y | x key printString &lt;= y key printString].	dscSortBlock := [:x :y | x key printString &gt;= y key printString].	sortBlock := self selectionInList sortAspect == #selectionHolderKey		ifTrue: [			self selectionInList sortDirection == #asc				ifTrue: [self selectionInList sortDirection: #dsc.					ascSortBlock]				ifFalse: [self selectionInList sortDirection: #asc.					dscSortBlock]]		ifFalse: [self selectionInList sortAspect: #selectionHolderKey.				self selectionInList sortDirection: #dsc.				ascSortBlock].	self selectionInList list:		(SortedCollection withAll: (self selectionInList list)			sortBlock: sortBlock) asList.</body><body package="Opentalk-Tools-Basic">selectionHolderNumberOfHandledEventsLabelPressed	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock |	ascSortBlock := [:x :y | x numberOfHandledEvents printString &lt;= y numberOfHandledEvents printString].	dscSortBlock := [:x :y | x numberOfHandledEvents printString &gt;= y numberOfHandledEvents printString].	sortBlock := self selectionInList sortAspect == #selectionHolderNumberOfHandledEvents		ifTrue: [			self selectionInList sortDirection == #asc				ifTrue: [self selectionInList sortDirection: #dsc.					ascSortBlock]				ifFalse: [self selectionInList sortDirection: #asc.					dscSortBlock]]		ifFalse: [self selectionInList sortAspect: #selectionHolderNumberOfHandledEvents.				self selectionInList sortDirection: #dsc.				ascSortBlock].	self selectionInList list:		(SortedCollection withAll: (self selectionInList list)			sortBlock: sortBlock) asList.</body><body package="Opentalk-Tools-Basic">selectionHolderPortLabelPressed	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock |	ascSortBlock := [:x :y | x port printString &lt;= y port printString].	dscSortBlock := [:x :y | x port printString &gt;= y port printString].	sortBlock := self selectionInList sortAspect == #selectionHolderPort		ifTrue: [			self selectionInList sortDirection == #asc				ifTrue: [self selectionInList sortDirection: #dsc.					ascSortBlock]				ifFalse: [self selectionInList sortDirection: #asc.					dscSortBlock]]		ifFalse: [self selectionInList sortAspect: #selectionHolderPort.				self selectionInList sortDirection: #dsc.				ascSortBlock].	self selectionInList list:		(SortedCollection withAll: (self selectionInList list)			sortBlock: sortBlock) asList.</body><body package="Opentalk-Tools-Basic">selectionHolderProtocolTagLabelPressed	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock |	ascSortBlock := [:x :y | x protocolTag printString &lt;= y protocolTag printString].	dscSortBlock := [:x :y | x protocolTag printString &gt;= y protocolTag printString].	sortBlock := self selectionInList sortAspect == #selectionHolderProtocolTag		ifTrue: [			self selectionInList sortDirection == #asc				ifTrue: [self selectionInList sortDirection: #dsc.					ascSortBlock]				ifFalse: [self selectionInList sortDirection: #asc.					dscSortBlock]]		ifFalse: [self selectionInList sortAspect: #selectionHolderProtocolTag.				self selectionInList sortDirection: #dsc.				ascSortBlock].	self selectionInList list:		(SortedCollection withAll: (self selectionInList list)			sortBlock: sortBlock) asList.</body><body package="Opentalk-Tools-Basic">selectionHolderStateLabelPressed	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock |	ascSortBlock := [:x :y | x state printString &lt;= y state printString].	dscSortBlock := [:x :y | x state printString &gt;= y state printString].	sortBlock := self selectionInList sortAspect == #selectionHolderState		ifTrue: [			self selectionInList sortDirection == #asc				ifTrue: [self selectionInList sortDirection: #dsc.					ascSortBlock]				ifFalse: [self selectionInList sortDirection: #asc.					dscSortBlock]]		ifFalse: [self selectionInList sortAspect: #selectionHolderState.				self selectionInList sortDirection: #dsc.				ascSortBlock].	self selectionInList list:		(SortedCollection withAll: (self selectionInList list)			sortBlock: sortBlock) asList.</body><body package="Opentalk-Tools-Basic">startComponent	selectionHolder value startRequest; changed</body><body package="Opentalk-Tools-Basic">stopComponent	selectionHolder value stopRequest; changed</body></methods><methods><class-id>Opentalk.ComponentListSubcanvas</class-id> <category>private</category><body package="Opentalk-Tools-Basic">filterTemplates	^#(	#( filterByClassname filterByHostAddress filterByPort filterByProtocolTag )		#( classname hostAddress port protocolTag )	)</body></methods><methods><class-id>Opentalk.ComponentListSubcanvas</class-id> <category>update</category><body package="Opentalk-Tools-Basic">changedSelection	self updateDisplay</body><body package="Opentalk-Tools-Basic">updateDisplay	| bool |	bool := selectionHolder value notNil.	( builder componentAt: #classnameCheckBox  ) isEnabled: bool.	( builder componentAt: #protocolTagCheckBox   ) isEnabled: bool.	( builder componentAt: #portCheckBox   ) isEnabled: bool.	( builder componentAt: #hostAddressCheckBox    ) isEnabled: bool.</body></methods><methods><class-id>Opentalk.ComponentListSubcanvas</class-id> <category>menu</category><body package="Opentalk-Tools-Basic">listMenu	| mb |	( selectionHolder value isNil )		ifTrue:	[ ^Menu new ].	mb := MenuBuilder new.	mb		addLabel: (#Start &lt;&lt; #opentalktools &gt;&gt; 'Start') value: #startComponent;		addLabel: (#Stop &lt;&lt; #opentalktools &gt;&gt; 'Stop') value: #stopComponent;		line;		addLabel: (#IncrementPort &lt;&lt; #opentalktools &gt;&gt; 'Increment port') value: #incrementPort;		addLabel: (#DecrementPort &lt;&lt; #opentalktools &gt;&gt; 'Decrement port') value: #decrementPort;		line;		addLabel: (#Inspect &lt;&lt; #opentalktools &gt;&gt; 'Inspect') value: #inspectComponent;		line;		addLabel: (#Remove &lt;&lt; #opentalktools &gt;&gt; 'Remove') value: #removeComponent.	^mb menu</body></methods><methods><class-id>Opentalk.ComponentDisplayFrame</class-id> <category>accessing</category><body package="Opentalk-Tools-Basic">allEvents	^association value class allEvents</body><body package="Opentalk-Tools-Basic">allOwnAndComponentEvents	^association value allOwnAndComponentEvents</body><body package="Opentalk-Tools-Basic">allOwnAndComponentEventsFramed	^association value allOwnAndComponentEventsFramed</body></methods><methods><class-id>Opentalk.ComponentDisplayFrame</class-id> <category>printing</category><body package="Opentalk-Tools-Basic">classnameString	^association value classname</body><body package="Opentalk-Tools-Basic">hostAddressString	| str |	str := WriteStream on: ( String new: 15 ).	association value hostAddress		do: [ :e | str print: e ]		separatedBy: [ str nextPut: $. ].	^str contents</body><body package="Opentalk-Tools-Basic">numberOfHandledEvents	^association value numberOfHandledEvents</body><body package="Opentalk-Tools-Basic">protocolTag	^association value protocolTag</body><body package="Opentalk-Tools-Basic">state	^association value state</body></methods><methods><class-id>Opentalk.BasicObjectAdaptor</class-id> <category>opentalk tool support</category><body package="Opentalk-Tools-Basic">numberOfHandledEvents	^self eventsHandled size</body><body package="Opentalk-Tools-Basic">port	^self accessPoint port</body></methods><methods><class-id>Opentalk.BasicRequestBroker</class-id> <category>opentalk tool support</category><body package="Opentalk-Tools-Basic">defaultPort	^self class defaultPort</body><body package="Opentalk-Tools-Basic">numberOfHandledEvents	^objectAdaptor numberOfHandledEvents		+ self eventsHandled size</body><body package="Opentalk-Tools-Basic">port	^self objectAdaptor accessPoint port</body><body package="Opentalk-Tools-Basic">protocolTag	^self objectAdaptor protocolTag</body><body package="Opentalk-Tools-Basic">setBrokerId: aSymbol	^self class setBrokerId: aSymbol</body><body package="Opentalk-Tools-Basic">setDefaultPort: aPositiveInteger	^self class setDefaultPort: aPositiveInteger</body></methods><methods><class-id>Opentalk.ComponentListSubcanvas class</class-id> <category>interface specs</category><body package="Opentalk-Tools-Basic">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: #(#{Kernel.UserMessage} #key: #ComponentListSubcanvas #defaultString: 'Component List Subcanvas' #catalogID: #opentalktools) 			#min: #(#{Core.Point} 742 147 ) 			#max: #(#{Core.Point} 742 147 ) 			#bounds: #(#{Graphics.Rectangle} 348 384 1024 531 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.CheckBoxSpec} 							#layout: #(#{Core.Point} 0 0 ) 							#name: #classnameCheckBox 							#flags: 32 							#model: #classnameFilterAdaptor 							#label: #(#{Kernel.UserMessage} #key: #className #defaultString: 'class name' #catalogID: #opentalktools) ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Core.Point} 0 45 ) 							#name: #protocolTagCheckBox 							#flags: 32 							#model: #protocolTagFilterAdaptor 							#label: #(#{Kernel.UserMessage} #key: #protocolTag #defaultString: 'protocol tag' #catalogID: #opentalktools) ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Core.Point} 0 30 ) 							#name: #portCheckBox 							#flags: 32 							#model: #portFilterAdaptor 							#label: #(#{Kernel.UserMessage} #key: #port #defaultString: 'port' #catalogID: #opentalktools) ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Core.Point} 0 15 ) 							#name: #hostAddressCheckBox 							#flags: 32 							#model: #hostAddressFilterAdaptor 							#label: #(#{Kernel.UserMessage} #key: #hostAddress #defaultString: 'host address' #catalogID: #opentalktools) ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} -120 1 10 0 -10 1 -10 1 ) 						#name: #Composite1 ) ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -130 1 2 0 0 1 0 1 ) 					#name: #GroupBox1 ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showVerticalLines false #allowColumnReordering true #rowSize 18 #allowColumnResizing true #allowSorting false #showHorizontalLines false ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 2 0 -132 1 0 1 ) 					#name: #dataset 					#flags: 13 					#model: #selectionInList 					#menu: #listMenuHolder 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectionHolder key' 							#label: #(#{Kernel.UserMessage} #key: #Key #defaultString: 'Key' #catalogID: #opentalktools) 							#labelIsImage: false 							#width: 80 							#rendererType: #Text 							#editorType: #None 							#type: #symbol 							#noScroll: false 							#formatString: '' ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectionHolder classnameString' 							#label: #(#{Kernel.UserMessage} #key: #Component #defaultString: 'Component' #catalogID: #opentalktools) 							#labelIsImage: false 							#width: 150 							#rendererType: #Text 							#editorType: #None 							#noScroll: false 							#formatString: '' ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectionHolder hostAddressString' 							#label: #(#{Kernel.UserMessage} #key: #Host #defaultString: 'Host' #catalogID: #opentalktools) 							#labelIsImage: false 							#width: 80 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectionHolder port' 							#label: #(#{Kernel.UserMessage} #key: #Port #defaultString: 'Port' #catalogID: #opentalktools) 							#labelIsImage: false 							#width: 50 							#rendererType: #Text 							#editorType: #None 							#type: #number 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectionHolder protocolTag' 							#label: #(#{Kernel.UserMessage} #key: #Protocol #defaultString: 'Protocol' #catalogID: #opentalktools) 							#labelIsImage: false 							#width: 50 							#rendererType: #Text 							#editorType: #None 							#noScroll: false 							#formatString: '' ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectionHolder state' 							#label: #(#{Kernel.UserMessage} #key: #State #defaultString: 'State' #catalogID: #opentalktools) 							#labelIsImage: false 							#width: 60 							#rendererType: #Text 							#editorType: #None 							#type: #symbol 							#noScroll: false 							#formatString: '' ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectionHolder numberOfHandledEvents' 							#label: #(#{Kernel.UserMessage} #key: #Handlers #defaultString: 'Handlers' #catalogID: #opentalktools) 							#labelIsImage: false 							#width: 50 							#rendererType: #Text 							#editorType: #None 							#type: #number 							#noScroll: false ) ) 					#multipleSelections: false 					#labelsAsButtons: true ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>BasicRequestBroker</name><environment>Opentalk</environment><super>Opentalk.RestartProtocol</super><private>false</private><indexed-type>none</indexed-type><inst-vars>remoteObjectRegistry objectAdaptor requestType requestTimeout </inst-vars><class-inst-vars>brokerId defaultPort defaultRequestTimeout </class-inst-vars><imports></imports><category>Opentalk-Core</category><attributes><package>Opentalk-Core</package></attributes></class><class><name>BasicObjectAdaptor</name><environment>Opentalk</environment><super>Opentalk.RestartProtocol</super><private>false</private><indexed-type>none</indexed-type><inst-vars>accessPoint localAccessPoint accessAddress objectTable orb requestDispatcher processingPolicy localityTest </inst-vars><class-inst-vars>defaultRequestDispatcherConfiguration defaultLocalityTest </class-inst-vars><imports></imports><category>Opentalk-Core</category><attributes><package>Opentalk-Core</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>