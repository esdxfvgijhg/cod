<?xml version="1.0"?><st-source><!-- Name: RBHierarchicalMethodsNotice: The MIT LicenseCopyright © 2011-2014 Christian HaiderPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.Comment: Orders and indents method lists according to the class hierarchy.The alphabetically sorted methods of each class are ordered by	1. class methods	2. instance methods	3. class variable initializers.At last, all namespace variable initializers are listed.ImplementationThe code depends only on the refactoring browser and runs in a vanilla visual.im.Compatible with versions from at least VW 7.4.1 up to 7.10 (current).Therefore, I did not use new features of VW like symbols as blocks or in-place sorting.Known problemWhen a method is removed from the list (menu item "Remove From List"), the indents of the items are adjusted properly:i.e. methods of subclasses are less indented when the last method of a superclass is removed from the list.This, unfortunately, does not work when the method is removed from the image (menu item "Remove"),because the browser does not update its state and leaves the deleted method in its internal list (which is used to calculate the indentation).Therefore, the indentation does not change and becomes inconsistent.Examples(Refactory.Browser.BrowserEnvironment new implementorsOf: #name) openEditor(Refactory.Browser.BrowserEnvironment new referencesTo: #when:send:to:) openEditor(Refactory.Browser.BrowserEnvironment new instVarRefsTo: 'handle' in: Smalltalk.Graphics.DisplaySurface) openEditor(Refactory.Browser.BrowserEnvironment new instVarReadersTo: 'handle' in: Smalltalk.Graphics.DisplaySurface) openEditor(Refactory.Browser.BrowserEnvironment new instVarWritersTo: 'handle' in: Smalltalk.Graphics.DisplaySurface) openEditorDbIdentifier: bear73DbTrace: 442495DbUsername: chaiderDbVersion: 1.3.1PackageName: RBHierarchicalMethodsParcel: #('RBHierarchicalMethods')ParcelName: RBHierarchicalMethodsPrintStringCache: (1.3.1,chaider)Version: 1.3.1Date: 1:11:02 PM July 18, 2014 --><time-stamp>From VisualWorks®, Pre-Release 8.0 (jul14.2) of July 18, 2014 on July 18, 2014 at 1:11:02 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Refactory.Browser.SelectorEnvironment</class-id> <category>accessing-classes</category><body package="RBHierarchicalMethods">baseClasses	| baseClasses |	baseClasses := self classes collect: [:class |		class isMeta			ifTrue: [class soleInstance]			ifFalse: [class]].	baseClasses addAll: ((initializers select: [:ref | ref environment isBehavior]) collect: [:ref |		ref environment]).	^baseClasses</body><body package="RBHierarchicalMethods">classHierarchy	"&lt;Dictionary key: Class value: Dictionary&gt;	a Dictionary of classes with a dictionary with their subclasses with the same structure.	Example:	Dictionary		key: Object value: (Dictionary 			key: Model value: (Dictionary &lt;Model subclasses etc...&gt;)			key: Value value: (Dictionary &lt;Value subclasses etc...&gt;))"	| hierarchy |	hierarchy := Dictionary new.	self baseClasses do: [:class |		class withAllSuperclasses reverse inject: hierarchy into: [:dict :superclass |			dict at: superclass ifAbsentPut: [Dictionary new]]].	^hierarchy</body><body package="RBHierarchicalMethods">hierarchicallySortedClasses	"classes sorted by hierarchy.	Order meta classes before the classes"	| list stack |	list := List new.	stack := OrderedCollection with: nil -&gt; self classHierarchy.	[stack isEmpty] whileFalse: [		| dict assoc |		assoc := stack removeFirst.		assoc key ifNotNil: [:class |			(self includesClass: class class) ifTrue: [				list add: class class].			(self includesClass: class) ifTrue: [				list add: class]].		dict := assoc value.		(dict keys asSortedCollection: [:a :b | a name &lt;= b name]) reverseDo: [:class |			stack addFirst: (dict associationAt: class)]].	^list</body></methods><methods><class-id>Refactory.Browser.SelectorEnvironment</class-id> <category>accessing</category><body package="RBHierarchicalMethods">numberOfSortedMethodDefinitions	"this should be a s fast as possible"	| total |	total := classSelectors values inject: 0 into: [:sum :collection | sum + collection size].	total := metaClassSelectors values inject: total into: [:sum :collection | sum + collection size].	^total + initializers size</body><body package="RBHierarchicalMethods">sortedMethodDefinitions	| groupedInitializers namespaceVarInits classVarInits defs |	groupedInitializers := initializers groupedBy: [:initializer |		initializer environment isNameSpace].	namespaceVarInits := groupedInitializers at: true ifAbsent: [#()].	classVarInits := groupedInitializers at: false ifAbsent: [#()].	defs := List new.	self hierarchicallySortedClasses do: [:class |		| selectors |		selectors := (self privateSelectorsForClass: class) select: [:each |			class includesSelector: each].		defs addAll: (selectors asSortedCollection collect: [:selector |			MethodDefinition class: class selector: selector]).		(classVarInits select: [:initializer | initializer environment == class]) do: [:initializer |			defs add: (InitializerDefinition nameSpace: initializer environment key: initializer name)]].	defs addAll: (namespaceVarInits collect: [:initializer |		InitializerDefinition nameSpace: initializer environment key: initializer name]).	^defs</body></methods><methods><class-id>Refactory.Browser.MethodNavigatorPart</class-id> <category>private</category><body package="RBHierarchicalMethods">fillInSortedListFor: aNavigatorState	"get the sorted definitions"	"Optimization hack -- sorting the defs is really slow.	The browser calls this 3 times when opening a window(!!!)"	(self list size &gt; 100 and: [	navigator environment numberOfSortedMethodDefinitions = self list size]) ifTrue: [			^self list].	^navigator environment sortedMethodDefinitions</body><body package="RBHierarchicalMethods">offsetFor: aMethodDefinition	"for VW 7.10"	^self offsetFor: aMethodDefinition normal: (super offsetFor: aMethodDefinition)</body><body package="RBHierarchicalMethods">offsetFor: aMethodDefinition andIcon: anIcon	"for VW 7.8.1 and earlier"	^self		offsetFor: aMethodDefinition		normal: (super offsetFor: aMethodDefinition andIcon: anIcon)</body><body package="RBHierarchicalMethods">offsetFor: aMethodDefinition normal: aPoint	| superclassesInScope class |	class := aMethodDefinition implementingClass ifNil: [		^aPoint].	class isMeta ifTrue: [		class := class soleInstance].	superclassesInScope := class allSuperclasses select: [:superclass |		(self environment includesClass: superclass) or: [		self environment includesClass: superclass class]].	^(superclassesInScope size * 12) @ 0 + aPoint</body></methods><methods><class-id>Refactory.Browser.MethodNavigatorPart</class-id> <category>interface opening</category><body package="RBHierarchicalMethods">resetBuilder	"This method provides a nice hook for post initialize initialization :-)"	super resetBuilder.	self listSelector: #fillInSortedListFor:</body></methods><methods><class-id>Refactory.Browser.MethodNavigatorPart</class-id> <category>private</category><body package="RBHierarchicalMethods">sortList: aList	"dont touch the already sorted list	and it should be a list already"	^aList</body></methods><methods><class-id>Refactory.Browser.BrowserEnvironment</class-id> <category>accessing</category><body package="RBHierarchicalMethods">numberOfSortedMethodDefinitions	"fall back"	^self sortedMethodDefinitions size</body><body package="RBHierarchicalMethods">sortedMethodDefinitions	"fall back"	^self methodDefinitions</body></methods><methods><class-id>Refactory.Browser.VariableEnvironment</class-id> <category>accessing-classes</category><body package="RBHierarchicalMethods">baseClasses	| baseClasses |	baseClasses := self classes collect: [:class |		class isMeta			ifTrue: [class soleInstance]			ifFalse: [class]].	^baseClasses</body><body package="RBHierarchicalMethods">classHierarchy	"&lt;Dictionary key: Class value: Dictionary&gt;	a Dictionary of classes with a dictionary with their subclasses with the same structure.	Example:	Dictionary		key: Object value: (Dictionary 			key: Model value: (Dictionary &lt;Model subclasses etc...&gt;)			key: Value value: (Dictionary &lt;Value subclasses etc...&gt;))"	| hierarchy |	hierarchy := Dictionary new.	self baseClasses do: [:class |		class withAllSuperclasses reverse inject: hierarchy into: [:dict :superclass |			dict at: superclass ifAbsentPut: [Dictionary new]]].	^hierarchy</body><body package="RBHierarchicalMethods">hierarchicallySortedClasses	"classes sorted by hierarchy.	Order meta classes before the classes"	| list stack |	list := List new.	stack := OrderedCollection with: nil -&gt; self classHierarchy.	[stack isEmpty] whileFalse: [		| dict assoc |		assoc := stack removeFirst.		assoc key ifNotNil: [:class |			(self includesClass: class class) ifTrue: [				list add: class class].			(self includesClass: class) ifTrue: [				list add: class]].		dict := assoc value.		(dict keys asSortedCollection: [:a :b | a name &lt;= b name]) reverseDo: [:class |			stack addFirst: (dict associationAt: class)]].	^list</body></methods><methods><class-id>Refactory.Browser.VariableEnvironment</class-id> <category>accessing</category><body package="RBHierarchicalMethods">sortedMethodDefinitions	^self hierarchicallySortedClasses inject: List new into: [:list :class |		list addAll: ((self selectorsForClass: class) asSortedCollection collect: [:selector |			MethodDefinition class: class selector: selector]).		list]</body></methods><methods><class-id>Refactory.Browser.MethodDefinitionEnvironment</class-id> <category>accessing-classes</category><body package="RBHierarchicalMethods">baseClasses	"uses the definitions.	there seems to be a bug in updating the list when a method is deleted"	^self definitions inject: Set new into: [:set :definition |		definition implementingClass ifNotNil: [:class |			set add: (class isMeta				ifTrue: [class soleInstance]				ifFalse: [class])].		set]</body></methods><methods><class-id>Refactory.Browser.MethodDefinitionEnvironment</class-id> <category>accessing</category><body package="RBHierarchicalMethods">numberOfSortedMethodDefinitions	"this should be a s fast as possible"	^definitions size</body><body package="RBHierarchicalMethods">sortedMethodDefinitions	| methods classesWithDefinitions |	classesWithDefinitions := self methodDefinitions groupedBy: [:methodDefinition |		methodDefinition implementingClass ifNil: [#nil]].	methods := self hierarchicallySortedClasses inject: List new into: [:list :class |		list addAll: (classesWithDefinitions at: class).		list].	^methods , (classesWithDefinitions at: #nil ifAbsent: [#()])</body></methods><methods><class-id>Refactory.Browser.SmalllintFilterEnvironment</class-id> <category>accessing</category><body package="RBHierarchicalMethods">sortedMethodDefinitions	^self environment sortedMethodDefinitions</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>BrowserEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserEnvironment</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>VariableEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instanceVariables instanceVariableReaders instanceVariableWriters selectorCache </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>SelectorEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classSelectors metaClassSelectors initializers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>MethodDefinitionEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.SelectorEnvironment</super><private>false</private><indexed-type>none</indexed-type><inst-vars>definitions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>SmalllintFilterEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AndEnvironment</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lintRuleName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Lint</category><attributes><package>Browser-Smalllint</package></attributes></class><class><name>MethodNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ProtocolItemNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class></st-source>