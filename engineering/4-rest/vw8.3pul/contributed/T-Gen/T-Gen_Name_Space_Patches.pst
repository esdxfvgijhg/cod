<?xml version="1.0"?><st-source><!-- Name: T-Gen Name Space PatchesComment: T-Gen Name Space PatchesThis parcel contains methods used to patch the 5.0a version of T-Gen to use name space class creation protocol.DevelopmentPrerequisites: #(#(#parcel 'T-Gen' ''))PackageName: T-Gen Name Space PatchesParcel: #('T-Gen_Name_Space_Patches')ParcelName: T-Gen Name Space PatchesPrerequisiteParcels: #(#('T-Gen' ''))Version: 5.0aDate: 5:32:07 PM January 27, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (aug15.1) of August 7, 2015 on January 27, 2016 at 5:32:07 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Tgen.TableDrivenParser</class-id> <category>scanner/parser generation</category><body package="T-Gen Name Space Patches">createParserClassNamed: name category: category spec: grammarSpec 	"Create the paarser class named name in category using grammarSpec."	| parserClass storeAccess |	storeAccess := #{Store.Policies} valueOrDo: [nil].	storeAccess isNil 		ifTrue: 			[parserClass := self defaultNameSpace 						defineClass: name asSymbol						superclass: self defaultParserClass fullName asQualifiedReference						indexedType: #none						private: false						instanceVariableNames: ''						classInstanceVariableNames: ''						imports: ''						category: category]		ifFalse: 			[storeAccess packagePolicy forcePackage: TranslatorGenerator defaultPackage				while: 					[parserClass := self defaultNameSpace 								defineClass: name asSymbol								superclass: self defaultParserClass fullName asQualifiedReference								indexedType: #none								private: false								instanceVariableNames: ''								classInstanceVariableNames: ''								imports: ''								category: category]].	parserClass comment: self generatedParserClassComment.	parserClass class 		compile: (self classInitializationMethodTextForClassNamed: name				spec: grammarSpec)		classified: 'class initialization'.	parserClass initialize.	^parserClass</body><body package="T-Gen Name Space Patches">defaultNameSpace	^Smalltalk</body></methods><methods><class-id>Tgen.TranslatorGenerator class</class-id> <category>fileIn/Out</category><body package="T-Gen Name Space Patches">defaultPackage	"Return the default package for parser and scanner classes created."	| storeRegistry |	storeRegistry := #{Store.Registry} valueOrDo: [nil].	^storeRegistry isNil ifTrue: [nil] ifFalse: [storeRegistry nullPackage]</body></methods><methods><class-id>Tgen.FSABasedScanner</class-id> <category>scanner generation</category><body package="T-Gen Name Space Patches">createScannerClassNamed: name category: category spec: tokenSpec 	"Create the scanner class named name in category using tokenSpec."	| scannerClass storeAccess |	storeAccess := #{Store.Policies} valueOrDo: [nil].	storeAccess isNil 		ifTrue: 			[scannerClass := self defaultNameSpace 						defineClass: name asSymbol						superclass: self defaultScannerClass fullName asQualifiedReference						indexedType: #none						private: false						instanceVariableNames: ''						classInstanceVariableNames: ''						imports: ''						category: category]		ifFalse: 			[storeAccess packagePolicy forcePackage: TranslatorGenerator defaultPackage				while: 					[scannerClass := self defaultNameSpace 								defineClass: name asSymbol								superclass: self defaultScannerClass fullName asQualifiedReference								indexedType: #none								private: false								instanceVariableNames: ''								classInstanceVariableNames: ''								imports: ''								category: category]].	scannerClass comment: self generatedScannerClassComment.	scannerClass class 		compile: (self classInitializationMethodTextForClassNamed: name				spec: tokenSpec)		classified: 'class initialization'.	scannerClass initialize.	^scannerClass</body><body package="T-Gen Name Space Patches">defaultNameSpace	^Smalltalk</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>FSABasedScanner</name><environment>Tgen</environment><super>Tgen.AbstractScanner</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fsa </inst-vars><class-inst-vars>fsa </class-inst-vars><imports></imports><category>T-gen-Compilers-Scanners</category><attributes><package>T-Gen Core</package></attributes></class><class><name>TableDrivenParser</name><environment>Tgen</environment><super>Tgen.AbstractParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parseTable transcript treeBuilder </inst-vars><class-inst-vars>parseTable </class-inst-vars><imports></imports><category>T-gen-Compilers-Parsers</category><attributes><package>T-Gen Core</package></attributes></class></st-source>