<?xml version="1.0"?><st-source><!-- Name: FileDifferatorComment: The FileDifferator is a simple diff tool for files.  It presents the contents of two files which can be independently edited and compared.  After loading the package, the FileDifferator can be opened from the Tools menu on the launcher.Things to do:- provide a button to advance to next diff position?- add directory tree comparison functionality a la WinDiff- add control for file encoding and line-end comparisonThis package was written by Eliot MirandaUpdated for VW 8.0 by Kevin Greek.DbIdentifier: bear73DbTrace: 491022DbUsername: smichaelDbVersion: 8.2 - 1HideSource: falsePackageName: FileDifferatorParcel: #('FileDifferator')ParcelName: FileDifferatorPrintStringCache: (8.2 - 1,smichael)SaveSource: trueVersion: 8.2 - 1Date: 2:20:06 PM May 20, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (may16.3) of May 20, 2016 on May 20, 2016 at 2:20:06 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>FileDifferator</name><environment>Tools</environment><super>Tools.Differator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fileOne fileTwo filenameOne filenameTwo filenameOneModule filenameTwoModule wordWrap initialOffset2 initialOffset1 scrollWith scrollLock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Differences</category><attributes><package>FileDifferator</package></attributes></class><comment><class-id>Tools.FileDifferator</class-id><body>The FileDifferator is a simple diff tool for files.  It presents the contents of two files which can be independently edited and compared.  It inherits from Differator to get the diff code and the two value models of the two texts that are the contents of each file.Instance Variables:	filenameOne	&lt;ValueModel&gt;	value holding the first filename	filenameTwo	&lt;ValueModel&gt;	value holding the second filename	filenameOneModule	&lt;EntryWithPasteButtonModule&gt;	The tool module that allows one to pick a filename whose contents is used for fileOne	filenameTwoModule	&lt;EntryWithPasteButtonModule&gt;	The tool module that allows one to pick a filename whose contents is used for fileTwo	wordWrap 		&lt;ValueModel&gt; 	word wrap both file text panes if true.	initialOffset2 	&lt;Point&gt;		last scroll offset of text2	initialOffset1 	&lt;Point&gt;		last scroll offset of text1	scrollWith 		&lt;ValueModel&gt; 	model upon name of text pane to slave scroll  	scrollLock		&lt;ValueModel&gt; 	scroll lock with scrollWith if true.</body></comment><class><name>DifferenceDecorator</name><environment>UI</environment><super>UI.BorderDecorator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model aspect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>FileDifferator</package></attributes></class><comment><class-id>UI.DifferenceDecorator</class-id><body>DifferenceDecorator extends a BorderDecorator by adding a bar beside a scrollbar that marks a position within the scroll extent where a difference exists.   Bars are displayed by a VisualBlock which performs aspect within inst. var. model.Instance Variables:	aspect	&lt;Symbol&gt; aspect identifying source within model to compare	model	&lt;FileDifferator&gt;	model that marks differences</body></comment><methods><class-id>Tools.FileDifferator</class-id> <category>aspects</category><body package="FileDifferator">defaultText1	^(#text1 &lt;&lt; #dialogs &gt;&gt; 'text1') asText</body><body package="FileDifferator">defaultText2	^(#text2 &lt;&lt; #dialogs &gt;&gt; 'text2') asText</body><body package="FileDifferator">fileOne	^fileOne</body><body package="FileDifferator">fileTwo	^fileTwo</body><body package="FileDifferator">scrollLock	^scrollLock</body><body package="FileDifferator">scrollWith	^scrollWith</body><body package="FileDifferator">wordWrap	^wordWrap</body></methods><methods><class-id>Tools.FileDifferator</class-id> <category>accessing</category><body package="FileDifferator">fileOneContents: aText	self putText: aText toFileHolder: filenameOne textHolder: text1</body><body package="FileDifferator">fileTwoContents: aText	self putText: aText toFileHolder: filenameTwo textHolder: text2</body><body package="FileDifferator">filenameOne: aString 	filenameOne value: aString.	self updateFileOne.	self doDiff</body><body package="FileDifferator">filenameOneModule	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^filenameOneModule isNil		ifTrue:			[filenameOneModule := EntryWithPasteButtonModule new]		ifFalse:			[filenameOneModule]</body><body package="FileDifferator">filenameTwo: aString 	filenameTwo value: aString.	self updateFileTwo.	self doDiff</body><body package="FileDifferator">filenameTwoModule	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^filenameTwoModule isNil		ifTrue:			[filenameTwoModule := EntryWithPasteButtonModule new]		ifFalse:			[filenameTwoModule]</body></methods><methods><class-id>Tools.FileDifferator</class-id> <category>private</category><body package="FileDifferator">ensureDecoratorIn: wrapper for: aspect	DifferenceDecorator installTo: wrapper model: self aspect: #fileOne.</body><body package="FileDifferator">modificationTimestampFor: fileHolder	^fileHolder value isEmpty ifFalse:		[[fileHolder value asFilename modificationTimestamp]			on: Error			do: [:ex| ex return: nil]]</body><body package="FileDifferator">pickFile: message	^Dialog 		requestFileName: message		default: '*.*'		version: #mustBeOld		ifFail: [nil].</body><body package="FileDifferator">putText: aText toFileHolder: filenameHolder textHolder: textHolder	| error s |	aText ~= textHolder value ifTrue:		[textHolder value: aText.		 error := false.		 s := filenameHolder value asFilename writeStream.		 [[s nextPutAll: aText string]			on: Error			do: [:ex| error := true]]			ensure: [s close].		 error ifFalse: [self doDiff]]</body><body package="FileDifferator">setTextFor: fileHolder default: aString into: textHolder	textHolder		value: (			[fileHolder value isEmpty				ifTrue: [aString asText allItalic]				ifFalse: [fileHolder value asFilename contentsOfEntireFile asText]]					on: Error					do: [:ex | ex description asText allBold])</body><body package="FileDifferator">updateWordWrap: aSymbol	| wrapOn textWrapper decorator |	wrapOn := self wordWrap value.	textWrapper := self wrapperAt: aSymbol.	textWrapper widget wordWrap: wrapOn.	decorator := textWrapper decorator.	wrapOn		ifTrue: [decorator noHorizontalScrollBar]		ifFalse: [decorator useHorizontalScrollBar]</body><body package="FileDifferator">whereDifferencesExistIn: anInterval for: aspect do: aBlock	| composedText text linesPerUnit |	(self text1 value = self defaultText1 or:[self text2 value = self defaultText2]) ifTrue:[^self].	composedText := (self widgetAt: aspect) displayContents.	text := composedText text.	linesPerUnit := composedText numberOfLines / anInterval size.	anInterval do:		[:y| | firstLine lastLine start end |		firstLine := (y - anInterval first * linesPerUnit) floor + anInterval first + 1.		lastLine := (y + 1 - anInterval first * linesPerUnit) floor + anInterval first + 1 max: firstLine.		firstLine &lt;= composedText numberOfLines ifTrue:			[start := (composedText lineAt: firstLine) first.			 end := (composedText lineAt: (lastLine min: composedText numberOfLines)) last.			 [start &lt;= end] whileTrue:				[start := (text emphasisAt: start) notNil							ifTrue:								[aBlock value: y.								 end + 1]							ifFalse:								[start + (text runLengthFor: start)]]]]</body></methods><methods><class-id>Tools.FileDifferator</class-id> <category>notification</category><body package="FileDifferator">scrollText1	| scrollValue |	scrollValue := (self wrapperAt: #fileTwo) decorator scrollerComponent scrollOffsetHolder value.	(self wrapperAt: #fileOne) decorator scrollerComponent scroll: scrollValue - initialOffset2.	initialOffset2 := scrollValue.</body><body package="FileDifferator">scrollText2	| scrollValue |	scrollValue := (self wrapperAt: #fileOne) decorator scrollerComponent scrollOffsetHolder value.	(self wrapperAt: #fileTwo) decorator scrollerComponent scroll: scrollValue - initialOffset1.	initialOffset1 := scrollValue.</body><body package="FileDifferator">toggleScrollLock	| scrollWrapper1 scrollWrapper2 |	scrollWrapper1 := (self wrapperAt: #fileOne) decorator scrollerComponent.	scrollWrapper2 := (self wrapperAt: #fileTwo) decorator scrollerComponent.	(self wrapperAt: #scrollSelect) isEnabled: self scrollLock value.	self scrollLock value		ifTrue: [self toggleScrollWith]		ifFalse: 			[scrollWrapper1 scrollOffsetHolder retractInterestIn: #value for: self.			scrollWrapper2 scrollOffsetHolder retractInterestIn: #value for: self]</body><body package="FileDifferator">toggleScrollWith	| scrollWrapper1 scrollWrapper2 |	scrollWrapper1 := (self wrapperAt: #fileOne) decorator scrollerComponent.	scrollWrapper2 := (self wrapperAt: #fileTwo) decorator scrollerComponent.	self scrollWith value = #fileOne		ifTrue: 			[| scrollHolder1 |			scrollHolder1 := scrollWrapper1 scrollOffsetHolder.			scrollHolder1 expressInterestIn: #value for: self sendBack: #scrollText2.			initialOffset1 := scrollHolder1 value.			scrollWrapper2 scrollOffsetHolder retractInterestIn: #value for: self]		ifFalse: 			[| scrollHolder2 |			scrollHolder2 := scrollWrapper2 scrollOffsetHolder.			scrollHolder2 expressInterestIn: #value for: self sendBack: #scrollText1.			initialOffset2 := scrollHolder2 value.			scrollWrapper1 scrollOffsetHolder retractInterestIn: #value for: self]</body><body package="FileDifferator">updateFileOne	self setTextFor: filenameOne default: 'text1' into: text1.	self text2 value emphasizeAllWith: nil.</body><body package="FileDifferator">updateFileTwo	self setTextFor: filenameTwo default: 'text2' into: text2.	self text1 value emphasizeAllWith: nil.</body><body package="FileDifferator">updateWordWrap	self updateWordWrap: #fileOne.	self updateWordWrap: #fileTwo.</body></methods><methods><class-id>Tools.FileDifferator</class-id> <category>actions</category><body package="FileDifferator">doDiff	(self text1 value = self defaultText1 or:[self text2 value = self defaultText2]) ifTrue:[^self resetDiff].	super doDiff.	#(#fileOne #fileTwo) do: [:aspect | (self wrapperAt: aspect) decorator invalidate]</body><body package="FileDifferator">resetDiff	self text1 value emphasizeAllWith: nil.	self text2 value emphasizeAllWith: nil.</body></methods><methods><class-id>Tools.FileDifferator</class-id> <category>interface opening</category><body package="FileDifferator">postBuildWith: aBuilder 		super postBuildWith: aBuilder.	self ensureDecoratorIn: (aBuilder componentAt: #fileOne) for: #fileOne.	self ensureDecoratorIn: (aBuilder componentAt: #fileTwo) for: #fileTwo.	self filenameOneModule entryWidget 		when: #changed 		evaluate: [self filenameOne: self filenameOneModule value].	self filenameOneModule buttonWidget helpText: 'Select to pick a file to compare'.	self filenameOneModule entryWidget helpText: 'The filename to use for the left side of the differator'.	self filenameTwoModule entryWidget 		when: #changed 		evaluate: [self filenameTwo: self filenameTwoModule value].	self filenameTwoModule buttonWidget helpText: 'Select to pick a file to compare'.	self filenameTwoModule entryWidget helpText: 'The filename to use for the right side of the differator'.	(self wrapperAt: #scrollSelect)  isEnabled: self scrollLock value.</body></methods><methods><class-id>Tools.FileDifferator</class-id> <category>initialize-release</category><body package="FileDifferator">initialize	super initialize.	self filenameOneModule pasteBlock: [self pickFile: 'Left Side File'].	self filenameTwoModule pasteBlock: [self pickFile: 'Right Side File'].	text1 value: text1 value allItalic.	text2 value: text2 value allItalic.	filenameOne := 'file1' asValue.	filenameTwo := 'file2' asValue.	wordWrap := true asValue.	scrollWith := #fileOne asValue.	scrollLock := false asValue.</body></methods><methods><class-id>UI.DifferenceDecorator</class-id> <category>initialize-release</category><body package="FileDifferator">installTo: aSpecWrapper model: anApplicationModel aspect: aSymbol	| borderDecorator |	model := anApplicationModel.	aspect := aSymbol.	borderDecorator := aSpecWrapper decorator.	hasVerticalScrollbar := borderDecorator hasVerticalScrollbar.	hasHorizontalScrollbar := borderDecorator hasHorizontalScrollbar.	hasBorder := borderDecorator hasBorder.	self setComponent: borderDecorator scrollerComponent.	borderDecorator container setComponent: self.	borderDecorator container: nil.	aSpecWrapper decorator: self.</body></methods><methods><class-id>UI.DifferenceDecorator</class-id> <category>private</category><body package="FileDifferator">adjustTextLayoutHeight	| textLayout |	textLayout := components first layout.	textLayout bottomOffset: textLayout bottomOffset - self markerWidth.</body><body package="FileDifferator">adjustTextLayoutWidth	| textLayout |	textLayout := components first layout.	textLayout rightOffset: textLayout rightOffset - self markerWidth.</body><body package="FileDifferator">horizontalLayoutBesideScrollbar	| layoutFrame buttonHeight |	layoutFrame := self edgeDecorationPolicy horizontalScrollRegionFor: self.	buttonHeight := (UI.Skins.SkinRegistry current scrollbarArtistForView: self) buttonHeight.	^layoutFrame copy		rightOffset:  layoutFrame rightOffset - buttonHeight;		leftOffset: layoutFrame leftOffset + buttonHeight;		topOffset: layoutFrame topOffset - self markerWidth;		bottomOffset: layoutFrame topOffset.</body><body package="FileDifferator">markerWidth	^10</body><body package="FileDifferator">resetComponents	"Discard the old components, and add new ones."	super resetComponents.	self hasVerticalScrollbar		ifTrue: 			[self add: self verticalVisual in: self verticalLayoutBesideScrollbar.			self adjustTextLayoutWidth]	"self hasHorizontalScrollbar ifTrue:[self add: self horizontalVisual in: self horizontalLayoutBesideScrollbar. self adjustTextLayoutHeight]."</body><body package="FileDifferator">verticalLayoutBesideScrollbar	| layoutFrame buttonHeight |	layoutFrame := self edgeDecorationPolicy verticalScrollRegionFor: self.	buttonHeight := (UI.Skins.SkinRegistry current scrollbarArtistForView: self) buttonHeight.	^layoutFrame copy		rightOffset:  layoutFrame leftOffset;		leftOffset: layoutFrame leftOffset - self markerWidth;		topOffset: layoutFrame topOffset + buttonHeight;		bottomOffset: layoutFrame bottomOffset - buttonHeight.</body><body package="FileDifferator">verticalVisual	^VisualBlock		block: 			[:gc :box |			model				whereDifferencesExistIn: (box top to: box bottom)				for: aspect				do: [:y | gc displayLineFrom: box left @ y to: box right @ y]]		bounds: self bounds		paint: ColorValue red</body></methods><methods><class-id>UI.DifferenceDecorator</class-id> <category>accessing</category><body package="FileDifferator">aspect	^aspect</body><body package="FileDifferator">aspect: aSymbol	aspect := aSymbol</body><body package="FileDifferator">model	^model</body><body package="FileDifferator">model: anObject	model := anObject</body></methods><methods><class-id>UI.DifferenceDecorator class</class-id> <category>instance creation</category><body package="FileDifferator">installTo: aSpecWrapper model: anApplicationModel aspect: aSymbol	^self new installTo: aSpecWrapper model: anApplicationModel aspect: aSymbol</body></methods><methods><class-id>Graphics.VisualPart</class-id> <category>access - scrollbars</category><body package="FileDifferator">scrollBar	^container notNil ifTrue: [container scrollBar]</body></methods><methods><class-id>Tools.FileDifferator class</class-id> <category>interface specs</category><body package="FileDifferator">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #FileDifferator 				#defaultString: 'File Differator' 				#catalogID: #labels ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 218 323 1118 923 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 0 0 -1 0.5 30 0 ) 					#name: #filenameOneModule 					#flags: 0 					#majorKey: #{EntryWithPasteButtonModule} 					#minorKey: #windowSpec 					#clientKey: #filenameOneModule ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.5 0 0 -5 1 30 0 ) 					#name: #filenameTwoModule 					#flags: 0 					#majorKey: #{EntryWithPasteButtonModule} 					#minorKey: #windowSpec 					#clientKey: #filenameTwoModule ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 6 0 65 0 -1 0.5 -25 1 ) 					#name: #fileOne 					#model: #text1 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #doDiff ) 					#tabRequiresControl: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.5 65 0 -5 1 -25 1 ) 					#name: #fileTwo 					#model: #text2 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #doDiff ) 					#tabRequiresControl: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 1.0 51 0 1 0.5 ) 					#name: #doDiff 					#model: #doDiff 					#label: 					#(#{Kernel.UserMessage} 						#key: #Compare 						#defaultString: 'Compare' 						#catalogID: #labels ) 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 6 0 39 0 ) 					#name: #textSwitch 					#model: #diffModeHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #Text 						#defaultString: 'Text' 						#catalogID: #labels ) 					#select: #Text ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 63 0 39 0 ) 					#name: #smalltalkSwitch 					#model: #diffModeHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #Smalltalk 						#defaultString: 'Smalltalk' 						#catalogID: #labels ) 					#select: #Smalltalk ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 148 0 39 0 ) 					#name: #cSwitch 					#model: #diffModeHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #C 						#defaultString: 'C' 						#catalogID: #labels ) 					#select: #C ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} -128 1 39 0 ) 					#name: #wordWrap 					#model: #wordWrap 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateWordWrap ) 					#label: 'Wrap' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 9 0 -22 1 ) 					#name: #scrollLock 					#model: #scrollLock 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #toggleScrollLock ) 					#label: 'Lock Scroll' ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.RadioButtonSpec} 							#layout: #(#{Graphics.LayoutOrigin} -45 0.5 3 0 ) 							#name: #scroll1 							#model: #scrollWith 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #toggleScrollWith ) 							#label: 'with 2' 							#select: #fileTwo ) 						#(#{UI.RadioButtonSpec} 							#layout: #(#{Graphics.LayoutOrigin} -45 1 3 0 ) 							#name: #scroll2 							#model: #scrollWith 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #toggleScrollWith ) 							#label: 'with 1' 							#select: #fileOne ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 0 0 -25 1 -5 1 -5 1 ) 						#name: #scrollSelect ) ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="FileDifferator">toolsFileDifferator	"Open a file diff tool."	&lt;menuItem: 'File Differator'		nameKey: nil		menu: #(#menuBar #tools)		position: 12.8&gt;	self openApplicationForClassNamed: #FileDifferator</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>VisualPart</name><environment>Graphics</environment><super>Graphics.VisualComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>container eventHandlers properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Visual Objects</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>BorderDecorator</name><environment>UI</environment><super>Graphics.CompositePart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>component policy hasBorder hasHorizontalScrollbar hasVerticalScrollbar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Support</category><attributes><package>UIBasics-Support</package></attributes></class><class><name>Differator</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text1 text2 diffModeHolder diffMode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Differences</category><attributes><package>Tools-Differences</package></attributes></class></st-source>