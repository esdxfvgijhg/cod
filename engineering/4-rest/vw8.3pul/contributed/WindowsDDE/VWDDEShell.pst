<?xml version="1.0"?><st-source><!-- Name: VW DDE ShellComment: This parcel provides a DDE interface for VisualWorks under Windows.  This is the work of David Leibs at Neometron.DbIdentifier: bear73DbTrace: 38160DbUsername: kgreekDbVersion: 7 - 1.0DevelopmentPrerequisites: #(#(#any 'DLLCC' '') #(#any 'DDEML' '') #(#any 'VW DDE Shell Prereq' ''))PackageName: VW DDE ShellParcel: #('VW DDE Shell')ParcelName: VW DDE ShellPrerequisiteParcels: #(#('DDEML' '') #('VW DDE Shell Prereq' ''))PrintStringCache: (7 - 1.0,kgreek)Version: 7 - 1.0Date: 10:57:03 AM April 13, 2012 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.9 (apr12.1) of April 13, 2012 on April 13, 2012 at 10:57:03 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SystemStartupPolicy</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>imagePrefix </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>ShellCommunication</category><attributes><package>VW DDE Shell</package></attributes></class><class><name>SystemShellCommandProcessor</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>process queue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>ShellCommunication</category><attributes><package>VW DDE Shell</package></attributes></class><class><name>WinShellServer</name><environment>OS</environment><super>OS.DdemlServer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>resultDictionary </inst-vars><class-inst-vars></class-inst-vars><imports>			private OS.WinShellServerDictionary.*			</imports><category>ShellCommunication</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>VW DDE Shell</package></attributes></class><shared-variable><name>StartupLoadPolicyBlock</name><environment>Kernel.ObjectMemory</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>VW DDE Shell</package></attributes></shared-variable><shared-variable><name>WinShellServerDictionary</name><environment>OS</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>VW DDE Shell</package></attributes></shared-variable><shared-variable><name>TheServer</name><environment>OS.WinShellServer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>VW DDE Shell</package></attributes></shared-variable><shared-variable><name>TheShellProcessor</name><environment>Tools.SystemShellCommandProcessor</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>VW DDE Shell</package></attributes></shared-variable><methods><class-id>Tools.SystemStartupPolicy</class-id> <category>accessing</category><body package="VW DDE Shell">imagePrefix	^imagePrefix</body><body package="VW DDE Shell">imagePrefix: aStringOrNil	imagePrefix := aStringOrNil</body></methods><methods><class-id>Tools.SystemStartupPolicy</class-id> <category>api</category><body package="VW DDE Shell">main: aControlManager	"WinShellServer start."	ControlManager noWindowBlock: nil</body><body package="VW DDE Shell">process: aFilename	| fn cn i c |	fn := aFilename asFilename.	fn exists ifFalse: [^self].	Parcel loadParcelFrom: fn.	cn := fn tail.	i := cn indexOf: '.'.	cn := cn copyFrom: 1 to: i -1.	c := Smalltalk at: cn asSymbol ifAbsent: [nil].	c == nil ifTrue: [^self].	c open</body><body package="VW DDE Shell">saveAndStartupAction: aControlManager	ObjectMemory globalCompactingGC.	ObjectMemory		saveAs: (imagePrefix isNil					ifTrue: [ObjectMemory imagePrefix]					ifFalse: [imagePrefix])		thenQuit: true.	self main: aControlManager</body><body package="VW DDE Shell">systemStartup: commandLine	| imageExtension image |	imageExtension := Filename imageExtension.	image := commandLine				detect: [:str|					str size &gt; imageExtension size					and: [(str copyFrom: str size - imageExtension size + 1 to: str size) = imageExtension]]				ifNone: nil.	image notNil ifTrue: [image asFilename directory beCurrentDirectory].	WinShellServer start</body></methods><methods><class-id>Tools.SystemShellCommandProcessor</class-id> <category>private</category><body package="VW DDE Shell">addCommand: aCommandset	queue nextPut: aCommandset</body><body package="VW DDE Shell">loadAndExecute: aFilename	| fn c p |	fn := aFilename asFilename.	fn exists ifFalse: [^self].	p := Parcel runtimeLoadParcelFrom: fn.	p == nil		ifTrue: [| codeReader info|				codeReader := CodeReader new.				[info := codeReader readInfoFromFileNamed: fn]					on: CodeReader fileFormatSignal					do: [:ex | ^self].				p := Parcel parcelNamed: (info at: #parcel ifAbsent: [nil])].	p == nil ifTrue: [^self].	c := Smalltalk at: p name asSymbol ifAbsent: [nil].	c == nil ifTrue: [^self].	[c open]		on: MessageNotUnderstood		do: [:ex| ex return]</body><body package="VW DDE Shell">noPromptDo: aBlock	[ScheduledWindow promptForOpen: false.	aBlock ensure: [ScheduledWindow promptForOpen: true]] fork</body><body package="VW DDE Shell">process	| commandset command arg |	commandset := queue next.	command := commandset at: 1.	arg := commandset at: 2.	command = 'filein' ifTrue: [[arg asFilename fileIn] fork].	command = 'browsefile' ifTrue: [self noPromptDo: [FileBrowser openOnFileNamed: arg]].	command = 'changelist' ifTrue: [self noPromptDo: [ChangeList openOnFileNamed: arg]].	command = 'parcel' ifTrue: [self noPromptDo: [self loadAndExecute: arg]].	Transcript cr;show: command;space;show: arg.</body></methods><methods><class-id>Tools.SystemShellCommandProcessor</class-id> <category>initialize-release</category><body package="VW DDE Shell">initialize	queue := SharedQueue new.	process := [[self process] repeat] newProcess.	process priority: Processor lowIOPriority - 2.	process resume.</body><body package="VW DDE Shell">release	process notNil ifTrue: [process terminate. process := nil]</body></methods><methods><class-id>Tools.SystemShellCommandProcessor class</class-id> <category>accessing</category><body package="VW DDE Shell">addCommand: aCommandset	TheShellProcessor addCommand: aCommandset</body></methods><methods><class-id>Tools.SystemShellCommandProcessor class</class-id> <category>instance creation</category><body package="VW DDE Shell">start	self stop.	TheShellProcessor := self new initialize.</body><body package="VW DDE Shell">stop	TheShellProcessor == nil ifFalse: [TheShellProcessor release. TheShellProcessor := nil]</body></methods><methods><class-id>OS.WinShellServer</class-id> <category>transactions</category><body package="VW DDE Shell">ddeConnect: hszTopic service: hszService context: dwContext serverAppInstance: dwServerAppInstance	"An application has requested a connection with the receiver, answer 1 to accept the connection based on the given top and service, otherwise answer 0.  Currently we always accept a connection.  Answer 1 to indicate this."	^1</body><body package="VW DDE Shell">ddeConnectConfirm: hConversation topic: hszTopic service: hszService serviceAppInstance: dwServerAppInstance	^1</body><body package="VW DDE Shell">ddeExecute: hConversation topic: hszTopic command: hCommand	| topicString commandString |	topicString := self handleToString: hszTopic.	commandString :=  self hDataToString: hCommand.	(topicString notNil and: [commandString notNil])		ifTrue: [SystemShellCommandProcessor					addCommand: (Array with: topicString with: commandString)].	^1</body></methods><methods><class-id>OS.WinShellServer</class-id> <category>initialize-release</category><body package="VW DDE Shell">initialize	super initialize.	resultDictionary := Dictionary new</body></methods><methods><class-id>OS.WinShellServer class</class-id> <category>class accessing</category><body package="VW DDE Shell">serviceName	"Answer the service name of the reciever.  Applications that wish to converse with VisualWorks should use this service name."	^'VisualWorks'</body></methods><methods><class-id>OS.WinShellServer class</class-id> <category>class initialization</category><body package="VW DDE Shell">start	"WinShellServer start."	TheServer := self new</body><body package="VW DDE Shell">stop	"WinShellServer stop."	TheServer :=  nil</body></methods><methods><class-id>Kernel.Parcel class</class-id> <category>api</category><body package="VW DDE Shell">runtimeLoadParcelFrom: aStringOrFilename	"Load a parcel from a fast-load binary file. Answer the new parcel, or nil if	 the load aborted."	^[self loadParcelFrom: aStringOrFilename]		on: self parcelAlreadyLoadedSignal		do: [:ex| | p |			p := self parcelNamed: ex parameter.			p runPostLoad.			p]</body></methods><methods><class-id>UI.ControlManager</class-id> <category>private</category><body package="VW DDE Shell">setShouldSnapshotThenQuitHack: anObject	shouldSnapShotAndQuitHack := anObject</body><body package="VW DDE Shell">snapshotAndQuitHack	| policy |	shouldSnapShotAndQuitHack == nil ifTrue: [^self].	policy := shouldSnapShotAndQuitHack.	shouldSnapShotAndQuitHack := nil.	policy saveAndStartupAction: self</body></methods><methods><class-id>Kernel.ObjectMemory class</class-id> <category>private</category><body package="VW DDE Shell">loadStartupPackages	| comLine |	StartupLoadPolicyBlock == nil ifTrue: [^self].	Object errorSignal 			handle: [:ex | comLine := #(). ex return]			do: [comLine := CEnvironment commandLine].	StartupLoadPolicyBlock value systemStartup: comLine.</body></methods><methods><class-id>Kernel.ObjectMemory class</class-id> <category>system backup/exit</category><body package="VW DDE Shell">snapshotAs: imageFilePrefix thenQuit: quitIfTrue withLoadPolicy: loadPolicy	"Write the OT and Data of this image out on an external file, tagging the image	with the specified load policy.  Answer true if the snapshot was just created."	"The most critical region of snapshots is from just before the	snapshot primitive, until enough of the bootstrap code has been	run that old resource IDs have been nilled out.  Until this has	happened, if other Processes are allowed to run, they may crash	Smalltalk by dereferencing a dangling pointer.	To prevent this, we temporarily raise the currentProcess's	priority as high as possible (so that it gets all Smalltalk's CPU time),	and then drop the priority to its old value when the reinitialization	of the system is complete."	| fName justSnapped msg dateAndTime |	ImagePrefix := imageFilePrefix.	fName := (imageFilePrefix, Filename imageExtension) asFilename.	fName canBeWritten ifFalse:		[^self error: (#errSnapshotNotWritten &lt;&lt; #dialogs &gt;&gt; 'snapshot file can not be written ')].	SourceFileManager default logChange: '''----SNAPSHOT----'''.	dateAndTime := Time dateAndTimeNow.	msg := ((#snapShotCreated &lt;&lt; #dialogs &gt;&gt; '&lt;1s&gt; created at &lt;2p&gt; &lt;3p&gt;') 		expandMacrosWith: fName asString with: (dateAndTime at: 1) with: (dateAndTime at: 2)).	SourceFileManager default logChange: '"', msg, '"'.	Transcript cr; show: msg.	Cursor wait showWhile:		[| priority |		priority := Processor activePriority.		self preSnapshot.		justSnapped := [(fName snapshot: loadPolicy) == nil]						on: Object errorSignal						do: [ :ex |							self postSnapshotAboutToQuit: false withPriority: priority.							ex copyForReraise								searchFrom: thisContext;								raise.							^true].		justSnapped			ifTrue:				[self postSnapshotAboutToQuit: quitIfTrue withPriority: priority.				quitIfTrue ifTrue: [self quit]]			ifFalse: [self returnFromSnapshotWithPriority: priority]].	justSnapped ifFalse: [self loadStartupPackages].	^justSnapped</body></methods><methods><class-id>Kernel.ObjectMemory class</class-id> <category>private</category><body package="VW DDE Shell">startupLoadPolicyBlock: aBlock	StartupLoadPolicyBlock := aBlock</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="VW DDE Shell">fileSaveForDDE	"Save the image in a sate suitable for use with DDE; i.e. with no	 launcher open and with appropriate start-up actions in place."	&lt;menuItem: 'DDE Save And Exit As...'		nameKey: nil		menu: #(#menuBar #file)		position: 40.015&gt;	| prefix startupPolicy |	prefix := ObjectMemory getImagePrefix.	prefix isEmpty ifTrue: [^self].	Cursor wait show.	SystemUtils relinkSystem.	SystemShellCommandProcessor start.	startupPolicy := SystemStartupPolicy new.	startupPolicy imagePrefix: prefix.	ObjectMemory startupLoadPolicyBlock: [startupPolicy].	ControlManager noWindowBlock: nil.	ScheduledControllers setShouldSnapshotThenQuitHack: startupPolicy.	Cursor normal show.	ScheduledControllers scheduledControllers do:		[:ctrlr| ctrlr closeAndUnschedule].</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>DdemlServer</name><environment>OS</environment><super>OS.DdemlPort</super><private>false</private><indexed-type>none</indexed-type><inst-vars>serviceName </inst-vars><class-inst-vars></class-inst-vars><imports>			private OS.DdemlServerDictionary.*			</imports><category>OS-DDEML</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>DDEML</package></attributes></class><class><name>ControlManager</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>scheduledControllers activeController activeControllerProcess interruptLock outstandingMetaOrDamage modalWindowChain openInProgress shouldSnapShotAndQuitHack </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>