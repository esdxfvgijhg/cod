<?xml version="1.0"?><st-source><!-- Name: OutComment: This package adds the messages #out and #stdout to Object and a couple of appropriate subclasses.It gets  tedious writing Transcript show:, or print:, and with the cr, and possibly having to endEntry so you can see it NOW. Send #out to any object, and it will emit the objects printString on the Transcript, add a cr, and make it show up NOW. Send #stdout to any object, and the object's printString will be emitted to the stdout stream. To see this on Windows, you must use the vwntconsole.exe Virtual Machine.In all cases, the original object is still returned, so you can insert this as handy debug statements without affecting the flow of the caller otherwise.Two handy specializations are the implementations on BlockClosure and Context.[aStatement] stdoutadds error handling to the block, this is handy when you're inserting a statement in a critical piece of code where you're not quite sure if it won't bring the image down. The result of the block will be printed, but if an error occurs during the block, the errorString of the exception will be printed instead.You may also send (std)out: anInteger to a Context. This will print the stack trace to a depth of anInteger. If you're trying to log not just that a method is being invoked, but where it's coming from, you can use an expression like:thisContext stdout: 15DbIdentifier: bear73DbTrace: 327664PackageName: OutParcel: #('Out')PrintStringCache: (8,tgriggs)Version: 8Date: 10:19:00 AM April 15, 2011 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.9 (apr11.2) of April 15, 2011 on April 15, 2011 at 10:19:00 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Kernel.Context</class-id> <category>printing</category><body package="Out" selector="out:">out: aCount	aCount &lt;= 0 ifTrue: [^self].	self out.	self sender ifNotNil: [:context | context out: aCount - 1]</body><body package="Out" selector="stdout:">stdout: aCount	aCount &lt;= 0 ifTrue: [^self].	self stdout.	self sender ifNotNil: [:context | context stdout: aCount - 1]</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>accessing</category><body package="Out" selector="out">out	^([self value] on: Error do: [:ex | ex errorString]) out</body><body package="Out" selector="stdout">stdout	^([self value] on: Error do: [:ex | ex errorString]) stdout</body></methods><methods><class-id>Core.Character</class-id> <category>accessing</category><body package="Out" selector="out">out	Transcript		nextPut: self;		endEntry</body><body package="Out" selector="stdout">stdout		Stdout		nextPut: self;		flush</body></methods><methods><class-id>Core.Object</class-id> <category>accessing</category><body package="Out" selector="out">out	Transcript		print: self;		cr;		endEntry</body><body package="Out" selector="stdout">stdout		Stdout		print: self;		cr;		flush</body></methods><methods><class-id>Core.CharacterArray</class-id> <category>accessing</category><body package="Out" selector="out">out	Transcript		nextPutAll: self asString;		cr;		endEntry</body><body package="Out" selector="stdout">stdout	Stdout		nextPutAll: self asString;		cr;		flush</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>CharacterArray</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>Context</name><environment>Kernel</environment><super>Kernel.InstructionStream</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sender receiver stackp stack </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>BlockClosure</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method outerContext copiedValues </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>Character</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>immediate</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class></st-source>