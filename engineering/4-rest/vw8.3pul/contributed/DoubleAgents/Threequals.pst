<?xml version="1.0"?><st-source><!-- Name: ThreequalsNotice: The MIT LicenseCopyright (c) 2013 , Randy CoulmanPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.Comment: # ThreequalsAdd Ruby-like `#===` to Visualworks Smalltalk.Threequals is licensed under the MIT license.  See the copyright tabin the RB, the 'notice' property of this package, or the License.txtfile on GitHub.Threequals' primary home is the[Cincom Public Store Repository](http://www.cincomsmalltalk.com/CincomSmalltalkWiki/Public+Store+Repository).Check there for the latest version.  It is also on[GitHub](https://github.com/randycoulman/Threequals).Threequals was developed in VW 7.9.1, but is compatible with VW 7.7and later.  If you find any incompatibilities with VW 7.7 or later,let me know (see below for contact information) or file an issue onGitHub.# IntroductionThreequals adds the Ruby-like `#===` method to Visualworks Smalltalk.The `#===` method, or "case equals" as it is known, is usedin Ruby case statements, and allows for very flexible comparisonsbetween objects in other situations as well.In this implementation, two objects are `===` if they are `=`.  Inaddition:* A block is `===` to an object if the block evaluates to `true` when  passed that object.* A class is `===` to an object if the object is an instance of the  class or one of its subclasses.* An interval is `===` to a number if that number is within the  endpoints of the interval, including the endpoints.* If the optional Threequals-Regex package is loaded, a regular  expression is `===` to a string if the string matches the regex.Be aware that `===` is asymmetric.  The object that has specialized `===` behaviormust be the receiver of the message.  That is, `(1 to: 5) === 4`answers true, but `4 === (1 to: 5)` answers false.This seems like an arbitrary restriction, but consider the following:```BlockClosure === [:x | x isBehavior not][:x | x isBehavior not] === BlockClosure```Should this evaluate to `true` or `false`?You can add `#===` to your own classes.  Keep in mind the followingguidelines:1. Send to `super` to maintain the default `#=` comparison.2. Trap any errors and simply return `false`.# Understanding the CodeThis package is made up entirely of extensions on base and otherclasses.  `Object>>===` is the base implementation and simply defaultsto `#=`.  Other implementations always send to `super`, but also dosomething extra, being careful not to raise exceptions.# ContributingI'm happy to receive bug fixes and improvements to this package.  Ifyou'd like to contribute, please publish your changes as a "branch"(non-integer) version in the Public Store Repository and contact me asoutlined below to let me know.  I will merge your changes back intothe "trunk" as soon as I can review them.# Contact InformationIf you have any questions about Threequals and how to use it, feelfree to contact me.* Web site: http://randycoulman.com* Blog: Courageous Software (http://randycoulman.com/blog)* E-mail: randy _at_ randycoulman _dot_ com* Twitter: @randycoulman* GitHub: randycoulmanDbIdentifier: bear73DbTrace: 486061DbUsername: randyDbVersion: 1DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' ''))PackageName: ThreequalsParcel: #('Threequals')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle))PrerequisiteParcels: #(#('Base VisualWorks' ''))PrintStringCache: (1,randy)Version: 1Date: 1:42:38 PM June 17, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (jun16.3) of June 17, 2016 on June 17, 2016 at 1:42:38 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Core.Interval</class-id> <category>comparing</category><body package="Threequals">=== anObject	^[super === anObject or: [anObject between: start and: stop]] on: Error		do: [:ex | ex return: false]</body></methods><methods><class-id>Core.Class</class-id> <category>comparing</category><body package="Threequals">=== anObject	^[super === anObject or: [anObject isKindOf: self]] on: Error		do: [:ex | ex return: false]</body></methods><methods><class-id>Core.Object</class-id> <category>comparing</category><body package="Threequals">=== anObject	^self = anObject</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>comparing</category><body package="Threequals">=== anObject	^[super === anObject or: [(self cull: anObject) == true]] on: Error		do: [:ex | ex return: false]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>BlockClosure</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method outerContext copiedValues </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>Interval</name><environment>Core</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>start stop step </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Sequenceable</category><attributes><package>Collections-Sequenceable</package></attributes></class><class><name>Class</name><environment>Core</environment><super>Core.ClassDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name classPool environment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class></st-source>