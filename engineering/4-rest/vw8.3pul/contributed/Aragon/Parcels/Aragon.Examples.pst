<?xml version="1.0"?><st-source><!-- Name: Aragon.ExamplesComment: Contains examples for widgets and look policies. DbIdentifier: bear73DbTrace: 478268DbUsername: kgreekDbVersion: 8.2 - 1DevelopmentPrerequisites: #(#(#any 'Aragon.Widgets' '') #(#any 'UIPainter' ''))DialectVersion: VisualWorks 7.9PackageName: Aragon.ExamplesParcel: #('Aragon.Examples')ParcelName: Aragon.ExamplesPrerequisiteDescriptions: #(#(#name 'Aragon.Widgets') #(#name 'UIPainter' #applicability #store))PrerequisiteParcels: #(#('Aragon.Widgets' ''))PrintStringCache: (8.2 - 1,kgreek)Version: 8.2 - 1Date: 9:10:10 AM November 20, 2015 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (test_72670) of September 25, 2015 on November 20, 2015 at 9:10:10 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ClassHierarchyBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hierarchy temp selectedNode filters history menuHolder delegate </inst-vars><class-inst-vars></class-inst-vars><imports>			private TextConstants.*			</imports><category>Aragon.Examples.Toys.Class Browser</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>AragonExamplesBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>examples selection explanation alreadyShown </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>OldDatasetExample</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>entries row </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.NewDataSet</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>NewDatasetExample</name><environment>Aragon</environment><super>Aragon.OldDatasetExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars>useRowSelectors useDecoratedEditors listMenu showHorizontalLines showVerticalLines showLabels optionsDialog allowForSorting allowForColumnDragging showLineNumbers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.NewDataSet</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>CardViewExample</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tabs tabStyle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.CardView</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>ParcelBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parcels selection searchPaths message </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.Parcel Browser</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>NewParcelBrowser</name><environment>Aragon</environment><super>Aragon.ParcelBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.Parcel Browser</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>FilenameWrapper</name><environment>Aragon</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filename modified type isHidden name fileSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.File Browser</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>GaugeExample</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gauge2 gauge1 progress </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>PopupTreeView</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.TreeView</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>World</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>CardViewExample1</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tabs classes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.CardView</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>SimpleFileBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tree </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.TreeView</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>AragonStuff</name><environment>Aragon</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Core.Info</category><attributes><package>Aragon.Examples</package></attributes></class><comment><class-id>Aragon.AragonStuff</class-id><body>This class contains a handful of utilities to support browsing in Aragon.Examples.</body></comment><class><name>ClassBrowserHistory</name><environment>Aragon</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listHolder selectionHolder associations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.Class Browser</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>SimpleClassBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.TreeView</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>CardViewExample2</name><environment>Aragon</environment><super>Aragon.CardViewExample1</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.CardView</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>ChangeSetBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>changes changeSet </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.ChangeSet Browser</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>TextEditor</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>status text filename </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>AragonMenuEditor</name><environment>Aragon</environment><super>Tools.MenuEditor</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shortCutField </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>NdsFileBrowser</name><environment>Aragon</environment><super>Aragon.SimpleFileBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>row optionsDialog showButtons showLines linesAtRoot showImages </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.TreeView</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>CardViewExample3</name><environment>Aragon</environment><super>Aragon.CardViewExample</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples.CardView</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>ResizerExample</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text21 text22 classNames </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Samples</category><attributes><package>Aragon.Examples</package></attributes></class><class><name>NewFileBrowser</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>directories currentDirectory entries retrieveProcess observerProcess selectedRow copySelection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Examples.Toys.File Browser</category><attributes><package>Aragon.Examples</package></attributes></class><shared-variable><name>HelpTexts</name><environment>Aragon.ParcelBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>DefaultPaths</name><environment>Aragon.ParcelBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>DropHandlers</name><environment>Aragon.ParcelBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>SoleInstance</name><environment>Aragon.ParcelBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>ImageList</name><environment>Aragon.ClassHierarchyBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>CoreCategories</name><environment>Aragon.ClassHierarchyBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>ColumnLayout</name><environment>Aragon.NewDatasetExample</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>ColumnLayout</name><environment>Aragon.NewFileBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>DelayForRetrieval</name><environment>Aragon.NewFileBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>ShowHidden</name><environment>Aragon.NewFileBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>FileTypes</name><environment>Aragon.NewFileBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>DelayForRefresh</name><environment>Aragon.NewFileBrowser</environment><private>false</private><constant>false</constant><category>Class Variables</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>GlobalHistory</name><environment>Aragon.ClassBrowserHistory</environment><private>false</private><constant>false</constant><category>Global</category><initializer></initializer><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>ShortCutPrefixes</name><environment>Aragon.AragonMenuEditor</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>ShortCutModifiers</name><environment>Aragon.AragonMenuEditor</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>Descriptions</name><environment>Aragon.AragonExamplesBrowser</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>Examples</name><environment>Aragon.AragonExamplesBrowser</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><shared-variable><name>LabelsFont</name><environment>Aragon.CardViewExample</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Examples</package></attributes></shared-variable><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>actions</category><body package="Aragon.Examples">doubleClick	selectedNode type == #class 		ifTrue: 			[self showsInheritance 				ifTrue: [temp key == selectedNode subject 					ifTrue: [^self showCategoriesFor: selectedNode subject]].			self showInheritanceFor: selectedNode subject]		ifFalse: [hierarchy list toggleExpand: selectedNode].</body><body package="Aragon.Examples">goBack	| h i |	h := history list.	i := history selectionIndex.	(i := i+1) &gt; h size ifTrue: [^Screen default ringBell].	history selectionIndex: i.	self jumpToClass: (h at: i) asSymbol.	i == h size ifTrue: [(builder componentAt: #back) disable].	(builder componentAt: #forward) enable.</body><body package="Aragon.Examples">goForward	| h i |	h := history list.	i := history selectionIndex.	(i := i-1) &lt; 1 ifTrue: [^Screen default ringBell].	history selectionIndex: i.	self jumpToClass: (h at: i) asSymbol.	i&lt;2 ifTrue: [(builder componentAt: #forward) disable].	(builder componentAt: #back) enable.</body><body package="Aragon.Examples">jumpToClass: aClassOrSymbol 	| cls |	(cls := aClassOrSymbol) isSymbol ifTrue: [cls := self classFor: cls].	(hierarchy list includes: cls)		ifFalse: 			[self showsInheritance ifTrue: [self showCategoriesFor: nil].			hierarchy list expandAll: (self pathTo: cls)].	hierarchy selection: cls.</body><body package="Aragon.Examples">refreshDisplay	| selection expandedNodes |	builder isNil ifTrue: [^self].	selection := hierarchy selection.	expandedNodes := hierarchy list expandedEntries.	(hierarchy list) roots: self roots; expandAll: expandedNodes.	hierarchy selection: selection.	history cleanUp.</body><body package="Aragon.Examples">selectionChanged	selectedNode := hierarchy selectedNode.	self updateHistory.</body><body package="Aragon.Examples">showCategoriesFor: aClass	self showsInheritance ifFalse: [^false].	(builder componentAt: #toggleDisplay) widget 		enabledImage: self class classIcon;		invalidate.	hierarchy list roots: temp value.	aClass notNil ifTrue: [self jumpToClass: aClass].	temp := nil.	^true</body><body package="Aragon.Examples">showInheritanceFor: aClass	| node cls root |	temp isNil ifTrue: [temp := aClass -&gt; self hierarchy list roots].	temp key: aClass.	node := self nodeForClass: aClass.	node displayString: node subject name asText allBold.	cls := aClass superclass.	root := node.	[cls isNil]		whileFalse: 			[| r |			r := self nodeForClass: cls.			r children: (Array with: root).			root := r status: #expanded.			cls := cls superclass].	aClass == Class ifFalse: [node children: nil].	(builder notNil and: [history notNil])		ifTrue: 			[(self widgetAt: #hierarchy) ifNotNil:[:widget| widget linesAtRoot: false].			(self widgetAt: #toggleDisplay) ifNotNil:[:widget|  widget 				enabledImage: self class categoryIcon;				invalidate]].	hierarchy list root: root; expand: node.	hierarchy selection: node.	^true</body><body package="Aragon.Examples">toggleShowInheritance	| selectedClass |	(selectedNode isNil or: [selectedNode type == #category]) 		ifTrue: [^Screen default ringBell].	selectedClass := selectedNode subject.	self showsInheritance		ifTrue: [self showCategoriesFor: selectedClass]		ifFalse: [self showInheritanceFor: selectedClass]</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>private</category><body package="Aragon.Examples">classFor: aSymbol	^aSymbol asQualifiedReference isDefined 		ifTrue: [aSymbol asQualifiedReference value]		ifFalse: [Root allClasses detect: [:one | one name == aSymbol] ifNone: []].</body><body package="Aragon.Examples">environmentFor: aNode 	^	aNode type == #class ifTrue: [aNode subject environment] ifFalse: [	aNode type == #namespace ifTrue: [aNode subject environment] 	ifFalse: 		[| n |  n := aNode.		[n type == #namespace] whileFalse: [n := n parent].		n subject]]</body><body package="Aragon.Examples">expandCategory: aCategory	| s tokens |	(s := aCategory) == #'Drag-And-Drop' 		ifFalse:			[| t c |			c := ((s := aCategory) includes: $.) ifTrue: [$.] ifFalse: [$-].			tokens := s tokensBasedOn: c.			c := String with: c.			tokens := (OrderedCollection with: (t := tokens first asSymbol)) 				addAll: ((2 to: tokens size) collect: [:i | (t := t , c, (tokens at: i)) asSymbol]);				yourself]		ifTrue: [tokens := OrderedCollection with: s].	(CoreCategories includes: tokens first) ifTrue: [tokens addFirst: #Core].	hierarchy list expandPath: tokens.</body><body package="Aragon.Examples">expandClass: aClass 	self expandCategory: aClass category.	hierarchy list expand: aClass.</body><body package="Aragon.Examples">isApp: aClass	^(aClass inheritsFrom: ApplicationModel) and: [aClass respondsTo: #windowSpec]</body><body package="Aragon.Examples">nodeFor: aBinding	aBinding isForClass ifTrue: [^self nodeForClass: aBinding value].	aBinding isForNameSpace ifTrue: [^aBinding value asIdentityTreeNode type: #namespace].	^aBinding asTreeNode type: #unknown; hasChildren: false</body><body package="Aragon.Examples">nodeForClass: aClass 	| answer |	answer := aClass asIdentityTreeNode type: #class; hasChildren: self showsInheritance not.	(self isApp: aClass) ifTrue: [answer icon: self class appIcon].	^answer</body><body package="Aragon.Examples">pathTo: aClassOrNamespace	| n answer |	n := aClassOrNamespace.	answer := OrderedCollection new.	[n ~~ Smalltalk] 		whileTrue: 			[answer addAll: (self tokensInCategory: n category) reverse.			answer add: (n := n environment)].	^answer reverse</body><body package="Aragon.Examples">tokensInCategory: aCategory	^aCategory == #'Drag-And-Drop' 		ifTrue: [OrderedCollection with: aCategory]		ifFalse:			[| tokens t c s |			c := ((s := aCategory) includes: $.) ifTrue: [$.] ifFalse: [$-].			tokens := s tokensBasedOn: c.			c := String with: c.			(OrderedCollection with: (t := tokens first asSymbol)) 				addAll: ((2 to: tokens size) collect: [:i | (t := t , c, (tokens at: i)) asSymbol]);				yourself]</body><body package="Aragon.Examples">withAllParents: aNamespace 	| answer n |	answer := OrderedCollection with: (n := aNamespace).	[n == nil] whileFalse: [answer add: (n := n environment)].	^answer</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>history</category><body package="Aragon.Examples">_historyChangeRequest: aController	| s cls qr |	(s := aController editValue) isEmpty ifTrue: [^true].		(qr := (s := s asSymbol) asQualifiedReference) isDefined ifTrue: 		[aController view editText: qr value fullName; invalidate.		aController notAccepted.		^true].	cls := Root allClasses detect: [:one | one name == s] 		ifNone: 			[Screen default ringBell.			^false].	aController view editText: cls name; invalidate.	aController notAccepted.	^true</body><body package="Aragon.Examples">_historyChanged	| hs |	((hs := history selection) isNil or: [hs isEmpty]) ifTrue: [^self].	hs := hs asSymbol.	(selectedNode notNil and: [hs == selectedNode subject]) ifTrue: [^self].	self jumpToClass: hs asQualifiedReference value.	self raiseInHistory: hs asString.</body><body package="Aragon.Examples">findClass	builder keyboardProcessor 		setActive: (builder componentAt: #history) widget controller</body><body package="Aragon.Examples">history	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	history isNil ifTrue: [self prepareHistory].	^history</body><body package="Aragon.Examples">historyChangeRequest: aController	^true</body><body package="Aragon.Examples">historyChanged	| hs cls |	((hs := history selection) isNil or: [hs isEmpty]) ifTrue: [^self].	hs := hs asSymbol.	(selectedNode notNil and: [hs == selectedNode subject]) ifTrue: [^self].	cls := hs asQualifiedReference isDefined 		ifTrue: [hs asQualifiedReference value]		ifFalse: [Root allClasses detect: [:one | one name == hs] 			ifNone: 				[Screen default ringBell.				^false]].	self jumpToClass: cls.	self raiseInHistory: hs asString.</body><body package="Aragon.Examples">historyGotFocus: aController	aController selectAll</body><body package="Aragon.Examples">historyList	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	^history listHolder</body><body package="Aragon.Examples">keyPress: eve in: controller "	^(completer ~~ nil and: [| c | ((c := eve keyValue) isKindOf: Character) and: [c isAlphaNumeric]])		ifTrue: 			[| save |			save := completer.			completer := nil.			controller processKeyboardEvent: eve.			(completer := save) completeForward.			nil]		ifFalse: [eve]"^eve</body><body package="Aragon.Examples">prepareHistory	history isNil ifTrue: [history := ClassBrowserHistory new initialize].	^history</body><body package="Aragon.Examples">raiseInHistory: aString 	(history list) remove: aString ifAbsent: []; addFirst: aString.	history list size &gt; 24		ifTrue: 			[| s |			s := history list removeLast.			history associations removeKey: s asSymbol ifAbsent: []].	builder notNil 		ifTrue: 			[(builder componentAt: #back) enable.			(builder componentAt: #forward) disable].</body><body package="Aragon.Examples">selectionInHistory	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^self history selectionHolder</body><body package="Aragon.Examples">updateHistory	| n cname cls |	history isNil ifTrue: [^self].		((n := selectedNode) isNil or: [	n type == #namespace or: [	n type == #category]]) 		ifTrue: [^history selection: nil].	[n type ~~ #class] 		whileTrue: [(n := n parent) isNil ifTrue: [^history selection: nil]].	cls := n subject instanceBehavior.	history selection = (cname := cls displayString) ifTrue: [^self].	self raiseInHistory: cname.	history selection: cname</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>children</category><body package="Aragon.Examples">childrenFor: anEntry type: aType node: aNode	anEntry == #root ifTrue: [^self childrenForRoot].	aType == #namespace ifTrue: [^self childrenForNamespace: anEntry].	aType == #category ifTrue: [^self childrenForCategory: anEntry node: aNode].	aType == #class ifTrue: [^self childrenForClass: anEntry].	aType == #variables			ifTrue:				[anEntry key == #instvars ifTrue: [^self childrenForInstvarsOf: anEntry value].				anEntry key == #classvars ifTrue: [^self childrenForClassvarsOf: anEntry value]].	aType == #protocol ifTrue: [^self childrenForProtocol: anEntry key in: anEntry value].	^#()</body><body package="Aragon.Examples">childrenForCategory: aCategory in: env 	"Get all the classes in aCategory from the system organizer and 	wrap them in an Association with #class as the key."	| answer donts fx f1 f2 |	answer := self subCategoriesOf: aCategory in: env.	donts := self withAllParents: env.	fx := filters at: #namespace ifAbsent: [[:c | true]].	f1 := [:c | (donts includes: c) not and: [fx value: c]].	f2 := filters at: #class ifAbsent: [[:c | true]].	(env organization categories includes: aCategory)		ifTrue: [(env organization listAtCategoryNamed: aCategory) do: 			[:each || b | b := env localBindingFor: each.				((b isForNameSpace ifTrue: [f1] ifFalse: [f2]) value: b value)					ifTrue: [answer add: (self nodeFor: b)]]].	^answer</body><body package="Aragon.Examples">childrenForCategory: aCategory node: aNode	"Get all the classes in aCategory from the system organizer and 	wrap them in an Association with #class as the key."	| n |	n := aNode. 	[n isNil or: [n type == #namespace]] whileFalse: [n := n parent].	^self childrenForCategory: aCategory in: (n isNil ifTrue: [Smalltalk] ifFalse: [n subject]).</body><body package="Aragon.Examples">childrenForClass2: aClass	^(aClass subclasses collect: [:each | (self nodeForClass: each)			displayString: (each name asText emphasizeAllWith: #italic);			children: ((each == Class or: [each subclasses isEmpty]) ifTrue: [#()])]) 		asSortedCollection</body><body package="Aragon.Examples">childrenForClass: aClass 	"Get all the protocol names in aClass from the class's organizer."	| answer node cats f |	self showsInheritance ifTrue: [^self childrenForClass2: aClass].	answer := OrderedCollection new.	f := filters at: #protocol ifAbsent: [[:x | true]].	(f value: #instvars) 		ifTrue:			[hierarchy list fetchChildrenFor: ((node := AragonTreeNode for: #instvars -&gt; aClass) type: #variables).			node hasChildren ifTrue: [answer add: (node displayString: 'Instance Variables')]].	(f value: #classvars) 		ifTrue:			[hierarchy list fetchChildrenFor: ((node := AragonTreeNode for: #classvars -&gt; aClass) type: #variables).			node hasChildren ifTrue: [answer add: (node displayString: 'Class Variables')]].	cats := aClass organization categories select: f.	answer addAll: (cats		collect: [:each | (AragonTreeNode for: each -&gt; aClass) type: #protocol; displayString: each]).	aClass isMeta		ifFalse: 			[hierarchy list fetchChildrenFor: (node := 				aClass class asIdentityTreeNode displayString: aClass class name; type: #class).			node hasChildren ifTrue: [answer add: node]].	^answer</body><body package="Aragon.Examples">childrenForClassvarsOf: aClass 	"Get all the instance variable names aClass and wrap them in Arrays 	with the following entries: #(#instvar &lt;the inst var name&gt;)."	^aClass classVarNames asArray collect: [:each | (each -&gt; aClass) asTreeNode type: #classvar; displayString: each; hasChildren: false]</body><body package="Aragon.Examples">childrenForInstvarsOf: aClass 	"Get all the instance variable names aClass and wrap them in Arrays 	with the following entries: #(#instvar &lt;the inst var name&gt;)."	^aClass instVarNames collect: [:each | (each -&gt; aClass) asTreeNode type: #instvar; displayString: each; hasChildren: false]</body><body package="Aragon.Examples">childrenForNamespace: aNamespace 	| answer cats |	answer := OrderedCollection new.	answer addAll: (self childrenForCategory: #'' in: aNamespace).	cats := self subCategoriesOf: nil in: aNamespace."	(cats size == 1 and: [cats first = aNamespace name])		ifTrue:			[cats := self subCategoriesOf: cats first subject in: aNamespace]."	answer addAll: cats."	answer addAll: (self subCategoriesOf: nil in: aNamespace).	answer addAll: (self nameSpacesIn: aNamespace)."	^answer</body><body package="Aragon.Examples">childrenForProtocol: aProtocol in: aClass 	"Get all the methods in aProtocol of aClass from the class's organizer and wrap them in Arrays with 	the following entries: #(#method &lt;the method&gt;)."	^(aClass organization listAtCategoryNamed: aProtocol)		collect: [:each | (each -&gt; aClass) asTreeNode type: #method; displayString: each; hasChildren: false]</body><body package="Aragon.Examples">childrenForRoot	"Get all the names of class categories from the system organizer and wrap them in Arrays with the 	following entries: #(#category &lt;the category name&gt;)."	^Smalltalk organization categories collect: [:each | each asIdentityTreeNode type: #category]</body><body package="Aragon.Examples">coreCategories	^(self subCategoriesOf: nil)		select: [:each | CoreCategories includes: each subject].</body><body package="Aragon.Examples">nameSpacesIn: aNamespace 	| answer |	answer := OrderedCollection new.	aNamespace localBindings 		do: [:b | b isForNameSpace ifTrue: [answer add: (b value asTreeNode type: #namespace)]].	^answer</body><body package="Aragon.Examples">rootCategories	| answer |	(answer := OrderedCollection new) add: ((#Core asTreeNode) 		type: #category; 		displayString: 'Core Classes').	(self subCategoriesOf: nil)		do: [:each | (CoreCategories includes: each subject)				ifFalse: [answer add: each]].	^answer</body><body package="Aragon.Examples">roots	^Array with: (Smalltalk asIdentityTreeNode type: #namespace)</body><body package="Aragon.Examples">subCategoriesOf: aCategory 	^self subCategoriesOf: aCategory in: Smalltalk</body><body package="Aragon.Examples">subCategoriesOf: aCategory in: environment	| answer pattern start cats f |	answer := Set new.	aCategory == #'' ifTrue: [^answer].	aCategory isNil		ifTrue: [pattern := '*'. start := 1]		ifFalse: [pattern := aCategory , '*'.  start := pattern size+1].	cats := environment organization categories.	(f := filters at: #category ifAbsent: []) notNil 		ifTrue: [cats := cats select: f].	cats		do: [:each | (each ~= aCategory and: [pattern match: each])			ifTrue: 				[| i stop |				(stop := each size) == 0 ifFalse: [				(i := each nextIndexOf: $. from: start to: stop) isNil ifTrue: [				(i := each nextIndexOf: $- from: start to: stop) isNil ifTrue: [				i := stop+1]].				answer add: (each copyFrom: 1 to: i-1)]]].	^answer asSortedStrings collect: [:each | (each asSymbol asIdentityTreeNode) 		displayString: (each copyFrom: start to: each size); 		type: #category]</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>accessing</category><body package="Aragon.Examples">filters	^filters</body><body package="Aragon.Examples">hierarchy	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined."	hierarchy isNil 		ifTrue: 			[hierarchy := SelectionInTree with: (TreeAdaptor new 				childrenBlock: [:anEntry :type :node | self childrenFor: anEntry type: type node: node]; 				roots: self roots;				expandAt: 1)].	^hierarchy</body><body package="Aragon.Examples">historyMenu	^	[| mb |	mb := MenuBuilder new.	history list do: [:each | mb add: each -&gt; [self jumpToClass: (Smalltalk at: each)]].	mb menu]</body><body package="Aragon.Examples">menu	menuHolder isNil ifTrue: [menuHolder := Menu new asValue].	^menuHolder</body><body package="Aragon.Examples">resetFilters	filters := IdentityDictionary new</body><body package="Aragon.Examples">selectedNode 	^hierarchy selectedNode</body><body package="Aragon.Examples">showsInheritance	^temp notNil</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>initialize-release</category><body package="Aragon.Examples">delegate: aDelegate	delegate := aDelegate</body><body package="Aragon.Examples">initialize	super initialize.	filters := IdentityDictionary new.				self hierarchy selectionIndexHolder onChangeSend: #selectionChanged to: self.</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>drag&amp;drop</category><body package="Aragon.Examples">canDropFrom: aDragContext 	^aDragContext sourceData contextApplication == self and: 	[#(namespace category class protocol selector) includes: aDragContext key]</body><body package="Aragon.Examples">canDropFrom: aDragContext onto: targetNode 	| source node |	source := aDragContext sourceData clientData.	node := source at: #node.	aDragContext key == #category		ifTrue:			[^(targetNode type == #category or: [targetNode type == #namespace]) and: [			targetNode ~~ node and: [targetNode ~~ node parent and: [			(targetNode path includes: node) not]]]].	aDragContext key == #class		ifTrue:			[^targetNode type == #category and: [			targetNode subject ~~ node subject category]].	aDragContext key == #selector		ifTrue: 			[targetNode type == #protocol 				ifTrue: 					[| cls |  cls := targetNode subject value.					^cls instanceBehavior name == (source at: #class) and: 					[targetNode subject key ~~ (source at: #protocol)]]].			targetNode type == #method ifTrue: [^self canDropFrom: aDragContext onto: targetNode parent].	aDragContext key == #protocol		ifTrue: 			[targetNode type == #protocol 				ifTrue: 					[| cls |  cls := targetNode subject value.					cls instanceBehavior name == (source at: #class) and: 					[targetNode subject key ~~ (source at: #protocol)]].			targetNode type == #class ifTrue: [^targetNode subject name == (source at: #class)]].	^false</body><body package="Aragon.Examples">drop: source onto: target with: aDragContext	delegate isNil ifTrue: [^false].	aDragContext key == #category ifTrue: [^delegate dropCategory: source onto: target].	aDragContext key == #class ifTrue: [^delegate dropClass: source onto: target].	aDragContext key == #selector ifTrue: [^delegate dropSelector: source onto: target].	aDragContext key == #protocol ifTrue: [^delegate dropProtocol: source onto: target].	^false</body><body package="Aragon.Examples">dropEnterWith: aDragContext 	| widget dictionary |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	widget := (builder componentAt: #hierarchy) widget.	dictionary := IdentityDictionary new.							"V2 Step 3"	dictionary at: #widget put: widget.							"V2 Step 4"	dictionary at: #targetIndex put: widget targetIndex.			"V2 Step 4"	dictionary at: #hasFocus put: widget hasFocus.				"V2 Step 4"	aDragContext dropTarget clientData: dictionary.			 	"V2 Step 5"	widget hasFocus: true.									"V2 Step 6"	^#dropEffectMove</body><body package="Aragon.Examples">dropExitWith: aDragContext 	| widget dictionary |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	dictionary := aDragContext dropTarget clientData.	widget := dictionary at: #widget.	widget targetIndex: (dictionary at: #targetIndex).	widget hasFocus: (dictionary at: #hasFocus).	aDragContext dropTarget clientData: nil.	^#dropEffectNone</body><body package="Aragon.Examples">dropOverWith: aDragContext 	| treeView target |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	treeView := aDragContext dropTarget clientData at: #widget.	treeView showDropFeedbackIn: aDragContext allowScrolling: true.	target := hierarchy list nodeAt: treeView targetIndex.	(self canDropFrom: aDragContext onto: target) ifFalse: [^#dropEffectNone].	^#dropEffectMove</body><body package="Aragon.Examples">dropWith: aDragContext 	| treeView target source |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	treeView := aDragContext dropTarget clientData at: #widget.	source := aDragContext sourceData clientData.	target := self hierarchy list nodeAt: treeView targetIndex.	(self canDropFrom: aDragContext onto: target)		ifTrue:  			[(self drop: source onto: target with: aDragContext)				ifFalse: [^#dropEffectNone].			self moveNode: (source at: #node) to: target].		^self dropExitWith: aDragContext</body><body package="Aragon.Examples">moveNode: aNode to: targetNode	| tree |	tree := hierarchy list.	hierarchy selectionIndexHolder doWithoutDependents:	[		| i1 i2 |		tree expand: targetNode.		i1 := tree indexOf: aNode.		tree doWithoutDependents: 			[tree remove: aNode; addFirst: aNode asChildOf: targetNode].		i2 := tree indexOf: aNode.		i2 &lt; i1 ifTrue: [| t | t := i2. i2 := i1. i1 := t].		aNode isExpanded ifTrue: [i2 := i2 + aNode children size].		hierarchy selection: aNode.		tree changed: #range with: (i1-1 to: i2+1).	].	(builder componentAt: #hierarchy) widget updateSelectionChannel</body><body package="Aragon.Examples">startDraggingFrom: aController 	"Drag the currently selected entry."	| node dm data subject info |	node := self selectedNode. 	data := DragDropData new.	data key: node type.	data contextWindow: self builder window.	data contextWidget: aController view.	data contextApplication: self.	data clientData: (info := IdentityDictionary new		add: #node -&gt; node;		add: node type -&gt; node subject;		add: #environment -&gt; (self environmentFor: node);	yourself).	((subject := node subject) isKindOf: Association)		ifTrue: 			[info add: #class -&gt; subject value.			info add: node type -&gt; subject key].	dm := DragDropManager withDropSource: DropSource new withData: data.	dm doDragDrop</body><body package="Aragon.Examples">wantToDrag: aController 	^self selectedNode notNil.</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser</class-id> <category>interface opening</category><body package="Aragon.Examples">noticeOfWindowClose: aWindow	history isNil		ifFalse: 			[history store].	super noticeOfWindowClose: aWindow</body><body package="Aragon.Examples">postBuildWith: aBuilder	| w |	aBuilder == builder		ifFalse: 			[builder namedComponents addAll: aBuilder namedComponents associations].	(w := builder componentAt: #hierarchy) notNil		ifTrue: 			[(w widget)				imageList: ImageList;				linesAtRoot: hierarchy list roots size &gt; 1].	(builder componentAt: #historyBar) isNil		ifFalse: 			[self prepareHistory.			(builder componentAt: #toggleDisplay) widget				enabledImage: (self showsInheritance						ifTrue: [self class categoryIcon]						ifFalse: [self class classIcon])]</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser class</class-id> <category>constants</category><body package="Aragon.Examples">appIcon	^AragonIcon named: #largeBrick color: #darkRed</body><body package="Aragon.Examples">categoryIcon	^AragonIcon named: #folder2 color: ColorValue royalBlue</body><body package="Aragon.Examples">classIcon	^AragonIcon named: #largeBrick color: #red</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser class</class-id> <category>class initialization</category><body package="Aragon.Examples">initialize	ImageList := IdentityDictionary new		add: #namespace -&gt;	(AragonIcon named: #pie );		add: #category	-&gt;	self categoryIcon;		add: #class		-&gt;	self classIcon;		add: #app 		-&gt;	self appIcon;		add: #protocol	-&gt;	(AragonIcon named: #bricks color: #royalBlue);		add: #variables	-&gt;	(AragonIcon named: #parts1);		add: #method	-&gt;	(AragonIcon named: #brick color: #green);		add: #instvar		-&gt;	(AragonIcon named: #brick color: #red);		add: #classvar	-&gt;	(AragonIcon named: #brick color: #yellow);		add: #unknown	-&gt;	(AragonIcon named: #leaf);	yourself.	CoreCategories := 	#(		Magnitude 		Collections 		Graphics 		Interface 		Kernel 		System 		Tools 		OS 		External 		UIBasics 		UIBuilder 		UILooks 		Globalization 		Drag #'Drag-And-Drop' 		Messages	).</body></methods><methods><class-id>Aragon.AragonExamplesBrowser</class-id> <category>interface opening</category><body package="Aragon.Examples">postBuildWith: aBuilder	| label |	self selectionChanged.	(label := aBuilder componentAt: #explanation) notNil 		ifTrue: 			[label widget textStyle: (Fonts styleFrom: #(Helvetica italic 14))].	builder window icon: ((AragonIcon visualFor: #aragon) asIcon).</body></methods><methods><class-id>Aragon.AragonExamplesBrowser</class-id> <category>initialize-release</category><body package="Aragon.Examples">initialize	examples := SelectionInTree with: TreeAdaptor new.	examples selectionIndexHolder onChangeSend: #selectionChanged to: self.	alreadyShown := List new.	(Aragon includesKey: #TreeView) ifTrue: [self showExamples: #'Samples'].	(Aragon includesKey: #TreeView) ifTrue: [self showExamples: #'Toys'].</body><body package="Aragon.Examples">showExamples: aSymbol	| someExamples roots rnode |	(alreadyShown includes: aSymbol) ifTrue: [^self].	alreadyShown add: aSymbol.	someExamples := Examples at: aSymbol.	(roots := examples list roots) isNil ifTrue: [roots := List new].	rnode := aSymbol asIdentityTreeNode.	rnode children: (someExamples collect: 			 [:each | each isSymbol				ifTrue: [each asTreeNode isLeaf: true]				ifFalse: 					[| node |					node := each first asTreeNode.					node children: (each last collect: [:e | e asTreeNode isLeaf: true]).					node]]).	roots add: rnode.	examples list roots: roots.	(builder notNil and: [builder window isOpen]) ifTrue: [examples list changed: #value].</body></methods><methods><class-id>Aragon.AragonExamplesBrowser</class-id> <category>actions</category><body package="Aragon.Examples">browse	AragonStuff browseClass: self selectedClass.</body><body package="Aragon.Examples">doubleClick	(builder componentAt: #start) widget isEnabled ifTrue: [self start]</body><body package="Aragon.Examples">start	self selectedClass open</body></methods><methods><class-id>Aragon.AragonExamplesBrowser</class-id> <category>events</category><body package="Aragon.Examples">selectionChanged	| enable |	selection := examples selectedNode.	(enable := selection notNil and: [selection type == #leaf])		ifTrue: [(Aragon includesKey: selection subject)				ifTrue: [self explanation value: (Descriptions at: self selectedClass name ifAbsent: ['There''s no description available for this sample.']) asRichText]				ifFalse: 					[self explanation value: 'This class is not present in the image!'.					enable := false]]		ifFalse: [self explanation value: (Descriptions at: (selection isNil ifTrue: [self class name] ifFalse: [selection subject]) ifAbsent: ['']) asRichText].	#(start browse) do: [:each | (builder componentAt: each) widget isEnabled: enable].</body></methods><methods><class-id>Aragon.AragonExamplesBrowser</class-id> <category>aspects</category><body package="Aragon.Examples">examples	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^examples</body><body package="Aragon.Examples">explanation	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	explanation isNil ifTrue: [explanation := String new asValue].	^explanation</body><body package="Aragon.Examples">selectedClass	^selection isNil ifFalse: [Aragon at: selection subject]</body></methods><methods><class-id>Aragon.AragonExamplesBrowser class</class-id> <category>class initialization</category><body package="Aragon.Examples">examples	^Examples</body><body package="Aragon.Examples">initialize	"self initialize"	Examples := IdentityDictionary new.	Examples at: #'Samples' put: #(		#(NewDataSet	 #(NewDatasetExample OldDatasetExample NdsFileBrowser))		#(TreeView	 #(SimpleFileBrowser SimpleClassBrowser TreeViewDirectorySelector))		#(CardView	 #(CardViewExample CardViewExample1 CardViewExample2 CardViewExample3))		#GaugeExample		#ResizerExample		#World	).	Examples at: #'Toys' put: #(		#NewParcelBrowser		#NewFileBrowser		#ChangeSetBrowser		#AragonMenuEditor		#TextEditor	).	self initializeDescriptions</body><body package="Aragon.Examples">initializeDescriptionsDescriptions := IdentityDictionary new 	add: #Samples -&gt; 'These are some sample apps that illustrate the usage of the new widgets in &lt;b&gt;Framework Enhancements&lt;/b&gt;';	add: #Toys -&gt; 'These are examples and tools that deploy new widgets from Framework Enhancements to fulfil their work. &lt;b&gt;Please Note:&lt;/b&gt; Even though some of these tools might look quite usable for your everyday work, you should still consider them as being examples and no fully tested products.';	add: #NewParcelBrowser -&gt; 'This is a replacement for the built-in ParcelList It uses a TreeView to display the loaded parcels in a hierarchy. Maintaining a hierarchy of parcels requires Enhanced Parcels facilities, which are also included with Framework Enhancements.';	add: #OldDatasetExample -&gt; 'This is the superclass of NewDataSetExample, containing all the DataSet-specific methods. It is provided to show that NewDataSet widgets can be used in place of the built-in DataSet widgets with no method changes (Open it with #windowWithNewDatasetSpec).';	add: #NewDatasetExample -&gt; 'This example shows how to deploy a NewDataSet widget. It exploits the various new features introduced with NewDataSet, such as switching between browsing and editing mode, multiple selection, customized rendering of cell contents and manipulation of appearance.';	add: #SimpleFileBrowser -&gt; 'This is a very simple file browser example. It displays all the volumes, directories and files in a single TreeView. The directories are displayed as folders, the files appear as leafs.';	add: #SimpleClassBrowser -&gt; 'This is a very simple class browser example. It displays the inheritance hierarchy of all classes in the system starting at class Object as root.';	add: #TextEditor -&gt; 'This is a replacement for the built-in workspace windows. You can use it as a scratch pad. It comes with additional commands for storing text on file. (TextEditor makes use of WindowResizeCorner if present).';	add: #NewFileBrowser -&gt; 'This is a replacement for the built-in FileList. It deploys a TreeView and a NewDataSet for presenting a Windows 95 explorer like interface.';	add: #PopupTreeView -&gt; 'This example displays a TreeView in a popup window. The window disapears when a mouse button is pressed outside its boundaries. This could be a way to provide a Windows 95-like path selector drop-down box.';	add: #CardViewExample -&gt; 'This example shows how to deploy a non-trivial CardView widget, displaying several application interfaces, with only minimal effort, by exploiting the advanced features introduced with CardView (automatic building of subcanvases, subcanvas caching).';	add: #CardViewExample3 -&gt; 'And yet another one. (Sorry, I''m getting tired now.)';	add: #CardViewExample1 -&gt; 'This example illustrates the basic steps to deploy a CardView widget in the traditional, Notbook-like style. It displays a different set of classes in a listbox corresponding to the selected index tab.';	add: #CardViewExample2 -&gt; 'This example is a derivate of CardViewExample1 that shows how to configure a CardView with a list of associations instead of mere index label strings.';	add: #GaugeExample -&gt; 'This example application shows how to use different forms of the new widget &lt;i&gt;Gauge&lt;/i&gt;, such as for Pregress Bars, and Measures.';	add: #World -&gt; 'A simple application showing a bitmap loaded from disk using the &lt;b&gt;StoredImages&lt;/b&gt; proxies.';	add: #AragonExamplesBrowser -&gt; 'Browse through the example classes with the list on the left. Some example apps can be installed in VisualLauncher to be used in place of the default tools. Do so by turning on the check mark below.PLEASE NOTE: These are only examples. You should not expect them to be complete.';	add: #ChangeSetBrowser -&gt; 'This example displays the entries of the current changes set in a TreeView. The TreeView is used to categorise the changes. You can browse to changed classes or methods by double-clicking on the corresponding leaf entries.';	add: #AragonMenuEditor -&gt; 'This is a replacement for the built-in MenuEditor that provides support for advanced short cut key characters. Switch to a menu item''s details page and type in a short cut key for a try.';	add: #ResizerExample -&gt; 'Shows the new subcanvas resizer widget in action. Resizers can also be seen in the Class Browser toy.';	add: #TreeViewDirectorySelector -&gt; 'This example implements a Windows 95-style directory selector dialog. It is part of the Aragon.Framework.Widget.TreeView parcel and can be used for selecting directory names..';yourself.</body></methods><methods><class-id>Aragon.OldDatasetExample</class-id> <category>aspects</category><body package="Aragon.Examples">entries	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	entries isNil		ifTrue: 			[entries := SelectionInList new.			entries selectionIndexHolder compute: [:v | self row value: entries selection]].	^entries</body><body package="Aragon.Examples">row	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	row isNil ifTrue: [row := nil asValue].	^row</body></methods><methods><class-id>Aragon.OldDatasetExample</class-id> <category>events</category><body package="Aragon.Examples">validateProductName	^self validateProductName: (builder componentAt: #entries) widget editor widget controller.</body><body package="Aragon.Examples">validateProductName: aController 	| newName oldName |	newName := aController editValue.	aController textHasChanged ifFalse: [^true].	newName isEmpty 		ifTrue: 			[Screen default ringBell. 			Dialog warn: 'You must enter a name for that product!'.			^false].	oldName := row value at: 2.	newName = oldName ifTrue: [^true].	entries list detect: [:each | each ~~ row value and: [(each at: 2) = newName]] ifNone: [^true].	Screen default ringBell.	(Dialog 		confirm: 'There''s already an entry with product name ''', newName, '''Are you sure you want to insert another one?')		ifTrue: [aController textHasChanged: false; accept. ^true]		ifFalse: [aController cancel].	^false</body></methods><methods><class-id>Aragon.OldDatasetExample</class-id> <category>initialize-release</category><body package="Aragon.Examples">initialize	| list |	list := List new		add: #('9/13/1996'	'Jelly Beans'	10000	27		true) copy;		add: #('5/5/2005'	'Marmalade' 	50		70		true) copy;		add: #('7/30/1998'	'Red Wine' 	100		1000	false) copy;		add: #('7/26/1998'	'Thai Food' 		20		120		false) copy;		add: #('7/26/1998'	'Thai Food' 	10		100		false) copy;		add: #('7/23/1998'	'Pizza' 		20		120		false) copy;		add: #('7/20/1998'	'Guinness' 	2000	700		false) copy;	yourself.	list do: [:each | each first notNil ifTrue: [each at: 1 put: (Date readFrom: each first readStream)]].	self entries list: list.</body></methods><methods><class-id>Aragon.OldDatasetExample class</class-id> <category>resources</category><body package="Aragon.Examples">productsMenu	^#('Jelly Beans' 'Marmalade' 'Red Wine' 'Pizza' 'Thai Food' 'Guinness') asValue</body></methods><methods><class-id>Aragon.NewDatasetExample</class-id> <category>actions</category><body package="Aragon.Examples">colorChess	((builder componentAt: #entries) widget)		visualBlock: 			[:view :cell :gc | 			| fg bg |			(cell x + cell y) odd				ifTrue: 					[fg := ColorValue white.					bg := ColorValue gray]				ifFalse: 					[fg := ColorValue black.					bg := ColorValue white].			gc paint: bg; displayRectangle: (view boundsOfCellIndex: cell); paint: fg]; invalidate</body><body package="Aragon.Examples">colorColumn2	(builder componentAt: #entries) widget		visualBlockAtColumn: 2 put: 			[:view :cell :gc | 			gc paint: ColorValue veryLightGray. 			gc displayRectangle: (view boundsOfCellIndex: cell). 			gc paint: view foregroundColor];		invalidate</body><body package="Aragon.Examples">colorFlag	(builder componentAt: #entries) widget		visualBlock: 			[:view :cell :gc | 			| fg bg |			fg := gc paint.			bg := cell &lt; (3 @ 5)						ifTrue: [fg := ColorValue white. ColorValue royalBlue]						ifFalse: [cell y odd								ifTrue: [ColorValue pink]								ifFalse: [ColorValue white]].			gc paint: bg; displayRectangle: (view boundsOfCellIndex: cell); paint: fg];		invalidate</body><body package="Aragon.Examples">colorNone	(builder componentAt: #entries) widget		visualBlock: nil;		invalidate</body><body package="Aragon.Examples">pricesColumn	"This could as well be taken from the widget spec, such as in: 	((builder componentAt: #entries) spec columns at: 5) 	Note: index 1 = rowSelector"	^(DataSetColumnSpec new 		model: #'row 4';		width: 72;		label: 'Price'; 		labelFont: #DataSetLabel;		editorType: #InputField;		type: #fixedpoint;		alignment: #right;		font: #DataSetEntries;		formatString: '$#,##0.00;[Red]-$#,##0.00' )</body><body package="Aragon.Examples">showOptions	(optionsDialog notNil and: [optionsDialog builder window isOpen])		ifTrue: [^optionsDialog builder window raise].	optionsDialog := SimpleDialog new.	optionsDialog builder source: self.	optionsDialog allButOpenFrom: (UISpecification from: self class optionsSpec).	optionsDialog builder open</body><body package="Aragon.Examples">showPrices	| menuItem |	menuItem := ((builder menuAt: #menuBar)				atNameKey: #productMenu) submenu atNameKey: #showPrices.	menuItem indication: menuItem indication not.	self showPrices: menuItem indication.</body><body package="Aragon.Examples">showPrices: aBoolean 	| dataset |	dataset := builder componentAt: #entries.	aBoolean		ifTrue: [dataset widget insertColumn: (dataset spec columns at: 5) at: 4]		ifFalse: [dataset widget removeColumnAt: 4]</body><body package="Aragon.Examples">startEditing	| widget |	widget := (builder componentAt: #entries) widget.	entries selection isNil ifTrue: [entries selectionIndex: 1].	widget controller startEditing.</body><body package="Aragon.Examples">stopEditing	(builder componentAt: #entries) widget controller stopEditing.</body><body package="Aragon.Examples">toggleEditing	| widget |	widget := (builder componentAt: #entries) widget.	entries selection isNil ifTrue: [entries selectionIndex: 1].	widget controller toggleEditing.</body></methods><methods><class-id>Aragon.NewDatasetExample</class-id> <category>aspects</category><body package="Aragon.Examples">allowForColumnDragging	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	allowForColumnDragging isNil ifTrue: [allowForColumnDragging := false asValue].	^allowForColumnDragging</body><body package="Aragon.Examples">allowForSorting	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	allowForSorting isNil ifTrue: [allowForSorting := false asValue].	^allowForSorting</body><body package="Aragon.Examples">entries	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	entries isNil		ifTrue: 			[entries := MultiSelectionInList new.			entries selectionIndexHolder compute: [:v | self row value: entries selection]].	^entries</body><body package="Aragon.Examples">listMenu	listMenu isNil 		ifTrue: 			[| mb |			(mb := MenuBuilder new)				beginSubMenuLabeled: 'Sort by ...\b';					add: 'Date' -&gt; 1;					add: 'Name' -&gt; 2;					add: 'Amount' -&gt; 3;					add: 'Price' -&gt; 4;				endSubMenu.			listMenu := mb menu asValue].	^listMenu</body><body package="Aragon.Examples">showHorizontalLines	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	showHorizontalLines isNil ifTrue: [showHorizontalLines := false asValue].	^showHorizontalLines</body><body package="Aragon.Examples">showLabels	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	showLabels isNil ifTrue: [showLabels := true asValue].	^showLabels</body><body package="Aragon.Examples">showLineNumbers	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	showLineNumbers isNil ifTrue: [showLineNumbers := false asValue].	^showLineNumbers</body><body package="Aragon.Examples">showVerticalLines	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	showVerticalLines isNil ifTrue: [showVerticalLines := false asValue].	^showVerticalLines</body><body package="Aragon.Examples">templateEntry	^(Array new: 5)		at: 1 put: Date today;		at: 2 put: '[new]';		at: 3 put: nil;		at: 4 put: -9999;		at: 5 put: false;	yourself.</body><body package="Aragon.Examples">useDecoratedEditors	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	useDecoratedEditors isNil ifTrue: [useDecoratedEditors := false asValue].	^useDecoratedEditors</body><body package="Aragon.Examples">useRowSelectors	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	useRowSelectors isNil ifTrue: [useRowSelectors := false asValue].	^useRowSelectors</body></methods><methods><class-id>Aragon.NewDatasetExample</class-id> <category>events</category><body package="Aragon.Examples">keyPress: aKeyboardEvent 	| keyValue ctrl |	keyValue := aKeyboardEvent keyValue.	ctrl := (builder componentAt: #entries) widget controller.	keyValue == #F2					 				ifTrue: [ctrl toggleEditing]	ifFalse: [	(keyValue == Character cr and: [ctrl isBrowsing])		ifTrue: [ctrl startEditing]	ifFalse: [	keyValue == #F12								ifTrue: [ctrl stopEditing]	ifFalse: [	keyValue == Character esc 						ifTrue: [ctrl abortEditing]	ifFalse: [	(keyValue == Character del and: [ctrl isBrowsing]) 	ifTrue: [entries list removeAll: entries selections]	ifFalse: [^aKeyboardEvent]]]]].	^nil</body><body package="Aragon.Examples">noticeOfWindowClose: aWindow	| dataSet |	(dataSet  := builder componentAt: #entries) isNil ifTrue: [^optionsDialog := nil].	ColumnLayout := dataSet widget columnLayout.	^super noticeOfWindowClose: aWindow</body></methods><methods><class-id>Aragon.NewDatasetExample</class-id> <category>initialize-release</category><body package="Aragon.Examples">postBuildWith: aBuilder 	| dataSet widget menuItem |	#{Aragon.WindowResizeCorner} isDefined ifTrue: [builder add: Aragon.WindowResizeCornerSpec new].	(dataSet  := builder componentAt: #entries) isNil ifTrue: [^self].	widget := dataSet widget.	ColumnLayout notNil ifTrue: [widget columnLayout: ColumnLayout].	(self allowForColumnDragging) compute: [:m | widget allowForColumnDragging: m value]; value: true.	(self allowForSorting) compute: [:m | widget allowForSorting: m value]; value: true.	(self useDecoratedEditors) compute: [:m | widget useDecoratedEditors: m value]; value: true.	(self useRowSelectors) compute: [:m | widget useRowSelectors: m value]; value: true.	(self showLineNumbers) compute: [:m | widget showLineNumbers: m value]; value: false.	(self showHorizontalLines) compute: [:m | widget showHorizontalLines: m value].	(self showVerticalLines) compute: [:m | widget showVerticalLines: m value].	(self showLabels) compute: [:m | widget showLabels: m value].	widget controller performer: [:i | widget orderBy: i].	"Provide an auto new block that returns a template for new entries"	widget autoNewBlock: [self templateEntry].	"Provide a default sort block which compares two entries' product names ...""	widget defaultSortBlock: [:a :b | (a at: 2) &lt; (b at: 2)]."	widget orderBy: 2.	menuItem := ((builder menuAt: #menuBar) atNameKey: #productMenu) submenu atNameKey: #showPrices.	menuItem indication: (ColumnLayout isNil or: [(ColumnLayout includesKey: #Labels) not or: [(ColumnLayout at: #Labels) includes: 'Price']]).	aBuilder keyboardProcessor keyboardHook: [:ev :ctrl | self keyPress: ev].	super postBuildWith: aBuilder.</body></methods><methods><class-id>Aragon.NewDatasetExample class</class-id> <category>class initialization</category><body package="Aragon.Examples">initialize	"Install some better looking text style to be used for the applications"	| ts |	ts := Fonts styleFrom: #(Helvetica italic 15).	TextAttributes styleNamed: #DataSetLabel put: ts.	TextAttributes styleNamed: #DataSetEntries put: ts.</body><body package="Aragon.Examples">resetColumns	ColumnLayout := nil</body></methods><methods><class-id>Aragon.CardViewExample</class-id> <category>(not essential)</category><body package="Aragon.Examples">postBuildWith: aBuilder 	| label |	(label := aBuilder componentAt: #canvasLabel) notNil ifTrue: [label widget textStyle: LabelsFont].</body><body package="Aragon.Examples">tabStyle	"This method is not essential to the  CardView example itself.	It provides the aspect for the radio buttons in the first page. 	These radios can be used to change the overall tabs' display style using CardView&gt;&gt;tabStyle:."	tabStyle isNil		ifTrue: 			[tabStyle := CardView tabStyle asValue.			tabStyle				compute: 					[:m | 					CardView tabStyle: m value.					(builder componentAt: #tabs) widget invalidateTabsArea]].	^tabStyle</body></methods><methods><class-id>Aragon.CardViewExample</class-id> <category>initialize-release</category><body package="Aragon.Examples">initialize	tabs := SelectionInList 		with: (List new 			add: 'Set&amp;up' -&gt; (Array with: self with: #canvas1Spec); 			add: '&amp;Resources' -&gt; (Smalltalk at: #UIFinderVW2 ifAbsent: [nil]);			add: '&amp;File List' -&gt; FileBrowser;		yourself).</body></methods><methods><class-id>Aragon.CardViewExample</class-id> <category>aspects</category><body package="Aragon.Examples">tabs	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^tabs</body></methods><methods><class-id>Aragon.CardViewExample</class-id> <category>interface opening</category><body package="Aragon.Examples">postOpenWith: aBuilder 	tabs selectionIndex: 1</body></methods><methods><class-id>Aragon.CardViewExample class</class-id> <category>class initialization</category><body package="Aragon.Examples">initialize	"Install some text style to be used for the application"	LabelsFont := Fonts styleFrom: #(Times italic 72)</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>search paths dialog</category><body package="Aragon.Examples">addPath	| fname |	fname := self searchPaths selection.	fname isNil ifTrue: [fname := self class defaultInputDirectory].	fname := self requestFileName: fname.	fname notNil ifTrue: [searchPaths list add: fname asFilename].</body><body package="Aragon.Examples">editPath	| fname index |	index := searchPaths selectionIndexes detect: [:x | true].	(index between: 1 and: searchPaths list size) ifFalse: [^Screen default ringBell].	fname := self requestFileName: (searchPaths list at: index).	fname notNil ifTrue: [searchPaths list at: index put: fname asString].</body><body package="Aragon.Examples">editSearchPaths	searchPaths := MultiSelectionInList with: (Parcel searchPathModel value asList collect: [:each | each asString]).	searchPaths selectionIndexHolder		compute: 			[:m || b | b := Window currentWindow model builder.			(b componentAt: #editPath) 		isEnabled: m size == 1.			(b componentAt: #removePath) 	isEnabled: m isEmpty not.			(b componentAt: #moveUp) 		isEnabled: (m isEmpty not and: [(m includes: 1) not]).			(b componentAt: #moveDown) 	isEnabled: (m isEmpty not and: [(m includes: searchPaths list size) not])].	(self openDialogInterface: #searchPathsSpec) ifTrue: [Parcel setSearchPath: searchPaths list].</body><body package="Aragon.Examples">move: d	| index entries |	index := searchPaths selectionIndexes inject: 1000 into: [:min :x | min min: x].	(index + d between: 1 and: searchPaths list size) ifFalse: [^Screen default ringBell].	entries := searchPaths selections.	searchPaths list removeAll: entries.	searchPaths list addAll: entries beforeIndex: index + d.	searchPaths selections: entries</body><body package="Aragon.Examples">moveDown	self move: 1</body><body package="Aragon.Examples">moveUp	self move: -1</body><body package="Aragon.Examples">removePath	searchPaths list removeAll: searchPaths selections.	searchPaths selections isEmpty		ifTrue: [searchPaths selectionIndexes: (Set with: searchPaths list size)]		ifFalse: [searchPaths selectionIndexHolder changed]</body><body package="Aragon.Examples">searchPaths	^searchPaths</body><body package="Aragon.Examples">setSearchPath: searchPath 	Parcel searchPathModel 		value: ((searchPath isString or: [searchPath isKindOf: Filename])			ifTrue: [List with: searchPath]			ifFalse: [List withAll: searchPath])</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>private</category><body package="Aragon.Examples">changeExtensionIn: aFilename to: ext	| filename |	filename := aFilename asString.	('*.*' match: aFilename asFilename tail) ifTrue: [^(filename copyFrom: 1 to: (filename lastIndexOf: $.)-1), ext].	^filename, ext</body><body package="Aragon.Examples">doSnapshot(Dialog confirm: 'The parcel has been republished. You must snapshot to ensure your image is in sync with the new parcel source file. Do you want to snapshot now?') ifTrue: [ObjectMemory saveDialogThenQuit: false]</body><body package="Aragon.Examples">enableAll: ids inMenu: aMenu when: aBoolean	ids do: [:each || menuItem | (menuItem := aMenu atNameKey: each) ~~ nil ifTrue: [menuItem enabled: aBoolean]].</body><body package="Aragon.Examples">ensurePathTo: aFilename	| directory parts |	directory := aFilename asFilename directory.	parts := OrderedCollection new.	[directory definitelyExists] whileFalse: [parts addFirst: directory tail.  directory := directory directory].	parts do: [:s | (directory := directory construct: s) makeDirectory].</body><body package="Aragon.Examples">invalidate: aParcel	| parent |	(parent := self class headOf: aParcel) isEmpty ifTrue: [parent := #root].	parcels list invalidate: parent.</body><body package="Aragon.Examples">invalidateAndSelect: anEntry		| path i name |	name := anEntry isNil ifTrue: [''] ifFalse: [anEntry isString ifTrue: [anEntry] ifFalse: [anEntry name]].	path := OrderedCollection with: #root.	i := 0.	[(i := name nextIndexOf: self class parcelSeparator from: i+1 to: name size) ~~ nil]		whileTrue:			[path addLast: (name copyFrom: 1 to: i-1)].	name isEmpty ifFalse: [path addLast: anEntry].	Object errorSignal		handle: [:ex|]		do: [	parcels list invalidate expandPath: path].	parcels selection: anEntry.</body><body package="Aragon.Examples">isSourceFile: aFilenameOrString	"This has essentially been copied from SourcFileManager class. 	In the former implementation, files were compared on a string basis only. This had led 	to improper comparisons. E.g. filenames had always been compared in a case sensitive 	way. This is appropriate for UNIX but not for Windows platforms. Also environment variables	would not have been expanded."	| filename names sfm |	CodeWriter fileFormat &gt; 4 ifFalse: [^false].	filename := aFilenameOrString asFilename.	sfm := SourceFileManager default.	(names := sfm allFiles) nonEmptyIndicesDo: 		[:index | (names at: index) asFilename = filename ifTrue: [^index ~= sfm changesIndex]].	^false</body><body package="Aragon.Examples">privateRemove: aNode 	aNode parent children size == 1		ifTrue: [self updateView]		ifFalse: [parcels list remove: aNode]</body><body package="Aragon.Examples">rename: aNode to: newName 	| head i |	aNode type == #parcel ifTrue: [^aNode subject name: newName].	i := aNode subject size + 1.	head := aNode subject , (String with: self class parcelSeparator) , '*'.	Parcel parcels do: [:each | (head match: each name)			ifTrue: [each name: newName , (each name copyFrom: i to: each name size)]].	aNode allChildNodesDo: [:each | each type == #folder 			ifTrue: [each subject: newName , (each subject copyFrom: i to: each subject size)]].	aNode subject: newName.</body><body package="Aragon.Examples">requestParcelName: request initialAnswer: initialAnswer 		[| answer |	answer := Dialog request: request initialAnswer: initialAnswer.	(answer includes: self class parcelSeparator)		ifFalse: [^answer].	Dialog warn: 'Don''t enter a &lt;i&gt;separator (a dot)&lt;/i&gt; within a parcel''s or folder''s final name.If you want to move the parcel or folder, use drag&amp;drop instead.' asRichText.	true] whileTrue</body><body package="Aragon.Examples">save: aParcel as: aFilename withSources: aBoolean format: parcelFormat	| parcelFile sourceFile |	parcelFile := aFilename asFilename.	self ensurePathTo: parcelFile.	self class includeMatchingCategoriesInto: aParcel.	sourceFile := aBoolean ifTrue: [self changeExtensionIn: parcelFile to: Parcel sourceExtension].	self saveParcel: aParcel on: parcelFile sources: sourceFile hideOnLoad: false.	^aBoolean and: [self isSourceFile: sourceFile]</body><body package="Aragon.Examples">saveParcel: aParcel on: aFilename sources: sourceFilename hideOnLoad: aBoolean 	| republish |	republish := sourceFilename notNil and: [SourceFileManager default isSourceFile: sourceFilename].	Parcel handleCodeReaderSignalsDo: [aParcel			parcelOutOn: aFilename			withSource: sourceFilename			hideOnLoad: aBoolean			republish: republish			backup: false]		for: aFilename asFilename.	republish ifTrue: [aParcel markAsClean]</body><body package="Aragon.Examples">saveParcels: aCollection on: aFilename	| includeSources needsSnapshot parcelFormat collection |		parcelFormat := CodeWriter fileFormat.	includeSources := InputState default shiftDown not.	needsSnapshot := false.	aFilename isNil 		ifTrue: 			[| d | 			d := self class defaultOutputDirectory.			collection := aCollection collect: [:each | each -&gt; (d construct: (self class parcelFileOf: each))]]		ifFalse: [collection := aCollection collect: [:each | each -&gt; aFilename]].	Cursor write 		showWhile: 			[collection 				do: [:each | needsSnapshot := needsSnapshot | 						(self							save: each key							as: each value							withSources: includeSources							format: parcelFormat)]].	needsSnapshot ifTrue: [self doSnapshot]</body><body package="Aragon.Examples">selectedParcel	^selection isString ifFalse: [selection]</body><body package="Aragon.Examples">selectedParcels	^selection isString		ifTrue:			[selection ~~ #root				ifTrue: 					[| pattern | pattern := selection , '.*'.					Parcel parcels select: [:each | pattern match: each name]]				ifFalse: [Parcel parcels]]		ifFalse: [Set with: selection]</body><body package="Aragon.Examples">setEnablement	self		enableAll: #(new)		inMenu: (builder menuAt: #parcelMenu)		when: selection class ~~ Parcel &amp; selection notNil.	self		enableAll: #(saveParcel saveAs browseParcel  unloadParcel emptyParcel loadSources)		inMenu: (builder menuAt: #parcelMenu)		when: selection class == Parcel.	self		enableAll: #(removeParcel renameParcel saveParcel  unloadParcel)		inMenu: (builder menuAt: #parcelMenu)		when: selection ~~ nil.</body><body package="Aragon.Examples">showStatus: aString</body><body package="Aragon.Examples">submenu: anId	^((builder menuAt: #menuBar) atNameKey: anId) submenu</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>menu commands</category><body package="Aragon.Examples">addParcelNamed: aString to: aFolder	| newName parcel |	newName := aFolder subject == #root 		ifTrue: [aString] 		ifFalse: [aFolder subject , '.' , aString].	(Parcel parcelNamed: newName) notNil		ifTrue: 			[Dialog warn: 'A parcel with this name allready exists'.			^self].	parcel := Parcel createParcelNamed: newName.	parcels selection: parcel.</body><body package="Aragon.Examples">browseChanges	| changeSet name |		(name := parcels selectedNode subject) isString ifFalse: [name := name name].	changeSet := (Smalltalk includesKey: #NamedChangeSet)		ifTrue: [(Smalltalk at: #NamedChangeSet) withName: name asSymbol]		ifFalse: [ChangeSet new].	self selectedParcels do: [:each | self class			addChangesFrom: ChangeSet current			to: changeSet			accordingTo: each].	(Aragon at: #ChangeSetBrowser ifAbsent: [^changeSet inspect])		openOnChangeSet: changeSet title: name</body><body package="Aragon.Examples">browseOverriddenExtensions	"Browse all methods in the currently selected parcel that are 	overrides of previous versions. 	To allow comparison of the old and the new open up a 	ChangeList switched to conflicts 	containing the original versions. To allow parcelling, open up a 	MethodListParcelBrowser."	| overrides currentParcel |	currentParcel := self selectedParcel.	(overrides := Override overriddenByComponent: currentParcel) isEmpty 		ifTrue: [^Dialog warn: 'No overridden extensions'].	(OverrideList new) 		listName: 'Definitions overridden by ' , currentParcel name , ' parcel'; 		checkSystem: #code; 		showConflicts: true; 		openOn: overrides."	current := OrderedCollection new.	overrides do: [:over | over isForMethod 		ifTrue: [current add: (MethodDefinition class: over owner selector: over selector)]].	current isEmpty 		ifFalse: [AragonStuff methodCollector			openListBrowserOn: current asSortedCollection			label: 'Current method overrides defined in ' , currentParcel name			initialSelection: nil]"</body><body package="Aragon.Examples">browseParcel	(selection isKindOf: Parcel) ifFalse: [^#toggleExpand].	NewParcelBrowser browseParcel: selection.</body><body package="Aragon.Examples">changesIntoParcel	(Dialog confirm: 'Do you want to add the current change set to the selected parcel?') ifFalse: [^self].	selection addChangeSet: ChangeSet current</body><body package="Aragon.Examples">emptyParcel	(Dialog confirm: 'Really empty the parcel?')		ifTrue: [selection empty]</body><body package="Aragon.Examples">fileIntoParcel	"Ask the user for a Filename to file into this parcel."	| fname filename |	filename := self class sourceFileOf: selection.	fname := Dialog requestFileName: 'Enter the path of the source file to read from:' default: filename.	(fname isNil or: [fname isEmpty]) ifTrue: [^self].	selection fileIntoFrom: fname</body><body package="Aragon.Examples">inspectParcel	selection isString		ifTrue: 			[self selectedParcels do: [:each | each inspect]]		ifFalse: [selection inspect]</body><body package="Aragon.Examples">loadParcel	| fname newParcel |	fname := self class defaultInputDirectory.	fname := (fname construct: '*.pcl') asString.	fname := Dialog requestFileName: 'Enter the path of the parcel file to read from:' default: fname.	(fname isNil or: [fname isEmpty]) ifTrue: [^self].	newParcel := Parcel loadParcelFrom: fname.	self invalidateAndSelect: newParcel</body><body package="Aragon.Examples">loadSources	| fname |	fname := self class defaultInputDirectory construct: (self class sourceFileOf: selection).	fname definitelyExists ifFalse: [		fname := Dialog requestFileName: 'Enter the path of the source file to read from:' default: '*.st'.		(fname isNil or: [fname isEmpty]) ifTrue: [^self]].	fname asFilename readStream fileIn</body><body package="Aragon.Examples">newFolder	| newFolder parent head newNode |	newFolder := Dialog request: 'Enter a name for the new folder' initialAnswer: 'New Folder'.	newFolder isEmpty ifTrue: [^self].	(parent := parcels selectedNode) isNil ifTrue: [parent := parcels list root].	(parent isKindOf: Parcel) ifTrue: [parent := parent parent].	head := parent subject == #root ifTrue: [''] ifFalse: [parent subject, (String with: self class parcelSeparator)].	newNode := (AragonTreeNode for: head, newFolder label: newFolder) children: #().	parcels list expand: parent; add: newNode asChildOf: parent.	parcels selection: newNode</body><body package="Aragon.Examples">newParcel	| folder aString |	aString := Dialog request: 'Enter a name for the new parcel' initialAnswer: 'New Parcel'.	aString isEmpty ifTrue: [^self].	(folder := parcels selectedNode) isNil 		ifTrue: [folder := parcels list rootNode] 		ifFalse: [selection isString ifFalse: [folder := folder parent]].	self addParcelNamed: aString to: folder.</body><body package="Aragon.Examples">removeParcel	| node |	node := parcels selectedNode.	node type == #folder 		ifTrue:			[node hasChildren				ifTrue: 					[Dialog warn: 'Only &lt;c:blue&gt;empty folders&lt;/c&gt; can be removed!' asRichText. 					^self]]		ifFalse:			[(Dialog confirm: 'Do you really want to &lt;c:red&gt;remove&lt;/c&gt; the selected parcel?' asRichText					initialAnswer: false)				ifFalse: [^self].				Parcel destroyParcelNamed: selection name]."	self privateRemove: node."</body><body package="Aragon.Examples">renameParcel	| newName node head |	node := parcels selectedNode.	newName := self requestParcelName: 'Rename ' , node type , ' to:' initialAnswer: node displayString.	newName isEmpty ifTrue: [^self].	head := node parent subject == #root ifTrue: [''] ifFalse: [node parent subject , (String with: self class parcelSeparator)].	self rename: node to: head, newName.	selection := node subject.	node displayString: newName.	parcels list changed: #at: with: parcels selectionIndex.</body><body package="Aragon.Examples">saveAs	| fname |	fname := self class defaultOutputDirectory construct: (self class parcelFileOf: selection).	fname := Dialog requestFileName: 'Enter a filename to write the parcel to:' default: fname asString.	(fname isNil or: [fname isEmpty]) ifTrue: [^self].	(('*.*' match: fname asFilename tail) not or: ['*.st' match: fname])		ifTrue: [fname := self changeExtensionIn: fname to: '.pcl'].	self saveParcels: (Array with: selection) on: fname.</body><body package="Aragon.Examples">saveParcel	self saveParcels: self selectedParcels on: nil.</body><body package="Aragon.Examples">unloadParcel	(Dialog confirm: 'Do you really want to uninstall and \remove the selected parcel(s)?' withCRs 			initialAnswer: false)		ifFalse: [^self].	Parcel removeDependent: self.	[(selection isKindOf: Parcel)		ifTrue: [Parcel unloadParcelNamed: selection name]		ifFalse: 			[| pattern |			pattern := selection , '.*'.			Parcel parcels do: [:each | (pattern match: each name)					ifTrue: [Parcel unloadParcelNamed: each name]]]] 	valueNowOrOnUnwindDo: [Parcel addDependent: self].	self privateRemove: parcels selectedNode.</body><body package="Aragon.Examples">updateView	parcels list invalidateAndReExpand.	parcels selection: selection.	self selectionChanged.</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>drag&amp;drop</category><body package="Aragon.Examples">canDragFrom: aController	^parcels selectedNode ~~ nil</body><body package="Aragon.Examples">canDropFrom: aDragContext	^#(parcel category class classOrNamespace protocol selector selectorOrStatic) includes: aDragContext key</body><body package="Aragon.Examples">canDropFrom: aDragContext onto: target 	^aDragContext key == #parcel		ifTrue: 			[| source |			source := aDragContext sourceData clientData.			((target subject isKindOf: Parcel)				or: [target == source or: [target == source parent]]) not]		ifFalse: [true]"		ifFalse: [target subject isKindOf: Parcel]"</body><body package="Aragon.Examples">dragFrom: aController 	"Drag the currently selected file(s)."	self startDragging: parcels selectedNode from: aController key: #parcel</body><body package="Aragon.Examples">dropCategory: info onto: target 	| category parcel s env org |	category := info at: #category ifAbsent: [^#dropEffectNone].	env := info at: #environment ifAbsent: [^#dropEffectNone].	org := env organization.	parcel := target type == #parcel 		ifTrue: [target subject]		ifFalse: [self addParcelNamed: 'Test' to: target. selection].	s := category, '*'.	(org categories select: [:cat | s match: cat])		do: [:cat | (org listAtCategoryNamed: cat)			do: [:key || binding | 				((binding := env bindingFor: key asSymbol) value isKindOf: ExternalDictionary) 					ifFalse: [binding isForClass 						ifTrue: [parcel addEntiretyOfClass: binding value]						ifFalse: [parcel addName: binding key in: env]]]].	^#dropEffectMove</body><body package="Aragon.Examples">dropClass: info onto: target 	| aClass parcel |	aClass := info at: #class.	parcel := target type == #parcel 		ifTrue: [target subject]		ifFalse: [self addParcelNamed: aClass name to: target. selection].	parcel addEntiretyOfClass: aClass.	^#dropEffectCopy.</body><body package="Aragon.Examples">dropEnterWith: aDragContext 	| widget dictionary |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	widget := (builder componentAt: #parcels) widget.	dictionary := IdentityDictionary new.							"V2 Step 3"	dictionary at: #widget put: widget.							"V2 Step 4"	dictionary at: #targetIndex put: widget targetIndex.			"V2 Step 4"	dictionary at: #hasFocus put: widget hasFocus.				"V2 Step 4"	aDragContext dropTarget clientData: dictionary.			 	"V2 Step 5"	widget hasFocus: true.									"V2 Step 6"	^#dropEffectMove</body><body package="Aragon.Examples">dropExitWith: aDragContext 	| widget dictionary |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	dictionary := aDragContext dropTarget clientData.	widget := dictionary at: #widget.	widget targetIndex: (dictionary at: #targetIndex).	widget hasFocus: (dictionary at: #hasFocus).	aDragContext dropTarget clientData: nil.	^#dropEffectNone</body><body package="Aragon.Examples">dropOverWith: aDragContext 	| treeView target |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	treeView := aDragContext dropTarget clientData at: #widget.	target := parcels list nodeAt: treeView targetIndex.	treeView showDropFeedbackIn: aDragContext allowScrolling: true.	(self canDropFrom: aDragContext onto: target) ifFalse: [^#dropEffectNone].	^#dropEffectMove</body><body package="Aragon.Examples">dropParcel: source onto: target 	parcels list expand: target.	(parcels list) remove: source; add: source asChildOf: target.	parcels selection: source subject.	self rename: source to: (target subject == #root			ifTrue: ['']			ifFalse: [target subject , (String with: self class parcelSeparator)])			, source displayString.	selection := source subject</body><body package="Aragon.Examples">dropProtocol: clientData onto: target 	| aClass protocol selectors |	aClass := clientData at: #class ifAbsent: [^#dropEffectNone].	(clientData at: #meta ifAbsent: [^#dropEffectNone]) == true ifTrue: [aClass := aClass class].	protocol := clientData at: #protocol ifAbsent: [^#dropEffectNone].	selectors := aClass organization listAtCategoryNamed: protocol.	selectors isEmpty ifTrue: [^#dropEffectNone].	target subject addSelectors: selectors forClass: aClass.	^#dropEffectMove.</body><body package="Aragon.Examples">dropSelector: clientData onto: target 	| aClass selectors |	aClass := clientData at: #class ifAbsent: [^#dropEffectNone].	selectors := clientData at: #selector ifAbsent: [^#dropEffectNone].	selectors isSymbol ifTrue: [selectors := List with: selectors].	target subject addSelectors: selectors forClass: aClass.	^#dropEffectMove</body><body package="Aragon.Examples">dropWith: aDragContext 	| treeView target |	(self canDropFrom: aDragContext) ifFalse: [^#dropEffectNone].	treeView := aDragContext dropTarget clientData at: #widget.	target := parcels list nodeAt: treeView targetIndex.	^(self canDropFrom: aDragContext onto: target)		ifTrue: 			[| source |			source := aDragContext sourceData clientData.			self				perform: (DropHandlers at: aDragContext key)				with: source				with: target]		ifFalse: [self dropExitWith: aDragContext]</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>initialize-release</category><body package="Aragon.Examples">initialize	super initialize.	self initializeParcels.</body><body package="Aragon.Examples">initializeParcels	parcels := SelectionInTree with: TreeAdaptor new.	parcels selectionIndexHolder onChangeSend: #selectionChanged to: self.	(parcels list)		childrenBlock: 			[:s1 | 			| pattern set folders leafs i0 answer |			s1 == #root				ifTrue:	[i0 := 1.			pattern := '*']				ifFalse:	[i0 := s1 size + 2.	pattern := s1 , '.*'].			set := Set new.			folders := SortedCollection new.			leafs := SortedCollection new.			(Parcel parcels select: [:x | pattern match: x name]) do: 				[:s2 | 				| i1 label |				(i1 := s2 name indexOfSubCollection: '.' startingAt: i0) == 0					ifTrue: [leafs add: ((Parcel parcelNamed: s2 name) asTreeNode									type: #parcel; 									hasChildren: false;									displayString: (s2 name copyFrom: i0 to: s2 name size))]					ifFalse: 						[i1 := i1 - 1.						label := s2 name copyFrom: i0 to: i1.						(set includes: label)							ifFalse: [folders add: (AragonTreeNode for: (s2 name copyFrom: 1 to: i1) label: (set add: label))]]].			(answer := OrderedCollection new) addAll: folders.			s1 == #root 				ifTrue: 					[| node | node := 'Others' asTreeNode icon: (AragonIcon named: #folder2 color: #paleRed).					node children: leafs.					answer addLast: node]				ifFalse: [answer addAll: leafs].			answer];		root: (AragonTreeNode for: #root label: '[All Parcels]'); 		expand: parcels list rootNode</body><body package="Aragon.Examples">postBuildWith: aBuilder	| list myImageList |	list := (builder componentAt: #parcels) widget.	myImageList := IdentityDictionary new		add: #folder	-&gt;	(AragonIcon named: #folder2 color: ColorValue royalBlue asHiliteColor);		add: #parcel	-&gt;	(AragonIcon named: #package color: #paleRed);	yourself.	list imageList: myImageList.	list  textStyle: ((Fonts styleFrom: #(Helvetica italic 15)) lineGrid: 15).	self setEnablement.</body><body package="Aragon.Examples">postOpenWith: aBuilder 	Parcel addDependent: self.	(self class inSiena and: [aBuilder == self builder])		ifTrue: [self class defaultOutputDirectory = self class defaultInputDirectory 			ifTrue: [self editOptions]].	^super postOpenWith: aBuilder</body><body package="Aragon.Examples">selectParcel: aParcel	| tokens t |	tokens := self class pathOf: aParcel.	t := tokens first.	tokens := (OrderedCollection with: t) addAll: ((2 to: tokens size -1) collect: [:i | t := t, '.', (tokens at: i)]); yourself.	parcels list expandPath: tokens.	parcels selection: aParcel</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>settings dialog</category><body package="Aragon.Examples">editOptions	| dialog indir outdir |	indir := self class defaultInputDirectory asString asValue.	outdir := self class defaultOutputDirectory asString asValue.	dialog := SimpleDialog new.	dialog builder		aspectAt: #defaultInputDirectory put: indir;		aspectAt: #defaultOutputDirectory put: outdir;		actionAt: #browseFile1 put: [| f |			f := Dialog requestDirectory: 'Select a directory' default: indir value.			f isEmpty ifFalse: [indir value: f asFilename asString]];		actionAt: #browseFile2 put: [| f |			f := Dialog requestDirectory: 'Select a directory' default: outdir value.			f isEmpty ifFalse: [outdir value: f asFilename asString]];		yourself.	(dialog openFor: self interface: #settingsSpec) 		ifTrue: 			[self class defaultInputDirectory: indir value.			self class defaultOutputDirectory: outdir value]</body><body package="Aragon.Examples">requestFileName: initialAnswer 	| aspect dialog |	aspect := (initialAnswer isNil ifTrue: [''] ifFalse: [initialAnswer asString]) asValue.	dialog := SimpleDialog new.	dialog builder aspectAt: #filename put: aspect.	dialog builder actionAt: #browseFile		put: 			[| fname |			fname := Dialog requestDirectory: 'Select a directory' default: aspect value.			fname isEmpty ifFalse: [aspect value: fname asFilename asString]].	^(dialog openFor: self interface: #fileRequesterSpec)		ifTrue: [aspect value isEmpty ifFalse: [aspect value]]</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>aspects</category><body package="Aragon.Examples">message	^message isNil		ifTrue:			[message := 'Specify the default input and output directories. The default input directory denotes the default location to read parcels from. The default output directory is used as the default location to store parcels to. It is strongy recommended to select different directories.' asText allBold asValue]		ifFalse:			[message]</body><body package="Aragon.Examples">parcels	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^parcels</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>updating</category><body package="Aragon.Examples">update: anAspectSymbol with: aParameter from: aSender 	#parcels == anAspectSymbol ifTrue: [self ~~ aSender ifTrue: [^self updateView]].	#clearUndoState == anAspectSymbol ifTrue: [self ~~ aSender ifTrue: [^self updateView]].	^super		update: anAspectSymbol		with: aParameter		from: aSender</body></methods><methods><class-id>Aragon.ParcelBrowser</class-id> <category>notify</category><body package="Aragon.Examples">noticeOfWindowClose: aWindow	Parcel removeDependent: self.	SoleInstance := nil.	^super noticeOfWindowClose: aWindow</body><body package="Aragon.Examples">selectionChanged	selection := self parcels selection.	selection class == Parcel		ifTrue: 			[| info |			info := WriteStream on: String new.			info				nextPutAll: selection definedClasses size printString;				nextPutAll: ' defined, '.			info				nextPutAll: selection extendedClasses size printString;				nextPutAll: ' extended'.			selection isDirty ifTrue: [info nextPutAll: ' (has changes)'].			self showStatus: info contents]		ifFalse: [self showStatus: ''].	builder window displayPendingInvalidation.	self setEnablement</body><body package="Aragon.Examples">showHelpFor: aController	self showStatus: (HelpTexts at: aController view container container spec name)</body></methods><methods><class-id>Aragon.ParcelBrowser class</class-id> <category>resources</category><body package="Aragon.Examples">browseIcon	^OpaqueImage figure: self browseImage shape: self browseShape</body><body package="Aragon.Examples">folderIcon	^AragonIcon named: #folder2 color: ColorValue royalBlue asHiliteColor</body><body package="Aragon.Examples">inspectIcon	^OpaqueImage figure: self inspectImage shape: self inspectShape</body><body package="Aragon.Examples">menuBar	^self inSiena		ifTrue: [self menuBar30]		ifFalse: [self menuBar25]</body><body package="Aragon.Examples">openIcon	^OpaqueImage figure: self openImage shape: self openShape</body><body package="Aragon.Examples">parcelIcon	^AragonIcon named: #package color: #paleRed</body><body package="Aragon.Examples">parcelMenu	^self inSiena		ifTrue: [self parcelMenu30]		ifFalse: [self parcelMenu25]</body><body package="Aragon.Examples">saveIcon	^OpaqueImage figure: self saveImage shape: self saveShape</body></methods><methods><class-id>Aragon.ParcelBrowser class</class-id> <category>utils</category><body package="Aragon.Examples">addChangesFrom: changeSet1 to: changeSet2 accordingTo: aParcel 	| classChanges methodChanges |	classChanges := changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'classChanges').	methodChanges := changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'methodChanges').	aParcel definedClasses do: [:each | (Array with: each with: each class)			do: 				[:class | 				| changes |				(changes := classChanges at: class fullName ifAbsent: [nil]) notNil 					ifTrue: [changes do: [:ct | changeSet2 atClass: class add: ct]].				(changes := methodChanges at: class fullName ifAbsent: [nil]) notNil 					ifTrue: [changes keysAndValuesDo: [:selector :ct | changeSet2							perform: (ct , 'Selector:class:') asSymbol							with: selector							with: class]]]].		methodChanges copy		keysAndValuesDo: 			[:className :changes || class selectors | 			selectors := aParcel selectorsAt: (class := changeSet1 classNamed: className).			selectors isEmpty ifFalse:					[changes						keysAndValuesDo: [:selector :ct | (selectors includes: selector) 							ifTrue: 								[changeSet2									perform: (ct , 'Selector:class:') asSymbol									with: selector									with: class]]]].</body><body package="Aragon.Examples">changesOf: aParcel	| answer |	answer := ChangeSet new.	self addChangesFrom: ChangeSet current to: answer accordingTo: aParcel.	^answer</body><body package="Aragon.Examples">hasSources: aParcel	| cl |	CodeWriter fileFormat &gt; 4 ifTrue: [^true].	aParcel isEmpty ifTrue: [^true].	aParcel definedClasses isEmpty		ifFalse: 			[cl := aParcel definedClasses detect: [:c | c selectors isEmpty not or: [c class selectors isEmpty not]] ifNone: [^false].			cl selectors isEmpty ifTrue: [cl := cl class].			^(cl compiledMethodAt: cl selectors asArray first) sourcePointer notNil].	(cl := aParcel extensionMethods) isEmpty ifFalse: [^cl asArray first sourcePointer notNil].	^true</body><body package="Aragon.Examples">headOf: aParcel	| s index |	s := aParcel name.	index := s lastIndexOf: self parcelSeparator.	^index ~~ 0 ifTrue: [s copyFrom: 1 to: index-1] ifFalse: [^''].</body><body package="Aragon.Examples">includeMatchingCategoriesInto: aParcel	| pattern |	pattern := aParcel name , (String with: self parcelSeparator with: $*).	(aParcel definedClasses collect: [:each | each environment]) asSet		do: 			[:nameSpace | 			| organizer categories classes |			organizer := nameSpace organization.			categories := organizer categories select: [:each | each asSymbol = aParcel name asSymbol or: [pattern match: each]].			classes := Set new.			categories do: [:each | classes addAll: ((organizer listAtCategoryNamed: each)						collect: [:cn | nameSpace at: cn asSymbol])].			aParcel addClassesAndAllSelectors: classes.			aParcel addClassesAndAllSelectors: aParcel definedClasses]</body><body package="Aragon.Examples">parcelFileOf: aParcel	| baseName |	baseName := Filename filterFilename: aParcel name.	baseName isString ifFalse:		[baseName := (Filename fromComponents: baseName) asString].	^baseName, Parcel fileExtension</body><body package="Aragon.Examples">pathOf: aParcel	^aParcel name tokensBasedOn: self parcelSeparator</body><body package="Aragon.Examples">sourceFileOf: aParcel	| baseName |	baseName := Filename filterFilename: aParcel name.	baseName isString ifFalse:		[baseName := (Filename fromComponents: baseName) asString].	^baseName, Parcel sourceExtension</body><body package="Aragon.Examples">tailOf: aParcel	| s index |	s := aParcel name.	index := s lastIndexOf: self parcelSeparator.	^index ~~ 0 ifTrue: [s copyFrom: index+1 to: s size] ifFalse: [^s].</body></methods><methods><class-id>Aragon.ParcelBrowser class</class-id> <category>constants</category><body package="Aragon.Examples">defaultInputDirectory	| answer |	(answer := DefaultPaths first) isNil ifTrue: [answer := Parcel searchPathModel value first].	^answer asFilename</body><body package="Aragon.Examples">defaultInputDirectory: aStringOrFilename	DefaultPaths at: 1 put: aStringOrFilename</body><body package="Aragon.Examples">defaultOutputDirectory	| answer |	(answer := DefaultPaths last) isNil ifTrue: [answer := self defaultInputDirectory].	^answer asFilename</body><body package="Aragon.Examples">defaultOutputDirectory: aStringOrFilename	DefaultPaths at: 2 put: aStringOrFilename</body><body package="Aragon.Examples">inSiena	^CodeWriter fileFormat &gt; 4.</body><body package="Aragon.Examples">parcelSeparator	^$.</body></methods><methods><class-id>Aragon.ParcelBrowser class</class-id> <category>enhanced - resource accessing</category><body package="Aragon.Examples">applicationName	^'Parcel Browser'</body><body package="Aragon.Examples">defaultIconName	^'@install.gif'</body></methods><methods><class-id>Aragon.ParcelBrowser class</class-id> <category>class initialization</category><body package="Aragon.Examples">initialize	"self initialize"	DefaultPaths := Array new: 2.	HelpTexts := IdentityDictionary new		at: #browseParcel	put: 'Browse selected parcel';		at: #inspectParcel	put: 'Inspect selected parcel';		at: #loadParcel		put: 'Load a parcel from disk';		at: #saveParcel		put: 'Save selected parcel(s) in default location';	yourself.	DropHandlers := IdentityDictionary new		at: #parcel		put: #dropParcel:onto:;		at: #category		put: #dropCategory:onto:;		at: #class		put: #dropClass:onto:;		at: #protocol		put: #dropProtocol:onto:;		at: #selector		put: #dropSelector:onto:;		at: #selectorOrStatic		put: #dropSelector:onto:;	yourself.</body></methods><methods><class-id>Aragon.NewParcelBrowser</class-id> <category>private</category><body package="Aragon.Examples">setEnablement	self		enableAll: #(new)		inMenu: (builder menuAt: #parcelMenu)		when: selection class ~~ Parcel &amp; selection notNil.	self		enableAll: #( saveAs browseParcel )		inMenu: (self submenu: #packageMenu)		when: selection class == Parcel.	self		enableAll: #(browseParcel  emptyParcel loadSources )		inMenu: (self submenu: #editMenu)		when: selection class == Parcel.	self		enableAll: #( fileIntoParcel changesIntoParcel )		inMenu: (self submenu: #toolsMenu)		when: selection class == Parcel.	self		enableAll: #(saveParcel saveAs browseParcel  unloadParcel emptyParcel loadSources)		inMenu: (builder menuAt: #parcelMenu)		when: selection class == Parcel.	self		enableAll: #(removeParcel saveParcel unloadParcel)		inMenu: (self submenu: #packageMenu)		when: selection ~~ nil.	self		enableAll: #(renameParcel inspectParcel browseChanges )		inMenu: (self submenu: #editMenu)		when: selection ~~ nil.	self		enableAll: #(removeParcel renameParcel saveParcel  unloadParcel)		inMenu: (builder menuAt: #parcelMenu)		when: selection ~~ nil.	#(browseParcel) do: [:each | (builder componentAt: each) isEnabled: selection class == Parcel].	#(saveParcel) do: [:each | (builder componentAt: each) isEnabled: selection ~~ nil].</body><body package="Aragon.Examples">showStatus: aString	| w |	w := (builder componentAt: #status) widget.	w labelString: aString.</body></methods><methods><class-id>Aragon.NewParcelBrowser</class-id> <category>initialize-release</category><body package="Aragon.Examples">postBuildWith: aBuilder	super postBuildWith: aBuilder.	aBuilder keyboardProcessor 		keyboardHook: 			[:ev :ctrl | 			(ev keyValue == Character del and: [selection isKindOf: Parcel]) 				ifTrue: [self removeParcel. nil] 				ifFalse: [ev]].	self showStatus: ''</body></methods><methods><class-id>Aragon.NewParcelBrowser class</class-id> <category>interface opening</category><body package="Aragon.Examples">browseParcel: aParcel 		| browser |	browser := self open.	browser invalidateAndSelect: aParcel.</body><body package="Aragon.Examples">open	SoleInstance isNil		ifTrue: [(SoleInstance := self new) open]		ifFalse: [SoleInstance builder window raise].	^SoleInstance</body></methods><methods><class-id>Aragon.FilenameWrapper</class-id> <category>accessing</category><body package="Aragon.Examples">attributesString	^'-----'</body><body package="Aragon.Examples">extension	| s i |	s := self name.	i := s lastIndexOf: $..	^i &gt; 0 ifTrue: [(s copyFrom: i+1 to: s size) asUppercase] ifFalse: ['']</body><body package="Aragon.Examples">fileSize	fileSize isNil ifTrue: [fileSize := filename fileSize].	^fileSize</body><body package="Aragon.Examples">filename	^filename</body><body package="Aragon.Examples">filename: aFilename	filename := aFilename</body><body package="Aragon.Examples">isHidden	isHidden isNil ifTrue: [isHidden := filename isReadable not].	^isHidden</body><body package="Aragon.Examples">isSystem	^false</body><body package="Aragon.Examples">modified	modified isNil		ifTrue: 			[modified := filename dates at: #modified.			modified := Timestamp fromDate: modified first andTime: modified last].	^modified</body><body package="Aragon.Examples">name	name == nil ifTrue: [name := filename tail].	^name</body><body package="Aragon.Examples">type	type isNil		ifTrue: 			[type := self isDirectory ifTrue: ['   /'] ifFalse: [self extension].			type isEmpty ifTrue: [type := '  ?']].	^type</body></methods><methods><class-id>Aragon.FilenameWrapper</class-id> <category>wrapping</category><body package="Aragon.Examples">asString	^self name</body><body package="Aragon.Examples">isDirectory	^OSErrorHolder errorSignal		handle: [:ex | false]		do: [filename isDirectory]</body></methods><methods><class-id>Aragon.FilenameWrapper</class-id> <category>testing</category><body package="Aragon.Examples">= another	^filename = another filename</body></methods><methods><class-id>Aragon.FilenameWrapper class</class-id> <category>instance creation</category><body package="Aragon.Examples">on: aFilename	^self new filename: aFilename</body></methods><methods><class-id>Aragon.GaugeExample</class-id> <category>aspects</category><body package="Aragon.Examples">gauge1	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	gauge1 isNil ifTrue: [gauge1 := 100 asValue].	^gauge1</body><body package="Aragon.Examples">gauge2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	gauge2 isNil ifTrue: [gauge2 := 0 asValue].	^gauge2</body><body package="Aragon.Examples">progress	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	progress isNil ifTrue: [progress := 0 asValue].	^progress</body></methods><methods><class-id>Aragon.GaugeExample</class-id> <category>actions</category><body package="Aragon.Examples">resetProgress	progress value: 0.</body><body package="Aragon.Examples">simulateProgress	self resetProgress.	0 to: 100 do: [:i | progress value: i. (Delay forMilliseconds: 20) wait]</body></methods><methods><class-id>Aragon.PopupTreeView</class-id> <category>interface opening</category><body package="Aragon.Examples">openInterface: aWindowSpec	self allButOpenInterface: aWindowSpec.	builder window openTransientIn: (InputSensor cursorPoint extent: builder window extent) type: #postedMenu.	builder window displayPendingInvalidation.	self postOpenWith: builder.	^builder"	^self finallyOpenIn: (InputSensor cursorPoint extent: builder window extent) withType: #postedMenu"</body><body package="Aragon.Examples">postBuildWith: aBuilder 	aBuilder keyboardProcessor 		keyboardHook: 			[:ev :ctrl | 			ev keyValue == Character cr ifTrue: [self closeRequest. nil] ifFalse: [			ev keyValue == Character esc ifTrue: [self closeRequest. nil] ifFalse: [			ev]]].</body></methods><methods><class-id>Aragon.World class</class-id> <category>enhanced - stored images</category><body package="Aragon.Examples">searchPathForImages	^Array with: (LogicalFilename named: '$(VISUALWORKS)\contributed\Aragon\Examples\images\figures\')</body></methods><methods><class-id>Aragon.CardViewExample1</class-id> <category>initialize-release</category><body package="Aragon.Examples">initialize	classes := SelectionInList new.	tabs := SelectionInList with: #('Views' 'Controllers' 'Models' 'Application Models').	tabs selectionIndexHolder onChangeSend: #pageChanged to: self.</body></methods><methods><class-id>Aragon.CardViewExample1</class-id> <category>notifications</category><body package="Aragon.Examples">pageChanged	^self pageChangedVariantB</body><body package="Aragon.Examples">pageChangedVariantA	| chosenTab rootClass |	chosenTab := tabs selection.	chosenTab = 'Views' ifTrue: [rootClass := View].	chosenTab = 'Controllers' ifTrue: [rootClass := Controller].	chosenTab = 'Models' ifTrue: [rootClass := Model].	chosenTab = 'Application Models' ifTrue: [rootClass := ApplicationModel].	classes list: rootClass withAllSubclasses</body><body package="Aragon.Examples">pageChangedVariantB	| chosenTab rootClass |	chosenTab := tabs selection.	chosenTab = 'Views' ifTrue: [rootClass := View].	chosenTab = 'Controllers' ifTrue: [rootClass := Controller].	chosenTab = 'Models' ifTrue: [rootClass := Model].	chosenTab = 'Application Models' ifTrue: [rootClass := ApplicationModel].	self classes list: rootClass withAllSubclasses</body></methods><methods><class-id>Aragon.CardViewExample1</class-id> <category>interface opening</category><body package="Aragon.Examples">postOpenWith: aBuilder 	(aBuilder componentAt: #tabs) widget client: self spec: #canvasSpec.	tabs selectionIndex: 1.</body></methods><methods><class-id>Aragon.CardViewExample1</class-id> <category>aspects</category><body package="Aragon.Examples">classes	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^classes</body><body package="Aragon.Examples">tabs	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^tabs</body></methods><methods><class-id>Aragon.CardViewExample1 class</class-id> <category>interface specs</category><body package="Aragon.Examples">windowTitle	^self name</body></methods><methods><class-id>Aragon.SimpleFileBrowser</class-id> <category>notifications</category><body package="Aragon.Examples">selectionChanged	| file |	(file := tree selection) isNil ifTrue: [^self].	Transcript show: file asString; cr.</body></methods><methods><class-id>Aragon.SimpleFileBrowser</class-id> <category>private</category><body package="Aragon.Examples">childrenOf: aDirectory 	| answer |	answer := OrderedCollection new.	aDirectory directoryContents do: 		[:each | 		| file |		(file := aDirectory construct: each) isReadable 			ifTrue: [answer add: ((AragonTreeNode for: file label: each)					isParent: (self isDirectory: file))]].	^answer</body><body package="Aragon.Examples">childrenOfRoot	^(Filename volumes select: [:x | x asFilename exists]) 		collect: [:each | (AragonTreeNode for: each asFilename label: each) type: #disk]</body><body package="Aragon.Examples">isDirectory: aFilename 	^OSErrorHolder errorSignal 		handle: [:ex | false]		do: [aFilename isDirectory]</body></methods><methods><class-id>Aragon.SimpleFileBrowser</class-id> <category>initialize-release</category><body package="Aragon.Examples">initialize	| treeAdaptor root |	root := AragonTreeNode for: #root label: 'Volumes'.	root children: self childrenOfRoot.	treeAdaptor := TreeAdaptor new		childrenBlock: 			[:aDirectory | self childrenOf: aDirectory]; 		root: root;		expandAt: 1.	tree := SelectionInList with: treeAdaptor</body></methods><methods><class-id>Aragon.SimpleFileBrowser</class-id> <category>aspects</category><body package="Aragon.Examples">tree	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	^tree</body></methods><methods><class-id>Aragon.AragonStuff class</class-id> <category>utilities</category><body package="Aragon.Examples">allReferencesTo: aSymbol	^self methodCollector allReferencesTo: aSymbol</body><body package="Aragon.Examples">browse: aString inContext: aClassOrMethodOrNil	| symbol |	(symbol := Symbol findInterned: aString) isNil 		ifTrue: [^Screen default ringBell].	aClassOrMethodOrNil isBehavior		ifTrue: 			[| targetClass |  targetClass := aClassOrMethodOrNil.			(targetClass allInstVarNames includes: aString)				ifTrue: [^self browseAllAccessesTo: aString within: targetClass].			targetClass isMeta ifTrue: [targetClass := targetClass soleInstance].			(targetClass allClassVarNames includes: aString asSymbol)				ifTrue: [^self browseAllAccessesToClassVar: aString within: targetClass]].	Root withAllNameSpacesDo: [:ns | ns name = symbol		ifTrue:  [^self browseNameSpace: ns]].	SystemUtils allBehaviorsDo: [:cls | cls name = symbol		ifTrue:  [^self browseClass: cls]].	SystemUtils allBehaviorsDo: [:cls | (cls includesSelector: symbol)		ifTrue:  [^self browseImplementorsAndSendersOf: symbol]].	self browseReferencesTo: symbol</body><body package="Aragon.Examples">browseAllAccessesTo: instvar within: aClass	self browseAllAccessesTo: instvar within: aClass accessType: #readWrite</body><body package="Aragon.Examples">browseAllAccessesTo: instvar within: aClass accessType: aSymbol	| mc |	mc := self methodCollector.	mc browseSelect:			(mc searchBehaviorHierarchy: aClass)			&amp; (mc instVarUse: instvar asString access: aSymbol).</body><body package="Aragon.Examples">browseAllAccessesToClassVar: classvar within: aClass 	| binding |	(binding := aClass localBindingFor: classvar asSymbol) notNil		ifTrue: 			[| mc |			mc := self methodCollector.			mc browseSelect: (mc searchClassHierarchy: aClass)					&amp; (mc referencesTo: binding)]</body><body package="Aragon.Examples">browseAllReadAccessesTo: instvar within: aClass	self browseAllAccessesTo: instvar within: aClass accessType: #read</body><body package="Aragon.Examples">browseAllWriteAccessesTo: instvar within: aClass	self browseAllAccessesTo: instvar within: aClass accessType: #write</body><body package="Aragon.Examples">browseClass: aClass 	| navigator |	navigator := (Refactory.Browser.RefactoringBrowser openOnEnvironment: (Refactory.Browser.BrowserEnvironment new forClasses: (Array with: aClass))) navigator.	aClass isMeta ifTrue: [navigator metaHolder value: true].</body><body package="Aragon.Examples">browseClass: aClass method: aSelector	Refactory.Browser.RefactoringBrowser openOnEnvironment: (Refactory.Browser.BrowserEnvironment new forClass: aClass selectors: (Array with: aSelector))</body><body package="Aragon.Examples">browseClass: aClass protocol: aProtocol	Refactory.Browser.RefactoringBrowser openOnEnvironment: (Refactory.Browser.BrowserEnvironment new forClass: aClass protocols: (Array with: aProtocol))</body><body package="Aragon.Examples">browseImplementorsAndSendersOf: aSelector 	| mc |	(mc := self methodCollector)		openListBrowserOn: 			(mc allImplementorsOf: aSelector), 			(mc allReferencesTo: aSelector)		label: 'Implementors/Senders of #' , aSelector		initialSelection: aSelector</body><body package="Aragon.Examples">browseImplementorsOf: aSymbol	| mc |	(mc := self methodCollector)		browseSelect: (mc implementorsOf: aSymbol asSymbol)</body><body package="Aragon.Examples">browseNameSpace: aNameSpace	SmalltalkWorkbench browseBindingReference: (aNameSpace fullyQualifiedReference)</body><body package="Aragon.Examples">browseReferencesTo: aSymbol	self methodCollector browseAllReferencesTo: aSymbol asSymbol.</body><body package="Aragon.Examples">explore	| examplesBrowser |	examplesBrowser := Aragon at: #AragonExamplesBrowser ifAbsent: [nil].	examplesBrowser notNil		ifTrue: [examplesBrowser open]		ifFalse: [^Dialog warn: 'Examples Browser isn''t loaded in current image anymore.']</body><body package="Aragon.Examples">methodCollector	^MethodCollector new browser: Refactory.Browser.RefactoringBrowser new; yourself</body><body package="Aragon.Examples">openSystemBrowser	| browserClass |	(browserClass := Smalltalk at: #Browser ifAbsent: []) notNil		ifTrue: 			[^(browserClass new) open; yourself].</body></methods><methods><class-id>Aragon.ClassBrowserHistory</class-id> <category>accessing</category><body package="Aragon.Examples">associations	^associations</body><body package="Aragon.Examples">list	^listHolder value</body><body package="Aragon.Examples">listHolder	^listHolder</body><body package="Aragon.Examples">selection	^selectionHolder value</body><body package="Aragon.Examples">selectionHolder	^selectionHolder</body></methods><methods><class-id>Aragon.ClassBrowserHistory</class-id> <category>initialize-release</category><body package="Aragon.Examples">initialize	GlobalHistory isNil		ifTrue: 			[listHolder := List new asValue.			associations := IdentityDictionary new]		ifFalse: 			[listHolder := GlobalHistory list asValue.			associations := GlobalHistory associations].	selectionHolder := nil asValue.</body></methods><methods><class-id>Aragon.ClassBrowserHistory</class-id> <category>history</category><body package="Aragon.Examples">cleanUp	| s |	s := self selection.	listHolder value: (self list select: [:each | each asSymbol asQualifiedReference isDefined]).	associations keys do: [:each | each asSymbol asQualifiedReference isDefined ifFalse: [associations removeKey: each]].	self selection: s.</body><body package="Aragon.Examples">selection: aValue	selectionHolder value: aValue</body><body package="Aragon.Examples">selectionIndex	^self list indexOf: selectionHolder value</body><body package="Aragon.Examples">selectionIndex: anIndex	selectionHolder value: (self list at: anIndex)</body><body package="Aragon.Examples">store	GlobalHistory := self.	GlobalHistory associations removeKey: #categories ifAbsent: []</body></methods><methods><class-id>Aragon.SimpleClassBrowser</class-id> <category>menu commands</category><body package="Aragon.Examples">addEntry	| newEntry selectedEntry |	selectedEntry := classes selection.	newEntry := Dialog request: 'Enter a name for the new sub entry to ', selectedEntry displayString, ':'.	newEntry isEmpty ifTrue: [^self].	newEntry := Smalltalk at: newEntry ifAbsent: [newEntry].	classes list add: newEntry asChildOf: selectedEntry.	classes selection: newEntry.</body><body package="Aragon.Examples">collapse	classes collapseSelectedNode</body><body package="Aragon.Examples">expand	classes expandSelectedNode</body><body package="Aragon.Examples">expandAll	classes list expandAll</body><body package="Aragon.Examples">findClass	| className aClass |	(className := Dialog request: 'Find class:') isEmpty ifTrue: [^self].	aClass := Smalltalk at: className ifAbsent: [^Screen default ringBell].	classes list expandPath: aClass withAllSuperclasses reverse.	classes selection: aClass</body><body package="Aragon.Examples">removeEntry	"classes list removeAt: classes selectionIndex."	classes list remove: classes selection.</body><body package="Aragon.Examples">toggleExpand	classes toggleExpandSelectedNode</body><body package="Aragon.Examples">toggleExpandSubtree	classes list toggleExpandSubtreeAt: classes selectionIndex.</body></methods><methods><class-id>Aragon.SimpleClassBrowser</class-id> <category>aspects</category><body package="Aragon.Examples">classes	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^classes</body></methods><methods><class-id>Aragon.SimpleClassBrowser</class-id> <category>actions</category><body package="Aragon.Examples">action"	classes selectedNode transcribe.	classes selection transcribeCr"</body></methods><methods><class-id>Aragon.SimpleClassBrowser</class-id> <category>initialize-release</category><body package="Aragon.Examples">initialize	super initialize.	classes := SelectionInTree with: 		(MultipleParentTreeAdaptor new 			childrenBlock: [:aClass | aClass subclasses asSortedCollection: [:a :b | a name &lt; b name]];			root: Object asIdentityTreeNode).	classes list expandAt: 1.</body></methods><methods><class-id>Aragon.CardViewExample2</class-id> <category>initialize-release</category><body package="Aragon.Examples">initialize	tabs := SelectionInList with: 		(List new			add: 'Views' -&gt; View;			add: 'Controllers' -&gt; Controller;			add: 'Models' -&gt; Model;			add: 'Application Models' -&gt; ApplicationModel;			add: 'My Examples' -&gt; #myExamples;		yourself).	tabs selectionIndexHolder onChangeSend: #pageChanged to: self.	classes := SelectionInList new.</body></methods><methods><class-id>Aragon.CardViewExample2</class-id> <category>notifications</category><body package="Aragon.Examples">pageChanged	| newContents |	newContents := tabs selection value == #myExamples				ifTrue: [Aragon keys select: [:each | 'CardViewExample*' match: each]]				ifFalse: [tabs selection value withAllSubclasses collect: [:each | each name]].	classes list: newContents asSortedCollection</body></methods><methods><class-id>Aragon.ChangeSetBrowser</class-id> <category>private</category><body package="Aragon.Examples">changeSetName	| cs |	^(cs := changeSet value) class == ChangeSet		ifTrue: ['Default']		ifFalse: [cs name]</body><body package="Aragon.Examples">classNamed: aString 	aString isBehavior ifTrue: [^aString].	^('* class' match: aString)		ifTrue: [(aString copyFrom: 1 to: aString size - 6) asQualifiedReference value class]		ifFalse: [aString asQualifiedReference value]</body><body package="Aragon.Examples">getAllChildren	| cs |	(cs := self changeSet value) isNil ifTrue: [^#()].	^OrderedCollection new		addAll: (self getClassChangesIn: cs);		addAll: (self getObjectRemovesIn: cs);		addAll: (self getOtherObjectChangesIn: cs);		addAll: (self getMethodChangesIn: cs);	yourself</body><body package="Aragon.Examples">getChangesIn: aChangeSet from: aCollectionOfChanges type: aSymbol label: aString	| cs classes node |	cs := aChangeSet.	classes := aCollectionOfChanges select: [:class | cs atClass: class includes: aSymbol].	classes isEmpty ifTrue: [^#()].	node := (IdentityTreeNode for: #rename label: aString) type: #category.	node children: (aSymbol == #rename			ifTrue: [classes collect: [:each | each asIdentityTreeNode type: #class; hasChildren: false; displayString: (cs oldNameFor: each), ' -&gt; ' , each name]]			ifFalse: [classes collect: [:each | each asIdentityTreeNode type: #class; hasChildren: false]]).	^Array with: node</body><body package="Aragon.Examples">getClassChangesIn: aChangeSet	| classChanges |	classChanges := aChangeSet changedClasses asSortedCollection: [:c1 :c2 | c1 name &lt;  c2 name].	^OrderedCollection new		addAll: (self getChangesIn: aChangeSet from: classChanges type: #add label: 'Added classes');		addAll: (self getChangesIn: aChangeSet from: classChanges type: #rename label: 'Renamed classes');		addAll: (self getChangesIn: aChangeSet from: classChanges type: #change label: 'Redefined classes');		addAll: (self getChangesIn: aChangeSet from: classChanges type: #comment label: 'Classes with changed comment');		addAll: (self getChangesIn: aChangeSet from: classChanges type: #reorganize label: 'Re-organized classes');	yourself</body><body package="Aragon.Examples">getMethodChangesIn: aChangeSet	| index classes node sorted imageList |	(index := ChangeSet instVarIndexFor: 'methodChanges') == 0 ifTrue: [index := ChangeSet instVarIndexFor: 'objectChanges'].	classes := aChangeSet instVarAt: index.	classes isEmpty ifTrue: [^#()].	node := (IdentityTreeNode for: 'Classes with changed methods') type: #category.	sorted := SortedCollection new.	imageList := IdentityDictionary new		add: #add		-&gt;	(AragonIcon named: #brick color: #green);		add: #change	-&gt;	(AragonIcon named: #brick color: #royalBlue);		add: #remove	-&gt;	(AragonIcon named: #brick color: #red);	yourself.	classes		keysAndValuesDo: 			[:cName :cChanges || classNode changed mChanges |			mChanges := (cChanges class name == #ChangeGroup) ifTrue: [cChanges methodChanges] ifFalse: [cChanges].			mChanges isEmpty 				ifFalse:					[sorted add: ((classNode := IdentityTreeNode for: cName) type: #class).					changed := SortedCollection new.							mChanges									keysAndValuesDo: [:mSel :mChange | changed add:									(mSel asIdentityTreeNode 											type: #method; 											hasChildren: false; 											icon: (imageList at: mChange))].					classNode children: changed]].	node children: sorted.	^Array with: node</body><body package="Aragon.Examples">getObjectRemovesIn: aChangeSet	| classes node |	(classes := aChangeSet objectRemoves) isEmpty ifTrue: [^#()].	node := (IdentityTreeNode for: #remove label: 'Removed objects') type: #category.	node children: (classes associations collect: [:each | (IdentityTreeNode for: each key) type: each value; hasChildren: false]) asOrderedCollection.	^Array with: node</body><body package="Aragon.Examples">getOtherObjectChangesIn: aChangeSet 	| node |	node := (IdentityTreeNode for: #relocate label: 'Relocated objects') type: #category.	node children: ((aChangeSet objectChanges 		select: [:each | each changes includes: #relocate]) keys asSortedStrings 			collect: [:each | (each asIdentityTreeNode) type: #class; hasChildren: false]).	^node children isEmpty ifTrue: [#()] ifFalse: [Array with: node]</body><body package="Aragon.Examples">setChanges: aChangeSet	changeSet := aChangeSet asValue.</body><body package="Aragon.Examples">spawnClass: aClassName	AragonStuff browseClass: (self classNamed: aClassName).</body><body package="Aragon.Examples">spawnMethod: aNode	| aClass |	aClass := self classNamed: aNode parent subject.	AragonStuff browseClass: aClass method: aNode subject."	| br browserClass aClass cls |	browserClass := Aragon at: #AragonBrowser ifAbsent: [Browser].	br := browserClass new.	aClass := self classNamed: aNode parent subject.	br meta: aClass isMeta. 	cls := aClass isMeta ifTrue: [aClass soleInstance] ifFalse: [aClass].	br categoryList selection: cls category.	br classList selection: cls name.	br protocolList selection: (aClass whichCategoryIncludesSelector: aNode subject).	br selectorList selection: aNode subject.	br textMode: #methodDefinition.	browserClass openMethodBrowserOn: br"</body><body package="Aragon.Examples">updateChanges	| treeAdaptor expandedNodes |	treeAdaptor := changes list.	expandedNodes := treeAdaptor expandedEntries.	treeAdaptor roots: self getAllChildren; changed: #value.	treeAdaptor expandAll: expandedNodes</body></methods><methods><class-id>Aragon.ChangeSetBrowser</class-id> <category>events</category><body package="Aragon.Examples">changeSetChanged	changes list: (TreeAdaptor new roots: self getAllChildren).	(changes list size between: 1 and: 3) ifTrue: [changes list expandAt: 1]</body><body package="Aragon.Examples">keyPress: aKeyboardEvent 	aKeyboardEvent keyValue == Character del ifTrue: [self removeSelection. ^nil].	^aKeyboardEvent</body><body package="Aragon.Examples">selectionChanged</body></methods><methods><class-id>Aragon.ChangeSetBrowser</class-id> <category>menu commands</category><body package="Aragon.Examples">browseSelection	| aNode |	(aNode := changes selectedNode) isNil ifTrue: [^self].	aNode type == #class ifTrue: [^self spawnClass: aNode subject].	aNode type == #method ifTrue: [^self spawnMethod: aNode].	^#toggleExpand</body><body package="Aragon.Examples">defaultInspect	changeSet value inspect</body><body package="Aragon.Examples">emptyChangeSet		(Dialog confirm: 'Do you really want to empty this change set?') 		ifTrue:			[changeSet value initialize.			self refreshView]</body><body package="Aragon.Examples">fileIn	| filename prompt currentChanges |	filename := changeSet value lastFileOutName asString.	(filename size == 0) ifTrue: [filename := changeSet value name, '.cha'].	prompt := 'File in into displayed ChangeSet from...'. 	filename := Dialog requestNewFileName: prompt default: filename.	(filename isNil or: [filename isEmpty]) ifTrue: [^self].	currentChanges := ChangeSet current.	ChangeSet newChanges: changeSet value.	filename asFilename fileIn.	ChangeSet newChanges: currentChanges.	self updateChanges</body><body package="Aragon.Examples">fileOut	| filename fm prompt |	filename := changeSet value lastFileOutName.	filename := (filename size == 0) 		ifTrue: [self changeSetName, '.cha']		ifFalse: [filename asString].	prompt := 'File the displayed ChangeSet out as file named...'. 	filename := Dialog requestNewFileName: prompt default: filename.	(filename isNil or: [filename isEmpty]) ifTrue: [^self].	(filename asFilename tail includes: $.) ifFalse: [filename := filename , '.cha'].	Transcript cr; cr; show: ('Filing out changes on:'); crtab; show: filename asString.	fm := SourceCodeStream write: filename asFilename.	Cursor write showWhile:		[[fm timeStamp.		changeSet value fileOutOn: fm]			valueNowOrOnUnwindDo: [fm close]]</body><body package="Aragon.Examples">refreshView"	changes list invalidateAndReExpand."	self updateChanges</body><body package="Aragon.Examples">removeNode: aNode	changes list remove: aNode.	(aNode parent notNil and: [aNode parent children isEmpty]) ifTrue: [self removeNode: aNode parent]</body><body package="Aragon.Examples">removeSelection	| selectedNode |	selectedNode := changes selectedNode.	changes list fetchChildrenFor: selectedNode.	changes list nodesDo: [:each | "instVarAt: (ChangeSet instVarIndexFor: 'methodChanges')."		each parent subject == #remove			ifTrue: [changeSet value objectRemoves removeKey: each subject]			ifFalse: [		each type == #class 			ifTrue: [self class 				removeChange: each parent subject 				class: (self classNamed: each subject) 				from: changeSet value] 			ifFalse: [		each type == #method 			ifTrue: [changeSet value 				removeSelectorChanges: each subject 				class: (self classNamed: each parent subject)]]]]		startWith: selectedNode.	self removeNode: selectedNode</body></methods><methods><class-id>Aragon.ChangeSetBrowser</class-id> <category>aspects</category><body package="Aragon.Examples">changeSet	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	changeSet isNil ifTrue: [changeSet := ChangeSet current asValue].	^changeSet</body><body package="Aragon.Examples">changes	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	^changes</body></methods><methods><class-id>Aragon.ChangeSetBrowser</class-id> <category>drag&amp;drop</category><body package="Aragon.Examples">canDragFrom: aController 	"Drag the currently selected file(s)."	| node |	node := changes selectedNode.	^node ~~ nil  and: [#(class method) includes: node type].</body><body package="Aragon.Examples">dragFrom: aController 	"Drag the currently selected file(s)."	| node sourceData class key |	node := changes selectedNode.	sourceData := IdentityDictionary new.	key := node type.	key  == #class ifTrue: [class := (self classNamed: node subject)] ifFalse: [	key == #method		ifTrue: 			[key := #selector.			class := self classNamed: node parent subject.			sourceData add: #selector -&gt; node subject]].	sourceData add: #class -&gt; class instanceBehavior name.	sourceData add: #meta -&gt; class isMeta.	self startDragging: sourceData from: aController key: key</body></methods><methods><class-id>Aragon.ChangeSetBrowser</class-id> <category>interface opening</category><body package="Aragon.Examples">postBuildWith: aBuilder	| myImageList |	aBuilder ~~ builder ifTrue: [^super postBuildWith: aBuilder].	myImageList := IdentityDictionary new		add: #category	-&gt;	(AragonIcon named: #folder2 color: ColorValue royalBlue asHiliteColor);		add: #nameSpace -&gt;	(AragonIcon named: #pie);		add: #class		-&gt;	(AragonIcon named: #largeBrick color: #paleRed);		add: #variable	-&gt;	(AragonIcon named: #leaf);		add: #protocol	-&gt;	(AragonIcon named: #bricks color: ColorValue royalBlue asHiliteColor);		add: #method	-&gt;	(AragonIcon named: #brick color: #green);	yourself.	(builder componentAt: #changes) widget imageList: myImageList.	aBuilder keyboardProcessor keyboardHook: [:ev :ctrl | self keyPress: ev].</body><body package="Aragon.Examples">preBuildWith: aBuilder	aBuilder ~~ builder ifTrue: [^super preBuildWith: aBuilder].	changeSet isNil ifTrue: 		[changeSet := ChangeSet current asValue].	changeSet onChangeSend: #changeSetChanged to: self.	changes := SelectionInTree with: (TreeAdaptor new roots: self getAllChildren).</body></methods><methods><class-id>Aragon.ChangeSetBrowser class</class-id> <category>utilities</category><body package="Aragon.Examples">addChanges: changeSet1 to: changeSet2	"Add Class Changes"	| classRemoves |	(changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'classChanges'))		keysAndValuesDo: 			[:className :changes || class | 			class := changeSet1 classNamed: className.			changes do: [:ct | changeSet2 atClass: class add: ct]].	"Add Method Changes"	(changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'methodChanges'))		keysAndValuesDo: 			[:className :changes || class | 			class := changeSet1 classNamed: className.			changes 				keysAndValuesDo: [:selector :ct | changeSet2						perform: (ct , 'Selector:class:') asSymbol						with: selector						with: class]].	"Add Class Removes"	classRemoves := changeSet2 instVarAt: (ChangeSet instVarIndexFor: 'classRemoves').	(changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'classRemoves'))		do: [:className | classRemoves add: className].</body><body package="Aragon.Examples">addChangesFor: aParcel	| newChangeSet |	newChangeSet := NamedChangeSet withName: aParcel name.	NamedChangeSet addChangeSet: newChangeSet.	^newChangeSet</body><body package="Aragon.Examples">addChangesFrom: aCollectionOfChanges to: aChangeSet 	aCollectionOfChanges 		do: [:each | 			each type == #'method definition'	ifTrue: [aChangeSet changeSelector: each selector class: each guaranteedClassObject] ifFalse: [			each type == #'method remove'	ifTrue: [aChangeSet removeSelector: each selector class: each guaranteedClassObject] ifFalse: [			each type == #'class definition'		ifTrue: [aChangeSet changeClass: each guaranteedClassObject] ifFalse: [			each type == #'class remove'		ifTrue: [aChangeSet removeClass: each guaranteedClassObject] ifFalse: [			each type == #'class reorganize'	ifTrue: [aChangeSet reorganizeClass: each guaranteedClassObject]		]]]]]</body><body package="Aragon.Examples">addChangesFrom: aChangeSet toChangesFor: aParcel 	| parcelChanges |	parcelChanges := self changesFor: aParcel.	parcelChanges isNil ifTrue: [parcelChanges := self addChangesFor: aParcel].	^ParcelBrowser		addChangesFrom: aChangeSet		to: parcelChanges		accordingTo: aParcel</body><body package="Aragon.Examples">changesFor: aParcel	^NamedChangeSet lookup: aParcel name</body><body package="Aragon.Examples">freshenChangesFor: aParcel	self addChangesFrom: ChangeSet current toChangesFor: aParcel.	^self changesFor: aParcel</body><body package="Aragon.Examples">openOnChangeSet: aChangeSet title: aTitle	| builder |	builder := (self new setChanges: aChangeSet) open.	builder window label: 'Change Set: ', aTitle.</body><body package="Aragon.Examples">removeChange: aSymbol class: aClass from: aChangeSet 	(aChangeSet objectChanges at: aClass fullName) changes 		remove: aSymbol 		ifAbsent: []</body><body package="Aragon.Examples">subtract: changeSet1 from: changeSet2	| changes1 changes2 |	"Subtract Class Changes"	changes1 := changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'classChanges').	changes2 := changeSet2 instVarAt: (ChangeSet instVarIndexFor: 'classChanges').	changes1 keysDo: [:className | changes2 removeKey: className ifAbsent: [nil]].	"Subtract Method Changes"	changes1 := changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'methodChanges').	changes2 := changeSet2 instVarAt: (ChangeSet instVarIndexFor: 'methodChanges').	changes1 		keysAndValuesDo: 			[:className :changes || selectors | 			(selectors := changes2 at: className ifAbsent: [nil]) notNil				ifTrue: [changes keysDo: [:selector | selectors removeKey: selector ifAbsent: [nil]].			selectors isEmpty ifTrue: [changes2 removeKey: className]]].	"Subtract Class Removes"	changes1 := changeSet1 instVarAt: (ChangeSet instVarIndexFor: 'classRemoves').	changes2 := changeSet2 instVarAt: (ChangeSet instVarIndexFor: 'classRemoves').	changes1 do: [:className | changes2 remove: className ifAbsent: [nil]].</body></methods><methods><class-id>Aragon.TextEditor</class-id> <category>private</category><body package="Aragon.Examples">changesAccepted	| controller answer |	(controller := self textEditor) textHasChanged		ifTrue: 			[answer := Dialog						choose: 'You have unsaved changes!Do you want to save your changes?'						labels: #('&amp;Yes' '&amp;No' 'Cancel')						values: #(true false nil)						default: true.			answer isNil ifTrue: [^false].			answer				ifTrue: [self saveFile]				ifFalse: [^true]].	^controller textHasChanged not</body><body package="Aragon.Examples">doesNotUnderstand: aMessage 	"Forward text menu messages to the text view's controller"	(#(cut copySelection paste doIt printIt inspectIt undo again find replace hardcopy) includes: aMessage selector)		ifTrue: [(builder componentAt: #text) widget controller perform: aMessage selector]		ifFalse: [^super doesNotUnderstand: aMessage]</body><body package="Aragon.Examples">explainSpecial: string 	"Answer with a string explaining the code view selection if it is 	displaying one of the special edit functions."	^nil</body><body package="Aragon.Examples">filename	^filename</body><body package="Aragon.Examples">filename: aString	filename := aString asFilename.	status value: filename asString.	builder window label: filename tail</body><body package="Aragon.Examples">icon	^ #'@@clipbrd.bmp'</body><body package="Aragon.Examples">openFile: aFilename 	| stream s |	self filename: aFilename.	stream := filename readStream.		[Cursor read		showWhile:			[[s := stream contents] valueNowOrOnUnwindDo: [stream close].			[text value: s] forkAt: Processor highIOPriority]]			forkAt: Processor systemBackgroundPriority</body><body package="Aragon.Examples">textEditor	^(self builder componentAt: #text) widget controller</body></methods><methods><class-id>Aragon.TextEditor</class-id> <category>initialize-release</category><body package="Aragon.Examples">initialize	filename := nil.	status := '' asValue.	text := '' asValue.</body><body package="Aragon.Examples">openOn: aFilename	self open; openFile: aFilename.</body><body package="Aragon.Examples">postBuildWith: aBuilder	self textEditor autoAccept: false.	#{Aragon.WindowResizeCorner} isDefined ifTrue:		 [builder add: Aragon.WindowResizeCornerSpec new].	#{Aragon.EnhancedGroupBoxSpec} isDefined ifTrue:		  [builder add: 				(Aragon.EnhancedGroupBoxSpec new					layout: (	(0@1 corner: 1@1) asLayout topOffset: -18);					bevel: -1)]</body></methods><methods><class-id>Aragon.TextEditor</class-id> <category>actions</category><body package="Aragon.Examples">browseSymbol	AragonStuff browse: self textEditor selection asString inContext: nil</body><body package="Aragon.Examples">explain	| reply ctrlr |	ctrlr := self textEditor.	reply := (Explainer new				class: UndefinedObject				selector: nil				instance: nil				context: ctrlr text				methodText: ctrlr text)			explain: ctrlr selection asString for: self.	ctrlr insertAndSelect: ' ' , reply at: ctrlr selectionStopIndex</body><body package="Aragon.Examples">helpAbout		Dialog notify: 'What would you want to hear?'</body><body package="Aragon.Examples">helpContents	Dialog notify: 'Sorry, there''s no help provided currently!'</body><body package="Aragon.Examples">newFile		self changesAccepted ifFalse: [^self].	filename := nil.	text value: ''.	status value: 'new file'.	builder window label: 'Text Editor'</body><body package="Aragon.Examples">openFile	| answer  |	self changesAccepted ifFalse: [^self].	answer := Dialog requestFileName: 'Enter a name for the file to be read' default: (filename notNil					ifTrue: [filename]					ifFalse: ['*.txt']).	answer isNil | answer isEmpty ifTrue: [^self].	self openFile: answer.</body><body package="Aragon.Examples">saveFile	| stream |	self textEditor textHasChanged		ifFalse: 			[Dialog notify: 'You haven''t made any changes to be saved.'.			^true].	filename isNil ifTrue: [^self saveFileAs].	stream := filename writeStream.	self textEditor textHasChanged: false.	Cursor wait showWhile: [[stream nextPutAll: self textEditor text]			valueNowOrOnUnwindDo: [stream close]].	^true</body><body package="Aragon.Examples">saveFileAs	| answer |	answer := Dialog		requestFileName: 'Save File As...'		default: (filename notNil ifTrue: [filename asString] ifFalse: ['newfile.ext']).	answer isNil | answer isEmpty ifTrue: [^false].	self filename: answer.	self textEditor textHasChanged: true.	^self saveFile</body></methods><methods><class-id>Aragon.TextEditor</class-id> <category>drag&amp;drop</category><body package="Aragon.Examples">dropOver: aDragContext 	^aDragContext key == #file ifTrue: [#dropEffectMove] ifFalse: [#dropEffectNone].</body><body package="Aragon.Examples">dropWith: aDragContext 	"Basic Step 3"	| files |	aDragContext key == #file ifFalse: [^#dropEffectNone].	files := aDragContext sourceData clientData.	self openFile: files first.	^#dropEffectMove</body></methods><methods><class-id>Aragon.TextEditor</class-id> <category>aspects</category><body package="Aragon.Examples">status	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^status</body><body package="Aragon.Examples">text	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^text</body></methods><methods><class-id>Aragon.TextEditor</class-id> <category>events</category><body package="Aragon.Examples">requestForWindowClose	^self changesAccepted</body></methods><methods><class-id>Aragon.TextEditor class</class-id> <category>interface opening</category><body package="Aragon.Examples">openOnFileNamed: aFilename	^self new open; openFile: aFilename</body></methods><methods><class-id>Aragon.TextEditor class</class-id> <category>resources</category><body package="Aragon.Examples">applicationName	^'Text Editor'</body><body package="Aragon.Examples">defaultIconName	^'@clipbrd.gif'</body></methods><methods><class-id>Aragon.AragonMenuEditor</class-id> <category>private</category><body package="Aragon.Examples">extendedShortcutKeyFor: item put: aShortcut 	currentItem value shortcutKeyCharacter: aShortcut</body><body package="Aragon.Examples">extendedShortcutKeyFrom: item	| sc |	(sc := item shortcutKeyCharacter) == nil ifTrue: [^nil].	(sc isSymbol and: [sc first == $*])		ifTrue: 			[| s |			sc last == Character cr ifTrue: [sc := (sc copyFrom: 1 to: 2) , 'Return'].			s := sc size &gt; 3						ifTrue: [sc copyFrom: 3 to: sc size]						ifFalse: [String with: sc last].			^(ShortCutPrefixes at: (sc at: 2) asInteger) , s].	sc == Character cr ifTrue: [^#Return].	^item shortcutKeyString</body><body package="Aragon.Examples">keyPress: aKeyboardEvent 	(shortCutField ~~ nil and: [shortCutField widget hasFocus])		ifTrue: 			[| kv sc |			kv := aKeyboardEvent keyValue.			kv == Character del ifTrue: [(builder aspectAt: #shortCutChar) value: nil. ^nil].			sc := self shortcutFrom: aKeyboardEvent.			sc == nil ifTrue: [^aKeyboardEvent].			(builder aspectAt: #shortCutChar) value: sc.			^nil].	^aKeyboardEvent</body><body package="Aragon.Examples">modifierIndexFor: aKeyboardEvent 	| answer |	answer := 0.	aKeyboardEvent hasCtrl ifTrue: [answer := answer bitOr: 2].	aKeyboardEvent hasShift ifTrue: [answer := answer bitOr: 1].	aKeyboardEvent hasAlt ifTrue: [answer := answer bitOr: 4].	aKeyboardEvent hasMeta ifTrue: [answer := answer bitOr: 8].	^answer</body><body package="Aragon.Examples">postBuildWith: aBuilder	super postBuildWith: aBuilder.	shortCutField := aBuilder componentAt: #shortCutChar.	aBuilder keyboardProcessor keyboardHook: [:ev :ctrl | self keyPress: ev].</body><body package="Aragon.Examples">preBuildWith: aBuilder	super preBuildWith: aBuilder.	aBuilder aspectAt: #shortCutChar		put: ((PluggableAdaptor on: currentItem)				getBlock: [:m | self extendedShortcutKeyFrom: m value]				putBlock: [:m :v | 					self extendedShortcutKeyFor: m value put: v. 					self modified]				updateBlock: [:m :a :p | a == #value]).</body><body package="Aragon.Examples">shortcutFrom: aKeyboardEvent 	| kv m |	kv := aKeyboardEvent keyValue.	kv == Character tab ifTrue: [^nil].	kv == Character backspace ifTrue: [^nil].	kv == Character del ifTrue: [^nil].	(kv isSymbol or: [kv == Character cr])		ifFalse: 			[kv &lt;= $! ifTrue: [kv := Character value: kv asInteger + 64].			kv isLowercase ifTrue: [kv := kv asUppercase]].	(m := self modifierIndexFor: aKeyboardEvent) == 0 ifTrue: [^kv].	kv isSymbol ifFalse: [kv := String with: kv].	^('*' , (String with: (Character value: m)) , kv) asSymbol</body></methods><methods><class-id>Aragon.AragonMenuEditor class</class-id> <category>class initialization</category><body package="Aragon.Examples">initialize	| modifiers n |	ShortCutModifiers := IdentityDictionary new		add: #shift -&gt; 'Shift+';		add: #ctrl -&gt; 'Ctrl+';		add: #alt -&gt; 'Alt+';		add: #meta -&gt; 'Meta+';	yourself.	modifiers := #(Shift Ctrl Alt Meta).	n := modifiers size ** 2.	ShortCutPrefixes := Array new: n.	1 to: n do: 		[:i || s |			s := ''.			(i bitAnd: 2r0001) &gt; 0 ifTrue: [s := s, (modifiers at: 1), '+'].			(i bitAnd: 2r0010) &gt; 0 ifTrue: [s := s, (modifiers at: 2), '+'].			(i bitAnd: 2r0100) &gt; 0 ifTrue: [s := s, (modifiers at: 3), '+'].			(i bitAnd: 2r1000) &gt; 0 ifTrue: [s := s, (modifiers at: 4), '+'].			ShortCutPrefixes at: i put: s.		].</body></methods><methods><class-id>Aragon.NdsFileBrowser</class-id> <category>actions</category><body package="Aragon.Examples">showOptions	(optionsDialog notNil and: [optionsDialog builder window isOpen])		ifTrue: [^optionsDialog builder window raise].	optionsDialog := SimpleDialog new.	optionsDialog builder source: self.	optionsDialog allButOpenFrom: (UISpecification from: self class optionsSpec).	optionsDialog builder open</body><body package="Aragon.Examples">startEditing	| widget |	widget := (builder componentAt: #tree) widget.	tree selection isNil ifTrue: [tree selectionIndex: 1].	widget controller startEditing.</body><body package="Aragon.Examples">stopEditing	(builder componentAt: #tree) widget controller stopEditing.</body><body package="Aragon.Examples">toggleEditing	| widget |	widget := (builder componentAt: #tree) widget.	tree selection isNil ifTrue: [tree selectionIndex: 1].	widget controller toggleEditing.</body></methods><methods><class-id>Aragon.NdsFileBrowser</class-id> <category>aspects</category><body package="Aragon.Examples">linesAtRoot	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	linesAtRoot isNil ifTrue: [linesAtRoot := false asValue].	^linesAtRoot</body><body package="Aragon.Examples">row	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	row isNil ifTrue: [row := nil asValue].	^row</body><body package="Aragon.Examples">showButtons	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	showButtons isNil ifTrue: [showButtons := false asValue].	^showButtons</body><body package="Aragon.Examples">showImages	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	showImages isNil ifTrue: [showImages := false asValue].	^showImages</body><body package="Aragon.Examples">showLines	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	showLines isNil ifTrue: [showLines := false asValue].	^showLines</body></methods><methods><class-id>Aragon.NdsFileBrowser</class-id> <category>initialize-release</category><body package="Aragon.Examples">initialize	| treeAdaptor roots |	roots := self childrenOfRoot.	treeAdaptor := TreeAdaptor new		childrenBlock: 			[:aDirectory | self childrenOf: aDirectory]; 		roots: roots.	tree := SelectionInTree with: treeAdaptor.	tree selectionIndexHolder compute: [:v | self row value: tree selection].</body><body package="Aragon.Examples">postBuildWith: aBuilder 	| dataSet widget |	#{Aragon.WindowResizeCorner} isDefined ifTrue: 	[builder add: Aragon.WindowResizeCornerSpec new].	(dataSet  := builder componentAt: #tree) isNil ifTrue: [^self].	widget := dataSet widget.	self showButtons value: widget treeView displayButtons.	self showImages value: widget treeView displayImages.	self showLines value: widget treeView displayLines.	self linesAtRoot value: widget treeView linesAtRoot.	(self showButtons) compute: [:m | widget treeView displayButtons: m value].	(self showLines) compute: [:m | widget treeView displayLines: m value].	(self showImages) compute: [:m | widget treeView displayImages: m value].	(self linesAtRoot) compute: [:m | widget treeView linesAtRoot: m value].	aBuilder keyboardProcessor keyboardHook: [:ev :ctrl | self keyPress: ev].	super postBuildWith: aBuilder.</body></methods><methods><class-id>Aragon.NdsFileBrowser</class-id> <category>events</category><body package="Aragon.Examples">keyPress: aKeyboardEvent 	| keyValue ctrl |	keyValue := aKeyboardEvent keyValue.	ctrl := (builder componentAt: #tree) widget controller.	keyValue == #F2					 				ifTrue: [ctrl toggleEditing]	ifFalse: [	(keyValue == Character cr and: [ctrl isBrowsing])		ifTrue: [ctrl startEditing]	ifFalse: [	keyValue == #F12								ifTrue: [ctrl stopEditing]	ifFalse: [	keyValue == Character esc 						ifTrue: [ctrl abortEditing]	ifFalse: [	(keyValue == Character del and: [ctrl isBrowsing]) 	ifTrue: [tree list removeAll: tree selections]	ifFalse: [^aKeyboardEvent]]]]].	^nil</body></methods><methods><class-id>Aragon.CardViewExample3</class-id> <category>initialize-release</category><body package="Aragon.Examples">initialize	tabs := SelectionInList with: #(First Second Third).	tabs selectionIndexHolder onChangeSend: #pageChanged to: self.</body></methods><methods><class-id>Aragon.CardViewExample3</class-id> <category>notifications</category><body package="Aragon.Examples">pageChanged	| wrapper subcanvasSpec |	subcanvasSpec := ('canvas' , tabs selectionIndex printString , 'Spec') asSymbol.	(wrapper := builder componentAt: #tabs) isNil ifTrue: [^self].	wrapper widget 		client: self 		spec: subcanvasSpec</body></methods><methods><class-id>Aragon.ResizerExample</class-id> <category>events</category><body package="Aragon.Examples">selectionChanged	| s c |	(s := classNames selection) isNil ifTrue: [^self].	c := Smalltalk at: s.	text21 value: c definition.	text22 value: c comment.</body></methods><methods><class-id>Aragon.ResizerExample</class-id> <category>aspects</category><body package="Aragon.Examples">classNames	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	classNames isNil		ifTrue: 			[classNames := SelectionInList with: Smalltalk classNames.			classNames selectionIndexHolder onChangeSend: #selectionChanged to: self].	^classNames</body><body package="Aragon.Examples">text21	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	text21 isNil ifTrue: [text21 := Object comment asValue].	^text21</body><body package="Aragon.Examples">text22	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	text22 isNil ifTrue: [text22 := Collection comment asValue].	^text22</body></methods><methods><class-id>Aragon.NewFileBrowser</class-id> <category>private</category><body package="Aragon.Examples">contentsOf: aFilename 	^aFilename notNil		ifTrue: [(aFilename directoryContents 					collect: [:each | FilenameWrapper on: (aFilename construct: each)])				select: [:f | (f isHidden or: [f isSystem]) == ShowHidden]]		ifFalse: [#()]</body><body package="Aragon.Examples">enableAll: items inMenu: aMenu if: condition	items do: [:each | (aMenu atNameKey: each) enabled: condition].</body><body package="Aragon.Examples">entriesFor: aString 	| dir answer |	answer := SortedCollection new.	(dir := aString asFilename)		directoryContents do:			[:file || fw | 				fw := FilenameWrapper on: (dir construct: file).				(fw name ~= '.' 				and: [fw name ~= '..' 				and: [fw isDirectory 				and: [(fw isHidden or: [fw isSystem]) == ShowHidden]]])			ifTrue: [answer add: ((AragonTreeNode for: (dir construct: fw asString) asString label: fw asString) isParent: true)]].	^answer</body><body package="Aragon.Examples">openDefault: aFilename	| answer |	answer := Dialog				choose: 'How should this file be opened?'				labels: #('In &amp;Text Editor' 'In &amp;Changes List' '&amp;Cancel')				values: #(#textEditor #changesList nil)				default: #textEditor.	answer isNil ifTrue: [^self].	answer == #textEditor ifTrue: [^self class openTextEditorFor: aFilename].	answer == #changesList ifTrue: [^ChangeList openOnFileNamed: aFilename]</body><body package="Aragon.Examples">openFileFor: anEntry 	| filename answer |	filename := directories selection asFilename construct: anEntry name.	InputState default shiftDown		ifFalse: 			[FileTypes associationsDo: [:fType | fType key do: [:s | (s match: anEntry name)						ifTrue: [^fType value value: filename]]].			^self openDefault: filename].	answer := Dialog				choose: 'How should this file be opened?'				labels: #('In &amp;Text Editor' 'In &amp;Changes List' '&amp;Cancel')				values: #(#textEditor #changesList nil)				default: #textEditor.	answer == #textEditor ifTrue: [^self class openTextEditorFor: filename].	answer == #changesList ifTrue: [^ChangeList openOnFileNamed: filename]</body><body package="Aragon.Examples">openInShell: aFilename</body><body package="Aragon.Examples">removeSelectedEntries	self selectedRows do: [:entry | entries list remove: entry]</body><body package="Aragon.Examples">setEnablement	| selectionSize listMenu |	selectionSize := entries selectionIndexes size.	listMenu := builder menuAt: #listMenu.	self enableAll: #(renameFile fileIn showProperties) inMenu: listMenu if: selectionSize == 1.	self enableAll: #(openFile removeFile cutFile copyFile) inMenu: listMenu if: selectionSize &gt; 0.	self enableAll: #(pasteFile) inMenu: listMenu if: copySelection notNil.</body><body package="Aragon.Examples">startObserver	observerProcess notNil ifTrue: [^self].	observerProcess := [(Delay forMilliseconds: DelayForRefresh first) wait.			[self updateContentsIfNecessary.			(Delay forMilliseconds: DelayForRefresh last) wait.			true] 	whileTrue] forkAt: Processor userBackgroundPriority</body><body package="Aragon.Examples">stopEditing	(builder componentAt: #entries) widget controller stopEditing.</body><body package="Aragon.Examples">stopObserver	observerProcess notNil		ifTrue: 			[observerProcess terminate.			observerProcess := nil]</body><body package="Aragon.Examples">updateContents	| selection |	selection := (selection := directories selection) notNil ifTrue: [selection asFilename].	selection = currentDirectory ifTrue: [^self].	self stopObserver.	(builder componentAt: #entries) widget controller stopEditingAndInvalidate: false.	self entries list: (self contentsOf: (currentDirectory := selection)).	self startObserver.</body><body package="Aragon.Examples">updateContentsIfNecessary	| actualContents currentContents newEntries obsoleteEntries |	actualContents := self contentsOf: currentDirectory.	currentContents := self entries list.	newEntries := actualContents reject: [:each | currentContents includes: each].	newEntries isEmpty ifFalse: [currentContents addAll: newEntries].	obsoleteEntries := currentContents reject: [:each | actualContents includes: each].	obsoleteEntries isEmpty ifFalse: [currentContents removeAll: obsoleteEntries].</body></methods><methods><class-id>Aragon.NewFileBrowser</class-id> <category>drag&amp;drop</category><body package="Aragon.Examples">dragFromList: aController	"Drag the currently selected file(s)."	| ds dm data dir |	data := DragDropData new.	data key: #file.	data contextWindow: self builder window.	"Basic Step 12"	data contextWidget: aController view.					data contextApplication: self.				dir := self currentDirectory.	data clientData: (self selectedRows collect: [:each | dir construct: each asString]).	"Basic Step 13"	ds := DropSource new.			"Basic Step 14"	dm := DragDropManager 			withDropSource: ds			withData: data.			"Basic Step 15"	dm doDragDrop						"Basic Step 16"</body><body package="Aragon.Examples">dropEnter: aSymbol with: aDragContext 	| widget dictionary |	aDragContext key == #file ifFalse: [^#dropEffectNone].	widget := (builder componentAt: aSymbol) widget.	dictionary := IdentityDictionary new.							"V2 Step 3"	dictionary at: #widget put: widget.							"V2 Step 4"	dictionary at: #targetIndex put: widget targetIndex.			"V2 Step 4"	dictionary at: #hasFocus put: widget hasFocus.				"V2 Step 4"	aDragContext dropTarget clientData: dictionary.			 	"V2 Step 5"	widget hasFocus: true.									"V2 Step 6"	^#dropEffectMove</body><body package="Aragon.Examples">dropEnterList: aDragContext 	^self dropEnter: #entries with: aDragContext</body><body package="Aragon.Examples">dropEnterTree: aDragContext 	^self dropEnter: #hierarchy with: aDragContext</body><body package="Aragon.Examples">dropExitWith: aDragContext 	| widget dictionary |	aDragContext key == #file ifFalse: [^#dropEffectNone].	dictionary := aDragContext dropTarget clientData.		"V2 Step 9"	widget := dictionary at: #widget.						"V2 Step 9"	widget targetIndex: (dictionary at: #targetIndex).		"V2 Step 10"	widget hasFocus: (dictionary at: #hasFocus).			"V2 Step 10"	aDragContext dropTarget clientData: nil.			 	"V2 Step 11"	^#dropEffectNone</body><body package="Aragon.Examples">dropOnList: aDragContext 	"Basic Step 3"	| files target widget |	aDragContext key == #file ifFalse: [^#dropEffectNone].	files := aDragContext sourceData clientData.	widget := aDragContext dropTarget clientData at: #widget.	target := directories selection asFilename construct: (entries list at: widget targetIndex) asString.	(target isDirectory and: [target ~= files first directory]) ifFalse: [^#dropEffectNone].	Cursor execute		showWhile: 			[aDragContext ctrlDown				ifTrue: [files do: [:each | each copyTo: (target construct: each tail)]]				ifFalse: 					[files do: [:each | each moveTo: (target construct: each tail)].					(aDragContext sourceData contextApplication isKindOf: NewFileBrowser)						ifTrue: [aDragContext sourceData contextApplication removeSelectedEntries]].			target = self currentDirectory ifTrue: [self updateContents]].	^self dropExitWith: aDragContext</body><body package="Aragon.Examples">dropOnTree: aDragContext 	"Basic Step 3"	| files target widget |	aDragContext key == #file ifFalse: [^#dropEffectNone].	files := aDragContext sourceData clientData.	widget := aDragContext dropTarget clientData at: #widget.	target := (directories list at: widget targetIndex) asFilename.	(target definitelyExists and: [target ~= files first directory]) ifFalse: [^#dropEffectNone].	Cursor execute		showWhile: 			[aDragContext ctrlDown				ifTrue: [files do: [:each | each copyTo: (target construct: each tail)]]				ifFalse: 					[files do: [:each | each moveTo: (target construct: each tail)].					(aDragContext sourceData contextApplication isKindOf: NewFileBrowser)						ifTrue: [aDragContext sourceData contextApplication removeSelectedEntries]].			target = self currentDirectory ifTrue: [self updateContents]].	^self dropExitWith: aDragContext</body><body package="Aragon.Examples">dropOverList: aDragContext 	| files widget target |	aDragContext key == #file ifFalse: [^#dropEffectNone].	widget := aDragContext dropTarget clientData at: #widget.			"V2 Step 7"	widget showDropFeedbackIn: aDragContext allowScrolling: true.	"V2 Step 8"	files := aDragContext sourceData clientData.	target := directories selection asFilename construct: (entries list at: widget targetIndex) asString.	(target isDirectory and: [target ~= files first directory]) ifFalse: [^#dropEffectNone].	^aDragContext ctrlDown ifTrue: [#dropEffectCopy] ifFalse: [#dropEffectMove]</body><body package="Aragon.Examples">dropOverTree: aDragContext 	| treeView files |	aDragContext key == #file ifFalse: [^#dropEffectNone].	treeView := aDragContext dropTarget clientData at: #widget.			"V2 Step 7"	treeView showDropFeedbackIn: aDragContext allowScrolling: true.	"V2 Step 8"	files := aDragContext sourceData clientData.	(directories list at: (builder componentAt: #hierarchy) widget targetIndex) asFilename		 = files first directory ifTrue: [^#dropEffectNone].	^aDragContext ctrlDown ifTrue: [#dropEffectCopy] ifFalse: [#dropEffectMove]</body><body package="Aragon.Examples">dropWith: aDragContext 	"Basic Step 3"	| files dest |	aDragContext key == #file ifFalse: [^#dropEffectNone].	files := aDragContext sourceData clientData.	dest := (directories list at: (builder componentAt: #hierarchy) widget targetIndex) asFilename.	(dest definitelyExists and: [dest ~= files first directory]) ifTrue: [Cursor execute			showWhile: 				[aDragContext ctrlDown					ifTrue: [files do: [:each | each copyTo: (dest construct: each tail)]]					ifFalse: 						[files do: [:each | each moveTo: (dest construct: each tail)].						(aDragContext sourceData contextApplication isKindOf: NewFileBrowser)							ifTrue: [aDragContext sourceData contextApplication removeSelectedEntries]].				dest = self currentDirectory ifTrue: [self updateContents]]].	^self dropExitWith: aDragContext</body></methods><methods><class-id>Aragon.NewFileBrowser</class-id> <category>menu actions</category><body package="Aragon.Examples">copyFile	self notYetImplemented</body><body package="Aragon.Examples">createFolder	self notYetImplemented</body><body package="Aragon.Examples">createTextFile	self notYetImplemented</body><body package="Aragon.Examples">cutFile	self notYetImplemented</body><body package="Aragon.Examples">fileIn	| directory |	directory := self currentDirectory.	self selectedRows do: [:entry | (directory construct: entry name) fileIn]</body><body package="Aragon.Examples">goTo	self notYetImplemented</body><body package="Aragon.Examples">helpAbout	Dialog warn: 'NewFileBrowser example'</body><body package="Aragon.Examples">invertSelection	self notYetImplemented</body><body package="Aragon.Examples">notYetImplemented	Dialog warn: 'This function is not yet implemented!'</body><body package="Aragon.Examples">openFile	Cursor execute showWhile: [	InputState default altDown ifTrue: [^self showProperties].	InputState default ctrlDown ifTrue: [^self openInShell].	self selectedRows do: [:entry | entry isDirectory			ifTrue: 				[| sel oldDelay |				oldDelay := DelayForRetrieval.								[DelayForRetrieval := 0.				entry name = '.' ifTrue: [^Screen default ringBell].				entry name = '..' ifTrue: [^directories selection: directories selectedNode parent subject].				directories list expand: (sel := directories selection).				directories selection: (sel asFilename construct: entry name) asString]					valueNowOrOnUnwindDo: [DelayForRetrieval := oldDelay]]			ifFalse: [self openFileFor: entry]]	] " End of showWhile "</body><body package="Aragon.Examples">openInChangeList	self selectedRows		do: 			[:entry | 			| filename |			filename := directories selection asFilename construct: entry name.			ChangeList openOnFileNamed: filename]</body><body package="Aragon.Examples">openInShell</body><body package="Aragon.Examples">openInTextEditor	self selectedRows		do: 			[:entry | 			| filename |			filename := directories selection asFilename construct: entry name.			self class openTextEditorFor: filename]</body><body package="Aragon.Examples">openWith	| answer |	answer := Dialog				choose: 'How should this file be opened?'				labels: #('In &amp;Text Editor' 'In &amp;Change List' '&amp;Cancel')				values: #(#textEditor #changeList nil)				default: #textEditor.	answer == #textEditor ifTrue: [^self openInTextEditor].	answer == #changeList ifTrue: [^self openInChangeList].</body><body package="Aragon.Examples">pasteFile	self notYetImplemented</body><body package="Aragon.Examples">refreshAll	self stopObserver.	self hierarchy list invalidateAndReExpand.	currentDirectory := nil.	self updateContents.	self startObserver.</body><body package="Aragon.Examples">removeFile	(Dialog confirm: 'Do you really want to remove all the selected files?') ifFalse: [^self].	self selectedRows		do: 			[:entry | 			(self currentDirectory construct: entry name) delete.			entries list remove: entry]</body><body package="Aragon.Examples">renameFile	(builder componentAt: #entries) widget controller startEditing.</body><body package="Aragon.Examples">renameFileWith: aController 	Object errorSignal		handle: 			[:ex | 			Dialog warn: ex errorString.			^false]		do: 			[| row dir |			(row := self selectedRow value) name = aController editValue				ifFalse: 					[dir := self currentDirectory.					(dir construct: row name)						renameTo: (dir construct: aController editValue) asString.					row name: aController editValue]."			self stopEditing."			^true]</body><body package="Aragon.Examples">selectAll	self notYetImplemented</body><body package="Aragon.Examples">setupOptions	self notYetImplemented</body><body package="Aragon.Examples">showProperties	self selectedRows first inspect</body><body package="Aragon.Examples">undo	self notYetImplemented</body></methods><methods><class-id>Aragon.NewFileBrowser</class-id> <category>initialize-release</category><body package="Aragon.Examples">initialize	super initialize.	self hierarchy selectionIndexHolder compute: [self selectionInHierarchyChanged].	self 	entries selectionIndexHolder compute: [self selectionChanged].</body><body package="Aragon.Examples">postBuildWith: aBuilder 	| widget |	#{Aragon.WindowResizeCorner} isDefined ifTrue: [builder add: Aragon.WindowResizeCornerSpec new].	widget := (builder componentAt: #entries) widget.	ColumnLayout notNil ifTrue: [widget columnLayout: ColumnLayout].	widget defaultSortBlock: [:a :b | a name &lt; b name].	widget orderBy: 2.	aBuilder keyboardProcessor keyboardHook: [:ev :ctrl | self keyPress: ev].	super postBuildWith: aBuilder</body><body package="Aragon.Examples">postOpenWith: aBuilder 	self setEnablement.</body></methods><methods><class-id>Aragon.NewFileBrowser</class-id> <category>aspects</category><body package="Aragon.Examples">entries	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	entries isNil		ifTrue:			[entries :=  MultiSelectionInList new.			entries selectionIndexHolder compute: [:v | self selectedRow value: entries selection]].	^entries</body><body package="Aragon.Examples">hierarchy	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	directories isNil 		ifTrue: 			[directories := SelectionInTree with: 				(TreeAdaptor new 					childrenBlock: [:anEntry | self entriesFor: anEntry]; 					roots: (Filename volumes collect: [:vol | vol asTreeNode type: #disk]))].	^directories</body><body package="Aragon.Examples">selectedRow	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	selectedRow isNil ifTrue: [selectedRow := nil asValue].	^selectedRow</body><body package="Aragon.Examples">selectedRows	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^entries selections</body></methods><methods><class-id>Aragon.NewFileBrowser</class-id> <category>events</category><body package="Aragon.Examples">keyPress: aKeyboardEvent 	| keyValue |	(builder componentAt: #entries) widget hasFocus ifFalse: [^aKeyboardEvent].	keyValue := aKeyboardEvent keyValue.	keyValue == #F2 ifTrue: [(builder componentAt: #entries) widget controller toggleEditing. ^nil].	keyValue == Character esc ifTrue: [(builder componentAt: #entries) widget controller abortEditing. ^nil].	(builder componentAt: #entries) widget controller isEditing ifTrue: [^aKeyboardEvent].	keyValue == Character backspace ifTrue: [directories selectParent. ^nil].	keyValue == Character cr ifTrue: [self openFile. ^nil].	keyValue == Character del ifTrue: [self removeFile. ^nil].	^aKeyboardEvent</body><body package="Aragon.Examples">noticeOfWindowClose: aWindow	ColumnLayout := (builder componentAt: #entries) widget columnLayout.	self stopObserver.	retrieveProcess notNil ifTrue: [retrieveProcess terminate].	^super noticeOfWindowClose: aWindow.</body><body package="Aragon.Examples">selectionChanged"	self stopEditing."	self setEnablement.</body><body package="Aragon.Examples">selectionInHierarchyChanged	DelayForRetrieval == 0 ifTrue: [^self updateContents].	retrieveProcess ~~ nil ifTrue: [retrieveProcess terminate].	retrieveProcess := 			[(Delay forMilliseconds: DelayForRetrieval) wait.			self updateContents	] forkAt: Processor userBackgroundPriority</body></methods><methods><class-id>Aragon.NewFileBrowser</class-id> <category>accessing</category><body package="Aragon.Examples">currentDirectory	^currentDirectory</body></methods><methods><class-id>Aragon.NewFileBrowser class</class-id> <category>resources</category><body package="Aragon.Examples">applicationName	^'File Browser'</body><body package="Aragon.Examples">defaultIconName	^'@disk.gif'</body></methods><methods><class-id>Aragon.NewFileBrowser class</class-id> <category>interface opening</category><body package="Aragon.Examples">open	self openWithSpec: #windowSpec</body><body package="Aragon.Examples">openTextEditorFor: aFilename	| te |	te := Aragon at: #TextEditor ifAbsent: [FileBrowser].	te openOnFileNamed: aFilename asString.</body><body package="Aragon.Examples">openWithSpec: aSymbol 	"Create a running instance of the application and open its user 	interface using the designated specification."	^self openOn: self new withSpec: aSymbol</body></methods><methods><class-id>Aragon.NewFileBrowser class</class-id> <category>class initialization</category><body package="Aragon.Examples">delayForRefresh: milliSeconds		DelayForRefresh := milliSeconds.</body><body package="Aragon.Examples">delayForRetrieval: milliSeconds		DelayForRetrieval := milliSeconds.</body><body package="Aragon.Examples">fileTypes	^FileTypes</body><body package="Aragon.Examples">initialize	"self initialize"	self delayForRetrieval: 400.	self delayForRefresh: #(7000 2000).	self showHidden: false.	FileTypes := IdentityDictionary new		add:	#('*.ws' '*.txt' '*.ini')		-&gt;	[:f | self openTextEditorFor: f];		add:	#('*.pst' '*.st' '*.cha')		-&gt;	[:f | ChangeList openOnFileNamed: f];		add:	#('*.pcl')					-&gt;	[:f | Parcel loadParcelFrom: f asString];	yourself.</body><body package="Aragon.Examples">showHidden: aBoolean	ShowHidden := aBoolean</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>enhanced - Aragon</category><body package="Aragon.Examples">openAragonApp: aSymbol 	(Aragon at: aSymbol 		ifAbsent: [^Dialog warn: 'The Aragon application ''' , aSymbol , ''' is not installed.']) open</body></methods><methods><class-id>Aragon.ClassHierarchyBrowser class</class-id> <category>interface specs</category><body package="Aragon.Examples">hierarchySpec	"Tools.UIPainter new openOnClass: self andSelector: #hierarchySpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Categories Spec' 			#bounds: #(#{Graphics.Rectangle} 465 366 815 658 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragExitSelector 						#dropExitWith: #dragEnterSelector 						#dropEnterWith: #dragStartSelector 						#startDraggingFrom: #dragOkSelector 						#wantToDrag: #dropSelector 						#dropWith: #dragOverSelector 						#dropOverWith: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #hierarchy 					#model: #hierarchy 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doubleClick 						#requestValueChangeSelector: #changeRequest ) 					#menu: #menu 					#useModifierKeys: true 					#selectionType: #highlight 					#linesAtRoot: true ) ) ) )</body><body package="Aragon.Examples">toolbarSpec	"UIPainter new openOnClass: self andSelector: #toolbarSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Toolbar' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 754 695 1047 746 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#{Aragon.ToolbarButtonSpec}					#layout: #(#Rectangle 0 0 24 23 ) 					#name: #toggleDisplay 					#flags: 0 					#model: #toggleShowInheritance 					#tabable: false 					#defaultable: true 					#enabledImage: #classIcon ) 				#(#ComboBoxSpec 					#layout: #(#LayoutFrame 27 0 4 0 -53 1 19 0 ) 					#name: #history 					#flags: 0 					#isOpaque: true 					#model: #selectionInHistory 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#focusInSelector: 						#historyGotFocus: 						#valueChangeSelector: #historyChanged 						#requestFocusOutSelector: 						#historyChangeRequest: 						#requestValueChangeSelector: 						#historyChangeRequest: ) 					#tabable: true 					#menu: #historyMenu 					#style: #'AragonBrowser.Small' 					#isReadOnly: false 					#type: #string 					#comboList: #historyList ) 				#(#{Aragon.ToolbarButtonSpec}					#layout: #(#LayoutFrame -48 1 0 0 -24 1 23 0 ) 					#name: #back 					#flags: 0 					#model: #goBack 					#tabable: false 					#defaultable: true 					#enabledImage: #arrowLeft 					#labelPos: #below ) 				#(#{Aragon.ToolbarButtonSpec}					#layout: #(#LayoutFrame -24 1 0 0 0 1.0 23 0 ) 					#name: #forward 					#flags: 32 					#model: #goForward 					#tabable: false 					#defaultable: true 					#enabledImage: #arrowRight ) ) ) )</body><body package="Aragon.Examples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ClassHierarchyBrowser' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 891 845 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 24 0 ) 					#name: #historyBar 					#flags: 0 					#minorKey: #toolbarSpec ) 				#(#{Aragon.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragExitSelector 						#dropExitWith: #dragEnterSelector 						#dropEnterWith: #dragStartSelector 						#startDraggingFrom: #dragOkSelector 						#wantToDrag: #dropSelector 						#dropWith: #dragOverSelector 						#dropOverWith: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 24 0 0 1 0 1 ) 					#name: #hierarchy 					#model: #hierarchy 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doubleClick ) 					#menu: #menu 					#useModifierKeys: true 					#selectionType: #highlight 					#linesAtRoot: true ) ) ) )</body></methods><methods><class-id>Aragon.AragonExamplesBrowser class</class-id> <category>interface specs</category><body package="Aragon.Examples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Framework Enhancements - Examples' 			#min: #(#{Core.Point} 584 288 ) 			#max: #(#{Core.Point} 584 288 ) 			#bounds: #(#{Graphics.Rectangle} 987 575 1571 863 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 238 0 21 0 -17 1 243 0 ) 					#label: 'Comment' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 238 0 242 0 326 0 269 0 ) 					#name: #start 					#model: #start 					#label: 'Start' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 330 0 242 0 418 0 269 0 ) 					#name: #browse 					#model: #browse 					#label: 'Browse' 					#defaultable: true ) 				#(#{Aragon.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 16 0 28 0 223 0 268 0 ) 					#name: #examples 					#model: #examples 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #doubleClick ) 					#useModifierKeys: true 					#selectionType: #highlight 					#displayImages: false 					#linesAtRoot: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 13 0 7 0 ) 					#label: 'Examples:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 252 0 45 0 -30 1 228 0 ) 					#name: #explanation 					#flags: 4 					#model: #explanation 					#isReadOnly: true ) ) ) )</body></methods><methods><class-id>Aragon.OldDatasetExample class</class-id> <category>interface specs</category><body package="Aragon.Examples">pollingSpec	"UIPainter new openOnClass: self andSelector: #pollingSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Old DatasetView Example' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 399 412 881 612 ) 			#isEventDriven: false ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#DataSetSpec 					#layout: #(#LayoutFrame 12 0 26 0 -12 1 -30 1 ) 					#name: #entries 					#model: #entries 					#columns: #(						#(#DataSetColumnSpec 							#labelIsImage: false 							#width: 17 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: false ) 						#(#DataSetColumnSpec 							#model: #'row 1' 							#label: 'Date' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 140 							#rendererType: #Text 							#editorType: #InputField 							#font: #DataSetEntries 							#type: #date 							#noScroll: false 							#formatString: 'd. mmmm yyyy' ) 						#(#DataSetColumnSpec 							#model: #'row 2' 							#label: 'Product' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 100 							#rendererType: #Text 							#editorType: #ComboBox 							#choices: #productsMenu 							#font: #DataSetEntries 							#noScroll: true ) 						#(#DataSetColumnSpec 							#model: #'row 3' 							#label: 'Amount' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #number 							#noScroll: false 							#formatString: '#,##0' ) 						#(#DataSetColumnSpec 							#model: #'row 4' 							#label: 'Price' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #fixedpoint 							#noScroll: false 							#formatString: '$#,##0.00;[Red]-$#,##0.00' ) 						#(#DataSetColumnSpec 							#model: #'row 5' 							#label: 'Sel.' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 30 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false ) ) ) 				#(#LabelSpec 					#layout: #(#Point 10 7 ) 					#label: 'List of Orders:' 					#style: #DataSetLabel ) 				#(#DividerSpec 					#layout: #(#LayoutFrame 0 0 -20 1 0 1.0 0 1.00714 ) ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 3 0 2 1 0 1 ) 					#name: #info 					#label: 'Info' 					#style: #DataSetLabel ) ) ) )</body><body package="Aragon.Examples">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Old DatasetView Example' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 399 412 881 612 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#DataSetSpec 					#layout: #(#LayoutFrame 12 0 26 0 -12 1 -30 1 ) 					#name: #entries 					#model: #entries 					#columns: #(						#(#DataSetColumnSpec 							#labelIsImage: false 							#width: 17 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: false ) 						#(#DataSetColumnSpec 							#model: #'row 1' 							#label: 'Date' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 140 							#rendererType: #Text 							#editorType: #InputField 							#font: #DataSetEntries 							#type: #date 							#noScroll: false 							#formatString: 'd. mmmm yyyy' ) 						#(#DataSetColumnSpec 							#model: #'row 2' 							#callbacksSpec: 							#(#UIEventCallbackSubSpec 								#requestFocusOutSelector: 								#validateProductName								#requestValueChangeSelector: 								#validateProductName ) 							#label: 'Product' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 100 							#rendererType: #Text 							#editorType: #ComboBox 							#choices: #productsMenu 							#font: #DataSetEntries 							#noScroll: true ) 						#(#DataSetColumnSpec 							#model: #'row 3' 							#label: 'Amount' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #number 							#noScroll: false 							#formatString: '#,##0' ) 						#(#DataSetColumnSpec 							#model: #'row 4' 							#label: 'Price' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #fixedpoint 							#noScroll: false 							#formatString: '$#,##0.00;[Red]-$#,##0.00' ) 						#(#DataSetColumnSpec 							#model: #'row 5' 							#label: 'Sel.' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 30 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false ) ) 					#verticalPolicy: #wrap 					#horizontalPolicy: #noWrap ) 				#(#LabelSpec 					#layout: #(#Point 10 7 ) 					#label: 'List of Orders:' 					#style: #DataSetLabel ) 				#(#DividerSpec 					#layout: #(#LayoutFrame 0 0 -20 1 0 1.0 0 1.00714 ) ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 3 0 2 1 0 1 ) 					#name: #info 					#label: 'Info' 					#style: #DataSetLabel ) ) ) )</body><body package="Aragon.Examples">windowWithNewDatasetSpec	"UIPainter new openOnClass: self andSelector: #windowWithNewDatasetSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Old DatasetView Example' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1122 712 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.NewDataSetSpec} 					#layout: #(#{Graphics.LayoutFrame} 12 0 26 0 -12 1 -30 1 ) 					#name: #entries 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #white ) ) 					#model: #entries 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#labelIsImage: false 							#width: 17 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 1' 							#label: 'Date' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 140 							#rendererType: #Text 							#editorType: #InputField 							#font: #DataSetEntries 							#type: #date 							#noScroll: false 							#formatString: 'd. mmmm yyyy' ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 2' 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#requestFocusOutSelector: 								#validateProductName: 								#requestValueChangeSelector: 								#validateProductName: ) 							#label: 'Product' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 100 							#rendererType: #Text 							#editorType: #ComboBox 							#choices: #productsMenu 							#font: #DataSetEntries 							#noScroll: true ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 3' 							#label: 'Amount' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #number 							#noScroll: false 							#formatString: '#,##0' ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 4' 							#label: 'Price' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #fixedpoint 							#noScroll: false 							#formatString: '$#,##0.00;[Red]-$#,##0.00' ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 5' 							#label: 'Sel.' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 30 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false ) ) 					#initiallyUseEditingMode: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 7 ) 					#label: 'List of Orders:' 					#style: #DataSetLabel ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -20 1 0 1.0 0 1.00714 ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 3 0 2 1 0 1 ) 					#name: #info 					#label: 'Info' 					#style: #DataSetLabel ) ) ) )</body></methods><methods><class-id>Aragon.NewDatasetExample class</class-id> <category>interface specs</category><body package="Aragon.Examples">optionsSpec	"UIPainter new openOnClass: self andSelector: #optionsSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'NewDataSet - Options' 			#min: #(#Point 234 247 ) 			#max: #(#Point 234 247 ) 			#bounds: #(#Rectangle 683 522 917 769 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#CheckBoxSpec 					#layout: #(#Point 28 30 ) 					#name: #useRowSelectors 					#model: #useRowSelectors 					#label: 'Show Row Selectors' 					#style: #DataSetLabel ) 				#(#CheckBoxSpec 					#layout: #(#Point 28 69 ) 					#name: #useDecoratedEditors 					#model: #useDecoratedEditors 					#label: 'Use Decorated Editors' 					#style: #DataSetLabel ) 				#(#GroupBoxSpec 					#layout: #(#Rectangle 24 98 178 175 ) 					#label: 'Show Grid Lines' 					#style: #DataSetLabel ) 				#(#CheckBoxSpec 					#layout: #(#Point 50 122 ) 					#name: #showHorizontalLines 					#model: #showHorizontalLines 					#tabable: true 					#label: 'Horizontal' 					#style: #DataSetLabel ) 				#(#CheckBoxSpec 					#layout: #(#Point 50 141 ) 					#name: #showVerticalLines 					#model: #showVerticalLines 					#tabable: true 					#label: 'Vertical' 					#style: #DataSetLabel ) 				#(#CheckBoxSpec 					#layout: #(#Point 28 11 ) 					#name: #showLabels 					#model: #showLabels 					#label: 'Show Column Labels' 					#style: #DataSetLabel ) 				#(#CheckBoxSpec 					#layout: #(#Point 28 194 ) 					#name: #allowForColumnDragging 					#model: #allowForColumnDragging 					#label: 'Allow for Column Dragging' 					#style: #DataSetLabel ) 				#(#CheckBoxSpec 					#layout: #(#Point 28 213 ) 					#name: #allowForSorting 					#model: #allowForSorting 					#label: 'Allow for Sorting' 					#style: #DataSetLabel ) 				#(#CheckBoxSpec 					#layout: #(#Point 28 50 ) 					#name: #showLineNumbers 					#model: #showLineNumbers 					#label: 'Show Line Numbers' 					#style: #DataSetLabel ) ) ) )</body><body package="Aragon.Examples">pollingSpec	"UIPainter new openOnClass: self andSelector: #pollingSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'NewDatasetView Example' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 550 522 1050 758 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: false ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#NewDataSetSpec 					#layout: #(#LayoutFrame 12 0 24 0 -12 1 -34 1 ) 					#name: #entries 					#model: #entries 					#menu: #listMenu 					#columns: #(						#(#DataSetColumnSpec 							#labelIsImage: false 							#width: 16 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: true ) 						#(#DataSetColumnSpec 							#model: #'row 1' 							#label: 'Date' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 140 							#rendererType: #Text 							#editorType: #InputField 							#font: #DataSetEntries 							#type: #date 							#noScroll: false 							#formatString: 'd. mmmm yyyy' ) 						#(#DataSetColumnSpec 							#model: #'row 2' 							#callbacksSpec: 							#(#UIEventCallbackSubSpec 								#requestFocusOutSelector: 								#validateProductName: 								#requestValueChangeSelector: 								#validateProductName: ) 							#label: 'Product' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 100 							#rendererType: #Text 							#editorType: #ComboBox 							#choices: #productsMenu 							#font: #DataSetEntries 							#noScroll: false ) 						#(#DataSetColumnSpec 							#model: #'row 3' 							#label: 'Amount' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #number 							#noScroll: false 							#formatString: '#,##0' ) 						#(#DataSetColumnSpec 							#model: #'row 4' 							#label: 'Price' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #fixedpoint 							#noScroll: false 							#formatString: '$#,##0.00;[Red]-$#,##0.00' ) 						#(#DataSetColumnSpec 							#model: #'row 5' 							#label: 'Sel.' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 29 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false ) ) 					#multipleSelections: true 					#useModifierKeys: true 					#initiallyUseEditingMode: false 					#showHorizontalLines: false 					#showVerticalLines: false 					#showLabels: true ) 				#(#LabelSpec 					#layout: #(#Point 10 6 ) 					#label: 'List of Orders:' 					#style: #DataSetLabel ) 				#(#DividerSpec 					#layout: #(#LayoutFrame 0 0 -21 1 0 1.0 0 1.0 ) ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 3 0 2 1 0 1 ) 					#name: #info 					#label: 'Press F2 to toggle edit / browsing mode' 					#style: #DataSetLabel ) ) ) )</body><body package="Aragon.Examples">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'NewDatasetView Example' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1140 748 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.NewDataSetSpec} 					#layout: #(#{Graphics.LayoutFrame} 12 0 22 0 -12 1 -32 1 ) 					#name: #entries 					#model: #entries 					#menu: #listMenu 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 16 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: true ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 1' 							#label: 'Date' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 140 							#rendererType: #Text 							#editorType: #InputField 							#font: #DataSetEntries 							#type: #date 							#noScroll: false 							#formatString: 'd. mmmm yyyy' ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 2' 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#requestFocusOutSelector: 								#validateProductName: 								#requestValueChangeSelector: 								#validateProductName: ) 							#label: 'Product' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 100 							#rendererType: #Text 							#editorType: #ComboBox 							#choices: #productsMenu 							#font: #DataSetEntries 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 3' 							#label: 'Amount' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #number 							#noScroll: false 							#formatString: '#,##0' ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 4' 							#label: 'Price' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 72 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #fixedpoint 							#noScroll: false 							#formatString: '$#,##0.00;[Red]-$#,##0.00' ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row 5' 							#label: 'Sel.' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 29 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false ) ) 					#multipleSelections: true 					#useModifierKeys: true 					#showHorizontalLines: false 					#showVerticalLines: false 					#showLabels: true 					#allowForColumnDragging: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 10 4 ) 					#label: 'List of Orders:' 					#style: #DataSetLabel ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 3 0 0 1.0 0 1 ) 					#name: #info 					#label: 'Press F2 to toggle edit / browsing mode' 					#style: #DataSetLabel ) 				#(#{Aragon.EnhancedGroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -21 1 -102 1 0 1 ) 					#bevel: -1 ) 				#(#{Aragon.EnhancedGroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -100 1 -21 1 0 1 0 1 ) 					#bevel: -1 ) ) ) )</body></methods><methods><class-id>Aragon.NewDatasetExample class</class-id> <category>resources</category><body package="Aragon.Examples">menuBar	"MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Product' 				#nameKey: #productMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Edit' 							#value: #startEditing ) 						#(#MenuItem 							#rawLabel: '&amp;Browse' 							#value: #stopEditing ) 						#(#MenuItem 							#rawLabel: 'Show &amp;Prices' 							#nameKey: #showPrices 							#value: #showPrices 							#indication: true ) 						#(#MenuItem 							#rawLabel: '&amp;Quit' 							#value: #closeRequest 							#shortcutKeyCharacter: $q ) ) #(3 1 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Appearance' 				#nameKey: #appearanceMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Colouring' 							#submenu: #(#Menu #(									#(#MenuItem 										#rawLabel: '&amp;Column 2' 										#value: #colorColumn2 ) 									#(#MenuItem 										#rawLabel: 'C&amp;hess' 										#value: #colorChess ) 									#(#MenuItem 										#rawLabel: '&amp;Flag' 										#value: #colorFlag ) 									#(#MenuItem 										#rawLabel: '&amp;None' 										#value: #colorNone ) ) #(3 1 ) nil ) ) 						#(#MenuItem 							#rawLabel: '&amp;Options...' 							#nameKey: #showOptions 							#value: #showOptions ) ) #(1 1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.CardViewExample class</class-id> <category>interface specs</category><body package="Aragon.Examples">canvas1Spec	"UIPainter new openOnClass: self andSelector: #canvas1Spec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Unlabeled Canvas' 			#bounds: #(#Rectangle 484 427 797 597 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.501597 0 0.352941 0.5 0.5 ) 					#name: #canvasLabel 					#colors: 					#(#LookPreferences 						#setForegroundColor: #(#ColorValue #red ) ) 					#label: 'Canvas 1' 					#style: #('Times New Roman' #italic 72 ) ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin 50 0 -44 1 ) 					#name: #straight 					#model: #tabStyle 					#label: 'Windows 95' 					#select: #straight ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin 174 0 -44 1 ) 					#name: #slanted 					#model: #tabStyle 					#label: 'NextStep' 					#select: #slanted ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame 12 0 -69 1 -12 1 -13 1 ) 					#label: 'Tab Style' ) ) ) )</body><body package="Aragon.Examples">canvas2Spec	"UIPainter new openOnClass: self andSelector: #canvas2Spec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Unlabeled Canvas' 			#bounds: #(#Rectangle 744 635 1057 805 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 0 0.5 0.5 0.5 ) 					#name: #canvasLabel 					#colors: 					#(#LookPreferences 						#setForegroundColor: #(#ColorValue #green ) ) 					#label: 'Canvas 2' 					#style: #('Times New Roman' #italic 72 ) ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 12 0 -32 1 ) 					#label: 'Just a dummy' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 186 0 -31 1 0 0.955272 -11 1 ) 					#colors: 					#(#LookPreferences 						#setBackgroundColor: #(#ColorValue #white ) ) ) ) ) )</body><body package="Aragon.Examples">canvas3Spec	"UIPainter new openOnClass: self andSelector: #canvas3Spec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Unlabeled Canvas' 			#bounds: #(#Rectangle 214 417 527 587 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 0 0.5 0.5 0.5 ) 					#name: #canvasLabel 					#colors: 					#(#LookPreferences 						#setForegroundColor: #(#ColorValue #blue ) ) 					#label: 'Canvas 3' 					#style: #('Times New Roman' #italic 72 ) ) 				#(#ActionButtonSpec 					#layout: #(#LayoutOrigin 12 0 -32 1 ) 					#label: 'Do Nothing' 					#defaultable: true ) ) ) )</body><body package="Aragon.Examples">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'CardView Example' 			#bounds: #(#{Graphics.Rectangle} 640 512 1035 744 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.CardViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 4 0 -4 1 -33 1 ) 					#name: #tabs 					#flags: 8 					#model: #tabs 					#tabable: true 					#style: #Label 					#labelSuppliedByApplication: true 					#buildPages: true 					#cachePages: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -181 1 -27 1 -95 1 -4 1 ) 					#model: #closeRequest 					#label: 'OK' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -91 1 -27 1 -5 1 -4 1 ) 					#model: #closeRequest 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Aragon.ParcelBrowser class</class-id> <category>resources</category><body package="Aragon.Examples">arrowDown	"UIMaskEditor new openOnClass: self andSelector: #arrowDown"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 9@9 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[255 128 0 0 127 0 0 0 127 0 0 0 62 0 0 0 62 0 0 0 28 0 0 0 28 0 0 0 8 0 0 0 8 0 0 0])</body><body package="Aragon.Examples">arrowUp	"UIMaskEditor new openOnClass: self andSelector: #arrowUp"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 9@9 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[8 0 0 0 8 0 0 0 28 0 0 0 28 0 0 0 62 0 0 0 62 0 0 0 127 0 0 0 127 0 0 0 255 128 0 0])</body><body package="Aragon.Examples">browseImage	"UIMaskEditor new openOnClass: self andSelector: #browseImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 4 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 9) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6070 scaledGreen: 6070 scaledBlue: 6070); at: 3 put: (ColorValue scaledRed: 3693 scaledGreen: 0 scaledBlue: 0); at: 4 put: (ColorValue scaledRed: 5010 scaledGreen: 5010 scaledBlue: 0); at: 5 put: ColorValue white; at: 6 put: (ColorValue scaledRed: 4497 scaledGreen: 4497 scaledBlue: 4497); at: 7 put: (ColorValue scaledRed: 3693 scaledGreen: 3693 scaledBlue: 3693); at: 8 put: (ColorValue scaledRed: 6617 scaledGreen: 6617 scaledBlue: 6617); at: 9 put: (ColorValue scaledRed: 1573 scaledGreen: 8191 scaledBlue: 1573); yourself)) usingBits: (ByteArray fromPackedString: ']7]7]7]7]7]7]7]7]7]7]0@@@@]7]7]7]7]7@ADQDQ@G]7]7]7]0QDQDQDE ]7]7]7\DQDQDQDQFA7]7]7AFQDQ@@EU4XG]7]0Q@@@@@"HU7Q ]7]0Q@QDQ@@@AG]@]7\DQ@QDQDQDQG]FA7\D@@QDQDQDQD]FA7\DQ@QDQ@@@@D]FA7\DQ@Q@@@"H DQFA7\DQ@Q@Q@@@@DQFA7\DQ@@@QDQDQDQFA7]PQDQ@Q@@@@DQFA7]PQDQ@@@"H DQ ]7]0ADQDQ@@@@DX@]7]5@DQDQDQDQF@"A7]7T@QDQDQDQ H"HG]7]P@DQDQD@@@#L0]7]5T@@@@@AU@CL5]7]7]U@@@E]7T@L5]7]7]7]7]7]7]P@5]7]7]7]7]7]7]7@E'))</body><body package="Aragon.Examples">browseShape	"UIMaskEditor new openOnClass: self andSelector: #browseShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 254 0 0 3 255 128 0 7 255 192 0 15 255 224 0 31 255 112 0 63 255 56 0 63 255 152 0 127 255 156 0 127 255 220 0 127 255 220 0 127 255 252 0 127 255 252 0 127 255 252 0 127 255 252 0 127 255 248 0 63 255 248 0 63 255 252 0 31 255 254 0 15 255 255 0 7 255 255 0 1 254 63 0 0 0 31 0 0 0 7 0])</body><body package="Aragon.Examples">inspectImage	"UIMaskEditor new openOnClass: self andSelector: #inspectImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: (ColorValue scaledRed: 8191 scaledGreen: 7580 scaledBlue: 5460); at: 2 put: ColorValue blue; at: 3 put: ColorValue black; at: 4 put: (ColorValue scaledRed: 6360 scaledGreen: 6360 scaledBlue: 6360); yourself)) usingBits: #[255 255 255 255 255 255 0 0 255 255 255 255 255 255 0 0 255 255 192 15 255 255 0 0 255 252 0 0 255 255 0 0 255 192 0 0 15 255 0 0 255 0 0 80 3 255 0 0 255 0 0 84 2 255 0 0 252 0 0 80 0 255 0 0 252 0 0 0 0 191 0 0 240 0 1 80 0 63 0 0 240 0 21 64 0 47 0 0 240 0 1 64 0 47 0 0 240 0 5 64 0 47 0 0 240 0 5 0 0 47 0 0 252 0 21 0 0 175 0 0 252 0 21 0 0 191 0 0 255 0 20 64 2 191 0 0 255 0 85 0 2 255 0 0 255 192 0 0 10 255 0 0 255 248 0 0 171 255 0 0 255 255 128 10 191 255 0 0 255 255 250 171 255 255 0 0 255 255 255 255 255 255 0 0 255 255 255 255 255 255 0 0])</body><body package="Aragon.Examples">inspectShape	"UIMaskEditor new openOnClass: self andSelector: #inspectShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 124 0 0 1 255 0 0 7 255 192 0 15 255 224 0 15 255 240 0 31 255 240 0 31 255 248 0 63 255 248 0 63 255 252 0 63 255 252 0 63 255 252 0 63 255 252 0 31 255 252 0 31 255 248 0 15 255 248 0 15 255 240 0 7 255 240 0 3 255 224 0 0 255 128 0 0 62 0 0 0 0 0 0 0 0 0 0])</body><body package="Aragon.Examples">menuBar25	"MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Parcel' 				#nameKey: #packageMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;New...' 							#nameKey: #newParcel 							#value: #newParcel 							#submenu: #(#Menu #(									#(#MenuItem 										#rawLabel: '&amp;Parcel\b' 										#nameKey: #newParcel 										#value: #newParcel 										#shortcutKeyCharacter: $n ) 									#(#MenuItem 										#rawLabel: '&amp;Folder' 										#nameKey: #newFolder 										#value: #newFolder ) ) #(2 ) nil ) ) 						#(#MenuItem 							#rawLabel: '&amp;Load...' 							#nameKey: #loadParcel 							#value: #loadParcel 							#shortcutKeyCharacter: $l ) 						#(#MenuItem 							#rawLabel: 'Load Sources' 							#nameKey: #loadSources 							#value: #loadSources ) 						#(#MenuItem 							#rawLabel: '&amp;Save' 							#nameKey: #saveParcel 							#value: #saveParcel 							#shortcutKeyCharacter: $s ) 						#(#MenuItem 							#rawLabel: 'Save &amp;As...' 							#nameKey: #saveAs 							#value: #saveAs ) 						#(#MenuItem 							#rawLabel: '&amp;Uninstall...' 							#nameKey: #unloadParcel 							#value: #unloadParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Remove...' 							#nameKey: #removeParcel 							#value: #removeParcel ) 						#(#MenuItem 							#rawLabel: 'E&amp;xit\b' 							#value: #closeRequest 							#shortcutKeyCharacter: $q ) ) #(3 4 1 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Edit' 				#nameKey: #editMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Browse\b' 							#nameKey: #browseParcel 							#value: #browseParcel 							#shortcutKeyCharacter: $b ) 						#(#MenuItem 							#rawLabel: '&amp;Inspect' 							#nameKey: #inspectParcel 							#value: #inspectParcel 							#shortcutKeyCharacter: $i ) 						#(#MenuItem 							#rawLabel: '&amp;Changes' 							#nameKey: #browseChanges 							#value: #browseChanges ) 						#(#MenuItem 							#rawLabel: 'Re&amp;name...' 							#nameKey: #renameParcel 							#value: #renameParcel 							#shortcutKeyCharacter: $r ) 						#(#MenuItem 							#rawLabel: '&amp;Empty...' 							#nameKey: #emptyParcel 							#value: #emptyParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Options...' 							#nameKey: #editOptions 							#value: #editOptions ) 						#(#MenuItem 							#rawLabel: '&amp;Search Paths...' 							#nameKey: #editSearchPaths 							#value: #editSearchPaths ) ) #(3 2 2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Tools' 				#nameKey: #toolsMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;File Into Parcel...' 							#nameKey: #fileIntoParcel 							#value: #fileIntoParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Changes Into Parcel...' 							#nameKey: #changesIntoParcel 							#value: #changesIntoParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Update View\b' 							#nameKey: #updateView 							#value: #updateView 							#shortcutKeyCharacter: $u ) ) #(2 1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body><body package="Aragon.Examples">menuBar30	"MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Parcel' 				#nameKey: #packageMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;New...' 							#nameKey: #newParcel 							#value: #newParcel 							#submenu: #(#Menu #(									#(#MenuItem 										#rawLabel: '&amp;Parcel\b' 										#nameKey: #newParcel 										#value: #newParcel 										#shortcutKeyCharacter: $n ) 									#(#MenuItem 										#rawLabel: '&amp;Folder' 										#nameKey: #newFolder 										#value: #newFolder ) ) #(2 ) nil ) ) 						#(#MenuItem 							#rawLabel: '&amp;Load...' 							#nameKey: #loadParcel 							#value: #loadParcel 							#shortcutKeyCharacter: $l ) 						#(#MenuItem 							#rawLabel: '&amp;Save' 							#nameKey: #saveParcel 							#value: #saveParcel 							#shortcutKeyCharacter: $s ) 						#(#MenuItem 							#rawLabel: 'Save &amp;As...' 							#nameKey: #saveAs 							#value: #saveAs ) 						#(#MenuItem 							#rawLabel: '&amp;Uninstall...' 							#nameKey: #unloadParcel 							#value: #unloadParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Remove...' 							#nameKey: #removeParcel 							#value: #removeParcel ) 						#(#MenuItem 							#rawLabel: 'E&amp;xit\b' 							#value: #closeRequest 							#shortcutKeyCharacter: $q ) ) #(2 4 1 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Edit' 				#nameKey: #editMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Browse\b' 							#nameKey: #browseParcel 							#value: #browseParcel 							#shortcutKeyCharacter: $b ) 						#(#MenuItem 							#rawLabel: '&amp;Inspect' 							#nameKey: #inspectParcel 							#value: #inspectParcel 							#shortcutKeyCharacter: $i ) 						#(#MenuItem 							#rawLabel: '&amp;Changes' 							#nameKey: #browseChanges 							#value: #browseChanges ) 						#(#MenuItem 							#rawLabel: 'Re&amp;name...' 							#nameKey: #renameParcel 							#value: #renameParcel 							#shortcutKeyCharacter: $r ) 						#(#MenuItem 							#rawLabel: '&amp;Empty...' 							#nameKey: #emptyParcel 							#value: #emptyParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Options...' 							#nameKey: #editOptions 							#value: #editOptions ) 						#(#MenuItem 							#rawLabel: '&amp;Search Paths...' 							#nameKey: #editSearchPaths 							#value: #editSearchPaths ) ) #(3 2 2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Tools' 				#nameKey: #toolsMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;File Into Parcel...' 							#nameKey: #fileIntoParcel 							#value: #fileIntoParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Changes Into Parcel...' 							#nameKey: #changesIntoParcel 							#value: #changesIntoParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Update View\b' 							#nameKey: #updateView 							#value: #updateView 							#shortcutKeyCharacter: $u ) ) #(2 1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body><body package="Aragon.Examples">openImage	"UIMaskEditor new openOnClass: self andSelector: #openImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 4240 scaledGreen: 4240 scaledBlue: 0); at: 5 put: (ColorValue scaledRed: 6360 scaledGreen: 6360 scaledBlue: 6360); yourself)) usingBits: (ByteArray fromPackedString: 'QDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQD@@QDQDQDQDQDQDQ@QDA@QDQDQDQDQDQDQDP@QDQD@@ADQDQDQD@@QDQ@D!HDQDQDQDQDQDQ@HRD @@@@ADQDQDQ@D!HRD!HRDDQDQDQ@HRD!HRD!HDQDQDQ@D!HR@@@@@@@@QDQ@HRD L3L3L3LDQDQ@D!HCL3L3L3ADQDQ@HR@3L3L3L0QDQDQ@D L3L3L3LDQDQDQ@HCL3L3L3ADQDQDQ@@3L3L3L0QDQDQDQ@@@@@@@@DQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQDQD'))</body><body package="Aragon.Examples">openShape	"UIMaskEditor new openOnClass: self andSelector: #openShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 1 192 0 0 2 40 0 0 0 24 0 30 0 56 0 63 0 0 0 63 255 0 0 63 255 128 0 63 255 128 0 63 255 248 0 63 255 240 0 63 255 224 0 63 255 192 0 63 255 128 0 63 255 0 0 63 254 0 0 63 252 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Aragon.Examples">parcelMenu25	"MenuEditor new openOnClass: self andSelector: #parcelMenu25"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Browse\b' 				#value: #browseParcel 				#shortcutKeyCharacter: $b 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Parcel Contents\b' 							#nameKey: #browseParcel 							#value: #browseParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Changes' 							#nameKey: #browseChanges 							#value: #browseChanges ) ) #(2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Inspect' 				#nameKey: #inspectParcel 				#value: #inspectParcel 				#shortcutKeyCharacter: $i ) 			#(#MenuItem 				#rawLabel: 'Load Sources' 				#nameKey: #loadSources 				#value: #loadSources ) 			#(#MenuItem 				#rawLabel: '&amp;New...' 				#nameKey: #newParcel 				#value: #newParcel 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Parcel\b' 							#nameKey: #newParcel 							#value: #newParcel 							#shortcutKeyCharacter: $n ) 						#(#MenuItem 							#rawLabel: '&amp;Folder' 							#nameKey: #newFolder 							#value: #newFolder ) ) #(2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Save' 				#nameKey: #saveParcel 				#value: #saveParcel 				#shortcutKeyCharacter: $s ) 			#(#MenuItem 				#rawLabel: 'Save &amp;As...' 				#nameKey: #saveAs 				#value: #saveAs ) 			#(#MenuItem 				#rawLabel: '&amp;Uninstall...' 				#nameKey: #unloadParcel 				#value: #unloadParcel ) 			#(#MenuItem 				#rawLabel: '&amp;Remove...' 				#nameKey: #removeParcel 				#value: #removeParcel ) 			#(#MenuItem 				#rawLabel: 'Re&amp;name...' 				#nameKey: #renameParcel 				#value: #renameParcel 				#shortcutKeyCharacter: $r ) 			#(#MenuItem 				#rawLabel: '&amp;Empty...' 				#nameKey: #emptyParcel 				#value: #emptyParcel ) ) #(3 3 4 ) nil ) decodeAsLiteralArray</body><body package="Aragon.Examples">parcelMenu30	"MenuEditor new openOnClass: self andSelector: #parcelMenu30"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Browse\b' 				#value: #browseParcel 				#shortcutKeyCharacter: $b 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Parcel Contents\b' 							#nameKey: #browseParcel 							#value: #browseParcel ) 						#(#MenuItem 							#rawLabel: '&amp;Overridden Extensions' 							#nameKey: #browseOverriddenExtensions 							#value: #browseOverriddenExtensions ) 						#(#MenuItem 							#rawLabel: '&amp;Changes' 							#nameKey: #browseChanges 							#value: #browseChanges ) ) #(3 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Inspect' 				#nameKey: #inspectParcel 				#value: #inspectParcel 				#shortcutKeyCharacter: $i ) 			#(#MenuItem 				#rawLabel: '&amp;New...' 				#nameKey: #newParcel 				#value: #newParcel 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Parcel\b' 							#nameKey: #newParcel 							#value: #newParcel 							#shortcutKeyCharacter: $n ) 						#(#MenuItem 							#rawLabel: '&amp;Folder' 							#nameKey: #newFolder 							#value: #newFolder ) ) #(2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Save' 				#nameKey: #saveParcel 				#value: #saveParcel 				#shortcutKeyCharacter: $s ) 			#(#MenuItem 				#rawLabel: 'Save &amp;As...' 				#nameKey: #saveAs 				#value: #saveAs ) 			#(#MenuItem 				#rawLabel: '&amp;Uninstall...' 				#nameKey: #unloadParcel 				#value: #unloadParcel ) 			#(#MenuItem 				#rawLabel: '&amp;Remove...' 				#nameKey: #removeParcel 				#value: #removeParcel ) 			#(#MenuItem 				#rawLabel: 'Re&amp;name...' 				#nameKey: #renameParcel 				#value: #renameParcel 				#shortcutKeyCharacter: $r ) 			#(#MenuItem 				#rawLabel: '&amp;Empty...' 				#nameKey: #emptyParcel 				#value: #emptyParcel ) ) #(2 3 4 ) nil ) decodeAsLiteralArray</body><body package="Aragon.Examples">saveImage	"UIMaskEditor new openOnClass: self andSelector: #saveImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: (ColorValue scaledRed: 6167 scaledGreen: 6167 scaledBlue: 6167); at: 2 put: ColorValue black; at: 3 put: ColorValue blue; at: 4 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 85 85 85 85 64 0 0 1 164 0 0 16 112 0 0 1 164 0 0 16 112 0 0 1 164 0 0 21 112 0 0 1 164 0 0 26 112 0 0 1 164 0 0 26 112 0 0 1 164 0 0 26 112 0 0 1 164 0 0 26 112 0 0 1 164 0 0 26 112 0 0 1 165 85 85 90 112 0 0 1 170 170 170 170 112 0 0 1 170 170 170 170 112 0 0 1 169 85 85 106 112 0 0 1 169 85 65 106 112 0 0 1 169 85 65 106 112 0 0 1 105 85 65 106 112 0 0 0 89 85 65 106 112 0 0 0 21 85 85 85 112 0 0 0 15 255 255 255 240 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Aragon.Examples">saveShape	"UIMaskEditor new openOnClass: self andSelector: #saveShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 24@24 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 31 255 248 0 30 0 76 0 30 0 76 0 30 0 124 0 30 0 124 0 30 0 124 0 30 0 124 0 30 0 124 0 30 0 124 0 31 255 252 0 31 255 252 0 31 255 252 0 31 255 252 0 31 249 252 0 31 249 252 0 31 249 252 0 15 249 252 0 7 255 252 0 3 255 252 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Aragon.ParcelBrowser class</class-id> <category>interface specs</category><body package="Aragon.Examples">fileRequesterSpec	"UIPainter new openOnClass: self andSelector: #fileRequesterSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Add search path' 			#min: #(#Point 397 125 ) 			#max: #(#Point 397 125 ) 			#bounds: #(#Rectangle 442 453 839 578 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#InputFieldSpec 					#layout: #(#Rectangle 24 41 298 65 ) 					#name: #filename 					#model: #filename ) 				#(#LabelSpec 					#layout: #(#Point 23 20 ) 					#label: 'Enter pathname of a directory to add to the list:' 					#style: #'Demo.Label1' ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 302 41 372 65 ) 					#name: #browse 					#model: #browseFile 					#label: 'Browse...' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -118 1 -35 1 -8 1 -9 1 ) 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -231 1 -35 1 -121 1 -9 1 ) 					#model: #accept 					#label: 'OK' 					#isDefault: true 					#defaultable: true ) ) ) )</body><body package="Aragon.Examples">hierarchySpec	"Tools.UIPainter new openOnClass: self andSelector: #hierarchySpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Parcel Browser' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 910 849 ) 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragExitSelector 						#dropExitWith: #dragEnterSelector 						#dropEnterWith: #dragStartSelector 						#dragFrom: #dragOkSelector 						#canDragFrom: #dropSelector 						#dropWith: #dragOverSelector 						#dropOverWith: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #parcels 					#model: #parcels 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #browseParcel ) 					#menu: #parcelMenu 					#style: #'ParcelBrowser.Hierarchy' 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body><body package="Aragon.Examples">searchPathsSpec	"UIPainter new openOnClass: self andSelector: #searchPathsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Enhanced Parcels -- Search Paths' 			#bounds: #(#{Graphics.Rectangle} 640 512 1062 738 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 16 71 312 185 ) 					#name: #searchPaths 					#model: #searchPaths 					#multipleSelections: true 					#style: #Label 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{Aragon.EnhancedLabelSpec} 					#layout: #(#{Graphics.Rectangle} 13 13 364 62 ) 					#label: 'Add or remove parcel search paths to the list below. The uppermost entry will be used as the default path to store parcels.' 					#style: #Label ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 294 197 412 223 ) 					#name: #cancel 					#model: #cancel 					#label: '&amp;Cancel' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 173 197 291 223 ) 					#name: #accept 					#model: #accept 					#label: 'A&amp;pply' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 322 72 415 95 ) 					#name: #addPath 					#model: #addPath 					#label: '&amp;Add...' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 322 99 415 122 ) 					#name: #editPath 					#flags: 40 					#model: #editPath 					#label: '&amp;Edit...' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 322 126 415 149 ) 					#name: #removePath 					#flags: 40 					#model: #removePath 					#label: '&amp;Remove' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 16 189 47 211 ) 					#name: #moveUp 					#flags: 40 					#model: #moveUp 					#label: #arrowUp 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 48 189 79 211 ) 					#name: #moveDown 					#flags: 40 					#model: #moveDown 					#label: #arrowDown 					#hasCharacterOrientedLabel: false 					#defaultable: true ) ) ) )</body><body package="Aragon.Examples">settingsSpec	"Tools.UIPainter new openOnClass: self andSelector: #settingsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Enhanced Parcels -- Options' 			#min: #(#{Core.Point} 422 294 ) 			#max: #(#{Core.Point} 422 294 ) 			#bounds: #(#{Graphics.Rectangle} 643 434 1065 728 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 18 0 104 0 405 0 173 0 ) 					#label: 'Default Input Directory' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 18 0 184 0 405 0 253 0 ) 					#label: 'Default Output Directory' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 35 0 137 0 309 0 156 0 ) 					#name: #defaultInputDirectory 					#model: #defaultInputDirectory ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 313 0 137 0 383 0 156 0 ) 					#name: #browse1 					#model: #browseFile1 					#label: 'Browse...' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 35 0 217 0 309 0 236 0 ) 					#name: #defaultOutputDirectory 					#model: #defaultOutputDirectory ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 313 0 217 0 383 0 236 0 ) 					#name: #browse2 					#model: #browseFile2 					#label: 'Browse...' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 174 0 258 0 292 0 284 0 ) 					#name: #accept 					#model: #accept 					#label: 'A&amp;pply' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 295 0 258 0 413 0 284 0 ) 					#name: #cancel 					#model: #cancel 					#label: '&amp;Cancel' 					#defaultable: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 17 0 8 0 402 0 101 0 ) 					#name: #message 					#flags: 4 					#model: #message 					#tabable: false 					#isReadOnly: true 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>Aragon.NewParcelBrowser class</class-id> <category>interface specs</category><body package="Aragon.Examples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Parcel Browser' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 910 849 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.EnhancedGroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -20 1 0 1.0 0 1.0 ) 					#bevel: -1 ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 1 0 0 1 3 0 ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 -20 1 -20 1 -2 1 ) 					#name: #status 					#label: 'Status Line' 					#style: #('Arial' #italic 15 ) ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 4 0 32 0 32 0 ) 					#name: #browseParcel 					#flags: 0 					#model: #browseParcel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: 						#showHelpFor: ) 					#tabable: false 					#hasCharacterOrientedLabel: false 					#enabledImage: #browseIcon ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 34 0 4 0 62 0 32 0 ) 					#name: #inspectParcel 					#flags: 0 					#model: #inspectParcel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: 						#showHelpFor: ) 					#tabable: false 					#hasCharacterOrientedLabel: false 					#defaultable: true 					#enabledImage: #inspectIcon ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 64 0 4 0 92 0 32 0 ) 					#name: #loadParcel 					#flags: 0 					#model: #loadParcel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: 						#showHelpFor: ) 					#tabable: false 					#hasCharacterOrientedLabel: false 					#defaultable: true 					#enabledImage: #openIcon ) 				#(#{Aragon.ToolbarButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 94 0 4 0 122 0 32 0 ) 					#name: #saveParcel 					#flags: 0 					#model: #saveParcel 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#focusInSelector: 						#showHelpFor: ) 					#tabable: false 					#hasCharacterOrientedLabel: false 					#defaultable: true 					#enabledImage: #saveIcon ) 				#(#{Aragon.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragExitSelector 						#dropExitWith: #dragEnterSelector 						#dropEnterWith: #dragStartSelector 						#dragFrom: #dragOkSelector 						#canDragFrom: #dropSelector 						#dropWith: #dragOverSelector 						#dropOverWith: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 32 0 0 1.0 -22 1 ) 					#name: #parcels 					#model: #parcels 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #browseParcel ) 					#menu: #parcelMenu 					#style: #'ParcelBrowser.Hierarchy' 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>Aragon.GaugeExample class</class-id> <category>interface specs</category><body package="Aragon.Examples">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Gauge Examples' 			#bounds: #(#{Graphics.Rectangle} 640 512 1007 832 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.GaugeSpec} 					#layout: #(#{Graphics.Rectangle} 55 91 314 92 ) 					#flags: 0 					#orientation: #horizontal ) 				#(#{Aragon.GaugeSpec} 					#layout: #(#{Graphics.LayoutFrame} 44 0 44 0 -44 1 60 0 ) 					#model: #progress 					#orientation: #horizontal 					#start: 0 					#stop: 100 					#style: #discrete 					#isProgressBar: true ) 				#(#{Aragon.GaugeSpec} 					#layout: #(#{Graphics.Rectangle} 62 150 77 295 ) 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #green ) ) 					#model: #gauge1 					#orientation: #vertical 					#start: 100 					#stop: 0 ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 24 0 14 0 -24 1 114 0 ) 					#label: 'Progress Indicator' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -120 1 72 0 -44 1 98 0 ) 					#model: #resetProgress 					#label: 'Reset' 					#defaultable: true ) 				#(#{Aragon.GaugeSpec} 					#layout: #(#{Graphics.Rectangle} 127 206 329 221 ) 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #yellow ) ) 					#model: #gauge2 					#orientation: #horizontal 					#start: 0 					#stop: 1 					#style: #continuous ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.Rectangle} 127 227 329 251 ) 					#model: #gauge2 					#orientation: #horizontal 					#start: 0 					#stop: 1 					#step: 0.01 ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.Rectangle} 80 150 96 295 ) 					#model: #gauge1 					#orientation: #vertical 					#start: 100 					#stop: -100 					#step: -10 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 42 125 98 146 ) 					#model: #gauge1 					#alignment: #center 					#isReadOnly: true 					#type: #number 					#formatString: '$#,##0;[Red]-$#,##0' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 198 186 253 204 ) 					#flags: 0 					#model: #gauge2 					#alignment: #center 					#isReadOnly: true 					#type: #number 					#formatString: '0%' ) 				#(#{Aragon.GaugeSpec} 					#layout: #(#{Graphics.Rectangle} 44 150 59 295 ) 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #red ) ) 					#model: #gauge1 					#orientation: #vertical 					#start: -100 					#stop: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -198 1 72 0 -122 1 98 0 ) 					#model: #simulateProgress 					#label: 'Start' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Aragon.PopupTreeView class</class-id> <category>interface specs</category><body package="Aragon.Examples">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Unlabeled Canvas' 			#bounds: #(#Rectangle 352 313 632 603 ) 			#colors: 			#(#LookPreferences 				#setForegroundColor: nil 				#setBackgroundColor: #(#ColorValue #black ) 				#setSelectionForegroundColor: nil 				#setSelectionBackgroundColor: nil 				#setBorderColor: nil ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#{Aragon.TreeViewSpec} 					#layout: #(#LayoutFrame 1 0 1 0 -1 1 -1 1 ) 					#flags: 5 					#useModifierKeys: true 					#selectionType: #highlight 					#displayImages: true 					#displayLines: true 					#displayButtons: true ) ) ) )</body></methods><methods><class-id>Aragon.World class</class-id> <category>interface specs</category><body package="Aragon.Examples">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'The World' 			#min: #(#Point 291 153 ) 			#bounds: #(#Rectangle 495 436 786 589 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#ArbitraryComponentSpec 					#layout: #(#LayoutFrame -130 0.5 -61 0.5 130 0.5 59 0.5 ) ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 0 0.5 0.5 0.5 ) 					#name: #fontIcon 					#label: #'@World.bmp' 					#style: #Special 					#hasCharacterOrientedLabel: false ) ) ) )</body></methods><methods><class-id>Aragon.CardViewExample1 class</class-id> <category>interface specs</category><body package="Aragon.Examples">canvasSpec	"UIPainter new openOnClass: self andSelector: #canvasSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'CardView Example 1' 			#bounds: #(#Rectangle 443 396 838 628 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 4 0 4 0 -4 1 -4 1 ) 					#isOpaque: true 					#model: #classes 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body><body package="Aragon.Examples">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'CardView Example'  			#bounds: #(#{Graphics.Rectangle} 443 379 838 611 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.CardViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 4 0 -5 1 -5 1 ) 					#name: #tabs 					#flags: 8 					#model: #tabs 					#tabable: true 					#style: #Label ) ) ) )</body></methods><methods><class-id>Aragon.SimpleFileBrowser class</class-id> <category>interface specs</category><body package="Aragon.Examples">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'A Simple File Browser' 			#bounds: #(#{Graphics.Rectangle} 640 512 1242 817 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 7 0 -7 1 -7 1 ) 					#flags: 15 					#model: #tree 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #selectionChanged ) 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>Aragon.SimpleClassBrowser class</class-id> <category>interface specs</category><body package="Aragon.Examples">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Simple Class Browser' 			#bounds: #(#{Graphics.Rectangle} 640 512 990 804 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 9 0 -7 1 -7 1 ) 					#model: #classes 					#menu: #classesMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>Aragon.SimpleClassBrowser class</class-id> <category>resources</category><body package="Aragon.Examples">classesMenu	"MenuEditor new openOnClass: self andSelector: #classesMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: 'Find Class...\b' 				#nameKey: #findClass 				#value: #findClass ) 			#(#MenuItem 				#rawLabel: 'Add ...' 				#value: #addEntry ) 			#(#MenuItem 				#rawLabel: 'Remove' 				#value: #removeEntry ) 			#(#MenuItem 				#rawLabel: 'Expand' 				#value: #expand ) 			#(#MenuItem 				#rawLabel: 'Collapse' 				#value: #collapse ) 			#(#MenuItem 				#rawLabel: 'Expand/Collapse Subtree' 				#value: #toggleExpandSubtree ) 			#(#MenuItem 				#rawLabel: 'Expand All' 				#value: #expandAll ) ) #(1 2 3 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.ChangeSetBrowser class</class-id> <category>interface specs</category><body package="Aragon.Examples">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Changes Set' 			#bounds: #(#{Graphics.Rectangle} 640 512 990 804 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragStartSelector 						#dragFrom: #dragOkSelector 						#canDragFrom: ) 					#layout: #(#{Graphics.LayoutFrame} 7 0 2 0 -7 1 -14 1 ) 					#name: #changes 					#model: #changes 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #selectionChanged 						#doubleClickSelector: #browseSelection ) 					#menu: #changesMenu 					#useModifierKeys: true 					#selectionType: #highlight 					#linesAtRoot: true ) ) ) )</body></methods><methods><class-id>Aragon.ChangeSetBrowser class</class-id> <category>resources</category><body package="Aragon.Examples">changesMenu	"MenuEditor new openOnClass: self andSelector: #changesMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Browse\b' 				#nameKey: #browseSelection 				#value: #browseSelection ) 			#(#MenuItem 				#rawLabel: '&amp;Remove' 				#value: #removeSelection ) 			#(#MenuItem 				#rawLabel: '&amp;Refresh' 				#value: #refreshView ) ) #(2 1 ) nil ) decodeAsLiteralArray</body><body package="Aragon.Examples">menuBar	"MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;ChangeSet' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Browse Selected Entry\b' 							#value: #browseSelection ) 						#(#MenuItem 							#rawLabel: 'Default &amp;Inspector' 							#value: #defaultInspect ) 						#(#MenuItem 							#rawLabel: '&amp;Empty...' 							#nameKey: #emptyChangeSet 							#value: #emptyChangeSet ) 						#(#MenuItem 							#rawLabel: 'File &amp;In...' 							#value: #fileIn ) 						#(#MenuItem 							#rawLabel: 'File &amp;Out...' 							#value: #fileOut 							#shortcutKeyCharacter: $f ) ) #(3 2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;View' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Refresh\b' 							#value: #refreshView ) ) #(1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.TextEditor class</class-id> <category>interface specs</category><body package="Aragon.Examples">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#properties: 			#(#PropertyListDictionary #dragOverSelector 				#dropOver: #dropSelector 				#dropWith: ) 			#label: 'Text Editor' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 537 459 1063 822 ) 			#flags: 4 			#menu: #mainMenu 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#InputFieldSpec 					#layout: #(#LayoutFrame 5 0 -16 1 -15 1 0 1.0 ) 					#flags: 0 					#model: #status 					#style: #('Arial' #italic 15 ) 					#isReadOnly: true ) 				#(#TextEditorSpec 					#layout: #(#LayoutFrame 0 0 1 0 0 1.0 -19 1 ) 					#name: #text 					#isOpaque: true 					#model: #text 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#requestValueChangeSelector: #saveFile ) 					#tabable: true 					#menu: #textMenu 					#style: #'TextEditor.Contents' ) ) ) )</body></methods><methods><class-id>Aragon.TextEditor class</class-id> <category>resources</category><body package="Aragon.Examples">mainMenu	"MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;File' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;New' 							#value: #newFile 							#shortcutKeyCharacter: $n ) 						#(#MenuItem 							#rawLabel: '&amp;Open ...' 							#value: #openFile 							#shortcutKeyCharacter: $o ) 						#(#MenuItem 							#rawLabel: '&amp;Save' 							#value: #saveFile 							#shortcutKeyCharacter: $s ) 						#(#MenuItem 							#rawLabel: 'Save &amp;as ...' 							#value: #saveFileAs ) 						#(#MenuItem 							#rawLabel: '&amp;Print' 							#value: #hardcopy 							#shortcutKeyCharacter: $p ) 						#(#MenuItem 							#rawLabel: 'E&amp;xit' 							#value: #closeRequest 							#shortcutKeyCharacter: $q ) ) #(4 2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Edit' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Undo' 							#value: #undo 							#shortcutKeyCharacter: $Z ) 						#(#MenuItem 							#rawLabel: '&amp;Again' 							#value: #again 							#shortcutKeyCharacter: $A ) 						#(#MenuItem 							#rawLabel: '&amp;Cut' 							#value: #cut 							#shortcutKeyCharacter: $X ) 						#(#MenuItem 							#rawLabel: 'C&amp;opy' 							#value: #copySelection 							#shortcutKeyCharacter: $C ) 						#(#MenuItem 							#rawLabel: '&amp;Paste' 							#value: #paste 							#shortcutKeyCharacter: $V ) 						#(#MenuItem 							#rawLabel: '&amp;Find ...' 							#value: #find 							#shortcutKeyCharacter: $F ) 						#(#MenuItem 							#rawLabel: '&amp;Replace ...' 							#value: #replace 							#shortcutKeyCharacter: $R ) ) #(2 3 2 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Code' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Do it' 							#value: #doIt ) 						#(#MenuItem 							#rawLabel: '&amp;Print it' 							#value: #printIt ) 						#(#MenuItem 							#rawLabel: '&amp;Explain it' 							#value: #explain ) 						#(#MenuItem 							#rawLabel: '&amp;Inspect it ...' 							#value: #inspectIt 							#shortcutKeyCharacter: $I ) ) #(4 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Help' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: 'Contents ...' 							#value: #helpContents ) 						#(#MenuItem 							#rawLabel: 'About ...' 							#value: #helpAbout ) ) #(1 1 ) nil ) ) ) #(4 ) nil ) decodeAsLiteralArray</body><body package="Aragon.Examples">textMenu	"MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;Find ...' 				#value: #find 				#shortcutKeyCharacter: $F 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Replace ...' 				#value: #replace 				#shortcutKeyCharacter: $R 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Again' 				#value: #again 				#shortcutKeyCharacter: $A 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Undo' 				#value: #undo 				#shortcutKeyCharacter: $Z 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: 'Cu&amp;t' 				#value: #cut 				#shortcutKeyCharacter: $X 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Copy' 				#value: #copySelection 				#shortcutKeyCharacter: $C 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Paste' 				#value: #paste 				#shortcutKeyCharacter: $V 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Do it' 				#value: #doIt ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Print it' 				#value: #printIt ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Inspect...' 				#value: #inspectIt 				#shortcutKeyCharacter: $I 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Browse...' 				#nameKey: #browseSymbol 				#value: #browseSymbol ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Explain...' 				#nameKey: #explain 				#value: #explain ) ) #(2 2 3 5 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.AragonMenuEditor class</class-id> <category>interface specs</category><body package="Aragon.Examples">_detailSlice	"UIPainter new openOnClass: self andSelector: #detailSlice"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Unlabeled Canvas' 			#min: #(#Point 256 166 ) 			#bounds: #(#Rectangle 772 608 1028 832 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#Point 15 57 ) 					#label: 'Class' ) 				#(#LabelSpec 					#layout: #(#Point 15 83 ) 					#label: 'Selector' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame -129 1 5 0 -5 1 30 0 ) 					#name: #shortCutChar 					#model: #shortCutChar 					#numChars: 1 ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 100 0 51 0 -5 1 76 0 ) 					#name: #labelImageClassName 					#model: #labelImageClassName 					#type: #symbol ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 100 0 82 0 -5 1 107 0 ) 					#name: #labelImageSelector 					#model: #labelImageSelector 					#type: #symbol ) 				#(#LabelSpec 					#layout: #(#Point 5 5 ) 					#label: 'Shortcut character:' ) 				#(#LabelSpec 					#layout: #(#Point 5 31 ) 					#label: 'Label image:' ) ) ) )</body><body package="Aragon.Examples">detailSlice	"Tools.UIPainter new openOnClass: self andSelector: #detailSlice"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#min: #(#{Core.Point} 256 166 ) 			#bounds: #(#{Graphics.Rectangle} 512 383 768 607 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 63 0 -5 1 154 0 ) 					#label: 'Label Image' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 27 0 93 0 ) 					#label: 'Class:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 15 0 124 0 ) 					#label: 'Selector:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 30 0 0 1 ) 					#label: 'Shortcut Character:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 8 0 188 0 0 1 ) 					#label: 'Help Text:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 5 0 57 0 0 1 ) 					#label: 'Enablement Selector:' ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -130 1 14 0 -5 1 33 0 ) 					#name: #shortCutChar 					#model: #shortCutChar 					#menu: #inputBaseMenu 					#isReadOnly: false 					#comboList: #functionKeys ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -130 1 41 0 -5 1 60 0 ) 					#name: #enablementSelector 					#model: #enablementSelector 					#type: #symbol ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 91 0 -15 1 116 0 ) 					#name: #labelImageClassName 					#flags: 0 					#majorKey: #{Tools.EntryWithPasteButtonModule} 					#minorKey: #windowSpec 					#clientKey: #labelImageClassName ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 122 0 -15 1 147 0 ) 					#name: #labelImageSelector 					#model: #labelImageSelector 					#type: #symbol ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 100 0 163 0 -5 1 188 0 ) 					#model: #helpText ) ) ) )</body></methods><methods><class-id>Aragon.NdsFileBrowser class</class-id> <category>interface specs</category><body package="Aragon.Examples">optionsSpec	"UIPainter new openOnClass: self andSelector: #optionsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'NdsTreeView - Options' 			#min: #(#{Core.Point} 196 134 ) 			#max: #(#{Core.Point} 196 134 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 836 646 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 48 42 ) 					#name: #showImages 					#model: #showImages 					#label: 'Show Images' 					#style: #DataSetLabel ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 48 81 ) 					#name: #linesAtRoot 					#model: #linesAtRoot 					#label: 'Lines At Root' 					#style: #DataSetLabel ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 48 23 ) 					#name: #showButtons 					#model: #showButtons 					#label: 'Show Buttons' 					#style: #DataSetLabel ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 48 62 ) 					#name: #showLines 					#model: #showLines 					#label: 'Show Lines' 					#style: #DataSetLabel ) ) ) )</body><body package="Aragon.Examples">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'A Simple File Browser' 			#bounds: #(#{Graphics.Rectangle} 640 512 1242 817 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.NewDataSetSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 6 0 -11 1 -18 1 ) 					#name: #tree 					#model: #tree 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#labelIsImage: false 							#width: 17 							#rendererType: #rowSelector 							#editorType: #rowSelector 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #rowx 							#label: 'Name' 							#labelIsImage: false 							#width: 387 							#rendererType: #Text 							#editorType: #TreeView 							#font: #DataSetEntries 							#alignment: #(true true true true ) 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row fileSize' 							#label: 'Size' 							#labelIsImage: false 							#width: 78 							#rendererType: #Text 							#editorType: #InputField 							#font: #DataSetEntries 							#alignment: #right 							#type: #number 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #'row isDirectory' 							#label: 'is Dir' 							#labelIsImage: false 							#width: 80 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#type: #boolean 							#noScroll: false 							#formatString: '' ) ) 					#multipleSelections: true 					#useModifierKeys: true ) ) ) )</body></methods><methods><class-id>Aragon.NdsFileBrowser class</class-id> <category>resources</category><body package="Aragon.Examples">menuBar	"MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;File' 				#nameKey: #productMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Edit' 							#value: #startEditing ) 						#(#MenuItem 							#rawLabel: '&amp;Browse' 							#value: #stopEditing ) 						#(#MenuItem 							#rawLabel: '&amp;Quit' 							#value: #closeRequest 							#shortcutKeyCharacter: $q ) ) #(2 1 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;View' 				#nameKey: #viewMenu 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Options...' 							#nameKey: #showOptions 							#value: #showOptions ) ) #(1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.CardViewExample3 class</class-id> <category>interface specs</category><body package="Aragon.Examples">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'CardView Example' 			#bounds: #(#{Graphics.Rectangle} 640 512 1035 744 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.CardViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 4 0 -4 1 -33 1 ) 					#name: #tabs 					#flags: 8 					#model: #tabs 					#tabable: true 					#style: #Label 					#cachePages: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -181 1 -27 1 -95 1 -4 1 ) 					#model: #closeRequest 					#label: 'OK' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -91 1 -27 1 -5 1 -4 1 ) 					#model: #closeRequest 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Aragon.ResizerExample class</class-id> <category>interface specs</category><body package="Aragon.Examples">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1144 786 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.SequenceViewSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -4 0.33 0 1 ) 							#name: #w1 							#isOpaque: true 							#model: #classNames 							#useModifierKeys: true 							#selectionType: #highlight ) 						#(#{UI.CompositeSpecCollection} 							#collection: #(								#(#{UI.TextEditorSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 90 0 ) 									#name: #w21 									#model: #text21 									#tabRequiresControl: true ) 								#(#{UI.TextEditorSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 92 0 0 1 0 1 ) 									#name: #w22 									#model: #text22 									#tabRequiresControl: true ) 								#(#{Aragon.ResizerSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0 88 0 0 1 94 0 ) 									#widget1: #w21 									#widget2: #w22 									#orientation: #horizontal ) ) 							#compositeSpec: 							#(#{UI.CompositeSpec} 								#layout: #(#{Graphics.LayoutFrame} 4 0.33 0 0 0 1 0 1 ) 								#name: #w2 ) ) 						#(#{Aragon.ResizerSpec} 							#layout: #(#{Graphics.LayoutFrame} -6 0.33 0 0 6 0.33 0 1 ) 							#widget1: #w1 							#widget2: #w2 ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 7 0 29 0 -7 1 -19 1 ) ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 6 6 ) 					#label: 'Drag the ridges between the text fields:' ) ) ) )</body></methods><methods><class-id>Aragon.NewFileBrowser class</class-id> <category>resources</category><body package="Aragon.Examples">hierarchyMenu	"MenuEditor new openOnClass: self andSelector: #hierarchyMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;Delete...' ) 			#(#MenuItem 				#rawLabel: '&amp;Rename...' ) 			#(#MenuItem 				#rawLabel: '&amp;Properties' ) 			#(#MenuItem 				#rawLabel: 'Cu&amp;t' 				#nameKey: #cutFile 				#value: #cutFile 				#shortcutKeyCharacter: $x ) 			#(#MenuItem 				#rawLabel: '&amp;Copy' 				#nameKey: #copyFile 				#value: #copyFile 				#shortcutKeyCharacter: $c ) ) #(3 2 ) nil ) decodeAsLiteralArray</body><body package="Aragon.Examples">listMenu	"Tools.MenuEditor new openOnClass: self andSelector: #listMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;Open' 				#nameKey: #openFile 				#value: #openFile ) 			#(#{UI.MenuItem} 				#rawLabel: 'Open in E&amp;xplorer' 				#enabled: false 				#nameKey: #openInShell 				#value: #openInShell ) 			#(#{UI.MenuItem} 				#rawLabel: 'Open In' 				#nameKey: #openIn 				#value: #openIn 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Text Editor' 							#nameKey: #openInTextEditor 							#value: #openInTextEditor ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Change List' 							#nameKey: #openInChangeList 							#value: #openInChangeList ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Rename...' 				#nameKey: #renameFile 				#value: #renameFile ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Delete...' 				#nameKey: #removeFile 				#value: #removeFile ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;File In' 				#nameKey: #fileIn 				#value: #fileIn ) 			#(#{UI.MenuItem} 				#rawLabel: 'Cu&amp;t' 				#nameKey: #cutFile 				#value: #cutFile 				#shortcutKeyCharacter: $x 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Copy' 				#nameKey: #copyFile 				#value: #copyFile 				#shortcutKeyCharacter: $c 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Paste' 				#nameKey: #pasteFile 				#value: #pasteFile 				#shortcutKeyCharacter: $v 				#shortcutModifiers: 8 ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Properties' 				#nameKey: #showProperties 				#value: #showProperties ) ) #(3 3 3 1 ) nil ) decodeAsLiteralArray</body><body package="Aragon.Examples">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;New' 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: '&amp;Folder' 										#nameKey: #createFolder 										#value: #createFolder 										#shortcutKeyCharacter: $d 										#shortcutModifiers: 8 ) 									#(#{UI.MenuItem} 										#rawLabel: '&amp;Text File' 										#nameKey: #createTextFile 										#value: #createTextFile ) ) #(2 ) nil ) ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Go To...' 							#nameKey: #goTo 							#value: #goTo 							#shortcutKeyCharacter: $g 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Delete...' ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Rename...' ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Properties' ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Close' 							#nameKey: #closeRequest 							#value: #closeRequest 							#shortcutKeyCharacter: $q 							#shortcutModifiers: 8 ) ) #(2 3 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Edit' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Undo' 							#nameKey: #undo 							#value: #undo 							#shortcutKeyCharacter: $z 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cu&amp;t' 							#nameKey: #cutFile 							#value: #cutFile 							#shortcutKeyCharacter: $x 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Copy' 							#nameKey: #copyFile 							#value: #copyFile 							#shortcutKeyCharacter: $c 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Paste' 							#nameKey: #pasteFile 							#value: #pasteFile 							#shortcutKeyCharacter: $v 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Select &amp;All' 							#nameKey: #selectAll 							#value: #selectAll 							#shortcutKeyCharacter: $a 							#shortcutModifiers: 8 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Invert Selection' 							#nameKey: #invertSelection 							#value: #invertSelection ) ) #(1 3 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;View' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Refresh' 							#nameKey: #refreshAll 							#value: #refreshAll ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Options...' 							#nameKey: #setupOptions 							#value: #setupOptions ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Help' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;About' 							#nameKey: #helpAbout 							#value: #helpAbout ) ) #(1 ) nil ) ) ) #(4 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Aragon.NewFileBrowser class</class-id> <category>interface specs</category><body package="Aragon.Examples">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'File Browser' 			#bounds: #(#{Graphics.Rectangle} 541 512 1280 806 ) 			#flags: 4 			#menu: #mainMenu 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragExitSelector 						#dropExitWith: #dragEnterSelector 						#dropEnterTree: #dropSelector 						#dropOnTree: #dragOverSelector 						#dropOverTree: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -1 0.3333 -20 1 ) 					#name: #hierarchy 					#model: #hierarchy 					#menu: #hierarchyMenu 					#multipleSelections: false 					#style: #DataSetEntries 					#useModifierKeys: true 					#selectionType: #highlight 					#linesAtRoot: true ) 				#(#{Aragon.NewDataSetSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragExitSelector 						#dropExitWith: #dragEnterSelector 						#dropEnterList: #dragStartSelector 						#dragFromList: #dropSelector 						#dropOnList: #dragOverSelector 						#dropOverList: ) 					#layout: #(#{Graphics.LayoutFrame} 1 0.3333 0 0 0 1 -20 1 ) 					#name: #entries 					#model: #entries 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #openFile ) 					#menu: #listMenu 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#model: #'selectedRow name' 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#requestFocusOutSelector: 								#renameFileWith: 								#requestValueChangeSelector: 								#renameFileWith: ) 							#label: 'Name' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 167 							#editorType: #InputField 							#font: #DataSetEntries 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #'selectedRow type' 							#label: 'Type' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 40 							#rendererType: #Text 							#editorType: #None 							#font: #DataSetEntries 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #'selectedRow fileSize' 							#label: 'Size' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 74 							#rendererType: #Text 							#editorType: #None 							#font: #DataSetEntries 							#alignment: #right 							#type: #number 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#model: #'selectedRow modified' 							#label: 'Modified' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 119 							#rendererType: #Text 							#editorType: #None 							#font: #DataSetEntries 							#type: #timestamp 							#noScroll: false 							#formatString: 'dd-mm-yy hh:mm:ss' ) 						#(#{UI.DataSetColumnSpec} 							#model: #'selectedRow attributesString' 							#label: 'Attributes' 							#labelFont: #DataSetLabel 							#labelIsImage: false 							#width: 70 							#rendererType: #Text 							#editorType: #None 							#font: #DataSetEntries 							#noScroll: false ) ) 					#multipleSelections: true 					#useModifierKeys: true ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>enhanced - Aragon</category><body package="Aragon.Examples">toolsAragon	&lt;menuItem: 'Aragon Tools'		icon: #(#{UI.ResourceRetriever} #{Aragon.AragonIcon} #aragon)		nameKey: #AragonTools		menu: #(#launcherToolBar)		position: 4711.01&gt;	| menu choice |	menu := ((menuBar value atNameKey: #tools) submenu atNameKey: #aragon) submenu.	choice := menu startUp.	(choice isKindOf: MenuItem) ifTrue: [choice := choice value].	choice isSymbol ifTrue: [self perform: choice].</body><body package="Aragon.Examples">toolsAragonChangeSetBrowser	&lt;menuItem: '&amp;Change Sets'		nameKey: nil		menu: #(#menuBar #tools #aragon)		position: 1.5&gt;	self openAragonApp: #ChangeSetBrowser</body><body package="Aragon.Examples">toolsAragonExamplesBrowser	&lt;menuItem: '&amp;Examples...'		nameKey: nil		menu: #(#menuBar #tools #aragon)		position: 2.1&gt;	self openAragonApp: #AragonExamplesBrowser</body><body package="Aragon.Examples">toolsAragonFileBrowser	&lt;menuItem: '&amp;New File Browser'		nameKey: nil		menu: #(#menuBar #tools #aragon)		position: 1.2&gt;	self openAragonApp: #NewFileBrowser</body><body package="Aragon.Examples">toolsAragonParcelBrowser	&lt;menuItem: '&amp;Parcel Browser'		nameKey: nil		menu: #(#menuBar #tools #aragon)		position: 1.1&gt;	self openAragonApp: #NewParcelBrowser</body><body package="Aragon.Examples">toolsAragonSubMenu	&lt;submenu: 'A&amp;ragon'		nameKey: #aragon		menu: #(#menuBar #tools)		position: 12.0&gt;	Aragon.AragonStuff explore</body><body package="Aragon.Examples">toolsAragonTextEditor	&lt;menuItem: '&amp;Text Editor'		nameKey: nil		menu: #(#menuBar #tools #aragon)		position: 1.4&gt;	self openAragonApp: #TextEditor</body></methods><initialize><class-id>Aragon.ClassHierarchyBrowser</class-id></initialize><initialize><class-id>Aragon.AragonExamplesBrowser</class-id></initialize><initialize><class-id>Aragon.NewDatasetExample</class-id></initialize><initialize><class-id>Aragon.CardViewExample</class-id></initialize><initialize><class-id>Aragon.ParcelBrowser</class-id></initialize><initialize><class-id>Aragon.AragonMenuEditor</class-id></initialize><initialize><class-id>Aragon.NewFileBrowser</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>MenuEditor</name><environment>Tools</environment><super>Tools.UIPainterWatcher</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetClass targetSelector menu menuBar menuBarView menuList currentItem modified properties labelPasteBuffer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Tools</category><attributes><package>UIPainter</package></attributes></class></st-source>