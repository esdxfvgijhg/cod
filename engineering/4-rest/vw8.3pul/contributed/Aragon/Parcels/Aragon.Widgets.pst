<?xml version="1.0"?><st-source><!-- Name: Aragon.WidgetsComment: Provides several additional widgets.This code component installs Smalltalk namespace references to the Aragon widget specs on loading.  Before saving a new version of this as package or as parcel, execute	Aragon.AragonSpecsInstaller uninstallWidgetSpecsIf you plan to continue using the image from which you saved, execute	Aragon.AragonSpecsInstaller installWidgetSpecsafter saving.  (The pre-unload block of this code component calls #uninstallWidgetSpecs but arguably this is needless, as specific classes' #obsolete calls do the same thing;  it may improve unloadings robustness.)Copyright © 2000, Daniel J. HutzelCopyright © 2008, Reinout Heeck, Henrik JohansenCopyright © 2010, Niall Ross, Alan KnightAll rights reserved.Public LicenseUpon your acceptance to the terms and conditions of this Agreement, you are granted a nonexclusive license to use and distribute the Software for non-commercial or commercial purposes.DEFINITIONS. "Copyright Holder" is whoever is named in the copyright or copyrights for the Software. "Software" refers to the software sources, binaries, documentation and other accompanying files. "Contribution" means either the Software originally provided by the Copyright Holder, or modifications and additions by other Contributors.GRANT OF LICENSE. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimers in the documentation and/or other materials provided with the distribution.* Neither name of the Copyright Holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.COMMERCIAL DISTRIBUTION. You may distribute this Software in aggregate with other (possibly commercial) programs as part of a larger (possibly commercial) software distribution provided that you do not advertise this Package as a product of your own.You may charge a reasonable copying fee for any distribution of this Package. You may charge any fee you choose for support of this Package. You may not charge a fee for this Package itself.DISCLAIMER. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.DevelopmentPrerequisites: #(#(#any 'Aragon.Basics' '') #(#any 'Aragon.Shared' '') #(#any 'ImageReaders' '') #(#any 'Lens-Runtime' '') #(#any 'UIPainter' ''))HideSource: falsePackageName: Aragon.WidgetsParcel: #('Aragon.Widgets')ParcelName: Aragon.WidgetsPrerequisiteDescriptions: #(#(#name 'Aragon.Basics') #(#name 'Aragon.Shared') #(#name 'ImageReaders') #(#name 'Lens-Runtime') #(#name 'UIPainter'))PrerequisiteParcels: #(#('Aragon.Basics' '') #('Aragon.Shared' '') #('ImageReaders' '') #('Lens-Runtime' '') #('UIPainter' ''))SaveSource: trueVersion: 8.3 - 1Pre-Unload Block: 	[:package | Aragon.AragonSpecsInstaller uninstallWidgetSpecs]Date: 9:32:51 AM September 16, 2016 --><time-stamp>From VisualWorks®, Pre-Release 8.3 (slm_testAR74030) of August 29, 2016 on September 16, 2016 at 9:32:51 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>AragonTreeNode</name><environment>Aragon</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subject displayString parent children type status icons </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.TreeView</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>IdentityTreeNode</name><environment>Aragon</environment><super>Aragon.AragonTreeNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.TreeView</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>TreeViewDirectorySelector</name><environment>Aragon</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>directories initialDirectory directory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.TreeView</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>AragonSpecsInstaller</name><environment>Aragon</environment><super>Tools.UIPalette</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.UISpecs</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>CardViewController</name><environment>Aragon</environment><super>UI.SelectController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.CardView</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>TreeAdaptor</name><environment>Aragon</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>roots childrenBlock dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.TreeView</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>PollingSelectionTracker</name><environment>Aragon</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controller cursorPoint index </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet.Trackers</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NewDataSetSpecColumnModel</name><environment>Aragon</environment><super>Tools.DataSetSpecColumnModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NewDataSetView</name><environment>Aragon</environment><super>Aragon.EnhancedSequenceView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>columns topOffset sortColumn showLines frozenEdge autoNewBlock defaultSortBlock allowForColumnDragging useDecoratedEditors showLineNumbers treeViewColumn </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>EnhancedGroupBoxSpec</name><environment>Aragon</environment><super>UI.GroupBoxSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bevel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Label</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>ToolbarButtonController</name><environment>Aragon</environment><super>UI.TriggerButtonController</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fireOnDown </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Buttons</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NDSInputFieldView</name><environment>Aragon</environment><super>UI.InputFieldView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet.Editors</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>GaugeView</name><environment>Aragon</environment><super>UI.SimpleView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>range orientation style canShrink pos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Gauge</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>TreeView</name><environment>Aragon</environment><super>Aragon.EnhancedSequenceView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>imageList displayLines displayButtons leftOffset linesAtRoot pixmaps </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.TreeView</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NewDataSetColumn</name><environment>Aragon</environment><super>UI.DataSetColumn</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view renderer labelVisual flags </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NDSRenderer4</name><environment>Aragon</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view </inst-vars><class-inst-vars></class-inst-vars><imports>			private TextConstants.*			</imports><category>Aragon.Widgets.NewDataSet.Renderer</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NDSRenderer4CheckBoxes</name><environment>Aragon</environment><super>Aragon.NDSRenderer4</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet.Renderer</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>ResizerView</name><environment>Aragon</environment><super>UI.SimpleView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>widget1 widget2 orientation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Resizer</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NDSRenderer4TextFields</name><environment>Aragon</environment><super>Aragon.NDSRenderer4</super><private>false</private><indexed-type>none</indexed-type><inst-vars>displayScanner </inst-vars><class-inst-vars></class-inst-vars><imports>			private TextConstants.*			</imports><category>Aragon.Widgets.NewDataSet.Renderer</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>ResizerSpec</name><environment>Aragon</environment><super>UI.WidgetSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>widget1 widget2 orientation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Resizer</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>StoredImage</name><environment>Aragon</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filename image </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Stored Images</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>StoredOpaqueImage</name><environment>Aragon</environment><super>Aragon.StoredImage</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shapefile </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Stored Images</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>LensDataSetManager</name><environment>Aragon</environment><super>Lens.LensDataManager</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet-ObjectLens</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>EnhancedActionButtonSpec</name><environment>Aragon</environment><super>UI.ActionButtonSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>enabledImage disabledImage backgroundImage labelPos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Buttons</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>ToolbarButtonSpec</name><environment>Aragon</environment><super>Aragon.EnhancedActionButtonSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Buttons</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NewDataSetSpecColumnDetailsModel</name><environment>Aragon</environment><super>Tools.DataSetSpecColumnDetailsModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>displayImages displayLines displayButtons linesAtRoot </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>CardScrollerButton</name><environment>Aragon</environment><super>UI.ActionButtonView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>scrollValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.CardView</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NDSRenderer</name><environment>Aragon</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>view sequence bounds clippingBounds frozenEdge firstColumnIndex gc1 gc2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet.Renderer</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NewDataSetSpec</name><environment>Aragon</environment><super>UI.DataSetSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>useModifierKeys style useDecoratedEditors initiallyUseEditingMode showHorizontalLines showVerticalLines showLabels allowForSorting allowForColumnDragging </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NDSInputFieldSpec</name><environment>Aragon</environment><super>UI.InputFieldSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet.Editors</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>EnhancedLabel</name><environment>Aragon</environment><super>UI.PassiveLabel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Label</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>CardViewSpec</name><environment>Aragon</environment><super>UI.WidgetSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>style subcanvas labelSuppliedByApplication buildPages cachePages </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.CardView</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NewDataSetScrollWrapper</name><environment>Aragon</environment><super>UI.DataSetScrollWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NewColumnTracker</name><environment>Aragon</environment><super>Aragon.PollingSelectionTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label offset gc backingStore labelPixmap originalIndex recentPt </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet.Trackers</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>TreeController</name><environment>Aragon</environment><super>Aragon.NSEmulatedSequenceController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private TextConstants.*			</imports><category>Aragon.Widgets.TreeView</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>TreeViewSpec</name><environment>Aragon</environment><super>UI.SequenceViewSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>displayImages displayLines displayButtons linesAtRoot </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.TreeView</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>ResizerController</name><environment>Aragon</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pixmap backingStore offset recentPt </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Resizer</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NewRowVisual</name><environment>Aragon</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bounds label frozen inTransition </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet.Visuals</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>SelectionInTree</name><environment>Aragon</environment><super>UI.MultiSelectionInList</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.TreeView</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>TextStyle</name><environment>Aragon</environment><super>Graphics.TextAttributes</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private TextConstants.*			</imports><category>Aragon.Widgets.Fonts Convenient</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NewColumnResizeTracker</name><environment>Aragon</environment><super>Aragon.PollingSelectionTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>left </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet.Trackers</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>EnhancedActionButtonView</name><environment>Aragon</environment><super>UI.ActionButtonView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>enabledImage disabledImage labelPos </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Buttons</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>EmbeddedTreeController</name><environment>Aragon</environment><super>Aragon.TreeController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet.Renderer</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>EnhancedLabelSpec</name><environment>Aragon</environment><super>UI.LabelSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Label</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>EmbeddedTreeView</name><environment>Aragon</environment><super>Aragon.TreeView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dataSetView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet.Renderer</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>Font</name><environment>Aragon</environment><super>Graphics.CharacterAttributes</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Fonts Convenient</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>MultipleParentTreeAdaptor</name><environment>Aragon</environment><super>Aragon.TreeAdaptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.TreeView</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>GaugeSpec</name><environment>Aragon</environment><super>UI.SliderSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>style isProgressBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Gauge</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NewDataSetController</name><environment>Aragon</environment><super>Aragon.NSEmulatedSequenceController</super><private>false</private><indexed-type>none</indexed-type><inst-vars>edge editor mode editCell </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>ToolbarButtonView</name><environment>Aragon</environment><super>Aragon.EnhancedActionButtonView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hasCursor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.Buttons</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>CardViewLabelsConstructor</name><environment>Aragon</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>specChannel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.CardView</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>NewColumnLabelVisual</name><environment>Aragon</environment><super>Aragon.NewRowVisual</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sortIndicator alignment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Widgets.NewDataSet.Visuals</category><attributes><package>Aragon.Widgets</package></attributes></class><class><name>CardView</name><environment>Aragon</environment><super>UI.SimpleView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sequence labels textStyle labelsHeight widths startIndex selectionChannel lastSelection scrollerButtons canScroll subcanvas buildPages pagesCache </inst-vars><class-inst-vars>insetOfText </class-inst-vars><imports></imports><category>Aragon.Widgets.CardView</category><attributes><package>Aragon.Widgets</package></attributes></class><shared-variable><name>AllowDoubleClickOnNodes</name><environment>Aragon.TreeController</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>UseWin95PopupPolicy</name><environment>Aragon.TreeController</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>DeselectIfNotOnLabel</name><environment>Aragon.TreeController</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>Styles</name><environment>Aragon.Font</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>ColumnResizeCursor</name><environment>Aragon.NewDataSetController</environment><private>false</private><constant>false</constant><category>resources</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>TabStyle</name><environment>Aragon.CardView</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>BackgroundColor</name><environment>Aragon.NewRowVisual</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>RecentSelections</name><environment>Aragon.TreeViewDirectorySelector</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>PlusMinusImages</name><environment>Aragon.TreeView</environment><private>false</private><constant>false</constant><category>Globals</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>DefaultImageList</name><environment>Aragon.TreeView</environment><private>false</private><constant>false</constant><category>Globals</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>DisplayOpenFolderWhenSelectedOnly</name><environment>Aragon.TreeView</environment><private>false</private><constant>false</constant><category>Globals</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>OffsetForIndent</name><environment>Aragon.TreeView</environment><private>false</private><constant>false</constant><category>Globals</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>TargetPaint</name><environment>Aragon.NewDataSetView</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>Icons</name><environment>Aragon.NewDataSetView</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>LinesColor</name><environment>Aragon.NewDataSetView</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>MinCellWidth</name><environment>Aragon.NewDataSetView</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>ShapesPath</name><environment>Aragon.StoredOpaqueImage</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>Cursors</name><environment>Aragon.ResizerView</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>ImageCache</name><environment>Aragon.StoredImage</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>SearchPath</name><environment>Aragon.StoredImage</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>UserTextStyles</name><environment>Aragon.TextStyle</environment><private>false</private><constant>false</constant><category>Globals</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><shared-variable><name>FontAttributes</name><environment>Aragon.TextStyle</environment><private>false</private><constant>false</constant><category>Globals</category><attributes><package>Aragon.Widgets</package></attributes></shared-variable><methods><class-id>Aragon.AragonTreeNode</class-id> <category>testing</category><body package="Aragon.Widgets">&lt;= another	"Enables instances to be inserted in SortedCollections with default sortBlocks."	^self displayString &lt;= another displayString</body><body package="Aragon.Widgets">= aNodeOrAnObject	^aNodeOrAnObject == self or: [aNodeOrAnObject = subject]</body><body package="Aragon.Widgets">definitelyHasChildren	children isNil ifTrue: [^false].	children isEmpty ifTrue: [^false].	^true</body><body package="Aragon.Widgets">hasChildren	children isNil ifTrue: [^true].	children isEmpty ifTrue: [^false].	^true</body><body package="Aragon.Widgets">isCollapsed	^status == #collapsed</body><body package="Aragon.Widgets">isExpanded	^status == #expanded</body><body package="Aragon.Widgets">isTreeNode	^true</body></methods><methods><class-id>Aragon.AragonTreeNode</class-id> <category>accessing</category><body package="Aragon.Widgets">children	^children</body><body package="Aragon.Widgets">children: aCollectionOrNil 	aCollectionOrNil == nil ifTrue: [children := nil. ^self].	children := aCollectionOrNil 		collect: [:each | (self treeNodeFor: each) parent: self]</body><body package="Aragon.Widgets">displayString	"PUBLIC - Answer the string to display in the tree.	If my displayString has been explicitly set, use it, 	otherwise use my subject's displayString."	^displayString == nil ifTrue: [subject displayString] ifFalse: [displayString]</body><body package="Aragon.Widgets">displayString: aValue	displayString := aValue</body><body package="Aragon.Widgets">icon: anImage	icons := anImage -&gt; anImage</body><body package="Aragon.Widgets">icons	^icons</body><body package="Aragon.Widgets">icons: anAssociation	icons := anAssociation</body><body package="Aragon.Widgets">nodesPath	"Answer a collection with all the subjects of the receiver and all its parent nodes"	| answer p |	answer := OrderedCollection new.	p := self.	[p ~~ nil] whileTrue: [answer add: p. p := p parent].	^answer reverse</body><body package="Aragon.Widgets">nodesPathString	^self nodesPathStringWith: $.</body><body package="Aragon.Widgets">nodesPathStringWith: aDelimiter	| stream ancestors p |	ancestors := OrderedCollection new: 4.	p := self parent.	[p ~~ nil] whileTrue: [ancestors add: p. p := p parent].	stream := (String new: 100) writeStream.	ancestors		reverseDo: 			[:eachNode | 			stream nextPutAll: eachNode displayString.			stream nextPut: aDelimiter].	stream nextPutAll: self displayString.	^stream contents</body><body package="Aragon.Widgets">parent	^parent</body><body package="Aragon.Widgets">parent: aValue	parent := aValue</body><body package="Aragon.Widgets">path	"Answer a collection with all the subjects of the receiver and all its parent nodes"	| answer p |	answer := OrderedCollection new.	p := self.	[p ~~ nil] whileTrue: [answer add: p subject. p := p parent].	^answer reverse</body><body package="Aragon.Widgets">status	^status</body><body package="Aragon.Widgets">status: aValue	status := aValue</body><body package="Aragon.Widgets">subject	^subject</body><body package="Aragon.Widgets">subject: aValue	subject := aValue.</body><body package="Aragon.Widgets">type	^type</body><body package="Aragon.Widgets">type: aValue	type := aValue</body></methods><methods><class-id>Aragon.AragonTreeNode</class-id> <category>enumerating</category><body package="Aragon.Widgets">allChildNodesDo: aBlock 	self definitelyHasChildren ifTrue: [self children			do: 				[:each | 				aBlock value: each.				each allChildNodesDo: aBlock]]</body><body package="Aragon.Widgets">allChildNodesDo: aBlock indent: indent 	self definitelyHasChildren ifTrue: [self children			do: 				[:each | 				aBlock value: each value: indent.				each allChildNodesDo: aBlock indent: indent + 1]]</body><body package="Aragon.Widgets">allChildrenDo: aBlock 	self definitelyHasChildren ifTrue: [self children			do: 				[:each | 				aBlock value: each subject.				each allChildrenDo: aBlock]]</body><body package="Aragon.Widgets">allChildrenDo: aBlock indent: indent 	self definitelyHasChildren ifTrue: [self children			do: 				[:each | 				aBlock value: each subject value: indent.				each allChildrenDo: aBlock indent: indent + 1]]</body><body package="Aragon.Widgets">withAllChildNodesDo: aBlock	aBlock value: self.	(self definitelyHasChildren) ifTrue: [self children do: [:each | each withAllChildNodesDo: aBlock]]</body><body package="Aragon.Widgets">withAllChildNodesDo: aBlock indent: indent	aBlock value: self value: indent.	(self definitelyHasChildren) ifTrue: [self children do: [:each | each withAllChildNodesDo: aBlock indent: indent+1]]</body><body package="Aragon.Widgets">withAllChildrenDo: aBlock	aBlock value: self subject.	(self definitelyHasChildren) ifTrue: [self children do: [:each | each withAllChildrenDo: aBlock]]</body><body package="Aragon.Widgets">withAllChildrenDo: aBlock indent: indent	aBlock value: self subject value: indent.	(self definitelyHasChildren) ifTrue: [self children do: [:each | each withAllChildrenDo: aBlock indent: indent+1]]</body></methods><methods><class-id>Aragon.AragonTreeNode</class-id> <category>modifying</category><body package="Aragon.Widgets">addChild: aNodeOrAnObject	| newNode |	children isNil ifTrue: [children := OrderedCollection new] ifFalse: [	(children isKindOf: Array) ifTrue: [children := children asOrderedCollection]].	newNode := self treeNodeFor: aNodeOrAnObject.	children add: newNode.	newNode parent: self</body><body package="Aragon.Widgets">removeChild: aNode	self removeChild: aNode ifAbsent: [Collection notFoundError]</body><body package="Aragon.Widgets">removeChild: aNode ifAbsent: aBlock	(children isKindOf: ArrayedCollection) ifTrue: [children := children asOrderedCollection].	children remove: aNode ifAbsent: aBlock</body></methods><methods><class-id>Aragon.AragonTreeNode</class-id> <category>private</category><body package="Aragon.Widgets">setChildren: aCollectionOrNil 	children := aCollectionOrNil</body><body package="Aragon.Widgets">treeNodeFor: node	^(node isTreeNode)		ifTrue: [node]		ifFalse: [self species for: node]</body></methods><methods><class-id>Aragon.AragonTreeNode</class-id> <category>copying</category><body package="Aragon.Widgets">postCopy	parent := nil</body></methods><methods><class-id>Aragon.AragonTreeNode</class-id> <category>printing</category><body package="Aragon.Widgets">printOn: aStream	aStream nextPut: $[; nextPutAll: self displayString; nextPut: $]</body></methods><methods><class-id>Aragon.AragonTreeNode</class-id> <category>initialization</category><body package="Aragon.Widgets">hasChildren: aBoolean	aBoolean ifFalse: [children := #()].</body><body package="Aragon.Widgets">isLeaf: aBoolean	self isParent: aBoolean not</body><body package="Aragon.Widgets">isParent: aBoolean	self hasChildren: aBoolean.	type := aBoolean ifTrue: [#folder] ifFalse: [#leaf].</body></methods><methods><class-id>Aragon.AragonTreeNode</class-id> <category>converting</category><body package="Aragon.Widgets">asTreeNode	^self</body></methods><methods><class-id>Aragon.AragonTreeNode class</class-id> <category>instance creation</category><body package="Aragon.Widgets">for: anObject	^self for: anObject label: nil</body><body package="Aragon.Widgets">for: anObject label: aString 	^(super new) subject: anObject; displayString: aString; type: #folder; hasChildren: true; status: #collapsed</body><body package="Aragon.Widgets">new	^self error: 'Use #for: or #for:label: to create an instance of TreeNode'</body></methods><methods><class-id>Aragon.IdentityTreeNode</class-id> <category>testing</category><body package="Aragon.Widgets">= aNodeOrAnObject 	^aNodeOrAnObject == self or: [aNodeOrAnObject == subject]</body></methods><methods><class-id>Aragon.TreeViewDirectorySelector</class-id> <category>private</category><body package="Aragon.Widgets">childrenOf: aDirectory 	| answer dir |	answer := SortedCollection new.	(dir := aDirectory asFilename) directoryContents		do: 			[:each | 			| file |			file := dir construct: each.			(self isDirectory: file)				ifTrue: [answer add: (AragonTreeNode for: file label: each)]].	^answer</body><body package="Aragon.Widgets">expandUpTo: aFilename	| treeAdaptor path dir parent |	treeAdaptor := directories list.	path := OrderedCollection new.	dir := aFilename asFilename.	path add: dir.	[(parent := dir directory) ~= dir] whileTrue: [path addFirst: (dir := parent)].	path at: 1 put: path first asString asUppercase.	TreeAdaptor notFoundSignal handle: [:ex | treeAdaptor changed: #value] do: [treeAdaptor expandPath: path].	directories selection: aFilename asFilename</body><body package="Aragon.Widgets">getVolumes	^Filename volumes collect: [:each | each asTreeNode type: #disk]</body><body package="Aragon.Widgets">isDirectory: aFilename 	^OSErrorHolder errorSignal 		handle: [:ex | false]		do: [aFilename isDirectory]</body><body package="Aragon.Widgets">selectInitial: aDirectory	initialDirectory := aDirectory</body></methods><methods><class-id>Aragon.TreeViewDirectorySelector</class-id> <category>interface opening</category><body package="Aragon.Widgets">postOpenWith: aBuilder	directory value notNil ifTrue: [self expandUpTo: directory value].	super postOpenWith: aBuilder</body><body package="Aragon.Widgets">preBuildWith: aBuilder	aBuilder aspectAt: #recentSelections put: RecentSelections asValue</body></methods><methods><class-id>Aragon.TreeViewDirectorySelector</class-id> <category>actions</category><body package="Aragon.Widgets">selectEntry	self accept value: true</body><body package="Aragon.Widgets">selectionChanged	| s |	(s := directories selection) isNil ifTrue: [^self].	s := (s := s asString) copyReplaceFrom: 1 to: 1 with: (String with: s first asUppercase).	self directory value: s.</body><body package="Aragon.Widgets">synchronizeTreeView	builder keyboardProcessor setActive: (builder componentAt: #directories) widget controller.	self expandUpTo: directory value.</body></methods><methods><class-id>Aragon.TreeViewDirectorySelector</class-id> <category>aspects</category><body package="Aragon.Widgets">directories	^directories</body><body package="Aragon.Widgets">directory	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	directory isNil ifTrue: [directory := nil asValue].	^directory</body></methods><methods><class-id>Aragon.TreeViewDirectorySelector</class-id> <category>initialize-release</category><body package="Aragon.Widgets">initialize	| treeAdaptor |	treeAdaptor := TreeAdaptor new		childrenBlock: 			[:aDirectory | self childrenOf: aDirectory]; 		roots: self getVolumes.	directories := SelectionInList with: treeAdaptor.	super initialize</body></methods><methods><class-id>Aragon.TreeViewDirectorySelector class</class-id> <category>requests</category><body package="Aragon.Widgets">open	self requestDirectory</body><body package="Aragon.Widgets">requestDirectory 	"Prompt for a directory name.  Return an empty string if it fails."	^self requestDirectory: 'Select a directory'</body><body package="Aragon.Widgets">requestDirectory: message 	"Prompt for a directory name.  Return an empty string if it fails."	^self requestDirectory: message default: Filename defaultDirectory for: nil</body><body package="Aragon.Widgets">requestDirectory: message default: default 	"Prompt for a directory name.  Return an empty string if it fails."	^self requestDirectory: message default: default for: nil</body><body package="Aragon.Widgets">requestDirectory: message default: default for: aVisualOrNil	"Prompt for a directory name.  Return an empty string if it fails."	| builder instance |	instance := self new.	default notNil ifTrue: [instance directory value: default asString].	instance allButOpenFrom: (UISpecification from: self windowSpec) for: aVisualOrNil.	builder := instance builder.	message notNil ifTrue: [builder window label: message].	builder openDialogWithExtent: builder window extent.	^instance accept value 		ifTrue: 			[| answer | answer := instance directory value asString.			(RecentSelections includes: answer)				ifFalse: 					[RecentSelections addFirst: answer.					RecentSelections size &gt; 7 ifTrue: [RecentSelections removeLast]].			answer]		ifFalse: ['']</body></methods><methods><class-id>Aragon.TreeViewDirectorySelector class</class-id> <category>class initialization</category><body package="Aragon.Widgets">initialize	RecentSelections := OrderedCollection new</body></methods><methods><class-id>Aragon.AragonSpecsInstaller class</class-id> <category>class initialization</category><body package="Aragon.Widgets">installWidgetSpecs	Transcript cr; show: '[Aragon Widgets:]  Checking for uninstalled widget specs...'; cr; cr.	UISpecification allSubclassesDo: [:each | each shouldBeOnPalette 			ifTrue: [each installOnPalette]]</body><body package="Aragon.Widgets">obsolete	super obsolete.	self uninstallWidgetSpecs</body><body package="Aragon.Widgets">postLoad: aParcel	self installWidgetSpecs</body><body package="Aragon.Widgets">uninstallWidgetSpecs	Transcript cr; show: '[Aragon Widgets:]  Uninstalling widget specs...'; cr; cr.	UISpecification allSubclassesDo: [:each | each shouldBeOnPalette 			ifTrue: [each uninstall]]</body></methods><methods><class-id>Aragon.CardViewController</class-id> <category>event driven</category><body package="Aragon.Widgets">desiresFocus	^view desiresFocus</body><body package="Aragon.Widgets">redButtonPressedEvent: anEvent	self selectDownAt: (self sensor cursorPointFor: anEvent)</body><body package="Aragon.Widgets">yellowButtonPressedEvent: anEvent	| index |	index := (Menu labelArray: (view sequence collect: [:each | (each isKindOf: Association) ifTrue: [each key] ifFalse: [each]])) startUp.	index &gt; 0 ifTrue: [self selectAt: index]</body></methods><methods><class-id>Aragon.CardViewController</class-id> <category>control defaults</category><body package="Aragon.Widgets">selectAt: anIndex	| index |	index := anIndex.	index &lt; 1 ifTrue: [index := view labels size] ifFalse: [	index &gt; view labels size ifTrue: [index := 1]].	view selectionIndex == index ifTrue: [^self].	self requestValueChange		ifTrue: 			[view selectionIndex: index.			self valueChange.]</body><body package="Aragon.Widgets">selectDownAt: aPoint	| index |	aPoint y &lt; view labelsHeight ifFalse: [^self].	(index := view indexOfLabelAt: aPoint) isNil ifTrue: [^self].	self keyboardProcessor ifNotNil:		[:keyboardProcessor |		(keyboardProcessor requestActivationFor: self)			ifFalse: [^self]].	self selectAt: index.</body></methods><methods><class-id>Aragon.CardViewController</class-id> <category>keyboard</category><body package="Aragon.Widgets">processKeyboardEvent: anEvent	| ev keyboardProcessor |	ev := anEvent.	keyboardHook == nil ifFalse: [(ev := keyboardHook value: ev value: self) isNil ifTrue: [^self]].	ev keyValue == #Left ifTrue: [self selectAt: view selectionIndex - 1. ^self].	ev keyValue == #Right ifTrue: [self selectAt: view selectionIndex + 1. ^self].	ev keyValue == #PageUp ifTrue: [self selectAt: view selectionIndex - 1. ^self].	ev keyValue == #PageDown ifTrue: [self selectAt: view selectionIndex + 1. ^self].	ev keyValue == #Home ifTrue: [self selectAt: 1. ^self].	ev keyValue == #End ifTrue: [self selectAt: view labels size. ^self].	ev keyValue isSymbol ifTrue: [^self].	keyboardProcessor := self keyboardProcessor.	ev keyValue == Character tab ifTrue: [ev hasCtrl			ifTrue: [self selectAt: view selectionIndex + (ev hasShift ifTrue: [-1] ifFalse: [1])]			ifFalse: [ev hasShift ifTrue: [keyboardProcessor prevFieldFrom: self] ifFalse: [keyboardProcessor nextFieldFrom: self]]].	ev keyValue == Character cr		ifTrue: [keyboardProcessor == nil ifFalse: [keyboardProcessor doDefaultAction]].</body></methods><methods><class-id>Aragon.CardViewController</class-id> <category>view access</category><body package="Aragon.Widgets">activate	"Make this field be the keyboard focus"	view takeFocus.	super activate</body><body package="Aragon.Widgets">deactivate	"Make this text field not be the keyboard focus"	view loseFocus.	super deactivate</body></methods><methods><class-id>Aragon.TreeAdaptor</class-id> <category>enumerating</category><body package="Aragon.Widgets">countChildrenAt: anIndex	^self countChildrenOf: (self nodeAt: anIndex)</body><body package="Aragon.Widgets">countChildrenOf: aNodeOrAnObject 	| index aNode |	aNode := self nodeFor: aNodeOrAnObject.	index := 0.	self nodesDo: [:n | index := index + 1] startWith: aNode.	^index - 1</body><body package="Aragon.Widgets">detect: aBlock ifNone: exceptionBlock 	"Evaluate aBlock with each of the receiver's elements as the argument. 	Answer the first element for which aBlock evaluates to true."	| nArgs |	nArgs := aBlock numArgs.	nArgs == 1 ifTrue: [^super detect: aBlock ifNone: exceptionBlock].	nArgs == 2		ifTrue: 			[self do: [:each :indent | (aBlock value: each value: indent) ifTrue: [^each]].			^exceptionBlock value].	^self error: 'The argument for ''do:'' is expected to take either 1 or 2 arguments!'</body><body package="Aragon.Widgets">detectNode: aBlock 	"Evaluate aBlock with each of the receiver's elements as the argument.	Answer the first element for which aBlock evaluates to true."	^self detectNode: aBlock ifNone: [self notFoundError]</body><body package="Aragon.Widgets">detectNode: aBlock ifNone: exceptionBlock 	"Evaluate aBlock with each of the receiver's elements as the argument. 	Answer the first element for which aBlock evaluates to true."	| nArgs |	nArgs := aBlock numArgs.	nArgs == 1		ifTrue: 			[self nodesDo: [:each | (aBlock value: each) ifTrue: [^each]].			^exceptionBlock value].	nArgs == 2		ifTrue: 			[self nodesDo: [:each :indent | (aBlock value: each value: indent) ifTrue: [^each]].			^exceptionBlock value].	^self error: 'The argument for ''detectNode:'' is expected to take either 1 or 2 arguments!'</body><body package="Aragon.Widgets">detectNode: aBlock startWith: aNode	"Evaluate aBlock with each of the receiver's elements as the argument.	Answer the first element for which aBlock evaluates to true."	^self detectNode: aBlock startWith: aNode ifNone: [self notFoundError]</body><body package="Aragon.Widgets">detectNode: aBlock startWith: aNode ifNone: exceptionBlock 	"Evaluate aBlock with each of the receiver's elements as the argument. 	Answer the first element for which aBlock evaluates to true."	| nArgs |	nArgs := aBlock numArgs.	nArgs == 1		ifTrue: 			[self nodesDo: [:each | (aBlock value: each) ifTrue: [^each]] startWith: aNode.			^exceptionBlock value].	nArgs == 2		ifTrue: 			[self nodesDo: [:each :indent | (aBlock value: each value: indent) ifTrue: [^each]] startWith: aNode.			^exceptionBlock value].	^self error: 'The argument for ''detectNode:'' is expected to take either 1 or 2 arguments!'</body><body package="Aragon.Widgets">do: aBlock	| nArgs |	nArgs := aBlock numArgs.	nArgs == 1 ifTrue: [^roots do: [:r | self do: aBlock startWith: r]].	nArgs == 2 ifTrue: [^roots do: [:r | self do: aBlock startWith: r indent: 0]].	^self error: 'The argument for ''do:'' is expected to take either 1 or 2 arguments!'</body><body package="Aragon.Widgets">do: aBlock startWith: aNode	aBlock value: aNode subject.	(aNode isExpanded) ifTrue: [aNode children do: [:each | self do: aBlock startWith: each]]</body><body package="Aragon.Widgets">do: aBlock startWith: aNode indent: indent	aBlock value: aNode subject value: indent.	(aNode isExpanded) ifTrue: [aNode children do: [:each | self do: aBlock startWith: each indent: indent+1]]</body><body package="Aragon.Widgets">nodesDo: aBlock	| nArgs |	nArgs := aBlock numArgs.	nArgs == 1 ifTrue: [^roots do: [:r | self nodesDo: aBlock startWith: r]].	nArgs == 2 ifTrue: [^roots do: [:r | self nodesDo: aBlock startWith: r indent: 0]].	^self error: 'The argument for ''nodesDo:'' is expected to take either 1 or 2 arguments!'</body><body package="Aragon.Widgets">nodesDo: aBlock indent: indent	roots do: [:r | self nodesDo: aBlock startWith: r indent: indent]</body><body package="Aragon.Widgets">nodesDo: aBlock startWith: aNode	aBlock value: aNode.	(aNode isExpanded) ifTrue: [aNode children do: [:each | self nodesDo: aBlock startWith: each]]</body><body package="Aragon.Widgets">nodesDo: aBlock startWith: aNode indent: indent	aBlock value: aNode value: indent.	(aNode isExpanded) ifTrue: [aNode children do: [:each | self nodesDo: aBlock startWith: each indent: indent+1]]</body></methods><methods><class-id>Aragon.TreeAdaptor</class-id> <category>invalidating</category><body package="Aragon.Widgets">invalidate	self doWithoutDependents: [roots do: [:each | self invalidate: each]].	self changed: #value</body><body package="Aragon.Widgets">invalidate: aNodeOrAnObject	| aNode |	aNode := self nodeFor: aNodeOrAnObject.	self collapse: aNode.	aNode setChildren: nil.</body><body package="Aragon.Widgets">invalidateAll: aCollectionOfNodesOrObjects 	aCollectionOfNodesOrObjects do: [:each | self invalidate: (self nodeFor: each)].</body><body package="Aragon.Widgets">invalidateAndReExpand	self invalidateAndReExpandAll: roots</body><body package="Aragon.Widgets">invalidateAndReExpand: aNodeOrAnObject 	| aNode expandedNodes |	(aNode := self nodeFor: aNodeOrAnObject) isExpanded 		ifFalse: [^self invalidate: aNode].	expandedNodes := self expandedEntriesStartingAt: aNode.	self _collapse: aNode.	aNode setChildren: nil.	self expandAll: expandedNodes startWith: aNode</body><body package="Aragon.Widgets">invalidateAndReExpandAll: aCollectionOfNodesOrObjects 	self doWithoutDependents: 		[aCollectionOfNodesOrObjects do: [:each | self invalidateAndReExpand: (self nodeFor: each)]].	self changed: #value</body><body package="Aragon.Widgets">invalidateAt: anIndex	self invalidate: (self nodeAt: anIndex)</body></methods><methods><class-id>Aragon.TreeAdaptor</class-id> <category>accessing</category><body package="Aragon.Widgets">at: anIndex 		| i |	i := 0.	^self detect: [:x | (i := i + 1) = anIndex].</body><body package="Aragon.Widgets">childrenBlock	^childrenBlock</body><body package="Aragon.Widgets">fetchChildrenFor: aNode 	aNode children == nil ifFalse: [^aNode children].	aNode setChildren: ((childrenBlock numArgs == 1			ifTrue: [childrenBlock value: aNode subject]			ifFalse: [childrenBlock numArgs == 2					ifTrue: [childrenBlock value: aNode subject value: aNode type]					ifFalse: [childrenBlock							value: aNode subject							value: aNode type							value: aNode]])			collect: [:each | (self treeNodeFor: each) parent: aNode]).	^aNode children</body><body package="Aragon.Widgets">indexOf: aNodeOrAnObject ifAbsent: exceptionBlock 	"Answer the index of the first occurrence of	anElement within the receiver.  If the receiver does	not contain anElement, answer the result of evaluating the exceptionBlock."	| index |	index := 0.	aNodeOrAnObject isTreeNode		ifTrue: [self detectNode: [:node | index := index+1.  node == aNodeOrAnObject] ifNone: [^exceptionBlock value]]		ifFalse: [self detectNode: [:node | index := index+1.  node = aNodeOrAnObject] ifNone: [^exceptionBlock value]].	^index</body><body package="Aragon.Widgets">nodeAt: anIndex 		| i |	i := 0.	^self detectNode: [:x | (i := i + 1) = anIndex].</body><body package="Aragon.Widgets">nodeFor: aNodeOrAnObject	"Detect the node which's subject is aNodeOrAnObject"	^self nodeFor: aNodeOrAnObject ifNone: [self notFoundError]</body><body package="Aragon.Widgets">nodeFor: aNodeOrAnObject ifNone: aBlock 	"Detect the node which's subject is anObject"	^aNodeOrAnObject isTreeNode		ifTrue: [aNodeOrAnObject]		ifFalse: [self detectNodeAll: [:node | node = aNodeOrAnObject]				ifNone: aBlock]</body><body package="Aragon.Widgets">root	^self rootNode subject</body><body package="Aragon.Widgets">rootNode	^roots first</body><body package="Aragon.Widgets">roots	^roots</body><body package="Aragon.Widgets">size	"Answer how many elements the receiver contains."	| tally |	tally := 0.	self do: [:each | tally := tally + 1].	^tally</body></methods><methods><class-id>Aragon.TreeAdaptor</class-id> <category>private</category><body package="Aragon.Widgets">_collapse: aNode	aNode status: #collapsed</body><body package="Aragon.Widgets">_expand: aNode	aNode status == #collapsed ifFalse: [^self].	self fetchChildrenFor: aNode.	aNode status: #expanded.</body><body package="Aragon.Widgets">detectNodeAll: aBlock 	"Evaluate aBlock with each of the receiver's elements as the argument.	Answer the first element for which aBlock evaluates to true."	^self detectNodeAll: aBlock ifNone: [self notFoundError]</body><body package="Aragon.Widgets">detectNodeAll: aBlock ifNone: exceptionBlock 	"Evaluate aBlock with each of the receiver's elements as the argument. 	Answer the first element for which aBlock evaluates to true."	| nArgs |	nArgs := aBlock numArgs.	nArgs == 1		ifTrue: 			[self nodesDoAll: [:each | (aBlock value: each) ifTrue: [^each]].			^exceptionBlock value].	nArgs == 2		ifTrue: 			[self nodesDoAll: [:each :indent | (aBlock value: each value: indent) ifTrue: [^each]].			^exceptionBlock value].	^self error: 'The argument for ''detectNode:'' is expected to take either 1 or 2 arguments!'</body><body package="Aragon.Widgets">indexAndNodeFor: aNodeOrAnObject	"Detect the node which's subject is aNodeOrAnObject"	^self indexAndNodeFor: aNodeOrAnObject ifNone: [self notFoundError]</body><body package="Aragon.Widgets">indexAndNodeFor: aNodeOrAnObject ifNone: aBlock 	"Detect the node which's subject is aNodeOrAnObject"	| i |	aNodeOrAnObject isTreeNode 		ifTrue: [^(self indexOf: aNodeOrAnObject ifAbsent: [0]) -&gt; aNodeOrAnObject].	i := 0.	self		nodesDo: 			[:each | 			i := i + 1.			each = aNodeOrAnObject ifTrue: [^i -&gt; each].			"In order to also detect nodes from collapsed branches. We have to look 			inside these branches without counting the nodes."			(each isCollapsed and: [each definitelyHasChildren])				ifTrue: [each children do: [:child | self 							nodesDoAll: [:invisible | 								invisible = aNodeOrAnObject ifTrue: [^0 -&gt; invisible]]							startWith: child]]].	^aBlock value</body><body package="Aragon.Widgets">nodesDoAll: aBlock	| nArgs |	nArgs := aBlock numArgs.	nArgs == 1 ifTrue: [^roots do: [:r | self nodesDoAll: aBlock startWith: r]].	nArgs == 2 ifTrue: [^roots do: [:r | self nodesDoAll: aBlock startWith: r indent: 0]].	^self error: 'The argument for ''nodesDo:'' is expected to take either 1 or 2 arguments!'</body><body package="Aragon.Widgets">nodesDoAll: aBlock startWith: aNode	aBlock value: aNode.	(aNode definitelyHasChildren) ifTrue: [aNode children do: [:each | self nodesDoAll: aBlock startWith: each]]</body><body package="Aragon.Widgets">nodesDoAll: aBlock startWith: aNode indent: indent	aBlock value: aNode value: indent.	(aNode definitelyHasChildren) ifTrue: [aNode children do: [:each | self nodesDoAll: aBlock startWith: each indent: indent+1]]</body><body package="Aragon.Widgets">privateAdd: aNodeOrAnObject asChildOf: parentNode at: parentIndex 	| newNode |	self fetchChildrenFor: parentNode.	parentNode addChild: (newNode := self treeNodeFor: aNodeOrAnObject).	(parentIndex &gt; 0 and: [parentNode isExpanded])		ifTrue: [self changed: #insert: with: (parentNode children indexOf: newNode) + parentIndex].	^newNode</body><body package="Aragon.Widgets">privateAddFirst: aNodeOrAnObject asChildOf: parentNode at: parentIndex 	| answer |	answer := self privateAdd: aNodeOrAnObject asChildOf: parentNode at: parentIndex.	parentNode children remove: answer; addFirst: answer.	^answer</body><body package="Aragon.Widgets">privateCollapse: aNode at: anIndex 	aNode isCollapsed		ifFalse: 			[| n |			n := self countChildrenOf: aNode.			self _collapse: aNode.			anIndex &gt; 0 ifTrue: [self changed: #collapse: with: anIndex -&gt; n]]</body><body package="Aragon.Widgets">privateCollapseSubtree: aNode at: anIndex	| n |	n := self countChildrenOf: aNode.	self nodesDoAll: [:each | self _collapse: each] startWith: aNode.	anIndex &gt; 0 ifTrue: [self changed: #collapse: with: anIndex -&gt; n].</body><body package="Aragon.Widgets">privateExpand: aNode at: anIndex 	aNode isExpanded		ifFalse: 			[| n |			aNode hasChildren ifFalse: [^self].			self _expand: aNode.			n := self countChildrenOf: aNode.			anIndex &gt; 0 ifTrue: [self changed: #expand: with: anIndex -&gt; n]]</body><body package="Aragon.Widgets">privateExpandSubtree: aNode at: anIndex	| n |	self nodesDo: [:each | self _expand: each] startWith: aNode.	n := self countChildrenOf: aNode.	anIndex &gt; 0 ifTrue: [self changed: #expand: with: anIndex -&gt; n]</body><body package="Aragon.Widgets">privateRemove: aNode at: anIndex	aNode parent isNil		ifTrue: [roots remove: aNode]		ifFalse: [aNode parent removeChild: aNode].	anIndex &gt; 0 ifTrue: [self changed: #remove: with: anIndex]</body><body package="Aragon.Widgets">toggleExpandSubtree: aNode at: anIndex	aNode isCollapsed ifTrue: [^self privateExpandSubtree: aNode at: anIndex].	aNode isExpanded ifTrue: [^self privateCollapseSubtree: aNode at: anIndex]</body><body package="Aragon.Widgets">treeNodeFor: aNodeOrAnObject 	^aNodeOrAnObject isTreeNode		ifTrue: [aNodeOrAnObject]		ifFalse: [((roots isNil or: [roots isEmpty])				ifTrue: [AragonTreeNode]				ifFalse: [roots first species])				for: aNodeOrAnObject]</body></methods><methods><class-id>Aragon.TreeAdaptor</class-id> <category>expand-collapse</category><body package="Aragon.Widgets">collapse: aNodeOrAnObject 	| assoc |	assoc := self indexAndNodeFor: aNodeOrAnObject.	self privateCollapse: assoc value at: assoc key</body><body package="Aragon.Widgets">collapseAll	self nodesDoAll: [:each | self _collapse: each].	self changed: #value</body><body package="Aragon.Widgets">collapseAt: anIndex 	self privateCollapse: (self nodeAt: anIndex) at: anIndex</body><body package="Aragon.Widgets">collapseSubtree: aNodeOrAnObject	| assoc |	assoc := self indexAndNodeFor: aNodeOrAnObject.	self privateCollapseSubtree: assoc value at: assoc key</body><body package="Aragon.Widgets">collapseSubtreeAt: anIndex	self privateCollapseSubtree: (self nodeAt: anIndex) at: anIndex</body><body package="Aragon.Widgets">expand: aNodeOrAnObject 	| assoc |	assoc := self indexAndNodeFor: aNodeOrAnObject.	self privateExpand: assoc value at: assoc key</body><body package="Aragon.Widgets">expandAll	self nodesDo: [:each | self _expand: each].	self changed: #value</body><body package="Aragon.Widgets">expandAll: aCollection 	self doWithoutDependents: [roots do: [:each | self expandAll: aCollection startWith: each]].	self changed: #value</body><body package="Aragon.Widgets">expandAll: aCollection startWith: aNode 	self doWithoutDependents: 		[self nodesDo: [:n | (aCollection includes: n) ifTrue: [self _expand: n]]		startWith: aNode].	self changed: #value</body><body package="Aragon.Widgets">expandAt: anIndex 	self privateExpand: (self nodeAt: anIndex) at: anIndex</body><body package="Aragon.Widgets">expandPath: aCollection 	| invalidationNeeded |	invalidationNeeded := false.	aCollection		do: 			[:each | 			| node |			node := self nodeFor: each.			node isExpanded				ifFalse: 					[self _expand: node.					invalidationNeeded := true]].	invalidationNeeded ifTrue: [self changed: #value]</body><body package="Aragon.Widgets">expandSubtree: aNodeOrAnObject	| assoc |	assoc := self indexAndNodeFor: aNodeOrAnObject.	self privateExpandSubtree: assoc value at: assoc key</body><body package="Aragon.Widgets">expandSubtreeAt: anIndex	self privateExpandSubtree: (self nodeAt: anIndex) at: anIndex</body><body package="Aragon.Widgets">expandUpTo: aNodeOrAnObject 	| node invalidationNeeded |	node := self nodeFor: aNodeOrAnObject.	invalidationNeeded := false.	[node == nil]		whileFalse: 			[node isExpanded				ifFalse: 					[self _expand: node.					invalidationNeeded := true].			node := node parent].	invalidationNeeded ifTrue: [self changed: #value]</body><body package="Aragon.Widgets">expandedEntries	| answer |	answer := OrderedCollection new.	roots do: [:each | answer addAll: (self expandedEntriesStartingAt: each)].	^answer</body><body package="Aragon.Widgets">expandedEntriesStartingAt: aNode 	| answer |	answer := OrderedCollection new.	self nodesDo: [:n | n isExpanded ifTrue: [answer add: n subject]]		startWith: aNode.	^answer</body><body package="Aragon.Widgets">expandedNodes	| answer |	answer := OrderedCollection new.	roots do: [:each | answer addAll: (self expandedNodesStartingAt: each)].	^answer</body><body package="Aragon.Widgets">expandedNodesStartingAt: aNode 	| answer |	answer := OrderedCollection new.	self nodesDo: [:n | n isExpanded ifTrue: [answer add: n]]		startWith: aNode.	^answer</body><body package="Aragon.Widgets">toggleExpand: aNodeOrAnObject 	| assoc |	assoc := self indexAndNodeFor: aNodeOrAnObject.	assoc value isCollapsed ifTrue: [^self privateExpand: assoc value at: assoc key].	assoc value isExpanded ifTrue: [^self privateCollapse: assoc value at: assoc key]</body><body package="Aragon.Widgets">toggleExpandAt: anIndex 	| aNode |	(aNode := self nodeAt: anIndex) isCollapsed		ifTrue: [self privateExpand: aNode at: anIndex]		ifFalse: [self privateCollapse: aNode at: anIndex]</body><body package="Aragon.Widgets">toggleExpandSubtree: aNodeOrAnObject 	| assoc |	assoc := self indexAndNodeFor: aNodeOrAnObject.	self toggleExpandSubtree: assoc value at: assoc key</body><body package="Aragon.Widgets">toggleExpandSubtreeAt: anIndex	self toggleExpandSubtree: (self nodeAt: anIndex) at: anIndex</body></methods><methods><class-id>Aragon.TreeAdaptor</class-id> <category>initialize-release</category><body package="Aragon.Widgets">childrenBlock: aValue	childrenBlock := aValue</body><body package="Aragon.Widgets">root: anObjectOrNode	^self roots: (Array with: anObjectOrNode)</body><body package="Aragon.Widgets">roots: aCollection 	roots := OrderedCollection new: aCollection size.	aCollection do: [:each | roots add: (self treeNodeFor: each)].	self changed: #value</body></methods><methods><class-id>Aragon.TreeAdaptor</class-id> <category>printing</category><body package="Aragon.Widgets">hierarchyString	| stream |	stream := String new writeStream.	self printHierarchyOn: stream.	^stream contents</body><body package="Aragon.Widgets">printHierarchyOn: aStream 	self		nodesDo: 			[:each :indent | 			indent timesRepeat: [aStream tab].			aStream nextPutAll: each displayString; cr.			self _expand: each]</body></methods><methods><class-id>Aragon.TreeAdaptor</class-id> <category>modifying</category><body package="Aragon.Widgets">add: aNodeOrAnObject asChildAt: anIndex 	^self		privateAdd: aNodeOrAnObject		asChildOf: (self nodeAt: anIndex)		at: anIndex</body><body package="Aragon.Widgets">add: aNodeOrAnObject asChildOf: parent 	| assoc |	assoc := self indexAndNodeFor: parent.	^self		privateAdd: aNodeOrAnObject		asChildOf: assoc value		at: assoc key</body><body package="Aragon.Widgets">addFirst: aNodeOrAnObject asChildOf: parent 	| assoc |	assoc := self indexAndNodeFor: parent.	^self		privateAddFirst: aNodeOrAnObject		asChildOf: assoc value		at: assoc key.</body><body package="Aragon.Widgets">remove: aNodeOrAnObject ifAbsent: aBlock	| assoc |	assoc := self indexAndNodeFor: aNodeOrAnObject ifNone: [^aBlock value].	self privateRemove: assoc value at: assoc key.</body><body package="Aragon.Widgets">removeAtIndex: anIndex	self privateRemove: (self nodeAt: anIndex) at: anIndex.</body></methods><methods><class-id>Aragon.TreeAdaptor</class-id> <category>dependency maintenance</category><body package="Aragon.Widgets">doWithoutDependents: aBlock	| myDependents |	myDependents := dependents.	self breakDependents.	aBlock valueNowOrOnUnwindDo: [dependents := myDependents]</body><body package="Aragon.Widgets">myDependents	"Answer the receiver's dependents or nil."	^dependents</body><body package="Aragon.Widgets">myDependents: dependentsOrNil	"Set the receivers dependents."	dependents := dependentsOrNil</body><body package="Aragon.Widgets">postCopy	"Do not copy the dependents list."	super postCopy.	self breakDependents</body></methods><methods><class-id>Aragon.TreeAdaptor</class-id> <category>deprecated</category><body package="Aragon.Widgets">removeAt: anIndex	self removeAtIndex: anIndex.</body></methods><methods><class-id>Aragon.TreeAdaptor class</class-id> <category>instance creation</category><body package="Aragon.Widgets">new: anInteger 	"This instance creation method is provided for the purpose of select: and collect: operations to work 	properly on instances. TreeAdaptor itself doesn't support variable sized allocations"	^Array new: anInteger</body></methods><methods><class-id>Aragon.PollingSelectionTracker</class-id> <category>accessing</category><body package="Aragon.Widgets">controller	^controller</body></methods><methods><class-id>Aragon.PollingSelectionTracker</class-id> <category>tracking</category><body package="Aragon.Widgets">finishSelectionFor: ignored</body><body package="Aragon.Widgets">handleEvent: ignored 	| boundsOrigin |	cursorPoint := controller sensor cursorPoint.	boundsOrigin := controller view bounds origin.	self setUpFor: nil; trackSelectionFor: cursorPoint.		[controller poll.	controller sensor anyButtonPressed]		whileTrue: 			[| pt po |			po := controller view bounds origin.			(pt := controller sensor cursorPoint) - po ~= (cursorPoint - boundsOrigin)				ifTrue: 					[self trackSelectionFor: (cursorPoint := pt).					boundsOrigin := po]].	self finishSelectionFor: controller sensor cursorPoint</body><body package="Aragon.Widgets">setUpFor: ignored</body><body package="Aragon.Widgets">trackSelectionFor: ignored</body></methods><methods><class-id>Aragon.PollingSelectionTracker</class-id> <category>private</category><body package="Aragon.Widgets">setController: aValue	controller := aValue</body></methods><methods><class-id>Aragon.PollingSelectionTracker class</class-id> <category>As yet unclassified</category><body package="Aragon.Widgets">on: aController	^self new setController: aController.</body></methods><methods><class-id>Aragon.NewDataSetSpecColumnModel class</class-id> <category>resources</category><body package="Aragon.Widgets">columnTypesMenu	^super columnTypesMenu addItemLabel: 'TreeView' value: #TreeView</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>columns accessing</category><body package="Aragon.Widgets">columnAt: anIndex 	^columns at: (self hasRowSelectors ifTrue: [anIndex+1] ifFalse: [anIndex])</body><body package="Aragon.Widgets">columnLabels	| i1 |	i1 := self hasRowSelectors ifTrue: [2] ifFalse: [1].	^(i1 to: columns size) collect: [:i | (columns at: i) description label].</body><body package="Aragon.Widgets">columnLabels: anArray	| i0 oldColumns |	i0 := self hasRowSelectors ifTrue: [1] ifFalse: [0].	oldColumns := columns copy.	columns := Array new: anArray size + i0.	columns at: 1 put: oldColumns first.	1 to: anArray size do: [:i | columns at: i+i0 put: (oldColumns detect: [:col | col description label = (anArray at: i)])]</body><body package="Aragon.Widgets">columnLayout	^IdentityDictionary new 		add: #Labels -&gt; self columnLabels;		add: #Widths -&gt; self columnWidths;	yourself</body><body package="Aragon.Widgets">columnLayout: aDictionary	aDictionary isNil ifTrue: [^self].	(aDictionary includesKey: #Labels) ifTrue: [self columnLabels: (aDictionary at: #Labels)].	(aDictionary includesKey: #Widths) ifTrue: [self columnWidths: (aDictionary at: #Widths)].</body><body package="Aragon.Widgets">columnWidths	| i0 |	i0 := self hasRowSelectors ifTrue: [1] ifFalse: [0].	^(i0+1 to: columns size) collect: [:i | (columns at: i) width].</body><body package="Aragon.Widgets">columnWidths: anArray 	| i0 x |	self hasRowSelectors		ifTrue: 			[x := columns first right.			i0 := 1]		ifFalse: 			[x := 0.			i0 := 0].	i0 + 1 to: (columns size min: anArray size + i0)		do: 			[:i | 			(columns at: i)				left: x;				width: (anArray at: i - i0).			x := x + (anArray at: i - i0)].	self layoutLabels</body><body package="Aragon.Widgets">columns	^columns</body><body package="Aragon.Widgets">columns: anArray 	| frozenColumns |	columns := anArray.	frozenColumns := 0.	1 to: columns size do: [:i | ((columns at: i) view: self; isRowSelector) ifTrue: [frozenColumns := i]].	1 to: columns size do: [:i | ((columns at: i) view: self; isFrozen) ifTrue: [frozenColumns := i]].	1 to: frozenColumns do: [:i | (columns at: i) isFrozen: true].	treeViewColumn := columns detect: [:each | each isTreeView] ifNone: [].	self hasTreeView ifTrue: [self allowForSorting: false].</body><body package="Aragon.Widgets">frozenEdge	^frozenEdge</body><body package="Aragon.Widgets">insertColumn: aColumn at: anIndex 	^self		insertColumn: aColumn		at: anIndex		with: nil</body><body package="Aragon.Widgets">insertColumn: aColumn at: anIndex with: aBuilder	| newColumn array editCell index |	((newColumn := aColumn) isKindOf: DataSetColumnSpec)		ifTrue:			[| builder | (builder := aBuilder) isNil ifTrue: [builder := self topComponent model builder].			newColumn := NewDataSetColumn on: aColumn with: builder].	(newColumn editorSpec isNil or: [newColumn editorSpec isSymbol])		ifFalse: 			[newColumn editorSpec isDecorated: self useDecoratedEditors; isOpaque: true].	columns isEmpty 		ifTrue: [array := Array with: newColumn]		ifFalse:			[array := Array new: columns size + 1.			((index := anIndex) == 0 or: [self hasRowSelectors]) ifTrue: [index := index +1].			array at: index put: newColumn.			columns isEmpty 				ifFalse: 					[1 to: (index-1 min: columns size) do: [:i | array at: i put: (columns at: i)].					index &lt; array size ifTrue: [index + 1 to: array size do: [:i | array at: i put: (columns at: i - 1)]]]			].	self columns: array.	((editCell := controller notNil ifTrue: [controller editCell]) notNil and: [editCell x &gt;= index])		ifTrue: [controller editCell x: editCell x + 1].	topOffset := nil.	self computeWidth.	self invalidateAndEdit.	self changed: #columnInsert with: index</body><body package="Aragon.Widgets">labelAt: aColumnIndex 	| index |	((index := aColumnIndex) == 0 or: [self hasRowSelectors])		ifTrue: [index := index + 1].	^(columns at: index) labelVisual label text asString</body><body package="Aragon.Widgets">labelAt: aColumnIndex put: aString	| index lv |	((index := aColumnIndex) == 0 or: [self hasRowSelectors])		ifTrue: [index := index + 1].	lv := (columns at: index) labelVisual.	lv label text: aString.	lv invalidate.</body><body package="Aragon.Widgets">makeColumnVisible: index 	| column left right bounds dx |	(column := columns at: index) isFrozen ifTrue: [ ^self ].	left := column left.	right := left + column width.	bounds := self bounds.	bounds left: bounds left + self frozenEdge.	(bounds left &lt;= left and: [bounds right &gt;= right]) ifTrue: [^self].	dx := (bounds width &gt;= (right - left) or: [bounds right &lt; left])				ifTrue: [right - bounds right]				ifFalse: [left - bounds left].	self topComponent displayPendingInvalidation.	self scrollBy: (dx @ 0) negated</body><body package="Aragon.Widgets">moveColumnAt: anIndex by: delta 	| i1 i2  gc t bounds |	i1 := anIndex.	(i2 := i1 + delta) &gt; columns size ifTrue: [^i1].	(columns at: i2) isFrozen ifTrue: [^i1].	t := columns at: i1.	columns at: i1 put: (columns at: i2).	columns at: i2 put: t.	self computeWidth.	bounds := self bounds.	(gc := self graphicsContext)		intersectClip: (bounds left + self frozenEdge @ bounds top corner: gc clippingBounds corner).	i1 to: i2 by: (delta // delta abs) do: [:i | (columns at: i) labelVisual displayOn: gc].	self allowsForSorting 		ifTrue:			[sortColumn = i1 ifTrue: [sortColumn := i2] ifFalse: [			sortColumn = i2 ifTrue: [sortColumn := i1] ifFalse: [			sortColumn negated = i1 ifTrue: [sortColumn := i2 negated] ifFalse: [			sortColumn negated  = i2 ifTrue: [sortColumn := i1 negated]]]]].	controller editor notNil 		ifTrue:			[controller editCell x == i1 ifTrue: [controller editCell x: i2] ifFalse: [			controller editCell x == i2 ifTrue: [controller editCell x: i1]]].	^i2</body><body package="Aragon.Widgets">removeColumnAt: anIndex	| array editCell index answer |	((index := anIndex) == 0 or: [self hasRowSelectors]) ifTrue: [index := index +1].	answer := columns at: index.	array := Array new: columns size - 1.	1 to: index-1 do: [:i | array at: i put: (columns at: i)].	index to: array size do: [:i | array at: i put: (columns at: i+1)].	self columns: array.	((editCell := controller notNil ifTrue: [controller editCell]) notNil and: [editCell x &gt;= index])		ifTrue: [controller editCell x: editCell x - 1].	topOffset := nil.	self computeWidth.	self invalidateAndEdit.	self changed: #columnRemove with: index.	^answer</body><body package="Aragon.Widgets">resizeColumnAt: anIndex width: anInteger	| column pixmap left bounds |	(column := columns at: anIndex) width: (anInteger max: MinCellWidth).	self		changedPreferredGeometry;		computeWidth.	bounds := self bounds.	left := column left.	pixmap := Pixmap extent: ((self labelAreaBounds)						left: 0;						extent).	self		displayLabelsOn: (pixmap graphicsContext translation: bounds origin negated).	pixmap displayOn: self graphicsContext at: bounds origin.	self fixScrollingOffset.	controller editor notNil		ifTrue: 			[left := (column := columns at: controller editCell x) isFrozen						ifTrue: [bounds left]						ifFalse: [0].			controller editor container bounds: ((controller editor container bounds)						left: column left + left;						right: column right + left)]</body><body package="Aragon.Widgets">sortColumn	^sortColumn == nil ifFalse: [sortColumn abs]</body><body package="Aragon.Widgets">sortColumn: aColumnIndex	sortColumn := aColumnIndex.	self hasRowSelectors ifTrue: [sortColumn := sortColumn + 1].	columns notNil ifTrue: [(columns at: sortColumn) labelVisual sortIndicator: (Icons at: self sortOrder); invalidate].</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>control</category><body package="Aragon.Widgets">downcastEvent: aKey with: aParameter from: anInitiator 	"This is a message passed down the view structure to all subparts."	| editor |	(editor := controller editor) == nil ifFalse: [editor downcastEvent: aKey with: aParameter from: anInitiator].	self hasTreeView ifTrue: [self treeView downcastEvent: aKey with: aParameter from: anInitiator]</body><body package="Aragon.Widgets">downcastLocalEvent: aKey with: aParameter at: aPoint from: anInitiator 	"This is a message passed down the view structure to all subparts."	| editor |	(editor := controller editor) == nil 		ifFalse: [(editor downcastLocalEvent: aKey with: aParameter at: aPoint from: anInitiator) ifTrue: [^true]].	self hasTreeView 		ifTrue: [(self treeView downcastLocalEvent: aKey with: aParameter at: aPoint from: anInitiator) ifTrue: [^true]].	^super downcastLocalEvent: aKey with: aParameter at: aPoint from: anInitiator</body><body package="Aragon.Widgets">handlerForMouseEvent: aMouseEvent 	self hasTreeView ifTrue: 		[| obj |		(controller sensor mousePointForEvent: aMouseEvent) y - self bounds top &gt; self topOffsetForDisplay 			ifTrue: [(obj := self treeView container handlerForMouseEvent: aMouseEvent) == nil 				ifFalse: [^obj]]].	^super handlerForMouseEvent: aMouseEvent</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>updating</category><body package="Aragon.Widgets">invalidateAndEdit	(controller notNil and: [controller editor notNil]) ifTrue: [controller repositionEditor].	(self hasTreeView) ifTrue: [self changedPreferredGeometry].	super invalidate.</body><body package="Aragon.Widgets">updateInsert: anIndex	"An item has been inserted into the receiver's model.  Update the display."	super updateInsert: anIndex.	(controller editor notNil and: [anIndex &lt;= controller editCell y])		ifTrue: 			[controller moveEditorBy: 0 @ 1.			controller editor invalidate]</body><body package="Aragon.Widgets">updateInsertCollection: anArg 	super updateInsertCollection: anArg.	(controller editor notNil and: [anArg start &lt;= controller editCell y])		ifTrue: 			[controller moveEditorBy: 0 @ anArg last.			controller editor invalidate]</body><body package="Aragon.Widgets">updateModel	controller editor notNil ifTrue: [controller dropEditInvalidate: false].	targetIndex := self zeroIndex.	self		sequence: model value;		positionTo: 0 @ 0;		elementsInSequenceHaveChanged;		changedPreferredGeometry.	self invalidate.	(self isEditing and: [sequence isEmpty not])		ifTrue: [controller restartEditing]</body><body package="Aragon.Widgets">updateRemove: anIndex 	"The item at anIndex in the receiver's model has been removed. Update the display."	super updateRemove: anIndex.	controller editor notNil		ifTrue: 			[| i |			i := controller editCell y.			i &gt;= anIndex ifTrue: [i == anIndex					ifTrue: [controller dropEdit]					ifFalse: 						[controller moveEditorBy: 0 @ -1.						controller editor invalidate]]]</body><body package="Aragon.Widgets">updateRemoveRange: anArray 	"The item between anArray first and anArray last in the receiver's model have been removed. 	Update the display."	super updateRemoveRange: anArray.	controller editor notNil		ifTrue: 			[| i |			i := controller editCell y.			i &gt;= anArray first ifTrue: [i &lt;= anArray last					ifTrue: [controller dropEdit]					ifFalse: 						[controller moveEditorBy: 0 @ (anArray first - anArray last - 1).						controller editor invalidate]]]</body><body package="Aragon.Widgets">updateSelectionChannel	| s |	((s := selectionChannel value) isEmpty not and: [controller editCell notNil])		ifTrue: 			[| index |			index := s detect: [:x | true].			(controller editCell y ~~ index) ifTrue: [index &gt; 0					ifTrue: [^controller editAt: controller editCell x @ index. ]					ifFalse: [controller dropEdit]]].	super updateSelectionChannel</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>accessing</category><body package="Aragon.Widgets">allowForColumnDragging: aBoolean	allowForColumnDragging := aBoolean</body><body package="Aragon.Widgets">allowForSorting: aBoolean	sortColumn := aBoolean ifTrue: [0].</body><body package="Aragon.Widgets">allowsForColumnDragging	^allowForColumnDragging</body><body package="Aragon.Widgets">allowsForSorting	^sortColumn notNil</body><body package="Aragon.Widgets">definitelyOrderBy: aColumnIndex 	(sortColumn notNil and: [sortColumn ~~ 0])		ifTrue: [((columns at: self sortColumn) labelVisual) sortIndicator: nil; invalidate].	sortColumn := aColumnIndex &lt;= columns size ifTrue: [sortColumn == aColumnIndex					ifTrue: [sortColumn negated]					ifFalse: [aColumnIndex]].	sortColumn notNil ifTrue: [((columns at: self sortColumn) labelVisual) sortIndicator: (Icons at: self sortOrder); invalidate].	self sortEntries</body><body package="Aragon.Widgets">editCell	^self controller editCell</body><body package="Aragon.Widgets">hasTreeView	^treeViewColumn notNil</body><body package="Aragon.Widgets">isEditing	^controller ~~ nil and: [controller isEditing]</body><body package="Aragon.Widgets">lineGrid	^self showHorizontalLines ifTrue: [super lineGrid+2] ifFalse: [super lineGrid]</body><body package="Aragon.Widgets">lineGrid: aValue 	self hasTreeView 		ifTrue: [self treeView lineGrid: aValue].	super lineGrid: aValue</body><body package="Aragon.Widgets">model: aModel	super model: aModel.	self hasTreeView ifTrue: [self treeView model: aModel]</body><body package="Aragon.Widgets">orderBy: aColumnIndex 	self definitelyOrderBy: (self hasRowSelectors ifTrue: [aColumnIndex + 1] ifFalse: [aColumnIndex]).	self changed: #sortColumn with: aColumnIndex</body><body package="Aragon.Widgets">sequence: aSequence	"Set the receiver's sequence to be aSequence."	self hasTreeView 		ifTrue: [treeViewColumn renderer sequence: aSequence].	super sequence: aSequence.	self autoAppend.	self silentlySortEntries</body><body package="Aragon.Widgets">treeView	^treeViewColumn renderer</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>appearance</category><body package="Aragon.Widgets">hasRowSelectors	^columns first isRowSelector</body><body package="Aragon.Widgets">selectedVisualBlockAtColumn: anIndex put: aBlock	selectedVisualBlock isNil		ifTrue: [selectedVisualBlock := Array new: columns size]		ifFalse: [(selectedVisualBlock isKindOf: Collection) ifFalse: [selectedVisualBlock := Array new: columns size withAll: selectedVisualBlock]].	selectedVisualBlock at: anIndex put: aBlock.</body><body package="Aragon.Widgets">showHorizontalLines	^showLines allMask: 2</body><body package="Aragon.Widgets">showHorizontalLines: aBoolean 	self privateShowLines: (aBoolean			ifTrue: [showLines bitOr: 2]			ifFalse: [showLines bitAnd: 1])</body><body package="Aragon.Widgets">showLabels	^self topOffsetForDisplay &gt; 0</body><body package="Aragon.Widgets">showLabels: aBoolean 	self showLabels == aBoolean		ifFalse: 			[topOffset := aBoolean ifFalse: [0].			self fixScrollingOffset.			self layoutLabels.			self invalidateAndEdit]</body><body package="Aragon.Widgets">showLineNumbers	^showLineNumbers</body><body package="Aragon.Widgets">showLineNumbers: aBoolean 	self showLineNumbers: aBoolean additionalWidth: 24</body><body package="Aragon.Widgets">showLineNumbers: aBoolean additionalWidth: anInteger	showLineNumbers == aBoolean ifTrue: [^self].	columns ~~ nil		ifTrue: 			[aBoolean ifTrue: [self useRowSelectors: true].			self hasRowSelectors				ifTrue: 					[columns first width: columns first width								+ (aBoolean ifTrue: [anInteger] ifFalse: [anInteger negated]).					self						changedPreferredGeometry;						computeWidth]].	showLineNumbers := aBoolean.	self computeWidth.	self invalidateAndEdit</body><body package="Aragon.Widgets">showLines	^showLines ~= 0</body><body package="Aragon.Widgets">showLines: aBoolean 	self privateShowLines: (aBoolean ifTrue: [2] ifFalse: [0])</body><body package="Aragon.Widgets">showVerticalLines	^showLines allMask: 1</body><body package="Aragon.Widgets">showVerticalLines: aBoolean 	self privateShowLines: (aBoolean			ifTrue: [showLines bitOr: 1]			ifFalse: [showLines bitAnd: 2])</body><body package="Aragon.Widgets">useDecoratedEditors	^useDecoratedEditors == true</body><body package="Aragon.Widgets">useDecoratedEditors: aBoolean 	columns do: [:cd | (cd editorSpec isKindOf: WidgetSpec)			ifTrue: [(cd editorSpec) isDecorated: aBoolean; isOpaque: true]].	(self controller editCell isNil or: [sequence isEmpty])		ifFalse: [controller editAt: controller editCell].	useDecoratedEditors := aBoolean.</body><body package="Aragon.Widgets">useRowSelectors: aBoolean 	(columns isEmpty not and: [columns first isRowSelector == aBoolean]) ifTrue: [^self].	aBoolean		ifTrue: 			[| newColumn |			newColumn := DataSetColumnSpec new width: 17; rendererType: #rowSelector; editorType: #rowSelector.			self insertColumn: newColumn at: 0]		ifFalse: [self removeColumnAt: 0]</body><body package="Aragon.Widgets">visualBlockAtColumn: anIndex put: aBlock	visualBlock isNil		ifTrue: [visualBlock := Array new: columns size]		ifFalse: [(visualBlock isKindOf: Collection) ifFalse: [visualBlock := Array new: columns size withAll: visualBlock]].	visualBlock at: anIndex put: aBlock.</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>element accessing</category><body package="Aragon.Widgets">boundsOfCellIndex: aPoint 	^self boundsOfCellIndex: aPoint inBounds: self bounds</body><body package="Aragon.Widgets">boundsOfCellIndex: aCell inBounds: aRectangle 	| column answer xo |	answer := self boundsOfElementIndex: aCell y inBounds: aRectangle.	column := columns at: aCell x.	xo := column isFrozen ifTrue: [aRectangle left] ifFalse: [0].	answer left: column left + xo.	answer right: answer left + column width.	^answer</body><body package="Aragon.Widgets">boundsOfElementIndex: anElementIndex inBounds: aRectangle 	"Answer the bounding box of line anElementIndex."	| lineGrid width |	lineGrid := self lineGrid.	width := self measureWidth 		ifTrue: [self preferredWidth max: aRectangle width]		ifFalse: [aRectangle width].	^Rectangle 		origin: self leftOffsetForDisplay @ (anElementIndex - 1 * lineGrid + self topOffsetForDisplay) 		extent: width @ lineGrid</body><body package="Aragon.Widgets">columnIndexFor: aPoint	| x |	x := self bounds left.	1 to: columns size do: [:i | x := x + (columns at: i) width. ((x-4) &lt; aPoint x) &amp; (aPoint x &lt; (x+4))		ifTrue: [^i]].	^0</body><body package="Aragon.Widgets">selectAll	self selectionMode == #singleSelect		ifFalse: 			[self setSelections: (1 to: self numberOfElements).			self invalidate]</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>initialize-release</category><body package="Aragon.Widgets">autoNewBlock: aValue	(autoNewBlock := aValue) notNil ifTrue: [self autoAppend].</body><body package="Aragon.Widgets">defaultSortBlock: aValue	defaultSortBlock := aValue.</body><body package="Aragon.Widgets">initialize	self allowForColumnDragging: true.	self allowForSorting: true.	showLineNumbers := false.	showLines := 0.	frozenEdge := 0.	^super initialize.</body><body package="Aragon.Widgets">release	columns := nil.	super release</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>displaying</category><body package="Aragon.Widgets">displayBackgroundIfNeededOn: aGraphicsContext	"Display the receiver's content on aGraphicsContext."	aGraphicsContext clippingBounds bottom &gt; self topOffsetForDisplay ifTrue: [super  displayBackgroundIfNeededOn: aGraphicsContext]</body><body package="Aragon.Widgets">displayGridLinesOn: aGraphicsContext for: interval 	"Display the receiver's content on aGraphicsContext."	| io lineGrid left right oldPaint bounds |	oldPaint := aGraphicsContext paint.	aGraphicsContext paint: self class linesColor.	io := self hasRowSelectors ifTrue: [2] ifFalse: [1].	columns size &lt; io ifTrue: [^self].	lineGrid := self lineGrid.	bounds := self bounds.	self showHorizontalLines		ifTrue: 			[| y |			left := (columns at: io) left + bounds left.			right := bounds right.			y := self topOffsetForDisplay + (interval first * lineGrid) - 1.			interval first to: interval last				do: 					[:i | 					aGraphicsContext displayLineFrom: left @ y to: right @ y.					y := y + lineGrid]].	self showVerticalLines		ifTrue: 			[| top bottom fe |			fe := self frozenEdge  + bounds left.			top := bounds top + self topOffsetForDisplay.			bottom := self topOffsetForDisplay + (interval last * lineGrid) - 1.			io to: columns size				do: 					[:i | 					| column x |					column := columns at: i.					column isFrozen						ifTrue: 							[x := column right - 1 + bounds left.							aGraphicsContext displayLineFrom: x @ top to: x @ bottom]						ifFalse: 							[x := column right - 1.							x &gt;= fe ifTrue: [aGraphicsContext displayLineFrom: x @ top to: x @ bottom]]]].	aGraphicsContext paint: oldPaint</body><body package="Aragon.Widgets">displayLabelsOn: aGraphicsContext 	| bounds gc fe |	bounds := self bounds.	aGraphicsContext clippingBounds top - self topOffsetForDisplay &gt; bounds top ifTrue: [^self].	fe := bounds left + self frozenEdge.	gc := aGraphicsContext copy.	columns		do: 			[:c | (c isFrozen not and: [c left &lt; fe])				ifTrue: [gc intersectClip: (fe @ bounds top corner: aGraphicsContext clippingBounds corner)].			c labelVisual displayOn: gc].	columns last right &lt; bounds right 		ifTrue:			[(NewRowVisual new) 				bounds: (columns last right @ bounds top corner: bounds right @ bounds top + self topOffsetForDisplay); 				displayOn: gc]</body><body package="Aragon.Widgets">displayOn: aGraphicsContext 	"Display the receiver's content on aGraphicsContext."	| e interval bounds |	bounds := self bounds.	interval := self visibleIntervalForBounds: bounds.	self displayBackgroundIfNeededOn: aGraphicsContext.	columns isEmpty ifTrue: [^self].	self setForegroundPaintOn: aGraphicsContext.	self showLabels ifTrue: [self displayLabelsOn: aGraphicsContext].	self hasRowSelectors		ifTrue: 			[self displayRowSelectorsOn: aGraphicsContext for: interval.			aGraphicsContext intersectClip: (bounds left: bounds left + columns first right)].	self displayVisualsOn: aGraphicsContext for: interval.	self showLines ifTrue: [self displayGridLinesOn: aGraphicsContext for: interval].	(e := self controller editor) notNil		ifTrue: 			[e bounds left &lt; self frozenEdge ifTrue: [controller repositionEditor].			aGraphicsContext intersectClip: self contentsAreaBounds.			e container displayOn: aGraphicsContext]</body><body package="Aragon.Widgets">displayRowIndicator: anImage in: elementBounds on: aGraphicsContext color: aColorValue	"Display the receiver's content on aGraphicsContext."	| oldPaint right |	oldPaint := aGraphicsContext paint.	aGraphicsContext paint: aColorValue.	right := columns first right.	columns first isFrozen ifTrue: [right := right + self bounds left].	anImage 		displayOn: aGraphicsContext 		at: right - anImage width - 4 @ (elementBounds top + (elementBounds height // 2) - 5).	aGraphicsContext paint: oldPaint</body><body package="Aragon.Widgets">displayRowSelectorsOn: aGraphicsContext for: interval 	"Display the receiver's content on aGraphicsContext."	| lineGrid box label lbox ly |	aGraphicsContext clippingBounds left - columns first right &gt; self bounds left ifTrue: [^self].	lineGrid := self lineGrid.	box := self bounds left @ (interval first - 1 * lineGrid + self topOffsetForDisplay) extent: columns first right @ lineGrid.	aGraphicsContext 		paint: SymbolicPaint pushButtonBackground; 		displayRectangle: (box origin extent: columns first right @ (lineGrid * interval size)); 		paint: self foregroundColor.	self showLineNumbers 		ifTrue: 			[label := columns first label component.			label labelString: '4444'.			lbox := label preferredBounds extent.			ly := box height - lbox y // 2].	box moveBy: 0 @ lineGrid negated.	interval first to: interval last		do: 			[:rowIndex | 			box moveBy: 0 @ lineGrid.			NSBorder raised displayOn: aGraphicsContext forDisplayBox: box.			self showLineNumbers 				ifTrue: 					[label labelString: rowIndex printString.					label displayOn: aGraphicsContext at: (box right - (lbox x / 4 * (label label text size) + 17) @ (box top + ly))].			rowIndex == targetIndex ifTrue: [self					displayRowIndicator: self class rowSelectorShape					in: box					on: aGraphicsContext					color: ColorValue black]].	(self autoNewBlock ~~ nil and: [interval last == sequence size])		ifTrue: [self				displayRowIndicator: self class autoAppendShape				in: box				on: aGraphicsContext				color: ColorValue black].</body><body package="Aragon.Widgets">displayStringAt: index	| cd val |	cd := columns at: ((sortColumn == nil or: [sortColumn == 0]) ifTrue: [1] ifFalse: [self sortColumn]).	val := cd editModel ifNotNil:[:editor| editor valueUsingSubject: (sequence at: index)].	val isNil ifTrue: [^''].	^cd renderer displayStringFor: val.</body><body package="Aragon.Widgets">displayTargetElement: index on: aGraphicsContext forBounds: elementBounds withPaint: aPaint 	| interval box |	interval := self visibleIntervalForBounds: self bounds.	(index between: interval first and: interval last) ifFalse: [^self].	box := elementBounds.	self hasRowSelectors ifTrue: [self displayTargetSelectorAt: index on: aGraphicsContext within: box].	self controller isBrowsing 		ifTrue: [(self hasTreeView and: [(self isSelected: index) not])			ifTrue: 				[elementBounds left: treeViewColumn left.				self treeView					displayTargetElement: index					on: aGraphicsContext					forBounds: elementBounds					withPaint: aPaint]			ifFalse: 				[self showHorizontalLines ifTrue: [box bottom: box bottom - 1].				super					displayTargetElement: index					on: aGraphicsContext					forBounds: box					withPaint: aPaint]]</body><body package="Aragon.Widgets">displayTargetSelectorAt: index on: aGraphicsContext within: box	| rbox |	rbox := box copy right: self bounds left + (columns at: 2) left.	(self autoNewBlock == nil or: [index &lt; sequence size])		ifTrue: [self				displayRowIndicator: self class rowSelectorShape				in: rbox				on: aGraphicsContext				color: (index == targetIndex						ifTrue: [SymbolicPaint pushButtonBackground]						ifFalse: [ColorValue black])].	box left: rbox right</body><body package="Aragon.Widgets">displayVisualsOn: aGraphicsContext for: interval 	"Display the receiver's content on aGraphicsContext."	(NDSRenderer new view: self)		displayRowsOn: aGraphicsContext for: interval.	self hasTreeView		ifTrue: 			[| gc box bounds to |			gc := aGraphicsContext copy.			bounds := self bounds.			to := self topOffsetForDisplay.			box := (self treeViewOrigin  + (0@bounds top)) 				corner: treeViewColumn right @ ((bounds bottom - to truncateTo: self lineGrid) + to).			gc intersectClip: box.			self treeView displayOn: gc at: self treeViewOrigin]</body><body package="Aragon.Widgets">undisplayTargetElement: index on: aGraphicsContext forBounds: elementBounds 	"Display the receiver's content on aGraphicsContext."	(self showVerticalLines and: [self controller isBrowsing])		ifTrue: [self invalidateRectangle: elementBounds]		ifFalse: [super				undisplayTargetElement: index				on: aGraphicsContext				forBounds: elementBounds]</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>private</category><body package="Aragon.Widgets">_invalidateRectangle: aRectangle repairNow: aBoolean	(self isOpen and: [self isOpaque and: [self isEditing]])		ifTrue: [self displayOn: (self graphicsContext clippingRectangle: aRectangle)]		ifFalse: [super invalidateRectangle: aRectangle repairNow: aBoolean].</body><body package="Aragon.Widgets">displayBlockAtCellIndex: aCell 	| displayBlock |	(columns at: aCell x) isRowSelector ifTrue: [^nil].	displayBlock := (controller isBrowsing and: [self isSelected: aCell y]) ifTrue: [selectedVisualBlock] ifFalse: [visualBlock].	displayBlock isNil ifTrue: [^nil].	(displayBlock isKindOf: Collection) ifTrue: [displayBlock := displayBlock at: (self hasRowSelectors ifTrue: [aCell x - 1] ifFalse: [aCell x])].	^displayBlock</body><body package="Aragon.Widgets">isHilited: rowIndex	^self controller isBrowsing and: [super isHilited: rowIndex]</body><body package="Aragon.Widgets">layoutLabels	| bottom |	bottom := self topOffsetForDisplay.	frozenEdge := 0.	1 to: columns size		do: 			[:i | 			| column |			column := columns at: i.			column isFrozen ifTrue: [frozenEdge := column right].			column labelVisual bounds: (column left @ 0 corner: column right @ bottom)]</body><body package="Aragon.Widgets">privateShowLines: aValue 	aValue = showLines		ifFalse: 			[showLines := aValue.			self fixScrollingOffset.			self invalidateAndEdit]</body><body package="Aragon.Widgets">setSelectionIndex: anIndex	lastSelectionIndex := selectionIndex := anIndex.	selections := anIndex == 0 ifTrue: [Set new] ifFalse: [Set with: anIndex]</body><body package="Aragon.Widgets">silentlyMakeVisible: indx	| range comp |	"Make sure any pending damage is repaired before we scroll the list."	(comp := self topComponent) notNil ifTrue: [comp displayPendingInvalidation].	range := self visibleIntervalForBounds: self bounds.	(range first &lt;= indx and: [indx &lt;= range last]) ifTrue: [^self].	indx &lt; range first ifTrue: [^self changePositionBy: 0@(indx-range first*self lineGrid) negated].	self changePositionBy: 0@(indx - range last*self lineGrid) negated.</body><body package="Aragon.Widgets">toggleOnMove	^self isEditing or: [super toggleOnMove]</body><body package="Aragon.Widgets">useSelectionIndexForEditing: anIndex	"This message is sent by the view's controller, when a new cell is to be edited. This message is used 	instead of &gt;&gt;useSingleSelectionIndex: to select the cell's row. Since the method doesn't do any 	invalidation, however, it is assumed that there has been some editing taking place before. In particular, 	if this is the first editing after a browse mode period either, there must have been exactly one row beeing 	selected before, or all the eventually existing selections must have been removed explicitly 	with &gt;&gt;retractAllSelections."	self hasTreeView ifTrue: [^super useSingleSelectionIndex: anIndex].	(self selections size = 1 and: [self isSelected: anIndex])		ifTrue: [^self].	self makeVisible: anIndex.	self setSelections: (self selections species with: anIndex).	lastSelectionIndex := anIndex.	self targetIndex: anIndex.	self selectionChannel value: self selections.</body><body package="Aragon.Widgets">useSingleSelectionIndex: anIndex 	self isEditing		ifTrue: [super reallyUseSingleSelectionIndex: anIndex]		ifFalse: [super useSingleSelectionIndex: anIndex]</body><body package="Aragon.Widgets">visibleExtent	"Answer the extent of the receiver's clipping box."	^(self bounds extent - (0@self topOffsetForDisplay) truncateTo: scrollOffset grid) 		max: scrollOffset grid"	^super visibleExtent - (0@self topOffsetForDisplay)"</body><body package="Aragon.Widgets">visibleIntervalForBounds: aRectangle	"Answer the first visible index in the receiver."	| first lineGrid last | 	lineGrid := self lineGrid.	first := aRectangle top // lineGrid + 1.	last := (aRectangle bottom - self topOffsetForDisplay) // lineGrid.	last := last min: self numberOfElements.	^first to: last</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>privileged</category><body package="Aragon.Widgets">autoAppend	| anb |	(anb :=self autoNewBlock) == nil 		ifFalse:			[| newEntry |			newEntry := anb value.			(sequence isEmpty or: [sequence last ~= newEntry])				ifTrue: 					[sequence addLast: newEntry.					^true]].	^false</body><body package="Aragon.Widgets">autoNewBlock	^autoNewBlock</body><body package="Aragon.Widgets">columnDescriptors	^self columns</body><body package="Aragon.Widgets">columnDescriptors: anArray 	self columns: anArray</body><body package="Aragon.Widgets">columnSortBlockFor: aColumnIndex default: defaulSortBlock 	| criterium sortBlock row |	(aColumnIndex == nil or: [aColumnIndex == 0]) ifTrue: [^defaulSortBlock].	criterium := (columns at: (aColumnIndex abs)) editModel.	criterium isNil ifTrue: [^nil].	row := model value detect: [:r | (criterium valueUsingSubject: r) ~~ nil] ifNone: [^nil].	((criterium valueUsingSubject: row) respondsTo: #&lt;)		ifTrue: [aColumnIndex &gt; 0				ifTrue: [sortBlock := 							[:a :b | 							| v1 v2 |							v1 := criterium valueUsingSubject: a.							v2 := criterium valueUsingSubject: b.							v1 == nil or: [v2 ~~ nil and: [v1 &lt; v2]]]]				ifFalse: [sortBlock := 							[:a :b | 							| v1 v2 |							v1 := criterium valueUsingSubject: a.							v2 := criterium valueUsingSubject: b.							v2 == nil or: [v1 ~~ nil and: [v2 &lt; v1]]]]]		ifFalse: [aColumnIndex &gt; 0				ifTrue: [sortBlock := 							[:a :b | 							| v1 v2 |							v1 := criterium valueUsingSubject: a.							v2 := criterium valueUsingSubject: b.							v1 == nil or: [v2 ~~ nil and: [v1 displayString &lt; v2 displayString]]]]				ifFalse: [sortBlock := 							[:a :b | 							| v1 v2 |							v1 := criterium valueUsingSubject: a.							v2 := criterium valueUsingSubject: b.							v2 == nil or: [v1 ~~ nil and: [v2 displayString &lt; v1 displayString]]]]].	^defaulSortBlock notNil		ifTrue: [			[:a :b | 			| v1 v2 |			v1 := criterium valueUsingSubject: a.			v2 := criterium valueUsingSubject: b.			(v1 == nil or: [v2 ~~ nil and: [v1 = v2]])				ifTrue: [defaulSortBlock value: a value: b]				ifFalse: [sortBlock value: a value: b]]]		ifFalse: [sortBlock]</body><body package="Aragon.Widgets">computeWidth	| x |	columns isEmpty ifTrue: [^cachedWidth := 0].	(columns at: 1) left: (x := 0).	2 to: columns size do: [:i | (columns at: i) left: (x := x + (columns at: i-1) width)].	self layoutLabels.	^cachedWidth := columns last right.</body><body package="Aragon.Widgets">computeWidthFrom: start to: stop	^self computeWidth</body><body package="Aragon.Widgets">defaultSortBlock	^defaultSortBlock</body><body package="Aragon.Widgets">inDefaultEdgeDecorator	^LookPreferences edgeDecorator onScroller: (NewDataSetScrollWrapper on: self)</body><body package="Aragon.Widgets">silentlySortEntries	| sortBlock dependents |	(model value isNil or: [model value isEmpty]) ifTrue: [^self].	self allowsForSorting ifFalse: [^self].	sortBlock := self columnSortBlockFor: sortColumn default: self defaultSortBlock.	sortBlock isNil ifTrue: [^self].	(model value isKindOf: List)		ifFalse: [super sequence: (model setValue: (model value asList)) value].	Cursor execute		showWhile: 			[| newEntry selectedEntries targetEntry | 			selectedEntries := (selections select: [:i | i&gt;0 &amp; (i&lt;=sequence size)]) collect: [:i | sequence at: i].			targetEntry := (targetIndex &gt; self zeroIndex and: [targetIndex &lt;= self numberOfElements]) 				ifTrue: [sequence at: targetIndex].			dependents := sequence myDependents.			sequence breakDependents.			newEntry := self autoNewBlock isNil ifFalse: [sequence removeLast].			sequence sortWith: sortBlock.			newEntry == nil ifFalse: [sequence addLast: newEntry].			selectedEntries isEmpty 				ifFalse: [self setSelections: (selectedEntries collect: [:each | sequence indexOf: each])].			(targetEntry notNil and: [(targetEntry  := sequence indexOf: targetEntry) &gt; 0])				ifTrue: 					[self targetIndex: targetEntry.					self silentlyMakeVisible: targetIndex].			controller editor notNil				ifTrue: 					[controller editCell y: self selectionIndex.					controller repositionEditor].			self selectionChannel setValue: self selections.			sequence myDependents: dependents].</body><body package="Aragon.Widgets">sortEntries	self silentlySortEntries; invalidate</body><body package="Aragon.Widgets">sortOrder	^(sortColumn == nil or: [sortColumn &gt; 0])		ifTrue: [#ascending]		ifFalse: [#descending]</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>bounds accessing</category><body package="Aragon.Widgets">bounds	"Answer the receiver's compositionBounds if there is a container, otherwise answer preferredBounds." 	^container == nil		ifTrue: [self preferredBounds]		ifFalse: [container compositionBoundsFor: self].</body><body package="Aragon.Widgets">bounds: b 	self hasTreeView		ifTrue: 			[| box |			box := self treeViewOrigin extent: treeViewColumn width @ self treeView preferredBounds height.			self treeView container bounds: box].	super bounds: b</body><body package="Aragon.Widgets">contentsAreaBounds	| box |	box := self bounds.	box top: box top + self topOffsetForDisplay.	self hasRowSelectors ifTrue: [box left: box left + columns first right].	^box.</body><body package="Aragon.Widgets">hScrollBounds	"Answer the rectangle in which the model can be displayed--this	is the displayBox inset by the height of a line for an item."	| box |	box := 0@0 extent: self bounds extent.	box left: self leftOffsetForDisplay + (self frozenEdge - self leftOffsetForDisplay).	^box</body><body package="Aragon.Widgets">labelAreaBounds	^self bounds height: self topOffsetForDisplay.</body><body package="Aragon.Widgets">preferredWidth	cachedWidth isNil ifTrue: [self computeWidth].	^cachedWidth</body><body package="Aragon.Widgets">topOffsetForDisplay	topOffset isNil		ifTrue: 			[topOffset := 5.			columns do: [:cd | topOffset := topOffset max: cd labelHeight - 2]].	^topOffset</body><body package="Aragon.Widgets">treeViewOrigin	^treeViewColumn left @ self topOffsetForDisplay</body><body package="Aragon.Widgets">vScrollBounds	"Answer the rectangle in which the model can be displayed--this	is the displayBox inset by the height of a line for an item."	| box |	box := 0@0 extent: self bounds extent.	box top: self topOffsetForDisplay.	box height: (box height truncateTo: self lineGrid).	^box</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>visual properties</category><body package="Aragon.Widgets">traversalHiliteColor	"Answer the color to use for displaying traversal-highlight rectangles."	^TargetPaint</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>controller accessing</category><body package="Aragon.Widgets">defaultControllerClass	"Answer a default controller class for the receiver."	^NewDataSetController</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>focus accessing</category><body package="Aragon.Widgets">hasFocus: aBoolean 	self isEditing ifTrue: [^self].	state hasKeyboardFocus == aBoolean ifTrue: [^self].	state hasKeyboardFocus: aBoolean.	(aBoolean and: [targetIndex = self zeroIndex])		ifTrue: [self setValidTargetIndex: 1].	(self isEditing)		ifFalse: [self invalidateRectangle: (self boundsOfElementIndex: targetIndex inBounds: self bounds)]</body></methods><methods><class-id>Aragon.NewDataSetView</class-id> <category>bounds changing</category><body package="Aragon.Widgets">changedPreferredGeometry	super changedPreferredGeometry.	self hasTreeView ifTrue: [self bounds: self bounds]</body></methods><methods><class-id>Aragon.NewDataSetView class</class-id> <category>class initialization</category><body package="Aragon.Widgets">initialize	self minCellWidth: 7.	self linesColor: ColorValue lightGray.	self targetPaint: SymbolicPaint traversalHilite.	Icons := IdentityDictionary new		add: #ascending -&gt; (OpaqueImage figure: self sortAscendingIndicatorIcon shape: self sortAscendingIndicatorShape); 		add: #descending -&gt; (OpaqueImage figure: self sortDescendingIndicatorIcon shape: self sortDescendingIndicatorShape); 	yourself.</body><body package="Aragon.Widgets">linesColor	^LinesColor</body><body package="Aragon.Widgets">linesColor: aPaint	LinesColor := aPaint</body><body package="Aragon.Widgets">minCellWidth	^MinCellWidth</body><body package="Aragon.Widgets">minCellWidth: anInteger	MinCellWidth := anInteger</body><body package="Aragon.Widgets">targetPaint	^TargetPaint</body><body package="Aragon.Widgets">targetPaint: aPaint	TargetPaint := aPaint</body></methods><methods><class-id>Aragon.EnhancedGroupBoxSpec</class-id> <category>initialize-release</category><body package="Aragon.Widgets">initialize	"Initialize the receiver."	bevel := 0</body></methods><methods><class-id>Aragon.EnhancedGroupBoxSpec</class-id> <category>accessing</category><body package="Aragon.Widgets">bevel	^bevel</body><body package="Aragon.Widgets">bevel: aValue	bevel := aValue</body></methods><methods><class-id>Aragon.EnhancedGroupBoxSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteIconImage	"Answer an image to reperesent spec on the palette"	paletteIcon isNil ifTrue: [paletteIcon := Array with: (OpaqueImage figure: (CachedImage on: self paletteImage)						shape: (CachedImage on: self paletteMonoIcon))					with: (CachedImage on: self paletteMonoIcon)].	^paletteIcon at: (Screen default colorDepth == 1			ifTrue: [2]			ifFalse: [1])</body></methods><methods><class-id>Aragon.EnhancedGroupBoxSpec class</class-id> <category>private-interface building</category><body package="Aragon.Widgets">addBindingsTo: env for: inst channel: aChannel	super addBindingsTo: env for: inst channel: aChannel.	env at: #bevel put: (self adapt: inst forAspect: #bevel channel: aChannel).</body><body package="Aragon.Widgets">componentName	"Identification of component"	^'Enh. Group Box'</body></methods><methods><class-id>Aragon.EnhancedGroupBoxSpec class</class-id> <category>class initialization</category><body package="Aragon.Widgets">initialize	self installOnPalette</body><body package="Aragon.Widgets">shouldBeOnPalette	^true</body></methods><methods><class-id>Aragon.ToolbarButtonController</class-id> <category>basic control sequence</category><body package="Aragon.Widgets">controlTerminate	view hasCursor: false.</body></methods><methods><class-id>Aragon.ToolbarButtonController</class-id> <category>accessing</category><body package="Aragon.Widgets">fireOnDown: aBoolean	fireOnDown := aBoolean</body></methods><methods><class-id>Aragon.ToolbarButtonController</class-id> <category>event driven</category><body package="Aragon.Widgets">selectEvent: event	super selectEvent: event.	fireOnDown == true ifTrue: [self trigger. view isInTransition ifTrue: [view isInTransition: false]].</body></methods><methods><class-id>Aragon.ToolbarButtonController</class-id> <category>control defaults</category><body package="Aragon.Widgets">isControlActive	"Answer whether the receiver wants to retain control."	^self viewHasCursor and: [self sensor blueButtonPressed not]</body><body package="Aragon.Widgets">isControlWanted	"Answer true if the cursor is inside the display box of the receiver's view,	and if the red button is being pressed."	"Subclasses may want to enhance this test."	^self viewHasCursor</body></methods><methods><class-id>Aragon.NDSInputFieldView</class-id> <category>private</category><body package="Aragon.Widgets">displayOrigin	"Answer the origin of the receiver's scrolled coordinate system."	^self inset@(self bounds bottom - displayContents lineGrid) - (0@1)</body></methods><methods><class-id>Aragon.GaugeView</class-id> <category>displaying</category><body package="Aragon.Widgets">displayContentsOn: aGraphicsContext in: aRectangle	| box |	box := aRectangle.	self setForegroundPaintOn: aGraphicsContext.	self isHorizontal		ifTrue: 			[box := box insetBy: 2 @ 2.			self isDiscrete				ifTrue: 					[| dx xmax |					dx := box height * 5 // 6 max: 1.					xmax := box right.					(box left to: (box width * pos) truncated						by: dx)						do: 							[:x | 							box left: x; right: (x + dx - 2 min: xmax).							aGraphicsContext displayRectangle: box]]				ifFalse: 					[box width: (box width * pos) truncated.					box left: box left.					aGraphicsContext displayRectangle: box]]		ifFalse: 			[box := box insetBy: 2 @ 2.			self isDiscrete				ifTrue: 					[| dy ymin |					dy := box width * 5 // 6 max: 1.					ymin := box top.					(box bottom to: (box height * pos) truncated + dy - 1						by: dy negated)						do: 							[:x | 							box bottom: x; top: (x - dy + 2 max: ymin).							aGraphicsContext displayRectangle: box]]				ifFalse: 					[box top: box bottom - (box height * pos) truncated.					box bottom: box bottom.					aGraphicsContext displayRectangle: box]]</body><body package="Aragon.Widgets">displayOn: aGraphicsContext 	| box |	box := self bounds copy.	state hasBorder ifTrue: [BeveledBorder inset1			displayOn: aGraphicsContext			forDisplayBox: box			using: self].	self displayContentsOn: aGraphicsContext in: box</body><body package="Aragon.Widgets">simpleRedisplayIn: aRectangle 	(self canShrink or: [pos = 0 or: [container == nil]])		ifTrue: [self invalidateRectangle: (aRectangle insetBy: 1) repairNow: true]		ifFalse: [self displayContentsOn: self graphicsContext in: aRectangle]</body></methods><methods><class-id>Aragon.GaugeView</class-id> <category>accessing</category><body package="Aragon.Widgets">canShrink	^canShrink</body><body package="Aragon.Widgets">canShrink: aBoolean	canShrink := aBoolean</body><body package="Aragon.Widgets">orientation	^orientation</body><body package="Aragon.Widgets">orientation: aValue	orientation := aValue</body><body package="Aragon.Widgets">range	^range</body><body package="Aragon.Widgets">range: aValue 	(range := aValue) isNil 		ifTrue: [range := RangeMap start: 0 stop: 100 grid: 10]</body><body package="Aragon.Widgets">style	^style</body><body package="Aragon.Widgets">style: aSymbol	style := aSymbol</body></methods><methods><class-id>Aragon.GaugeView</class-id> <category>testing</category><body package="Aragon.Widgets">isContinuous	^style == #continuous</body><body package="Aragon.Widgets">isDiscrete	^style == #discrete</body><body package="Aragon.Widgets">isHorizontal	^orientation == #horizontal</body><body package="Aragon.Widgets">isVertical	^orientation == #vertical</body></methods><methods><class-id>Aragon.GaugeView</class-id> <category>initialize-release</category><body package="Aragon.Widgets">beHorizontal	self orientation: #horizontal</body><body package="Aragon.Widgets">beVertical	self orientation: #vertical</body><body package="Aragon.Widgets">initialize	super initialize.	pos := 0.</body></methods><methods><class-id>Aragon.GaugeView</class-id> <category>updating</category><body package="Aragon.Widgets">update: anAspectSymbol with: aParameter from: aSender 	| oldPos |	oldPos := pos.	pos := range map: model value.	pos ~= oldPos ifTrue: [self simpleRedisplay]"self canShrink			ifTrue: [self simpleRedisplay]			ifFalse: 				[| box |				box := self bounds copy.				box left: box width * oldPos - box height.				self invalidateRectangle: box]]"</body></methods><methods><class-id>Aragon.GaugeView</class-id> <category>private-visual properties</category><body package="Aragon.Widgets">specificForegroundColor	^self specificSelectionBackgroundColor</body></methods><methods><class-id>Aragon.TreeView</class-id> <category>accessing</category><body package="Aragon.Widgets">displayButtons	^displayButtons</body><body package="Aragon.Widgets">displayButtons: aBoolean 	displayButtons == aBoolean		ifFalse: 			[displayButtons := aBoolean.			self invalidate]</body><body package="Aragon.Widgets">displayImages	^imageList notNil</body><body package="Aragon.Widgets">displayImages: aBoolean 	aBoolean		ifTrue: [imageList isNil ifTrue: [self imageList: DefaultImageList]]		ifFalse: [self imageList: nil]</body><body package="Aragon.Widgets">displayLines	^displayLines</body><body package="Aragon.Widgets">displayLines: aBoolean 	displayLines == aBoolean		ifFalse: 			[displayLines := aBoolean.			self invalidate]</body><body package="Aragon.Widgets">imageList	^imageList</body><body package="Aragon.Widgets">imageList: anImageList 	(imageList := anImageList) isNil 			ifFalse: [imageList associationsDo: [:each | (each value isKindOf: Association)				ifFalse: [imageList at: each key put: each value -&gt; each value]]].	leftOffset := self leftOffsetForDisplay.	self invalidate</body><body package="Aragon.Widgets">lineGrid: aValue	super lineGrid: aValue.	pixmaps := IdentityDictionary new.</body><body package="Aragon.Widgets">linesAtRoot	^linesAtRoot</body><body package="Aragon.Widgets">linesAtRoot: aBoolean 	linesAtRoot == aBoolean		ifFalse: 			[linesAtRoot := aBoolean.			self invalidate]</body><body package="Aragon.Widgets">offsetForIndent	^self class offsetForIndent</body></methods><methods><class-id>Aragon.TreeView</class-id> <category>bounds accessing</category><body package="Aragon.Widgets">bounds	"Answer the receiver's compositionBounds if there is a container, otherwise answer preferredBounds." 	^container == nil		ifTrue: [self preferredBounds]		ifFalse: [container compositionBoundsFor: self]</body><body package="Aragon.Widgets">labelAndImageBoundsAt: anIndex	| answer |	answer := self labelBoundsAt: anIndex.	^answer left: answer left - leftOffset.</body><body package="Aragon.Widgets">labelBoundsAt: anIndex 	| i |	i := anIndex.	sequence 		nodesDo: [:each :indent | (i := i - 1) = 0			ifTrue: 				[| elementBounds |				elementBounds := self boundsOfElementIndex: anIndex inBounds: self bounds.				^self					labelBoundsFor: each displayString					inElementBounds: elementBounds					indent: indent					scanner: (self displayScannerFor: self graphicsContext)]]		indent: (linesAtRoot ifTrue: [1] ifFalse: [0]).	^0@0 corner: 0@0</body><body package="Aragon.Widgets">labelBoundsFor: aString inElementBounds: elementBounds indent: indent scanner: scanner 	^elementBounds left + leftOffset + (indent * self offsetForIndent) - 2 @ elementBounds top 	 extent: ((scanner text: aString; lastIndex: 1; setStopConditions) measureString: aString) + 4 @ elementBounds height</body></methods><methods><class-id>Aragon.TreeView</class-id> <category>private-displaying</category><body package="Aragon.Widgets">buttonPixmapFor: aSymbol background: backgroundColor 	| img box pixmap gc |	img := PlusMinusImages at: aSymbol.	box := 0 @ 0 corner: img extent - 1.	pixmap := Pixmap extent: img extent.	gc := pixmap graphicsContext.	gc paint: backgroundColor; displayRectangle: box.	gc paint: SymbolicPaint shadow; displayRectangularBorder: box.	gc paint: self foregroundColor.	img displayOn: gc.	^CachedImage on: pixmap asImage</body><body package="Aragon.Widgets">buttonPixmapsFor: aGraphicsContext 	| answer |	(answer := pixmaps at: #buttons ifAbsent: []) == nil		ifTrue: 			[| bg |			((bg := self backgroundColor) isKindOf: SymbolicPaint)				ifTrue: [bg := aGraphicsContext paintPreferencesMatchAt: bg].			pixmaps add: #buttons -&gt; (answer := IdentityDictionary new).			answer add: #expanded -&gt; (self buttonPixmapFor: #expanded background: bg).			answer add: #collapsed -&gt; (self buttonPixmapFor: #collapsed background: bg)].	^answer</body><body package="Aragon.Widgets">iconFor: aNode isSelected: isSelected	| assoc |	assoc := aNode icons ~~ nil				ifTrue: [aNode icons]				ifFalse: [imageList at: aNode type ifAbsent: [self class defaultIcons]].	^(DisplayOpenFolderWhenSelectedOnly == true ifTrue: [isSelected] ifFalse: [aNode isExpanded])		ifTrue: [assoc value]		ifFalse: [assoc key].</body><body package="Aragon.Widgets">lineIMask	| pixmap gc h |	pixmap := self linePixmapExtent: 1@(h := self lineGrid).	gc := pixmap graphicsContext clear.	gc paint: self traversalHiliteColor.	gc displayLineFrom: 0@0 to: 0@h.	pixmap := pixmap asImage.	^CachedImage on: pixmap asImage</body><body package="Aragon.Widgets">lineLMask	| pixmap ext gc |	ext := (self displayImages ifTrue: [13] ifFalse: [11])@(self lineGrid // 2).	pixmap := self linePixmapExtent: ext + (0@1).	gc := pixmap graphicsContext clear.	gc paint: self traversalHiliteColor.	gc displayLineFrom: 0@0 to: 0@ext y.	gc displayLineFrom: 0@ext y to: ext.	^CachedImage on: pixmap asImage</body><body package="Aragon.Widgets">linePixmapExtent: ext"	pixmap := Mask extent: ext."	| pixmap |	pixmap := Pixmap extent: ext.	((pixmap medium paintPreferences matchAt: self traversalHiliteColor) isKindOf: Pattern) 		ifTrue: [pixmap := Mask extent: ext]		ifFalse: [pixmap background: self paintPreferences backgroundColor].	^pixmap</body><body package="Aragon.Widgets">linePixmapsFor: aGraphicsContext 	| answer |	(answer := pixmaps at: #lines ifAbsent: []) == nil		ifTrue: 			[pixmaps add: #lines -&gt; (answer := Array new: 3).			answer at: 1 put: self lineTMask.			answer at: 2 put: self lineLMask.			answer at: 3 put: self lineIMask].	^answer</body><body package="Aragon.Widgets">lineTMask	| pixmap ext gc |	ext := (self displayImages ifTrue: [13] ifFalse: [11])@(self lineGrid).	pixmap := self linePixmapExtent: ext.	gc := pixmap graphicsContext clear.	gc paint: self traversalHiliteColor.	gc displayLineFrom: 0@0 to: 0@ext y.	ext y: ext y // 2.	gc displayLineFrom: 0@ext y to: ext.	^CachedImage on: pixmap asImage</body></methods><methods><class-id>Aragon.TreeView</class-id> <category>private</category><body package="Aragon.Widgets">computeWidthFrom: startIndex to: stopIndex	"Measure the receiver's lines from startIndex to stopIndex."	| width compositionScanner limit style i |	width := 0.	limit := SmallInteger maxVal.	style := self textStyle.	compositionScanner := CompositionScanner			fontPolicy: Screen default defaultFontPolicy			text: ''			textAttributes: style.	i := 0.	sequence 		nodesDo:			[:node :indent |			compositionScanner text: node displayString.			compositionScanner				composeLine: (i := i+1)				fromCharacterIndex: 1 				leftMargin: leftOffset + (indent * self offsetForIndent)				rightMargin: limit.			width &lt; compositionScanner rightX				ifTrue: [width := compositionScanner rightX]]		indent: (linesAtRoot ifTrue: [1] ifFalse: [0]).	width := width + (style firstIndent max: style restIndent) + style rightIndent.	^width</body><body package="Aragon.Widgets">displayScannerFor: aGraphicsContext 	^DisplayScanner		fontPolicy: aGraphicsContext fontPolicy		text: ''		textAttributes: self textStyle</body><body package="Aragon.Widgets">displayStringAt: index	^displayStringSelector == nil		ifTrue: [(sequence nodeAt: index) displayString]		ifFalse: [(sequence nodeAt: index) perform: displayStringSelector]</body><body package="Aragon.Widgets">leftOffsetForDisplay	"Answer an indent for the case where display is optomized for Text."	| answer |	answer := 7.	self displayImages ifTrue: [answer := answer + 2 + (imageList inject: 0 into: [:max :icons | (icons key bounds width max: icons value bounds width)							max: max])].	^answer</body><body package="Aragon.Widgets">pointIsButton: aPoint 	| i node indent |	self displayButtons ifFalse: [^false].	i := self elementIndexFor: aPoint.	sequence		detectNode: [:each :ind | (i := i - 1) = 0			ifTrue: 				[node := each.				indent := ind.				true]			ifFalse: [false]]		ifNone: [^false].	linesAtRoot ifTrue: [indent := indent + 1].	node hasChildren ifFalse: [^false].	aPoint x &lt; (indent * self offsetForIndent - 11) ifTrue: [^false].	aPoint x &gt; (indent * self offsetForIndent - 2) ifTrue: [^false].	^true</body><body package="Aragon.Widgets">pointIsOnLabel: aPoint 	^(self labelAndImageBoundsAt: (self elementIndexFor: aPoint))		containsPoint: aPoint</body></methods><methods><class-id>Aragon.TreeView</class-id> <category>initialize-release</category><body package="Aragon.Widgets">initialize	super initialize.	self		displayImages: true;		displayLines: true;		displayButtons: true;		linesAtRoot: false;		measureWidth: false.	pixmaps := IdentityDictionary new.</body><body package="Aragon.Widgets">initializeGrid	grid := [self textStyle lineGrid+1 roundTo: 2]</body></methods><methods><class-id>Aragon.TreeView</class-id> <category>displaying</category><body package="Aragon.Widgets">displayButtonsOn: aGraphicsContext 	"Display the receiver's content on aGraphicsContext."	| rect lineGrid pmaps y pt offset |	pmaps := self buttonPixmapsFor: aGraphicsContext.	rect := self boundsOfElementIndex: 1 inBounds: self bounds.	pt := rect left -10 @ (rect bottom - (rect height // 2) - 4).	rect := aGraphicsContext clippingBounds.	offset := self offsetForIndent.	lineGrid := self lineGrid.	y := 0.	sequence 		nodesDo: 			[:each :indent | 			y + lineGrid &gt; rect top				ifTrue: 					[y &gt; rect bottom ifTrue: [^self].					each hasChildren 						ifTrue: [(pmaps at: each status)							displayOn: aGraphicsContext at: pt + (indent * offset @ y)]].			y := y + lineGrid]		indent: (linesAtRoot ifTrue: [1] ifFalse: [0])</body><body package="Aragon.Widgets">displayImagesOn: aGraphicsContext 	"Display the receiver's content on aGraphicsContext."	| rect lineGrid y offset left i |	rect := self boundsOfElementIndex: 1 inBounds: self bounds.	left := rect left + 6.	rect := aGraphicsContext clippingBounds.	offset := self offsetForIndent.	lineGrid := self lineGrid.	y := 0.	i := 0.	sequence 		nodesDo: 			[:each :indent || icon |			i := i+1.			y + lineGrid &gt; rect top				ifTrue: 					[y &gt; rect bottom ifTrue: [^self].					icon := self iconFor: each isSelected: (self isSelected: i).					icon displayOn: aGraphicsContext at: (indent * offset + left @ (y + (lineGrid - icon bounds height // 2)))].			y := y + lineGrid]		indent: (linesAtRoot ifTrue: [1] ifFalse: [0])</body><body package="Aragon.Widgets">displayLinesOn: aGraphicsContext 	"Display the receiver's content on aGraphicsContext."	| rect lineGrid y offset lastIndent x indents images img3 |	rect := aGraphicsContext clippingBounds.	offset := self offsetForIndent.	lineGrid := self lineGrid.	y := 0 - lineGrid.	x := offset - 6.	indents := OrderedCollection new.	lastIndent := 0.	images := self linePixmapsFor: aGraphicsContext.	img3 := images at: 3.	aGraphicsContext paint: self shadowColor.	[sequence		nodesDo: 			[:each :indent | 			| xl is img |			xl := x.			is := indents.			img := images at: 1.			indent ~~ lastIndent				ifTrue: 					[is := indents copy.					indent &gt; lastIndent						ifTrue: 							[| siblings |							siblings := each parent parent == nil										ifTrue: [sequence roots]										ifFalse: [each parent parent children].							each parent == siblings last								ifTrue: [img := images at: 2]								ifFalse: [indents add: indent]]						ifFalse: 							[img := images at: 2.							[indents size &gt; 0 and: [indents last &gt; indent]]								whileTrue: [indents removeLast]].					x := indent * offset - 6].			y + lineGrid &gt; rect top				ifTrue: 					[y &gt; rect bottom ifTrue: [^self].					lastIndent &gt; 0 						ifTrue: 							[img displayOn: aGraphicsContext at: xl @ y.							is do: [:i | img3 displayOn: aGraphicsContext at: i - 1 * offset - 6 @ y]]].			lastIndent := indent.			y := y + lineGrid]		indent: (lastIndent := linesAtRoot ifTrue: [1] ifFalse: [0])]		valueNowOrOnUnwindDo: [lastIndent &gt; 0 ifTrue: [(images at: 2) displayOn: aGraphicsContext at: x @ y]]</body><body package="Aragon.Widgets">displayOn: aGraphicsContext 	"Display the receiver's content on aGraphicsContext.""	(Time millisecondsToRun: ["	self displayBackgroundIfNeededOn: aGraphicsContext in: self bounds.	self displayImages ifTrue: [self displayImagesOn: aGraphicsContext].	self displayVisualsOn: aGraphicsContext.	self displayLines ifTrue: [self displayLinesOn: aGraphicsContext].	self displayButtons ifTrue: [self displayButtonsOn: aGraphicsContext]."	self _displayVisualsOn: aGraphicsContext.""	]) transcribeCr."</body><body package="Aragon.Widgets">displayTargetElement: index on: aGraphicsContext forBounds: elementBounds withPaint: aPaint	"Display the receiver's content on aGraphicsContext."	| i |	i := 0.	sequence 		nodesDo: [:each :indent | (i := i + 1) == index			ifTrue: 				[aGraphicsContext paint: aPaint.				aGraphicsContext displayInteriorRectangularBorder: (self						labelBoundsFor: each displayString						inElementBounds: elementBounds						indent: indent						scanner: (self displayScannerFor: aGraphicsContext)).				^self]]		indent: (linesAtRoot ifTrue: [1] ifFalse: [0]).</body><body package="Aragon.Widgets">displayVisualsOn: aGraphicsContext 	"Display the receiver's content on aGraphicsContext."	| rect i bounds scanner measurer style |	self setForegroundPaintOn: aGraphicsContext.	scanner := self displayScannerFor: aGraphicsContext.	measurer := scanner copy.	rect := aGraphicsContext clippingBounds.	bounds := self bounds.	style := self textStyle.	i := 0.	sequence		nodesDo: 			[:each :indent || elementBounds |  i := i+1.			elementBounds := self boundsOfElementIndex: i inBounds: bounds.			elementBounds top &gt; rect bottom ifTrue: [^self].			(rect intersects: elementBounds)				ifTrue: 					[| str oldPaint |					str := each displayString.					oldPaint := nil.					((self isSelected: i) and: [self class useStandardHiliting or: [self hasFocus]])						ifTrue: 							[oldPaint := aGraphicsContext paint.							aGraphicsContext paint: self selectionBackgroundColor.							aGraphicsContext displayRectangle: (self 								labelBoundsFor: str 								inElementBounds: elementBounds 								indent: indent 								scanner: measurer).							aGraphicsContext paint: self selectionForegroundColor].					scanner						displayLine: (1 to: str size)						inText: str						left: elementBounds left + leftOffset + (indent * self offsetForIndent)						right: elementBounds right		top: elementBounds center y - (style lineGrid // 2)"		top: elementBounds top"						on: aGraphicsContext.					(targetIndex == i and: [self hasFocus or: [self class useStandardHiliting not]])						ifTrue:							[oldPaint == nil ifTrue: [oldPaint := aGraphicsContext paint].							aGraphicsContext paint: SymbolicPaint traversalHilite; displayInteriorRectangularBorder: (self 								labelBoundsFor: str 								inElementBounds: elementBounds 								indent: indent 								scanner: measurer)].					oldPaint == nil ifFalse: [aGraphicsContext paint: oldPaint]]]	indent: (linesAtRoot ifTrue: [1] ifFalse: [0])</body></methods><methods><class-id>Aragon.TreeView</class-id> <category>updating</category><body package="Aragon.Widgets">update: anAspect with: anArg from: anObject	"An object that the receiver's depends on has changed. Perform an appropriate action."	anObject == self sequence		ifTrue: 			[anAspect == #value				ifTrue: 					[self fixScrollingOffset.					self elementsInSequenceHaveChanged.					self changedPreferredGeometry.					^self invalidate]].	^super update: anAspect with: anArg from: anObject</body><body package="Aragon.Widgets">wouldSelectionChangeIfCollapsed: aNode at: anIndex	| start stop |	start := anIndex.	stop := anIndex + (sequence countChildrenOf: aNode).	selections do: [:i | (start &lt; i and: [i &lt;= stop]) ifTrue: [^true]].	^false</body></methods><methods><class-id>Aragon.TreeView</class-id> <category>controller accessing</category><body package="Aragon.Widgets">defaultControllerClass	"Answer a default controller class for the receiver."	^TreeController</body></methods><methods><class-id>Aragon.TreeView</class-id> <category>element accessing</category><body package="Aragon.Widgets">invalidateElementIndex: anIndex 	| i |	i := 0.	sequence 		nodesDo: [:each :indent | (i := i + 1) == anIndex			ifTrue: 				[| box elementBounds |				elementBounds := self boundsOfElementIndex: anIndex inBounds: self bounds.				box := self							labelBoundsFor: each displayString							inElementBounds: elementBounds							indent: indent							scanner: (self displayScannerFor: self graphicsContext).				DisplayOpenFolderWhenSelectedOnly == true 					ifTrue: [box left: elementBounds left + 4 + (indent * self offsetForIndent)]."				box left: box left - leftOffset."				self invalidateRectangle: box repairNow: true.				^self]]		indent: (linesAtRoot ifTrue: [1] ifFalse: [0]).</body></methods><methods><class-id>Aragon.TreeView class</class-id> <category>deprecated</category><body package="Aragon.Widgets">diskIcon	^AragonIcon named: #disk</body><body package="Aragon.Widgets">folderIcon	^AragonIcon named: #folder</body><body package="Aragon.Widgets">leafIcon	^AragonIcon named: #leaf</body><body package="Aragon.Widgets">openFolderIcon	^AragonIcon named: #openFolder</body></methods><methods><class-id>Aragon.TreeView class</class-id> <category>class initialization</category><body package="Aragon.Widgets">displayOpenFolderWhenSelectedOnly	^DisplayOpenFolderWhenSelectedOnly</body><body package="Aragon.Widgets">displayOpenFolderWhenSelectedOnly: aBoolean	DisplayOpenFolderWhenSelectedOnly := aBoolean</body><body package="Aragon.Widgets">initialize	"self initialize"	DefaultImageList := IdentityDictionary new			at: #folder		put:	self folderIcon -&gt; self openFolderIcon;			at: #leaf			put:	self leafIcon -&gt; self leafIcon;			at: #disk			put:	self diskIcon -&gt; self diskIcon;		yourself.	PlusMinusImages := IdentityDictionary new		add: #collapsed -&gt; self plusImage;		add: #expanded -&gt; self minusImage;	yourself.	self displayOpenFolderWhenSelectedOnly: true.	self deselectOnReselection: false.	self offsetForIndent: 17.</body><body package="Aragon.Widgets">offsetForIndent: anInteger	OffsetForIndent := anInteger</body></methods><methods><class-id>Aragon.TreeView class</class-id> <category>examples</category><body package="Aragon.Widgets">classBrowserExample1	"TreeView example: #classBrowserExample1"	^TreeAdaptor new		childrenBlock: [:c | c subclasses];		root: Collection</body><body package="Aragon.Widgets">classBrowserExample2	"TreeView example: #classBrowserExample2"	^(TreeAdaptor new) 			childrenBlock: [:c | c subclasses 				collect: [:each | each asTreeNode isLeaf: each subclasses isEmpty]]; 			root: Collection asTreeNode</body><body package="Aragon.Widgets">classBrowserExample3	"TreeView example: #classBrowserExample3"	^TreeAdaptor new			childrenBlock: [:c | c subclasses 				collect: [:each | each asTreeNode hasChildren: each subclasses isEmpty not]]; 			root: Collection asTreeNode</body><body package="Aragon.Widgets">example: aSelector	"TreeView example: #fileBrowserExample"	| treeView |	treeView := self new model: (self perform: aSelector) asValue.	ApplicationWindow new		component: treeView;		keyboardProcessor: (KeyboardProcessor new currentConsumer: treeView controller);	open.</body><body package="Aragon.Widgets">fileBrowserExample	"TreeView example: #fileBrowserExample"	^TreeAdaptor new		childrenBlock: [:d | d directoryContents collect: 			[:each || f |  (f := d construct: each) asTreeNode				displayString: each;				isParent: f isDirectory]];		root: (AragonTreeNode for: 'C:\' asFilename label: 'C:\')</body></methods><methods><class-id>Aragon.TreeView class</class-id> <category>constants</category><body package="Aragon.Widgets">defaultIcons	"Answer an association of the folder icons for collapsed and expanded state as expected as entries in 	an image list"	^DefaultImageList at: #folder</body><body package="Aragon.Widgets">defaultImageList	^DefaultImageList</body><body package="Aragon.Widgets">offsetForIndent	^OffsetForIndent</body></methods><methods><class-id>Aragon.NewDataSetColumn</class-id> <category>testing</category><body package="Aragon.Widgets">isTreeView	^rendererSpec isKindOf: TreeViewSpec</body></methods><methods><class-id>Aragon.NewDataSetColumn</class-id> <category>accessing</category><body package="Aragon.Widgets">allowForSorting: aBoolean 	(flags bitAnd: 1)	~~ 0 		== aBoolean ifFalse: [flags := flags bitXor: 1]</body><body package="Aragon.Widgets">allowsForSorting	^(flags bitAnd: 1) ~~ 0 and: [view allowsForSorting]</body><body package="Aragon.Widgets">canBeDragged	^(flags bitAnd: 2) ~~ 0 and: [view allowsForColumnDragging]</body><body package="Aragon.Widgets">canBeDragged: aBoolean	(flags bitAnd: 2)	~~ 0 		== aBoolean ifFalse: [flags := flags bitXor: 2]</body><body package="Aragon.Widgets">isFrozen	^noScroll</body><body package="Aragon.Widgets">isFrozen: aBoolean	noScroll := aBoolean.	self canBeDragged: noScroll not.</body><body package="Aragon.Widgets">preferredHeight	^self isRowSelector ifTrue: [0] ifFalse: [self renderer textStyle lineGrid]</body><body package="Aragon.Widgets">view: aNewDataSetView	view := aNewDataSetView</body></methods><methods><class-id>Aragon.NewDataSetColumn</class-id> <category>accessing bounds</category><body package="Aragon.Widgets">labelHeight	| answer |	(answer := self labelVisual preferredBounds height) == 0 ifTrue: [^TextAttributes defaultLineGrid + 5].	^answer</body><body package="Aragon.Widgets">left	^offset</body><body package="Aragon.Widgets">left: anInteger	offset := anInteger.</body><body package="Aragon.Widgets">right	^self left + self width</body><body package="Aragon.Widgets">width	^width</body><body package="Aragon.Widgets">width: aValue	width := aValue.</body></methods><methods><class-id>Aragon.NewDataSetColumn</class-id> <category>initialize-release</category><body package="Aragon.Widgets">editorSpec: aSpec	| spec |	((spec := aSpec) class == InputFieldSpec) ifTrue: [spec := NDSInputFieldSpec copyFrom: aSpec].	super editorSpec: spec</body><body package="Aragon.Widgets">initialize	super initialize.	flags := 2r1111.	offset := 0</body><body package="Aragon.Widgets">release	view := nil.	super release</body></methods><methods><class-id>Aragon.NewDataSetColumn</class-id> <category>accessing widgets</category><body package="Aragon.Widgets">editor	| answer |	answer := super editor.	self editorSpec isDecorated ifTrue: [^answer].	self editorSpec class == ComboBoxSpec		ifTrue: 			[| w |			((w := answer widget container) isKindOf: BorderedWrapper) ifFalse: [			((w := answer widget components first) isKindOf: BorderedWrapper)						ifFalse: [^answer]].			w border: (SimpleBorder width: 0)].	^answer</body><body package="Aragon.Widgets">labelVisual	labelVisual isNil		ifTrue: 			[labelVisual := NewColumnLabelVisual new container: view.			labelVisual align: description alignment.			labelVisual isFrozen: self noScroll.			self isRowSelector ifFalse: [labelVisual label: self label component label]].	^labelVisual</body><body package="Aragon.Widgets">renderer	"Returns a cached widget that is capable of displaying the columns"	^renderer isNil		ifTrue: [renderer := rendererSpec isSymbol						ifTrue: [rendererSpec]						ifFalse: 							[| v |  v := (self realize: (rendererSpec tabable: false)) widget.							(v isKindOf: TreeView) ifTrue: [v dataSetView: view] ifFalse: [							(v isKindOf: InputFieldView) ifTrue: [NDSRenderer4TextFields new view: v] ifFalse: [							(v isKindOf: CheckButtonView) ifTrue: [NDSRenderer4CheckBoxes new view: v] ifFalse: [							v]]]]]		ifFalse: [renderer]</body><body package="Aragon.Widgets">renderer: aWidget	renderer := aWidget</body></methods><methods><class-id>Aragon.NewDataSetColumn class</class-id> <category>building</category><body package="Aragon.Widgets">on: aColumnSpec with: aBuilder	"Create a column using the data I hold. Hook it up with the given builder"	| c | 	c := self on: aColumnSpec.	c builder: aBuilder.	c editModel: (aColumnSpec modelIn: aBuilder).	c labelSpec: (aColumnSpec labelSpecIn: aBuilder).	aColumnSpec editorType == #TreeView 		ifTrue: 			[c rendererSpec: (self treeViewSpecIn: aBuilder forEdit: false from: aColumnSpec).			c editorSpec: nil]		ifFalse: 			[c rendererSpec: (aColumnSpec rendererSpecIn: aBuilder).			c editorSpec: (aColumnSpec editorSpecIn: aBuilder)].	c callbacksSpec: aColumnSpec callbacksSpec.	c width: aColumnSpec width.	c noScroll: aColumnSpec noScroll.	^c</body><body package="Aragon.Widgets">treeViewSpecIn: builder forEdit: edit from: aColumnSpec 	| spec p |	spec := TreeViewSpec new.	spec name: #embedded.	spec style: aColumnSpec font.	(p := aColumnSpec alignment) isNil		ifFalse: 			[spec displayButtons: (p at: 1).			spec displayImages: (p at: 2).			spec displayLines: (p at: 3).			spec linesAtRoot: (p at: 4)].	^spec</body></methods><methods><class-id>Aragon.NDSRenderer4</class-id> <category>accessing</category><body package="Aragon.Widgets">displayStringFor: aValue 	^aValue</body><body package="Aragon.Widgets">textStyle	^view textStyle</body><body package="Aragon.Widgets">view: aValue	view := aValue</body></methods><methods><class-id>Aragon.NDSRenderer4</class-id> <category>displaying</category><body package="Aragon.Widgets">display: aValue in: box on: aGraphicsContext	^self subclassResponsibility</body></methods><methods><class-id>Aragon.NDSRenderer4CheckBoxes</class-id> <category>displaying</category><body package="Aragon.Widgets">display: aValue in: box on: aGraphicsContext	"Display the receiver's content on aGraphicsContext."	view model value: aValue.	view displayOn: aGraphicsContext copy at: box center - (view preferredBounds width // 2).</body></methods><methods><class-id>Aragon.ResizerView</class-id> <category>controller accessing</category><body package="Aragon.Widgets">cursor	^Cursors at: orientation</body><body package="Aragon.Widgets">defaultControllerClass	^ResizerController</body><body package="Aragon.Widgets">moveTo: aPoint 	orientation == #vertical		ifTrue: [self moveToV: aPoint]		ifFalse: [self moveToH: aPoint]</body><body package="Aragon.Widgets">moveToH: aPoint 	| delta box w |	delta := aPoint y - self bounds top.	(w := self widget1) bounds: ((box := w bounds) bottom: box bottom + delta).	(w layout isKindOf: Rectangle) ifFalse: [w layout bottomOffset: w layout bottomOffset + delta].	w invalidate.	(w := self widget2) bounds: ((box := w bounds) top: box top + delta).	(w layout isKindOf: Rectangle) ifFalse: [w layout topOffset: w layout topOffset + delta].	w invalidate.	box := container bounds.	container bounds: (box top: box top + delta; bottom: box bottom + delta).	((box := container layout) isKindOf: Rectangle)		ifFalse: 			[box topOffset: box topOffset + delta.			box bottomOffset: box bottomOffset + delta].	container invalidate.</body><body package="Aragon.Widgets">moveToV: aPoint 	| delta box w |	delta := aPoint x - self bounds left.	(w := self widget1) bounds: ((box := w bounds) right: box right + delta).	(w layout isKindOf: Rectangle) ifFalse: [w layout rightOffset: w layout rightOffset + delta].	w invalidate.	(w := self widget2) bounds: ((box := w bounds) left: box left + delta).	(w layout isKindOf: Rectangle) ifFalse: [w layout leftOffset: w layout leftOffset + delta].	w invalidate.	box := container bounds.	container bounds: (box left: box left + delta; right: box right + delta).	((box := container layout) isKindOf: Rectangle)		ifFalse: 			[box leftOffset: box leftOffset + delta.			box rightOffset: box rightOffset + delta].	container invalidate.</body></methods><methods><class-id>Aragon.ResizerView</class-id> <category>accessing</category><body package="Aragon.Widgets">orientation	^orientation</body><body package="Aragon.Widgets">orientation: aSymbol 	orientation := aSymbol</body><body package="Aragon.Widgets">widget1	widget1 isSymbol ifTrue: [widget1 := self widgetFor: widget1].	^widget1</body><body package="Aragon.Widgets">widget1: aSymbol	widget1 := aSymbol</body><body package="Aragon.Widgets">widget2	widget2 isSymbol ifTrue: [widget2 := self widgetFor: widget2].	^widget2</body><body package="Aragon.Widgets">widget2: aSymbol	widget2 := aSymbol</body><body package="Aragon.Widgets">widgetFor: aSymbol 	| c |	c := self container.	[(c isKindOf: Window) or: [(c isKindOf: View) and: [model isKindOf: ApplicationModel]]]		whileFalse: [c := c container].	^c model builder componentAt: aSymbol.</body></methods><methods><class-id>Aragon.ResizerView</class-id> <category>displaying</category><body package="Aragon.Widgets">displayOn: aGraphicsContext 	"Display the divider on aGraphicsContext."	state hasBorder		ifTrue: 			[aGraphicsContext paint: ColorValue lightGray; lineWidth: 2.			aGraphicsContext displayInteriorRectangularBorder: self bounds]</body></methods><methods><class-id>Aragon.ResizerView class</class-id> <category>class initialization</category><body package="Aragon.Widgets">horizontalResizeCursor	^Cursor			imageArray: #(		2r0000000000000000		2r0000000100000000		2r0000001110000000		2r0000011111000000		2r0000000100000000		2r0000000100000000		2r0111111111111100		2r0000000000000000		2r0111111111111100		2r0000000100000000		2r0000000100000000		2r0000011111000000		2r0000001110000000		2r0000000100000000		2r0000000000000000		2r0000000000000000)			maskArray: #(		2r0000000100000000		2r0000001110000000		2r0000011111000000		2r0000111111100000		2r0000111111100000		2r1111111111111110		2r1111111111111110		2r1111111111111110		2r1111111111111110		2r1111111111111110		2r0000111111100000		2r0000111111100000		2r0000011111000000		2r0000001110000000		2r0000000100000000		2r0000000000000000)	 		hotSpot: 7@7 name: 'Aragon horizontal resizer'</body><body package="Aragon.Widgets">initialize	"self initialize"	Cursors := IdentityDictionary new		add: #vertical -&gt; self verticalResizeCursor;		add: #horizontal -&gt; self horizontalResizeCursor;	yourself.</body><body package="Aragon.Widgets">verticalResizeCursor	^Cursor			imageArray: #(		2r0000000000000000		2r0000001010000000		2r0000001010000000		2r0000001010000000		2r0000001010000000		2r0001001010010000		2r0011001010011000		2r0111111011111100		2r0011001010011000		2r0001001010010000		2r0000001010000000		2r0000001010000000		2r0000001010000000		2r0000001010000000		2r0000000000000000		2r0000000000000000)			maskArray: #(		2r0000011111000000		2r0000011111000000		2r0000011111000000		2r0000011111000000		2r0001111111110000		2r0011111111111000		2r0111111111111100		2r1111111111111110		2r0111111111111100		2r0011111111111000		2r0001111111110000		2r0000011111000000		2r0000011111000000		2r0000011111000000		2r0000011111000000		2r0000000000000000)	 		hotSpot: 7@7 name: 'Aragon vertical resizer'</body></methods><methods><class-id>Aragon.NDSRenderer4TextFields</class-id> <category>accessing</category><body package="Aragon.Widgets">converter	^view converter</body><body package="Aragon.Widgets">converter: aConverter	^view converter: aConverter</body><body package="Aragon.Widgets">displayStringFor: aValue 	| c |	^(c := view converter) == nil		ifTrue: [aValue displayString]		ifFalse: [c hasSpecialFormatting				ifTrue: [c formatStringFor: aValue]				ifFalse: [c printStringFor: aValue]]</body></methods><methods><class-id>Aragon.NDSRenderer4TextFields</class-id> <category>displaying</category><body package="Aragon.Widgets">display: aValue in: box on: aGraphicsContext 	"Display the receiver's content on aGraphicsContext."	| text style offset ds |	ds := self displayScanner.	style := view textStyle.	text := self displayStringFor: aValue.	offset := style alignment == LeftFlush				ifTrue: [0]				ifFalse: 					[| w |					w := Object subscriptOutOfBoundsSignal						handle: 							[:ex |  "This may happen after a shutdown because the 									displayScanner lost its platform fonts"							displayScanner := nil. ds := self displayScanner. ex restart]						do: [ds setStopConditions measureString: text].					style alignment == Centered						ifTrue: [box width - w // 2 - 6 - 1]						ifFalse: [box width - (2 * 6) - 1 - w]].	ds		displayLine: (1 to: text size)		inText: text		left: box left + 6 + (offset max: 0)		right: box right		top: box center y - (style lineGrid // 2)		on: (aGraphicsContext copy intersectClip: (box copy right: box right - 6 - 1)).</body></methods><methods><class-id>Aragon.NDSRenderer4TextFields</class-id> <category>private</category><body package="Aragon.Widgets">displayScanner	displayScanner == nil		ifTrue: 			[displayScanner := DisplayScanner						fontPolicy: Screen default defaultFontPolicy						text: ''						textAttributes: view textStyle].	^displayScanner</body></methods><methods><class-id>Aragon.ResizerSpec</class-id> <category>accessing</category><body package="Aragon.Widgets">isDecorated	^self decorationType == #bordered		ifTrue: [true]		ifFalse: [false]</body><body package="Aragon.Widgets">isDecorated: aBoolean	self decorationType: (aBoolean 		ifTrue: [#bordered]		ifFalse: [#none])</body><body package="Aragon.Widgets">orientation	^orientation == nil ifTrue: [#vertical] ifFalse: [orientation]</body><body package="Aragon.Widgets">orientation: aSymbol 	orientation := aSymbol == #horizontal ifTrue: [aSymbol]</body><body package="Aragon.Widgets">widget1	^widget1</body><body package="Aragon.Widgets">widget1: aSymbol	widget1 := aSymbol</body><body package="Aragon.Widgets">widget2	^widget2</body><body package="Aragon.Widgets">widget2: aSymbol	widget2 := aSymbol</body></methods><methods><class-id>Aragon.ResizerSpec</class-id> <category>building</category><body package="Aragon.Widgets">dispatchTo: policy with: builder 	| component |	component := ResizerView new.	component orientation: self orientation.	component widget1: self widget1.	component widget2: self widget2.	builder component: component.	component widgetState isEnabled: self initiallyEnabled.	component widgetState isVisible: true.	component widgetState hasBorder: builder isEditing.	builder wrapWith: (policy simpleWrapperFor: self).	builder applyLayout: self layout.	builder wrapWith: (policy simpleWidgetWrapperOn: builder spec: self)</body></methods><methods><class-id>Aragon.ResizerSpec class</class-id> <category>private-interface building</category><body package="Aragon.Widgets">addBindingsTo: env for: inst channel: aChannel	super addBindingsTo: env for: inst channel: aChannel.	env at: #widget1 put: (self adapt: inst forAspect: #widget1 channel: aChannel).	env at: #widget2 put: (self adapt: inst forAspect: #widget2 channel: aChannel).	env at: #orientation put: (self adapt: inst forAspect: #orientation channel: aChannel).</body><body package="Aragon.Widgets">componentName	"Identification of component"	^'Widgets Resizer'</body><body package="Aragon.Widgets">placementExtentBlock	^[:bldr | 4 @ 80]</body><body package="Aragon.Widgets">slices	^#(		(Basics basicsEditSpec) 		(Position propSpec PositionToolModel)	)</body></methods><methods><class-id>Aragon.ResizerSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteIcon	^self paletteImage</body><body package="Aragon.Widgets">paletteIconImage	"Answer an image to reperesent spec on the palette"	paletteIcon isNil ifTrue: [paletteIcon := Array with: (OpaqueImage figure: (CachedImage on: self paletteImage)						shape: (CachedImage on: self paletteMonoIcon))					with: (CachedImage on: self paletteMonoIcon)].	^paletteIcon at: (Screen default colorDepth == 1			ifTrue: [2]			ifFalse: [1])</body></methods><methods><class-id>Aragon.ResizerSpec class</class-id> <category>class initialization</category><body package="Aragon.Widgets">initialize	self installOnPalette</body><body package="Aragon.Widgets">shouldBeOnPalette	^true</body></methods><methods><class-id>Aragon.StoredImage</class-id> <category>private</category><body package="Aragon.Widgets">doesNotUnderstand: aMessage 	| answer |	((image isKindOf: OpaqueImage) not and: [	image isNil or: [image asRetainedMedium isOpen not]])		ifTrue: [self loadImage].	answer := image perform: aMessage selector withArguments: aMessage arguments.	^answer == image ifTrue: [self] ifFalse: [answer]</body><body package="Aragon.Widgets">flush	image := nil</body><body package="Aragon.Widgets">imageReaderFor: aFilename	OSErrorHolder errorSignal		handle: [:ex | ^self error: 'Can''t load image: \' withCRs , filename asString]		do: [^ImageReader fromFile: aFilename].</body><body package="Aragon.Widgets">loadImage	| reader |	reader := self imageReaderFor: filename.	image := reader image.	(image isKindOf: Image)		ifTrue: [image := CachedImage on: (image convertForGraphicsDevice: Screen default)]</body></methods><methods><class-id>Aragon.StoredImage</class-id> <category>printing</category><body package="Aragon.Widgets">printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' on: ''', filename asString, ''''.</body></methods><methods><class-id>Aragon.StoredImage</class-id> <category>accessing</category><body package="Aragon.Widgets">filename	^filename</body><body package="Aragon.Widgets">filename: anObject	filename := anObject</body><body package="Aragon.Widgets">image	^image</body></methods><methods><class-id>Aragon.StoredImage class</class-id> <category>class initialization</category><body package="Aragon.Widgets">flushImageCache	"self flushImageCache"	self withAllSubclasses do: [:each | each allInstances do: [:inst | inst flush]].	ImageCache := IdentityDictionary new.</body><body package="Aragon.Widgets">initialize	"self initialize"	SearchPath := OrderedCollection new.	self flushImageCache.</body><body package="Aragon.Widgets">searchPath	^SearchPath</body><body package="Aragon.Widgets">searchPath: searchPath 	SearchPath := (searchPath isString or: [searchPath isKindOf: Filename])				ifTrue: [OrderedCollection with: searchPath]				ifFalse: [OrderedCollection withAll: searchPath]</body></methods><methods><class-id>Aragon.StoredImage class</class-id> <category>instance creation</category><body package="Aragon.Widgets">forVisual: aKey	^self forVisual: aKey ifAbsent: []</body><body package="Aragon.Widgets">forVisual: aKey ifAbsent: aBlock 	^self forVisual: aKey in: nil ifAbsent: aBlock</body><body package="Aragon.Widgets">forVisual: aKey in: anApplication ifAbsent: aBlock 	| cacheKey cache |	(aKey isKindOf: String) ifFalse: [^aBlock value].	cacheKey := anApplication isNil ifTrue: [#default] ifFalse: [anApplication name].	cache := ImageCache at: cacheKey ifAbsent: [nil].	(cache notNil and: [cache includesKey: aKey]) ifTrue: [^cache at: aKey].	^aKey first = $@		ifTrue: 			[| instance |			instance := (aKey at: 2) = $@				ifTrue:	[StoredOpaqueImage on: (aKey copyFrom: 3 to: aKey size) for: anApplication  ifAbsent: [nil]]				ifFalse:	[StoredImage on: (aKey copyFrom: 2 to: aKey size) for: anApplication ifAbsent: [nil]].			instance notNil				ifTrue: 					[cache isNil ifTrue: [cache := ImageCache at: cacheKey put: IdentityDictionary new].					cache at: aKey put: instance.					instance]				ifFalse: [aBlock value]]		ifFalse: [aBlock value]</body><body package="Aragon.Widgets">on: aFilename 	^self on: aFilename ifAbsent: [self error: 'Didn''t find image file ''' , aFilename asString , ''' in search paths']</body><body package="Aragon.Widgets">on: aFilename for: anApplication ifAbsent: aBlock	| filename searchPaths |	searchPaths := anApplication notNil ifTrue: [anApplication searchPathForImages asArray , SearchPath] ifFalse: [SearchPath].	filename := self lookupFilename: aFilename inPaths: searchPaths.	^filename isNil ifTrue: [aBlock value] ifFalse: [self new filename: filename]</body><body package="Aragon.Widgets">on: aFilename ifAbsent: aBlock	^self on: aFilename for: nil ifAbsent: aBlock</body></methods><methods><class-id>Aragon.StoredImage class</class-id> <category>private</category><body package="Aragon.Widgets">lookupFilename: aFilename 	^self lookupFilename: aFilename inPaths: self searchPath</body><body package="Aragon.Widgets">lookupFilename: aFilename inPaths: searchPaths 	| file |	(file := aFilename asFilename) isAbsolute ifTrue: [^file definitelyExists ifTrue: [file]].	searchPaths do: [:dir | (file := dir asFilename construct: aFilename asString) definitelyExists ifTrue: [^file]].	^nil</body></methods><methods><class-id>Aragon.StoredOpaqueImage</class-id> <category>private</category><body package="Aragon.Widgets">doesNotUnderstand: aMessage 	| answer |	(image isNil or: [image shape isOpen not])		ifTrue: [self loadImage].	answer := image perform: aMessage selector withArguments: aMessage arguments.	^answer == image ifTrue: [self] ifFalse: [answer]</body><body package="Aragon.Widgets">loadImage	super loadImage.	image := OpaqueImage 				figure: image 				shape: ((self imageReaderFor: shapefile) image palette: CoveragePalette monoMaskPalette) asRetainedMedium</body></methods><methods><class-id>Aragon.StoredOpaqueImage</class-id> <category>accessing</category><body package="Aragon.Widgets">shapefile	^shapefile</body><body package="Aragon.Widgets">shapefile: anObject	shapefile := anObject</body></methods><methods><class-id>Aragon.StoredOpaqueImage class</class-id> <category>class initialization</category><body package="Aragon.Widgets">imagePath: imagePath shapesPath: shapesPath		self searchPath: imagePath.	self shapesPath: shapesPath</body><body package="Aragon.Widgets">initialize	"self initialize"	ShapesPath := OrderedCollection new.</body><body package="Aragon.Widgets">shapesPath	^ShapesPath</body><body package="Aragon.Widgets">shapesPath: searchPath	ShapesPath := (searchPath isString or: [searchPath isKindOf: Filename])				ifTrue: [OrderedCollection with: searchPath]				ifFalse: [OrderedCollection withAll: searchPath]</body></methods><methods><class-id>Aragon.StoredOpaqueImage class</class-id> <category>instance creation</category><body package="Aragon.Widgets">on: aFilename and: anotherFile for: anApplication ifAbsent: aBlock	| filename searchPaths shapefile |	searchPaths := anApplication notNil ifTrue: [anApplication searchPathForImages asArray , SearchPath] ifFalse: [SearchPath].	filename := self lookupFilename: aFilename inPaths: searchPaths.	filename isNil ifTrue: [^aBlock value].	searchPaths := anApplication notNil ifTrue: [anApplication searchPathForShapes asArray , ShapesPath] ifFalse: [ShapesPath].	shapefile := self lookupFilename: aFilename inPaths: searchPaths.	shapefile isNil ifTrue: [^aBlock value].	^self new filename: filename; shapefile: shapefile</body><body package="Aragon.Widgets">on: aFilename for: anApplication ifAbsent: aBlock	^self on: aFilename and: aFilename for: anApplication ifAbsent: aBlock</body><body package="Aragon.Widgets">on: aFilename shape: anotherFile 	^self		on: aFilename		and: anotherFile		for: nil		ifAbsent: [self error: 'Didn''t find image file ''' , aFilename asString , ''' in search paths']</body></methods><methods><class-id>Aragon.EnhancedActionButtonSpec</class-id> <category>accessing</category><body package="Aragon.Widgets">backgroundImage	^backgroundImage</body><body package="Aragon.Widgets">backgroundImage: aValue	backgroundImage := aValue</body><body package="Aragon.Widgets">disabledImage	^disabledImage</body><body package="Aragon.Widgets">disabledImage: aValue	disabledImage := aValue</body><body package="Aragon.Widgets">enabledImage	^enabledImage</body><body package="Aragon.Widgets">enabledImage: aValue	enabledImage := aValue</body><body package="Aragon.Widgets">fullComponentName	^self class fullComponentName</body><body package="Aragon.Widgets">labelPos	^labelPos isNil		ifTrue: [#below]		ifFalse: [labelPos]</body><body package="Aragon.Widgets">labelPos: aValue	labelPos := aValue</body></methods><methods><class-id>Aragon.EnhancedActionButtonSpec</class-id> <category>private</category><body package="Aragon.Widgets">dispatchTo: policy with: builder	policy enhancedActionButton: self into: builder</body></methods><methods><class-id>Aragon.EnhancedActionButtonSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">aboveIcon	^OpaqueImage figure: self aboveImage shape: self aboveShape</body><body package="Aragon.Widgets">alignmentMenu	"MenuEditor new openOnClass: self andSelector: #alignmentMenu"	| mb |	mb := MenuBuilder new.	mb add: 'Below Image'-&gt;#below.	mb add: 'Above Image'-&gt;#above.	mb add: 'Left to Image'-&gt;#left.	mb add: 'Right to Image'-&gt;#right.	^mb menuHolder</body><body package="Aragon.Widgets">belowIcon	^OpaqueImage figure: self belowImage shape: self belowShape</body><body package="Aragon.Widgets">leftIcon	^OpaqueImage figure: self leftImage shape: self leftShape</body><body package="Aragon.Widgets">paletteIconImage	"Answer an image to reperesent spec on the palette"	paletteIcon isNil ifTrue: [paletteIcon := Array with: (OpaqueImage figure: (CachedImage on: self paletteImage)						shape: (CachedImage on: self paletteMonoIcon))					with: (CachedImage on: self paletteMonoIcon)].	^paletteIcon at: (Screen default colorDepth == 1			ifTrue: [2]			ifFalse: [1])</body><body package="Aragon.Widgets">rightIcon	^OpaqueImage figure: self rightImage shape: self rightShape</body></methods><methods><class-id>Aragon.EnhancedActionButtonSpec class</class-id> <category>class initialization</category><body package="Aragon.Widgets">initialize	self installOnPalette</body><body package="Aragon.Widgets">installOnPalette	ApplicationModel 		visualAt: #belowIcon put: self belowIcon; 		visualAt: #aboveIcon put: self aboveIcon; 		visualAt: #leftIcon put: self leftIcon; 		visualAt: #rightIcon put: self rightIcon; 	yourself.	super installOnPalette.</body><body package="Aragon.Widgets">obsolete 	self uninstall.	super obsolete.</body><body package="Aragon.Widgets">shouldBeOnPalette	^true</body><body package="Aragon.Widgets">uninstall	ApplicationModel visuals		removeKey: #belowIcon ifAbsent: [];		removeKey: #aboveIcon ifAbsent: [];		removeKey: #leftIcon ifAbsent: [];		removeKey: #rightIcon ifAbsent: [];	yourself.	super uninstall.</body></methods><methods><class-id>Aragon.EnhancedActionButtonSpec class</class-id> <category>private-interface building</category><body package="Aragon.Widgets">addBindingsTo: env for: inst channel: aChannel	super addBindingsTo: env for: inst channel: aChannel.	env at: #enabledImage put: (self adapt: inst forAspect: #enabledImage channel: aChannel).	env at: #disabledImage put: (self adapt: inst forAspect: #disabledImage channel: aChannel).	env at: #backgroundImage put: (self adapt: inst forAspect: #backgroundImage channel: aChannel).	env at: #labelPos put: (self adapt: inst forAspect: #labelPos channel: aChannel).	#(below above left right) do: [:each | self addLabelPosAdaptorFor: each to: env]</body><body package="Aragon.Widgets">addLabelPosAdaptorFor: aSymbol to: env 	| model |	model := env at: #labelPos.	env at: aSymbol put: ((PluggableAdaptor on: model)			getBlock: [:m | m value == aSymbol]			putBlock: [:m :v | v ifTrue: [m value: aSymbol]]			updateBlock: [:m :a :p | true])</body><body package="Aragon.Widgets">componentName	"Identification of component"	^'Enh. Button'</body><body package="Aragon.Widgets">fullComponentName	"Identification of component"	^'Enhanced Action Button'</body><body package="Aragon.Widgets">specGenerationBlock	^[:ctrlr :point | | label |		self			model: nil			label: (label := 'Button')			layout: ((ctrlr gridPoint: point)				extent:					(ctrlr currentMode value class						placementExtentFor: self						withLabel: label						inBuilder: ctrlr builder))			properties: #(#canDefault )]</body></methods><methods><class-id>Aragon.ToolbarButtonSpec</class-id> <category>dispatching</category><body package="Aragon.Widgets">dispatchTo: policy with: builder	policy toolbarButton: self into: builder</body></methods><methods><class-id>Aragon.ToolbarButtonSpec</class-id> <category>initialize-release</category><body package="Aragon.Widgets">initialize	"Initialize the receiver."	self isDecorated: false</body></methods><methods><class-id>Aragon.ToolbarButtonSpec class</class-id> <category>private-interface building</category><body package="Aragon.Widgets">componentName	"Identification of component"	^'Toolbar Button'</body><body package="Aragon.Widgets">fullComponentName	^'Toolbar Button'</body></methods><methods><class-id>Aragon.NewDataSetSpecColumnDetailsModel</class-id> <category>aspects</category><body package="Aragon.Widgets">changedDisplayButtons	(currentColumn isNil or: [ lock ]) ifTrue: [ ^self ].	currentColumn value displayButtons: (self displayButtons value).	changedBlock value: nil.</body><body package="Aragon.Widgets">displayButtons	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	displayButtons isNil ifTrue: [displayButtons := false asValue].	^displayButtons</body><body package="Aragon.Widgets">displayImages	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	displayImages isNil ifTrue: [displayImages := false asValue].	^displayImages</body><body package="Aragon.Widgets">displayLines	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	displayLines isNil ifTrue: [displayLines := false asValue].	^displayLines</body><body package="Aragon.Widgets">linesAtRoot	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	linesAtRoot isNil ifTrue: [linesAtRoot := false asValue].	^linesAtRoot</body><body package="Aragon.Widgets">somethingChanged	(currentColumn isNil or: [lock]) ifTrue: [^self].	currentColumn value alignment: (Array			with: self displayButtons value			with: self displayImages value			with: self displayLines value			with: self linesAtRoot value).	changedBlock value: nil</body></methods><methods><class-id>Aragon.NewDataSetSpecColumnDetailsModel</class-id> <category>initialize-release</category><body package="Aragon.Widgets">initialize	super initialize.	self displayButtons onChangeSend: #somethingChanged to: self.	self displayImages onChangeSend: #somethingChanged to: self.	self displayLines onChangeSend: #somethingChanged to: self.	self linesAtRoot onChangeSend: #somethingChanged to: self.</body></methods><methods><class-id>Aragon.NewDataSetSpecColumnDetailsModel</class-id> <category>private</category><body package="Aragon.Widgets">changedSelection	super changedSelection.	self currentColumn notNil ifTrue: 		[| cs |		(cs := currentColumn value) editorType == #TreeView ifTrue: 			[| p |			(p := cs alignment) notNil				ifTrue: 					[self displayButtons setValue: (p at: 1).					self displayImages setValue: (p at: 2).					self displayLines setValue: (p at: 3).					self linesAtRoot setValue: (p at: 4)]]]</body><body package="Aragon.Widgets">updateOptions	| type invisibleSet |	type := self columnType value.	invisibleSet := #(#None #InputField #ComboBox #CheckBox #TreeView #rowSelector) asOrderedCollection.	invisibleSet remove: type ifAbsent: [type := nil].	invisibleSet do: [:i | (self builder componentAt: i) beInvisible].	type notNil ifTrue: [(self builder componentAt: type) beVisible].	self checkFormatString.	self setColumnTypeLabel</body></methods><methods><class-id>Aragon.NewDataSetSpecColumnDetailsModel class</class-id> <category>resources</category><body package="Aragon.Widgets">fieldsDictionary	^(super fieldsDictionary) 		at: #TreeView put: #(#font: #type: #alignment:); 	yourself</body></methods><methods><class-id>Aragon.CardScrollerButton</class-id> <category>private</category><body package="Aragon.Widgets">getBooleanValue	" Answer whether the state of the model is true. "	^false</body><body package="Aragon.Widgets">getBorder	^self isInTransition		ifTrue: [SimpleBorder width: 1 color: SymbolicPaint pushButtonShadow]		ifFalse: [NSBorder raised]</body><body package="Aragon.Widgets">insetBorder	^NSBorder inset</body><body package="Aragon.Widgets">raisedBorder	^NSBorder raised</body><body package="Aragon.Widgets">scrollValue: anInteger	scrollValue := anInteger</body></methods><methods><class-id>Aragon.CardScrollerButton</class-id> <category>private-visual properties</category><body package="Aragon.Widgets">specificInactiveSelectionBackgroundColor	^SymbolicPaint pushButtonSelectionBackground</body></methods><methods><class-id>Aragon.CardScrollerButton</class-id> <category>initialize-release</category><body package="Aragon.Widgets">installOn: aCardView 	(BoundedWrapper on: self) container: aCardView.	self model: ((PluggableAdaptor on: false asValue)			getBlock: [:m | false]			putBlock: [:m :v | aCardView shiftTabsBy: scrollValue]			updateBlock: [:m :a :p | false])</body></methods><methods><class-id>Aragon.CardScrollerButton</class-id> <category>displaying</category><body package="Aragon.Widgets">displayOn: gc 	"Display the appropriate scroller button appearance on gc."	| box labelOrigin border |	box := self bounds.	gc paint: (self isInTransition			ifTrue: [self selectionBackgroundColor]			ifFalse: [self backgroundColor]).	gc displayRectangle: box.	(border := self getBorder) displayOn: gc forDisplayBox: box.	box := border insetDisplayBoxFor: box.	labelOrigin := box center - (label bounds extent // 2).	self isEnabled		ifFalse: 			[gc paint: self hiliteColor.			self label displayOn: gc at: labelOrigin + 1].	gc paint: self buttonPartForegroundColor.	label displayOn: gc at: labelOrigin</body></methods><methods><class-id>Aragon.CardScrollerButton class</class-id> <category>instance creation</category><body package="Aragon.Widgets">left	^self new label: self leftArrow; scrollValue: -1</body><body package="Aragon.Widgets">new	"Answer a new instance of the receiver for scrolling aScrollWrapper in the given direction."	| scrollerButton nextScrollAfter cClass |	scrollerButton := super new.	cClass := Smalltalk at: #DelayingWidgetController ifAbsent: [nil].	cClass notNil 		ifTrue: 			[scrollerButton controller: cClass new.			scrollerButton controller startDelay: 400 stepDelay: 140]		ifFalse: [scrollerButton controller: WidgetController new].	scrollerButton controller		controlBlock: 			[:pt :button | 			(button == #wentDown and: [scrollerButton isEnabled])				ifTrue: 					[scrollerButton model value: nil.					scrollerButton isInTransition: true.					nextScrollAfter := Time millisecondClockValue + 400].			(button == #down and: [scrollerButton isEnabled and: [scrollerButton isInTransition]])				ifTrue: 					[| timeNow |					timeNow := Time millisecondClockValue.					timeNow &gt; nextScrollAfter						ifTrue: 						[scrollerButton model value: nil.						scrollerButton isInTransition: true.						nextScrollAfter := timeNow + 140]].			((button = #up or: [button = #wentUp]) and: [scrollerButton isInTransition]) ifTrue: [scrollerButton isInTransition: false]].	^scrollerButton</body><body package="Aragon.Widgets">right	^self new label: self rightArrow; scrollValue: 1</body></methods><methods><class-id>Aragon.NDSRenderer</class-id> <category>displaying</category><body package="Aragon.Widgets">displayCell: aCell element: element in: box on: aGraphicsContext	| cd val  displayBlock gc |	(cd := view columns at: aCell x) isTreeView ifTrue: [^self].		gc := aGraphicsContext.	(displayBlock := view displayBlockAtCellIndex: aCell) notNil		ifTrue: 			[| args |			args := Array new: displayBlock numArgs.			args at: 1 put: view; at: 2 put: aCell; at: 3 put: (gc := gc copy).			args size &gt; 4 ifTrue: [args at: 4 put: box; at: 5 put: element] ifFalse: [			args size &gt; 3 ifTrue: [args at: 4 put: box]].			(displayBlock valueWithArguments: args) == false ifTrue: [^view]].	box width &lt; view lineGrid ifTrue: [^self].	val := (aCell y == view targetIndex and: [cd editModel isBuffering])				ifTrue: [cd editModel value]				ifFalse: [cd editModel valueUsingSubject: element].	val == nil ifTrue: [^self].	cd renderer display: val in: box on: aGraphicsContext</body><body package="Aragon.Widgets">displayHilitedRow: rowIndex in: elementBounds 	| oldPaint |	oldPaint := gc1 paint.	gc1 paint: view selectionBackgroundColor.	gc1 displayRectangle: elementBounds.	gc1 paint: view selectionForegroundColor.	gc2 paint: view selectionForegroundColor.	self		displayRow: rowIndex		in: elementBounds.	gc1 paint: oldPaint.	gc2 paint: oldPaint.</body><body package="Aragon.Widgets">displayRow: rowIndex in: elementBounds 	| element |	element := sequence at: rowIndex.	firstColumnIndex to: view columns size		do: 			[:ci | 			| column box |			column := view columns at: ci.			box := column left @ elementBounds top extent: column width @ elementBounds height.			column isFrozen ifTrue: [box moveBy: bounds left@0].			(box left &lt; clippingBounds right and: [box right &gt; clippingBounds left])				ifTrue: 					[| gc |					gc := (column isFrozen or: [box left &gt; frozenEdge]) ifTrue: [gc1] ifFalse: [gc2].					self						displayCell: ci @ rowIndex						element: element						in: box						on: gc]]</body><body package="Aragon.Widgets">displayRowsOn: aGraphicsContext for: interval 	"Display the receiver's content on aGraphicsContext."	| eBox targetIndex delta |	sequence == nil ifTrue: [^self].	clippingBounds := aGraphicsContext clippingBounds.	bounds := view bounds.	frozenEdge := view frozenEdge + bounds left.	eBox := view boundsOfElementIndex: interval first - 1 inBounds: bounds.	gc1 := aGraphicsContext copy.	gc2 := gc1 copy intersectClip: (frozenEdge @ clippingBounds top corner: clippingBounds corner).	firstColumnIndex := view hasRowSelectors				ifTrue: [eBox left: bounds left + view columns first right. 2]				ifFalse: [1].	targetIndex := (view hasFocus and: [view controller isBrowsing]) ifTrue: [view targetIndex].	delta := 0 @ view lineGrid.	interval first to: interval last		do: 			[:i | 			eBox moveBy: delta.			(clippingBounds intersects: eBox)				ifTrue: 					[(view isHilited: i)						ifTrue: [self displayHilitedRow: i in: eBox]						ifFalse: [self displayRow: i in: eBox].					targetIndex == i ifTrue: [self displayTargetIn: eBox]]].	gc1 := gc2 := nil.</body><body package="Aragon.Widgets">displayTargetIn: elementBounds 	| oldPaint |	oldPaint := gc1 paint.	view hasRowSelectors ifTrue: [elementBounds left: (view columns at: 2) left].	view showHorizontalLines ifTrue: [elementBounds bottom: elementBounds bottom - 1].	gc1 paint: SymbolicPaint traversalHilite.	gc1 displayInteriorRectangularBorder: elementBounds.	gc1 paint: oldPaint</body></methods><methods><class-id>Aragon.NDSRenderer</class-id> <category>accessing</category><body package="Aragon.Widgets">view: aValue	view := aValue.	sequence := view sequence.</body></methods><methods><class-id>Aragon.NewDataSetSpec</class-id> <category>aspects</category><body package="Aragon.Widgets">showHorizontalLines	"Answer the value for showHorizontalLines"	^showHorizontalLines == nil		ifTrue: [false]		ifFalse: [showHorizontalLines]</body><body package="Aragon.Widgets">showHorizontalLines: aValue	showHorizontalLines := aValue</body><body package="Aragon.Widgets">showLabels	"Answer the value for showLabels"	^showLabels == nil		ifTrue: [true]		ifFalse: [showLabels]</body><body package="Aragon.Widgets">showLabels: aValue	showLabels := aValue</body><body package="Aragon.Widgets">showVerticalLines	"Answer the value for showVerticalLines"	^showVerticalLines == nil		ifTrue: [false]		ifFalse: [showVerticalLines]</body><body package="Aragon.Widgets">showVerticalLines: aValue	showVerticalLines := aValue</body></methods><methods><class-id>Aragon.NewDataSetSpec</class-id> <category>accessing</category><body package="Aragon.Widgets">allowForColumnDragging	"Answer the value for allowForColumnDragging"	^allowForColumnDragging == nil		ifTrue: [true]		ifFalse: [allowForColumnDragging]</body><body package="Aragon.Widgets">allowForColumnDragging: aValue	allowForColumnDragging := (aValue == false ifTrue: [false])</body><body package="Aragon.Widgets">allowForSorting	"Answer the value for allowForSorting"	^allowForSorting == nil		ifTrue: [true]		ifFalse: [allowForSorting]</body><body package="Aragon.Widgets">allowForSorting: aValue	allowForSorting := (aValue == false ifTrue: [false])</body><body package="Aragon.Widgets">initiallyUseEditingMode	"Answer the value for initiallyUseEditingMode"	^initiallyUseEditingMode == nil		ifTrue: [false]		ifFalse: [initiallyUseEditingMode]</body><body package="Aragon.Widgets">initiallyUseEditingMode: aValue	initiallyUseEditingMode := (aValue == true ifTrue: [true])</body><body package="Aragon.Widgets">isOpaque	^isOpaque == nil 		ifTrue: [true]		ifFalse: [isOpaque]</body><body package="Aragon.Widgets">isOpaque: aBoolean	isOpaque := aBoolean ifFalse: [false]</body><body package="Aragon.Widgets">multipleSelections: aValue	multipleSelections := (aValue == true ifTrue: [true])</body><body package="Aragon.Widgets">selectOnDownIfDragEnabled	| val |	val := self propertyAt: #selectOnDownIfDragEnabled .	val == nil ifTrue: [^true].	^val</body><body package="Aragon.Widgets">selectionType	^#highlight</body><body package="Aragon.Widgets">style	"Answer the value for style"	^style == nil 		ifTrue: [#default]		ifFalse: [style]</body><body package="Aragon.Widgets">style: aValue	"Set the value for style"	style := aValue."	self columns do: [:each | each font: aValue]"</body><body package="Aragon.Widgets">useDecoratedEditors	"Answer the value for useDecoratedEditors"	^useDecoratedEditors == nil		ifTrue: [false]		ifFalse: [useDecoratedEditors]</body><body package="Aragon.Widgets">useDecoratedEditors: aValue	useDecoratedEditors := aValue</body><body package="Aragon.Widgets">useModifierKeys	"Answer whether &lt;shift&gt; and &lt;ctrl&gt; should be used to sweep and extend 	multiple selections."	^useModifierKeys == nil		ifTrue: [false]		ifFalse: [useModifierKeys]</body><body package="Aragon.Widgets">useModifierKeys: aValue	useModifierKeys := aValue</body></methods><methods><class-id>Aragon.NewDataSetSpec</class-id> <category>enhanced</category><body package="Aragon.Widgets">hasTextBackground	^self isOpaque</body></methods><methods><class-id>Aragon.NewDataSetSpec</class-id> <category>building</category><body package="Aragon.Widgets">columnsInBuilder: builder 	| arr |	columns isSymbol ifTrue: [columns := builder aspectAt: columns].	arr := Array new: columns size.	1 to: columns size do: [:i | arr at: i put: (NewDataSetColumn on: (columns at: i) with: builder)].	^arr</body><body package="Aragon.Widgets">dispatchTo: policy with: builder 	policy newDataSetView: self into: builder.</body></methods><methods><class-id>Aragon.NewDataSetSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteIconImage	"Answer an image to reperesent spec on the palette"	paletteIcon isNil ifTrue: [paletteIcon := Array with: (OpaqueImage figure: (CachedImage on: self paletteIcon)						shape: (CachedImage on: self paletteShape))					with: (CachedImage on: self paletteMonoIcon)].	^paletteIcon at: (Screen default colorDepth == 1			ifTrue: [2]			ifFalse: [1])</body></methods><methods><class-id>Aragon.NewDataSetSpec class</class-id> <category>class initialization</category><body package="Aragon.Widgets">initialize	self installOnPalette</body><body package="Aragon.Widgets">shouldBeOnPalette	^true</body></methods><methods><class-id>Aragon.NewDataSetSpec class</class-id> <category>private-interface building</category><body package="Aragon.Widgets">addBindingsTo: env for: inst channel: aChannel	super addBindingsTo: env for: inst channel: aChannel.	env at: #style put: (self adapt: inst forAspect: #style channel: aChannel).	env at: #useDecoratedEditors put: (self adapt: inst forAspect: #useDecoratedEditors channel: aChannel).	env at: #initiallyUseEditingMode put: (self adapt: inst forAspect: #initiallyUseEditingMode channel: aChannel).	env at: #showHorizontalLines put: (self adapt: inst forAspect: #showHorizontalLines channel: aChannel).	env at: #showVerticalLines put: (self adapt: inst forAspect: #showVerticalLines channel: aChannel).	env at: #showLabels put: (self adapt: inst forAspect: #showLabels channel: aChannel).	env at: #allowForColumnDragging put: (self adapt: inst forAspect: #allowForColumnDragging channel: aChannel).	env at: #allowForSorting put: (self adapt: inst forAspect: #allowForSorting channel: aChannel).	env at: #multipleSelections put: (self adapt: inst forAspect: #multipleSelections channel: aChannel).	env at: #useModifierKeys put: (self adapt: inst forAspect: #useModifierKeys channel: aChannel).	env at: #selectOnDownIfDragEnabled put: (self adapt: inst forAspect: #selectOnDownIfDragEnabled channel: aChannel).	env at: #fontMenu put: self fontMenu.</body><body package="Aragon.Widgets">componentName	"Identification of component"	^'New Dataset'</body><body package="Aragon.Widgets">slices	^#(	(Basics basicsEditSpec)		(Details detailsEditSpec)		(Enhanced enhancedEditSpec)		(Column columnEditSpec #'Aragon.NewDataSetSpecColumnModel' dsv)		(#'Column Type' columnDetailsEditSpec #'Aragon.NewDataSetSpecColumnDetailsModel' dsv)		(Validation validationDCEditSpec DataSetCallbacksSpecModel)		(Notification notificationDCEditSpec DataSetCallbacksSpecModel)		(Color propSpec ColorToolModel) 		(Position propSpec PositionToolModel) 		(#'Drop Source'	dropSourceSpec)		(#'Drop Target'	dropTargetSpec))</body></methods><methods><class-id>Aragon.NDSInputFieldSpec</class-id> <category>building</category><body package="Aragon.Widgets">dispatchTo: policy with: builder	| component _model _menu _performer _alignment  |	_model := self modelInBuilder: builder.	component := NDSInputFieldView new.	component converter: (self converterWith: builder).	self type == #password		ifTrue: [component displayContents passwordChar: $*].	component model: _model.	policy setStyleOf: component to: self style.	(_menu := self getMenuIn: builder) == nil		ifFalse: [component controller menuHolder: _menu].	(_performer := self getPerformerIn: builder) == nil		ifFalse: [component controller performer:  _performer].	builder component: component.	component displaySelection: false.	policy setDispatcherOf: component fromSpec: self builder: builder.	self tabable		ifTrue: [component widgetState isTabStop: true.				builder sendKeyboardTo: component]		ifFalse: [component widgetState canTakeFocus: true.				component controller keyboardProcessor: builder keyboardProcessor.				builder component controller dispatchOn: Character cr to: #acceptKey:.].	self isReadOnly ifTrue: [component controller readOnly: true].	self numChars == nil ifFalse: [component controller maxChars: self numChars].	(_alignment := self alignment) == #left		ifFalse: [policy setAlignmentOf: component displayContents to: _alignment].	builder wrapWith: ScrollWrapper new.	self decorationType == #bordered		ifTrue: [builder wrapWith: policy borderedWrapperClass new.				builder wrapper inset: 0.				builder wrapper border: policy inputFieldBorder]		ifFalse: [builder wrapWith: policy boundedWrapperClass new].	component widgetState isEnabled: self initiallyEnabled.	builder isEditing ifFalse: [component widgetState isVisible: self initiallyVisible].	builder applyLayout: self layout.	builder wrapWith: (policy simpleWidgetWrapperOn: builder spec: self)</body></methods><methods><class-id>Aragon.NDSInputFieldSpec class</class-id> <category>instance creation</category><body package="Aragon.Widgets">copyFrom: anInputFieldSpec	| instance |	instance := self basicNew.	1 to: self allInstVarNames size do: [:i | instance instVarAt: i put: (anInputFieldSpec instVarAt: i)].	^instance</body></methods><methods><class-id>Aragon.EnhancedLabel</class-id> <category>bounds accessing</category><body package="Aragon.Widgets">preferredBounds	"Answer a Rectangle that represents the receiver's preferred bounding rectangle."	| ctext |	^(ctext := self composedText) == nil		ifTrue: [0@0 extent: 10@16]		ifFalse: [0@0 extent: ctext preferredBounds extent + (margin+margin)]</body><body package="Aragon.Widgets">preferredExtent	^self preferredBounds extent</body></methods><methods><class-id>Aragon.EnhancedLabel</class-id> <category>private</category><body package="Aragon.Widgets">composedText	^(label isKindOf: Label)		ifTrue: [ComposedText withText: label text style: self getTextStyle]</body><body package="Aragon.Widgets">displayLabelOn: aGraphicsContext 	(label isKindOf: Label)		ifTrue: 			[self setForegroundPaintOn: aGraphicsContext.			(self composedText) compositionWidth: self bounds width - (2 * margin); 				displayOn: aGraphicsContext at: margin @ margin]		ifFalse: [super displayLabelOn: aGraphicsContext]</body></methods><methods><class-id>Aragon.EnhancedLabel</class-id> <category>accessing</category><body package="Aragon.Widgets">labelString: aString	self label: (Label with: aString asText)</body></methods><methods><class-id>Aragon.CardViewSpec</class-id> <category>accessing</category><body package="Aragon.Widgets">buildPages	^buildPages == nil ifTrue: [false] ifFalse: [buildPages]</body><body package="Aragon.Widgets">buildPages: aBoolean	buildPages := aBoolean ifTrue: [true]</body><body package="Aragon.Widgets">cachePages	^cachePages == nil ifTrue: [false] ifFalse: [cachePages]</body><body package="Aragon.Widgets">cachePages: aBoolean	cachePages := aBoolean ifTrue: [true]</body><body package="Aragon.Widgets">hasInherentSize	^true</body><body package="Aragon.Widgets">isDecorated	^self decorationType == #bordered		ifTrue: [true]		ifFalse: [false]</body><body package="Aragon.Widgets">isDecorated: aBoolean	self decorationType: (aBoolean 		ifTrue: [#bordered]		ifFalse: [#none])</body><body package="Aragon.Widgets">labelSuppliedByApplication	^labelSuppliedByApplication == true</body><body package="Aragon.Widgets">labelSuppliedByApplication: aBoolean	labelSuppliedByApplication := aBoolean ifTrue: [true] ifFalse: [nil].</body><body package="Aragon.Widgets">style	"Answer the value for style"	^style == nil 		ifTrue: [#system]		ifFalse: [style]</body><body package="Aragon.Widgets">style: aValue	"Set the value for style"	style := aValue.	style == #system ifTrue: [style := nil].</body><body package="Aragon.Widgets">subcanvas	^subcanvas</body><body package="Aragon.Widgets">subcanvas: aSymbol	subcanvas := aSymbol</body></methods><methods><class-id>Aragon.CardViewSpec</class-id> <category>building</category><body package="Aragon.Widgets">dispatchTo: policy with: builder 	| component theModel |	component := CardView new.	theModel := self modelInBuilder: builder.	"theModel list isEmpty ifTrue: [theModel list: self labelsArray]."	builder component: component.	policy		setDispatcherOf: component		fromSpec: self		builder: builder.	component widgetState isEnabled: self initiallyEnabled.	component widgetState hasBorder: self isDecorated.	self tabable		ifTrue: 			[component widgetState isTabStop: true.			builder sendKeyboardTo: component]		ifFalse: 			[component widgetState canTakeFocus: true.			component controller keyboardProcessor: builder keyboardProcessor].	builder isEditing ifFalse: [component widgetState isVisible: self initiallyVisible].	builder isEditing 		ifFalse:			[| subBuilder |			subBuilder := builder newSubBuilder source: builder source.			(SubCanvasSpec new clientKey: subcanvas) dispatchTo: policy with: subBuilder.			component subcanvas: subBuilder component.			component buildPages: self buildPages.			component cachePages: self cachePages].	component selectionChannel: theModel selectionIndexHolder.	component model: theModel listHolder.	policy setupFlyByHelpFor: component spec: self builder: builder.	policy setStyleOf: component to: self style.	builder wrapWith: (policy simpleWrapperFor: self).	builder applyLayout: self layout.	builder wrapWith: (policy simpleWidgetWrapperOn: builder spec: self)</body></methods><methods><class-id>Aragon.CardViewSpec</class-id> <category>private</category><body package="Aragon.Widgets">defaultModel	^SelectionInList with: #(First Second Third)</body></methods><methods><class-id>Aragon.CardViewSpec</class-id> <category>initialize-release</category><body package="Aragon.Widgets">initialize	super initialize.	self isDecorated: true.</body></methods><methods><class-id>Aragon.CardViewSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteIconImage	"Answer an image to reperesent spec on the palette"	paletteIcon isNil ifTrue: [paletteIcon := Array with: (OpaqueImage figure: (CachedImage on: self paletteImage)						shape: (CachedImage on: self paletteMonoIcon))					with: (CachedImage on: self paletteMonoIcon)].	^paletteIcon at: (Screen default colorDepth == 1			ifTrue: [2]			ifFalse: [1])</body></methods><methods><class-id>Aragon.CardViewSpec class</class-id> <category>private-interface building</category><body package="Aragon.Widgets">addBindingsTo: env for: inst channel: aChannel	super addBindingsTo: env for: inst channel: aChannel.	env at: #subcanvas put: (TypeConverter onSymbolValue: (self adapt: inst forAspect: #subcanvas channel: aChannel)).	env at: #isDecorated put: (self adapt: inst forAspect: #isDecorated channel: aChannel).	env at: #style put: (self adapt: inst forAspect: #style channel: aChannel).	env at: #labelSuppliedByApplication put: (self adapt: inst forAspect: #labelSuppliedByApplication channel: aChannel).	env at: #buildPages put: (self adapt: inst forAspect: #buildPages channel: aChannel).	env at: #cachePages put: (self adapt: inst forAspect: #cachePages channel: aChannel).	env at: #fontMenu put: self fontMenu.</body><body package="Aragon.Widgets">componentName	"Identification of component"	^'Card View'</body><body package="Aragon.Widgets">placementExtentBlock	^[:bldr | 144@72]</body></methods><methods><class-id>Aragon.CardViewSpec class</class-id> <category>class initialization</category><body package="Aragon.Widgets">initialize	self installOnPalette</body><body package="Aragon.Widgets">shouldBeOnPalette	^true</body></methods><methods><class-id>Aragon.NewDataSetScrollWrapper</class-id> <category>access - scrollbars</category><body package="Aragon.Widgets">visibleExtent	"Answer the extent of the receiver's clipping box."	^component visibleExtent</body></methods><methods><class-id>Aragon.NewColumnTracker</class-id> <category>private</category><body package="Aragon.Widgets">canDragColumn	^(controller view columns at: index) canBeDragged</body><body package="Aragon.Widgets">isDragging	^labelPixmap ~~ nil</body><body package="Aragon.Widgets">moveColumnFor: aPoint in: box 	| columns |	columns := controller view columns.	(aPoint x &gt; box right and: [	index &lt; columns size and: [	aPoint x + box width &gt; (columns at: index + 1) labelVisual bounds right]])		ifTrue: [^index := controller view moveColumnAt: index by: 1].	index &gt; 1 ifFalse: [^self].	(aPoint x &lt; box left and: [	(columns at: index - 1) isFrozen not and: [	aPoint x - box width &lt; (columns at: index - 1) labelVisual bounds left]])		ifTrue: [^index := controller view moveColumnAt: index by: -1]</body><body package="Aragon.Widgets">restoreBackground	gc		copyArea: (0@0 extent: label bounds extent)		from: backingStore		sourceOffset: 0@0		destinationOffset: recentPt</body></methods><methods><class-id>Aragon.NewColumnTracker</class-id> <category>dragging</category><body package="Aragon.Widgets">dragColumnTo: aPoint 	| lBounds pt box buffer bbox i0 |	lBounds := label bounds.	pt := aPoint - offset.	box := 0@0 extent: lBounds extent.	bbox := (recentPt extent: lBounds extent) merge: (pt extent: lBounds extent).	buffer := (Pixmap extent: bbox extent) graphicsContext.	buffer translation: bbox origin negated.	buffer copyArea: bbox from: gc sourceOffset: 0@0 destinationOffset: 0@0.	buffer copyArea: box from: backingStore sourceOffset: 0@0 destinationOffset: recentPt.	(aPoint y + 48 &lt; lBounds top or: [aPoint y - 48 &gt; lBounds bottom])		ifTrue: 			[index ~~ originalIndex				ifTrue: 					[controller view moveColumnAt: index by: originalIndex - index.					index := originalIndex].			self restoreBackground.			^self].	i0 := index.	self moveColumnFor: aPoint in: lBounds.	index ~~ i0		ifTrue: 			[| b | b := controller view bounds.			buffer clippingRectangle: (b left + controller view frozenEdge @ 0 corner: b corner). 			(controller view columns at: i0) labelVisual displayOn: buffer.			(controller view columns at: index) labelVisual displayOn: buffer].	backingStore copyArea: box from: buffer sourceOffset: pt destinationOffset: 0@0.	labelPixmap displayOn: buffer at: pt.	gc copyArea: bbox from: buffer sourceOffset: 0@0 destinationOffset: 0@0.	recentPt := pt</body><body package="Aragon.Widgets">finishColumnDraggingAt: aPoint	self restoreBackground.	index == originalIndex ifFalse: [controller view invalidateAndEdit].	controller view changed: #columnMove with: (Array with: index with: originalIndex).</body><body package="Aragon.Widgets">startColumnDraggingAt: aPoint 	| lBounds pt |	lBounds := label bounds.	pt := aPoint - offset.	label isInTransition: false.	backingStore := (gc paintBasis retainedMediumWithExtent: lBounds extent) graphicsContext.	labelPixmap := gc paintBasis retainedMediumWithExtent: lBounds extent.	label displayOn: labelPixmap graphicsContext at: lBounds origin negated.	backingStore		copyArea: (0@0 extent: lBounds extent)		from: gc		sourceOffset: pt		destinationOffset: 0@0.	labelPixmap displayOn: gc at: pt.	recentPt := pt.</body></methods><methods><class-id>Aragon.NewColumnTracker</class-id> <category>tracking</category><body package="Aragon.Widgets">finishSelectionFor: aPoint 	self isDragging ifTrue: [^self finishColumnDraggingAt: aPoint].	label isInTransition		ifTrue: 			[(index == 1 and: [controller view hasRowSelectors])				ifTrue: [controller view selectAll]				ifFalse: [controller view definitelyOrderBy: index].			label isInTransition: false].	super finishSelectionFor: aPoint</body><body package="Aragon.Widgets">setUpFor: anEvent	| column |	column := controller view columns at: index.	label := column labelVisual.	offset := cursorPoint - label bounds origin.	gc := controller view graphicsContext copy clippingRectangle: nil.	super setUpFor: anEvent.	(index == 1 and: [controller view hasRowSelectors]) ifTrue: [^self].	column allowsForSorting ifFalse: [offset := offset - 4. self startColumnDraggingAt: cursorPoint].</body><body package="Aragon.Widgets">trackSelectionFor: aPoint 	self isDragging ifTrue: [^self dragColumnTo: aPoint].	(self canDragColumn and: [(aPoint x - label bounds left - offset x) abs &gt; 7])		ifTrue: [^self startColumnDraggingAt: aPoint].	label isInTransition: (label bounds containsPoint: aPoint)</body></methods><methods><class-id>Aragon.NewColumnTracker</class-id> <category>accessing</category><body package="Aragon.Widgets">index: anIndex	index := anIndex.	originalIndex := anIndex.</body></methods><methods><class-id>Aragon.TreeController</class-id> <category>private</category><body package="Aragon.Widgets">collapse: aNode at: anIndex 	| wouldChangeSelection |	(wouldChangeSelection := view wouldSelectionChangeIfCollapsed: aNode at: anIndex)		and: [self requestValueChange == false ifTrue: [^self]].	self sensor shiftDown		ifTrue: [view sequence privateCollapseSubtree: aNode at: anIndex]		ifFalse: [view sequence privateCollapse: aNode at: anIndex].	wouldChangeSelection ifTrue: [self valueChange]</body><body package="Aragon.Widgets">expand: aNode at: anIndex 	self sensor shiftDown 		ifTrue: [view sequence privateExpandSubtree: aNode at: anIndex]		ifFalse: [view sequence privateExpand: aNode at: anIndex]</body><body package="Aragon.Widgets">isDoubleClickable	^true</body><body package="Aragon.Widgets">toggleExpand: aNode at: anIndex 	aNode isCollapsed ifTrue: [^self expand: aNode at: anIndex].	aNode isExpanded ifTrue: [^self collapse: aNode at: anIndex]</body><body package="Aragon.Widgets">toggleExpandAt: anIndex 	^self toggleExpand: (view sequence nodeAt: anIndex) at: anIndex</body><body package="Aragon.Widgets">toggleExpandTarget	"The receiver has been doubleClicked on. Give any interested 	parties notification."	| index node oldStatus |	index := view targetIndex.	(view isSelected: index) ifFalse: [view useSelectionIndex: index].	node := view sequence nodeAt: index.	oldStatus := node status.	self toggleExpand: node at: index.	^node status ~~ oldStatus</body></methods><methods><class-id>Aragon.TreeController</class-id> <category>keyboard</category><body package="Aragon.Widgets">processKeyboardEvent: anEvent 	| ev |	ev := anEvent.	keyboardHook == nil ifFalse: [(ev := keyboardHook value: ev value: self) isNil ifTrue: [^self]].	ev keyValue == Character cr ifTrue: [searchString := nil.  ^self doubleClick].	view selectionIndex = view zeroIndex ifTrue: [^super processKeyboardEvent: anEvent].	(ev keyValue == #Down and: [anEvent hasCtrl]) 		ifTrue: [^self moveSelectionBy: (view sequence countChildrenAt: view selectionIndex) + 1].	(ev keyValue == #Up and: [anEvent hasCtrl]) 		ifTrue:			[| aNode | 			Object errorSignal 				handle: [:ex | ]				do:					[aNode := view sequence nodeAt: view selectionIndex.					^self moveSelectionBy: (view sequence 						countChildrenOf: (aNode parent children asList before: aNode)) negated - 1]].	ev keyValue == #Right		ifTrue: 			[| aNode | 			aNode := view sequence nodeAt: view targetIndex.			aNode isExpanded 				ifTrue: [self moveSelectionBy: 1]				ifFalse: [self expand: aNode at: view targetIndex].			^searchString := nil].	ev keyValue == #Left 		ifTrue: 			[| aNode |			aNode := view sequence nodeAt: view targetIndex.			(aNode isCollapsed or: [anEvent hasCtrl]) 				ifTrue: 					[| index | 					aNode parent isNil ifTrue: [^Screen default ringBell].					index := view sequence indexOf: aNode parent.					^view useTargetIndex: index; useSingleSelectionIndex: index].			self collapse: aNode at: view targetIndex.			^searchString := nil].	^super processKeyboardEvent: anEvent</body><body package="Aragon.Widgets">searchChar: aChar 	| size index sSize |	doStringSearching ifFalse: [^self].	(size := view numberOfElements) = 0 ifTrue: [^self].	aChar == Ctrlw ifTrue: [^searchString := nil].	(index := view selectionIndex) == 0 ifTrue: [index := view firstIndex].	(aChar = BS or: [aChar = Character del])		ifTrue:			[searchString == nil				ifTrue: [^nil]				ifFalse: [searchString size = 1						ifTrue: [^searchString := nil]						ifFalse: [searchString := searchString copyFrom: 1 to: searchString size-1]]]		ifFalse:			[searchString == nil				ifTrue: [searchString := String new].			searchString := searchString , (String with: aChar) asUppercase].	sSize := searchString size.	index to: size		do: 			[:i | 			| s i1 |			s := (view displayStringAt: i) asString.			i1 := s findFirst: [:c | c isSeparator not].			(i1 &gt; 0 and: [s size - i1 + 1 &gt;= sSize])				ifTrue: 					["Send asString because we want Text to be allowable"					s := s copyFrom: i1 to: i1 - 1 + sSize.					searchString = s asUppercase ifTrue: [^view useTargetIndex: i]]].	view flash</body></methods><methods><class-id>Aragon.TreeController</class-id> <category>event driven</category><body package="Aragon.Widgets">doSelectDownAt: aPoint 	(view pointIsButton: aPoint)		ifTrue: [self toggleExpandAt: (view elementIndexFor: aPoint)]		ifFalse: [(view pointIsOnLabel: aPoint)				ifTrue: [^false]				ifFalse: [(self class deselectIfNotOnLabel and: [self requestValueChange])						ifTrue: [view retractAllSelections]]].	^true</body><body package="Aragon.Widgets">selectEvent: event 	(self doSelectDownAt: (self sensor mousePointFor: event)) ifFalse: [super selectEvent: event].</body></methods><methods><class-id>Aragon.TreeController</class-id> <category>event dispatching</category><body package="Aragon.Widgets">doubleClick	"If the dispatcher contains a notification handler for double click, invoke the superclass's handling. If 	there's no double click notification handler configured with the dispatcher or if the handler returns 	false then the double clicked entry is expanded/collapsed."	AllowDoubleClickOnNodes 		ifTrue: [(self dispatcher isDoubleClickable not or: [super doubleClick == #toggleExpand])				ifTrue: [self toggleExpandTarget]]		ifFalse: [self toggleExpandTarget ifFalse: [super doubleClick]]</body></methods><methods><class-id>Aragon.TreeController class</class-id> <category>constants</category><body package="Aragon.Widgets">deselectIfNotOnLabel	^DeselectIfNotOnLabel</body><body package="Aragon.Widgets">deselectIfNotOnLabel: aBoolean	DeselectIfNotOnLabel := aBoolean</body><body package="Aragon.Widgets">useWin95PopupPolicy	^UseWin95PopupPolicy</body><body package="Aragon.Widgets">useWin95PopupPolicy: aBoolean 	UseWin95PopupPolicy := aBoolean</body></methods><methods><class-id>Aragon.TreeController class</class-id> <category>class initialization</category><body package="Aragon.Widgets">allowDoubleClickOnNodes: aBoolean 	"Send this message to TreeController class with aBoolean = true, if you want double click notifications 	to be forwarded to your app models only for leaf entries."	AllowDoubleClickOnNodes := aBoolean</body><body package="Aragon.Widgets">initialize	self allowDoubleClickOnNodes: true.	self deselectIfNotOnLabel: true.	self useWin95PopupPolicy: false.</body></methods><methods><class-id>Aragon.TreeViewSpec</class-id> <category>accessing</category><body package="Aragon.Widgets">displayButtons	^displayButtons ~~ false</body><body package="Aragon.Widgets">displayButtons: aValue	displayButtons := aValue ifFalse: [aValue]</body><body package="Aragon.Widgets">displayImages	^displayImages ~~ false</body><body package="Aragon.Widgets">displayImages: aValue	displayImages := aValue ifFalse: [aValue]</body><body package="Aragon.Widgets">displayLines	^displayLines ~~ false</body><body package="Aragon.Widgets">displayLines: aValue	displayLines := aValue ifFalse: [aValue]</body><body package="Aragon.Widgets">isDecorated	^false</body><body package="Aragon.Widgets">isDecorated: aBoolean</body><body package="Aragon.Widgets">isOpaque	^isOpaque == nil 		ifTrue: [true]		ifFalse: [isOpaque]</body><body package="Aragon.Widgets">isOpaque: aBoolean	isOpaque := aBoolean ifFalse: [false]</body><body package="Aragon.Widgets">linesAtRoot	^linesAtRoot == true</body><body package="Aragon.Widgets">linesAtRoot: aValue	linesAtRoot := aValue ifTrue: [aValue]</body></methods><methods><class-id>Aragon.TreeViewSpec</class-id> <category>private</category><body package="Aragon.Widgets">defaultModel	^SelectionInList		with: ((TreeAdaptor new)			childrenBlock: [:c | c subclasses 				collect: [:each | each asTreeNode isLeaf: each subclasses isEmpty]]; 			root: Collection asTreeNode; expandAll)</body><body package="Aragon.Widgets">dispatchTo: policy with: builder		policy aragonTreeView: self into: builder</body></methods><methods><class-id>Aragon.TreeViewSpec class</class-id> <category>private-interface building</category><body package="Aragon.Widgets">addBindingsTo: env for: inst channel: aChannel	super addBindingsTo: env for: inst channel: aChannel.	env at: #displayImages put: (self adapt: inst forAspect: #displayImages channel: aChannel).	env at: #displayLines put: (self adapt: inst forAspect: #displayLines channel: aChannel).	env at: #displayButtons put: (self adapt: inst forAspect: #displayButtons channel: aChannel).	env at: #linesAtRoot put: (self adapt: inst forAspect: #linesAtRoot channel: aChannel).</body><body package="Aragon.Widgets">componentName	"Identification of component"	^'Tree View'</body><body package="Aragon.Widgets">specGenerationBlock	^[:ctrlr :point | | spec |		spec := self layout:				((ctrlr gridPoint: point)					extent: (ctrlr currentMode value class placementExtentFor: self inBuilder: ctrlr builder)).		"new specs should not use check marks and should use &lt;shift&gt; and &lt;ctrl&gt;		modifiers for multiselection."		spec selectionType: #highlight.		spec useModifierKeys: true.		spec displayImages: true.		spec displayLines: true.		spec displayButtons: true.		spec ]</body></methods><methods><class-id>Aragon.TreeViewSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteIconImage	"Answer an image to reperesent spec on the palette"	paletteIcon isNil ifTrue: [paletteIcon := Array with: (OpaqueImage figure: (CachedImage on: self paletteIcon)						shape: (CachedImage on: self paletteShape))					with: (CachedImage on: self paletteMonoIcon)].	^paletteIcon at: (Screen default colorDepth == 1			ifTrue: [2]			ifFalse: [1])</body></methods><methods><class-id>Aragon.TreeViewSpec class</class-id> <category>class initialization</category><body package="Aragon.Widgets">initialize	self installOnPalette</body><body package="Aragon.Widgets">shouldBeOnPalette	^true</body></methods><methods><class-id>Aragon.ResizerController</class-id> <category>events</category><body package="Aragon.Widgets">redButtonPressedEvent: event 	self doResize</body></methods><methods><class-id>Aragon.ResizerController</class-id> <category>private</category><body package="Aragon.Widgets">cursorPt	^self sensor cursorPoint * self orientationPt</body><body package="Aragon.Widgets">doResize	| box gc pt |	box := view bounds.	gc := view graphicsContext copy.	gc clippingRectangle: nil.	pt := self sensor cursorPoint.	offset := pt - box origin * self orientationPt.	recentPt := pt := pt * self orientationPt."	pixmap := gc paintBasis retainedMediumWithExtent: 3@box height.	pixmap background: ColorValue gray.	pixmap graphicsContext clear."	pixmap := gc paintBasis retainedMediumWithExtent: box extent.	pixmap graphicsContext		copyArea: (0@0 extent: pixmap extent)		from: gc		sourceOffset: box origin		destinationOffset: 0@0.	backingStore := (gc paintBasis retainedMediumWithExtent: pixmap extent) graphicsContext.	backingStore		copyArea: (0@0 extent: pixmap extent)		from: gc		sourceOffset: pt		destinationOffset: 0@0.		view cursor showWhile: [[self sensor anyButtonPressed]			whileTrue: 				[(pt := self cursorPt - offset) ~= recentPt ifTrue: [self trackSelectionFor: pt with: gc].				recentPt := pt]].	gc 		copyArea: (0 @ 0 extent: pixmap extent)		from: backingStore		sourceOffset: 0@0		destinationOffset: pt.	view moveTo: pt</body><body package="Aragon.Widgets">downcastEvent: aKey with: aParameter from: anInitiator	"This is a message passed down the view structure to all subparts."	super downcastEvent: aKey with: aParameter from: anInitiator.	(aKey == #deactivate and: [Cursor currentCursor == view cursor]) 		ifTrue: [Cursor normal show].</body><body package="Aragon.Widgets">orientationPt	^view orientation == #vertical		ifTrue: [1 @ 0]		ifFalse: [0 @ 1]</body><body package="Aragon.Widgets">trackSelectionFor: pt with: gc 	| box bbox buffer |	box := 0@0 extent: pixmap extent.	bbox := (recentPt extent: box extent) merge: (pt extent: box extent).	buffer := (Pixmap extent: bbox extent) graphicsContext.	buffer translation: bbox origin negated.	buffer copyArea: bbox from: gc sourceOffset: 0@0 destinationOffset: 0@0.	buffer copyArea: box from: backingStore sourceOffset: 0@0 destinationOffset: recentPt.	backingStore copyArea: box from: buffer sourceOffset: pt destinationOffset: 0@0.	pixmap displayOn: buffer at: pt.	gc copyArea: bbox from: buffer sourceOffset: 0@0 destinationOffset: 0@0.</body></methods><methods><class-id>Aragon.ResizerController</class-id> <category>basic control sequence</category><body package="Aragon.Widgets">controlInitialize	view cursor show</body><body package="Aragon.Widgets">controlTerminate	Cursor normal show</body></methods><methods><class-id>Aragon.ResizerController</class-id> <category>control defaults</category><body package="Aragon.Widgets">controlActivity	self sensor redButtonPressed ifTrue: [self doResize].</body></methods><methods><class-id>Aragon.NewRowVisual</class-id> <category>accessing</category><body package="Aragon.Widgets">inset	^7@2</body><body package="Aragon.Widgets">isFrozen	^frozen == true</body><body package="Aragon.Widgets">isFrozen: aBoolean	frozen := aBoolean</body><body package="Aragon.Widgets">isInTransition	^inTransition == true</body><body package="Aragon.Widgets">isInTransition: aBoolean 	inTransition == aBoolean		ifFalse: 			[inTransition := aBoolean.			self redisplayForTransitionChange]</body><body package="Aragon.Widgets">label	^label</body><body package="Aragon.Widgets">label: aValue	label := aValue.</body></methods><methods><class-id>Aragon.NewRowVisual</class-id> <category>bounds accessing</category><body package="Aragon.Widgets">bounds	^self isFrozen		ifTrue: [bounds translatedBy: container bounds left @ 0]		ifFalse: [bounds]</body><body package="Aragon.Widgets">bounds: aValue 	bounds := aValue.</body><body package="Aragon.Widgets">insetDisplayBox	^self bounds insetBy: self inset</body><body package="Aragon.Widgets">preferredBounds	^label == nil		ifTrue: [0 @ 0 extent: self inset * 2]		ifFalse: [label preferredBounds expandedBy: self inset]</body></methods><methods><class-id>Aragon.NewRowVisual</class-id> <category>displaying</category><body package="Aragon.Widgets">displayOn: aGraphicsContext 	"Display the receiver on aGraphicsContext. The receiver may alter 	aGraphicsContext in any way it chooses."	| box gc |	(aGraphicsContext clippingBounds intersects: self bounds) ifFalse: [^self].	gc := aGraphicsContext copy.	box := self bounds.	gc paint: self backgroundColor; displayRectangle: box.	self getBorder displayOn: gc forDisplayBox: box.</body><body package="Aragon.Widgets">redisplayForTransitionChange	"Redisplay the receiver, there has been a transition between being pressed/unpressed."	"Subclasses who want to do something more efficient can override this method."	self invalidateRectangle: self bounds repairNow: true</body></methods><methods><class-id>Aragon.NewRowVisual</class-id> <category>visual properties</category><body package="Aragon.Widgets">backgroundColor	^SymbolicPaint pushButtonBackground</body><body package="Aragon.Widgets">getBorder	^self isInTransition		ifTrue: [SimpleBorder width: 1 color: SymbolicPaint pushButtonShadow]		ifFalse: [NSBorder raised]</body></methods><methods><class-id>Aragon.NewRowVisual class</class-id> <category>visual properties</category><body package="Aragon.Widgets">backgroundColor	^BackgroundColor</body><body package="Aragon.Widgets">backgroundColor: aColor	BackgroundColor := aColor</body><body package="Aragon.Widgets">initialize	BackgroundColor := SymbolicPaint  pushButtonBackground</body></methods><methods><class-id>Aragon.SelectionInTree</class-id> <category>selection in list</category><body package="Aragon.Widgets">selectParent	| parentNode |	^(parentNode := self selectedNode parent) notNil		ifTrue: 			[self selection: parentNode.			parentNode subject]		ifFalse: [nil]</body></methods><methods><class-id>Aragon.SelectionInTree</class-id> <category>modifying</category><body package="Aragon.Widgets">removeSelectedNode	self list removeAt: self selectionIndex</body></methods><methods><class-id>Aragon.SelectionInTree</class-id> <category>expand-collapse</category><body package="Aragon.Widgets">collapseSelectedNode	self list collapseAt: self selectionIndex</body><body package="Aragon.Widgets">expandSelectedNode	self list expandAt: self selectionIndex</body><body package="Aragon.Widgets">toggleExpandSelectedNode	self list toggleExpandAt: self selectionIndex</body></methods><methods><class-id>Aragon.SelectionInTree</class-id> <category>invalidation</category><body package="Aragon.Widgets">invalidateParentNode	| selectedNode parentNode |	selectedNode := self selectedNode.	parentNode := selectedNode parent.	self list invalidateAndReExpand: parentNode.	self selectedNode ~= selectedNode 		ifTrue: [self selectionIndexHolder changed: #value].</body></methods><methods><class-id>Aragon.SelectionInTree</class-id> <category>accessing</category><body package="Aragon.Widgets">selectedNode	| index |	^(index := self selectionIndex) == 0 ifFalse: [self list nodeAt: index]</body></methods><methods><class-id>Aragon.TextStyle</class-id> <category>installing</category><body package="Aragon.Widgets">installAs: aStylename	| styleName |	styleName := aStylename asSymbol.	UserTextStyles at: styleName put: self.	('System.*' match: styleName) 		ifTrue: 			[styleName = #'System.Default'	ifTrue: [^self installAsDefault].			styleName = #'System.Menu'		ifTrue: [^self installForMenus].			styleName = #'System.Widget'		ifTrue: [^self installForWidgets]].	(styleName includes: $.) ifFalse: [TextAttributes styleNamed: styleName put: self].</body><body package="Aragon.Widgets">installAsDefault	TextAttributes styleNamed: #default put: self.	self class changed: #default.	TextAttributes resetViews.</body><body package="Aragon.Widgets">installForMenus	LookPreferences widgetPolicy lookPolicyClass systemMenuTextStyle: self.	GraphicsDevice allOpenDevices do: [:each | each updateWidgetPolicy].</body><body package="Aragon.Widgets">installForWidgets 	LookPreferences widgetPolicy lookPolicyClass systemWidgetTextStyle: self.	GraphicsDevice allOpenDevices do: [:each | each updateWidgetPolicy].</body></methods><methods><class-id>Aragon.TextStyle</class-id> <category>printing</category><body package="Aragon.Widgets">storeOn: aStream	| myFont |	myFont := self font.	aStream nextPutAll: '(TextStyle newOnFont: '.	myFont storeOn: aStream.	aStream nextPutAll: ' withAttributes: #('.		myFont attributes keys do: [:each | aStream nextPutAll: each; nextPut: Character space].	aStream nextPutAll: '))'.</body></methods><methods><class-id>Aragon.TextStyle</class-id> <category>converting</category><body package="Aragon.Widgets">asTextAttributes		| answer |	answer := TextAttributes new.	(1 to: TextAttributes allInstVarNames size) do: [:i | answer instVarAt: i put: (self instVarAt: i)].	^answer</body></methods><methods><class-id>Aragon.TextStyle</class-id> <category>accessing</category><body package="Aragon.Widgets">font	^characterAttributes asFont</body></methods><methods><class-id>Aragon.TextStyle class</class-id> <category>installing</category><body package="Aragon.Widgets">allStyles	^UserTextStyles keys</body><body package="Aragon.Widgets">hiddenStyles	^UserTextStyles keys select: [:each | ('*.*' match: each) and: [('System.*' match: each) not]]</body><body package="Aragon.Widgets">named: aSymbol	^self named: aSymbol ifAbsent: [nil]</body><body package="Aragon.Widgets">named: aSymbol ifAbsent: aBlock	^UserTextStyles at: aSymbol ifAbsent: [self styleNamed: aSymbol ifAbsent: aBlock]</body><body package="Aragon.Widgets">removeStyleNamed: aSymbol 	self removeStyleNamed: aSymbol ifAbsent: []</body><body package="Aragon.Widgets">removeStyleNamed: aSymbol ifAbsent: aBlock	UserTextStyles removeKey: aSymbol ifAbsent: aBlock.	TextAttributes removeStyleNamed: aSymbol ifAbsent: []</body><body package="Aragon.Widgets">standardStyles	^UserTextStyles keys reject: [:each | '*.*' match: each]</body><body package="Aragon.Widgets">systemStyles	^UserTextStyles keys select: [:each | 'System.*' match: each]</body><body package="Aragon.Widgets">userStyles	^UserTextStyles</body></methods><methods><class-id>Aragon.TextStyle class</class-id> <category>instance creation</category><body package="Aragon.Widgets">newOnFont: aFont 	^self newOnFont: aFont withAttributes: #()</body><body package="Aragon.Widgets">newOnFont: aFont withAttributes: attributes 	| instance |	instance := self characterAttributes: aFont.	(attributes == #all or: [attributes includes: #all])		ifTrue: [FontAttributes associationsDo: [:each | instance at: each key put: each value]]		ifFalse: [attributes do: [:each | instance at: each put: (FontAttributes at: each)]].	instance gridForFont: nil withTopLead: 0 bottomLead: 1.	^instance</body></methods><methods><class-id>Aragon.TextStyle class</class-id> <category>storing</category><body package="Aragon.Widgets">mandatoryAttributes	^#(small large color family)</body><body package="Aragon.Widgets">readStylesFrom: aStream 	"TextStyle readStylesFrom: 'TextStyles.stx'"	| styleName family style pixelSize attributes knownAttributes |	knownAttributes := FontAttributes keys.	knownAttributes add: #all.	[aStream atEnd]		whileFalse: 			[| line |			line := (aStream upTo: Character cr) readStream.			styleName := (line upTo: $:) asSymbol.			[line atEnd not and: [line peek isSeparator]] whileTrue: [line next].			family := line upTo: $-.			style := (line upTo: $-) asSymbol.			pixelSize := (line upTo: $;) asNumber.			[line atEnd not and: [line peek isSeparator]] whileTrue: [line next].			attributes := Set withAll: self mandatoryAttributes.			((line upTo: Character cr)				tokensBasedOn: $ )				do: 					[:each | 					| a |					a := each asSymbol.					(knownAttributes includes: a) ifTrue: [attributes add: a]].			(Font				new: family				style: style				pixelSize: pixelSize)				installAs: styleName withAttributes: attributes]</body><body package="Aragon.Widgets">readStylesFromFile: aFilename 	"TextStyle readStylesFrom: 'TextStyles.stx'"	| aStream |	aStream := aFilename asFilename readStream.	[self readStylesFrom: aStream]		valueNowOrOnUnwindDo: [aStream close]</body><body package="Aragon.Widgets">storeStylesIn: aFilename 	"TextStyle storeStylesIn: 'TextStyles.stx'"	| aStream |	aStream := aFilename asFilename writeStream.	[self storeStylesOn: aStream]		valueNowOrOnUnwindDo: [aStream close]</body><body package="Aragon.Widgets">storeStylesOn: aStream	UserTextStyles keys asSortedCollection		 do:			 [:aKey || ts font | 			ts := self named: aKey.			font := ts font.			aStream nextPutAll: aKey; nextPut: $:; tab.			aStream nextPutAll: font family; nextPut: $-.			aStream nextPutAll: font style; nextPut: $-.			aStream nextPutAll: font pixelSize printString; nextPut: $;; tab.			ts font attributes keys do: [:each | (self mandatoryAttributes includes: each) ifFalse: [aStream nextPutAll: each; space]].			aStream cr]</body></methods><methods><class-id>Aragon.TextStyle class</class-id> <category>class initialization</category><body package="Aragon.Widgets">initialize	"self initialize"	FontAttributes := IdentityDictionary new 		at: #serif put: [:query | query serif: true];		at: #sansSerif put: [:query | query serif: false];		at: #normal put: [:query | query boldness: 0.5; italic: false];		at: #bold put: [:query | query boldness: 0.7];		at: #italic put: [:query | query italic: true];		at: #underline put: [:query | query underline: true];		at: #strikeout put: [:query | query strikeout: true];		"Those are dummies:"		at: #small put: [:query :value :fontPolicy | query];		at: #large put: [:query :value :fontPolicy | query];		at: #color put: [:query :color | query color: color];		at: #family put: [:query :family | query family: family];	yourself.	UserTextStyles := IdentityDictionary new		at: #'System.Default'	put: (TextAttributes default characterAttributes) asFont asTextstyle; 		at: #'System.Menu'	put: (LookPreferences widgetPolicy lookPolicyClass systemTextStyle characterAttributes) asFont asTextstyle; 		at: #'System.Widget'	put: (LookPreferences widgetPolicy lookPolicyClass systemWidgetTextStyle characterAttributes) asFont asTextstyle; 	yourself.</body><body package="Aragon.Widgets">obsolete	super obsolete. 	self uninstall</body><body package="Aragon.Widgets">uninstall	self allInstances do: [:each | each become: each asTextAttributes]</body></methods><methods><class-id>Aragon.NewColumnResizeTracker</class-id> <category>tracking</category><body package="Aragon.Widgets">finishSelectionFor: aPoint	| view |	(view := controller view) computeWidth.	view container container container invalidate.	view changed: #columnResize with: index.	super finishSelectionFor: aPoint.</body><body package="Aragon.Widgets">setUpFor: anEvent	index := controller trackingEdge.	left := (controller view columns at: index) labelVisual bounds left.	^super setUpFor: anEvent</body><body package="Aragon.Widgets">trackSelectionFor: aPoint	Aragon.NewDataSetController.ColumnResizeCursor show.	controller view resizeColumnAt: index width: aPoint x - left.</body></methods><methods><class-id>Aragon.EnhancedActionButtonView</class-id> <category>displaying</category><body package="Aragon.Widgets">displayBorderOn: aGraphicsContext in: aRectangle 	^self getBorder		displayOn: aGraphicsContext		forDisplayBox: aRectangle		using: self</body><body package="Aragon.Widgets">displayDefaultOn: aGraphicsContext in: aRectangle	"Display the receiver according to 	the current state of the model."	| box |	aGraphicsContext displayRectangle: aRectangle.	box := aRectangle insetBy: 2.	self displayBackgroundOn: aGraphicsContext in: box.	self displayNormalOn: aGraphicsContext in: box.</body><body package="Aragon.Widgets">displayLabelOn: aGraphicsContext in: aRectangle 	"Display the receiver according to the current state of the model."	| img imb lab |	(img := self image) isNil &amp; label isNil ifTrue: [^self].	self setPaintOn: aGraphicsContext.	img isNil ifTrue: [^self displayVisual: label on: aGraphicsContext at: aRectangle center - (label bounds extent // 2)].	label isNil ifTrue: [^img displayOn: aGraphicsContext at: aRectangle center - (img bounds extent // 2)].	imb := img bounds.	lab := label bounds.	labelPos == #above		ifTrue:			[img displayOn: aGraphicsContext at: aRectangle center - (imb width @ (imb height - lab height) // 2).			self displayVisual: label on: aGraphicsContext at: aRectangle center - (lab width @ (lab height + imb height) // 2).			^self].	labelPos == #left		ifTrue:			[img displayOn: aGraphicsContext at: aRectangle center - ((imb width - lab width) @ imb height // 2).			self displayVisual: label on: aGraphicsContext at: aRectangle center - ((lab width + imb width) @ lab height // 2).			^self].	labelPos == #right		ifTrue:			[img displayOn: aGraphicsContext at: aRectangle center - ((imb width + lab width) @ imb height // 2).			self displayVisual: label on: aGraphicsContext at: aRectangle center - ((lab width - imb width) @ lab height // 2).			^self].	"If we reach this point then we'll use the default label position #below"	self displayVisual: img on: aGraphicsContext at: aRectangle center - (imb width @ (imb height - 2 + lab height) // 2).	self displayVisual: label on: aGraphicsContext at: aRectangle center - (lab width @ (lab height - imb height) // 2).	^self.</body><body package="Aragon.Widgets">displayNormalOn: aGraphicsContext in: aRectangle 	"Display the receiver according to 	the current state of the model."	self hasBorder		ifTrue: 			[| border |			self displayUndecoratedOn: aGraphicsContext in: aRectangle.			border := self displayBorderOn: aGraphicsContext in: aRectangle.			self hasFocus				ifTrue: 					[| box |					aGraphicsContext paint: self traversalHiliteColor.					box := (border insetDisplayBoxFor: aRectangle) insetBy: 2.					aGraphicsContext displayInteriorRectangularBorder: box]]		ifFalse: [self displayUndecoratedOn: aGraphicsContext in: aRectangle]</body><body package="Aragon.Widgets">displayOn: aGraphicsContext	self isDefault		ifTrue: [self displayDefaultOn: aGraphicsContext in: self bounds]		ifFalse: [self displayNormalOn: aGraphicsContext in: self bounds]</body><body package="Aragon.Widgets">displayUndecoratedOn: aGraphicsContext in: aRectangle 	"Display the receiver according to the current state of the model."	(self isSelected or: [self isInTransition])		ifTrue: 			[aGraphicsContext paint: self selectionBackgroundColor.			aGraphicsContext displayRectangle: aRectangle]		ifFalse: [self displayBackgroundIfNeededOn: aGraphicsContext in: aRectangle].	self displayLabelOn: aGraphicsContext in: aRectangle</body><body package="Aragon.Widgets">displayVisual: v on: aGraphicsContext at: aPoint 	aGraphicsContext paint: self foregroundColor.	v displayOn: aGraphicsContext at: aPoint</body></methods><methods><class-id>Aragon.EnhancedActionButtonView</class-id> <category>accessing</category><body package="Aragon.Widgets">disabledImage	^disabledImage</body><body package="Aragon.Widgets">disabledImage: anImage	disabledImage := anImage</body><body package="Aragon.Widgets">enabledImage	^enabledImage</body><body package="Aragon.Widgets">enabledImage: anImage	enabledImage := anImage</body><body package="Aragon.Widgets">image	^(self isEnabled or: [disabledImage isNil])		ifTrue: [enabledImage]		ifFalse: [disabledImage]</body><body package="Aragon.Widgets">labelPos		^labelPos</body><body package="Aragon.Widgets">labelPos: aSymbol	"aSymbol has to be one of: #below, #above, #left, #right"		labelPos := aSymbol</body></methods><methods><class-id>Aragon.EnhancedActionButtonView</class-id> <category>private</category><body package="Aragon.Widgets">getBorder	"Answer the correct image to show for the receiver taking into account	transition and selection."	^self isInTransition		ifTrue:			[self isSelected				ifTrue: [self raisedBorder]				ifFalse: [self insetBorder]]		ifFalse:			[self isSelected				ifTrue: [self insetBorder]				ifFalse: [self raisedBorder]]</body><body package="Aragon.Widgets">insetBorder	^self topComponent model builder policy insetBorder"	^NSBorder inset"</body><body package="Aragon.Widgets">raisedBorder	^self topComponent model builder policy raisedBorder"	^NSBorder raised"</body></methods><methods><class-id>Aragon.EnhancedActionButtonView</class-id> <category>bounds accessing</category><body package="Aragon.Widgets">preferredBounds	"Compute the preferredBounds for the receiver"	| box |	box := self preferredBoundsWithoutBorder.	^(self hasBorder		ifTrue: [self getBorder displayBoxFor: box]		ifFalse: [box]) expandedBy: 2</body><body package="Aragon.Widgets">preferredBoundsWithoutBorder	"Compute the preferredBounds ignoring a possibly needed border for the receiver"	| img |	(img := self image) isNil &amp; label isNil ifTrue: [^0@0 extent: 0@0].	img isNil ifTrue: [^label bounds expandedBy: 2@0].	label isNil ifTrue: [^img bounds].	^0@0 extent: ((labelPos == #left) | (labelPos == #right)		ifTrue: [(label bounds width + img bounds width)@(label bounds height max: img bounds height)]		ifFalse: [(label bounds width max: img bounds width)@(label bounds height + img bounds height)]).</body></methods><methods><class-id>Aragon.EmbeddedTreeController</class-id> <category>forwarding</category><body package="Aragon.Widgets">doSelectDownAt: aPoint 	(view pointIsButton: aPoint)		ifTrue: [self toggleExpandAt: (view elementIndexFor: aPoint)]		ifFalse: [^false].	^true</body><body package="Aragon.Widgets">redButtonPressedEvent: event"	keyboardProcessor notNil ifTrue:		[(keyboardProcessor requestActivationFor: self halt) ifFalse:			[^self halt ]]."	self selectEvent: event</body><body package="Aragon.Widgets">toggleAt: index 	view dataSetView controller toggleAt: index</body><body package="Aragon.Widgets">toggleAt: index withEvent: event 	view dataSetView controller toggleAt: index withEvent: event</body><body package="Aragon.Widgets">toggleTargetWithEvent: event	view dataSetView controller toggleTargetWithEvent: event</body></methods><methods><class-id>Aragon.EnhancedLabelSpec</class-id> <category>private</category><body package="Aragon.Widgets">dispatchTo: policy with: builder	policy enhancedLabel: self into: builder</body></methods><methods><class-id>Aragon.EnhancedLabelSpec class</class-id> <category>class initialization</category><body package="Aragon.Widgets">initialize	self installOnPalette</body><body package="Aragon.Widgets">shouldBeOnPalette	^true</body></methods><methods><class-id>Aragon.EnhancedLabelSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteIconImage	"Answer an image to reperesent spec on the palette"	paletteIcon isNil ifTrue: [paletteIcon := Array with: (OpaqueImage figure: (CachedImage on: self paletteImage)						shape: (CachedImage on: self paletteMonoIcon))					with: (CachedImage on: self paletteMonoIcon)].	^paletteIcon at: (Screen default colorDepth == 1			ifTrue: [2]			ifFalse: [1])</body></methods><methods><class-id>Aragon.EnhancedLabelSpec class</class-id> <category>private-interface building</category><body package="Aragon.Widgets">componentName	"Identification of component"	^'Enh. Label'</body><body package="Aragon.Widgets">specGenerationBlock	^[:ctrlr :point |		(self			label: 'Multi-line Label' copy			layout: (ctrlr gridPoint: point))]</body></methods><methods><class-id>Aragon.EmbeddedTreeView</class-id> <category>forwarding</category><body package="Aragon.Widgets">dataSetView	^dataSetView</body><body package="Aragon.Widgets">defaultControllerClass	^EmbeddedTreeController</body><body package="Aragon.Widgets">isSelected: anIndex	^self dataSetView isSelected: anIndex</body><body package="Aragon.Widgets">lineGrid	^dataSetView lineGrid</body><body package="Aragon.Widgets">retractAllSelections	^self dataSetView retractAllSelections</body><body package="Aragon.Widgets">retractSelectionIndex: anIndex	^self dataSetView retractSelectionIndex: anIndex</body><body package="Aragon.Widgets">selectionIndex	^self dataSetView selectionIndex</body><body package="Aragon.Widgets">selectionIndexes	^self dataSetView selectionIndexes</body><body package="Aragon.Widgets">selections: aSet	^self dataSetView selections: aSet</body><body package="Aragon.Widgets">setSelectionIndex: anIndex	^self dataSetView setSelectionIndex: anIndex</body><body package="Aragon.Widgets">setSelections: aCollection	^self dataSetView setSelections: aCollection</body><body package="Aragon.Widgets">setValidTargetIndex: anIndex	self dataSetView setValidTargetIndex: anIndex.	targetIndex := dataSetView targetIndex</body><body package="Aragon.Widgets">targetIndex	^self dataSetView targetIndex</body><body package="Aragon.Widgets">targetIndex: anIndex	self dataSetView targetIndex: anIndex.	targetIndex := dataSetView targetIndex</body><body package="Aragon.Widgets">useSelectionIndex: anIndex	^self dataSetView useSelectionIndex: anIndex</body><body package="Aragon.Widgets">useSingleSelectionIndex: anIndex	^self dataSetView useSingleSelectionIndex: anIndex</body><body package="Aragon.Widgets">useSweepSelectionIndex: anIndex	^self dataSetView useSweepSelectionIndex: anIndex</body><body package="Aragon.Widgets">useTargetIndex: anIndex	self dataSetView useTargetIndex: anIndex.	targetIndex := dataSetView targetIndex</body></methods><methods><class-id>Aragon.EmbeddedTreeView</class-id> <category>displaying</category><body package="Aragon.Widgets">display: aValue in: box on: aGraphicsContext</body><body package="Aragon.Widgets">displayVisualsOn: aGraphicsContext 	"Display the receiver's content on aGraphicsContext."	| rect i bounds scanner style |	self setForegroundPaintOn: aGraphicsContext.	scanner := self displayScannerFor: aGraphicsContext.	rect := aGraphicsContext clippingBounds.	bounds := self bounds.	style := self textStyle.	i := 0.	sequence		nodesDo: 			[:each :indent || elementBounds |  i := i+1.			elementBounds := self boundsOfElementIndex: i inBounds: bounds.			elementBounds top &gt; rect bottom ifTrue: [^self].			(rect intersects: elementBounds)				ifTrue: 					[| str oldPaint |					str := each displayString.					oldPaint := nil.					((self isSelected: i) and: [dataSetView controller isBrowsing and: [self class useStandardHiliting or: [self hasFocus]]])						ifTrue: 							[oldPaint := aGraphicsContext paint.							aGraphicsContext paint: self selectionForegroundColor].					scanner						displayLine: (1 to: str size)						inText: str						left: elementBounds left + leftOffset + (indent * self offsetForIndent)						right: elementBounds right		top: elementBounds center y - (style lineGrid // 2)"		top: elementBounds top"						on: aGraphicsContext.					oldPaint == nil ifFalse: [aGraphicsContext paint: oldPaint]]]	indent: (linesAtRoot ifTrue: [1] ifFalse: [0])</body></methods><methods><class-id>Aragon.EmbeddedTreeView</class-id> <category>updating</category><body package="Aragon.Widgets">update: anAspect with: anArg from: anObject</body></methods><methods><class-id>Aragon.EmbeddedTreeView</class-id> <category>initialize-release</category><body package="Aragon.Widgets">dataSetView: ndsView 	dataSetView := ndsView.	ndsView model notNil ifTrue: [self model: ndsView model].	self container: ((BoundedWrapper on: self at: ndsView treeViewOrigin)			container: ndsView).	state colors: nil; isOpaque: false.</body></methods><methods><class-id>Aragon.Font</class-id> <category>converting</category><body package="Aragon.Widgets">asCharacterAttributes		| answer |	answer := CharacterAttributes new.	(1 to: CharacterAttributes allInstVarNames size) do: [:i | answer instVarAt: i put: (self instVarAt: i)].	^answer</body><body package="Aragon.Widgets">asFont	^self</body><body package="Aragon.Widgets">asTextstyle	^TextStyle newOnFont: self</body></methods><methods><class-id>Aragon.Font</class-id> <category>printing</category><body package="Aragon.Widgets">printOn: aStream	super printOn: aStream.	aStream nextPut: $:; nextPut: $ .	self encoded printOn: aStream.</body><body package="Aragon.Widgets">storeOn: aStream	aStream nextPutAll: '(Font new: #(', self family printString, ' ', self style, ' ', self pixelSize printString, '))'"	aStream nextPutAll: '(Font new: ', self encoded printString, ')'"</body></methods><methods><class-id>Aragon.Font</class-id> <category>accessing</category><body package="Aragon.Widgets">boldness	^defaultQuery boldness</body><body package="Aragon.Widgets">defaultQuery	^defaultQuery</body><body package="Aragon.Widgets">family	| answer |	answer := defaultQuery family.	^answer notNil ifTrue: [answer first]</body><body package="Aragon.Widgets">fontAt: aStyle 	"Answer a FontDescription corresponding to the style for the screen's default font policy"	^self fontAt: aStyle for: Screen default defaultFontPolicy</body><body package="Aragon.Widgets">italic	^defaultQuery italic</body><body package="Aragon.Widgets">pixelSize	^defaultQuery pixelSize</body><body package="Aragon.Widgets">style 	defaultQuery boldness &gt; 0.5 &amp; defaultQuery italic	ifTrue: [^#boldItalic]	ifFalse: [	defaultQuery boldness &gt; 0.5						ifTrue: [^#bold]		ifFalse: [	defaultQuery italic								ifTrue: [^#italic]		ifFalse: [	^#regular]]]</body></methods><methods><class-id>Aragon.Font</class-id> <category>installing</category><body package="Aragon.Widgets">installAs: aStylename 	"This is just for convenience:"		self installAs: aStylename withAttributes: #all</body><body package="Aragon.Widgets">installAs: aStylename withAttributes: anArray	"This is just for convenience:"		(TextStyle newOnFont: self withAttributes: anArray) installAs: aStylename</body></methods><methods><class-id>Aragon.Font</class-id> <category>encoding</category><body package="Aragon.Widgets">asFontDescription	^FontDescription new family: self family; boldness: self boldness; italic: self italic; pixelSize: self pixelSize</body><body package="Aragon.Widgets">encoded	^Array with: self family with: self style with: self pixelSize</body></methods><methods><class-id>Aragon.Font class</class-id> <category>class initialization</category><body package="Aragon.Widgets">initialize	"self initialize"	Styles := Dictionary new 		at: #regular		put: [FontDescription new boldness: 0.4; italic: false]; 		at: #bold			put: [FontDescription new boldness: 0.7; italic: false]; 		at: #italic		put: [FontDescription new boldness: 0.4; italic: true]; 		at: #boldItalic	put: [FontDescription new boldness: 0.7; italic: true]; 		at: #standard	put: [FontDescription new boldness: 0.4; italic: false]; 		at: #normal		put: [FontDescription new boldness: 0.4; italic: false]; 	yourself.</body><body package="Aragon.Widgets">obsolete	super obsolete. 	self uninstall</body><body package="Aragon.Widgets">uninstall	self allInstances do: [:each | each become: each asCharacterAttributes]</body></methods><methods><class-id>Aragon.Font class</class-id> <category>instance creation</category><body package="Aragon.Widgets">canDecode: aFontspec 	^aFontspec isKindOf: Array</body><body package="Aragon.Widgets">decode: fontSpec	"Creates a new instance from a font specficating array with the following format:		#(Familyname style PixelSize)	where style  is one of the following symbols:		standard		bold		italic		boldItalic"	^self new: (fontSpec at: 1) style:  (fontSpec at: 2) pixelSize:  (fontSpec at: 3).</body><body package="Aragon.Widgets">new: aFontspec 	^(self canDecode: aFontspec)		ifFalse: [self new: aFontspec style: #regular pixelSize: 16]		ifTrue: [self decode: aFontspec]</body><body package="Aragon.Widgets">new: fontFamily style: fontStyle 	^self new: fontFamily style: fontStyle pixelSize: 16</body><body package="Aragon.Widgets">new: fontFamily style: fontStyle pixelSize: fontSize 	^self new setDefaultQuery: (((Styles at: fontStyle) value) family: (fontFamily isNil ifFalse: [Array with: fontFamily with: fontFamily , '*']); pixelSize: fontSize)</body></methods><methods><class-id>Aragon.Font class</class-id> <category>constants</category><body package="Aragon.Widgets">familyNames	"Return a set with all the distinct font family names from the deffault font policy"	^(Screen default listFontNames collect: [:each | each copyUpTo: $~]) asSet</body><body package="Aragon.Widgets">styleNames	^Styles keys</body></methods><methods><class-id>Aragon.Font class</class-id> <category>installing</category><body package="Aragon.Widgets">installedAs: aStylename	^(TextStyle named: aStylename ifAbsent: [TextStyle named: #Default]) font.</body><body package="Aragon.Widgets">installedAs: aStylename ifAbsent: aBlock	^(TextStyle named: aStylename ifAbsent: aBlock) font.</body></methods><methods><class-id>Aragon.MultipleParentTreeAdaptor</class-id> <category>modifying</category><body package="Aragon.Widgets">add: aNodeOrAnObject asChildOf: parent 	| aNode |	aNode := self treeNodeFor: aNodeOrAnObject.	(self allIndexesAndNodesFor: parent)		do: [:each | self privateAdd: aNode copy asChildOf: each value at: each key]</body><body package="Aragon.Widgets">addFirst: aNodeOrAnObject asChildOf: parent 	| aNode |	aNode := self treeNodeFor: aNodeOrAnObject.	(self allIndexesAndNodesFor: parent)		do: [:each | self privateAddFirst: aNode copy asChildOf: each value at: each key]</body><body package="Aragon.Widgets">remove: aNodeOrAnObject fromParent: parent 		^self remove: aNodeOrAnObject fromParent: parent ifAbsent: [self notFoundError]</body><body package="Aragon.Widgets">remove: aNodeOrAnObject fromParent: parent ifAbsent: aBlock 	| n |	n := 0.	(self allIndexesAndNodesFor: aNodeOrAnObject ifNone: [^aBlock value])		do: [:each | (parent isTreeNode				ifTrue: [each value parent == parent]				ifFalse: [each value parent = parent])				ifTrue: 					[self privateRemove: each value at: (each key - n max: 0).					each key &gt; 0 ifTrue: [n := n + 1]]]</body><body package="Aragon.Widgets">remove: aNodeOrAnObject ifAbsent: aBlock 	| n |	n := 0.	(self allIndexesAndNodesFor: aNodeOrAnObject ifNone: [^aBlock value])		do: 			[:each | 			self privateRemove: each value at: ((each key - n) max: 0).			each key &gt; 0 ifTrue: [n := n + 1]]</body><body package="Aragon.Widgets">removeFromParent: aNode 		^self removeFromParent: aNode ifAbsent: [self notFoundError]</body><body package="Aragon.Widgets">removeFromParent: aNode ifAbsent: aBlock 	^aNode parent ~~ nil 		ifTrue: [self remove: aNode subject fromParent: aNode parent subject ifAbsent: aBlock]</body></methods><methods><class-id>Aragon.MultipleParentTreeAdaptor</class-id> <category>accessing</category><body package="Aragon.Widgets">allIndexesAndNodesFor: aNodeOrAnObject	^self allIndexesAndNodesFor: aNodeOrAnObject ifNone: [self notFoundError]</body><body package="Aragon.Widgets">allIndexesAndNodesFor: aNodeOrAnObject ifNone: aBlock	| i answer |	aNodeOrAnObject isTreeNode 		ifTrue: [^Array with: (self indexAndNodeFor: aNodeOrAnObject ifNone: aBlock)].	answer := OrderedCollection new.	i := 0.	self		nodesDo: 			[:each | 			i := i + 1.			each = aNodeOrAnObject ifTrue: [answer add: i -&gt; each].			"In order to also detect nodes from collapsed branches. We have to look 			inside these branches without counting the nodes."			(each isCollapsed and: [each definitelyHasChildren])				ifTrue: [each children do: [:child | self 							nodesDoAll: [:invisible | invisible = aNodeOrAnObject 								ifTrue: [answer add: 0 -&gt; invisible]]							startWith: child]]].	^answer isEmpty ifTrue: [aBlock value] ifFalse: [answer]</body><body package="Aragon.Widgets">allIndexesOf: aNodeOrAnObject	"Answer the index of the first occurrence of 	anElement within the receiver. If the receiver does 	not contain anElement, answer the result of evaluating the exceptionBlock."	| answer index |	aNodeOrAnObject isTreeNode 		ifTrue: [^Array with: (self indexOf: aNodeOrAnObject)].	index := 0.	answer := OrderedCollection new.	self		nodesDo: 			[:node | 			index := index + 1.			node = aNodeOrAnObject ifTrue: [answer add: index]].	^answer</body><body package="Aragon.Widgets">allNodesFor: aNodeOrAnObject	"Detect the node which's subject is aNodeOrAnObject"	^self allNodesFor: aNodeOrAnObject ifNone: [self notFoundError]</body><body package="Aragon.Widgets">allNodesFor: aNodeOrAnObject ifNone: aBlock 	^aNodeOrAnObject isTreeNode		ifTrue: [Array with: aNodeOrAnObject]		ifFalse: 			[| answer |			answer := OrderedCollection new.			self nodesDoAll: [:node | node = aNodeOrAnObject ifTrue: [answer add: node]].			answer isEmpty ifTrue: [aBlock value] ifFalse: [answer]]</body></methods><methods><class-id>Aragon.MultipleParentTreeAdaptor</class-id> <category>expand-collapse</category><body package="Aragon.Widgets">collapse: aNodeOrAnObject 	(self allIndexesAndNodesFor: aNodeOrAnObject)		do: [:each | self privateCollapse: each value at: each key]</body><body package="Aragon.Widgets">collapseSubtree: aNodeOrAnObject 	(self allIndexesAndNodesFor: aNodeOrAnObject)		do: [:each | self privateCollapseSubtree: each value at: each key]</body><body package="Aragon.Widgets">expand: aNodeOrAnObject 	(self allIndexesAndNodesFor: aNodeOrAnObject)		do: [:each | self privateExpand: each value at: each key]</body><body package="Aragon.Widgets">expandSubtree: aNodeOrAnObject 	(self allIndexesAndNodesFor: aNodeOrAnObject)		do: [:each | self privateExpandSubtree: each value at: each key]</body></methods><methods><class-id>Aragon.MultipleParentTreeAdaptor</class-id> <category>invalidating</category><body package="Aragon.Widgets">invalidate: aNodeOrAnObject 	(self allNodesFor: aNodeOrAnObject) do: [:each | super invalidate: each]</body><body package="Aragon.Widgets">invalidateAndReExpand: aNodeOrAnObject	self doWithoutDependents:		[(self allNodesFor: aNodeOrAnObject) do: [:each | super invalidateAndReExpand: each]].	self changed: #value</body></methods><methods><class-id>Aragon.GaugeSpec</class-id> <category>accessing</category><body package="Aragon.Widgets">isDecorated	^self decorationType == #bordered		ifTrue: [true]		ifFalse: [false]</body><body package="Aragon.Widgets">isDecorated: aBoolean	self decorationType: (aBoolean 		ifTrue: [#bordered]		ifFalse: [#none])</body><body package="Aragon.Widgets">isProgressBar	^isProgressBar == true</body><body package="Aragon.Widgets">isProgressBar: aBoolean	isProgressBar := aBoolean ifTrue: [true]</body><body package="Aragon.Widgets">style	^style isNil ifTrue: [#discrete] ifFalse: [style]</body><body package="Aragon.Widgets">style: aSymbol	^style := aSymbol</body></methods><methods><class-id>Aragon.GaugeSpec</class-id> <category>private</category><body package="Aragon.Widgets">dispatchTo: policy with: builder	| m view |	m := self modelInBuilder: builder.	view := GaugeView model: m.	view widgetState hasBorder: self isDecorated.	view range: self rangeMap.	view orientation: self orientation.	view style: self style.	view canShrink: self isProgressBar not.	view widgetState isEnabled: self initiallyEnabled.	builder isEditing 		ifTrue: [m value: (view range inverseMap: 0.5)]		ifFalse: [view widgetState isVisible: self initiallyVisible].	builder component: view.	policy setDispatcherOf: view fromSpec: self builder: builder.	builder wrapWith: policy boundedWrapperClass new.	builder applyLayout: self layout.	builder wrapWith: (policy simpleWidgetWrapperOn: builder spec: self).</body></methods><methods><class-id>Aragon.GaugeSpec class</class-id> <category>private-interface building</category><body package="Aragon.Widgets">addBindingsTo: env for: inst channel: aChannel	super addBindingsTo: env for: inst channel: aChannel.	env at: #isDecorated put: (self adapt: inst forAspect: #isDecorated channel: aChannel).	env at: #style put: (self adapt: inst forAspect: #style channel: aChannel).	env at: #isProgressBar put: (self adapt: inst forAspect: #isProgressBar channel: aChannel).</body><body package="Aragon.Widgets">componentName	"Identification of component"	^'Gauge'</body><body package="Aragon.Widgets">placementExtentBlock	^[:bldr | 144 @ 14]</body><body package="Aragon.Widgets">slices	^#(		(Basics basicsEditSpec)		(Notification notificationEditSpec nil callbacks) 		(Color propSpec ColorToolModel) 		(Position propSpec PositionToolModel)	)</body><body package="Aragon.Widgets">specGenerationBlock	^[:ctrlr :point | GaugeSpec		model: nil		layout: ((ctrlr gridPoint: point)				extent: (ctrlr currentMode value class placementExtentFor: GaugeSpec inBuilder: ctrlr builder))		properties: (Array with: #horizontal)]</body></methods><methods><class-id>Aragon.GaugeSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteIconImage	"Answer an image to reperesent spec on the palette"	paletteIcon isNil ifTrue: [paletteIcon := Array with: (OpaqueImage figure: (CachedImage on: self paletteImage)						shape: (CachedImage on: self paletteMonoIcon))					with: (CachedImage on: self paletteMonoIcon)].	^paletteIcon at: (Screen default colorDepth == 1			ifTrue: [2]			ifFalse: [1])</body></methods><methods><class-id>Aragon.GaugeSpec class</class-id> <category>class initialization</category><body package="Aragon.Widgets">initialize	self installOnPalette</body><body package="Aragon.Widgets">shouldBeOnPalette	^true</body></methods><methods><class-id>Aragon.NewDataSetController</class-id> <category>event driven</category><body package="Aragon.Widgets">doubleClickEvent: event	(view labelAreaBounds containsPoint: (self sensor mousePointForEvent: event))		ifFalse: [super doubleClickEvent: event]</body><body package="Aragon.Widgets">handlerForMouseEvent: aMouseEvent 	| obj |	^(editor notNil and: [(obj := editor handlerForMouseEvent: aMouseEvent) notNil])		ifTrue: [obj]		ifFalse: [super handlerForMouseEvent: aMouseEvent]</body><body package="Aragon.Widgets">isDoubleClickable	^true</body><body package="Aragon.Widgets">mouseMovedEvent: event 	| pt |	pt := self sensor mousePointForEvent: event.	self isOnEdge: ((view labelAreaBounds containsPoint: pt) ifTrue: [self indexOfLabelWithEdgeAt: pt])</body><body package="Aragon.Widgets">selectUpAt: p withEvent: event 	^self selectUpAt: p</body><body package="Aragon.Widgets">toggleAt: index withEvent: anEvent 	^self toggleAt: index</body></methods><methods><class-id>Aragon.NewDataSetController</class-id> <category>editing</category><body package="Aragon.Widgets">abortEditing	self isEditing		ifTrue: 			[(editor widget isKindOf: CheckButtonView) ifFalse: [editor widget controller cancel].			self stopEditing].</body><body package="Aragon.Widgets">canEditAt: aCell 	^(view columns at: aCell x) canEdit</body><body package="Aragon.Widgets">dropEdit	self dropEditInvalidate: true</body><body package="Aragon.Widgets">dropEditInvalidate: invalidate 	editor == nil		ifFalse: 			[| ed |			ed := editor.			editor := nil.			invalidate ifTrue: [view					invalidateRectangle: ed container bounds					repairNow: false					forComponent: ed].			self unhookEditor: ed.			(ed widget controller) focusOut; deactivate.			ed release]</body><body package="Aragon.Widgets">editAt: aCell	^self editAt: aCell fromSelectUp: false</body><body package="Aragon.Widgets">editAt: aCell fromSelectUp: aBoolean	"Prepare and activate the editor widget for aCell. This is used both, when starting edit mode and to 	move the editor to another cell. The implementation first tries to drop the current editor. Only if this 	succeeds (dropEdit = true), we proceed by moving the view's selection index to the selected cell's 	row and building the editor. 		On certain occassions within this method, it may happen that the application turns off editing within a 	selection changed notification handling. We'll have to check for this multiple, and abort further 	processing of the method. (self isEditing ifFalse: [^self])"	| cd checkForCheckBox |	checkForCheckBox := aBoolean.	(aCell x == 1 and: [view hasRowSelectors]) ifTrue: [aCell x: editCell x. checkForCheckBox := false].	(aCell x == 0 or: [(cd := view columns at: aCell x) canEdit not]) ifTrue: [editCell y: aCell y. ^view useSingleSelectionIndex: aCell y].	self dropEdit.	aCell y &gt; 0 ifFalse: [^self].	(view isSelected: aCell y) ifFalse: [self requestValueChange].	self isEditing ifFalse: [^self].	(aCell y &lt;= view numberOfElements or: [view autoAppend]) ifFalse: [Screen default ringBell. ^self editAt: editCell].	editCell := aCell.	view useSelectionIndexForEditing: editCell y.	self isEditing ifFalse: [^self].	editor := self editorFor: cd.	view makeColumnVisible: editCell x.	(checkForCheckBox and: [cd editorSpec class == CheckBoxSpec])		ifTrue: [editor widget controller simulateMousePress].	((cd editorSpec class == NDSInputFieldSpec and: [cd editorSpec isDecorated not]) 	or: [cd editorSpec class == CheckBoxSpec]) 		ifFalse: [editor invalidate].	editor widget controller requestFocusIn		ifTrue:			[self hookUpEditor.			self keyboardProcessor setActive: editor widget controller]		ifFalse: [self keyboardProcessor setActive: self].</body><body package="Aragon.Widgets">editSelectedRow	view useSingleSelectionIndex: view targetIndex.	editCell := 0 @ view targetIndex.	self editAt: self nextEditCell</body><body package="Aragon.Widgets">editorFor: aColumnDescriptor 	| editorWrapper newEditor |	(newEditor := aColumnDescriptor editor) widget model: aColumnDescriptor editModel.	editorWrapper := BoundedWrapper on: newEditor.	editorWrapper container: view.	editorWrapper bounds: (self editorBoundsFor: newEditor atColumn: aColumnDescriptor).	^newEditor</body><body package="Aragon.Widgets">isBrowsing	^mode ~~ #editing</body><body package="Aragon.Widgets">isEditing	^mode == #editing</body><body package="Aragon.Widgets">moveEditorBy: delta	editCell notNil		ifTrue: 			[editCell := editCell + delta.			self repositionEditor]</body><body package="Aragon.Widgets">redButtonPressedEvent: event 	| p |	(view labelAreaBounds containsPoint: (p := self sensor mousePointForEvent: event))		ifTrue:			[| tracker |			tracker := self trackerFor: p.			^tracker notNil ifTrue: [tracker handleEvent: event]].	(view bounds bottom - view topOffsetForDisplay truncateTo: view lineGrid) &gt;= (p y - view topOffsetForDisplay) 			ifFalse: [^self].	super redButtonPressedEvent: event.</body><body package="Aragon.Widgets">repositionEditor	editCell notNil		ifTrue: 			[| editorWrapper |			editorWrapper := editor container.			editorWrapper bounds: (self editorBoundsFor: editor atColumn: (view columns at: editCell x))]</body><body package="Aragon.Widgets">repositionEditorAt: aCell 	editCell notNil		ifTrue: 			[editCell := aCell.			self repositionEditor]</body><body package="Aragon.Widgets">startEditing	self isEditing		ifFalse: 			[mode := #editing.			self view isOpen				ifTrue: 					[view invalidateElementIndex: view targetIndex.					self editSelectedRow]				ifFalse: [editCell := 0 @ 1]]</body><body package="Aragon.Widgets">stopEditing	^self stopEditingAndInvalidate: self view isOpen</body><body package="Aragon.Widgets">stopEditingAndInvalidate: aBoolean 	self isEditing		ifTrue: 			[editor notNil ifTrue: [editor widget controller requestFocusOut				ifFalse: 					[editor invalidate widget controller selectEntireText.					^self]].			self dropEdit.			mode := #browsing.			aBoolean ifTrue: [view invalidateElementIndex: view targetIndex].			view topComponent keyboardProcessor setActive: self.			editCell := nil]</body><body package="Aragon.Widgets">toggleEditing	self isEditing		ifTrue: [self stopEditing]		ifFalse: [self startEditing]</body></methods><methods><class-id>Aragon.NewDataSetController</class-id> <category>private</category><body package="Aragon.Widgets">editCell	^editCell</body><body package="Aragon.Widgets">editor	^editor</body><body package="Aragon.Widgets">editorBoundsFor: anEditor atColumn: aColumnDescriptor 	| box |	box := view boundsOfCellIndex: editCell inBounds: view bounds.	(anEditor widget isKindOf: CheckButtonView)		ifTrue: 			[| center offset |			center := box center.			offset := anEditor widget preferredBounds extent // 2.			box := center - offset corner: center + offset]		ifFalse: 			[box corner: box corner - (1@(view showHorizontalLines ifTrue: [1] ifFalse: [0])).			aColumnDescriptor editorSpec isDecorated 				ifTrue: 					[(anEditor widget isKindOf: InputFieldView) ifTrue: [anEditor widget inset: 5]. 					(anEditor widget isKindOf: ComboBoxInputFieldView) ifTrue: [anEditor widget editor inset: 5]. 					box := box expandedBy: 1@2]				ifFalse:					[(anEditor widget isKindOf: ComboBoxInputFieldView) ifTrue: [anEditor widget editor inset: 6]]].	^box</body><body package="Aragon.Widgets">findCellAt: aPoint 	| columns left |	columns := view columns.	left := view bounds left.	1 to: columns size		do: 			[:i | 			| column xo |			column := columns at: i.			xo := column isFrozen ifTrue: [left] ifFalse: [0].			(column left + xo &lt;= aPoint x and: [aPoint x - xo &lt;= column right])				ifTrue: [^i @ ((view elementIndexFor: aPoint) min: view numberOfElements)]].	^editCell x @ ((view elementIndexFor: aPoint) min: view numberOfElements)</body><body package="Aragon.Widgets">hookUpEditor	"This has been copied from 'DataSetView&gt;&gt;insertFocusInterest':"	| ctrl |	ctrl := self editor widget controller.	ctrl		keyboardHook: [:ev :c | (self processKeyboardEvent: ev) == self ifFalse: [ev]]</body><body package="Aragon.Widgets">nextEditCell	| p |	p := editCell copy.		[p x == view columns size		ifTrue: [p x: 1; y: p y + 1]		ifFalse: [p x: p x + 1].	self canEditAt: p] whileFalse.	^p</body><body package="Aragon.Widgets">prevEditCell	| p |	p := editCell copy.		[p x == 1		ifTrue: [p y &gt; 1				ifTrue: [p x: view columns size; y: p y-1]				ifFalse: [^editCell]]		ifFalse: [p x: p x - 1].	self canEditAt: p] whileFalse.	^p</body><body package="Aragon.Widgets">requestValueChange	"Ask any interested parties if it is ok for the receiver to accept any 	value it is editing."	self editor notNil ifTrue: [self editor widget controller requestFocusOut ifFalse: [^false]].	^super requestValueChange</body><body package="Aragon.Widgets">restartEditing	view isOpen		ifTrue: 			[editCell := 0 @ 1.			self editAt: self nextEditCell]</body><body package="Aragon.Widgets">trackerFor: aPoint 	| index column |	self isOnEdge ifTrue: [^NewColumnResizeTracker on: self].	(index := self indexOfLabelAt: aPoint) isNil ifTrue: [^nil].	column := view columns at: index.	(column isRowSelector or: [column allowsForSorting or: [column canBeDragged]])		ifTrue: [^(NewColumnTracker on: self) index: index].	Screen default ringBell.	^nil</body><body package="Aragon.Widgets">unhookEditor: anEditor</body></methods><methods><class-id>Aragon.NewDataSetController</class-id> <category>column labels</category><body package="Aragon.Widgets">indexOfLabelAt: aPoint 	| columns |	columns := view columns.	1 to: columns size do: [:i | ((columns at: i) labelVisual bounds containsPoint: aPoint) ifTrue: [^i]].	^nil</body><body package="Aragon.Widgets">indexOfLabelWithEdgeAt: aPoint 	| columns i1 |	(columns := view columns) isEmpty ifTrue: [^nil].	i1 := view hasRowSelectors ifTrue: [2] ifFalse: [1].	i1 to: columns size		do: 			[:i | 			| x |			x := (columns at: i) labelVisual bounds right.			x - 4 &lt; aPoint x &amp; (aPoint x &lt; (x + 4)) ifTrue: [^i]].	^nil</body><body package="Aragon.Widgets">isOnEdge	^edge notNil</body><body package="Aragon.Widgets">isOnEdge: anEdge	| same |	same := edge == anEdge.	(edge := anEdge) notNil &amp; same		ifTrue: [ColumnResizeCursor show]		ifFalse: [Cursor normal show]</body><body package="Aragon.Widgets">trackingEdge	^edge</body></methods><methods><class-id>Aragon.NewDataSetController</class-id> <category>polling</category><body package="Aragon.Widgets">controlTerminate	self isOnEdge: nil</body><body package="Aragon.Widgets">doubleClick	(view labelAreaBounds containsPoint: (self sensor cursorPoint))		ifFalse: [super doubleClick]</body><body package="Aragon.Widgets">poll   "Announce that we are iterating through the polling loop."   self view isOpen       ifFalse: ["if the view was closed or the top component is closed"               WindowManager closedWindowSignal                   raiseRequestFrom: self view topComponent controller].   self view topComponent windowManager processNextEvent</body><body package="Aragon.Widgets">selectUpAt: p 	(view bounds containsPoint: p) ifFalse: [^self].	(view labelAreaBounds containsPoint: p) ifTrue: [^self].	self isEditing		ifTrue: 			[self dropEdit.			self isEditing ifTrue: [^self editAt: (self findCellAt: p) fromSelectUp: true]].	super selectUpAt: p</body><body package="Aragon.Widgets">toggleAt: index 	self isEditing		ifTrue: 			[self dropEdit.			self isEditing 				ifTrue: 					["Since it may happen that the application turned off editing within selection changed 					notification handling, we have to check for this again:"					^self editAt: editCell x @ index]].	super toggleAt: index</body></methods><methods><class-id>Aragon.NewDataSetController</class-id> <category>keyboard</category><body package="Aragon.Widgets">processKeyboardEvent: anEvent	(self isEditing and: 			[anEvent keyValue == Character tab or: [anEvent keyValue == Character cr]])		ifTrue: 			[^anEvent hasCtrl				ifTrue: [anEvent]				ifFalse: 					[editor notNil						ifTrue: 							[editor widget controller requestFocusOut ifFalse: [^self].							self isEditing ifFalse: [^self].							editor widget controller deactivate].					self editAt: (anEvent isBackTab								ifTrue: [self prevEditCell]								ifFalse: [self nextEditCell])]].	(self editor isNil		or: [#(#Down #Up #PageUp #PageDown #Tab #Enter) includes: anEvent keyValue])			ifFalse: [^anEvent].	(view hasTreeView and: [#(#Left #Right) includes: anEvent keyValue])		ifTrue: [^view treeView controller processKeyboardEvent: anEvent].	^super processKeyboardEvent: anEvent</body></methods><methods><class-id>Aragon.NewDataSetController</class-id> <category>initialize-release</category><body package="Aragon.Widgets">release	| keyboardProcessor |	keyboardProcessor := self keyboardProcessor.	keyboardProcessor == nil ifFalse:		[keyboardProcessor removeKeyboardReceiver: self].	editor == nil ifFalse:		[editor release.		editor := nil].	super release.</body></methods><methods><class-id>Aragon.NewDataSetController class</class-id> <category>class initialization</category><body package="Aragon.Widgets">initialize	"self initialize"	ColumnResizeCursor := (Cursor			imageArray: #(		2r0000000000000000		2r0000001010000000		2r0000001010000000		2r0000001010000000		2r0000001010000000		2r0001001010010000		2r0011001010011000		2r0111111011111100		2r0011001010011000		2r0001001010010000		2r0000001010000000		2r0000001010000000		2r0000001010000000		2r0000001010000000		2r0000000000000000		2r0000000000000000)			maskArray: #(		2r0000011111000000		2r0000011111000000		2r0000011111000000		2r0000011111000000		2r0001111111110000		2r0011111111111000		2r0111111111111100		2r1111111111111110		2r0111111111111100		2r0011111111111000		2r0001111111110000		2r0000011111000000		2r0000011111000000		2r0000011111000000		2r0000011111000000		2r0000000000000000)	 		hotSpot: 7@7 name: 'Aragon column resize')</body></methods><methods><class-id>Aragon.ToolbarButtonView</class-id> <category>displaying</category><body package="Aragon.Widgets">displayBackgroundIfNeededOn: aGraphicsContext in: aRectangle</body><body package="Aragon.Widgets">displayNormalOn: aGraphicsContext in: aRectangle 	"Display the receiver according to 	the current state of the model."	self displayUndecoratedOn: aGraphicsContext in: aRectangle.	(self isEnabled and: [self hasBorder or: [self hasCursor]])		ifTrue: [self displayBorderOn: aGraphicsContext in: aRectangle]</body><body package="Aragon.Widgets">displayUndecoratedOn: aGraphicsContext in: aRectangle 	"Display the receiver according to the current state of the model."	self displayBackgroundIfNeededOn: aGraphicsContext in: aRectangle.	self displayLabelOn: aGraphicsContext in: aRectangle</body></methods><methods><class-id>Aragon.ToolbarButtonView</class-id> <category>visual properties</category><body package="Aragon.Widgets">selectionBackgroundColor	^self backgroundColor</body><body package="Aragon.Widgets">specificBackgroundColor	^SymbolicPaint background</body></methods><methods><class-id>Aragon.ToolbarButtonView</class-id> <category>private</category><body package="Aragon.Widgets">insetBorder	^BeveledBorder inset1</body><body package="Aragon.Widgets">raisedBorder	^BeveledBorder raised1</body><body package="Aragon.Widgets">redisplayActiveArea	| box |	box := self bounds.	(self isSelected or: [self isInTransition])		ifTrue: [self simpleRedisplayIn: box colorBackgroundIfNeeded: false]		ifFalse: [self simpleRedisplayIn: box colorBackgroundIfNeeded: true]</body><body package="Aragon.Widgets">redisplayForEnabledChange	"Redisplay the receiver because there has been a change in whether its enabled."	(self isOpen and: [self hasBorder not and: [self hasCursor]])		ifTrue: [self redisplayActiveArea]		ifFalse: [super redisplayForEnabledChange]</body><body package="Aragon.Widgets">simpleRedisplayIn: aRectangle colorBackgroundIfNeeded: colorBackground	self invalidate</body></methods><methods><class-id>Aragon.ToolbarButtonView</class-id> <category>controller accessing</category><body package="Aragon.Widgets">defaultControllerClass	"Answer the class of the default controller for the receiver."	^ToolbarButtonController</body><body package="Aragon.Widgets">hasCursor	^hasCursor == true</body><body package="Aragon.Widgets">hasCursor: aBoolean	hasCursor ~~ aBoolean ifTrue: [hasCursor := aBoolean. self redisplayForTransitionChange]</body></methods><methods><class-id>Aragon.ToolbarButtonView</class-id> <category>initialize-release</category><body package="Aragon.Widgets">initializeState	super initializeState.	state hasBorder: false.</body></methods><methods><class-id>Aragon.ToolbarButtonView</class-id> <category>uilayout</category><body package="Aragon.Widgets">maximumExtent		^self preferredExtent</body></methods><methods><class-id>Aragon.ToolbarButtonView</class-id> <category>bounds accessing</category><body package="Aragon.Widgets">preferredExtent	^self preferredBounds extent</body></methods><methods><class-id>Aragon.CardViewLabelsConstructor</class-id> <category>events</category><body package="Aragon.Widgets">setEnablement	(builder componentAt: #labels) isEnabled: (builder aspectAt: #labelSuppliedByApplication) value not.</body></methods><methods><class-id>Aragon.CardViewLabelsConstructor</class-id> <category>interface-opening</category><body package="Aragon.Widgets">postBuildWith: aBuilder 	self setEnablement.	^super postBuildWith: aBuilder</body><body package="Aragon.Widgets">preBuildWith: aBuilder 	aBuilder aspectAt: #labelSuppliedByApplication put: (((AspectAdaptor forAspect: #labelSuppliedByApplication)			subjectChannel: specChannel)			onChangeSend: #setEnablement to: self).	aBuilder aspectAt: #labels put: ((AspectAdaptor forAspect: #labels)			subjectChannel: specChannel).	^super preBuildWith: aBuilder</body></methods><methods><class-id>Aragon.CardViewLabelsConstructor</class-id> <category>initialize</category><body package="Aragon.Widgets">on: aSpecChannel	specChannel := aSpecChannel.	specChannel onChangeSend: #flushFields to: self</body></methods><methods><class-id>Aragon.NewColumnLabelVisual</class-id> <category>accessing</category><body package="Aragon.Widgets">align: aSymbol 	alignment := aSymbol</body><body package="Aragon.Widgets">left: anInteger	bounds left: anInteger</body><body package="Aragon.Widgets">right: anInteger	bounds right: anInteger</body><body package="Aragon.Widgets">sortIndicator: anImage	sortIndicator := anImage.</body></methods><methods><class-id>Aragon.NewColumnLabelVisual</class-id> <category>displaying</category><body package="Aragon.Widgets">displayOn: aGraphicsContext 	| gc box labelExtent labelOrigin |	super displayOn: aGraphicsContext.	label == nil ifTrue: [^self].	(gc := aGraphicsContext copy) paint: self foregroundColor.	box := self bounds insetBy: self inset.	sortIndicator notNil		ifTrue: 			[| sb | 			sb := sortIndicator bounds.			box right: box right - sb width - 4.			sortIndicator displayOn: aGraphicsContext at: box corner - (-4 @ (box height + sb height // 2))].	gc intersectClip: box.	labelExtent := label bounds extent.	labelOrigin := box origin + (0 @ (box height - labelExtent y // 2)).	alignment == #center ifTrue: [labelOrigin x: (box left + (box width - labelExtent x // 2))] ifFalse: [	alignment == #right ifTrue: [labelOrigin x: (box right - labelExtent x)]].	label displayOn: gc at: labelOrigin</body></methods><methods><class-id>Aragon.NewColumnLabelVisual</class-id> <category>bounds accessing</category><body package="Aragon.Widgets">bounds	| top |	(top := container bounds top) == bounds top ifFalse: [bounds moveTo: bounds left @ top].	^super bounds</body></methods><methods><class-id>Aragon.CardView</class-id> <category>accessing</category><body package="Aragon.Widgets">buildPages: aBoolean	buildPages := aBoolean</body><body package="Aragon.Widgets">cachePages: aBoolean	pagesCache := aBoolean ifTrue: [IdentityDictionary new].</body><body package="Aragon.Widgets">getTextStyle	^textStyle</body><body package="Aragon.Widgets">indexOfLabelAt: aPoint 	| x |	x := aPoint x.	(self canScroll and: [x &gt; (self bounds right - (2 * self labelsHeight))]) ifTrue: [^nil].	(self rightOfTabAt: self labels size) &lt; x ifTrue: [^nil].	x := x + (self widths at: startIndex).	startIndex to: widths size - 1 do: [:i | x &lt; (widths at: i) ifTrue: [^i - 1]].	^widths size - 1</body><body package="Aragon.Widgets">label 	^''</body><body package="Aragon.Widgets">labels	^labels</body><body package="Aragon.Widgets">labelsHeight	^labelsHeight isNil		ifTrue: [self computeLabelsHeight]		ifFalse: [labelsHeight]</body><body package="Aragon.Widgets">scrollerButtons	^scrollerButtons</body><body package="Aragon.Widgets">selectionChannel	^selectionChannel</body><body package="Aragon.Widgets">selectionChannel: aValueHolder	selectionChannel removeDependent: self.	selectionChannel := aValueHolder.	selectionChannel addDependent: self.	lastSelection := selectionChannel value.</body><body package="Aragon.Widgets">selectionIndex	| answer |	^(answer := selectionChannel value) == 0		ifTrue: [1]		ifFalse: [answer]</body><body package="Aragon.Widgets">selectionIndex: anInteger	^selectionChannel value: anInteger</body><body package="Aragon.Widgets">sequence	^sequence</body><body package="Aragon.Widgets">sequence: aSequence	"Set the receiver's sequence to be aSequence."	sequence removeDependent: self.	sequence := aSequence.	sequence addDependent: self</body><body package="Aragon.Widgets">setTextStyle: aTextStyle	textStyle := aTextStyle</body><body package="Aragon.Widgets">subCanvas	^subcanvas</body><body package="Aragon.Widgets">subCanvas: aSubCanvas	self subcanvas: aSubCanvas</body><body package="Aragon.Widgets">subcanvas	^subcanvas</body><body package="Aragon.Widgets">subcanvas: aSubCanvas 	| wrapper |	subcanvas notNil ifTrue: [subcanvas container: nil; release].	(subcanvas := aSubCanvas) isNil ifTrue: [^self].	wrapper := BoundedWrapper on: subcanvas in: (LayoutFrame					leftFraction: 0 offset: 2					rightFraction: 1 offset: -2					topFraction: 0 offset: 24					bottomFraction: 1offset: -2).	wrapper container: self</body><body package="Aragon.Widgets">textStyle 	"Answer the style by which the receiver displays its text."	^textStyle == nil		ifTrue:	[TextAttributes defaultNoCopy]		ifFalse:	[textStyle]</body><body package="Aragon.Widgets">widths	^widths isNil		ifTrue: [self computeWidths]		ifFalse: [widths]</body></methods><methods><class-id>Aragon.CardView</class-id> <category>private-visual properties</category><body package="Aragon.Widgets">specificBorderColor	"Answer the widget-specific color to use to paint highlighted edges."	^SymbolicPaint pushButtonBorder</body><body package="Aragon.Widgets">specificHiliteColor	"Answer the widget-specific color to use to paint highlighted edges."	^SymbolicPaint pushButtonHilite</body><body package="Aragon.Widgets">specificShadowColor	"Answer the widget-specific color to use to paint highlighted edges."	^SymbolicPaint pushButtonShadow</body></methods><methods><class-id>Aragon.CardView</class-id> <category>displaying</category><body package="Aragon.Widgets">displayBorderOn: aGraphicsContext 	| box |	box := self bounds copy top: self labelsHeight - 1.	self isOpaque ifTrue: [aGraphicsContext paint: self backgroundColor; displayRectangle: box].	NSBorder raised		displayOn: aGraphicsContext		forDisplayBox: box		using: self.</body><body package="Aragon.Widgets">displayButtonsOn: aGraphicsContext 	| box dx xo |	box := self tabsArea.	dx := (self labelsHeight - 3) min: 21.	xo := 0.	(box := self bounds copy) left: box right - (2 * dx) - xo; bottom: dx.	aGraphicsContext paint: self backgroundColor; displayRectangle: box.	box left: box left + xo; width: dx.	scrollerButtons first container bounds: box; displayOn: aGraphicsContext copy.	box moveBy: dx@0.	scrollerButtons last container bounds: box; displayOn: aGraphicsContext copy.</body><body package="Aragon.Widgets">displayOn: aGraphicsContext 	self installFontOn: aGraphicsContext. 	state hasBorder ifTrue: [self displayBorderOn: aGraphicsContext].	self labelsHeight &gt; aGraphicsContext clippingBounds top		ifTrue: 			[self displayTabsOn: aGraphicsContext.			self canScroll ifTrue: [self displayButtonsOn: aGraphicsContext]].	subcanvas notNil ifTrue: [subcanvas container displayOn: aGraphicsContext]</body><body package="Aragon.Widgets">displaySlantedTabOn: gc at: anIndex inFront: isSelected 	| vertices h lightVertices darkVertices dx x0 x1 xi x2 y0 |	x0 := self widths at: startIndex.	x1 := (widths at: anIndex) - x0.	x2 := (widths at: anIndex + 1) - x0.	xi := self xSlant.	x1 &gt; gc clippingBounds right ifTrue: [^self].	x2 + xi &lt; gc clippingBounds left ifTrue: [^self].	dx := x2 - x1.	h := self labelsHeight.	y0 := 2.	isSelected ifTrue: [y0 := 0] ifFalse: [xi := xi - 1].	lightVertices := List new		add: 0 @ (h-1);		add: xi-4 @ (y0+2);		add: xi @ y0;		add: dx - 4 @ y0;	yourself.	darkVertices := List new		add: 2 @ (y0+1);		add: 4 @ (y0+3);		add: xi+2 @ h-3;		add: xi+4 @ h-2;	yourself.	vertices := lightVertices , (List with: dx-2 @ y0 with: dx+xi-3 @ h).	gc lineWidth: 1; paint: self backgroundColor; displayPolygon: vertices at: (x1 @ 0).	gc paint: self hiliteColor; displayPolyline: lightVertices at: (x1 @ 0).	gc paint: self borderColor; displayPolyline: darkVertices at: (x2-4 @ 0).	(isSelected and: [self hasFocus]) ifTrue: [gc paint: self traversalHiliteColor; displayRectangularBorder: (x1+xi@2 corner: x2-2@h-2)].	gc paint: self foregroundColor.	(self labels at: anIndex) displayOn: gc at: x1 + xi + self insetOfText x @ (y0 + self insetOfText y).	h := h-1.	isSelected ifFalse: [gc paint: self hiliteColor; displayLineFrom: x1 @ h to: x2 + 12 @ h].</body><body package="Aragon.Widgets">displayStraightTabOn: gc at: anIndex inFront: isSelected 	| h lightVertices darkVertices dx x0 x1 x2 blackVertices xi y0 |	x0 := self widths at: startIndex.	x1 := (widths at: anIndex) - x0.	x2 := (widths at: anIndex+1) - x0.	xi := self xSlant // 2.	isSelected 		ifTrue: [x2 := x2+2] 		ifFalse: [x1 := x1+2].	x1 &gt; gc clippingBounds right ifTrue: [^self].	x2 &lt; gc clippingBounds left ifTrue: [^self].	dx := x2 - x1.	h := self labelsHeight.	y0 := isSelected ifTrue: [0] ifFalse: [2].	lightVertices := List new		add: 0 @ (h-1);		add: 0 @ (y0+2);		add: 2 @ y0;		add: dx @ y0;	yourself.	darkVertices := List new		add: dx-1 @ (y0+2);		add: dx-1 @ (h-1);	yourself.	blackVertices := List new		add: dx-1 @ (y0+1);		add: dx @ (y0+2);		add: dx @ (h-1);	yourself.	gc lineWidth: 1; paint: self backgroundColor; displayRectangle: (x1@y0+1 corner: x2@h).	gc paint: self hiliteColor; displayPolyline: lightVertices at: x1@0.	gc paint: self shadowColor; displayPolyline: darkVertices at: x1+1@0.	gc paint: self borderColor; displayPolyline: blackVertices at: x1+1@0.	(isSelected and: [self hasFocus]) ifTrue: [gc paint: self traversalHiliteColor; displayRectangularBorder: (x1+xi@2 corner: x2-2@h-2)].	gc paint: self foregroundColor.	(self labels at: anIndex) displayOn: gc at: x1 + (3*xi//2) + self insetOfText x @ (y0 + self insetOfText y).	h := h-1.	isSelected ifFalse: [gc paint: self hiliteColor; displayLineFrom: x1 @ h to: x2 + 12 @ h].</body><body package="Aragon.Widgets">displayTabOn: gc at: anIndex inFront: isSelected 	TabStyle == #straight		ifTrue: [self displayStraightTabOn: gc at: anIndex inFront: isSelected]		ifFalse: [self displaySlantedTabOn: gc at: anIndex inFront: isSelected]</body><body package="Aragon.Widgets">displayTabsOn: aGraphicsContext 	| selected |	sequence isEmpty ifTrue: [^self].	selected := self selectionIndex.	(self labels size to: startIndex by: -1) 		do: [:i | i == selected ifFalse: [self displayTabOn: aGraphicsContext at: i inFront: false]].	selected &lt; startIndex 		ifFalse: [self displayTabOn: aGraphicsContext at: selected inFront: true]</body><body package="Aragon.Widgets">redisplayFocusChange	sequence isEmpty ifTrue: [^self].	self invalidateTabAt: self selectionIndex</body></methods><methods><class-id>Aragon.CardView</class-id> <category>focus accessing</category><body package="Aragon.Widgets">canScroll	^canScroll</body><body package="Aragon.Widgets">desiresFocus	"Answer whether the receiver can receive keyboard focus in its current state."	^self isVisible and: [self isEnabled]</body><body package="Aragon.Widgets">hasFocus	^state hasKeyboardFocus</body><body package="Aragon.Widgets">hasFocus: aBoolean	state hasKeyboardFocus == aBoolean ifTrue: [^self].	(aBoolean not or: [self desiresFocus]) ifTrue: [		state hasKeyboardFocus: aBoolean.		self redisplayFocusChange]</body><body package="Aragon.Widgets">loseFocus	self hasFocus: false</body><body package="Aragon.Widgets">takeFocus	self hasFocus: true</body></methods><methods><class-id>Aragon.CardView</class-id> <category>control</category><body package="Aragon.Widgets">downcastEvent: aKey with: aParameter from: anInitiator	"This is a message passed down the view structure to all subparts."	subcanvas notNil ifTrue: [subcanvas downcastEvent: aKey with: aParameter from: anInitiator]</body><body package="Aragon.Widgets">downcastLocalEvent: aKey with: aParameter at: aPoint from: anInitiator 	"This is a message passed down the view structure to some single 	part. Answer true if we accepted the event, or false if it should be 	passed on to whatever's behind us."	(subcanvas notNil and: 		[subcanvas downcastLocalEvent: aKey with: aParameter 		at: (aPoint translatedBy: 0@labelsHeight negated) from: anInitiator])			ifTrue: [^true].	^super downcastLocalEvent: aKey with: aParameter at: aPoint from: anInitiator</body><body package="Aragon.Widgets">handlerForMouseEvent: aMouseEvent 	"The receiver is in a control hierarchy and the container is asking 	for an object that wants control. If no control is desired then the 	receiver answers nil. If control is wanted then the receiver answers the 	control object."	subcanvas notNil ifTrue: 		[| obj |		(obj := subcanvas handlerForMouseEvent: aMouseEvent) == nil ifFalse: [^obj]].	self canScroll ifTrue: [scrollerButtons do: 		[:each || obj |		(obj := each handlerForMouseEvent: aMouseEvent) notNil ifTrue: [^obj]]].	^super handlerForMouseEvent: aMouseEvent</body></methods><methods><class-id>Aragon.CardView</class-id> <category>rebuilding</category><body package="Aragon.Widgets">client: appModel	(self useCachedPageFor: self selectionIndex) ifTrue: [^self].	^subcanvas client: appModel</body><body package="Aragon.Widgets">client: appModel spec: aSpec	| builder |	(self useCachedPageFor: self selectionIndex) ifTrue: [^self].	builder := subcanvas client: appModel spec: aSpec.	subcanvas layoutComponentSubtreeIfNeeded.	^builder</body><body package="Aragon.Widgets">client: appModel spec: aSpec builder: aBuilder	(self useCachedPageFor: self selectionIndex) ifTrue: [^self].	^subcanvas client: appModel spec: aSpec builder: aBuilder</body></methods><methods><class-id>Aragon.CardView</class-id> <category>initialize-release</category><body package="Aragon.Widgets">initialize	super initialize.	scrollerButtons := Array with: CardScrollerButton left with: CardScrollerButton right.	scrollerButtons do: [:each | each installOn: self].	scrollerButtons first isEnabled: false.	buildPages := false.	canScroll := false.	startIndex := 1.</body><body package="Aragon.Widgets">release	"Release the receiver's dependency relationships."	super release.	subcanvas == nil ifFalse: [subcanvas release].	selectionChannel removeDependent: self.	sequence removeDependent: self.	pagesCache notNil ifTrue: [pagesCache do: [:each | each key do: [:comp | comp release]]]</body></methods><methods><class-id>Aragon.CardView</class-id> <category>update</category><body package="Aragon.Widgets">update: anAspect with: aParameter from: anObject 	anObject == self sequence		ifTrue: 			[anAspect == #insert: ifTrue: [^self updateInsertTabAt: aParameter].			anAspect == #remove: ifTrue: [^self updateRemoveTabAt: aParameter]].	anAspect == #value		ifTrue: 			[anObject == selectionChannel ifTrue: [^self updateSelectionChannel].			anObject == model ifTrue: [^self updateModel].			^self].	anObject == model value ifTrue: [^self updateLabels].	^super update: anAspect with: aParameter from: anObject</body><body package="Aragon.Widgets">updateInsertTabAt: anIndex	| sel |	sel := self selectionIndex.	anIndex &lt;= sel ifTrue: [selectionChannel setValue: sel+1. lastSelection := sel+1].	self updateLabels</body><body package="Aragon.Widgets">updateLabels"	labels := sequence collect: [:each | (each isKindOf: Association) ifTrue: [each key] ifFalse: [each]]."	labels := sequence collect: [:each | LabelWithAccessor with: ((each isKindOf: Association) ifTrue: [each key] ifFalse: [each])].	widths := nil.	self isOpen		ifTrue: 			[self enableOrDisableScrollers.			self invalidateTabsArea]</body><body package="Aragon.Widgets">updateModel	pagesCache notNil ifTrue: [self cachePages: true].	self sequence: model value.	self updateLabels.</body><body package="Aragon.Widgets">updateRemoveTabAt: anIndex	| sel |	sel := self selectionIndex.	anIndex &lt; sel ifTrue: [selectionChannel setValue: sel-1. lastSelection := sel-1].	self updateLabels.	anIndex == sel ifTrue: [self selectionIndex: (anIndex min: labels size)].</body><body package="Aragon.Widgets">updateSelectionChannel	| newSelection |	sequence isEmpty ifTrue: [^self].	newSelection := self selectionIndex."	(newSelection := selectionChannel value) == 0 		ifTrue: [selectionChannel setValue: (newSelection := 1)]."	newSelection &lt; startIndex		ifTrue: 			[startIndex := newSelection.			self enableOrDisableScrollers.			self invalidateTabsArea]		ifFalse: 			[| right |			right := self bounds right - (self canScroll ifTrue: [2 * self labelsHeight] ifFalse: [0]).			(self rightOfTabAt: newSelection) &gt; right				ifTrue: 					[[startIndex &lt; self labels size and: [(self rightOfTabAt: newSelection) &gt; right]] 						whileTrue: [startIndex := startIndex + 1].					scrollerButtons first isEnabled: true.					self enableOrDisableScrollers.					self invalidateTabsArea]				ifFalse: 					[self invalidateTabsArea]]."					self invalidateTabAt: lastSelection.					self invalidateTabAt: newSelection]]."	buildPages ifTrue: [self showPage: newSelection].	lastSelection := newSelection.</body></methods><methods><class-id>Aragon.CardView</class-id> <category>private</category><body package="Aragon.Widgets">computeLabelsHeight	labelsHeight := self textStyle lineGrid + (2 * self insetOfText y) + 2.	subcanvas notNil ifTrue: [subcanvas container layout topOffset: labelsHeight+2].	^labelsHeight</body><body package="Aragon.Widgets">computeWidths	| x margins |	widths := Array new: labels size + 1.	widths at: 1 put: (x := 0).	margins := 2 * self insetOfText x + self xSlant + 4.	1 to: labels size		do: 			[:i | 			x := x + (labels at: i) bounds width + margins.			widths at: i + 1 put: x].	^widths</body><body package="Aragon.Widgets">enableOrDisableScrollers	canScroll := startIndex &gt; 1 or: [self bounds right &lt; (self rightOfTabAt: self labels size)].	self canScroll		ifTrue: 			[scrollerButtons first isEnabled: startIndex &gt; 1.			scrollerButtons last isEnabled: (startIndex &lt; self labels size and: [(self rightOfTabAt: self labels size) &gt; (self bounds right - (2 * self labelsHeight))])].</body><body package="Aragon.Widgets">fontWith: aGraphicsContext	 ^self textStyle fontAt: nil for: aGraphicsContext fontPolicy</body><body package="Aragon.Widgets">installFontOn: aGraphicsContext 	| attributes |	(attributes := self textStyle) isNil ifTrue: [attributes := TextAttributes default].	aGraphicsContext font: (attributes fontAt: nil for: aGraphicsContext fontPolicy)</body><body package="Aragon.Widgets">invalidateTabAt: anIndex	self invalidateRectangle: (self boundsOfTabAt: anIndex)</body><body package="Aragon.Widgets">invalidateTabsArea		self invalidateRectangle: self tabsArea</body><body package="Aragon.Widgets">removeComponents: comps from: consumers	| answer |	answer := OrderedCollection new.	comps do: 			[:each |			| w |			w := each widget.			(w isKindOf: CompositePart)				ifTrue: [answer addAll: (self removeComponents: w components from: consumers)].			(consumers remove: w ifAbsent: [nil]) notNil ifTrue: [answer add: w]].	^answer</body><body package="Aragon.Widgets">setModel: aModel	super setModel: aModel.	self updateModel.	self sequence: aModel value.</body><body package="Aragon.Widgets">shiftTabsBy: delta	startIndex := startIndex + delta.	self enableOrDisableScrollers.	self invalidateRectangle: self tabsArea repairNow: true.</body><body package="Aragon.Widgets">showPage: anIndex 	| page appModel spec |	(self useCachedPageFor: anIndex)		ifTrue: [^self].	page := (sequence at: anIndex) value.	(page isKindOf: Collection)		ifTrue: 			[appModel := page first.			spec := page last]		ifFalse: 			[appModel := page.			spec := #windowSpec].	appModel isBehavior ifTrue: [appModel := appModel new].	self subcanvas client: appModel spec: spec.	self subcanvas layoutComponentSubtreeIfNeeded.</body><body package="Aragon.Widgets">useCachedPageFor: anIndex	| oldComps newComps |	pagesCache isNil ifTrue: [^false].	(oldComps := subcanvas components copy) isEmpty		ifFalse: 			[| consumers |			consumers := self removeComponents: oldComps						from: controller keyboardProcessor keyboardConsumers.			pagesCache at: (sequence at: lastSelection) put: oldComps -&gt; consumers.			oldComps do: 					[:each |					subcanvas removeComponent: each.					"Components in the cache will have a proper container when they are re-installed on the subcanvas."					each container: nil]].	newComps := pagesCache at: (sequence at: anIndex) ifAbsent: [nil].	newComps notNil		ifTrue: 			[| consumers i |			consumers := controller keyboardProcessor keyboardConsumers.			(i := consumers indexOf: self) == 0 ifTrue: [i := consumers size].			newComps value do: [:each | consumers add: each beforeIndex: (i := i + 1)].			newComps key do: [:each | subcanvas addComponent: each].			subcanvas layoutComponentSubtreeIfNeeded.			subcanvas invalidate.			^true]		ifFalse: [subcanvas releaseAllComponents].	^false</body></methods><methods><class-id>Aragon.CardView</class-id> <category>bounds accessing</category><body package="Aragon.Widgets">bounds: newBounds 	super bounds: newBounds.	subcanvas notNil		ifTrue: 			[| wrapper |			wrapper := subcanvas container.			wrapper bounds: (wrapper rectangleRelativeTo: newBounds).			subcanvas layoutComponentSubtreeIfNeeded].	self enableOrDisableScrollers</body><body package="Aragon.Widgets">boundsOfTabAt: anIndex	| box |	box := self tabsArea.	box left: (self widths at: anIndex) - (widths at: startIndex).	box right: (widths at: anIndex+1) - (widths at: startIndex) + (self xSlant).	^box</body><body package="Aragon.Widgets">insetOfText	^self class insetOfText</body><body package="Aragon.Widgets">leftOfTabAt: anIndex	^(self widths at: anIndex) - (widths at: startIndex)</body><body package="Aragon.Widgets">preferredBounds	^0 @ 0 corner: self widths last + 14 @ 48</body><body package="Aragon.Widgets">rightOfTabAt: anIndex	^(self widths at: anIndex + 1) - (widths at: startIndex) + self xSlant</body><body package="Aragon.Widgets">tabsArea	| answer bounds |	bounds := self bounds.	answer := bounds origin corner: bounds corner x @ self labelsHeight.	^answer</body><body package="Aragon.Widgets">xSlant	^self labelsHeight *3 // 7</body></methods><methods><class-id>Aragon.CardView</class-id> <category>controller accessing</category><body package="Aragon.Widgets">defaultControllerClass	^CardViewController</body></methods><methods><class-id>Aragon.CardView class</class-id> <category>constants</category><body package="Aragon.Widgets">insetOfText	^insetOfText</body></methods><methods><class-id>Aragon.CardView class</class-id> <category>class initialization</category><body package="Aragon.Widgets">initialize	self insetOfText: 2@2.	self tabStyle: #slanted</body><body package="Aragon.Widgets">insetOfText: aPoint	insetOfText := aPoint</body><body package="Aragon.Widgets">tabStyle	"aSymbol is expected to be either #slanted or #straight!"	^TabStyle</body><body package="Aragon.Widgets">tabStyle: aSymbol	"aSymbol is expected to be either #slanted or #straight!"	TabStyle := aSymbol</body></methods><methods><class-id>Graphics.CharacterAttributes</class-id> <category>enhanced - Fonts Convenient</category><body package="Aragon.Widgets">asFont	| answer |	answer := Aragon.Font new.	(1 to: (self class instSize min: Aragon.Font instSize)) do: [:i | answer instVarAt: i put: (self instVarAt: i)].	(defaultQuery family isKindOf: String) 		ifTrue: [answer defaultQuery family: (Array with: defaultQuery family)].	^answer</body></methods><methods><class-id>UI.Dialog class</class-id> <category>enhanced - TreeView</category><body package="Aragon.Widgets">requestDirectory	"Prompt for a directory name.  Return an empty string if it fails."	^Aragon.TreeViewDirectorySelector requestDirectory</body><body package="Aragon.Widgets">requestDirectory: message 	"Prompt for a directory name.  Return an empty string if it fails."	^Aragon.TreeViewDirectorySelector requestDirectory: message</body><body package="Aragon.Widgets">requestDirectory: message default: default 	"Prompt for a directory name.  Return an empty string if it fails."	^Aragon.TreeViewDirectorySelector requestDirectory: message default: default for: nil</body><body package="Aragon.Widgets">requestDirectory: message default: default for: aVisualOrNil	"Prompt for a directory name.  Return an empty string if it fails."	^Aragon.TreeViewDirectorySelector requestDirectory: message default: default for: aVisualOrNil</body></methods><methods><class-id>UI.MultiSelectionInList</class-id> <category>initialize-release</category><body package="Aragon.Widgets">initialize	| ldm context |	self listHolder: List new asValue.	ldm := Smalltalk at: #LensDataManager ifAbsent: [^self selectionIndexHolder: OrderedCollection new asValue].	context := thisContext.	[context sender notNil and: [(context receiver isKindOf: ApplicationModel) not]]		whileTrue: [context := context sender].	(context receiver isKindOf: ldm)		ifTrue: [self selectionIndexHolder: ((PluggableAdaptor on: OrderedCollection new asValue)					getBlock: [:m | m value]					putBlock: [:m :v | (v isKindOf: Collection)							ifTrue: [m value: v]							ifFalse: [m value: (Set with: v)]]					updateBlock: [:m :a :p | "a == #value"						false])]		ifFalse: [self selectionIndexHolder: OrderedCollection new asValue].</body></methods><methods><class-id>UI.Model</class-id> <category>enhanced - Aragon.TreeView</category><body package="Aragon.Widgets">doWithoutDependents: aBlock	| myDependents |	myDependents := dependents.	self breakDependents.	aBlock valueNowOrOnUnwindDo: [dependents := myDependents]</body></methods><methods><class-id>UI.SubCanvas</class-id> <category>enhanced - CardView</category><body package="Aragon.Widgets">components: anOrderedCollection	components := anOrderedCollection</body></methods><methods><class-id>UI.ApplicationModel class</class-id> <category>resource accessing</category><body package="Aragon.Widgets">commonIconAt: aKey ifAbsent: aBlock 	^Aragon.AragonIcon named: aKey ifAbsent: aBlock</body></methods><methods><class-id>UI.ApplicationModel class</class-id> <category>enhanced - stored images</category><body package="Aragon.Widgets">searchPathForImages	^#()</body><body package="Aragon.Widgets">searchPathForShapes	^#()</body></methods><methods><class-id>UI.ApplicationModel class</class-id> <category>resource accessing</category><body package="Aragon.Widgets">visualAt: aKey 	^self visualAt: aKey ifAbsent: [nil]</body><body package="Aragon.Widgets">visualAt: aKey ifAbsent: aBlock 	| visual |	(visual := self visuals at: aKey ifAbsent: [nil]) isNil ifFalse: [^visual].	(Aragon includesKey: #AragonIcon) 		ifTrue: [(visual := self commonIconAt: aKey ifAbsent: [nil]) isNil ifFalse: [^visual]].					^(Aragon at: #StoredImage ifAbsent: aBlock )		forVisual: aKey		in: self		ifAbsent: aBlock</body></methods><methods><class-id>UI.ApplicationModel</class-id> <category>enhanced - Drag&amp;Drop</category><body package="Aragon.Widgets">startDragging: clientData from: aController key: aKey 	self startDragging: clientData from: aController key: aKey with: DropSource new</body><body package="Aragon.Widgets">startDragging: clientData from: aController key: aKey with: aDropSource	| data |	data := DragDropData new key: aKey.	data contextWindow: self builder window.	data contextWidget: aController view.	data contextApplication: self.	data clientData: clientData.	(DragDropManager withDropSource: aDropSource withData: data) doDragDrop</body></methods><methods><class-id>Core.Object</class-id> <category>enhanced - Widgets.TreeView</category><body package="Aragon.Widgets">asIdentityTreeNode	^Aragon.IdentityTreeNode for: self</body><body package="Aragon.Widgets">asTreeNode	^Aragon.AragonTreeNode for: self</body><body package="Aragon.Widgets">isTreeNode	^false</body></methods><methods><class-id>Graphics.VisualComponent</class-id> <category>enhanced - Stored Images</category><body package="Aragon.Widgets">display	self displayOn: (ScheduledControllers activeController view graphicsContext)</body><body package="Aragon.Widgets">displayAt: aPoint	self displayOn: (ScheduledControllers activeController view graphicsContext) at: aPoint</body></methods><methods><class-id>UI.UILookPolicy class</class-id> <category>enhanced - Fonts Convenient</category><body package="Aragon.Widgets">systemMenuTextStyle:  aTextStyle	systemWidgetAttributes isNil ifTrue: [systemWidgetAttributes := systemAttributes].	systemAttributes := aTextStyle.</body><body package="Aragon.Widgets">systemWidgetTextStyle:  aTextStyle 	systemWidgetAttributes := aTextStyle.</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>building</category><body package="Aragon.Widgets">aragonTreeView: spec into: builder 	| lv model menu performer dropSourceCallbacks |	lv := spec name == #embedded 		ifTrue: [Aragon.EmbeddedTreeView new] 		ifFalse: [Aragon.TreeView new].	lv enableMultipleSelections: spec multipleSelections withModifierKeys: spec useModifierKeys .	model := spec modelInBuilder: builder.	lv model: model listHolder.	lv selectionChannel: model selectionIndexHolder.	lv measureWidth:		spec hasHorizontalScrollBar.	lv displayImages:		spec displayImages.	lv displayLines:			spec displayLines.	lv displayButtons:		spec displayButtons.	lv linesAtRoot:			spec linesAtRoot.	(menu := spec getMenuIn: builder) == nil ifFalse: [lv controller menuHolder: menu].	(performer := spec getPerformerIn: builder) == nil ifFalse: [lv controller performer: performer].	self setStyleOf: lv to: spec style.	self		setDispatcherOf: lv		fromSpec: spec		builder: builder.	spec tabable		ifTrue: 			[lv widgetState isTabStop: true.			builder sendKeyboardTo: lv]		ifFalse: 			[lv widgetState canTakeFocus: true.			lv controller keyboardProcessor: builder keyboardProcessor].	self setupFlyByHelpFor: lv spec: spec builder: builder.	lv widgetState isEnabled: spec initiallyEnabled.	builder isEditing ifFalse: [lv widgetState isVisible: spec initiallyVisible].	dropSourceCallbacks := spec dropSourceCallbacksOrNilInBuilder: builder.	dropSourceCallbacks == nil		ifFalse: 			[lv controller dragDropCallbacks: dropSourceCallbacks.			lv controller selectOnDownWithDrag: spec selectOnDownIfDragEnabled].	builder component: lv.	self manufactureGeneralWrapperFor: spec into: builder.	builder applyLayout: spec layout.	builder wrapWith: (self simpleWidgetWrapperOn: builder spec: spec)</body><body package="Aragon.Widgets">enhancedActionButton: spec into: builder	| img |	(spec backgroundImage notNil and: [(img := builder visualAt: spec backgroundImage) notNil])		ifTrue:			[spec colors isNil ifTrue: [spec colors: LookPreferences new].			spec colors at: #backgroundColor put: img asPattern]. 	^self enhancedActionButton: spec into: builder with: self enhancedActionButtonClass</body><body package="Aragon.Widgets">enhancedActionButton: spec into: builder with: aComponentClass 	| component model |	model := spec modelInBuilder: builder.	component := aComponentClass model: model.	component hasBorder: spec isDecorated.	self setTheLabelFor: spec component: component in: builder.	component enabledImage: (builder visualAt: spec enabledImage).	component disabledImage: (builder visualAt: spec disabledImage).	component labelPos: spec labelPos.	self setupFlyByHelpFor: component spec: spec builder: builder.	self setDispatcherOf: component fromSpec: spec builder: builder.	spec tabable		ifTrue: 			[component widgetState isTabStop: true.			builder sendKeyboardTo: component].	spec defaultable ifTrue: [component canDefault: true].	spec isDefault		ifTrue: 			[component beDefault].	component widgetState isEnabled: spec initiallyEnabled.	builder isEditing ifFalse: [component widgetState isVisible: spec initiallyVisible].	builder component: component.	builder wrapWith: (self simpleWrapperFor: spec).	builder applyLayout: spec layout.	builder wrapWith: (self simpleWidgetWrapperOn: builder spec: spec)</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>implementation classes</category><body package="Aragon.Widgets">enhancedActionButtonClass	^Aragon.EnhancedActionButtonView</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>building</category><body package="Aragon.Widgets">enhancedLabel: spec into: builder	|   c  lab | 	c := self enhancedLabelClass new.	self setStyleOf: c to: spec style.	lab := spec labelInBuilder: builder.	(spec hasCharacterOrientedLabel)		ifTrue: [c setLabelString: lab]		ifFalse: [c setLabel: lab].	c widgetState isEnabled: spec initiallyEnabled.	builder isEditing ifFalse: [c widgetState isVisible: spec initiallyVisible].	builder component: c.	builder wrapWith: (self simpleWrapperFor: spec).	builder applyLayout: spec layout.	builder wrapWith: (self simpleWidgetWrapperOn: builder spec: spec)</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>implementation classes</category><body package="Aragon.Widgets">enhancedLabelClass	^Aragon.EnhancedLabel</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>building</category><body package="Aragon.Widgets">newDataSetView: spec into: builder 	"Build a DataSetView into the builder. Extract from the model the listHolder, 	selectionChannel and currentRowHolder. Get the column descriptors from 	the spec"	| dsv model menu bc performer dropSourceCallbacks columns |	builder isEditing ifTrue: [^self dataSetView: spec into: builder].	bc := builder copy.	columns := spec columnsInBuilder: bc.	dsv := Aragon.NewDataSetView new.	dsv enableMultipleSelections: spec multipleSelections withModifierKeys: spec useModifierKeys .	model := spec modelInBuilder: builder.	dsv measureWidth: spec hasHorizontalScrollBar.	self setupFlyByHelpFor: dsv spec: spec builder: builder.	(menu := spec getMenuIn: builder) == nil ifFalse: [dsv controller menuHolder: menu].	(performer := spec getPerformerIn: builder) == nil ifFalse: [dsv controller performer: performer].	bc setWindow: nil.	bc composite: CompositePart new.	dsv columns: columns.	dsv useDecoratedEditors: spec useDecoratedEditors.	self setStyleOf: dsv to: spec style.	dsv lineGrid: (dsv columnDescriptors inject: dsv textStyle lineGrid into: [:g :cd | g max: cd preferredHeight]).	self		setDispatcherOf: dsv		fromSpec: spec		builder: builder.	spec tabable		ifTrue: 			[dsv widgetState isTabStop: true.			builder sendKeyboardTo: dsv]		ifFalse: 			[dsv widgetState canTakeFocus: true.			dsv controller keyboardProcessor: builder keyboardProcessor].	dsv widgetState isEnabled: spec initiallyEnabled.	dsv widgetState isVisible: spec initiallyVisible.	dropSourceCallbacks := spec dropSourceCallbacksOrNilInBuilder: builder.	dropSourceCallbacks == nil		ifFalse: 			[dsv controller dragDropCallbacks: dropSourceCallbacks.			dsv controller selectOnDownWithDrag: spec selectOnDownIfDragEnabled].	dsv showHorizontalLines: spec showHorizontalLines.	dsv showVerticalLines: spec showVerticalLines.	dsv showLabels: spec showLabels.	dsv allowForColumnDragging: spec allowForColumnDragging.	dsv allowForSorting: spec allowForSorting.	spec initiallyUseEditingMode ifTrue: [dsv controller startEditing].	dsv model: model listHolder.	dsv selectionChannel: model selectionIndexHolder.	builder component: dsv.	self manufactureGeneralWrapperFor: spec into: builder.	builder applyLayout: spec layout.	builder wrapWith: (self simpleWidgetWrapperOn: builder spec: spec state: dsv widgetState).</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>private</category><body package="Aragon.Widgets">setFontOf: aComponent to: aSymbol 	^(Aragon.Font canDecode: aSymbol)		ifTrue: [aComponent setTextStyle: (Aragon.Font decode: aSymbol) asTextstyle]		ifFalse: [(aSymbol == #default or: [aSymbol == nil])				ifFalse: [aComponent setTextStyle: (Aragon.TextStyle named: aSymbol ifAbsent: [Aragon.TextStyle default])]]</body><body package="Aragon.Widgets">setStyleOf: aComponent to: aStyle	(aComponent isKindOf: TextEditorView) ifFalse: [		(aStyle == nil or: [ #(system default) includes: aStyle ]) ifTrue: [			aComponent setTextStyle: (				((aComponent respondsTo: #artist) and: [ aComponent artist font notNil ])					ifTrue: [ aComponent artist font ]					ifFalse: [ self class systemWidgetTextStyle ]			).			^self		].		(aStyle isKindOf: TextAttributes) ifTrue: [			aComponent setTextStyle: aStyle.			^self		]	].	aStyle == #system ifTrue: [		self class useSystemFontsOnWidgets ifTrue: [ aComponent setTextStyle: self class systemWidgetTextStyle ].		^self.	].	(Aragon includesKey: #Font) ifTrue: [^self setFontOf: aComponent to: aStyle].	(aStyle == #default or: [ aStyle == nil ]) ifFalse: [		aComponent setTextStyle: (TextAttributes styleNamed: aStyle ifAbsent: [ TextAttributes default ])	]</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>building</category><body package="Aragon.Widgets">toolbarButton: spec into: builder	^self enhancedActionButton: spec into: builder with: self toolbarButtonClass</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>implementation classes</category><body package="Aragon.Widgets">toolbarButtonClass	^Aragon.ToolbarButtonView</body></methods><methods><class-id>Aragon.TreeViewDirectorySelector class</class-id> <category>resources</category><body package="Aragon.Widgets">downArrow	"UIMaskEditor new openOnClass: self andSelector: #downArrow"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 9@9 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 120 0 0 0 8 0 0 0 8 0 0 0 107 0 0 0 62 0 0 0 28 0 0 0 8 0 0 0 0 0 0 0])</body></methods><methods><class-id>Aragon.TreeViewDirectorySelector class</class-id> <category>interface specs</category><body package="Aragon.Widgets">directoryViewSpec	"UIPainter new openOnClass: self andSelector: #directoryViewSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Directory Selector' 			#bounds: #(#{Graphics.Rectangle} 640 512 962 797 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{Aragon.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #directories 					#model: #directories 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #selectionChanged 						#doubleClickSelector: #selectEntry ) 					#style: #('Arial' #italic 15 ) 					#useModifierKeys: true 					#selectionType: #highlight 					#linesAtRoot: true ) ) ) )</body><body package="Aragon.Widgets">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Select a Directory' 			#bounds: #(#Rectangle 479 370 801 655 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#ComboBoxSpec 					#layout: #(#LayoutFrame 12 0 13 0 -34 1 36 0 ) 					#name: #directory 					#isOpaque: true 					#model: #directory 					#isReadOnly: false 					#comboList: #recentSelections ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -32 1 13 0 -12 1 36 0 ) 					#model: #synchronizeTreeView 					#label: #downArrow 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#SubCanvasSpec 					#layout: #(#LayoutFrame 12 0 42 0 -12 1 -44 1 ) 					#flags: 0 					#minorKey: #directoryViewSpec ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -190 1 -36 1 -100 1 -12 1 ) 					#name: #accept 					#model: #accept 					#label: '&amp;Select' 					#isDefault: true 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -96 1 -36 1 -12 1 -12 1 ) 					#name: #cancel 					#model: #cancel 					#label: '&amp;Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Aragon.NewDataSetView class</class-id> <category>resources</category><body package="Aragon.Widgets">autoAppendShape	"UIMaskEditor new openOnClass: self andSelector: #autoAppendShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 9@9 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[8 0 0 0 73 0 0 0 42 0 0 0 28 0 0 0 255 128 0 0 28 0 0 0 42 0 0 0 73 0 0 0 8 0 0 0])</body><body package="Aragon.Widgets">indicationIcon	"UIMaskEditor new openOnClass: self andSelector: #indicationIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 12@13 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 16 0 0 0 32 0 0 0 64 0 0 0 128 0 0 0 128 0 0 33 0 0 0 115 0 0 0 250 0 0 0 126 0 0 0 62 0 0 0 28 0 0 0 28 0 0 0 12 0 0 0])</body><body package="Aragon.Widgets">rowSelectorShape	"UIMaskEditor new openOnClass: self andSelector: #rowSelectorShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 7@9 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[64 0 0 0 96 0 0 0 112 0 0 0 120 0 0 0 124 0 0 0 120 0 0 0 112 0 0 0 96 0 0 0 64 0 0 0])</body><body package="Aragon.Widgets">sortAscendingIndicatorIcon	"UIMaskEditor new openOnClass: self andSelector: #sortAscendingIndicatorIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 8@8 depth: 1 bitsPerPixel: 1 palette: (MappedPalette withColors: ((Array new: 2) at: 1 put: ColorValue white; at: 2 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: #[255 0 0 0 192 0 0 0 64 0 0 0 96 0 0 0 32 0 0 0 48 0 0 0 16 0 0 0 0 0 0 0])</body><body package="Aragon.Widgets">sortAscendingIndicatorShape	"UIMaskEditor new openOnClass: self andSelector: #sortAscendingIndicatorShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 8@8 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[255 0 0 0 195 0 0 0 66 0 0 0 70 0 0 0 36 0 0 0 60 0 0 0 24 0 0 0 0 0 0 0])</body><body package="Aragon.Widgets">sortDescendingIndicatorIcon	"UIMaskEditor new openOnClass: self andSelector: #sortDescendingIndicatorIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 8@8 depth: 1 bitsPerPixel: 1 palette: (MappedPalette withColors: ((Array new: 2) at: 1 put: ColorValue white; at: 2 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: #[16 0 0 0 48 0 0 0 32 0 0 0 64 0 0 0 64 0 0 0 128 0 0 0 128 0 0 0 0 0 0 0])</body><body package="Aragon.Widgets">sortDescendingIndicatorShape	"UIMaskEditor new openOnClass: self andSelector: #sortDescendingIndicatorShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 8@8 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[24 0 0 0 60 0 0 0 36 0 0 0 66 0 0 0 66 0 0 0 129 0 0 0 255 0 0 0 0 0 0 0])</body></methods><methods><class-id>Aragon.EnhancedGroupBoxSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6552 scaledGreen: 6552 scaledBlue: 6552); at: 3 put: (ColorValue scaledRed: 3822 scaledGreen: 3822 scaledBlue: 3822); at: 4 put: ColorValue white; at: 5 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: (ByteArray fromPackedStringb'))</body><body package="Aragon.Widgets">paletteImage	"UIMaskEditor new openOnClass: self andSelector: #paletteImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: MonoMappedPalette blackWhite usingBits: #[255 255 255 192 255 255 255 192 255 255 255 192 255 255 255 192 254 255 255 192 254 255 255 192 242 34 167 192 246 171 127 192 246 34 191 192 247 255 255 192 247 255 255 192 247 255 255 192 247 255 255 192 247 255 255 192 247 255 255 192 247 255 255 192 247 255 255 192 247 255 255 192 247 255 255 192 247 255 255 192 247 255 255 192 255 255 255 192 255 255 255 192 255 255 255 192 255 255 255 192 255 255 255 192])</body><body package="Aragon.Widgets">paletteMonoIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 13 221 92 0 9 84 132 0 9 221 68 0 8 0 4 0 8 0 4 0 8 0 4 0 8 0 4 0 8 0 4 0 8 0 4 0 8 0 4 0 8 0 4 0 8 0 4 0 8 0 4 0 8 0 4 0 8 0 4 0 15 255 252 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Aragon.EnhancedGroupBoxSpec class</class-id> <category>interface specs</category><body package="Aragon.Widgets">detailsEditSpec	"UIPainter new openOnClass: self andSelector: #detailsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 294 106 ) 			#max: #(#Point 299 299 ) 			#bounds: #(#Rectangle 493 416 787 715 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 4 0 0.5 0 ) 					#label: #componentName 					#style: #large ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 24 0 72 0 0 1 ) 					#label: 'Font:' ) 				#(#MenuButtonSpec 					#layout: #(#LayoutFrame 61 0 50 0 -35 1 73 0 ) 					#model: #style 					#menu: #fontMenu ) 				#(#CheckBoxSpec 					#layout: #(#Point 33 88 ) 					#model: #initiallyDisabled 					#tabable: true 					#label: 'Initially Disabled' ) 				#(#CheckBoxSpec 					#layout: #(#Point 33 109 ) 					#model: #initiallyInvisible 					#tabable: true 					#label: 'Initially Invisible' ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame 27 0 146 0 -27 1 253 0 ) 					#name: #border 					#label: 'Border' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 145 0 234 0 0 1 ) 					#label: 'Bevel:' ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 186 214 226 234 ) 					#model: #bevel 					#type: #number ) 				#(#RadioButtonSpec 					#layout: #(#Point 58 175 ) 					#model: #bevel 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#label: 'Simple' 					#select: 0 ) 				#(#RadioButtonSpec 					#layout: #(#Point 58 195 ) 					#model: #bevel 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#label: 'Raised' 					#select: 1 ) 				#(#RadioButtonSpec 					#layout: #(#Point 58 215 ) 					#model: #bevel 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#label: 'Inset' 					#select: -1 ) ) ) )</body></methods><methods><class-id>Aragon.TreeView class</class-id> <category>resources</category><body package="Aragon.Widgets">minusImage	"UIMaskEditor new openOnClass: self andSelector: #minusImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 9@9 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 62 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Aragon.Widgets">plusImage	"UIMaskEditor new openOnClass: self andSelector: #plusImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 9@9 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 8 0 0 0 8 0 0 0 62 0 0 0 8 0 0 0 8 0 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Aragon.ResizerSpec class</class-id> <category>interface specs</category><body package="Aragon.Widgets">basicsEditSpec	"UIPainter new openOnClass: self andSelector: #basicsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 746 588 1055 853 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#InputFieldSpec 					#layout: #(#LayoutFrame 77 0 56 0 -20 1 79 0 ) 					#model: #widget1 					#type: #symbol ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 77 0 83 0 -20 1 106 0 ) 					#model: #widget2 					#type: #symbol ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 77 0 124 0 -20 1 147 0 ) 					#model: #name 					#menu: #fieldMenu ) 				#(#RadioButtonSpec 					#layout: #(#Point 56 187 ) 					#model: #orientation 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#label: '&amp;Horizontal' 					#select: #horizontal ) 				#(#RadioButtonSpec 					#layout: #(#Point 56 209 ) 					#model: #orientation 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#label: '&amp;Vertical' 					#select: #vertical ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 7 0 0.5 0 ) 					#label: #componentName 					#style: #large ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 70 0 78 0 1 1 ) 					#name: #widget1Label 					#label: 'Widget1' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 70 0 144 0 1 1 ) 					#label: 'ID:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 70 0 105 0 1 1 ) 					#name: #widget2Label 					#label: 'Widget2' ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame 24 0 162 0 -24 1 241 0 ) 					#label: 'Orientation' ) ) ) )</body></methods><methods><class-id>Aragon.ResizerSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteImage	"UIMaskEditor new openOnClass: self andSelector: #paletteImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6552 scaledGreen: 6552 scaledBlue: 6552); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: (ByteArray fromPackedString: '********(@B******** @J********@@********(@B****J*** @J***(****@@****"***(@B****J*** @J***(****@@***J"&amp;**(@B**(*J&amp;** @J**"(*&amp;**@@***J"*&amp;*(@B*.(*J*2* @J*."(*,**@@**.J"+J*(@B**,*J2** @J**"((***@@****"***(@B****J*** @J***(****@@****"***(@B****J*** @J*** ****@@********(@B******** @@@a'))</body><body package="Aragon.Widgets">paletteMonoIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 12 0 0 0 12 0 0 0 12 0 0 0 12 0 0 0 12 0 0 0 12 0 0 0 76 128 0 0 204 192 0 1 76 160 0 2 76 144 0 4 76 152 0 2 76 176 0 1 76 224 0 0 204 192 0 0 76 128 0 0 12 0 0 0 12 0 0 0 12 0 0 0 12 0 0 0 12 0 0 0 12 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Aragon.EnhancedActionButtonSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">aboveImage	"UIMaskEditor new openOnClass: self andSelector: #aboveImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: MonoMappedPalette whiteBlack usingBits: #[0 0 0 0 0 0 0 0 63 252 0 0 0 0 0 0 0 0 0 0 31 248 0 0 16 8 0 0 16 8 0 0 16 8 0 0 16 8 0 0 16 8 0 0 16 8 0 0 16 8 0 0 31 248 0 0 0 0 0 0 0 0 0 0])</body><body package="Aragon.Widgets">aboveShape	"UIMaskEditor new openOnClass: self andSelector: #aboveShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 63 252 0 0 0 0 0 0 0 0 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 0 0 0 0 0 0 0 0])</body><body package="Aragon.Widgets">belowImage	"UIMaskEditor new openOnClass: self andSelector: #belowImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: MonoMappedPalette whiteBlack usingBits: #[0 0 0 0 0 0 0 0 31 248 0 0 16 8 0 0 16 8 0 0 16 8 0 0 16 8 0 0 16 8 0 0 16 8 0 0 16 8 0 0 31 248 0 0 0 0 0 0 0 0 0 0 63 252 0 0 0 0 0 0 0 0 0 0])</body><body package="Aragon.Widgets">belowShape	"UIMaskEditor new openOnClass: self andSelector: #belowShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 0 0 0 0 0 0 0 0 63 252 0 0 0 0 0 0 0 0 0 0])</body><body package="Aragon.Widgets">leftImage	"UIMaskEditor new openOnClass: self andSelector: #leftImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: MonoMappedPalette whiteBlack usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 254 0 0 1 2 0 0 1 2 0 0 125 2 0 0 1 2 0 0 1 2 0 0 1 2 0 0 1 254 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Aragon.Widgets">leftShape	"UIMaskEditor new openOnClass: self andSelector: #leftShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 254 0 0 1 254 0 0 1 254 0 0 125 254 0 0 1 254 0 0 1 254 0 0 1 254 0 0 1 254 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Aragon.Widgets">paletteIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6552 scaledGreen: 6552 scaledBlue: 6552); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 3693 scaledGreen: 3693 scaledBlue: 3693); at: 5 put: (ColorValue scaledRed: 6617 scaledGreen: 6617 scaledBlue: 6617); yourself)) usingBits: (ByteArray fromPackedString: 'H"H"H"H"H"H"H"H"H@@@@BDQDQDQDQDQDQDQDS@@@@@!QDQDQDQDQDQDQDP0@@@@HTQDQDQDQDQDQDQDL@@@@BEDQDQDQDQDQDQDQC@@@@@!QDP"H"H"H"ADQDP0@@@@HTQDHQDQDQDPQDQDL@@@@BEDPRDQDQDQDDQDQC@@@@@!QDD!DQDQDQADQDP0@@@@HTQAHQDQDQDPQDQDL@@@@BEDQBDQDQDQDDQDQC@@@@@!QDP!DQDQDQADQDP0@@@@HTQD@@@@@@@@QDQDL@@@@BEDQADQDQDQDTQDQC@@@@@!QDPQQDQDPTQDQDP0@@@@HT@@@TQDPDEDQDQDL@@@@BE@DQQDQA@QQDQDQC@@@@@!PDDQ@PDPDADP@QP0@@@@HT@@DP@PD@DA@Q@TL@@@@BE@QADADA@Q@Q@@EC@@@@@!PDDT@Q@PDPDADAP0@@@@HT@@@PDPPDDAD@@TL@@@@BEDQAQDQDQDQDPTQC@@@@@!QDQDQDQDQDQDQDP0@@@@H3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="Aragon.Widgets">paletteImage	"UIMaskEditor new openOnClass: self andSelector: #paletteImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: MonoMappedPalette blackWhite usingBits: #[255 255 255 192 255 255 255 192 255 255 255 192 255 255 255 192 255 255 255 192 255 255 191 192 255 255 191 192 255 255 191 192 255 255 191 192 255 255 191 192 255 255 191 192 255 255 191 192 252 0 63 192 255 255 255 192 255 255 255 192 225 251 255 192 239 251 255 192 239 90 231 192 227 41 91 192 239 107 99 192 239 107 91 192 225 107 99 192 255 255 255 192 255 255 255 192 255 255 255 192 255 255 255 192])</body><body package="Aragon.Widgets">paletteMonoIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 255 192 0 2 0 64 0 2 0 64 0 2 0 64 0 2 0 64 0 2 0 64 0 2 0 64 0 3 255 192 0 0 0 0 0 0 0 0 0 30 4 0 0 16 4 0 0 16 165 24 0 28 214 164 0 16 148 156 0 16 148 164 0 30 148 156 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Aragon.Widgets">plainImage	"UIMaskEditor new openOnClass: self andSelector: #plainImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: (MappedPalette withColors: ((Array new: 1) at: 1 put: ColorValue white; yourself)) usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Aragon.Widgets">rightImage	"UIMaskEditor new openOnClass: self andSelector: #rightImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: MonoMappedPalette whiteBlack usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 128 0 0 64 128 0 0 64 128 0 0 64 190 0 0 64 128 0 0 64 128 0 0 64 128 0 0 127 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="Aragon.Widgets">rightShape	"UIMaskEditor new openOnClass: self andSelector: #rightShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 128 0 0 127 128 0 0 127 128 0 0 127 190 0 0 127 128 0 0 127 128 0 0 127 128 0 0 127 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Aragon.EnhancedActionButtonSpec class</class-id> <category>interface specs</category><body package="Aragon.Widgets">basicsEditSpecLiteral	"UIPainter new openOnClass: self andSelector: #basicsEditSpecLiteral"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 298 187 ) 			#max: #(#Point 298 211 ) 			#bounds: #(#Rectangle 491 407 789 618 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 10 0 127 0 0 1 ) 					#label: 'ID:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 10 0 98 0 0 1 ) 					#label: 'Action:' ) 				#(#SubCanvasSpec 					#layout: #(#LayoutFrame 10 0 43 0 -10 1 74 0 ) 					#flags: 0 					#minorKey: #labelConstructorSpec 					#clientKey: #labelConstructor ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 86 0 74 0 -10 1 97 0 ) 					#model: #model 					#menu: #fieldMenu ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 86 0 103 0 -10 1 126 0 ) 					#model: #name 					#menu: #fieldMenu ) 				#(#CheckBoxSpec 					#layout: #(#Point 10 145 ) 					#model: #isDefault 					#label: 'Be Default' ) 				#(#CheckBoxSpec 					#layout: #(#Point 10 164 ) 					#model: #defaultable 					#label: 'Size as Default' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 2 0 0.5 0 ) 					#label: #fullComponentName 					#style: #large ) 				#(#CheckBoxSpec 					#layout: #(#Point 10 183 ) 					#model: #isDecorated 					#tabable: true 					#label: 'Bordered' ) 				#(#CheckBoxSpec 					#layout: #(#Point 137 142 ) 					#model: #tabable 					#tabable: true 					#label: 'Can Tab' ) 				#(#CheckBoxSpec 					#layout: #(#Point 137 162 ) 					#model: #initiallyDisabled 					#tabable: true 					#label: 'Initially Disabled' ) 				#(#CheckBoxSpec 					#layout: #(#Point 137 183 ) 					#model: #initiallyInvisible 					#tabable: true 					#label: 'Initially Invisible' ) ) ) )</body><body package="Aragon.Widgets">detailsEditSpec	"UIPainter new openOnClass: self andSelector: #detailsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 298 187 ) 			#max: #(#Point 317 308 ) 			#bounds: #(#Rectangle 482 358 799 666 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#ActionButtonSpec 					#layout: #(#Rectangle 86 249 109 272 ) 					#model: #below 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#label: #belowIcon 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 109 249 132 272 ) 					#model: #above 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#label: #aboveIcon 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 132 249 155 272 ) 					#model: #right 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#label: #rightIcon 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 155 249 178 272 ) 					#model: #left 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#label: #leftIcon 					#hasCharacterOrientedLabel: false 					#defaultable: true ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.501577 4 0 0.5 0 ) 					#label: #fullComponentName 					#style: #large ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame 12 0 43 0 -12 1 186 0 ) 					#label: 'Images' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 93 0 72 0 1 0 ) 					#label: 'Enabled:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 93 0 95 0 1 0 ) 					#label: 'Disabled:' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 95 0 72 0 -27 1 93 0 ) 					#model: #enabledImage 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#menu: #fieldMenu 					#type: #symbol ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 95 0 95 0 -27 1 116 0 ) 					#model: #disabledImage 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#menu: #fieldMenu 					#type: #symbol ) 				#(#CheckBoxSpec 					#layout: #(#Point 29 155 ) 					#model: #isOpaque 					#tabable: true 					#label: 'Opaque' ) 				#(#MenuButtonSpec 					#layout: #(#LayoutFrame 86 0 222 0 -25 1 243 0 ) 					#model: #style 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#menu: #fontMenu ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame 12 0 199 0 -12 1 288 0 ) 					#label: 'Label' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 83 0 223 0 1 0 ) 					#label: 'Font:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 83 0 251 0 1 0 ) 					#label: 'Position:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 93 0 118 0 1 0 ) 					#label: 'Background:' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 95 0 118 0 -27 1 139 0 ) 					#model: #backgroundImage 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#menu: #fieldMenu 					#type: #symbol ) ) ) )</body></methods><methods><class-id>Aragon.ToolbarButtonSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6552 scaledGreen: 6552 scaledBlue: 6552); at: 3 put: ColorValue white; at: 4 put: (ColorValue scaledRed: 3693 scaledGreen: 3693 scaledBlue: 3693); at: 5 put: (ColorValue scaledRed: 6617 scaledGreen: 6617 scaledBlue: 6617); yourself)) usingBits: (ByteArray fromPackedString: 'H"H"H"H"H"H"H"H"H@@@@BDQDQDQDQDQDQDQDS@@@@@!QDQDQDQDQDQDQDP0@@@@HTQDQDQDQDQDQDQDL@@@@BEDQDQDQDQDQDQDQC@@@@@!QDP"H"H"H"ADQDP0@@@@HTQDHQDQDQDPQDQDL@@@@BEDPRDQDQDQDDQDQC@@@@@!QDD!DQDQDQADQDP0@@@@HTQAHQDQDQDPQDQDL@@@@BEDQBDQDQDQDDQDQC@@@@@!QDP!DQDQDQADQDP0@@@@HTQD@@@@@@@@QDQDL@@@@BEDQADQDQDQDTQDQC@@@@@!QDPQQDQDPTQDQDP0@@@@HP@@@QPQQDDDAAQDL@@@@BEA@QPTDQDQ@PDTQC@@@@@!PPDP@QD@DPD@@QP0@@@@HTDA@Q@PDPDA@Q@TL@@@@BEA@PDPDADA@PDPEC@@@@@!PPDDDA@Q@PDADAP0@@@@HTDAD@DQ@ADA@@DTL@@@@BEDQAPTQDDQQDPTQC@@@@@!QDQDQDQDPQQDQDP0@@@@H3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="Aragon.Widgets">paletteImage	"UIMaskEditor new openOnClass: self andSelector: #paletteImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: MonoMappedPalette blackWhite usingBits: #[255 255 255 192 255 255 255 192 255 255 255 192 255 255 255 192 255 255 255 192 255 255 191 192 255 255 191 192 255 255 191 192 255 255 191 192 255 255 191 192 255 255 191 192 255 255 191 192 252 0 63 192 255 255 255 192 255 255 255 192 193 255 95 192 247 255 95 192 246 115 71 192 245 173 91 192 245 173 91 192 245 173 91 192 246 115 71 192 255 255 255 192 255 255 255 192 255 255 255 192 255 255 255 192])</body><body package="Aragon.Widgets">paletteMonoIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 255 192 0 2 0 64 0 2 0 64 0 2 0 64 0 2 0 64 0 2 0 64 0 2 0 64 0 3 255 192 0 0 0 0 0 0 0 0 0 62 0 160 0 8 0 160 0 9 140 184 0 10 82 164 0 10 82 164 0 10 82 164 0 9 140 184 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Aragon.NewDataSetSpecColumnDetailsModel class</class-id> <category>interface specs</category><body package="Aragon.Widgets">columnDetailsEditSpec	"UIPainter new openOnClass: self andSelector: #columnDetailsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Unlabeled Canvas' 			#min: #(#Point 440 472 ) 			#max: #(#Point 440 472 ) 			#bounds: #(#Rectangle 804 364 1244 836 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 4 0 0.5 0 ) 					#name: #label 					#label: 'Dataset' ) 				#(#CompositeSpecCollection 					#collection: #(						#(#CompositeSpecCollection 							#collection: #(								#(#LabelSpec 									#layout: #(#Point 0 89 ) 									#label: 'Font:' ) 								#(#LabelSpec 									#layout: #(#Point 0 147 ) 									#name: #ComboBoxFormatLabel 									#label: 'Format:' ) 								#(#LabelSpec 									#layout: #(#Point 0 118 ) 									#label: 'Data Type:' ) 								#(#LabelSpec 									#layout: #(#Point 111 60 ) 									#label: 'Align:' ) 								#(#LabelSpec 									#layout: #(#Point 0 31 ) 									#label: 'Choices:' ) 								#(#LabelSpec 									#layout: #(#Point 0 2 ) 									#label: 'Menu:' ) 								#(#LabelSpec 									#layout: #(#Point 0 60 ) 									#label: 'Chars:' ) 								#(#LabelSpec 									#layout: #(#Point 0 176 ) 									#name: #ComboBoxReadSelectorLabel 									#label: 'Read:' ) 								#(#LabelSpec 									#layout: #(#Point 0 205 ) 									#name: #ComboBoxPrintSelectorLabel 									#label: 'Print:' ) 								#(#InputFieldSpec 									#layout: #(#LayoutFrame 70 0 0 0.0 0 1.0 25 0 ) 									#name: #ComboBoxMenu 									#model: #typeMenu 									#menu: #fieldMenu 									#type: #symbol ) 								#(#InputFieldSpec 									#layout: #(#LayoutFrame 70 0 29 0 0 1.0 54 0 ) 									#name: #typeChoices 									#model: #typeChoices 									#menu: #fieldMenu 									#type: #symbol ) 								#(#InputFieldSpec 									#layout: #(#Rectangle 70 58 109 83 ) 									#name: #ComboBoxSize 									#model: #typeSize 									#menu: #fieldMenu 									#alignment: #center 									#type: #number ) 								#(#MenuButtonSpec 									#layout: #(#LayoutFrame 166 0 58 0 0 1.0 83 0 ) 									#name: #ComboBoxAlign 									#model: #typeAlign 									#menu: #alignmentMenu ) 								#(#MenuButtonSpec 									#layout: #(#LayoutFrame 70 0 87 0 0 1.0 112 0 ) 									#name: #ComboBoxFont 									#model: #typeFont 									#menu: #fontMenu ) 								#(#MenuButtonSpec 									#layout: #(#LayoutFrame 94 0 116 0 0 1.0 141 0 ) 									#name: #ComboBoxDataType 									#model: #typeDataType 									#menu: #dataType ) 								#(#ComboBoxSpec 									#layout: #(#LayoutFrame 94 0 145 0 0 1.0 170 0 ) 									#name: #ComboBoxFormatEditor 									#model: #formatString 									#menu: #fieldMenu 									#isReadOnly: false 									#comboList: #defaultFormats ) 								#(#InputFieldSpec 									#layout: #(#LayoutFrame 94 0 174 0 0 1.0 199 0 ) 									#name: #ComboBoxReadSelector 									#model: #readSelector 									#type: #symbol ) 								#(#InputFieldSpec 									#layout: #(#LayoutFrame 94 0 203 0 0 1.0 228 0 ) 									#name: #ComboBoxPrintSelector 									#model: #printSelector 									#type: #symbol ) ) 							#compositeSpec: 							#(#CompositeSpec 								#layout: #(#LayoutFrame 0 0.0 0 0 0 1.0 0 1.0 ) 								#name: #ComboBox ) ) 						#(#CompositeSpecCollection 							#collection: #(								#(#LabelSpec 									#layout: #(#Point 0 89 ) 									#name: #NoneFormatLabel 									#label: 'Format:' ) 								#(#LabelSpec 									#layout: #(#Point 0 60 ) 									#label: 'Data Type:' ) 								#(#LabelSpec 									#layout: #(#Point 0 31 ) 									#label: 'Align:' ) 								#(#LabelSpec 									#layout: #(#Point 0 2 ) 									#label: 'Font:' ) 								#(#MenuButtonSpec 									#layout: #(#LayoutFrame 94 0 0 0 0 1.0 25 0 ) 									#name: #InputFieldFont 									#model: #typeFont 									#menu: #fontMenu ) 								#(#MenuButtonSpec 									#layout: #(#LayoutFrame 94 0 29 0 0 1.0 54 0 ) 									#name: #InputFieldAlign 									#model: #typeAlign 									#menu: #alignmentMenu ) 								#(#MenuButtonSpec 									#layout: #(#LayoutFrame 94 0 58 0 0 1.0 83 0 ) 									#name: #InputFieldAlign 									#model: #typeDataType 									#menu: #dataType ) 								#(#ComboBoxSpec 									#layout: #(#LayoutFrame 94 0 87 0 0 1.0 112 0 ) 									#name: #NoneFormatEditor 									#model: #formatString 									#menu: #fieldMenu 									#isReadOnly: false 									#comboList: #defaultFormats ) ) 							#compositeSpec: 							#(#CompositeSpec 								#layout: #(#LayoutFrame 0 0.0 0 0 0 1.0 117 0 ) 								#name: #None ) ) 						#(#LabelSpec 							#layout: #(#AlignmentOrigin 0 0.5 4 0 0.5 0 ) 							#name: #CheckBox 							#label: 'No additional details' ) 						#(#LabelSpec 							#layout: #(#AlignmentOrigin 0 0.5 4 0 0.5 0 ) 							#name: #rowSelector 							#label: 'No additional details' ) 						#(#CompositeSpecCollection 							#collection: #(								#(#LabelSpec 									#layout: #(#Point 111 31 ) 									#label: 'Align:' ) 								#(#LabelSpec 									#layout: #(#Point 0 60 ) 									#label: 'Font:' ) 								#(#LabelSpec 									#layout: #(#Point 0 89 ) 									#label: 'Data Type:' ) 								#(#LabelSpec 									#layout: #(#Point 0 118 ) 									#name: #InputFormatLabel 									#label: 'Format:' ) 								#(#InputFieldSpec 									#layout: #(#LayoutFrame 70 0 0 0.0 0 1.0 25 0 ) 									#name: #InputFieldMenu 									#model: #typeMenu 									#menu: #fieldMenu 									#type: #symbol ) 								#(#InputFieldSpec 									#layout: #(#Rectangle 70 29 109 54 ) 									#name: #InputFieldSize 									#model: #typeSize 									#menu: #fieldMenu 									#alignment: #center 									#type: #number ) 								#(#MenuButtonSpec 									#layout: #(#LayoutFrame 166 0 29 0 0 1.0 54 0 ) 									#name: #InputFieldAlign 									#model: #typeAlign 									#menu: #alignmentMenu ) 								#(#MenuButtonSpec 									#layout: #(#LayoutFrame 70 0 58 0 0 1.0 83 0 ) 									#name: #InputFieldFont 									#model: #typeFont 									#menu: #fontMenu ) 								#(#MenuButtonSpec 									#layout: #(#LayoutFrame 94 0 87 0 0 1.0 112 0 ) 									#name: #InputFieldDataType 									#model: #typeDataType 									#menu: #dataType ) 								#(#ComboBoxSpec 									#layout: #(#LayoutFrame 94 0 116 0 0 1.0 141 0 ) 									#name: #InputFormatEditor 									#model: #formatString 									#menu: #fieldMenu 									#isReadOnly: false 									#comboList: #defaultFormats ) 								#(#LabelSpec 									#layout: #(#Point 0 2 ) 									#label: 'Menu:' ) 								#(#LabelSpec 									#layout: #(#Point 0 31 ) 									#label: 'Chars:' ) ) 							#compositeSpec: 							#(#CompositeSpec 								#layout: #(#LayoutFrame 2 0 0 0 0 1.0 146 0 ) 								#name: #InputField ) ) ) 					#compositeSpec: 					#(#CompositeSpec 						#layout: #(#LayoutFrame 5 0 31 0 -5 1 -10 1 ) 						#name: #fields ) ) 				#(#CompositeSpecCollection 					#collection: #(						#(#CheckBoxSpec 							#layout: #(#Point 47 76 ) 							#model: #displayImages 							#tabable: true 							#label: 'Display Images' ) 						#(#CheckBoxSpec 							#layout: #(#Point 47 97 ) 							#model: #displayLines 							#tabable: true 							#label: 'Display Lines' ) 						#(#CheckBoxSpec 							#layout: #(#Point 47 118 ) 							#model: #displayButtons 							#tabable: true 							#label: 'Display Buttons' ) 						#(#CheckBoxSpec 							#layout: #(#Point 47 140 ) 							#model: #linesAtRoot 							#tabable: true 							#label: 'Lines at Root' ) 						#(#MenuButtonSpec 							#layout: #(#LayoutFrame 48 0 31 0 0 0.962791 54 0 ) 							#name: #InputFieldFont 							#model: #typeFont 							#tabable: true 							#menu: #fontMenu ) 						#(#LabelSpec 							#layout: #(#Point 9 33 ) 							#label: 'Font:' ) 						#(#InputFieldSpec 							#layout: #(#LayoutFrame 48 0 0 0 0 0.960465 23 0 ) 							#name: #TreeViewMenu 							#model: #typeMenu 							#menu: #fieldMenu 							#type: #symbol ) 						#(#LabelSpec 							#layout: #(#Point 3 2 ) 							#label: 'Menu:' ) ) 					#compositeSpec: 					#(#CompositeSpec 						#layout: #(#LayoutFrame 5 0 31 0 -5 1 -10 1 ) 						#name: #TreeView ) ) ) ) )</body></methods><methods><class-id>Aragon.CardScrollerButton class</class-id> <category>resources</category><body package="Aragon.Widgets">leftArrow	"UIMaskEditor new openOnClass: self andSelector: #leftArrow"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 8@7 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[2 0 0 0 14 0 0 0 62 0 0 0 254 0 0 0 62 0 0 0 14 0 0 0 2 0 0 0])</body><body package="Aragon.Widgets">rightArrow	"UIMaskEditor new openOnClass: self andSelector: #rightArrow"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 8@7 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[64 0 0 0 112 0 0 0 124 0 0 0 127 0 0 0 124 0 0 0 112 0 0 0 64 0 0 0])</body></methods><methods><class-id>Aragon.NewDataSetSpec class</class-id> <category>interface specs</category><body package="Aragon.Widgets">basicsEditSpec	"UIPainter new openOnClass: self andSelector: #basicsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 234 315 560 525 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#InputFieldSpec 					#layout: #(#LayoutFrame 86 0 49 0 -14 1 71 0 ) 					#model: #model 					#menu: #fieldMenu ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 86 0 79 0 -14 1 101 0 ) 					#model: #menu 					#menu: #fieldMenu ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 86 0 109 0 -14 1 131 0 ) 					#model: #name 					#menu: #fieldMenu ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 4 0 0.5 0 ) 					#label: #componentName 					#style: #large ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -127 0.5 153 0 -2 0.5 184 0 ) 					#name: #newColumn 					#model: #addColumn 					#label: 'New Column' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 2 0.5 153 0 127 0.5 184 0 ) 					#name: #deleteColumn 					#model: #deleteColumn 					#label: 'Remove Column' 					#defaultable: true ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 79 0 51 0 1 0 ) 					#label: 'Aspect:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 79 0 111 0 1 0 ) 					#label: 'ID:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 79 0 81 0 1 0 ) 					#label: 'Menu:' ) ) ) )</body><body package="Aragon.Widgets">detailsEditSpec	"UIPainter new openOnClass: self andSelector: #detailsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 235 229 ) 			#max: #(#Point 256 333 ) 			#bounds: #(#Rectangle 512 346 768 679 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 4 0 0.5 0 ) 					#label: #componentName 					#style: #large ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame 17 0 44 0 -17 1 99 0 ) 					#label: 'Scroll Bars' ) 				#(#CheckBoxSpec 					#layout: #(#Point 40 67 ) 					#model: #hasHorizontalScrollBar 					#tabable: true 					#label: 'Horizontal' ) 				#(#CheckBoxSpec 					#layout: #(#Point 136 67 ) 					#model: #hasVerticalScrollBar 					#tabable: true 					#label: 'Vertical' ) 				#(#CheckBoxSpec 					#layout: #(#Point 39 113 ) 					#model: #hasBorder 					#tabable: true 					#label: 'Bordered' ) 				#(#CheckBoxSpec 					#layout: #(#Point 39 131 ) 					#model: #isOpaque 					#tabable: true 					#label: 'Opaque' ) 				#(#CheckBoxSpec 					#layout: #(#Point 39 149 ) 					#model: #tabable 					#tabable: true 					#label: 'Can Tab' ) 				#(#CheckBoxSpec 					#layout: #(#Point 39 173 ) 					#model: #initiallyInvisible 					#tabable: true 					#label: 'Initially Invisible' ) 				#(#CheckBoxSpec 					#layout: #(#Point 39 191 ) 					#model: #initiallyDisabled 					#tabable: true 					#label: 'Initially Disabled' ) 				#(#CheckBoxSpec 					#layout: #(#Point 39 210 ) 					#model: #initiallyUseEditingMode 					#tabable: true 					#label: 'Initially use Editing Mode' ) 				#(#CheckBoxSpec 					#layout: #(#Point 18 238 ) 					#model: #multipleSelections 					#tabable: true 					#label: 'Multi Select' ) 				#(#CheckBoxSpec 					#layout: #(#Point 18 257 ) 					#model: #useModifierKeys 					#tabable: true 					#label: 'Use Modifier Keys For Multi Select' ) ) ) )</body><body package="Aragon.Widgets">enhancedEditSpec	"UIPainter new openOnClass: self andSelector: #enhancedEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 235 229 ) 			#max: #(#Point 256 333 ) 			#bounds: #(#Rectangle 161 280 417 613 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 4 0 0.5 0 ) 					#label: #componentName 					#style: #large ) 				#(#CheckBoxSpec 					#layout: #(#Point 29 241 ) 					#model: #multipleSelections 					#tabable: true 					#label: 'Multi Select' ) 				#(#CheckBoxSpec 					#layout: #(#Point 29 259 ) 					#model: #useModifierKeys 					#tabable: true 					#label: 'with Modifier Keys' ) 				#(#CheckBoxSpec 					#layout: #(#Point 43 197 ) 					#model: #initiallyUseEditingMode 					#tabable: true 					#label: 'Initially use Editing Mode' ) 				#(#CheckBoxSpec 					#layout: #(#Point 43 214 ) 					#model: #useDecoratedEditors 					#tabable: true 					#label: 'Use Decorated Editors' ) 				#(#CheckBoxSpec 					#layout: #(#Point 43 152 ) 					#model: #allowForColumnDragging 					#tabable: true 					#label: 'Allow for Column Dragging' ) 				#(#CheckBoxSpec 					#layout: #(#Point 43 111 ) 					#name: #showLabels 					#model: #showLabels 					#tabable: true 					#label: 'Show Columns Labels' ) 				#(#CheckBoxSpec 					#layout: #(#Point 46 65 ) 					#name: #showHorizontalLines 					#model: #showHorizontalLines 					#tabable: true 					#label: 'Horizontal' ) 				#(#CheckBoxSpec 					#layout: #(#Point 148 65 ) 					#name: #showVerticalLines 					#model: #showVerticalLines 					#tabable: true 					#label: 'Vertical' ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame 26 0 44 0 -26 1 95 0 ) 					#label: 'Show Grid Lines' ) 				#(#CheckBoxSpec 					#layout: #(#Point 43 128 ) 					#model: #rowIndicator 					#tabable: true 					#label: 'Show Row Selectors' ) 				#(#CheckBoxSpec 					#layout: #(#Point 43 169 ) 					#model: #allowForSorting 					#tabable: true 					#label: 'Allow for Sorting' ) ) ) )</body></methods><methods><class-id>Aragon.NewDataSetSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 4368 scaledGreen: 0 scaledBlue: 0); at: 3 put: (ColorValue scaledRed: 6552 scaledGreen: 6552 scaledBlue: 6552); at: 4 put: (ColorValue scaledRed: 3822 scaledGreen: 3822 scaledBlue: 3822); at: 5 put: ColorValue white; at: 6 put: (ColorValue scaledRed: 5460 scaledGreen: 5460 scaledBlue: 5460); at: 7 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4368); yourself)) usingBits: (ByteArray fromPackedString: 'QDQDQDQDQDQDQDQDP@@@@DH"H"H"H"H"H"H"H#@@@@ABH"H"H"H"H"H"H"H0@@@@P"H"H"H"H"H"H"H"L@@@@DH @@@@@@@@@@@BH#@@@@ABHEUUYUUVUUUU@"H0@@@@P"AQUVUUU%UUUPH"L@@@@DH UUU%UUYUUUTBH#@@@@ABHFY&amp;Y&amp;Y&amp;Y&amp;Y&amp;@"H0@@@@P"AUUVQDQ$QDQ@H"L@@@@DH TUU$QDYDQDPBH#@@@@ABHEUUYDQFQDQD@"H0@@@@P"A&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y H"L@@@@DH UUU$QDYDQDPBH#@@@@ABHEEUYDQFQDQD@"H0@@@@P"AUUVQDQ$QDQ@H"L@@@@DH Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;XBH#@@@@ABHEUUYDQFQDQD@"H0@@@@P"AQUVQDQ$QDQ@H"L@@@@DH UUU$QDYDQDPBH#@@@@ABH@@@@@@@@@@@@"H0@@@@P"H"H"H"H"H"H"H"L@@@@DH"H"H"H"H"H"H"H#@@@@ABH"H"H"H"H"H"H"H0@@@@P3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="Aragon.Widgets">paletteImage	"UIMaskEditor new openOnClass: self andSelector: #paletteImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 4368 scaledGreen: 0 scaledBlue: 0); at: 3 put: (ColorValue scaledRed: 6552 scaledGreen: 6552 scaledBlue: 6552); at: 4 put: (ColorValue scaledRed: 3822 scaledGreen: 3822 scaledBlue: 3822); at: 5 put: ColorValue white; at: 6 put: (ColorValue scaledRed: 5460 scaledGreen: 5460 scaledBlue: 5460); at: 7 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4368); yourself)) usingBits: (ByteArray fromPackedString: 'QDQDQDQDQDQDQDQDP@@@@DH"H"H"H"H"H"H"H#@@@@ABH"H"H"H"H"H"H"H0@@@@P"H"H"H"H"H"H"H"L@@@@DH$QDQDQDQDQDQBH#@@@@ABIEUUYUUVUUUU@"H0@@@@P"QQUVUUU%UUUPH"L@@@@DH$UUU%UUYUUUTBH#@@@@ABIFY&amp;Y&amp;Y&amp;Y&amp;Y&amp;@"H0@@@@P"QUUVQDQ$QDQ@H"L@@@@DH$TUU$QDYDQDPBH#@@@@ABIEUUYDQFQDQD@"H0@@@@P"Q&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y H"L@@@@DH$UUU$QDYDQDPBH#@@@@ABIEEUYDQFQDQD@"H0@@@@P"QUUVQDQ$QDQ@H"L@@@@DH$Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;XBH#@@@@ABIEUUYDQFQDQD@"H0@@@@P"QQUVQDQ$QDQ@H"L@@@@DH$UUU$QDYDQDPBH#@@@@ABI@@@@@@@@@@@@"H0@@@@P"H"H"H"H"H"H"H"L@@@@DH"H"H"H"H"H"H"H#@@@@ABH"H"H"H"H"H"H"H0@@@@P3L3L3L3L3L3L3L3L@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="Aragon.Widgets">paletteShape	"UIMaskEditor new openOnClass: self andSelector: #paletteShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 31 255 248 0 31 255 248 0 31 255 248 0 31 255 248 0 31 255 248 0 31 255 248 0 31 255 248 0 31 255 248 0 31 255 248 0 31 255 248 0 31 255 248 0 31 255 248 0 31 255 248 0 31 255 248 0 31 255 248 0 31 255 248 0 31 255 248 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Aragon.CardViewSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 5) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6552 scaledGreen: 6552 scaledBlue: 6552); at: 3 put: (ColorValue scaledRed: 3822 scaledGreen: 3822 scaledBlue: 3822); at: 4 put: ColorValue white; at: 5 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: (ByteArray fromPackedString: 'L3L3L3L3L3L3L3L3L@@@@CDQDQDQDQDQDQDQDR@@@@@1DQDQDQDQDQDQDQD @@@@LQDQDQDQDQDQDQDQH@@@@CDQDSL3L3L3DQDSL2@@@@@1DQL1DQDQDPDQL1D @@@@LQDSDPDADQE@DSDQH@@@@CDQL1DA@PDADAL1DR@@@@@1DSDPDADA@QPCDQD @@@@LQL1DA@PDADQ@QDQH@@@@CD3DQDQDQDQDT@QDR@@@@@1LQDQDQDQDQDTP3L @@@@LSDQDQDQDQDQDQDQH@@@@CD1DQDQDQDQDQDQDR@@@@@1LQDQDQDQDQDQDQD @@@@LSDQDQDQDQDQDQDQH@@@@CD1DQDQDQDQDQDQDR@@@@@1LQDQDQDQDQDQDQD @@@@LSDQDQDQDQDQDQDQH@@@@CD1DQDQDQDQDQDQDR@@@@@1MDQDQDQDQDQDQDD @@@@LP@@@@@@@@@@@@@AH@@@@CDQDQDQDQDQDQDQDR@@@@@1DQDQDQDQDQDQDQD @@@@L"H"H"H"H"H"H"H"H@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="Aragon.Widgets">paletteImage	"UIMaskEditor new openOnClass: self andSelector: #paletteImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue white; at: 3 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: (ByteArray fromPackedString: 'UUUUUUUUT@AUUUUUUUUP@EUUUUUUUU@@UUUUUUUUT@AUUUUUUUUP@EUUUUTUUU@@UUTQUXUUT@AUUQDQQUUP@EUTQQE!UU@@UUQDQUEUT@AUUUUUVEUP@EUUUUUV%U@@UUUUUUUUT@AUUUUUUUUP@EUUUUUUUU@@UUUUUUUUT@AUUUUUUUUP@EUUUUUUUU@@UUUUUUUUT@AUUUUUUUUP@EZ******U@@T@@@@@@AT@AUUUUUUUUP@EUUUUUUUU@@UUUUUUUUT@AUUUUUUUUP@@@a'))</body><body package="Aragon.Widgets">paletteMonoIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 255 7 0 6 0 140 0 4 160 200 0 12 170 88 0 9 74 112 0 25 84 32 0 48 0 48 0 32 0 31 0 32 0 0 0 32 0 0 0 32 0 0 0 32 0 0 0 32 0 0 0 32 0 0 0 32 0 0 0 32 0 0 0 63 255 254 0 63 255 254 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Aragon.CardViewSpec class</class-id> <category>interface specs</category><body package="Aragon.Widgets">_basicsEditSpec	"UIPainter new openOnClass: self andSelector: #_basicsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 300 206 ) 			#max: #(#Point 300 206 ) 			#bounds: #(#Rectangle 303 405 603 611 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 7 0 0.5 0 ) 					#label: #componentName 					#style: #large ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 70 0 78 0 1 1 ) 					#label: 'Aspect:' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 77 0 56 0 -20 1 79 0 ) 					#model: #model 					#menu: #fieldMenu ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 70 0 102 0 1 1 ) 					#label: 'ID:' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 77 0 82 0 -20 1 105 0 ) 					#model: #name 					#menu: #fieldMenu ) 				#(#SubCanvasSpec 					#layout: #(#LayoutFrame 0 0 114 0 0 1 0 1 ) 					#flags: 0 					#majorKey: #CardViewLabelsConstructor 					#minorKey: #labelsSpec 					#clientKey: #cardViewLabelsConstructor ) ) ) )</body><body package="Aragon.Widgets">basicsEditSpec	"UIPainter new openOnClass: self andSelector: #basicsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 300 206 ) 			#max: #(#Point 300 206 ) 			#bounds: #(#Rectangle 303 405 603 611 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 7 0 0.5 0 ) 					#label: #componentName 					#style: #large ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 70 0 78 0 1 1 ) 					#label: 'Aspect:' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 77 0 56 0 -20 1 79 0 ) 					#model: #model 					#menu: #fieldMenu ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 70 0 102 0 1 1 ) 					#label: 'ID:' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 77 0 82 0 -20 1 105 0 ) 					#model: #name 					#menu: #fieldMenu ) 				#(#CheckBoxSpec 					#layout: #(#Point 76 118 ) 					#model: #buildPages 					#tabable: true 					#label: 'View builds Pages' ) 				#(#CheckBoxSpec 					#layout: #(#Point 76 137 ) 					#model: #cachePages 					#tabable: true 					#label: 'Cache built Pages' ) ) ) )</body><body package="Aragon.Widgets">detailsEditSpec	"UIPainter new openOnClass: self andSelector: #detailsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 238 239 ) 			#max: #(#Point 238 239 ) 			#bounds: #(#Rectangle 521 393 759 632 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 19 0 0.5 0 ) 					#label: #componentName 					#style: #large ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 60 0 92 0 1 1 ) 					#label: 'Font:' ) 				#(#MenuButtonSpec 					#layout: #(#LayoutFrame 64 0 71 0 -22 1 93 0 ) 					#model: #style 					#menu: #fontMenu ) 				#(#CheckBoxSpec 					#layout: #(#Point 64 112 ) 					#model: #isDecorated 					#tabable: true 					#label: 'Bordered' ) 				#(#CheckBoxSpec 					#layout: #(#Point 64 130 ) 					#model: #tabable 					#tabable: true 					#label: 'Can Tab' ) 				#(#CheckBoxSpec 					#layout: #(#Point 64 158 ) 					#model: #initiallyDisabled 					#tabable: true 					#label: 'Initially Disabled' ) 				#(#CheckBoxSpec 					#layout: #(#Point 64 176 ) 					#model: #initiallyInvisible 					#tabable: true 					#label: 'Initially Invisible' ) 				#(#CheckBoxSpec 					#layout: #(#Point 64 204 ) 					#model: #buildPages 					#tabable: true 					#label: 'View builds Pages' ) 				#(#CheckBoxSpec 					#layout: #(#Point 64 222 ) 					#model: #cachePages 					#tabable: true 					#label: 'Cache built Pages' ) ) ) )</body></methods><methods><class-id>Aragon.TreeViewSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 6) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6552 scaledGreen: 6552 scaledBlue: 6552); at: 3 put: (ColorValue scaledRed: 3822 scaledGreen: 3822 scaledBlue: 3822); at: 4 put: ColorValue white; at: 5 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); at: 6 put: (ColorValue scaledRed: 0 scaledGreen: 4914 scaledBlue: 8191); yourself)) usingBits: (ByteArray fromPackedString: 'L3L3L3L3L3L3L3L3L@@@@CDQDQDQDQDQDQDQDR@@@@@1DQDQDQDQDQDQDQD @@@@LQDQDQDQDQDQDQDQH@@@@CDQ@@@@@@@@@@@@DR@@@@@1DPL3L3L3L3LCLAD @@@@LQDCL3L3L3L3@3@QH@@@@CDQ@0@@@@@@L0@@DR@@@@@1DPL4L3L3L3LETAD @@@@LQDCMCL3L3L3AU@QH@@@@CDQ@3Q@@@@@L0UPDR@@@@@1DPL4L4L3L3LETAD @@@@LQDCMCMD@@@CAU@QH@@@@CDQ@3P3P3L3L0UPDR@@@@@1DPL4L4P@@3LETAD @@@@LQDCMCL3L3L3AU@QH@@@@CDQ@3P3L3L3L0UPDR@@@@@1DPL4P@@@@CLETAD @@@@LQDCL3L3L3L3@@@QH@@@@CDQ@3L3L3L3L0L0DR@@@@@1DPL3L3L3L3LCLAD @@@@LQD@@@@@@@@@@@@QH@@@@CDQDQDQDQDQDQDQDR@@@@@1DQDQDQDQDQDQDQD @@@@L"H"H"H"H"H"H"H"H@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="Aragon.Widgets">paletteMonoIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[255 255 255 192 128 0 0 192 191 255 255 192 191 255 255 192 191 255 255 192 184 0 39 192 184 0 39 192 187 255 63 192 185 0 63 192 185 0 63 192 185 255 63 192 185 32 63 192 185 63 191 192 185 32 63 192 185 62 63 192 185 0 63 192 185 0 63 192 185 255 63 192 184 0 63 192 184 0 39 192 184 0 39 192 191 255 255 192 191 255 255 192 191 255 255 192 255 255 255 192 255 255 255 192])</body><body package="Aragon.Widgets">paletteShape	"UIMaskEditor new openOnClass: self andSelector: #paletteShape"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 15 255 252 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Aragon.TreeViewSpec class</class-id> <category>interface specs</category><body package="Aragon.Widgets">basicsEditSpec	"UIPainter new openOnClass: self andSelector: #basicsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 490 409 790 638 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 7 0 0.5 0 ) 					#label: #componentName 					#style: #large ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 72 0 49 0 1 0 ) 					#label: 'Aspect:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 72 0 93 0 1 0 ) 					#label: 'ID:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 72 0 71 0 1 0 ) 					#label: 'Menu:' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 78 0 49 0 -18 1 70 0 ) 					#model: #model 					#menu: #fieldMenu ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 78 0 71 0 -18 1 92 0 ) 					#model: #menu 					#menu: #fieldMenu ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 78 0 93 0 -18 1 114 0 ) 					#model: #name 					#menu: #fieldMenu ) 				#(#CheckBoxSpec 					#layout: #(#Point 30 131 ) 					#model: #displayImages 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#tabable: true 					#label: 'Display Images' ) 				#(#CheckBoxSpec 					#layout: #(#Point 30 152 ) 					#model: #displayLines 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#tabable: true 					#label: 'Display Lines' ) 				#(#CheckBoxSpec 					#layout: #(#Point 30 173 ) 					#model: #displayButtons 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#tabable: true 					#label: 'Display Buttons' ) 				#(#CheckBoxSpec 					#layout: #(#Point 30 195 ) 					#model: #linesAtRoot 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#tabable: true 					#label: 'Lines at Root' ) ) ) )</body></methods><methods><class-id>Aragon.EnhancedLabelSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 3 bitsPerPixel: 4 palette: (MappedPalette withColors: ((Array new: 7) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 6552 scaledGreen: 6552 scaledBlue: 6552); at: 3 put: (ColorValue scaledRed: 3822 scaledGreen: 3822 scaledBlue: 3822); at: 4 put: ColorValue white; at: 5 put: (ColorValue scaledRed: 5460 scaledGreen: 5460 scaledBlue: 5460); at: 6 put: (ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); at: 7 put: (ColorValue scaledRed: 4111 scaledGreen: 0 scaledBlue: 0); yourself)) usingBits: (ByteArray fromPackedString: 'L3L3L3L3L3L3L3L3L@@@@CDQDQDQDQDQDQDQDR@@@@@1DQDQDQDQDQDQDQD @@@@LQDQDQDQDQDQDQDQH@@@@CDQDQDQDQDQDQDQDR@@@@@1DQDQDQDQDQDQDQD @@@@LQDQDQDQXQDQDQDQH@@@@CDQDQDQDVDQDQDQDR@@@@@1DQDQDQY&amp;DQDQDQD @@@@LQDQDQDVY!DQDQDQH@@@@CDQDQDQYFY!DQDQDR@@@@@1DQDQDVDVXQDQDQD @@@@LQDQDQYAE&amp;XQDQDQH@@@@CDQDQDVDQE&amp;DQDQDR@@@@@1DQDQYADQY&amp;DQDQD @@@@LQDQDVY&amp;Y&amp;Y!DQDQH@@@@CDQDQYADQDVY!DQDR@@@@@1DQDVPQDQDVXQDQD @@@@LQDQYADQDQE&amp;XQDQH@@@@CDQE&amp;Y!DQDVY&amp;XQDR@@@@@1DQDQDQDQDQDQDQEP@@@@LQDQDQDQDQDQDQDQH@@@@CDQDQDQDQDQDQDQDR@@@@@1DQDQDQDQDQDQDQD @@@@L"H"H"H"H"H"H"H"H@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="Aragon.Widgets">paletteImage	"UIMaskEditor new openOnClass: self andSelector: #paletteImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: (ColorValue scaledRed: 5460 scaledGreen: 5460 scaledBlue: 5460); at: 2 put: (ColorValue scaledRed: 4111 scaledGreen: 0 scaledBlue: 0); at: 3 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '********(@B******** @J********@@********(@B******** @J********@@****Z***(@B***)**** @J***U****@@***)V***(@B***QV*** @J**))Z***@@***R%Z**(@B**)*%*** @J**R*U***@@**)UUV**(@B**R*)V** @J*)J*)Z**@@**R**%Z*(@B*%V*)UZ* @J********@@********(@B******** @J********@@********(@B******** @@@a'))</body><body package="Aragon.Widgets">paletteMonoIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 0 0 0 8 0 0 0 28 0 0 0 28 0 0 0 62 0 0 0 38 0 0 0 103 0 0 0 67 0 0 0 195 128 0 0 255 128 0 1 129 192 0 1 128 192 0 3 0 224 0 7 129 240 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Aragon.EnhancedLabelSpec class</class-id> <category>interface specs</category><body package="Aragon.Widgets">detailsEditSpec	"UIPainter new openOnClass: self andSelector: #detailsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 301 127 ) 			#max: #(#Point 301 325 ) 			#bounds: #(#Rectangle 490 413 791 738 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#Point 11 66 ) 					#label: 'Font:' ) 				#(#MenuButtonSpec 					#layout: #(#LayoutFrame 54 0 64 0 -12 1 86 0 ) 					#model: #style 					#menu: #fontMenu ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.501661 0 0 0.5 0 ) 					#label: #componentName 					#style: #large ) 				#(#CheckBoxSpec 					#layout: #(#Point 52 96 ) 					#model: #isOpaque 					#tabable: true 					#label: 'Opaque' ) 				#(#CheckBoxSpec 					#layout: #(#Point 52 115 ) 					#model: #initiallyDisabled 					#tabable: true 					#label: 'Initially Disabled' ) 				#(#CheckBoxSpec 					#layout: #(#Point 52 135 ) 					#model: #initiallyInvisible 					#tabable: true 					#label: 'Initially Invisible' ) 				#(#DividerSpec 					#layout: #(#LayoutFrame 0 0 37 0 0 1 41 0 ) ) 				#(#TextEditorSpec 					#layout: #(#LayoutFrame 14 0 190 0 -14 1 -14 1 ) 					#model: #label ) 				#(#LabelSpec 					#layout: #(#Point 12 173 ) 					#label: 'Enter the complete label text here:' ) ) ) )</body></methods><methods><class-id>Aragon.GaugeSpec class</class-id> <category>resources</category><body package="Aragon.Widgets">paletteImage	"UIMaskEditor new openOnClass: self andSelector: #paletteImage"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: (ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4111); at: 3 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '********(@B******** @J********@@********(@B******** @J********@@********(@B******** @J@@@@@@@J@@(*******(@B"UYU%V** @JIU%VUZ**@@(%VUYU**(@B"UYU%V** @JIU%VUZ**@@(%VUYU**(@B"******* @JJ*******@@********(@B******** @J********@@********(@B******** @J********@@********(@B******** @@@a'))</body><body package="Aragon.Widgets">paletteMonoIcon	"UIMaskEditor new openOnClass: self andSelector: #paletteMonoIcon"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 26@26 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 255 255 0 32 0 1 0 47 123 193 0 47 123 193 0 47 123 193 0 47 123 193 0 47 123 193 0 47 123 193 0 32 0 1 0 63 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body></methods><methods><class-id>Aragon.GaugeSpec class</class-id> <category>interface specs</category><body package="Aragon.Widgets">basicsEditSpec	"UIPainter new openOnClass: self andSelector: #basicsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 503 355 778 669 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 4 0 0.5 0 ) 					#label: #componentName ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 22 0 60 0 0 1 ) 					#label: 'Aspect:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 22 0 149 0 0 1 ) 					#label: 'Stop:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 22 0 87 0 0 1 ) 					#label: 'ID:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 22 0 121 0 0 1 ) 					#label: 'Start:' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 86 0 33 0 -10 1 58 0 ) 					#model: #model 					#menu: #fieldMenu ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 86 0 60 0 -10 1 85 0 ) 					#model: #name 					#menu: #fieldMenu ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 86 94 176 119 ) 					#model: #start 					#menu: #fieldMenu ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 86 122 176 147 ) 					#model: #stop 					#menu: #fieldMenu ) 				#(#CheckBoxSpec 					#layout: #(#Point 84 177 ) 					#model: #isDecorated 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#tabable: true 					#label: 'Bordered' ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame 24 0 224 0 -24 1 283 0 ) 					#label: 'Style' ) 				#(#RadioButtonSpec 					#layout: #(#Point 41 252 ) 					#model: #style 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#label: 'Continuous' 					#select: #continuous ) 				#(#RadioButtonSpec 					#layout: #(#Point 156 252 ) 					#model: #style 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#label: 'Discrete' 					#select: #discrete ) 				#(#CheckBoxSpec 					#layout: #(#Point 84 195 ) 					#model: #initiallyInvisible 					#label: 'Initially &amp;Invisible' ) 				#(#CheckBoxSpec 					#layout: #(#Point 84 159 ) 					#model: #isProgressBar 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #apply ) 					#tabable: true 					#label: 'Progress Bar' ) ) ) )</body></methods><methods><class-id>Aragon.CardViewLabelsConstructor class</class-id> <category>interface specs</category><body package="Aragon.Widgets">labelsSpec	"UIPainter new openOnClass: self andSelector: #labelsSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 300 206 ) 			#max: #(#Point 300 206 ) 			#bounds: #(#Rectangle 490 409 790 615 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin 70 0 37 0 1 1 ) 					#label: 'Labels:' ) 				#(#TextEditorSpec 					#layout: #(#LayoutFrame 77 0 41 0 -20 1 -20 1 ) 					#name: #labels 					#colors: 					#(#LookPreferences 						#setBackgroundColor: #(#ColorValue #white ) ) 					#model: #labels 					#tabable: true ) 				#(#CheckBoxSpec 					#layout: #(#Point 77 16 ) 					#name: #labelSuppliedByApplication 					#model: #labelSuppliedByApplication 					#label: 'Supplied by Application' ) ) ) )</body></methods><methods><class-id>Aragon.CardView class</class-id> <category>resources</category><body package="Aragon.Widgets">leftArrow	"UIMaskEditor new openOnClass: self andSelector: #leftArrow"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 8@7 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[2 0 0 0 14 0 0 0 62 0 0 0 254 0 0 0 62 0 0 0 14 0 0 0 2 0 0 0])</body><body package="Aragon.Widgets">rightArrow	"UIMaskEditor new openOnClass: self andSelector: #rightArrow"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 8@7 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[64 0 0 0 112 0 0 0 124 0 0 0 127 0 0 0 124 0 0 0 112 0 0 0 64 0 0 0])</body></methods><initialize><class-id>Aragon.TreeViewDirectorySelector</class-id></initialize><initialize><class-id>Aragon.NewDataSetView</class-id></initialize><initialize><class-id>Aragon.EnhancedGroupBoxSpec</class-id></initialize><initialize><class-id>Aragon.TreeView</class-id></initialize><initialize><class-id>Aragon.ResizerView</class-id></initialize><initialize><class-id>Aragon.ResizerSpec</class-id></initialize><initialize><class-id>Aragon.StoredImage</class-id></initialize><initialize><class-id>Aragon.StoredOpaqueImage</class-id></initialize><initialize><class-id>Aragon.EnhancedActionButtonSpec</class-id></initialize><initialize><class-id>Aragon.NewDataSetSpec</class-id></initialize><initialize><class-id>Aragon.CardViewSpec</class-id></initialize><initialize><class-id>Aragon.TreeController</class-id></initialize><initialize><class-id>Aragon.TreeViewSpec</class-id></initialize><initialize><class-id>Aragon.NewRowVisual</class-id></initialize><initialize><class-id>Aragon.TextStyle</class-id></initialize><initialize><class-id>Aragon.EnhancedLabelSpec</class-id></initialize><initialize><class-id>Aragon.Font</class-id></initialize><initialize><class-id>Aragon.GaugeSpec</class-id></initialize><initialize><class-id>Aragon.NewDataSetController</class-id></initialize><initialize><class-id>Aragon.CardView</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>CharacterAttributes</name><environment>Graphics</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>attributes sharedAttributes defaultQuery queryCache policyCache </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Fonts</category><attributes><package>Graphics-Fonts</package></attributes></class><class><name>VisualComponent</name><environment>Graphics</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Visual Objects</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>VisualPart</name><environment>Graphics</environment><super>Graphics.VisualComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>container eventHandlers properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Visual Objects</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>SimpleView</name><environment>UI</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>state </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Support</category><attributes><package>UIBasics-Support</package></attributes></class><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>Controller</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>ActionButtonView</name><environment>UI</environment><super>UI.PushButtonView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category><attributes><package>UIBasics-Components</package></attributes></class><class><name>WidgetSpec</name><environment>UI</environment><super>UI.NamedSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model callbacksSpec tabable helpText helpField </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>NSEmulatedSequenceController</name><environment>Aragon</environment><super>UI.EmulatedSequenceController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Aragon.Core.UI.SequenceView</category><attributes><package>Aragon.Shared</package></attributes></class><class><name>SubCanvas</name><environment>UI</environment><super>Graphics.CompositePart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>client </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category><attributes><package>UIBasics-Components</package></attributes></class><class><name>UIPalette</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>activeSpecs toolName currentLookPolicy stickyStatus </inst-vars><class-inst-vars>selectIcon stickyIcon </class-inst-vars><imports></imports><category>UIPainter-Tools</category><attributes><package>UIPainter</package></attributes></class><class><name>TextAttributes</name><environment>Graphics</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lineGrid baseline alignment firstIndent restIndent rightIndent tabsArray equalTabs characterAttributes tabsArePositions factoryBlock </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>Graphics-Fonts</category><attributes><package>Graphics-Fonts</package></attributes></class><class><name>SequenceViewSpec</name><environment>UI</environment><super>UI.MenuComponentSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>multipleSelections style useModifierKeys selectionType autoSelect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>SequenceableCollection</name><environment>Core</environment><super>Core.Collection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>DataSetScrollWrapper</name><environment>UI</environment><super>UI.ScrollWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Datasets</category><attributes><package>UIBasics-Datasets</package></attributes></class><class><name>InputFieldSpec</name><environment>UI</environment><super>UI.TextEditorSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type formatString </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>ActionButtonSpec</name><environment>UI</environment><super>UI.ButtonSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isDefault defaultable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>GroupBoxSpec</name><environment>UI</environment><super>UI.NamedSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label style hasCharacterOrientedLabel mnemonic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>DataSetColumn</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>width offset noScroll description editModel rendererSpec labelSpec editorSpec builder label callbacksSpec sortIndicator allowSorting allowResizing </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Datasets</category><attributes><package>UIBasics-Datasets</package></attributes></class><class><name>DataSetSpec</name><environment>UI</environment><super>UI.MenuComponentSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>columns verticalPolicy horizontalPolicy multipleSelections labelsAsButtons </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>PassiveLabel</name><environment>UI</environment><super>UI.SimpleComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label textStyle margin mnemonic controller artist allowRestyle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category><attributes><package>UIBasics-Components</package></attributes></class><class><name>InputFieldView</name><environment>UI</environment><super>UI.TextEditorView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inset converter editTextCache </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category><attributes><package>UIBasics-Components</package></attributes></class><class><name>SelectController</name><environment>UI</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>keyboardHook dispatcher </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Controllers</category><attributes><package>UIBasics-Controllers</package></attributes></class><class><name>TriggerButtonController</name><environment>UI</environment><super>UI.BasicButtonController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Controllers</category><attributes><package>UIBasics-Controllers</package></attributes></class><class><name>DataSetSpecColumnDetailsModel</name><environment>Tools</environment><super>Tools.IntegratedSpecModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectionChannel currentColumn modelGen columnType changedBlock typeChoices typeSize typePopup typeAlign typeMenu typeFont typeDataType typeDataFormat defaultFormats lock readSelector printSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Support</category><attributes><package>UIPainter</package></attributes></class><class><name>SliderSpec</name><environment>UI</environment><super>UI.WidgetSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>orientation start stop step </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>UILookPolicy</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>systemAttributes systemWidgetAttributes useSystemFontOnWidgets systemMenuAttributes </class-inst-vars><imports></imports><category>UIBuilder-Support</category><attributes><package>UIBuilder-Support</package></attributes></class><class><name>DataSetSpecColumnModel</name><environment>Tools</environment><super>Tools.IntegratedSpecModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectionChannel currentColumn label labelFromApplication width labelFont modelGen columnType changedBlock labelIsImage frozen lock allowSorting allowResizing </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIPainter-Support</category><attributes><package>UIPainter</package></attributes></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView useParentColors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category><attributes><package>Interface-Dialogs</package></attributes></class><class><name>EnhancedSequenceView</name><environment>Aragon</environment><super>Aragon.NSMultiSelectionSequenceView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectionMode </inst-vars><class-inst-vars>deselectOnReselection useStandardHiliting </class-inst-vars><imports></imports><category>Aragon.Core.UI.SequenceView</category><attributes><package>Aragon.Shared</package></attributes></class><class><name>LensDataManager</name><environment>Lens</environment><super>Lens.LensApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rows row trigger rowCount isEditing isCreating isDirty lockPolicy </inst-vars><class-inst-vars>rowType </class-inst-vars><imports></imports><category>Lens-Applications-Framework</category><attributes><package>Lens-Runtime</package></attributes></class><class><name>LabelSpec</name><environment>UI</environment><super>UI.NamedSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label style hasCharacterOrientedLabel mnemonic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class><class><name>MultiSelectionInList</name><environment>UI</environment><super>UI.SelectionInList</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Collections</category><attributes><package>UIBasics-Collections</package></attributes></class></st-source>