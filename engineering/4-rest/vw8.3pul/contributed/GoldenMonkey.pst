<?xml version="1.0"?><st-source><!-- Name: GoldenMonkeyComment: Russ Pencin, a former ParcPlace employee, developed this mines like game.A first sighting of the monkey was around the VisualWorks 1.0 timeframe. Since then it has been upgraded to various versions of VisualWorks.You can find more out about Russ and his contributions to theSmalltalk community at:	http://www.smalltalkbrewery.comIts sole class lives in the Examples namespace.See the class comment for GoldenMonkey for implementation details.DbIdentifier: bear73DbTrace: 443629DbUsername: kgreekDbVersion: 8.0PackageName: GoldenMonkeyParcel: #('GoldenMonkey')ParcelName: GoldenMonkeyPrintStringCache: (8.0,kgreek)Version: 8.0Date: 10:03:16 AM August 1, 2014 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.0 (aug14.1) of August 1, 2014 on August 1, 2014 at 10:03:16 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>GoldenMonkey</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gameBoard gameGrid currentCell totalScore totalScoreString </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Games</category><attributes><package>GoldenMonkey</package></attributes></class><comment><class-id>Examples.GoldenMonkey</class-id><body>GoldenMonkey is a simple maze game that demonstrates the use of a TableView to handle a game framework.The rules of the game are:	You can move in any of 8 directions from your current location (indicated by the feet).	The numbers on an uncovered tile indicate the number of tiles that will be uncovered.	You cannot step on a tile that is already uncovered.	You cannot step on a Spider.Instance Variables	gameBoard	&lt;TableInterface&gt;	gameGrid		&lt;TwoDList on an Array of Associations&gt;	currentCell	&lt;Point&gt;	totalScore	&lt;ValueHolder&gt;Class Variables	Columns		&lt;Number&gt;	number of columns in the table	Rows		&lt;Number&gt;	number of rows in the table	DefaultTileSize		&lt;Point&gt;	extent of the tile pixmaps	Visuals		&lt;Dictionary&gt;	list of associations of pixmaps</body></comment><shared-variable><name>Columns</name><environment>Examples.GoldenMonkey</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>GoldenMonkey</package></attributes></shared-variable><shared-variable><name>Visuals</name><environment>Examples.GoldenMonkey</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>GoldenMonkey</package></attributes></shared-variable><shared-variable><name>DefaultTileSize</name><environment>Examples.GoldenMonkey</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>GoldenMonkey</package></attributes></shared-variable><shared-variable><name>Rows</name><environment>Examples.GoldenMonkey</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>GoldenMonkey</package></attributes></shared-variable><methods><class-id>Examples.GoldenMonkey</class-id> <category>actions</category><body package="GoldenMonkey">changedSelection	"When the selection in the table changes, it will inform us. First unhook from the Table because we will 	be changing the index and don't want him to interrupt us. Check that the new selection is legal. 	Resolve the cell selected, if it is resolvable, set the new current cell. If not, notify the user he blew it.. 	Finally, rehook the notification of selection change."	| selTab newCell direction |	selTab := self gameBoard selectionInTable.	selTab selectionIndexHolder retractInterestsFor: self.	newCell := selTab selectionIndex.	direction := newCell - currentCell.	(direction x abs &gt; 1 or: [direction y abs &gt; 1])		ifTrue: [selTab selectionIndex: currentCell]		ifFalse: [(self resolveCell: newCell for: direction)				ifFalse: 					[Dialog warn: 'YOU BLEW IT!'.					self reinitializeGrid]				ifTrue: 					[self currentCell: selTab selectionIndex.					selTab table atPoint: self currentCell put: #feet -&gt; (Visuals at: #feet)]].	selTab selectionIndexHolder onChangeSend: #changedSelection to: self</body><body package="GoldenMonkey">incrementTotalScore: amount	self totalScore value: (self totalScore value + amount).</body><body package="GoldenMonkey">resolveCell: newCell for: aDirection 	"This is the heart of the game. All of the logic for uncovering tiles and checking for off the board and 	crossing uncovered tiles or touchinf Spiders is here."	| selTable table value ndx |	"self halt."	selTable := self gameBoard selectionInTable.	table := selTable table.	value := selTable selection key.	value isInteger ifFalse: [^false].	self incrementTotalScore: value.	ndx := selTable selectionIndex.	table atPoint: self currentCell put: #banana -&gt; (Visuals at: #banana).	^Array subscriptOutOfBoundsSignal handle: [:ex | ex returnWith: false]		do: 			[value				timesRepeat: 					[(table atPoint: ndx) key isInteger						ifTrue: [table atPoint: ndx put: #banana -&gt; (Visuals at: #banana)]						ifFalse: [^false].					ndx := ndx + aDirection].			ndx := ndx - aDirection.			(ndx x == 0 or: ["Need to check special case, since subscriptOutOfBounds doesn't 				catch this."				ndx y == 0])				ifTrue: [^false].			selTable selectionIndex: ndx.			true]</body></methods><methods><class-id>Examples.GoldenMonkey</class-id> <category>aspects</category><body package="GoldenMonkey">currentCell	^currentCell</body><body package="GoldenMonkey">currentCell: aPoint	currentCell := aPoint</body><body package="GoldenMonkey">gameBoard	"gameBoard was created by the initialize method"	^gameBoard</body><body package="GoldenMonkey">gameGrid	"gameGrid was created by the initialize method"	^gameGrid</body><body package="GoldenMonkey">gameGrid: twoDArray 	^gameGrid := twoDArray</body><body package="GoldenMonkey">totalScore	"Return the value holder on the current score"	^totalScore isNil		ifTrue: [totalScore := 0 asValue]		ifFalse: [totalScore]</body><body package="GoldenMonkey">totalScoreString	"Thers's got to be a better way - but this is how I did it...."	| tmp |	tmp := BlockValue with:		[self totalScore value printString ,		'        ' ,		(((self totalScore value / (self class rows * self class columns)) asFloat * 100) printString) ,		' %'].	self totalScore addDependent: tmp.	^tmp</body></methods><methods><class-id>Examples.GoldenMonkey</class-id> <category>initialize release</category><body package="GoldenMonkey">defaultGridArray	"Randomly place tiles (associations of pixmaps) in an Array for use with a TwoDList. 	Class variables Rows and Columns allow for programatic resizing of the game board"	| size rand ar rBlock |	size := self class rows * self class columns.	rand := Random new.	rBlock := [:v | (rand next * v) truncated + 1].	ar := Array new: size.	1 to: size		do: 			[:i | 			| r |			r := rBlock value: 9.			ar at: i put: r -&gt; (Visuals at: r)].	(4 max: (rBlock value: 10))		timesRepeat: [ar at: (rBlock value: size) put: #spider -&gt; (Visuals at: #spider)].	^ar</body><body package="GoldenMonkey">initialize	"set up the array of visuals and the appropriate table description"	self initializeGrid.	self initializeTable</body><body package="GoldenMonkey">initializeGrid	"build the TwoDList of visual components to keep track of tiles"	self gameGrid: (TwoDList			on: self defaultGridArray			columns: self class columns			rows: self class rows)</body><body package="GoldenMonkey">initializeTable	"Define the parameter for the Table (i.e. rows, columns, widths), set the starting position. 	Register an interest in the currentSelection in the Table."	| selectionTable index rand |	rand := Random new.	selectionTable := SelectionInTable new.	gameBoard := TableInterface new selectionInTable: selectionTable.	gameBoard columnWidths: self class defaultTileSize x.	gameBoard elementFormats: #centered.	selectionTable table: self gameGrid.	index := selectionTable selectionIndexHolder.	index value: (rand next * self class columns) truncated + 1 @ ((rand next * self class rows) truncated + 1).	selectionTable table at: index value put: #feet -&gt; (Visuals at: #feet).	self currentCell: index value.	index onChangeSend: #changedSelection to: self</body><body package="GoldenMonkey">reinitializeGrid	"Reinitialize the visual array under the covers, the inform the Table to redraw itself"	| ar rand index size rBlock |	size := self class rows * self class columns.	rand := Random new.	rBlock := [:v | (rand next * v) truncated + 1].	self totalScore value: 0.	ar := Array new: size.	1 to: size		do: 			[:i | 			| r |			r := rBlock value: 9.			ar at: i put: r -&gt; (Visuals at: r)].	(4 max: (rBlock value: 10))		timesRepeat: [ar at: (rBlock value: size)				put: #spider -&gt; (Visuals at: #spider)].	self gameGrid		setCollection: ar		columns: self class columns		rows: self class rows.	index := self gameBoard selectionInTable selectionIndexHolder.	index value: (rBlock value: self class columns)@ (rBlock value: self class rows).	self gameBoard selectionInTable table at: index value put: #feet -&gt; (Visuals at: #feet).	self currentCell: index value.	self gameGrid changed: #addRow</body><body package="GoldenMonkey">release	"insure that all components are released"	gameBoard release.	gameGrid release.	super release.</body></methods><methods><class-id>Examples.GoldenMonkey</class-id> <category>building</category><body package="GoldenMonkey">postBuildWith: aBuilder 	"Dynamically size the TavleView based on the defaultTile size, then resize the Window to hold the 	resized Table"	| tv ti |	ti := aBuilder componentAt: #gb.	tv := ti widget.	tv lineGrid: self class defaultTileSize y.	tv rowInfo.	"Set the visual block to return a pixmap rather than a string"	tv visualBlock: [:view :index | BoundedWrapper on: (view table at: index) value]</body></methods><methods><class-id>Examples.GoldenMonkey class</class-id> <category>private</category><body package="GoldenMonkey">addBanana	| uncoveredTile tmp |	tmp :=  Image	extent:  16@16	depth: 1	palette: (MappedPalette						with: ColorValue black						with: ColorValue green)	bits:#[56 28 0 0 84 42 0 0 80 40 0 0 80 40 0 0 56 28 0 0 20 10 0 0 21 202 0 0 86 170 0 0 58 156 0 0 18 136 0 0 1 192 0 0 0 160 0 0 0 160 0 0 2 160 0 0 1 192 0 0 0 128 0 0 ].		uncoveredTile := (Visuals at: #uncoveredTile) asRetainedMedium.	tmp displayOn: uncoveredTile graphicsContext at: 2@2.	Visuals at: #banana				 put: (CachedImage on: uncoveredTile asImage)</body><body package="GoldenMonkey">addCoveredTile	Visuals at: #coveredTile 				 put: (self makeBeveledTileForColor: ColorValue lightGray)</body><body package="GoldenMonkey">addFeet	| uncoveredTile tmp |	tmp :=  Image	extent:  16@16	depth: 1	palette: (MappedPalette						with: ColorValue white						with: ColorValue red)	bits: #[0 0 0 0 56 28 0 0 100 38 0 0 66 82 0 0 138 83 0 0 162 65 0 0 146 73 0 0 162 85 0 0 134 101 0 0 164 41 0 0 148 35 0 0 252 63 0 0 148 41 0 0 164 37 0 0 196 51 0 0 120 30 0 0 ].		uncoveredTile := (Visuals at: #uncoveredTile) asRetainedMedium.	tmp displayOn: uncoveredTile graphicsContext at: 1@1.	Visuals at: #feet 				 put: (CachedImage on:uncoveredTile asImage)</body><body package="GoldenMonkey">addNumbers	"self initialize"1 to: 9 do: 		[:i | 		| pm gc   mask pgc |		pm := (Visuals at: #coveredTile) asRetainedMedium.		pgc  := pm graphicsContext.		mask := Mask extent: 16@16.		gc := mask graphicsContext.		gc font: ((FontDescription new) fixedWidth: false; serif: false; italic: false; boldness: 0.5; pixelSize: 16).	"self halt."		gc displayString: i printString at: 5 @ 14.		pgc paint: ColorValue blue.		mask displayOn: pgc at: 1@1.			 Visuals					at: i					put:  (CachedImage on: pm asImage).		pm close]</body><body package="GoldenMonkey">addSpider	| coveredTile tmp |	tmp := Image	extent:  16@16	depth: 1	palette: (MappedPalette						with: ColorValue white						with: ColorValue purple)	bits: #[3 0 0 0 194 1 128 0 66 2 0 0 66 60 0 0 98 32 0 0 61 96 0 0 7 192 0 0 1 222 0 0 255 225 128 0 1 224 128 0 2 152 0 0 12 204 0 0 24 66 0 0 16 195 0 0 17 1 0 0 49 0 0 0 ].	coveredTile := (Visuals at: #uncoveredTile) asRetainedMedium.	tmp displayOn: coveredTile graphicsContext at: 1@1.	Visuals at: #spider 				 put: (CachedImage on: coveredTile asImage) "(BorderedWrapper on: (CachedImage on: coveredTile asImage) in: (0@0 corner:self defaultTileSize) border: (BeveledBorder inset))"</body><body package="GoldenMonkey">addUncoveredTile	Visuals at: #uncoveredTile put: (self makeTileForBorderColor: ColorValue darkGray insideColor: ColorValue veryLightGray)</body><body package="GoldenMonkey">makeBeveledTileForColor: aColor 	"Answer an image that contains a picture of a tile rendered in aColor."	| gc pixmap |	pixmap := Pixmap extent: self defaultTileSize.	gc := pixmap graphicsContext.	gc		paint: aColor;		displayRectangle: pixmap bounds.	(BeveledBorder raised copy setBorderWidth: 3)  displayOn: gc forDisplayBox: pixmap bounds.	^CachedImage on: pixmap asImage</body><body package="GoldenMonkey">makeTileForBorderColor: bColor insideColor: iColor	"Answer an image that contains a picture of a tile rendered in aColor."	| border gc pixmap |	border := SimpleBorder width: 2 color: bColor.	pixmap := Pixmap extent: self defaultTileSize.	gc := pixmap graphicsContext.	gc		paint: iColor;		displayRectangle: pixmap bounds.	border displayOn: gc forDisplayBox: pixmap bounds.	^CachedImage on: pixmap asImage</body></methods><methods><class-id>Examples.GoldenMonkey class</class-id> <category>accessing</category><body package="GoldenMonkey">columns	^Columns</body><body package="GoldenMonkey">defaultTileSize	DefaultTileSize isNil ifTrue:[DefaultTileSize := 20@20].	^DefaultTileSize</body><body package="GoldenMonkey">rows	^Rows</body></methods><methods><class-id>Examples.GoldenMonkey class</class-id> <category>initialize</category><body package="GoldenMonkey">initialize	"self initialize"	Rows := 20.	Columns := 25.	Visuals := Dictionary new: 16.	self addUncoveredTile.	self addCoveredTile.	self addBanana.	self addNumbers.	self addSpider.	self addFeet.</body></methods><methods><class-id>Examples.GoldenMonkey class</class-id> <category>interface specs</category><body package="GoldenMonkey">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Golden Monkey' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 620 93 1126 551 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -50 1 ) 					#name: #gb 					#flags: 12 					#model: #gameBoard 					#tabable: false ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 131 0 -35 1 0 1 -10 1 ) 					#flags: 0 					#model: #totalScoreString 					#tabable: false 					#style: #large 					#isReadOnly: true 					#type: #string ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 120 0 -10 1 1 1 ) 					#label: 'Total points:' ) ) ) )</body></methods><initialize><class-id>Examples.GoldenMonkey</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>