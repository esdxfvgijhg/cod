<?xml version="1.0"?><st-source><!-- Name: SIXX-TestsComment: SIXX 0.3 for VisualWorksCopyright (C) 2002-2009 Masashi Umezawa, Tetsuya Kurihara, Kazuki MinamitaniSIXX is a multi-platform XML serializer/deserializer for Smalltalk. You can exchange various Smalltalk objects among different (dialect) images.<<0.3 Release Note>>http://swikis.ddo.jp/umejava/44<<How to use>>[Basic writing/reading]SIXX is very easy to use. Like #storeString, You can generate a SIXX string by #sixxString.array := Array with: 1 with: 'Hello' with: Date today.array sixxString.This code generates a SIXX string below:'<sixx.object sixx.id="0" sixx.type="Array" >        <sixx.object sixx.id="1" sixx.type="SmallInteger" >1</sixx.object>        <sixx.object sixx.id="2" sixx.type="String" >Hello</sixx.object>        <sixx.object sixx.id="3" sixx.type="Date" >16 June 2002</sixx.object></sixx.object>'This string can be read by #readSixxFrom:.Object readSixxFrom: sixxString. "sixxString is the above string"[Stream writing/reading]SixxWriteStream and SixxReadStream are provided so that you can write/read Smalltalk objects like a binary-object-stream way (BOSS in VW, and the ReferenceStream in Squeak).In order to write objects to an external file, you can:sws := SixxWriteStream newFileNamed: 'obj.sixx'.sws nextPut: <object>.sws nextPutAll: <collection of object>.sws close.And to read objects from an external file:srs := SixxReadStream readOnlyFileNamed: 'obj.sixx'.objects := srs contents.srs close.<<SIXX Hooks>>[Customizing serialization]Object>>sixxPrepareWrite	It is called before the instance is written in SIXX. Object>>sixxWriteValue	Return the object actually serialized.Object>>sixxIgnorableInstVarNames	Specify the instance variables that are not written in SIXX Object>>sixxNonReferencableInstVarNames	Specify the instance variables that should not be referenced in SIXX. Values are always written redundantly. It is useful for small literal objects like String, Number, etc.Object>>sixxReferenceIdInContext:	Return unique id that can be referenced from other objects in SIXX. It is useful when objects have their own unique id.[Customizing deserialization]Object>>sixxInitialize	It is called immediately after the instance is read from SIXX Object>>sixxReadValue	Return the object for the client from the deserialized instance. <<ShapeChanger>>SixxShapeChanger enables you to read "class shape changed" instances. It supports renamed, removed and newly added instance variables.srs := SixxShapeChangeReadStream on: oldSixx readStream.srs shapeChangers at:#SmallIntegerOLD put: SmallInteger . "simple renaming"srs shapeChangers at: #SixxShapeChangedObject put: SixxMockShapeChanger. "You can implement ShapeChanger for more complex conversion."To define a new ShapeChanger, you should subclass base ShapeChanger class and override three methods.YourShapeChanger>>shapeChangedObjectClass	Return a newly introduced class for old instances.YourShapeChanger>>sixxInstVarNamed: varName put: value	Override this method for setting converted values to the shape changed object.YourShapeChanger>>initializeShapeChangedObject	Override this method for setting newly introduced values to the shape changed object.For example: (YourShapeChanger>>sixxInstVarNamed: varName put:)sixxInstVarNamed: varName put: value  "#oldNamedVar1 instance variable was renamed to #renamedAtt1"  varName == #oldNamedVar1 ifTrue: [^self attributesMap at: #renamedAtt1 put: value].  "#oldNamedVar2 inst var was removed."  varName == #oldNamedVar2 ifTrue: [^self].  super sixxInstVarNamed: varName put: valueFrom SIXX 0.3, you can apply ShapeChanger(s) without using SixxShapeChangeReadStream.obj := SixxContext evaluate: [Object readSixxFrom: oldSixx]  shapeChangersBy: [:shapeChangers | shapeChangers at: #SixxShapeChangedObject put: SixxSomeShapeChanger].<<Formatter>>Formatter is a new SIXX function for customizing SIXX format without subclassing.Normally, you can customize SIXX serialization format by overriding hooks such as #sixxWriteValue, #sixxIgnorableInstVarNames. However, sometimes you would like to customize serialization format more dynamically.For example, you may want to change default Array serialization format to compact one, if the array includes only primitive (literal) elements.Suppose there is an array like:array := #(1 2 3 4 5).By default, the array will be sixxed out if you evaluate:array sixxString. "print it"'<sixx.object sixx.id="0" sixx.type="Array" ><sixx.object sixx.id="1" sixx.type="SmallInteger" >1</sixx.object><sixx.object sixx.id="2" sixx.type="SmallInteger" >2</sixx.object><sixx.object sixx.id="3" sixx.type="SmallInteger" >3</sixx.object><sixx.object sixx.id="4" sixx.type="SmallInteger" >4</sixx.object><sixx.object sixx.id="5" sixx.type="SmallInteger" >5</sixx.object></sixx.object>'This format is reasonable for supporting complex array, but the format could be space-consuming if the array contains only primitive (literal) elements. By setting a Formatter, you can use more compact format for Array.SixxContext formatters: {SixxMockLiteralArrayFormatter on: Array}.After that, the format will be:'<sixx.object sixx.id="0" sixx.type="Array" sixx.formatter="SixxMockLiteralArrayFormatter" ><sixx.object sixx.id="1" sixx.type="String" >&#35;&#40;1 2 3 4 5&#41;</sixx.object></sixx.object>'You can reset the formatter by:SixxContext resetFormatters.For convenience, there is a method to switch formatter temporarily.SixxContext applyFormatters: {SixxMockLiteralArrayFormatter on: Array} while: [  array sixxString.]Or, you can even use:SixxContext evaluate: [array sixxString]  formattersBy: [:formatters | formatters add: (SixxMockLiteralArrayFormatter on: Array)].In short, Formatter can be used:- For customizing SIXX format dynamically.- For overriding SIXX format of the existing classes temporarily. <<More info>>http://www.mars.dti.ne.jp/~umejava/smalltalk/sixx/index.htmlDevelopmentPrerequisites: #(#(#any 'SUnit' ''))HideSource: falsePackageName: SIXX-TestsParcel: #('SIXX-Tests')ParcelName: SIXX-TestsPrerequisiteDescriptions: #(#(#applicability #parcel #name 'SIXX-Core' #versionFilter '0.3c') #(#applicability #parcel #name 'SIXX-InOut' #versionFilter '0.3c') #(#applicability #parcel #name 'SIXX-InOut-VW' #versionFilter '0.3c') #(#name 'SUnit' #componentType #package))PrerequisiteParcels: #(#('SIXX-Core' '0.3c') #('SIXX-InOut' '0.3c') #('SIXX-InOut-VW' '0.3c') #('SUnit' ''))SaveSource: trueVersion: 8.2-0.3cDate: 10:28:45 AM November 13, 2015 --><time-stamp>From VisualWorksÂ®, 7.10.1 of February 6, 2014 on November 13, 2015 at 10:28:45 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SixxMockRequest</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockMementoArray</name><environment>Sixx</environment><super>Core.Array</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockLiteralArrayFormatter</name><environment>Sixx</environment><super>Sixx.SixxFormatter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxAbstractTestCase</name><environment>Sixx</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>originalUseEnvironment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxNewFailedTestCase</name><environment>Sixx</environment><super>Sixx.SixxAbstractTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockObjectWithCache</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>name att1 att2 cache1 cache2 </inst-vars><class-inst-vars>att1 att2 cache1 </class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockObjectInitializingOnWrite</name><environment>Sixx</environment><super>Sixx.SixxMockObjectWithCache</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockHeader</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxFormatterTestCase</name><environment>Sixx</environment><super>Sixx.SixxAbstractTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxXmlParserTestCase</name><environment>Sixx</environment><super>Sixx.SixxAbstractTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockBagFormatter</name><environment>Sixx</environment><super>Sixx.SixxFormatter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockFixedNewFailedClass</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>att1 att2 att3Block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockShapeChanger</name><environment>Sixx</environment><super>Sixx.SixxShapeChanger</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockSuperClassForUnitTest</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>instVar1 instVar2 </class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockClassForUnitTest</name><environment>Sixx</environment><super>Sixx.SixxMockSuperClassForUnitTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>instVar3 </class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxGeneratingTestCase</name><environment>Sixx</environment><super>Sixx.SixxAbstractTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockObjectPreparingOnWrite</name><environment>Sixx</environment><super>Sixx.SixxMockObjectWithCache</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxLoadingTestCase</name><environment>Sixx</environment><super>Sixx.SixxAbstractTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockVariableNewFailedClass</name><environment>Sixx</environment><super>Core.Array</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>att1 att2 att3Block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockFixedAlternativeClass</name><environment>Sixx</environment><super>Sixx.SixxMockFixedNewFailedClass</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxWriteStreamTestCase</name><environment>Sixx</environment><super>Sixx.SixxAbstractTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxReadStreamTestCase</name><environment>Sixx</environment><super>Sixx.SixxAbstractTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockBinaryData</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>author version </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockShapeChangedObject</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>renamedAtt1 addedAtt1 originalAtt1 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockObjectWithNonRef2</name><environment>Sixx</environment><super>Sixx.SixxMockObjectWithCache</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockObjectWithNonRef</name><environment>Sixx</environment><super>Sixx.SixxMockObjectWithCache</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockCustomWriteObject</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>name time </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockObjectInitializingOnRead</name><environment>Sixx</environment><super>Sixx.SixxMockObjectWithCache</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxShapeChangerTestCase</name><environment>Sixx</environment><super>Sixx.SixxAbstractTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockObjectWithId</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id data </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockVariableAlternativeClass</name><environment>Sixx</environment><super>Sixx.SixxMockVariableNewFailedClass</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockEnvelope</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>header </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockPerson</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name requests partners </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockOldShapeObject</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>oldNamedVar1 originalAtt1 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxShapeChangeReadStreamTestCase</name><environment>Sixx</environment><super>Sixx.SixxAbstractTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockPersonShapeChanger</name><environment>Sixx</environment><super>Sixx.SixxShapeChanger</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxCustomObjectSerializationTestCase</name><environment>Sixx</environment><super>Sixx.SixxAbstractTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxNamespaceSupportTestCase</name><environment>Sixx</environment><super>Sixx.SixxAbstractTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxConstantsTestCase</name><environment>Sixx</environment><super>Sixx.SixxAbstractTestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>oldSixxConstants </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><class><name>SixxMockShapeChangedObjectWithoutShapeChangeMethods</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>renamedAtt1 addedAtt1 originalAtt1 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Test</category><attributes><package>SIXX-Tests</package></attributes></class><methods><class-id>Sixx.SixxMockRequest</class-id> <category>accessing</category><body package="SIXX-Tests">id	^id</body><body package="SIXX-Tests">id: anObject	id := anObject</body><body package="SIXX-Tests">owner	^owner</body><body package="SIXX-Tests">owner: anObject	owner := anObject</body></methods><methods><class-id>Sixx.SixxMockMementoArray</class-id> <category>sixx-reading</category><body package="SIXX-Tests">sixxReadValue	| inst |	inst := SixxMockCustomWriteObject new.	inst name: (self at: 1).	inst time: (self at: 2).	^inst</body></methods><methods><class-id>Sixx.SixxMockLiteralArrayFormatter</class-id> <category>override hooks</category><body package="SIXX-Tests">createInstanceOf: aClass withSixxElement: sixxElement 	| literalString |	literalString := SixxXmlUtil				characterDataFrom: ((SixxXmlUtil elementsFrom: sixxElement)						at: 1).	^ aClass readFrom: literalString readStream</body><body package="SIXX-Tests">format: array on: aStream indent: level context: dictionary 	aStream cr.	array printString		sixxOn: aStream		indent: level + 1		context: dictionary.	aStream tab: level</body></methods><methods><class-id>Sixx.SixxAbstractTestCase</class-id> <category>running</category><body package="SIXX-Tests">setUp	originalUseEnvironment := SixxSettings useEnvironment.	SixxSettings useEnvironment: false</body><body package="SIXX-Tests">tearDown	SixxSettings useEnvironment: originalUseEnvironment</body></methods><methods><class-id>Sixx.SixxNewFailedTestCase</class-id> <category>tests</category><body package="SIXX-Tests">testWriteReadNewFailedClass	| original sixxString read |	original := SixxMockFixedNewFailedClass prototype1.	self should: [original att1 = 1].	self should: [original att2 = 'TWO'].	self should: [original sixxString] raise: SixxInvalidSerialization.	sixxString := original sixxString.	self should: [Object readSixxFrom: sixxString] raise: SixxNewFailed.	read := Object readSixxFrom: sixxString.	self should: [read att1 = 1].	self should: [read att2 = 'TWO'].	self should: [read att3Block notNil]</body><body package="SIXX-Tests">testWriteReadNewFailedClassReciverAlternative	| original sixxString read |	original := SixxMockFixedNewFailedClass prototype1.	self should: [original att1 = 1].	self should: [original att2 = 'TWO'].	self should: [original sixxString] raise: SixxInvalidSerialization.	sixxString := original sixxString.	self should: [Object readSixxFrom: sixxString] raise: SixxNewFailed.	read := [Object readSixxFrom: sixxString] on: SixxNewFailed				do: [:ex | ex resume: SixxMockFixedAlternativeClass].	self should: [read class = SixxMockFixedAlternativeClass].	self should: [read att1 = 1].	self should: [read att2 = 'TWO'].	self should: [read att3Block notNil]</body><body package="SIXX-Tests">testWriteReadNewVariableFailedClass	| original sixxString read |	original := SixxMockVariableNewFailedClass prototype1.	self should: [original att1 = 1].	self should: [original att2 = 'TWO'].	self should: [original sixxString] raise: SixxInvalidSerialization.	sixxString := original sixxString.	self should: [Object readSixxFrom: sixxString] raise: SixxNewFailed.	read := Object readSixxFrom: sixxString.	self should: [read att1 = 1].	self should: [read att2 = 'TWO'].	self should: [read att3Block notNil]</body><body package="SIXX-Tests">testWriteReadNewVariableFailedClassReciverAlternative	| original sixxString read |	original := SixxMockVariableNewFailedClass prototype1.	self should: [original att1 = 1].	self should: [original att2 = 'TWO'].	self should: [original sixxString] raise: SixxInvalidSerialization.	sixxString := original sixxString.	self should: [Object readSixxFrom: sixxString] raise: SixxNewFailed.	read := [Object readSixxFrom: sixxString] on: SixxNewFailed				do: [:ex | ex resume: SixxMockVariableAlternativeClass].	self should: [read class = SixxMockVariableAlternativeClass].	self should: [read att1 = 1].	self should: [read att2 = 'TWO'].	self should: [read att3Block notNil]</body></methods><methods><class-id>Sixx.SixxMockObjectWithCache</class-id> <category>accessing</category><body package="SIXX-Tests">att1	^att1</body><body package="SIXX-Tests">att1: anObject	att1 := anObject</body><body package="SIXX-Tests">att2	^att2</body><body package="SIXX-Tests">att2: anObject	att2 := anObject</body><body package="SIXX-Tests">cache1	^cache1</body><body package="SIXX-Tests">cache1: anObject	cache1 := anObject</body><body package="SIXX-Tests">cache2	^cache2</body><body package="SIXX-Tests">cache2: anObject	cache2 := anObject</body><body package="SIXX-Tests">name	^name</body><body package="SIXX-Tests">name: anObject	name := anObject</body></methods><methods><class-id>Sixx.SixxMockObjectWithCache</class-id> <category>writing-sixx</category><body package="SIXX-Tests">sixxIgnorableInstVarNames	^#(#cache1 #cache2)</body></methods><methods><class-id>Sixx.SixxMockObjectWithCache class</class-id> <category>accessing</category><body package="SIXX-Tests">att1	"Answer the value of att1"	^ att1</body><body package="SIXX-Tests">att1: anObject	"Set the value of att1"	att1 := anObject</body><body package="SIXX-Tests">att2	"Answer the value of att2"	^ att2</body><body package="SIXX-Tests">att2: anObject	"Set the value of att2"	att2 := anObject</body><body package="SIXX-Tests">cache1	"Answer the value of cache1"	^ cache1</body><body package="SIXX-Tests">cache1: anObject	"Set the value of cache1"	cache1 := anObject</body></methods><methods><class-id>Sixx.SixxMockObjectWithCache class</class-id> <category>sixx-writing</category><body package="SIXX-Tests">sixxIgnorableInstVarNames	^#(#cache1)</body></methods><methods><class-id>Sixx.SixxMockObjectInitializingOnWrite</class-id> <category>sixx-writing</category><body package="SIXX-Tests">sixxPrepareWrite	self att1: self att1 printString.	self att2: self att2 * 2.</body></methods><methods><class-id>Sixx.SixxMockHeader</class-id> <category>accessing</category><body package="SIXX-Tests">id	^id</body><body package="SIXX-Tests">id: aString 	id := aString</body></methods><methods><class-id>Sixx.SixxFormatterTestCase</class-id> <category>fixtures</category><body package="SIXX-Tests">bagFormatter	^SixxMockBagFormatter on: Bag</body><body package="SIXX-Tests">formatters	^OrderedCollection new 		add: (self bagFormatter);		yourself</body></methods><methods><class-id>Sixx.SixxFormatterTestCase</class-id> <category>private</category><body package="SIXX-Tests">collectionEquals: colA with: colB	^colA asSortedCollection asArray = colB asSortedCollection asArray</body></methods><methods><class-id>Sixx.SixxFormatterTestCase</class-id> <category>tests</category><body package="SIXX-Tests">testBagReadWrite	"SixxFormatterTestCase debug: #testBagReadWrite"	| bag parsedNode sixx1 sixx2 sixx3 |	bag := #('apple' 'apple' 'orange' 'grape' 'grape' 'grape') asBag.	SixxContext applyFormatters: self formatters while: [ 		sixx1 := bag sixxString.		self should: [self collectionEquals: bag with: (Object readSixxFrom: sixx1)].		self should: [(SixxContext protoFormatterResolver formatterAt: Bag) isMemberOf: SixxMockBagFormatter]	].	parsedNode := SixxXmlUtil parseXml: sixx1.	self should: [(SixxXmlUtil attributeAt: SixxConstants current formatterTagName from: parsedNode) = 'SixxMockBagFormatter'].	SixxContext applyFormatters: #() while: [		sixx2 := bag sixxString.		self should: [self collectionEquals: bag with: (Object readSixxFrom: sixx2)].		self should: [(SixxContext protoFormatterResolver formatterAt: Bag) isNil]	].	parsedNode := SixxXmlUtil parseXml: sixx2.	self should: [(SixxXmlUtil attributeAt: SixxConstants current formatterTagName from: parsedNode) isNil].	self shouldnt: [sixx1 = sixx2].		sixx3 := bag sixxString.	self should: [self collectionEquals: bag with: (Object readSixxFrom: sixx3)].	self should: [(SixxContext protoFormatterResolver formatterAt: Bag) isNil].	self should: [sixx2 = sixx3].</body><body package="SIXX-Tests">testLiteralArrayReadWrite	"SixxFormatterTestCase debug: #testLiteralArrayReadWrite"	| sixx1 parsedNode array1 sixx2 array2 |	sixx1 := SixxContext evaluate: [#(1 2 3) sixxString] 		formattersBy: [:ord | ord add: (SixxMockLiteralArrayFormatter on: Array)].	parsedNode := SixxXmlUtil parseXml: sixx1.	self should: [(SixxXmlUtil attributeAt: SixxConstants current formatterTagName from: parsedNode) = 'SixxMockLiteralArrayFormatter'].	array1 := SixxContext evaluate: [Object readSixxFrom: sixx1] 		formattersBy: [:ord | ord add: (SixxMockLiteralArrayFormatter on: Array)]. 	self should: [array1 = #(1 2 3)].	sixx2 := SixxContext evaluate: [#(1 2 3) sixxString] 		formattersBy: [:ord | ord ].	parsedNode := SixxXmlUtil parseXml: sixx2.	self should: [(SixxXmlUtil attributeAt: SixxConstants current formatterTagName from: parsedNode) = nil].	array2 := SixxContext evaluate: [Object readSixxFrom: sixx2] 		formattersBy: [:ord | ord add: (SixxMockLiteralArrayFormatter on: Array)]. 	self should: [array2 = #(1 2 3)].</body></methods><methods><class-id>Sixx.SixxXmlParserTestCase</class-id> <category>tests</category><body package="SIXX-Tests">testParseXmlWithSixxVwXmlParserAdapter	| sixxString result oldParser |	self class environment at: #VWXMLXMLParser ifAbsent: [^self].	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;	&lt;sixx.object sixx.id="1" sixx.type="SmallInteger" &gt;100&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="String" &gt;abcde&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="3" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="4" sixx.type="SmallInteger" &gt;10&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="5" sixx.type="SmallInteger" &gt;20&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.idref="0" &gt;&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	oldParser := SixxXmlUtil parserAdapter.		[SixxXmlUtil parserAdapter: SixxVwXmlParserAdapter.	result := Object readSixxFrom: sixxString.	self should: [(result at: 1)			= 100].	self should: [(result at: 2)			= 'abcde'].	self should: [(result at: 3)			= #(10 20)].	self should: [(result at: 4)			== result]]		ensure: [SixxXmlUtil parserAdapter: oldParser]</body><body package="SIXX-Tests">testParseXmlWithSixxYaxoXmlParserAdapter	| sixxString result oldParser |	self class environment at: #XMLDOMParser ifAbsent: [^self].	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;	&lt;sixx.object sixx.id="1" sixx.type="SmallInteger" &gt;100&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="String" &gt;abcde&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="3" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="4" sixx.type="SmallInteger" &gt;10&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="5" sixx.type="SmallInteger" &gt;20&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.idref="0" &gt;&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	oldParser := SixxXmlUtil parserAdapter.		[SixxXmlUtil parserAdapter: SixxVwXmlParserAdapter.	result := Object readSixxFrom: sixxString.	self should: [(result at: 1)			= 100].	self should: [(result at: 2)			= 'abcde'].	self should: [(result at: 3)			= #(10 20)].	self should: [(result at: 4)			== result]]		ensure: [SixxXmlUtil parserAdapter: oldParser]</body></methods><methods><class-id>Sixx.SixxMockBagFormatter</class-id> <category>override hooks</category><body package="SIXX-Tests">format: aBag on: aStream indent: level context: dictionary 	| set |	aStream cr.	set := aBag asSet.	set		do: [:each | 			(aBag occurrencesOf: each)				sixxOn: aStream				indent: level + 1				context: dictionary.			each				sixxOn: aStream				indent: level + 1				context: dictionary].	aStream tab: level</body><body package="SIXX-Tests">initialize: aBag fromSixxElement: sixxElement context: aDictionary	"override"	self pairs: (SixxXmlUtil elementsFrom: sixxElement)		do: [:countElement :valueElement | 			| value count | 			count := self class fromSixxElement: countElement context: aDictionary.			value := self class fromSixxElement: valueElement context: aDictionary.			aBag add: value withOccurrences: count].	^aBag</body></methods><methods><class-id>Sixx.SixxMockBagFormatter</class-id> <category>private</category><body package="SIXX-Tests">pairs: aCollection do: aBlock	"For portability"	1 to: aCollection size // 2 do:		[:index | aBlock value: (aCollection at: 2 * index - 1) value: (aCollection at: 2 * index)]</body></methods><methods><class-id>Sixx.SixxMockFixedNewFailedClass</class-id> <category>initializing-sixx</category><body package="SIXX-Tests">sixxInitialize	att3Block := [:a :b | a &lt; b]</body></methods><methods><class-id>Sixx.SixxMockFixedNewFailedClass</class-id> <category>accessing</category><body package="SIXX-Tests">att1	^att1</body><body package="SIXX-Tests">att1: aValue 	att1 := aValue</body><body package="SIXX-Tests">att2	^att2</body><body package="SIXX-Tests">att2: aValue	att2 := aValue</body><body package="SIXX-Tests">att3Block	^att3Block</body><body package="SIXX-Tests">att3Block: aValue	att3Block := aValue</body></methods><methods><class-id>Sixx.SixxMockFixedNewFailedClass class</class-id> <category>for tests</category><body package="SIXX-Tests">prototype1	"self prototype1"	| inst |	inst := self basicNew.	inst att1: 1.	inst att2: 'TWO'.	inst att3Block: [:this | 'is block'].	^inst</body><body package="SIXX-Tests">prototype2	"self prototype2"	| inst |	inst := self basicNew.	inst att1: 3.	inst att2: 'Four'.	inst att3Block: [:this :is | 'block2'].	^inst</body></methods><methods><class-id>Sixx.SixxMockFixedNewFailedClass class</class-id> <category>instance creation</category><body package="SIXX-Tests">new	^Error raiseSignal: '#new should not be used!'</body></methods><methods><class-id>Sixx.SixxMockShapeChanger</class-id> <category>override hooks</category><body package="SIXX-Tests">initializeShapeChangedObject		"override"	self shapeChangedObject addedAtt1: 22222.</body><body package="SIXX-Tests">shapeChangedObjectClass	"override"	^SixxMockShapeChangedObjectWithoutShapeChangeMethods</body><body package="SIXX-Tests">sixxInstVarNamed: varName put: value	varName == #oldNamedVar1 ifTrue: [^self attributesMap at: 'renamedAtt1' put: value].	varName == #oldVar2 ifTrue: [^self].	super sixxInstVarNamed: varName put: value</body></methods><methods><class-id>Sixx.SixxMockSuperClassForUnitTest class</class-id> <category>accessing</category><body package="SIXX-Tests">instVar1	instVar1 isNil ifTrue: [instVar1 := ''].	^instVar1</body><body package="SIXX-Tests">instVar1: aString 	instVar1 := aString</body><body package="SIXX-Tests">instVar2	instVar2 isNil ifTrue: [instVar2 := ''].	^instVar2</body><body package="SIXX-Tests">instVar2: aString 	instVar2 := aString</body></methods><methods><class-id>Sixx.SixxMockSuperClassForUnitTest class</class-id> <category>class initialization</category><body package="SIXX-Tests">initialize	"MockSuperClassForUnitTest initialize"	instVar1 := nil.	instVar2 := nil</body></methods><methods><class-id>Sixx.SixxMockClassForUnitTest class</class-id> <category>accessing</category><body package="SIXX-Tests">instVar3	instVar3 isNil ifTrue: [instVar3 := ''].	^instVar3</body><body package="SIXX-Tests">instVar3: aString 	instVar3 := aString</body></methods><methods><class-id>Sixx.SixxMockClassForUnitTest class</class-id> <category>class initialization</category><body package="SIXX-Tests">initialize	"MockClassForUnitTest initialize"	super initialize.	instVar3 := nil</body></methods><methods><class-id>Sixx.SixxGeneratingTestCase</class-id> <category>tests</category><body package="SIXX-Tests">testCompactSixxStringForCompositeDictionary	"SixxGeneratingTestCase debug: #testCompactSixxStringForCompositeDictionary"		| originalSettings dic childDic expected |	originalSettings := SixxSettings useCompactTags.	[SixxSettings useCompactTags: true.		expected := '&lt;o i="0" t="Dictionary" &gt;	&lt;o i="1" t="Association" &gt;		&lt;o i="2" n="key" t="Symbol" &gt;parent1&lt;/o&gt;		&lt;o i="3" n="value" t="String" &gt;sample string.&lt;/o&gt;	&lt;/o&gt;	&lt;o i="4" t="Association" &gt;		&lt;o i="5" n="key" t="Symbol" &gt;parent4&lt;/o&gt;		&lt;o i="6" n="value" t="Dictionary" &gt;			&lt;o i="7" t="Association" &gt;				&lt;o i="8" n="key" t="Symbol" &gt;child1&lt;/o&gt;				&lt;o i="9" n="value" t="String" &gt;abcde&lt;/o&gt;			&lt;/o&gt;		&lt;/o&gt;	&lt;/o&gt;	&lt;o i="10" t="Association" &gt;		&lt;o i="11" n="key" t="Symbol" &gt;parent3&lt;/o&gt;		&lt;o i="12" n="value" t="Array" &gt;			&lt;o i="13" t="SmallInteger" &gt;10&lt;/o&gt;			&lt;o i="14" t="SmallInteger" &gt;20&lt;/o&gt;			&lt;o i="15" t="SmallInteger" &gt;30&lt;/o&gt;		&lt;/o&gt;	&lt;/o&gt;	&lt;o i="16" t="Association" &gt;		&lt;o i="17" n="key" t="Symbol" &gt;parent2&lt;/o&gt;		&lt;o i="18" n="value" t="SmallInteger" &gt;100&lt;/o&gt;	&lt;/o&gt;&lt;/o&gt;'.	childDic := Dictionary new.	childDic at: #child1 put: 'abcde'.	dic := Dictionary new.	dic at: #parent1 put: 'sample string.'.	dic at: #parent2 put: 100.	dic at: #parent3 put: #(10 20 30 ).	dic at: #parent4 put: childDic.	self		should: [self isSameContentsDictionary: (Object readSixxFrom: dic sixxString) with: (Object readSixxFrom: expected)].			] ensure: [SixxSettings useCompactTags: originalSettings]</body><body package="SIXX-Tests">testCompactSixxStringForRunArray	"SixxGeneratingTestCase debug: #testCompactSixxStringForRunArray"		| originalSettings arr expectedStr |	originalSettings := SixxSettings useCompactTags.	[SixxSettings useCompactTags: true.		expectedStr := '&lt;o i="0" t="RunArray" &gt;	&lt;o i="1" n="runs" t="Array" &gt;		&lt;o i="2" t="SmallInteger" &gt;1&lt;/o&gt;		&lt;o i="3" t="SmallInteger" &gt;2&lt;/o&gt;		&lt;o r="2" /&gt;	&lt;/o&gt;	&lt;o i="4" n="values" t="Array" &gt;		&lt;o r="2" /&gt;		&lt;o r="3" /&gt;		&lt;o i="5" t="SmallInteger" &gt;3&lt;/o&gt;	&lt;/o&gt;&lt;/o&gt;'.	arr := RunArray runs: #(1 2 1) values: #(1 2 3).	self should: [arr sixxString = expectedStr]		] ensure: [SixxSettings useCompactTags: originalSettings].</body><body package="SIXX-Tests">testSixxStringForArray	| arr expectedStr |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;	&lt;sixx.object sixx.id="1" sixx.type="SmallInteger" &gt;10&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="SmallInteger" &gt;20&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="3" sixx.type="SmallInteger" &gt;30&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	arr := Array new: 3.	arr at: 1 put: 10.	arr at: 2 put: 20.	arr at: 3 put: 30.	self should: [arr sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForBag	| bag result |	bag := Bag new.	bag add: 10.	bag add: 20.	bag add: 30.	bag add: 30.	result := Object readSixxFrom: bag sixxString.	self should: [result size = 4].	self should: [result includes: 10].	self should: [result includes: 20].	self should: [result includes: 30].	self should: [(result occurrencesOf: 30) = 2]</body><body package="SIXX-Tests">testSixxStringForBoolean	| expectedStr |	expectedStr := '&lt;sixx.object sixx.type="True" /&gt;'.	self		should: [true sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForByteArray	| expectedStr |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="ByteArray" &gt;0A141E&lt;/sixx.object&gt;'.	self should: 			[(ByteArray 				with: 10				with: 20				with: 30) sixxString 				= expectedStr]</body><body package="SIXX-Tests">testSixxStringForCharacter	| expectedStr |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="Character" &gt;$A&lt;/sixx.object&gt;'.	self should: [$A sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForClass	| expectedStr |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="SixxMockClassForUnitTest class" &gt;	&lt;sixx.object sixx.id="1" sixx.name="instVar1" sixx.type="String" &gt;value1&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.name="instVar2" sixx.type="String" &gt;value2&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="3" sixx.name="instVar3" sixx.type="String" &gt;value3&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	SixxMockClassForUnitTest instVar1: 'value1'.	SixxMockClassForUnitTest instVar2: 'value2'.	SixxMockClassForUnitTest instVar3: 'value3'.	self should: [SixxMockClassForUnitTest sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForCompositeDictionary	| dic childDic expected |	expected := '&lt;sixx.object sixx.id="0" sixx.type="Dictionary" &gt;	&lt;sixx.object sixx.id="1" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="2" sixx.name="key" sixx.type="Symbol" &gt;parent2&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.name="value" sixx.type="SmallInteger" &gt;100&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="4" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="5" sixx.name="key" sixx.type="Symbol" &gt;parent1&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="6" sixx.name="value" sixx.type="String" &gt;sample string.&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="7" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="8" sixx.name="key" sixx.type="Symbol" &gt;parent4&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="9" sixx.name="value" sixx.type="Dictionary" &gt;			&lt;sixx.object sixx.id="10" sixx.type="Association" &gt;				&lt;sixx.object sixx.id="11" sixx.name="key" sixx.type="Symbol" &gt;child1&lt;/sixx.object&gt;				&lt;sixx.object sixx.id="12" sixx.name="value" sixx.type="String" &gt;abcde&lt;/sixx.object&gt;			&lt;/sixx.object&gt;		&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="13" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="14" sixx.name="key" sixx.type="Symbol" &gt;parent3&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="15" sixx.name="value" sixx.type="Array" &gt;			&lt;sixx.object sixx.id="16" sixx.type="SmallInteger" &gt;10&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="17" sixx.type="SmallInteger" &gt;20&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="18" sixx.type="SmallInteger" &gt;30&lt;/sixx.object&gt;		&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	childDic := Dictionary new.	childDic at: #child1 put: 'abcde'.	dic := Dictionary new.	dic at: #parent1 put: 'sample string.'.	dic at: #parent2 put: 100.	dic at: #parent3 put: #(10 20 30).	dic at: #parent4 put: childDic.		self		should: [self isSameContentsDictionary:(Object readSixxFrom: dic sixxString) with:(Object readSixxFrom: expected)].</body><body package="SIXX-Tests">testSixxStringForDate	| expectedStr |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="Date" &gt;14 May 2002&lt;/sixx.object&gt;'.	self should: [(Date			newDay: 14			monthNumber: 5			year: 2002) sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForDictionary	| dic expected |	expected := '&lt;sixx.object sixx.id="0" sixx.type="Dictionary" &gt;	&lt;sixx.object sixx.id="1" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="2" sixx.name="key" sixx.type="Symbol" &gt;key1&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.name="value" sixx.type="String" &gt;value1&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="4" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="5" sixx.name="key" sixx.type="Symbol" &gt;key3&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="6" sixx.name="value" sixx.type="String" &gt;value3&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="7" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="8" sixx.name="key" sixx.type="Symbol" &gt;key2&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="9" sixx.name="value" sixx.type="String" &gt;value2&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	dic := Dictionary new.	dic at: #key1 put: 'value1'.	dic at: #key2 put: 'value2'.	dic at: #key3 put: 'value3'.	self should: [self isSameContentsDictionary: (Object readSixxFrom: dic sixxString) with: (Object readSixxFrom: expected)]</body><body package="SIXX-Tests">testSixxStringForFraction	"SixxGeneratingTestCase debug: #testSixxStringForFraction"	| expectedStr |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="Fraction" &gt;(3/4)&lt;/sixx.object&gt;'.	self		should: [(3 / 4) sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForInterval	| interval expectedStr |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="Interval" &gt;(1 to: 10 by: 3)&lt;/sixx.object&gt;'.	interval := 1 to: 10 by: 3.	self should: [interval sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForNumber	| expectedStr |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="Fraction" &gt;(3/4)&lt;/sixx.object&gt;'.	self should: [(3 / 4) sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForOrdredCollection	| expectedStr col |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="OrderedCollection" &gt;	&lt;sixx.object sixx.id="1" sixx.type="SmallInteger" &gt;10&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="SmallInteger" &gt;20&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="3" sixx.type="SmallInteger" &gt;30&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	col := OrderedCollection new.	col add: 10.	col add: 20.	col add: 30.	self should: [col sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForPersonWithNilAttributes	"SixxGeneratingTestCase debug: #testSixxStringForPersonWithNilAttributes"	| expectedStr1 expectedStr2 person1 person2 originalValue |	expectedStr1 := '&lt;sixx.object sixx.id="0" sixx.type="SixxMockPerson" &gt;	&lt;sixx.object sixx.id="1" sixx.name="name" sixx.type="String" &gt;person1&lt;/sixx.object&gt;	&lt;sixx.object sixx.name="requests" sixx.type="UndefinedObject" /&gt;	&lt;sixx.object sixx.id="2" sixx.name="partners" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="3" sixx.type="SixxMockPerson" &gt;			&lt;sixx.object sixx.id="4" sixx.name="name" sixx.type="String" &gt;person2&lt;/sixx.object&gt;			&lt;sixx.object sixx.name="requests" sixx.type="UndefinedObject" /&gt;			&lt;sixx.object sixx.name="partners" sixx.type="UndefinedObject" /&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.type="UndefinedObject" /&gt;	&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	expectedStr2 := '&lt;sixx.object sixx.id="0" sixx.type="SixxMockPerson" &gt;	&lt;sixx.object sixx.id="1" sixx.name="name" sixx.type="String" &gt;person1&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.name="partners" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="3" sixx.type="SixxMockPerson" &gt;			&lt;sixx.object sixx.id="4" sixx.name="name" sixx.type="String" &gt;person2&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.type="UndefinedObject" /&gt;	&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	[originalValue := SixxSettings suppressNilWrite.	person1 := SixxMockPerson new name: 'person1'.	person2 := SixxMockPerson new name: 'person2'.	person1 partners: (Array with: person2 with: nil).	SixxSettings suppressNilWrite: false.	self should: [person1 sixxString = expectedStr1].	SixxSettings suppressNilWrite: true.	self should: [person1 sixxString = expectedStr2]]		ensure: [SixxSettings suppressNilWrite: originalValue]</body><body package="SIXX-Tests">testSixxStringForRectangle	"SixxGeneratingTestCase debug: #testSixxStringForRectangle"	| expectedStr |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="Rectangle" &gt;1@1 corner: 3@4&lt;/sixx.object&gt;'.	self		should: [(1@1 corner: 3@4) sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForRecursiveArray	"SixxGeneratingTestCase debug: #testSixxStringForRecursiveArray"	| arr expectedStr |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;	&lt;sixx.object sixx.id="1" sixx.type="SmallInteger" &gt;10&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="SmallInteger" &gt;20&lt;/sixx.object&gt;	&lt;sixx.object sixx.idref="0" /&gt;&lt;/sixx.object&gt;'.	arr := Array new: 3.	arr at: 1 put: 10.	arr at: 2 put: 20.	arr at: 3 put: arr.	self should: [arr sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForRunArray	| arr expectedStr |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="RunArray" &gt;	&lt;sixx.object sixx.id="1" sixx.name="runs" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="2" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.type="SmallInteger" &gt;2&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="2" /&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="4" sixx.name="values" sixx.type="Array" &gt;		&lt;sixx.object sixx.idref="2" /&gt;		&lt;sixx.object sixx.idref="3" /&gt;		&lt;sixx.object sixx.id="5" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	arr := RunArray runs: #(1 2 1) values: #(1 2 3).	self should: [arr sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForSet	| set result |	set := Set new.	set add: 10.	set add: 20.	set add: 30.	set add: 30.	result := Object readSixxFrom: set sixxString.	self should: [result size = 3].	self should: [result includes: 10].	self should: [result includes: 20].	self should: [result includes: 30]</body><body package="SIXX-Tests">testSixxStringForSimpleObject	| expectedStr |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="Object" &gt;&lt;/sixx.object&gt;'.	self should: [Object new sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForString	| expectedStr |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="String" &gt;Hi&amp;#44; I&amp;apos;m String-object&lt;/sixx.object&gt;'.	self should: ['Hi, I''m String-object' sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForStringUsingCDATA	| originalSetting expectedStr |		[originalSetting := SixxSettings useCDATA.	SixxSettings useCDATA: true.	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="String" &gt;&lt;![CDATA[Hi, I''m String-object.How are you?]]&gt;&lt;/sixx.object&gt;'.	self should: ['Hi, I''m String-object.How are you?' sixxString = expectedStr]]		ensure: [SixxSettings useCDATA: originalSetting]</body><body package="SIXX-Tests">testSixxStringForTime	| expectedStr |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="Time" &gt;' 				, (Time readSixxContentStringFrom: '1:30:59 pm' readStream) sixxContentString , '&lt;/sixx.object&gt;'.	self 		should: [(Time readSixxContentStringFrom: '1:30:59 pm' readStream) sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForUndefinedObject	| expectedStr |	expectedStr :=  '&lt;sixx.object sixx.type="UndefinedObject" /&gt;'.	self		should: [nil sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForVariableObject	| expectedStr variableObj |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="SixxMockBinaryData" &gt;	&lt;sixx.object sixx.id="1" sixx.name="author" sixx.type="String" &gt;MU&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.name="version" sixx.type="String" &gt;0.1&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="3" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="4" sixx.type="SmallInteger" &gt;2&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="5" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	variableObj := SixxMockBinaryData 				author: 'MU'				version: '0.1'				data: #(1 2 3).	self should: [variableObj sixxString = expectedStr]</body><body package="SIXX-Tests">testSixxStringForVariableObjectNoData	| expectedStr variableObj |		expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="SixxMockBinaryData" &gt;	&lt;sixx.object sixx.id="1" sixx.name="author" sixx.type="String" &gt;MU&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.name="version" sixx.type="String" &gt;0.1&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	variableObj := SixxMockBinaryData author: 'MU' version: '0.1' data: #().	self		should: [variableObj sixxString = expectedStr].</body></methods><methods><class-id>Sixx.SixxGeneratingTestCase</class-id> <category>private</category><body package="SIXX-Tests">isSameContentsDictionary: dictA with: dictB	dictA size = dictB size ifFalse: [^false].	dictA keysAndValuesDo: [:keyA :valueA |		((dictB at: keyA) storeString = valueA storeString) ifFalse: [^false]	].	^true</body></methods><methods><class-id>Sixx.SixxMockObjectPreparingOnWrite</class-id> <category>sixx-writning</category><body package="SIXX-Tests">sixxPrepareWrite	self att1: self att1 printString.	self att2: self att2 * 2.</body></methods><methods><class-id>Sixx.SixxLoadingTestCase</class-id> <category>tests</category><body package="SIXX-Tests">testReadCompactSixxForRecursiveArray	"SixxLoadingTestCase debug: #testReadCompactSixxForRecursiveArray"		| originalSettings sixxString arr  |	originalSettings := SixxSettings useCompactTags.	[SixxSettings useCompactTags: true.		sixxString := '&lt;o i="0" t="Array" &gt;	&lt;o i="1" t="SmallInteger" &gt;10&lt;/o&gt;	&lt;o i="2" t="SmallInteger" &gt;20&lt;/o&gt;	&lt;o r="0" &gt;&lt;/o&gt;&lt;/o&gt;'.	arr := Object readSixxFrom: sixxString.	self		should: [arr size = 3].	self		should: [(arr at: 1)				= 10].	self		should: [(arr at: 2)				= 20].	self		should: [(arr at: 3)				== arr]				] ensure: [SixxSettings useCompactTags: originalSettings].</body><body package="SIXX-Tests">testReadCompactSixxForRecursiveDictionary	"SixxLoadingTestCase debug: #testReadCompactSixxForRecursiveDictionary"	| originalSettings sixxString dic |	originalSettings := SixxSettings useCompactTags.	[SixxSettings useCompactTags: true.	sixxString := '&lt;o i="0" t="Dictionary" &gt;	&lt;o i="1" t="Association" &gt;		&lt;o i="2" n="key" t="Symbol" &gt;key2&lt;/o&gt;		&lt;o i="3" n="value" t="SmallInteger" &gt;100&lt;/o&gt;	&lt;/o&gt;	&lt;o i="4" t="Association" &gt;		&lt;o i="5" n="key" t="Symbol" &gt;key1&lt;/o&gt;		&lt;o i="6" n="value" t="String" &gt;value1&lt;/o&gt;	&lt;/o&gt;	&lt;o i="7" t="Association" &gt;		&lt;o i="8" n="key" t="Symbol" &gt;key3&lt;/o&gt;		&lt;o r="0" n="value" &gt;&lt;/o&gt;	&lt;/o&gt;&lt;/o&gt;'.	dic := Object readSixxFrom: sixxString.	self		should: [dic size = 3].	self		should: [(dic at: #key1)				= 'value1'].	self		should: [(dic at: #key2)				= 100].	self		should: [(dic at: #key3)				== dic]				] ensure: [SixxSettings useCompactTags: originalSettings].</body><body package="SIXX-Tests">testReadSixxForArray	| sixxString arr |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;	&lt;sixx.object sixx.id="1" sixx.type="SmallInteger" &gt;10&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="SmallInteger" &gt;20&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="3" sixx.type="SmallInteger" &gt;30&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	arr := Object readSixxFrom: sixxString.	self should: [arr size = 3].	self should: [(arr at: 1)			= 10].	self should: [(arr at: 2)			= 20].	self should: [(arr at: 3)			= 30]</body><body package="SIXX-Tests">testReadSixxForBag	| sixxString bag |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Bag" &gt;	&lt;sixx.object sixx.id="1" sixx.type="String" &gt;abcd&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="SmallInteger" &gt;10&lt;/sixx.object&gt;	&lt;sixx.object sixx.idref="2" &gt;&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="3" sixx.type="Array" &gt;		&lt;sixx.object sixx.idref="2" &gt;&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="4" sixx.type="SmallInteger" &gt;20&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	bag := Object readSixxFrom: sixxString.	self should: [bag size = 4].	self should: [(bag occurrencesOf: 10)			= 2].	self should: [(bag occurrencesOf: 'abcd')			= 1].	self should: [(bag occurrencesOf: #(10 20))			= 1]</body><body package="SIXX-Tests">testReadSixxForBoolean	| sixxString |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="True" &gt;true&lt;/sixx.object&gt;'.	self should: [(Object readSixxFrom: sixxString)			= true]</body><body package="SIXX-Tests">testReadSixxForByteArray	| sixxString byteArr |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="ByteArray" &gt;0A141E&lt;/sixx.object&gt;'.	byteArr := Object readSixxFrom: sixxString.	self should: [byteArr size = 3].	self should: [(byteArr at: 1) = 10].	self should: [(byteArr at: 2) = 20].	self should: [(byteArr at: 3) = 30]</body><body package="SIXX-Tests">testReadSixxForCharacter	| sixxString |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Character" &gt;$A&lt;/sixx.object&gt;'.	self should: [(Object readSixxFrom: sixxString)			= $A]</body><body package="SIXX-Tests">testReadSixxForClass	| sixxString |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="SixxMockClassForUnitTest class" &gt;	&lt;sixx.object sixx.id="1" sixx.name="instVar1" sixx.type="SmallInteger" &gt;10&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.name="instVar2" sixx.type="SmallInteger" &gt;20&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="3" sixx.name="instVar3" sixx.type="SmallInteger" &gt;30&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	SixxMockClassForUnitTest instVar1: 0; instVar2: 0; instVar3: 0.	self should: [SixxMockClassForUnitTest instVar1 = 0].	self should: [SixxMockClassForUnitTest instVar2 = 0].	self should: [SixxMockClassForUnitTest instVar3 = 0].	Object readSixxFrom: sixxString.	self should: [SixxMockClassForUnitTest instVar1 = 10].	self should: [SixxMockClassForUnitTest instVar2 = 20].	self should: [SixxMockClassForUnitTest instVar3 = 30]</body><body package="SIXX-Tests">testReadSixxForCompositeObject	| sixxString slipObj headerObj |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="SixxMockEnvelope" &gt;	&lt;sixx.object sixx.id="1" sixx.name="header" sixx.type="SixxMockHeader" &gt;		&lt;sixx.object sixx.id="2" sixx.name="id" sixx.type="String" &gt;99&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	slipObj := Object readSixxFrom: sixxString.	headerObj := slipObj header.	self should: [headerObj id = '99']</body><body package="SIXX-Tests">testReadSixxForCorruptRecursiveDictionary	| originalRecoveryRead |	[ |  sixxString |	originalRecoveryRead := SixxSettings useRecoveryRead.	SixxSettings useRecoveryRead: false.	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Dictionary" &gt;	&lt;sixx.object sixx.id="1" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="2" sixx.name="key" sixx.type="Symbol" &gt;key2&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.name="value" sixx.type="SmallInteger" &gt;100&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="4" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="5" sixx.name="key" sixx.type="Symbol" &gt;key1&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="6" sixx.name="value" sixx.type="String" &gt;value1&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="7" sixx.type="Association" &gt;		&lt;sixx.object six'.	self should:[ Object readSixxFrom: sixxString] raise: SixxXmlParseError.		] ensure: [SixxSettings useRecoveryRead: originalRecoveryRead]</body><body package="SIXX-Tests">testReadSixxForDate	| sixxString |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Date" &gt;14 May 2002&lt;/sixx.object&gt;'.	self should: [(Object readSixxFrom: sixxString)			= (Date					newDay: 14					monthNumber: 5					year: 2002)]</body><body package="SIXX-Tests">testReadSixxForDate2	| sixxString |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Date" &gt;May 14, 2002&lt;/sixx.object&gt;'.	self should: [(Object readSixxFrom: sixxString)			= (Date					newDay: 14					monthNumber: 5					year: 2002)]</body><body package="SIXX-Tests">testReadSixxForDictionary	| sixxString dic |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Dictionary" &gt;	&lt;sixx.object sixx.id="1" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="2" sixx.name="key" sixx.type="Symbol" &gt;key2&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.name="value" sixx.type="SmallInteger" &gt;100&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="4" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="5" sixx.name="key" sixx.type="Symbol" &gt;key1&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="6" sixx.name="value" sixx.type="String" &gt;value1&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	dic := Object readSixxFrom: sixxString.	self should: [dic size = 2].	self should: [(dic at: #key1)			= 'value1'].	self should: [(dic at: #key2)			= 100]</body><body package="SIXX-Tests">testReadSixxForFraction	"SixxLoadingTestCase debug: #testReadSixxForFraction"	| sixxString |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Fraction" &gt;(3/4)&lt;/sixx.object&gt;'.	self		should: [(Object readSixxFrom: sixxString)				= (3/4)]</body><body package="SIXX-Tests">testReadSixxForInterval	| sixxString |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Interval" &gt;(1 to: 10 by: 3)&lt;/sixx.object&gt;'.	self should: [(Object readSixxFrom: sixxString) = (1 to: 10 by: 3)]</body><body package="SIXX-Tests">testReadSixxForObjectWithId	"SixxLoadingTestCase debug: #testReadSixxForObjectWithId"	| sixxString array |	sixxString :=  '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;	&lt;sixx.object sixx.id="a" sixx.type="SixxMockObjectWithId" &gt;		&lt;sixx.object sixx.id="2" sixx.name="id" sixx.type="String" &gt;a&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.name="data" sixx.type="String" &gt;aaa&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="b" sixx.type="SixxMockObjectWithId" &gt;		&lt;sixx.object sixx.id="5" sixx.name="id" sixx.type="String" &gt;b&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="6" sixx.name="data" sixx.type="String" &gt;bbb&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.idref="a" &gt;&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	array := Object readSixxFrom: sixxString.	self should: [(array at: 1) = (array at: 3)].	self shouldnt: [(array at: 1) = (array at: 2)].	self should: [(array at: 1) id = 'a'].	self should: [(array at: 1) data = 'aaa'].	self should: [(array at: 2) id = 'b'].	self should: [(array at: 2) data = 'bbb'].</body><body package="SIXX-Tests">testReadSixxForPoint	| sixxString |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Point" &gt;1@3&lt;/sixx.object&gt;'.	self should: [(Object readSixxFrom: sixxString) = (1 @ 3)].	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Point" &gt;123456789.0@-3.5&lt;/sixx.object&gt;'.	self should: [(Object readSixxFrom: sixxString) = (123456789.0 @ -3.5)].	sixxString :=  '&lt;sixx.object sixx.id="0" sixx.type="Point" &gt;(41/5)@(234/5)&lt;/sixx.object&gt;'.	self should: [(Object readSixxFrom: sixxString) = ((41/5)@(234/5))].</body><body package="SIXX-Tests">testReadSixxForRectangle	"SixxLoadingTestCase debug: #testReadSixxForRectangle"	| sixxString |	sixxString :=  '&lt;sixx.object sixx.id="0" sixx.type="Rectangle" &gt;1@1 corner: 3@4&lt;/sixx.object&gt;'.	self		should: [(Object readSixxFrom: sixxString)				= (1@1 corner: 3@4)].				sixxString :=   '&lt;sixx.object sixx.id="0" sixx.type="Rectangle" &gt;-1@1.234 corner: 3.456@5&lt;/sixx.object&gt;'.	self		should: [(Object readSixxFrom: sixxString)				= (-1@1.234 corner: 3.456@5)].</body><body package="SIXX-Tests">testReadSixxForRectangleOldFormat	"SixxLoadingTestCase debug: #testReadSixxForRectangleOldFormat"	| sixxString |	sixxString :=  '&lt;sixx.object sixx.id="0" sixx.type="Rectangle" &gt;	&lt;sixx.object sixx.id="1" sixx.name="origin" sixx.type="Point" &gt;1@1&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.name="corner" sixx.type="Point" &gt;3@4&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	self		should: [(Object readSixxFrom: sixxString)				= (1@1 corner: 3@4)].</body><body package="SIXX-Tests">testReadSixxForRecursiveArray	| sixxString arr |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;	&lt;sixx.object sixx.id="1" sixx.type="SmallInteger" &gt;10&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="SmallInteger" &gt;20&lt;/sixx.object&gt;	&lt;sixx.object sixx.idref="0" &gt;&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	arr := Object readSixxFrom: sixxString.	self should: [arr size = 3].	self should: [(arr at: 1)			= 10].	self should: [(arr at: 2)			= 20].	self should: [(arr at: 3)			== arr]</body><body package="SIXX-Tests">testReadSixxForRecursiveDictionary	| sixxString dic |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Dictionary" &gt;	&lt;sixx.object sixx.id="1" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="2" sixx.name="key" sixx.type="Symbol" &gt;key2&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.name="value" sixx.type="SmallInteger" &gt;100&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="4" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="5" sixx.name="key" sixx.type="Symbol" &gt;key1&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="6" sixx.name="value" sixx.type="String" &gt;value1&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="7" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="8" sixx.name="key" sixx.type="Symbol" &gt;key3&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="0" sixx.name="value" &gt;&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	dic := Object readSixxFrom: sixxString.	self should: [dic size = 3].	self should: [(dic at: #key1)			= 'value1'].	self should: [(dic at: #key2)			= 100].	self should: [(dic at: #key3)			== dic]</body><body package="SIXX-Tests">testReadSixxForRunArray	| sixxString runArray |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="RunArray" &gt;	&lt;sixx.object sixx.id="1" sixx.name="runs" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="2" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.type="SmallInteger" &gt;2&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="2" &gt;&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="4" sixx.name="values" sixx.type="Array" &gt;		&lt;sixx.object sixx.idref="2" &gt;&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="3" &gt;&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="5" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	runArray := Object readSixxFrom: sixxString.	self should: [runArray runs = #(1 2 1)].	self should: [runArray values = #(1 2 3)]</body><body package="SIXX-Tests">testReadSixxForSimpleObject	| sixxString |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="SixxMockHeader" &gt;	&lt;sixx.object sixx.id="1" sixx.name="id" sixx.type="String" &gt;1000&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	self should: [(Object readSixxFrom: sixxString) id = '1000']</body><body package="SIXX-Tests">testReadSixxForStringUsingCDATA	| originalSetting sixxString string |		[originalSetting := SixxSettings useCDATA.	SixxSettings useCDATA: true.	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="String" &gt;&lt;![CDATA[Hi, I''m String-object.How are you?]]&gt;&lt;/sixx.object&gt;'.	string := Object readSixxFrom: sixxString.	self should: [string = 'Hi, I''m String-object.How are you?']]		ensure: [SixxSettings useCDATA: originalSetting]</body><body package="SIXX-Tests">testReadSixxForTime	| sixxString |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="Time" &gt;4:10:32 pm&lt;/sixx.object&gt;'.	self should: [(Object readSixxFrom: sixxString)			= (Time readFrom: (ReadStream on: '4:10:32 pm'))]</body><body package="SIXX-Tests">testReadSixxForUndefinedObject	| sixxString |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="UndefinedObject" &gt;nil&lt;/sixx.object&gt;'.	self should: [(Object readSixxFrom: sixxString)			= nil]</body><body package="SIXX-Tests">testReadSixxForVariableObject	| sixxString variableObj |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="SixxMockBinaryData" &gt;	&lt;sixx.object sixx.id="1" sixx.name="author" sixx.type="String" &gt;MU&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.name="version" sixx.type="String" &gt;0.1&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="3" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="4" sixx.type="SmallInteger" &gt;2&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="5" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	variableObj := Object readSixxFrom: sixxString.	self should: [variableObj author = 'MU'].	self should: [variableObj version = '0.1'].	self should: [variableObj size = 3].	self should: [(variableObj at: 1) = 1].	self should: [(variableObj at: 2) = 2].	self should: [(variableObj at: 3) = 3]</body><body package="SIXX-Tests">testReadSixxForVariableObjectNoData	| sixxString variableObj |	sixxString := '&lt;sixx.object sixx.id="0" sixx.type="SixxMockBinaryData" &gt; 	&lt;sixx.object sixx.id="1" sixx.name="author" sixx.type="String" &gt;MU&lt;/sixx.object&gt; 	&lt;sixx.object sixx.id="2" sixx.name="version" sixx.type="String" &gt;0.1&lt;/sixx.object&gt; &lt;/sixx.object&gt; '.	variableObj := Object readSixxFrom: sixxString.	self should: [variableObj author = 'MU'].	self should: [variableObj version = '0.1'].	self should: [variableObj size = 0]</body><body package="SIXX-Tests">testReadSixxWithClassDoesNotExist	| str catched |	str := '&lt;sixx.object sixx.id="0" sixx.type="doesNotExistString" &gt;abcde&lt;/sixx.object&gt;'.	self should: [(Object readSixxFrom: str)			= nil].	catched := false.	self		should: 			[[Object readSixxFrom: str]				on: SixxClassNotFound do: [:ex | catched := true].			catched]</body><body package="SIXX-Tests">testReadSixxWithNoTypeDefinitionFound	| str catched origUseReduced |	str :=  '&lt;sixx.object sixx.id="0" sixx.type="SixxMockPerson" &gt;	&lt;sixx.object sixx.id="1" sixx.name="name" sixx.type="String" &gt;john&lt;/sixx.object&gt;	&lt;sixx.object sixx.name="requests" sixx.type="UndefinedObject" /&gt;	&lt;sixx.object sixx.name="partners" sixx.type="UndefinedObject" /&gt;&lt;/sixx.object&gt;'.	origUseReduced := SixxSettings useReducedTags.	SixxSettings useReducedTags: true.	self should: [(Object readSixxFrom: str)			= nil].	catched := false.	self		should: 			[[Object readSixxFrom: str]				on: SixxNoTypeDefinition do: [:ex | catched := true].			catched].	SixxSettings useReducedTags: origUseReduced.</body></methods><methods><class-id>Sixx.SixxMockVariableNewFailedClass</class-id> <category>private-sixx</category><body package="SIXX-Tests">sixxContentOn: aStream indent: level context: dictionary 	"override if you like"	self 		sixxInstVarsOn: aStream		indent: level		context: dictionary.	self 		sixxIndexFieldsOn: aStream		indent: level		context: dictionary</body></methods><methods><class-id>Sixx.SixxMockVariableNewFailedClass</class-id> <category>accessing</category><body package="SIXX-Tests">att1	^att1</body><body package="SIXX-Tests">att1: aValue	att1 := aValue</body><body package="SIXX-Tests">att2	^att2</body><body package="SIXX-Tests">att2: aValue	att2 := aValue</body><body package="SIXX-Tests">att3Block	^att3Block</body><body package="SIXX-Tests">att3Block: aValue	att3Block := aValue</body></methods><methods><class-id>Sixx.SixxMockVariableNewFailedClass</class-id> <category>initializing-sixx</category><body package="SIXX-Tests">initializeFromSixxElement: sixxElement context: aDictionary 	self initializeMixedFieldsFromSixxElement: sixxElement context: aDictionary</body><body package="SIXX-Tests">sixxInitialize	att3Block := [:a :b | a &lt; b]</body></methods><methods><class-id>Sixx.SixxMockVariableNewFailedClass class</class-id> <category>for tests</category><body package="SIXX-Tests">prototype1	"self prototype1"	| inst |	inst := self basicNew: 3.	1 to: 3 do: [:idx | inst at: idx put: idx printString].	inst att1: 1.	inst att2: 'TWO'.	inst att3Block: [:this | 'is block'].	^inst</body><body package="SIXX-Tests">prototype2	"self prototype2"	| inst |	inst := self basicNew: 3.	1 to: 3 do: [:idx | inst at: idx put: idx printString].	inst att1: 3.	inst att2: 'Four'.	inst att3Block: [:this :is | 'block2'].	^inst</body></methods><methods><class-id>Sixx.SixxMockVariableNewFailedClass class</class-id> <category>instance creation</category><body package="SIXX-Tests">new: size 	Error new signal: '#new: should not be called'</body></methods><methods><class-id>Sixx.SixxMockVariableNewFailedClass class</class-id> <category>instance creation-sixx</category><body package="SIXX-Tests">createInstanceOf: aClass withSixxElement: sixxElement 	^self createMixedFieldsInstanceOf: aClass withSixxElement: sixxElement</body></methods><methods><class-id>Sixx.SixxMockFixedAlternativeClass class</class-id> <category>instance creation</category><body package="SIXX-Tests">new	"new is OK for me"	^self basicNew</body></methods><methods><class-id>Sixx.SixxWriteStreamTestCase</class-id> <category>tests</category><body package="SIXX-Tests">testCloseTwice	"SixxWriteStreamTestCase debug: #testCloseTwice"	| st wst expected |	expected := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="String" &gt;abc&lt;/sixx.object&gt;&lt;/sixx&gt;'.	st := WriteStream on: String new.	wst := SixxWriteStream onWithDeclaration: st.	wst nextPut: 'abc'.	wst close.	wst close.	self should: [st contents = expected]</body><body package="SIXX-Tests">testCompactWriteRecursiveObject	"SixxWriteStreamTestCase debug: #testCompactWriteRecursiveObject"		| originalSettings st wst expected arr col |	originalSettings := SixxSettings useCompactTags.	SixxSettings useCompactTags: true.	[expected := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;cixx v="1.0"&gt;	&lt;o i="0" t="Array" &gt;		&lt;o i="1" t="SmallInteger" &gt;10&lt;/o&gt;		&lt;o i="2" t="SmallInteger" &gt;20&lt;/o&gt;		&lt;o i="3" t="SmallInteger" &gt;30&lt;/o&gt;	&lt;/o&gt;	&lt;o i="4" t="OrderedCollection" &gt;		&lt;o r="0" /&gt;	&lt;/o&gt;	&lt;o i="5" t="Array" &gt;		&lt;o r="1" /&gt;		&lt;o r="2" /&gt;		&lt;o r="3" /&gt;	&lt;/o&gt;&lt;/cixx&gt;'.	arr := #(10 20 30 ).	col := OrderedCollection with: arr.	st := WriteStream on: String new.	wst := SixxWriteStream onWithDeclaration: st.	wst nextPut: arr.	wst nextPut: col.	wst nextPut: #(10 20 30 ) copy.	wst close.	self		should: [st contents = expected]			] ensure: [SixxSettings useCompactTags: originalSettings]</body><body package="SIXX-Tests">testKeepStreamOpening	"SixxWriteStreamTestCase debug: #testKeepStreamOpening"	| st wst expected |	expected := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="String" &gt;abc&lt;/sixx.object&gt;'.	st := WriteStream on: String new.	wst := SixxWriteStream onWithDeclaration: st.	wst nextPut: 'abc'.	self should: [st contents = expected]</body><body package="SIXX-Tests">testNeverNextPutAndThenClose	"SixxWriteStreamTestCase debug: #testNeverNextPutAndThenClose"	| st wst expected |	expected := ''.	st := WriteStream on: String new.	wst := SixxWriteStream on: st.	wst close.	self should: [st contents = expected]</body><body package="SIXX-Tests">testNextPut	"SixxWriteStreamTestCase debug: #testNextPut"	| st wst expected |	expected := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="String" &gt;abc&lt;/sixx.object&gt;&lt;/sixx&gt;'.	st := WriteStream on: String new.	wst := SixxWriteStream onWithDeclaration: st.	wst nextPut: 'abc'.	wst close.	self should: [st contents = expected]</body><body package="SIXX-Tests">testNextPutAll	"SixxWriteStreamTestCase debug: #testNextPutAll"	| st wst expected |	expected := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="Character" &gt;$a&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="1" sixx.type="Character" &gt;$b&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="Character" &gt;$c&lt;/sixx.object&gt;&lt;/sixx&gt;'.	st := WriteStream on: String new.	wst := SixxWriteStream onWithDeclaration: st.	wst nextPutAll: 'abc'.	wst close.	self should: [st contents = expected]</body><body package="SIXX-Tests">testWriteRecursiveObject	"SixxWriteStreamTestCase debug: #testWriteRecursiveObject"	| st wst expected arr col |	expected := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="1" sixx.type="SmallInteger" &gt;10&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="2" sixx.type="SmallInteger" &gt;20&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.type="SmallInteger" &gt;30&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="4" sixx.type="OrderedCollection" &gt;		&lt;sixx.object sixx.idref="0" /&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="5" sixx.type="Array" &gt;		&lt;sixx.object sixx.idref="1" /&gt;		&lt;sixx.object sixx.idref="2" /&gt;		&lt;sixx.object sixx.idref="3" /&gt;	&lt;/sixx.object&gt;&lt;/sixx&gt;'.	arr := #(10 20 30).	col := OrderedCollection with: arr.	st := WriteStream on: String new.	wst := SixxWriteStream onWithDeclaration: st.	wst nextPut: arr.	wst nextPut: col.	wst nextPut: #(10 20 30) copy.	wst close.	self should: [st contents = expected]</body></methods><methods><class-id>Sixx.SixxReadStreamTestCase</class-id> <category>tests</category><body package="SIXX-Tests">testAtEnd	"SixxReadStreamTestCase debug: #testAtEnd"	| str stream |	str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="String" &gt;a&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="1" sixx.type="String" &gt;b&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="String" &gt;c&lt;/sixx.object&gt;&lt;/sixx&gt;'.	stream := SixxReadStream on: str readStream.	self should: [stream next = 'a' and: [stream atEnd not]].	self should: [stream next = 'b' and: [stream atEnd not]].	self should: [stream next = 'c' and: [stream atEnd]].	self should: [stream next = nil and: [stream atEnd]]</body><body package="SIXX-Tests">testCachedObjects	| str stream |	str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="String" &gt;a&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="1" sixx.type="String" &gt;b&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="String" &gt;c&lt;/sixx.object&gt;&lt;/sixx&gt;'.	stream := SixxReadStream on: str readStream.	stream next; next.	self should: [(stream cachedObjects at: 1)			= 'a'].	self should: [(stream cachedObjects at: 2)			= 'b'].	self shouldnt: [stream cachedObjects includesKey: 3].	stream next.	self should: [(stream cachedObjects at: 3)			= 'c']</body><body package="SIXX-Tests">testCompactNext	"SixxReadStreamTestCase debug: #testCompactNext"	| originalSettings str stream |	originalSettings := SixxSettings useCompactTags.	[str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;cixx v="1.0"&gt;	&lt;o i="0" t="String" &gt;a&lt;/o&gt;	&lt;o i="1" t="String" &gt;b&lt;/o&gt;	&lt;o i="2" t="String" &gt;c&lt;/o&gt;&lt;/cixx&gt;'.	stream := SixxReadStream on: str readStream.	self		should: [stream next = 'a'].	self		should: [stream next = 'b'].	self		should: [stream next = 'c'].	self		should: [stream next = nil]			] ensure: [SixxSettings useCompactTags: originalSettings]</body><body package="SIXX-Tests">testCompactNextWithIdref	"SixxReadStreamTestCase debug: #testCompactNextWithIdref"	| originalSettings str stream |	originalSettings := SixxSettings useCompactTags.	[str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;cixx v="1.0"&gt;	&lt;o i="0" t="Character" &gt;$a&lt;/o&gt;	&lt;o i="1" t="Character" &gt;$u&lt;/o&gt;	&lt;o r="0" &gt;&lt;/o&gt;	&lt;o r="1" &gt;&lt;/o&gt;&lt;/cixx&gt;'.	stream := SixxReadStream on: str readStream.	self		should: [stream next = $a].	self		should: [stream next = $u].	self		should: [stream next = $a].	self		should: [stream next = $u]			] ensure: [SixxSettings useCompactTags: originalSettings]</body><body package="SIXX-Tests">testCompactRecoveryRead	"SixxReadStreamTestCase debug: #testCompactRecoveryRead"	| originalRecoveryRead originalUseCompactTags  |	[ |  str stream nextObject |	originalRecoveryRead := SixxSettings useRecoveryRead.	originalUseCompactTags := SixxSettings useCompactTags.	SixxSettings useRecoveryRead: true.	SixxSettings useCompactTags: true.	str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;cixx v="1.0"&gt;	&lt;o i="0" t="Dictionary" &gt;	&lt;o i="1" t="Association" &gt;		&lt;o i="2" n="key" t="Symbol" &gt;key2&lt;/o&gt;		&lt;o i="3" n="value" t="SmallInteger" &gt;100&lt;/o&gt;	&lt;/o&gt;	&lt;o i="4" t="Association" &gt;		&lt;o i="5" n="key" t="Symbol" &gt;key1&lt;/o&gt;		&lt;o i="6" n="value" t="String" &gt;value1&lt;/o&gt;	&lt;/o&gt;	&lt;o i="7" t="Association" &gt;		&lt;o i'.	stream := SixxReadStream on: str readStream.	self shouldnt: [nextObject := stream next] raise: SixxXmlParseError.	self		should: [nextObject class = Dictionary].	self		should: [(nextObject at: #key1)				= 'value1'].	self		should: [(nextObject at: #key2)				= 100].	self		shouldnt: [(nextObject includesKey: #key3)].		] ensure: [SixxSettings useRecoveryRead: originalRecoveryRead; useCompactTags: originalUseCompactTags]</body><body package="SIXX-Tests">testNext	| str stream |	str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="String" &gt;a&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="1" sixx.type="String" &gt;b&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="String" &gt;c&lt;/sixx.object&gt;&lt;/sixx&gt;'.	stream := SixxReadStream on: str readStream.	self should: [stream next = 'a'].	self should: [stream next = 'b'].	self should: [stream next = 'c'].	self should: [stream next = nil]</body><body package="SIXX-Tests">testNextMany	| str stream |	str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="String" &gt;a&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="1" sixx.type="String" &gt;b&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="String" &gt;c&lt;/sixx.object&gt;&lt;/sixx&gt;'.	stream := SixxReadStream on: str readStream.	self should: [(stream next: 2)			= (OrderedCollection with: 'a' with: 'b')].	stream reset.	self should: [(stream next: 5)			= (OrderedCollection					with: 'a'					with: 'b'					with: 'c')]</body><body package="SIXX-Tests">testNextWithIdref	| str stream |	str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="Character" &gt;$a&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="1" sixx.type="Character" &gt;$u&lt;/sixx.object&gt;	&lt;sixx.object sixx.idref="0" &gt;&lt;/sixx.object&gt;	&lt;sixx.object sixx.idref="1" &gt;&lt;/sixx.object&gt;&lt;/sixx&gt;'.	stream := SixxReadStream on: str readStream.	self should: [stream next = $a].	self should: [stream next = $u].	self should: [stream next = $a].	self should: [stream next = $u]</body><body package="SIXX-Tests">testPeek	| str stream |	str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="String" &gt;a&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="1" sixx.type="String" &gt;b&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="String" &gt;c&lt;/sixx.object&gt;&lt;/sixx&gt;'.	stream := SixxReadStream on: str readStream.	self should: [stream position = 0].	self should: [stream peek = 'a'].	self should: [stream position = 0].	self should: [stream next = 'a']</body><body package="SIXX-Tests">testPosition	| str stream |	str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="String" &gt;a&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="1" sixx.type="String" &gt;b&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="String" &gt;c&lt;/sixx.object&gt;&lt;/sixx&gt;'.	stream := SixxReadStream on: str readStream.	stream next: 3.	self should: [stream position = 3].	stream position: 1.	self should: [stream next = 'b']</body><body package="SIXX-Tests">testReadEmptyStream	| stream empStream |	empStream := '' readStream.	self should: [empStream size = 0].	stream :=  SixxReadStream on: empStream.		self should: [stream position = 0].	self should: [stream atEnd].	self should: [stream next isNil].</body><body package="SIXX-Tests">testReadNextContainsIdref	| str stream firstObj secondObj thirdObj |	str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="1" sixx.type="SmallInteger" &gt;10&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="2" sixx.type="SmallInteger" &gt;20&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.type="SmallInteger" &gt;30&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="4" sixx.type="OrderedCollection" &gt;		&lt;sixx.object sixx.idref="0" &gt;&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="5" sixx.type="Array" &gt;		&lt;sixx.object sixx.idref="1" &gt;&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="2" &gt;&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="3" &gt;&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx&gt;'.	stream := SixxReadStream on: str readStream.	self should: [stream size = 3].	firstObj := stream next.	secondObj := stream next.	thirdObj := stream next.	self should: [firstObj = #(10 20 30)].	self should: [(secondObj at: 1)			== firstObj].	self should: [thirdObj = #(10 20 30) and: [thirdObj ~~ firstObj]]</body><body package="SIXX-Tests">testRecoveryRead	| originalRecoveryRead   |	[ |  str stream nextObject |	originalRecoveryRead := SixxSettings useRecoveryRead. 	SixxSettings useRecoveryRead: true.	str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="Dictionary" &gt;	&lt;sixx.object sixx.id="1" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="2" sixx.name="key" sixx.type="Symbol" &gt;key2&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.name="value" sixx.type="SmallInteger" &gt;100&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="4" sixx.type="Association" &gt;		&lt;sixx.object sixx.id="5" sixx.name="key" sixx.type="Symbol" &gt;key1&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="6" sixx.name="value" sixx.type="String" &gt;value1&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="7" sixx.type="Association" &gt;		&lt;sixx.object six'.	stream := SixxReadStream on: str readStream.	self shouldnt: [nextObject := stream next] raise: SixxXmlParseError.	self		should: [nextObject class = Dictionary].	self		should: [(nextObject at: #key1)				= 'value1'].	self		should: [(nextObject at: #key2)				= 100].	self		shouldnt: [(nextObject includesKey: #key3)].		] ensure: [SixxSettings useRecoveryRead: originalRecoveryRead]</body><body package="SIXX-Tests">testReset	| str stream |	str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="String" &gt;a&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="1" sixx.type="String" &gt;b&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="String" &gt;c&lt;/sixx.object&gt;&lt;/sixx&gt;'.	stream := SixxReadStream on: str readStream.	[stream atEnd]		whileFalse: [stream next].	self should: [stream next = nil].	stream reset.	self should: [stream position = 0]</body><body package="SIXX-Tests">testSize	"SixxReadStreamTestCase debug: #testSize"	| str stream |	str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="String" &gt;a&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="1" sixx.type="String" &gt;b&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="String" &gt;c&lt;/sixx.object&gt;&lt;/sixx&gt;'.	stream := SixxReadStream on: str readStream.	self should: [stream size = 3]</body><body package="SIXX-Tests">testSkip	| str stream |	str := '&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="String" &gt;a&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="1" sixx.type="String" &gt;b&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="String" &gt;c&lt;/sixx.object&gt;&lt;/sixx&gt;'.	stream := SixxReadStream on: str readStream.	self should: [stream position = 0].	stream skip: 1.	self should: [stream position = 1].	stream next.	self should: [stream position = 2].	stream skip: 1.	self should: [stream position = 3].	stream skip: -1.	self should: [stream position = 2].	stream skip: 2.	self should: [stream position = 3]</body></methods><methods><class-id>Sixx.SixxMockBinaryData</class-id> <category>accessing</category><body package="SIXX-Tests">author	^author</body><body package="SIXX-Tests">author: aString	author :=  aString</body><body package="SIXX-Tests">version	^version</body><body package="SIXX-Tests">version: aString	version :=  aString</body></methods><methods><class-id>Sixx.SixxMockBinaryData class</class-id> <category>instance creation</category><body package="SIXX-Tests">author: author version: version data: binaryData 	"SixxMockBinaryData author: 'MU' version: '0.1' data: #(1 2 3)"	| inst idx |	inst := self new: binaryData size.	idx := 0.	binaryData do: [:each | inst at: (idx := idx + 1) put: each].	inst author: author.	inst version: version.	^inst</body></methods><methods><class-id>Sixx.SixxMockShapeChangedObject</class-id> <category>accessing</category><body package="SIXX-Tests">addedAtt1	^addedAtt1</body><body package="SIXX-Tests">addedAtt1: anObject	addedAtt1 := anObject</body><body package="SIXX-Tests">originalAtt1	^originalAtt1</body><body package="SIXX-Tests">originalAtt1: anObject	originalAtt1 := anObject</body><body package="SIXX-Tests">renamedAtt1	^renamedAtt1</body><body package="SIXX-Tests">renamedAtt1: anObject	renamedAtt1 := anObject</body></methods><methods><class-id>Sixx.SixxMockShapeChangedObject</class-id> <category>shapeChange-sixx</category><body package="SIXX-Tests">sixxInitialize	addedAtt1 := 2</body><body package="SIXX-Tests">sixxInstVarNamed: varName put: value	varName == #oldNamedVar1 ifTrue: [^self renamedAtt1: value].	super sixxInstVarNamed: varName put: value</body></methods><methods><class-id>Sixx.SixxMockObjectWithNonRef2</class-id> <category>sixx-writning</category><body package="SIXX-Tests">sixxNonReferencableInstVarNames	^#(#att1)</body></methods><methods><class-id>Sixx.SixxMockObjectWithNonRef2 class</class-id> <category>sixx-writing</category><body package="SIXX-Tests">sixxNonReferencableInstVarNames	^#(#att1)</body></methods><methods><class-id>Sixx.SixxMockObjectWithNonRef</class-id> <category>sixx-writning</category><body package="SIXX-Tests">sixxNonReferencableInstVarNames	^#(#att1)</body></methods><methods><class-id>Sixx.SixxMockObjectWithNonRef class</class-id> <category>sixx-writing</category><body package="SIXX-Tests">sixxNonReferencableInstVarNames	^#(#att1)</body></methods><methods><class-id>Sixx.SixxMockCustomWriteObject</class-id> <category>accessing</category><body package="SIXX-Tests">name	^name</body><body package="SIXX-Tests">name: anObject	name := anObject</body><body package="SIXX-Tests">time	^time</body><body package="SIXX-Tests">time: anObject	time := anObject</body></methods><methods><class-id>Sixx.SixxMockCustomWriteObject</class-id> <category>sixx-writing</category><body package="SIXX-Tests">sixxWriteValue	"Write myself as an array"	^SixxMockMementoArray with: self name with: self time</body></methods><methods><class-id>Sixx.SixxMockCustomWriteObject</class-id> <category>initialize-release</category><body package="SIXX-Tests">initialize	name := 'TestName'.	time := Time now printString</body></methods><methods><class-id>Sixx.SixxMockObjectInitializingOnRead</class-id> <category>initializing-sixx</category><body package="SIXX-Tests">sixxInitialize	cache1 := 1234567.	cache2 := 'this is cache2'</body></methods><methods><class-id>Sixx.SixxShapeChangerTestCase</class-id> <category>tests</category><body package="SIXX-Tests">testNewFailedRead	"SixxShapeChangerTestCase debug: #testNewFailedRead"	| oldSixx arr obj1 obj2 obj3 |	oldSixx :=  '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="1" sixx.type="SixxMockFixedNewFailedClass" &gt;			&lt;sixx.object sixx.id="2" sixx.name="att1" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="3" sixx.name="att2" sixx.type="SmallInteger" &gt;2&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="5" sixx.type="SixxMockFixedNewFailedClass" &gt;			&lt;sixx.object sixx.id="6" sixx.name="att1" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="7" sixx.name="att2" sixx.type="SmallInteger" &gt;4&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="1" &gt;&lt;/sixx.object&gt;	&lt;/sixx.object&gt;'.	SixxContext evaluate: [		arr :=  Object readSixxFrom: oldSixx.	] shapeChangersBy: [:shapeChangers | 		shapeChangers at: #SixxMockFixedNewFailedClass put: SixxMockFixedAlternativeClass.	].	self should: [arr class = Array].	self should: [arr size = 3].	obj1 := arr at: 1.	self should: [obj1 class = SixxMockFixedAlternativeClass].	self should: [obj1 att1 = 1].	self should: [obj1 att2 = 2].	self should: [obj1 att3Block notNil].	obj2 := arr at: 2.	self should: [obj2 class = SixxMockFixedAlternativeClass].	self should: [obj2 att1 = 3].	self should: [obj2 att2 = 4].	self should: [obj2 att3Block notNil].	obj3 := arr at: 3.	self should: [obj3 = obj1].</body><body package="SIXX-Tests">testRenamedRead	"SixxShapeChangerTestCase debug: #testRenamedRead"	| data oldSixx obj |	data := Array with: 1 with:2 with: (Array with:1 with:3 with:1).	oldSixx := data sixxString copyReplaceAll: 'SmallInteger' with: 'SmallIntegerOLD'.	SixxContext evaluate: [		obj :=  Object readSixxFrom: oldSixx.	] shapeChangersBy: [:shapeChangers | 		shapeChangers at: #SmallIntegerOLD put: SmallInteger.	].	self should: [obj = data]</body><body package="SIXX-Tests">testRenamedReadFailed	"SixxShapeChangerTestCase debug: #testRenamedReadFailed"	| data oldSixx obj |	data := Array with: 1 with:2 with: (Array with:1 with:3 with:1).	oldSixx := data sixxString copyReplaceAll: 'SmallInteger' with: 'SmallIntegerOLD'.	obj := Object readSixxFrom: oldSixx.	self shouldnt: [obj = data].	self should: [obj = #(nil nil #(nil nil nil))]</body><body package="SIXX-Tests">testShapeChangedComplexRead	"SixxShapeChangerTestCase debug: #testShapeChangedComplexRead"	| oldSixx arr obj1 obj2 obj3 |	oldSixx :=  '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="1" sixx.type="SixxMockShapeChangedObjectOLD" &gt;			&lt;sixx.object sixx.id="2" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="3" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="4" sixx.type="SixxMockShapeChangedObjectOLD" &gt;			&lt;sixx.object sixx.id="5" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;11&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="6" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;33&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="1" &gt;&lt;/sixx.object&gt;	&lt;/sixx.object&gt;'.	SixxContext evaluate: [		arr :=  Object readSixxFrom: oldSixx.	] shapeChangersBy: [:shapeChangers | 		shapeChangers at: #SixxMockShapeChangedObjectOLD put: SixxMockShapeChangedObject.	].	self should: [arr class = Array].	self should: [arr size = 3].	obj1 := arr at: 1.	self should: [obj1 renamedAtt1 = 1].	self should: [obj1 addedAtt1 = 2].	self should: [obj1 originalAtt1 = 3].	obj2 := arr at: 2.	self should: [obj2 renamedAtt1 = 11].	self should: [obj2 addedAtt1 = 2].	self should: [obj2 originalAtt1 = 33].	obj3 := arr at: 3.	self should: [obj3 = obj1].</body><body package="SIXX-Tests">testShapeChangedComplexReadFailed	"SixxShapeChangerTestCase debug: #testShapeChangedComplexReadFailed"	| oldSixx arr |	oldSixx :=  '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="1" sixx.type="SixxMockShapeChangedObjectOLD" &gt;			&lt;sixx.object sixx.id="2" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="3" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="4" sixx.type="SixxMockShapeChangedObjectOLD" &gt;			&lt;sixx.object sixx.id="5" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;11&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="6" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;33&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="1" &gt;&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="0" sixx.type="String" &gt;here&lt;/sixx.object&gt;	&lt;/sixx.object&gt;'.	SixxContext evaluate: [		arr :=  Object readSixxFrom: oldSixx.	] shapeChangersBy: [:shapeChangers | 		shapeChangers at: #SixxMockShapeChangedObjectFAILED put: SixxMockShapeChangedObject.	].	self should: [arr class = Array].	self should: [arr = #(nil nil nil 'here')].	</body><body package="SIXX-Tests">testShapeChangedConverterRead	"SixxShapeChangerTestCase debug: #testShapeChangedConverterRead"	| oldSixx arr obj1 obj2 obj3 |	oldSixx :=  '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="1" sixx.type="SixxMockShapeChangedObjectOLD" &gt;			&lt;sixx.object sixx.id="2" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="3" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="4" sixx.type="SixxMockShapeChangedObjectOLD" &gt;			&lt;sixx.object sixx.id="5" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;11&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="6" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;33&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="7" sixx.name="oldVar2" sixx.type="SmallInteger" &gt;44&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="1" &gt;&lt;/sixx.object&gt;	&lt;/sixx.object&gt;'.	SixxContext evaluate: [		arr :=  Object readSixxFrom: oldSixx.	] shapeChangersBy: [:shapeChangers | 		shapeChangers at: #SixxMockShapeChangedObjectOLD put: SixxMockShapeChanger.	].	self should: [arr class = Array].	self should: [arr size = 3].	obj1 := arr at: 1.	self should: [obj1 renamedAtt1 = 1].	self should: [obj1 addedAtt1 = 22222].	self should: [obj1 originalAtt1 = 3].	obj2 := arr at: 2.	self should: [obj2 renamedAtt1 = 11].	self should: [obj2 addedAtt1 = 22222].	self should: [obj2 originalAtt1 = 33].	obj3 := arr at: 3.	self should: [obj3 = obj1].</body><body package="SIXX-Tests">testShapeChangedConverterReadWithSameClassName	"SixxShapeChangerTestCase debug: #testShapeChangedConverterReadWithSameClassName"	| oldSixx arr obj1 obj2 obj3 |	oldSixx :=  '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="1" sixx.type="SixxMockShapeChangedObjectWithoutShapeChangeMethods" &gt;			&lt;sixx.object sixx.id="2" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="3" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="4" sixx.type="SixxMockShapeChangedObjectWithoutShapeChangeMethods" &gt;			&lt;sixx.object sixx.id="5" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;11&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="6" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;33&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="7" sixx.name="oldVar2" sixx.type="SmallInteger" &gt;44&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="1" &gt;&lt;/sixx.object&gt;	&lt;/sixx.object&gt;'.	SixxContext evaluate: [		arr :=  Object readSixxFrom: oldSixx.	] shapeChangersBy: [:shapeChangers | 		shapeChangers at: #SixxMockShapeChangedObjectWithoutShapeChangeMethods put: SixxMockShapeChanger.	].	self should: [arr class = Array].	self should: [arr size = 3].	obj1 := arr at: 1.	self should: [obj1 renamedAtt1 = 1].	self should: [obj1 addedAtt1 = 22222].	self should: [obj1 originalAtt1 = 3].	obj2 := arr at: 2.	self should: [obj2 renamedAtt1 = 11].	self should: [obj2 addedAtt1 = 22222].	self should: [obj2 originalAtt1 = 33].	obj3 := arr at: 3.	self should: [obj3 = obj1].</body><body package="SIXX-Tests">testShapeChangedRead	"SixxShapeChangerTestCase debug: #testShapeChangedRead"	| oldSixx obj |	oldSixx :=  '&lt;sixx.object sixx.id="0" sixx.type="SixxMockShapeChangedObjectOLD" &gt;		&lt;sixx.object sixx.id="1" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;	&lt;/sixx.object&gt;'.	SixxContext evaluate: [		obj :=  Object readSixxFrom: oldSixx.			] shapeChangersBy: [:shapeChangers | 		shapeChangers at: #SixxMockShapeChangedObjectOLD put: SixxMockShapeChangedObject	]. 	self should: [obj class = SixxMockShapeChangedObject].	self should: [obj renamedAtt1 = 1].	self should: [obj addedAtt1 = 2].	self should: [obj originalAtt1 = 3].</body><body package="SIXX-Tests">testShapeChangedReadCircularReference	"SixxShapeChangerTestCase debug: #testShapeChangedReadCircularReference"	| oldSixx obj |	oldSixx :=  '&lt;sixx.object sixx.id="0" sixx.type="SixxMockPersonOLD" &gt;	&lt;sixx.object sixx.id="1" sixx.name="fullName" sixx.type="String" &gt;A&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.name="requests" sixx.type="OrderedCollection" &gt;		&lt;sixx.object sixx.id="3" sixx.type="SixxMockRequest" &gt;			&lt;sixx.object sixx.id="4" sixx.name="id" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;			&lt;sixx.object sixx.name="owner" sixx.idref="0" /&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="5" sixx.type="SixxMockRequest" &gt;			&lt;sixx.object sixx.id="6" sixx.name="id" sixx.type="SmallInteger" &gt;2&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="7" sixx.name="owner" sixx.type="SixxMockPersonOLD" &gt;				&lt;sixx.object sixx.id="8" sixx.name="fullName" sixx.type="String" &gt;B&lt;/sixx.object&gt;				&lt;sixx.object sixx.name="requests" sixx.type="UndefinedObject" /&gt;				&lt;sixx.object sixx.id="9" sixx.name="partners" sixx.type="OrderedCollection" &gt;					&lt;sixx.object sixx.idref="0" /&gt;				&lt;/sixx.object&gt;			&lt;/sixx.object&gt;		&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.name="partners" sixx.type="UndefinedObject" /&gt;&lt;/sixx.object&gt;'.	SixxContext evaluate: [		obj :=  Object readSixxFrom: oldSixx.			] shapeChangersBy: [:shapeChangers | 		shapeChangers at: #SixxMockPersonOLD put: SixxMockPersonShapeChanger	]. 	self should: [obj class = SixxMockPerson].	self should: [obj name = 'A'].	self should: [obj requests size = 2].	self should: [(obj requests detect: [:each | each id = 1]) owner = obj].	self should: [(obj requests detect: [:each | each id = 2]) owner name = 'B'].	self should: [(obj requests detect: [:each | each id = 2]) owner partners size = 1].	self should: [((obj requests detect: [:each | each id = 2]) owner partners at: 1) = obj].</body></methods><methods><class-id>Sixx.SixxMockObjectWithId</class-id> <category>accessing</category><body package="SIXX-Tests">data	"Answer the value of data"	^ data</body><body package="SIXX-Tests">data: anObject	"Set the value of data"	data := anObject</body><body package="SIXX-Tests">id	"Answer the value of id"	^ id</body><body package="SIXX-Tests">id: anObject	"Set the value of id"	id := anObject</body></methods><methods><class-id>Sixx.SixxMockObjectWithId</class-id> <category>sixx</category><body package="SIXX-Tests">sixxReferenceIdInContext: dictionary	"override if you would like to generate id by yourself"	^self id</body></methods><methods><class-id>Sixx.SixxMockObjectWithId class</class-id> <category>instance creation</category><body package="SIXX-Tests">id: anId	^self new id: anId; yourself</body></methods><methods><class-id>Sixx.SixxMockVariableAlternativeClass class</class-id> <category>instance creation</category><body package="SIXX-Tests">new: size 	"new: is OK for me"	^self basicNew: size</body></methods><methods><class-id>Sixx.SixxMockEnvelope</class-id> <category>accessing</category><body package="SIXX-Tests">header	^header</body><body package="SIXX-Tests">header: aHeader 	header := aHeader</body></methods><methods><class-id>Sixx.SixxMockPerson</class-id> <category>accessing</category><body package="SIXX-Tests">name	^name</body><body package="SIXX-Tests">name: aString	name := aString</body><body package="SIXX-Tests">partners	^partners</body><body package="SIXX-Tests">partners: anObject	partners := anObject</body><body package="SIXX-Tests">requests	^requests</body><body package="SIXX-Tests">requests: anObject	requests := anObject</body></methods><methods><class-id>Sixx.SixxMockOldShapeObject</class-id> <category>accessing</category><body package="SIXX-Tests">oldNamedVar1	^oldNamedVar1</body><body package="SIXX-Tests">oldNamedVar1: anObject	oldNamedVar1 := anObject</body><body package="SIXX-Tests">originalAtt1	^originalAtt1</body><body package="SIXX-Tests">originalAtt1: anObject	originalAtt1 := anObject</body></methods><methods><class-id>Sixx.SixxShapeChangeReadStreamTestCase</class-id> <category>tests</category><body package="SIXX-Tests">testNewFailedRead	"SixxShapeChangeReadStreamTestCase debug: #testNewFailedRead"	| oldSixx srs arr obj1 obj2 obj3 |	oldSixx :=  '&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="1" sixx.type="SixxMockFixedNewFailedClass" &gt;			&lt;sixx.object sixx.id="2" sixx.name="att1" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="3" sixx.name="att2" sixx.type="SmallInteger" &gt;2&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="5" sixx.type="SixxMockFixedNewFailedClass" &gt;			&lt;sixx.object sixx.id="6" sixx.name="att1" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="7" sixx.name="att2" sixx.type="SmallInteger" &gt;4&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="1" &gt;&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx&gt;'.	srs := SixxShapeChangeReadStream on: oldSixx readStream.	srs shapeChangers at: #SixxMockFixedNewFailedClass put: SixxMockFixedAlternativeClass.	arr := srs next.	srs close.	self should: [arr class = Array].	self should: [arr size = 3].	obj1 := arr at: 1.	self should: [obj1 class = SixxMockFixedAlternativeClass].	self should: [obj1 att1 = 1].	self should: [obj1 att2 = 2].	self should: [obj1 att3Block notNil].	obj2 := arr at: 2.	self should: [obj2 class = SixxMockFixedAlternativeClass].	self should: [obj2 att1 = 3].	self should: [obj2 att2 = 4].	self should: [obj2 att3Block notNil].	obj3 := arr at: 3.	self should: [obj3 = obj1].</body><body package="SIXX-Tests">testRenamedRead	"SixxShapeChangeReadStreamTestCase debug: #testRenamedRead"	| data oldSixx srs obj |	data := Array with: 1 with:2 with: (Array with:1 with:3 with:1).	oldSixx := (self sixxFrom: data) copyReplaceAll: 'SmallInteger' with: 'SmallIntegerOLD'.	srs := SixxShapeChangeReadStream on: oldSixx readStream.	srs shapeChangers at: #SmallIntegerOLD put: SmallInteger.	obj := srs next.	srs close.	self should: [obj = data]</body><body package="SIXX-Tests">testRenamedReadFailed	"SixxShapeChangeReadStreamTestCase debug: #testRenamedReadFailed"	| data oldSixx srs obj |	data := Array with: 1 with:2 with: (Array with:1 with:3 with:1).	oldSixx := (self sixxFrom: data) copyReplaceAll: 'SmallInteger' with: 'SmallIntegerOLD'.	srs := SixxShapeChangeReadStream on: oldSixx readStream.	obj := srs next.	srs close.	self shouldnt: [obj = data].	self should: [obj = #(nil nil #(nil nil nil))]</body><body package="SIXX-Tests">testShapeChangedComplexRead	"SixxShapeChangeReadStreamTestCase debug: #testShapeChangedComplexRead"	| oldSixx srs arr obj1 obj2 obj3 |	oldSixx :=  '&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="1" sixx.type="SixxMockShapeChangedObjectOLD" &gt;			&lt;sixx.object sixx.id="2" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="3" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="4" sixx.type="SixxMockShapeChangedObjectOLD" &gt;			&lt;sixx.object sixx.id="5" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;11&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="6" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;33&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="1" &gt;&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx&gt;'.	srs := SixxShapeChangeReadStream on: oldSixx readStream.	srs shapeChangers at: #SixxMockShapeChangedObjectOLD put: SixxMockShapeChangedObject.	arr := srs next.	srs close.	self should: [arr class = Array].	self should: [arr size = 3].	obj1 := arr at: 1.	self should: [obj1 renamedAtt1 = 1].	self should: [obj1 addedAtt1 = 2].	self should: [obj1 originalAtt1 = 3].	obj2 := arr at: 2.	self should: [obj2 renamedAtt1 = 11].	self should: [obj2 addedAtt1 = 2].	self should: [obj2 originalAtt1 = 33].	obj3 := arr at: 3.	self should: [obj3 = obj1].</body><body package="SIXX-Tests">testShapeChangedComplexReadFailed	"SixxShapeChangeReadStreamTestCase debug: #testShapeChangedComplexReadFailed"	| oldSixx srs arr |	oldSixx :=  '&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="1" sixx.type="SixxMockShapeChangedObjectOLD" &gt;			&lt;sixx.object sixx.id="2" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="3" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="4" sixx.type="SixxMockShapeChangedObjectOLD" &gt;			&lt;sixx.object sixx.id="5" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;11&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="6" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;33&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="1" &gt;&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="0" sixx.type="String" &gt;here&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx&gt;'.	srs := SixxShapeChangeReadStream on: oldSixx readStream.	srs shapeChangers at: #SixxMockShapeChangedObjectFAILED put: SixxMockShapeChangedObject.	arr := srs next.	srs close.	self should: [arr class = Array].	self should: [arr = #(nil nil nil 'here')].</body><body package="SIXX-Tests">testShapeChangedConverterRead	"SixxShapeChangeReadStreamTestCase debug: #testShapeChangedConverterRead"	| oldSixx srs arr obj1 obj2 obj3 |	oldSixx :=  '&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="1" sixx.type="SixxMockShapeChangedObjectOLD" &gt;			&lt;sixx.object sixx.id="2" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="3" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="4" sixx.type="SixxMockShapeChangedObjectOLD" &gt;			&lt;sixx.object sixx.id="5" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;11&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="6" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;33&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="7" sixx.name="oldVar2" sixx.type="SmallInteger" &gt;44&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="1" &gt;&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx&gt;'.	srs := SixxShapeChangeReadStream on: oldSixx readStream.	srs shapeChangers at: #SixxMockShapeChangedObjectOLD put: SixxMockShapeChanger.	arr := srs next.	srs close.	self should: [arr class = Array].	self should: [arr size = 3].	obj1 := arr at: 1.	self should: [obj1 renamedAtt1 = 1].	self should: [obj1 addedAtt1 = 22222].	self should: [obj1 originalAtt1 = 3].	obj2 := arr at: 2.	self should: [obj2 renamedAtt1 = 11].	self should: [obj2 addedAtt1 = 22222].	self should: [obj2 originalAtt1 = 33].	obj3 := arr at: 3.	self should: [obj3 = obj1].</body><body package="SIXX-Tests">testShapeChangedConverterReadWithSameClassName	"SixxShapeChangeReadStreamTestCase debug: #testShapeChangedConverterReadWithSameClassName"	| oldSixx srs arr obj1 obj2 obj3 |	oldSixx :=  '&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;		&lt;sixx.object sixx.id="1" sixx.type="SixxMockShapeChangedObjectWithoutShapeChangeMethods" &gt;			&lt;sixx.object sixx.id="2" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="3" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="4" sixx.type="SixxMockShapeChangedObjectWithoutShapeChangeMethods" &gt;			&lt;sixx.object sixx.id="5" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;11&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="6" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;33&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="7" sixx.name="oldVar2" sixx.type="SmallInteger" &gt;44&lt;/sixx.object&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.idref="1" &gt;&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx&gt;'.	srs := SixxShapeChangeReadStream on: oldSixx readStream.	srs shapeChangers at: #SixxMockShapeChangedObjectWithoutShapeChangeMethods put: SixxMockShapeChanger.	arr := srs next.	srs close.	self should: [arr class = Array].	self should: [arr size = 3].	obj1 := arr at: 1.	self should: [obj1 renamedAtt1 = 1].	self should: [obj1 addedAtt1 = 22222].	self should: [obj1 originalAtt1 = 3].	obj2 := arr at: 2.	self should: [obj2 renamedAtt1 = 11].	self should: [obj2 addedAtt1 = 22222].	self should: [obj2 originalAtt1 = 33].	obj3 := arr at: 3.	self should: [obj3 = obj1].</body><body package="SIXX-Tests">testShapeChangedRead	"SixxShapeChangeReadStreamTestCase debug: #testShapeChangedRead"	| oldSixx srs obj |	oldSixx :=  '&lt;sixx sixx.version="1.0"&gt;	&lt;sixx.object sixx.id="0" sixx.type="SixxMockShapeChangedObjectOLD" &gt;		&lt;sixx.object sixx.id="1" sixx.name="oldNamedVar1" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.name="originalAtt1" sixx.type="SmallInteger" &gt;3&lt;/sixx.object&gt;	&lt;/sixx.object&gt;&lt;/sixx&gt;'.	srs := SixxShapeChangeReadStream on: oldSixx readStream.	srs shapeChangers at: #SixxMockShapeChangedObjectOLD put: SixxMockShapeChangedObject.	obj := srs next.	srs close.	self should: [obj class = SixxMockShapeChangedObject].	self should: [obj renamedAtt1 = 1].	self should: [obj addedAtt1 = 2].	self should: [obj originalAtt1 = 3].</body><body package="SIXX-Tests">testShapeChangedReadCircularReference	"SixxShapeChangeReadStreamTestCase debug: #testShapeChangedReadCircularReference"	| oldSixx obj srs |	oldSixx :=  '&lt;sixx.object sixx.id="0" sixx.type="SixxMockPersonOLD" &gt;	&lt;sixx.object sixx.id="1" sixx.name="fullName" sixx.type="String" &gt;A&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.name="requests" sixx.type="OrderedCollection" &gt;		&lt;sixx.object sixx.id="3" sixx.type="SixxMockRequest" &gt;			&lt;sixx.object sixx.id="4" sixx.name="id" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;			&lt;sixx.object sixx.name="owner" sixx.idref="0" /&gt;		&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="5" sixx.type="SixxMockRequest" &gt;			&lt;sixx.object sixx.id="6" sixx.name="id" sixx.type="SmallInteger" &gt;2&lt;/sixx.object&gt;			&lt;sixx.object sixx.id="7" sixx.name="owner" sixx.type="SixxMockPersonOLD" &gt;				&lt;sixx.object sixx.id="8" sixx.name="fullName" sixx.type="String" &gt;B&lt;/sixx.object&gt;				&lt;sixx.object sixx.name="requests" sixx.type="UndefinedObject" /&gt;				&lt;sixx.object sixx.id="9" sixx.name="partners" sixx.type="OrderedCollection" &gt;					&lt;sixx.object sixx.idref="0" /&gt;				&lt;/sixx.object&gt;			&lt;/sixx.object&gt;		&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.name="partners" sixx.type="UndefinedObject" /&gt;&lt;/sixx.object&gt;'.	srs := SixxShapeChangeReadStream on: oldSixx readStream.	srs shapeChangers at: #SixxMockPersonOLD put: SixxMockPersonShapeChanger.	obj := srs next.	srs close. 	self should: [obj class = SixxMockPerson].	self should: [obj name = 'A'].	self should: [obj requests size = 2].	self should: [(obj requests detect: [:each | each id = 1]) owner = obj].	self should: [(obj requests detect: [:each | each id = 2]) owner name = 'B'].	self should: [(obj requests detect: [:each | each id = 2]) owner partners size = 1].	self should: [((obj requests detect: [:each | each id = 2]) owner partners at: 1) = obj].</body></methods><methods><class-id>Sixx.SixxShapeChangeReadStreamTestCase</class-id> <category>private</category><body package="SIXX-Tests">sixxFrom: object 	| srs conts |	srs := SixxWriteStream on: (WriteStream on: (String new: 16)).	srs nextPut: object.	conts := srs contents.	srs close.	^ conts</body></methods><methods><class-id>Sixx.SixxMockPersonShapeChanger</class-id> <category>testing</category><body package="SIXX-Tests">circularReference	"override if your shape-changing object is referencing the same shape-changing class's objects"	^true</body></methods><methods><class-id>Sixx.SixxMockPersonShapeChanger</class-id> <category>override hooks</category><body package="SIXX-Tests">shapeChangedObjectClass	^SixxMockPerson</body><body package="SIXX-Tests">sixxInstVarNamed: varName put: value	varName == #fullName ifTrue: [^self attributesMap at: #name put: value].	super sixxInstVarNamed: varName put: value</body></methods><methods><class-id>Sixx.SixxCustomObjectSerializationTestCase</class-id> <category>tests</category><body package="SIXX-Tests">testIgnorableClassInstVarNames	"self debug: #testIgnorableClassInstVarNames"	| obj readObject sixx |	obj := SixxMockObjectWithCache.	obj att1: 1.	obj att2: 2.	obj cache1: 'cache1'.	sixx := obj sixxString.	obj att1: nil.	obj att2: nil.	obj cache1: nil.		readObject := Object readSixxFrom: sixx.		self should: [readObject att1 = 1].		self should: [readObject att2 = 2].		self should: [readObject cache1 = nil].</body><body package="SIXX-Tests">testIgnorableInstVarNames	"self debug: #testIgnorableInstVarNames"	| obj readObject|	obj := SixxMockObjectWithCache new.	obj att1: 1.	obj att2: 2.	obj cache1: 'cache1'.		obj cache2: 'cache2'.	readObject := Object readSixxFrom: obj sixxString.	self should: [readObject att1 = 1].		self should: [readObject att2 = 2].		self should: [readObject cache1 = nil].		self should: [readObject cache2 = nil].	</body><body package="SIXX-Tests">testNonReferencableClassInstVarNames	"SixxCustomObjectSerializationTestCase debug: #testNonReferencableClassInstVarNames"	| expectedStr a b shared array |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;	&lt;sixx.object sixx.id="1" sixx.type="SixxMockObjectWithNonRef class" &gt;		&lt;sixx.object sixx.name="att1" sixx.type="Time" &gt;11:24:02 am&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="2" sixx.name="att2" sixx.type="Time" &gt;11:24:02 am&lt;/sixx.object&gt;&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="3" sixx.type="SixxMockObjectWithNonRef2 class" &gt;		&lt;sixx.object sixx.name="att1" sixx.type="Time" &gt;11:24:02 am&lt;/sixx.object&gt;		&lt;sixx.object sixx.name="att2" sixx.idref="2" /&gt;&lt;/sixx.object&gt;	&lt;sixx.object sixx.idref="1" /&gt;&lt;/sixx.object&gt;'.	shared := Time readSixxContentStringFrom: '11:24:02 am' readStream.	a := SixxMockObjectWithNonRef.	a att1: shared.	a att2: shared.	a cache1: shared.	b := SixxMockObjectWithNonRef2.	b att1: shared.	b att2: shared.	b cache1: shared.	array := Array with: a with: b with: a.	self		should: [array sixxString = expectedStr].	a att1: nil; att2: nil; cache1: nil.	b att1: nil; att2: nil; cache1: nil</body><body package="SIXX-Tests">testNonReferencableInstVarNames	"SixxCustomObjectSerializationTestCase debug: #testNonReferencableInstVarNames"	| expectedStr a b shared array |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;	&lt;sixx.object sixx.id="1" sixx.type="SixxMockObjectWithNonRef" &gt;		&lt;sixx.object sixx.id="2" sixx.name="name" sixx.type="String" &gt;aaa&lt;/sixx.object&gt;		&lt;sixx.object sixx.name="att1" sixx.type="Time" &gt;11:24:02 am&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.name="att2" sixx.type="Time" &gt;11:24:02 am&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="4" sixx.type="SixxMockObjectWithNonRef" &gt;		&lt;sixx.object sixx.id="5" sixx.name="name" sixx.type="String" &gt;bbb&lt;/sixx.object&gt;		&lt;sixx.object sixx.name="att1" sixx.type="Time" &gt;11:24:02 am&lt;/sixx.object&gt;		&lt;sixx.object sixx.name="att2" sixx.idref="3" /&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.idref="1" /&gt;&lt;/sixx.object&gt;'.	shared := Time readSixxContentStringFrom: '11:24:02 am' readStream.	a := SixxMockObjectWithNonRef new name: 'aaa'.	a att1: shared.	a att2: shared.	a cache1: shared.	a cache2: shared.	b := SixxMockObjectWithNonRef new name: 'bbb'.	b att1: shared.	b att2: shared.	b cache1: shared.	b cache2: shared.	array := Array with: a with: b with: a.	self		should: [array sixxString = expectedStr]</body><body package="SIXX-Tests">testReadSixxWriteValueAndSixxReadValue	"self debug: #testReadSixxWriteValueAndSixxReadValue"	| object now sixx parsedNode readObject |	object := SixxMockCustomWriteObject new.	object name: 'This is a test'.	now := Time fromSeconds: Time now asSeconds.	object time: now.	sixx := object sixxString.	parsedNode := SixxXmlUtil parseXml: sixx.	self shouldnt: [(SixxXmlUtil attributeAt: 'sixx.type' from: parsedNode) = 'SixxMockCustomWriteObject'].	self should: [(SixxXmlUtil attributeAt: 'sixx.type' from: parsedNode) = 'SixxMockMementoArray'].	readObject := Object readSixxFrom: sixx.	self shouldnt: [readObject class = SixxMockMementoArray].	self should: [readObject class = SixxMockCustomWriteObject].	self should: [readObject name = 'This is a test'].		self should: [readObject time = now]</body><body package="SIXX-Tests">testSameSixxWriteValueAndSixxReadValue	"SixxCustomObjectSerializationTestCase debug: #testSameSixxWriteValueAndSixxReadValue"	| obj1 array array2 |	obj1 := SixxMockCustomWriteObject new name: 'aa'; time: Time now.	array := Array with:obj1 with:obj1.	array2 := Object readSixxFrom: array sixxString.	self should: [(array2 at: 1) = (array2 at: 2)].</body><body package="SIXX-Tests">testSharedSixxWriteValueAndSixxReadValue	"SixxCustomObjectSerializationTestCase debug: #testSharedSixxWriteValueAndSixxReadValue"	| object1 now1 object2 now2 parsedNode array sixx readArray inArray readObject1 readObject2 |	object1 := SixxMockCustomWriteObject new.	object1 name: 'This is a test'.	now1 := Time fromSeconds: Time now asSeconds.	object1 time: now1.	object2 := SixxMockCustomWriteObject new.	object2 name: 'This is a test2'.	now2 := Time fromSeconds: now1 asSeconds + 10.	object2 time: now2.		parsedNode := SixxXmlUtil parseXml: object1 sixxString.	self should: [(SixxXmlUtil attributeAt: 'sixx.type' from: parsedNode) = 'SixxMockMementoArray'].	array := Array with: object1 with: object2 with: (Array with: object1 with: object2 with: 3).	sixx := array sixxString.	readArray := Object readSixxFrom: sixx.	inArray := readArray at: 3.	self should: [(readArray at: 1) = (inArray at: 1)].	self should: [(readArray at: 2) = (inArray at: 2)].	self shouldnt: [(readArray at: 3) = (Array with: object1 with: object2 with: 3)].		readObject1 := readArray at: 1.	self should: [readObject1 name = 'This is a test'].		self should: [readObject1 time = now1].	readObject2 := readArray at: 2.	self should: [readObject2 name = 'This is a test2'].		self should: [readObject2 time = now2]</body><body package="SIXX-Tests">testSixxInitialize	"self debug: #testSixxInitialize"	| obj readObject|	obj := SixxMockObjectInitializingOnRead new.	obj att1: 1.	obj att2: 2.	obj cache1: 'cache1'.		obj cache2: 'cache2'.	readObject := Object readSixxFrom: obj sixxString.	self should: [readObject att1 = 1].		self should: [readObject att2 = 2].		self should: [readObject cache1 = 1234567].		self should: [readObject cache2 = 'this is cache2'].	</body><body package="SIXX-Tests">testSixxPrepareWrite	"self debug: #testSixxPrepareWrite"	| obj readObject|	obj := SixxMockObjectPreparingOnWrite new.	obj att1: 1.	obj att2: 2.	obj cache1: 'cache1'.		obj cache2: 'cache2'.	readObject := Object readSixxFrom: obj sixxString.	self should: [readObject att1 = '1'].		self should: [readObject att2 = 4].		self should: [readObject cache1 = nil].		self should: [readObject cache2 = nil].	</body><body package="SIXX-Tests">testSixxStringForObjectWithId	"SixxCustomObjectSerializationTestCase debug: #testSixxStringForObjectWithId"	| expectedStr a b array |	expectedStr := '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;	&lt;sixx.object sixx.id="a" sixx.type="SixxMockObjectWithId" &gt;		&lt;sixx.object sixx.id="2" sixx.name="id" sixx.type="String" &gt;a&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="3" sixx.name="data" sixx.type="String" &gt;aaa&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="b" sixx.type="SixxMockObjectWithId" &gt;		&lt;sixx.object sixx.id="5" sixx.name="id" sixx.type="String" &gt;b&lt;/sixx.object&gt;		&lt;sixx.object sixx.id="6" sixx.name="data" sixx.type="String" &gt;bbb&lt;/sixx.object&gt;	&lt;/sixx.object&gt;	&lt;sixx.object sixx.idref="a" /&gt;&lt;/sixx.object&gt;'.	a := SixxMockObjectWithId id: 'a'.	a data: 'aaa'.	b := SixxMockObjectWithId id: 'b'.	b data: 'bbb'.	array := Array with: a with: b with: a.	self		should: [array sixxString = expectedStr]</body></methods><methods><class-id>Sixx.SixxNamespaceSupportTestCase</class-id> <category>tests</category><body package="SIXX-Tests">testNamespacedArray	"self debug: #testNamespacedArray"	| arraySixx1 array1  arraySixx2 array2  |	arraySixx1 :=  '&lt;sixx.object sixx.id="0" sixx.type="Array" sixx.env="Core" &gt;	&lt;sixx.object sixx.id="1" sixx.type="SmallInteger" sixx.env="Core" &gt;10&lt;/sixx.object&gt;	&lt;sixx.object sixx.id="2" sixx.type="SmallInteger" sixx.env="Core" &gt;20&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	array1 := Object readSixxFrom: arraySixx1.	self should: [array1 = #(10 20)].		arraySixx2 := array1 sixxString. 	array2 := Object readSixxFrom: arraySixx2.	self should: [array2 = #(10 20)]</body></methods><methods><class-id>Sixx.SixxNamespaceSupportTestCase</class-id> <category>running</category><body package="SIXX-Tests">setUp	originalUseEnvironment := SixxSettings useEnvironment.	SixxSettings useEnvironment: true</body><body package="SIXX-Tests">tearDown	SixxSettings useEnvironment: originalUseEnvironment</body></methods><methods><class-id>Sixx.SixxConstantsTestCase</class-id> <category>accessing</category><body package="SIXX-Tests">oldSixxConstants	^oldSixxConstants</body><body package="SIXX-Tests">oldSixxConstants: aSixxConstants 	oldSixxConstants := aSixxConstants</body></methods><methods><class-id>Sixx.SixxConstantsTestCase</class-id> <category>tests</category><body package="SIXX-Tests">testDetectConstants	"SixxConstantsTestCase debug: #testDetectConstants"	| sixx rixx cixx |	sixx :=  '&lt;sixx&gt;&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;&lt;sixx.object sixx.id="1" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;&lt;/sixx.object&gt;&lt;/sixx&gt;'.	rixx :=  '&lt;rixx&gt;&lt;object id="0" type="Array" &gt;&lt;object id="1" type="SmallInteger" &gt;1&lt;/object&gt;&lt;/object&gt;&lt;/rixx&gt;'.	cixx :=  '&lt;cixx&gt;&lt;o i="0" t="Array" &gt;&lt;o i="1" t="SmallInteger" &gt;1&lt;/o&gt;&lt;/o&gt;&lt;/cixx&gt;'.	SixxConstants setCurrentConstantsBy: (SixxXmlUtil parseXml: sixx).	self should: [SixxConstants current class = SixxConstants].	SixxConstants setCurrentConstantsBy: (SixxXmlUtil parseXml: rixx).	self should: [SixxConstants current class = SixxReducedConstants].	SixxConstants setCurrentConstantsBy: (SixxXmlUtil parseXml: cixx).	self should: [SixxConstants current class = SixxCompactConstants].</body><body package="SIXX-Tests">testDetectConstantsNoRoot	"SixxConstantsTestCase debug: #testDetectConstantsNoRoot"	| sixx rixx cixx |	sixx :=  '&lt;sixx.object sixx.id="0" sixx.type="Array" &gt;&lt;sixx.object sixx.id="1" sixx.type="SmallInteger" &gt;1&lt;/sixx.object&gt;&lt;/sixx.object&gt;'.	rixx :=  '&lt;object id="0" type="Array" &gt;&lt;object id="1" type="SmallInteger" &gt;1&lt;/object&gt;&lt;/object&gt;'.	cixx :=  '&lt;o i="0" t="Array" &gt;&lt;o i="1" t="SmallInteger" &gt;1&lt;/o&gt;&lt;/o&gt;'.	SixxConstants setCurrentConstantsBy: (SixxXmlUtil parseXml: sixx).	self should: [SixxConstants current class = SixxConstants].	SixxConstants setCurrentConstantsBy: (SixxXmlUtil parseXml: rixx).	self should: [SixxConstants current class = SixxReducedConstants].	SixxConstants setCurrentConstantsBy: (SixxXmlUtil parseXml: cixx).	self should: [SixxConstants current class = SixxCompactConstants].</body><body package="SIXX-Tests">testInitialize	SixxConstants initialize.	self should: [SixxConstants current xmlVersion = '1.0'].	self should: [SixxConstants current xmlEncoding = 'utf-8'].	self should: [SixxConstants current sixxVersion = '1.0']</body><body package="SIXX-Tests">testSixxStartTag	SixxConstants initialize.	self should: [SixxConstants current sixxStartTag = '&lt;sixx sixx.version="1.0"&gt;'].	SixxConstants current sixxVersion: '2.0'.	self should: [SixxConstants current sixxStartTag = '&lt;sixx sixx.version="2.0"&gt;']</body><body package="SIXX-Tests">testXmlDeclaration	SixxConstants initialize.	self should: [SixxConstants current xmlDeclaration = '&lt;?xml version="1.0" encoding="utf-8"?&gt;'].	SixxConstants current xmlVersion: '3.0'.	SixxConstants current xmlEncoding: 'sjis'.	self should: [SixxConstants current xmlDeclaration = '&lt;?xml version="3.0" encoding="sjis"?&gt;']</body></methods><methods><class-id>Sixx.SixxConstantsTestCase</class-id> <category>running</category><body package="SIXX-Tests">setUp	^ self oldSixxConstants: SixxConstants current</body><body package="SIXX-Tests">tearDown	SixxConstants initialize.	SixxConstants current xmlVersion: self oldSixxConstants xmlVersion.	SixxConstants current xmlEncoding: self oldSixxConstants xmlEncoding.	SixxConstants current sixxVersion: self oldSixxConstants sixxVersion</body></methods><methods><class-id>Sixx.SixxMockShapeChangedObjectWithoutShapeChangeMethods</class-id> <category>accessing</category><body package="SIXX-Tests">addedAtt1	^addedAtt1</body><body package="SIXX-Tests">addedAtt1: anObject	addedAtt1 := anObject</body><body package="SIXX-Tests">originalAtt1	^originalAtt1</body><body package="SIXX-Tests">originalAtt1: anObject	originalAtt1 := anObject</body><body package="SIXX-Tests">renamedAtt1	^renamedAtt1</body><body package="SIXX-Tests">renamedAtt1: anObject	renamedAtt1 := anObject</body></methods><initialize><class-id>Sixx.SixxMockSuperClassForUnitTest</class-id></initialize><initialize><class-id>Sixx.SixxMockClassForUnitTest</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Array</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Arrayed</category><attributes><package>Collections-Arrayed</package></attributes></class><class><name>SixxFormatter</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name targetClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Core</category><attributes><package>SIXX-Core</package></attributes></class><class><name>SixxShapeChanger</name><environment>Sixx</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shapeChangedObject attributesMap </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SIXX-Core</category><attributes><package>SIXX-Core</package></attributes></class><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class></st-source>