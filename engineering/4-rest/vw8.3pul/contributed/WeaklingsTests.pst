<?xml version="1.0"?><st-source><!-- Name: WeaklingsTestsNotice: Copyright 2005 - 2013 Travis GriggsThis utility is free to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: WeaklingsTests contains tests for the Weaklings package. Its tests are based on SUnitToo.DbIdentifier: bear73DbTrace: 401662DbUsername: tgriggsDbVersion: 12DevelopmentPrerequisites: #(#(#any 'SUnitToo' '') #(#any 'Weaklings' ''))PackageName: WeaklingsTestsParcel: #('WeaklingsTests')ParcelName: WeaklingsTestsPrerequisiteParcels: #(#('SUnitToo' '') #('Weaklings' ''))PrintStringCache: (12,tgriggs)Version: 12Date: 10:18:24 AM April 10, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (apr13.1) of April 10, 2013 on April 10, 2013 at 10:18:24 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WeakProxyTest</name><environment>Weaklings</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WeaklingsTests</package></attributes></class><class><name>WeaklingTest</name><environment>Weaklings</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>WeaklingsTests</package></attributes></class><methods><class-id>Weaklings.WeakProxyTest</class-id> <category>tests</category><body package="WeaklingsTests">testLastRites	| strongReference proxy rememberance |	strongReference := String withAll: 'String'.	proxy := strongReference 				weakProxyWithLastRites: [:dying | rememberance := dying copy].	self assert: rememberance isNil.	strongReference := 'Something else'.	ObjectMemory globalGarbageCollect.	self assert: rememberance = 'String'.	self assert: proxy isNil</body><body package="WeaklingsTests">testWeakness	| strongReference proxy |	strongReference := String withAll: 'String'.	proxy := strongReference asWeakProxy.	self deny: proxy isNil.	self assert: (proxy copyFrom: 1 to: proxy size) 				= strongReference.	strongReference := 'Another String'.	ObjectMemory globalGarbageCollect.	self assert: proxy isNil</body></methods><methods><class-id>Weaklings.WeaklingTest</class-id> <category>tests</category><body package="WeaklingsTests">testLastRites	| strongReference weakReference offspring |	strongReference := String withAll: 'String'.	weakReference := strongReference asWeakling.	self deny: weakReference hasLastRites.	weakReference lastRites: [:dying | offspring := dying copy].	self assert: weakReference hasLastRites.	self assert: offspring isNil.	strongReference := 'Something else'.	ObjectMemory globalGarbageCollect.	self assert: offspring = 'String'.	self assert: weakReference value isNil</body><body package="WeaklingsTests">testWeakness	| strongReference weakReference |	strongReference := String withAll: 'String'.	weakReference := strongReference asWeakling.	self assert: weakReference value = strongReference.	strongReference := 'Another String'.	ObjectMemory globalGarbageCollect.	self assert: weakReference value isNil</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>