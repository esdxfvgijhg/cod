<?xml version="1.0"?><st-source><!-- Name: SudokuCoastModelDevelopmentPrerequisites: #(#(#any 'COASTClient' '') #(#any 'SudokuModels' '') #(#any 'COASTCore' ''))PackageName: SudokuCoastModelParcel: #('SudokuCoastModel')ParcelDirectory: SudokuCoastModelPrerequisiteDescriptions: #(#(#name 'COASTClient' #componentType #package) #(#name 'SudokuModels' #componentType #package) #(#name 'COASTCore' #componentType #bundle))PrerequisiteParcels: #(#('COASTClient' '') #('SudokuModels' '') #('COASTCore' ''))Version: 1.32Date: 1:48:44 PM July 26, 2014 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.0 (jul14.3) of 25. Juli 2014 on 26. Juli 2014 at 13:48:44</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>CoastSudokuCell</name><environment>Sudoku</environment><super>COAST.CoastModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Suzdoku</category><attributes><package>SudokuCoastModel</package></attributes></class><class><name>CoastSudokuGrid</name><environment>Sudoku</environment><super>COAST.CoastModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Suzdoku</category><attributes><package>SudokuCoastModel</package></attributes></class><methods><class-id>Sudoku.CoastSudokuGrid class</class-id> <category>compatibility</category><body package="SudokuCoastModel">formerNames	&lt;coastFormerName: 'Sudoku.CoastFieldArray' &gt;</body></methods><methods><class-id>Sudoku.CoastSudokuCell</class-id> <category>accessing</category><body package="SudokuCoastModel">addCandidate: candidate 	self at: #candidates add: candidate.</body><body package="SudokuCoastModel">candidates	^ self at: #candidates</body><body package="SudokuCoastModel">candidatesIncludes: candidate 	^ self at: #candidates includes: candidate</body><body package="SudokuCoastModel">cell: cell 	cell hasCandidates 		ifTrue: 		[	self at: #candidates setAll: cell candidates asOrderedCollection.			self given: nil		]		ifFalse: [ self given: cell givenOrNil ].	self cellColor: nil.</body><body package="SudokuCoastModel">cellColor	^ self at: #cellColor.</body><body package="SudokuCoastModel">cellColor: cellColor 	self at: #cellColor set: cellColor.</body><body package="SudokuCoastModel">given: given 	self at: #given set: given.</body><body package="SudokuCoastModel">givenOrNil	^ self at: #given</body><body package="SudokuCoastModel">removeCandidate: candidate 	self at: #candidates remove: candidate.</body><body package="SudokuCoastModel">value	1 haltOrContinue.	^ self givenOrNil</body><body package="SudokuCoastModel">value: value 	1 haltOrContinue.	self given: value.</body></methods><methods><class-id>Sudoku.CoastSudokuCell class</class-id> <category>slots</category><body package="SudokuCoastModel">candidatesSlot	^ ( self slotOfType: #set )		range: Integer;		yourself</body><body package="SudokuCoastModel">cellColorSlot	^ self slotSingleValue</body><body package="SudokuCoastModel">givenSlot	^ ( self slotSingleValue )		range: Integer;		yourself</body></methods><methods><class-id>Sudoku.CoastSudokuGrid</class-id> <category>accessing</category><body package="SudokuCoastModel">atPos: position given: candidate 	| cell |	cell := self cellAtX: position x y: position y.	cell notNil ifTrue: [ cell given: candidate ].</body><body package="SudokuCoastModel">cellAtX: x y: y 	| index |	index := self indexForX: x y: y.	^ index notNil 		ifTrue: [ self at: #cells atIndex: index ]		ifFalse: [ nil ]</body><body package="SudokuCoastModel">givenAtX: x y: y 	| cell |	cell := self cellAtX: x y: y.	^ cell notNil 		ifTrue: [ cell givenOrNil ]		ifFalse: [ nil ]</body><body package="SudokuCoastModel">gridCandidates	^ 1 to: self gridMaxValue</body><body package="SudokuCoastModel">gridMaxValue	^ self height * self width</body><body package="SudokuCoastModel">height	^ self at: #height</body><body package="SudokuCoastModel">height: height 	self at: #height set: height.</body><body package="SudokuCoastModel">indexForX: x y: y 	| max index |	max := self height * self width.	( x &lt; 0 or: [ max &lt; x ]) ifTrue: [ ^ nil ].	max &lt; y ifTrue: [ ^ nil ].	index := ( y - 1 ) * max + x.	^ index &gt; ( self sizeAt: #cells ) 		ifTrue: [ nil ]		ifFalse: [ index ]</body><body package="SudokuCoastModel">isValid	( self at: #cells ) do: [: coastCell | coastCell givenOrNil isNil ifTrue: [ ^ false ]].	^ self grid isValid</body><body package="SudokuCoastModel">toggleAtPos: position candidate: candidate 	| cell |	cell := self cellAtX: position x y: position y.	cell notNil ifTrue: 		[( cell candidatesIncludes: candidate ) 				ifTrue: [ cell removeCandidate: candidate ]				ifFalse: [ cell addCandidate: candidate ]		].</body><body package="SudokuCoastModel">verify	^ self grid solve</body><body package="SudokuCoastModel">width	^ self at: #width</body><body package="SudokuCoastModel">width: width 	self at: #width set: width.</body></methods><methods><class-id>Sudoku.CoastSudokuGrid</class-id> <category>converting</category><body package="SudokuCoastModel">ensureCells: size	[( self sizeAt: #cells ) &lt; size ] whileTrue: [ self at: #cells add: ( CoastSudokuCell newColocatedTo: self )].	[( self sizeAt: #cells ) &gt; size ] whileTrue: [ self removeLastAt: #cells ].</body><body package="SudokuCoastModel">fillGrid: filedArray x: x y: y 	| coastGrid cell |	coastGrid := self cellAtX: x y: y.	coastGrid notNil ifTrue: 		[	cell := filedArray cellAtX: x y: y.			cell given: coastGrid givenOrNil.			cell candidates asSet - coastGrid candidates do: [: v | cell removeCandidate: v ]		].</body><body package="SudokuCoastModel">grid	| grid |	grid := Grid width: self width height: self height.	( self slotExists: #cells ) 		ifTrue: [ 1 to: self width * self height do: [: y | 1 to: self width * self height do: [: x | self fillGrid: grid x: x y: y ]]].	^ grid</body><body package="SudokuCoastModel">grid: grid 	self width: grid width.	self height: grid height.	self ensureCells: grid width * grid height * grid width * grid height.	grid cellsDo: 		[: cell | | coastCell |			coastCell := self cellAtX: cell x y: cell y.			coastCell notNil ifTrue: [ coastCell cell: cell ]		].</body><body package="SudokuCoastModel">numberOfValues	^ ( self at: #cells ) inject: 0		into: 		[: sum : cell |			cell givenOrNil notNil 				ifTrue: [ sum + 1 ]				ifFalse: [ sum ]		]</body></methods><methods><class-id>Sudoku.CoastSudokuGrid class</class-id> <category>slots</category><body package="SudokuCoastModel">cellsSlot	^ ( self slotOfType: #orderedCollection )		range: CoastSudokuCell;		minimizedInvalidation;		yourself</body><body package="SudokuCoastModel">heightSlot	^ ( self slotSingleValue ) range: Integer;		defaultValue: 3;		yourself</body><body package="SudokuCoastModel">widthSlot	^ ( self slotSingleValue )		range: Integer;		defaultValue: 3;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>CoastModel</name><environment>COAST</environment><super>COAST.CatFSFrame</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>COASTClient</category><attributes><package>COASTClient</package></attributes></class></st-source>