<?xml version="1.0"?><st-source><!-- Name: COASTMailNotifierNotice: The MIT LicenseCopyright (c) 2013 intelligent views GmbHPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.DevelopmentPrerequisites: #(#(#any 'COASTCore' '') #(#any 'SMTPS' '') #(#any 'Mail' '') #(#any 'MIME' '') #(#any 'SMTP' '') #(#any 'TLS' ''))PackageName: COASTMailNotifierParcel: #('COASTMailNotifier')ParcelDirectory: COASTMailNotifierPrerequisiteDescriptions: #(#(#name 'COASTCore' #componentType #bundle) #(#name 'SMTPS') #(#name 'Mail' #componentType #package) #(#name 'MIME' #componentType #package) #(#name 'SMTP' #componentType #package) #(#name 'TLS' #componentType #package))PrerequisiteParcels: #(#('COASTCore' '') #('SMTPS' '') #('Mail' '') #('MIME' '') #('SMTP' '') #('TLS' ''))Version: 5.4.3Date: 11:13:22 AM July 18, 2014 --><time-stamp>From VisualWorksÂ®, 7.10.1 of 6. Februar 2014 on 18. Juli 2014 at 11:13:22</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>CoastMailNotifier</name><environment>COAST</environment><super>COAST.CoastLogNotifier</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sender recipient smtpHost smtpPort useSecureConnection retries retryDelay attachLog username password subject </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>COASTCore</category><attributes><package>COASTMailNotifier</package></attributes></class><class><name>CoastMailFileNotifier</name><environment>COAST</environment><super>COAST.CoastMailNotifier</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filename mailSendLevel sendMail </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>COASTMailNotifier</category><attributes><package>COASTMailNotifier</package></attributes></class><methods><class-id>COAST.CoastMailNotifier</class-id> <category>config</category><body package="COASTMailNotifier">attachLog	^ attachLog ifNil: [ true ].</body><body package="COASTMailNotifier">attachLog: aBoolean	attachLog := aBoolean</body><body package="COASTMailNotifier">checkConfiguration	 self sender isNil 		ifTrue: 		[	self basicWarn:  'Mail notifier not properly configured: sender missing'.			^ false		].	self recipient isNil		ifTrue: 		[	self basicWarn:  'Mail notifier not properly configured: recipient missing'.			^ false		].	self smtpHost isNil 		ifTrue: 		[	self basicWarn:  'Mail notifier not properly configured: smtpHost missing'.			^ false		].	( self username notNil and: [self password isNil ])		ifTrue: 		[	self basicWarn:  'Mail notifier: a password is required if username is specified'.			^ false		].	(self useSecureConnection and: [ self username isNil ])		ifTrue: 		[	self basicWarn:  'Mail notifier: cannot use secure connection without username/password'.			^ false		].	^ true</body><body package="COASTMailNotifier">initializeFromIni: iniAccess 	| cat |	super initializeFromIni: iniAccess.	cat := self name asString.	self subject: ( iniAccess category: cat stringAt: 'subject' ).	self attachLog: ( iniAccess category: cat booleanAt: 'attachLog' ).	self retries: ( iniAccess category: cat numberAt: 'retries' ).	self retryDelay: ( iniAccess category: cat numberAt: 'retryDelay' ).	self sender: ( iniAccess category: cat stringAt: 'sender' ).	self recipient: ( iniAccess category: cat stringAt: 'recipient' ).	self smtpHost: ( iniAccess category: cat stringAt: 'smtpHost' ).	self smtpPort: ( iniAccess category: cat numberAt: 'smtpPort' ).	self useSecureConnection: ( iniAccess category: cat booleanAt: 'tls' ifAbsent: [ nil ]).	self username: ( iniAccess category: cat stringAt: 'username' ).	self password: ( iniAccess category: cat stringAt: 'password' ).</body><body package="COASTMailNotifier">recipient	^ recipient</body><body package="COASTMailNotifier">recipient: aString	recipient := aString</body><body package="COASTMailNotifier">retries	^ retries ifNil: [ 3 ].</body><body package="COASTMailNotifier">retries: anInteger	retries := anInteger</body><body package="COASTMailNotifier">retryDelay	" delay, in seconds "	^ retryDelay ifNil: [ 30 ].</body><body package="COASTMailNotifier">retryDelay: anInteger	" delay, in seconds "	 retryDelay := anInteger</body><body package="COASTMailNotifier">sender	^ sender</body><body package="COASTMailNotifier">sender: aString	sender := aString</body><body package="COASTMailNotifier">smtpHost	^ smtpHost</body><body package="COASTMailNotifier">smtpHost: aString	smtpHost := aString</body></methods><methods><class-id>COAST.CoastMailNotifier</class-id> <category>printing</category><body package="COASTMailNotifier">infoStringOn: stream indent: int 	| indent |	super infoStringOn: stream indent: int.	indent := int + 1.	self sender ifNotNil: [ : string |		indent timesRepeat: [ stream tab ].		stream nextPutAll: 'sender: '; nextPutAll: string printString; cr		].	self recipient ifNotNil: [ : string |		indent timesRepeat: [ stream tab ].		stream nextPutAll: 'recipient: '; nextPutAll: string printString; cr		].	self smtpHost ifNotNil: [ : string |		indent timesRepeat: [ stream tab ].		stream nextPutAll: 'smtpHost: '; nextPutAll: string printString; cr		].	self retries ifNotNil: [ : number |		indent timesRepeat: [ stream tab ].		stream nextPutAll: 'retries: '.		number printOn: stream.		stream cr		].	self retryDelay ifNotNil: [ : number |		indent timesRepeat: [ stream tab ].		stream nextPutAll: 'retryDelay: '.		number printOn: stream.		stream cr		].	self attachLog ifNotNil: [ : boolean |		indent timesRepeat: [ stream tab ].		stream nextPutAll: 'attachLog: '.		int printOn: stream.		stream cr		].</body></methods><methods><class-id>COAST.CoastMailNotifier</class-id> <category>accessing</category><body package="COASTMailNotifier">notify: aString level: anInteger for: aCoastLog	[	[			self sendMessage: (self composeMail: aString level: anInteger for: aCoastLog)				for: aCoastLog		] on: Error do: [ : ex |			Transcript show: 'Unhandled error while sending mail: ', ex description; cr.		].	] forkAt: Processor userInterruptPriority</body><body package="COASTMailNotifier">password	^ password</body><body package="COASTMailNotifier">password: aPassword 	password := aPassword.</body><body package="COASTMailNotifier">smtpPort	^ smtpPort</body><body package="COASTMailNotifier">smtpPort: aSmtpPort 	smtpPort := aSmtpPort.</body><body package="COASTMailNotifier">subject	^ subject</body><body package="COASTMailNotifier">subject: aSubject 	subject := aSubject.</body><body package="COASTMailNotifier">useSecureConnection	^ useSecureConnection ifNil: [ false ]</body><body package="COASTMailNotifier">useSecureConnection: aUseSecureConnection 	useSecureConnection := aUseSecureConnection.</body><body package="COASTMailNotifier">username	^ username</body><body package="COASTMailNotifier">username: aUsername 	username := aUsername.</body></methods><methods><class-id>COAST.CoastMailNotifier</class-id> <category>private</category><body package="COASTMailNotifier">basicWarn: aString	CoastLog singleton logLevel: LogLevelWarning channel: #mail showWithoutNotify: aString</body><body package="COASTMailNotifier">body: aString level: anInteger for: aCoastLog	| str config |	str := String new writeStream.	str nextPutAll: aString;cr;cr.	(config := CoastApplicationConfiguration current) notNil		ifTrue: [			str cr; nextPutAll: 'Info: '; cr; cr.			str nextPutAll: config fullInfoString.		].	^ str contents</body><body package="COASTMailNotifier">composeMail: aString level: anInteger for: aCoastLog	" create a mail message "	| msg fullMessage str fn |	msg := Net.MailMessage newTextPlain.	str := String new writeStream.	aCoastLog writePrefixForLevel: anInteger channel: nil on: str.	str position &gt; 0 ifTrue: [ str space ].	str nextPutAll: aString.	fullMessage := str contents.	msg		timestamp: Timestamp now;		from: self sender;		to: self recipient;		subject: (self subjectForMessage: fullMessage level: anInteger for: aCoastLog);		text: (self body: fullMessage level: anInteger for: aCoastLog).	(self attachLog and: [ (fn := CoastLog singleton transcriptFilename) notNil ])		ifTrue: [ msg addFileAttachment: fn ].	^ msg</body><body package="COASTMailNotifier">sendMessage: aMessage 	| smtpClient |	smtpClient := Net.SMTPClient host: self smtpHost.	smtpClient retries: ( self retries max: 0 ).	smtpClient delaySeconds: ( self retryDelay max: 0 ).	self username notNil 		ifTrue: 		[	smtpClient useAuthentication: true.			smtpClient user: ( Net.NetUser username: self username password: self password ).			self useSecureConnection 				ifTrue: [ smtpClient useSecureConnection ]		]		ifFalse: [ smtpClient useAuthentication: false ].	self smtpPort notNil 		ifTrue: [ smtpClient portNumber: self smtpPort ].	[ smtpClient send: aMessage ] 		on: Xtreams.TLSWarning		do: 		[: ex |			CoastLog logDebug: [ 'TLS warning while sending mail: ' , ex description ].			ex resume		].</body><body package="COASTMailNotifier">sendMessage: aMessage for: aCoastLog 	" send mail "	self checkConfiguration 		ifFalse: [ ^ false ].	^ [	self sendMessage: aMessage.		aCoastLog logLevel: LogLevelDebug channel: #mail showWithoutNotify: [ 'Mail sent' ].		true	] 		on: Error		do: 		[: ex |			aCoastLog 				logLevel: LogLevelError				channel: #mail				showWithoutNotify: 				[	'Unable to send notification mail to: &lt;1s&gt; via: &lt;2s&gt;, giving up (&lt;3s&gt;)' expandMacrosWith: self recipient with: self smtpHost with: ex description.				].			false		]</body><body package="COASTMailNotifier">subjectForMessage: aString level: anInteger for: aCoastLog 	^ self subject ifNil: 		[ | str |			str := String new writeStream.			str nextPutAll: ( aString readStream upTo: Character cr ).			str contents		]</body></methods><methods><class-id>COAST.CoastMailNotifier</class-id> <category>testing</category><body package="COASTMailNotifier">isUsable	^ self checkConfiguration</body></methods><methods><class-id>COAST.CoastMailNotifier class</class-id> <category>instance creation</category><body package="COASTMailNotifier">sender: senderString recipient: recipientString smtpHost: smtpHost	^ self new		sender: senderString;		recipient: recipientString;		smtpHost: smtpHost;		yourself</body></methods><methods><class-id>COAST.CoastMailFileNotifier</class-id> <category>accessing</category><body package="COASTMailNotifier">mailSendLevel	^ mailSendLevel</body><body package="COASTMailNotifier">mailSendLevel: aMailSendLevel 	mailSendLevel := aMailSendLevel.</body><body package="COASTMailNotifier">notify: aString level: level for: aCoastLog	(self sendMail not and: [self mailSendLevel notNil and: [ self mailSendLevel &lt;= level ] ]) ifTrue: [		sendMail := true.		].	self fileStreamDo: [ : stream |		aCoastLog writePrefixForLevel: level channel: nil on: stream.		stream nextPut: Character space;			nextPutAll: aString;			cr.		].</body><body package="COASTMailNotifier">sendMail	^ sendMail ifNil: [ false ]</body><body package="COASTMailNotifier">subject	^ subject ifNil: [ self name ]</body></methods><methods><class-id>COAST.CoastMailFileNotifier</class-id> <category>config</category><body package="COASTMailNotifier">initializeFromIni: iniAccess	| cat |	super initializeFromIni: iniAccess.	cat := self name asString.	self subject: (iniAccess category: cat stringAt: 'subject').	self mailSendLevel: (iniAccess category: cat numberAt: 'mailSendLevel').</body></methods><methods><class-id>COAST.CoastMailFileNotifier</class-id> <category>private</category><body package="COASTMailNotifier">composeMailFor: aCoastLog	| message subjectStream levelString |	message := Net.MailMessage newTextPlain.	subjectStream := String new writeStream.	(levelString := aCoastLog levelAsString: (self mailSendLevel ifNil: [ self logLevel ])) notEmpty ifTrue: [		subjectStream nextPut: $[;			nextPutAll: levelString;			nextPutAll: '] '.		].	subjectStream nextPutAll: self subject.	message		timestamp: Timestamp now;		from: self sender;		to: self recipient;		subject: subjectStream contents;		text: filename asString;		addFileAttachment: filename.	^ message</body><body package="COASTMailNotifier">fileStreamDo: aBlock 	| stream |	filename isNil 		ifTrue: 		[	filename := ( 'temp-' , Time millisecondClockValue printString , '-' , ( Random new next * 9999 ) rounded printString , '.log' ) asFilename		].	[	stream := filename appendStream.		aBlock value: stream	] ensure: 		[	stream notNil 				ifTrue: [ stream close ]		].</body></methods><methods><class-id>COAST.CoastMailFileNotifier</class-id> <category>action</category><body package="COASTMailNotifier">additionalActionFor: aCoastLog	filename isNil ifTrue: [ ^ self ].	(self mailSendLevel isNil or: [ self sendMail ]) ifTrue: [		(self sendMessage: (self composeMailFor: aCoastLog) for: aCoastLog) ifFalse: [ ^ self ].		].	[	filename delete.	] on: Error do: [ : exception | 		CoastLog logExceptionShort: exception message: 'Could not delete mail file: ', filename asString.		].	filename := nil.	sendMail := nil.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>CoastLogNotifier</name><environment>COAST</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>logLevel name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>COASTCore</category><attributes><package>COUtilities</package></attributes></class></st-source>