<?xml version="1.0"?><st-source><!-- Name: RBClassDefinitionToolNotice: Copyright © 2002 Cincom Systems, Inc.  All Rights Reserved.Comment: This is a fairly raw form based RB tool for creating and modifying class and shared variable definitions.It's fairly trivial (start by looking at a class with some instance variables), but the thing that got me to whip it up in the first place is a combined "variable + variable comment" view (the large text pane on the right). The variable comments are extracted and stored in the class comment with the usual convention (starting with a line 'Instance Variables' ending with an empty line, similarly for class inst vars and shared vars).The shared variable form does not support comments largely because there isn't a standard way to store them, however it has a real source text pane for the initializer (with optional syntax highlighting) which is much more readable than the string literal in the template based tool. Quite handy for more complex initializers.Note that for the cases that it cannot handle yet, e.g. namespace definition and classes with extended definition (e.g. ExternalInterface subclasses) it falls back to the standard template based definition tool automatically. The form based tool can be easily (de)activated through the Tools menu or Settings.DbIdentifier: bear73DbTrace: 234085PackageName: RBClassDefinitionToolParcel: #('RBClassDefinitionTool')PrintStringCache: (54,mkobetic)Version: 54Date: 10:24:02 AM October 16, 2009 --><time-stamp>From VisualWorks®, Pre-Release 7.7 (oct09.3) of October 16, 2009 on October 16, 2009 at 10:24:02 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>BrowserFormTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.CodeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name visibility namespaceModule categoryModule isDefinitionChanged </inst-vars><class-inst-vars>defaultVisibility </class-inst-vars><imports></imports><category>RBClassDefinitionTool</category><attributes><package>RBClassDefinitionTool</package></attributes></class><comment><class-id>Refactory.Browser.BrowserFormTool</class-id><body>Gathers the common aspects of the form based definition tools.Instance Variables	name	&lt;String&gt; name of the defined object	visibility	&lt;Boolean&gt; private (false) / public (true)	namespaceModule	&lt;EntryWithPasteButtonModule&gt; Subapplication with an input field and a browse button that allows to enter or select a namespace for the new definition.	categoryModule	&lt;EntryWithPasteButtonModule&gt; Subapplication with an input field and a browse button that allows to enter or select a category for the new definition.	isDefinitionChanged	&lt;Boolean&gt; ui flagClass Instance Variables	defaultVisibility	&lt;Boolean&gt; default private/public value</body></comment><class><name>ClassDefinitionTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserFormTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type imports instanceVariables classInstanceVariables variables comment isCommentChanged areSharedVarsChanged commentChunks superclassModule </inst-vars><class-inst-vars>commentEmphasis variableEmphasis </class-inst-vars><imports></imports><category>RBClassDefinitionTool</category><attributes><package>RBClassDefinitionTool</package></attributes></class><comment><class-id>Refactory.Browser.ClassDefinitionTool</class-id><body>Code tool presenting class definitions in a form with fields for individual elements of the definition. Key feature is having variable comments integrated with variable definitions. The first paragraph of the comment is displayed as well.Instance Variables	type	&lt;Symbol&gt; the type of indexed instance variables	imports	&lt;String&gt; the list of class imports	instanceVariables	&lt;Text&gt; what you see in this pane	classInstanceVariables	&lt;Text&gt; what you see in the pane below	variables	&lt;Text&gt; what you see in this pane	comment	&lt;Text&gt; The class comment without the variable sections	isCommentChanged	&lt;Boolean&gt; ui flag	areSharedVarsChanged	&lt;Boolean&gt; ui flag	commentChunks	&lt;Dictionary key: Symbol value: String&gt; original comment split into chunks	superclassModule	&lt;EntryWithPasteButtonModule&gt; The module that implements the superclass name input field and browse button.Class Instance Variables	commentEmphasis	&lt;Symbol | Association&gt; emphasis to use for class and variable comments	variableEmphasis	&lt;Symbol | Association&gt; emphasis to use for variable namesShared Variables	ClassInstVars	&lt;String&gt; standard header for class instance variable comments	Epilogue	&lt;String&gt; the key for the rest of the comment from variable comments to the end	InstVars	&lt;String&gt; standard header for instance variable comments	Prologue	&lt;String&gt; the key for the rest of the comment up to the variable comments	SharedVars	&lt;String&gt; standard header for shared class variable comments	Summary	&lt;String&gt; the key for the first paragraph of the comment</body></comment><class><name>VariableDefinitionTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserFormTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mutability initializer inspector </inst-vars><class-inst-vars>defaultMutability defaultCategory </class-inst-vars><imports></imports><category></category><attributes><package>RBClassDefinitionTool</package></attributes></class><comment><class-id>Refactory.Browser.VariableDefinitionTool</class-id><body>Code tool presenting shared variable definitions in a form with fields for individual elements of the definition. Key feature is having the variable initializer in a real code pane, rather than a string literal embedded somewhere.Instance Variables	mutability	&lt;Boolean&gt; is the variable constant (false) or changeable (true)	initializer	&lt;String&gt; the code of the variable initializer	inspector	&lt;Inspector&gt; embedded inspector instance for the variable valueClass Instance Variables	defaultMutability	&lt;Boolean&gt; the default variable mutability value (constant/variable)	defaultCategory	&lt;String&gt; default category to place new variables in</body></comment><class><name>AddClassMessageChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AddClassChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>RBClassDefinitionTool</package></attributes></class><comment><class-id>Refactory.Browser.AddClassMessageChange</class-id><body></body></comment><shared-variable><name>Summary</name><environment>Refactory.Browser.ClassDefinitionTool</environment><private>false</private><constant>false</constant><category>constants</category><initializer>'Summary'</initializer><attributes><package>RBClassDefinitionTool</package></attributes></shared-variable><shared-variable><name>Prologue</name><environment>Refactory.Browser.ClassDefinitionTool</environment><private>false</private><constant>false</constant><category>constants</category><initializer>'Prologue'</initializer><attributes><package>RBClassDefinitionTool</package></attributes></shared-variable><shared-variable><name>ClassInstVars</name><environment>Refactory.Browser.ClassDefinitionTool</environment><private>false</private><constant>false</constant><category>constants</category><initializer>'Class Instance Variables'</initializer><attributes><package>RBClassDefinitionTool</package></attributes></shared-variable><shared-variable><name>InstVars</name><environment>Refactory.Browser.ClassDefinitionTool</environment><private>false</private><constant>false</constant><category>constants</category><initializer>'Instance Variables'</initializer><attributes><package>RBClassDefinitionTool</package></attributes></shared-variable><shared-variable><name>SharedVars</name><environment>Refactory.Browser.ClassDefinitionTool</environment><private>false</private><constant>false</constant><category>constants</category><initializer>'Shared Variables'</initializer><attributes><package>RBClassDefinitionTool</package></attributes></shared-variable><shared-variable><name>Epilogue</name><environment>Refactory.Browser.ClassDefinitionTool</environment><private>false</private><constant>false</constant><category>constants</category><initializer>'Epilogue'</initializer><attributes><package>RBClassDefinitionTool</package></attributes></shared-variable><shared-variable><name>UseFormNotTemplate</name><environment>Refactory.Browser.CodeTool</environment><private>false</private><constant>false</constant><category>miscellaneous</category><initializer>true</initializer><attributes><package>RBClassDefinitionTool</package></attributes></shared-variable><methods><class-id>Refactory.Browser.BrowserFormTool</class-id> <category>updating</category><body package="RBClassDefinitionTool" selector="definitionChanged">definitionChanged	isDefinitionChanged := true.	self enableAll: #(#accept #cancel)</body><body package="RBClassDefinitionTool" selector="okToChangeToolFocus">okToChangeToolFocus	| choice |	choice := Dialog 				choose: 'Accept unsaved changes?'				labels: #('Yes' 'No' 'Cancel')				values: #(#yes #no #cancel)				default: #yes.	choice = #cancel ifTrue: [^false].	choice = #yes ifTrue: [self accept].	^true</body><body package="RBClassDefinitionTool" selector="refreshContents:">refreshContents: target	^self subclassResponsibility</body><body package="RBClassDefinitionTool" selector="resetChanged">resetChanged	isDefinitionChanged := false.	self disableAll: #(#accept #cancel)</body><body package="RBClassDefinitionTool" selector="resetContents">resetContents	self name value: nil.	self categoryModule value: self defaultCategory.	self namespaceModule value: self defaultNamespace fullName.	self visibility value: self defaultVisibility.</body><body package="RBClassDefinitionTool" selector="target">target	^self subclassResponsibility</body><body package="RBClassDefinitionTool" selector="updateContents">updateContents	self target		ifNil: [ self resetContents ]		ifNotNil: [ :target | self refreshContents: target ].	self resetChanged.</body><body package="RBClassDefinitionTool" selector="updateRequest">updateRequest	^super updateRequest 		and: [self isEditing not or: [self okToChangeToolFocus]]</body></methods><methods><class-id>Refactory.Browser.BrowserFormTool</class-id> <category>aspects</category><body package="RBClassDefinitionTool" selector="categoryModule">categoryModule	^categoryModule</body><body package="RBClassDefinitionTool" selector="name">name	^name</body><body package="RBClassDefinitionTool" selector="namespaceModule">namespaceModule	^namespaceModule</body><body package="RBClassDefinitionTool" selector="visibility">visibility	^visibility</body></methods><methods><class-id>Refactory.Browser.BrowserFormTool</class-id> <category>private</category><body package="RBClassDefinitionTool" selector="defaultCategory">defaultCategory	^nil</body><body package="RBClassDefinitionTool" selector="defaultNamespace">defaultNamespace	| ns | "find what's the most common namespace in this package"	self package ifNil: [^Smalltalk].	ns := nil -&gt; 0.	(self package allDefinedClasses inject: Bag new into: [ :b :c | b add: c environment; yourself ])		valuesAndCountsDo: [ :n :c | ns value &lt; c ifTrue: [ns := n -&gt; c]].	^ns key ifNil: [ Smalltalk ]</body><body package="RBClassDefinitionTool" selector="defaultVisibility">defaultVisibility	^self class defaultVisibility</body></methods><methods><class-id>Refactory.Browser.BrowserFormTool</class-id> <category>testing</category><body package="RBClassDefinitionTool" selector="isChanged">isChanged	^self isDefinitionChanged</body><body package="RBClassDefinitionTool" selector="isDefinitionChanged">isDefinitionChanged	^isDefinitionChanged</body><body package="RBClassDefinitionTool" selector="isEditing">isEditing	^super isEditing or: [ self isChanged ]</body></methods><methods><class-id>Refactory.Browser.BrowserFormTool</class-id> <category>actions</category><body package="RBClassDefinitionTool" selector="accept">accept	^self subclassResponsibility</body><body package="RBClassDefinitionTool" selector="cancel">cancel	^self updateContents</body></methods><methods><class-id>Refactory.Browser.BrowserFormTool</class-id> <category>initialize-release</category><body package="RBClassDefinitionTool" selector="initialize">initialize	name := nil asValue onChangeSend: #definitionChanged to: self.	visibility := nil asValue onChangeSend: #definitionChanged to: self.	namespaceModule := EntryWithPasteButtonModule forNameSpaces.	namespaceModule entryHolder onChangeSend: #definitionChanged to: self.	categoryModule := EntryWithPasteButtonModule forCategories.	categoryModule entryHolder onChangeSend: #definitionChanged to: self.	self resetChanged</body></methods><methods><class-id>Refactory.Browser.BrowserFormTool class</class-id> <category>accessing</category><body package="RBClassDefinitionTool" selector="defaultVisibility">defaultVisibility	^defaultVisibility ifNil: [self defaultVisibilityValue]</body><body package="RBClassDefinitionTool" selector="defaultVisibility:">defaultVisibility: aBoolean"	(((self defaultVisibility: true)))"	defaultVisibility := aBoolean</body><body package="RBClassDefinitionTool" selector="defaultVisibilityValue">defaultVisibilityValue	^false</body></methods><methods><class-id>Refactory.Browser.ClassDefinitionTool</class-id> <category>aspects</category><body package="RBClassDefinitionTool" selector="classInstanceVariables">classInstanceVariables	^classInstanceVariables</body><body package="RBClassDefinitionTool" selector="comment">comment	^comment</body><body package="RBClassDefinitionTool" selector="imports">imports	^imports</body><body package="RBClassDefinitionTool" selector="instanceVariables">instanceVariables	^instanceVariables</body><body package="RBClassDefinitionTool" selector="superclassModule">superclassModule	^superclassModule</body><body package="RBClassDefinitionTool" selector="type">type	^type</body><body package="RBClassDefinitionTool" selector="variables">variables	^variables</body></methods><methods><class-id>Refactory.Browser.ClassDefinitionTool</class-id> <category>private</category><body package="RBClassDefinitionTool" selector="classComment">classComment	| ws chunk vars |	ws := Text new writeStream.	(chunk := self comment value) isEmpty ifFalse: [		ws nextPutAll: self comment value; cr.		chunk last = Character cr ifFalse: [ ws cr ] ].	(commentChunks at: Prologue ifAbsent: [ nil ]) ifNotNil: [ :prologue |		ws nextPutAll: prologue.		prologue last = Character cr ifFalse: [ ws cr ] ].	vars := self variableChunks.	vars first size &lt; 2 ifFalse: [	 	ws nextPutAll: InstVars; cr.		self nextPutVariables: vars first on: ws.		ws cr ].	(vars at: 2) size &lt; 2 ifFalse: [		ws nextPutAll: ClassInstVars; cr.		self nextPutVariables: (vars at: 2) on: ws.		ws cr ].	vars last size &lt; 2 ifFalse: [		ws nextPutAll: SharedVars; cr.		self nextPutVariables: vars last on: ws.		ws cr ].	(commentChunks at: Epilogue ifAbsent: [ nil ]) ifNotNil: [ :epilogue | ws nextPutAll: epilogue ].	^ws contents</body><body package="RBClassDefinitionTool" selector="classInstVarTextFor:">classInstVarTextFor: aClass	^self		varTextFrom: (commentChunks at: ClassInstVars ifAbsent: [''])		forVariables: aClass class instanceVariablesString</body><body package="RBClassDefinitionTool" selector="commentChange">commentChange	^CommentChange new		objectName: self selectedNamespace fullName, '.', self name value;		comment: self classComment;		yourself</body><body package="RBClassDefinitionTool" selector="commentTextFor:">commentTextFor: aClass	^(commentChunks at: Summary ifAbsent: ['']) asText		emphasizeAllWith: self class commentEmphasis</body><body package="RBClassDefinitionTool" selector="defaultCategory">defaultCategory	^self package ifNotNil: [ :p | p name ]</body><body package="RBClassDefinitionTool" selector="definitionChange">definitionChange	| ns sc |	ns := self selectedNamespace.	sc := self superclassModule value.	sc := (sc includes: $.)			ifTrue: [ sc asQualifiedReference ]			ifFalse: [ ns bindingFor: sc ].	^(AddClassMessageChange		definition: (			MessageSend				receiver: ns				selector: #defineClass:superclass:indexedType:private:instanceVariableNames:classInstanceVariableNames:imports:category:				arguments: (					(Array new: 8)						at: 1 put: self name value;						at: 2 put: sc;						at: 3 put: self type value;						at: 4 put: self visibility value not;						at: 5 put: self instVarString;						at: 6 put: self classInstVarString;						at: 7 put: self imports value;						at: 8 put: (self categoryModule value ifNil: [ self package name ]) asSymbol;						yourself))	)	package: self package;		yourself</body><body package="RBClassDefinitionTool" selector="doItReceiver">doItReceiver	^self nonMetaClass</body><body package="RBClassDefinitionTool" selector="importsTextFor:">importsTextFor: aClass	| rs ws |	rs := aClass asNameSpace importString readStream.	ws := TextStream on: String new.	[	rs skipSeparators; atEnd	]	whileFalse: [		ws nextPutAll: (rs upTo: Character cr); cr ].	^ws contents</body><body package="RBClassDefinitionTool" selector="instVarTextFor:">instVarTextFor: aClass	^self		varTextFrom: (commentChunks at: InstVars ifAbsent: [''])		forVariables: aClass instanceVariablesString</body><body package="RBClassDefinitionTool" selector="nextPutVariables:on:">nextPutVariables: varText on: aStream	| rs ws |	rs := varText readStream.	ws := aStream.	[rs skipSeparators; atEnd] whileFalse: [		ws	tab; nextPutAll: rs upToSeparator;			tab; nextPutAll: (rs skipSeparators; upTo: Character cr);			cr].</body><body package="RBClassDefinitionTool" selector="parseCommentFor:">parseCommentFor: aClass	| chunks rs ws line headers key patterns |	chunks := Dictionary new.	rs := aClass comment readStream.	rs atEnd ifTrue: [^chunks].	ws := WriteStream on: String new.	"patterns and headers must be aligned"	patterns := Array with: 'Instance Variables*' with: 'Class Instance Variables*' with: 'Shared *Variables*'.	headers := Array with: InstVars with: ClassInstVars with: SharedVars.	line := rs through: Character cr.	(patterns anySatisfy: [ :pattern | pattern match: line ]) ifFalse: [		chunks at: 'Summary' put: line. 		rs atEnd ifTrue: [^chunks].		line := rs through: Character cr.		"Skip empty lines after summary if there is one"		[	line anySatisfy: [ :ch | ch isSeparator not ]		] whileFalse: [			rs atEnd ifTrue: [^chunks].			line := rs through: Character cr ] ].	key := 'Prologue'.	[	(patterns detect: [ :pattern | pattern match: line ] ifNone: [nil])			ifNil: [ ws nextPutAll: line ]			ifNotNil: [ :pattern || chunk |				ws isEmpty ifFalse: [					chunks at: key put: (chunks at: key ifAbsent: ['']), ws contents.					ws reset.					key := 'Epilogue' ].				( chunk := self parseVarsFrom: rs ) isEmpty ifFalse: [ | header |					header := headers at: (patterns indexOf: pattern).					chunks at: header put: chunk ] ].		rs atEnd	] whileFalse: [ line := rs through: Character cr ].	ws isEmpty ifFalse: [ chunks at: key put: (chunks at: key ifAbsent: ['']), ws contents ].	^ chunks</body><body package="RBClassDefinitionTool" selector="parseVarsFrom:">parseVarsFrom: aStream	| line ws |	ws := WriteStream on: String new.	"Skip empty lines"	[ 	aStream atEnd ifTrue: [ ^'' ].		line := aStream through: Character cr.		line anySatisfy: [ :ch | ch isSeparator not ]	] whileFalse.	"Read variable descriptions"	[	| empty |		empty := line allSatisfy: [ :ch | ch isSeparator ].		empty ifFalse: [ ws nextPutAll: line ].		empty or: [ aStream atEnd ]	] whileFalse: [ line := aStream through: Character cr ].	^ws contents</body><body package="RBClassDefinitionTool" selector="postBuildWith:">postBuildWith: aBuilder	super postBuildWith: aBuilder.	(self widgetAt: #comment) controller initializeMenuForCode.	(self widgetAt: #variables) controller initializeMenuForCode.	(self widgetAt: #name) controller		keyboardHook: [ :ev :ctrl |			ctrl text size = 0 ifTrue: [				"Let's fake typing in Esc-b to turn bolding on"				ctrl changeEmphasisKey: (KeyboardEvent code: $b meta: nil) ].			ev ]</body><body package="RBClassDefinitionTool" selector="selectedNamespace">selectedNamespace	^namespaceModule value		ifNil: [ | ns | "find what's the most common namespace in this package"			ns := nil -&gt; 0.			(self package allDefinedClasses inject: Bag new into: [ :b :c | b add: c environment; yourself ])				valuesAndCountsDo: [ :n :c | ns value &lt; c ifTrue: [ns := n -&gt; c]].			ns key ifNil: [ Smalltalk ]]		ifNotNil: [ :nm | nm asQualifiedReference value ]</body><body package="RBClassDefinitionTool" selector="sharedVarChanges">sharedVarChanges	| changes cName cNames sNames |	cName := String new writeStream				nextPutAll: self selectedNamespace fullName;				nextPut: $.; nextPutAll: self name value;				contents.	cNames := (cName asQualifiedReference ifDefinedDo: [ :c | c classVarNames ] elseDo: [ #() ]) asSet.	sNames := self sharedVarNames asSet.	changes := OrderedCollection new.	sNames - cNames do: [ :nm || ch |		ch := AddSharedVariableChange definition: (				'&lt;1s&gt; defineSharedVariable: #&lt;2s&gt; private: false constant: false category: ''As yet unclassified '' initializer: nil'					expandMacrosWith: cName with: nm ).		ch package: self package.		changes add: ch ].	cNames - sNames do: [ :nm | changes add: (RemoveSharedVariableChange new objectName: cName, '.', nm) ].	^changes</body><body package="RBClassDefinitionTool" selector="sharedVarTextFor:">sharedVarTextFor: aClass	^self		varTextFrom: (commentChunks at: SharedVars ifAbsent: [''])		forVariables: aClass classVariablesString</body><body package="RBClassDefinitionTool" selector="trimSeparators:">trimSeparators: aString "Answer aString with the beginning and trailing spaces, tabs, and crs removed."	| beginning end |	beginning := 1.	end := aString size.	"Find the beginning"	[	beginning &gt; end ifTrue: [^''].		(aString at: beginning) isSeparator	]	whileTrue: [		beginning := beginning + 1 ].	"Find the end"	[	(aString at: end) isSeparator	]	whileTrue: [		end := end - 1 ].	^aString copyFrom: beginning to: end</body><body package="RBClassDefinitionTool" selector="varStringFrom:">varStringFrom: aText 	| rs ws |	rs := aText readStream.	ws := String new writeStream.		[rs		skipSeparators;		atEnd] whileFalse: 				[ws					nextPutAll: rs upToSeparator;					space.				rs skipThrough: Character cr].	^ws contents</body><body package="RBClassDefinitionTool" selector="varTextFor:">varTextFor: aClass	| ws vars header |	ws := TextStream on: String new.	header := #(bold underline).	ws emphasis: header; nextPutAll: InstVars; emphasis: nil; cr.	vars := aClass ifNil: [''] ifNotNil: [ self instVarTextFor: aClass ].	vars isEmpty ifFalse: [ ws nextPutAllText: vars ].	ws cr; emphasis: header; nextPutAll: ClassInstVars; emphasis: nil; cr .	vars := aClass ifNil: [''] ifNotNil: [ self classInstVarTextFor: aClass ].	vars isEmpty ifFalse: [ ws nextPutAllText: vars ].	ws cr; emphasis: header; nextPutAll: SharedVars; emphasis: nil; cr .	vars := aClass ifNil: [''] ifNotNil: [ self sharedVarTextFor: aClass ].	vars isEmpty ifFalse: [ ws nextPutAllText: vars ].	^ws contents</body><body package="RBClassDefinitionTool" selector="varTextFrom:forVariables:">varTextFrom: aText forVariables: variableString 	| rs ws vars varNames |	vars := Dictionary new.	rs := aText readStream.	ws := TextStream on: String new.	[rs atEnd] whileFalse: [ | var varType |		rs skipSeparators.		var := rs upToSeparator.		rs skipSeparators.		varType := (rs peek = $&lt;) ifTrue: [ rs through: $&gt; ] ifFalse: [ '' ].		vars at: var put: varType -&gt; (self trimSeparators: (rs upTo: Character cr)) ].	varNames :=		(variableString tokensBasedOn: Character space) 			reject: [ :ivar | ivar isEmpty].	varNames do: [ :ivar || ass |		ass := vars at: ivar ifAbsent: ['&lt;Object&gt;' -&gt; 'undocumented' ].		ws	emphasis: self class variableEmphasis;			nextPutAll: ivar;			emphasis: nil; space;			nextPutAll: ass key;			space; emphasis: self class commentEmphasis;			nextPutAll: ass value;			emphasis: nil; cr].	^ws contents</body><body package="RBClassDefinitionTool" selector="variableChunks">variableChunks	| rs ivs civs svs |	rs := self variables value readStream.	rs throughAll: InstVars; next. "dump first header"	ivs := rs upToAll: ClassInstVars.	rs through: Character cr. "dump second header"	civs := rs upToAll: SharedVars.	rs through: Character cr. "dump third header"	svs := rs upToEnd.	^Array with: ivs with: civs with: svs</body></methods><methods><class-id>Refactory.Browser.ClassDefinitionTool</class-id> <category>updating</category><body package="RBClassDefinitionTool" selector="commentChanged">commentChanged	isCommentChanged := true.	self enableAll: #(#accept #cancel)</body><body package="RBClassDefinitionTool" selector="refreshContents:">refreshContents: aClass	commentChunks := self parseCommentFor: aClass.	self name value: aClass name asText allBold.	self superclassModule value: (aClass superclass ifNotNil: [ :sc | sc fullyQualifiedReference makeUnambiguous fullName ]).	self type value: aClass behaviorType.	self categoryModule value: aClass category.	self namespaceModule value: aClass environment fullyQualifiedReference makeUnambiguous asString.	self visibility value: (aClass environment bindingFor: aClass name) isPrivate not.	self imports value: (self importsTextFor: aClass).	self variables value: (self varTextFor: aClass).	self instanceVariables value: (self instVarTextFor: aClass).	self classInstanceVariables value: (self classInstVarTextFor: aClass).	self comment value: (self commentTextFor: aClass)</body><body package="RBClassDefinitionTool" selector="resetContents">resetContents	commentChunks := Dictionary new.	super resetContents.	self superclassModule value: nil.	self type value: #none.	self imports value: ''.	self variables value: (self varTextFor: nil).	self instanceVariables value: ''.	self classInstanceVariables value: ''.	self comment value: ''.</body><body package="RBClassDefinitionTool" selector="sharedVarsChanged">sharedVarsChanged	areSharedVarsChanged := true.	self enableAll: #(#accept #cancel)</body><body package="RBClassDefinitionTool" selector="updateContents">updateContents	self nonMetaClass		ifNil: [ self resetContents ]		ifNotNil: [ :class | self refreshContents: class ].	self resetChanged.</body><body package="RBClassDefinitionTool" selector="variableChanged">variableChanged	| class |	((class := self nonMetaClass) isNil	or: [ self instVarString ~= class instanceVariablesString	or: [ self classInstVarString ~= class class instanceVariablesString ] ])		ifTrue: [ self definitionChanged ].	((class isNil and: [ self sharedVarString notEmpty ])	or: [ class notNil and: [ self sharedVarNames ~= class classVarNames asSortedCollection ] ])		ifTrue: [ self sharedVarsChanged ].	self commentChanged</body></methods><methods><class-id>Refactory.Browser.ClassDefinitionTool</class-id> <category>accessing</category><body package="RBClassDefinitionTool" selector="classInstVarString">classInstVarString	^self varStringFrom: (self variableChunks at: 2)</body><body package="RBClassDefinitionTool" selector="instVarString">instVarString	^self varStringFrom: self variableChunks first</body><body package="RBClassDefinitionTool" selector="resetChanged">resetChanged	isDefinitionChanged := isCommentChanged := areSharedVarsChanged := false.	self disableAll: #(#accept #cancel)</body><body package="RBClassDefinitionTool" selector="sharedVarNames">sharedVarNames	^	(	(	(self sharedVarString tokensBasedOn: Character space)					reject: [ :s | s isEmpty ]			) collect: [ :s | s asSymbol ]		) asSortedCollection</body><body package="RBClassDefinitionTool" selector="sharedVarString">sharedVarString	^self varStringFrom: self variableChunks last</body></methods><methods><class-id>Refactory.Browser.ClassDefinitionTool</class-id> <category>testing</category><body package="RBClassDefinitionTool" selector="areSharedVarsChanged">areSharedVarsChanged	^areSharedVarsChanged</body><body package="RBClassDefinitionTool" selector="isChanged">isChanged	^super isChanged or: [	self isCommentChanged ]</body><body package="RBClassDefinitionTool" selector="isCommentChanged">isCommentChanged	^isCommentChanged</body></methods><methods><class-id>Refactory.Browser.ClassDefinitionTool</class-id> <category>initialize-release</category><body package="RBClassDefinitionTool" selector="initialize">initialize	name := nil asValue onChangeSend: #definitionChanged to: self.	type := nil asValue onChangeSend: #definitionChanged to: self.	visibility := nil asValue onChangeSend: #definitionChanged to: self.	imports := '' asValue onChangeSend: #definitionChanged to: self.	variables := '' asValue onChangeSend: #variableChanged to: self.	instanceVariables := '' asValue onChangeSend: #variableChanged to: self.	classInstanceVariables := '' asValue onChangeSend: #variableChanged to: self.	comment := '' asValue onChangeSend: #variableChanged to: self.	superclassModule := EntryWithPasteButtonModule forClasses.	superclassModule entryHolder onChangeSend: #definitionChanged to: self.	namespaceModule := EntryWithPasteButtonModule forNameSpaces.	namespaceModule entryHolder onChangeSend: #definitionChanged to: self.	categoryModule := EntryWithPasteButtonModule forCategories.	categoryModule entryHolder onChangeSend: #definitionChanged to: self.	self resetChanged</body></methods><methods><class-id>Refactory.Browser.ClassDefinitionTool</class-id> <category>tab APIs</category><body package="RBClassDefinitionTool" selector="isActive">isActive	UseFormNotTemplate ifFalse: [ ^false ].	self selectedBinding ifNil: [ ^true ].	^self hasNonExtendedClassDefinitionFocus</body><body package="RBClassDefinitionTool" selector="tabName">tabName	^#Definition &lt;&lt; #browser</body></methods><methods><class-id>Refactory.Browser.ClassDefinitionTool</class-id> <category>actions</category><body package="RBClassDefinitionTool" selector="accept">accept	| dc changes finished |	changes :=  CompositeRefactoryChange new.	changes name: 'Change Class: ', self name value.	self isDefinitionChanged ifTrue: [		changes addChange: (dc := self definitionChange) ].	self areSharedVarsChanged ifTrue: [		self sharedVarChanges do: [ :c | changes addChange: c ] ].	self isCommentChanged ifTrue: [		changes addChange: self commentChange ].	self showWaitCursorWhile: [		finished :=		[	self performChange: changes.			true		] 	on: Error			do: [ :ex | 				ex isResumable 					ifTrue: [(self confirm: ex errorString , '\Do you want to continue?' withCRs) 							ifTrue: [ex proceed]]					ifFalse: [self warn: ex errorString].				ex return: false ]].	finished ifTrue: [		dc ifNotNil: [ :change || class |			class := change definedObject.			codeModel setClass: class ].		self resetChanged ]</body></methods><methods><class-id>Refactory.Browser.ClassDefinitionTool class</class-id> <category>accessing</category><body package="RBClassDefinitionTool" selector="commentEmphasis">commentEmphasis	^commentEmphasis</body><body package="RBClassDefinitionTool" selector="commentEmphasis:">commentEmphasis: anEmphasis"	(((self commentEmphasis: #color -&gt; ColorValue darkGreen)))"	commentEmphasis := anEmphasis</body><body package="RBClassDefinitionTool" selector="defaultVisibilityValue">defaultVisibilityValue	^false</body><body package="RBClassDefinitionTool" selector="variableEmphasis">variableEmphasis	^variableEmphasis</body><body package="RBClassDefinitionTool" selector="variableEmphasis:">variableEmphasis: anEmphasis"	(((self variableEmphasis: #bold)))"	variableEmphasis := anEmphasis</body></methods><methods><class-id>Refactory.Browser.ClassDefinitionTool class</class-id> <category>testing</category><body package="RBClassDefinitionTool" selector="testCommentParsing">testCommentParsing"	self testCommentParsing"	| parser |	parser := self new.	(Metaclass allInstances collect: [ :c | c instanceBehavior ]) do: [ :c || comment chunks |		comment := c comment.		chunks := parser parseCommentFor: c ]</body></methods><methods><class-id>Refactory.Browser.VariableDefinitionTool</class-id> <category>updating</category><body package="RBClassDefinitionTool" selector="binding">binding	| binding vName |	binding := self selectedBinding.	"(binding notNil and: [binding isForGeneral]) ifTrue: [^binding]."	binding isNil ifTrue: [^nil].	vName := self sharedVariableName.	^vName notNil ifTrue: [binding value bindingFor: vName] ifFalse: [nil]</body><body package="RBClassDefinitionTool" selector="refreshContents:">refreshContents: varName	| binding environment |	environment := self selectedBinding value.	binding := environment asNameSpace localBindingFor: varName.	self name value: binding key asText allBold.	self categoryModule value: binding category.	self namespaceModule value: environment fullyQualifiedReference makeUnambiguous asString.	self visibility value: binding isPrivate not.	self mutability value: binding isConstant not.	self initializer value: binding sourceCode</body><body package="RBClassDefinitionTool" selector="resetContents">resetContents	super resetContents.	self mutability value: self class defaultMutability.	self initializer value: nil.</body><body package="RBClassDefinitionTool" selector="target">target	^codeModel sharedVariableName</body><body package="RBClassDefinitionTool" selector="updateContents">updateContents		super updateContents.	self installInspector</body><body package="RBClassDefinitionTool" selector="updateDisplay">updateDisplay	super updateDisplay.	self installInspector</body></methods><methods><class-id>Refactory.Browser.VariableDefinitionTool</class-id> <category>changing</category><body package="RBClassDefinitionTool" selector="installInspector">installInspector	self installInspectorOn: self binding value</body><body package="RBClassDefinitionTool" selector="installInspectorOn:">installInspectorOn: anObject 	self resetWindowLabelAround: 			[| inspectorClass |			inspectorClass := anObject inspectorClass.			self 				installSubcanvasIn: #inspector				using: (inspectorClass inspect: anObject)				spec: #windowSpec]</body><body package="RBClassDefinitionTool" selector="resetWindowLabelAround:">resetWindowLabelAround: aBlock 	| window label |	self builder isNil ifTrue: [^self].	window := self builder window.	window notNil ifTrue: [label := window label].	aBlock ensure: [window notNil ifTrue: [window label: label]]</body></methods><methods><class-id>Refactory.Browser.VariableDefinitionTool</class-id> <category>private</category><body package="RBClassDefinitionTool" selector="defaultCategory">defaultCategory	^self protocol ifNil: [ self class defaultCategory ]</body><body package="RBClassDefinitionTool" selector="defaultNamespace">defaultNamespace	^self nonMetaClass ifNil: [ super defaultNamespace ]</body></methods><methods><class-id>Refactory.Browser.VariableDefinitionTool</class-id> <category>aspects</category><body package="RBClassDefinitionTool" selector="initializer">initializer	^initializer</body><body package="RBClassDefinitionTool" selector="inspector">inspector	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^inspector isNil		ifTrue:			[inspector := Tools.Inspector new]		ifFalse:			[inspector]</body><body package="RBClassDefinitionTool" selector="mutability">mutability	^mutability</body></methods><methods><class-id>Refactory.Browser.VariableDefinitionTool</class-id> <category>initialize-release</category><body package="RBClassDefinitionTool" selector="initialize">initialize	super initialize.	initializer := nil asValue onChangeSend: #definitionChanged to: self.	mutability := true asValue onChangeSend: #definitionChanged to: self.	namespaceModule := EntryWithPasteButtonModule forSharedVariableEnvironments.	namespaceModule entryHolder onChangeSend: #definitionChanged to: self.	categoryModule := EntryWithPasteButtonModule forCategories.	categoryModule entryHolder onChangeSend: #definitionChanged to: self.</body></methods><methods><class-id>Refactory.Browser.VariableDefinitionTool</class-id> <category>highlighting</category><body package="RBClassDefinitionTool" selector="highlight:from:">highlight: aText from: aHighlighter	^#{Refactory.CodeHighlighter.CodeHighlightingParser} ifDefinedDo: [ :chp |		chp	formatExpression: aText			forClass: nil class			namespace: (self navigator selectedNameSpace ifNil: [ self nonMetaClass environment ]) ]</body><body package="RBClassDefinitionTool" selector="unhighlight:from:">unhighlight: aText from: aHighlighter		^#{Tools.StyleDescription} ifDefinedDo: [ :sd |		aText addEmphasis: #() removeEmphasis: sd styleNames allowDuplicates: false ]</body></methods><methods><class-id>Refactory.Browser.VariableDefinitionTool</class-id> <category>interface opening</category><body package="RBClassDefinitionTool" selector="postBuildWith:">postBuildWith: aBuilder	super postBuildWith: aBuilder.	#{Refactory.CodeHighlighter.CodeHighlighter} ifDefinedDo: [ :ch |		ch on: (self widgetAt: #initializer) controller for: self ]</body></methods><methods><class-id>Refactory.Browser.VariableDefinitionTool</class-id> <category>actions</category><body package="RBClassDefinitionTool" selector="accept">accept	| change arguments finished |	self isChanged ifFalse: [^self].	change := AddSharedVariableChange new.	change name: 'Define Variable: ' , self name value.	(arguments := Array new writeStream)		nextPut: namespaceModule value;		nextPut: name value;		nextPut: visibility value not;		nextPut: mutability value not;		nextPut: categoryModule value;		nextPut: initializer value asString.	change definition: (		'&lt;1s&gt; defineSharedVariable: #&lt;2s&gt; private: &lt;3p&gt; constant: &lt;4p&gt; category: &lt;5p&gt; initializer: &lt;6p&gt;'			expandMacrosWithArguments: arguments contents).	change package: self package.	self showWaitCursorWhile: [		finished :=		[	self performChange: change. true		] on: Error do: [:ex |			ex isResumable				ifTrue: [(self confirm: ex errorString , '\Do you want to continue?' withCRs) ifTrue: [ex proceed]]				ifFalse: [self warn: ex errorString].			ex return: false ] ].	finished ifTrue: [ | binding |		binding := change objectName asQualifiedReference binding.		InputState default shiftDown ifFalse: [			"You can prevent automatic re-initialization if you hold Shift down during accept"			binding reinitializeValue ].		codeModel setBinding: binding.		self resetChanged ]</body></methods><methods><class-id>Refactory.Browser.VariableDefinitionTool</class-id> <category>tab APIs</category><body package="RBClassDefinitionTool" selector="isActive">isActive	^UseFormNotTemplate and: [		codeModel sharedVariableName notNil		or: [codeModel isData and: [codeModel protocol notNil]]]</body><body package="RBClassDefinitionTool" selector="tabName">tabName	^#SharedVariable &lt;&lt; #browser &gt;&gt; 'Share'</body></methods><methods><class-id>Refactory.Browser.VariableDefinitionTool</class-id> <category>tab management</category><body package="RBClassDefinitionTool" selector="tabIcon">tabIcon	^self binding value ifNotNil: [:object | object class safeToolListIcon]</body></methods><methods><class-id>Refactory.Browser.VariableDefinitionTool class</class-id> <category>accessing</category><body package="RBClassDefinitionTool" selector="defaultCategory">defaultCategory	^defaultCategory ifNil: ['miscellaneous']</body><body package="RBClassDefinitionTool" selector="defaultCategory:">defaultCategory: aString"	self defaultCategory: 'miscellaneous'"	defaultCategory := aString</body><body package="RBClassDefinitionTool" selector="defaultMutability">defaultMutability	^defaultMutability ifNil: [true]</body><body package="RBClassDefinitionTool" selector="defaultMutability:">defaultMutability: aBoolean"	self defaultMutability: true"	defaultMutability := aBoolean</body><body package="RBClassDefinitionTool" selector="defaultVisibilityValue">defaultVisibilityValue	^true</body></methods><methods><class-id>Refactory.Browser.AddClassMessageChange</class-id> <category>accessing</category><body package="RBClassDefinitionTool" selector="renameChangesForObject:to:">renameChangesForObject: aClassName to: newClassName 	"I don't understand what's this for, so let's just halt for now"	self halt.</body></methods><methods><class-id>Refactory.Browser.AddClassMessageChange</class-id> <category>private</category><body package="RBClassDefinitionTool" selector="fillOutDefinition">fillOutDefinition	| arguments |	arguments := definition arguments.	nameSpaceName := definition receiver fullName.	superclassName := (arguments at: 2) ifNotNil: [ :binding | binding value fullName].	objectName := nameSpaceName , '.' , arguments first.	indexedType := arguments at: 3.	isPrivate := arguments at: 4.	instanceVariableNames := self namesIn: (arguments at: 5).	classInstanceVariableNames := self namesIn: (arguments at: 6).	imports := self parseImports: (arguments at: 7) asString.	category := arguments at: 8</body><body package="RBClassDefinitionTool" selector="primitiveExecute">primitiveExecute	[ self setPackage: self package		while: [ definedObject := definition value ].	definedObject isNil ifTrue: [RefactoryChangeFailureNotification raise]	]	on: RedefinitionNotification		do: [ :note | 			RedefinitionNotification				interactiveHandler: note				forcedPackage: self package].	^definedObject</body></methods><methods><class-id>Refactory.Browser.AddClassMessageChange</class-id> <category>printing</category><body package="RBClassDefinitionTool" selector="printOn:">printOn: aStream 	definition printOn: aStream</body></methods><methods><class-id>Refactory.Browser.AddClassMessageChange class</class-id> <category>instance creation</category><body package="RBClassDefinitionTool" selector="definition:">definition: message	^self new definition: message; yourself</body></methods><methods><class-id>Refactory.Browser.CodeTool class</class-id> <category>accessing</category><body package="RBClassDefinitionTool" selector="useFormNotTemplate">useFormNotTemplate	^UseFormNotTemplate ifNil: [^true]</body><body package="RBClassDefinitionTool" selector="useFormNotTemplate:">useFormNotTemplate: aBoolean	UseFormNotTemplate := aBoolean</body></methods><methods><class-id>Refactory.Browser.CodeTool</class-id> <category>testing</category><body package="RBClassDefinitionTool" selector="hasNonExtendedClassDefinitionFocus">hasNonExtendedClassDefinitionFocus	^self selectedBinding		ifNil: [ false ]		ifNotNil: [ :binding |			binding isForClass and: [ binding value extraAttributesForDefinition isEmpty ] ]</body><body package="RBClassDefinitionTool" selector="hasSharedVariableFocus">hasSharedVariableFocus	^codeModel sharedVariableName notNil	or: [codeModel isData and: [codeModel protocol notNil]]</body></methods><methods><class-id>Refactory.Browser.SharedVariableCodeTool</class-id> <category>tab APIs</category><body package="RBClassDefinitionTool" selector="isActive">isActive	^UseFormNotTemplate not and: [ self hasSharedVariableFocus ]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>private</category><body package="RBClassDefinitionTool" selector="useFormNotTemplate">useFormNotTemplate	^BrowserFormTool useFormNotTemplate</body></methods><methods><class-id>Refactory.Browser.BrowserDefinitionTool</class-id> <category>tab APIs</category><body package="RBClassDefinitionTool" selector="isActive">isActive		UseFormNotTemplate ifFalse: [ ^self selectedBinding notNil].	^self hasNonExtendedClassDefinitionFocus not</body></methods><methods><class-id>Refactory.Browser.ClassDefinitionTool class</class-id> <category>interface specs</category><body package="RBClassDefinitionTool" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 187 230 924 650 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1.0 25 0 ) 							#name: #name 							#model: #name ) 						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 75 0 25 0 0 1.0 50 0 ) 							#name: #superclassModule 							#flags: 0 							#majorKey: #{EntryWithPasteButtonModule} 							#minorKey: #windowSpec 							#clientKey: #superclassModule ) 						#(#{UI.RadioButtonSpec} 							#layout: #(#{UI.AlignmentOrigin} 80 0 52 0 0 0 ) 							#name: #indexedNone 							#model: #type 							#label: 'none' 							#select: #none ) 						#(#{UI.RadioButtonSpec} 							#layout: #(#{UI.AlignmentOrigin} 140 0 52 0 0 0 ) 							#name: #indexedBytes 							#model: #type 							#label: 'bytes' 							#select: #bytes ) 						#(#{UI.RadioButtonSpec} 							#layout: #(#{UI.AlignmentOrigin} 200 0 52 0 0 0 ) 							#name: #indexedObjects 							#model: #type 							#label: 'objects' 							#select: #objects ) 						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 75 0 75 0 0 1.0 100 0 ) 							#name: #categoryModule 							#flags: 0 							#majorKey: #{EntryWithPasteButtonModule} 							#minorKey: #windowSpec 							#clientKey: #categoryModule ) 						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 75 0 100 0 0 1.0 125 0 ) 							#name: #namespaceModule 							#flags: 0 							#majorKey: #{EntryWithPasteButtonModule} 							#minorKey: #windowSpec 							#clientKey: #namespaceModule ) 						#(#{UI.RadioButtonSpec} 							#layout: #(#{UI.AlignmentOrigin} 80 0 127 0 0 0 ) 							#name: #visibilityPrivate 							#model: #visibility 							#label: 'private' 							#select: false ) 						#(#{UI.RadioButtonSpec} 							#layout: #(#{UI.AlignmentOrigin} 150 0 127 0 0 0 ) 							#name: #visibilityPublic 							#model: #visibility 							#label: 'public' 							#select: true ) 						#(#{UI.TextEditorSpec} 							#layout: #(#{Graphics.LayoutFrame} 75 0 150 0 0 1.0 0 1.0 ) 							#name: #imports 							#model: #imports 							#tabRequiresControl: false ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 70 0 25 0 1 0 ) 							#name: #superLabel 							#label: 'super' ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 70 0 50 0 1 0 ) 							#name: #typeLabel 							#label: 'indexing' ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 70 0 75 0 1 0 ) 							#name: #categoryLabel 							#label: 'category' ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 70 0 100 0 1 0 ) 							#name: #namespaceLabel 							#label: 'namespace' ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 70 0 125 0 1 0 ) 							#name: #visibilityLabel 							#label: 'visibility' ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 70 0 150 0 1 0 ) 							#name: #importsLabel 							#label: 'imports' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 0 0 1 0.15 -1 0.333333 -25 1 ) 						#name: #fieldGroup ) ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -1 0.333333 1 0.15 1 0.333333 0 1 ) 					#name: #groupSplitter 					#horizontal: false 					#minAboveSize: 200 					#minBelowSize: 200 					#aboveWidgets: 'fieldGroup buttonGroup' 					#belowWidgets: 'variables' ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.ActionButtonSpec} 							#layout: #(#{UI.AlignmentOrigin} 75 0 0 1 0 1 ) 							#name: #accept 							#flags: 40 							#model: #accept 							#label: '&amp;Accept' 							#defaultable: true ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{UI.AlignmentOrigin} 0 1.0 0 1.0 1 1 ) 							#name: #cancel 							#flags: 40 							#model: #cancel 							#label: 'Cance&amp;l' 							#defaultable: true ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 0 0 -25 1 -1 0.333333 0 1 ) 						#name: #buttonGroup ) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -1 0.15 ) 					#name: #comment 					#flags: 5 					#model: #comment 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -1 0.15 0 1 1 0.15 ) 					#name: #commentSplitter 					#horizontal: true 					#minAboveSize: 10 					#minBelowSize: 50 					#aboveWidgets: 'comment' 					#belowWidgets: 'fieldGroup groupSplitter variables' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.333333 1 0.15 0 1 0 1 ) 					#name: #variables 					#model: #variables 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.VariableDefinitionTool class</class-id> <category>interface specs</category><body package="RBClassDefinitionTool" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 840 525 1577 945 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1.0 25 0 ) 							#name: #name 							#model: #name ) 						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 75 0 25 0 0 1.0 50 0 ) 							#name: #namespaceModule 							#flags: 0 							#majorKey: #{EntryWithPasteButtonModule} 							#minorKey: #windowSpec 							#clientKey: #namespaceModule ) 						#(#{UI.RadioButtonSpec} 							#layout: #(#{UI.AlignmentOrigin} 80 0 52 0 0 0 ) 							#name: #mutabilityConstant 							#model: #mutability 							#label: 'constant' 							#select: false ) 						#(#{UI.RadioButtonSpec} 							#layout: #(#{Core.Point} 150 52 ) 							#name: #mutabilityVariable 							#model: #mutability 							#label: 'variable'							#select: true ) 						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 75 0 100 0 0 1 125 0 ) 							#name: #categoryModule 							#flags: 0 							#majorKey: #{EntryWithPasteButtonModule} 							#minorKey: #windowSpec 							#clientKey: #categoryModule ) 						#(#{UI.RadioButtonSpec} 							#layout: #(#{Core.Point} 80 75 ) 							#name: #visibilityPrivate 							#model: #visibility 							#label: 'private' 							#select: false ) 						#(#{UI.RadioButtonSpec} 							#layout: #(#{Core.Point} 150 75 ) 							#name: #visibilityPublic 							#model: #visibility 							#label: 'public' 							#select: true ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 70 0 25 0 1 0 ) 							#name: #environmentLabel 							#label: 'environment' ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 70 0 50 0 1 0 ) 							#name: #mutabilityLabel 							#label: 'mutability' ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 70 0 100 0 1 0 ) 							#name: #categoryLabel 							#label: 'category' ) 						#(#{UI.LabelSpec} 							#layout: #(#{UI.AlignmentOrigin} 70 0 75 0 1 0 ) 							#name: #visibilityLabel 							#label: 'visibility' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 0 0 1 0 -1 0.333333 128 0 ) 						#name: #fieldGroup ) ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -1 0.333333 1 0 1 0.333333 0 1 ) 					#name: #groupSplitter 					#horizontal: false 					#minAboveSize: 200 					#minBelowSize: 200 					#aboveWidgets: 'fieldGroup buttonGroup inspector' 					#belowWidgets: 'initializer' ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.ActionButtonSpec} 							#layout: #(#{Core.Point} 75 0 ) 							#name: #accept 							#flags: 40 							#model: #accept 							#label: '&amp;Accept' 							#defaultable: true ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{UI.AlignmentOrigin} 0 1 0 0 1 0 ) 							#name: #cancel 							#flags: 40 							#model: #cancel 							#label: 'Cance&amp;l' 							#defaultable: true ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 0 0 128 0 -1 0.333333 163 0 ) 						#name: #buttonGroup ) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.333333 1 0 0 1 0 1 ) 					#name: #initializer 					#model: #initializer 					#tabRequiresControl: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 165 0 -1 0.333333 0 1 ) 					#name: #inspector ) ) ) )</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>menu</category><body package="RBClassDefinitionTool" selector="rbClassDefinitionToolToggle">rbClassDefinitionToolToggle	"Toggle RBClassDefinitionTool on or off."	&lt;menuItem: 'Enable RBClassDefinition Tool'		nameKey: #rbClassDefinitionToolToggle		enablement: nil		indication: #useFormNotTemplate		menu: #(#toolsMenu)		position: 31.00&gt;	BrowserFormTool useFormNotTemplate: BrowserFormTool useFormNotTemplate not</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-browser</category><body package="RBClassDefinitionTool" selector="browser18UseClassDefinitionTool">browser18UseClassDefinitionTool	&lt;setting: #(tools browser useClassDefinitionTool)&gt;	^(BooleanSetting 			on: Refactory.Browser.BrowserFormTool			aspect: #useFormNotTemplate)		default: true;		label: #UseFormDefinitionTool &lt;&lt; #labels &gt;&gt; 'Use forms';		helpText: #UseFormDefinitionToolHelpText &lt;&lt; #dialogs &gt;&gt; 'Use a form-based definition tools instead of the traditional message based code templates'</body></methods><methods><class-id>Refactory.Browser.CodeModel class</class-id> <category>tool registration</category><body package="RBClassDefinitionTool" selector="classDefinitionToolClass">classDefinitionToolClass	&lt;tool: 25&gt;	^ClassDefinitionTool</body><body package="RBClassDefinitionTool" selector="variableDefinitionToolClass">variableDefinitionToolClass	&lt;tool: 25&gt;	^VariableDefinitionTool</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>CodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>codeModel menu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>RefactoringBrowser</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>navigator policyClass dispatcher findHolder findList toolbarMenuHolder toolsetsList </inst-vars><class-inst-vars>showToolbarHolder </class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>BrowserDefinitionTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>SharedVariableCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserDefinitionTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>AddClassChange</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ExecuteCodeChange</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclassName instanceVariableNames classInstanceVariableNames imports indexedType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Change Objects</category><attributes><package>Browser-ChangeObjects</package></attributes></class></st-source>