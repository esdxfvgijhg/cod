<?xml version="1.0"?><st-source><!-- Name: WikiSpamManagementComment: This package implements a simple text checker for black-list spam checks.  It looks for a file (current directory) called badText.txt, and creates a list of "bad text".  Incoming text can be checked against the bad text.DbIdentifier: psql_public_cst_2007DbTrace: 92370DbUsername: niallrDbVersion: 7.10.1 - 1PackageName: WikiSpamManagementParcel: #('WikiSpamManagement')PrintStringCache: (7.10.1 - 1,niallr)Version: 7.10.1 - 1Date: 4:59:57 PM January 26, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (aug15.1) of August 7, 2015 on January 26, 2016 at 4:59:57 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>BadTextHolder</name><environment>WikiWorks</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>badList updateProcess file shouldCheck badIPList </inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>WikiWorks</category><attributes><package>WikiSpamManagement</package></attributes></class><comment><class-id>WikiWorks.BadTextHolder</class-id><body>BadTextHolder implements a simple text scanner for spam, using file based black lists for bad text and bad IP addresses.  The file (badText.txt) is scanned every hour in order to update the list with recent mods made independentlyInstance Variables:	badList	&lt;Collection | String&gt;	a collection of strings to match against	badIPList &lt;Collection | String&gt; a collection of IP addresses that cannot update the wiki	file	&lt;String&gt;	name of the text file to check	shouldCheck &lt;Boolean&gt; if false, then all checks will respond that new content is spam	updateProcess	&lt;Process&gt;	The process which updates the bad list</body></comment><class><name>LockedPageHolder</name><environment>WikiWorks</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lockedPages process </inst-vars><class-inst-vars>default </class-inst-vars><imports></imports><category></category><attributes><package>WikiSpamManagement</package></attributes></class><comment><class-id>WikiWorks.LockedPageHolder</class-id><body>LockedPageHolder is a simple listing of "locked" pages.  It checks a CR delimited file named 'lockedPages.txt' hourly for pages that might be locked.  Usage:LockedPageHolder default isLocked: aWikiPage.Instance Variables:	lockedPages	&lt;Collection&gt;	collection of page titles	process	&lt;Process&gt;	Update Process</body></comment><methods><class-id>WikiWorks.BadTextHolder</class-id> <category>comparing</category><body package="WikiSpamManagement">hasBadText: someText	"if shouldCheck is false, it means we are allowing no updates at this time"	self shouldCheck ifFalse: [^true].	(someText isNil or: [someText isEmpty])		ifTrue: [^true].	^(self badList detect: [:each | self tryToMatch: each against: someText] ifNone: [nil]) notNil</body><body package="WikiSpamManagement">isFromBadIP: someText	^(self badIPList detect: [:each | each match: someText] ifNone: [nil]) notNil</body><body package="WikiSpamManagement">tryToMatch: badText against: someText	"answer true if there's a match"	| test |	test := '*', badText, '*'.	^test match: someText</body></methods><methods><class-id>WikiWorks.BadTextHolder</class-id> <category>accessing</category><body package="WikiSpamManagement">badIPList	^badIPList ifNil: [badIPList := OrderedCollection new]</body><body package="WikiSpamManagement">badIPList: anObject	badIPList := anObject</body><body package="WikiSpamManagement">badList	^badList isNil		ifTrue: [badList := OrderedCollection new]		ifFalse: [badList]</body><body package="WikiSpamManagement">badList: anObject	badList := anObject</body><body package="WikiSpamManagement">file	^file isNil		ifTrue: [file := 'badText.txt']		ifFalse: [file]</body><body package="WikiSpamManagement">file: anObject	file := anObject</body><body package="WikiSpamManagement">shouldCheck	^shouldCheck</body><body package="WikiSpamManagement">shouldCheck: anObject	shouldCheck := anObject</body><body package="WikiSpamManagement">updateProcess	^updateProcess</body><body package="WikiSpamManagement">updateProcess: anObject	updateProcess := anObject</body></methods><methods><class-id>WikiWorks.BadTextHolder</class-id> <category>file-io</category><body package="WikiSpamManagement">getBadIPList	| filename stream |	filename := 'badIP.txt' asFilename.	badIPList := OrderedCollection new.	filename exists		ifFalse: [^OrderedCollection new].	stream := filename readStream.	[[stream atEnd]		whileFalse: [| line |			line := stream nextLine.			self badIPList add: line]]	ensure: [stream notNil ifTrue: [stream close]].</body><body package="WikiSpamManagement">getBadTextList	| filename stream |	filename := self file asFilename.	badList := OrderedCollection new.	filename exists		ifFalse: [^OrderedCollection new].	stream := filename readStream.	[[stream atEnd]		whileFalse: [| line |			line := stream nextLine.			self badList add: line]]	ensure: [stream notNil ifTrue: [stream close]].</body></methods><methods><class-id>WikiWorks.BadTextHolder</class-id> <category>processing</category><body package="WikiSpamManagement">startUpdateProcess	| block |	block := 			[[true] whileTrue: 					[(Delay forSeconds: 3600) wait.					Transcript						show: Timestamp now printString , ' -- Getting Bad Text List...';						cr.					self getBadTextList.					self getBadIPList.					Transcript						show: Timestamp now printString , ' -- Got Bad Text List; sleeping...';						cr]].	self updateProcess: (block forkAt: Processor userBackgroundPriority)</body><body package="WikiSpamManagement">stop	updateProcess ifNotNil: [updateProcess terminate]</body></methods><methods><class-id>WikiWorks.BadTextHolder</class-id> <category>initialize-release</category><body package="WikiSpamManagement">initialize	file := 'badText.txt'.	badList := OrderedCollection new.	self getBadTextList.	self getBadIPList.	shouldCheck := true.	(self badIPList isEmpty and: [self badList isEmpty]) 		ifFalse: [self startUpdateProcess].	^self</body></methods><methods><class-id>WikiWorks.BadTextHolder class</class-id> <category>accessing</category><body package="WikiSpamManagement">current	^current isNil		ifTrue: [self new]		ifFalse: [current]</body><body package="WikiSpamManagement">current: anObject 	"BadTextHolder current stop.  BadTextHolder current: nil"	current := anObject</body></methods><methods><class-id>WikiWorks.BadTextHolder class</class-id> <category>instance creation</category><body package="WikiSpamManagement">new	current notNil		ifTrue: [current stop].	current := super new initialize.	^current</body></methods><methods><class-id>WikiWorks.LockedPageHolder</class-id> <category>accessing</category><body package="WikiSpamManagement">lockedPages	^lockedPages</body><body package="WikiSpamManagement">lockedPages: anObject	lockedPages := anObject</body><body package="WikiSpamManagement">process	^process</body><body package="WikiSpamManagement">process: anObject	process := anObject</body></methods><methods><class-id>WikiWorks.LockedPageHolder</class-id> <category>testing</category><body package="WikiSpamManagement">isLocked: aPage	^lockedPages includes: aPage title</body></methods><methods><class-id>WikiWorks.LockedPageHolder</class-id> <category>processing</category><body package="WikiSpamManagement">startUpdateProcess	| block |	block := 			[[true] whileTrue: 					[(Delay forSeconds: 3600) wait.					self updateList]].	process := block forkAt: Processor userBackgroundPriority</body><body package="WikiSpamManagement">stop	process ifNotNil: [process terminate]</body><body package="WikiSpamManagement">updateList	| pages stream |	pages := OrderedCollection new.	'lockedPages.txt' asFilename exists		ifFalse: [^self].	stream := 'lockedPages.txt' asFilename readStream.	[[stream atEnd]		whileFalse: [| next |			next := stream upTo: Character cr.			pages add: next]]	ensure: [stream notNil ifTrue: [stream close]].	lockedPages := pages.</body></methods><methods><class-id>WikiWorks.LockedPageHolder</class-id> <category>initialize-release</category><body package="WikiSpamManagement">initialize	"Initialize a newly created instance. This method must answer the receiver."	lockedPages := OrderedCollection new.	self updateList.	lockedPages isEmpty ifFalse: [self startUpdateProcess].	^self</body></methods><methods><class-id>WikiWorks.LockedPageHolder class</class-id> <category>accessing</category><body package="WikiSpamManagement">default	^default isNil		ifTrue: [default := self new]		ifFalse: [default]</body><body package="WikiSpamManagement">default: anObject 	"LockedPageHolder default stop.  LockedPageHolder default: nil"	default := anObject</body></methods><methods><class-id>WikiWorks.LockedPageHolder class</class-id> <category>instance creation</category><body package="WikiSpamManagement">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>WikiWorks.LockedPageHolder class</class-id> <category>testing</category><body package="WikiSpamManagement">isLocked: aPage	^self default isLocked: aPage</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class></st-source>