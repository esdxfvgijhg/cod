<?xml version="1.0"?><st-source><!-- Name: WikiAdminComment: System for online admin pages for a wikiDbIdentifier: psql_public_cst_2007DbTrace: 92367DbUsername: niallrDbVersion: 7.10.1 - 2DevelopmentPrerequisites: #(#(#any 'VRFileReading' '') #(#any 'WikiWorks' '') #(#any 'ImageConfig' ''))PackageName: WikiAdminParcel: #('WikiAdmin')ParcelName: WikiAdminPrerequisiteParcels: #(#('VRFileReading' '') #('WikiWorks' '') #('ImageConfig' ''))PrintStringCache: (7.10.1 - 2,niallr)Version: 7.10.1 - 2Date: 4:58:59 PM January 26, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (aug15.1) of August 7, 2015 on January 26, 2016 at 4:58:59 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>WikiUserNotification</name><environment>WikiWorks</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value explanation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WikiUser-UI</category><attributes><package>WikiAdmin</package></attributes></class><class><name>WikiUserPasswordMaintenance</name><environment>WikiWorks</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>password2 password1 userForm allUsers matchingWiki </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>WikiAdmin</package></attributes></class><class><name>WikiStartup</name><environment>WikiWorks</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>serverName port wikiSpecs userSpecs shouldReplaceFiles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WikiAdmin</category><attributes><package>WikiAdmin</package></attributes></class><class><name>WikiUserForm</name><environment>WikiWorks</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model password user wikiName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WikiUser-UI</category><attributes><package>WikiAdmin</package></attributes></class><comment><class-id>WikiWorks.WikiUserForm</class-id><body>This is the auto-generated comment for class #WikiUserForm.  This comment should be edited for accuracyInstance Variables: password		&lt;a ByteString&gt;user		&lt;a ByteString&gt;wikiName		&lt;a ByteString&gt;</body></comment><class><name>WikiUserPasswordTransformer</name><environment>WikiWorks</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>plain cipher </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>WikiAdmin</package></attributes></class><class><name>WikiPort</name><environment>WikiWorks</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>port serverName shouldReplaceFiles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WikiAdmin</category><attributes><package>WikiAdmin</package></attributes></class><class><name>WikiAdminTool</name><environment>WikiWorks</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>availableWikis wikiUsers wikiEditor allUsers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>WikiAdmin</package></attributes></class><class><name>WikiUser</name><environment>WikiWorks</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>user password wikiName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WikiAdmin</category><attributes><package>WikiAdmin</package></attributes></class><comment><class-id>WikiWorks.WikiUser</class-id><body>This is the auto-generated comment for class #WikiUser.  This comment should be edited for accuracyInstance Variables: password		&lt;Undefined&gt;user		&lt;Undefined&gt;wikiName		&lt;Undefined&gt;</body></comment><class><name>WikiPasswordAdmin</name><environment>WikiWorks</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>passwordFile </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>WikiAdmin</category><attributes><package>WikiAdmin</package></attributes></class><class><name>WikiItem</name><environment>WikiWorks</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>wiki wikiName rssFilePath link description copyright maintainer language daysInterval replaceUploadedFiles </inst-vars><class-inst-vars></class-inst-vars><imports>			XML.*			</imports><category>WikiAdmin</category><attributes><package>WikiAdmin</package></attributes></class><shared-variable><name>WriteSem</name><environment>WikiWorks.WikiUser</environment><private>false</private><constant>false</constant><category>protection</category><attributes><package>WikiAdmin</package></attributes></shared-variable><methods><class-id>WikiWorks.WikiUserNotification</class-id> <category>accessing</category><body package="WikiAdmin">explanation	^explanation</body><body package="WikiAdmin">explanation: aValue	explanation := aValue</body><body package="WikiAdmin">value	^value</body><body package="WikiAdmin">value: aValue	value := aValue</body></methods><methods><class-id>WikiWorks.WikiUserNotification</class-id> <category>booleans</category><body package="WikiAdmin">ifFalse: aBlock	^self value ifFalse: [aBlock value]</body><body package="WikiAdmin">ifFalse: falseBlock ifTrue: trueBlock	^self value 		ifTrue: [trueBlock value]		ifFalse: [falseBlock value]</body><body package="WikiAdmin">ifTrue: aBlock	^self value ifTrue: [aBlock value]</body><body package="WikiAdmin">ifTrue: trueBlock ifFalse: falseBlock	^self value 		ifTrue: [trueBlock value]		ifFalse: [falseBlock value]</body></methods><methods><class-id>WikiWorks.WikiUserNotification</class-id> <category>displaying</category><body package="WikiAdmin">displayString	^self explanation</body><body package="WikiAdmin">printOn: stream	stream nextPutAll: self displayString</body></methods><methods><class-id>WikiWorks.WikiUserPasswordMaintenance</class-id> <category>aspects</category><body package="WikiAdmin">password1	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^password1 isNil		ifTrue:			[password1 := String new asValue]		ifFalse:			[password1]</body><body package="WikiAdmin">password2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^password2 isNil		ifTrue:			[password2 := String new asValue]		ifFalse:			[password2]</body></methods><methods><class-id>WikiWorks.WikiUserPasswordMaintenance</class-id> <category>convenience</category><body package="WikiAdmin">beInvisible: aSymbol 	"invisible the widget"	(self component: aSymbol) beInvisible</body><body package="WikiAdmin">beVisible: aSymbol 	"invisible the widget"	(self component: aSymbol) beVisible</body><body package="WikiAdmin">component: aSymbol 	"return the wrapper"	^self builder componentAt: aSymbol</body><body package="WikiAdmin">disable: aSymbol 	"disable the widget"	(self component: aSymbol) disable</body><body package="WikiAdmin">enable: aSymbol 	"enable the widget"	(self component: aSymbol) enable</body><body package="WikiAdmin">label: aSymbol withString: aString 	"label a widget - assume all bold - if multiline, auto expands"	| widget text |	text := aString asText allBold.	widget := self widget: aSymbol.	widget label: text</body></methods><methods><class-id>WikiWorks.WikiUserPasswordMaintenance</class-id> <category>accessing</category><body package="WikiAdmin">allUsers	^allUsers</body><body package="WikiAdmin">allUsers: aValue	allUsers := aValue</body><body package="WikiAdmin">matchingWiki	^matchingWiki</body><body package="WikiAdmin">matchingWiki: aValue	matchingWiki := aValue</body><body package="WikiAdmin">userForm	userForm isNil		ifTrue: [userForm := WikiUserForm new].	^userForm</body><body package="WikiAdmin">userForm: aValue	userForm := aValue</body></methods><methods><class-id>WikiWorks.WikiUserPasswordMaintenance</class-id> <category>private</category><body package="WikiAdmin">validateNewPassword	| initial |	initial := self password1 value isEmpty not and: [self password2 value isEmpty not].	^initial and: [self password1 value = self password2 value]</body><body package="WikiAdmin">writeOutChangedPasswordFile	| user file userFile users |	userFile := DictionaryFileReader getConfigFileFromBase: 'users.ini'.	users := self allUsers.	user := allUsers detect: [:each | each user = self userForm user value].	user password: self password1 value.	user password: user encrypt.	WikiUser writeSem critical: [		file := userFile asFilename writeStream.		[users do: [:each | 			file nextPutAll: each user.			file nextPut: $,.				file nextPutAll: each password.			file nextPut: $,.			file nextPutAll: each wikiName.				file cr]] ensure: [file close]]</body></methods><methods><class-id>WikiWorks.WikiUserPasswordMaintenance</class-id> <category>actions</category><body package="WikiAdmin">changePassword	"This stub method was generated by UIDefiner"	self validateNewPassword		ifFalse: [self label: #errorLabel withString: 'Passwords do not match!'.				^self].	self matchingWiki removeUser: self userForm user value.	self matchingWiki addUser: self userForm user value password: self password1 value.	self writeOutChangedPasswordFile.	self disable: #changePassword</body><body package="WikiAdmin">validate	"This stub method was generated by UIDefiner"	| wikis theWiki |	self matchingWiki: nil.	wikis := FlatFileWiki allInstances.	theWiki := wikis detect: [:each | each name = self userForm wikiName value] ifNone: [nil].	theWiki isNil		ifTrue: [self label: #errorLabel withString: 'No Such Wiki!'.				self beVisible: #errorLabel.				^self].	(theWiki authorize: self userForm user value password: self userForm password value)		ifFalse: [self label: #errorLabel: withString: 'Invalid username or password!'.				self beVisible: #errorLabel.				^self].	self beInvisible: #errorLabel.	self enable: #changePassword.	self matchingWiki: theWiki</body></methods><methods><class-id>WikiWorks.WikiUserPasswordMaintenance</class-id> <category>initialize-release</category><body package="WikiAdmin">initialize	| userFile |	super initialize.	userFile := DictionaryFileReader getConfigFileFromBase: 'users.ini'.	self allUsers: (VRFileReader read: userFile into: WikiUser) modelCollection.</body></methods><methods><class-id>WikiWorks.WikiUserPasswordMaintenance class</class-id> <category>instance creation</category><body package="WikiAdmin">value: aBoolean reason: aReason	| inst |	inst := self new.	inst value: aBoolean.	inst explanation: aReason.	^inst</body></methods><methods><class-id>WikiWorks.WikiStartup</class-id> <category>accessing</category><body package="WikiAdmin">port	^port</body><body package="WikiAdmin">port: aValue	port := aValue</body><body package="WikiAdmin">serverName	^serverName</body><body package="WikiAdmin">serverName: aValue	serverName := aValue</body><body package="WikiAdmin">shouldReplaceFiles	"^a Boolean 	Should files uploaded to a wiki be replaced? This value is propogated to all 	wikis when they are started."	^shouldReplaceFiles isNil		ifTrue: [shouldReplaceFiles := false]		ifFalse: [shouldReplaceFiles]</body><body package="WikiAdmin">shouldReplaceFiles: anObject	shouldReplaceFiles := anObject</body><body package="WikiAdmin">userSpecs	"^an OrderedCollectionI return my collection of user descriptions.  Each one defines the user for a particular wiki."	^userSpecs</body><body package="WikiAdmin">userSpecs: anOrderedCollection 	userSpecs := anOrderedCollection</body><body package="WikiAdmin">wikiSpecs	"^an OrderedCollectionI return my collection of wiki specifications.  Each one gives the details of a wiki that I will start."	^wikiSpecs</body><body package="WikiAdmin">wikiSpecs: anOrderedCollection 	"c.f. &gt;&gt;wikiSpecs"	wikiSpecs := anOrderedCollection.	^self</body></methods><methods><class-id>WikiWorks.WikiStartup</class-id> <category>private</category><body package="WikiAdmin">addWikiUsers	| wikis |	wikis := self activeWikis.	self userSpecs do: 			[:aUserSpec | 			| targetWiki |			targetWiki := wikis detect: [:aWiki | aWiki name = aUserSpec wikiName]						ifNone: [nil].			targetWiki isNil 				ifFalse: 					[| realPass |					realPass := aUserSpec decrypt.					targetWiki addUser: aUserSpec user password: realPass]]</body><body package="WikiAdmin">readInConfigInfo	| wikiFile userFile portFile wikiServerInfo |	wikiFile := DictionaryFileReader getConfigFileFromBase: 'localWikis.ini'.	userFile := DictionaryFileReader getConfigFileFromBase: 'users.ini'.	portFile := DictionaryFileReader getConfigFileFromBase: 'wikiPort.ini'.	self wikiSpecs: (VRFileReader read: wikiFile into: WikiItem) modelCollection.	userFile asFilename exists		ifTrue: [self userSpecs: (VRFileReader read: userFile into: WikiUser) modelCollection]		ifFalse: [self userSpecs: OrderedCollection new].	wikiServerInfo := (VRFileReader read: portFile into: WikiPort) modelCollection first.	self port: wikiServerInfo port.	self shouldReplaceFiles: wikiServerInfo shouldReplaceFiles.	self serverName: wikiServerInfo serverName</body><body package="WikiAdmin">setupRSSListeners: listeners	| allWikis |	allWikis := FlatFileWiki allInstances.	listeners do: [:each |		| wiki |		wiki := allWikis detect: [:eachWiki | eachWiki name = each wikiName] ifNone: [nil].		(wiki notNil and: [each rssFilePath notNil])			ifTrue: [wiki addDependent: each.					each addedPage: nil from: wiki]].</body><body package="WikiAdmin">startWikis	| socketAddress listeners |	listeners := OrderedCollection new.	Transcript show: 'setting up wikis'; cr.	self wikiSpecs		do: 			[:aWikiSpec | 			listeners add: aWikiSpec.			self requestHandler addComponent: (FlatFileWiki directory: aWikiSpec wiki).			Transcript show: 'set up: ' , aWikiSpec printString; cr].	Transcript show: 'Starting the Server'; cr.	socketAddress := HttpServer defaultAddressClass hostName: self serverName port: self port.	HttpServer startOn: socketAddress.	Transcript show: 'Starting RSS listeners'; cr.	self setupRSSListeners: listeners.	self activeWikis do: [:aWiki | aWiki replaceUploadedFiles: self shouldReplaceFiles].	Transcript show: 'Done with Wiki Startup'; cr</body></methods><methods><class-id>WikiWorks.WikiStartup</class-id> <category>services</category><body package="WikiAdmin">activeWikis	"^an OrderedCOllectionI return the wikis (FlatFileWiki s only) that are running in the context of my request handler."	| componentDictionary |	componentDictionary := self requestHandler components.	^componentDictionary values 		select: [:aComponent | aComponent class == FlatFileWiki]</body><body package="WikiAdmin">requestHandler	^HttpServer current handler</body></methods><methods><class-id>WikiWorks.WikiStartup</class-id> <category>initialize-release</category><body package="WikiAdmin">initialize	| scriptFilename |	scriptFilename := Filename named: 'config/startUpScript.st'.	scriptFilename exists 		ifTrue: [self startUpWithScriptIn: scriptFilename]		ifFalse: [self startUpUsingIniFiles].	^self</body><body package="WikiAdmin">startUpUsingIniFiles	Transcript		show: 'Reading config files';		cr.	self readInConfigInfo.	Transcript		show: 'Starting Wikis';		cr.	self startWikis.	Transcript		show: 'Adding Users';		cr.	self addWikiUsers</body></methods><methods><class-id>WikiWorks.WikiStartup</class-id> <category>script-startup</category><body package="WikiAdmin">startUpWithScriptIn: aFilename 	| sourceStream |		[sourceStream := aFilename readStream.	sourceStream fileIn] 			ensure: [sourceStream close].	^self</body></methods><methods><class-id>WikiWorks.WikiStartup class</class-id> <category>instance creation</category><body package="WikiAdmin">new	^super new initialize</body></methods><methods><class-id>WikiWorks.WikiStartup class</class-id> <category>api</category><body package="WikiAdmin">killWikis	"stop server, flush all from memory"	HttpServer stop.	HttpServer flushAll.</body></methods><methods><class-id>WikiWorks.WikiUserForm</class-id> <category>api</category><body package="WikiAdmin">actuallyAddUser: aWiki	self model value actuallyAddUser: aWiki</body><body package="WikiAdmin">actuallyAddWiki	^self model value actuallyAddWiki.</body><body package="WikiAdmin">getWikiName	^self model value wikiName</body><body package="WikiAdmin">newModel	self model value: self model value class new</body><body package="WikiAdmin">validateForUserCreation	^self model value validateForUserCreation</body></methods><methods><class-id>WikiWorks.WikiUserForm</class-id> <category>accessing</category><body package="WikiAdmin">model	^model</body><body package="WikiAdmin">model: aValue	model := aValue</body><body package="WikiAdmin">password	^password</body><body package="WikiAdmin">user	^user</body><body package="WikiAdmin">wikiName	^wikiName</body></methods><methods><class-id>WikiWorks.WikiUserForm</class-id> <category>initialize-release</category><body package="WikiAdmin">initialize	"UIDefiner defined this method.	Do NOT modify this method; place custom code in &lt;initializeApplication&gt;"	super initialize.	self model: WikiUser new asValue.	self initializeAspects.	self initializeApplication.</body><body package="WikiAdmin">initializeApplication	"UIDefiner defined this method.	UIDefiner will not recreate this method, so all custom initialization code should be placed here."</body><body package="WikiAdmin">initializeAspects	"Preset all aspects.  UIDefiner will overwrite this method"		password := ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #password).		user := ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #user).		wikiName := ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #wikiName).</body></methods><methods><class-id>WikiWorks.WikiUserForm class</class-id> <category>accessing</category><body package="WikiAdmin">uiDomainModelName	"UIDefiner defined this method.	This method is used internally by UIDefiner"	^WikiUser</body></methods><methods><class-id>WikiWorks.WikiUserPasswordTransformer</class-id> <category>private</category><body package="WikiAdmin">writeOut: users to: file	| stream |	stream := file asFilename writeStream.	users do: [:each |		each writeTo: stream].	stream close</body></methods><methods><class-id>WikiWorks.WikiUserPasswordTransformer</class-id> <category>initialize-release</category><body package="WikiAdmin">on: aFile to: cipFile	| users |	users := (VRFileReader read: aFile into: WikiUser) modelCollection.	users do: [:each | | newPass |		newPass := each encrypt.		each password: newPass].	self writeOut: users to: cipFile</body></methods><methods><class-id>WikiWorks.WikiUserPasswordTransformer class</class-id> <category>instance creation</category><body package="WikiAdmin">on: wikiUserFile	^self new on: wikiUserFile to: (wikiUserFile, '.cip')</body><body package="WikiAdmin">on: wikiUserFile to: transformedFile	^self new on: wikiUserFile to: transformedFile</body></methods><methods><class-id>WikiWorks.WikiPort</class-id> <category>accessing</category><body package="WikiAdmin">port	^port</body><body package="WikiAdmin">port: aValue	port := aValue</body><body package="WikiAdmin">serverName	^serverName</body><body package="WikiAdmin">serverName: aValue	serverName := aValue</body><body package="WikiAdmin">shouldReplaceFiles	^shouldReplaceFiles</body><body package="WikiAdmin">shouldReplaceFiles: anObject	shouldReplaceFiles := anObject</body></methods><methods><class-id>WikiWorks.WikiPort class</class-id> <category>typeDef</category><body package="WikiAdmin">typeDef	^#(#Integer #String #Boolean)</body></methods><methods><class-id>WikiWorks.WikiAdminTool</class-id> <category>accessing</category><body package="WikiAdmin">allUsers	^allUsers</body><body package="WikiAdmin">allUsers: aValue	allUsers := aValue</body><body package="WikiAdmin">wikiEditor	wikiEditor isNil		ifTrue: [wikiEditor := WikiUserForm new].	^wikiEditor</body><body package="WikiAdmin">wikiEditor: aValue	wikiEditor := aValue</body></methods><methods><class-id>WikiWorks.WikiAdminTool</class-id> <category>private</category><body package="WikiAdmin">actuallyAddUser: aWiki	self wikiEditor actuallyAddUser: aWiki</body><body package="WikiAdmin">actuallyAddWiki	| item |	item := self wikiEditor actuallyAddWiki.	self availableWikis list add: item</body><body package="WikiAdmin">fillUsers	| current |	current := self availableWikis selection.	self wikiUsers list: (self allUsers select: [:each | each wikiName = current wikiName]).</body><body package="WikiAdmin">getAllUsers	| userFile |	userFile := DictionaryFileReader getConfigFileFromBase: 'users.ini'.	self allUsers: (VRFileReader read: userFile into: WikiUser) modelCollection asList.</body><body package="WikiAdmin">getAvailableWikis	| wikiFile |	wikiFile := DictionaryFileReader getConfigFileFromBase: 'localWikis.ini'.	self availableWikis list: (VRFileReader read: wikiFile into: WikiItem) modelCollection asList.</body><body package="WikiAdmin">validateForUserCreation	| sel |	sel := self availableWikis selection.	sel isNil ifTrue: [^false].	^self wikiEditor validateForUserCreation</body><body package="WikiAdmin">validateForWikiCreation	| wikis |	wikis := FlatFileWiki allInstances collect: [:each | each name].	^(wikis includes: self wikiEditor wikiName value) not</body></methods><methods><class-id>WikiWorks.WikiAdminTool</class-id> <category>aspects</category><body package="WikiAdmin">availableWikis	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^availableWikis isNil		ifTrue:			[availableWikis := SelectionInList new]		ifFalse:			[availableWikis]</body><body package="WikiAdmin">wikiUsers	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^wikiUsers isNil		ifTrue:			[wikiUsers := SelectionInList new]		ifFalse:			[wikiUsers]</body></methods><methods><class-id>WikiWorks.WikiAdminTool</class-id> <category>actions</category><body package="WikiAdmin">addWikiUser	"This stub method was generated by UIDefiner"	self validateForUserCreation		ifFalse: [^self].	self actuallyAddUser: self wikiEditor model value</body><body package="WikiAdmin">clearForm	self wikiEditor newModel</body><body package="WikiAdmin">createNewWiki	"This stub method was generated by UIDefiner"	self validateForWikiCreation		ifFalse: [^self].	self actuallyAddWiki.</body></methods><methods><class-id>WikiWorks.WikiAdminTool</class-id> <category>events</category><body package="WikiAdmin">userSelected	| sel | 	sel := self wikiUsers selection.	sel isNil		ifTrue: [self wikiEditor newModel.				self wikiEditor wikiName value: self availableWikis selection wikiName]		ifFalse: [self wikiEditor model value: sel]</body><body package="WikiAdmin">wikiSelected	| sel |	sel := self availableWikis selection.	sel isNil		ifTrue: [self wikiEditor newModel]		ifFalse: [self fillUsers.				self wikiEditor wikiName value: self availableWikis selection wikiName]</body></methods><methods><class-id>WikiWorks.WikiAdminTool</class-id> <category>initialize-release</category><body package="WikiAdmin">initialize	super initialize.	self getAvailableWikis.	self getAllUsers</body></methods><methods><class-id>WikiWorks.WikiUser</class-id> <category>initialize-release</category><body package="WikiAdmin">initialize	"This is an auto-generated initialize method.  It should be updated"	self password: ''.	self user: ''.	self wikiName: ''.</body></methods><methods><class-id>WikiWorks.WikiUser</class-id> <category>accessing</category><body package="WikiAdmin">password	^password</body><body package="WikiAdmin">password: aValue	password := aValue.	self changed: #password</body><body package="WikiAdmin">user	^user</body><body package="WikiAdmin">user: aValue	user := aValue.	self changed: #user</body><body package="WikiAdmin">wikiName	^wikiName</body><body package="WikiAdmin">wikiName: aValue	wikiName := aValue.	self changed: #wikiName</body></methods><methods><class-id>WikiWorks.WikiUser</class-id> <category>api</category><body package="WikiAdmin">actuallyAddUser: wiki	| match |	match := FlatFileWiki allInstances detect: [:each | each name = wiki wikiName].	match addUser: self user password: self password.	self writeOutPasswordFile</body><body package="WikiAdmin">actuallyAddWiki	| wiki |	self wikiName asFilename makeDirectory.	wiki := FlatFileWiki directory: self wikiName.	wiki name: self wikiName.	wiki rootPageTitle: 'Home Page'.	wiki formattingPageTitle: 'Wiki Syntax'.	HttpServer current handler addComponent: wiki.	HttpServer current isRunning		ifFalse: [HttpServer current startOn: 8080].	^self writeWikiInfo</body><body package="WikiAdmin">validateForUserCreation	^self user isEmpty not and: [self password isEmpty not]</body></methods><methods><class-id>WikiWorks.WikiUser</class-id> <category>private</category><body package="WikiAdmin">decrypt	"decrypt the password.  (WARNING - it's not really encrypted at all)"	^self class decodeString: self password</body><body package="WikiAdmin">encrypt	"encrypt the password (WARNING - it's not really encrypted at all)"	^self class encodeString: self password</body><body package="WikiAdmin">validate: aPassword	| pass |	pass := self decrypt.	^aPassword = pass</body><body package="WikiAdmin">writeOutPasswordFile	"write the currentWiki password file"	| newPass |	newPass := self encrypt.	self password: newPass.	WriteSem critical: [WikiPasswordAdmin write: self]</body><body package="WikiAdmin">writeTo: stream	stream nextPutAll: self user.	stream nextPut: $,.	stream nextPutAll: self password.	stream nextPut: $,.	stream nextPutAll: self wikiName.	stream cr</body><body package="WikiAdmin">writeWikiInfo	| existing file newItem wikiFile | 	wikiFile := DictionaryFileReader getConfigFileFromBase: 'localWikis.ini'.	existing := (VRFileReader read: wikiFile into: WikiItem) modelCollection.	newItem := WikiItem from: self wikiName.	existing add: newItem.	file := wikiFile asFilename writeStream.	existing do: [:each |		file nextPutAll: each wiki.		file nextPut: $,.		file nextPutAll: each wikiName.		file nextPut: Character cr].	file close.	^newItem</body></methods><methods><class-id>WikiWorks.WikiUser</class-id> <category>displaying</category><body package="WikiAdmin">displayString	^self user</body><body package="WikiAdmin">printOn: stream	stream nextPutAll: self displayString</body></methods><methods><class-id>WikiWorks.WikiUser class</class-id> <category>instance creation</category><body package="WikiAdmin">new	^super new initialize</body></methods><methods><class-id>WikiWorks.WikiUser class</class-id> <category>accessing</category><body package="WikiAdmin">writeSem	^WriteSem</body></methods><methods><class-id>WikiWorks.WikiUser class</class-id> <category>class initialization</category><body package="WikiAdmin">initialize	"WikiUser initialize"	WriteSem := Semaphore forMutualExclusion</body></methods><methods><class-id>WikiWorks.WikiUser class</class-id> <category>password-encoding</category><body package="WikiAdmin">decodeString: anEncodedString 	"^aStringI decode anEncodedString un-doing a crude obfuscation encoding."	| clearStream |	clearStream := WriteStream on: String new.	anEncodedString do: 			[:each | 			| newChar |			newChar := (each asInteger - 3) asCharacter.			clearStream nextPut: newChar].	^clearStream contents</body><body package="WikiAdmin">encodeString: aClearString 	"^aStringI encode aClearString using a crude obfuscation encoding."	| encodedStream |	encodedStream := WriteStream on: String new.	aClearString do: 			[:each | 			| newChar |			newChar := (each asInteger - 3) asCharacter.			encodedStream nextPut: newChar].	^encodedStream contents</body></methods><methods><class-id>WikiWorks.WikiPasswordAdmin</class-id> <category>accessing</category><body package="WikiAdmin">passwordFile	^passwordFile</body><body package="WikiAdmin">passwordFile: aValue	passwordFile := aValue</body></methods><methods><class-id>WikiWorks.WikiPasswordAdmin</class-id> <category>api</category><body package="WikiAdmin">write: newUser	| existing out  |	existing := (VRFileReader read: self passwordFile into: WikiUser) modelCollection.	existing add: newUser.	out := self passwordFile asFilename writeStream.	existing do: [:each | each writeTo: out].	out close</body></methods><methods><class-id>WikiWorks.WikiPasswordAdmin</class-id> <category>initialize-release</category><body package="WikiAdmin">initialize	self passwordFile: (DictionaryFileReader getConfigFileFromBase: 'users.ini')</body></methods><methods><class-id>WikiWorks.WikiPasswordAdmin class</class-id> <category>api</category><body package="WikiAdmin">write: newUser	self new write: newUser</body></methods><methods><class-id>WikiWorks.WikiPasswordAdmin class</class-id> <category>instance creation</category><body package="WikiAdmin">new	^super new initialize</body></methods><methods><class-id>WikiWorks.WikiItem</class-id> <category>accessing</category><body package="WikiAdmin">copyright	^copyright</body><body package="WikiAdmin">copyright: aValue	copyright := aValue</body><body package="WikiAdmin">daysInterval"^an IntegerSomething to do with RSS, I think.This method was clearly written by a real programmer who thinks that accessor commenst are a waste of time - HOW ABOUT EXPLAINING WHAT THE VALUE IS for goodness sake?  When I work it out, I'll update this comments so that others are not forced to waste as much time.Ah, this seems to be a display cutoff value in days.  So wiki pages changed more than &lt;daysInterval&gt; days ago are *not* shown in the RSS Feed."	^daysInterval</body><body package="WikiAdmin">daysInterval: aValue	daysInterval := aValue</body><body package="WikiAdmin">description	^description</body><body package="WikiAdmin">description: aValue	description := aValue</body><body package="WikiAdmin">language	^language</body><body package="WikiAdmin">language: aValue	language := aValue</body><body package="WikiAdmin">link	^link</body><body package="WikiAdmin">link: aValue	link := aValue</body><body package="WikiAdmin">maintainer	^maintainer</body><body package="WikiAdmin">maintainer: aValue	maintainer := aValue</body><body package="WikiAdmin">replaceUploadedFiles	^replaceUploadedFiles</body><body package="WikiAdmin">replaceUploadedFiles: anObject	replaceUploadedFiles := anObject</body><body package="WikiAdmin">rssFilePath	^rssFilePath</body><body package="WikiAdmin">rssFilePath: aValue	rssFilePath := aValue</body><body package="WikiAdmin">wiki	^wiki</body><body package="WikiAdmin">wiki: aValue	wiki := aValue</body><body package="WikiAdmin">wikiName	^wikiName</body><body package="WikiAdmin">wikiName: aValue	wikiName := aValue</body></methods><methods><class-id>WikiWorks.WikiItem</class-id> <category>displaying</category><body package="WikiAdmin">displayString	^self wikiName</body><body package="WikiAdmin">printOn: stream	stream nextPutAll: self displayString</body></methods><methods><class-id>WikiWorks.WikiItem</class-id> <category>events</category><body package="WikiAdmin">addedPage: aPage from: aWiki 	"drop new version of RSS file on this change.Total lack of useful comments - again.This method seems to be called whenever a page is added to a wiki by dint of a dependency.  All the pages in the wiki are scanned to see if they are within the cutoff defined by &gt;&gt;daysInterval.  Those younger than the cutoff appear on the RSS page.  The work is forked (though at the current priority?!) presumably to allow the response to go back to the user that caused the page change. "	| secondsNow maxDiff sufficientlyRecentPages |		[secondsNow := Timestamp now asSeconds.	maxDiff := 60 * 60 * 24 * self daysInterval asNumber.	sufficientlyRecentPages := aWiki pages select: 					[:aWikiPage | 					| ageInSeconds |					ageInSeconds := secondsNow - aWikiPage timestamp asSeconds.					ageInSeconds &lt;= maxDiff].	self exportRSSFor: sufficientlyRecentPages] 			fork</body><body package="WikiAdmin">update: anAspect with: aValue from: aModel	[self perform: anAspect withArguments: (Array with: aValue with: aModel)]		on: MessageNotUnderstood		do: [:ex | ex return].</body></methods><methods><class-id>WikiWorks.WikiItem</class-id> <category>rss</category><body package="WikiAdmin">addSimpleTag: tag	| element |	element := Element tag: tag.	^element</body><body package="WikiAdmin">addSimpleTag: tag to: doc	| element |	element := self addSimpleTag: tag.	doc root addNode: element</body><body package="WikiAdmin">addTag: tag withText: text	| xmlText element |	xmlText := Text text: text.	element := Element tag: tag.	element addNode: xmlText.	^element</body><body package="WikiAdmin">addTag: tag withText: text to: doc	| element |	element := self addTag: tag withText: text.	doc root addNode: element</body><body package="WikiAdmin">addTags: tagArray withTextItems: textArray	| coll |	coll := OrderedCollection new.	1 to: tagArray size do: [:i |		coll add: (self addTag: (tagArray at: i) withText: (textArray at: i))].	^coll</body><body package="WikiAdmin">basicTags	^self 		addTags: #('title' 'link' 'description' 'language' 'copyright' 'webmaster')		withTextItems: self getCollectionOfBasicRSSItems.</body><body package="WikiAdmin">basicXMLDoc	| doc attrs |	doc := Document new.	attrs := Array with: (Attribute name: 'version' value: self rssVersion).	doc  addNode: (Element tag: 'rss' attributes: attrs elements: nil).	^doc</body><body package="WikiAdmin">dropRSSFileFrom: xml	| file  |	file := self rssFilePath asFilename writeStream.	[file nextPutAll: xml] ensure: [file notNil ifTrue: [file close]].</body><body package="WikiAdmin">exportRSSFor: pages	| doc basicTags |	doc := self basicXMLDoc.	basicTags := self basicTags.	pages asOrderedCollection reverseDo: [:each |		each addSelfInto: basicTags using: self].	doc root addNode: (Element tag: 'channel' elements: basicTags).	self dropRSSFileFrom: (self xmlContentsFrom: doc)</body><body package="WikiAdmin">getCollectionOfBasicRSSItems	| coll |	coll := OrderedCollection new.	coll add: self wikiName.	coll add: self link.	coll add: self description.	coll add: self language.	coll add: self copyright.	coll add: self maintainer.	^coll</body><body package="WikiAdmin">putXMLHeaderOutOn: stream	stream nextPutAll: '&lt;?xml version=''1.0'' encoding=''UTF-8'' ?&gt;'; cr.</body><body package="WikiAdmin">rssVersion	^0.92 printString</body><body package="WikiAdmin">xmlContentsFrom: doc	| stream writer |	stream := WriteStream on: (String new: 10000).	self putXMLHeaderOutOn: stream.	writer := SAXWriter  new output: stream.	doc saxDo: writer.	^stream contents</body></methods><methods><class-id>WikiWorks.WikiItem class</class-id> <category>instance creation</category><body package="WikiAdmin">from: aWiki	| inst |	inst := self new.	inst wiki: aWiki.	inst wikiName: aWiki.	^inst</body></methods><methods><class-id>WikiWorks.WikiItem class</class-id> <category>utility</category><body package="WikiAdmin">typeDef	^#(#String #String )</body></methods><methods><class-id>WikiWorks.NetworkRequestHandler</class-id> <category>authorization</category><body package="WikiAdmin">addUser: nameString encodedPassword: passwordString	| unencodedString |	nameString isNil | passwordString isNil ifTrue: [^self].	users ifNil: [users := Dictionary new].	unencodedString := WikiUser decodeString: passwordString.	users		at: (self encode: nameString password: unencodedString)		put: nameString.</body></methods><methods><class-id>WikiWorks.WikiPage</class-id> <category>rss-support</category><body package="WikiAdmin">addSelfInto: basicTags using: wikiItem	| tags master |	tags := self 		addTags: #('title' 'link')		withTextItems: (self getMyRSSItemsUsing: wikiItem).	master := Element tag: 'item' elements: tags.	basicTags add: master</body><body package="WikiAdmin">getMyRSSItemsUsing: wikiItem	^Array		with: self title		with: (wikiItem link, '/', self encodedTitle)</body></methods><methods><class-id>WikiWorks.WikiUserPasswordMaintenance class</class-id> <category>interface specs</category><body package="WikiAdmin">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Wiki Password Tool' 			#bounds: #(#{Graphics.Rectangle} 364 359 934 812 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 0 0.529167 0 0.998415 0 0.539583 ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.CompositeSpecCollection} 							#collection: #(								#(#{UI.SubCanvasSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0.0 0 0.807273 0 1.0 ) 									#name: #userForm 									#majorKey: #{WikiWorks.WikiUserForm} 									#minorKey: #windowSpec 									#clientKey: #userForm ) 								#(#{UI.ActionButtonSpec} 									#layout: #(#{Graphics.LayoutFrame} 0 0.807273 0 0.0 0 1.0 0 0.326531 ) 									#name: #validate 									#model: #validate 									#label: 'Validate' 									#defaultable: true ) ) 							#compositeSpec: 							#(#{UI.CompositeSpec} 								#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0.0 0 1.0 0 1.0 ) ) ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.Rectangle} 2 87 625 247 ) ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.0 0 0.0 ) 							#name: #errorLabel 							#flags: 16 							#colors: 							#(#{UI.LookPreferences} 								#setForegroundColor: #(#ColorValue #red ) ) 							#label: 'Label' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0 22 0 ) 							#name: #changePasswordLabel 							#label: 'Enter New Password Below' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.Rectangle} 2 267 173 310 ) ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.0 0 0.0746269 ) 							#name: #enterPassword1Label 							#label: 'Enter Password' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.0 0 0.626866 ) 							#name: #enterPassword2Label 							#label: 'Re-Enter Password' ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.486356 0 0.0 0 1.0 0 0.447761 ) 							#name: #password1 							#model: #password1 							#type: #password ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.486356 0 0.552239 0 1.0 0 1.0 ) 							#name: #password2 							#model: #password2 							#type: #password ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.Rectangle} 2 348 625 415 ) ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0.0 0 0.317817 0 1.0 ) 							#name: #changePassword 							#flags: 40 							#model: #changePassword 							#label: 'Change Password' 							#defaultable: true ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.682183 0 0.0 0 1.0 0 1.0 ) 							#name: #quit 							#model: #closeRequest 							#label: 'Quit' 							#defaultable: true ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.Rectangle} 2 428 625 472 ) ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.0722022 0 0.0 ) 							#name: #startLabel 							#label: 'Enter Your Current Wiki Password First' ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.0 0 0.596154 ) 							#name: #startLabel2 							#label: 'Then Enter it twice at the bottom to change it' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.Rectangle} 175 6 452 58 ) ) ) ) ) )</body></methods><methods><class-id>WikiWorks.WikiUserForm class</class-id> <category>interface specs</category><body package="WikiAdmin">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: ' ' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 420 432 861 593 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.0 0 0.0338983 ) 							#name: #userLabel 							#label: 'User' ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.239808 0 0.0 0 1.0 0 0.237288 ) 							#name: #user 							#model: #user 							#type: #string ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.0 0 0.415254 ) 							#name: #passwordLabel 							#label: 'Password' ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.239808 0 0.381356 0 1.0 0 0.618644 ) 							#name: #password 							#model: #password 							#type: #string ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.0 0 0.79661 ) 							#name: #wikiNameLabel 							#label: 'Wiki Name' ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.239808 0 0.762712 0 1.0 0 1.0 ) 							#name: #wikiName 							#model: #wikiName 							#type: #string ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.Rectangle} 5 10 422 128 ) ) ) ) ) )</body></methods><methods><class-id>WikiWorks.WikiAdminTool class</class-id> <category>interface specs</category><body package="WikiAdmin">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Wiki Admin Tool' 			#bounds: #(#{Graphics.Rectangle} 331 272 949 752 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.SubCanvasSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0.0 0 0.795181 0 1.0 ) 							#name: #wikiEditor 							#majorKey: #{WikiWorks.WikiUserForm} 							#minorKey: #windowSpec 							#clientKey: #wikiEditor ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.802065 0 0.0 0 1.0 0 0.28125 ) 							#name: #addWikiUser 							#model: #addWikiUser 							#label: 'Add Wiki User' 							#defaultable: true ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.Rectangle} 4 309 585 469 ) ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0 0 0 ) 							#name: #wikisLabel 							#label: 'Wikis' ) 						#(#{UI.SequenceViewSpec} 							#properties: #(#{UI.PropertyListDictionary} #submitOnSelection true #javaScriptEventHandlers #(#{UI.PropertyListDictionary} #onChange '/* The following was added when the **Submit form when selection is made** property was enabled. */this.form.submitController.value=this.name;this.form.submit();' ) ) 							#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0.0652921 0 0.407767 0 0.996564 ) 							#name: #availableWikis 							#model: #availableWikis 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #wikiSelected ) 							#useModifierKeys: true 							#selectionType: #highlight ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.817152 0 0.04811 0 1.0 0 0.202749 ) 							#name: #createNewWiki 							#model: #createNewWiki 							#label: 'Create New Wiki' 							#defaultable: true ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.817152 0 0.19244 0 1.0 0 0.347079 ) 							#name: #clearForm 							#model: #clearForm 							#label: 'Clear Form' 							#defaultable: true ) 						#(#{UI.SequenceViewSpec} 							#properties: #(#{UI.PropertyListDictionary} #submitOnSelection true #javaScriptEventHandlers #(#{UI.PropertyListDictionary} #onChange '/* The following was added when the **Submit form when selection is made** property was enabled. */this.form.submitController.value=this.name;this.form.submit();' ) ) 							#layout: #(#{Graphics.LayoutFrame} 0 0.411003 0 0.0687285 0 0.81877 0 1.0 ) 							#name: #wikiUsers 							#model: #wikiUsers 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #userSelected ) 							#useModifierKeys: true 							#selectionType: #highlight ) 						#(#{UI.LabelSpec} 							#layout: #(#{Graphics.LayoutOrigin} 254 0 0 0 ) 							#name: #wikiUsersLabel 							#label: 'Wiki Users' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.Rectangle} 4 14 622 305 ) ) ) ) ) )</body></methods><initialize><class-id>WikiWorks.WikiUser</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>NetworkRequestHandler</name><environment>WikiWorks</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent users </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Network-Framework</category><attributes><package>NetworkServer</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>WikiPage</name><environment>WikiWorks</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>author timestamp </inst-vars><class-inst-vars></class-inst-vars><imports>			XML.*			</imports><category>Web-Wiki-Model</category><attributes><package>WikiWorks</package></attributes></class></st-source>