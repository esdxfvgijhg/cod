<?xml version="1.0"?><st-source><!-- Name: FileServerComment: The file server piece of the VW WikiDbIdentifier: psql_public_cst_2007DbTrace: 92366DbUsername: niallrDbVersion: 7.10.1 - 1DevelopmentPrerequisites: #(#(#any 'HttpServer' ''))PackageName: FileServerParcel: #('FileServer')ParcelName: FileServerPrerequisiteParcels: #(#('HttpServer' ''))PrintStringCache: (7.10.1 - 1,niallr)Version: 7.10.1 - 1Date: 4:56:58 PM January 26, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (aug15.1) of August 7, 2015 on January 26, 2016 at 4:56:58 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>FileSystemResponse</name><environment>WikiWorks</environment><super>WikiWorks.WebResponse</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filename </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web-File Server</category><attributes><package>FileServer</package></attributes></class><class><name>BadRequestResponse</name><environment>WikiWorks</environment><super>WikiWorks.FileSystemResponse</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web-File Server</category><attributes><package>FileServer</package></attributes></class><class><name>FileResponse</name><environment>WikiWorks</environment><super>WikiWorks.FileSystemResponse</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fileStream </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web-File Server</category><attributes><package>FileServer</package></attributes></class><class><name>FileServerWiki</name><environment>WikiWorks</environment><super>WikiWorks.HttpRequestHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>initialDirectory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web-File Server</category><attributes><package>FileServer</package></attributes></class><class><name>DirectoryResponse</name><environment>WikiWorks</environment><super>WikiWorks.FileSystemResponse</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fileServer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web-File Server</category><attributes><package>FileServer</package></attributes></class><shared-variable><name>MimeTypes</name><environment>WikiWorks.FileResponse</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>FileServer</package></attributes></shared-variable><methods><class-id>WikiWorks.FileSystemResponse</class-id> <category>accessing</category><body package="FileServer">fileName: aFilename 	filename := aFilename</body><body package="FileServer">modifiedTime	^filename modifiedTime</body></methods><methods><class-id>WikiWorks.FileSystemResponse class</class-id> <category>instance creation</category><body package="FileServer">fileNamed: aFilename 	| response |	response := self new.	response fileName: aFilename.	^response</body></methods><methods><class-id>WikiWorks.BadRequestResponse</class-id> <category>sending</category><body package="FileServer">sendBodyOver: aStream 	aStream 		nextPutAll: '&lt;HTML &gt;&lt;HEAD &gt;&lt;TITLE &gt;Error&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY &gt;&lt;H1 &gt;Error:&lt;/H1&gt;Could not process your request&lt;/BODY&gt;&lt;/html&gt;'</body><body package="FileServer">sendModifiedTimeOver: aStream</body><body package="FileServer">sendStatusLineOver: aStream 	aStream		nextPutAll: 'HTTP/1.0 400 BAD REQUEST';		cr</body></methods><methods><class-id>WikiWorks.FileResponse</class-id> <category>accessing</category><body package="FileServer">fileStream: aStream 	fileStream := aStream</body><body package="FileServer">mimeType	^MimeTypes at: filename fullExtension		ifAbsent: ['application/octet-stream']</body></methods><methods><class-id>WikiWorks.FileResponse</class-id> <category>sending</category><body package="FileServer">sendBodyOver: aStream 		[(aStream respondsTo: #lineEndTransparent) 		ifTrue: [aStream lineEndTransparent].	fileStream lineEndTransparent.	[fileStream atEnd] 		whileFalse: [aStream nextPutAll: (fileStream nextAvailable: 2000)]] 			on: OsError			do: [:ex | ex return]</body><body package="FileServer">sendContentLengthOver: aStream 	aStream		nextPutAll: 'Content-Length: ';		print: filename fileSize;		cr</body><body package="FileServer">sendOver: aStream 	[super sendOver: aStream] ensure: [fileStream close]</body></methods><methods><class-id>WikiWorks.FileResponse class</class-id> <category>class initialization</category><body package="FileServer">initialize	"self initialize"	MimeTypes := Dictionary new.	MimeTypes		at: 'ai' put: 'application/postscript';		at: 'aif' put: 'audio/x-aiff';		at: 'aifc' put: 'audio/aiff';		at: 'aiff' put: 'audio/aiff';		at: 'au' put: 'audio/basic';		at: 'avi' put: 'video/x-msvideo';		at: 'bmp' put: 'image/bmp';		at: 'cdf' put: 'application/x-cdf';		at: 'cer' put: 'application/x-x509-ca-cert';		at: 'cha' put: 'text/plain';		at: 'crt' put: 'application/x-x509-ca-cert';		at: 'css' put: 'test/css';		at: 'dcr' put: 'application/x-director';		at: 'der' put: 'application/x-x509-ca-cert';		at: 'dir' put: 'application/x-director';		at: 'dll' put: 'application/x-msdownload';		at: 'doc' put: 'application/msword';		at: 'dot' put: 'application/msword';		at: 'dxr' put: 'application/x-director';		at: 'eml' put: 'message/rfc822';		at: 'eps' put: 'application/postscript';		at: 'exe' put: 'application/x-msdownload';		at: 'fif' put: 'application/fractals';		at: 'gif' put: 'image/gif';		at: 'gz' put: 'application/x-gzip';		at: 'hqx' put: 'application/mac-binhex40';		at: 'htm' put: 'text/html';		at: 'html' put: 'text/html';		at: 'htt' put: 'text/webviewhtml';		at: 'ins' put: 'application/x-internet-signup';		at: 'isp' put: 'application/x-internet-signup';		at: 'ivf' put: 'video/x-ivf';		at: 'jfif' put: 'image/pjpeg';		at: 'jpe' put: 'image/jpeg';		at: 'jpeg' put: 'image/jpeg';		at: 'jpg' put: 'image/jpeg';		at: 'latex' put: 'application/x-latex';		at: 'm1v' put: 'video/mpeg';		at: 'man' put: 'application/x-troff-man';		at: 'mht' put: 'message/rfc822';		at: 'mhtml' put: 'message/rfc882';		at: 'mid' put: 'audio/mid';		at: 'mov' put: 'video/quicktime';		at: 'mp2' put: 'video/mpeg';		at: 'mpa' put: 'video/mpeg';		at: 'mpe' put: 'video/mpeg';		at: 'mpeg' put: 'video/mpeg';		at: 'mpg' put: 'video/mpeg';		at: 'nws' put: 'message/rfc822';		at: 'p7c' put: 'application/pkcs7-mime';		at: 'pcl' put: 'application/x-visualworks-parcel';		at: 'pdf' put: 'application/pdf';		at: 'pot' put: 'application/vnd.ms-powerpoint';		at: 'ppa' put: 'application/vnd.ms-powerpoint';		at: 'pps' put: 'application/vnd.ms-powerpoint';		at: 'ppt' put: 'application/vnd.ms-powerpoint';		at: 'ps' put: 'application/postscript';		at: 'pwz' put: 'application/vnd.ms-powerpoint';		at: 'qt' put: 'video/quicktime';		at: 'rmi' put: 'audio/mid';		at: 'rtf' put: 'application/msword';		at: 'sit' put: 'application/x-stuffit';		at: 'snd' put: 'audio/basic';		at: 'spl' put: 'application/futuresplash';		at: 'swf' put: 'application/x-shockwave-flash';		at: 'tar' put: 'application/x-tar';		at: 'tgz' put: 'application/x-compressed';		at: 'tar.gz' put: 'application/x-compressed';		at: 'tif' put: 'image/tiff';		at: 'tiff' put: 'image/tiff';		at: 'txt' put: 'text/plain';		at: 'wav' put: 'audio/wav';		at: 'wiz' put: 'application/msword';		at: 'xbm' put: 'image/x-xbitmap';		at: 'xls' put: 'application/vnd.ms-excel';		at: 'z' put: 'application/x-compress';		at: 'zip' put: 'application/x-zip-compressed'</body></methods><methods><class-id>WikiWorks.FileResponse class</class-id> <category>instance creation</category><body package="FileServer">fileNamed: aFilename 	| fileStream response |	fileStream := [aFilename readStream] on: OsError				do: [:ex | ^BadRequestResponse fileNamed: aFilename].	response := super fileNamed: aFilename.	response fileStream: fileStream.	^response</body></methods><methods><class-id>WikiWorks.FileServerWiki</class-id> <category>accessing</category><body package="FileServer">directory	^initialDirectory</body><body package="FileServer">directory: directoryName 	(initialDirectory := directoryName asFilename) ensureDirectory</body><body package="FileServer">indexFileNames	^#('index.html' 'index.htm' 'default.html' 'default.htm')</body></methods><methods><class-id>WikiWorks.FileServerWiki</class-id> <category>interaction</category><body package="FileServer">directoryResponse: aDirectory 	self indexFileNames do: 			[:each | 			| indexFile |			indexFile := aDirectory construct: each.			indexFile safeIsReadable ifTrue: [^FileResponse fileNamed: indexFile]].	^DirectoryResponse fileNamed: aDirectory in: self</body><body package="FileServer">handle: aRequest 	| response |	(self authorize: aRequest) ifFalse: [^self].	response := aRequest isGet 				ifTrue: [self responseFor: aRequest]				ifFalse: [BadRequestResponse fileNamed: '.' asFilename].	aRequest answerWith: response</body><body package="FileServer">responseFor: aRequest 	| file |	file := (aRequest identifier copyFrom: self depth) 				inject: initialDirectory				into: 					[:sum :each | 					| filename |					filename := sum construct: each.					(each isValidFilename and: [filename safeIsReadable]) 						ifFalse: [^BadRequestResponse fileNamed: filename].					filename].	^file safeIsDirectory 		ifTrue: [self directoryResponse: file]		ifFalse: [FileResponse fileNamed: file]</body></methods><methods><class-id>WikiWorks.FileServerWiki</class-id> <category>initialize-release</category><body package="FileServer">initialize	name := 'File'.	initialDirectory := Filename defaultDirectory</body></methods><methods><class-id>WikiWorks.FileServerWiki</class-id> <category>testing</category><body package="FileServer">isFileserver	^true</body></methods><methods><class-id>WikiWorks.DirectoryResponse</class-id> <category>sending</category><body package="FileServer">sendBodyOver: aStream 	aStream		nextPutAll: '&lt;HTML &gt;&lt;HEAD &gt;&lt;TITLE &gt;Directory Listing&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY &gt;&lt;H1 &gt;Directory Contents:&lt;/H1&gt;&lt;HR &gt;&lt;PRE &gt;';		cr;		nextPutAll: 'Name';		flush;		next: self maxNameLength - 2 put: $ ;		nextPutAll: 'Size';		cr;		next: self maxNameLength put: $-;		nextPut: $ ;		next: self maxSizeLength put: $-;		cr.	self sendParentDirectoryOver: aStream.	filename directoryContents asSortedCollection 		do: [:each | self sendFileProperties: each over: aStream].	aStream nextPutAll: '&lt;/PRE&gt;&lt;/BODY&gt;&lt;/HTML&gt;'</body><body package="FileServer">sendDirectory: directory urlOver: aStream 	| dirString |	fileServer URLon: aStream.	dirString := directory asString 				copyFrom: fileServer directory asString size + 1.	dirString isEmpty not ifTrue: [aStream nextPutAll: dirString].	aStream nextPut: $/</body><body package="FileServer">sendFileProperties: each over: aStream 	| subDirFile isDirectory choppedName |	subDirFile := filename construct: each.	isDirectory := subDirFile safeIsDirectory.	choppedName := each contractTo: self maxNameLength.	aStream nextPutAll: '&lt;A href="'.	self sendDirectory: filename urlOver: aStream.	aStream nextPutAll: each encodedHTTP.	isDirectory ifTrue: [aStream nextPut: $/].	aStream		nextPutAll: '" &gt;';		nextPutAll: choppedName.	isDirectory ifTrue: [aStream nextPut: $/].	aStream		nextPutAll: '&lt;/A&gt;';		next: self maxNameLength - choppedName size put: $ .	isDirectory ifFalse: [self sendFileSize: subDirFile over: aStream].	aStream cr</body><body package="FileServer">sendFileSize: aFilename over: aStream 	| size type |	size := [aFilename fileSize] on: Error do: [:ex | ^self].	type := #('Bytes' 'KB' 'MB' 'GB') detect: 					[:each | 					| found |					found := size &lt; 16000.					found ifFalse: [size := size / 1024].					found]				ifNone: ['TB'].	size rounded 		printOn: aStream		paddedWith: $ 		to: self maxSizeLength		base: 10.	aStream		nextPut: $ ;		nextPutAll: type</body><body package="FileServer">sendParentDirectoryOver: aStream 	filename = fileServer directory ifTrue: [^self].	aStream nextPutAll: '&lt;A href="'.	self sendDirectory: filename head urlOver: aStream.	aStream nextPutAll: '" &gt;..   Parent Directory&lt;/A&gt;'.	aStream cr</body></methods><methods><class-id>WikiWorks.DirectoryResponse</class-id> <category>defaults</category><body package="FileServer">maxNameLength	^30</body><body package="FileServer">maxSizeLength	^6</body></methods><methods><class-id>WikiWorks.DirectoryResponse</class-id> <category>accessing</category><body package="FileServer">fileServer: aFileServer	fileServer := aFileServer</body><body package="FileServer">modifiedTime	^filename accessedTime</body></methods><methods><class-id>WikiWorks.DirectoryResponse class</class-id> <category>instance creation</category><body package="FileServer">fileNamed: aDirectory in: aFileServer 	| response |	response := self fileNamed: aDirectory.	response fileServer: aFileServer.	^response</body></methods><initialize><class-id>WikiWorks.FileResponse</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>HttpRequestHandler</name><environment>WikiWorks</environment><super>WikiWorks.NetworkRequestHandler</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars>defaultHandlers </class-inst-vars><imports></imports><category>Web-Framework</category><attributes><package>HttpServer</package></attributes></class><class><name>WebResponse</name><environment>WikiWorks</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Web-Framework</category><attributes><package>HttpServer</package></attributes></class></st-source>