<?xml version="1.0"?><st-source><!-- Name: StoreForGlorpReplicationUIComment: The ReplicationUI lets you copy packages and bundles between different Store databases, preserving timestamps and other version information.DbIdentifier: bear73DbTrace: 497191DbUsername: trobinsonDbVersion: 8.3 - 1DevelopmentPrerequisites: #(#(#any 'StoreForGlorpReplication' ''))Namespace: Store.GlorpPackageName: StoreForGlorpReplicationUIParcel: #('StoreForGlorpReplicationUI')ParcelName: StoreForGlorpReplicationUIPrerequisiteParcels: #(#('StoreForGlorpReplication' ''))PrintStringCache: (8.3 - 1,trobinson)Version: 8.3 - 1Date: 1:05:21 PM January 6, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jan17.1) of January 6, 2017 on January 6, 2017 at 1:05:21 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>UI</name><environment>Store.Glorp</environment><private>false</private><imports>			private Store.Registry			private Store.Glorp.*			private Glorp.*			private Store.*			private Smalltalk.*			</imports><category>StoreForGlorpVWUI</category><attributes><package>StoreForGlorpReplicationUI</package></attributes></name-space><class><name>ReplicationUI</name><environment>Store.Glorp.UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>manager pundleList versionList sourceLogin targetLogin queryClassWithMethod queryClass queryPackageNameText queryPropertyText2 queryShared queryProperty queryClassNameText querySharedNameText queryArbitrary queryPublishDate queryMethodNameText queryPublisher queryMethod queryPropertyText1 queryClassWithMethodText1 queryClassWithMethodText2 topLevelOnly replicationList selectedItemComment selectedItemHolder selectedRow retrievePackages retrieveBundles queryClassExtensionName queryClassExtensionNameText queryPundleName queryMethodsInClassText queryMethodsInClass queryArbitraryText queryPublishDateText queryPublisherText replicateRecursively skipOldVersions fixExistingVersions replicateOnlyOriginalVersions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StoreForGlorpVWUI</category><attributes><package>StoreForGlorpReplicationUI</package></attributes></class><comment><class-id>Store.Glorp.UI.ReplicationUI</class-id><body>This is a VisualWorks UI for browsing a database and indicating which versions to replicate to another database. It has very little functionality of its own, since it delegates all significant operations to its manager. So mostly it holds a lot of value holders for the various things we're looking at and the options we can set.Instance Variables:	fixExistingVersions	&lt;AspectAdaptor&gt;	Should we go through already replicated versions looking for things that need fixing. Specifically setting up the trace if it's not there, and making sure the blessings are all there.	manager	&lt;StoreReplicationManager&gt;	The manager, a portable class which actually does all the work.	pundleList	&lt;MultiSelectionInList&gt;	The list of versionless pundles we have to choose from.	versionList	&lt;MultiSelectionInListSortAware&gt;	The list of versions of the selected versionless pundles.	A whole lot of value holders for which things we should query, and their parameters. These follow a naming convention of queryX and queryXText, for the boolean and the text value.	replicateOnlyOriginalVersions	&lt;AspectAdaptor&gt;	Should we replicate only versions which appear to have originated in the source database.	replicateRecursively	&lt;AspectAdaptor&gt;	If we replicate a particular version and its parent isn't in the target, should we replicate the parent too. And so on, and so on.	replicationList	&lt;SelectionInList&gt;	The list of things being replicated.	retrieveBundles	&lt;ValueModel&gt;	Should we look for bundles matching the criteria?	retrievePackages	&lt;ValueModel&gt;	Should we look for packages matching the criteria?	selectedItemComment	&lt;ValueModel&gt;	The comment for the selected versionless pundle	selectedItemHolder	&lt;ValueModel&gt;	The selected versionless pundles.	selectedRow	&lt;ValueModel&gt;	The row we have selected in the version list.	skipOldVersions	&lt;AspectAdaptor&gt;	Should we skip versions older than a particular date.	sourceLogin	&lt;ValueModel&gt;	The source database	targetLogin	&lt;ValueModel&gt;	The target database	topLevelOnly	&lt;ValueModel&gt;	Should we only show top level entries in the list. This makes for a slower display, but more readable, because it removes everything that is part of a larger bundle.</body></comment><class><name>LauncherFeedback</name><environment>Store.Glorp.UI</environment><super>Store.Glorp.NoReplicationLog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>launcher pundle source target versionCount versionTotal </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StoreForGlorpVWUI</category><attributes><package>StoreForGlorpReplicationUI</package></attributes></class><comment><class-id>Store.Glorp.UI.LauncherFeedback</class-id><body>I'm displaying replication progress in the Launcher title bar and logging only actual replications and errors to the transcript.Instance Variables:	launcher	&lt;VisualLauncher&gt;	pundle	&lt;String&gt;	source	&lt;String&gt;	target	&lt;String&gt;	versionCount	&lt;anInteger&gt; 	versionTotal	&lt;anInteger&gt; </body></comment><class><name>DateSetting</name><environment>Store.Glorp.UI</environment><super>Tools.StringSetting</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StoreForGlorpVWUI</category><attributes><package>StoreForGlorpReplicationUI</package></attributes></class><comment><class-id>Store.Glorp.UI.DateSetting</class-id><body>An extension to the settings framework to allow a setting that takes a date. Used for replication settings, to set a cut-off date. See also DateSettingModule</body></comment><class><name>ReplicatorRulesPage</name><environment>Store.Glorp.UI</environment><super>Tools.SequenceSettingPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings</category><attributes><package>StoreForGlorpReplicationUI</package></attributes></class><comment><class-id>Store.Glorp.UI.ReplicatorRulesPage</class-id><body>This is a settings page for StoreGlorp replication rules. See the StoreForGlorpReplication package.</body></comment><class><name>StoreForGlorpReplicationSettingsDomain</name><environment>Store.Glorp.UI</environment><super>Tools.VisualWorksSettings</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RBCodeHighlighting</category><attributes><package>StoreForGlorpReplicationUI</package></attributes></class><comment><class-id>Store.Glorp.UI.StoreForGlorpReplicationSettingsDomain</class-id><body>This is a setting class to hold StoreGlorp replication settings information and define the settings pages for it.</body></comment><class><name>DateSettingModule</name><environment>Store.Glorp.UI</environment><super>Tools.StringSettingModule</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StoreForGlorpVWUI</category><attributes><package>StoreForGlorpReplicationUI</package></attributes></class><comment><class-id>Store.Glorp.UI.DateSettingModule</class-id><body>An extension to the settings framework to allow a setting that takes a date. Used for replication settings, to set a cut-off date. See also DateSetting.</body></comment><class><name>StoreAutoReplicatorSystem</name><environment>Store.Glorp</environment><super>Core.Subsystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shouldReplicate replicationRuleFileName interruptedReplication </inst-vars><class-inst-vars>useProgressDialogs </class-inst-vars><imports></imports><category>StoreForGlorpVWUI</category><attributes><package>StoreForGlorpReplicationUI</package></attributes></class><comment><class-id>Store.Glorp.StoreAutoReplicatorSystem</class-id><body>This is a subsystem that's used for StoreGlorp auto-replication. It handles command line options for how to do the replication, and starts and stops the background processes associated with it.Instance Variables:	interruptedReplication	&lt;Boolean&gt;	Was replication interrupted when we shut down the system. Used when pausing and resuming to know whether we need to restart once we come back.	replicationRuleFileName	&lt;String&gt;	The name of the file in which we expect to find a list of rules for what to replicate.	shouldReplicate	&lt;Boolean&gt;	If false, turn everything off. Otherwise, we expect to run the replication.</body></comment><methods><class-id>Store.Glorp.UI.ReplicationUI</class-id> <category>actions</category><body package="StoreForGlorpReplicationUI">changedMainList	self versionList list: (self selectedPundles ifNil: [List new] ifNotNil: [:pundleCollection | pundleCollection inject: #() into: [:sum :each | sum, each versions]]).	self selectedItemHolder value: self selectedPundles.</body><body package="StoreForGlorpReplicationUI">changedSelectedVersion	| versions |	versions := self versionList selections.	self selectedItemHolder value: (versions isEmpty ifTrue: [self selectedPundles] ifFalse: [versions]).</body><body package="StoreForGlorpReplicationUI">changedSourceDatabase	manager sourceLogin: self sourceLogin value asGlorpLogin.</body><body package="StoreForGlorpReplicationUI">changedTargetDatabase	manager targetLogin: self targetLogin value asGlorpLogin.</body><body package="StoreForGlorpReplicationUI">openHelp	(SimpleWorkspace with: self helpText labeled: 'Replication Help') open.</body><body package="StoreForGlorpReplicationUI">postUIEvent: aBlock	"Execute aBlock as a ui event of the window we belong to.	However, if the window isn't around, execute it anyway as *some*	ui event."	builder ifNotNil:		[builder window ifNotNil:			[:window | 			window isOpen 				ifTrue: [^aBlock uiEventFor: window]]].	aBlock uiEvent</body><body package="StoreForGlorpReplicationUI">refresh	self manager sourceSession reset.	self updateSourceItems.</body><body package="StoreForGlorpReplicationUI">replicate	| thingsToReplicate |	thingsToReplicate := self selectedItemHolder value.	(thingsToReplicate isNil or: [thingsToReplicate isEmpty])		ifTrue: [thingsToReplicate := self pundleList list].	self replicateAll: thingsToReplicate.</body><body package="StoreForGlorpReplicationUI">replicateAll: thingsToReplicate	"The UI will always provide thingsToReplicate that are StorePundles obtained in its sourceSession.  A script can pass in StorePundles (obtaining them in the manager's sourceSession may be prudent), or it can pass PundleModels (or old Store.Pundles) with	collect: [:each | each asStorePundleIn: manager sourceSession]."	self targetLogin value isNil ifTrue: [^Dialog warn: 'Select a target'].	replicationList list addAll: thingsToReplicate.	thingsToReplicate do:		[:each |		manager			addToReplicationList: each			whenDone: [self postUIEvent: [replicationList list remove: each]]].</body><body package="StoreForGlorpReplicationUI">requestForWindowClose	self manager isBusy ifTrue: [		(Dialog confirm: 'Really shut down replication?') ifFalse: [^false]].	self manager shutdown.	^true.</body><body package="StoreForGlorpReplicationUI">selectedRowLocalTimestampLabelPressed	"This is used in the #windowSpec"		"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock |	ascSortBlock := [:x :y | x localTimestamp &lt;= y localTimestamp].	dscSortBlock := [:x :y | x localTimestamp &gt;= y localTimestamp].	sortBlock := self versionList sortAspect == #selectedRowLocalTimestamp		ifTrue: [self versionList sortDirection == #asc				ifTrue: [self versionList sortDirection: #dsc.					ascSortBlock]				ifFalse: [self versionList sortDirection: #asc.					dscSortBlock]]		ifFalse: [self versionList sortAspect: #selectedRowLocalTimestamp.				self versionList sortDirection: #dsc.				ascSortBlock].	self versionList refreshList:		(SortedCollection withAll: (self versionList list)			sortBlock: sortBlock) asList.</body><body package="StoreForGlorpReplicationUI">selectedRowNameLabelPressed	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock |	ascSortBlock := [:x :y | x name displayString &lt;= y name displayString].	dscSortBlock := [:x :y | x name displayString &gt;= y name displayString].	sortBlock := self versionList sortAspect == #selectedRowName		ifTrue: [self versionList sortDirection == #asc				ifTrue: [self versionList sortDirection: #dsc.					ascSortBlock]				ifFalse: [self versionList sortDirection: #asc.					dscSortBlock]]		ifFalse: [self versionList sortAspect: #selectedRowName.				self versionList sortDirection: #dsc.				ascSortBlock].	self versionList refreshList:		(SortedCollection withAll: (self versionList list)			sortBlock: sortBlock) asList.</body><body package="StoreForGlorpReplicationUI">selectedRowTimestampLabelPressed	"This is used in the #windowSpecFull"	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock |	ascSortBlock := [:x :y | x timestamp &lt;= y timestamp].	dscSortBlock := [:x :y | x timestamp &gt;= y timestamp].	sortBlock := self versionList sortAspect == #selectedRowTimestamp		ifTrue: [self versionList sortDirection == #asc				ifTrue: [self versionList sortDirection: #dsc.					ascSortBlock]				ifFalse: [self versionList sortDirection: #asc.					dscSortBlock]]		ifFalse: [self versionList sortAspect: #selectedRowTimestamp.				self versionList sortDirection: #dsc.				ascSortBlock].	self versionList refreshList:		(SortedCollection withAll: (self versionList list)			sortBlock: sortBlock) asList.</body><body package="StoreForGlorpReplicationUI">selectedRowUsernameLabelPressed	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock |	ascSortBlock := [:x :y | x username displayString &lt;= y username displayString].	dscSortBlock := [:x :y | x username displayString &gt;= y username displayString].	sortBlock := self versionList sortAspect == #selectedRowUsername		ifTrue: [			self versionList sortDirection == #asc				ifTrue: [self versionList sortDirection: #dsc.					ascSortBlock]				ifFalse: [self versionList sortDirection: #asc.					dscSortBlock]]		ifFalse: [self versionList sortAspect: #selectedRowUsername.				self versionList sortDirection: #dsc.				ascSortBlock].	self versionList refreshList:		(SortedCollection withAll: (self versionList list)			sortBlock: sortBlock) asList.</body><body package="StoreForGlorpReplicationUI">selectedRowVersionLabelPressed	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined."	| ascSortBlock dscSortBlock sortBlock |	ascSortBlock := [:x :y | x version displayString &lt;= y version displayString].	dscSortBlock := [:x :y | x version displayString &gt;= y version displayString].	sortBlock := self versionList sortAspect == #selectedRowVersion		ifTrue: [			self versionList sortDirection == #asc				ifTrue: [self versionList sortDirection: #dsc.					ascSortBlock]				ifFalse: [self versionList sortDirection: #asc.					dscSortBlock]]		ifFalse: [self versionList sortAspect: #selectedRowVersion.				self versionList sortDirection: #dsc.				ascSortBlock].	self versionList refreshList:		(SortedCollection withAll: (self versionList list)			sortBlock: sortBlock) asList.</body><body package="StoreForGlorpReplicationUI">slowOperation: aBlock	^Time millisecondsToRun: [Cursor wait showWhile: aBlock].</body><body package="StoreForGlorpReplicationUI">stop	self manager stop.</body><body package="StoreForGlorpReplicationUI">updateComment	selectedItemComment value: (self selectedItemHolder value isEmpty ifTrue: [''] ifFalse: [self selectedItemHolder value first versionComment]).</body><body package="StoreForGlorpReplicationUI">updateSourceItems	self manager getPundles.</body></methods><methods><class-id>Store.Glorp.UI.ReplicationUI</class-id> <category>aspects</category><body package="StoreForGlorpReplicationUI">databaseMenu	^Menu labelArray: (self availableLogins collect: [:each | each name]) values: self availableLogins.</body><body package="StoreForGlorpReplicationUI">pundleList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^pundleList isNil		ifTrue:			[pundleList := MultiSelectionInList new]		ifFalse:			[pundleList]</body><body package="StoreForGlorpReplicationUI">queryArbitrary	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryArbitrary isNil		ifTrue:			[queryArbitrary := false asValue]		ifFalse:			[queryArbitrary]</body><body package="StoreForGlorpReplicationUI">queryArbitraryText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryArbitraryText isNil		ifTrue:			[queryArbitraryText := String new asValue]		ifFalse:			[queryArbitraryText]</body><body package="StoreForGlorpReplicationUI">queryClassExtensionName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryClassExtensionName isNil		ifTrue:			[queryClassExtensionName := false asValue]		ifFalse:			[queryClassExtensionName]</body><body package="StoreForGlorpReplicationUI">queryClassExtensionNameText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryClassExtensionNameText isNil		ifTrue:			[queryClassExtensionNameText := String new asValue]		ifFalse:			[queryClassExtensionNameText]</body><body package="StoreForGlorpReplicationUI">queryClassName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryClass isNil		ifTrue:			[queryClass := false asValue]		ifFalse:			[queryClass]</body><body package="StoreForGlorpReplicationUI">queryClassNameText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryClassNameText isNil		ifTrue:			[queryClassNameText := String new asValue]		ifFalse:			[queryClassNameText]</body><body package="StoreForGlorpReplicationUI">queryClassWithMethod	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryClassWithMethod isNil		ifTrue:			[queryClassWithMethod := false asValue]		ifFalse:			[queryClassWithMethod]</body><body package="StoreForGlorpReplicationUI">queryClassWithMethodText1	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryClassWithMethodText1 isNil		ifTrue:			[queryClassWithMethodText1 := String new asValue]		ifFalse:			[queryClassWithMethodText1]</body><body package="StoreForGlorpReplicationUI">queryClassWithMethodText2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryClassWithMethodText2 isNil		ifTrue:			[queryClassWithMethodText2 := String new asValue]		ifFalse:			[queryClassWithMethodText2]</body><body package="StoreForGlorpReplicationUI">queryMethodName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryMethod isNil		ifTrue:			[queryMethod := false asValue]		ifFalse:			[queryMethod]</body><body package="StoreForGlorpReplicationUI">queryMethodNameText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryMethodNameText isNil		ifTrue:			[queryMethodNameText := String new asValue]		ifFalse:			[queryMethodNameText]</body><body package="StoreForGlorpReplicationUI">queryMethodsInClass	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryMethodsInClass isNil		ifTrue:			[queryMethodsInClass := false asValue]		ifFalse:			[queryMethodsInClass]</body><body package="StoreForGlorpReplicationUI">queryMethodsInClassText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryMethodsInClassText isNil		ifTrue:			[queryMethodsInClassText := String new asValue]		ifFalse:			[queryMethodsInClassText]</body><body package="StoreForGlorpReplicationUI">queryProperty	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryProperty isNil		ifTrue:			[queryProperty := false asValue]		ifFalse:			[queryProperty]</body><body package="StoreForGlorpReplicationUI">queryPropertyText1	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryPropertyText1 isNil		ifTrue:			[queryPropertyText1 := String new asValue]		ifFalse:			[queryPropertyText1]</body><body package="StoreForGlorpReplicationUI">queryPropertyText2	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryPropertyText2 isNil		ifTrue:			[queryPropertyText2 := String new asValue]		ifFalse:			[queryPropertyText2]</body><body package="StoreForGlorpReplicationUI">queryPublishDate	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryPublishDate isNil		ifTrue:			[queryPublishDate := false asValue]		ifFalse:			[queryPublishDate]</body><body package="StoreForGlorpReplicationUI">queryPublishDateText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryPublishDateText isNil		ifTrue:			[queryPublishDateText := 0 asValue]		ifFalse:			[queryPublishDateText]</body><body package="StoreForGlorpReplicationUI">queryPublisher	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryPublisher isNil		ifTrue:			[queryPublisher := false asValue]		ifFalse:			[queryPublisher]</body><body package="StoreForGlorpReplicationUI">queryPublisherText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryPublisherText isNil		ifTrue:			[queryPublisherText := String new asValue]		ifFalse:			[queryPublisherText]</body><body package="StoreForGlorpReplicationUI">queryPundleName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryPundleName isNil		ifTrue:			[queryPundleName := false asValue]		ifFalse:			[queryPundleName]</body><body package="StoreForGlorpReplicationUI">queryPundleNameText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryPackageNameText isNil		ifTrue:			[queryPackageNameText := String new asValue]		ifFalse:			[queryPackageNameText]</body><body package="StoreForGlorpReplicationUI">querySharedName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^queryShared isNil		ifTrue:			[queryShared := false asValue]		ifFalse:			[queryShared]</body><body package="StoreForGlorpReplicationUI">querySharedNameText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^querySharedNameText isNil		ifTrue:			[querySharedNameText := String new asValue]		ifFalse:			[querySharedNameText]</body><body package="StoreForGlorpReplicationUI">replicateRecursively	^replicateRecursively</body><body package="StoreForGlorpReplicationUI">replicationList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^replicationList isNil		ifTrue:			[replicationList := SelectionInList new]		ifFalse:			[replicationList]</body><body package="StoreForGlorpReplicationUI">retrieveBundles	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^retrieveBundles isNil		ifTrue:			[retrieveBundles := false asValue]		ifFalse:			[retrieveBundles]</body><body package="StoreForGlorpReplicationUI">retrievePackages	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^retrievePackages isNil		ifTrue:			[retrievePackages := false asValue]		ifFalse:			[retrievePackages]</body><body package="StoreForGlorpReplicationUI">selectedItemComment	selectedItemComment isNil ifTrue: [selectedItemComment := ValueHolder new].	^selectedItemComment.</body><body package="StoreForGlorpReplicationUI">selectedItemHolder	^selectedItemHolder isNil		ifTrue:			[selectedItemHolder := ValueHolder new]		ifFalse:			[selectedItemHolder]</body><body package="StoreForGlorpReplicationUI">selectedRow	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^selectedRow isNil		ifTrue:			[selectedRow := nil asValue]		ifFalse:			[selectedRow]</body><body package="StoreForGlorpReplicationUI">setPundleList: aCollection	self pundleList list: aCollection.</body><body package="StoreForGlorpReplicationUI">shouldFixExistingVersions	^self fixExistingVersions value.</body><body package="StoreForGlorpReplicationUI">shouldReplicateOnlyOriginalVersions	^self replicateOnlyOriginalVersions value.</body><body package="StoreForGlorpReplicationUI">shouldReplicateRecursively	^self replicateRecursively value.</body><body package="StoreForGlorpReplicationUI">shouldSkipOldVersions	^self skipOldVersions value.</body><body package="StoreForGlorpReplicationUI">skipOldVersions	^skipOldVersions</body><body package="StoreForGlorpReplicationUI">sourceLogin	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^sourceLogin isNil		ifTrue:			[sourceLogin := nil asValue]		ifFalse:			[sourceLogin]</body><body package="StoreForGlorpReplicationUI">targetLogin	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^targetLogin isNil		ifTrue:			[targetLogin := nil asValue]		ifFalse:			[targetLogin]</body><body package="StoreForGlorpReplicationUI">toggleFixExistingVersions	self fixExistingVersions value: self fixExistingVersions value not.</body><body package="StoreForGlorpReplicationUI">toggleReplicateOnlyOriginalVersions	self replicateOnlyOriginalVersions value: self replicateOnlyOriginalVersions value not.</body><body package="StoreForGlorpReplicationUI">toggleReplicateRecursively	self replicateRecursively value: self replicateRecursively value not.</body><body package="StoreForGlorpReplicationUI">toggleSkipOldVersions	self skipOldVersions value: self skipOldVersions value not.</body><body package="StoreForGlorpReplicationUI">topLevelOnly	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^topLevelOnly isNil		ifTrue:			[topLevelOnly := false asValue]		ifFalse:			[topLevelOnly]</body><body package="StoreForGlorpReplicationUI">versionList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^versionList isNil		ifTrue:			[versionList :=  MultiSelectionInListSortAware new.			versionList selectionIndexHolder compute:				[:v |				versionList selections isEmpty ifFalse: [					self selectedRow value: versionList selections first]].			versionList]		ifFalse:			[versionList]</body></methods><methods><class-id>Store.Glorp.UI.ReplicationUI</class-id> <category>testing</category><body package="StoreForGlorpReplicationUI">inspectSelected	^self versionList selections size = 1 		ifTrue: [self versionList selections first inspect]		ifFalse: [self versionList selections inspect].</body><body package="StoreForGlorpReplicationUI">versionIsSelected	^self versionList selections isEmpty not.</body></methods><methods><class-id>Store.Glorp.UI.ReplicationUI</class-id> <category>menus</category><body package="StoreForGlorpReplicationUI">browseVersion	"Browse, limiting the number of versions to something reasonable"	| reasonableListOfVersions |	reasonableListOfVersions := self versionList selections copyFrom: 1 to: (self versionList selections size min: 5).	Cursor wait showWhile: [reasonableListOfVersions do: [:each | each browseContents]].</body><body package="StoreForGlorpReplicationUI">openSettings	StoreForGlorpReplicationSettingsDomain openManager.</body></methods><methods><class-id>Store.Glorp.UI.ReplicationUI</class-id> <category>accessing</category><body package="StoreForGlorpReplicationUI">availableLogins	^manager availableLogins.</body><body package="StoreForGlorpReplicationUI">fixExistingVersions	^fixExistingVersions</body><body package="StoreForGlorpReplicationUI">fixExistingVersions: aValueHolder	fixExistingVersions := aValueHolder</body><body package="StoreForGlorpReplicationUI">helpText	^'Store Replication ToolThe Replication tool helps manage your project in multiple repositories. You can use it to copy packages and bundles from one repository to another, keeping them synchronized in both. Publish your work to a local repository at full speed, and then replicate it to a remote repository at your convenience. Or, take your machine on the road, publish locally, and then replicate when you have a network connection again.Getting StartedWhen you first set up a local repository, you can replicate the latest version of your project from a public repository, reconcile your image against the local version, and then publish future changes to the local repository. Thereafter, you''ll be publishing with version numbers that track what''s in the public repository, and you can use the Replication tool to keep both repositories in sync.Tool OverviewThe upper part of the Replication tool has controls for filtering the list of packages/bundles in the source database. These can be filtered based on a number of criteria which should be fairly clear. The left-hand checkboxes control whether the list shows only bundles, only packages, neither, or both. If the "Top Level Only" checkbox is on, then packages/bundles for which any version is contained in a bundle will be omitted from the list. This can be useful for filtering the components of interest, but does slow down the list noticeably.Directly underneath the filter area are drop-downs that let you specify the source and target databases. These must be repository profiles (each with a valid login) that have been saved from the regular Store connection dialog. There is also a button to refresh the source list.Using the Replication ToolOnce a source database has been selected, a list of bundles and packages will appear in the leftmost pane. If one or more of these is selected, a list of versions will appear in the second pane, and the package/bundle comment will appear in the lower left text pane. Individual versions can be selected and the pop-up menu allows you to browse or inspect them. If an individual version is selected, then the version comment will be shown in the text pane. The list order can be changed by clicking on the title of each column.Once the replicate button "&gt;&gt;" is pressed, if individual versions are selected, those versions will be replicated to the target database. If only package/bundle names are selected, then all versions will be replicated. Note that the only progress indication during replication is by logging to the transcript. The component that is currently being replicated is displayed at the top of the list below the "Target Database" selection. Once the replication is finished, a message will appear in the Transcript and the Target list will be empty.While replicating, the STOP button will stop replication. This may take some time, as it needs to log out of and back into both databases.Options-- Replicate Recursively: If individual versions(s) are selected, and "replicate recursively" is on, then the parent versions will also automatically be replicated. This is better for maintaining consistency, but may not be what you want if you want to bring across only one or a couple of versions.-- Skip Old Versions: If you have already been keeping multiple repositories in sync manually, then replicating all versions will probably produce many duplicate versions. If this setting is true, then a replicate of all versions will only go back as far as the oldest version that is known to be in sync between the two repositories. So, if you wanted to keep everything from version 1.2 onward in sync, but not replicate anything earlier, you could replicate across version 1.2 with the "replicate recursively" flag turned off, and then turn on the "skip old versions" flag. From then on you could duplicate all versions, and as long as this flag is set only those from 1.2 onwards will be replicated.-- Fix Old Versions: Versions are mostly immutable, but there are some things that can change in a repository. This will attempt to fix up things that have changed. In particular, if a version has no parent, but the appropriate parent is now found in the target database, this will fix the parent pointer. Also, if there are new blessings, this will copy them over. Note that this can make replication take longer, since the system must examine at least a subset of old versions.-- Replicate Only Original Versions: If this option is set, then versions will not be re-replicated out of the source database. That is, suppose that we have replication set up between our local database A, and two other databases B and C. A version published in A, will be replicated to both B and C. But a version published in B, then replicated to A, will not be published into C. Note that this relies on the replication notice blessings, so older versions which do not have these blessings will not be skipped in this way.Note that it is also possible to use auto-replication, where a periodic process will replicate specific packages/bundles. See the settings. This can be controlled either within the image, or by starting up an image with command-line options for replication.'</body><body package="StoreForGlorpReplicationUI">manager	^manager</body><body package="StoreForGlorpReplicationUI">manager: aStoreReplicationManager	manager := aStoreReplicationManager</body><body package="StoreForGlorpReplicationUI">replicateOnlyOriginalVersions	^replicateOnlyOriginalVersions</body><body package="StoreForGlorpReplicationUI">replicateOnlyOriginalVersions: aValueHolder	replicateOnlyOriginalVersions := aValueHolder</body><body package="StoreForGlorpReplicationUI">selectedPundles	^self pundleList selections</body><body package="StoreForGlorpReplicationUI">sourceDatabaseLabel	^'Source Database' asText allBold.</body><body package="StoreForGlorpReplicationUI">targetDatabaseLabel	^'Target Database' asText allBold.</body></methods><methods><class-id>Store.Glorp.UI.ReplicationUI</class-id> <category>initialize-release</category><body package="StoreForGlorpReplicationUI">initialize	super initialize.	manager := StoreReplicationManager new.	manager gui: self.	self setUpEvents.	self setUpDefaults.</body><body package="StoreForGlorpReplicationUI">labelAndIconFor: item icon: icon	^(LabelAndIcon with: item displayString offset: 0 @ -2) icon: icon.</body><body package="StoreForGlorpReplicationUI">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self setUpIcons.</body><body package="StoreForGlorpReplicationUI">setUpDefaults	self queryPublishDateText value: 30.	self queryPublishDate value: true.	Store.ConnectionProfile lastUsedProfile isNil ifFalse: [		self queryPublisher value: true.		self queryPublisherText value: Store.ConnectionProfile lastUsedProfile userName].	self queryPundleNameText value: 'Store%'.	self queryClassNameText value: 'Object'.	self queryClassWithMethodText1 value: '%.Object'.	self queryClassWithMethodText2 value: 'printOn:'.	self queryMethodsInClassText value: 'Root.Smalltalk.Core.Object'.	self queryMethodNameText value: 'printOn:'.	self querySharedNameText value: 'Encodings'.	self queryArbitraryText value: '[:each | each versions anySatisfy: [:eachVersion | (eachVersion timestamp &gt; (Date today subtractDays: 365)) &amp; (eachVersion parentBundles anySatisfy: [:eachParentBundle | eachParentBundle name like: ''%IRC%''])]]'.</body><body package="StoreForGlorpReplicationUI">setUpEvents	self pundleList selectionHolder onChangeSend: #changedMainList to: self.	self versionList selectionHolder		onChangeSend: #changedSelectedVersion		to: self.	self sourceLogin onChangeSend: #changedSourceDatabase to: self.	self targetLogin onChangeSend: #changedTargetDatabase to: self.	self selectedItemHolder onChangeSend: #updateComment to: self.	topLevelOnly := (AspectAdaptor subject: self manager sendsUpdates: false)		forAspect: #topLevelOnly.	topLevelOnly onChangeSend: #updateSourceItems to: self.	retrieveBundles := (AspectAdaptor		subject: self manager		sendsUpdates: false) forAspect: #retrieveBundles.	retrieveBundles onChangeSend: #updateSourceItems to: self.	retrievePackages := (AspectAdaptor		subject: self manager		sendsUpdates: false) forAspect: #retrievePackages.	retrievePackages onChangeSend: #updateSourceItems to: self.	replicateRecursively := (AspectAdaptor forAspect: #replicateRecursively accessPath: #(manager replicator)) subject: self.	skipOldVersions := (AspectAdaptor forAspect: #skipOldVersions accessPath: #(manager replicator)) subject: self.	fixExistingVersions := (AspectAdaptor forAspect: #shouldFixExistingVersions accessPath: #(manager replicator)) subject: self.	replicateOnlyOriginalVersions := (AspectAdaptor forAspect: #replicateOnlyOriginalVersions accessPath: #(manager replicator)) subject: self.</body><body package="StoreForGlorpReplicationUI">setUpIcons	((self builder componentAt: #List1) widget)		visualBlock:				[:view :index | 					| item icon |					item := view sequence at: index.					icon := self iconFor: item.					BoundedWrapper on: (self labelAndIconFor: item icon: icon)];		selectedVisualBlock:				[:view :index | 					| rw item icon |					item := view sequence at: index.					icon := self iconFor: item.					rw := ReversingWrapper on: (self labelAndIconFor: item icon: icon).					rw reverse setValue: true.					BoundedWrapper on: rw].</body></methods><methods><class-id>Store.Glorp.UI.ReplicationUI</class-id> <category>visuals</category><body package="StoreForGlorpReplicationUI">iconFor: aPundle	^ListIconLibrary visualFor: (aPundle isBundle ifTrue: [#bundle] ifFalse: [#package]).</body></methods><methods><class-id>Store.Glorp.UI.ReplicationUI class</class-id> <category>resources</category><body package="StoreForGlorpReplicationUI">targetDatabaseLabel	^'Target Database' asText allBold.</body></methods><methods><class-id>Store.Glorp.UI.ReplicationUI class</class-id> <category>interface specs</category><body package="StoreForGlorpReplicationUI">sourceDatabaseLabel	^'Source Database' asText allBold.</body></methods><methods><class-id>Store.Glorp.UI.LauncherFeedback</class-id> <category>events-auto replicator</category><body package="StoreForGlorpReplicationUI">autoReplicateLoginError: anException from: sourceName to: targetName	self transcriptTextStreamDo: [ :ts |		ts	cr;			emphasis: #bold;			nextPutAll: sourceName; nextPutAll: ' -&gt; '; nextPutAll: targetName;					emphasis: nil;			nextPutAll: ': Login failure - '; print: anException ].</body><body package="StoreForGlorpReplicationUI">autoReplicating: aPundleName from: sourceName to: targetName	pundle := aPundleName.	source := sourceName.	target := targetName.	self show</body><body package="StoreForGlorpReplicationUI">finishedAutoReplicationAt: aTime	pundle := nil.	self show.	self transcriptTextStreamDo: [ :ts |		ts	cr;			emphasis: #bold;			nextPutAll: 'Finished auto-replication at ', aTime printString;			emphasis: nil ].</body><body package="StoreForGlorpReplicationUI">startingAutoReplicationAt: aTime	launcher := nil.	versionCount := versionTotal := 0.	self transcriptTextStreamDo: [ :ts |		ts	cr; cr;			emphasis: #bold;			nextPutAll: 'Starting auto-replication at ', aTime printString;			emphasis: nil ].</body></methods><methods><class-id>Store.Glorp.UI.LauncherFeedback</class-id> <category>events-individual pundle replicator</category><body package="StoreForGlorpReplicationUI">finishedReplicationOf: aPundle time: endTime duration: duration	versionCount := versionCount - 1. 	Transcript cr;		show: ' Done ' , aPundle displayString;		show: ' at ' , endTime printString;		show: ' (' , duration printString, ' seconds)'</body><body package="StoreForGlorpReplicationUI">invalidPundle: aPundle	 Transcript cr; show: 'Invalid ' , aPundle printString</body><body package="StoreForGlorpReplicationUI">patchingParentFor: targetPundle	 Transcript cr; show: 'Patching parent for ', targetPundle printString</body><body package="StoreForGlorpReplicationUI">reconcilingPundle: aPundle	 Transcript cr; show: 'Reconciling ', aPundle displayString</body><body package="StoreForGlorpReplicationUI">skipping: aPundle time: aTime	self transcriptTextStreamDo: [ :ts |		ts 	cr;			nextPutAll: 'SKIPPING ' , aPundle displayString			cr;			emphasis: #color -&gt; ColorValue pink]</body><body package="StoreForGlorpReplicationUI">startingReplicationOf: aPundle time: aTime	self startingReplicationOf: aPundle time: aTime depth: 0</body><body package="StoreForGlorpReplicationUI">startingReplicationOf: aPundle time: aTime depth: anInteger	self show.	self transcriptTextStreamDo: [ :ts |		ts 	cr;			nextPutAll: operation, ' ' , aPundle displayString;			nextPutAll: ' starting at ';			print: aTime.		anInteger &lt; 1 ifTrue: [			ts	cr;				emphasis: #color -&gt; ColorValue darkGreen;				nextPutAll: aPundle versionComment asString;				emphasis: nil ] ]</body><body package="StoreForGlorpReplicationUI">updatingBlessingsFor: targetPundle	 Transcript cr; show: 'Updating blessings for ', targetPundle printString</body></methods><methods><class-id>Store.Glorp.UI.LauncherFeedback</class-id> <category>accessing</category><body package="StoreForGlorpReplicationUI">launcher	^launcher ifNil: [ launcher := VisualLauncher raiseSingleInstance model ]</body><body package="StoreForGlorpReplicationUI">transcript	^self launcher textCollector</body><body package="StoreForGlorpReplicationUI">window	^self launcher builder window</body></methods><methods><class-id>Store.Glorp.UI.LauncherFeedback</class-id> <category>events-replicator</category><body package="StoreForGlorpReplicationUI">checkingInformationInOldVersionsFor: aPundleName	Transcript cr; show: 'Checking information in old versions for ', aPundleName.</body><body package="StoreForGlorpReplicationUI">disconnected	Transcript cr; show: 'Disconnected...'</body><body package="StoreForGlorpReplicationUI">examining: aPundleName depth: anInteger	('Components of *' match: aPundleName) ifFalse: [		pundle := aPundleName.		self show ]</body><body package="StoreForGlorpReplicationUI">givingUpAfterTooManyFailures	Transcript cr; show: 'Too many retries. Operation failed.'</body><body package="StoreForGlorpReplicationUI">reconnectingTo: aString	Transcript cr; show: 'Reconnecting to ', aString, ' database'.</body><body package="StoreForGlorpReplicationUI">replicating: aNumber versionsOf: aPundleName from: sourceSession to: targetSession depth: anInteger	versionTotal := versionCount := aNumber.	self transcriptTextStreamDo: [ :ts |		ts	cr; print: aNumber;			nextPutAll: ' version(s) of ';			emphasis: #bold;			nextPutAll: aPundleName;			emphasis: nil;			nextPutAll: ' to replicate from ';			emphasis: #bold;			nextPutAll: sourceSession accessor currentLogin name;			emphasis: nil;			nextPutAll: ' to ';			emphasis: #bold;			nextPutAll: targetSession accessor currentLogin name;			emphasis: nil ]</body><body package="StoreForGlorpReplicationUI">replicatingAllVersionsOf: aPundleName from: sourceSession to: targetSession	Transcript		cr; show: ('*******WARNING: Replicating *ALL* versions of &lt;1s&gt; from &lt;2s&gt; to &lt;3s&gt;!'					expandMacrosWith: aPundleName					with: sourceSession accessor currentLogin name asString					with: targetSession accessor currentLogin name asString);		show: ' The "Skip Old Versions" flag is ON, but there isn''t any shared version between the two repositories.'</body></methods><methods><class-id>Store.Glorp.UI.LauncherFeedback</class-id> <category>private</category><body package="StoreForGlorpReplicationUI">show	| stream |	stream := String new writeStream.	stream nextPutAll: 'Replicator'.	pundle ifNotNil: [		stream nextPutAll: ' - '; nextPutAll: source; nextPutAll: ' &gt;&gt; '; nextPutAll: target;			nextPutAll: ' : '; nextPutAll: pundle.		versionCount isZero ifFalse: [			stream nextPutAll: ' ('; print: versionCount;				nextPut: $/; print: versionTotal; nextPut: $) ] ].	self window label: stream contents.</body><body package="StoreForGlorpReplicationUI">transcriptTextStreamDo: aBlock	| ts |	ts := TextStream on: (String new: 20).	ts nextPutAllText: Transcript value.	aBlock value: ts.	Transcript		value: ts contents;		changed: #update</body></methods><methods><class-id>Store.Glorp.UI.DateSetting</class-id> <category>accessing</category><body package="StoreForGlorpReplicationUI">fromXML: aNode	self verifyStoredDataTag: aNode.	^aNode children isEmpty		ifTrue: [nil]		ifFalse: [ | text |			text := aNode children first text.			text isEmpty				ifTrue: [nil]				ifFalse: [Date readFrom: text readStream]]</body><body package="StoreForGlorpReplicationUI">isValueValid: anObject 	^anObject isNil or: [ anObject isKindOf: Date ]</body><body package="StoreForGlorpReplicationUI">toXML: anObject	self validate: anObject.	^Element		tag: self xmlTag		elements: (Array with: (XML.Text text: (anObject ifNil: [''] ifNotNil: [ anObject printString ])))</body></methods><methods><class-id>Store.Glorp.UI.DateSetting</class-id> <category>parameters</category><body package="StoreForGlorpReplicationUI">xmlTag	^'date'</body></methods><methods><class-id>Store.Glorp.UI.DateSetting</class-id> <category>user interface</category><body package="StoreForGlorpReplicationUI">editorModuleClassIn: aPage		^DateSettingModule</body></methods><methods><class-id>Store.Glorp.UI.ReplicatorRulesPage</class-id> <category>private</category><body package="StoreForGlorpReplicationUI">addRulesFrom: aSessionCollection 	| rules |	rules := (self findBundleRulesIn: aSessionCollection) 				, (self findPackageRulesIn: aSessionCollection).	workHolder value: (rules asList collect: [:each | each definitionString])</body><body package="StoreForGlorpReplicationUI">createSessions	^RepositoryManager repositories 		collect: [:each | self sessionForRepository: each]</body><body package="StoreForGlorpReplicationUI">findBundleRulesIn: aSessionCollection 	Transcript		show: 'Looking for replicatable bundles';		cr.	^self 		rulesWhereEach: StoreVersionlessBundle		in: Registry allBundles		resideInMoreThanOneOf: aSessionCollection</body><body package="StoreForGlorpReplicationUI">findPackageRulesIn: aSessionCollection 	Transcript		show: 'Looking for replicatable packages';		cr.	^self 		rulesWhereEach: StoreVersionlessPackage		in: Registry allPackages		resideInMoreThanOneOf: aSessionCollection</body><body package="StoreForGlorpReplicationUI">loginSessions: aCollection	aCollection do: [:each | each login].</body><body package="StoreForGlorpReplicationUI">logoutSessions: aCollection	aCollection do: [:each | each accessor logout].</body><body package="StoreForGlorpReplicationUI">rulesWhereEach: aClass in: aPundleCollection resideInMoreThanOneOf: aSessionCollection 	| topology multiples map |	map := Dictionary withAll: (aSessionCollection 						collect: [:each | each -&gt; ((each read: aClass) collect: [:obj | obj name])]).	topology := aPundleCollection collect: 					[:eachPundle | 					| interestedLogins |					interestedLogins := (aSessionCollection 								select: [:each | (map at: each) includes: eachPundle name]) 									collect: [:each | each accessor currentLogin name].					eachPundle -&gt; interestedLogins].	multiples := topology select: [:each | each value size &gt; 1].	^multiples collect: 			[:each | 			| rule |			rule := ReplicationRule new.			rule isBundle: aClass == StoreVersionlessBundle.			rule name: each key name.			rule primary: each value first.			2 to: each value size do: [:n | rule secondary: (each value at: n)].			rule]</body><body package="StoreForGlorpReplicationUI">sessionForRepository: each 	| gsession system login |	login := each asGlorpLogin.	system := Store73DescriptorSystem forPlatform: login database.	gsession := GlorpSession new.	gsession accessor: (DatabaseAccessor forLogin: login).	gsession accessor logging: false.	gsession system: system.	login database 		useBinding: (login database class == PostgreSQLPlatform) not.	login schema isNil 		ifFalse: 			[gsession system allTables 				do: [:eachTable | eachTable schema: login schema]].	^gsession</body></methods><methods><class-id>Store.Glorp.UI.ReplicatorRulesPage</class-id> <category>actions</category><body package="StoreForGlorpReplicationUI">autoFill	| sessions |	sessions := self createSessions.		[self loginSessions: sessions.	self addRulesFrom: sessions] 			ensure: [self logoutSessions: sessions].	hasChanges := true.	self tickle</body></methods><methods><class-id>Store.Glorp.UI.DateSettingModule</class-id> <category>initialize-release</category><body package="StoreForGlorpReplicationUI">postBuildWith: aBuilder	super postBuildWith: aBuilder.	(self controllerAt: #inputField) continuousAccept: false.</body></methods><methods><class-id>Store.Glorp.StoreAutoReplicatorSystem</class-id> <category>accessing</category><body package="StoreForGlorpReplicationUI">autoReplicator	^#{Store.Glorp.StoreAutoReplicator} ifDefinedDo: [:class | class default] elseDo: [nil]</body><body package="StoreForGlorpReplicationUI">period	^(self autoReplicator) period.</body><body package="StoreForGlorpReplicationUI">period: anInteger	((self autoReplicator) notNil) ifTrue: [		anInteger isNil ifTrue: [self shouldReplicate: false].		self autoReplicator period: anInteger].</body><body package="StoreForGlorpReplicationUI">quitAfterReplicating	^self autoReplicator quitAfterReplicating.</body><body package="StoreForGlorpReplicationUI">quitAfterReplicating: aBoolean	self autoReplicator quitAfterReplicating: aBoolean.</body><body package="StoreForGlorpReplicationUI">ruleStrings	^(self autoReplicator) ruleStrings.</body><body package="StoreForGlorpReplicationUI">ruleStrings: aCollectionOfStrings	self autoReplicator ruleStrings: aCollectionOfStrings.</body><body package="StoreForGlorpReplicationUI">rules	^(self autoReplicator) rules.</body><body package="StoreForGlorpReplicationUI">rules: aCollection	self autoReplicator rules: aCollection.</body><body package="StoreForGlorpReplicationUI">shouldFixExistingVersions	^(self autoReplicator) shouldFixExistingVersions.</body><body package="StoreForGlorpReplicationUI">shouldFixExistingVersions: aBoolean	((self autoReplicator) notNil) ifTrue: [		self autoReplicator shouldFixExistingVersions: aBoolean].</body><body package="StoreForGlorpReplicationUI">shouldReplicate	^shouldReplicate</body><body package="StoreForGlorpReplicationUI">shouldReplicate: aBoolean	"If we're already running and we set this, then start or stop the periodic replication immediately"	(self isActive and: [shouldReplicate ~= aBoolean])		ifTrue:			[shouldReplicate := aBoolean.			aBoolean				ifTrue: [self startPeriodicReplication]				ifFalse: [self stopPeriodicReplication]]		ifFalse: [shouldReplicate := aBoolean].</body><body package="StoreForGlorpReplicationUI">shouldReplicateOnlyOriginalVersions	^(self autoReplicator) shouldReplicateOnlyOriginalVersions.</body><body package="StoreForGlorpReplicationUI">shouldReplicateOnlyOriginalVersions: aBoolean	((self autoReplicator) notNil) ifTrue: [		self autoReplicator shouldReplicateOnlyOriginalVersions: aBoolean].</body><body package="StoreForGlorpReplicationUI">skipOldVersions	^(self autoReplicator) skipOldVersions.</body><body package="StoreForGlorpReplicationUI">skipOldVersions: aBoolean	((self autoReplicator) notNil) ifTrue: [		self autoReplicator skipOldVersions: aBoolean].</body><body package="StoreForGlorpReplicationUI">useLogType	^self autoReplicator ifNotNil: [ :replicator |		replicator replicationLog class ]</body><body package="StoreForGlorpReplicationUI">useLogType: aClass	self autoReplicator ifNotNil: [ :replicator |		replicator replicationLog: aClass new ]</body></methods><methods><class-id>Store.Glorp.StoreAutoReplicatorSystem</class-id> <category>actions</category><body package="StoreForGlorpReplicationUI">pauseAction	super pauseAction.	"Make sure that this doesn't persist across image saves. This way, when the image next starts up, the autoreplicator setting will be forced to nil, unless it has explicitly been set by a command-line option"	replicationRuleFileName := nil.	interruptedReplication := self autoReplicator busy.	interruptedReplication ifTrue: [		self stopPeriodicReplication].</body><body package="StoreForGlorpReplicationUI">resumeAction	super resumeAction.	interruptedReplication ifTrue: [self startPeriodicReplication].</body><body package="StoreForGlorpReplicationUI">setUp	super setUp.	self autoReplicator ruleFileName: replicationRuleFileName.	self startPeriodicReplication.</body><body package="StoreForGlorpReplicationUI">startPeriodicReplication	shouldReplicate ifTrue: [self autoReplicator startPeriodicReplication].</body><body package="StoreForGlorpReplicationUI">stopPeriodicReplication	(self autoReplicator) isNil ifFalse: [(self autoReplicator) stopPeriodicReplication].</body><body package="StoreForGlorpReplicationUI">tearDown	super tearDown.	self stopPeriodicReplication.</body></methods><methods><class-id>Store.Glorp.StoreAutoReplicatorSystem</class-id> <category>initialize/release</category><body package="StoreForGlorpReplicationUI">initialize	super initialize.	shouldReplicate := false.</body></methods><methods><class-id>Store.Glorp.StoreAutoReplicatorSystem</class-id> <category>prerequisites</category><body package="StoreForGlorpReplicationUI">prerequisiteSystems	^Array with: ImageConfigurationSystem.</body></methods><methods><class-id>Store.Glorp.StoreAutoReplicatorSystem class</class-id> <category>convenience</category><body package="StoreForGlorpReplicationUI">replicateAll	"self replicateAll"	self current autoReplicator replicateAll.</body><body package="StoreForGlorpReplicationUI">startPeriodicReplication	"self startPeriodicReplication"	self current autoReplicator startPeriodicReplication.</body><body package="StoreForGlorpReplicationUI">stopPeriodicReplication	"self startPeriodicReplication"	self current autoReplicator stopPeriodicReplication.</body></methods><methods><class-id>Store.Glorp.StoreAutoReplicatorSystem class</class-id> <category>instance creation</category><body package="StoreForGlorpReplicationUI">new	^super new initialize.</body></methods><methods><class-id>Store.Glorp.StoreAutoReplicatorSystem class</class-id> <category>settings</category><body package="StoreForGlorpReplicationUI">useProgressDialogs	useProgressDialogs isNil ifTrue: [useProgressDialogs := true].		^useProgressDialogs.</body><body package="StoreForGlorpReplicationUI">useProgressDialogs: aBoolean	useProgressDialogs := aBoolean.</body></methods><methods><class-id>Store.Glorp.FullTranscriptLog</class-id> <category>events-auto replicator</category><body package="StoreForGlorpReplicationUI">dumpHeadlessErrorLog	| headless |	headless := Dialect smalltalkAt: #HeadlessImage ifAbsent: [^self].	headless current dumpStackToTranscript: thisContext label: 'error'.</body></methods><methods><class-id>Store.Glorp.UI.ReplicationUI class</class-id> <category>resources</category><body package="StoreForGlorpReplicationUI">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Replication' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Replicate Selected' 							#value: #replicate 							#shortcutKeyCharacter: $r 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Settings' 							#value: #openSettings ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Options' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Replicate Recursively' 							#value: #toggleReplicateRecursively 							#indication: true 							#indicationSelector: #shouldReplicateRecursively ) 						#(#{UI.MenuItem} 							#rawLabel: 'Skip Old Versions' 							#value: #toggleSkipOldVersions 							#indication: true 							#indicationSelector: #shouldSkipOldVersions ) 						#(#{UI.MenuItem} 							#rawLabel: 'Fix Existing Versions' 							#value: #toggleFixExistingVersions 							#indication: false 							#indicationSelector: #shouldFixExistingVersions ) 						#(#{UI.MenuItem} 							#rawLabel: 'Replicate Only Original Versions' 							#value: #toggleReplicateOnlyOriginalVersions 							#indication: false 							#indicationSelector: #shouldReplicateOnlyOriginalVersions ) ) #(4 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Help' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Help' 							#value: #openHelp ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body><body package="StoreForGlorpReplicationUI">versionListMenu	"Tools.MenuEditor new openOnClass: self andSelector: #versionListMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Browse' 				#value: #browseVersion 				#enablementSelector: #versionIsSelected ) 			#(#{UI.MenuItem} 				#rawLabel: 'Inspect' 				#value: #inspectSelected 				#enablementSelector: #versionIsSelected ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Store.Glorp.UI.ReplicationUI class</class-id> <category>interface specs</category><body package="StoreForGlorpReplicationUI">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionType #cascade #openType #cascade #sizeAutoSave true ) 			#label: 'Replication' 			#bounds: #(#{Graphics.Rectangle} 469 419 1280 1024 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutOrigin} -250 1 94 0 ) 					#name: #Label2 					#label: #targetDatabaseLabel ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -135 1 93 0 -3 1 117 0 ) 					#name: #MenuButton2 					#model: #targetLogin 					#helpText: 'To which database should we write?' 					#menu: #databaseMenu ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.7 189 0.16 -2 0.75 189 0.27 ) 					#name: #ActionButton1 					#model: #replicate 					#helpText: 'Click this to add the selected pundle(s) or pundle version(s) to the list for replication' 					#label: '&gt;&gt;' 					#isDefault: false 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 124 0 0 0.340741 0 0.829752 ) 					#name: #List1 					#flags: 15 					#model: #pundleList 					#helpText: 'This displays the list of bundle/package names that match the criteria from the upper section.' 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 3 1 13 16 ) 					#name: #ActionButton2 					#model: #inspect 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 23 3 ) 					#name: #CheckBox1 					#model: #topLevelOnly 					#helpText: 'Should we retrieve only top level items, meaning things not contained by a bundle.' 					#label: 'Top Level Only' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.83 0 0.7 0 1 ) 					#name: #Comment 					#model: #selectedItemComment 					#helpText: 'The comment for the selected bundle/package or version.' 					#isReadOnly: true 					#tabRequiresControl: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #allowColumnReordering true #rowSize 20 ) 					#layout: #(#{Graphics.LayoutFrame} 0 0.340741 124 0 0 0.7 0 0.829752 ) 					#name: #Dataset1 					#model: #versionList 					#menu: #versionListMenu 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow version' 							#label: 'Version' 							#labelIsImage: false 							#width: 74 							#rendererType: #Text 							#editorType: #None 							#noScroll: false 							#labelsAsButtons: true ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow localTimestamp' 							#label: 'Date' 							#labelIsImage: false 							#width: 83 							#rendererType: #Text 							#editorType: #None 							#type: #timestamp 							#noScroll: false 							#labelsAsButtons: true ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow username' 							#label: 'Publisher' 							#labelIsImage: false 							#width: 66 							#rendererType: #Text 							#editorType: #None 							#noScroll: false 							#labelsAsButtons: true ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow name' 							#label: 'Name' 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false 							#labelsAsButtons: true ) ) 					#multipleSelections: true 					#labelsAsButtons: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.751852 124 0 0 1.00247 0 0.829752 ) 					#name: #List2 					#model: #replicationList 					#helpText: 'This shows the list of things being replicated. Replication happens in a background process.' 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 169 28 ) 					#name: #CheckBox2 					#model: #queryClassName 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Defines Class' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 253 2 457 25 ) 					#name: #InputField1 					#model: #queryPundleNameText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Find pundles whose name matches this.' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 465 54 ) 					#name: #CheckBox3 					#model: #queryMethodName 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Defines Method' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 465 2 ) 					#name: #CheckBox7 					#model: #queryPublishDate 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Published in the last (days)' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 465 28 ) 					#name: #CheckBox9 					#model: #queryPublisher 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Published By' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 169 2 ) 					#name: #CheckBox10 					#model: #queryPundleName 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Named' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 271 27 457 52 ) 					#name: #InputField5 					#model: #queryClassNameText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Find pundles that define this class. Note that, unlike method/shared queries, this is a *short* classname.' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 588 0 51 0 -3 1 76 0 ) 					#name: #InputField7 					#model: #queryMethodNameText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Find pundles that define a method (class or instance) matching this name.' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 651 0 2 0 -3 1 24 0 ) 					#name: #InputField3 					#model: #queryPublishDateText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Has this been published in the last N days.' 					#type: #number 					#formatString: '0' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 567 0 26 0 -3 1 49 0 ) 					#name: #InputField10 					#model: #queryPublisherText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Things that have a version published by someone matching this name.' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.75 30 0.83 -15 1 -15 1 ) 					#name: #ActionButton3 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #red ) ) 					#model: #stop 					#helpText: 'Hit this button to stop replication. Note: you''ll get a walkback.' 					#label: 'STOP!' 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 23 25 ) 					#name: #CheckBox12 					#model: #retrieveBundles 					#helpText: 'Should we retrieve bundles?' 					#label: 'Bundles' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 23 47 ) 					#name: #CheckBox13 					#model: #retrievePackages 					#helpText: 'Should we retrieve packages?' 					#label: 'Packages' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 169 54 ) 					#name: #CheckBox14 					#model: #queryMethodsInClass 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Defines Methods In' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 302 54 458 78 ) 					#name: #InputField11 					#model: #queryMethodsInClassText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Find pundles that define methods in the given class. Note that for class methods, use "%Name class". Note: This is the long class name, so "%.ClassName" is a good idea.' ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.83 0 0.70037 2 0.83 ) 					#name: #ResizingSplitter1 					#flags: 8 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'List1 Dataset1 ResizingSplitter2' 					#belowWidgets: 'Comment' ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.340321 195 0 2 0.340321 0 0.83 ) 					#name: #ResizingSplitter2 					#flags: 8 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'List1' 					#belowWidgets: 'Dataset1' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.75 5 0.83 ) 					#name: #CheckBox6 					#model: #replicateRecursively 					#label: 'Replicate Recursively' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Core.Point} 4 94 ) 					#name: #Label1 					#label: #sourceDatabaseLabel ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.Rectangle} 113 95 241 118 ) 					#name: #MenuButton1 					#model: #sourceLogin 					#helpText: 'From which database should we read?' 					#menu: #databaseMenu ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 261 0 95 0 0 0 ) 					#name: #ActionButton4 					#model: #refresh 					#helpText: 'Refresh the main list of bundle/package names' 					#label: 'Refresh Source List' 					#defaultable: true ) ) ) )</body><body package="StoreForGlorpReplicationUI">windowSpecFull	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #positionType #cascade #openType #cascade #sizeAutoSave true ) 			#label: 'Replication' 			#bounds: #(#{Graphics.Rectangle} 213 163 1024 768 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.Rectangle} 15 20 143 43 ) 					#name: #MenuButton1 					#model: #sourceLogin 					#helpText: 'From which database should we read?' 					#menu: #databaseMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 22 -2 ) 					#name: #Label1 					#label: 'Source Database' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 17 42 ) 					#name: #Label2 					#label: 'Target Database' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.Rectangle} 13 65 142 89 ) 					#name: #MenuButton2 					#model: #targetLogin 					#helpText: 'To which database should we write?' 					#menu: #databaseMenu ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.7 195 0.16 -2 0.75 195 0.27 ) 					#name: #ActionButton1 					#model: #replicate 					#helpText: 'Click this to add the selected pundle(s) or pundle version(s) to the list for replication' 					#label: '&gt;&gt;' 					#isDefault: false 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 195 0 0 0.340321 0 0.83 ) 					#name: #List1 					#flags: 15 					#model: #pundleList 					#helpText: 'This displays the list of bundle/package names that match the criteria from the upper section.' 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 3 1 13 16 ) 					#name: #ActionButton2 					#model: #inspect 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 18 91 ) 					#name: #CheckBox1 					#model: #topLevelOnly 					#helpText: 'Should we retrieve only top level items, meaning things not contained by a bundle.' 					#label: 'Top Level Only' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.83 0 0.7 0 1 ) 					#name: #Comment 					#model: #selectedItemComment 					#helpText: 'The comment for the selected bundle/package or version.' 					#isReadOnly: true 					#tabRequiresControl: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #allowColumnReordering true #rowSize 20 ) 					#layout: #(#{Graphics.LayoutFrame} 0 0.340321 195 0 0 0.7 0 0.83 ) 					#name: #Dataset1 					#model: #versionList 					#menu: #versionListMenu 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow version' 							#label: 'Version' 							#labelIsImage: false 							#width: 74 							#rendererType: #Text 							#editorType: #None 							#noScroll: false 							#labelsAsButtons: true ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow timestamp' 							#label: 'Date' 							#labelIsImage: false 							#width: 83 							#rendererType: #Text 							#editorType: #None 							#type: #timestamp 							#noScroll: false 							#labelsAsButtons: true ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow username' 							#label: 'Publisher' 							#labelIsImage: false 							#width: 66 							#rendererType: #Text 							#editorType: #None 							#noScroll: false 							#labelsAsButtons: true ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow name' 							#label: 'Name' 							#labelIsImage: false 							#width: 80 							#editorType: #InputField 							#noScroll: false 							#labelsAsButtons: true ) ) 					#multipleSelections: true 					#labelsAsButtons: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.75 195 0 0 1 0 0.83 ) 					#name: #List2 					#model: #replicationList 					#helpText: 'This shows the list of things being replicated. Replication happens in a background process.' 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 166 26 ) 					#name: #CheckBox2 					#model: #queryClassName 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Defines Class' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 250 1 454 24 ) 					#name: #InputField1 					#model: #queryPundleNameText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Find pundles whose name matches this.' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 263 155 455 180 ) 					#name: #InputField2 					#flags: 40 					#model: #queryPropertyText2 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 166 78 ) 					#name: #CheckBox3 					#model: #queryMethodName 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Method' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 166 104 ) 					#name: #CheckBox4 					#model: #querySharedName 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Shared' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 166 130 ) 					#name: #CheckBox5 					#flags: 32 					#model: #queryProperty 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Property with Name' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 463 12 ) 					#name: #CheckBox7 					#model: #queryPublishDate 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Published in the last (days)' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 465 118 ) 					#name: #CheckBox8 					#model: #queryArbitrary 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Arbitrary Query' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 463 38 ) 					#name: #CheckBox9 					#model: #queryPublisher 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Published By' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 166 0 ) 					#name: #CheckBox10 					#model: #queryPundleName 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Named' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 303 130 454 154 ) 					#name: #InputField4 					#flags: 40 					#model: #queryPropertyText1 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'This lets you query by property names/values. We can''t do this against the database, so it will need to be done in-memory. Not working yet.' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 268 26 454 51 ) 					#name: #InputField5 					#model: #queryClassNameText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Find pundles that define this class. Note that, unlike method/shared queries, this is a *short* classname.' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 234 105 454 130 ) 					#name: #InputField6 					#model: #querySharedNameText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Find pundles that define a shared variable matching this name.' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 236 79 454 104 ) 					#name: #InputField7 					#model: #queryMethodNameText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Find pundles that define a method (class or instance) matching this name.' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 463 65 ) 					#name: #CheckBox11 					#model: #queryClassWithMethod 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Class' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 524 0 63 0 -5 1 87 0 ) 					#name: #InputField8 					#model: #queryClassWithMethodText1 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Find classes with the specified method. This is a long name, so a leading "%." is a good idea. Note that if you want class methods you should specify "%.ClassName class"' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 470 88 ) 					#name: #Label3 					#label: 'with method' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 556 0 91 0 -5 1 116 0 ) 					#name: #InputField9 					#model: #queryClassWithMethodText2 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 184 154 ) 					#name: #Label4 					#flags: 32 					#label: 'with value' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 465 0 141 0 -5 1 186 0 ) 					#name: #TextEditor2 					#model: #queryArbitraryText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Completely arbitrary query text, in the form of a block. You''d better know what you''re doing.... Note that some queries can be very slow.' 					#tabRequiresControl: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 649 0 14 0 -5 1 36 0 ) 					#name: #InputField3 					#model: #queryPublishDateText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Has this been published in the last N days.' 					#type: #number 					#formatString: '0' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 565 38 767 61 ) 					#name: #InputField10 					#model: #queryPublisherText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Things that have a version published by someone matching this name.' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.75 30 0.83 -15 1 -15 1 ) 					#name: #ActionButton3 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #red ) ) 					#model: #stop 					#helpText: 'Hit this button to stop replication. Note: you''ll get a walkback.' 					#label: 'STOP!' 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 18 111 ) 					#name: #CheckBox12 					#model: #retrieveBundles 					#helpText: 'Should we retrieve bundles?' 					#label: 'Bundles' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 18 130 ) 					#name: #CheckBox13 					#model: #retrievePackages 					#helpText: 'Should we retrieve packages?' 					#label: 'Packages' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 166 52 ) 					#name: #CheckBox14 					#model: #queryMethodsInClass 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#label: 'Defines Methods In' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 299 53 455 77 ) 					#name: #InputField11 					#model: #queryMethodsInClassText 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateSourceItems ) 					#helpText: 'Find pundles that define methods in the given class. Note that for class methods, use "%Name class". Note: This is the long class name, so "%.ClassName" is a good idea.' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 17 171 105 194 ) 					#name: #ActionButton4 					#model: #refresh 					#helpText: 'Refresh the main list of bundle/package names' 					#label: 'Refresh' 					#defaultable: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -2 0.83 0 0.70037 2 0.83 ) 					#name: #ResizingSplitter1 					#flags: 8 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'List1 Dataset1 ResizingSplitter2' 					#belowWidgets: 'Comment' ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.340321 195 0 2 0.340321 0 0.83 ) 					#name: #ResizingSplitter2 					#flags: 8 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'List1' 					#belowWidgets: 'Dataset1' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.75 5 0.83 ) 					#name: #CheckBox6 					#model: #replicateRecursively 					#label: 'Replicate Recursively' ) ) ) )</body></methods><methods><class-id>Store.Glorp.UI.ReplicatorRulesPage class</class-id> <category>interface specs</category><body package="StoreForGlorpReplicationUI">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1054 738 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 30 0 0 1 0 1 ) 					#name: #editorSubcanvas 					#flags: 0 ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 0 100 30 ) 					#name: #autoFill 					#model: #autoFill 					#label: 'Auto Fill' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Store.Glorp.UI.StoreForGlorpReplicationSettingsDomain class</class-id> <category>settings</category><body package="StoreForGlorpReplicationUI">replicationRuleList	&lt;setting: #(storeForGlorp replicationRules rulesList)&gt;	^((SequenceSetting of: StringSetting) on: StoreAutoReplicatorSystem current aspect: #ruleStrings)		label:  'Replication Rule List';		helpText: 'This is the list of things to replicate to keep in sync between different store User interfaces. The list is in the slightly obscure format of text lines, comma-separated, listing B/P (for bundle or package, the name of the bundle or package, the name of the source database, and the name of the target database. These names must correspond to the names of saved store logins. So, e.g.B,Glorp,local postgres,cst,bearwill keep the database named "local postgres" in sync by periodically replicating versions of the Bundle named "Glorp" between the databases "local postgres" and "cst" and between "local postgres" and "bear".To run the replication once, evaluate   StoreAutoReplicatorSystem replicateAll.To start a process that periodically replicates, evaluate    StoreAutoReplicatorSystem startPeriodicReplication.To stop it, evaluate    StoreAutoReplicatorSystem stopPeriodicReplication.To control the period of replication, evaluate    StoreAutoReplicatorSystem current autoReplicator period: 60.Where the argument represents the number of minutes between replications.To run replication from the command line, you can command line options of the form  visual myimage.im -replicationPeriod 120 -replicationRules: ''c:\vw\myReplicationRules.txt'' -replicate'</body><body package="StoreForGlorpReplicationUI">storeForGlorp10ReplicationLog	&lt;setting: #(storeForGlorp replication2 replicationLog)&gt;	| logs keys labels setting |	logs := NoReplicationLog withAllSubclasses.	keys := logs collect: [ :e | e name ].	labels := keys collect: [ :e | e asString ].	setting := EnumerationSetting		keys: keys		choices: logs		labels: labels.	^(setting on: StoreAutoReplicatorSystem current aspect: #useLogType)		label: 'Replication Log' ;		helpText: 'What kind of logging should replication do.'</body><body package="StoreForGlorpReplicationUI">storeForGlorp20ReplicationPeriod	&lt;setting: #(storeForGlorp replication2 replicationPeriod)&gt;	^(NumberSetting 			on: StoreAutoReplicatorSystem current			aspect: #period)		default: 60;		label: 'Replication Period' ;		helpText: 'This determines the number of minutes between replications.'</body><body package="StoreForGlorpReplicationUI">storeForGlorp25ReplicationCutOffDate	&lt;setting: #(storeForGlorp replication2 replicationCutOffDate)&gt;	^(DateSetting 			on: StoreAutoReplicator default			aspect: #cutOffDate)		default: nil;		label: 'Replication Cut Off Date' ;		helpText: 'Replicator will skip any versions older than the cut off date.'</body><body package="StoreForGlorpReplicationUI">storeForGlorp30SkipOldVersions	&lt;setting: #(storeForGlorp replication2 skipOldVersions)&gt;	^(BooleanSetting 			on: StoreAutoReplicatorSystem current			aspect: #skipOldVersions)		default: false;		label: 'Skip Old Versions' ;		helpText: 'Should we replicate versions that are older than any of the already replicated versions? Turn this ON if you are replicating things only from a certain point in time onwards, ignoring the past versions. Note that if there is NO common version, it will replicate ALL versions. So if you plan to use this option to avoid replicating versions that have already been manually published, it is important to manually replicate over a single version first, which can serve to indicate where the "old" versions end'.</body><body package="StoreForGlorpReplicationUI">storeForGlorp35shouldFixExistingVersions	&lt;setting: #(storeForGlorp replication2 shouldFixExistingVersions)&gt;	^(BooleanSetting 			on: StoreAutoReplicatorSystem current			aspect: #shouldFixExistingVersions)		default: false;		label: 'Fix Existing Versions' ;		helpText: 'Should we fix versions already in the target repository. If on, this does two things. First, if a version in the target repository has a nil previous version, and the correct previous one is also present in the target, it will fix up the reference. Second, if the blessings in the source database have been added to since the version was copied over, it will add the blessings to the target version as well. Note that this can slow down replication, as it may require a significant amount of extra work.'.</body><body package="StoreForGlorpReplicationUI">storeForGlorp37replicateOnlyOriginalVersions	&lt;setting: #(storeForGlorp replication2 replicateOnlyOriginalVersions)&gt;	^(BooleanSetting 			on: StoreAutoReplicatorSystem current			aspect: #shouldReplicateOnlyOriginalVersions)		default: false;		label: 'Replicate Only Original Versions' ;		helpText: 'If this option is set, then versions will not be re-replicated out of the source database. That is, suppose that we have replication set up between our local database A, and two other databases B and C. A version published in A, will be replicated to both B and C. But a version published in B, then replicated to A, will not be published into C. Note that this relies on the replication notice blessings, so older versions which do not have these blessings will not be skipped in this way.'.</body><body package="StoreForGlorpReplicationUI">storeForGlorp40StartPeriodicReplication	&lt;setting: #(storeForGlorp replication2 startPeriodicReplication)&gt;	^(BooleanSetting 			on: StoreAutoReplicatorSystem current			aspect: #shouldReplicate)		default: false;		label: 'Run Periodic Background Replicator' ;		helpText: 'This starts or stops a periodic replication according to the rules defined in StoreForGlorpReplicationSettingsDomain'</body><body package="StoreForGlorpReplicationUI">storeForGlorp50UseProgressDialogs	&lt;setting: #(storeForGlorp replication2 useProgressDialogs)&gt;	^(BooleanSetting 			on: StoreAutoReplicatorSystem			aspect: #useProgressDialogs)		default: false;		label: 'Use Progress Dialogs' ;		helpText: 'When publishing, should we use a progress dialog, or just log to the Transcript'</body></methods><methods><class-id>Store.Glorp.UI.StoreForGlorpReplicationSettingsDomain class</class-id> <category>pages</category><body package="StoreForGlorpReplicationUI">replicationParametersPage	&lt;settingsPage: #(store replication)&gt;	^ModularSettingsPage new		label: 'Replication';		icon: (ToolbarIconLibrary visualFor: #storeForGlorp);		settings: (self settingsWithPrefix: #(storeForGlorp replication2))</body><body package="StoreForGlorpReplicationUI">replicationRulePage		&lt;settingsPage: #(#store #replication #replicationRules)&gt;	^(ReplicatorRulesPage new)		label: 'Auto-Replication Rules';		icon: (ToolbarIconLibrary visualFor: #storeForGlorp);		setting:				(self settingWithId: #(#storeForGlorp #replicationRules #rulesList))</body></methods><methods><class-id>Store.Glorp.UI.DateSettingModule class</class-id> <category>interface specs</category><body package="StoreForGlorpReplicationUI">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 484 414 784 439 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.5 0 0 0 1 25 0 ) 					#name: #inputField 					#model: #valueHolder 					#type: #date ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0 25 0 0 1 ) 					#name: #label 					#label: 					#(#{Kernel.UserMessage} 						#key: #Label 						#defaultString: 'Label' 						#catalogID: #labels ) ) ) ) )</body></methods><methods><class-id>Store.Glorp.StoreAutoReplicatorSystem</class-id> <category>command-line options</category><body package="StoreForGlorpReplicationUI">commandLineAllVersions	"Set the option whether to replicate out only versions that originated in this database or not"	&lt;option: '-replicateAllVersions'&gt;	self shouldReplicateOnlyOriginalVersions: false.</body><body package="StoreForGlorpReplicationUI">commandLineDontSkipOldVersions	"Set the option whether to skip old versions or not"	&lt;option: '-noskip'&gt;	self skipOldVersions: false.</body><body package="StoreForGlorpReplicationUI">commandLineLauncherFeedbackLog	"Use the launcher feedback mechanism for logging (odd to use that one from the command line, as it assumes you have a development environment running with a GUI)"	&lt;option: '-replicationLogLauncherFeedback'&gt;	self useLogType: Store.Glorp.UI.LauncherFeedback.</body><body package="StoreForGlorpReplicationUI">commandLineOnlyOriginalVersions	"Set the option whether to replicate out only versions that originated in this database or not"	&lt;option: '-replicateOnlyOriginalVersions'&gt;	self shouldReplicateOnlyOriginalVersions: true.</body><body package="StoreForGlorpReplicationUI">commandLineSetNoLog	"Turn off replication logging"	&lt;option: '-replicationNoLog'&gt;	self useLogType: Store.Glorp.NoReplicationLog.</body><body package="StoreForGlorpReplicationUI">commandLineSetReplicationPeriod: aStream	"Set the frequency of replication"	&lt;option: '-replicationPeriod'&gt;	| args period |	args := CommandLineInterest argumentsFrom: aStream.	args isEmpty ifTrue: [Transcript cr; show: 'Invalid argument for -replicationPeriod'. ^self].	period := args first asNumber truncated.	period &lt;= 0 ifTrue: [Transcript cr; show: 'Invalid argument for -replicationPeriod'. ^self].	self period: period.</body><body package="StoreForGlorpReplicationUI">commandLineSetTranscriptLog	"Use the full transcript logger"	&lt;option: '-replicationLogToTranscript'&gt;	self useLogType: FullTranscriptLog.</body><body package="StoreForGlorpReplicationUI">commandLineSkipOldVersions	"Set the option whether to skip old versions or not"	&lt;option: '-skip'&gt;	self skipOldVersions: true.</body><body package="StoreForGlorpReplicationUI">dontFixOldVersions	"Set the option whether to fix up old versions or not"	&lt;option: '-nofix'&gt;	self shouldFixExistingVersions: false.</body><body package="StoreForGlorpReplicationUI">dontReplicate	"Don't run replication automatically. I'm not actually sure why you'd use this when starting up a replicator image, but here for completeness"	&lt;option: '-noreplicate'&gt;	self shouldReplicate: false.</body><body package="StoreForGlorpReplicationUI">fixOldVersions	"Set the option whether to fix up old versions or not"	&lt;option: '-fix'&gt;	self shouldFixExistingVersions: true.</body><body package="StoreForGlorpReplicationUI">replicate	"Run replication automatically."	&lt;option: '-replicate'&gt;	self shouldReplicate: true.</body><body package="StoreForGlorpReplicationUI">replicateOnce	"Run replication automatically, but only once and then quit the image"	&lt;option: '-replicateOnce'&gt;	self quitAfterReplicating: true.	self shouldReplicate: true.</body><body package="StoreForGlorpReplicationUI">replicationRules: aStream	"Indicate the file that we use to read our replication rules. Note that this will be re-read before each replication"	&lt;option: '-replicationRules'&gt;	replicationRuleFileName := aStream next.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="StoreForGlorpReplicationUI">isAutoReplicationON	^StoreAutoReplicatorSystem current shouldReplicate</body><body package="StoreForGlorpReplicationUI">openStoreForGlorpReplicator	&lt;menuItem: 'Replicate...'		icon: nil		nameKey: nil		menu: #(#menuBar #store)		position: 21.1&gt;	Store.Glorp.UI.ReplicationUI new open.</body><body package="StoreForGlorpReplicationUI">toggleAutoReplication	&lt;menuItem: 'Auto-Replicate'		icon: nil		nameKey: #toggleAutoReplication		enablement: nil		indication: #isAutoReplicationON		menu: #(#menuBar #store)		position: 21.7&gt;	| system |	system := StoreAutoReplicatorSystem current.	system shouldReplicate: system shouldReplicate not</body></methods><methods><class-id>Tools.ToolbarIconLibrary class</class-id> <category>resources</category><body package="StoreForGlorpReplicationUI">storeForGlorp20x20&lt;resource: #image&gt;^(Graphics.CachedImage on: ((Image extent: 20@20 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 256) at: 1 put: Graphics.ColorValue white; at: 2 put: Graphics.ColorValue yellow; at: 3 put: (Graphics.ColorValue scaledRed: 5823 scaledGreen: 7295 scaledBlue: 7871); at: 4 put: (Graphics.ColorValue scaledRed: 2559 scaledGreen: 5215 scaledBlue: 7007); at: 5 put: (Graphics.ColorValue scaledRed: 7359 scaledGreen: 7327 scaledBlue: 7615); at: 6 put: (Graphics.ColorValue scaledRed: 8127 scaledGreen: 7135 scaledBlue: 63); at: 7 put: (Graphics.ColorValue scaledRed: 4127 scaledGreen: 6559 scaledBlue: 7679); at: 8 put: (Graphics.ColorValue scaledRed: 8095 scaledGreen: 8095 scaledBlue: 8095); at: 9 put: (Graphics.ColorValue scaledRed: 8127 scaledGreen: 8127 scaledBlue: 8127); at: 10 put: (Graphics.ColorValue scaledRed: 7775 scaledGreen: 415 scaledBlue: 415); at: 11 put: (Graphics.ColorValue scaledRed: 7327 scaledGreen: 7327 scaledBlue: 7327); at: 12 put: (Graphics.ColorValue scaledRed: 8127 scaledGreen: 8127 scaledBlue: 8095); at: 13 put: (Graphics.ColorValue scaledRed: 7999 scaledGreen: 3967 scaledBlue: 159); at: 14 put: (Graphics.ColorValue scaledRed: 7967 scaledGreen: 7903 scaledBlue: 7935); at: 15 put: (Graphics.ColorValue scaledRed: 4447 scaledGreen: 6687 scaledBlue: 7775); at: 16 put: (Graphics.ColorValue scaledRed: 6111 scaledGreen: 6175 scaledBlue: 6239); at: 17 put: (Graphics.ColorValue scaledRed: 7999 scaledGreen: 7871 scaledBlue: 7935); at: 18 put: (Graphics.ColorValue scaledRed: 7807 scaledGreen: 7871 scaledBlue: 8031); at: 19 put: (Graphics.ColorValue scaledRed: 3679 scaledGreen: 1471 scaledBlue: 1599); at: 20 put: (Graphics.ColorValue scaledRed: 7071 scaledGreen: 7359 scaledBlue: 7327); at: 21 put: (Graphics.ColorValue scaledRed: 8127 scaledGreen: 6655 scaledBlue: 127); at: 22 put: (Graphics.ColorValue scaledRed: 4063 scaledGreen: 1887 scaledBlue: 2431); at: 23 put: (Graphics.ColorValue scaledRed: 4671 scaledGreen: 2751 scaledBlue: 2879); at: 24 put: (Graphics.ColorValue scaledRed: 1471 scaledGreen: 4895 scaledBlue: 7423); at: 25 put: (Graphics.ColorValue scaledRed: 7807 scaledGreen: 7839 scaledBlue: 7871); at: 26 put: (Graphics.ColorValue scaledRed: 3647 scaledGreen: 1503 scaledBlue: 1631); at: 27 put: (Graphics.ColorValue scaledRed: 4031 scaledGreen: 5855 scaledBlue: 7199); at: 28 put: (Graphics.ColorValue scaledRed: 7999 scaledGreen: 7999 scaledBlue: 7999); at: 29 put: (Graphics.ColorValue scaledRed: 3391 scaledGreen: 5727 scaledBlue: 7263); at: 30 put: (Graphics.ColorValue scaledRed: 7327 scaledGreen: 7327 scaledBlue: 7615); at: 31 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7647 scaledBlue: 0); at: 32 put: (Graphics.ColorValue scaledRed: 575 scaledGreen: 2751 scaledBlue: 5471); at: 33 put: (Graphics.ColorValue scaledRed: 2719 scaledGreen: 5279 scaledBlue: 7103); at: 34 put: (Graphics.ColorValue scaledRed: 3839 scaledGreen: 2239 scaledBlue: 3743); at: 35 put: (Graphics.ColorValue scaledRed: 1663 scaledGreen: 4767 scaledBlue: 7263); at: 36 put: (Graphics.ColorValue scaledRed: 3871 scaledGreen: 6207 scaledBlue: 7583); at: 37 put: (Graphics.ColorValue scaledRed: 8127 scaledGreen: 7167 scaledBlue: 95); at: 38 put: (Graphics.ColorValue scaledRed: 5983 scaledGreen: 0 scaledBlue: 0); at: 39 put: (Graphics.ColorValue scaledRed: 5855 scaledGreen: 0 scaledBlue: 0); at: 40 put: (Graphics.ColorValue scaledRed: 5599 scaledGreen: 7263 scaledBlue: 7903); at: 41 put: (Graphics.ColorValue scaledRed: 7647 scaledGreen: 383 scaledBlue: 383); at: 42 put: (Graphics.ColorValue scaledRed: 6943 scaledGreen: 6879 scaledBlue: 6751); at: 43 put: (Graphics.ColorValue scaledRed: 8159 scaledGreen: 8191 scaledBlue: 8191); at: 44 put: (Graphics.ColorValue scaledRed: 6271 scaledGreen: 6367 scaledBlue: 6303); at: 45 put: (Graphics.ColorValue scaledRed: 3967 scaledGreen: 6335 scaledBlue: 7615); at: 46 put: (Graphics.ColorValue scaledRed: 4095 scaledGreen: 6527 scaledBlue: 7679); at: 47 put: (Graphics.ColorValue scaledRed: 95 scaledGreen: 3551 scaledBlue: 6783); at: 48 put: (Graphics.ColorValue scaledRed: 6943 scaledGreen: 3903 scaledBlue: 127); at: 49 put: (Graphics.ColorValue scaledRed: 2879 scaledGreen: 2367 scaledBlue: 3903); at: 50 put: (Graphics.ColorValue scaledRed: 7391 scaledGreen: 7359 scaledBlue: 7647); at: 51 put: (Graphics.ColorValue scaledRed: 351 scaledGreen: 3199 scaledBlue: 6015); at: 52 put: (Graphics.ColorValue scaledRed: 4511 scaledGreen: 4607 scaledBlue: 4863); at: 53 put: (Graphics.ColorValue scaledRed: 5151 scaledGreen: 5567 scaledBlue: 5599); at: 54 put: (Graphics.ColorValue scaledRed: 7967 scaledGreen: 7967 scaledBlue: 7999); at: 55 put: (Graphics.ColorValue scaledRed: 2879 scaledGreen: 5791 scaledBlue: 7423); at: 56 put: (Graphics.ColorValue scaledRed: 5183 scaledGreen: 5439 scaledBlue: 5471); at: 57 put: (Graphics.ColorValue scaledRed: 7743 scaledGreen: 1311 scaledBlue: 223); at: 58 put: (Graphics.ColorValue scaledRed: 6847 scaledGreen: 7871 scaledBlue: 8063); at: 59 put: (Graphics.ColorValue scaledRed: 1695 scaledGreen: 2943 scaledBlue: 4767); at: 60 put: (Graphics.ColorValue scaledRed: 7967 scaledGreen: 7967 scaledBlue: 7967); at: 61 put: (Graphics.ColorValue scaledRed: 6559 scaledGreen: 6879 scaledBlue: 7423); at: 62 put: (Graphics.ColorValue scaledRed: 1631 scaledGreen: 2815 scaledBlue: 4351); at: 63 put: (Graphics.ColorValue scaledRed: 6175 scaledGreen: 6911 scaledBlue: 7583); at: 64 put: (Graphics.ColorValue scaledRed: 4351 scaledGreen: 1823 scaledBlue: 3295); at: 65 put: (Graphics.ColorValue scaledRed: 5791 scaledGreen: 6239 scaledBlue: 6271); at: 66 put: (Graphics.ColorValue scaledRed: 7615 scaledGreen: 7583 scaledBlue: 7583); at: 67 put: (Graphics.ColorValue scaledRed: 8127 scaledGreen: 6335 scaledBlue: 255); at: 68 put: (Graphics.ColorValue scaledRed: 4863 scaledGreen: 671 scaledBlue: 1247); at: 69 put: (Graphics.ColorValue scaledRed: 1663 scaledGreen: 5055 scaledBlue: 7167); at: 70 put: (Graphics.ColorValue scaledRed: 5279 scaledGreen: 895 scaledBlue: 863); at: 71 put: (Graphics.ColorValue scaledRed: 7967 scaledGreen: 4511 scaledBlue: 159); at: 72 put: (Graphics.ColorValue scaledRed: 8063 scaledGreen: 8063 scaledBlue: 8063); at: 73 put: (Graphics.ColorValue scaledRed: 2911 scaledGreen: 5407 scaledBlue: 7071); at: 74 put: (Graphics.ColorValue scaledRed: 6303 scaledGreen: 6047 scaledBlue: 5759); at: 75 put: (Graphics.ColorValue scaledRed: 2879 scaledGreen: 5279 scaledBlue: 7103); at: 76 put: (Graphics.ColorValue scaledRed: 8031 scaledGreen: 8063 scaledBlue: 8031); at: 77 put: (Graphics.ColorValue scaledRed: 2751 scaledGreen: 2847 scaledBlue: 4607); at: 78 put: (Graphics.ColorValue scaledRed: 575 scaledGreen: 3199 scaledBlue: 5791); at: 79 put: (Graphics.ColorValue scaledRed: 2367 scaledGreen: 5503 scaledBlue: 7327); at: 80 put: (Graphics.ColorValue scaledRed: 3199 scaledGreen: 5055 scaledBlue: 6911); at: 81 put: (Graphics.ColorValue scaledRed: 2719 scaledGreen: 5119 scaledBlue: 7039); at: 82 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 2367 scaledBlue: 5407); at: 83 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 2975 scaledBlue: 6271); at: 84 put: (Graphics.ColorValue scaledRed: 4703 scaledGreen: 5567 scaledBlue: 6399); at: 85 put: (Graphics.ColorValue scaledRed: 4543 scaledGreen: 4639 scaledBlue: 4607); at: 86 put: (Graphics.ColorValue scaledRed: 4735 scaledGreen: 2751 scaledBlue: 2879); at: 87 put: (Graphics.ColorValue scaledRed: 3135 scaledGreen: 5887 scaledBlue: 7455); at: 88 put: (Graphics.ColorValue scaledRed: 5631 scaledGreen: 6047 scaledBlue: 6079); at: 89 put: (Graphics.ColorValue scaledRed: 8159 scaledGreen: 6815 scaledBlue: 287); at: 90 put: (Graphics.ColorValue scaledRed: 3711 scaledGreen: 1087 scaledBlue: 2719); at: 91 put: (Graphics.ColorValue scaledRed: 4895 scaledGreen: 0 scaledBlue: 0); at: 92 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 2975 scaledBlue: 6207); at: 93 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 2687 scaledBlue: 6271); at: 94 put: (Graphics.ColorValue scaledRed: 8095 scaledGreen: 6079 scaledBlue: 95); at: 95 put: (Graphics.ColorValue scaledRed: 6143 scaledGreen: 7551 scaledBlue: 7967); at: 96 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 3103 scaledBlue: 6399); at: 97 put: (Graphics.ColorValue scaledRed: 6655 scaledGreen: 7775 scaledBlue: 8031); at: 98 put: (Graphics.ColorValue scaledRed: 5823 scaledGreen: 7391 scaledBlue: 7967); at: 99 put: (Graphics.ColorValue scaledRed: 6623 scaledGreen: 7615 scaledBlue: 7903); at: 100 put: (Graphics.ColorValue scaledRed: 6719 scaledGreen: 1215 scaledBlue: 127); at: 101 put: (Graphics.ColorValue scaledRed: 7647 scaledGreen: 7647 scaledBlue: 7871); at: 102 put: (Graphics.ColorValue scaledRed: 4639 scaledGreen: 6335 scaledBlue: 7391); at: 103 put: (Graphics.ColorValue scaledRed: 799 scaledGreen: 4511 scaledBlue: 6943); at: 104 put: (Graphics.ColorValue scaledRed: 4223 scaledGreen: 6623 scaledBlue: 7711); at: 105 put: (Graphics.ColorValue scaledRed: 3903 scaledGreen: 831 scaledBlue: 831); at: 106 put: (Graphics.ColorValue scaledRed: 7711 scaledGreen: 7647 scaledBlue: 7615); at: 107 put: (Graphics.ColorValue scaledRed: 5343 scaledGreen: 0 scaledBlue: 0); at: 108 put: (Graphics.ColorValue scaledRed: 8095 scaledGreen: 7103 scaledBlue: 0); at: 109 put: (Graphics.ColorValue scaledRed: 6015 scaledGreen: 3583 scaledBlue: 2559); at: 110 put: (Graphics.ColorValue scaledRed: 7903 scaledGreen: 7999 scaledBlue: 7999); at: 111 put: (Graphics.ColorValue scaledRed: 6559 scaledGreen: 0 scaledBlue: 0); at: 112 put: (Graphics.ColorValue scaledRed: 7839 scaledGreen: 7903 scaledBlue: 8031); at: 113 put: (Graphics.ColorValue scaledRed: 8127 scaledGreen: 6623 scaledBlue: 95); at: 114 put: (Graphics.ColorValue scaledRed: 3327 scaledGreen: 2879 scaledBlue: 2879); at: 115 put: (Graphics.ColorValue scaledRed: 4287 scaledGreen: 255 scaledBlue: 255); at: 116 put: (Graphics.ColorValue scaledRed: 415 scaledGreen: 3807 scaledBlue: 6655); at: 117 put: (Graphics.ColorValue scaledRed: 7039 scaledGreen: 7327 scaledBlue: 7295); at: 118 put: (Graphics.ColorValue scaledRed: 7519 scaledGreen: 7423 scaledBlue: 7679); at: 119 put: (Graphics.ColorValue scaledRed: 4415 scaledGreen: 255 scaledBlue: 223); at: 120 put: (Graphics.ColorValue scaledRed: 1663 scaledGreen: 4895 scaledBlue: 7423); at: 121 put: (Graphics.ColorValue scaledRed: 5119 scaledGreen: 639 scaledBlue: 735); at: 122 put: (Graphics.ColorValue scaledRed: 5823 scaledGreen: 7327 scaledBlue: 7903); at: 123 put: (Graphics.ColorValue scaledRed: 6143 scaledGreen: 0 scaledBlue: 0); at: 124 put: (Graphics.ColorValue scaledRed: 7903 scaledGreen: 7903 scaledBlue: 7903); at: 125 put: (Graphics.ColorValue scaledRed: 4543 scaledGreen: 4607 scaledBlue: 4607); at: 126 put: (Graphics.ColorValue scaledRed: 8127 scaledGreen: 8095 scaledBlue: 8095); at: 127 put: (Graphics.ColorValue scaledRed: 2143 scaledGreen: 4671 scaledBlue: 6911); at: 128 put: (Graphics.ColorValue scaledRed: 6335 scaledGreen: 7615 scaledBlue: 7999); at: 129 put: (Graphics.ColorValue scaledRed: 7839 scaledGreen: 287 scaledBlue: 287); at: 130 put: (Graphics.ColorValue scaledRed: 7775 scaledGreen: 319 scaledBlue: 319); at: 131 put: (Graphics.ColorValue scaledRed: 7871 scaledGreen: 1471 scaledBlue: 383); at: 132 put: (Graphics.ColorValue scaledRed: 7423 scaledGreen: 4383 scaledBlue: 0); at: 133 put: (Graphics.ColorValue scaledRed: 7839 scaledGreen: 1279 scaledBlue: 191); at: 134 put: (Graphics.ColorValue scaledRed: 1759 scaledGreen: 4607 scaledBlue: 6911); at: 135 put: (Graphics.ColorValue scaledRed: 8127 scaledGreen: 7199 scaledBlue: 127); at: 136 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 3999 scaledBlue: 6751); at: 137 put: (Graphics.ColorValue scaledRed: 4159 scaledGreen: 1023 scaledBlue: 1023); at: 138 put: (Graphics.ColorValue scaledRed: 8159 scaledGreen: 8127 scaledBlue: 8127); at: 139 put: (Graphics.ColorValue scaledRed: 1759 scaledGreen: 4543 scaledBlue: 7007); at: 140 put: (Graphics.ColorValue scaledRed: 5343 scaledGreen: 5663 scaledBlue: 5663); at: 141 put: (Graphics.ColorValue scaledRed: 7967 scaledGreen: 5471 scaledBlue: 0); at: 142 put: (Graphics.ColorValue scaledRed: 3359 scaledGreen: 2879 scaledBlue: 2879); at: 143 put: (Graphics.ColorValue scaledRed: 1055 scaledGreen: 4831 scaledBlue: 7103); at: 144 put: (Graphics.ColorValue scaledRed: 4639 scaledGreen: 5951 scaledBlue: 7103); at: 145 put: (Graphics.ColorValue scaledRed: 3071 scaledGreen: 2271 scaledBlue: 2239); at: 146 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 2047 scaledBlue: 5887); at: 147 put: (Graphics.ColorValue scaledRed: 5887 scaledGreen: 6815 scaledBlue: 7551); at: 148 put: (Graphics.ColorValue scaledRed: 4319 scaledGreen: 1311 scaledBlue: 1343); at: 149 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 831 scaledBlue: 639); at: 150 put: (Graphics.ColorValue scaledRed: 3231 scaledGreen: 927 scaledBlue: 2687); at: 151 put: (Graphics.ColorValue scaledRed: 5055 scaledGreen: 6079 scaledBlue: 7231); at: 152 put: (Graphics.ColorValue scaledRed: 4895 scaledGreen: 5311 scaledBlue: 5311); at: 153 put: (Graphics.ColorValue scaledRed: 5311 scaledGreen: 5599 scaledBlue: 5631); at: 154 put: (Graphics.ColorValue scaledRed: 2303 scaledGreen: 3263 scaledBlue: 4735); at: 155 put: (Graphics.ColorValue scaledRed: 5791 scaledGreen: 6335 scaledBlue: 7103); at: 156 put: (Graphics.ColorValue scaledRed: 6111 scaledGreen: 6111 scaledBlue: 6079); at: 157 put: (Graphics.ColorValue scaledRed: 3743 scaledGreen: 5247 scaledBlue: 6559); at: 158 put: (Graphics.ColorValue scaledRed: 2527 scaledGreen: 5215 scaledBlue: 7039); at: 159 put: (Graphics.ColorValue scaledRed: 4095 scaledGreen: 6431 scaledBlue: 7615); at: 160 put: (Graphics.ColorValue scaledRed: 8159 scaledGreen: 8159 scaledBlue: 8159); at: 161 put: (Graphics.ColorValue scaledRed: 7807 scaledGreen: 7647 scaledBlue: 7487); at: 162 put: (Graphics.ColorValue scaledRed: 7519 scaledGreen: 3903 scaledBlue: 0); at: 163 put: (Graphics.ColorValue scaledRed: 6975 scaledGreen: 6975 scaledBlue: 6975); at: 164 put: (Graphics.ColorValue scaledRed: 7199 scaledGreen: 7263 scaledBlue: 7615); at: 165 put: (Graphics.ColorValue scaledRed: 7295 scaledGreen: 7391 scaledBlue: 7679); at: 166 put: (Graphics.ColorValue scaledRed: 1887 scaledGreen: 4447 scaledBlue: 6751); at: 167 put: (Graphics.ColorValue scaledRed: 2591 scaledGreen: 1663 scaledBlue: 3423); at: 168 put: (Graphics.ColorValue scaledRed: 7839 scaledGreen: 383 scaledBlue: 383); at: 169 put: (Graphics.ColorValue scaledRed: 2271 scaledGreen: 4991 scaledBlue: 6943); at: 170 put: (Graphics.ColorValue scaledRed: 4223 scaledGreen: 1183 scaledBlue: 1183); at: 171 put: (Graphics.ColorValue scaledRed: 7327 scaledGreen: 7295 scaledBlue: 7583); at: 172 put: (Graphics.ColorValue scaledRed: 8031 scaledGreen: 8031 scaledBlue: 8031); at: 173 put: (Graphics.ColorValue scaledRed: 7999 scaledGreen: 3167 scaledBlue: 447); at: 174 put: (Graphics.ColorValue scaledRed: 5343 scaledGreen: 5759 scaledBlue: 5983); at: 175 put: (Graphics.ColorValue scaledRed: 3423 scaledGreen: 6047 scaledBlue: 7519); at: 176 put: (Graphics.ColorValue scaledRed: 7807 scaledGreen: 2111 scaledBlue: 1983); at: 177 put: (Graphics.ColorValue scaledRed: 5567 scaledGreen: 1343 scaledBlue: 1183); at: 178 put: (Graphics.ColorValue scaledRed: 5151 scaledGreen: 6559 scaledBlue: 7455); at: 179 put: (Graphics.ColorValue scaledRed: 5311 scaledGreen: 6687 scaledBlue: 7583); at: 180 put: (Graphics.ColorValue scaledRed: 6143 scaledGreen: 0 scaledBlue: 63); at: 181 put: (Graphics.ColorValue scaledRed: 1407 scaledGreen: 4991 scaledBlue: 7519); at: 182 put: (Graphics.ColorValue scaledRed: 6047 scaledGreen: 5823 scaledBlue: 5471); at: 183 put: (Graphics.ColorValue scaledRed: 5663 scaledGreen: 0 scaledBlue: 0); at: 184 put: (Graphics.ColorValue scaledRed: 351 scaledGreen: 3647 scaledBlue: 6687); at: 185 put: (Graphics.ColorValue scaledRed: 2015 scaledGreen: 4735 scaledBlue: 7039); at: 186 put: (Graphics.ColorValue scaledRed: 2591 scaledGreen: 5247 scaledBlue: 7007); at: 187 put: (Graphics.ColorValue scaledRed: 7167 scaledGreen: 7231 scaledBlue: 7583); at: 188 put: (Graphics.ColorValue scaledRed: 7775 scaledGreen: 255 scaledBlue: 255); at: 189 put: (Graphics.ColorValue scaledRed: 3615 scaledGreen: 5759 scaledBlue: 7167); at: 190 put: (Graphics.ColorValue scaledRed: 5887 scaledGreen: 7391 scaledBlue: 7935); at: 191 put: (Graphics.ColorValue scaledRed: 8095 scaledGreen: 8031 scaledBlue: 8063); at: 192 put: (Graphics.ColorValue scaledRed: 6367 scaledGreen: 5503 scaledBlue: 5727); at: 193 put: (Graphics.ColorValue scaledRed: 6079 scaledGreen: 6207 scaledBlue: 6239); at: 194 put: (Graphics.ColorValue scaledRed: 6207 scaledGreen: 6271 scaledBlue: 6303); at: 195 put: (Graphics.ColorValue scaledRed: 6367 scaledGreen: 6335 scaledBlue: 6367); at: 196 put: (Graphics.ColorValue scaledRed: 5407 scaledGreen: 2367 scaledBlue: 3167); at: 197 put: Graphics.ColorValue red; at: 198 put: (Graphics.ColorValue scaledRed: 5375 scaledGreen: 7199 scaledBlue: 7903); at: 199 put: (Graphics.ColorValue scaledRed: 7935 scaledGreen: 7999 scaledBlue: 8063); at: 200 put: (Graphics.ColorValue scaledRed: 7871 scaledGreen: 1919 scaledBlue: 287); at: 201 put: (Graphics.ColorValue scaledRed: 2815 scaledGreen: 2303 scaledBlue: 3711); at: 202 put: Graphics.ColorValue black; at: 203 put: Graphics.ColorValue black; at: 204 put: Graphics.ColorValue black; at: 205 put: Graphics.ColorValue black; at: 206 put: Graphics.ColorValue black; at: 207 put: Graphics.ColorValue black; at: 208 put: Graphics.ColorValue black; at: 209 put: Graphics.ColorValue black; at: 210 put: Graphics.ColorValue black; at: 211 put: Graphics.ColorValue black; at: 212 put: Graphics.ColorValue black; at: 213 put: Graphics.ColorValue black; at: 214 put: Graphics.ColorValue black; at: 215 put: Graphics.ColorValue black; at: 216 put: Graphics.ColorValue black; at: 217 put: Graphics.ColorValue black; at: 218 put: Graphics.ColorValue black; at: 219 put: Graphics.ColorValue black; at: 220 put: Graphics.ColorValue black; at: 221 put: Graphics.ColorValue black; at: 222 put: Graphics.ColorValue black; at: 223 put: Graphics.ColorValue black; at: 224 put: Graphics.ColorValue black; at: 225 put: Graphics.ColorValue black; at: 226 put: Graphics.ColorValue black; at: 227 put: Graphics.ColorValue black; at: 228 put: Graphics.ColorValue black; at: 229 put: Graphics.ColorValue black; at: 230 put: Graphics.ColorValue black; at: 231 put: Graphics.ColorValue black; at: 232 put: Graphics.ColorValue black; at: 233 put: Graphics.ColorValue black; at: 234 put: Graphics.ColorValue black; at: 235 put: Graphics.ColorValue black; at: 236 put: Graphics.ColorValue black; at: 237 put: Graphics.ColorValue black; at: 238 put: Graphics.ColorValue black; at: 239 put: Graphics.ColorValue black; at: 240 put: Graphics.ColorValue black; at: 241 put: Graphics.ColorValue black; at: 242 put: Graphics.ColorValue black; at: 243 put: Graphics.ColorValue black; at: 244 put: Graphics.ColorValue black; at: 245 put: Graphics.ColorValue black; at: 246 put: Graphics.ColorValue black; at: 247 put: Graphics.ColorValue black; at: 248 put: Graphics.ColorValue black; at: 249 put: Graphics.ColorValue black; at: 250 put: Graphics.ColorValue black; at: 251 put: Graphics.ColorValue black; at: 252 put: Graphics.ColorValue black; at: 253 put: Graphics.ColorValue black; at: 254 put: Graphics.ColorValue black; at: 255 put: Graphics.ColorValue black; at: 256 put: Graphics.ColorValue black; yourself)) usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@FR:(14@@@@@@@@@@@@@@@@@[32R,&amp;V&lt;RBAO&amp; @@@@@@@@@@@AD&gt;X&amp;@''C*9N#(]3T:@@@@@@@@@@)H=^NW?E''#YDY%&lt;:0 @@@@@@@@@1*EZ1F!1J![]R$S6[@@@@@@@@@@R9Y;6%V51Q)%&amp;UE[T@@@@@@@@@A@LF@''8.G61BG&amp;.C,K&lt;@@@@@@@@D@0XB.CKC@U LQ D/QT$@@@@@@J(CA H"SJ&lt;AW\\I B!ZUQL@@@@@]Y4-@!\!%J0E@PD$NBV)U0@@@@@@TB19-C?D)0&amp;A  TE[&amp;"W@@@@@@BVH6E7LJDACK.D!''B3FX,@@@@@@A"-''H)MP80A@PDTX7Y10@@@@@@@@F''AL9''H^BY:-&amp;)2$EPJ@@@@@@@@@@AAJR,7E)NHD(5&lt;( @@@@@@@@@@@@@@@@A4PCRXC0(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@a'))) rendered: nil)</body><body package="StoreForGlorpReplicationUI">storeForGlorp20x20mask&lt;resource: #image&gt;^(Graphics.CachedImage on: ((Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 3 192 0 0 31 248 0 0 63 254 0 0 63 254 0 0 63 254 0 0 63 254 0 0 63 255 0 0 63 255 128 0 63 255 192 0 63 255 192 0 31 255 192 0 31 255 192 0 31 255 192 0 15 255 192 0 3 255 128 0 0 63 0 0 0 0 0 0 0 0 0 0])) rendered: nil)</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>actions</category><body package="StoreForGlorpReplicationUI">openGlorpReplicationUI	&lt;menuItem: 'Replicate...'		icon: nil		nameKey: #openGlorpReplicationUI		enablement: #isPundleSelected		indication: nil		menu: #(#pundleMenu)		position: 210.5&gt;	| replicationUI |	replicationUI := Store.Glorp.UI.ReplicationUI new.	replicationUI topLevelOnly value: false.	replicationUI queryPundleName value: true.	replicationUI queryPundleNameText value: self pundles first name.	replicationUI queryPublisher value: false.	replicationUI queryPublishDate value: false.		replicationUI retrieveBundles value: (self pundles first isBundle).	replicationUI retrievePackages value: (self pundles first isBundle not).	replicationUI open.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>StringSetting</name><environment>Tools</environment><super>Tools.SettingType</super><private>false</private><indexed-type>none</indexed-type><inst-vars>meaning </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings</category><attributes><package>Tools-Settings</package></attributes></class><class><name>StringSettingModule</name><environment>Tools</environment><super>Tools.ModularSettingsPageModule</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-UI</category><attributes><package>Tools-Settings</package></attributes></class><class><name>VisualWorksSettings</name><environment>Tools</environment><super>Tools.SettingsDomain</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-VW</category><attributes><package>Tools-Settings-VW</package></attributes></class><class><name>SequenceSettingPage</name><environment>Tools</environment><super>Tools.SettingsManagerPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listHolder workHolder helpText displayBlock acceptBlock postAcceptBlock isChangeOnly validationBlock hasChanges </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-UI</category><attributes><package>Tools-Settings</package></attributes></class><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>history future </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>NoReplicationLog</name><environment>Store.Glorp</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>operation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StoreForGlorpReplication</category><attributes><package>StoreForGlorpReplication</package></attributes></class><class><name>FullTranscriptLog</name><environment>Store.Glorp</environment><super>Store.Glorp.NoReplicationLog</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StoreForGlorpReplication</category><attributes><package>StoreForGlorpReplication</package></attributes></class><class><name>Subsystem</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>state canActivate prerequisites </inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>System-Subsystems</category><attributes><package>System-Subsystems</package></attributes></class></st-source>