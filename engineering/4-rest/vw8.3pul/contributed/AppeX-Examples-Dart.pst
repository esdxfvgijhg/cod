<?xml version="1.0"?><st-source><!-- Name: AppeX-Examples-DartNotice: Copyright 1999-2017 Cincom Systems, Inc.  All rights reserved.Comment: How to set up and use this example.Option 1. Use "Configure Web Server" tool to create a preconfigured DartFlipBook server. When the DartFlipBook server is first started (or if the downloaded Dart support directory 'flip-book' been deleted), the user will be prompted to download the support files from 'http://ftp.cincomsmalltalk.com/pub/appex/flip-book.zip' Open in a web browser url: http://localhost:8860//appex/flip-bookOption 2:Coding in Dart, converting to JavaScript1.  Download the Dart Editor fromhttps://www.dartlang.org/tools/download.html2.  Download the original source code fromhttps://github.com/bp74/StageXL_Samples/archive/master.zip(to observe the original version online, navigate to http://www.stagexl.org/samples/flipbook/index.html)3.  Open the Dart Editor, and use File...Open Existing Folder...StageXL_Samples-master.Edit the following file dart file StageXL_Samples-master\web\flipbook\index.dartby replacing it with the contents of the index.dart file provided in the flip-book.zip.4. Regenerate index.dart.js by running Menu...Tools...Pub Build(generates JS).5. Copy the needed files from the build directory (\StageXL_Samples-master\build\web\flipbook)to the directory structure image/appex/flip-book/index.dart.jsimage/appex/flip-book/images/walk.jsonimage/appex/flip-book/images/walk.pngimage/appex/flip-book/images/walk.jsonAddendum: Modifying Dart code and testing code changes in the Dart Editor environment1.  Carry out steps 1-3 above to download the Dart Editor, obtain the flipbook dart code,and update the flipbook code with the AppeX example enhancements.2.  Modify index.dart to contain the linevar compileForAppeX = false;  //instead of true, which is for serving index.html from AppeX.3.  Replace  StageXL_Samples-master\web\flipbook\index.html with the index.html file contained in flip-book.zip.4.  You can then select the index.dart file from within the Dart Editor and "Run in Dartium".5.  You can also regenerate index.dart.js by running Menu...Tools...Pub Build(generates JS), then select the index.dart file and  "Run as JavaScript".DbIdentifier: bear73DbTrace: 497864DbUsername: vdegenDbVersion: 8.3 - 4DevelopmentPrerequisites: #(#(#any 'Compression-Zip' '') #(#any 'AppeX-Tools' '') #(#any 'AppeX-Client' ''))PackageName: AppeX-Examples-DartParcel: #('AppeX-Examples-Dart')PrerequisiteDescriptions: #(#(#name 'Compression-Zip' #componentType #package) #(#name 'AppeX-Tools' #componentType #bundle) #(#name 'AppeX-Client' #componentType #package))PrerequisiteParcels: #(#('Compression-Zip' '') #('AppeX-Tools' '') #('AppeX-Client' ''))PrintStringCache: (8.3 - 4,vdegen)Version: 8.3 - 4Date: 3:30:55 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:30:55 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>FlipBook</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fileResponder walking forward </inst-vars><class-inst-vars>flipBookDirectory </class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Dart</package></attributes></class><comment><class-id>AppeX.FlipBook</class-id><body>Component that demonstrates serving and enhancing a Dart application with Appex.Instance Variables	fileResponder &lt;FileResponder&gt;  Enables the application to retrieve the files that support Amber.Class Instance Variables	flipBookDirectory &lt;String&gt;    The first level subdirectory at which this application is accessed on the Example server.  Used as the root directory of the fileResponder.</body></comment><class><name>FlipBookClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Dart</package></attributes></class><comment><class-id>AppeX.FlipBookClient</class-id><body>Javascript counterpart to FlipBook class</body></comment><methods><class-id>AppeX.FlipBook</class-id> <category>accessing</category><body package="AppeX-Examples-Dart">forward	^forward</body><body package="AppeX-Examples-Dart">forward: aBoolean	forward := aBoolean</body><body package="AppeX-Examples-Dart">walking	^walking</body><body package="AppeX-Examples-Dart">walking: aBoolean	walking := aBoolean</body></methods><methods><class-id>AppeX.FlipBook</class-id> <category>initialize-release</category><body package="AppeX-Examples-Dart">initialize		super initialize.	 	fileResponder := FileResponder new.	fileResponder rootDirectory: self class flipBookDirectory. 	fileResponder path: self path. 	self walking: false.	self forward: true</body></methods><methods><class-id>AppeX.FlipBook</class-id> <category>session - services</category><body package="AppeX-Examples-Dart">executeRequestFor: aRequestContext	("these files are pulled from cincom FTP server and are served as static files."	#('index.dart.js' 'walk.json' 'walk.webp' 'walk.png') includes: aRequestContext request url tail)		ifTrue: [			fileResponder executeRequestFor: aRequestContext.			aRequestContext  response contentDisposition:  'inline'.			^self		].	"the following eases iterative development using dartium while accessing AppeX FlipBook"	aRequestContext response header: 'Access-Control-Allow-Origin' value: '*'.	super executeRequestFor: aRequestContext</body></methods><methods><class-id>AppeX.FlipBook class</class-id> <category>accessing</category><body package="AppeX-Examples-Dart">applicationClientClass	^FlipBookClient</body><body package="AppeX-Examples-Dart">flipBookDirectory	"flipBookDirectory := nil"	flipBookDirectory ifNil: [flipBookDirectory := Application rootDirectory / 'flip-book' ].	^flipBookDirectory</body></methods><methods><class-id>AppeX.FlipBook class</class-id> <category>configuration</category><body package="AppeX-Examples-Dart">ensureDartDirectoryExists "self ensureDartDirectoryExists"	| zipStream |	self flipBookDirectory exists ifTrue: [^true].		(Dialog		choose: 'To run the Dart FlipBook Demo you need to download filesftp.cincomsmalltalk.com/pub/appex/flip-book.zip. Click on Download to download and unzip files in /appex/flip-book directory'		labels: (Array with: #Download &lt;&lt; #www &gt;&gt; 'Download' with: #Cancel &lt;&lt; #www &gt;&gt; 'Cancel')		values: #(true false)		default: true)			 ifFalse: [^false].		Cursor execute showWhile: [				'http://ftp.cincomsmalltalk.com/pub/appex/flip-book.zip' asURI 			readStreamDo: [ :socketStream :type |				zipStream := OS.Zip.Archive on: socketStream.				zipStream extractTo: Application rootDirectory ]		].	^true</body><body package="AppeX-Examples-Dart">registerAnnouncementsFrom: aServer	aServer		when: ListenerStarted		do: [ :announcement | self ensureDartDirectoryExists ifFalse: [announcement listener stop] ]		for: self.			Server		when: ServerRemoved		do: [ :ann | Server unsubscribe: self. aServer unsubscribe: self ]		for: self.</body></methods><methods><class-id>AppeX.FlipBook</class-id> <category>services</category><body package="AppeX-Examples-Dart">getForward	&lt;json: 'getForward'&gt;		^self forward</body><body package="AppeX-Examples-Dart">getWalking	&lt;json: 'getWalking'&gt;		^self walking</body><body package="AppeX-Examples-Dart">startWalking	&lt;json: 'startWalking'&gt;		self walking: true.	^self walking</body><body package="AppeX-Examples-Dart">stopWalking	&lt;json: 'stopWalking'&gt;		self walking: false.	^self walking</body><body package="AppeX-Examples-Dart">toggleForward	&lt;json: 'toggleForward'&gt;		self forward: self forward not.	^self forward</body><body package="AppeX-Examples-Dart">toggleWalking	&lt;json: 'toggleWalking'&gt;		self walking: self walking not.	^self walking</body></methods><methods><class-id>AppeX.FlipBook class</class-id> <category>html</category><body package="AppeX-Examples-Dart">bodyButtons	&lt;body: 50&gt;	"could do this in FlipBookClient&gt;&gt;buildHtml instead"	^'    &lt;button id="walkingButton"&gt; Start/Stop Walking &lt;/button&gt;    &lt;button id="forwardButton"&gt; Walk Forward/Backward &lt;/button&gt;'</body><body package="AppeX-Examples-Dart">bodyCanvas	&lt;body: 51&gt;	"could do this in FlipBookClient&gt;&gt;buildHtml instead"	^'	&lt;br&gt;    &lt;canvas id="stage" class="stage-full-window"&gt;&lt;/canvas&gt;'</body><body package="AppeX-Examples-Dart">bodyInstallApplication	&lt;body: 100&gt;	"This will call scripts that will call into Dart once everything else is loaded."	^'&lt;script&gt;document.getElementsByTagName("body")[0].onload = doAfterLoaded; &lt;/script&gt;'</body><body package="AppeX-Examples-Dart">headCss	&lt;head: 220&gt;	^'   &lt;link rel="stylesheet" href="index.css"&gt;'</body><body package="AppeX-Examples-Dart">headExternalLibraries	&lt;head: 200&gt;	^'     &lt;script src="index.dart.js"&gt;&lt;/script&gt;'</body><body package="AppeX-Examples-Dart">htmlTitle	&lt;htmlToken: #title&gt;	^ 'StageXL Flipbook Sample'</body><body package="AppeX-Examples-Dart">indexCss	&lt;css: 'index.css'&gt;	^ '/* stage-full-window */body.stage-full-window { margin: 0; padding: 0; overflow: hidden; }canvas.stage-full-window { width: 100%; height: 100%; position:fixed; }/* stage-fixed-size */canvas.stage-fixed-size { width: 800px; height: 600px; border: 1px dotted black; }/* stage-full-screen *//* https://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html#:fullscreen-pseudo-class */canvas.stage-full-screen:-webkit-full-screen {  position:fixed; top:0; right:0; bottom:0; left:0; margin:0;  box-sizing:border-box; width:100%; height:100%; object-fit:contain;}canvas.stage-full-screen:-moz-full-screen {  position:fixed; top:0; right:0; bottom:0; left:0; margin:0;  box-sizing:border-box; width:100%; height:100%; object-fit:contain;}canvas.stage-full-screen:fullscreen {  position:fixed; top:0; right:0; bottom:0; left:0; margin:0;  box-sizing:border-box; width:100%; height:100%; object-fit:contain;}'</body><body package="AppeX-Examples-Dart">onLoadScripts	&lt;head: 150&gt;	^ '	&lt;script&gt;		function dartMainRunner(main, args) {			dartMain = main;			dartArgs = args;		}		function doAfterLoaded() {			dartMain(dartArgs);			//do this in dart instead			//(new $t.AppeX.FlipBookClient()).installSession({"sessionKey": "sessionId","url": "flip-book"});		}    &lt;/script&gt;'</body></methods><methods><class-id>AppeX.FlipBook class</class-id> <category>configuration</category><body package="AppeX-Examples-Dart">serverConfiguration	&lt;server: 'DartFlipBook' path: '/flip-book'&gt;</body></methods><methods><class-id>AppeX.FlipBookClient</class-id> <category>auto-generated</category><body package="AppeX-Examples-Dart">getForwardSync(){	var aStringOrBoolean;	aStringOrBoolean =  this.syncMessageToServer("getForward", arguments);	this.forward = (aStringOrBoolean === true);}</body><body package="AppeX-Examples-Dart">getWalking(){/** This method was generated from pragma &lt;json: 'getWalking'&gt; in method AppeX.FlipBook&gt;&gt;getWalking.* You can modify the code according to your application needs, or regenerate it as follows:*	- Navigate to AppeX.FlipBook&gt;&gt;getWalking.*	- Click on the item labeled "Generate FlipBookClient.getWalking" in the method menu.*/	var response = this.asyncMessageToServer("getWalking", arguments);	response.onSuccess(		function(object) {			this.walking = object;		}	);	return response;}</body><body package="AppeX-Examples-Dart">getWalkingSync(){	var aStringOrBoolean;	aStringOrBoolean =  this.syncMessageToServer("getWalking", arguments);	this.walking = (aStringOrBoolean === true);}</body><body package="AppeX-Examples-Dart">startWalking(){/** This method was generated from pragma &lt;json: 'startWalking'&gt; in method AppeX.FlipBook&gt;&gt;startWalking.* You can modify the code according to your application needs, or regenerate it as follows:*	- Navigate to AppeX.FlipBook&gt;&gt;startWalking.*	- Click on the item labeled "Generate FlipBookClient.startWalking" in the method menu.*/	var response = this.asyncMessageToServer("startWalking", arguments);	response.onSuccess(		function(object) {			this.walking = object;		}	);	return response;}</body><body package="AppeX-Examples-Dart">stopWalking(){/** This method was generated from pragma &lt;json: 'stopWalking'&gt; in method AppeX.FlipBook&gt;&gt;stopWalking.* You can modify the code according to your application needs, or regenerate it as follows:*	- Navigate to AppeX.FlipBook&gt;&gt;stopWalking.*	- Click on the item labeled "Generate FlipBookClient.stopWalking" in the method menu.*/	var response = this.asyncMessageToServer("stopWalking", arguments);	response.onSuccess(		function(object) {			this.walking = object;		}	);		return response;}</body><body package="AppeX-Examples-Dart">toggleForward(){/** This method was generated from pragma &lt;json: 'toggleForward'&gt; in method AppeX.FlipBook&gt;&gt;toggleForward.* You can modify the code according to your application needs, or regenerate it as follows:*	- Navigate to AppeX.FlipBook&gt;&gt;toggleForward.*	- Click on the item labeled "Generate FlipBookClient.toggleForward" in the method menu.*/	var response = this.asyncMessageToServer("toggleForward", arguments);	response.onSuccess(		function(object) {			/* write your own success handler here */		}	);	return response;}</body><body package="AppeX-Examples-Dart">toggleWalking(){/** This method was generated from pragma &lt;json: 'toggleWalking'&gt; in method AppeX.FlipBook&gt;&gt;toggleWalking.* You can modify the code according to your application needs, or regenerate it as follows:*	- Navigate to AppeX.FlipBook&gt;&gt;toggleWalking.*	- Click on the item labeled "Generate FlipBookClient.toggleWalking" in the method menu.*/	var response = this.asyncMessageToServer("toggleWalking", arguments);	response.onSuccess(		function(object) {			/* write your own success handler here */		}	);	return response;}</body></methods><methods><class-id>AppeX.FlipBookClient</class-id> <category>session management</category><body package="AppeX-Examples-Dart">installSessionSuccess(session, data) {// Upon successful installation, I don't want to deal with server events.// Override the default methods to only update session data.	this.updateSessionData(session, data);	return this;}</body></methods><methods><class-id>AppeX.FlipBookClient</class-id> <category>javascript</category><body package="AppeX-Examples-Dart">linkSession(session) {	return this.primitiveToServer("_appex_linkSession", session, {async: false});}</body></methods><methods><class-id>SiouX.Server class</class-id> <category>configuration</category><body package="AppeX-Examples-Dart">configureDartFlipBook: aServer	&lt;server: 'DartFlipBook'&gt;	aServer listenOn: 8891 for: HttpConnection.	AppeX.FlipBook registerAnnouncementsFrom: aServer</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationClient</name><environment>AppeX</environment><super>AppeX.JavascriptObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>javascriptLibrary </class-inst-vars><imports></imports><category>bootstrap</category><attributes><package>AppeX-Client</package></attributes></class><class><name>Application</name><environment>AppeX</environment><super>SiouX.HttpResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clientSubscriptions session eventStream </inst-vars><class-inst-vars>settings requestActions subscriptionRegistry codeComposer combinedJavascriptLibrary </class-inst-vars><imports>			private Tools.Pragma			private Xtreams.*			private SiouX.*			private Protocols.*			</imports><category></category><attributes><package>AppeX-Server</package></attributes></class></st-source>