<?xml version="1.0"?><st-source><!-- Name: PlatformTestResourcesDbIdentifier: bear73DbTrace: 502386DbUsername: jkottDbVersion: 8.3 - 4DevelopmentPrerequisites: #(#(#any 'SUnitToo' ''))PackageName: PlatformTestResourcesParcel: #('PlatformTestResources')ParcelName: PlatformTestResourcesPrerequisiteDescriptions: #(#(#name 'SUnitToo' #componentType #package))PrerequisiteParcels: #(#('SUnitToo' ''))PrintStringCache: (8.3 - 4,jkott)Version: 8.3 - 4Date: 11:28:52 AM June 16, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.3) of June 16, 2017 on June 16, 2017 at 11:28:52 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>PlatformHasVwPipeSupport</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PlatformTestResources</package></attributes></class><class><name>PlatformEnsureDiffieHellman</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PlatformTestResources</package></attributes></class><class><name>PlatformSupportsDomainSockets</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PlatformTestResources</package></attributes></class><class><name>PlatformProvidesSuitableDiffieHellman</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PlatformTestResources</package></attributes></class><class><name>ImplementsPrivateKeyCrypto</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PlatformTestResources</package></attributes></class><class><name>PlatformProvidesCrypto</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>PlatformTestResources</package></attributes></class><methods><class-id>SUnit.PlatformHasVwPipeSupport</class-id> <category>testing</category><body package="PlatformTestResources">isAvailable	^OSSystemSupport concreteClass platformHasVwPipeSupport</body></methods><methods><class-id>SUnit.PlatformEnsureDiffieHellman</class-id> <category>Testing</category><body package="PlatformTestResources">isAvailable"	First ensure that Security-Xtreams is loaded if suitable DH is not already available.	Then perform a secondary check. Mostly this should result in the resource being available,	except on platforms that may not support Private Key crypto according to our criteria (old versions of OpenSSL,	weird implementations like ARM, etc)."	PlatformProvidesSuitableDiffieHellman isAvailable ifFalse: [Parcel loadParcelByName: 'Security-Xtreams'].		^ PlatformProvidesSuitableDiffieHellman isAvailable</body></methods><methods><class-id>SUnit.PlatformEnsureDiffieHellman class</class-id> <category>accessing</category><body package="PlatformTestResources">resources	"A Resource can bring in other resource (prerequisite resources basically) by return a collection of resources here that should be used in addition to the receiver."		^ super resources, (Array with: ImplementsPrivateKeyCrypto)</body></methods><methods><class-id>SUnit.PlatformSupportsDomainSockets</class-id> <category>testing</category><body package="PlatformTestResources">isAvailable	^OSSystemSupport concreteClass platformSupportsDomainSockets</body></methods><methods><class-id>SUnit.PlatformProvidesSuitableDiffieHellman</class-id> <category>testing</category><body package="PlatformTestResources">isAvailable	ImplementsPrivateKeyCrypto isAvailable ifFalse: [^false].	#{Crypto.LibCryptoEVPInterface} ifDefinedDo: [:lib| lib isPreferredLibrary ifTrue: [^true]].		^OSSystemSupport concreteClass providesSuitableDiffieHellman</body></methods><methods><class-id>SUnit.PlatformProvidesSuitableDiffieHellman class</class-id> <category>accessing</category><body package="PlatformTestResources">resources	"A Resource can bring in other resource (prerequisite resources basically) by return a collection of resources here that should be used in addition to the receiver."		^ super resources, (Array with: ImplementsPrivateKeyCrypto)</body></methods><methods><class-id>SUnit.ImplementsPrivateKeyCrypto</class-id> <category>testing</category><body package="PlatformTestResources">isAvailable"	(self isAvailable)"	^ PlatformProvidesCrypto isAvailable and: [		OSSystemSupport concreteClass implementsPrivateKeyCrypto		]</body></methods><methods><class-id>SUnit.ImplementsPrivateKeyCrypto class</class-id> <category>accessing</category><body package="PlatformTestResources">resources	"A Resource can bring in other resource (prerequisite resources basically) by return a collection of resources here that should be used in addition to the receiver."		^ super resources, (Array with: PlatformProvidesCrypto)</body></methods><methods><class-id>SUnit.PlatformProvidesCrypto</class-id> <category>testing</category><body package="PlatformTestResources">isAvailable	^OSSystemSupport concreteClass platformProvidesCrypto</body></methods><methods><class-id>OS.Win32SystemSupport class</class-id> <category>testing</category><body package="PlatformTestResources">implementsPrivateKeyCrypto	^self isVistaOrLater or: [#{Crypto.LibCryptoEVP} ifDefinedDo: [:lib| lib implementsPrivateKeyCrypto] elseDo: [false]]</body><body package="PlatformTestResources">platformHasVwPipeSupport	^false</body><body package="PlatformTestResources">platformProvidesCrypto	^self isVistaOrLater or: 			[#{Crypto.LibCryptoEVP} ifDefinedDo: [:lib | lib isAvailable]				elseDo: [false]]</body><body package="PlatformTestResources">platformSupportsDomainSockets	^false</body><body package="PlatformTestResources">providesSuitableDiffieHellman"	On Windows, DH and ECDH are provided as fall-back algorithms in the Security-Xtreams package.	If that package has not been loaded, we do not have a suitable DH algorithm."	^ self implementsPrivateKeyCrypto and: [		#{Xtreams.SecurityPrivateKey} ifDefinedDo: [:defined | true] elseDo: [false]		]</body></methods><methods><class-id>OS.UnixSystemSupport class</class-id> <category>testing</category><body package="PlatformTestResources">implementsPrivateKeyCrypto	^#{Crypto.LibCryptoEVP} ifDefinedDo: [:lib| lib implementsPrivateKeyCrypto] elseDo: [false]</body><body package="PlatformTestResources">platformHasVwPipeSupport	^true</body><body package="PlatformTestResources">platformProvidesCrypto	OSHandle platformMoniker = #linuxARM ifTrue: [ ^false ].	^#{Crypto.LibCryptoEVP} ifDefinedDo: [:lib| lib isAvailable] elseDo: [false]</body><body package="PlatformTestResources">platformSupportsDomainSockets	^true</body><body package="PlatformTestResources">providesSuitableDiffieHellman	^ self implementsPrivateKeyCrypto</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestResource</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>