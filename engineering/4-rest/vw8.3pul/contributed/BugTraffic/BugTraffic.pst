<?xml version="1.0"?><st-source><!-- Name: BugTrafficComment: Bug TrafficThis game was a developed as a course project in the Object Oriented Programming and Design class at the University of Illinois at Urbana-Champaign on Fall 2001, under the supervision of Prof. Ralph Johnson.Authors:-Guillermo Cantu-Ariel GertzensteinFor more information go to Bug Traffic's web page: http://wiki.cs.uiuc.edu/cs497rej/City+Traffic+Control+gameThere you can find the e-mail address of the authors of this game. Please send us them your comments and let them know if you find a bug.This game belongs to the Public Domain. Feel free to play with it, modify the source code, and distribute it. The original authors will appreciate if you let them know what you are planning to do.There are currently 6 levels and 5 types of insects, but it is pretty easy to add more. If you make improvements to the game, send them to Ariel Gertzenstein who will check them and perhaps include them in future updates of the game.- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --How to run itDo: BugTraffic.BugTraffic open- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -DbIdentifier: store_pgsql_poohDbTrace: 207305DbUsername: nrossDbVersion: 8.0 - 1DevelopmentPrerequisites: #(#(#any 'SUnit' ''))HideSource: falsePackageName: BugTrafficParcel: #('BugTraffic')ParcelName: BugTrafficPrerequisiteDescriptions: #(#(#name 'SUnit' #componentType #package))PrerequisiteParcels: #(#('SUnit' ''))PrintStringCache: (8.0 - 1,nross)SaveSource: trueVersion: 8.0 - 1Date: 9:29:31 AM August 1, 2014 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.0 (jul14.2) of July 18, 2014 on August 1, 2014 at 9:29:31 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>BugTraffic</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			</imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></name-space><class><name>Game</name><environment>BugTraffic</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>city lastLevelGameScore gameScore level gameCycle maxLineLength cityScripts bugsToNextLevel gameOver cityGameOver longestLine lives livesGiven </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.Game</class-id><body>This is the model in the MVC system. Every cycle it the number of insects that left the city. If that number is more than the winningLevelScore, then the player passes to the following level. If the score is over a multiple of ScoreToExtraLife then the player gets a new try. It also checks the length of the lines of the exit nodes. If the longest line is too long, the player loses a try. If there are no tries left, then the game ends.Instance Variables:	city	&lt;City&gt;	current level's city	lastLevelGameScore	&lt;Number&gt;	game score in last level	gameScore	&lt;ValueModel&gt;	current game score	level &lt;ValueModel&gt; level number	gameCycle &lt;GameCycle&gt; it is a process that updates the city every cycle and then checks the game	maxLineLength &lt;Number&gt; it specifies how long an entrance node line can be	cityScripts &lt;OrderedCollection of City&gt; all the cities in this game	bugsToNextLevel &lt;ValueModel&gt; insects that need to leave the city before passing to the next level	gameOver &lt;Boolean&gt; states whether the game is in game over state or not	cityGameOver &lt;City&gt; old city, it is drawn in the game over state	longestLine &lt;ValueModel&gt; the longest entrance node line in the game	lives &lt;ValueModel&gt; how many tries the player has left	livesGiven &lt;Number&gt; number of extra tries givenConstants	LivesPerGame &lt;Number&gt; tries per game	MaxLineLength &lt;Number&gt; if an entrance node line has this length, the player loses a try	ScoreToExtraLife &lt;Number&gt; score to get an extra life	UpdateRate &lt;Number&gt; cycle length in milliseconds (time between updates).	WinningLevelScore &lt;Number&gt; score to get in a level to pass to the next level. The only way to score 1 point in a level is when an insect leaves. So this number can 		also be read as "number of bugs that have to leave to pass to the next level".</body></comment><class><name>Node</name><environment>BugTraffic</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>position shape empty changed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.Node</class-id><body>This class is the superclass of all the types of nodes. It represents a "Node" in the game, which is any part of a road.Instance Variables:	position	&lt;Point&gt;	  position where the node is located	shape	&lt;Shape&gt;	description of the node form	empty	&lt;boolean&gt;	false if the node is occupied, otherwise true	changed	&lt;boolean&gt;	true if the node is to be redrawnSome methods of interaction with an Insect are:	canMoveFrom: aNode    - can an insect move from aNode to this node?	isDisplayable       	      - can an insect be displayed over this node?</body></comment><class><name>EntranceNode</name><environment>BugTraffic</environment><super>BugTraffic.Node</super><private>false</private><indexed-type>none</indexed-type><inst-vars>insects nextNode blinkingColor blinkingCounter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.EntranceNode</class-id><body>This class represents the nodes where an insect is inserted into the city.The city inserts an insect into this node through the addNewInsect: method. Te new insect is put at the end of the waiting line.Instance Variables:	insects	&lt;OrderedCollection of InsectHeads&gt;	the insects that are currently in line waiting to enter the city	nextNode	&lt;Node&gt; 	the node that is next to this one in the road	blinkingColor	&lt;ColorValue&gt;	current blinking color	blinkingCounter	&lt;Integer&gt;	counts the iteration cycles for blinkingShared Variables:	FirstBlinkingColor	&lt;ColorValue&gt;	color to blink	MinimumBlinkingLineLength	&lt;Integer&gt;	size of insects to start blinking	SecondBlinkingColor	&lt;ColorValue&gt;	color to blink	TicksToChangeColor	&lt;Integer&gt;	iteration cycles to wait for blinking</body></comment><class><name>GameCycle</name><environment>BugTraffic</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interval city process game running </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.GameCycle</class-id><body>This class is the class that "controls" the game, as it contains the process which handles the iterations of the game.The method block returns the operations to be performed during each iteration of the game, and it also has the code to make each iteration to be performed at the appropiate time. In each cycle, it updates the city and makes the game check for things such as the number of insects (to pass to the next level) that left the city or the score (to get an extra life).Instance Variables:	interval	&lt;Integer&gt;	interval between each iteration of the game	city	&lt;City&gt;	the City of the Game	process	&lt;Process&gt;	a process which runs the itterations of the game	game	&lt;Game&gt;	the Game	running	&lt;boolean&gt;	true if the process is running</body></comment><class><name>TrafficLight</name><environment>BugTraffic</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>intersectionNodes shapeComposite </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.TrafficLight</class-id><body>This class represents a TrafficLight. It contains a number of IntersectionNode, and with the changeState method, forwards a message to each IntersectionNode to toggle its state. It also knows the area of its IntersectionNodes, so that it knows when a click was performed over it (containsPosition:).Instance Variables:	intersectionNodes	&lt;OrderedCollection of IntersectionNode&gt;	all the intersection nodes that depend of this TrafficLight	shapeComposite	&lt;CompositePart&gt;	the shape of the intersectionNodes' shapes combined (the area)</body></comment><class><name>AboutDlg</name><environment>BugTraffic</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>textField </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.AboutDlg</class-id><body>This class only shows the information about the game when the button "About" is pushed.The information shown is kept in the data method, which returns the text to display.</body></comment><class><name>InsectPart</name><environment>BugTraffic</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>node nextInsectPart shape changed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.InsectPart</class-id><body>It represents a part of an insect. A part is always on a node. A part could be the head, body or tail of an insect. If it is not the head it always follows the head. It is linked to the next part. If it is the tail, the next part is nil. Instance Variables:	node	&lt;Node&gt;	node where the insect part is on	nextInsectPart	&lt;InsectPart&gt;	next part of the insect. nil if it is the tail	shape	&lt;Shape&gt;	shape of the insect part	changed	&lt;Boolean&gt;	if it was changed, then it needs to be redrawn</body></comment><class><name>RoadNode</name><environment>BugTraffic</environment><super>BugTraffic.Node</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nextNode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.RoadNode</class-id><body>This is the basic road node, that does not have any special behavior, but is only part of a path.Instance Variables:	nextNode	&lt;Node&gt;	 the node that is next to this one in the road</body></comment><class><name>TrafficView</name><environment>BugTraffic</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>background </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.TrafficView</class-id><body>This is the View of the Model-View-Controller. It reads and displays the background file, and understands various update messages from the model (Game), to perform different kinds of updates.Instance Variables:	background	&lt;Image&gt;  It keeps the image to be displayed as background of the game.The background is an image which is read from disk.</body></comment><class><name>GameController</name><environment>BugTraffic</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.GameController</class-id><body>Controller of the game. Only detects the mouse and forwards the click to the Model (Game).</body></comment><class><name>City</name><environment>BugTraffic</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>insects insectsGone iterationCounter newInsectFrequency randomGenerator insectsToRemove entranceNodes exitNodes nodes trafficLights </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.City</class-id><body>This is a container for all the nodes, insects and traffic lights in the city. When the city is updated, the inner components get updated too. Insects get added into the city, and the city decides what entrance node they are going to start. It also decides the insect's target exit node. Insects get added to the city every newInsectFrecuency cycles. When the mouse is clicked on the screen, the city dispatches the event to the correspondent traffic light.Instance Variables:	insects	&lt;OrderedCollection of InsectHead&gt; insects in the city	insectsGone	&lt;Number&gt;	insects that left the city	iterationCounter	&lt;Number&gt;	number of cycles since last insect's addition	newInsectFrequency	&lt;Number&gt;	number of cycles between insect additions	randomGenerator	&lt;Random&gt;	it is used to choose what type of insect to create	insectsToRemove	&lt;OrderedCollection of InsectHead&gt; stores the insects that will be removed in the next update	entranceNodes	&lt;OrderedCollection of EntranceNode&gt; the entrance nodes in the city	exitNodes	&lt;OrderedCollection of ExitNode&gt;	the exit nodes in the city	nodes	&lt;OrderedCollection of Node&gt;	all the nodes in the city	trafficLights	&lt;OrderedCollection of TrafficLight&gt; traffic lights in the city</body></comment><class><name>InsectHead</name><environment>BugTraffic</environment><super>BugTraffic.InsectPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetNode iterationCounter deadlockCounter deadlockMax previousPosition speed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.InsectHead</class-id><body>This is the head of an insect, which is also an insect part. But this the part that takes the decision of when and where to move. The other insect parts of the insect follow the head. The speed is the number of cycles that it takes the insect to move from one node to the next. When it is in an intersection node, it chooses the next node where to move. If there is a deadlock, it waits some cycles and then chooses another node to move to.Instance Variables:	targetNode	&lt;ExitNode&gt;	insect's final destination	iterationCounter	&lt;Number&gt;	how many cycles to wait until moving again	deadlockCounter	&lt;Number&gt;	it counts cycles when the insect is in a deadlock	deadlockMax	&lt;Number&gt;	maximum number of cycles to wait in a deadlock until moving to somewhere else	previousPosition	&lt;Node&gt;	last node where the insect's head was	speed &lt;Number&gt; number of cycles to wait until next movementShared Variables:	RandomGenerator	&lt;Random&gt;	it is used to generate the value of deadlockMax</body></comment><class><name>Shape</name><environment>BugTraffic</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>color offset shapes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.Shape</class-id><body>This class represents the form of any displayable object in the game (nodes or insects).Instance Variables:	color	&lt;ColorValue&gt;	color of the shape 	offset	&lt;Number&gt;	offset to be applied from the position to display	shapes	&lt;Dictionary of shapes&gt;	images that represent the shapeIt can be created as shape: color: in which case the shape is assumed to be a geometric representation with the given color.It can also be created as image: offset: in which case the recieved image (Image) is rotated to have 4 different "orientations" of it, and when displaying the given offset is applied to the image.When created from a geometric representation, it is assumed that the figure is symetrical, and it is not rotated.The shape can be displayed with or without orientation. (The default orientation is "up")</body></comment><class><name>ExitNode</name><environment>BugTraffic</environment><super>BugTraffic.Node</super><private>false</private><indexed-type>none</indexed-type><inst-vars>city lastInsect </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.ExitNode</class-id><body>This class represents the nodes where an insect leaves the city.When it detects the "Tail" of an insect, it informs the city that the insect is leaving the city.Instance Variables:	city	&lt;City&gt;	city where this node is contained	lastInsect	&lt;InsectHead&gt;	insect currently leaving the city</body></comment><class><name>BugTraffic</name><environment>BugTraffic</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gameModel gameView bugsToNextLevel gameLevel gameScore longestLine lives </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.BugTraffic</class-id><body>This class is the main window of the game. It creates a model (Game) and a view (TrafficView). It observes some variables from the Game, and has a ViewHolder where the view is displayed.It also has the buttons for the control of the game.To start the game do: "BugTraffic.BugTraffic open"Instance Variables:	gameModel	&lt;Game&gt;	game model	gameView	&lt;TrafficView&gt;	game view	bugsToNextLevel  &lt;Input Field&gt;  observer of bugsToNextLevel in Game	gameLevel	&lt;Input Field&gt; observer of gameLevel in Game	gameScore	&lt;Input Field&gt; observer of gameScore in Game	longestLine	&lt;Input Field&gt; observer of longestLine in Game	lives   &lt;Input Field&gt; observer of lives in Game</body></comment><class><name>BugTrafficTestCase</name><environment>BugTraffic</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>city shape </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.BugTrafficTestCase</class-id><body>Test cases of Bug Traffic. To test them. Do: "XProgramming.SUnit.TestRunner open"</body></comment><class><name>IntersectionNode</name><environment>BugTraffic</environment><super>BugTraffic.Node</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nextNodes previousNodes previousNodeNumberInGreen </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.IntersectionNode</class-id><body>This class represents an intersection node in a road. It can contain various next nodes, and up to two previous nodes. With the variable previousNodeNumberInGreen it decides from which previous node can the insects advance to this one. By default, the first previous node in "Green" is the first one added (previousNodeNumberInGreen = 1), and with the method togglePreviousNodeInGreen the value changes between 1 and 2.Instance Variables:	nextNodes	&lt;OrderedCollection of Nodes&gt;	nodes that an insect can go immediately from here	previousNodes	&lt;OrderedCollection of Nodes&gt;	nodes that meet in this one (from where an insect can come)	previousNodeNumberInGreen	&lt;1 or 2&gt;	number of the previousNodes that is currently in "Green" Interaction with insects:	canMoveFrom: aNode    			- can an insect move from aNode to this node?	nextNodeTo: aNode				- answers which node of its nextNodes is closer to aNode	secondBestNextNodeTo: aNode	- answers which node of its nextNodes is the second closest to aNode It also contains the functionality to draw the TrafficLights (as triangles).</body></comment><class><name>InsectBuilder</name><environment>BugTraffic</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>randomGenerator </class-inst-vars><imports></imports><category>BugTraffic</category><attributes><package>BugTraffic</package></attributes></class><comment><class-id>BugTraffic.InsectBuilder</class-id><body>This class creates the insects. It contains scripts for various different insects (ant, caterpillar, roach, snail, worm), and also has a method randomInsect which creates one of the types of insects at random.The scripts for creating the insects use various image files which are read from disk.</body></comment><shared-variable><name>RandomGenerator</name><environment>BugTraffic.InsectHead</environment><private>false</private><constant>false</constant><category>random</category><initializer>Random new</initializer><attributes><package>BugTraffic</package></attributes></shared-variable><shared-variable><name>FirstBlinkingColor</name><environment>BugTraffic.EntranceNode</environment><private>false</private><constant>true</constant><category>constants</category><initializer>ColorValue green</initializer><attributes><package>BugTraffic</package></attributes></shared-variable><shared-variable><name>MinimumBlinkingLineLength</name><environment>BugTraffic.EntranceNode</environment><private>false</private><constant>true</constant><category>constants</category><initializer>3</initializer><attributes><package>BugTraffic</package></attributes></shared-variable><shared-variable><name>TicksToChangeColor</name><environment>BugTraffic.EntranceNode</environment><private>false</private><constant>true</constant><category>constants</category><initializer>20</initializer><attributes><package>BugTraffic</package></attributes></shared-variable><shared-variable><name>SecondBlinkingColor</name><environment>BugTraffic.EntranceNode</environment><private>false</private><constant>true</constant><category>constants</category><initializer>ColorValue red</initializer><attributes><package>BugTraffic</package></attributes></shared-variable><shared-variable><name>MaxLineLength</name><environment>BugTraffic.Game</environment><private>false</private><constant>true</constant><category>constants</category><initializer>5</initializer><attributes><package>BugTraffic</package></attributes></shared-variable><shared-variable><name>ScoreToExtraLife</name><environment>BugTraffic.Game</environment><private>false</private><constant>true</constant><category>constants</category><initializer>10000</initializer><attributes><package>BugTraffic</package></attributes></shared-variable><shared-variable><name>UpdateRate</name><environment>BugTraffic.Game</environment><private>false</private><constant>true</constant><category>constants</category><initializer>45</initializer><attributes><package>BugTraffic</package></attributes></shared-variable><shared-variable><name>LivesPerGame</name><environment>BugTraffic.Game</environment><private>false</private><constant>true</constant><category>constants</category><initializer>3</initializer><attributes><package>BugTraffic</package></attributes></shared-variable><shared-variable><name>WinningLevelScore</name><environment>BugTraffic.Game</environment><private>false</private><constant>true</constant><category>constants</category><initializer>200</initializer><attributes><package>BugTraffic</package></attributes></shared-variable><methods><class-id>BugTraffic.Game</class-id> <category>accessing</category><body package="BugTraffic">bugsToNextLevel	^bugsToNextLevel</body><body package="BugTraffic">gameLevel	^level</body><body package="BugTraffic">gameScore	^gameScore</body><body package="BugTraffic">lives	^lives</body><body package="BugTraffic">longestLine	^longestLine</body></methods><methods><class-id>BugTraffic.Game</class-id> <category>drawing</category><body package="BugTraffic">drawBackgroundLayerOn: aGC 	| rect box |	box := Rectangle origin: -1 @ -1 corner: 1 @ 1.	aGC paint: ColorValue lightGray.	rect := aGC medium bounds.	0 to: rect width		by: 4		do: 			[:wEach | 			0 to: rect height				by: 4				do: [:hEach | aGC displayRectangle: box at: (Point x: wEach y: hEach)]]</body><body package="BugTraffic">drawGameOverOn: aGC 	cityGameOver isNil 		ifFalse: 			[cityGameOver setChanged.			cityGameOver drawOn: aGC].	self drawBackgroundLayerOn: aGC.	self drawGameOverTextOn: aGC</body><body package="BugTraffic">drawGameOverTextOn: aGC 	| text |	text := 'Game Over' asComposedText.	text textStyle scalingFactor: 2.5.	text compositionWidth: 300.	aGC paint: ColorValue green.	aGC display: text at: 360 @ 210.	text textStyle scalingFactor: 1</body><body package="BugTraffic">drawLoseLifeTextOn: aGC 	| text |	lives value &gt; 1		ifTrue: [text := (lives value printString, ' tries left - Level ' , level value printString) asComposedText]		ifFalse: [text := (lives value printString , ' try left - Level ' , level value printString) asComposedText].	text textStyle characterAttributes scalingFactor: 2.5.	text compositionWidth: 600.	aGC paint: ColorValue green.	aGC display: text at: 280 @ 210.	text textStyle characterAttributes scalingFactor: 1</body><body package="BugTraffic">drawNewLevelTextOn: aGC 	| text |	text := ('Go to level ' , level value printString) asComposedText.	text textStyle characterAttributes scalingFactor: 2.5.	text compositionWidth: 400.	aGC paint: ColorValue green.	aGC display: text at: 360 @ 210.	text textStyle characterAttributes scalingFactor: 1</body><body package="BugTraffic">drawOn: aGC	city isNil ifFalse:[city drawOn: aGC].	gameOver ifTrue:[self drawGameOverOn: aGC]</body><body package="BugTraffic">drawWinTextOn: aGC 	| text |	text := 'Congratulations, you won!' asComposedText.	text textStyle scalingFactor: 2.5.	text compositionWidth: 400.	aGC paint: ColorValue green.	aGC display: text at: 270 @ 210.	text textStyle scalingFactor: 1</body></methods><methods><class-id>BugTraffic.Game</class-id> <category>actions</category><body package="BugTraffic">checkAddLife	gameScore value &gt;= (livesGiven + 1 * ScoreToExtraLife)		ifTrue: 			[lives value: lives value + 1.			livesGiven := livesGiven + 1]</body><body package="BugTraffic">checkState	| levelScore |	levelScore := city insectsGone.	bugsToNextLevel value: WinningLevelScore - levelScore.	gameScore value: lastLevelGameScore + (levelScore * 10).	self checkAddLife.	longestLine value: city longestLine.	longestLine value &gt;= maxLineLength 		ifTrue: [self loseLife]		ifFalse: 			[bugsToNextLevel value &lt;= 0 				ifTrue: 					[gameScore value: gameScore value + 250.					self checkAddLife.					self nextLevel]]</body><body package="BugTraffic">endGame	gameOver		ifFalse: 			[cityGameOver := city.			city := nil.			gameOver := true.			self changed: #endGame.			self endCycle]</body><body package="BugTraffic">finishGame	self endCycle</body><body package="BugTraffic">loseLife	lives value: lives value - 1.	lives value = 0		ifTrue: [self endGame]		ifFalse: 			[self changed: #loseLife.			(Delay forSeconds: 3) wait.			self startLevel]</body><body package="BugTraffic">nextLevel	level value: level value + 1.	level value &gt; cityScripts size		ifTrue: 			[level value: 1.			self changed: #win.			(Delay forSeconds: 8) wait.			self changed: #newGame].	self changed: #passToNextLevel.	(Delay forSeconds: 3) wait.	self startLevel</body><body package="BugTraffic">setChanged	city isNil ifFalse: [city setChanged]</body><body package="BugTraffic">startGame	gameOver := false.	self stopGameCycle.	self reset.	self changed: #newGame.	self nextLevel</body><body package="BugTraffic">startLevel	| oldGameCycle |	longestLine value: 0.	lastLevelGameScore := gameScore value.	bugsToNextLevel value: WinningLevelScore.	city := (cityScripts at: level value) value.	oldGameCycle := gameCycle.	gameCycle := GameCycle 				game: self				city: city				interval: UpdateRate.	gameCycle start.	self changed: #newLevel.	oldGameCycle isNil ifFalse: [oldGameCycle stop]</body><body package="BugTraffic">togglePause	gameCycle isNil ifFalse:[gameCycle togglePause]</body><body package="BugTraffic">toggleTrafficLightAt: aPosition	city isNil ifFalse: [city toggleTrafficLightAt: aPosition]</body></methods><methods><class-id>BugTraffic.Game</class-id> <category>private</category><body package="BugTraffic">endCycle	gameCycle isNil		ifFalse: 			[| aux |			aux := gameCycle.			gameCycle := nil.			aux isRunning ifTrue: [aux stop]]</body><body package="BugTraffic">stopGameCycle	gameCycle isNil ifFalse: [gameCycle isRunning ifTrue: [gameCycle stop]]</body></methods><methods><class-id>BugTraffic.Game</class-id> <category>initialize</category><body package="BugTraffic">initialize	lastLevelGameScore := 0.	gameScore := 0 asValue.	level := 0 asValue.	longestLine := 0 asValue.	lives := LivesPerGame asValue.	maxLineLength := MaxLineLength.	bugsToNextLevel := WinningLevelScore asValue.	gameOver := false.	self loadScripts</body><body package="BugTraffic">loadScripts	cityScripts := OrderedCollection new.	cityScripts add: [self class city1].	cityScripts add: [self class city4].	cityScripts add: [self class city2].	cityScripts add: [self class city3].	cityScripts add: [self class city6].	cityScripts add: [self class city5]</body><body package="BugTraffic">reset	lastLevelGameScore := 0.	gameScore value: 0.	level value: 0.	longestLine value: 0.	lives value: LivesPerGame.	livesGiven := 0.	maxLineLength := MaxLineLength.	bugsToNextLevel value: WinningLevelScore.	city := nil.	self loadScripts</body></methods><methods><class-id>BugTraffic.Game class</class-id> <category>city scripts</category><body package="BugTraffic">city1	| city shape 	intNodeNW1 intNodeNE1 intNodeSW1 intNodeSE1	intNodeN2 intNodeS2	intNodeNW3 intNodeNE3 intNodeSW3 intNodeSE3	intNodeNW4 intNodeNE4 intNodeSW4 intNodeSE4	intNodeN5 intNodeS5	intNodeNW6 intNodeNE6 intNodeSW6 intNodeSE6 |	shape := Shape shape: (Rectangle origin: -5 @ -5 corner: 5 @ 5) asFiller color: ColorValue brown.	city := City insectFrequency: 10.	"create intersections and traffic lights"	intNodeNW1 := IntersectionNode position: 200 @ 150	shape: shape city: city.	intNodeNE1 := IntersectionNode position: 210 @ 150	shape: shape city: city.	intNodeSW1 := IntersectionNode position: 200 @ 160	shape: shape city: city.	intNodeSE1 := IntersectionNode position: 210 @ 160	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW1; addIntersectionNode: intNodeNE1; addIntersectionNode: intNodeSW1; addIntersectionNode: intNodeSE1).	intNodeN2 := IntersectionNode position: 400 @ 150	shape: shape city: city.	intNodeS2 := IntersectionNode position: 400 @ 160	shape: shape city: city.	"city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeN2;addIntersectionNode: intNodeS2)."	intNodeNW3 := IntersectionNode position: 600 @ 150	shape: shape city: city.	intNodeNE3 := IntersectionNode position: 610 @ 150	shape: shape city: city.	intNodeSW3 := IntersectionNode position: 600 @ 160	shape: shape city: city.	intNodeSE3 := IntersectionNode position: 610 @ 160	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW3; addIntersectionNode: intNodeNE3; addIntersectionNode: intNodeSW3; addIntersectionNode: intNodeSE3).	intNodeNW4 := IntersectionNode position: 200 @ 300	shape: shape city: city.	intNodeNE4 := IntersectionNode position: 210 @ 300	shape: shape city: city.	intNodeSW4 := IntersectionNode position: 200 @ 310	shape: shape city: city.	intNodeSE4 := IntersectionNode position: 210 @ 310	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW4; addIntersectionNode: intNodeNE4; addIntersectionNode: intNodeSW4; addIntersectionNode: intNodeSE4).	intNodeN5 := IntersectionNode position: 400 @ 300	shape: shape city: city.	intNodeS5 := IntersectionNode position: 400 @ 310	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeN5;addIntersectionNode: intNodeS5).	intNodeNW6 := IntersectionNode position: 600 @ 300	shape: shape city: city.	intNodeNE6 := IntersectionNode position: 610 @ 300	shape: shape city: city.	intNodeSW6 := IntersectionNode position: 600 @ 310	shape: shape city: city.	intNodeSE6 := IntersectionNode position: 610 @ 310	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW6; addIntersectionNode: intNodeNE6; addIntersectionNode: intNodeSW6; addIntersectionNode: intNodeSE6).	"horizontal streets"	"internal horizontal traffic light connections"		intNodeNE1 connectTo: intNodeNW1.	intNodeSW1 connectTo: intNodeSE1.	intNodeNE3 connectTo: intNodeNW3.	intNodeSW3 connectTo: intNodeSE3.	intNodeNE4 connectTo: intNodeNW4.	intNodeSW4 connectTo: intNodeSE4.	intNodeNE6 connectTo: intNodeNW6.	intNodeSW6 connectTo: intNodeSE6.	"create and connect gates (horizontal)"	city addEntranceNodeFrom: 200 @ 10 to: intNodeNW1	step: 10 shape: shape.	city addExitNodeFrom: intNodeNE1 to: 210 @ 10 step: 10 shape: shape.	city addEntranceNodeFrom: 600 @ 10 	to: intNodeNW3	step: 10 shape: shape.	city addExitNodeFrom: intNodeNE3 to: 610 @ 10 step: 10 shape: shape.	city addExitNodeFrom: intNodeSW4 to: 200 @ 480 step: 10 shape: shape.	city addEntranceNodeFrom: 210 @ 480 to: intNodeSE4 step: 10 shape: shape.	city addExitNodeFrom: intNodeSW6 to: 600 @ 480 step: 10 shape: shape.	city addEntranceNodeFrom: 610 @ 480  to: intNodeSE6	step: 10 shape: shape.	"horizontal internal streets"	city	addNodesFrom: intNodeSE1 to: intNodeS2 step: 10 shape: shape.	city	addNodesFrom: intNodeS2 to: intNodeSW3 step: 10 shape: shape.	city	addNodesFrom: intNodeNW3 to: intNodeN2 step: 10 shape: shape.	city	addNodesFrom: intNodeN2 to: intNodeNE1 step: 10 shape: shape.	city	addNodesFrom: intNodeSE4 to: intNodeS5 step: 10 shape: shape.	city	addNodesFrom: intNodeS5 to: intNodeSW6 step: 10 shape: shape.	city	addNodesFrom: intNodeNW6 to: intNodeN5 step: 10 shape: shape.	city	addNodesFrom: intNodeN5 to: intNodeNE4 step: 10 shape: shape.	"vertical streets"	"create and connect gates (vertical)"		city addExitNodeFrom: intNodeNW1 to: 10 @ 150 step: 10 shape: shape.	city addEntranceNodeFrom: 10 @ 160 to: intNodeSW1	step: 10 shape: shape.	city addExitNodeFrom: intNodeNW4 to: 10 @ 300 step: 10 shape: shape.	city addEntranceNodeFrom: 10 @ 310  to: intNodeSW4	step: 10 shape: shape.	city addExitNodeFrom: intNodeN2 to: 400 @ 10 step: 10 shape: shape.	city addEntranceNodeFrom: 880 @ 150 to: intNodeNE3 step: 10 shape: shape.	city addExitNodeFrom: intNodeSE3 to: 880 @ 160 step: 10 shape: shape.	city addEntranceNodeFrom: 880 @ 300  to: intNodeNE6 step: 10 shape: shape.	city addExitNodeFrom: intNodeSE6 to: 880 @ 310 step: 10 shape: shape.	city addEntranceNodeFrom: 400 @ 480  to: intNodeS5 step: 10 shape: shape.	"internal vertical traffic light connections"	intNodeNW1 connectTo: intNodeSW1.	intNodeSE1 connectTo: intNodeNE1.	intNodeS2 connectTo: intNodeN2.	intNodeNW3 connectTo: intNodeSW3.	intNodeSE3 connectTo: intNodeNE3.	intNodeNW4 connectTo: intNodeSW4.	intNodeSE4 connectTo: intNodeNE4.	intNodeS5 connectTo: intNodeN5.	intNodeNW6 connectTo: intNodeSW6.	intNodeSE6 connectTo: intNodeNE6.	"vertical internal streets"	city	addNodesFrom: intNodeSW1 to: intNodeNW4 step: 10 shape: shape.	city	addNodesFrom: intNodeNE4 to: intNodeSE1 step: 10 shape: shape.	city	addNodesFrom: intNodeSW3 to: intNodeNW6 step: 10 shape: shape.	city	addNodesFrom: intNodeNE6 to: intNodeSE3 step: 10 shape: shape.	^city</body><body package="BugTraffic">city2	| city shape node1 node2 node3	intNodeNW1 intNodeNE1 intNodeSW1 intNodeSE1	intNodeNW2 intNodeNE2 intNodeSW2 intNodeSE2	intNodeW3 intNodeE3	intNodeW4 intNodeE4	intNodeNW5 intNodeNE5 intNodeSW5 intNodeSE5	intNodeNW6 intNodeNE6 intNodeSW6 intNodeSE6 |	shape := Shape shape: (Rectangle origin: -5 @ -5 corner: 5 @ 5) asFiller color: ColorValue brown.	city := City insectFrequency: 10.	"alone nodes"	node1 := RoadNode position: 660@110 shape: shape city: city nextNode: nil.	node2 := RoadNode position: 650@100 shape: shape city: city nextNode: nil.	node3 := IntersectionNode position: 660@410 shape: shape city: city.	"create intersections and traffic lights"	intNodeNW1 := IntersectionNode position: 180 @ 100	shape: shape city: city.	intNodeNE1 := IntersectionNode position: 190 @ 100	shape: shape city: city.	intNodeSW1 := IntersectionNode position: 180 @ 110	shape: shape city: city.	intNodeSE1 := IntersectionNode position: 190 @ 110	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW1; addIntersectionNode: intNodeNE1; addIntersectionNode: intNodeSW1; addIntersectionNode: intNodeSE1).	intNodeNW2 := IntersectionNode position: 380 @ 100	shape: shape city: city.	intNodeNE2 := IntersectionNode position: 390 @ 100	shape: shape city: city.	intNodeSW2 := IntersectionNode position: 380 @ 110	shape: shape city: city.	intNodeSE2 := IntersectionNode position: 390 @ 110	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW2; addIntersectionNode: intNodeNE2; addIntersectionNode: intNodeSW2; addIntersectionNode: intNodeSE2).	intNodeW3 := IntersectionNode position: 380 @ 250	shape: shape city: city.	intNodeE3 := IntersectionNode position: 390 @ 250	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeW3;addIntersectionNode: intNodeE3).	intNodeW4 := IntersectionNode position: 650 @ 250	shape: shape city: city.	intNodeE4 := IntersectionNode position: 660 @ 250	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeW4;addIntersectionNode: intNodeE4).	intNodeNW5 := IntersectionNode position: 180 @ 400	shape: shape city: city.	intNodeNE5 := IntersectionNode position: 190 @ 400	shape: shape city: city.	intNodeSW5 := IntersectionNode position: 180 @ 410	shape: shape city: city.	intNodeSE5 := IntersectionNode position: 190 @ 410	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW5; addIntersectionNode: intNodeNE5; addIntersectionNode: intNodeSW5; addIntersectionNode: intNodeSE5).	intNodeNW6 := IntersectionNode position: 380 @ 400	shape: shape city: city.	intNodeNE6 := IntersectionNode position: 390 @ 400	shape: shape city: city.	intNodeSW6 := IntersectionNode position: 380 @ 410	shape: shape city: city.	intNodeSE6 := IntersectionNode position: 390 @ 410	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW6; addIntersectionNode: intNodeNE6; addIntersectionNode: intNodeSW6; addIntersectionNode: intNodeSE6).	"horizontal streets"	"internal horizontal traffic light connections"		intNodeNE1 connectTo: intNodeNW1.	intNodeSW1 connectTo: intNodeSE1.	intNodeNE2 connectTo: intNodeNW2.	intNodeSW2 connectTo: intNodeSE2.	intNodeE3 connectTo: intNodeW3.	intNodeE4 connectTo: intNodeW4.	intNodeNE5 connectTo: intNodeNW5.	intNodeSW5 connectTo: intNodeSE5.	intNodeNE6 connectTo: intNodeNW6.	intNodeSW6 connectTo: intNodeSE6.	"create and connect gates (horizontal)"	city addEntranceNodeFrom: 10 @ 110 to: intNodeSW1	step: 10 shape: shape.	city addExitNodeFrom: intNodeNW1 to: 10 @ 100 step: 10 shape: shape.	city addEntranceNodeFrom: 550 @ 100 	to: intNodeNE2	step: 10 shape: shape.	city addExitNodeFrom: intNodeSE2 to: 550 @ 110 step: 10 shape: shape.	city addEntranceNodeFrom: 10 @ 410 to: intNodeSW5 step: 10 shape: shape.	city addExitNodeFrom: intNodeNW5 to: 10 @ 400 step: 10 shape: shape.	city addEntranceNodeFrom: 890 @ 250  to: intNodeE4	step: 10 shape: shape.	city addEntranceNodeFrom: 720 @ 100 to: node2 step: 10 shape: shape.	city addExitNodeFrom: node1 to: 720 @ 110 step: 10 shape: shape.	city addExitNodeFrom: node3 to: 890 @ 410 step: 10 shape: shape.	"horizontal internal streets"	city	addNodesFrom: intNodeSE1 to: intNodeSW2 step: 10 shape: shape.	city	addNodesFrom: intNodeNW2 to: intNodeNE1 step: 10 shape: shape.	city	addNodesFrom: intNodeSE5 to: intNodeSW6 step: 10 shape: shape.	city	addNodesFrom: intNodeNW6 to: intNodeNE5 step: 10 shape: shape.	city	addNodesFrom: intNodeW4 to: intNodeE3 step: 10 shape: shape.	city	addNodesFrom: intNodeSE6 to: node3 step: 10 shape: shape.	"vertical streets"	"create and connect gates (vertical)"		city addExitNodeFrom: intNodeNE1 to: 190 @ 10 step: 10 shape: shape.	city addEntranceNodeFrom: 180 @ 10 to: intNodeNW1	step: 10 shape: shape.	city addExitNodeFrom: intNodeSW5 to: 180 @ 490 step: 10 shape: shape.	city addEntranceNodeFrom: 190 @ 490 to: intNodeSE5	step: 10 shape: shape.	city addExitNodeFrom: intNodeNE2 to: 390 @ 10 step: 10 shape: shape.	city addExitNodeFrom: intNodeSW6 to: 380 @ 490 step: 10 shape: shape.		"internal vertical traffic light connections"	intNodeNW1 connectTo: intNodeSW1.	intNodeSE1 connectTo: intNodeNE1.	intNodeNW2 connectTo: intNodeSW2.	intNodeSE2 connectTo: intNodeNE2.	intNodeNW5 connectTo: intNodeSW5.	intNodeSE5 connectTo: intNodeNE5.	intNodeNW6 connectTo: intNodeSW6.	intNodeSE6 connectTo: intNodeNE6.		"vertical internal streets"	city	addNodesFrom: intNodeSW1 to: intNodeNW5 step: 10 shape: shape.	city	addNodesFrom: intNodeNE5 to: intNodeSE1 step: 10 shape: shape.	city	addNodesFrom: intNodeSW2 to: intNodeW3 step: 10 shape: shape.	city	addNodesFrom: intNodeE3 to: intNodeSE2 step: 10 shape: shape.	city	addNodesFrom: intNodeW3 to: intNodeNW6 step: 10 shape: shape.	city	addNodesFrom: intNodeNE6 to: intNodeE3 step: 10 shape: shape.	city	addNodesFrom: node2 to: intNodeW4 step: 10 shape: shape.	city	addNodesFrom: intNodeE4 to: node1 step: 10 shape: shape.	city	addNodesFrom: node3 to: intNodeE4 step: 10 shape: shape.	^city</body><body package="BugTraffic">city3	| city shape nodeA nodeB nodeC nodeD	intNodeNW1 intNodeNE1 intNodeSW1 intNodeSE1	intNodeNW2 intNodeNE2 intNodeSW2 intNodeSE2	intNodeW3 intNodeE3	intNodeW4 intNodeE4	intNodeW5 intNodeE5	intNodeNW6 intNodeNE6 intNodeSW6 intNodeSE6	intNodeNW7 intNodeNE7 intNodeSW7 intNodeSE7	intNodeNW8 intNodeNE8 intNodeSW8 intNodeSE8	intNodeW9 intNodeE9 |	shape := Shape shape: (Rectangle origin: -5 @ -5 corner: 5 @ 5) asFiller color: ColorValue brown.	city := City insectFrequency: 10.	"alone nodes"	nodeA := RoadNode position: 700@110 shape: shape city: city nextNode: nil.	nodeB := RoadNode position: 710@100 shape: shape city: city nextNode: nil.	nodeC := RoadNode position: 100@430 shape: shape city: city nextNode: nil.	nodeD := RoadNode position: 210@430 shape: shape city: city nextNode: nil.	"create intersections and traffic lights"	intNodeNW1 := IntersectionNode position: 200 @ 100	shape: shape city: city.	intNodeNE1 := IntersectionNode position: 210 @ 100	shape: shape city: city.	intNodeSW1 := IntersectionNode position: 200 @ 110	shape: shape city: city.	intNodeSE1 := IntersectionNode position: 210 @ 110	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW1; addIntersectionNode: intNodeNE1; addIntersectionNode: intNodeSW1; addIntersectionNode: intNodeSE1).	intNodeNW2 := IntersectionNode position: 450 @ 100	shape: shape city: city.	intNodeNE2 := IntersectionNode position: 460 @ 100	shape: shape city: city.	intNodeSW2 := IntersectionNode position: 450 @ 110	shape: shape city: city.	intNodeSE2 := IntersectionNode position: 460 @ 110	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW2; addIntersectionNode: intNodeNE2; addIntersectionNode: intNodeSW2; addIntersectionNode: intNodeSE2).	intNodeW3 := IntersectionNode position: 200 @ 250	shape: shape city: city.	intNodeE3 := IntersectionNode position: 210 @ 250	shape: shape city: city.	intNodeW4 := IntersectionNode position: 450 @ 250	shape: shape city: city.	intNodeE4 := IntersectionNode position: 460 @ 250	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeW4; addIntersectionNode: intNodeE4).	intNodeW5 := IntersectionNode position: 700 @ 200	shape: shape city: city.	intNodeE5 := IntersectionNode position: 710 @ 200	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeW5; addIntersectionNode: intNodeE5).	intNodeNW6 := IntersectionNode position: 200 @ 350	shape: shape city: city.	intNodeNE6 := IntersectionNode position: 210 @ 350	shape: shape city: city.	intNodeSW6 := IntersectionNode position: 200 @ 360	shape: shape city: city.	intNodeSE6 := IntersectionNode position: 210 @ 360	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW6; addIntersectionNode: intNodeNE6; addIntersectionNode: intNodeSW6; addIntersectionNode: intNodeSE6).	intNodeNW7 := IntersectionNode position: 450 @ 350	shape: shape city: city.	intNodeNE7 := IntersectionNode position: 460 @ 350	shape: shape city: city.	intNodeSW7 := IntersectionNode position: 450 @ 360	shape: shape city: city.	intNodeSE7 := IntersectionNode position: 460 @ 360	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW7; addIntersectionNode: intNodeNE7; addIntersectionNode: intNodeSW7; addIntersectionNode: intNodeSE7).	intNodeNW8 := IntersectionNode position: 700 @ 350	shape: shape city: city.	intNodeNE8 := IntersectionNode position: 710 @ 350	shape: shape city: city.	intNodeSW8 := IntersectionNode position: 700 @ 360	shape: shape city: city.	intNodeSE8 := IntersectionNode position: 710 @ 360	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW8; addIntersectionNode: intNodeNE8; addIntersectionNode: intNodeSW8; addIntersectionNode: intNodeSE8).	intNodeW9 := IntersectionNode position: 700 @ 300	shape: shape city: city.	intNodeE9 := IntersectionNode position: 710 @ 300	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeW9; addIntersectionNode: intNodeE9).	"horizontal streets"	"internal horizontal traffic light connections"		intNodeNE1 connectTo: intNodeNW1.	intNodeSW1 connectTo: intNodeSE1.	intNodeNE2 connectTo: intNodeNW2.	intNodeSW2 connectTo: intNodeSE2.	intNodeW4 connectTo: intNodeE4.	intNodeE5 connectTo: intNodeW5.	intNodeNE6 connectTo: intNodeNW6.	intNodeSW6 connectTo: intNodeSE6.	intNodeNE7 connectTo: intNodeNW7.	intNodeSW7 connectTo: intNodeSE7.	intNodeNE8 connectTo: intNodeNW8.	intNodeSW8 connectTo: intNodeSE8.	intNodeE9 connectTo: intNodeW9.	"create and connect gates (horizontal)"	city addEntranceNodeFrom: 10 @ 110 to: intNodeSW1 step: 10 shape: shape.	city addExitNodeFrom: intNodeNW1 to: 10 @ 100 step: 10 shape: shape.	city addEntranceNodeFrom: 880 @ 200 	to: intNodeE5 step: 10 shape: shape.	city addEntranceNodeFrom: 10 @ 360 to: intNodeSW6 step: 10 shape: shape.	city addExitNodeFrom: intNodeNW6 to: 10 @ 350 step: 10 shape: shape.	city addEntranceNodeFrom: 880 @ 300 	to: intNodeE9 step: 10 shape: shape.	"horizontal internal streets"	city	addNodesFrom: intNodeSE1 to: intNodeSW2 step: 10 shape: shape.	city	addNodesFrom: intNodeNW2 to: intNodeNE1 step: 10 shape: shape.	city	addNodesFrom: intNodeSE2 to: nodeA step: 10 shape: shape.	city	addNodesFrom: nodeB to: intNodeNE2 step: 10 shape: shape.	city	addNodesFrom: intNodeE3 to: intNodeW4 step: 10 shape: shape.	city	addNodesFrom: intNodeSE6 to: intNodeSW7 step: 10 shape: shape.	city	addNodesFrom: intNodeNW7 to: intNodeNE6 step: 10 shape: shape.	city	addNodesFrom: intNodeSE7 to: intNodeSW8 step: 10 shape: shape.	city	addNodesFrom: intNodeNW8 to: intNodeNE7 step: 10 shape: shape.	city	addNodesFrom: nodeC to: nodeD step: 10 shape: shape.	"vertical streets"	"create and connect gates (vertical)"		city addExitNodeFrom: intNodeNE1 to: 210 @ 10 step: 10 shape: shape.	city addEntranceNodeFrom: 200 @ 10 to: intNodeNW1	step: 10 shape: shape.	city addExitNodeFrom: intNodeNE2 to: 460 @ 10 step: 10 shape: shape.	city addEntranceNodeFrom: 450 @ 10 to: intNodeNW2	step: 10 shape: shape.	city addEntranceNodeFrom: 100 @ 480 to: nodeC step: 10 shape: shape.	city addExitNodeFrom: intNodeSW7 to: 450 @ 480 step: 10 shape: shape.	city addEntranceNodeFrom: 460 @ 480 to: intNodeSE7 step: 10 shape: shape.	city addExitNodeFrom: intNodeSW8 to: 700 @ 480 step: 10 shape: shape.	city addEntranceNodeFrom: 710 @ 480 to: intNodeSE8 step: 10 shape: shape.	"internal vertical traffic light connections"	intNodeNW1 connectTo: intNodeSW1.	intNodeSE1 connectTo: intNodeNE1.	intNodeNW2 connectTo: intNodeSW2.	intNodeSE2 connectTo: intNodeNE2.	intNodeNW6 connectTo: intNodeSW6.	intNodeSE6 connectTo: intNodeNE6.	intNodeNW7 connectTo: intNodeSW7.	intNodeSE7 connectTo: intNodeNE7.	intNodeNW8 connectTo: intNodeSW8.	intNodeSE8 connectTo: intNodeNE8.	"vertical internal streets"	city	addNodesFrom: intNodeSW1 to: intNodeW3 step: 10 shape: shape.	city	addNodesFrom: intNodeE3 to: intNodeSE1 step: 10 shape: shape.	city	addNodesFrom: intNodeSW2 to: intNodeW4 step: 10 shape: shape.	city	addNodesFrom: intNodeE4 to: intNodeSE2 step: 10 shape: shape.	city	addNodesFrom: nodeA to: intNodeW5 step: 10 shape: shape.	city	addNodesFrom: intNodeE5 to: nodeB step: 10 shape: shape.	city	addNodesFrom: intNodeW3 to: intNodeNW6 step: 10 shape: shape.	city	addNodesFrom: intNodeNE6 to: intNodeE3 step: 10 shape: shape.	city	addNodesFrom: intNodeW4 to: intNodeNW7 step: 10 shape: shape.	city	addNodesFrom: intNodeNE7 to: intNodeE4 step: 10 shape: shape.	city	addNodesFrom: intNodeW5 to: intNodeW9 step: 10 shape: shape.	city	addNodesFrom: intNodeE9 to: intNodeE5 step: 10 shape: shape.	city	addNodesFrom: intNodeW9 to: intNodeNW8 step: 10 shape: shape.	city	addNodesFrom: intNodeNE8 to: intNodeE9 step: 10 shape: shape.	city	addNodesFrom: nodeD to: intNodeSE6 step: 10 shape: shape.	"connections that need to be added at the end, to avoid useless traffic lights"	intNodeW3 connectTo: intNodeE3.	^city</body><body package="BugTraffic">city4	| city shape 	intNodeNW1 intNodeNE1 intNodeSW1 intNodeSE1	intNodeN2 intNodeS2	intNodeNW3 intNodeNE3 intNodeSW3 intNodeSE3	intNodeW4 intNodeE4	intNodeW5 intNodeE5	intNodeNW6 intNodeNE6 intNodeSW6 intNodeSE6	intNodeN7 intNodeS7	intNodeNW8 intNodeNE8 intNodeSW8 intNodeSE8 |	shape := Shape shape: (Rectangle origin: -5 @ -5 corner: 5 @ 5) asFiller color: ColorValue brown.	city := City insectFrequency: 10.	"create intersections and traffic lights"	intNodeNW1 := IntersectionNode position: 200 @ 20	shape: shape city: city.	intNodeNE1 := IntersectionNode position: 210 @ 20	shape: shape city: city.	intNodeSW1 := IntersectionNode position: 200 @ 30	shape: shape city: city.	intNodeSE1 := IntersectionNode position: 210 @ 30	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW1; addIntersectionNode: intNodeNE1; addIntersectionNode: intNodeSW1; addIntersectionNode: intNodeSE1).	intNodeN2 := IntersectionNode position: 450 @ 20	shape: shape city: city.	intNodeS2 := IntersectionNode position: 450 @ 30	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeN2;addIntersectionNode: intNodeS2).	intNodeNW3 := IntersectionNode position: 690 @ 20	shape: shape city: city.	intNodeNE3 := IntersectionNode position: 700 @ 20	shape: shape city: city.	intNodeSW3 := IntersectionNode position: 690 @ 30	shape: shape city: city.	intNodeSE3 := IntersectionNode position: 700 @ 30	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW3; addIntersectionNode: intNodeNE3; addIntersectionNode: intNodeSW3; addIntersectionNode: intNodeSE3).	intNodeW4 := IntersectionNode position: 200 @ 250	shape: shape city: city.	intNodeE4 := IntersectionNode position: 210 @ 250	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeW4;addIntersectionNode: intNodeE4).	intNodeW5 := IntersectionNode position: 690 @ 250	shape: shape city: city.	intNodeE5 := IntersectionNode position: 700 @ 250	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeW5;addIntersectionNode: intNodeE5).	intNodeNW6 := IntersectionNode position: 200 @ 470	shape: shape city: city.	intNodeNE6 := IntersectionNode position: 210 @ 470	shape: shape city: city.	intNodeSW6 := IntersectionNode position: 200 @ 480	shape: shape city: city.	intNodeSE6 := IntersectionNode position: 210 @ 480	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW6; addIntersectionNode: intNodeNE6; addIntersectionNode: intNodeSW6; addIntersectionNode: intNodeSE6).	intNodeN7 := IntersectionNode position: 450 @ 470	shape: shape city: city.	intNodeS7 := IntersectionNode position: 450 @ 480	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeN7;addIntersectionNode: intNodeS7).	intNodeNW8 := IntersectionNode position: 690 @ 470	shape: shape city: city.	intNodeNE8 := IntersectionNode position: 700 @ 470	shape: shape city: city.	intNodeSW8 := IntersectionNode position: 690 @ 480	shape: shape city: city.	intNodeSE8 := IntersectionNode position: 700 @ 480	shape: shape city: city.	city addTrafficLight: (TrafficLight new addIntersectionNode: intNodeNW8; addIntersectionNode: intNodeNE8; addIntersectionNode: intNodeSW8; addIntersectionNode: intNodeSE8).	"horizontal streets"	"internal horizontal traffic light connections"		intNodeNE1 connectTo: intNodeNW1.	intNodeSW1 connectTo: intNodeSE1.	intNodeNE3 connectTo: intNodeNW3.	intNodeSW3 connectTo: intNodeSE3.	intNodeE4 connectTo: intNodeW4.	intNodeW5 connectTo: intNodeE5.	intNodeNE6 connectTo: intNodeNW6.	intNodeSW6 connectTo: intNodeSE6.	intNodeNE8 connectTo: intNodeNW8.	intNodeSW8 connectTo: intNodeSE8.	"create and connect gates (horizontal)"	city addEntranceNodeFrom: 440 @ 250 to: intNodeE4	step: 10 shape: shape.	city addEntranceNodeFrom: 460 @ 250 	to: intNodeW5	step: 10 shape: shape.	city addEntranceNodeFrom: 20 @ 30 to: intNodeSW1 step: 10 shape: shape.	city addExitNodeFrom: intNodeNW1 to: 20 @ 20 step: 10 shape: shape.	city addEntranceNodeFrom: 880 @ 20 to: intNodeNE3 step: 10 shape: shape.	city addExitNodeFrom: intNodeSE3 to: 880 @ 30 step: 10 shape: shape.	city addEntranceNodeFrom: 20 @ 480 to: intNodeSW6 step: 10 shape: shape.	city addExitNodeFrom: intNodeNW6 to: 20 @ 470 step: 10 shape: shape.	city addEntranceNodeFrom: 880 @ 470 to: intNodeNE8 step: 10 shape: shape.	city addExitNodeFrom: intNodeSE8 to: 880 @ 480 step: 10 shape: shape.	"horizontal internal streets"	city	addNodesFrom: intNodeN2 to: intNodeNE1 step: 10 shape: shape.	city	addNodesFrom: intNodeSE1 to: intNodeS2 step: 10 shape: shape.	city	addNodesFrom: intNodeNW3 to: intNodeN2 step: 10 shape: shape.	city	addNodesFrom: intNodeS2 to: intNodeSW3 step: 10 shape: shape.	city	addNodesFrom: intNodeN7 to: intNodeNE6 step: 10 shape: shape.	city	addNodesFrom: intNodeSE6 to: intNodeS7 step: 10 shape: shape.	city	addNodesFrom: intNodeS7 to: intNodeSW8 step: 10 shape: shape.	city	addNodesFrom: intNodeNW8 to: intNodeN7 step: 10 shape: shape.	"vertical streets"	"create and connect gates (vertical)"		city addEntranceNodeFrom: 450 @ 240  to: intNodeS2 step: 10 shape: shape.	city addEntranceNodeFrom: 450 @ 260  to: intNodeN7 step: 10 shape: shape.	"internal vertical traffic light connections"	intNodeNW1 connectTo: intNodeSW1.	intNodeSE1 connectTo: intNodeNE1.	intNodeS2 connectTo: intNodeN2.	intNodeNW3 connectTo: intNodeSW3.	intNodeSE3 connectTo: intNodeNE3.	intNodeNW6 connectTo: intNodeSW6.	intNodeSE6 connectTo: intNodeNE6.	intNodeN7 connectTo: intNodeS7.	intNodeNW8 connectTo: intNodeSW8.	intNodeSE8 connectTo: intNodeNE8.	"vertical internal streets"	city	addNodesFrom: intNodeSW1 to: intNodeW4 step: 10 shape: shape.	city	addNodesFrom: intNodeE4 to: intNodeSE1 step: 10 shape: shape.	city	addNodesFrom: intNodeW4 to: intNodeNW6 step: 10 shape: shape.	city	addNodesFrom: intNodeNE6 to: intNodeE4 step: 10 shape: shape.	city	addNodesFrom: intNodeSW3 to: intNodeW5 step: 10 shape: shape.	city	addNodesFrom: intNodeE5 to: intNodeSE3 step: 10 shape: shape.	city	addNodesFrom: intNodeW5 to: intNodeNW8 step: 10 shape: shape.	city	addNodesFrom: intNodeNE8 to: intNodeE5 step: 10 shape: shape.	^city</body><body package="BugTraffic">city5	| city shape intNodeNW1 intNodeNE1 intNodeSW1 intNodeSE1 intNodeNW2 intNodeNE2 intNodeSW2 intNodeSE2 intNodeNW3 intNodeNE3 intNodeSW3 intNodeSE3 intNodeNW4 intNodeNE4 intNodeSW4 intNodeSE4 intNodeNW5 intNodeNE5 intNodeSW5 intNodeSE5 intNodeNW6 intNodeNE6 intNodeSW6 intNodeSE6 intNodeNW7 intNodeNE7 intNodeSW7 intNodeSE7 intNodeNW8 intNodeNE8 intNodeSW8 intNodeSE8 node1 node2 node3 node4 node5 node6 node7 node8 node9 node10 node11 node12 node13 node14 node15 node16 |	shape := Shape shape: (Rectangle origin: -5 @ -5 corner: 5 @ 5) asFiller				color: ColorValue brown.	city := City insectFrequency: 10.	"alone nodes"	node1 := RoadNode 				position: 140 @ 130				shape: shape				city: city				nextNode: nil.	node2 := RoadNode 				position: 150 @ 140				shape: shape				city: city				nextNode: nil.	node3 := RoadNode 				position: 390 @ 130				shape: shape				city: city				nextNode: nil.	node4 := RoadNode 				position: 380 @ 140				shape: shape				city: city				nextNode: nil.	node5 := RoadNode 				position: 520 @ 130				shape: shape				city: city				nextNode: nil.	node6 := RoadNode 				position: 530 @ 140				shape: shape				city: city				nextNode: nil.	node7 := RoadNode 				position: 770 @ 130				shape: shape				city: city				nextNode: nil.	node8 := RoadNode 				position: 760 @ 140				shape: shape				city: city				nextNode: nil.	node9 := RoadNode 				position: 140 @ 380				shape: shape				city: city				nextNode: nil.	node10 := RoadNode 				position: 150 @ 370				shape: shape				city: city				nextNode: nil.	node11 := RoadNode 				position: 390 @ 380				shape: shape				city: city				nextNode: nil.	node12 := RoadNode 				position: 380 @ 370				shape: shape				city: city				nextNode: nil.	node13 := RoadNode 				position: 520 @ 380				shape: shape				city: city				nextNode: nil.	node14 := RoadNode 				position: 530 @ 370				shape: shape				city: city				nextNode: nil.	node15 := RoadNode 				position: 770 @ 380				shape: shape				city: city				nextNode: nil.	node16 := RoadNode 				position: 760 @ 370				shape: shape				city: city				nextNode: nil.	"create intersections and traffic lights"	intNodeNW1 := IntersectionNode 				position: 260 @ 130				shape: shape				city: city.	intNodeNE1 := IntersectionNode 				position: 270 @ 130				shape: shape				city: city.	intNodeSW1 := IntersectionNode 				position: 260 @ 140				shape: shape				city: city.	intNodeSE1 := IntersectionNode 				position: 270 @ 140				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW1;				addIntersectionNode: intNodeNE1;				addIntersectionNode: intNodeSW1;				addIntersectionNode: intNodeSE1).	intNodeNW2 := IntersectionNode 				position: 640 @ 130				shape: shape				city: city.	intNodeNE2 := IntersectionNode 				position: 650 @ 130				shape: shape				city: city.	intNodeSW2 := IntersectionNode 				position: 640 @ 140				shape: shape				city: city.	intNodeSE2 := IntersectionNode 				position: 650 @ 140				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW2;				addIntersectionNode: intNodeNE2;				addIntersectionNode: intNodeSW2;				addIntersectionNode: intNodeSE2).	intNodeNW3 := IntersectionNode 				position: 140 @ 250				shape: shape				city: city.	intNodeNE3 := IntersectionNode 				position: 150 @ 250				shape: shape				city: city.	intNodeSW3 := IntersectionNode 				position: 140 @ 260				shape: shape				city: city.	intNodeSE3 := IntersectionNode 				position: 150 @ 260				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW3;				addIntersectionNode: intNodeNE3;				addIntersectionNode: intNodeSW3;				addIntersectionNode: intNodeSE3).	intNodeNW4 := IntersectionNode 				position: 380 @ 250				shape: shape				city: city.	intNodeNE4 := IntersectionNode 				position: 390 @ 250				shape: shape				city: city.	intNodeSW4 := IntersectionNode 				position: 380 @ 260				shape: shape				city: city.	intNodeSE4 := IntersectionNode 				position: 390 @ 260				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW4;				addIntersectionNode: intNodeNE4;				addIntersectionNode: intNodeSW4;				addIntersectionNode: intNodeSE4).	intNodeNW5 := IntersectionNode 				position: 520 @ 250				shape: shape				city: city.	intNodeNE5 := IntersectionNode 				position: 530 @ 250				shape: shape				city: city.	intNodeSW5 := IntersectionNode 				position: 520 @ 260				shape: shape				city: city.	intNodeSE5 := IntersectionNode 				position: 530 @ 260				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW5;				addIntersectionNode: intNodeNE5;				addIntersectionNode: intNodeSW5;				addIntersectionNode: intNodeSE5).	intNodeNW6 := IntersectionNode 				position: 760 @ 250				shape: shape				city: city.	intNodeNE6 := IntersectionNode 				position: 770 @ 250				shape: shape				city: city.	intNodeSW6 := IntersectionNode 				position: 760 @ 260				shape: shape				city: city.	intNodeSE6 := IntersectionNode 				position: 770 @ 260				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW6;				addIntersectionNode: intNodeNE6;				addIntersectionNode: intNodeSW6;				addIntersectionNode: intNodeSE6).	intNodeNW7 := IntersectionNode 				position: 260 @ 370				shape: shape				city: city.	intNodeNE7 := IntersectionNode 				position: 270 @ 370				shape: shape				city: city.	intNodeSW7 := IntersectionNode 				position: 260 @ 380				shape: shape				city: city.	intNodeSE7 := IntersectionNode 				position: 270 @ 380				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW7;				addIntersectionNode: intNodeNE7;				addIntersectionNode: intNodeSW7;				addIntersectionNode: intNodeSE7).	intNodeNW8 := IntersectionNode 				position: 640 @ 370				shape: shape				city: city.	intNodeNE8 := IntersectionNode 				position: 650 @ 370				shape: shape				city: city.	intNodeSW8 := IntersectionNode 				position: 640 @ 380				shape: shape				city: city.	intNodeSE8 := IntersectionNode 				position: 650 @ 380				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW8;				addIntersectionNode: intNodeNE8;				addIntersectionNode: intNodeSW8;				addIntersectionNode: intNodeSE8).	"horizontal streets"	"internal horizontal traffic light connections"	intNodeNE1 connectTo: intNodeNW1.	intNodeSW1 connectTo: intNodeSE1.	intNodeNE2 connectTo: intNodeNW2.	intNodeSW2 connectTo: intNodeSE2.	intNodeNE3 connectTo: intNodeNW3.	intNodeSW3 connectTo: intNodeSE3.	intNodeNE4 connectTo: intNodeNW4.	intNodeSW4 connectTo: intNodeSE4.	intNodeNE5 connectTo: intNodeNW5.	intNodeSW5 connectTo: intNodeSE5.	intNodeNE6 connectTo: intNodeNW6.	intNodeSW6 connectTo: intNodeSE6.	intNodeNE7 connectTo: intNodeNW7.	intNodeSW7 connectTo: intNodeSE7.	intNodeNE8 connectTo: intNodeNW8.	intNodeSW8 connectTo: intNodeSE8.	"create and connect gates (horizontal)"	city 		addEntranceNodeFrom: 10 @ 260		to: intNodeSW3		step: 10		shape: shape.	city 		addExitNodeFrom: intNodeNW3		to: 10 @ 250		step: 10		shape: shape.	city 		addEntranceNodeFrom: 890 @ 250		to: intNodeNE6		step: 10		shape: shape.	city 		addExitNodeFrom: intNodeSE6		to: 890 @ 260		step: 10		shape: shape.	"horizontal internal streets"	city 		addNodesFrom: intNodeSE4		to: intNodeSW5		step: 10		shape: shape.	city 		addNodesFrom: intNodeNW5		to: intNodeNE4		step: 10		shape: shape.	city 		addNodesFrom: node2		to: intNodeSW1		step: 10		shape: shape.	city 		addNodesFrom: intNodeNW1		to: node1		step: 10		shape: shape.	city 		addNodesFrom: node3		to: intNodeNE1		step: 10		shape: shape.	city 		addNodesFrom: intNodeSE1		to: node4		step: 10		shape: shape.	city 		addNodesFrom: node6		to: intNodeSW2		step: 10		shape: shape.	city 		addNodesFrom: intNodeNW2		to: node5		step: 10		shape: shape.	city 		addNodesFrom: node7		to: intNodeNE2		step: 10		shape: shape.	city 		addNodesFrom: intNodeSE2		to: node8		step: 10		shape: shape.	city 		addNodesFrom: node9		to: intNodeSW7		step: 10		shape: shape.	city 		addNodesFrom: intNodeNW7		to: node10		step: 10		shape: shape.	city 		addNodesFrom: node12		to: intNodeNE7		step: 10		shape: shape.	city 		addNodesFrom: intNodeSE7		to: node11		step: 10		shape: shape.	city 		addNodesFrom: node13		to: intNodeSW8		step: 10		shape: shape.	city 		addNodesFrom: intNodeNW8		to: node14		step: 10		shape: shape.	city 		addNodesFrom: node16		to: intNodeNE8		step: 10		shape: shape.	city 		addNodesFrom: intNodeSE8		to: node15		step: 10		shape: shape.	"vertical streets"	"create and connect gates (vertical)"	city 		addExitNodeFrom: intNodeNE1		to: 270 @ 10		step: 10		shape: shape.	city 		addEntranceNodeFrom: 260 @ 10		to: intNodeNW1		step: 10		shape: shape.	city 		addExitNodeFrom: intNodeNE2		to: 650 @ 10		step: 10		shape: shape.	city 		addEntranceNodeFrom: 640 @ 10		to: intNodeNW2		step: 10		shape: shape.	city 		addExitNodeFrom: intNodeSW7		to: 260 @ 490		step: 10		shape: shape.	city 		addEntranceNodeFrom: 270 @ 490		to: intNodeSE7		step: 10		shape: shape.	city 		addExitNodeFrom: intNodeSW8		to: 640 @ 490		step: 10		shape: shape.	city 		addEntranceNodeFrom: 650 @ 490		to: intNodeSE8		step: 10		shape: shape.	"internal vertical traffic light connections"	intNodeNW1 connectTo: intNodeSW1.	intNodeSE1 connectTo: intNodeNE1.	intNodeNW2 connectTo: intNodeSW2.	intNodeSE2 connectTo: intNodeNE2.	intNodeNW3 connectTo: intNodeSW3.	intNodeSE3 connectTo: intNodeNE3.	intNodeNW4 connectTo: intNodeSW4.	intNodeSE4 connectTo: intNodeNE4.	intNodeNW5 connectTo: intNodeSW5.	intNodeSE5 connectTo: intNodeNE5.	intNodeNW6 connectTo: intNodeSW6.	intNodeSE6 connectTo: intNodeNE6.	intNodeNW7 connectTo: intNodeSW7.	intNodeSE7 connectTo: intNodeNE7.	intNodeNW8 connectTo: intNodeSW8.	intNodeSE8 connectTo: intNodeNE8.	"vertical internal streets"	city 		addNodesFrom: node1		to: intNodeNW3		step: 10		shape: shape.	city 		addNodesFrom: intNodeNE3		to: node2		step: 10		shape: shape.	city 		addNodesFrom: node10		to: intNodeSE3		step: 10		shape: shape.	city 		addNodesFrom: intNodeSW3		to: node9		step: 10		shape: shape.	city 		addNodesFrom: node4		to: intNodeNW4		step: 10		shape: shape.	city 		addNodesFrom: intNodeNE4		to: node3		step: 10		shape: shape.	city 		addNodesFrom: node11		to: intNodeSE4		step: 10		shape: shape.	city 		addNodesFrom: intNodeSW4		to: node12		step: 10		shape: shape.	city 		addNodesFrom: node5		to: intNodeNW5		step: 10		shape: shape.	city 		addNodesFrom: intNodeNE5		to: node6		step: 10		shape: shape.	city 		addNodesFrom: node14		to: intNodeSE5		step: 10		shape: shape.	city 		addNodesFrom: intNodeSW5		to: node13		step: 10		shape: shape.	city 		addNodesFrom: node8		to: intNodeNW6		step: 10		shape: shape.	city 		addNodesFrom: intNodeNE6		to: node7		step: 10		shape: shape.	city 		addNodesFrom: node15		to: intNodeSE6		step: 10		shape: shape.	city 		addNodesFrom: intNodeSW6		to: node16		step: 10		shape: shape.	^city</body><body package="BugTraffic">city6	| city shape node1 node2 node3 node4 node5 node6 node7 node8 intNodeNW1 intNodeNE1 intNodeSW1 intNodeSE1 intNodeNW2 intNodeNE2 intNodeSW2 intNodeSE2 intNodeNW3 intNodeNE3 intNodeSW3 intNodeSE3 intNodeNW4 intNodeNE4 intNodeSW4 intNodeSE4 intNodeNW5 intNodeNE5 intNodeSW5 intNodeSE5 intNodeNW6 intNodeNE6 intNodeSW6 intNodeSE6 intNodeNW7 intNodeNE7 intNodeSW7 intNodeSE7 intNodeNW8 intNodeNE8 intNodeSW8 intNodeSE8 intNodeNW9 intNodeNE9 intNodeSW9 intNodeSE9 intNodeNW10 intNodeNE10 intNodeSW10 intNodeSE10 intNodeNW11 intNodeNE11 intNodeSW11 intNodeSE11 intNodeNW12 intNodeNE12 intNodeSW12 intNodeSE12 |	shape := Shape shape: (Rectangle origin: -5 @ -5 corner: 5 @ 5) asFiller				color: ColorValue brown.	city := City insectFrequency: 8.	node1 := RoadNode 				position: 230 @ 120				shape: shape				city: city				nextNode: nil.	node2 := RoadNode 				position: 240 @ 130				shape: shape				city: city				nextNode: nil.	node3 := RoadNode 				position: 670 @ 120				shape: shape				city: city				nextNode: nil.	node4 := RoadNode 				position: 660 @ 130				shape: shape				city: city				nextNode: nil.	node5 := RoadNode 				position: 230 @ 380				shape: shape				city: city				nextNode: nil.	node6 := RoadNode 				position: 240 @ 370				shape: shape				city: city				nextNode: nil.	node7 := RoadNode 				position: 670 @ 380				shape: shape				city: city				nextNode: nil.	node8 := RoadNode 				position: 660 @ 370				shape: shape				city: city				nextNode: nil.	"create intersections and traffic lights"	intNodeNW1 := IntersectionNode 				position: 130 @ 20				shape: shape				city: city.	intNodeNE1 := IntersectionNode 				position: 140 @ 20				shape: shape				city: city.	intNodeSW1 := IntersectionNode 				position: 130 @ 30				shape: shape				city: city.	intNodeSE1 := IntersectionNode 				position: 140 @ 30				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW1;				addIntersectionNode: intNodeNE1;				addIntersectionNode: intNodeSW1;				addIntersectionNode: intNodeSE1).	intNodeNW2 := IntersectionNode 				position: 450 @ 20				shape: shape				city: city.	intNodeNE2 := IntersectionNode 				position: 460 @ 20				shape: shape				city: city.	intNodeSW2 := IntersectionNode 				position: 450 @ 30				shape: shape				city: city.	intNodeSE2 := IntersectionNode 				position: 460 @ 30				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW2;				addIntersectionNode: intNodeNE2;				addIntersectionNode: intNodeSW2;				addIntersectionNode: intNodeSE2).	intNodeNW3 := IntersectionNode 				position: 760 @ 20				shape: shape				city: city.	intNodeNE3 := IntersectionNode 				position: 770 @ 20				shape: shape				city: city.	intNodeSW3 := IntersectionNode 				position: 760 @ 30				shape: shape				city: city.	intNodeSE3 := IntersectionNode 				position: 770 @ 30				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW3;				addIntersectionNode: intNodeNE3;				addIntersectionNode: intNodeSW3;				addIntersectionNode: intNodeSE3).	intNodeNW4 := IntersectionNode 				position: 130 @ 250				shape: shape				city: city.	intNodeNE4 := IntersectionNode 				position: 140 @ 250				shape: shape				city: city.	intNodeSW4 := IntersectionNode 				position: 130 @ 260				shape: shape				city: city.	intNodeSE4 := IntersectionNode 				position: 140 @ 260				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW4;				addIntersectionNode: intNodeNE4;				addIntersectionNode: intNodeSW4;				addIntersectionNode: intNodeSE4).	intNodeNW5 := IntersectionNode 				position: 760 @ 250				shape: shape				city: city.	intNodeNE5 := IntersectionNode 				position: 770 @ 250				shape: shape				city: city.	intNodeSW5 := IntersectionNode 				position: 760 @ 260				shape: shape				city: city.	intNodeSE5 := IntersectionNode 				position: 770 @ 260				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW5;				addIntersectionNode: intNodeNE5;				addIntersectionNode: intNodeSW5;				addIntersectionNode: intNodeSE5).	intNodeNW6 := IntersectionNode 				position: 130 @ 470				shape: shape				city: city.	intNodeNE6 := IntersectionNode 				position: 140 @ 470				shape: shape				city: city.	intNodeSW6 := IntersectionNode 				position: 130 @ 480				shape: shape				city: city.	intNodeSE6 := IntersectionNode 				position: 140 @ 480				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW6;				addIntersectionNode: intNodeNE6;				addIntersectionNode: intNodeSW6;				addIntersectionNode: intNodeSE6).	intNodeNW7 := IntersectionNode 				position: 450 @ 470				shape: shape				city: city.	intNodeNE7 := IntersectionNode 				position: 460 @ 470				shape: shape				city: city.	intNodeSW7 := IntersectionNode 				position: 450 @ 480				shape: shape				city: city.	intNodeSE7 := IntersectionNode 				position: 460 @ 480				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW7;				addIntersectionNode: intNodeNE7;				addIntersectionNode: intNodeSW7;				addIntersectionNode: intNodeSE7).	intNodeNW8 := IntersectionNode 				position: 760 @ 470				shape: shape				city: city.	intNodeNE8 := IntersectionNode 				position: 770 @ 470				shape: shape				city: city.	intNodeSW8 := IntersectionNode 				position: 760 @ 480				shape: shape				city: city.	intNodeSE8 := IntersectionNode 				position: 770 @ 480				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW8;				addIntersectionNode: intNodeNE8;				addIntersectionNode: intNodeSW8;				addIntersectionNode: intNodeSE8).	intNodeNW9 := IntersectionNode 				position: 450 @ 120				shape: shape				city: city.	intNodeNE9 := IntersectionNode 				position: 460 @ 120				shape: shape				city: city.	intNodeSW9 := IntersectionNode 				position: 450 @ 130				shape: shape				city: city.	intNodeSE9 := IntersectionNode 				position: 460 @ 130				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW9;				addIntersectionNode: intNodeNE9;				addIntersectionNode: intNodeSW9;				addIntersectionNode: intNodeSE9).	intNodeNW10 := IntersectionNode 				position: 230 @ 250				shape: shape				city: city.	intNodeNE10 := IntersectionNode 				position: 240 @ 250				shape: shape				city: city.	intNodeSW10 := IntersectionNode 				position: 230 @ 260				shape: shape				city: city.	intNodeSE10 := IntersectionNode 				position: 240 @ 260				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW10;				addIntersectionNode: intNodeNE10;				addIntersectionNode: intNodeSW10;				addIntersectionNode: intNodeSE10).	intNodeNW12 := IntersectionNode 				position: 660 @ 250				shape: shape				city: city.	intNodeNE12 := IntersectionNode 				position: 670 @ 250				shape: shape				city: city.	intNodeSW12 := IntersectionNode 				position: 660 @ 260				shape: shape				city: city.	intNodeSE12 := IntersectionNode 				position: 670 @ 260				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW12;				addIntersectionNode: intNodeNE12;				addIntersectionNode: intNodeSW12;				addIntersectionNode: intNodeSE12).	intNodeNW11 := IntersectionNode 				position: 450 @ 370				shape: shape				city: city.	intNodeNE11 := IntersectionNode 				position: 460 @ 370				shape: shape				city: city.	intNodeSW11 := IntersectionNode 				position: 450 @ 380				shape: shape				city: city.	intNodeSE11 := IntersectionNode 				position: 460 @ 380				shape: shape				city: city.	city addTrafficLight: ((TrafficLight new)				addIntersectionNode: intNodeNW11;				addIntersectionNode: intNodeNE11;				addIntersectionNode: intNodeSW11;				addIntersectionNode: intNodeSE11).	"horizontal streets"	"internal horizontal traffic light connections"	intNodeNE1 connectTo: intNodeNW1.	intNodeSW1 connectTo: intNodeSE1.	intNodeNE2 connectTo: intNodeNW2.	intNodeSW2 connectTo: intNodeSE2.	intNodeNE3 connectTo: intNodeNW3.	intNodeSW3 connectTo: intNodeSE3.	intNodeNE4 connectTo: intNodeNW4.	intNodeSW4 connectTo: intNodeSE4.	intNodeNE5 connectTo: intNodeNW5.	intNodeSW5 connectTo: intNodeSE5.	intNodeNE6 connectTo: intNodeNW6.	intNodeSW6 connectTo: intNodeSE6.	intNodeNE7 connectTo: intNodeNW7.	intNodeSW7 connectTo: intNodeSE7.	intNodeNE8 connectTo: intNodeNW8.	intNodeSW8 connectTo: intNodeSE8.	intNodeNE9 connectTo: intNodeNW9.	intNodeSW9 connectTo: intNodeSE9.	intNodeNE10 connectTo: intNodeNW10.	intNodeSW10 connectTo: intNodeSE10.	intNodeNE11 connectTo: intNodeNW11.	intNodeSW11 connectTo: intNodeSE11.	intNodeNE12 connectTo: intNodeNW12.	intNodeSW12 connectTo: intNodeSE12.	"create and connect gates (horizontal)"	city 		addEntranceNodeFrom: 20 @ 30		to: intNodeSW1		step: 10		shape: shape.	city 		addExitNodeFrom: intNodeNW1		to: 20 @ 20		step: 10		shape: shape.	city 		addEntranceNodeFrom: 880 @ 20		to: intNodeNE3		step: 10		shape: shape.	city 		addExitNodeFrom: intNodeSE3		to: 880 @ 30		step: 10		shape: shape.	city 		addEntranceNodeFrom: 20 @ 260		to: intNodeSW4		step: 10		shape: shape.	city 		addExitNodeFrom: intNodeNW4		to: 20 @ 250		step: 10		shape: shape.	city 		addEntranceNodeFrom: 880 @ 250		to: intNodeNE5		step: 10		shape: shape.	city 		addExitNodeFrom: intNodeSE5		to: 880 @ 260		step: 10		shape: shape.	city 		addEntranceNodeFrom: 20 @ 480		to: intNodeSW6		step: 10		shape: shape.	city 		addExitNodeFrom: intNodeNW6		to: 20 @ 470		step: 10		shape: shape.	city 		addEntranceNodeFrom: 880 @ 470		to: intNodeNE8		step: 10		shape: shape.	city 		addExitNodeFrom: intNodeSE8		to: 880 @ 480		step: 10		shape: shape.	"horizontal internal streets"	city 		addNodesFrom: intNodeNW10		to: intNodeNE4		step: 10		shape: shape.	city 		addNodesFrom: intNodeSE4		to: intNodeSW10		step: 10		shape: shape.	city 		addNodesFrom: intNodeNW5		to: intNodeNE12		step: 10		shape: shape.	city 		addNodesFrom: intNodeSE12		to: intNodeSW5		step: 10		shape: shape.	city 		addNodesFrom: intNodeNW2		to: intNodeNE1		step: 10		shape: shape.	city 		addNodesFrom: intNodeSE1		to: intNodeSW2		step: 10		shape: shape.	city 		addNodesFrom: intNodeNW3		to: intNodeNE2		step: 10		shape: shape.	city 		addNodesFrom: intNodeSE2		to: intNodeSW3		step: 10		shape: shape.	city 		addNodesFrom: intNodeNW7		to: intNodeNE6		step: 10		shape: shape.	city 		addNodesFrom: intNodeSE6		to: intNodeSW7		step: 10		shape: shape.	city 		addNodesFrom: intNodeSE7		to: intNodeSW8		step: 10		shape: shape.	city 		addNodesFrom: intNodeNW8		to: intNodeNE7		step: 10		shape: shape.	city 		addNodesFrom: intNodeNW9		to: node1		step: 10		shape: shape.	city 		addNodesFrom: node2		to: intNodeSW9		step: 10		shape: shape.	city 		addNodesFrom: node3		to: intNodeNE9		step: 10		shape: shape.	city 		addNodesFrom: intNodeSE9		to: node4		step: 10		shape: shape.	city 		addNodesFrom: intNodeNW11		to: node6		step: 10		shape: shape.	city 		addNodesFrom: node5		to: intNodeSW11		step: 10		shape: shape.	city 		addNodesFrom: intNodeSE11		to: node7		step: 10		shape: shape.	city 		addNodesFrom: node8		to: intNodeNE11		step: 10		shape: shape.	"vertical streets"	"internal vertical traffic light connections"	intNodeNW1 connectTo: intNodeSW1.	intNodeSE1 connectTo: intNodeNE1.	intNodeNW2 connectTo: intNodeSW2.	intNodeSE2 connectTo: intNodeNE2.	intNodeNW3 connectTo: intNodeSW3.	intNodeSE3 connectTo: intNodeNE3.	intNodeNW4 connectTo: intNodeSW4.	intNodeSE4 connectTo: intNodeNE4.	intNodeNW5 connectTo: intNodeSW5.	intNodeSE5 connectTo: intNodeNE5.	intNodeNW6 connectTo: intNodeSW6.	intNodeSE6 connectTo: intNodeNE6.	intNodeNW7 connectTo: intNodeSW7.	intNodeSE7 connectTo: intNodeNE7.	intNodeNW8 connectTo: intNodeSW8.	intNodeSE8 connectTo: intNodeNE8.	intNodeNW9 connectTo: intNodeSW9.	intNodeSE9 connectTo: intNodeNE9.	intNodeNW10 connectTo: intNodeSW10.	intNodeSE10 connectTo: intNodeNE10.	intNodeNW11 connectTo: intNodeSW11.	intNodeSE11 connectTo: intNodeNE11.	intNodeNW12 connectTo: intNodeSW12.	intNodeSE12 connectTo: intNodeNE12.	"vertical internal streets"	city 		addNodesFrom: intNodeSW2		to: intNodeNW9		step: 10		shape: shape.	city 		addNodesFrom: intNodeNE9		to: intNodeSE2		step: 10		shape: shape.	city 		addNodesFrom: intNodeSW11		to: intNodeNW7		step: 10		shape: shape.	city 		addNodesFrom: intNodeNE7		to: intNodeSE11		step: 10		shape: shape.	city 		addNodesFrom: intNodeSW1		to: intNodeNW4		step: 10		shape: shape.	city 		addNodesFrom: intNodeNE4		to: intNodeSE1		step: 10		shape: shape.	city 		addNodesFrom: intNodeSW4		to: intNodeNW6		step: 10		shape: shape.	city 		addNodesFrom: intNodeNE6		to: intNodeSE4		step: 10		shape: shape.	city 		addNodesFrom: intNodeSW3		to: intNodeNW5		step: 10		shape: shape.	city 		addNodesFrom: intNodeNE5		to: intNodeSE3		step: 10		shape: shape.	city 		addNodesFrom: intNodeSW5		to: intNodeNW8		step: 10		shape: shape.	city 		addNodesFrom: intNodeNE8		to: intNodeSE5		step: 10		shape: shape.	city 		addNodesFrom: node1		to: intNodeNW10		step: 10		shape: shape.	city 		addNodesFrom: intNodeNE10		to: node2		step: 10		shape: shape.	city 		addNodesFrom: intNodeSW10		to: node5		step: 10		shape: shape.	city 		addNodesFrom: node6		to: intNodeSE10		step: 10		shape: shape.	city 		addNodesFrom: node4		to: intNodeNW12		step: 10		shape: shape.	city 		addNodesFrom: intNodeNE12		to: node3		step: 10		shape: shape.	city 		addNodesFrom: intNodeSW12		to: node8		step: 10		shape: shape.	city 		addNodesFrom: node7		to: intNodeSE12		step: 10		shape: shape.	^city</body></methods><methods><class-id>BugTraffic.Game class</class-id> <category>initialization</category><body package="BugTraffic">initialize	InsectBuilder initialize</body></methods><methods><class-id>BugTraffic.Game class</class-id> <category>instance creation</category><body package="BugTraffic">new 	^super new initialize</body></methods><methods><class-id>BugTraffic.Node</class-id> <category>accessing</category><body package="BugTraffic">addPreviousNode: aNode</body><body package="BugTraffic">isEmpty	^empty</body><body package="BugTraffic">isOccupied	^self isEmpty not</body><body package="BugTraffic">occupiedBy: anInsectPart	empty := false</body><body package="BugTraffic">position	^position</body><body package="BugTraffic">setChanged	changed := true</body><body package="BugTraffic">setEmpty	empty := true</body><body package="BugTraffic">shape	^shape</body></methods><methods><class-id>BugTraffic.Node</class-id> <category>actions</category><body package="BugTraffic">removeFirstInsect</body></methods><methods><class-id>BugTraffic.Node</class-id> <category>querying</category><body package="BugTraffic">canMoveFrom: aNode 	^self isEmpty</body><body package="BugTraffic">distanceTo: aNode	^position dist: aNode position</body><body package="BugTraffic">insectIsDisplayable	^true</body><body package="BugTraffic">isIntersectionNode	^false</body><body package="BugTraffic">nextNodeTo: aNode	^self subclassResponsibility</body></methods><methods><class-id>BugTraffic.Node</class-id> <category>initialize-release</category><body package="BugTraffic">initialize	empty := true.	changed := true</body><body package="BugTraffic">position: aPosition shape: aShape city: aCity	self initialize.	position := aPosition.	shape := aShape.	aCity addNode: self</body></methods><methods><class-id>BugTraffic.Node</class-id> <category>drawing</category><body package="BugTraffic">drawOn: aGC 	changed		ifTrue: 			[shape drawOn: aGC at: position.			changed := false]</body></methods><methods><class-id>BugTraffic.Node class</class-id> <category>instance creation</category><body package="BugTraffic">position: aPosition shape: aShape city: aCity	^self new position: aPosition shape: aShape city: aCity</body></methods><methods><class-id>BugTraffic.EntranceNode</class-id> <category>private</category><body package="BugTraffic">blinkingColor	self lineSize &gt;= MinimumBlinkingLineLength ifFalse: [^FirstBlinkingColor].	blinkingCounter := blinkingCounter + 1.	blinkingCounter &gt; TicksToChangeColor		ifTrue: 			[blinkingCounter := 0.			blinkingColor = FirstBlinkingColor				ifTrue: [blinkingColor := SecondBlinkingColor]				ifFalse: [blinkingColor := FirstBlinkingColor]].	^blinkingColor</body></methods><methods><class-id>BugTraffic.EntranceNode</class-id> <category>actions</category><body package="BugTraffic">addNewInsect: anInsect	changed := true.	insects add: anInsect.	anInsect initialPosition: self position</body><body package="BugTraffic">removeFirstInsect	changed := true.	insects removeFirst</body></methods><methods><class-id>BugTraffic.EntranceNode</class-id> <category>accessing</category><body package="BugTraffic">lineSize	^nextNode isEmpty		ifTrue: [insects size - 1 max: 0]		ifFalse: [insects size]</body><body package="BugTraffic">nextNode: aNode	nextNode := aNode</body></methods><methods><class-id>BugTraffic.EntranceNode</class-id> <category>initialize-release</category><body package="BugTraffic">initialize	super initialize.	insects := OrderedCollection new.	blinkingColor := FirstBlinkingColor.	blinkingCounter := 0</body><body package="BugTraffic">position: aPosition shape: aShape city: aCity	super position: aPosition shape: aShape city: aCity.	aCity addEntranceNode: self</body></methods><methods><class-id>BugTraffic.EntranceNode</class-id> <category>querying</category><body package="BugTraffic">canMoveFrom: aNode 	^(self isEmpty) | (aNode = self)</body><body package="BugTraffic">insectIsDisplayable	^false</body><body package="BugTraffic">nextNodeTo: aNode 	^nextNode</body></methods><methods><class-id>BugTraffic.EntranceNode</class-id> <category>drawing</category><body package="BugTraffic">drawOn: aGC 	| text |	self lineSize &gt; 0		ifTrue: [aGC paint: self blinkingColor]		ifFalse: [aGC paint: ColorValue orange].	(-5 @ -5 corner: 4 @ 4) asFiller displayOn: aGC at: self position.	aGC paint: ColorValue black.	(-5 @ -5 corner: 4 @ 4) asStroker displayOn: aGC at: self position.	text := self lineSize printString asComposedText textStyle: (TextAttributes styleNamed: #small).	self lineSize &gt; 0 ifTrue: [aGC display: text at: self position - (Point x: text width / 2 - 1 y: text height / 2 + 1)]</body></methods><methods><class-id>BugTraffic.GameCycle</class-id> <category>actions</category><body package="BugTraffic">pause	running := false.	process suspend.</body><body package="BugTraffic">start	running := true.	process resume.</body><body package="BugTraffic">stop	running := false.	process terminate.</body><body package="BugTraffic">togglePause	running		ifTrue: [self pause]		ifFalse: [self start]</body></methods><methods><class-id>BugTraffic.GameCycle</class-id> <category>initialize-release</category><body package="BugTraffic">block	^	[| initialTime lapse |	(Delay forMilliseconds: 100) wait.	[true] whileTrue: 			[initialTime := Time millisecondClockValue.			city update.			game changed.			game checkState.			(lapse := (Time millisecondClockValue - initialTime) abs) &lt; interval 				ifTrue: [(Delay forMilliseconds: interval - lapse) wait]]]</body><body package="BugTraffic">game: aGame city: aCity interval: anInterval 	game := aGame.	city := aCity.	interval := anInterval.	process := Process forBlock: self block priority: 20.	running := false</body></methods><methods><class-id>BugTraffic.GameCycle</class-id> <category>accessing</category><body package="BugTraffic">isRunning	^running</body></methods><methods><class-id>BugTraffic.GameCycle class</class-id> <category>instance creation</category><body package="BugTraffic">game: aGame city: aCity interval: anInterval 	^self new		game: aGame		city: aCity		interval: anInterval</body></methods><methods><class-id>BugTraffic.TrafficLight</class-id> <category>initialize-release</category><body package="BugTraffic">initialize	intersectionNodes := OrderedCollection new.	shapeComposite := CompositePart new</body></methods><methods><class-id>BugTraffic.TrafficLight</class-id> <category>testing</category><body package="BugTraffic">containsPosition: aPoint	^shapeComposite containsPoint: aPoint</body></methods><methods><class-id>BugTraffic.TrafficLight</class-id> <category>drawing</category><body package="BugTraffic">drawOn: aGC	intersectionNodes do: [:each | each drawTrafficLightOn: aGC]</body></methods><methods><class-id>BugTraffic.TrafficLight</class-id> <category>accessing</category><body package="BugTraffic">addAllIntersectionNodes: aCollection	intersectionNodes addAll: aCollection.	aCollection do: [:aNode | shapeComposite add: aNode shape shape at: aNode position]</body><body package="BugTraffic">addIntersectionNode: aNode	intersectionNodes add: aNode.	shapeComposite add: aNode shape shape at: aNode position</body></methods><methods><class-id>BugTraffic.TrafficLight</class-id> <category>actions</category><body package="BugTraffic">changeState	intersectionNodes do: [:each | each setChanged. each togglePreviousNodeInGreen]</body></methods><methods><class-id>BugTraffic.TrafficLight class</class-id> <category>instance creation</category><body package="BugTraffic">new	^super new initialize</body></methods><methods><class-id>BugTraffic.AboutDlg</class-id> <category>actions</category><body package="BugTraffic">OKButton	Window currentWindow controller close</body></methods><methods><class-id>BugTraffic.AboutDlg</class-id> <category>aspects</category><body package="BugTraffic">textField	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^textField isNil		ifTrue:			[textField := self textData asValue asValue]		ifFalse:			[textField]</body></methods><methods><class-id>BugTraffic.AboutDlg</class-id> <category>data</category><body package="BugTraffic">textData^ 'Object Oriented Programming and Design University of Illinois at Urbana-Champaign - 2001Authors:  Guillermo CantÃº 	        Ariel GertzensteinHow to play:The objective of each level is to help 200 insects leave a city. When that is accomplished you pass to the next level, which is usually a more difficult city.Insects can only go across intersections whose traffic lights are in green. You can switch traffic lights clicking on them with the left mouse button.There are 3 tries. You lose a try when there is a line of insects so long that there are 5 insects that can not enter through one of the city entrances. The number of insects that are waiting to enter the city is shown in each entrance. The longest line is shown in the main panel. You can get an additional try every 10 thousand points.'</body></methods><methods><class-id>BugTraffic.InsectPart</class-id> <category>drawing</category><body package="BugTraffic">drawOn: aGC from: aPoint 	node insectIsDisplayable 		ifTrue: 			[changed 				ifTrue: 					[self isTail ifFalse: [nextInsectPart drawOn: aGC from: self position].					shape 						drawOn: aGC						at: self position						orientation: (self orientationFrom: aPoint).					changed := false]]</body></methods><methods><class-id>BugTraffic.InsectPart</class-id> <category>actions</category><body package="BugTraffic">moveTo: aNode 	| oldNode |	oldNode := node.	node setEmpty.	aNode occupiedBy: self.	node := aNode.	self isTail ifFalse: [nextInsectPart moveTo: oldNode].	oldNode setChanged.	changed := true</body><body package="BugTraffic">setChanged	changed := true.	self isTail ifFalse: [nextInsectPart setChanged]</body></methods><methods><class-id>BugTraffic.InsectPart</class-id> <category>accessing</category><body package="BugTraffic">isHead	^false</body><body package="BugTraffic">isTail	^nextInsectPart isNil</body><body package="BugTraffic">node: aNode	node := aNode.	self isTail ifFalse: [nextInsectPart node: aNode]</body><body package="BugTraffic">orientationFrom: aPoint 	^self position x = aPoint x		ifFalse: [self position x &lt; aPoint x				ifTrue: [#right]				ifFalse: [#left]]		ifTrue: [self position y &lt; aPoint y				ifTrue: [#down]				ifFalse: [#up]]</body><body package="BugTraffic">position	^node position</body></methods><methods><class-id>BugTraffic.InsectPart</class-id> <category>initialize-release</category><body package="BugTraffic">initialize	changed := true</body><body package="BugTraffic">shape: aShape nextInsectPart: anInsectPart	self initialize.	shape := aShape.	nextInsectPart := anInsectPart</body></methods><methods><class-id>BugTraffic.InsectPart class</class-id> <category>instance creation</category><body package="BugTraffic">shape: aShape	^self new shape: aShape nextInsectPart: nil</body><body package="BugTraffic">shape: aShape nextInsectPart: anInsectPart	^self new shape: aShape nextInsectPart: anInsectPart</body></methods><methods><class-id>BugTraffic.RoadNode</class-id> <category>querying</category><body package="BugTraffic">nextNodeTo: aNode	^nextNode</body></methods><methods><class-id>BugTraffic.RoadNode</class-id> <category>accessing</category><body package="BugTraffic">nextNode: aNode	nextNode := aNode</body></methods><methods><class-id>BugTraffic.RoadNode class</class-id> <category>instance creation</category><body package="BugTraffic">position: aPosition shape: aShape city: aCity nextNode: aNode 	^(self new		position: aPosition		shape: aShape		city: aCity)		nextNode: aNode</body></methods><methods><class-id>BugTraffic.TrafficView</class-id> <category>displaying</category><body package="BugTraffic">background	background isNil 		ifTrue: 			[| image |			image := self backgroundImage image.			background := Image 						extent: 900 @ 500						depth: image depth						bitsPerPixel: image bitsPerPixel						palette: image palette.			background 				tile: (0 @ 0 corner: 900 @ 500)				from: 0 @ 0				in: image				rule: 3].	^background</body><body package="BugTraffic">displayOn: aGC	self background displayOn: aGC.	self model setChanged.	self model drawOn: aGC</body></methods><methods><class-id>BugTraffic.TrafficView</class-id> <category>updating</category><body package="BugTraffic">update: aSymbol with: aValue 	aSymbol == #newGame ifTrue: [^self invalidateNow].	aSymbol == #endGame ifTrue: [^self invalidateNow].	aSymbol == #newLevel ifTrue: [^self invalidateNow].	aSymbol == #passToNextLevel ifTrue: [^self model drawNewLevelTextOn: self graphicsContext].	aSymbol == #loseLife ifTrue: [^self model drawLoseLifeTextOn: self graphicsContext].	aSymbol == #win ifTrue: [^self model drawWinTextOn: self graphicsContext].	^self model drawOn: self graphicsContext</body></methods><methods><class-id>BugTraffic.TrafficView</class-id> <category>controller accessing</category><body package="BugTraffic">defaultControllerClass	^GameController</body></methods><methods><class-id>BugTraffic.GameController</class-id> <category>events</category><body package="BugTraffic">redButtonPressedEvent: event 	^model toggleTrafficLightAt: event point - (self view container insetDisplayBox origin)</body></methods><methods><class-id>BugTraffic.City</class-id> <category>accessing</category><body package="BugTraffic">addEntranceNode: aNode 	entranceNodes add: aNode.	nodes add: aNode</body><body package="BugTraffic">addEntranceNodeFrom: entranceNodePosition to: toNode step: aDistanceBetweenNodes shape: aShape	| fromNode |	fromNode := EntranceNode				position: entranceNodePosition				shape: aShape				city: self.	self		addNodesFrom: fromNode		to: toNode		step: aDistanceBetweenNodes		shape: aShape</body><body package="BugTraffic">addExitNode: aNode 	exitNodes add: aNode.	nodes add: aNode</body><body package="BugTraffic">addExitNodeFrom: fromNode to: exitNodePosition step: aDistanceBetweenNodes shape: aShape	| toNode |	toNode := ExitNode				position: exitNodePosition				shape: aShape				city: self.	self		addNodesFrom: fromNode		to: toNode		step: aDistanceBetweenNodes		shape: aShape</body><body package="BugTraffic">addNode: aNode 	nodes add: aNode</body><body package="BugTraffic">addNodesFrom: fromNode to: toNode step: aDistanceBetweenNodes shape: aShape 	| angle stepX stepY nodeNumber node |	node := toNode.	toNode position x - fromNode position x = 0		ifTrue: 			[stepX := 0.			toNode position y &lt; fromNode position y				ifTrue: [stepY := aDistanceBetweenNodes negated]				ifFalse: [stepY := aDistanceBetweenNodes].			nodeNumber := (toNode position y - fromNode position y / stepY) abs - 1]		ifFalse: 			[angle := (toNode position y - fromNode position y / (toNode position x - fromNode position x)) abs arcTan.			stepX := aDistanceBetweenNodes * angle cos.			stepY := aDistanceBetweenNodes * angle sin.			toNode position x &lt; fromNode position x ifTrue: [stepX := stepX negated].			toNode position y &lt; fromNode position y ifTrue: [stepY := stepY negated].			nodeNumber := (toNode position x - fromNode position x / stepX) abs - 1].	nodeNumber := nodeNumber rounded.	nodeNumber &gt; 0		ifTrue: 			[node := RoadNode						position: toNode position - (stepX @ stepY)						shape: aShape						city: self						nextNode: toNode.			self addNode: node.			toNode addPreviousNode: node].	nodeNumber - 1		timesRepeat: 			[node := RoadNode						position: node position - (stepX @ stepY)						shape: aShape						city: self						nextNode: node.			self addNode: node].	fromNode nextNode: node</body><body package="BugTraffic">addTrafficLight: aTL 	trafficLights add: aTL</body><body package="BugTraffic">incrementInsectsGone	insectsGone := insectsGone + 1</body><body package="BugTraffic">insectFrequency: aFrequency	newInsectFrequency := aFrequency</body><body package="BugTraffic">insectsGone	^insectsGone</body><body package="BugTraffic">longestLine	| max currentLineSize |	max := 0.	entranceNodes do: 			[:each | 			currentLineSize := each lineSize.			max := max max: currentLineSize].	^max</body><body package="BugTraffic">removeInsect: anInsect 	insectsToRemove add: anInsect.	self incrementInsectsGone.	^self</body></methods><methods><class-id>BugTraffic.City</class-id> <category>drawing</category><body package="BugTraffic">drawOn: aGC	nodes do: [:each | each drawOn: aGC].	insects do: [:each | each drawOn: aGC].	trafficLights do: [:each | each drawOn: aGC]</body></methods><methods><class-id>BugTraffic.City</class-id> <category>private</category><body package="BugTraffic">randomEntranceGateNode	^entranceNodes 		at: (randomGenerator next * entranceNodes size + 1) truncated</body><body package="BugTraffic">randomExitGateNode	^exitNodes at: (randomGenerator next * exitNodes size + 1) truncated</body></methods><methods><class-id>BugTraffic.City</class-id> <category>actions</category><body package="BugTraffic">insertNewInsect	| newInsect node|	newInsect := InsectBuilder randomInsect.	newInsect targetNode: self randomExitGateNode.	node := self randomEntranceGateNode.	newInsect node: node.	node addNewInsect: newInsect.	insects add: newInsect</body><body package="BugTraffic">setChanged	nodes do: [:each | each setChanged].	insects do: [:each | each setChanged]</body><body package="BugTraffic">toggleTrafficLightAt: aPosition 	trafficLights do: [:each | (each containsPosition: aPosition)			ifTrue: [each changeState]]</body><body package="BugTraffic">update	iterationCounter := iterationCounter + 1.	insects do: [:each | each update].	insects removeAll: insectsToRemove.	insectsToRemove := OrderedCollection new.	iterationCounter &gt;= newInsectFrequency		ifTrue: 			[iterationCounter := 0.			self insertNewInsect]</body></methods><methods><class-id>BugTraffic.City</class-id> <category>initialize-release</category><body package="BugTraffic">initialize	insectsGone := 0.	iterationCounter := 0.	insects := OrderedCollection new.	exitNodes := OrderedCollection new.	nodes := OrderedCollection new.	entranceNodes := OrderedCollection new.	insectsToRemove := OrderedCollection new.	randomGenerator := Random new.	trafficLights := OrderedCollection new</body></methods><methods><class-id>BugTraffic.City class</class-id> <category>instance creation</category><body package="BugTraffic">insectFrequency: aFrequency 	^self new initialize insectFrequency: aFrequency</body></methods><methods><class-id>BugTraffic.InsectHead</class-id> <category>initialize-release</category><body package="BugTraffic">initialize	super initialize.	iterationCounter := 0.	deadlockCounter := 0.	deadlockMax := (RandomGenerator next * 15 + 5) truncated</body><body package="BugTraffic">speed: aSpeed shape: aShape nextInsectPart: anInsectPart	self initialize.	speed := aSpeed.	shape := aShape.	nextInsectPart := anInsectPart</body></methods><methods><class-id>BugTraffic.InsectHead</class-id> <category>actions</category><body package="BugTraffic">chooseNextNode	| nextNode |	deadlockCounter = deadlockMax 		ifTrue: 			[deadlockCounter := 0.			nextNode := node secondBestNextNodeTo: targetNode]		ifFalse: [nextNode := node nextNodeTo: targetNode].	^nextNode</body><body package="BugTraffic">moveTo: aNode	node removeFirstInsect.	previousPosition := node position.	super moveTo: aNode</body><body package="BugTraffic">update	| nextNode |	iterationCounter := iterationCounter + 1.	iterationCounter = speed ifFalse: [^self].	iterationCounter := 0.	nextNode := self chooseNextNode.	(nextNode canMoveFrom: node) 		ifTrue: 			[deadlockCounter := 0.			self moveTo: nextNode]		ifFalse: 			[node isIntersectionNode ifTrue: [deadlockCounter := deadlockCounter + 1]]</body></methods><methods><class-id>BugTraffic.InsectHead</class-id> <category>accessing</category><body package="BugTraffic">initialPosition: aPoint	previousPosition := aPoint</body><body package="BugTraffic">isHead	^true</body><body package="BugTraffic">orientationFrom: aPoint 	^self position x = aPoint x		ifFalse: [self position x &lt; aPoint x				ifTrue: [#left]				ifFalse: [#right]]		ifTrue: [self position y &lt; aPoint y				ifTrue: [#up]				ifFalse: [#down]]</body><body package="BugTraffic">targetNode: aNode	targetNode := aNode</body></methods><methods><class-id>BugTraffic.InsectHead</class-id> <category>drawing</category><body package="BugTraffic">drawOn: aGC 	node insectIsDisplayable 		ifTrue: 			[changed 				ifTrue: 					[self isTail ifFalse: [nextInsectPart drawOn: aGC from: self position].					self drawOn: aGC from: previousPosition]]</body></methods><methods><class-id>BugTraffic.InsectHead class</class-id> <category>instance creation</category><body package="BugTraffic">speed: aSpeed shape: aShape	^self new speed: aSpeed shape: aShape nextInsectPart: nil</body><body package="BugTraffic">speed: aSpeed shape: aShape nextInsectPart: anInsectPart	^self new speed: aSpeed shape: aShape nextInsectPart: anInsectPart</body></methods><methods><class-id>BugTraffic.Shape</class-id> <category>drawing</category><body package="BugTraffic">drawOn: aGC at: aPosition	aGC paint: color.	(shapes at: #up) displayOn: aGC at: (aPosition + offset)</body><body package="BugTraffic">drawOn: aGC at: aPosition orientation: anOrientation	aGC paint: color.	(shapes at: anOrientation) displayOn: aGC at: (aPosition + offset) rounded</body></methods><methods><class-id>BugTraffic.Shape</class-id> <category>accessing</category><body package="BugTraffic">shape	^shapes at: #up</body></methods><methods><class-id>BugTraffic.Shape</class-id> <category>initialize-release</category><body package="BugTraffic">image: aShape offset: aPoint	shapes := Dictionary new.	shapes at: #left put: (aShape rotatedByQuadrants: 3).	shapes at: #right put: (aShape rotatedByQuadrants: 1).	shapes at: #up put: (aShape).	shapes at: #down put: (aShape rotatedByQuadrants: 2).	color := ColorValue brown.	offset := aPoint</body><body package="BugTraffic">shape: aShape color: aColor 	shapes := Dictionary new.	shapes at: #left put: aShape.	shapes at: #right put: aShape.	shapes at: #up put: aShape.	shapes at: #down put: aShape.	color := aColor.	offset := 0 @ 0</body></methods><methods><class-id>BugTraffic.Shape class</class-id> <category>instance creation</category><body package="BugTraffic">image: aShape offset: aPoint	^self new image: aShape offset: aPoint</body><body package="BugTraffic">shape: aShape color: aColor	^self new shape: aShape color: aColor</body></methods><methods><class-id>BugTraffic.ExitNode</class-id> <category>querying</category><body package="BugTraffic">canMoveFrom: aNode 	^(self isEmpty) | (aNode = self)</body><body package="BugTraffic">insectIsDisplayable	^false</body><body package="BugTraffic">nextNodeTo: aNode 	^self</body></methods><methods><class-id>BugTraffic.ExitNode</class-id> <category>initialize-release</category><body package="BugTraffic">position: aPosition shape: aShape city: aCity 	super position: aPosition shape: aShape city: aCity.	city := aCity.	city addExitNode: self</body></methods><methods><class-id>BugTraffic.ExitNode</class-id> <category>actions</category><body package="BugTraffic">occupiedBy: anInsectPart 	empty := false.	anInsectPart isHead ifTrue: [lastInsect := anInsectPart].	anInsectPart isTail		ifTrue: 			[city removeInsect: lastInsect.			empty := true]</body></methods><methods><class-id>BugTraffic.ExitNode</class-id> <category>drawing</category><body package="BugTraffic">drawOn: aGC 	changed ifFalse: [^self].	changed := false.	(1 to: 5) reverseDo: 			[:each | 			each odd 				ifTrue: [aGC paint: ColorValue black]				ifFalse: [aGC paint: ColorValue orange].			(each negated @ each negated corner: each @ each) asFiller displayOn: aGC				at: self position]</body></methods><methods><class-id>BugTraffic.BugTraffic</class-id> <category>actions</category><body package="BugTraffic">aboutButton	AboutDlg open</body><body package="BugTraffic">changeRequest	^super changeRequest ifFalse: [false]		ifTrue: 			[gameModel finishGame.			true]</body><body package="BugTraffic">newGameButton	gameModel startGame</body><body package="BugTraffic">pauseButton	gameModel togglePause</body><body package="BugTraffic">quitButton	gameView topComponent controller close</body></methods><methods><class-id>BugTraffic.BugTraffic</class-id> <category>aspects</category><body package="BugTraffic">bugsToNextLevel	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	^bugsToNextLevel isNil		ifTrue: [bugsToNextLevel := gameModel bugsToNextLevel]		ifFalse: [bugsToNextLevel]</body><body package="BugTraffic">gameLevel	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	^gameLevel isNil		ifTrue: [gameLevel := gameModel gameLevel]		ifFalse: [gameLevel]</body><body package="BugTraffic">gameScore	"This method was generated by UIDefiner. Any edits made here 	may be lost whenever methods are automatically defined. The 	initialization provided below may have been preempted by an 	initialize method."	^gameScore isNil		ifTrue: [gameScore := gameModel gameScore]		ifFalse: [gameScore]</body><body package="BugTraffic">lives	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^lives isNil		ifTrue:			[lives := gameModel lives]		ifFalse:			[lives]</body><body package="BugTraffic">longestLine	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^longestLine isNil		ifTrue: [longestLine := gameModel longestLine]		ifFalse: [longestLine]</body></methods><methods><class-id>BugTraffic.BugTraffic</class-id> <category>accessing</category><body package="BugTraffic">gameView	^gameView</body></methods><methods><class-id>BugTraffic.BugTraffic</class-id> <category>initialize-release</category><body package="BugTraffic">initialize	super initialize.	gameModel := Game new.	gameView := TrafficView model: gameModel.	gameView controller: GameController new</body></methods><methods><class-id>BugTraffic.IntersectionNode</class-id> <category>querying</category><body package="BugTraffic">canMoveFrom: aNode 	self isOccupied ifTrue: [^false].	aNode isIntersectionNode ifTrue: [^true].	^self insectCanMoveFrom: aNode</body><body package="BugTraffic">isIntersectionNode	^true</body><body package="BugTraffic">nextNodeTo: aNode 	| minNode minDistance distance |	minDistance := 9999999.	minNode := nextNodes first.	nextNodes do: 			[:each | 			distance := each distanceTo: aNode.			distance &lt; minDistance 				ifTrue: 					[minDistance := distance.					minNode := each]].	^minNode</body><body package="BugTraffic">previousNodeInGreen	previousNodeNumberInGreen &gt; previousNodes size ifTrue: [^nil].	^previousNodes at: previousNodeNumberInGreen</body><body package="BugTraffic">secondBestNextNodeTo: aNode 	| secondMinNode minDistance distance minNode |	minNode := self nextNodeTo: aNode.	nextNodes size = 1 ifTrue: [^minNode].	minDistance := 9999999.	secondMinNode := minNode.	nextNodes do: 			[:each | 			each = minNode 				ifFalse: 					[(distance := each distanceTo: aNode) &lt; minDistance 						ifTrue: 							[minDistance := distance.							secondMinNode := each]]].	^secondMinNode</body></methods><methods><class-id>BugTraffic.IntersectionNode</class-id> <category>actions</category><body package="BugTraffic">togglePreviousNodeInGreen	previousNodeNumberInGreen := 3 - previousNodeNumberInGreen</body></methods><methods><class-id>BugTraffic.IntersectionNode</class-id> <category>accessing</category><body package="BugTraffic">addNextNode: aNode	nextNodes add: aNode</body><body package="BugTraffic">addPreviousNode: aNode	previousNodes add: aNode</body><body package="BugTraffic">connectTo: anIntersectionNode	self addNextNode: anIntersectionNode.	anIntersectionNode addPreviousNode: self</body><body package="BugTraffic">nextNode: aNode	nextNodes add: aNode</body></methods><methods><class-id>BugTraffic.IntersectionNode</class-id> <category>private</category><body package="BugTraffic">insectCanMoveFrom: aNode	^aNode = self previousNodeInGreen</body></methods><methods><class-id>BugTraffic.IntersectionNode</class-id> <category>drawing</category><body package="BugTraffic">drawTrafficLightOn: aGC 	previousNodes do: [:each | each isIntersectionNode not			ifTrue: 				[each = self previousNodeInGreen					ifTrue: [aGC paint: ColorValue green]					ifFalse: [aGC paint: ColorValue red].				(self triangleFrom: self position to: each position)					displayStrokedOn: aGC]]</body><body package="BugTraffic">triangleFrom: aPoint1 to: aPoint2 	| p1 p2 p3 x y tetha |	x := aPoint2 x - aPoint1 x.	y := aPoint2 y - aPoint1 y.	y = 0 ifFalse: [tetha := (x / y) arcTan]		ifTrue: [tetha := 90 degreesToRadians].	p3 := 3 * tetha cos @ (3 * tetha sin).	p1 := self position + p3.	p2 := self position - p3.	^Polyline vertices: (Array			with: p1			with: p2			with: aPoint2			with: p1)</body></methods><methods><class-id>BugTraffic.IntersectionNode</class-id> <category>initialize-release</category><body package="BugTraffic">initialize	super initialize.	previousNodeNumberInGreen := 1.	nextNodes := OrderedCollection new.	previousNodes := OrderedCollection new</body></methods><methods><class-id>BugTraffic.InsectBuilder class</class-id> <category>insect creation</category><body package="BugTraffic">ant	| insectPart speed shape headShape image |	speed := 1.	image := self antBody image.	shape := Shape image: image offset: -5 @ -5.	insectPart := InsectPart shape: shape.	image := self antHead image.	headShape := Shape image: image offset: -5 @ -5.	^InsectHead 		speed: speed		shape: headShape		nextInsectPart: insectPart</body><body package="BugTraffic">caterpillar	| insectPart speed shape headShape image bodySize |	speed := 3.	image := self caterpillarBody image.	shape := Shape image: image offset: -5 @ -5.	insectPart := InsectPart shape: shape.	bodySize := (randomGenerator next * 3 + 2) truncated.	bodySize timesRepeat: 			[insectPart := InsectPart shape: shape nextInsectPart: insectPart].	image := self caterpillarHead image.	headShape := Shape image: image offset: -5 @ -5.	^InsectHead 		speed: speed		shape: headShape		nextInsectPart: insectPart</body><body package="BugTraffic">insectTypes	^#(#roach #ant #snail #worm #caterpillar)</body><body package="BugTraffic">roach	| insectPart speed shape headShape image |	speed := 1.	image := self roachBody image.	shape := Shape image: image offset: -5 @ -5.	insectPart := InsectPart shape: shape.	image := self roachHead image.	headShape := Shape image: image offset: -5 @ -5.	^InsectHead 		speed: speed		shape: headShape		nextInsectPart: insectPart</body><body package="BugTraffic">snail	| insectPart speed shape headShape image |	speed := 4.	image := self snailTail image.	shape := Shape image: image offset: -5 @ -5.	insectPart := InsectPart shape: shape.	image := self snailBody image.	shape := Shape image: image offset: -5 @ -5.	insectPart := InsectPart shape: shape nextInsectPart: insectPart.	image := self snailHead image.	headShape := Shape image: image offset: -5 @ -5.	^InsectHead 		speed: speed		shape: headShape		nextInsectPart: insectPart</body><body package="BugTraffic">worm	| insectPart speed shape headShape image bodySize |	speed := 3.	image := self wormTail image.	shape := Shape image: image offset: -5 @ -5.	insectPart := InsectPart shape: shape.	image := self wormBody image.	shape := Shape image: image offset: -5 @ -5.	bodySize := (randomGenerator next * 8 + 1) truncated.	bodySize timesRepeat: 			[insectPart := InsectPart shape: shape nextInsectPart: insectPart].	image := self wormHead image.	headShape := Shape image: image offset: -5 @ -5.	^InsectHead 		speed: speed		shape: headShape		nextInsectPart: insectPart</body></methods><methods><class-id>BugTraffic.InsectBuilder class</class-id> <category>initialization</category><body package="BugTraffic">initialize	randomGenerator := Random new</body></methods><methods><class-id>BugTraffic.InsectBuilder class</class-id> <category>instance creation</category><body package="BugTraffic">randomInsect	| insectType |	insectType := (randomGenerator next * self insectTypes size + 1) truncated.	^self perform: (self insectTypes at: insectType)</body></methods><methods><class-id>BugTraffic.AboutDlg class</class-id> <category>interface specs</category><body package="BugTraffic">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'BugTraffic About' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} -4 26 433 245 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 185 190 266 213 ) 					#name: #ActionButton1 					#model: #OKButton 					#tabable: false 					#label: 'OK' 					#defaultable: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.Rectangle} 12 17 423 177 ) 					#name: #TextField 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} #white ) ) 					#model: #textField 					#tabable: false 					#isReadOnly: true 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>BugTraffic.TrafficView</class-id> <category>resources</category><body package="BugTraffic">backgroundImage	"UIMaskEditor new openOnClass: self andSelector: #background"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 150@150 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 256) at: 1 put: (Graphics.ColorValue scaledRed: 289 scaledGreen: 1253 scaledBlue: 482); at: 2 put: (Graphics.ColorValue scaledRed: 1124 scaledGreen: 1156 scaledBlue: 418); at: 3 put: (Graphics.ColorValue scaledRed: 771 scaledGreen: 1542 scaledBlue: 385); at: 4 put: (Graphics.ColorValue scaledRed: 1156 scaledGreen: 1413 scaledBlue: 803); at: 5 put: (Graphics.ColorValue scaledRed: 1285 scaledGreen: 803 scaledBlue: 610); at: 6 put: (Graphics.ColorValue scaledRed: 2762 scaledGreen: 2216 scaledBlue: 1092); at: 7 put: (Graphics.ColorValue scaledRed: 3373 scaledGreen: 1735 scaledBlue: 1638); at: 8 put: (Graphics.ColorValue scaledRed: 1767 scaledGreen: 3887 scaledBlue: 1767); at: 9 put: (Graphics.ColorValue scaledRed: 5236 scaledGreen: 3501 scaledBlue: 2730); at: 10 put: (Graphics.ColorValue scaledRed: 450 scaledGreen: 642 scaledBlue: 289); at: 11 put: (Graphics.ColorValue scaledRed: 321 scaledGreen: 771 scaledBlue: 289); at: 12 put: (Graphics.ColorValue scaledRed: 642 scaledGreen: 450 scaledBlue: 289); at: 13 put: (Graphics.ColorValue scaledRed: 899 scaledGreen: 739 scaledBlue: 418); at: 14 put: (Graphics.ColorValue scaledRed: 803 scaledGreen: 1253 scaledBlue: 675); at: 15 put: (Graphics.ColorValue scaledRed: 482 scaledGreen: 1767 scaledBlue: 482); at: 16 put: (Graphics.ColorValue scaledRed: 1542 scaledGreen: 1156 scaledBlue: 707); at: 17 put: (Graphics.ColorValue scaledRed: 385 scaledGreen: 1992 scaledBlue: 1028); at: 18 put: (Graphics.ColorValue scaledRed: 1799 scaledGreen: 1478 scaledBlue: 803); at: 19 put: (Graphics.ColorValue scaledRed: 1927 scaledGreen: 1670 scaledBlue: 1156); at: 20 put: (Graphics.ColorValue scaledRed: 1028 scaledGreen: 3052 scaledBlue: 675); at: 21 put: (Graphics.ColorValue scaledRed: 2955 scaledGreen: 1767 scaledBlue: 1381); at: 22 put: (Graphics.ColorValue scaledRed: 1510 scaledGreen: 3052 scaledBlue: 1542); at: 23 put: (Graphics.ColorValue scaledRed: 3726 scaledGreen: 1927 scaledBlue: 1799); at: 24 put: (Graphics.ColorValue scaledRed: 3341 scaledGreen: 2216 scaledBlue: 1895); at: 25 put: (Graphics.ColorValue scaledRed: 2666 scaledGreen: 3790 scaledBlue: 996); at: 26 put: (Graphics.ColorValue scaledRed: 4176 scaledGreen: 3790 scaledBlue: 1510); at: 27 put: (Graphics.ColorValue scaledRed: 4176 scaledGreen: 3373 scaledBlue: 2602); at: 28 put: (Graphics.ColorValue scaledRed: 289 scaledGreen: 321 scaledBlue: 128); at: 29 put: (Graphics.ColorValue scaledRed: 2313 scaledGreen: 2345 scaledBlue: 803); at: 30 put: (Graphics.ColorValue scaledRed: 2313 scaledGreen: 2345 scaledBlue: 1478); at: 31 put: (Graphics.ColorValue scaledRed: 2152 scaledGreen: 3019 scaledBlue: 1638); at: 32 put: (Graphics.ColorValue scaledRed: 3276 scaledGreen: 2249 scaledBlue: 1285); at: 33 put: (Graphics.ColorValue scaledRed: 193 scaledGreen: 418 scaledBlue: 161); at: 34 put: (Graphics.ColorValue scaledRed: 899 scaledGreen: 803 scaledBlue: 418); at: 35 put: (Graphics.ColorValue scaledRed: 707 scaledGreen: 996 scaledBlue: 418); at: 36 put: (Graphics.ColorValue scaledRed: 1028 scaledGreen: 610 scaledBlue: 482); at: 37 put: (Graphics.ColorValue scaledRed: 1285 scaledGreen: 899 scaledBlue: 610); at: 38 put: (Graphics.ColorValue scaledRed: 1542 scaledGreen: 1670 scaledBlue: 932); at: 39 put: (Graphics.ColorValue scaledRed: 1799 scaledGreen: 1638 scaledBlue: 707); at: 40 put: (Graphics.ColorValue scaledRed: 1542 scaledGreen: 2602 scaledBlue: 675); at: 41 put: (Graphics.ColorValue scaledRed: 707 scaledGreen: 3758 scaledBlue: 1028); at: 42 put: (Graphics.ColorValue scaledRed: 2505 scaledGreen: 2024 scaledBlue: 964); at: 43 put: (Graphics.ColorValue scaledRed: 3373 scaledGreen: 2730 scaledBlue: 2088); at: 44 put: (Graphics.ColorValue scaledRed: 3887 scaledGreen: 2795 scaledBlue: 1510); at: 45 put: (Graphics.ColorValue scaledRed: 3887 scaledGreen: 2795 scaledBlue: 2184); at: 46 put: (Graphics.ColorValue scaledRed: 4850 scaledGreen: 3758 scaledBlue: 2955); at: 47 put: (Graphics.ColorValue scaledRed: 5942 scaledGreen: 3855 scaledBlue: 3116); at: 48 put: (Graphics.ColorValue scaledRed: 225 scaledGreen: 899 scaledBlue: 353); at: 49 put: (Graphics.ColorValue scaledRed: 482 scaledGreen: 707 scaledBlue: 289); at: 50 put: (Graphics.ColorValue scaledRed: 1221 scaledGreen: 1028 scaledBlue: 578); at: 51 put: (Graphics.ColorValue scaledRed: 1542 scaledGreen: 1413 scaledBlue: 546); at: 52 put: (Graphics.ColorValue scaledRed: 803 scaledGreen: 1767 scaledBlue: 932); at: 53 put: (Graphics.ColorValue scaledRed: 1510 scaledGreen: 1863 scaledBlue: 803); at: 54 put: (Graphics.ColorValue scaledRed: 1799 scaledGreen: 2184 scaledBlue: 867); at: 55 put: (Graphics.ColorValue scaledRed: 1156 scaledGreen: 3373 scaledBlue: 1670); at: 56 put: (Graphics.ColorValue scaledRed: 2859 scaledGreen: 3052 scaledBlue: 964); at: 57 put: (Graphics.ColorValue scaledRed: 3341 scaledGreen: 3052 scaledBlue: 1156); at: 58 put: (Graphics.ColorValue scaledRed: 482 scaledGreen: 1253 scaledBlue: 450); at: 59 put: (Graphics.ColorValue scaledRed: 1156 scaledGreen: 1285 scaledBlue: 418); at: 60 put: (Graphics.ColorValue scaledRed: 353 scaledGreen: 2216 scaledBlue: 964); at: 61 put: (Graphics.ColorValue scaledRed: 964 scaledGreen: 2730 scaledBlue: 514); at: 62 put: (Graphics.ColorValue scaledRed: 450 scaledGreen: 2473 scaledBlue: 1285); at: 63 put: (Graphics.ColorValue scaledRed: 1028 scaledGreen: 4176 scaledBlue: 1028); at: 64 put: (Graphics.ColorValue scaledRed: 2859 scaledGreen: 3052 scaledBlue: 1670); at: 65 put: (Graphics.ColorValue scaledRed: 3598 scaledGreen: 3790 scaledBlue: 2216); at: 66 put: (Graphics.ColorValue scaledRed: 1927 scaledGreen: 5653 scaledBlue: 2698); at: 67 put: (Graphics.ColorValue scaledRed: 2505 scaledGreen: 4979 scaledBlue: 2795); at: 68 put: (Graphics.ColorValue scaledRed: 161 scaledGreen: 514 scaledBlue: 193); at: 69 put: (Graphics.ColorValue scaledRed: 899 scaledGreen: 899 scaledBlue: 418); at: 70 put: (Graphics.ColorValue scaledRed: 675 scaledGreen: 1124 scaledBlue: 418); at: 71 put: (Graphics.ColorValue scaledRed: 739 scaledGreen: 1413 scaledBlue: 739); at: 72 put: (Graphics.ColorValue scaledRed: 2570 scaledGreen: 1606 scaledBlue: 1413); at: 73 put: (Graphics.ColorValue scaledRed: 2698 scaledGreen: 3373 scaledBlue: 867); at: 74 put: (Graphics.ColorValue scaledRed: 1124 scaledGreen: 3790 scaledBlue: 2024); at: 75 put: (Graphics.ColorValue scaledRed: 3758 scaledGreen: 4465 scaledBlue: 2088); at: 76 put: (Graphics.ColorValue scaledRed: 4786 scaledGreen: 3373 scaledBlue: 2827); at: 77 put: (Graphics.ColorValue scaledRed: 96 scaledGreen: 96 scaledBlue: 32); at: 78 put: (Graphics.ColorValue scaledRed: 5975 scaledGreen: 4882 scaledBlue: 3501); at: 79 put: (Graphics.ColorValue scaledRed: 5878 scaledGreen: 5364 scaledBlue: 3790); at: 80 put: (Graphics.ColorValue scaledRed: 385 scaledGreen: 321 scaledBlue: 193); at: 81 put: (Graphics.ColorValue scaledRed: 675 scaledGreen: 578 scaledBlue: 321); at: 82 put: (Graphics.ColorValue scaledRed: 450 scaledGreen: 1927 scaledBlue: 546); at: 83 put: (Graphics.ColorValue scaledRed: 2795 scaledGreen: 2473 scaledBlue: 1028); at: 84 put: (Graphics.ColorValue scaledRed: 1735 scaledGreen: 3855 scaledBlue: 707); at: 85 put: (Graphics.ColorValue scaledRed: 2795 scaledGreen: 2441 scaledBlue: 1735); at: 86 put: (Graphics.ColorValue scaledRed: 1767 scaledGreen: 4369 scaledBlue: 835); at: 87 put: (Graphics.ColorValue scaledRed: 482 scaledGreen: 3790 scaledBlue: 2024); at: 88 put: (Graphics.ColorValue scaledRed: 3855 scaledGreen: 2249 scaledBlue: 1542); at: 89 put: (Graphics.ColorValue scaledRed: 3533 scaledGreen: 3373 scaledBlue: 2088); at: 90 put: (Graphics.ColorValue scaledRed: 4722 scaledGreen: 2602 scaledBlue: 2345); at: 91 put: (Graphics.ColorValue scaledRed: 5172 scaledGreen: 2666 scaledBlue: 2505); at: 92 put: (Graphics.ColorValue scaledRed: 4818 scaledGreen: 3084 scaledBlue: 2441); at: 93 put: (Graphics.ColorValue scaledRed: 4626 scaledGreen: 4882 scaledBlue: 2859); at: 94 put: (Graphics.ColorValue scaledRed: 5621 scaledGreen: 4304 scaledBlue: 3116); at: 95 put: (Graphics.ColorValue scaledRed: 257 scaledGreen: 996 scaledBlue: 353); at: 96 put: (Graphics.ColorValue scaledRed: 482 scaledGreen: 803 scaledBlue: 321); at: 97 put: (Graphics.ColorValue scaledRed: 257 scaledGreen: 1381 scaledBlue: 642); at: 98 put: (Graphics.ColorValue scaledRed: 739 scaledGreen: 1253 scaledBlue: 289); at: 99 put: (Graphics.ColorValue scaledRed: 803 scaledGreen: 1735 scaledBlue: 418); at: 100 put: (Graphics.ColorValue scaledRed: 2088 scaledGreen: 1413 scaledBlue: 803); at: 101 put: (Graphics.ColorValue scaledRed: 1542 scaledGreen: 2024 scaledBlue: 739); at: 102 put: (Graphics.ColorValue scaledRed: 2505 scaledGreen: 1253 scaledBlue: 1221); at: 103 put: (Graphics.ColorValue scaledRed: 964 scaledGreen: 2730 scaledBlue: 1285); at: 104 put: (Graphics.ColorValue scaledRed: 3373 scaledGreen: 1992 scaledBlue: 1638); at: 105 put: (Graphics.ColorValue scaledRed: 3469 scaledGreen: 3758 scaledBlue: 1124); at: 106 put: (Graphics.ColorValue scaledRed: 3373 scaledGreen: 3052 scaledBlue: 1927); at: 107 put: (Graphics.ColorValue scaledRed: 1510 scaledGreen: 4915 scaledBlue: 1927); at: 108 put: (Graphics.ColorValue scaledRed: 4369 scaledGreen: 2570 scaledBlue: 2088); at: 109 put: (Graphics.ColorValue scaledRed: 4401 scaledGreen: 3116 scaledBlue: 2184); at: 110 put: (Graphics.ColorValue scaledRed: 353 scaledGreen: 418 scaledBlue: 193); at: 111 put: (Graphics.ColorValue scaledRed: 675 scaledGreen: 642 scaledBlue: 321); at: 112 put: (Graphics.ColorValue scaledRed: 1028 scaledGreen: 771 scaledBlue: 514); at: 113 put: (Graphics.ColorValue scaledRed: 1156 scaledGreen: 1156 scaledBlue: 675); at: 114 put: (Graphics.ColorValue scaledRed: 899 scaledGreen: 996 scaledBlue: 418); at: 115 put: (Graphics.ColorValue scaledRed: 1510 scaledGreen: 1638 scaledBlue: 514); at: 116 put: (Graphics.ColorValue scaledRed: 546 scaledGreen: 2441 scaledBlue: 675); at: 117 put: (Graphics.ColorValue scaledRed: 964 scaledGreen: 2216 scaledBlue: 1156); at: 118 put: (Graphics.ColorValue scaledRed: 2088 scaledGreen: 1221 scaledBlue: 1028); at: 119 put: (Graphics.ColorValue scaledRed: 2184 scaledGreen: 1670 scaledBlue: 1156); at: 120 put: (Graphics.ColorValue scaledRed: 2249 scaledGreen: 2666 scaledBlue: 771); at: 121 put: (Graphics.ColorValue scaledRed: 1028 scaledGreen: 3052 scaledBlue: 1606); at: 122 put: (Graphics.ColorValue scaledRed: 3309 scaledGreen: 2441 scaledBlue: 1285); at: 123 put: (Graphics.ColorValue scaledRed: 1799 scaledGreen: 3437 scaledBlue: 1799); at: 124 put: (Graphics.ColorValue scaledRed: 3887 scaledGreen: 3084 scaledBlue: 1413); at: 125 put: (Graphics.ColorValue scaledRed: 3887 scaledGreen: 2249 scaledBlue: 2249); at: 126 put: (Graphics.ColorValue scaledRed: 4144 scaledGreen: 3373 scaledBlue: 1542); at: 127 put: (Graphics.ColorValue scaledRed: 5300 scaledGreen: 3887 scaledBlue: 2570); at: 128 put: (Graphics.ColorValue scaledRed: 161 scaledGreen: 610 scaledBlue: 225); at: 129 put: (Graphics.ColorValue scaledRed: 803 scaledGreen: 482 scaledBlue: 385); at: 130 put: (Graphics.ColorValue scaledRed: 450 scaledGreen: 1381 scaledBlue: 514); at: 131 put: (Graphics.ColorValue scaledRed: 1156 scaledGreen: 1413 scaledBlue: 450); at: 132 put: (Graphics.ColorValue scaledRed: 1156 scaledGreen: 1638 scaledBlue: 899); at: 133 put: (Graphics.ColorValue scaledRed: 1542 scaledGreen: 1285 scaledBlue: 867); at: 134 put: (Graphics.ColorValue scaledRed: 964 scaledGreen: 2216 scaledBlue: 514); at: 135 put: (Graphics.ColorValue scaledRed: 2505 scaledGreen: 1413 scaledBlue: 1124); at: 136 put: (Graphics.ColorValue scaledRed: 3341 scaledGreen: 2473 scaledBlue: 1927); at: 137 put: (Graphics.ColorValue scaledRed: 1799 scaledGreen: 4336 scaledBlue: 2281); at: 138 put: (Graphics.ColorValue scaledRed: 5204 scaledGreen: 4336 scaledBlue: 3598); at: 139 put: (Graphics.ColorValue scaledRed: 128 scaledGreen: 161 scaledBlue: 64); at: 140 put: (Graphics.ColorValue scaledRed: 1381 scaledGreen: 1028 scaledBlue: 642); at: 141 put: (Graphics.ColorValue scaledRed: 610 scaledGreen: 2216 scaledBlue: 899); at: 142 put: (Graphics.ColorValue scaledRed: 1156 scaledGreen: 1863 scaledBlue: 707); at: 143 put: (Graphics.ColorValue scaledRed: 1863 scaledGreen: 932 scaledBlue: 932); at: 144 put: (Graphics.ColorValue scaledRed: 610 scaledGreen: 3373 scaledBlue: 1092); at: 145 put: (Graphics.ColorValue scaledRed: 1606 scaledGreen: 2602 scaledBlue: 1542); at: 146 put: (Graphics.ColorValue scaledRed: 3758 scaledGreen: 4144 scaledBlue: 1895); at: 147 put: (Graphics.ColorValue scaledRed: 4208 scaledGreen: 3758 scaledBlue: 2505); at: 148 put: (Graphics.ColorValue scaledRed: 4272 scaledGreen: 5396 scaledBlue: 2827); at: 149 put: (Graphics.ColorValue scaledRed: 482 scaledGreen: 899 scaledBlue: 353); at: 150 put: (Graphics.ColorValue scaledRed: 675 scaledGreen: 739 scaledBlue: 321); at: 151 put: (Graphics.ColorValue scaledRed: 418 scaledGreen: 1767 scaledBlue: 899); at: 152 put: (Graphics.ColorValue scaledRed: 610 scaledGreen: 2987 scaledBlue: 835); at: 153 put: (Graphics.ColorValue scaledRed: 2570 scaledGreen: 1799 scaledBlue: 1413); at: 154 put: (Graphics.ColorValue scaledRed: 2281 scaledGreen: 2666 scaledBlue: 1510); at: 155 put: (Graphics.ColorValue scaledRed: 546 scaledGreen: 4336 scaledBlue: 2249); at: 156 put: (Graphics.ColorValue scaledRed: 4369 scaledGreen: 1927 scaledBlue: 2184); at: 157 put: (Graphics.ColorValue scaledRed: 3887 scaledGreen: 4882 scaledBlue: 2409); at: 158 put: (Graphics.ColorValue scaledRed: 5236 scaledGreen: 4915 scaledBlue: 3052); at: 159 put: (Graphics.ColorValue scaledRed: 739 scaledGreen: 1381 scaledBlue: 321); at: 160 put: (Graphics.ColorValue scaledRed: 1510 scaledGreen: 899 scaledBlue: 707); at: 161 put: (Graphics.ColorValue scaledRed: 803 scaledGreen: 1992 scaledBlue: 996); at: 162 put: (Graphics.ColorValue scaledRed: 2505 scaledGreen: 1638 scaledBlue: 996); at: 163 put: (Graphics.ColorValue scaledRed: 2056 scaledGreen: 1863 scaledBlue: 1221); at: 164 put: (Graphics.ColorValue scaledRed: 1510 scaledGreen: 3019 scaledBlue: 610); at: 165 put: (Graphics.ColorValue scaledRed: 1156 scaledGreen: 3790 scaledBlue: 867); at: 166 put: (Graphics.ColorValue scaledRed: 1124 scaledGreen: 4369 scaledBlue: 2345); at: 167 put: (Graphics.ColorValue scaledRed: 2570 scaledGreen: 4336 scaledBlue: 932); at: 168 put: (Graphics.ColorValue scaledRed: 385 scaledGreen: 514 scaledBlue: 225); at: 169 put: (Graphics.ColorValue scaledRed: 482 scaledGreen: 418 scaledBlue: 225); at: 170 put: (Graphics.ColorValue scaledRed: 289 scaledGreen: 610 scaledBlue: 225); at: 171 put: (Graphics.ColorValue scaledRed: 546 scaledGreen: 321 scaledBlue: 257); at: 172 put: (Graphics.ColorValue scaledRed: 5975 scaledGreen: 6199 scaledBlue: 4433); at: 173 put: (Graphics.ColorValue scaledRed: 1092 scaledGreen: 867 scaledBlue: 514); at: 174 put: (Graphics.ColorValue scaledRed: 899 scaledGreen: 1124 scaledBlue: 450); at: 175 put: (Graphics.ColorValue scaledRed: 771 scaledGreen: 1542 scaledBlue: 835); at: 176 put: (Graphics.ColorValue scaledRed: 2088 scaledGreen: 1670 scaledBlue: 739); at: 177 put: (Graphics.ColorValue scaledRed: 450 scaledGreen: 3052 scaledBlue: 1670); at: 178 put: (Graphics.ColorValue scaledRed: 2955 scaledGreen: 1478 scaledBlue: 1413); at: 179 put: (Graphics.ColorValue scaledRed: 482 scaledGreen: 3373 scaledBlue: 1992); at: 180 put: (Graphics.ColorValue scaledRed: 1028 scaledGreen: 4465 scaledBlue: 1028); at: 181 put: (Graphics.ColorValue scaledRed: 2666 scaledGreen: 5332 scaledBlue: 2570); at: 182 put: (Graphics.ColorValue scaledRed: 5204 scaledGreen: 4272 scaledBlue: 2441); at: 183 put: (Graphics.ColorValue scaledRed: 128 scaledGreen: 257 scaledBlue: 96); at: 184 put: (Graphics.ColorValue scaledRed: 835 scaledGreen: 578 scaledBlue: 418); at: 185 put: (Graphics.ColorValue scaledRed: 289 scaledGreen: 1092 scaledBlue: 450); at: 186 put: (Graphics.ColorValue scaledRed: 289 scaledGreen: 1542 scaledBlue: 675); at: 187 put: (Graphics.ColorValue scaledRed: 1799 scaledGreen: 1221 scaledBlue: 835); at: 188 put: (Graphics.ColorValue scaledRed: 1413 scaledGreen: 2184 scaledBlue: 932); at: 189 put: (Graphics.ColorValue scaledRed: 1156 scaledGreen: 3373 scaledBlue: 675); at: 190 put: (Graphics.ColorValue scaledRed: 2827 scaledGreen: 2762 scaledBlue: 964); at: 191 put: (Graphics.ColorValue scaledRed: 2730 scaledGreen: 3373 scaledBlue: 1799); at: 192 put: (Graphics.ColorValue scaledRed: 2698 scaledGreen: 3790 scaledBlue: 2088); at: 193 put: (Graphics.ColorValue scaledRed: 4786 scaledGreen: 3790 scaledBlue: 2024); at: 194 put: (Graphics.ColorValue scaledRed: 707 scaledGreen: 803 scaledBlue: 353); at: 195 put: (Graphics.ColorValue scaledRed: 482 scaledGreen: 996 scaledBlue: 385); at: 196 put: (Graphics.ColorValue scaledRed: 1253 scaledGreen: 675 scaledBlue: 610); at: 197 put: (Graphics.ColorValue scaledRed: 1381 scaledGreen: 1156 scaledBlue: 675); at: 198 put: (Graphics.ColorValue scaledRed: 803 scaledGreen: 1992 scaledBlue: 418); at: 199 put: (Graphics.ColorValue scaledRed: 1542 scaledGreen: 1413 scaledBlue: 932); at: 200 put: (Graphics.ColorValue scaledRed: 1992 scaledGreen: 1863 scaledBlue: 707); at: 201 put: (Graphics.ColorValue scaledRed: 2281 scaledGreen: 2152 scaledBlue: 803); at: 202 put: (Graphics.ColorValue scaledRed: 2056 scaledGreen: 2024 scaledBlue: 1156); at: 203 put: (Graphics.ColorValue scaledRed: 2313 scaledGreen: 2184 scaledBlue: 1413); at: 204 put: (Graphics.ColorValue scaledRed: 2987 scaledGreen: 1927 scaledBlue: 1670); at: 205 put: (Graphics.ColorValue scaledRed: 3437 scaledGreen: 3373 scaledBlue: 1124); at: 206 put: (Graphics.ColorValue scaledRed: 3887 scaledGreen: 2538 scaledBlue: 1510); at: 207 put: (Graphics.ColorValue scaledRed: 3951 scaledGreen: 3084 scaledBlue: 2249); at: 208 put: (Graphics.ColorValue scaledRed: 867 scaledGreen: 642 scaledBlue: 385); at: 209 put: (Graphics.ColorValue scaledRed: 1028 scaledGreen: 1028 scaledBlue: 514); at: 210 put: (Graphics.ColorValue scaledRed: 1221 scaledGreen: 1285 scaledBlue: 739); at: 211 put: (Graphics.ColorValue scaledRed: 1638 scaledGreen: 2345 scaledBlue: 1285); at: 212 put: (Graphics.ColorValue scaledRed: 2827 scaledGreen: 2730 scaledBlue: 1735); at: 213 put: (Graphics.ColorValue scaledRed: 3887 scaledGreen: 2538 scaledBlue: 2216); at: 214 put: (Graphics.ColorValue scaledRed: 5718 scaledGreen: 3501 scaledBlue: 2795); at: 215 put: (Graphics.ColorValue scaledRed: 128 scaledGreen: 321 scaledBlue: 128); at: 216 put: (Graphics.ColorValue scaledRed: 6232 scaledGreen: 4369 scaledBlue: 3437); at: 217 put: (Graphics.ColorValue scaledRed: 1124 scaledGreen: 932 scaledBlue: 546); at: 218 put: (Graphics.ColorValue scaledRed: 482 scaledGreen: 1542 scaledBlue: 578); at: 219 put: (Graphics.ColorValue scaledRed: 1927 scaledGreen: 1124 scaledBlue: 899); at: 220 put: (Graphics.ColorValue scaledRed: 964 scaledGreen: 2473 scaledBlue: 514); at: 221 put: (Graphics.ColorValue scaledRed: 1606 scaledGreen: 2345 scaledBlue: 675); at: 222 put: (Graphics.ColorValue scaledRed: 2538 scaledGreen: 1799 scaledBlue: 964); at: 223 put: (Graphics.ColorValue scaledRed: 2570 scaledGreen: 1992 scaledBlue: 1413); at: 224 put: (Graphics.ColorValue scaledRed: 2473 scaledGreen: 4915 scaledBlue: 1285); at: 225 put: (Graphics.ColorValue scaledRed: 4722 scaledGreen: 3373 scaledBlue: 1927); at: 226 put: (Graphics.ColorValue scaledRed: 5589 scaledGreen: 3084 scaledBlue: 2698); at: 227 put: (Graphics.ColorValue scaledRed: 4112 scaledGreen: 6232 scaledBlue: 3726); at: 228 put: (Graphics.ColorValue scaledRed: 450 scaledGreen: 578 scaledBlue: 257); at: 229 put: (Graphics.ColorValue scaledRed: 514 scaledGreen: 514 scaledBlue: 257); at: 230 put: (Graphics.ColorValue scaledRed: 161 scaledGreen: 771 scaledBlue: 353); at: 231 put: (Graphics.ColorValue scaledRed: 707 scaledGreen: 899 scaledBlue: 353); at: 232 put: (Graphics.ColorValue scaledRed: 1156 scaledGreen: 1670 scaledBlue: 482); at: 233 put: (Graphics.ColorValue scaledRed: 1542 scaledGreen: 1028 scaledBlue: 739); at: 234 put: (Graphics.ColorValue scaledRed: 1799 scaledGreen: 1349 scaledBlue: 835); at: 235 put: (Graphics.ColorValue scaledRed: 2088 scaledGreen: 1413 scaledBlue: 1156); at: 236 put: (Graphics.ColorValue scaledRed: 450 scaledGreen: 2730 scaledBlue: 1478); at: 237 put: (Graphics.ColorValue scaledRed: 2184 scaledGreen: 3019 scaledBlue: 803); at: 238 put: (Graphics.ColorValue scaledRed: 2827 scaledGreen: 2216 scaledBlue: 1638); at: 239 put: (Graphics.ColorValue scaledRed: 3373 scaledGreen: 2730 scaledBlue: 1253); at: 240 put: (Graphics.ColorValue scaledRed: 739 scaledGreen: 4882 scaledBlue: 2409); at: 241 put: (Graphics.ColorValue scaledRed: 4369 scaledGreen: 2281 scaledBlue: 2056); at: 242 put: (Graphics.ColorValue scaledRed: 4369 scaledGreen: 2859 scaledBlue: 2152); at: 243 put: (Graphics.ColorValue scaledRed: 2602 scaledGreen: 4369 scaledBlue: 2409); at: 244 put: (Graphics.ColorValue scaledRed: 289 scaledGreen: 225 scaledBlue: 128); at: 245 put: (Graphics.ColorValue scaledRed: 514 scaledGreen: 1092 scaledBlue: 385); at: 246 put: (Graphics.ColorValue scaledRed: 1510 scaledGreen: 1285 scaledBlue: 546); at: 247 put: (Graphics.ColorValue scaledRed: 1156 scaledGreen: 2024 scaledBlue: 835); at: 248 put: (Graphics.ColorValue scaledRed: 514 scaledGreen: 2698 scaledBlue: 803); at: 249 put: (Graphics.ColorValue scaledRed: 964 scaledGreen: 2473 scaledBlue: 1253); at: 250 put: (Graphics.ColorValue scaledRed: 1992 scaledGreen: 2024 scaledBlue: 675); at: 251 put: (Graphics.ColorValue scaledRed: 2955 scaledGreen: 1927 scaledBlue: 1156); at: 252 put: (Graphics.ColorValue scaledRed: 1799 scaledGreen: 3469 scaledBlue: 771); at: 253 put: (Graphics.ColorValue scaledRed: 1381 scaledGreen: 5300 scaledBlue: 2056); at: 254 put: (Graphics.ColorValue scaledRed: 4593 scaledGreen: 4304 scaledBlue: 1863); at: 255 put: (Graphics.ColorValue scaledRed: 2345 scaledGreen: 6071 scaledBlue: 3019); at: 256 put: (Graphics.ColorValue scaledRed: 4658 scaledGreen: 4336 scaledBlue: 3116); yourself)) usingBits: (ByteArray fromPackedString: '"29Z&amp;8RK6-_U,PO*6*2(#(''T3SD1F&amp;?KEF&gt;,8T/1J0Z1A#JAH"#;/N&lt;G7LT0F8XTEH^+&amp;=P*D*_AL.3,$S](ZM&lt;79''$E7R;-7*H''RC#H@SP1HX,TYRM-[SV--_6]R&amp;#''97\%*UHY?[R\ZXO,2J!.8:A8%@]IG+9:M3#6 4T9[*6;1VD!#3Z2Y&amp;B2"K9=1.B55^A;2A,2@@CA&amp;1[K&amp;@=-H1Y&lt;[9R. &lt;X-R6/]-&lt;*I8QY0L\''WF/CM6(@$\K,6T=0I=N\B%Q.''X0YG5&gt;GKJ&amp;3NUHM";N023?-77D!(F\ &amp;F"5)2,F(37H%I#H]AUK]:!J&gt;*9N]''YF\/Y:)HDLMW''.\/0MJG HJ5 %:M$X44#[,O;85MOXGT&lt;UR@VE2CYP;^KC7@DH'' 7K=''T;@NCJT+XH@@NXE\@6D9BC4''.N''L3MF28%YE&lt;MPVE&amp;GC8I0BH%,3V/MY2O$UK4&lt;T;MB''KL&lt;$ET2!-4,Q&lt;,,?73N9N17\&amp;57ZG]!B&amp;G9/_V!J!*G&amp;ZN&lt;!YPL2L &amp;YA3\R-:?$9O=I9''=R#\JO&lt;!@S)0]Q)B&gt;2Z!O+/HM+*U8^''!"]0T1A4ES^+;R@#)4&gt;H&gt;3,GP=^M/.3A1X''W/=3U&lt;);P@@:#&lt;59]X[HCB8J N;/,YGVQZ_)6?TE3+P9N+WV&gt;*_6''5,J9"I(UE3RS2^O/^?US*7#.''P:.4*5D].\ E_&lt;;653WE!]9&gt;=QI[2G.^-=FG&amp;HJ2=GGI2/-J\IPE(3F \YI17\/R=WE2=4#&gt;CQ''RAP06.&gt;A@&lt;OI9*&amp;+ );+9*?+=ST3T44#RPR_3+"D$(T\_L5Y5=\''7 "Z-;@@A&gt;F,!?C@$J%I$WC]ONNJHO1MH%!D/]1MC3[70VH&gt;[]"R5KBAZDW*&amp;O@JYA,5UUB''BK*$17[N5&lt;+#M4L2H!_YJG+B[_FJ=O.T%4C G#X[0&lt;QDQ$/+4&amp;L)O-CY2-$Q85RBJYQZ&amp;TRBZ''MYN+G)$?9Z8M#EZO=4&amp;LC*44EP^4I0I4(0;+=#LPM!B0,+H;6:H8@:=\*5/@PL(@@L5RO7$EF2K%F.7J2WY@;+&gt;".3W1_''&amp;1;!JD FU/@^EZV]SK1GP@F0:E$5L&lt;D0K6$AJ@X)L_(.&amp;*0.V8WVQ)S,SA4Y0U/?ZB$LT&lt;/H6#P*OE ,WEL^_P/9N]P@6\(F \.:/=GFEJ?Y@C?[:\''QI \093JEY&amp;P.=VOCN2!V)&amp;Y#YQNS7/,I(=%#4NRS74''+-38J.R+5I;@0@@9/PC(V8L2!HZZ\YDX608R,(Q]5_ ^?GM'';^*1%H5YWU50694\09?F2@((:&amp;U%P7F1 ''G/?ULF2C%HLMMR&lt;4ZH2S5/UNHUUN#''*%3UZNHX&amp;FT"O2O'';*"$1&amp;;4_4"$Y6S''YMR7J-B2P''L 4Q\.;:C\?,()FJHP..V%*A")CZ&gt;M!L;L6Z3&amp;+I&amp;;7S+XC2#7FX7-U EW9IX@@@Y^7$OS6:"&amp;B5[_W7W!0VS42U@HZ?:EH9O1+]O&lt;8L($@)E$MKE=MX6''%8B9*]OS@/G/S\7NL 5I"D!UL)GK%+T5SJ/[''&lt;9OC8(/I]ST:T(JDK_Y,GC:LL1HV&lt;?$Z\^ZD(Y90&amp;\/;/QL4(4@)7"P@58L0:3)CZP:7(/=H0G"X&gt;LCQIQ,4G/;&gt;K&gt;,+HP%6EL^/,YL!&lt;A_)0@@GGQ&gt;&amp;_O&lt;:2X_^A&gt;51=D()2SWE"C/$U24]C?O3JJG_[E=;AI!U&gt;6" 8''SC[_]NR^S2S97CIH$U17+&lt;6IJ''1KYX;F("X\G._4B,TS/JQS,5V#\;$/B:2U-$&gt;_YW-H):0L\.;#N[&lt;R4-B*FP7I*4!F.6X(U]&gt;3 _^2^ )^C\8Z2:AT+&amp;AA?N?"*9+/;&gt;&lt;6K:''2O+42C\QK10@@0F#.=P/(VJ01&gt;%^!B=9NJ)LY.&lt;$Y\C=XZK87DXV4M$T&lt;JCXSA?/4)M?_79:,EZY2N 0#HV!(T''DLVQ)&lt;_J-&lt;J%PBX6PG-F(X!Y:)B*NSJI:)N_K_)%V3M#RN[7CO:Q:I$[_%-:))\]ZQ=ML8 04&lt;W,V&lt;%6(S^$&amp;0D&lt;TM((^D3!J0::V2&amp;.?/O^.%8#49QUMVO.1CI,7 @@C:I-+XB3K([+X)D&amp;9RS/&gt;N1FLR;+&gt;-]3?,&amp;WB7&amp;]JW)[N$US58&gt;3:&amp;#JN3/M?_1SJU9O(YZCT"\LF_Q70Z58$.D-IG@P^%%8V&lt;U[1SP^J$,5UU-D#4XPH3OOXO&gt;!=GWO4''[2N@1/7DIA%EFXM&amp;6&gt;1"X]- U[14Z%DN#GRPK]R"07!I,!B2;;JVOY*%$BCVX].3,8&lt;^\",@@@:^\\O$DVO**!(*J*/?1 $ZJ-);RIV@IAG:[6&gt;Y@3RA1Q:3OH1UP+2^B,U^XXI216PXR&amp;!R15*I,RM&lt;Q=]Y#.+FS%7S=8?EW%8S)+N3A5VZ)GL9B%:''''-,%!([(S2SH=^NN!L(?2Y&lt;DFRH5Q)ZA608J=H1A&lt;" 6X@B9UAKKJ) WUIB%DKJ2 AB2,*UI.UEUT;N3Z!W''.0@@7.YDI@0):F\7_''VRW]OX7%6IE&gt;7F[0.&gt;"YE102GP71:&amp;"C84T:Z&amp;#5OE*]XJ1]0DGC]SRD8H[I.N-4]K"X%&lt;:"5&lt;5L,U#1L&lt;K?HGX+"EUT$(TW&gt;JB+3"-GOO*J9G5JG3TGXT6,N,@7#8-8,MXJ9QC$M?D9L(1R=V.PLR$EPZD''2NU%Z.,,M ,./%,.?8RX1!(5W2EXWJ@@CS+HHA()K5&gt;''/K7 U6"6&gt;D_K=T&amp;I""(YO=I6=/[6QU7;QV X&gt;+76F61UW/7=?&gt;/@G&amp;\'']&gt;E&gt;)#E+EG"]^I_LO*&amp;AK#&amp;M.OO@)O!UF99P;_)[N$C()?P/9I ;*N1 Q/&lt;2CZ(. D.)?C$I@=Y#4MXH1FT_] US8S.UY&amp;+,N7"Q^N#!K/,C6Z9[K/RXB.,&amp;@=D=$8$Q;7^)H@@G''RF''D)GRXW?5S?!2$QCBJX#%S^F!^_1&lt;Q0IF8#&amp;]-_OO_$Z/;_,=&amp;8,9]Q@"ZK9N^''&gt;]6:HRDQBE''WR71KR4/** 4".HDJ\BCACSNL7&gt;J3T&lt;T@''"__O)]8/M0"S?ML%T_ZH0-5X&gt;!%Q9?PCWQ&amp;T6G7=@BV,5V&lt;:6BT;UPZE9 R,''*2,KJV)[I:, 7VB_!:2$7..1''R10@@G_&gt;RE  )L&gt;3H.&lt;''^]&amp;&gt;&gt;S,(RJ&gt;+TA.(W1-;Q*J OQKZW#V:^,:[8%7?7TXORU[2M\''H8GO$_7P0F"W3KQ1\WV$_-4''OE)5A^^&amp;) 9_/&gt;)%UU%9^3-KN&lt;%+X''-B]P&lt;88R09&gt;( F0VY\OCXC:2^LH&lt;)%W[,;QU-JO+O!NCCY W22+/8#5B,+H=+..2XK^#(7"C;''$40G:]@@CU-^C 0A?''AZGQ[&amp;''N-5!N$?=&gt;BI!&lt;!B5T;\&amp;KB1F/369.C=%*,5GENX?&lt;7?:WXT_-@]2/+7;0#**N0;EG_D-&lt;"Q^DN"_71__"$@/%%/]UZ%V&lt;TU8NC BT3058Q(NCD.*@ J)GKW1509=T&amp;GH6U^&lt;SOO3_/H?_UVXPB+^N_A)KR9*ZD@60,!B2RW =XC&amp;V/FKN&lt;O650G8@@L)0JU'' KFM;YE]HZ]L]/=9XZWVX:$]GE2LRGXSOAQ)X(-#)[ @&gt;1Q,JUZN3A3FNJ!R,&gt;SHW"W2N* 4WE4]&lt;R4\WXXT&lt;D9^W,;NLW6@=(ABW,6*3TW=?@H3Y[9W4@;.D#+^)E(%Y_H96[G21C5B2,HD&gt;?%W[/F*CCZ;P-8@W01]GQ1@M9[K+O^. Q!AC9WP@Z\AWJ_),; @@L=MX5\B5_Z08ZY3J?9M\$W\!4HS*[69/CV&amp;D"*)9KYH*02S(-0DI9IVK@92M"7V1YPRBZ55Z&amp;&gt;()F''1GSQKK#,N''+N[E%@*A)R"#:&gt;IA,;N3U))VE^&gt;3UUT&lt;F?N-9&lt;F_CJ''*R9/08P!,F!\?"CZC&gt;=&gt;W)K0N''DD&gt;O#BDD$^7_@7C%$ZVRW)V% BVXK"8S07Z#U&gt;,VOWB@@B]''W8Y-\3GL_5)WI@Z/#\?&gt;?S% 9@RH"U)(!-L@28W:V-N?&lt;._H;^U (X:=CB(*&amp;&gt;F"5A%KW308P Z_L,]DOX398ID[''DC@/K&gt;UUW&lt;-JVO%8&gt;ZU-=*=0:A''"K%6AF-&lt;;(Q1H8W1''UW8G;1A/-4)M?_@I:4,31!T?]3:^)/1#O*C\OC!AC8O^,M#6B(9P7F:M9)M&lt;A;GL8@@G4)4[??JPO V9E\O2*"[&gt;Q:H!;?P%S?-X]PF0NIKEBJ"Y7SC:IG[1;9@VN,99WOB1?:=X8V#&amp;MW8LC126V_D\=!I33[(6*&amp;/B"&lt;U[N3O@4&lt;P*T(UR!Q\:YI%9ZC#*K\C6LFA,MC- ./_Y,F:''GVK;1!FDEU667;83C):-D*CZ(PCVCC+*: @G&gt;3XOO3H&gt;P2_T^K)8I&gt;B@@@:+"??9K=0L+QNC?=M&gt;Q_%L0]8)2?&amp;^;^6NWC8"(L&lt;1R+$\[*!&lt;,R&gt;_V*S:?9.,7M&lt;A&gt;[A"M1N''B/8I,F&lt;(!"W*''#9-2&lt;/FFTW )3,5V&lt;LEN4,9\&lt;OK0&gt;^ALS/C67[.R@ @/3",X+EOO0&amp;5\U-J[;&gt;3F&lt;@*[AS3+)Q8Q%C]QGQ!TC+''CFIUF)9#4 "((["MI""&gt;N(4U/ @@A1P/:%/''/SQO&gt;Y0UJQL)&amp;SWE1\R+?9 #$^&amp;R7?*&amp;=TS$65W]W^D$^G;[]DVB^BX6NN"8C3&lt;&lt;%;Y&lt;E+&amp;1X2@)^$Y-0C1UL&lt;_:4BUS8&gt;,393N\UST&lt;V^_3%4$GRV[\&gt;("()LB\KKR?@-&lt;U*[&lt;AX775T&lt;@PF37@GOF0/D(!J.2!:H&lt;#Z&amp;&gt;?Z +/M#AHC3&lt;6KEFM&gt;EVD8-VPT@@DIA&amp;(MI2!;/)S!RD,3=*&gt;J5WIE2ZG%0/8&amp;&gt;?&lt;/%UJ/ ?\AR:JJNQ1_):M2=I6G3*@L0"$=&lt;R6.RVU*[&lt;A[: 5UU,?3_)J9 EY1*/EV3T?,&lt;K=.S75W_79(&lt;.G=C\PG&amp;QDQ.Q@ZN*"Q=Z76[3Q=SXVOZ''8W$H9&lt;KH06DQ+-F&gt;CM&amp;D0_8\(V-*-*_DRQO]G++G/JI5HY''$@@@,$IB;4F%U%Z.I!?G_Y2S''O6\FJ4Y-[W"WIIR(-I]O8/PA@SJQ8;*Q&gt;+*7",AHM[OU&lt;.KII.NH&lt;P+Z1&amp;[Y46R/JX&lt;C)\(=NX&lt;TR=F8+O7@#%?HNIA1_.&amp;#7=L5"I.%_U1@_''S;F:6:$-Z_[G(#%B^ABLKB;(T6(BN-9[E7I:T["]3]7!*66M#^P?O+C[,OD9MV1J-45P9@@A:^+BZP_:%&amp;"!S48 &gt;FF#'' ''\4*UHY?TIJNJ45=SD$CURN:''3*Q9"DAF&lt;T"\5GLN*IKV1#30/$YT-Z^;F:3(SB1QL%H/R" 7MQ==?&lt;/C09.[ JT3XJ_3$BK41-\Z#3*F7#\ &gt;DAD=Z"U/0A)&gt;D: XV&gt;-(#H8PD BLM&lt;*Z$&gt;@5^1UFE#&lt;TRL"P$35AP.=.E3,X&lt;X#&gt;?;3X@@L*2P)@R,+IB&amp;+N3;=H?GJ&amp;)%OQC_5"\/8MJG %CH@2DD 5&lt;_AIGE&gt;7-H;_^3U(FU4,H&lt;B5W6/O!"U/0,\M0!H:_JZ4J2\''D=RGY/M,;%!A 9YY3T[''%-(+$Q@DAN#+5&gt;SH:ZV"/!%&amp;IZ?B[&lt;E5&lt;2;F1!++F((:D''846OEF3/2&gt;&lt;T5MQ=1D&amp;X&lt;6!L(,DEPK[@ATUJ8RTU@@@DJW/P)*2^I*3O%X3%)*&lt;ZG\J]9%@S)0]+)@^M[#%K8PM.D]GQ4_NE22**(A5U&gt;A+,R.[&amp;9.[A.FI[OB[&lt;B5&lt;YY?5+%H4[P1R2M++OXE O_ 3L7RV9_M-&lt;1-1XYU2GYE7T#_L)/U5Y73-]Y-&lt;VT^@B2RN!HRX29#^!@4N\O[7!ZPS ,FTH?URD!DDN-2;M$%V8/:H,&gt;&gt;Z@@AB)[J2,+J2Z+NZ,C7+$I$%4Z%RWI47I3&gt;PCSLM9Y@=XNUO09#*:")&lt;: /X!B6[&gt;"N_8A?OH;EWZ5''-YY-&lt;V^**SD&lt;KCQ-P^5H5&gt;KH3H:C+XHND-4?3[Z51*D?$@T 7GC+5/V"=*D2_A."*_OE&lt;_I-&lt;X;^:YQ\*5B2GQ0+2I:S2L3QS6&lt;&gt;:DW[XJZGE7@93#I\=%!A8=8&lt;@@NHP9QAB8.&gt;ZN&gt;.LT[B%$IY4%BBTRAFA4)N+49&amp;&gt;XFB8BR3TD$_KE73C-&lt;M&lt;R;F76E)[_VV6S8AGVWUOV\:[E1Z1AJ [[W7Q"(R*CQKK &gt;UP\@, [P,A\#+$9-4Y/'']1CGG$%_''O&lt;0R_-:)ZR?D+A+DF:N":E9&lt;W7$\1A?J#DXT2L''K)1:&lt;O+&lt;^=X7J#N;1F#7OB\9*0)P@@L1A 04K&gt;;9*0,(?&lt;;&gt;K";;I:2Z]J?YAF?[:R''ZK%9^V8 9#*:$]G08B* GU5 @/*K]SM6BDZH&lt;.1B0/!R?GM,VTY"^''H;X*,!()T"R+^AHAO8:^6H_%2&gt;]1H''F#L&gt;_TXZ@G(L S5H&gt;4X.%4Z&lt;L7Z @PD:''YG G3*D_V#UP5&amp;X!LKAEKJ1.&amp;M^A17+86$#SD9QW@''^J9F@@@=&amp;#5 ,/;/U.,=U.&gt;Z?$EI/3=6=*.4YMY)=*:S4+&gt; 9^UF]N+C1!KCC[_C6!6P01+NU7YO2"7!E -O]-\Z&lt;L6N[77 ^6$KF?G)&lt;9BIJ7,+7_N6XYQ.97I#M4!UFA%=NA2BI!0&amp;N/U2&gt;^2DF"-W&lt;L5''H2RG&gt;)&gt;*]*0QX=D''(&lt;W40PQRI,S;MQ0U77\&lt;H1?]I''GAL.6PR[@@@D&amp;%,*8P,+JZXNV2,O;"8.&gt;2\F5X/7SF-)D4 97"PK! .QAIP!CKQ9B%21)XP[I%)WQGH35I_A^K8&lt;EK"V303\5''H:1#:UA;__U0,U%6L''.X\PE$7O''\9*+&amp;&gt;V!(ZEKOH0F\FHKO7S)2\/A[#"RN_^@+&amp;H&amp;1&amp;GB("(Q#]^(7&amp;M6/(\&gt;(MZBVI:VC\%T''=8B,OTEBQ''@3^@@@:4J%)ZVZ&amp;)*ZU..2P+HP:8O%")$%4):6F^^PS+9F9VA DIB2DD^NP$IT,(9B,,YT$LN*?''SK NZTUM][!"RN_V0+D$-5C6,12R''1&lt;P&lt;20J=D=XHAQFE!\''\ARO5;=_U(FV :=Q0Y\Z 1F($#*HZIR4,HE,L*20?39@3(E@?OIFL&amp;*.__4%N#&amp;]J&gt;72^MI,''CRX"0&amp;%Y4@@@P+,M XJW+9VAVP_:2D!AG1(CV9IQ)@_RQC.88QPJ65.T3^+JPDFAF,GRZ,.&gt;%D#4P,#6%$AH/Q^P3&amp;70#&lt;:FIKT-KA QD9#+-AW''@JQG]IBGA[Q.(%W^\ZD"5?\1(3L#]ZL!($&lt;17,^+?F&amp;=/&lt;F.[5L/CH1KXX6O]E4-''U5I#=^7OI!"\8+O_*&gt;K"?M&gt;&amp;7CLMQ4[A@? @@@43&amp;)*2;;HPOS4PDAB2$H8MS0%O4Q%2I!&amp;^_^_VP&gt;WVXH8P8*U ,#62,.&gt;Z;5X=,!AB)T&amp;%P#Y4 MXC]P2*8U)Y5AR_.*&lt;)J=7]E;WII"X$[,=!/_%DZFI_]6!(3C#L@PDYGOT!16!GE,.X#(B_#''WC F=.&lt;:0EM6]''&gt;/)#NF3 J,\O;K1U75W&lt;#6(G77 &amp;E^*P#KNZOP@@CZW&gt;;&gt;&gt;2$I*Z?KHP28;C#-Y/CP,5M^_HFRJ;C[%?P6@PXIZ2,!BZU+J%L1AV)Y*2D.&gt;Z,DJ2DM*@.I@3Q_M5:&amp;WCF3DQ7(]59LP,2T&lt;5]&lt; :S9''L)$ :N&amp;EH''L1H33)1%WH:.-6Q]&lt;MO&lt;2N(*+\#B5B*9F8!JSWI+@2@]W5W3@T%H&lt;&lt;\&gt;:[_I6F)&gt;33,A?3[ALXIMCI1@@C/&amp;+J2;4I:&gt;G*0]D_F*+_VP9#FL,!,CJ=29IY:Y&amp;C%*.W%9QC/U+IV%,N7:9*2,!C+&amp;*V%RT&amp;4&lt;#NU(C5^S@.;9()L83GZIF:/"_FK%V$E&gt;^17M;5(ZJYH@_4Y^6!9/V#_?W-R=ZGG J+*=P[(YT:D =E09B''PS8/36F0.^RSHX4R7B6K"76(6 &lt;U&amp;OJL(C*\#CP$+EM4@@N&gt;P2;J2,(:.*(9G;T_T4$=%"QH2S&amp;\!6@M0]D[%9[! 9^V@,*TP9[J74""ZN5Z2DKHPOW*.L81U77SY6U9LQL^''HBB^ ,I!@25@.*1+$''X&amp;;D 2[.39\$!(F\2=/\3=''GHAL''HK,P&gt;*24]5R8:_*5+*UK(Q:U@O.$0]*8$+&gt; R@.)&lt;##T%SOO24@%W_T837"&gt;S$CT?OM @@+$YTQ4ZD2!J7CP/X21^NSA(Z\L%]L"VC4*;%HK&amp;;%.W% H@P08B0,)+/JFC+;4JZ:&gt;U:0;B4%)[&lt;= 4;DA-2+&gt;M!0"W2(8T4O8Q."X&amp;,HIEH\#AHZN1!%SKH3GH0ZF!(RO''5[$\*,W3K*,-&lt;08%GA+GKAR&amp;@+G&amp;:CR*I8O5&gt;;-*: OMC#\U_I9_\,;2B4\Y.S&gt;RU_7U2@@BGD,+K0&gt;UT2"LM J +J(.J47/P:W;51(''F&lt;,XP(M1Q.K!FXHB%)VBN,)+7C[J%)[J2:8 =R[PSU[OYH3NVP&gt;;]M;9&amp;8!T"@14C9B''W$!0?RJ&lt;[F1$YR@FB7C+.@T=H7=?=)#_5E73KJ,O(KW1+E8A+!L^,+F=9J7C(,U,T+&gt;@_6#J*A(./7M&lt;U)DJCYEL&lt;[*6,\D8R&gt;%0@@E1XF!(R4]S-!B(*9.@OLF7AW@T)_- RSYJR( +VP7?%S8C%D+K%*''R0&amp;!CCDAC+OS62&gt;;N37:Z#W N .FCV3?T77G!IQ/O%''OJ64K4?''Z,-&gt;,&lt;:''Z[,9/''_FL"U\]?=FQ''G3&gt;!%Q73-[&gt;FGE(\#*$RY!LLKX23X4Y!+&lt;^ $-]55AJ(_G&lt;"H''N0RI2T%\#Q#GP7?KRZR''P@@-Y7U-Q*5&lt;V''@8V1,''W[=''W;W-]\+0\)M-\)-"/SBB.TMX@7C_HB2?+IVXLN@ G)B-ATP)O23,;0X8/0P%$&gt;J&lt;6&gt;,Y""&lt;X(W_&gt;J!&amp;UY9=_V0+X7^QT8VUN)2#H:+\$6#L)''7MN.&amp;&amp;,Q[TV#GO..71003Z#(AR[2UG:G[ 2@-#]UQ5Q8PK":MU 7(''ESK]\&amp;:''_8$Z.*?:@@A&gt;-U65?[W@0LB5V&lt;B]595]WP!&gt;_,'')S)4R%P49@@)C=C3B0!AG1$F2.N.C,.&gt;0[''A4A;3E,=&gt;3;8 ''TR?%XH(K!M L#S2$A0]3]DJA4R/F\L[K9&gt;0\:T&lt;A/ZH&amp;-$#=]6:,J&lt;3L3D!%3\@+&gt;&amp;?!8G'')H8B_-2[X4 R@C&lt;CJ''01&lt;28;R]J3*\R_,(7K5DY''G -68S&amp;01=]4@@OE;_/56VI71O5!&gt;-X%&gt;V''9&gt;BKU&gt;VD:+''W/S.=H/_6DU69S\I[?",*;+,LYB,+JH,--:P/;_T98@99;#&lt;6AC5 %48..C@0ISJKMB^DX5^!9Q6R9]_]\W**?1''T5W],#930F]''T!(N+E,3P0KR1+A* /3CI&lt;#&amp;L$8I&amp;4D;Y"N&amp;A]%4/JRU5]R&gt;#)_+2[5&gt;^8)X64._''5,SP@@+G[W!69@''Q=O[%Q]_.@_3B; -[V5''_?=''\B;4.\ XQVO#9ZI)^-GQ&gt;&gt;VDKK%D@^$0+_+?EUU?KRS,7ORO+! XFY&amp;^%V$Z&amp;*&lt;,(DI]NI:"W09Q0 HQ0R*;-6=WU*16&amp;NN@\1H2C*:Y]SM_]WUE9-ZU2MG2;_HWF!(ZDA(&gt;![TY;E4G!(2@Z&gt;/[, ?2C*-+?TL.G7@-]]''@@@E*=V:H4:50L''O4B1)D^Q\V2&amp;!FX\Q@6G)LSQ$W7=!X(&lt;=]X%T_A)GY''B2.IC&gt;-EM_O]?&lt;JK3&lt;OI8&gt;=3=U.^W%_9S&amp;\''"##:O;!U:Z:2MNK"35A+DR[,O.=W7WV!Z@A@Y% GE# A-5A%_18]W!VX:@*$^I+K5(I/%JI$^F]Y&lt;#''7VSF-J"I%P%*48T%_P&amp;=FE &amp;JEW7RP@@D:IX3GUS''.G?\&amp;''@YUODZ.5^?W$[4B?9&amp;7VO86)P4L9D34Z"T-&lt;#%B_,X:U)&amp;JEUUEFUTEQ.R @)$F3UZ[%9]X _6HB9$N(^O.&lt;)H3B"$_!8W8_5W0K_D.NK&amp;1%E)=%YRL0+H;3SJDV,VO:V.@HR&gt;EYBI/J4=7''7Q$1[-([P6U5_NI0EJ.IZT9)T!R,F1.)''+$)7SG5ZP@@WAJ,SX$OF03534P*@T?O_Y5&gt;''T6+*8$R[\G\@Z%C''--$=9![&amp;GSBAAYG^D[[Q[2\US:4PWO4N87"T30SC-Y_ TLNZ*YS&gt;&gt;K";CY4"U%/$L)&lt;&amp;=W!&gt;*(Z"^G!V\OZU8:**(:F#(:1&gt;%\F#*1Z5^E,V-WUQ:KJQ=47?T &amp;=]G?E9"IF RK?29M^2GG*J_-.''&lt;5V&gt;]!%^:+@@@]HW%M?5HYWZF( B; &gt;R''=5;V55=]]0B''-&gt;PGBB*^8&gt;F6.D%+K\CO*,ZW"^A@"Q%G4;NK&lt;/E;#):R#9 R@5*8B*\V#''&amp;H6"M/[(5 .5B5Y22I2V*D#*!+K0&lt;LD L&lt;K9@&amp;N"Q)Z&amp;&lt;4T#+GC&lt;&lt;A&gt;:,EYK(^D$AJNMYL72A2UZ[VX9B4Y:DTE_+W 5;:6,Z/]YJ-W &gt;YC3%4@@L?3+5.5S*.+V*?3IE3WST650G5W-U7@''YHI" +4LIA89UDCET_C+(NVDIB.D$EA@(7"?%WE)6(BW&amp;JBH_OV9Y8NY+1"H*BO9@ESZQZ_UD,TI@!''"=WZ25^[D&amp;&lt;OI)VU88@ZF''2N[UCO,RMLBB55H_DF+BI0!DM2/*&gt;@B1,L?U/R^U1=4(D"+&gt;C!7YP-R7CSSSH?Y?+H7P@@B3*D[&lt;^5-W9&gt;U0,KZW9;&lt;_4+H9&gt;]$!7=[F?#K7&lt;I.IZ8,N,G%&gt;W%9S68\B+J]C23;?9UN]Z*&gt;JNJA=&gt;L9IQ?@C/E(;0&lt;!WL COJP\B)TY5\Z5;*(A XLZ&gt;E=:#KUUL[*:XZ_&lt;T.1#"9K''8+K_KE0!K^72+\22EING@U\^0ETV2VM?U !0XJ)0LC)*S? \PM&gt;+PD-"6L&amp;@@COO:/S;U5RAFL1IR*+F[^@0EHK\H%)T@"5^WRVQY^E:1AU?-&gt;#.AJIF%''KG[PGIZS&lt;?EUA73%U-M?_X-@UFJ$/_0(&lt;7ITL*Q-$?9@T5L-0Y2;!K/@.Y7[WV.EWCA(Z 7W^:]!YF)"@VQZ**BU0 @OA.14)[ .B?24%$)65?W9&gt;ATQ&gt;[O$-KYQ&gt;:P+#0U0E+790X=]X/\(@@C(?S$9N0J1L*A6+*=]\7UA)_SE/C63(."Z7%+%Q,+K+^JXN/ET;.D.5V "/(AW/Z+M*#4''_,=&lt;&lt;&gt;;MS7;N^P8E ''''L]V?+4LG^?G%*+"QY%,^GU8[UGK.E#6,[JS!]/=Z&lt;$+L9)]&amp;=%E+_*UM@LI[]RL*5D)&gt;VI3/%7;+V]5;V5S]W=5=]&gt;0D7]WD5&gt;5;WWZSC]S[TT( @@*UA9$Q%#&lt;427$!)0Z[T)LW-N''UP"G03V_=[%,C7+,K%E7CL&gt;''EV&lt;E]K]&lt;])-2=KEG%TS#J[&gt;T9:U1U9!*U9!=HFA !$R.8I_!CP2\H;!K.D.8U+U_-^+"QR@_-]Y,] 2+7@[ZR,E-7A[V&gt;G0[:\AQBT1 $Q-[T8ZM]B/W[T.?[V5-[V5-R9&gt;S-]M''W9&gt;BG8)!D:]JZ3P@@@[P&gt;ZT["ALS0,$1"J](''B_[D:I3"R7HG?%&lt;1@=@FC+9XFW=;$P YB4JEK002?_/!!*O&amp;QS)*ZOT8V)HE8N''$NJ.3[9UF9R(]AYR55YA-\.8^E5#-W!8^E]^6O@&gt;$PMUAP5\$P_3^''A0&gt;C V.(&amp;%Z6YH_T:N(H4W]TY8M]=^;W=2F''=&lt;S#=_+V]_%*5K%.50F%NS%1;:V8@@N)^W)S4W*@3H:;RK^900:KWE!E+S$;KW%?&amp; X7EO[B2&amp;/]A-O]&amp;8+QS:[FMB+O_-B"AD:.4X[XBU_1*7?:&lt; RBX1(59T&amp;%N5\8V557!V).[A''V[V(XF_.AZU=\.3XSWV&amp;\LI TE90''$J^&amp;_IL&amp;U+[7AXQ+5\''I=0G;W^PQ6K!&lt;IZT7SS0''-WW; &gt;''-&gt;8LC $+VR''I7@1@@@-8*6K4M?P 44ST9[C]XR*6275(&amp;]T$QC=@6TRW"89X2OTS,S,&gt;?&gt;US''VP08B1SHS=1-*?-=U.PB3=09!HIRA.D]%MWI2_!]%X0X.V6U%3Y=%Q8R1U0S X5(.R1YM3(YZG&lt;&lt;0LV:C88).=SID4$S'' -E\O:#DLSI''5JFNEJ-[:HRRS^6/8&gt;X,;!G#W@ )X8\Z\N6,X&gt;!0@@AENQ861]2HN:''L;-G%CZ,**+[-*9DMCS&amp;966[8Q,%[&gt;#1BM+$(?DEUP]=^)G*#!Y_YLFJ3)/\SK?]Q=GMU/BVG,XPTJ1?]DZ0LX?C0Y?(TQ=TTS-_0+E+CU5&amp;:LT:I5U*N[&amp;&gt;,"8MPF:_$9J#,1NY.2^H#:M]Y1-;:(]MN"VOOKQ(*26$5_1-O[\^+-W/Q-5PZJ!KO#$P@@CA!O+=STZS[61T@(FBI?;\ &amp;T:]WW8HD+Y!#DT2F\(3!ZBW;;N3Z+AI)+N&amp;1]13C-0NT[NZC,T9/DG_-O^C21PL+F;((XX)&gt;*F@]V^!'':=G,\NI5B.1YXBG[BPF_I=5A*",=VL$IQ;QH(M_*L''?*J)KZRGJS";N+8[T*53FH27TV=]&lt;R0$JE6=CHW6]-Y5]K_&gt;I:.""00@@&lt;:\9#JRWT6*&lt;@O /BR6G9]N+8O7@AP26P7M C\(*Q-O]W84=#A9UD82&amp;?*R^XY8J@YV(''+OEQ@F3OC:34$]%YRQ&lt;3!DC=]5&gt;&lt;H8#H?LKEHZN273K26T#!D;**$=O**E%*!DQ4RWJ!@MBP+JTVKU6@Q+.=V7K8P HG79]U@S-56$RF''3*!NQ[&lt;\_I0D5&gt;-[U[R4-&lt;KH_C@@B@/@\G?EMUT]=*RYX&lt;N\O%WV$"+&amp;J8@ED;&gt;C4PG".=3JFB71V&amp;Z#;''UZXXJO/E9''A296E-9 /5CCC&amp;-L[*YVVXA($V"1I#!8''0#"O(3%-WYX;!_I/C''6WW8P[CCNPKB:(OX&lt;''-G\*D04J%6RKD?V,O2$5[0?LR&amp;?C &lt;N(L:B[T$$-K"T.N[0RQ545M-\@+U9H*21*IKN @@N)O6UMUT99_A::O6[!^4FBC#U8/\&lt;I?.O"?DA;J4Z==3_*$7;P(6Y^+-I;V@%W&lt;Z-&gt;4OC*N=P,[HOR^(^*N#.(FE XD%U''WV''2N7U/1_B%/* Z[Y\N@ I=&lt;_I=.QF:,L-!.2QHR\ABIRYBI/ 7SV1H*K-P-V$^7!%*![&amp;;Z-2O1W\9MR4_JUA7@;,65^6&lt;$'']LRR8%K20@@KQK6]LUUU\I!]LU"%FK[=M$U1XU3_:;+DIA83/C 3Q$8=\WH(366Z/;_U]&amp;9,?]"@PDA4@-DTG=?HB@T:NXJB&lt;M#A+**YX&amp;[&lt;NDH[D-&lt;U6\W&amp;&gt;** K^* F&gt;7*J0LQCD1B0,5C\X3?8%4F)65PG9&gt;2Q=&lt;]+)[2&lt;LHY:1[05QNUGX,_D-GQ8&amp;I3#&gt;TB&lt;ARH3G?;^"GE?AK@@BI"R06U[L&lt;_0B4O//6.=,SM*R#1YQB^DZV%!BVCZEWU3!RT RW1Z4B,:Y&amp;%4W7\0(&lt;U[3H=XA-9@I37GJ!6IPJIBQ+^[*NA.)5U&gt;B5V72[E&amp;WC*.+TQ4&gt;@31/3S:","?VKMG(^.2V+_J:VUE1MK+W=0AQR^U_MF-^D6@YG48&amp;S$%''KKQ_KR&gt;4WVJ&lt;KZW5/*HQ+28$W28$@@G1TQ9\@/EV;P--VA=.E1S23O#3E4.J XI+V*.W]/STE_\39*,XQ@2^3&amp;(VE9:QA7?;7 -4&amp;2W$ =@:^_:''B5&amp;MY8E+M&lt;A[C[&lt;&lt;#+&gt;B[&amp;;GX*(A%V\-/&lt;8^_S0.*0R[RMUH8&amp;W"HOX''ND $]-[U]-_7@3%-''(!X.8R9+K!S*J&amp;$*:(''U24_K''=;S+2D+S)7S!@VD&amp;4^_&amp;@@@(''[FT^T&lt;7;MS&amp;/\0''/"E''+MSD5Y:)S4&lt;Y+!U\AP70E]=G8,[G7T$[-236&gt;$AU],&gt;A:%R7V%JAYV^@OR6 PLI:/*!Y](# K_FKO**Z9/07PQ&lt;8U&amp;102N:Z6OFD#F, #HC&gt;S_,MSL3"]VRPM_ ^7;=+3=[*29&lt;Y[G!K.E&gt;&amp;B;0"9=G*71&lt;J.)OULY-P6%M"\:NCX;C0&lt;L.@@@Z!8PJB]&gt;$(:O[#C$3.;=*UZLJW HB/N&lt;&gt;D;01JZ05!,#M(XB!X7$)+L_H=_$AB+P49AGP"&gt;(!*W=QC''&lt;C@;"_AI?( K^N_D/0$%%Z&amp;5%Y8O)%KKDT[G;0,]@$=X/(]]:/4ITQ.13 0KWWU0.!5&gt;4IO8^18R;UK.EZ5W;W*?=6#";!21\,KB(R0.WFBL-6Z4:I_MG%9R0@@N4*2&lt;*E ;24A5N&amp;7@(/.[N&lt;U[N%UZS[;&gt;&gt;&lt;''%O"U]0D377.&gt;.A#+7''1V@WP7XZY&amp;\ D+3)-TJ!-5,U"_&lt;$+LM!5''=PW][+0#"O)J6,Y&amp;5%W08C1U6_*:I!WH2MR/PY5]FY4@9@U4#S]U:FTJZ/!C69MV%_WK%+!X8;!8^G!_,7DVT]GE8%[F%CVC_?K-0,-''Y''D9TO%Q0@@C] M%BA3%:R&lt;/HV^HM&amp;$JGM3M/\&lt;,5V3,6K[)N\CBZ]R-^:/X01-''2.U!E!\G7''JC&lt;7-L!,[--[VY"_7UH%+EBMGS"5,]"N@*(YKV''61=X8#&lt;7V_B03K8Q&gt;U1R\&lt;QJ*%8*UA?.&gt;Z=4X=+#=N''VLLZ=]]8U&amp;[&amp;6]5&amp;5(TU=W V\,Z24^N3-QG&lt;&gt;TZ2+^*KR4?[07%C^W%@@C%9Y[%.M$9#&lt;UAX(T9+ZLG@ORW.N32\&lt;UU,5T@ ;PAN#&lt;Z_ZDCG[4L3;Y,''U#F+5I07\\]JR''V-#$U\6F)7,5YA-QKR?@-U=)O8X%[&lt;@[C:N(VVU]G:."K-59-P05OH&lt;-G,+J2,..0%7OS*8''FBX%KK.A%AB,$,T^D,P[58FMZK!*1J''1G_H9OUER8*!I]5B)&gt;BK+V.F@@@K 3.N-:+ L3M+1"I30&lt;A8!Q_;="7?237=&gt;3X*]I''H/Q4Z&lt;8G2(Z=Q-L-%K@O:F6ZQ5.*S+59E;B9],&lt;64N X?C &lt;@[M&amp;9.[&amp;0[!"_G0&amp;?BI_AXFU6_ZD,XL&lt;8+[Y$MG8''1%0:)O5#/7TYI]GTL_STCMZ7'')6-+U24;W3Y=Z''?A+#,NI5L-G D?-:($R$($E;ZJ7*-Y X@@@D@5/P(LLAZ=$N E1);.4,?_4-OS_6323JO2$X[9*UR^:3R-9ZZ05+:"6 ,3D7\D+/.:R7WAQW''=?@K2&lt;OK.I&amp;?(#''&gt;@_''8:1U6-Y;VV[E%%G*+Z7#"SFD-+F%_ ^DGPZE5P];9*Z,+%C5(QFDMI[0E0,E?)/''8X$"Q)+A''T#!?F:Y1_Q08;3 J*7SP#TR&lt;O(" $IBZ@3@@A * 4]V?(CQ]@&gt;ETVBP/IS@''?&gt;7=&lt;&lt;''--?UUL@R_-2^EH8ZR-(^YH\LH/@AS+H?Q\E12);(YQ!%EDGT0_[VT.1+HAZV75%B8B7Q5%#"%%,&lt;G2[_K+X* 4MD''H&amp;7MM7\4^N1("2DFC%*[YLC[JPL9PR0A''1J&gt;*''*,-&lt;21RF0&lt;YNQ=F71)=%#***S8@MD"9Z5@#CH4N7 ; @@@%:&amp;Q''J+CS5 $[E%5YB&gt;5:''SM/[/C2EXW=A7;M*.WG\J!K:;,$L8;YCQCK-FXK G95)GG4_W"AQD&lt;T;)*NX6(@O]X''T3P&gt;,F,OK,XAO8T/1J0Z1A(Q-=(7GXVF=\IU1(V?CULM Q*:0%;"*Q+&gt;+J-M]2GBD4DXRK)-&lt;08;*529&lt;'':)67,R''S?MGF"(*R1HR#,Z*5-FD0 @@*/X)J&amp;=;&gt;,P^]M@^D3Z$Z*X@/JL&lt;GD/]7OJ&lt;92BT7GHQX&lt;!XT#I97]E@F+#L+;5NW\7@_*D =H3[''''LGX,UFGT\-R6/]*%RIV!ZK*.+WF/CM6(CC[=Y"6_U!B3\:1WF:4]FNDJV%JH&gt;2#@4M/4;"S,B,9YRP?2)&lt;_D_C!L[CA''1%-2OXB=[VB]PZ5A*+_B(R9QIF-9$C@@@C4\(+NA'']!''/YUO&gt;]Z806T39SQ&amp;I7$#=RM2^#%O0&gt;@Z?G=W\8^R%=&gt;(''-.L%,WKW@U2[5[*$BW,WE@K&lt;&gt;(7MEYT5&lt;E&lt;MLJ$-''C8S(R8%,&lt;L7ME&amp;&lt;[A_+4C ;,FW]29CJ 1!;X0&gt;UOK9\@@;]IUL:R.-Y Q")T+$_J0&lt;LZUESF-1J7-0.69OM/1%Q&lt;F($."X;F2&amp;=O4-H@@D.G46OH_\5WI.''^D\AY&amp;J9S"AT&lt;M8&amp;&gt;M1?9J[7,Y%&gt;BGZ&gt;:DZ&gt;,AHCJKXR7PKV]^2[M8E+@=TLJER#[=AM3\9''KZ1ZN*.STY:27CD_WV8Z_#''5,J9"I,SOEOIL7&gt;UHM$H#+I\ZPD./+U/!F C7+DHDI5(MK]-DR-PM6D,;NUD]/08;F-0/C-9&lt;MF$_WR1K*#*.IE0(L&gt;0@@F,C08G7 3FO58L4);),V!_,UM/%4PB,?$.H%Z^3RZ+1$L.S?G0/]J0&lt;_G4*]?S!=G2$&amp;ACJ,-&amp;J&lt;D08 (8D''_WT#B4?(''4.!3&lt;[F:''1&lt;00,T"R4-BAXD!I97$SK#8&gt;LIDIY0.9*0,+J2,K@=DCM8^GS%[1G:$^7 D)7SY74_Q1*RQ&lt;LMJ)"D-&lt;-GF(&amp;I_AH-_G3K\MO6@@C*EH[:U5\8GG.N[ WK]PYXI5?7MS!;=YB&gt;F%SM7BYQXSK)H8$RT"Y9U="!-_7.\O(W3,19)0)C@#$''K2A!-.Q.S8)O[.+1_''&amp;1!&gt;(RE6TDANEZV,7K0&gt;M2GC]HNK6=M2[%VIFEX$VC]KC+OZUB)[&gt;V2*BRF*KLA]N]W\7@_&amp;L*PL+C\D\RQ8SF28''W"W0M1!HR%]8%2,P@@@2DA.8EG75;&gt;RL_ZWV7MF^;!^UCL&lt;"MD#=K;#WH[/P0=]RDQ6&lt;RNFO _-W ?PUDJ_WN[A&lt;]^^TJ=&gt;\JP41OD,SPJ(''NY5_ _V/M#)!&lt;E1]/YWU50?N''B)U2YGIH$T9(;#\7)#)2MWQ49RB7$N-T?9C1ZX%TQB'' WI7@U:?5''9KS6BOC4X;*21)&lt;54/KR4-K#.PI4R+K]P@@3&amp;MW3LCM_Q?5*,61C&gt;Q?X(76&gt;K4\/S#-R&amp; +Z\!2OKX[#!*I_D,$__5N-S!#+H-2\W5)"V'':D.W4N]$/4SSI2$BI5H[:ILO:EH:D_L/CIK\ZUH:@"&gt;YDLK[3 &amp;"Q3C(AM6"=XXW+N2IP*!B@9Q8M&lt;0F?BB[QVE6]_R$+8E+@&gt;&amp;%,V&lt;*7?1]&lt;E4-&lt;289&lt;25)G&amp;L[*E:G^@@A;J^9#AXX)3ZD#G?)9&gt;.YQT\VA&gt;R]716&amp;Q]5_97FE^%V9O''4-GQ&gt;7ZO?5;?\4!JW$"T"0Z_A]T6@43#W]B/:-NR=8C&gt;-SO**2*-4\*J,,RF [K.(/O\^Z''--4Y$^1!F2DA@_''8N6A.HRK2^+&gt;??1C-J119G92]?W-=3W$)(Z&lt;QJQE/#(:P089FQ4_KD''1K_H$* 1I%:FL@@C#M;+6=A@Q=^_+ (_W5;\XNB#B/2&amp;/]2G4)N*&lt;2F:#OB8_T5A(Z(Q]X;*=;8H&amp;+_VOSQ&lt;L*"R0R4)%73N05V&gt;''54?7!DV:R!&gt;)&lt;_B+*#(;*:XS*S7DAN(K,$V#L&gt;SG,ZGG3B&gt;PL[6?C^$JPP%1XR#_.U&lt;X)-_6=N''%;^_4)[]Y-H9?CD(:@01)&lt;+(:.28%G_HNT@SGD1@@@COW.X;(#;%487VLD08C^GT&gt;9A7];7\S92@F6&lt;:^J36&lt;#5B4,ST-GKB+)$*/ _% )_"(&amp;\A*IR&lt;/F 6QHFN17M\!75Z&lt;B_U#N!8%G:,,WE= D-&gt;Q/%^XD&gt;W]SFF# 3A2BN!12.&amp;&gt;76IB%?? PG\$?FXQ=_-W ?_+5^SI;8@VYKD&gt;7!BND9Y[C_G0R28%G_AH3H -0$H^N@@A%HZG5Y\!@8G6F1 W.6B)G J2-UR]!LBBEXV67CD3(*/MP26-KQ&lt;,-KX_?PG[H^3E9T!5G26U&lt;R8''JISGQ2T X&gt;ZO9@_47W&lt;-K24^NUH''K:''[-2''Y!*J)!\$!(F\#O* F\&gt;3+O+0/FRVZ?I[% _8OG?Y5N-W./@S)2=[W -Y7.-4&lt;# J(M5G1T_J9&lt;Q&gt;UG+!CYCS*G"_D@@MP+/VL_(!H)NG$*F!E#!(:@"&lt;F#X J^LI806I&lt;OC:J,2]9+_H%&lt;E73J7''5)7Q.RZ\FTCV^I2&lt;.I"X''1CLXX3C"&gt;]M$B]@(A?]:XQ8RIKW1&lt;F%P]''1/3X_$0/_7L=_WLZL0AB0GLDZ8*F L?MX R;''/]$/5=?\7&amp;AW&amp;U^3KQ7''G%9["@5/LM:$]G04_%*(R_CPKE1X7QVP@@Y1&lt;8J&lt;CJ7^A;U5",T/**"!I%*N(B%J:MB 01D^)6UL5)UA^IK,-GQ9 )T#G][.AJFS#:4W1G#,)&lt;E&gt;(%GZ7P#]?RI6KQ\L@5B\QO''2+T]Q+J\BRJF7IH]4#=F\3L^&lt;"/M7I=?Q0&amp;4/=X":?I/9HE3MV]F_%=8H&amp;+_WY;140 5 M@/!;J3#\MD!A 9Z*P4;-E)0(ZE&lt;%Y@@A9G7-;J2/@0DA;ZG%\/[*@V9,T=!TKLO_4W4Y07''$*J!ZGKJ.[F-QT2"V/08@#47PL\HXT!LM0"Y!6!BLICWCAT?J\S\ ?!4Y2]- ZQ45K:,L*KZ2)&gt;VE!&gt;ZXY3L3L@RM(^T9,DW4L&amp;N:""P?-O:8T__U#?:/ 0D@E_$,\5"B6F679RK6/QL=2\LN*DE1(M1 ?]=TZVU\@@J?52H.!-_&lt;E3W,]''2P#;]:DE/)EA6J##; 9P?NDZ\8+7Q\.K!]&lt;F,8*2 V/T@=6/!;L;"ICS8L,R1^NH:2,H)U"#W7 _TBM@''$O_8%&lt;_B+K_B+JN(I!*U9H?\1H38JU%S(D8B/90G:]UO?@V]TE%, O0^B+$-5RVB[M/U!WT.TM43?99&amp;8!$IDM ABPFXI2R"XB5_DQ\P@@D]B!X&lt;A(^_)9$^:/J&lt;=TJ/C0:C.&lt;(=-!]CNT,HC^A\[OPE%G2=RI_L:UIK\K[&gt;.HEPOPP?L3(I!TJ&amp;]G9F80\SD&lt;I=H^]NX]/YV"UA\ZKT]K:+\:\.3\XW5(3L19/T"&amp;ZK7@Z;V50G;U-^C -Q&lt;M2QE1/[UX&gt;.RR^9W&amp; *?O9[.?46F)MTBRN &amp; DBKG''(HYN ,_U86;@@AY3^;M:PD+M:&lt;7FR/]H890IFW4OC17YK?"?H3EP:P0""YNF)#*:L,Z2:^@B4&gt;@CX''T.B&gt;)F8O8%"VD":0!%VGQ ;R&amp;RW"^QD&amp;.4$_K,Z,ZQ6V1S&gt;Y1X]1HF[6=/V#=''HK&amp;8G;M2O)=NM;FJU/ KGY;@1&lt;\FRX_QG:\FW-9:E?%CPC9M&lt;1XGTZ,C]0?=-&amp;^FO5HYA7^]/4@@FG5&gt;"$DM51;+3+:=PPK*&amp;6:#.QQ];5VA2]Q@EEQONP0QF&amp;5[IEKF''2X[=YO-&lt;XPF"+8%*_4Y#OB(DRKD$RUQZ1$RXU&amp;%7M"/?[B-46I"U$WQ8R7\#+#LIW93CI.ZF"&amp;M?$2+L&lt;!VOU0I]MX5\B5_X,8J7/.:OT$R3T14_)WL\FYB''I7RD[$CRUH8)NPCR_"3A2=9?Q!  @@NOW53.$YO0T!DR$#S9Q?&lt;2JC#C0ZIP52'' (@N&lt;TAT&gt;IUO;W@8B0WE:I01(.I#''2I1+BVB (9%NZ-=\[XL*0AC&lt;\4X$U"X(" 2#$C3)#NVX_NQ&gt;+]99V^!S*=N$LXR*XY;C#MNNA;2!*]S+W@-\2/@[VRUC&lt;ZX2%W8LA(;"TM%ERT6S_H[]CIWC]:VMLPRO6/F9V8"*)W@@A;[N@*1?+LT"O3AI&lt;KH+!-9K =;NI4^)23\9B3=FHS2S==$,BGEE *;]N"H95KJ$-I^!A 9]X3$H5R12V&gt; -@11AW"RYZVY-K-J+,%E0 -"R8ZZ&gt;^B*^__)*?4B-?=ZIGH0D\1HSP.5\@\4_JIGMG@_%2]''YK-'':==&gt;"[FMX6MX3+6PL 0X?''E.TU"3A%(ZL2=]3]2S?(@@G_LI"Y^33 KF41O9@JE P$M(&gt;.?F/!QW+13G%U"D6CI-JHY^XCZ?3?QT$\#088.R4.I$DMC%GRM@WC9ZS?9G!2=RSY:&gt;?J%*=S17(R_R&lt;)&lt;EF_QXU=C\Y2#9J$''$6 7/.:/9$Q$1 "5] 7?*;V5W]L2?^@?''9TIX?WD2XLCG)C9WI2?&amp;U?&amp;7N\UEYU1RN12RD)NZN:=M0@@2O$OHA,[QCBJ&lt;59"0Z7[@)P&lt;^%+J+,HXZ#9UT0;4QCZ\W&lt;./-7@Z;T&lt;_3!(*E4.N#%PR%&amp;B.0 6;MS_HYL2=YCW''X,VBO\(* 4\CJ%!&lt;L5%F\LK+O]Y13NQ_*_/=]680^[4\$$8.8W''&amp;CE2I$?4Y"&lt;R&gt;4P7FHZ :%V;I0(N?MF#"?;:=RGI2#8"HGFD[9N_=$T"B@W]H@@CG90I F::P1P(I,%8L1Q8&lt;O@\G&gt;-#Y#[R&lt;\32^C,UE/ ]UI&lt;&amp;79GETCV=YF''0Z*2)&lt;$ABP]G"W WI$\&amp;8?R,3\\)$B66H62,N. 4-K]EQ4GS4P%)XJ*SKHXVE!X!399 K=PIJI&lt;XYWI+#BM@W@8NC:HYT]?8$)_RX"9I$^I]H5/?=)3A$X7IU P$J;9.P8?T+, .[3*@H@@NZL9=.EY$XIC]J?B=ED%J^;P/,ECJ#X/M3OF1,NX)P6D2I&amp;J-OFP*U49W)G_B+W"X&amp;N$D]4]FCP1-3\&gt;EK9];;;=M.H&gt;3X3$I@RF''1GF)XP^KK+OY\S\!V$/7IQX&amp;DJ\T9NKWYD,U-/H\$M5.71Z5)&gt;_";@_V,1L ''IPMKQ+"Z?MN]2]&gt;0''X[A:8+I&amp;FILYZG^B&gt;6!-H@@@7LWEOK/%BZ:;"J:DJ@_44_;2&gt;:?3A99^''''GV"(V;%8= HHMT$G):RP;R^A)G"T.N:(:+"W1 HHE CW)B,CJ;8''+4(5N (C6PR4-T_LNIE:8MCQAI%;0(&amp;(799"\N%J#PR:?&amp;=A''!!HB]SX]CB-DR5\5#&gt;".K)7&lt;CHBT^ZDA(T%J^2^^U%ZOB09CR;2]7T:XYFS \XTY7@@@B+%KE\5E8#O 6L2R.62#/?/,_H_MQ.40S7::)]M''&amp;-"AEGP4MJ!+RX+&amp; UMRI"W2P"W1&lt;2&gt;W%DFBTA?8=CY8(T?]I)LT;P*VP29CKQ,/+,+K+DKJ&lt;JKI .U[7G(37OK1:@*]._&amp;NU$)IR^5JGV]_!ID19!NXQ0RY^2^08/W\XT/'',@T"=ZO/28$G/OSO,3F#:3&gt;Q!''A @@F45F^]QTVB''/4HP$O !OC9*)C ''W*S_)(#4B!TXC&amp;J''PII4,#O?Z\[RIUSW58%&lt;L8;J2!CJ9YY3OT&amp;ORUY^''''NWU*MSD1B.% 54D!A8OQ@PDAB0,2"2#3/+^K&amp; 6&gt;,SX/S#"/O59/47H-J5?U''TZ\6!CGX??2*''DWJ&gt;)/UPGIEHT!35&gt;^;,L:W&gt;?.K2*_''L^_T2ZA%('' @@ZIMH]:\ F:9 ]@6C#EX&gt;O _+GO.3)(2#/K3_UVKE1W%N_\NGAL''.$D.R_J.[_D-KR8S%+"KV%'' =DK"VM!@9W6A^''*S\=NV*%+K+,"+%S6B%P*V2=&gt;,;.X=IL1BLOQMQP?NJ![?6+_LC-YGL=R@/Q;W!S*.\(^U^=@H''S3O=ZD!7&gt;W]2\&amp;E_9^,=8+JPE[6=M&lt;397V#9@@@:B-1(#W(G=3Z.TD&lt;IQHHUU_ CUTHSXW=Q''&amp;D9!\T=^&amp;0+.&lt;A&gt;'']O?$''3!_L,RE4]KQ&lt;(M9[! XAC+U%ZHOVA:)S5^/@;4N^UFDGQ %#4P9TJ%&amp;%ZO,"#/;&gt;K"&amp;+K+#;2AS=Y:M)X09KVY9W[%@9H.^04RR@?%.@:9XI;4/&gt;2B)/&amp;=2A0:YC!4DIC&gt;,.?82A1RM0D!ZL @@FF^ZM2LOW P^HLQ=UN;&gt;0\(9:N&amp;T8&gt;#1W&lt; TS3E R_6$%''=-\B5_''9=&lt;Q]GQ&lt;)&lt;R72IE1AC5/OV9VB9OZVZN5ZV%LKY0%8G#KZV,+@P,)[%+$K/U.,=U.&gt;Z?.&gt;%$O &lt;''):^!P^Q''WZ=^YY0(^T?*8%=!,R''Q#LP%%9 @GPYN''C,XT 7''PV?3A!&amp;,KJZ,''R/&gt;UA185:EXP@@GIP QY@/B)Z X,!2TQ G#3%&amp;8*[&amp;" 9U,6+_?+29]A*53UIR&lt;^;^4\)+KL.DQ71KQ71 9^TPXNW%9W?+R__7XNVP^''N''DDEB.@&amp;V:4&amp;Z,J8P,+IVXNV2,/;"8*V2Q#13%;O_)A%[_V&amp;C=OG)XEQN8O65KJ*.OS4;N1BL$13F&lt;/-.1"&amp;I2,2=RN06#37/]J&lt;\!-M7O0\\@@BBF;XJ=)Q1@ J)L.^E\5FLHKMBA;0MK3;7TY:^NP+\.0JV=% :H#MTVMW [ESWQ73*++\M9TZV#K@P.[C&gt;&amp;+K%P;B2OZL&lt;"JV0)UXP:4J%,*VZ,)*Z&amp;)^28+J2DDY 630@*P@BQ]AP -''._YU D%)G+75W[^W+,#69.^/,%)B\&gt;U&lt;ZUF%RL$R$=.II8(M" ''KH;&amp;''J?(L@@N\["!,I@PF-XZ]V?)AFC#%LQ[1HR16TTUDJ\5V&lt;NYT?!3? NL$ZWD9&gt;?\CL1-ETQ&lt;Y4 &gt;+F1&amp;A OQABRT%B:;!4L37Y6&lt;V Y#O[OCZ0X@7%%)++.K&amp;Z;4J2OQB*&lt;&gt;UQEX&gt;9F6:M@,KA[6,3%&amp;@,&lt;RG4-ZG%*)XPOVC%:&gt;.H&lt;"_4H-8-5=Q[7N22^N&gt;%O''K&amp;-''_9&amp;Q(GRP@@D%BJF:^U%VFB9&gt;HU%FK_XZ^WON2R/UJ=&gt;0^4%09^MLC]Q+#R&lt;U-=JPN?"Q3Q[L:&gt;J%!T&amp;BQ?--YCL&gt;HP]JW+XFB8BP4J)8VH^KO/N=%4&amp;)*2;;HPN34=,.,PL&gt;V*9[$P,G"P;;MUT8V6"*83XAK@15F/NYXPDC5VJEX=^DJC-;#D+L#N288E/_''B%GP(!SCV7N0*5L(6@@@UQ()1Y@GOL''JC^%N&amp;?%WE)/.CF)&amp;=G3W]T.0J95@#+#MF+"#_&lt;-H/?:.5-[UT=T@*2"L "$2JDKIBP.,=^KJW9QC8%E&gt; "H#;OFI?&gt;N?&gt;;&gt;&gt;2%)*Z;;HP9P7%S69?9[''7A;O7''%:T%NO$-:+%\KWI.Z\KS=X=%''= U.=B,!A H]7N[MP-J%P\99^2&amp;-,A"!/,RL(R^/H@@JTCI^PCI/''9-I2$(4#&gt;?O2OX[AU75OS$05)GM''&amp;F&lt;L#CR+?O18G77QJ"U3=FSD$M:3%[&gt;S3".W+"KH3Y)*H,..V(GQB&amp;+HPXFK[X#''/;;J2)TJ2$C[+DBKV9T&gt;8"-[BXEF#=8D@&gt;;3EXU&lt; -&amp;BL.58I\Q@=DK@=%(0=OS4P+!(C+?FI5D4-;]NY[ZR%J@([ )G,+1JG&lt; @@$I@,.#)2@Z#\&gt;:L()%O&lt;&amp; :&amp;,7H"L9CT;W$1=_L#006?F!V4X&gt;_&lt;!WB/F^C &gt;*2U(/&gt;I2&amp;27&lt;8B2"G"LJJU* Y_2^A@=%$MLNS0=&amp;$K+-;JZ:05C]NUCB*_%HNRUN#*8&amp;V#''D:P&lt;632WN;YOCTU.-2O+,+B0OTX(U&amp;*2DH:@4&gt;8*"1\WR4_KKR5P)VZ9*Q/63BXL[:I:@@B%,"(ZE3(2\!3;A33EOM?&lt;71M_\M=*D")RD\ KB0.IVF+''=;S;U[LN)2C^&lt;_A[_,CU8B,+@2=C9S54%5NOOGQQ64Z.XNU?_9AI(8T=DC62,!C%5(*8+$14G&amp;A-+RU2I/%7;FF6%VYI*Z]0[RQ2%_WP,+JV%+II$O!8OTZNXFCB\I WVW3?E&lt;-&lt;D(,6!RID&lt;0$&amp;\,RXF.H@@DJ0D''ZN@UV#&gt;_8G)EV&amp;)/23Y#&amp;V8+PG;@URL)&lt;KIURKOEV3UZZ#=)''R9TN-D.EW.(YR6F7%P&gt;V7&gt;C6P.F9@=+J8L7)44"?%]GL&lt;P#XIOW!I&gt;AU&amp;W#0UT:R^NVYH\S@K&gt;T!7X*O"Z,TJ0]F,JS 8UD&amp;%]LM4,!@# HA0H6&gt; %K.V.&lt;\W"R9G6$]/C0]$M;&lt;AH(GD:(SK^ @@$ERC!H-.%:O_8%V#/M/&amp;P/1SC(#&gt;E[,&gt;+2Y2%UO_-O.-/O23UZN?8/2L:!^IVSEL&gt;;S_4+!^9YA EQ;L/)%"4+\=/*-N&amp;K"AW(W8%:V3O#ZL^JNO&gt;&lt;W\D1O_UY8 -$2J#Z&gt;T.&gt;HPN^=DXVE2GMOSPHOC07RCINW3''8Q4)[\%&lt;( *E72+_G0*D 6T%_T7]&gt;S''9''@CD!JC@@A8,%Q60?LA98V&lt;US(0 &amp;K"PV(XM-I!\ E.L"P!-9?QA2^^,=&lt;&gt;?H ''67JFEM4_X9W6I8#_#@A ^#'';''V#LZD*QJ%QNO0UG=ON.^OP@X@8^O-,N&gt;8 &lt;XU9Q@OR)LD?''GA-!=D&lt;3PVX&lt;)E9UXY#TG5RG(&amp;?B(QE/*+_F#$IB$I]4/1(,"^DWE1+NUJ3$\YU-F9V)W:;KE&lt;X@@K&gt;2^D_*!GA!9-,N)7L''@-&gt;3?M=!W;3;@_NK=\EB=8:P-O;_T58@986-4J!LP17.A=&gt;&gt;GV*EK2=:$.1(GM1J+16G''V&amp;UL;YC;QI!90";&gt;8"$9?-SRH&gt;#1W&lt;/N\W''N#)_)7JUHNT"%&gt;&lt;(OI\%\TS$Q-JFA\4F!$_R]G@3$KC8&amp;+J%OT]YE&lt;-&lt;"U''N0SCR.6:''*V5.\QK*: @@J(#F!HAOXU&gt;$7=3''7&gt;\JC""3,3;2M5,_\LR(5!V$H.P;?EUUZ+R\O%GR)E&lt;RUVR -JN$,;"J-#&lt;Y&gt;\#''2A$2 2/ 8E4?SKF+7TR+U?/2#6C7*==!5,UU;=?_?+0JSF6&gt;I3(GZ#3[,9+[@!W2/J523.CL=YV_!DI8#F[+U+K&lt;U%Y&amp;E&lt;(WQ4_T5I JN[,9)8LZA&amp;MG"T_*@@@%EPOCF9V#''#M:7?3_T2#_7;O&lt;Z.0YG[-2 .2475O%%-?&lt;JK23OFF&lt;TQ4&gt;X]L'')B!UU].)9S''%#U#KH_U(?V#'')3GM8JELKT-02$75B''L;9V)A73;Y@KNWTU:U*Z]2&gt;_&amp;UTH6#O*X&gt;)N2+''JX?3$ AN#*,N*&lt;^8("#![C+R_ P#4&amp;P"Q(RE&lt;-&lt;!C%"=&amp;J8E\9GC?TV:. @@K8RU-C3*-A!C(WE9%W&gt;?+OEU]&gt;H42)DNA&lt;A;@K[UUD/U_0N (&lt;@&gt;1 -M=2.L=F#,;0S"SV?PC#"$=OP7NKLGK5!SG$*"8(?[MF:_"H"?::.]KN&amp;Y)_%=7L@\5V&lt;@RD#2C)X47J&gt;''&amp;F&lt;OLT7ZK7H@XI7]3!R^.JH#UE3OVC% &gt;-V,%RI_L,*Q&gt;T 5 JVWYAT"Z2C 8PD00@@UMN20;_&amp;@ D:QN]V,;3/-I_[T0]$^3!=(Y==9M.4T:R4PWL %#O2RO&gt;=T"''''+U&gt;&lt;)%IK=-N]RK=XUBU7''J&lt;K=\Q-7"Q.F9U\AWY&gt;"7CWVC&gt;V,9(N1S&amp;O?M?&gt;%?RUF4S:+93F)&amp;(&gt;UUT&lt;$$(\\)VU/)FBN%=I"J@PNYMB*+ &lt;#1A8"X%GE2)TD 5 C(F]R&lt;,Z^!5F!@&lt;#@@A64)AGD):^\*MU7:NU6]?&gt;72\"RC&lt;5&gt;\3MU3KD7SK&amp;;NK&lt;/NV8)&gt;2IO3\_I&amp;L).:NQGX]DH''H?ZPU(FV#L3N88NL )VIG.0M^556&amp;(I$657)A3JLU?W%TSO%U^=F7VF9WF-MG_9=0&lt;I?JS3C*^&amp;TA\N/S4-&amp;YV/FI477RVM#:8XJU&lt;2,-TF''1T0/P@+XOZK%(ZBK^K%V8@@J#XORPLH._''X^YSXP''_)$DUXV;@&lt;N@+8L1#ANCMJS+&gt;-EWE[P]$@5!9O1+205IN$?IXG3RAL.9H;R%H]?%H?Y5(NL3L),\HR79&gt;7X-N''\!_%LI!%OS4XGN4IYZVH 2BJ_UAU]&lt;&lt;\&amp;["]@4\3L2Q&amp;P5E0[/''6\T&lt;)ETGOC64C''&lt;=,KI4D''PW_AK%5''XZZX]KQ8:_:)BAF0@@7XX"B_V-X+3_75T0TR]8U].-IL&lt;$7U]WNA3.''3C\,DIS''*&amp;)\&lt;]R^2VPUB0\R*/?/#!H2A4+T$+LM\&lt;A&gt;_5JZB[5M6"=JV3 0KWNS*-\J&lt;XJ&lt;3BV XD9#M''Y%!@MD ?)(X6M(7)J$O!@97IHRHLIL05:/&gt;H66_R.T2 &gt;P!T/.G):&gt;C4PUEQ&lt; &gt;]FV1)&lt;F*-&lt;_H:.G1S:@@A#I)T%UCID@#:E &amp;GO+G ;+G@$QO+.12%=NO$K7^:ER[24US&amp;$A4"Y@RRY3)%J8$CL?Z[\G&gt;''LZC_5)&lt;7=R.1!CH/5I/&amp;/&lt;\7 -[V]??6]0MA_N)9V\&gt;- HZCBOXO*J$_]G1=24/K,#IJ^''/&amp;=9@L^FM06RP^&amp;JF)*/EXB_37"P#6VOSLR$CO%%M$%5G0Z58$-''1K^C]@@@FIT+S&lt;5L.SA;C+$THA01"NN=T-#U&lt;0YU2/:+OL_,WJEN3YS,:X7T#\8^_KL;$)$N#K\RB\LL!%(3D#_$?5(&gt;PG,Z@DK9A4WDQD8!8SQ9&amp;OXS@D:XS,&gt;,!A4, &amp;VCWBD6,%XJ^^P''A9HJ6Q47IK47V!2*VK&amp;X^^O(8&gt;#&gt;=.A;;JV9^Y3&gt;C58]K#B.DYK2=]Y#(:N*56G90@@OAKI''L QO69HLE@5\LZD F?)FR''.=\)#L!&gt;1"Q)%AR''Y6UMBOBXA92Y;PL#:/XJ''"/NU;I9DRG_]ZA''_)!$Y3L!!9O&amp;BZ^8)\J!/PK=O-$33I)9"JO3/)_9B,.,3OY&lt;$@3&gt;#/K&gt;?8$IR4-JQ?8E!]7]H]6FE@&amp;DJQ'' G)KNWXNVVP)]Q:8V#!]&amp;8CX9&lt;"X%&lt;E25&lt;5N42@@@SX(&lt;1I&amp;9JH-I2*! 5CH-$4W[L3W.=GI&lt;#&gt;*.IVU)ZV''''''&gt;?/7GL+07W[L7SH2 *^63L1(),3;3:+9/ZY(FR&amp;@&lt;0F\T0GD;!&gt;QK$:+?7ZJSITC Y[/;&gt;?&gt;*;JZ&amp;*VO!M+8$DRL/G+"/3_"''G4X]7]7M_-E!_2&amp;FC["$1 &gt;M.U?-$JHC-YCQ#2E)&gt;(W5=^I_H:N]!H37"D@@G+\;@4&amp;):X5*D IUIAF-A8''(S+O^VOOB0W _B(*V!ZN6!8^X]Y2_R&amp;M/\!!=IT["$2E;$!2\ EL&gt;T"BM?7LX?WLFV :3&lt; YGB/@BH$Z;^75HFD=N4%8&amp;.?/,#6%8#6N1''BLEX&lt;M#TAHNF"?T?-7I7K"^!J#T0JEO(#[I5MS60*6&gt;4K+RX03=0KBKU&amp;+&amp;72IR4.D[050 0@@"@__)*L3IS 5/ L?ZP_;79L&lt;1^M#QI=241Y&lt;#,MY,Q/Y^O.&lt; [ S6XECLE8@NZ8B_9:^''&amp;F(*G^SZF#=?\1(3O'']ZK5($&lt;1R7[FRW\B]$.R6%FC+,)B2)QC%DJV%CX@L-8,?8#SR$HOQYD!S\%=!7KMS)JUS!^Y",IU!78"E_4NHA;!4T:9F9V@WR71&lt;_G1&lt;V,/^@9&amp;H@@@SD0]&amp;I30K4)M\$IE@&lt;+=VUQMQ&gt;_%-+8Q0. &gt;_Q9,V B@N7IX&lt;K3,NW''LS1P9^63]"1U?EZG^^ZI:''GF Y3L3L@X@YGOW5]6 #[?=@2O4ZD_L0=H2%$KJ2DAB2,*V2 K^C=#V&gt;R%2Q3K;QPD#GLJ$:D2"Z(5USY JW[VG"&lt;"_[O+RW U:$]H3$B_#K#!_K_D-&lt;"W3F(DX@@HTN7FY*TYBI8)2QP@]S)I^&lt;ZP7GGN7!"PZ!]&amp;%MVY,V%P9QW :AD6+_"EFTC#$BZF!79+;=ZN2B1&amp;:&amp;?\1H33*U%W\:&lt;6FQYB@"$(_X_+U9LM:TU$&amp;V, 7C,C7C,.&gt;VS0I /4#LGG\X]3?;\*&amp;TXW?V_9PB)JM!+U&lt;JG*-B;AL&lt;OHF8"+! 6=.E]H;KJ")&lt;R4]&lt;1.")P0@@+%RM%=KF/;&gt;?J)''''(M.G!LD?T%QN5\AZ,W[^WQ)%!&amp;T#"&amp;A^XPB$6:R$'',TN9.\''/V"&amp;FV!(ZM=H1&lt;A(F\19/V#_?V!R*GK99DMD3^%6+&lt;[#(!K/,C62XKK/U!HR,*:DH#K2)/TA&gt;Q#"?*T&amp;+7^#\-X5;J6$!VDM+,DX8$IH\&gt;ULW/!3=@C[687I"X%&lt;"T]GD)?B!E?B@@BMK+U)573I2"+?-P[REQ]%W=/''_!]5!),FDQQY&amp;&lt;ML&lt;?ML-&amp;8A[W&lt;/-O[6.U?Y&lt;"^B)$#9X*[,]4!(?\0\/V#=''HHA+7IP]&amp;%)D"H)[3Q1IU&lt;L^A:0,+HM,+JP:04C\@PN4._\''/Z??.&gt;ZMJP''$N=I%FCR\ H0[_I&amp;\GP6"EMSOT068+MQX\TJ3''2I_L(WQ&lt;-09U&gt;A :$@@FJ"5W9%1 L0L,[ A!(-_HLU(=0QBTP)+5]Z8U+13R*[_H9?;$4T-.Y![ I &lt;1L64)1(]6G;ZD#&amp;[WGG3CJ(ZF"&amp;3G\29A,E3%#K6K\ 4#WH4P62P)AB,N,PCS62D''@KC@2.!PJ E[-88*V%PZVZU,U24W)AD1,0Z)9_LIR )T &gt;&gt;8#89_ML-,IT"W3K$D\RE890-2H._@@@3"X_EM"BD/+DUA*I8V,$L?X8A-6/G6MO,Y,T(^C@R9/ E)#TBN''$X9 RX/P#CS3,RL^''*Q''=RFE!9:*=@]XX?]&lt;YFC\:\]Q6"1^I?&lt;,\G!671+J2OTXP:7PR:9A4@\DMG\''E*KJ%,!@=:9)A?*UVO%M$M(&gt;WT;1S1][2JM=U/ETGXNW+&gt;828$H R &lt;.P_G1G_AIF1($.@@@HBA?U&amp;&lt;=&lt;5HST*8&amp;[_HQYF''A-[&amp;OU&lt;FWFH4?OV^G0EHZ1V_DF LSIUAD%C3FMWO57  G9''ZYHLHK_)*?3F=?=ZD)29J1T]+\[F%1RHRTAM]B&gt;D!KFCW#?WMNPD"(8M\''F 040/&lt;Z@D+J%]IBP,$JZ,3;/+!N&lt;61MSD5UVJ@]UO+2W)QW;68U8%/OVC]JGF(9GQ(LMQ=T@@OC05^FF9]RI&amp;5&amp;I&amp;9/TVX''T''3HL28%&lt;6$SFF"9[3X[OSD&lt;#3VVTG\$]T!57;D 8;C?L+4!J),T[\)O,B1-2$:X7ZG7. =F&amp;9M9NVMCPBU&lt;?.5 ?G)$^/7,^/)HEHS(44^/&gt;P( &gt;U+C+)^=B;;J0&amp;+L(U&amp;AQ&amp;''M!Y$I*,?_Y''H"&lt;=9\N5&amp;5^ UEF*)A:SQKK1"NIV&lt;X3&amp;@@@-?UZ&gt;"R*5L+C_G0FA,.[VQZ_LU''WV''15&gt;%-[Z7$$S2NF3;ZD"8M:/;8\T-8?$S]2@0LC7D!2LA,2ZL&gt;''*_/=/\&gt;UJ&lt;3L3D :-U25_-WHM_K2R#]71;:QRH4A.=JB@_&amp;-\GPPQ)AQOT%I,+J2,+K&lt;,9*0N&gt;-8C]K")ZZ3O^[2"H2T*P*ENP4I67?V^#6;+)S%_H%&lt;KU)G@@B,BF\$5Y&gt;XU1Y[Y[]PS;_ZE/V(,X&amp;[&lt;NDH[D-Y&lt;L5+V!&lt;14W@:2MJMN,GJ''Z,X/RXAMYF=N&amp;FUB5KL@XHA@_''9*@J]''\3L=[&lt;_ZW4)C6S5]&gt;05@11N*1#,N*7;$6 &amp;MI&amp;D!JBE$:AV"KK%DDK";5[7:7MQ::VPRS6.![2#7I:&lt;D3ZHP(&gt; M ]Q[Z@&lt; _#[ YSM_J#5V?(@@L:I./LF,_MW8QP_#.6DIJ3 G;)5A)=5U&gt;B5V72[U4^_ GX-G7E27FQ$&gt;[7=''IDXJV9O?5K9\#)20G,Y$7I-W&amp;8A@S]H&gt;VE#1(S''LXJB\&amp;G\MW]73O6\$V \CB&lt;:\/$?$10CPJ9JQTYJG*:7P.?/&amp;+B2#&gt;?/8.K/,!@MT;O;X )V%;JHO]&amp;V(H2T[&lt;&lt;U-@8/F1:KW2W]3P@@K-T.&lt;B9'']]_08D\IUI#!_%+0&lt;AX#-+[OI.B[&amp;;D$*(A%V!ZK8615C&gt;1(3O7LJ\#91&lt;ZIUD"?/+79T!%H%V4J:% &amp;JQ.JF0E1@^PK /%29IW5(4)(?V#HGL!$YA6?;ID]&gt;]2\C^3ROY1XDA@P?.&gt;Z:3-V;9+&gt;P[HP4&amp;*$&gt;?,B.OJ?.PB8++"6%F73B98&lt;*Z\I$I''1Q2A9@@A%8]WU_) .8WZN HPZ:([]]P&lt;D M[FJ1QPZ9/0JY&lt;V8U&amp;105@&amp;8H[\GL2\VCR/I(4Z;%""!H4517K5\(I2LA./ZV''^DRSG\*6(F;YL%SJ(\]2=FY1@MJ=27G\XRF''S$3T]^D(''Q!".VOJ2XFB2,+J9XKJ0?.K")[H3DM,''''''=:(FZ^W*\ C *JSK!4\BOOOV@MV:,.E.(@@B;!V.E]5:.I7U@+Z&lt;._S8PL9@''XE$-+$%%Z&amp;5%Y8A&gt;FJ1S]8KUZA,D0MK8^O&lt;1(;EQK571K !;9 ,=! &amp;FJ3139T(''I45J/XYVM&gt;Q/3%POI\V45/;:=3L0X;D)4$95\$6 3$L2P$SO??8&amp;PDC62U))V,KK",.,P%*8 #AOEXG"V*VDN''!/Y Z**^'' C%&amp;=4 8^NY^D.8P@@8HZN8^G!8U4+C&lt;4,3?OX:G0W"?W0#,L%J6,Y&amp;5%W08C1U6^NH=)WYAVM;S_,:,ZP4%PZE9!6N&amp;8[-(+$96F)97H,V=Q)Z]7:&gt;WK&amp;)7JB0TP"-:IXVG_F1)CR$17I/$ 7A9:)&amp;^J]^)N]8#O%DAC%W+K/?+J2DNV*5''PGC%;2)QC3B,WE1]&amp;8*+^7DCN0O[BCWU$W529Z@@AWYY-Z(V_U8ODT&lt;X%+,T^1SR71]''CXH,-KV''61''88#S7W(-9TTV1?AI0^ !FU5:#E)V&lt;8-J)?C["H9GO'',]?''\S8RD5H''N2CHK"*&amp;Q&gt;:407^[*]XRD]X:,B0N\GHL30 HX+_J+*9NS-YBP%!@=DFB9DAC+DAC%*-YO9\U_*Z94B+&amp;#OAV."FZ9=9X=OR"YOV''WW]V[&amp;70@@AR1D+EWH&gt;CZV "GG&lt;5YA!YKR6,HU&gt;+Q8X%[&lt;@Z_C1I&lt;V]PT4RM0#P$!JFKFYVU%:/D-E45K:%SSLDO''JR^B9!,"Q#TZ"T-''''2D7ZF A9CHY -)502R10:1-)2W=//[''''&amp; ^*&gt;K"''O4''$GQ ,&amp;C%:5Y*,&amp;B79Z+%5+_VQ@L@JDXPD0:9(:B2N;&amp;2,C584/ER?2; YZE,X0@@8\-N55_OV"MW_BN(EOC Z;D+&amp;9.[&amp;6_!"_G0&amp;?BI&amp;0XFU6_''80@U6R^O=HB@'';DT7,-&lt;R&lt;-G"X%0B)9!*Z$J%G](&amp;^5''VT.I;*=#ZO%($4 \LV?$]PY%9X''HW;4YMA"SWE2S''D(\.8MB?1ATX@6.:1A 9QB*9XB*C^SF2-M8 _[EXUE8C^VZJKB2%*( +''),U6."^^7]@@B!H8%&lt;[KFN*!]+CHZI&amp;=4#''&gt;C:!@R1U6-Y;VV[E%%G-5A/#&amp;FEN;2#!YW4L8Q5&amp;8]#E+G?_L-&lt;(''[&amp;''"A!3N1"ZFFX"X]W"X''WK@-(GC(O;V $)2''?E Y%Z_59C#?=*&gt;K=WIG\ZC#FPJ-N??= S=YO H@M,*)O-9@] 3&gt;&gt;^#NC&gt;PI"0)%B,$%FXN,I9Y%=+ TT^Q&gt;=DXX@@N#K_L.!YT?FS++%&lt;D.1H0-ZV75%@Z2*Q5%#)5''1Z71&lt;_JIE5,V$/C3EG$I*]M:1E1RX"]WKQ4^_J_''G3;&lt;Y74!"_0-Y!:G-_N7*9C+5C&lt;^QYLFKF(^N''88K=W52FY2S''O7=FBDY-YN+S%0Y$+&gt;@&lt;=[V9[]B%(N?/=N&gt;3L*CL:\ .31"+$K+:04P,/"?;N9WO\*R_\"(C0@@'))</body></methods><methods><class-id>BugTraffic.BugTraffic class</class-id> <category>interface specs</category><body package="BugTraffic">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'BugTraffic' 			#min: #(#{Core.Point} 921 597 ) 			#max: #(#{Core.Point} 921 597 ) 			#bounds: #(#{Graphics.Rectangle} 66 77 987 674 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.Rectangle} 10 54 910 554 ) 					#name: #GameViewHolder 					#component: #gameView ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 811 14 894 37 ) 					#name: #InputField1 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 5119 5119 ) ) 					#model: #gameScore 					#tabable: false 					#alignment: #right 					#isReadOnly: true 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 564 14 610 37 ) 					#name: #InputField2 					#colors: 					#(#{UI.LookPreferences} 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 5119 5119 ) ) 					#model: #bugsToNextLevel 					#tabable: false 					#alignment: #right 					#isReadOnly: true 					#type: #number ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 734 14 764 37 ) 					#name: #InputField3 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #black ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 5119 5119 ) ) 					#model: #gameLevel 					#tabable: false 					#alignment: #right 					#isReadOnly: true 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 700 14 ) 					#name: #Label1 					#label: 'Level' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 773 14 ) 					#name: #Label2 					#label: 'Score' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 471 14 ) 					#name: #Label3 					#label: 'Bugs to next level' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 21 14 102 37 ) 					#name: #NewGameButton 					#model: #newGameButton 					#tabable: false 					#label: 'New Game' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 120 14 209 38 ) 					#name: #PauseButton 					#model: #pauseButton 					#tabable: false 					#label: 'Pause/Resume' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 227 14 308 37 ) 					#name: #QuitButton 					#model: #quitButton 					#tabable: false 					#label: 'Quit' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 431 14 461 37 ) 					#name: #InputField4 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #black ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 2048 8191 2048 ) ) 					#model: #longestLine 					#tabable: false 					#alignment: #right 					#isReadOnly: true 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 364 14 ) 					#name: #Label4 					#label: 'Longest line' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 810 564 891 587 ) 					#name: #AboutButton 					#model: #aboutButton 					#tabable: false 					#label: 'About' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 666 14 690 37 ) 					#name: #InputField5 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #black ) 						#setBackgroundColor: #(#{Graphics.ColorValue} 8191 5119 5119 ) ) 					#model: #lives 					#tabable: false 					#alignment: #right 					#isReadOnly: true 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 618 14 ) 					#name: #Label5 					#label: 'Tries left' ) ) ) )</body></methods><methods><class-id>BugTraffic.InsectBuilder class</class-id> <category>resources</category><body package="BugTraffic">antBody	"UIMaskEditor new openOnClass: self andSelector: #antBody"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 10@10 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 3) at: 1 put: Graphics.ColorValue black; at: 2 put: Graphics.ColorValue red; at: 3 put: (Graphics.ColorValue scaledRed: 4112 scaledGreen: 2056 scaledBlue: 2056); yourself)) usingBits: #[168 2 160 0 160 80 160 0 129 20 32 0 133 81 32 0 129 85 32 0 133 21 32 0 133 81 32 0 129 20 32 0 160 80 160 0 168 2 160 0])</body><body package="BugTraffic">antHead	"UIMaskEditor new openOnClass: self andSelector: #antHead"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 10@10 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 3) at: 1 put: Graphics.ColorValue black; at: 2 put: Graphics.ColorValue red; at: 3 put: (Graphics.ColorValue scaledRed: 4112 scaledGreen: 2056 scaledBlue: 2056); yourself)) usingBits: #[160 160 160 0 162 168 160 0 160 160 160 0 168 2 160 0 128 80 32 0 133 5 32 0 129 84 32 0 160 80 160 0 168 82 160 0 168 2 160 0])</body><body package="BugTraffic">caterpillarBody	"UIMaskEditor new openOnClass: self andSelector: #caterpillarBody"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 10@10 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 4) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4111 scaledBlue: 0); at: 3 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 2055 scaledBlue: 2055); at: 4 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 8191 scaledBlue: 4111); yourself)) usingBits: #[160 0 160 0 131 92 32 0 13 87 0 0 53 85 192 0 53 85 192 0 53 85 192 0 53 85 192 0 13 87 0 0 131 92 32 0 160 0 160 0])</body><body package="BugTraffic">caterpillarHead	"UIMaskEditor new openOnClass: self andSelector: #caterpillarHead"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 10@10 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 4) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4111 scaledBlue: 0); at: 3 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 2055 scaledBlue: 2055); at: 4 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 8191 scaledBlue: 4111); yourself)) usingBits: #[168 2 160 0 160 80 160 0 129 84 32 0 133 85 32 0 4 81 0 0 52 81 192 0 53 85 192 0 53 85 192 0 13 87 0 0 131 92 32 0])</body><body package="BugTraffic">roachBody	"UIMaskEditor new openOnClass: self andSelector: #roachBody"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 10@10 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 3) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 2056 scaledBlue: 4112); at: 3 put: (Graphics.ColorValue scaledRed: 4112 scaledGreen: 2056 scaledBlue: 2056); yourself)) usingBits: #[1 84 0 0 21 85 64 0 21 85 64 0 21 85 64 0 5 85 0 0 133 85 32 0 129 84 32 0 161 84 160 0 160 80 160 0 168 2 160 0])</body><body package="BugTraffic">roachHead	"UIMaskEditor new openOnClass: self andSelector: #roachHead"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 10@10 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 3) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 2056 scaledBlue: 4112); at: 3 put: (Graphics.ColorValue scaledRed: 4112 scaledGreen: 2056 scaledBlue: 2056); yourself)) usingBits: #[42 170 128 0 10 170 0 0 130 168 32 0 160 0 160 0 168 2 160 0 160 80 160 0 129 84 32 0 133 85 32 0 5 5 0 0 20 81 64 0])</body><body package="BugTraffic">snailBody	"UIMaskEditor new openOnClass: self andSelector: #snailBody"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 10@10 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 3) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 2055 scaledBlue: 2055); at: 3 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: #[80 0 80 0 66 168 16 0 10 170 0 0 40 2 128 0 32 160 128 0 34 168 128 0 34 8 128 0 34 8 128 0 34 8 128 0 34 8 128 0])</body><body package="BugTraffic">snailHead	"UIMaskEditor new openOnClass: self andSelector: #snailHead"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 10@10 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 3) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6520 scaledGreen: 6520 scaledBlue: 4882); at: 3 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 2055 scaledBlue: 2055); yourself)) usingBits: #[170 170 160 0 168 2 160 0 160 80 160 0 129 84 32 0 133 85 32 0 132 81 32 0 132 81 32 0 133 85 32 0 129 84 32 0 161 84 160 0])</body><body package="BugTraffic">snailTail	"UIMaskEditor new openOnClass: self andSelector: #snailTail"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 10@10 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 3) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 2055 scaledBlue: 2055); at: 3 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: #[34 8 128 0 34 8 128 0 34 8 128 0 34 8 128 0 34 168 128 0 32 160 128 0 40 2 128 0 10 170 0 0 66 168 16 0 80 0 80 0])</body><body package="BugTraffic">wormBody	"UIMaskEditor new openOnClass: self andSelector: #wormBody"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 10@10 depth: 1 bitsPerPixel: 1 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 2) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 2055); yourself)) usingBits: #[127 128 0 0 127 128 0 0 127 128 0 0 127 128 0 0 127 128 0 0 127 128 0 0 127 128 0 0 127 128 0 0 127 128 0 0 127 128 0 0])</body><body package="BugTraffic">wormHead	"UIMaskEditor new openOnClass: self andSelector: #wormHead"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 10@10 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 3) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 2055); at: 3 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 2055 scaledBlue: 2055); yourself)) usingBits: #[168 162 160 0 160 0 160 0 129 84 32 0 133 85 32 0 4 81 0 0 20 81 64 0 16 80 64 0 21 85 64 0 21 85 64 0 21 85 64 0])</body><body package="BugTraffic">wormTail	"UIMaskEditor new openOnClass: self andSelector: #wormTail"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 10@10 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 3) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 2055); at: 3 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 2055 scaledBlue: 2055); yourself)) usingBits: #[21 85 64 0 21 85 64 0 21 85 64 0 21 85 64 0 21 85 64 0 21 85 64 0 5 85 0 0 129 84 32 0 160 0 160 0 170 170 160 0])</body></methods><initialize><class-id>BugTraffic.Game</class-id></initialize><initialize><class-id>BugTraffic.InsectBuilder</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>View</name><environment>UI</environment><super>Graphics.DependentPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class><class><name>Controller</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView useParentColors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category><attributes><package>Interface-Dialogs</package></attributes></class></st-source>