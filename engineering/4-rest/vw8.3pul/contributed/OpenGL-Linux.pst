<?xml version="1.0"?><st-source><!-- Name: OpenGL-LinuxNotice: Copyright (c) 2007-2008 Michael Lucas-SmithPermission is hereby granted, free of charge, to any personobtaining a copy of this software and associated documentationfiles (the "Software"), to deal in the Software withoutrestriction, including without limitation the rights to use,copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom theSoftware is furnished to do so, subject to the followingconditions:The above copyright notice and this permission notice shall beincluded in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIESOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE ANDNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHTHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OROTHER DEALINGS IN THE SOFTWARE.Comment: OpenGL - Cross Platform 3D Graphics. This package provides the interface to run OpenGL on Linux.DbIdentifier: bear73DbTrace: 460430DbUsername: ablakeyDbVersion: 3.0 17DevelopmentPrerequisites: #(#(#any 'DLLCC' '') #(#any 'OpenGL' ''))ExplicitPrerequisites: #()IgnoredPrerequisites: #()Namespace: Smalltalk.GLXPackageName: OpenGL-LinuxParcel: #('OpenGL-Linux')ParcelName: OpenGL-LinuxPrerequisiteParcels: #(#('DLLCC' '') #('OpenGL' ''))PrintStringCache: (3.0 17,ablakey)Version: 3.0 17Date: 9:59:49 AM April 10, 2015 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.1 (apr15.1) of April 10, 2015 on April 10, 2015 at 9:59:49 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>GLX</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			private OpenGL.*			</imports><category>OpenGL</category><attributes><package>OpenGL-Linux</package></attributes></name-space><class><name>RenderContextX11Window</name><environment>GLX</environment><super>OpenGL.RenderContext</super><private>false</private><indexed-type>none</indexed-type><inst-vars>xif drawableHandle context displayHandle </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL-Linux</package></attributes></class><comment><class-id>GLX.RenderContextX11Window</class-id><body>SurfaceX11Window is an X11R6 Window surface we can render OpenGL on to.Instance Variables:	context	&lt;Object&gt;	description of context	displayHandle	&lt;Object&gt;	description of displayHandle	windowHandle	&lt;Object&gt;	description of windowHandle</body></comment><class><name>GLXInterface</name><environment>GLX</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private GLX.GLXInterfaceDictionary.*			</imports><category>OpenGL-External Interfaces</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>OpenGL-Linux</package></attributes></class><comment><class-id>GLX.GLXInterface</class-id><body>GLXInterface implements the GLX interface and some of the X11 interface, enough to get OpenGL running on Linux. The interface does not work with Pixmaps when using software rendering with Mesa.</body></comment><shared-variable><name>GLXInterfaceDictionary</name><environment>GLX</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>OpenGL-Linux</package></attributes></shared-variable><methods><class-id>GLX.RenderContextX11Window</class-id> <category>private</category><body package="OpenGL-Linux">activateContext	xif glXMakeCurrent: displayHandle with: drawableHandle with: context</body><body package="OpenGL-Linux">deactivateContext	xif glXMakeCurrent: displayHandle with: nil with: nil</body></methods><methods><class-id>GLX.RenderContextX11Window</class-id> <category>initialize-release</category><body package="OpenGL-Linux">initialize: aView	xif := GLXInterface new.	super initialize: aView</body><body package="OpenGL-Linux">initializeContext	| drawableData visualInfo |	"Force the window to non-buffering mode so it doesn't conflict with OpenGL buffering"	view damageRepairPolicy: WindowDisplayPolicy new.		drawableData := view handle.	"The Visual can be found as the first pointer in the *visualInfo structure"	displayHandle := drawableData x11DisplayHandle.	visualInfo := drawableData x11lDrawableData.	drawableHandle := drawableData x11DrawableHandle.	view isWindow ifFalse: [drawableHandle := xif glXCreateGLXPixmap: displayHandle with: visualInfo with: drawableHandle].	context := xif glXCreateContext: displayHandle with: visualInfo with: nil with: 1</body><body package="OpenGL-Linux">initializeInterface	interface := OpenGLInterface new</body><body package="OpenGL-Linux">release	xif glXDestroyContext: displayHandle with: context.	view isWindow ifFalse: [xif glXDestroyGLXPixmap: displayHandle with: drawableHandle].	super release</body></methods><methods><class-id>GLX.RenderContextX11Window</class-id> <category>api</category><body package="OpenGL-Linux">flush	interface Flush.	xif glXSwapBuffers: displayHandle with: drawableHandle.	" Do this to force vsync for now, until we hookup dynamic linking and SwapIntervals properly "	xif glXWaitX</body><body package="OpenGL-Linux">resize</body></methods><methods><class-id>GLX.RenderContextX11Window</class-id> <category>accessing</category><body package="OpenGL-Linux">isVSyncEnabled	" For now, we're not using glxGetProcAddress so we're not dynamically linking any functions and therefore not dynamically linking in glXGetSwapIntervalEXT and glXSwapIntervalEXT "	^false</body><body package="OpenGL-Linux">isVSyncEnabled: aBoolean	" For now, we're not using glxGetProcAddress so we're not dynamically linking any functions and therefore not dynamically linking in glXGetSwapIntervalEXT and glXSwapIntervalEXT "</body></methods><methods><class-id>GLX.RenderContextX11Window class</class-id> <category>private</category><body package="OpenGL-Linux">platformName	^'X11'</body><body package="OpenGL-Linux">viewClass	^DisplaySurface</body></methods><methods><class-id>GLX.GLXInterface</class-id> <category>types</category><body package="OpenGL-Linux">Atom	&lt;C: typedef void * Atom&gt;</body><body package="OpenGL-Linux">Bool	&lt;C: typedef int Bool&gt;</body><body package="OpenGL-Linux">DWORD	&lt;C: typedef void * DWORD&gt;</body><body package="OpenGL-Linux">Display	&lt;C: typedef void * Display&gt;</body><body package="OpenGL-Linux">Drawable	&lt;C: typedef XID Drawable&gt;</body><body package="OpenGL-Linux">Font	&lt;C: typedef XID Font&gt;</body><body package="OpenGL-Linux">GLXContext	&lt;C: typedef void * GLXContext&gt;</body><body package="OpenGL-Linux">GLXDrawable	&lt;C: typedef Drawable GLXDrawable&gt;</body><body package="OpenGL-Linux">GLXPixmap	&lt;C: typedef GLXDrawable GLXPixmap&gt;</body><body package="OpenGL-Linux">PROC	&lt;C: typedef void * PROC&gt;</body><body package="OpenGL-Linux">Pixmap	&lt;C: typedef XID Pixmap&gt;</body><body package="OpenGL-Linux">Visual	&lt;C: typedef struct {			XExtData * ext_data;			VisualID visualid;			int class;			unsigned long red_mask, green_mask, blue_mask;			int bits_per_rgb, map_entries;		} Visual&gt;</body><body package="OpenGL-Linux">VisualID	&lt;C: typedef unsigned long VisualID&gt;</body><body package="OpenGL-Linux">XCharStruct	&lt;C: typedef struct {	short lbearing;	short rbearing;	short width;	short ascent;	short descent;	unsigned short attributes;} XCharStruct&gt;</body><body package="OpenGL-Linux">XExtData	&lt;C: typedef struct _XExtData XExtData&gt;</body><body package="OpenGL-Linux">XFontProp	&lt;C: typedef struct {		Atom name;		unsigned long card32;	} XFontProp&gt;</body><body package="OpenGL-Linux">XFontStruct	&lt;C: typedef struct {	XExtData *ext_data;	Font fid;	unsigned direction;	unsigned min_char_or_byte2;	unsigned max_char_or_byte2;	unsigned min_byte1;	unsigned max_byte2;	Bool all_chars_exist;	unsigned default_char;	int n_properties;	XFontProp *properties;	XCharStruct min_bounds;	XCharStruct max_bounds;	XCharStruct *per_char;	int ascent;	int descent;} XFontStruct&gt;</body><body package="OpenGL-Linux">XID	&lt;C: typedef void * XID&gt;</body><body package="OpenGL-Linux">XPointer	&lt;C: typedef void * XPointer&gt;</body><body package="OpenGL-Linux">XVisualInfo	&lt;C: typedef struct {			Visual * visual;			VisualID visualid;			int screen;			unsigned int depth;			int class;			unsigned long red_mask, green_mask, blue_mask;			int colormap_size, bits_per_rgb;		} XVisualInfo&gt;</body></methods><methods><class-id>GLX.GLXInterface</class-id> <category>structs</category><body package="OpenGL-Linux">_XExtData	&lt;C: struct _XExtData&gt;</body></methods><methods><class-id>OS.UnixSystemSupport</class-id> <category>procedures</category><body package="OpenGL-Linux">copyMemory: source to: destination length: length	self memcpy: destination with: source with: length</body></methods><methods><class-id>OS.UnixSystemSupport</class-id> <category>types</category><body package="OpenGL-Linux">size_t	&lt;C: typedef unsigned int size_t&gt;</body></methods><methods><class-id>GLX.GLXInterface class</class-id> <category>libraries</category><body package="OpenGL-Linux">unix_X11_so	&lt;library: #linux&gt;	&lt;library: #solaris&gt;	^'libX11.so'</body><body package="OpenGL-Linux">unix_Xext_so	&lt;library: #linux&gt;	&lt;library: #solaris&gt;	^'libXext.so'</body><body package="OpenGL-Linux">unix_libgl_so	&lt;library: #linux&gt;	&lt;library: #solaris&gt;	^'libGL.so.1'</body></methods><methods><class-id>Graphics.GraphicsHandle</class-id> <category>accessing</category><body package="OpenGL-Linux">x11DisplayHandle 	^ self unsignedLongAt: 9.</body><body package="OpenGL-Linux">x11DrawableHandle 	^ self key.</body><body package="OpenGL-Linux">x11lDrawableData	^ self unsignedLongAt: 13.</body></methods><methods><class-id>Graphics.DisplaySurface</class-id> <category>accessing</category><body package="OpenGL-Linux">handle	^handle</body></methods><methods><class-id>OpenGL.OpenGLInterface class</class-id> <category>libraries</category><body package="OpenGL-Linux">unix_libgl_so	&lt;library: #linux&gt;	&lt;library: #solaris&gt;	^'libGL.so.1'</body></methods><methods><class-id>Graphics.Graphics64BitHandle</class-id> <category>accessing</category><body package="OpenGL-Linux">x11DisplayHandle 	^ self unsignedLongLongAt: 17.</body><body package="OpenGL-Linux">x11lDrawableData	^ self unsignedLongLongAt: 25.</body></methods><methods><class-id>GLX.GLXInterface</class-id> <category>procedures</category><body package="OpenGL-Linux">XFree: aCPointer	&lt;C: int XFree(void *aCPointer)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">XLoadQueryFont: display with: name	&lt;C: XFontStruct* XLoadQueryFont(Display *display, char *name)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">XLockDisplay: display	&lt;C: void XLockDisplay(Display *display)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">XQueryFont: display with: fid	&lt;C: XFontStruct* XQueryFont(Display *display, XID fid)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">XUnloadFont: display with: font	&lt;C: void XUnloadFont(Display *display, Font font)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">XUnlockDisplay: display	&lt;C: void XUnlockDisplay(Display *display)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">glXChooseVisual: display with: screen with: attributes	&lt;C: XVisualInfo* glXChooseVisual(void* display, int screen, int* attributes)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">glXCreateContext: display with: visualInfo with: shareList with: direct	&lt;C: GLXContext glXCreateContext(void* display, XVisualInfo* visualInfo, GLXContext shareList, int direct)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">glXCreateGLXPixmap: dpy with: visual with: pixmap	&lt;C: GLXDrawable glXCreateGLXPixmap(Display* dpy, XVisualInfo* visual, Pixmap pixmap)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">glXDestroyContext: display with: renderingContext	&lt;C: void glXDestroyContext(void* display, GLXContext renderingContext)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">glXDestroyGLXPixmap: dpy with: pix	&lt;C: void glXDestroyGLXPixmap(Display* dpy, GLXDrawable pix)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">glXGetProcAddress: procName	&lt;C: PROC glXGetProcAddress(const char *procName)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">glXMakeCurrent: display with: drawable with: renderingContext	&lt;C: int glXMakeCurrent(void* display, GLXDrawable drawable, GLXContext renderingContext)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">glXSwapBuffers: dpy with: drawable	&lt;C: void glXSwapBuffers(Display* dpy, GLXDrawable drawable)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">glXUseXFont: font with: first with: count with: listBase	&lt;C: void glXUseXFont(Font font, DWORD first, DWORD count, DWORD listBase)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">glXWaitGL	&lt;C: void glXWaitGL(void)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="OpenGL-Linux">glXWaitX	&lt;C: void glXWaitX(void)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>OS.UnixSystemSupport</class-id> <category>procedures</category><body package="OpenGL-Linux">memcpy: dst with: src with: len	&lt;C: void *memcpy(void *dst, const void *src, size_t len)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>RenderContext</name><environment>OpenGL</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interface view vendor renderer version program textures texturesHistory extensions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL</package></attributes></class><class><name>DisplaySurface</name><environment>Graphics</environment><super>Graphics.GraphicsMedium</super><private>false</private><indexed-type>none</indexed-type><inst-vars>handle width height background deferredDisplayBlocks </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>ExternalInterface</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>includeFiles includeDirectories libraryFiles libraryDirectories virtual optimizationLevel </class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>External-Interface</category><attributes><package>External-Interface</package></attributes></class><class><name>GraphicsHandle</name><environment>Graphics</environment><super>Core.UninterpretedBytes</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>UnixSystemSupport</name><environment>OS</environment><super>OS.OSSystemSupport</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private OS.UnixSystemSupportDictionary.*			</imports><category>OS-Unix</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item type="sym">linkedIn</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>OS-Unix</package></attributes></class><class><name>Graphics64BitHandle</name><environment>Graphics</environment><super>Graphics.GraphicsHandle</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class></st-source>