<?xml version="1.0"?><st-source><!-- Name: IBLensTestsComment: The InterBase/Firebird Connect, originally written by Anthony Boris <anthonyvb@yandex.ru>.Internal tests.Copyright: The contents of this file are subject to the ParcPlace Public License Version 1.0 (the "License"); you may not use this file except incompliance with the License. You may obtain a copy of the License at http://www.parcplace.com/support/opensource/PPL-1.0.htmlSoftware distributed under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. Seethe License for the specific language governing rights and limitations under the License.The Original Code is the InterBase/Firebird Connect.The Initial Developer of the Original Code is Anthony Boris.Portions created by Anthony Boris are Copyright (C) 2001-2003. All Rights Reserved.Contributor(s): Anthony BorisDbIdentifier: VHSSTORE2DbTrace: 14644PackageName: IBLensTestsParcel: #('IBLensTests')ParcelName: IBLensTestsPrerequisiteParcels: #(#('Lens-Runtime' '') #('IBLens' '') #('IBEXDI' '') #('SUnit' '') #('Avb-Namespace' ''))PrintStringCache: (7.1.5,avb)Version: 7.2Date: 2:09:17 pm October 13, 2003 --><time-stamp>From VisualWorks®, Pre-Release 7.2 (oct03.1) of 06.10.2003г. on 13.10.2003г. at 14:09:17.000</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>IBLensTests</name><environment>Avb</environment><private>false</private><imports>			private Smalltalk.*			</imports><category>IBLensTests</category><attributes><package>IBLensTests</package></attributes></name-space><class><name>InterBaseLensTestManager</name><environment>Smalltalk</environment><super>Lens.LensDataManager</super><private>false</private><indexed-type>none</indexed-type><inst-vars>var </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-Applications-Tests</category><attributes><package>IBLensTests</package></attributes></class><class><name>Employee</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>salary hireDate phoneExt lastName empNo fullName firstName department job </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-Applications-Tests</category><attributes><package>IBLensTests</package></attributes></class><class><name>Job</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jobRequirement maxSalary minSalary jobGrade languageReq jobTitle jobCountry jobCode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-Applications-Tests</category><attributes><package>IBLensTests</package></attributes></class><class><name>InterBaseTest</name><environment>Avb.IBLensTests</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>IBLensTests</package></attributes></class><class><name>Detail</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id masterid quantity </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-Applications-Tests</category><attributes><package>IBLensTests</package></attributes></class><class><name>Tbl</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>varcharcol floatcol doublecol decimalcol decimal2col decimal3col integercol charcol datecol timecol timestampcol blobcol clobcol symbolcol </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-Applications-Tests</category><attributes><package>IBLensTests</package></attributes></class><class><name>Department</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>budget phoneNo location department deptNo headDepartment manager </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-Applications-Tests</category><attributes><package>IBLensTests</package></attributes></class><class><name>ConnectionTest</name><environment>Avb.IBLensTests</environment><super>Avb.IBLensTests.InterBaseTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>connection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>IBLensTests</package></attributes></class><class><name>SessionTest</name><environment>Avb.IBLensTests</environment><super>Avb.IBLensTests.ConnectionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>session </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>IBLensTests</package></attributes></class><class><name>LensTest</name><environment>Avb.IBLensTests</environment><super>Avb.IBLensTests.SessionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lensSession </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>IBLensTests</package></attributes></class><class><name>InterBaseLensTestModel</name><environment>Smalltalk</environment><super>Lens.LensMainApplication</super><private>false</private><indexed-type>none</indexed-type><inst-vars>var </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-Applications-Tests</category><attributes><package>IBLensTests</package></attributes></class><class><name>Master</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>id name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-Applications-Tests</category><attributes><package>IBLensTests</package></attributes></class><class><name>LensEmpTest</name><environment>Avb.IBLensTests</environment><super>Avb.IBLensTests.SessionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lensSession </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>IBLensTests</package></attributes></class><shared-variable><name>DataModel</name><environment>InterBaseLensTestModel</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBLensTests</package></attributes></shared-variable><methods><class-id>InterBaseLensTestManager</class-id> <category>accessing</category><body package="IBLensTests">var	^var</body><body package="IBLensTests">var: anObject	var := anObject</body></methods><methods><class-id>InterBaseLensTestManager class</class-id> <category>accessing</category><body package="IBLensTests">dataModelDesignator	^#(#{InterBaseLensTestModel} #dataModelSpec)</body><body package="IBLensTests">rowType	^rowType isNil		ifTrue: 			[rowType := #(#(#{Lens.LensContainerReference} #name: #tbl #referred: #Tbl))				collect: [:elt | UIDataReference decodeFromLiteralArray: elt]]		ifFalse:			[rowType]</body></methods><methods><class-id>Employee</class-id> <category>accessing</category><body package="IBLensTests">department	"Answer the receiver's department."	^department</body><body package="IBLensTests">department: newDepartment	"Set the receiver's department to newDepartment."	self update: 'department' to: newDepartment</body><body package="IBLensTests">empNo	"Answer the receiver's empNo."	^empNo</body><body package="IBLensTests">empNo: newEmpNo	"Set the receiver's empNo to newEmpNo."	self update: 'empNo' to: newEmpNo</body><body package="IBLensTests">firstName	"Answer the receiver's firstName."	^firstName</body><body package="IBLensTests">firstName: newFirstName	"Set the receiver's firstName to newFirstName."	self update: 'firstName' to: newFirstName</body><body package="IBLensTests">fullName	"Answer the receiver's fullName."	^fullName</body><body package="IBLensTests">fullName: newFullName	"Set the receiver's fullName to newFullName."	self update: 'fullName' to: newFullName</body><body package="IBLensTests">hireDate	"Answer the receiver's hireDate."	^hireDate</body><body package="IBLensTests">hireDate: newHireDate	"Set the receiver's hireDate to newHireDate."	self update: 'hireDate' to: newHireDate</body><body package="IBLensTests">job	"Answer the receiver's job."	^job</body><body package="IBLensTests">job: newJob	"Set the receiver's job to newJob."	self update: 'job' to: newJob</body><body package="IBLensTests">lastName	"Answer the receiver's lastName."	^lastName</body><body package="IBLensTests">lastName: newLastName	"Set the receiver's lastName to newLastName."	self update: 'lastName' to: newLastName</body><body package="IBLensTests">phoneExt	"Answer the receiver's phoneExt."	^phoneExt</body><body package="IBLensTests">phoneExt: newPhoneExt	"Set the receiver's phoneExt to newPhoneExt."	self update: 'phoneExt' to: newPhoneExt</body><body package="IBLensTests">salary	"Answer the receiver's salary."	^salary</body><body package="IBLensTests">salary: newSalary	"Set the receiver's salary to newSalary."	self update: 'salary' to: newSalary</body></methods><methods><class-id>Job</class-id> <category>accessing</category><body package="IBLensTests">jobCode	"Answer the receiver's jobCode."	^jobCode</body><body package="IBLensTests">jobCode: newJobCode	"Set the receiver's jobCode to newJobCode."	self update: 'jobCode' to: newJobCode</body><body package="IBLensTests">jobCountry	"Answer the receiver's jobCountry."	^jobCountry</body><body package="IBLensTests">jobCountry: newJobCountry	"Set the receiver's jobCountry to newJobCountry."	self update: 'jobCountry' to: newJobCountry</body><body package="IBLensTests">jobGrade	"Answer the receiver's jobGrade."	^jobGrade</body><body package="IBLensTests">jobGrade: newJobGrade	"Set the receiver's jobGrade to newJobGrade."	self update: 'jobGrade' to: newJobGrade</body><body package="IBLensTests">jobRequirement	"Answer the receiver's jobRequirement."	^jobRequirement</body><body package="IBLensTests">jobRequirement: newJobRequirement	"Set the receiver's jobRequirement to newJobRequirement."	self update: 'jobRequirement' to: newJobRequirement</body><body package="IBLensTests">jobTitle	"Answer the receiver's jobTitle."	^jobTitle</body><body package="IBLensTests">jobTitle: newJobTitle	"Set the receiver's jobTitle to newJobTitle."	self update: 'jobTitle' to: newJobTitle</body><body package="IBLensTests">languageReq	"Answer the receiver's languageReq."	^languageReq</body><body package="IBLensTests">languageReq: newLanguageReq	"Set the receiver's languageReq to newLanguageReq."	self update: 'languageReq' to: newLanguageReq</body><body package="IBLensTests">maxSalary	"Answer the receiver's maxSalary."	^maxSalary</body><body package="IBLensTests">maxSalary: newMaxSalary	"Set the receiver's maxSalary to newMaxSalary."	self update: 'maxSalary' to: newMaxSalary</body><body package="IBLensTests">minSalary	"Answer the receiver's minSalary."	^minSalary</body><body package="IBLensTests">minSalary: newMinSalary	"Set the receiver's minSalary to newMinSalary."	self update: 'minSalary' to: newMinSalary</body></methods><methods><class-id>Detail</class-id> <category>accessing</category><body package="IBLensTests">id	"Answer the receiver's id."	^id</body><body package="IBLensTests">id: newId	"Set the receiver's id to newId."	self update: 'id' to: newId</body><body package="IBLensTests">masterid	"Answer the receiver's masterid."	^masterid</body><body package="IBLensTests">masterid: newMasterid	"Set the receiver's masterid to newMasterid."	self update: 'masterid' to: newMasterid</body><body package="IBLensTests">quantity	"Answer the receiver's quantity."	^quantity</body><body package="IBLensTests">quantity: newQuantity	"Set the receiver's quantity to newQuantity."	self update: 'quantity' to: newQuantity</body></methods><methods><class-id>Tbl</class-id> <category>accessing</category><body package="IBLensTests">blobcol	"Answer the receiver's blobcol."	^blobcol</body><body package="IBLensTests">blobcol: newBlobcol	"Set the receiver's blobcol to newBlobcol."	self update: 'blobcol' to: newBlobcol</body><body package="IBLensTests">charcol	"Answer the receiver's charcol."	^charcol</body><body package="IBLensTests">charcol: newCharcol	"Set the receiver's charcol to newCharcol."	self update: 'charcol' to: newCharcol</body><body package="IBLensTests">clobcol	"Answer the receiver's clobcol."	^clobcol</body><body package="IBLensTests">clobcol: newClobcol	"Set the receiver's clobcol to newClobcol."	self update: 'clobcol' to: newClobcol</body><body package="IBLensTests">datecol	"Answer the receiver's datecol."	^datecol</body><body package="IBLensTests">datecol: newDatecol	"Set the receiver's datecol to newDatecol."	self update: 'datecol' to: newDatecol</body><body package="IBLensTests">decimal2col	"Answer the receiver's decimal2col."	^decimal2col</body><body package="IBLensTests">decimal2col: newDecimal2col	"Set the receiver's decimal2col to newDecimal2col."	self update: 'decimal2col' to: newDecimal2col</body><body package="IBLensTests">decimal3col	"Answer the receiver's decimal3col."	^decimal3col</body><body package="IBLensTests">decimal3col: newDecimal3col	"Set the receiver's decimal3col to newDecimal3col."	self update: 'decimal3col' to: newDecimal3col</body><body package="IBLensTests">decimalcol	"Answer the receiver's decimalcol."	^decimalcol</body><body package="IBLensTests">decimalcol: newDecimalcol	"Set the receiver's decimalcol to newDecimalcol."	self update: 'decimalcol' to: newDecimalcol</body><body package="IBLensTests">doublecol	"Answer the receiver's doublecol."	^doublecol</body><body package="IBLensTests">doublecol: newDoublecol	"Set the receiver's doublecol to newDoublecol."	self update: 'doublecol' to: newDoublecol</body><body package="IBLensTests">floatcol	"Answer the receiver's floatcol."	^floatcol</body><body package="IBLensTests">floatcol: newFloatcol	"Set the receiver's floatcol to newFloatcol."	self update: 'floatcol' to: newFloatcol</body><body package="IBLensTests">integercol	"Answer the receiver's integercol."	^integercol</body><body package="IBLensTests">integercol: newIntegercol	"Set the receiver's integercol to newIntegercol."	self update: 'integercol' to: newIntegercol</body><body package="IBLensTests">symbolcol	"Answer the receiver's symbolcol."	^symbolcol</body><body package="IBLensTests">symbolcol: newSymbolcol	"Set the receiver's symbolcol to newSymbolcol."	self update: 'symbolcol' to: newSymbolcol</body><body package="IBLensTests">timecol	"Answer the receiver's timecol."	^timecol</body><body package="IBLensTests">timecol: newTimecol	"Set the receiver's timecol to newTimecol."	self update: 'timecol' to: newTimecol</body><body package="IBLensTests">timestampcol	"Answer the receiver's timestampcol."	^timestampcol</body><body package="IBLensTests">timestampcol: newTimestampcol	"Set the receiver's timestampcol to newTimestampcol."	self update: 'timestampcol' to: newTimestampcol</body><body package="IBLensTests">varcharcol	"Answer the receiver's varcharcol."	^varcharcol</body><body package="IBLensTests">varcharcol: newVarcharcol	"Set the receiver's varcharcol to newVarcharcol."	self update: 'varcharcol' to: newVarcharcol</body></methods><methods><class-id>Department</class-id> <category>accessing</category><body package="IBLensTests">budget	"Answer the receiver's budget."	^budget</body><body package="IBLensTests">budget: newBudget	"Set the receiver's budget to newBudget."	self update: 'budget' to: newBudget</body><body package="IBLensTests">department	"Answer the receiver's department."	^department</body><body package="IBLensTests">department: newDepartment	"Set the receiver's department to newDepartment."	self update: 'department' to: newDepartment</body><body package="IBLensTests">deptNo	"Answer the receiver's deptNo."	^deptNo</body><body package="IBLensTests">deptNo: newDeptNo	"Set the receiver's deptNo to newDeptNo."	self update: 'deptNo' to: newDeptNo</body><body package="IBLensTests">headDepartment	"Answer the receiver's headDepartment."	^headDepartment</body><body package="IBLensTests">headDepartment: newHeadDepartment	"Set the receiver's headDepartment to newHeadDepartment."	self update: 'headDepartment' to: newHeadDepartment</body><body package="IBLensTests">location	"Answer the receiver's location."	^location</body><body package="IBLensTests">location: newLocation	"Set the receiver's location to newLocation."	self update: 'location' to: newLocation</body><body package="IBLensTests">manager	"Answer the receiver's manager."	^manager</body><body package="IBLensTests">manager: newManager	"Set the receiver's manager to newManager."	self update: 'manager' to: newManager</body><body package="IBLensTests">phoneNo	"Answer the receiver's phoneNo."	^phoneNo</body><body package="IBLensTests">phoneNo: newPhoneNo	"Set the receiver's phoneNo to newPhoneNo."	self update: 'phoneNo' to: newPhoneNo</body></methods><methods><class-id>Avb.IBLensTests.ConnectionTest</class-id> <category>private</category><body package="IBLensTests">connectToDatabase	connection		environment: self defaultEnvironment;		username: self defaultUsername;		password: self defaultPassword;		connect</body></methods><methods><class-id>Avb.IBLensTests.ConnectionTest</class-id> <category>Running</category><body package="IBLensTests">defaultEnvironment	^'c:\sqlTest.gdb'</body><body package="IBLensTests">defaultPassword	^'masterkey'</body><body package="IBLensTests">defaultUsername	^'sysdba'</body><body package="IBLensTests">setUp	connection := InterBaseConnection new.</body><body package="IBLensTests">tearDown	connection isNil ifTrue: [^self].	connection isConnected ifTrue: [connection disconnect].	connection := nil.</body></methods><methods><class-id>Avb.IBLensTests.ConnectionTest</class-id> <category>tests</category><body package="IBLensTests">testConnect	self should: [connection state = #new].	self connectToDatabase.	self should: [connection databaseHandle notNil and: [connection databaseHandle isValid] ].	self should: [connection state = #xactNo].	connection disconnect.	self should: [connection state = #new].</body></methods><methods><class-id>Avb.IBLensTests.ConnectionTest</class-id> <category>private-creating</category><body package="IBLensTests">testCreateDatabase	self defaultEnvironment asFilename definitelyExists ifTrue: [^true].	InterBaseConnection new 		createDatabase: ('create database &lt;1p&gt; user &lt;2p&gt; password &lt;3p&gt;' 				expandMacrosWith: self defaultEnvironment				with: self defaultUsername				with: self defaultPassword)</body></methods><methods><class-id>Avb.IBLensTests.SessionTest</class-id> <category>Running</category><body package="IBLensTests">createTestSchema	[connection executeDirect: 'drop table tbl'] on: Error do: [:e | ].	connection 		executeDirect: 'create table tbl(		varCharCol VARCHAR(500),		floatCol FLOAT,		doubleCol DOUBLE PRECISION,		decimalCol DECIMAL (18,2),		decimal2Col DECIMAL (18,16),		decimal3Col DECIMAL (9,4),		integerCol INTEGER,		charCol CHAR(100),		dateCol DATE,		timeCol TIME,		timestampCol TIMESTAMP,		blobCol BLOB,		clobCol BLOB sub_type 1,		symbolCol VARCHAR(80)		)'</body><body package="IBLensTests">dropDatabase"	[self defaultEnvironment asFilename delete] on: Error do: [:ex |  ]"</body><body package="IBLensTests">fillSchemaWithData	connection 		executeDirect: 'insert into tbl values (''test_string'',		123.0,		123.0,		1234567890123456.78,		12.3456789012345678,		12345.6789,		123,		''characters'',		''08/21/2002'',		''16:55:47'',		''08/21/2002 16:55:47.999'',		''12345'',		''abcdef'',		''SymbolString'')'</body><body package="IBLensTests">setUp	self dropDatabase.	self testCreateDatabase.	connection := InterBaseConnection new.	self connectToDatabase.	self createTestSchema.	self fillSchemaWithData.	session := connection getSession</body><body package="IBLensTests">tearDown	session notNil 		ifTrue: 			[session state == #new ifFalse: [session disconnect].			session := nil].	super tearDown.	self dropDatabase</body></methods><methods><class-id>Avb.IBLensTests.SessionTest</class-id> <category>tests-binding</category><body package="IBLensTests">testBindByteArray	| dbc result |	dbc := DatabaseCommand new.	dbc addBinding: #[1 2 3 4 5].	dbc body: 'update tbl set varCharCol =?'.	session doCommand: dbc.	result := (session prepare: 'select varCharCol from tbl' ; execute ; answer) upToEnd.	self should: [result first first  asByteArray = #[1 2 3 4 5]]</body><body package="IBLensTests">testBindDate	| dbc result |	dbc := DatabaseCommand new.	dbc addBinding: Date today.	dbc body: 'update tbl set dateCol =?'.	session doCommand: dbc.	result := (session prepare: 'select dateCol from tbl' ; execute ; answer) upToEnd.	self should: [result first first  = Date today]</body><body package="IBLensTests">testBindDecimal	| dbc result |	dbc := DatabaseCommand new.	dbc addBinding: 456.78s.	dbc body: 'update tbl set decimalCol =?'.	session doCommand: dbc.	result := (session prepare: 'select decimalCol from tbl' ; execute ; answer) upToEnd.	self should: [result first first  = 456.78s]</body><body package="IBLensTests">testBindDoable	| dbc result |	dbc := DatabaseCommand new.	dbc addBinding: 456.0d.	dbc body: 'update tbl set doubleCol =?'.	session doCommand: dbc.	result := (session prepare: 'select doubleCol from tbl' ; execute ; answer) upToEnd.	self should: [result first first  = 456.0d]</body><body package="IBLensTests">testBindFloat	| dbc result |	dbc := DatabaseCommand new.	dbc addBinding: 456.0.	dbc body: 'update tbl set floatCol =?'.	session doCommand: dbc.	result := (session prepare: 'select floatCol from tbl' ; execute ; answer) upToEnd.	self should: [result first first  = 456.0]</body><body package="IBLensTests">testBindInteger	| dbc result |	dbc := DatabaseCommand new.	dbc addBinding: 456.	dbc body: 'update tbl set integerCol =?'.	session doCommand: dbc.	result := (session prepare: 'select integerCol from tbl' ; execute ; answer) upToEnd.	self should: [result first first  = 456]</body><body package="IBLensTests">testBindString	| dbc result |	dbc := DatabaseCommand new.	dbc addBinding: '456.78s'.	dbc body: 'update tbl set charCol =?'.	session doCommand: dbc.	result := (session prepare: 'select charCol from tbl' ; execute ; answer) upToEnd.	self should: [result first first  trimBlanks = '456.78s']</body><body package="IBLensTests">testBindTime	| dbc result t |	dbc := DatabaseCommand new.	dbc addBinding: (t :=Time now).	dbc body: 'update tbl set timeCol =?'.	session doCommand: dbc.	result := (session prepare: 'select timeCol from tbl' ; execute ; answer) upToEnd.	self should: [result first first  = t]</body><body package="IBLensTests">testBindTimestamp	| dbc result t |	dbc := DatabaseCommand new.	dbc addBinding: (t :=Timestamp now millisecond: 999).	dbc body: 'update tbl set timestampCol =?'.	session doCommand: dbc.	result := (session prepare: 'select timestampCol from tbl' ; execute ; answer) upToEnd.	self should: [result first first  = t]</body><body package="IBLensTests">testBindVarString	| dbc result |	dbc := DatabaseCommand new.	dbc addBinding: '456.78s'.	dbc body: 'update tbl set varcharCol =?'.	session doCommand: dbc.	result := (session prepare: 'select varcharCol from tbl' ; execute ; answer) upToEnd.	self should: [result first first   = '456.78s']</body></methods><methods><class-id>Avb.IBLensTests.SessionTest</class-id> <category>tests-DatabaseCommand</category><body package="IBLensTests">testDatabaseCommand	| dbc |	dbc := DatabaseCommand new.	dbc body: 'update tbl set floatCol= 456 where integerCol =123'.	session doCommand: dbc.	self should: [session rowCount = 1]</body><body package="IBLensTests">testDatabaseCommand2	| dbc |	dbc := DatabaseCommand new.	dbc addBinding: 456; addBinding: 123.	dbc body: 'update tbl set floatCol= :1 where integerCol =:2'.	session doCommand: dbc.	self should: [session rowCount = 1]</body><body package="IBLensTests">testDatabaseCommand2QuestionMark	| dbc |	dbc := DatabaseCommand new.	dbc addBinding: Date today; addBinding: 123.	dbc body: 'update tbl set dateCol= ? where integerCol =?'.	session doCommand: dbc.	self should: [session rowCount = 1].</body><body package="IBLensTests">testDatabaseCommand2Swap	| dbc |	dbc := DatabaseCommand new.	dbc addBinding: 123; addBinding: '456'.	dbc body: 'update tbl set varcharCol= :2 where integerCol =:1'.	session doCommand: dbc.	self should: [session rowCount = 1]</body></methods><methods><class-id>Avb.IBLensTests.SessionTest</class-id> <category>tests</category><body package="IBLensTests">testExecuteAnswerNext	| a row |	session prepare: 'select varCharCol  from tbl'.	self should: [session state = #prepared].	session execute.	self should: [session state = #executing].	a := session answer.	self should: [session state = #fetchingData].	row :=a next.	self should: [session state = #fetchingData].	self should: [row = #('test_string')].	session disconnect.	self should: [session state = #new]</body></methods><methods><class-id>Avb.IBLensTests.SessionTest</class-id> <category>tests-ObjectLens</category><body package="IBLensTests">testResultTemplateByteArray	| a result |		session resultTemplate: #(#[]).	a := session				prepare: 'select blobCol  from tbl';				execute;				answer.	result := a next first.	self should: [result  = #[49 50 51 52 53]].</body><body package="IBLensTests">testResultTemplateCLOB	| a result |		session resultTemplate: #('').	a := session				prepare: 'select clobCol  from tbl';				execute;				answer.	result := a next first.	self should: [result = 'abcdef'].</body><body package="IBLensTests">testResultTemplateDate	| a result d |	d := Date readFrom: '08/21/2002' readStream.	session resultTemplate: (Array with: Date today) .	a := session				prepare: 'select dateCol from tbl';				execute;				answer.	result := a next first.	self should: [result = d ].</body><body package="IBLensTests">testResultTemplateDecimal	| a result |	session resultTemplate: #(0.0s).	a := session				prepare: 'select decimalCol from tbl';				execute;				answer.	result := a next first.	self should: [result class = FixedPoint and: [ result = 1234567890123456.78s]].</body><body package="IBLensTests">testResultTemplateDecimal2	| a result |	session resultTemplate: #(0.0s).	a := session				prepare: 'select decimal2Col from tbl';				execute;				answer.	result := a next first.	self should: [result class = FixedPoint and: [ result = 12.3456789012345678s]].</body><body package="IBLensTests">testResultTemplateDecimal3	| a result |	session resultTemplate: #(0.0s).	a := session				prepare: 'select decimal3Col from tbl';				execute;				answer.	result := a next first.	self should: [result class = FixedPoint and: [ result = 12345.6789s]].</body><body package="IBLensTests">testResultTemplateDouble	| a result |	session resultTemplate: #(0.0d).	a := session				prepare: 'select doubleCol from tbl';				execute;				answer.	result := a next first.	self should: [result class = Double and: [ result = 123.0d]].</body><body package="IBLensTests">testResultTemplateFloat	| a result |	session resultTemplate: #(0.0).	a := session				prepare: 'select floatCol from tbl';				execute;				answer.	result := a next first.	self should: [result class = Float and: [ result = 123.0]].</body><body package="IBLensTests">testResultTemplateSkippedSlot	| a result template |	template :=Array with: Object new with: 0.	session resultTemplate: template.	a := session				prepare: 'select 123 from tbl';				execute;				answer.	result := a next.	self should: [result first isNil and: [result last =123]]</body><body package="IBLensTests">testResultTemplateSmallInteger	| a result |	session resultTemplate: #(0).	a := session				prepare: 'select integerCol from tbl';				execute;				answer.	result := a next first.	self should: [result class = SmallInteger and: [ result = 123]].</body><body package="IBLensTests">testResultTemplateString	| a result |		session resultTemplate: #('string').	a := session				prepare: 'select charCol  from tbl';				execute;				answer.	result := a next first.	self should: [result trimBlanks = 'characters'].</body><body package="IBLensTests">testResultTemplateTime	| a result d |	d := Time readFrom: '16:55:47' readStream.	session resultTemplate: (Array with: Time now) .	a := session				prepare: 'select timeCol from tbl';				execute;				answer.	result := a next first.	self should: [result = d ].</body><body package="IBLensTests">testResultTemplateTimeStamp	| a result d |	d := Timestamp readFrom: '08/21/2002 16:55:47.999' readStream.	session resultTemplate: (Array with: Timestamp now) .	a := session				prepare: 'select timestampCol from tbl';				execute;				answer.	result := a next first.	self should: [result = d ].</body><body package="IBLensTests">testResultTemplateVString	| a result |		session resultTemplate: #('string').	a := session				prepare: 'select varCharCol  from tbl';				execute;				answer.	result := a next first.	self should: [result = 'test_string'].</body></methods><methods><class-id>Avb.IBLensTests.SessionTest</class-id> <category>tests-rowCount</category><body package="IBLensTests">testRowCount	[connection executeDirect: 'drop table tblRC'] on: Error do: [:e |].	connection executeDirect: 'create table tblRC (str varchar(100))'.	session prepare: 'insert into tblRC values(''TestString'')'.	session execute.	session answer.	self should: [session rowCount = 1].</body><body package="IBLensTests">testRowCount2	[connection executeDirect: 'drop table tblRC'] on: Error do: [:e |].	connection executeDirect: 'create table tblRC (str varchar(100))'.	session prepare: 'insert into tblRC values(''TestString'')'.	session execute; answer; execute; answer.	session prepare: 'update tblRC set str= ''TestString2'''.	session execute; answer.	self should: [session rowCount = 2].	session prepare: 'update tblRC set str= ''TestString3'' where str=''ABC'' '.	session execute; answer.	self should: [session rowCount = 0].</body><body package="IBLensTests">testRowCountDelete	[connection executeDirect: 'drop table tblRC'] on: Error do: [:e |].	connection executeDirect: 'create table tblRC (str varchar(100))'.	session prepare: 'insert into tblRC values(''TestString'')'.	session execute.	session answer.	self should: [session rowCount = 1].	session prepare: 'delete from tblRC'.	session execute;  answer.	self should: [session rowCount = 1].	session execute;  answer.	self should: [session rowCount = 0].</body></methods><methods><class-id>Avb.IBLensTests.LensTest</class-id> <category>tests</category><body package="IBLensTests">testEmpty</body><body package="IBLensTests">testGetTableNamedIn	| dataModel tbl ctx |	dataModel := InterBaseContext catalogDataModel.	lensSession := dataModel getSession.	lensSession isNil ifTrue: [^nil].	lensSession username: self defaultUsername.	lensSession password: self defaultPassword.	lensSession environment: self defaultEnvironment.	lensSession connect.	self shouldnt: [lensSession isDisconnected].	ctx := lensSession dataModel databaseContext.	tbl := ctx getTableNamed: 'master' in: lensSession.	self should: [tbl name trimBlanks = 'MASTER' ].	lensSession disconnect.	self should: [lensSession isDisconnected]</body><body package="IBLensTests">testInsert	| dataModel app  query rows newEntry answer row |	dataModel := InterBaseLensTestManager dataModel.	lensSession := dataModel getSession.	lensSession isNil ifTrue: [^nil].	lensSession username: self defaultUsername.	lensSession password: self defaultPassword.	lensSession environment: self defaultEnvironment.	ObjectMemory garbageCollect.	lensSession connect.	self shouldnt: [lensSession isDisconnected].	app := InterBaseLensTestManager new.	"Add 'empty' object"	newEntry := Tbl new integercol: -1.	self shouldnt: [	lensSession begin.	lensSession add: newEntry.	lensSession commit] raise: ExternalDatabaseConnection externalDatabaseErrorSignal.	"Copy existing row"	query := app queryById.	app var: 123.	"set query parameter"	query session: lensSession.	answer := query answer.	rows := query values.	self should: [rows size = 1].	row := rows first.	answer close.	newEntry := row copy.	newEntry integercol: row integercol + 10.	newEntry clobcol: newEntry clobcol asUppercase.	self shouldnt: [lensSession add: newEntry] raise: ExternalDatabaseConnection externalDatabaseErrorSignal.	lensSession disconnect.	self should: [lensSession isDisconnected]</body><body package="IBLensTests">testlistTablesLikeIn 	| dataModel tables ctx |	dataModel := InterBaseContext catalogDataModel.	lensSession := dataModel getSession.	lensSession isNil ifTrue: [^nil].	lensSession username: self defaultUsername.	lensSession password: self defaultPassword.	lensSession environment: self defaultEnvironment.	lensSession connect.	self shouldnt: [lensSession isDisconnected].	ctx := lensSession dataModel databaseContext.	tables := ctx listTablesLike: 'm%' in: lensSession.	self should: [tables first name trimBlanks = 'MASTER' ].	lensSession disconnect.	self should: [lensSession isDisconnected]</body><body package="IBLensTests">testQuery	| dataModel app query rows tbl |	dataModel := InterBaseLensTestManager dataModel.	lensSession := dataModel getSession.	lensSession isNil ifTrue: [^nil].	lensSession username: self defaultUsername.	lensSession password: self defaultPassword.	lensSession environment: self defaultEnvironment.	lensSession connect.	self shouldnt: [lensSession isDisconnected].	app := InterBaseLensTestManager new.	query := app ownQuery.	query session: lensSession.	rows := query values.	self should: [rows size = 1].	tbl := rows first.	self should: [tbl class = Tbl].	self should: [tbl varcharcol = 'test_string'].	self should: [tbl floatcol = 123.0].	self should: [tbl doublecol = 123.0d].	self should: [tbl decimalcol = 1234567890123456.78s].	self should: [tbl decimal2col = 12.3456789012345678s].	self should: [tbl decimal3col = 12345.6789s].	self should: [tbl integercol = 123].	self should: 			[tbl charcol 				= 'characters                                                                                          '].	self should: [tbl datecol = (Date readFrom: '08/21/2002' readStream)].	self should: [tbl timecol = (Time readFrom: '16:55:47' readStream)].	self should: 			[tbl timestampcol 				= (Timestamp readFrom: '08/21/2002 16:55:47.999' readStream)].	self should: [tbl blobcol = #[49 50 51 52 53]].	self should: [tbl clobcol = 'abcdef'].	self should: [tbl symbolcol = #SymbolString].	lensSession disconnect.	self should: [lensSession isDisconnected]</body><body package="IBLensTests">testRemove	| dataModel app query rows |	dataModel := InterBaseLensTestManager dataModel.	lensSession := dataModel getSession.	lensSession isNil ifTrue: [^nil].	lensSession username: self defaultUsername.	lensSession password: self defaultPassword.	lensSession environment: self defaultEnvironment.	lensSession connect.	self shouldnt: [lensSession isDisconnected].	app := InterBaseLensTestManager new.	"Update existing row"	query := app queryById.	app var: 123.	"set query parameter"	query session: lensSession.	query answer.	rows := query values.	self should: [rows size = 1].	self shouldnt: [lensSession remove: rows first]		raise: ExternalDatabaseConnection externalDatabaseErrorSignal.	self should: [lensSession remove: rows first]		raise: LensSession rowForObjectNotFoundSignal.	lensSession disconnect.	self should: [lensSession isDisconnected]</body><body package="IBLensTests">testSequence	| dataModel newEntry app query rows row |	dataModel := InterBaseLensTestManager dataModel.	lensSession := dataModel getSession.	lensSession isNil ifTrue: [^nil].	lensSession username: self defaultUsername.	lensSession password: self defaultPassword.	lensSession environment: self defaultEnvironment.	lensSession connect.	self shouldnt: [lensSession isDisconnected].	"Add 'empty' object"	newEntry := Master new name: 'My name'.	self shouldnt: [	lensSession begin.	lensSession add: newEntry.	lensSession commit] raise: ExternalDatabaseConnection externalDatabaseErrorSignal.	app := InterBaseLensTestManager new.	query := app masterQuery.	query session: lensSession.	rows := query values.	self should: [rows size = 4].	row := rows last.	self should: [row class = Master].	self should: [row name = 'My name'].	self should: [row id &gt; 0 ].	lensSession disconnect.	self should: [lensSession isDisconnected]</body><body package="IBLensTests">testUpdate	| dataModel app  query rows entry |	dataModel := InterBaseLensTestManager dataModel.	lensSession := dataModel getSession.	lensSession isNil ifTrue: [^nil].	lensSession username: self defaultUsername.	lensSession password: self defaultPassword.	lensSession environment: self defaultEnvironment.	lensSession connect.	self shouldnt: [lensSession isDisconnected].	app := InterBaseLensTestManager new.	"Update existing row"	query := app queryById.	app var: 123.	"set query parameter"	query session: lensSession.	query answer.	rows := query values.	self should: [rows size = 1].	"Update some attributes now"	lensSession begin.	entry:=rows first.	entry doublecol: entry doublecol + 1000000.	entry datecol: Date today.	entry timecol: Time now.	entry timestampcol: Timestamp now.	entry varcharcol: LensAnswerStream comment asString.		self shouldnt: [entry postUpdates] raise: ExternalDatabaseConnection externalDatabaseErrorSignal.	lensSession commit.	lensSession disconnect.	self should: [lensSession isDisconnected]</body></methods><methods><class-id>Avb.IBLensTests.LensTest</class-id> <category>Running</category><body package="IBLensTests">createTestSchema	super createTestSchema.	[connection executeDirect: 'drop table detail'] on: Error do: [:e | ].	[connection executeDirect: 'drop table master'] on: Error do: [:e | ].	connection 		executeDirect: 'create table master(			id integer not null,			name varchar(200),			primary key (id))'.	connection 		executeDirect: 'create table detail(			id integer not null,			masterId integer not null,			quantity decimal(9,2),			primary key (id,masterId))'.	[connection executeDirect: 'DELETE FROM RDB$GENERATORS WHERE RDB$GENERATOR_NAME = ''MASTER_GEN'' ' ] on: Error do: [:e | ].	connection executeDirect: 'create generator master_gen'.	connection executeDirect: 'set generator master_gen to 100'.</body><body package="IBLensTests">fillSchemaWithData	| sess |	super fillSchemaWithData.	sess := connection getSession prepare: 'insert into master(id, name) values (:1,:2)'.	#(#(-1 'first') #(-2 'second') #(-3 'third')) do: 			[:data | 			sess				bindInput: data;				execute;				answer].	sess := connection getSession		prepare: 'insert into detail (id, masterid, quantity) values (:1,:2, :3)'.	#(#(-1 -1 12.3s) #(-2 -1 0.12s) #(-3 -3 567.4s) #(-4 -3 78.99s) #(-5 -3 123456.78s)) 		do: 			[:data | 			sess				bindInput: data;				execute;				answer]</body><body package="IBLensTests">setUp	super setUp.	InterBaseLensTestModel currentDataModel: #dataModelSpec</body><body package="IBLensTests">tearDown	lensSession notNil 		ifTrue: 			[lensSession disconnect.			lensSession := nil].	super tearDown</body></methods><methods><class-id>Avb.IBLensTests.LensTest</class-id> <category>tests-concurrency</category><body package="IBLensTests">testLargeInsert	| dataModel newEntry cont cnt |	dataModel := InterBaseLensTestManager dataModel.	lensSession := dataModel getSession.	lensSession isNil ifTrue: [^nil].	lensSession username: self defaultUsername.	lensSession password: self defaultPassword.	lensSession environment: self defaultEnvironment.	ObjectMemory garbageCollect.	lensSession connect.	self shouldnt: [lensSession isDisconnected].	"Add 'empty' object"	newEntry := Master new.	self shouldnt: [	lensSession begin.	lensSession add: newEntry.	lensSession commit] raise: ExternalDatabaseConnection externalDatabaseErrorSignal.	"Add 1000 objects"	lensSession begin.	1 to: 1000 do: [: i |	newEntry := Master new name: i printString.	self shouldnt: [	lensSession add: newEntry] raise: ExternalDatabaseConnection externalDatabaseErrorSignal].	lensSession commit.	"Check"	cont := lensSession containerOf: Master.	cnt := cont answer: [:m | m Count].	self should: [cnt values first =  1004].	lensSession disconnect.	self should: [lensSession isDisconnected]</body><body package="IBLensTests">testLargeInsert2	| dataModel newEntry cont cnt |	dataModel := InterBaseLensTestManager dataModel.	lensSession := dataModel getSession.	lensSession isNil ifTrue: [^nil].	lensSession username: self defaultUsername.	lensSession password: self defaultPassword.	lensSession environment: self defaultEnvironment.	ObjectMemory garbageCollect.	lensSession connect.	self shouldnt: [lensSession isDisconnected].	"Add 5000 objects"	lensSession begin.	1 to: 5000		do: 			[:i | 			newEntry := (Detail new)						id: i;						quantity: i * 10s;						masterid: 1.			self shouldnt: [lensSession add: newEntry]				raise: ExternalDatabaseConnection externalDatabaseErrorSignal].	lensSession commit.	"Check"	cont := lensSession containerOf: Detail.	cnt := cont answer: [:m | m Count].	self should: [cnt values first = 5005].	lensSession disconnect.	self should: [lensSession isDisconnected]</body></methods><methods><class-id>InterBaseLensTestModel class</class-id> <category>accessing</category><body package="IBLensTests">currentDataModel	^DataModel</body><body package="IBLensTests">currentDataModel: aSelector	DataModel := aSelector</body><body package="IBLensTests">dataModelDesignator	"Give the user a choice between Oracle7 or CTLib."	^Array		with: #InterBaseLensTestModel		with: DataModel.</body><body package="IBLensTests">lockPolicy	^#lockOnAccept</body></methods><methods><class-id>Master</class-id> <category>accessing</category><body package="IBLensTests">id	"Answer the receiver's id."	^id</body><body package="IBLensTests">id: newId	"Set the receiver's id to newId."	self update: 'id' to: newId</body><body package="IBLensTests">name	"Answer the receiver's name."	^name</body><body package="IBLensTests">name: newName	"Set the receiver's name to newName."	self update: 'name' to: newName</body></methods><methods><class-id>Avb.IBLensTests.LensEmpTest</class-id> <category>Running</category><body package="IBLensTests">createTestSchema</body><body package="IBLensTests">defaultEnvironment	^'d:\Program Files\Firebird\examples\employee.gdb'</body><body package="IBLensTests">fillSchemaWithData</body><body package="IBLensTests">setUp	super setUp.	InterBaseLensTestModel currentDataModel: #employeeSpec</body><body package="IBLensTests">tearDown	lensSession notNil 		ifTrue: 			[lensSession disconnect.			lensSession := nil].	super tearDown</body></methods><methods><class-id>Avb.IBLensTests.LensEmpTest</class-id> <category>tests</category><body package="IBLensTests">testQuery	| dataModel cont emps |	dataModel := InterBaseLensTestModel dataModel.	lensSession := dataModel getSession.	lensSession isNil ifTrue: [^nil].	lensSession username: self defaultUsername.	lensSession password: self defaultPassword.	lensSession environment: self defaultEnvironment.	lensSession connect.	self shouldnt: [lensSession isDisconnected].	cont := lensSession containerOf: Employee.	emps := cont select: [:emp | emp firstName  = 'Robert'].	lensSession disconnect.	self should: [lensSession isDisconnected]</body></methods><methods><class-id>Database.InterBaseConnection</class-id> <category>private</category><body package="IBLensTests">executeDirect: aStatement 	(self getSession)		prepare: aStatement;		execute;		answer</body></methods><methods><class-id>InterBaseLensTestManager</class-id> <category>queries</category><body package="IBLensTests">ownQuery	"QueryEditor new openOnClass: self andSelector: #ownQuery"	&lt;resource: #query&gt;	| _qo |	_qo := LensQuery new.	_qo description: 'ownQuery'.	_qo arrayContainerNames: #((#tbl #Tbl) ).	_qo mode: #own.	^_qo</body><body package="IBLensTests">queryById	"This method should only be modified using the Query Editor	any other edits may be lost."	"QueryEditor new openOnClass: self andSelector: #queryById"	&lt;resource: #query&gt;	| _qo |	_qo := LensQuery new.	_qo description: 'queryById'.	_qo arrayContainerNames: #((#tbl #Tbl) ).	_qo answerBlockSource: ''.	_qo selectWhere: [:tbl | tbl integercol  = var].	_qo selectBlockSource: 'tbl integercol  = var'.	_qo orderByBlockSource: ''.	_qo groupByBlockSource: ''.	_qo mode: nil.	^_qo</body></methods><methods><class-id>InterBaseLensTestManager</class-id> <category>query</category><body package="IBLensTests">masterQuery	"This method should only be modified using the Query Editor	any other edits may be lost."	"QueryEditor new openOnClass: self andSelector: #masterQuery"	&lt;resource: #query&gt;	| _qo |	_qo := LensQuery new.	_qo description: 'masterQuery'.	_qo arrayContainerNames: #((#master #Master) ).	_qo answerBlockSource: ''.	_qo selectBlockSource: ''.	_qo orderBy: [:master | master id  ].	_qo orderByBlockSource: 'master id  '.	_qo groupByBlockSource: ''.	_qo mode: #own.	^_qo</body></methods><methods><class-id>InterBaseLensTestModel class</class-id> <category>interface specs</category><body package="IBLensTests">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'InterBaseLensTestModel' 			#bounds: #(#{Graphics.Rectangle} 230 304 467 417 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #() ) )</body></methods><methods><class-id>InterBaseLensTestModel class</class-id> <category>lens data model specs</category><body package="IBLensTests">dataModelSpec	"LensEditor new openOnClass: self andSelector: #dataModelSpec"	&lt;resource: #dataModel&gt;	^#(#{Lens.LensDataModel} 		#setDatabaseContext: 		#(#{Lens.InterBaseContext} 			#username: 'sysdba' 			#environment: 'c:\sqlTest.gdb' ) 		#structureTypes: #(			#(#{Lens.LensStructureType} 				#memberClass: #{Tbl} 				#setVariables: #(					#(#{Lens.LensStructureVariable} 						#name: 'varcharcol' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'VARCHARCOL' 							#dataType: #varchar 							#maxColumnConstraint: 500 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'floatcol' 						#setValueType: #Float 						#fieldType: #Float 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'FLOATCOL' 							#dataType: #float 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'doublecol' 						#setValueType: #Double 						#fieldType: #Double 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'DOUBLECOL' 							#dataType: #double 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'decimalcol' 						#setValueType: #FixedPoint 						#fieldType: #FixedPoint 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'DECIMALCOL' 							#dataType: #decimal 							#scale: -2 							#precision: 18 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'decimal2col' 						#setValueType: #FixedPoint 						#fieldType: #FixedPoint 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'DECIMAL2COL' 							#dataType: #decimal 							#scale: -16 							#precision: 18 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'decimal3col' 						#setValueType: #FixedPoint 						#fieldType: #FixedPoint 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'DECIMAL3COL' 							#dataType: #decimal 							#scale: -4 							#precision: 9 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'integercol' 						#setValueType: #Integer 						#fieldType: #Integer 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'INTEGERCOL' 							#dataType: #integer 							#scale: 0 							#precision: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#isId: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'charcol' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'CHARCOL' 							#dataType: #character 							#maxColumnConstraint: 100 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'datecol' 						#setValueType: #Date 						#fieldType: #Date 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'DATECOL' 							#dataType: #date 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'timecol' 						#setValueType: #Time 						#fieldType: #Time 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'TIMECOL' 							#dataType: #time 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'timestampcol' 						#setValueType: #Timestamp 						#fieldType: #Timestamp 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'TIMESTAMPCOL' 							#dataType: #timestamp 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'blobcol' 						#setValueType: #ByteArray 						#fieldType: #ByteArray 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'BLOBCOL' 							#dataType: #blob 							#maxColumnConstraint: 1048575 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'clobcol' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'CLOBCOL' 							#dataType: #clob 							#maxColumnConstraint: 1048575 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'symbolcol' 						#setValueType: 						#(#{Lens.LensEncodedType} 							#memberClass: #{Core.Symbol} 							#fieldType: #String 							#decodeSelector: #asSymbol ) 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'symbolcol' 							#dataType: #varchar 							#maxColumnConstraint: 80 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) ) 				#table: 				#(#{Lens.InterBaseTable} 					#name: 'TBL' ) 				#defersPostingUpdates: true 				#idVariable: #('integercol' ) 				#idGeneratorType: #userDefinedId 				#indexes: #() ) 			#(#{Lens.LensStructureType} 				#memberClass: #{Master} 				#setVariables: #(					#(#{Lens.LensStructureVariable} 						#name: 'id' 						#setValueType: #SerialNumber 						#fieldType: #Integer 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'ID' 							#dataType: #integer 							#scale: 0 							#precision: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#isId: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'name' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'NAME' 							#dataType: #varchar 							#maxColumnConstraint: 200 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) ) 				#table: 				#(#{Lens.InterBaseTable} 					#name: 'MASTER' ) 				#defersPostingUpdates: true 				#idVariable: #('id' ) 				#idGeneratorType: #userDefinedId 				#indexes: #() ) 			#(#{Lens.LensStructureType} 				#memberClass: #{Detail} 				#setVariables: #(					#(#{Lens.LensStructureVariable} 						#name: 'id' 						#setValueType: #Integer 						#fieldType: #Integer 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'ID' 							#dataType: #integer 							#scale: 0 							#precision: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#isId: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'masterid' 						#setValueType: #Integer 						#fieldType: #Integer 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'MASTERID' 							#dataType: #integer 							#scale: 0 							#precision: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'quantity' 						#setValueType: #FixedPoint 						#fieldType: #FixedPoint 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'QUANTITY' 							#dataType: #decimal 							#scale: -2 							#precision: 9 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) ) 				#table: 				#(#{Lens.InterBaseTable} 					#name: 'DETAIL' ) 				#defersPostingUpdates: true 				#idVariable: #('id' ) 				#idGeneratorType: #userDefinedId 				#indexes: #() ) ) 		#lensPolicyName: #Mixed 		#lensTransactionPolicyName: #PessimisticRR 		#validity: #installed )</body><body package="IBLensTests">employeeSpec	"LensEditor new openOnClass: self andSelector: #employeeSpec"	&lt;resource: #dataModel&gt;	^#(#{Lens.LensDataModel} 		#setDatabaseContext: 		#(#{Lens.InterBaseContext} 			#username: 'avb' 			#environment: 'D:\Program Files\Firebird\examples\EMPLOYEE.GDB' ) 		#structureTypes: #(			#(#{Lens.LensStructureType} 				#memberClass: #{Employee} 				#setVariables: #(					#(#{Lens.LensStructureVariable} 						#name: 'salary' 						#setValueType: #Double 						#fieldType: #Double 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'SALARY' 							#dataType: #double 							#scale: -2 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'hireDate' 						#setValueType: #Timestamp 						#fieldType: #Timestamp 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'HIRE_DATE' 							#dataType: #timestamp 							#scale: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'phoneExt' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'PHONE_EXT' 							#dataType: #varchar 							#maxColumnConstraint: 4 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'lastName' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'LAST_NAME' 							#dataType: #varchar 							#maxColumnConstraint: 20 							#scale: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'empNo' 						#setValueType: #Integer 						#fieldType: #Integer 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'EMP_NO' 							#dataType: #smallint 							#scale: 0 							#precision: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#isId: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'fullName' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'FULL_NAME' 							#dataType: #varchar 							#maxColumnConstraint: 37 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'firstName' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'FIRST_NAME' 							#dataType: #varchar 							#maxColumnConstraint: 15 							#scale: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'department' 						#setValueType: #Department 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'DEPT_NO' 							#dataType: #character 							#maxColumnConstraint: 3 							#scale: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'job' 						#setValueType: #Job 						#fieldType: 						#(#{Lens.LensStructureType} 							#memberClass: #{Core.Array} 							#setVariables: #(								#(#{Lens.LensStructureVariable} 									#name: 'jobCode' 									#setValueType: #String 									#fieldType: #String 									#column: 									#(#{Lens.InterBaseTableColumn} 										#name: 'JOB_CODE' 										#dataType: #varchar 										#maxColumnConstraint: 5 										#scale: 0 										#isNotNil: true ) 									#generatesAccessor: false 									#generatesMutator: false 									#isId: true 									#privateIsMapped: true 									#isNotNil: true ) 								#(#{Lens.LensStructureVariable} 									#name: 'jobGrade' 									#setValueType: #Integer 									#fieldType: #Integer 									#column: 									#(#{Lens.InterBaseTableColumn} 										#name: 'JOB_GRADE' 										#dataType: #smallint 										#scale: 0 										#precision: 0 										#isNotNil: true ) 									#generatesAccessor: false 									#generatesMutator: false 									#isId: true 									#privateIsMapped: true 									#isNotNil: true ) 								#(#{Lens.LensStructureVariable} 									#name: 'jobCountry' 									#setValueType: #String 									#fieldType: #String 									#column: 									#(#{Lens.InterBaseTableColumn} 										#name: 'JOB_COUNTRY' 										#dataType: #varchar 										#maxColumnConstraint: 15 										#scale: 0 										#isNotNil: true ) 									#generatesAccessor: false 									#generatesMutator: false 									#isId: true 									#privateIsMapped: true 									#isNotNil: true ) ) 							#table: 							#(#{Lens.InterBaseTable} 								#name: 'EMPLOYEE' ) 							#defersPostingUpdates: true 							#indexes: #() ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) ) 				#table: 				#(#{Lens.InterBaseTable} 					#name: 'EMPLOYEE' ) 				#defersPostingUpdates: true 				#idVariable: #('empNo' ) 				#idGeneratorType: #userDefinedId 				#indexes: #() ) 			#(#{Lens.LensStructureType} 				#memberClass: #{Department} 				#setVariables: #(					#(#{Lens.LensStructureVariable} 						#name: 'budget' 						#setValueType: #Double 						#fieldType: #Double 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'BUDGET' 							#dataType: #double 							#scale: -2 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'phoneNo' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'PHONE_NO' 							#dataType: #varchar 							#maxColumnConstraint: 20 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'location' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'LOCATION' 							#dataType: #varchar 							#maxColumnConstraint: 15 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'department' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'DEPARTMENT' 							#dataType: #varchar 							#maxColumnConstraint: 25 							#scale: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'deptNo' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'DEPT_NO' 							#dataType: #character 							#maxColumnConstraint: 3 							#scale: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#isId: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'headDepartment' 						#setValueType: #Department 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'HEAD_DEPT' 							#dataType: #character 							#maxColumnConstraint: 3 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'manager' 						#setValueType: #Employee 						#fieldType: #Integer 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'MNGR_NO' 							#dataType: #smallint 							#scale: 0 							#precision: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) ) 				#table: 				#(#{Lens.InterBaseTable} 					#name: 'DEPARTMENT' ) 				#defersPostingUpdates: true 				#idVariable: #('deptNo' ) 				#idGeneratorType: #userDefinedId 				#indexes: #() ) 			#(#{Lens.LensStructureType} 				#memberClass: #{Job} 				#setVariables: #(					#(#{Lens.LensStructureVariable} 						#name: 'jobRequirement' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'JOB_REQUIREMENT' 							#dataType: #clob 							#maxColumnConstraint: 50000 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'maxSalary' 						#setValueType: #Double 						#fieldType: #Double 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'MAX_SALARY' 							#dataType: #double 							#scale: -2 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'minSalary' 						#setValueType: #Double 						#fieldType: #Double 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'MIN_SALARY' 							#dataType: #double 							#scale: -2 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'jobGrade' 						#setValueType: #Integer 						#fieldType: #Integer 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'JOB_GRADE' 							#dataType: #smallint 							#scale: 0 							#precision: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#isId: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'languageReq' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'LANGUAGE_REQ' 							#dataType: #varchar 							#maxColumnConstraint: 15 							#scale: 0 ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'jobTitle' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'JOB_TITLE' 							#dataType: #varchar 							#maxColumnConstraint: 25 							#scale: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'jobCountry' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'JOB_COUNTRY' 							#dataType: #varchar 							#maxColumnConstraint: 15 							#scale: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#isId: true 						#privateIsMapped: true 						#isNotNil: true ) 					#(#{Lens.LensStructureVariable} 						#name: 'jobCode' 						#setValueType: #String 						#fieldType: #String 						#column: 						#(#{Lens.InterBaseTableColumn} 							#name: 'JOB_CODE' 							#dataType: #varchar 							#maxColumnConstraint: 5 							#scale: 0 							#isNotNil: true ) 						#generatesAccessor: true 						#generatesMutator: true 						#isId: true 						#privateIsMapped: true 						#isNotNil: true ) ) 				#table: 				#(#{Lens.InterBaseTable} 					#name: 'JOB' ) 				#defersPostingUpdates: true 				#idVariable: #('jobCode' 'jobGrade' 'jobCountry' ) 				#idGeneratorType: #userDefinedId 				#indexes: #() ) ) 		#lensPolicyName: #Mixed 		#lensTransactionPolicyName: #PessimisticRR 		#validity: #installed )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>LensDataManager</name><environment>Lens</environment><super>Lens.LensApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rows row trigger rowCount isEditing isCreating isDirty lockPolicy </inst-vars><class-inst-vars>rowType </class-inst-vars><imports></imports><category>Lens-Applications-Framework</category><attributes><package>Lens-Runtime</package></attributes></class><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class><class><name>InterBaseConnection</name><environment>Database</environment><super>Database.ExternalDatabaseConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>database dialect role charSet </inst-vars><class-inst-vars>defaultDialect </class-inst-vars><imports></imports><category>Database-InterBase</category><attributes><package>IBEXDI</package></attributes></class><class><name>LensMainApplication</name><environment>Lens</environment><super>Lens.LensApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-Applications-Framework</category><attributes><package>Lens-Runtime</package></attributes></class></st-source>