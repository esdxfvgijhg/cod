<?xml version="1.0"?><st-source><!-- Name: IBEXDIComment: The InterBase/Firebird Connect, originally written by Anthony Boris <anthonyvb@yandex.ru>.The IBEXDI parcel contains the Interbase(Firebird) specfic protocols for the External Database Interface (EXDI). Use of this parcel along with a properly configured Interbase(Firebird) client, one can interact with InterBase (6.x) and Firebird(0.9.x and higher) servers.When using this package with Glorp but not via StoreForInterBase, ensure that #useBinding is not forced to false by #useBindingIfSupported and that the accessor's #reusePreparedStatements is set to false.  Correct behaviour on Blobs requires binding but not reuse of insert, delete or update statements.- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Copyright: The contents of this file are subject to the ParcPlace Public License Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License athttp://www.parcplace.com/support/opensource/PPL-1.0.htmlSoftware distributed under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the specific language governing rights and limitations under the License.The Original Code is the InterBase/Firebird Connect.The Initial Developer of the Original Code is Anthony Boris.Portions created by Anthony Boris are Copyright (C) 2001-2003. All Rights Reserved.Contributor(s): Anthony Boris, Niall Ross.DbIdentifier: postgresStoreDBDbTrace: 292DevelopmentPrerequisites: #(#(#any 'Database' '') #(#any 'DLLCC' ''))PackageName: IBEXDIParcel: #('IBEXDI')ParcelName: IBEXDIPrerequisiteParcels: #(#('Database' ''))PrintStringCache: (7.3.1,NiallRoss)Version: 7.3Date: 12:05:50 PM October 16, 2009 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.7 (oct09.2) of 9 October 2009 on 16 October 2009 at 12:05:50</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>InterBaseInterface</name><environment>Database</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.InterBaseInterfaceDictionary.*			</imports><category>Database-InterBase</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libgds.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>true</beVirtual><optimizationLevel>full</optimizationLevel><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseInterface</class-id><body></body></comment><class><name>InterBaseLinuxInterface</name><environment>Database</environment><super>Database.InterBaseInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.InterBaseLinuxInterfaceDictionary.*			</imports><category>Database-InterBase</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>libcrypt.so</item> <item>libgds.so</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseLinuxInterface</class-id><body></body></comment><class><name>InterBaseWin32Interface</name><environment>Database</environment><super>Database.InterBaseInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Database.InterBaseWin32InterfaceDictionary.*			</imports><category>Database-InterBase</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item>gds32.dll</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseWin32Interface</class-id><body></body></comment><class><name>InterBaseDatabase</name><environment>Database</environment><super>Database.ExternalDatabaseConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>databaseHandleHolder statusBufferHolder dialect role charSet databaseParameters transactions </inst-vars><class-inst-vars>signalMap defaultDialect </class-inst-vars><imports></imports><category>Database-InterBase</category><attributes><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseDatabase</class-id><body>InterbaseDatabase is the concrete class implementation of database attachement services using the Interbase API library.Instance Variables:	databaseHandleHolder	&lt;ValueHolder&gt;  value holder which remembers the pointer for the current 'db_handle'	statusBufferHolder	&lt;ValueHolder&gt;  value holder with StatusBuffer instance	dialect	&lt;Integer&gt;  dialect kind (1-3), currently only 3 supported	role	&lt;String&gt;  sql role - connect parameter	charSet	&lt;String&gt;  char set - connect parameter	databaseParameters	&lt;IdentityDictionary key: Symbol value: &lt;Integer | String&gt; &gt;  database attachement parametersShared Variables:	RegisteredInterbaseDatabases	&lt;HandleRegistry&gt;  A private registry of all active InterbaseDatabase instances.  An active attachement		either currently holds a db_handle or is paused and is ready to again hold such resources.Class Instance Variables:	signalMap	&lt;IdentityDictionary key: ?type? value: ?type?&gt;  comment	defaultDialect	&lt;Integer&gt;  dialect kind (1-3), currently only 3 supported</body></comment><class><name>InterBaseBuffer</name><environment>Database</environment><super>Database.ExternalDatabaseBuffer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>getSelector setSelector nullsPossible scale indicatorPointer varSizePointer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-InterBase</category><attributes><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseBuffer</class-id><body></body></comment><class><name>InterBaseArrayItemBuffer</name><environment>Database</environment><super>Database.InterBaseBuffer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bufferSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-InterBase</category><attributes><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseArrayItemBuffer</class-id><body></body></comment><class><name>InterBaseTransaction</name><environment>Database</environment><super>Database.ExternalDatabaseTransaction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>trHandleHolder statusBufferHolder tpbHolder tp retainMode tpbSize autoCommitHolder </inst-vars><class-inst-vars>defaultRetainMode </class-inst-vars><imports></imports><category>Database-InterBase</category><attributes><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseTransaction</class-id><body>Class InterbaseTransaction is the concrete implementation of the transaction concept for the Database Connect for Interbase/Firebird.Warning: methods from *transaction*  categories are subject to change (ugly code to emulate autocommit/retain behavior after much trial and error). Don't use them !Instance Variables:	trHandleHolder	&lt;ValueModel&gt; hold transaction handle	statusBufferHolder	&lt;IBStatusBuffer&gt; hold status buffer instance	tpbHolder	&lt;&gt; transaction parameter block 	tp	&lt;Array of: Symbol&gt;  transaction parameters	retainMode	&lt;Boolean&gt;  retain mode flag	autoCommit	&lt;Boolean&gt;  auto commit mode flagShared Variables:	RegisteredInterbaseTransactions	&lt;HandleRegistry&gt;  comment	TpbConstants	&lt;type&gt;  commentClass Instance Variables:	defaultRetainMode	&lt;Boolean&gt;  comment</body></comment><class><name>InterBaseConnection</name><environment>Database</environment><super>Database.ExternalDatabaseConnection</super><private>false</private><indexed-type>none</indexed-type><inst-vars>database dialect role charSet </inst-vars><class-inst-vars>defaultDialect </class-inst-vars><imports></imports><category>Database-InterBase</category><attributes><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseConnection</class-id><body>Instance Variables:	database	&lt;InterbaseDatabase&gt;  hold InterbaseDatabase instance	dialect	&lt;Integer&gt;  dialect kind (1-3), currently only 3 supported	role	&lt;String&gt;  sql role - connect parameter	charSet	&lt;String&gt;  char set - connect parameterShared Variables:	SupportedIsolationLevels	&lt;IdentityDictionary key: ?type? value: ?type?&gt;  commentClass Instance Variables:	defaultDialect	&lt;Integer&gt;  dialect kind (1-3), currently only 3 supported</body></comment><class><name>InterBaseError</name><environment>Database</environment><super>Database.ExternalDatabaseError</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-InterBase</category><attributes><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseError</class-id><body></body></comment><class><name>IBStatusBuffer</name><environment>Database</environment><super>Core.Object</super><private>true</private><indexed-type>none</indexed-type><inst-vars>statusBuffer sbp message </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-InterBase</category><attributes><package>IBEXDI</package></attributes></class><comment><class-id>Database.IBStatusBuffer</class-id><body>IBStatusBuffer Instance Variables:	statusBuffer	&lt;CPointer &gt;  status vector pointer	sbp	&lt;CPointer&gt;  comment	message	&lt;CPointer &gt;  commentShared Variables:	Singleton	&lt;type&gt;  alone instance of IBStatusBuffer shared between all connections/sessions						In threaded IBEXDI we shall use different implementation</body></comment><class><name>InterBaseColumnDescription</name><environment>Database</environment><super>Database.ExternalDatabaseColumnDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>ibType subtype relname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-InterBase</category><attributes><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseColumnDescription</class-id><body></body></comment><class><name>InterBaseDatabaseException</name><environment>Database</environment><super>Database.ExternalDatabaseException</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>IBEXDI</category><attributes><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseDatabaseException</class-id><body></body></comment><class><name>IBTransaction</name><environment>Database</environment><super>Database.ExternalDatabaseTransaction</super><private>true</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-InterBase</category><attributes><package>IBEXDI</package></attributes></class><comment><class-id>Database.IBTransaction</class-id><body>Fake transaction class for InterbaseDatabase</body></comment><class><name>InterBaseArray</name><environment>Database</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>arrayId array sqlname relname dimensions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-InterBase</category><attributes><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseArray</class-id><body>IBArray is a wrapper for SequenceableColection subclassesInstance Variables:	array	&lt;Array of: Object&gt;  wrapped collection	sqlname	&lt;String&gt;  Interbase array column name 	relname	&lt;String&gt;  Interbase table name	dimensions	&lt;Array of: Array&gt;  represent array dimensions(slices), currently only one-dimensional arrays supported</body></comment><class><name>InterBaseArrayBuffer</name><environment>Database</environment><super>Database.InterBaseBuffer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bufferValue arrayDescriptor arrayDimensions itemDescriptor itemBuffer connection sqlname relname statusBuffer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-InterBase</category><attributes><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseArrayBuffer</class-id><body></body></comment><class><name>InterBaseSession</name><environment>Database</environment><super>Database.ExternalDatabaseSession</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hstmtHolder statusBufferHolder bindValuePointersHolder paramDescriptions mustResendQueryHolder sqldaHolder outSqldaHolder minSqlvarSize resultsCache stmtType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-InterBase</category><attributes><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseSession</class-id><body></body></comment><class><name>InterBaseLargeBuffer</name><environment>Database</environment><super>Database.InterBaseBuffer</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bufferValue subtype segment currentSegmentSize segmentSize blobHandle blobInfo resultBuffer connection statusBuffer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-InterBase</category><attributes><package>IBEXDI</package></attributes></class><comment><class-id>Database.InterBaseLargeBuffer</class-id><body></body></comment><shared-variable><name>RegisteredInterbaseDatabases</name><environment>Database.InterBaseDatabase</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultFixedSizeMap</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultDatePointerType</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultTimestampPointerType</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultLongPointerType</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultLongLongPointerType</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>InterbaseSqlToBlrTypeMap</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><initializer>nil</initializer><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultArrayDescriptorPointerType</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultDoublePointerType</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultFloatPointerType</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultArrayDescriptorType</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultInt64PointerType</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>InterbasePointerTypeMap</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultQUADPointerType</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultShortPointerType</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>SmalltalkToInterbaseTypeMap</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultTimePointerType</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultUnsignedShortPointerType</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>PutSelectorMap</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DefaultUnsignedCharPointerType</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>InterbaseBlrToSqlTypeMap</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><initializer>nil</initializer><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>GetSelectorMap</name><environment>Database.InterBaseBuffer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>SupportedIsolationLevels</name><environment>Database.InterBaseConnection</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>Singleton</name><environment>Database.IBStatusBuffer</environment><private>false</private><constant>false</constant><category>shared</category><initializer>nil</initializer><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>TransactionParameterMap</name><environment>Database.InterBaseInterface</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>SecProtocolMap</name><environment>Database.InterBaseInterface</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DatabaseParameterMap</name><environment>Database.InterBaseInterface</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>DatabaseInfoMap</name><environment>Database.InterBaseInterface</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>RegisteredInterbaseSessions</name><environment>Database.InterBaseSession</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>InterBaseLinuxInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>InterBaseWin32InterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>InterBaseInterfaceDictionary</name><environment>Database</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>RegisteredInterbaseTransactions</name><environment>Database.InterBaseTransaction</environment><private>false</private><constant>false</constant><category>registry</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>PutRequestBuffer</name><environment>Database.InterBaseLargeBuffer</environment><private>false</private><constant>false</constant><category>buffers</category><initializer>nil</initializer><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>LengthPointerType</name><environment>Database.InterBaseLargeBuffer</environment><private>false</private><constant>false</constant><category>buffers</category><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>GetRequestBuffer</name><environment>Database.InterBaseLargeBuffer</environment><private>false</private><constant>false</constant><category>buffers</category><initializer>nil</initializer><attributes><package>IBEXDI</package></attributes></shared-variable><shared-variable><name>InterbaseDatatypeToClassMap</name><environment>Database.InterBaseColumnDescription</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>IBEXDI</package></attributes></shared-variable><methods><class-id>Database.InterBaseInterface</class-id> <category>defines</category><body package="IBEXDI" selector="DSQL_close">DSQL_close	&lt;C: #define DSQL_close 1	&gt;</body><body package="IBEXDI" selector="DSQL_drop">DSQL_drop	&lt;C: #define DSQL_drop 2	&gt;</body><body package="IBEXDI" selector="HARBOR_MERGE">HARBOR_MERGE	&lt;C: #define HARBOR_MERGE 	&gt;</body><body package="IBEXDI" selector="ISCCFG_ANYEVNTMEM_KEY">ISCCFG_ANYEVNTMEM_KEY	&lt;C: #define ISCCFG_ANYEVNTMEM_KEY 13	&gt;</body><body package="IBEXDI" selector="ISCCFG_ANYLOCKMEM_KEY">ISCCFG_ANYLOCKMEM_KEY	&lt;C: #define ISCCFG_ANYLOCKMEM_KEY 10	&gt;</body><body package="IBEXDI" selector="ISCCFG_ANYLOCKSEM_KEY">ISCCFG_ANYLOCKSEM_KEY	&lt;C: #define ISCCFG_ANYLOCKSEM_KEY 11	&gt;</body><body package="IBEXDI" selector="ISCCFG_ANYLOCKSIG_KEY">ISCCFG_ANYLOCKSIG_KEY	&lt;C: #define ISCCFG_ANYLOCKSIG_KEY 12	&gt;</body><body package="IBEXDI" selector="ISCCFG_CONN_TIMEOUT_KEY">ISCCFG_CONN_TIMEOUT_KEY	&lt;C: #define ISCCFG_CONN_TIMEOUT_KEY 17	&gt;</body><body package="IBEXDI" selector="ISCCFG_DBCACHE_KEY">ISCCFG_DBCACHE_KEY	&lt;C: #define ISCCFG_DBCACHE_KEY 4	&gt;</body><body package="IBEXDI" selector="ISCCFG_DEADLOCK_KEY">ISCCFG_DEADLOCK_KEY	&lt;C: #define ISCCFG_DEADLOCK_KEY 15	&gt;</body><body package="IBEXDI" selector="ISCCFG_DUMMY_INTRVL_KEY">ISCCFG_DUMMY_INTRVL_KEY	&lt;C: #define ISCCFG_DUMMY_INTRVL_KEY 18	&gt;</body><body package="IBEXDI" selector="ISCCFG_EVNTMEM_KEY">ISCCFG_EVNTMEM_KEY	&lt;C: #define ISCCFG_EVNTMEM_KEY 3	&gt;</body><body package="IBEXDI" selector="ISCCFG_IPCMAP_KEY">ISCCFG_IPCMAP_KEY	&lt;C: #define ISCCFG_IPCMAP_KEY 6	&gt;</body><body package="IBEXDI" selector="ISCCFG_LOCKHASH_KEY">ISCCFG_LOCKHASH_KEY	&lt;C: #define ISCCFG_LOCKHASH_KEY 14	&gt;</body><body package="IBEXDI" selector="ISCCFG_LOCKMEM_KEY">ISCCFG_LOCKMEM_KEY	&lt;C: #define ISCCFG_LOCKMEM_KEY 0	&gt;</body><body package="IBEXDI" selector="ISCCFG_LOCKORDER_KEY">ISCCFG_LOCKORDER_KEY	&lt;C: #define ISCCFG_LOCKORDER_KEY 9	&gt;</body><body package="IBEXDI" selector="ISCCFG_LOCKSEM_KEY">ISCCFG_LOCKSEM_KEY	&lt;C: #define ISCCFG_LOCKSEM_KEY 1	&gt;</body><body package="IBEXDI" selector="ISCCFG_LOCKSIG_KEY">ISCCFG_LOCKSIG_KEY	&lt;C: #define ISCCFG_LOCKSIG_KEY 2	&gt;</body><body package="IBEXDI" selector="ISCCFG_LOCKSPIN_KEY">ISCCFG_LOCKSPIN_KEY	&lt;C: #define ISCCFG_LOCKSPIN_KEY 16	&gt;</body><body package="IBEXDI" selector="ISCCFG_MEMMAX_KEY">ISCCFG_MEMMAX_KEY	&lt;C: #define ISCCFG_MEMMAX_KEY 8	&gt;</body><body package="IBEXDI" selector="ISCCFG_MEMMIN_KEY">ISCCFG_MEMMIN_KEY	&lt;C: #define ISCCFG_MEMMIN_KEY 7	&gt;</body><body package="IBEXDI" selector="ISCCFG_PRIORITY_KEY">ISCCFG_PRIORITY_KEY	&lt;C: #define ISCCFG_PRIORITY_KEY 5	&gt;</body><body package="IBEXDI" selector="ISCCFG_REMOTE_BUFFER_KEY">ISCCFG_REMOTE_BUFFER_KEY	&lt;C: #define ISCCFG_REMOTE_BUFFER_KEY 20	&gt;</body><body package="IBEXDI" selector="ISCCFG_TRACE_POOLS_KEY">ISCCFG_TRACE_POOLS_KEY	&lt;C: #define ISCCFG_TRACE_POOLS_KEY 19	&gt;</body><body package="IBEXDI" selector="ISC_EXPORT">ISC_EXPORT	&lt;C: #define ISC_EXPORT 	&gt;</body><body package="IBEXDI" selector="ISC_EXPORT_VARARG">ISC_EXPORT_VARARG	&lt;C: #define ISC_EXPORT_VARARG 	&gt;</body><body package="IBEXDI" selector="ISC_FALSE">ISC_FALSE	&lt;C: #define ISC_FALSE 0	&gt;</body><body package="IBEXDI" selector="ISC_FAR">ISC_FAR	&lt;C: #define ISC_FAR 	&gt;</body><body package="IBEXDI" selector="ISC_LONG">ISC_LONG	&lt;C: #define ISC_LONG long	&gt;</body><body package="IBEXDI" selector="ISC_QUAD">ISC_QUAD	&lt;C: #define ISC_QUAD GDS_QUAD	&gt;</body><body package="IBEXDI" selector="ISC_STATUS">ISC_STATUS	&lt;C: #define ISC_STATUS long	&gt;</body><body package="IBEXDI" selector="ISC_TIME_SECONDS_PRECISION">ISC_TIME_SECONDS_PRECISION	&lt;C: #define ISC_TIME_SECONDS_PRECISION 10000	&gt;</body><body package="IBEXDI" selector="ISC_TIME_SECONDS_PRECISION_SCALE">ISC_TIME_SECONDS_PRECISION_SCALE	&lt;C: #define ISC_TIME_SECONDS_PRECISION_SCALE -4	&gt;</body><body package="IBEXDI" selector="ISC_TRUE">ISC_TRUE	&lt;C: #define ISC_TRUE 1	&gt;</body><body package="IBEXDI" selector="ISC_ULONG">ISC_ULONG	&lt;C: #define ISC_ULONG unsigned long	&gt;</body><body package="IBEXDI" selector="ISC_USHORT">ISC_USHORT	&lt;C: #define ISC_USHORT unsigned short	&gt;</body><body package="IBEXDI" selector="ISC__FALSE">ISC__FALSE	&lt;C: #define ISC__FALSE ISC_FALSE	&gt;</body><body package="IBEXDI" selector="ISC__TRUE">ISC__TRUE	&lt;C: #define ISC__TRUE ISC_TRUE	&gt;</body><body package="IBEXDI" selector="RDB_id_assigned">RDB_id_assigned	&lt;C: #define RDB_id_assigned 2	&gt;</body><body package="IBEXDI" selector="RDB_system">RDB_system	&lt;C: #define RDB_system 1	&gt;</body><body package="IBEXDI" selector="SQLDA_VERSION1">SQLDA_VERSION1	&lt;C: #define SQLDA_VERSION1 1	&gt;</body><body package="IBEXDI" selector="SQL_ARRAY">SQL_ARRAY	&lt;C: #define SQL_ARRAY 540	&gt;</body><body package="IBEXDI" selector="SQL_BLOB">SQL_BLOB	&lt;C: #define SQL_BLOB 520	&gt;</body><body package="IBEXDI" selector="SQL_DATE">SQL_DATE	&lt;C: #define SQL_DATE SQL_TIMESTAMP	&gt;</body><body package="IBEXDI" selector="SQL_DIALECT_CURRENT">SQL_DIALECT_CURRENT	&lt;C: #define SQL_DIALECT_CURRENT SQL_DIALECT_V6	&gt;</body><body package="IBEXDI" selector="SQL_DIALECT_V5">SQL_DIALECT_V5	&lt;C: #define SQL_DIALECT_V5 1	&gt;</body><body package="IBEXDI" selector="SQL_DIALECT_V6">SQL_DIALECT_V6	&lt;C: #define SQL_DIALECT_V6 3#de	&gt;</body><body package="IBEXDI" selector="SQL_DIALECT_V6_TRANSITION">SQL_DIALECT_V6_TRANSITION	&lt;C: #define SQL_DIALECT_V6_TRANSITION 2	&gt;</body><body package="IBEXDI" selector="SQL_DOUBLE">SQL_DOUBLE	&lt;C: #define SQL_DOUBLE 480	&gt;</body><body package="IBEXDI" selector="SQL_D_FLOAT">SQL_D_FLOAT	&lt;C: #define SQL_D_FLOAT 530	&gt;</body><body package="IBEXDI" selector="SQL_FLOAT">SQL_FLOAT	&lt;C: #define SQL_FLOAT 482	&gt;</body><body package="IBEXDI" selector="SQL_INT64">SQL_INT64	&lt;C: #define SQL_INT64 580	&gt;</body><body package="IBEXDI" selector="SQL_LONG">SQL_LONG	&lt;C: #define SQL_LONG 496	&gt;</body><body package="IBEXDI" selector="SQL_QUAD">SQL_QUAD	&lt;C: #define SQL_QUAD 550	&gt;</body><body package="IBEXDI" selector="SQL_SHORT">SQL_SHORT	&lt;C: #define SQL_SHORT 500	&gt;</body><body package="IBEXDI" selector="SQL_TEXT">SQL_TEXT	&lt;C: #define SQL_TEXT 452	&gt;</body><body package="IBEXDI" selector="SQL_TIMESTAMP">SQL_TIMESTAMP	&lt;C: #define SQL_TIMESTAMP 510	&gt;</body><body package="IBEXDI" selector="SQL_TYPE_DATE">SQL_TYPE_DATE	&lt;C: #define SQL_TYPE_DATE 570	&gt;</body><body package="IBEXDI" selector="SQL_TYPE_TIME">SQL_TYPE_TIME	&lt;C: #define SQL_TYPE_TIME 560	&gt;</body><body package="IBEXDI" selector="SQL_VARYING">SQL_VARYING	&lt;C: #define SQL_VARYING 448	&gt;</body><body package="IBEXDI" selector="_ISC_TIMESTAMP_">_ISC_TIMESTAMP_	&lt;C: #define _ISC_TIMESTAMP_ 1	&gt;</body><body package="IBEXDI" selector="_JRD_IBASE_H_">_JRD_IBASE_H_	&lt;C: #define _JRD_IBASE_H_ 	&gt;</body><body package="IBEXDI" selector="__DATE__">__DATE__	&lt;C: #define __DATE__ "April 26, 2001"	&gt;</body><body package="IBEXDI" selector="__FILE__">__FILE__	&lt;C: #define __FILE__ 	&gt;</body><body package="IBEXDI" selector="__LINE__">__LINE__	&lt;C: #define __LINE__ 0	&gt;</body><body package="IBEXDI" selector="__STDC__">__STDC__	&lt;C: #define __STDC__ 1	&gt;</body><body package="IBEXDI" selector="__TIME__">__TIME__	&lt;C: #define __TIME__ "10:16:55 am"	&gt;</body><body package="IBEXDI" selector="blr_abort">blr_abort	&lt;C: #define blr_abort 128	&gt;</body><body package="IBEXDI" selector="blr_add">blr_add	&lt;C: #define blr_add 34	&gt;</body><body package="IBEXDI" selector="blr_add2">blr_add2	&lt;C: #define blr_add2 163	&gt;</body><body package="IBEXDI" selector="blr_agg_average">blr_agg_average	&lt;C: #define blr_agg_average 87	&gt;</body><body package="IBEXDI" selector="blr_agg_average2">blr_agg_average2	&lt;C: #define blr_agg_average2 169	&gt;</body><body package="IBEXDI" selector="blr_agg_average_distinct">blr_agg_average_distinct	&lt;C: #define blr_agg_average_distinct 96	&gt;</body><body package="IBEXDI" selector="blr_agg_average_distinct2">blr_agg_average_distinct2	&lt;C: #define blr_agg_average_distinct2 170	&gt;</body><body package="IBEXDI" selector="blr_agg_count">blr_agg_count	&lt;C: #define blr_agg_count 83	&gt;</body><body package="IBEXDI" selector="blr_agg_count2">blr_agg_count2	&lt;C: #define blr_agg_count2 93	&gt;</body><body package="IBEXDI" selector="blr_agg_count_distinct">blr_agg_count_distinct	&lt;C: #define blr_agg_count_distinct 94	&gt;</body><body package="IBEXDI" selector="blr_agg_max">blr_agg_max	&lt;C: #define blr_agg_max 84	&gt;</body><body package="IBEXDI" selector="blr_agg_min">blr_agg_min	&lt;C: #define blr_agg_min 85	&gt;</body><body package="IBEXDI" selector="blr_agg_total">blr_agg_total	&lt;C: #define blr_agg_total 86	&gt;</body><body package="IBEXDI" selector="blr_agg_total2">blr_agg_total2	&lt;C: #define blr_agg_total2 167	&gt;</body><body package="IBEXDI" selector="blr_agg_total_distinct">blr_agg_total_distinct	&lt;C: #define blr_agg_total_distinct 95	&gt;</body><body package="IBEXDI" selector="blr_agg_total_distinct2">blr_agg_total_distinct2	&lt;C: #define blr_agg_total_distinct2 168	&gt;</body><body package="IBEXDI" selector="blr_aggregate">blr_aggregate	&lt;C: #define blr_aggregate 79	&gt;</body><body package="IBEXDI" selector="blr_and">blr_and	&lt;C: #define blr_and 58	&gt;</body><body package="IBEXDI" selector="blr_ansi_all">blr_ansi_all	&lt;C: #define blr_ansi_all 158	&gt;</body><body package="IBEXDI" selector="blr_ansi_any">blr_ansi_any	&lt;C: #define blr_ansi_any 151	&gt;</body><body package="IBEXDI" selector="blr_ansi_like">blr_ansi_like	&lt;C: #define blr_ansi_like 108	&gt;</body><body package="IBEXDI" selector="blr_any">blr_any	&lt;C: #define blr_any 60	&gt;</body><body package="IBEXDI" selector="blr_ascending">blr_ascending	&lt;C: #define blr_ascending 72	&gt;</body><body package="IBEXDI" selector="blr_assignment">blr_assignment	&lt;C: #define blr_assignment 1	&gt;</body><body package="IBEXDI" selector="blr_average">blr_average	&lt;C: #define blr_average 27	&gt;</body><body package="IBEXDI" selector="blr_average2">blr_average2	&lt;C: #define blr_average2 171	&gt;</body><body package="IBEXDI" selector="blr_backward">blr_backward	&lt;C: #define blr_backward 2	&gt;</body><body package="IBEXDI" selector="blr_begin">blr_begin	&lt;C: #define blr_begin 2	&gt;</body><body package="IBEXDI" selector="blr_begin_range">blr_begin_range	&lt;C: #define blr_begin_range 121	&gt;</body><body package="IBEXDI" selector="blr_between">blr_between	&lt;C: #define blr_between 56	&gt;</body><body package="IBEXDI" selector="blr_blob">blr_blob	&lt;C: #define blr_blob 261	&gt;</body><body package="IBEXDI" selector="blr_blob_id">blr_blob_id	&lt;C: #define blr_blob_id 45	&gt;</body><body package="IBEXDI" selector="blr_block">blr_block	&lt;C: #define blr_block 129	&gt;</body><body package="IBEXDI" selector="blr_bof_forward">blr_bof_forward	&lt;C: #define blr_bof_forward 3	&gt;</body><body package="IBEXDI" selector="blr_bookmark">blr_bookmark	&lt;C: #define blr_bookmark 109	&gt;</body><body package="IBEXDI" selector="blr_boolean">blr_boolean	&lt;C: #define blr_boolean 71	&gt;</body><body package="IBEXDI" selector="blr_cardinality">blr_cardinality	&lt;C: #define blr_cardinality 153	&gt;</body><body package="IBEXDI" selector="blr_cast">blr_cast	&lt;C: #define blr_cast 131	&gt;</body><body package="IBEXDI" selector="blr_concatenate">blr_concatenate	&lt;C: #define blr_concatenate 39	&gt;</body><body package="IBEXDI" selector="blr_containing">blr_containing	&lt;C: #define blr_containing 53	&gt;</body><body package="IBEXDI" selector="blr_continue">blr_continue	&lt;C: #define blr_continue 0	&gt;</body><body package="IBEXDI" selector="blr_count">blr_count	&lt;C: #define blr_count 28	&gt;</body><body package="IBEXDI" selector="blr_crack">blr_crack	&lt;C: #define blr_crack 110	&gt;</body><body package="IBEXDI" selector="blr_cstring">blr_cstring	&lt;C: #define blr_cstring 40	&gt;</body><body package="IBEXDI" selector="blr_cstring2">blr_cstring2	&lt;C: #define blr_cstring2 41	&gt;</body><body package="IBEXDI" selector="blr_current_date">blr_current_date	&lt;C: #define blr_current_date 160	&gt;</body><body package="IBEXDI" selector="blr_current_time">blr_current_time	&lt;C: #define blr_current_time 162	&gt;</body><body package="IBEXDI" selector="blr_current_timestamp">blr_current_timestamp	&lt;C: #define blr_current_timestamp 161	&gt;</body><body package="IBEXDI" selector="blr_d_float">blr_d_float	&lt;C: #define blr_d_float 11	&gt;</body><body package="IBEXDI" selector="blr_date">blr_date	&lt;C: #define blr_date blr_timestamp	&gt;</body><body package="IBEXDI" selector="blr_dbkey">blr_dbkey	&lt;C: #define blr_dbkey 22	&gt;</body><body package="IBEXDI" selector="blr_dcl_variable">blr_dcl_variable	&lt;C: #define blr_dcl_variable 3	&gt;</body><body package="IBEXDI" selector="blr_default_code">blr_default_code	&lt;C: #define blr_default_code 4	&gt;</body><body package="IBEXDI" selector="blr_delete_range">blr_delete_range	&lt;C: #define blr_delete_range 123	&gt;</body><body package="IBEXDI" selector="blr_delete_ranges">blr_delete_ranges	&lt;C: #define blr_delete_ranges 138	&gt;</body><body package="IBEXDI" selector="blr_descending">blr_descending	&lt;C: #define blr_descending 73	&gt;</body><body package="IBEXDI" selector="blr_divide">blr_divide	&lt;C: #define blr_divide 37	&gt;</body><body package="IBEXDI" selector="blr_divide2">blr_divide2	&lt;C: #define blr_divide2 166	&gt;</body><body package="IBEXDI" selector="blr_double">blr_double	&lt;C: #define blr_double 27	&gt;</body><body package="IBEXDI" selector="blr_end">blr_end	&lt;C: #define blr_end 255	&gt;</body><body package="IBEXDI" selector="blr_end_range">blr_end_range	&lt;C: #define blr_end_range 122	&gt;</body><body package="IBEXDI" selector="blr_end_savepoint">blr_end_savepoint	&lt;C: #define blr_end_savepoint 135	&gt;</body><body package="IBEXDI" selector="blr_eoc">blr_eoc	&lt;C: #define blr_eoc 76	&gt;</body><body package="IBEXDI" selector="blr_eof_backward">blr_eof_backward	&lt;C: #define blr_eof_backward 4	&gt;</body><body package="IBEXDI" selector="blr_eql">blr_eql	&lt;C: #define blr_eql 47	&gt;</body><body package="IBEXDI" selector="blr_erase">blr_erase	&lt;C: #define blr_erase 5	&gt;</body><body package="IBEXDI" selector="blr_error_handler">blr_error_handler	&lt;C: #define blr_error_handler 130	&gt;</body><body package="IBEXDI" selector="blr_exception">blr_exception	&lt;C: #define blr_exception 2	&gt;</body><body package="IBEXDI" selector="blr_exec_pid">blr_exec_pid	&lt;C: #define blr_exec_pid 126	&gt;</body><body package="IBEXDI" selector="blr_exec_proc">blr_exec_proc	&lt;C: #define blr_exec_proc 120	&gt;</body><body package="IBEXDI" selector="blr_exists">blr_exists	&lt;C: #define blr_exists 152	&gt;</body><body package="IBEXDI" selector="blr_extract">blr_extract	&lt;C: #define blr_extract 159	&gt;</body><body package="IBEXDI" selector="blr_extract_day">blr_extract_day	&lt;C: #define blr_extract_day 2	&gt;</body><body package="IBEXDI" selector="blr_extract_hour">blr_extract_hour	&lt;C: #define blr_extract_hour 3	&gt;</body><body package="IBEXDI" selector="blr_extract_minute">blr_extract_minute	&lt;C: #define blr_extract_minute 4	&gt;</body><body package="IBEXDI" selector="blr_extract_month">blr_extract_month	&lt;C: #define blr_extract_month 1	&gt;</body><body package="IBEXDI" selector="blr_extract_second">blr_extract_second	&lt;C: #define blr_extract_second 5	&gt;</body><body package="IBEXDI" selector="blr_extract_weekday">blr_extract_weekday	&lt;C: #define blr_extract_weekday 6	&gt;</body><body package="IBEXDI" selector="blr_extract_year">blr_extract_year	&lt;C: #define blr_extract_year 0	&gt;</body><body package="IBEXDI" selector="blr_extract_yearday">blr_extract_yearday	&lt;C: #define blr_extract_yearday 7	&gt;</body><body package="IBEXDI" selector="blr_fetch">blr_fetch	&lt;C: #define blr_fetch 6	&gt;</body><body package="IBEXDI" selector="blr_fid">blr_fid	&lt;C: #define blr_fid 24	&gt;</body><body package="IBEXDI" selector="blr_field">blr_field	&lt;C: #define blr_field 23	&gt;</body><body package="IBEXDI" selector="blr_find">blr_find	&lt;C: #define blr_find 113	&gt;</body><body package="IBEXDI" selector="blr_find_dbkey">blr_find_dbkey	&lt;C: #define blr_find_dbkey 136	&gt;</body><body package="IBEXDI" selector="blr_find_dbkey_version">blr_find_dbkey_version	&lt;C: #define blr_find_dbkey_version 157	&gt;</body><body package="IBEXDI" selector="blr_first">blr_first	&lt;C: #define blr_first 68	&gt;</body><body package="IBEXDI" selector="blr_float">blr_float	&lt;C: #define blr_float 10	&gt;</body><body package="IBEXDI" selector="blr_for">blr_for	&lt;C: #define blr_for 7	&gt;</body><body package="IBEXDI" selector="blr_force_crack">blr_force_crack	&lt;C: #define blr_force_crack 111	&gt;</body><body package="IBEXDI" selector="blr_forward">blr_forward	&lt;C: #define blr_forward 1	&gt;</body><body package="IBEXDI" selector="blr_from">blr_from	&lt;C: #define blr_from 42	&gt;</body><body package="IBEXDI" selector="blr_full">blr_full	&lt;C: #define blr_full 3	&gt;</body><body package="IBEXDI" selector="blr_function">blr_function	&lt;C: #define blr_function 100	&gt;</body><body package="IBEXDI" selector="blr_gds_code">blr_gds_code	&lt;C: #define blr_gds_code 0	&gt;</body><body package="IBEXDI" selector="blr_gen_id">blr_gen_id	&lt;C: #define blr_gen_id 101	&gt;</body><body package="IBEXDI" selector="blr_gen_id2">blr_gen_id2	&lt;C: #define blr_gen_id2 172	&gt;</body><body package="IBEXDI" selector="blr_geq">blr_geq	&lt;C: #define blr_geq 50	&gt;</body><body package="IBEXDI" selector="blr_get_bookmark">blr_get_bookmark	&lt;C: #define blr_get_bookmark 117	&gt;</body><body package="IBEXDI" selector="blr_group_by">blr_group_by	&lt;C: #define blr_group_by 78	&gt;</body><body package="IBEXDI" selector="blr_gtr">blr_gtr	&lt;C: #define blr_gtr 49	&gt;</body><body package="IBEXDI" selector="blr_handler">blr_handler	&lt;C: #define blr_handler 11	&gt;</body><body package="IBEXDI" selector="blr_if">blr_if	&lt;C: #define blr_if 8	&gt;</body><body package="IBEXDI" selector="blr_index">blr_index	&lt;C: #define blr_index 107	&gt;</body><body package="IBEXDI" selector="blr_indices">blr_indices	&lt;C: #define blr_indices 144	&gt;</body><body package="IBEXDI" selector="blr_inner">blr_inner	&lt;C: #define blr_inner 0	&gt;</body><body package="IBEXDI" selector="blr_int64">blr_int64	&lt;C: #define blr_int64 16	&gt;</body><body package="IBEXDI" selector="blr_join">blr_join	&lt;C: #define blr_join 141	&gt;</body><body package="IBEXDI" selector="blr_join_type">blr_join_type	&lt;C: #define blr_join_type 80	&gt;</body><body package="IBEXDI" selector="blr_label">blr_label	&lt;C: #define blr_label 17	&gt;</body><body package="IBEXDI" selector="blr_leave">blr_leave	&lt;C: #define blr_leave 18	&gt;</body><body package="IBEXDI" selector="blr_left">blr_left	&lt;C: #define blr_left 1	&gt;</body><body package="IBEXDI" selector="blr_leq">blr_leq	&lt;C: #define blr_leq 52	&gt;</body><body package="IBEXDI" selector="blr_like">blr_like	&lt;C: #define blr_like 63	&gt;</body><body package="IBEXDI" selector="blr_literal">blr_literal	&lt;C: #define blr_literal 21	&gt;</body><body package="IBEXDI" selector="blr_lock_record">blr_lock_record	&lt;C: #define blr_lock_record 115	&gt;</body><body package="IBEXDI" selector="blr_lock_relation">blr_lock_relation	&lt;C: #define blr_lock_relation 114	&gt;</body><body package="IBEXDI" selector="blr_lock_state">blr_lock_state	&lt;C: #define blr_lock_state 104	&gt;</body><body package="IBEXDI" selector="blr_long">blr_long	&lt;C: #define blr_long 8	&gt;</body><body package="IBEXDI" selector="blr_loop">blr_loop	&lt;C: #define blr_loop 9	&gt;</body><body package="IBEXDI" selector="blr_lss">blr_lss	&lt;C: #define blr_lss 51	&gt;</body><body package="IBEXDI" selector="blr_map">blr_map	&lt;C: #define blr_map 77	&gt;</body><body package="IBEXDI" selector="blr_matching">blr_matching	&lt;C: #define blr_matching 54	&gt;</body><body package="IBEXDI" selector="blr_matching2">blr_matching2	&lt;C: #define blr_matching2 106	&gt;</body><body package="IBEXDI" selector="blr_maximum">blr_maximum	&lt;C: #define blr_maximum 29	&gt;</body><body package="IBEXDI" selector="blr_merge">blr_merge	&lt;C: #define blr_merge 140	&gt;</body><body package="IBEXDI" selector="blr_message">blr_message	&lt;C: #define blr_message 4	&gt;</body><body package="IBEXDI" selector="blr_minimum">blr_minimum	&lt;C: #define blr_minimum 30	&gt;</body><body package="IBEXDI" selector="blr_missing">blr_missing	&lt;C: #define blr_missing 61	&gt;</body><body package="IBEXDI" selector="blr_modify">blr_modify	&lt;C: #define blr_modify 10	&gt;</body><body package="IBEXDI" selector="blr_multiply">blr_multiply	&lt;C: #define blr_multiply 36	&gt;</body><body package="IBEXDI" selector="blr_multiply2">blr_multiply2	&lt;C: #define blr_multiply2 165	&gt;</body><body package="IBEXDI" selector="blr_navigational">blr_navigational	&lt;C: #define blr_navigational 143	&gt;</body><body package="IBEXDI" selector="blr_negate">blr_negate	&lt;C: #define blr_negate 38	&gt;</body><body package="IBEXDI" selector="blr_neq">blr_neq	&lt;C: #define blr_neq 48	&gt;</body><body package="IBEXDI" selector="blr_not">blr_not	&lt;C: #define blr_not 59	&gt;</body><body package="IBEXDI" selector="blr_null">blr_null	&lt;C: #define blr_null 45	&gt;</body><body package="IBEXDI" selector="blr_or">blr_or	&lt;C: #define blr_or 57	&gt;</body><body package="IBEXDI" selector="blr_parameter">blr_parameter	&lt;C: #define blr_parameter 25	&gt;</body><body package="IBEXDI" selector="blr_parameter2">blr_parameter2	&lt;C: #define blr_parameter2 41	&gt;</body><body package="IBEXDI" selector="blr_parameter3">blr_parameter3	&lt;C: #define blr_parameter3 88	&gt;</body><body package="IBEXDI" selector="blr_pid">blr_pid	&lt;C: #define blr_pid 125	&gt;</body><body package="IBEXDI" selector="blr_plan">blr_plan	&lt;C: #define blr_plan 139	&gt;</body><body package="IBEXDI" selector="blr_post">blr_post	&lt;C: #define blr_post 20	&gt;</body><body package="IBEXDI" selector="blr_procedure">blr_procedure	&lt;C: #define blr_procedure 124	&gt;</body><body package="IBEXDI" selector="blr_project">blr_project	&lt;C: #define blr_project 69	&gt;</body><body package="IBEXDI" selector="blr_prot_mask">blr_prot_mask	&lt;C: #define blr_prot_mask 102	&gt;</body><body package="IBEXDI" selector="blr_quad">blr_quad	&lt;C: #define blr_quad 9	&gt;</body><body package="IBEXDI" selector="blr_range_relation">blr_range_relation	&lt;C: #define blr_range_relation 137	&gt;</body><body package="IBEXDI" selector="blr_receive">blr_receive	&lt;C: #define blr_receive 12	&gt;</body><body package="IBEXDI" selector="blr_record_version">blr_record_version	&lt;C: #define blr_record_version 154	&gt;</body><body package="IBEXDI" selector="blr_relation">blr_relation	&lt;C: #define blr_relation 74	&gt;</body><body package="IBEXDI" selector="blr_relation2">blr_relation2	&lt;C: #define blr_relation2 146	&gt;</body><body package="IBEXDI" selector="blr_release_bookmark">blr_release_bookmark	&lt;C: #define blr_release_bookmark 149	&gt;</body><body package="IBEXDI" selector="blr_release_lock">blr_release_lock	&lt;C: #define blr_release_lock 132	&gt;</body><body package="IBEXDI" selector="blr_release_locks">blr_release_locks	&lt;C: #define blr_release_locks 133	&gt;</body><body package="IBEXDI" selector="blr_reset_stream">blr_reset_stream	&lt;C: #define blr_reset_stream 148	&gt;</body><body package="IBEXDI" selector="blr_retrieve">blr_retrieve	&lt;C: #define blr_retrieve 145	&gt;</body><body package="IBEXDI" selector="blr_rid">blr_rid	&lt;C: #define blr_rid 75	&gt;</body><body package="IBEXDI" selector="blr_rid2">blr_rid2	&lt;C: #define blr_rid2 147	&gt;</body><body package="IBEXDI" selector="blr_right">blr_right	&lt;C: #define blr_right 2	&gt;</body><body package="IBEXDI" selector="blr_rs_stream">blr_rs_stream	&lt;C: #define blr_rs_stream 119	&gt;</body><body package="IBEXDI" selector="blr_rse">blr_rse	&lt;C: #define blr_rse 67	&gt;</body><body package="IBEXDI" selector="blr_run_average">blr_run_average	&lt;C: #define blr_run_average 92	&gt;</body><body package="IBEXDI" selector="blr_run_count">blr_run_count	&lt;C: #define blr_run_count 118	&gt;</body><body package="IBEXDI" selector="blr_run_max">blr_run_max	&lt;C: #define blr_run_max 89	&gt;</body><body package="IBEXDI" selector="blr_run_min">blr_run_min	&lt;C: #define blr_run_min 90	&gt;</body><body package="IBEXDI" selector="blr_run_total">blr_run_total	&lt;C: #define blr_run_total 91	&gt;</body><body package="IBEXDI" selector="blr_seek">blr_seek	&lt;C: #define blr_seek 112	&gt;</body><body package="IBEXDI" selector="blr_seek_no_warn">blr_seek_no_warn	&lt;C: #define blr_seek_no_warn 156	&gt;</body><body package="IBEXDI" selector="blr_select">blr_select	&lt;C: #define blr_select 13	&gt;</body><body package="IBEXDI" selector="blr_send">blr_send	&lt;C: #define blr_send 14	&gt;</body><body package="IBEXDI" selector="blr_sequential">blr_sequential	&lt;C: #define blr_sequential 142	&gt;</body><body package="IBEXDI" selector="blr_set_bookmark">blr_set_bookmark	&lt;C: #define blr_set_bookmark 116	&gt;</body><body package="IBEXDI" selector="blr_set_generator">blr_set_generator	&lt;C: #define blr_set_generator 150	&gt;</body><body package="IBEXDI" selector="blr_set_generator2">blr_set_generator2	&lt;C: #define blr_set_generator2 173	&gt;</body><body package="IBEXDI" selector="blr_set_index">blr_set_index	&lt;C: #define blr_set_index 66	&gt;</body><body package="IBEXDI" selector="blr_short">blr_short	&lt;C: #define blr_short 7	&gt;</body><body package="IBEXDI" selector="blr_singular">blr_singular	&lt;C: #define blr_singular 127	&gt;</body><body package="IBEXDI" selector="blr_sort">blr_sort	&lt;C: #define blr_sort 70	&gt;</body><body package="IBEXDI" selector="blr_sql_code">blr_sql_code	&lt;C: #define blr_sql_code 1	&gt;</body><body package="IBEXDI" selector="blr_sql_date">blr_sql_date	&lt;C: #define blr_sql_date 12	&gt;</body><body package="IBEXDI" selector="blr_sql_time">blr_sql_time	&lt;C: #define blr_sql_time 13	&gt;</body><body package="IBEXDI" selector="blr_stall">blr_stall	&lt;C: #define blr_stall 155	&gt;</body><body package="IBEXDI" selector="blr_start_savepoint">blr_start_savepoint	&lt;C: #define blr_start_savepoint 134	&gt;</body><body package="IBEXDI" selector="blr_starting">blr_starting	&lt;C: #define blr_starting 55	&gt;</body><body package="IBEXDI" selector="blr_store">blr_store	&lt;C: #define blr_store 15	&gt;</body><body package="IBEXDI" selector="blr_store2">blr_store2	&lt;C: #define blr_store2 19	&gt;</body><body package="IBEXDI" selector="blr_stream">blr_stream	&lt;C: #define blr_stream 65	&gt;</body><body package="IBEXDI" selector="blr_substring">blr_substring	&lt;C: #define blr_substring 40	&gt;</body><body package="IBEXDI" selector="blr_subtract">blr_subtract	&lt;C: #define blr_subtract 35	&gt;</body><body package="IBEXDI" selector="blr_subtract2">blr_subtract2	&lt;C: #define blr_subtract2 164	&gt;</body><body package="IBEXDI" selector="blr_text">blr_text	&lt;C: #define blr_text 14	&gt;</body><body package="IBEXDI" selector="blr_text2">blr_text2	&lt;C: #define blr_text2 15	&gt;</body><body package="IBEXDI" selector="blr_timestamp">blr_timestamp	&lt;C: #define blr_timestamp 35	&gt;</body><body package="IBEXDI" selector="blr_total">blr_total	&lt;C: #define blr_total 31	&gt;</body><body package="IBEXDI" selector="blr_trigger_code">blr_trigger_code	&lt;C: #define blr_trigger_code 3	&gt;</body><body package="IBEXDI" selector="blr_union">blr_union	&lt;C: #define blr_union 76	&gt;</body><body package="IBEXDI" selector="blr_unique">blr_unique	&lt;C: #define blr_unique 62	&gt;</body><body package="IBEXDI" selector="blr_upcase">blr_upcase	&lt;C: #define blr_upcase 103	&gt;</body><body package="IBEXDI" selector="blr_user_name">blr_user_name	&lt;C: #define blr_user_name 44	&gt;</body><body package="IBEXDI" selector="blr_value_if">blr_value_if	&lt;C: #define blr_value_if 105	&gt;</body><body package="IBEXDI" selector="blr_variable">blr_variable	&lt;C: #define blr_variable 26	&gt;</body><body package="IBEXDI" selector="blr_varying">blr_varying	&lt;C: #define blr_varying 37	&gt;</body><body package="IBEXDI" selector="blr_varying2">blr_varying2	&lt;C: #define blr_varying2 38	&gt;</body><body package="IBEXDI" selector="blr_version4">blr_version4	&lt;C: #define blr_version4 4	&gt;</body><body package="IBEXDI" selector="blr_version5">blr_version5	&lt;C: #define blr_version5 5	&gt;</body><body package="IBEXDI" selector="blr_via">blr_via	&lt;C: #define blr_via 43	&gt;</body><body package="IBEXDI" selector="isc_action_svc_add_license">isc_action_svc_add_license	&lt;C: #define isc_action_svc_add_license 9	&gt;</body><body package="IBEXDI" selector="isc_action_svc_add_user">isc_action_svc_add_user	&lt;C: #define isc_action_svc_add_user 4	&gt;</body><body package="IBEXDI" selector="isc_action_svc_backup">isc_action_svc_backup	&lt;C: #define isc_action_svc_backup 1	&gt;</body><body package="IBEXDI" selector="isc_action_svc_db_stats">isc_action_svc_db_stats	&lt;C: #define isc_action_svc_db_stats 11	&gt;</body><body package="IBEXDI" selector="isc_action_svc_delete_user">isc_action_svc_delete_user	&lt;C: #define isc_action_svc_delete_user 5	&gt;</body><body package="IBEXDI" selector="isc_action_svc_display_user">isc_action_svc_display_user	&lt;C: #define isc_action_svc_display_user 7	&gt;</body><body package="IBEXDI" selector="isc_action_svc_get_ib_log">isc_action_svc_get_ib_log	&lt;C: #define isc_action_svc_get_ib_log 12	&gt;</body><body package="IBEXDI" selector="isc_action_svc_modify_user">isc_action_svc_modify_user	&lt;C: #define isc_action_svc_modify_user 6	&gt;</body><body package="IBEXDI" selector="isc_action_svc_properties">isc_action_svc_properties	&lt;C: #define isc_action_svc_properties 8	&gt;</body><body package="IBEXDI" selector="isc_action_svc_remove_license">isc_action_svc_remove_license	&lt;C: #define isc_action_svc_remove_license 10	&gt;</body><body package="IBEXDI" selector="isc_action_svc_repair">isc_action_svc_repair	&lt;C: #define isc_action_svc_repair 3	&gt;</body><body package="IBEXDI" selector="isc_action_svc_restore">isc_action_svc_restore	&lt;C: #define isc_action_svc_restore 2	&gt;</body><body package="IBEXDI" selector="isc_adm_task_denied">isc_adm_task_denied	&lt;C: #define isc_adm_task_denied 335544788	&gt;</body><body package="IBEXDI" selector="isc_alias_conflict_err">isc_alias_conflict_err	&lt;C: #define isc_alias_conflict_err 335544620	&gt;</body><body package="IBEXDI" selector="isc_arg_cstring">isc_arg_cstring	&lt;C: #define isc_arg_cstring 3	&gt;</body><body package="IBEXDI" selector="isc_arg_domain">isc_arg_domain	&lt;C: #define isc_arg_domain 8	&gt;</body><body package="IBEXDI" selector="isc_arg_dos">isc_arg_dos	&lt;C: #define isc_arg_dos 9	&gt;</body><body package="IBEXDI" selector="isc_arg_end">isc_arg_end	&lt;C: #define isc_arg_end 0	&gt;</body><body package="IBEXDI" selector="isc_arg_gds">isc_arg_gds	&lt;C: #define isc_arg_gds 1	&gt;</body><body package="IBEXDI" selector="isc_arg_interpreted">isc_arg_interpreted	&lt;C: #define isc_arg_interpreted 5	&gt;</body><body package="IBEXDI" selector="isc_arg_mpexl">isc_arg_mpexl	&lt;C: #define isc_arg_mpexl 10	&gt;</body><body package="IBEXDI" selector="isc_arg_mpexl_ipc">isc_arg_mpexl_ipc	&lt;C: #define isc_arg_mpexl_ipc 11	&gt;</body><body package="IBEXDI" selector="isc_arg_netware">isc_arg_netware	&lt;C: #define isc_arg_netware 16	&gt;</body><body package="IBEXDI" selector="isc_arg_next_mach">isc_arg_next_mach	&lt;C: #define isc_arg_next_mach 15	&gt;</body><body package="IBEXDI" selector="isc_arg_number">isc_arg_number	&lt;C: #define isc_arg_number 4	&gt;</body><body package="IBEXDI" selector="isc_arg_string">isc_arg_string	&lt;C: #define isc_arg_string 2	&gt;</body><body package="IBEXDI" selector="isc_arg_unix">isc_arg_unix	&lt;C: #define isc_arg_unix 7	&gt;</body><body package="IBEXDI" selector="isc_arg_vms">isc_arg_vms	&lt;C: #define isc_arg_vms 6	&gt;</body><body package="IBEXDI" selector="isc_arg_warning">isc_arg_warning	&lt;C: #define isc_arg_warning 18	&gt;</body><body package="IBEXDI" selector="isc_arg_win32">isc_arg_win32	&lt;C: #define isc_arg_win32 17	&gt;</body><body package="IBEXDI" selector="isc_arith_except">isc_arith_except	&lt;C: #define isc_arith_except 335544321	&gt;</body><body package="IBEXDI" selector="isc_array_idx_err">isc_array_idx_err	&lt;C: #define isc_array_idx_err 335544671	&gt;</body><body package="IBEXDI" selector="isc_bad_checksum">isc_bad_checksum	&lt;C: #define isc_bad_checksum 335544649	&gt;</body><body package="IBEXDI" selector="isc_bad_db_format">isc_bad_db_format	&lt;C: #define isc_bad_db_format 335544323	&gt;</body><body package="IBEXDI" selector="isc_bad_db_handle">isc_bad_db_handle	&lt;C: #define isc_bad_db_handle 335544324	&gt;</body><body package="IBEXDI" selector="isc_bad_dbkey">isc_bad_dbkey	&lt;C: #define isc_bad_dbkey 335544322	&gt;</body><body package="IBEXDI" selector="isc_bad_default_value">isc_bad_default_value	&lt;C: #define isc_bad_default_value 335544759	&gt;</body><body package="IBEXDI" selector="isc_bad_detach">isc_bad_detach	&lt;C: #define isc_bad_detach 335544441	&gt;</body><body package="IBEXDI" selector="isc_bad_dpb_content">isc_bad_dpb_content	&lt;C: #define isc_bad_dpb_content 335544325	&gt;</body><body package="IBEXDI" selector="isc_bad_dpb_form">isc_bad_dpb_form	&lt;C: #define isc_bad_dpb_form 335544326	&gt;</body><body package="IBEXDI" selector="isc_bad_lock_handle">isc_bad_lock_handle	&lt;C: #define isc_bad_lock_handle 335544519	&gt;</body><body package="IBEXDI" selector="isc_bad_lock_level">isc_bad_lock_level	&lt;C: #define isc_bad_lock_level 335544474	&gt;</body><body package="IBEXDI" selector="isc_bad_msg_vec">isc_bad_msg_vec	&lt;C: #define isc_bad_msg_vec 335544440	&gt;</body><body package="IBEXDI" selector="isc_bad_protocol">isc_bad_protocol	&lt;C: #define isc_bad_protocol 335544751	&gt;</body><body package="IBEXDI" selector="isc_bad_req_handle">isc_bad_req_handle	&lt;C: #define isc_bad_req_handle 335544327	&gt;</body><body package="IBEXDI" selector="isc_bad_sec_info">isc_bad_sec_info	&lt;C: #define isc_bad_sec_info 335544448	&gt;</body><body package="IBEXDI" selector="isc_bad_segstr_handle">isc_bad_segstr_handle	&lt;C: #define isc_bad_segstr_handle 335544328	&gt;</body><body package="IBEXDI" selector="isc_bad_segstr_id">isc_bad_segstr_id	&lt;C: #define isc_bad_segstr_id 335544329	&gt;</body><body package="IBEXDI" selector="isc_bad_segstr_type">isc_bad_segstr_type	&lt;C: #define isc_bad_segstr_type 335544465	&gt;</body><body package="IBEXDI" selector="isc_bad_spb_form">isc_bad_spb_form	&lt;C: #define isc_bad_spb_form 335544562	&gt;</body><body package="IBEXDI" selector="isc_bad_stmt_handle">isc_bad_stmt_handle	&lt;C: #define isc_bad_stmt_handle 335544485	&gt;</body><body package="IBEXDI" selector="isc_bad_svc_handle">isc_bad_svc_handle	&lt;C: #define isc_bad_svc_handle 335544559	&gt;</body><body package="IBEXDI" selector="isc_bad_tpb_content">isc_bad_tpb_content	&lt;C: #define isc_bad_tpb_content 335544330	&gt;</body><body package="IBEXDI" selector="isc_bad_tpb_form">isc_bad_tpb_form	&lt;C: #define isc_bad_tpb_form 335544331	&gt;</body><body package="IBEXDI" selector="isc_bad_trans_handle">isc_bad_trans_handle	&lt;C: #define isc_bad_trans_handle 335544332	&gt;</body><body package="IBEXDI" selector="isc_badblk">isc_badblk	&lt;C: #define isc_badblk 335544384	&gt;</body><body package="IBEXDI" selector="isc_badhndcnt">isc_badhndcnt	&lt;C: #define isc_badhndcnt 335544410	&gt;</body><body package="IBEXDI" selector="isc_badindex">isc_badindex	&lt;C: #define isc_badindex 335544406	&gt;</body><body package="IBEXDI" selector="isc_badmsgnum">isc_badmsgnum	&lt;C: #define isc_badmsgnum 335544428	&gt;</body><body package="IBEXDI" selector="isc_badodsver">isc_badodsver	&lt;C: #define isc_badodsver 335544394	&gt;</body><body package="IBEXDI" selector="isc_badpage">isc_badpage	&lt;C: #define isc_badpage 335544405	&gt;</body><body package="IBEXDI" selector="isc_badpagtyp">isc_badpagtyp	&lt;C: #define isc_badpagtyp 335544403	&gt;</body><body package="IBEXDI" selector="isc_badparnum">isc_badparnum	&lt;C: #define isc_badparnum 335544429	&gt;</body><body package="IBEXDI" selector="isc_badrelation">isc_badrelation	&lt;C: #define isc_badrelation 335544415	&gt;</body><body package="IBEXDI" selector="isc_bdbincon">isc_bdbincon	&lt;C: #define isc_bdbincon 335544392	&gt;</body><body package="IBEXDI" selector="isc_blktoobig">isc_blktoobig	&lt;C: #define isc_blktoobig 335544388	&gt;</body><body package="IBEXDI" selector="isc_blob_acl">isc_blob_acl	&lt;C: #define isc_blob_acl 3	&gt;</body><body package="IBEXDI" selector="isc_blob_blr">isc_blob_blr	&lt;C: #define isc_blob_blr 2	&gt;</body><body package="IBEXDI" selector="isc_blob_dbase_ole">isc_blob_dbase_ole	&lt;C: #define isc_blob_dbase_ole 23	&gt;</body><body package="IBEXDI" selector="isc_blob_extfile">isc_blob_extfile	&lt;C: #define isc_blob_extfile 8	&gt;</body><body package="IBEXDI" selector="isc_blob_filter_alloc">isc_blob_filter_alloc	&lt;C: #define isc_blob_filter_alloc 5	&gt;</body><body package="IBEXDI" selector="isc_blob_filter_close">isc_blob_filter_close	&lt;C: #define isc_blob_filter_close 2	&gt;</body><body package="IBEXDI" selector="isc_blob_filter_create">isc_blob_filter_create	&lt;C: #define isc_blob_filter_create 3	&gt;</body><body package="IBEXDI" selector="isc_blob_filter_exception">isc_blob_filter_exception	&lt;C: #define isc_blob_filter_exception 335544767	&gt;</body><body package="IBEXDI" selector="isc_blob_filter_free">isc_blob_filter_free	&lt;C: #define isc_blob_filter_free 6	&gt;</body><body package="IBEXDI" selector="isc_blob_filter_get_segment">isc_blob_filter_get_segment	&lt;C: #define isc_blob_filter_get_segment 1	&gt;</body><body package="IBEXDI" selector="isc_blob_filter_open">isc_blob_filter_open	&lt;C: #define isc_blob_filter_open 0	&gt;</body><body package="IBEXDI" selector="isc_blob_filter_put_segment">isc_blob_filter_put_segment	&lt;C: #define isc_blob_filter_put_segment 4	&gt;</body><body package="IBEXDI" selector="isc_blob_filter_seek">isc_blob_filter_seek	&lt;C: #define isc_blob_filter_seek 7	&gt;</body><body package="IBEXDI" selector="isc_blob_format">isc_blob_format	&lt;C: #define isc_blob_format 6	&gt;</body><body package="IBEXDI" selector="isc_blob_formatted_memo">isc_blob_formatted_memo	&lt;C: #define isc_blob_formatted_memo 20	&gt;</body><body package="IBEXDI" selector="isc_blob_graphic">isc_blob_graphic	&lt;C: #define isc_blob_graphic 22	&gt;</body><body package="IBEXDI" selector="isc_blob_idx_err">isc_blob_idx_err	&lt;C: #define isc_blob_idx_err 335544670	&gt;</body><body package="IBEXDI" selector="isc_blob_paradox_ole">isc_blob_paradox_ole	&lt;C: #define isc_blob_paradox_ole 21	&gt;</body><body package="IBEXDI" selector="isc_blob_ranges">isc_blob_ranges	&lt;C: #define isc_blob_ranges 4	&gt;</body><body package="IBEXDI" selector="isc_blob_summary">isc_blob_summary	&lt;C: #define isc_blob_summary 5	&gt;</body><body package="IBEXDI" selector="isc_blob_text">isc_blob_text	&lt;C: #define isc_blob_text 1	&gt;</body><body package="IBEXDI" selector="isc_blob_tra">isc_blob_tra	&lt;C: #define isc_blob_tra 7	&gt;</body><body package="IBEXDI" selector="isc_blob_typed_binary">isc_blob_typed_binary	&lt;C: #define isc_blob_typed_binary 24	&gt;</body><body package="IBEXDI" selector="isc_blob_untyped">isc_blob_untyped	&lt;C: #define isc_blob_untyped 0	&gt;</body><body package="IBEXDI" selector="isc_blobnotsup">isc_blobnotsup	&lt;C: #define isc_blobnotsup 335544414	&gt;</body><body package="IBEXDI" selector="isc_blocking_signal">isc_blocking_signal	&lt;C: #define isc_blocking_signal 335544431	&gt;</body><body package="IBEXDI" selector="isc_bpb_filter_parameter">isc_bpb_filter_parameter	&lt;C: #define isc_bpb_filter_parameter 6	&gt;</body><body package="IBEXDI" selector="isc_bpb_source_interp">isc_bpb_source_interp	&lt;C: #define isc_bpb_source_interp 4	&gt;</body><body package="IBEXDI" selector="isc_bpb_source_type">isc_bpb_source_type	&lt;C: #define isc_bpb_source_type 1	&gt;</body><body package="IBEXDI" selector="isc_bpb_target_interp">isc_bpb_target_interp	&lt;C: #define isc_bpb_target_interp 5	&gt;</body><body package="IBEXDI" selector="isc_bpb_target_type">isc_bpb_target_type	&lt;C: #define isc_bpb_target_type 2	&gt;</body><body package="IBEXDI" selector="isc_bpb_type">isc_bpb_type	&lt;C: #define isc_bpb_type 3	&gt;</body><body package="IBEXDI" selector="isc_bpb_type_segmented">isc_bpb_type_segmented	&lt;C: #define isc_bpb_type_segmented 0	&gt;</body><body package="IBEXDI" selector="isc_bpb_type_stream">isc_bpb_type_stream	&lt;C: #define isc_bpb_type_stream 1	&gt;</body><body package="IBEXDI" selector="isc_bpb_version1">isc_bpb_version1	&lt;C: #define isc_bpb_version1 1	&gt;</body><body package="IBEXDI" selector="isc_buf_invalid">isc_buf_invalid	&lt;C: #define isc_buf_invalid 335544470	&gt;</body><body package="IBEXDI" selector="isc_bufexh">isc_bufexh	&lt;C: #define isc_bufexh 335544389	&gt;</body><body package="IBEXDI" selector="isc_bufinuse">isc_bufinuse	&lt;C: #define isc_bufinuse 335544391	&gt;</body><body package="IBEXDI" selector="isc_bug_check">isc_bug_check	&lt;C: #define isc_bug_check 335544333	&gt;</body><body package="IBEXDI" selector="isc_cache_redef">isc_cache_redef	&lt;C: #define isc_cache_redef 335544690	&gt;</body><body package="IBEXDI" selector="isc_cache_restart">isc_cache_restart	&lt;C: #define isc_cache_restart 335544518	&gt;</body><body package="IBEXDI" selector="isc_cache_too_small">isc_cache_too_small	&lt;C: #define isc_cache_too_small 335544691	&gt;</body><body package="IBEXDI" selector="isc_cancelled">isc_cancelled	&lt;C: #define isc_cancelled 335544794	&gt;</body><body package="IBEXDI" selector="isc_cant_start_journal">isc_cant_start_journal	&lt;C: #define isc_cant_start_journal 335544462	&gt;</body><body package="IBEXDI" selector="isc_cant_start_logging">isc_cant_start_logging	&lt;C: #define isc_cant_start_logging 335544464	&gt;</body><body package="IBEXDI" selector="isc_cant_validate">isc_cant_validate	&lt;C: #define isc_cant_validate 335544461	&gt;</body><body package="IBEXDI" selector="isc_charset_not_found">isc_charset_not_found	&lt;C: #define isc_charset_not_found 335544509	&gt;</body><body package="IBEXDI" selector="isc_check_cnstrnt_del">isc_check_cnstrnt_del	&lt;C: #define isc_check_cnstrnt_del 335544536	&gt;</body><body package="IBEXDI" selector="isc_check_cnstrnt_update">isc_check_cnstrnt_update	&lt;C: #define isc_check_cnstrnt_update 335544535	&gt;</body><body package="IBEXDI" selector="isc_check_constraint">isc_check_constraint	&lt;C: #define isc_check_constraint 335544558	&gt;</body><body package="IBEXDI" selector="isc_check_trig_del">isc_check_trig_del	&lt;C: #define isc_check_trig_del 335544541	&gt;</body><body package="IBEXDI" selector="isc_check_trig_update">isc_check_trig_update	&lt;C: #define isc_check_trig_update 335544542	&gt;</body><body package="IBEXDI" selector="isc_cnstrnt_fld_del">isc_cnstrnt_fld_del	&lt;C: #define isc_cnstrnt_fld_del 335544543	&gt;</body><body package="IBEXDI" selector="isc_cnstrnt_fld_rename">isc_cnstrnt_fld_rename	&lt;C: #define isc_cnstrnt_fld_rename 335544544	&gt;</body><body package="IBEXDI" selector="isc_codnotdef">isc_codnotdef	&lt;C: #define isc_codnotdef 335544515	&gt;</body><body package="IBEXDI" selector="isc_col_name_err">isc_col_name_err	&lt;C: #define isc_col_name_err 335544600	&gt;</body><body package="IBEXDI" selector="isc_collation_not_for_charset">isc_collation_not_for_charset	&lt;C: #define isc_collation_not_for_charset 335544589	&gt;</body><body package="IBEXDI" selector="isc_collation_not_found">isc_collation_not_found	&lt;C: #define isc_collation_not_found 335544588	&gt;</body><body package="IBEXDI" selector="isc_collation_requires_text">isc_collation_requires_text	&lt;C: #define isc_collation_requires_text 335544640	&gt;</body><body package="IBEXDI" selector="isc_command_end_err">isc_command_end_err	&lt;C: #define isc_command_end_err 335544608	&gt;</body><body package="IBEXDI" selector="isc_complex_view">isc_complex_view	&lt;C: #define isc_complex_view 335544710	&gt;</body><body package="IBEXDI" selector="isc_conn_lost">isc_conn_lost	&lt;C: #define isc_conn_lost 335544648	&gt;</body><body package="IBEXDI" selector="isc_connect_reject">isc_connect_reject	&lt;C: #define isc_connect_reject 335544421	&gt;</body><body package="IBEXDI" selector="isc_constaint_on_view">isc_constaint_on_view	&lt;C: #define isc_constaint_on_view 335544546	&gt;</body><body package="IBEXDI" selector="isc_convert_error">isc_convert_error	&lt;C: #define isc_convert_error 335544334	&gt;</body><body package="IBEXDI" selector="isc_corrupt">isc_corrupt	&lt;C: #define isc_corrupt 335544404	&gt;</body><body package="IBEXDI" selector="isc_crrp_data_err">isc_crrp_data_err	&lt;C: #define isc_crrp_data_err 335544680	&gt;</body><body package="IBEXDI" selector="isc_cse_not_supported">isc_cse_not_supported	&lt;C: #define isc_cse_not_supported 335544730	&gt;</body><body package="IBEXDI" selector="isc_ctxinuse">isc_ctxinuse	&lt;C: #define isc_ctxinuse 335544425	&gt;</body><body package="IBEXDI" selector="isc_ctxnotdef">isc_ctxnotdef	&lt;C: #define isc_ctxnotdef 335544426	&gt;</body><body package="IBEXDI" selector="isc_database_create_failed">isc_database_create_failed	&lt;C: #define isc_database_create_failed 335544804	&gt;</body><body package="IBEXDI" selector="isc_date_range_exceeded">isc_date_range_exceeded	&lt;C: #define isc_date_range_exceeded 335544810	&gt;</body><body package="IBEXDI" selector="isc_datnotsup">isc_datnotsup	&lt;C: #define isc_datnotsup 335544427	&gt;</body><body package="IBEXDI" selector="isc_datype_notsup">isc_datype_notsup	&lt;C: #define isc_datype_notsup 335544801	&gt;</body><body package="IBEXDI" selector="isc_db_corrupt">isc_db_corrupt	&lt;C: #define isc_db_corrupt 335544335	&gt;</body><body package="IBEXDI" selector="isc_db_or_file_exists">isc_db_or_file_exists	&lt;C: #define isc_db_or_file_exists 335544646	&gt;</body><body package="IBEXDI" selector="isc_dbbnotzer">isc_dbbnotzer	&lt;C: #define isc_dbbnotzer 335544407	&gt;</body><body package="IBEXDI" selector="isc_dbfile">isc_dbfile	&lt;C: #define isc_dbfile 335544422	&gt;</body><body package="IBEXDI" selector="isc_ddl_not_allowed_by_db_sql_dial">isc_ddl_not_allowed_by_db_sql_dial	&lt;C: #define isc_ddl_not_allowed_by_db_sql_dial 335544793	&gt;</body><body package="IBEXDI" selector="isc_deadlock">isc_deadlock	&lt;C: #define isc_deadlock 335544336	&gt;</body><body package="IBEXDI" selector="isc_del_last_field">isc_del_last_field	&lt;C: #define isc_del_last_field 335544674	&gt;</body><body package="IBEXDI" selector="isc_depend_on_uncommitted_rel">isc_depend_on_uncommitted_rel	&lt;C: #define isc_depend_on_uncommitted_rel 335544798	&gt;</body><body package="IBEXDI" selector="isc_dependency">isc_dependency	&lt;C: #define isc_dependency 335544630	&gt;</body><body package="IBEXDI" selector="isc_dialect_not_changed">isc_dialect_not_changed	&lt;C: #define isc_dialect_not_changed 335544803	&gt;</body><body package="IBEXDI" selector="isc_dialect_reset_warning">isc_dialect_reset_warning	&lt;C: #define isc_dialect_reset_warning 335544802	&gt;</body><body package="IBEXDI" selector="isc_dirtypage">isc_dirtypage	&lt;C: #define isc_dirtypage 335544397	&gt;</body><body package="IBEXDI" selector="isc_distinct_err">isc_distinct_err	&lt;C: #define isc_distinct_err 335544603	&gt;</body><body package="IBEXDI" selector="isc_doubleloc">isc_doubleloc	&lt;C: #define isc_doubleloc 335544399	&gt;</body><body package="IBEXDI" selector="isc_dpb_SQL_dialect">isc_dpb_SQL_dialect	&lt;C: #define isc_dpb_SQL_dialect 63	&gt;</body><body package="IBEXDI" selector="isc_dpb_activate_shadow">isc_dpb_activate_shadow	&lt;C: #define isc_dpb_activate_shadow 21	&gt;</body><body package="IBEXDI" selector="isc_dpb_allocation">isc_dpb_allocation	&lt;C: #define isc_dpb_allocation 2	&gt;</body><body package="IBEXDI" selector="isc_dpb_begin_log">isc_dpb_begin_log	&lt;C: #define isc_dpb_begin_log 25	&gt;</body><body package="IBEXDI" selector="isc_dpb_buffer_length">isc_dpb_buffer_length	&lt;C: #define isc_dpb_buffer_length 6	&gt;</body><body package="IBEXDI" selector="isc_dpb_cache_manager">isc_dpb_cache_manager	&lt;C: #define isc_dpb_cache_manager 49	&gt;</body><body package="IBEXDI" selector="isc_dpb_cdd_pathname">isc_dpb_cdd_pathname	&lt;C: #define isc_dpb_cdd_pathname 1	&gt;</body><body package="IBEXDI" selector="isc_dpb_connect_timeout">isc_dpb_connect_timeout	&lt;C: #define isc_dpb_connect_timeout 57	&gt;</body><body package="IBEXDI" selector="isc_dpb_damaged">isc_dpb_damaged	&lt;C: #define isc_dpb_damaged 17	&gt;</body><body package="IBEXDI" selector="isc_dpb_dbkey_scope">isc_dpb_dbkey_scope	&lt;C: #define isc_dpb_dbkey_scope 13	&gt;</body><body package="IBEXDI" selector="isc_dpb_debug">isc_dpb_debug	&lt;C: #define isc_dpb_debug 7	&gt;</body><body package="IBEXDI" selector="isc_dpb_delete_shadow">isc_dpb_delete_shadow	&lt;C: #define isc_dpb_delete_shadow 23	&gt;</body><body package="IBEXDI" selector="isc_dpb_disable_journal">isc_dpb_disable_journal	&lt;C: #define isc_dpb_disable_journal 12	&gt;</body><body package="IBEXDI" selector="isc_dpb_disable_wal">isc_dpb_disable_wal	&lt;C: #define isc_dpb_disable_wal 56	&gt;</body><body package="IBEXDI" selector="isc_dpb_drop_walfile">isc_dpb_drop_walfile	&lt;C: #define isc_dpb_drop_walfile 40	&gt;</body><body package="IBEXDI" selector="isc_dpb_dummy_packet_interval">isc_dpb_dummy_packet_interval	&lt;C: #define isc_dpb_dummy_packet_interval 58	&gt;</body><body package="IBEXDI" selector="isc_dpb_enable_journal">isc_dpb_enable_journal	&lt;C: #define isc_dpb_enable_journal 11	&gt;</body><body package="IBEXDI" selector="isc_dpb_encrypt_key">isc_dpb_encrypt_key	&lt;C: #define isc_dpb_encrypt_key 20	&gt;</body><body package="IBEXDI" selector="isc_dpb_force_write">isc_dpb_force_write	&lt;C: #define isc_dpb_force_write 24	&gt;</body><body package="IBEXDI" selector="isc_dpb_garbage_collect">isc_dpb_garbage_collect	&lt;C: #define isc_dpb_garbage_collect 8	&gt;</body><body package="IBEXDI" selector="isc_dpb_gbak_attach">isc_dpb_gbak_attach	&lt;C: #define isc_dpb_gbak_attach 59	&gt;</body><body package="IBEXDI" selector="isc_dpb_gfix_attach">isc_dpb_gfix_attach	&lt;C: #define isc_dpb_gfix_attach 66	&gt;</body><body package="IBEXDI" selector="isc_dpb_gstat_attach">isc_dpb_gstat_attach	&lt;C: #define isc_dpb_gstat_attach 67	&gt;</body><body package="IBEXDI" selector="isc_dpb_ignore">isc_dpb_ignore	&lt;C: #define isc_dpb_ignore 64	&gt;</body><body package="IBEXDI" selector="isc_dpb_indices">isc_dpb_indices	&lt;C: #define isc_dpb_indices 4	&gt;</body><body package="IBEXDI" selector="isc_dpb_interp">isc_dpb_interp	&lt;C: #define isc_dpb_interp 32	&gt;</body><body package="IBEXDI" selector="isc_dpb_journal">isc_dpb_journal	&lt;C: #define isc_dpb_journal 3	&gt;</body><body package="IBEXDI" selector="isc_dpb_lc_ctype">isc_dpb_lc_ctype	&lt;C: #define isc_dpb_lc_ctype 48	&gt;</body><body package="IBEXDI" selector="isc_dpb_lc_messages">isc_dpb_lc_messages	&lt;C: #define isc_dpb_lc_messages 47	&gt;</body><body package="IBEXDI" selector="isc_dpb_license">isc_dpb_license	&lt;C: #define isc_dpb_license 18	&gt;</body><body package="IBEXDI" selector="isc_dpb_no_garbage_collect">isc_dpb_no_garbage_collect	&lt;C: #define isc_dpb_no_garbage_collect 16	&gt;</body><body package="IBEXDI" selector="isc_dpb_no_reserve">isc_dpb_no_reserve	&lt;C: #define isc_dpb_no_reserve 27	&gt;</body><body package="IBEXDI" selector="isc_dpb_no_update">isc_dpb_no_update	&lt;C: #define isc_dpb_no_update 16	&gt;</body><body package="IBEXDI" selector="isc_dpb_num_buffers">isc_dpb_num_buffers	&lt;C: #define isc_dpb_num_buffers 5	&gt;</body><body package="IBEXDI" selector="isc_dpb_number_of_users">isc_dpb_number_of_users	&lt;C: #define isc_dpb_number_of_users 14	&gt;</body><body package="IBEXDI" selector="isc_dpb_old_dump_id">isc_dpb_old_dump_id	&lt;C: #define isc_dpb_old_dump_id 41	&gt;</body><body package="IBEXDI" selector="isc_dpb_old_file">isc_dpb_old_file	&lt;C: #define isc_dpb_old_file 36	&gt;</body><body package="IBEXDI" selector="isc_dpb_old_file_size">isc_dpb_old_file_size	&lt;C: #define isc_dpb_old_file_size 34	&gt;</body><body package="IBEXDI" selector="isc_dpb_old_num_files">isc_dpb_old_num_files	&lt;C: #define isc_dpb_old_num_files 35	&gt;</body><body package="IBEXDI" selector="isc_dpb_old_start_file">isc_dpb_old_start_file	&lt;C: #define isc_dpb_old_start_file 39	&gt;</body><body package="IBEXDI" selector="isc_dpb_old_start_page">isc_dpb_old_start_page	&lt;C: #define isc_dpb_old_start_page 37	&gt;</body><body package="IBEXDI" selector="isc_dpb_old_start_seqno">isc_dpb_old_start_seqno	&lt;C: #define isc_dpb_old_start_seqno 38	&gt;</body><body package="IBEXDI" selector="isc_dpb_online">isc_dpb_online	&lt;C: #define isc_dpb_online 51	&gt;</body><body package="IBEXDI" selector="isc_dpb_online_dump">isc_dpb_online_dump	&lt;C: #define isc_dpb_online_dump 33	&gt;</body><body package="IBEXDI" selector="isc_dpb_overwrite">isc_dpb_overwrite	&lt;C: #define isc_dpb_overwrite 54	&gt;</body><body package="IBEXDI" selector="isc_dpb_page_size">isc_dpb_page_size	&lt;C: #define isc_dpb_page_size 4	&gt;</body><body package="IBEXDI" selector="isc_dpb_pages">isc_dpb_pages	&lt;C: #define isc_dpb_pages 1	&gt;</body><body package="IBEXDI" selector="isc_dpb_password">isc_dpb_password	&lt;C: #define isc_dpb_password 29	&gt;</body><body package="IBEXDI" selector="isc_dpb_password_enc">isc_dpb_password_enc	&lt;C: #define isc_dpb_password_enc 30	&gt;</body><body package="IBEXDI" selector="isc_dpb_quit_log">isc_dpb_quit_log	&lt;C: #define isc_dpb_quit_log 26	&gt;</body><body package="IBEXDI" selector="isc_dpb_records">isc_dpb_records	&lt;C: #define isc_dpb_records 2	&gt;</body><body package="IBEXDI" selector="isc_dpb_repair">isc_dpb_repair	&lt;C: #define isc_dpb_repair 32	&gt;</body><body package="IBEXDI" selector="isc_dpb_reserved">isc_dpb_reserved	&lt;C: #define isc_dpb_reserved 53	&gt;</body><body package="IBEXDI" selector="isc_dpb_sec_attach">isc_dpb_sec_attach	&lt;C: #define isc_dpb_sec_attach 55	&gt;</body><body package="IBEXDI" selector="isc_dpb_set_db_SQL_dialect">isc_dpb_set_db_SQL_dialect	&lt;C: #define isc_dpb_set_db_SQL_dialect 65	&gt;</body><body package="IBEXDI" selector="isc_dpb_set_db_readonly">isc_dpb_set_db_readonly	&lt;C: #define isc_dpb_set_db_readonly 64	&gt;</body><body package="IBEXDI" selector="isc_dpb_set_db_sql_dialect">isc_dpb_set_db_sql_dialect	&lt;C: #define isc_dpb_set_db_sql_dialect 65	&gt;</body><body package="IBEXDI" selector="isc_dpb_set_page_buffers">isc_dpb_set_page_buffers	&lt;C: #define isc_dpb_set_page_buffers 61	&gt;</body><body package="IBEXDI" selector="isc_dpb_shut_attachment">isc_dpb_shut_attachment	&lt;C: #define isc_dpb_shut_attachment 2	&gt;</body><body package="IBEXDI" selector="isc_dpb_shut_cache">isc_dpb_shut_cache	&lt;C: #define isc_dpb_shut_cache 1	&gt;</body><body package="IBEXDI" selector="isc_dpb_shut_force">isc_dpb_shut_force	&lt;C: #define isc_dpb_shut_force 8	&gt;</body><body package="IBEXDI" selector="isc_dpb_shut_transaction">isc_dpb_shut_transaction	&lt;C: #define isc_dpb_shut_transaction 4	&gt;</body><body package="IBEXDI" selector="isc_dpb_shutdown">isc_dpb_shutdown	&lt;C: #define isc_dpb_shutdown 50	&gt;</body><body package="IBEXDI" selector="isc_dpb_shutdown_delay">isc_dpb_shutdown_delay	&lt;C: #define isc_dpb_shutdown_delay 52	&gt;</body><body package="IBEXDI" selector="isc_dpb_sql_dialect">isc_dpb_sql_dialect	&lt;C: #define isc_dpb_sql_dialect 63	&gt;</body><body package="IBEXDI" selector="isc_dpb_sql_role_name">isc_dpb_sql_role_name	&lt;C: #define isc_dpb_sql_role_name 60	&gt;</body><body package="IBEXDI" selector="isc_dpb_sweep">isc_dpb_sweep	&lt;C: #define isc_dpb_sweep 10	&gt;</body><body package="IBEXDI" selector="isc_dpb_sweep_interval">isc_dpb_sweep_interval	&lt;C: #define isc_dpb_sweep_interval 22	&gt;</body><body package="IBEXDI" selector="isc_dpb_sys_user_name">isc_dpb_sys_user_name	&lt;C: #define isc_dpb_sys_user_name 19	&gt;</body><body package="IBEXDI" selector="isc_dpb_sys_user_name_enc">isc_dpb_sys_user_name_enc	&lt;C: #define isc_dpb_sys_user_name_enc 31	&gt;</body><body package="IBEXDI" selector="isc_dpb_trace">isc_dpb_trace	&lt;C: #define isc_dpb_trace 15	&gt;</body><body package="IBEXDI" selector="isc_dpb_transactions">isc_dpb_transactions	&lt;C: #define isc_dpb_transactions 8	&gt;</body><body package="IBEXDI" selector="isc_dpb_user_name">isc_dpb_user_name	&lt;C: #define isc_dpb_user_name 28	&gt;</body><body package="IBEXDI" selector="isc_dpb_verify">isc_dpb_verify	&lt;C: #define isc_dpb_verify 9	&gt;</body><body package="IBEXDI" selector="isc_dpb_version1">isc_dpb_version1	&lt;C: #define isc_dpb_version1 1	&gt;</body><body package="IBEXDI" selector="isc_dpb_wal_backup_dir">isc_dpb_wal_backup_dir	&lt;C: #define isc_dpb_wal_backup_dir 42	&gt;</body><body package="IBEXDI" selector="isc_dpb_wal_bufsize">isc_dpb_wal_bufsize	&lt;C: #define isc_dpb_wal_bufsize 45	&gt;</body><body package="IBEXDI" selector="isc_dpb_wal_chkptlen">isc_dpb_wal_chkptlen	&lt;C: #define isc_dpb_wal_chkptlen 43	&gt;</body><body package="IBEXDI" selector="isc_dpb_wal_grp_cmt_wait">isc_dpb_wal_grp_cmt_wait	&lt;C: #define isc_dpb_wal_grp_cmt_wait 46	&gt;</body><body package="IBEXDI" selector="isc_dpb_wal_numbufs">isc_dpb_wal_numbufs	&lt;C: #define isc_dpb_wal_numbufs 44	&gt;</body><body package="IBEXDI" selector="isc_dpb_working_directory">isc_dpb_working_directory	&lt;C: #define isc_dpb_working_directory 62	&gt;</body><body package="IBEXDI" selector="isc_drdb_completed_with_errs">isc_drdb_completed_with_errs	&lt;C: #define isc_drdb_completed_with_errs 335544667	&gt;</body><body package="IBEXDI" selector="isc_drop_wal">isc_drop_wal	&lt;C: #define isc_drop_wal 335544501	&gt;</body><body package="IBEXDI" selector="isc_dsql_agg_ref_err">isc_dsql_agg_ref_err	&lt;C: #define isc_dsql_agg_ref_err 335544709	&gt;</body><body package="IBEXDI" selector="isc_dsql_arr_range_error">isc_dsql_arr_range_error	&lt;C: #define isc_dsql_arr_range_error 335544594	&gt;</body><body package="IBEXDI" selector="isc_dsql_base_table">isc_dsql_base_table	&lt;C: #define isc_dsql_base_table 335544658	&gt;</body><body package="IBEXDI" selector="isc_dsql_blob_err">isc_dsql_blob_err	&lt;C: #define isc_dsql_blob_err 335544587	&gt;</body><body package="IBEXDI" selector="isc_dsql_blob_type_unknown">isc_dsql_blob_type_unknown	&lt;C: #define isc_dsql_blob_type_unknown 335544662	&gt;</body><body package="IBEXDI" selector="isc_dsql_command_err">isc_dsql_command_err	&lt;C: #define isc_dsql_command_err 335544570	&gt;</body><body package="IBEXDI" selector="isc_dsql_constant_err">isc_dsql_constant_err	&lt;C: #define isc_dsql_constant_err 335544571	&gt;</body><body package="IBEXDI" selector="isc_dsql_construct_err">isc_dsql_construct_err	&lt;C: #define isc_dsql_construct_err 335544614	&gt;</body><body package="IBEXDI" selector="isc_dsql_count_mismatch">isc_dsql_count_mismatch	&lt;C: #define isc_dsql_count_mismatch 335544669	&gt;</body><body package="IBEXDI" selector="isc_dsql_crdb_prepare_err">isc_dsql_crdb_prepare_err	&lt;C: #define isc_dsql_crdb_prepare_err 335544597	&gt;</body><body package="IBEXDI" selector="isc_dsql_cursor_close_err">isc_dsql_cursor_close_err	&lt;C: #define isc_dsql_cursor_close_err 335544577	&gt;</body><body package="IBEXDI" selector="isc_dsql_cursor_err">isc_dsql_cursor_err	&lt;C: #define isc_dsql_cursor_err 335544572	&gt;</body><body package="IBEXDI" selector="isc_dsql_cursor_open_err">isc_dsql_cursor_open_err	&lt;C: #define isc_dsql_cursor_open_err 335544576	&gt;</body><body package="IBEXDI" selector="isc_dsql_cursor_update_err">isc_dsql_cursor_update_err	&lt;C: #define isc_dsql_cursor_update_err 335544575	&gt;</body><body package="IBEXDI" selector="isc_dsql_datatype_err">isc_dsql_datatype_err	&lt;C: #define isc_dsql_datatype_err 335544573	&gt;</body><body package="IBEXDI" selector="isc_dsql_dbkey_from_non_table">isc_dsql_dbkey_from_non_table	&lt;C: #define isc_dsql_dbkey_from_non_table 336003074	&gt;</body><body package="IBEXDI" selector="isc_dsql_decl_err">isc_dsql_decl_err	&lt;C: #define isc_dsql_decl_err 335544574	&gt;</body><body package="IBEXDI" selector="isc_dsql_dialect_warning_expr">isc_dsql_dialect_warning_expr	&lt;C: #define isc_dsql_dialect_warning_expr 336003076	&gt;</body><body package="IBEXDI" selector="isc_dsql_domain_err">isc_dsql_domain_err	&lt;C: #define isc_dsql_domain_err 335544623	&gt;</body><body package="IBEXDI" selector="isc_dsql_domain_not_found">isc_dsql_domain_not_found	&lt;C: #define isc_dsql_domain_not_found 335544641	&gt;</body><body package="IBEXDI" selector="isc_dsql_dup_option">isc_dsql_dup_option	&lt;C: #define isc_dsql_dup_option 335544590	&gt;</body><body package="IBEXDI" selector="isc_dsql_duplicate_spec">isc_dsql_duplicate_spec	&lt;C: #define isc_dsql_duplicate_spec 335544664	&gt;</body><body package="IBEXDI" selector="isc_dsql_error">isc_dsql_error	&lt;C: #define isc_dsql_error 335544569	&gt;</body><body package="IBEXDI" selector="isc_dsql_field_err">isc_dsql_field_err	&lt;C: #define isc_dsql_field_err 335544578	&gt;</body><body package="IBEXDI" selector="isc_dsql_field_ref">isc_dsql_field_ref	&lt;C: #define isc_dsql_field_ref 335544682	&gt;</body><body package="IBEXDI" selector="isc_dsql_file_length_err">isc_dsql_file_length_err	&lt;C: #define isc_dsql_file_length_err 335544632	&gt;</body><body package="IBEXDI" selector="isc_dsql_function_err">isc_dsql_function_err	&lt;C: #define isc_dsql_function_err 335544586	&gt;</body><body package="IBEXDI" selector="isc_dsql_internal_err">isc_dsql_internal_err	&lt;C: #define isc_dsql_internal_err 335544579	&gt;</body><body package="IBEXDI" selector="isc_dsql_invalid_array">isc_dsql_invalid_array	&lt;C: #define isc_dsql_invalid_array 335544592	&gt;</body><body package="IBEXDI" selector="isc_dsql_max_arr_dim_exceeded">isc_dsql_max_arr_dim_exceeded	&lt;C: #define isc_dsql_max_arr_dim_exceeded 335544593	&gt;</body><body package="IBEXDI" selector="isc_dsql_no_blob_array">isc_dsql_no_blob_array	&lt;C: #define isc_dsql_no_blob_array 335544657	&gt;</body><body package="IBEXDI" selector="isc_dsql_no_relation_alias">isc_dsql_no_relation_alias	&lt;C: #define isc_dsql_no_relation_alias 335544635	&gt;</body><body package="IBEXDI" selector="isc_dsql_open_cursor_request">isc_dsql_open_cursor_request	&lt;C: #define isc_dsql_open_cursor_request 335544688	&gt;</body><body package="IBEXDI" selector="isc_dsql_procedure_err">isc_dsql_procedure_err	&lt;C: #define isc_dsql_procedure_err 335544581	&gt;</body><body package="IBEXDI" selector="isc_dsql_procedure_use_err">isc_dsql_procedure_use_err	&lt;C: #define isc_dsql_procedure_use_err 335544668	&gt;</body><body package="IBEXDI" selector="isc_dsql_relation_err">isc_dsql_relation_err	&lt;C: #define isc_dsql_relation_err 335544580	&gt;</body><body package="IBEXDI" selector="isc_dsql_request_err">isc_dsql_request_err	&lt;C: #define isc_dsql_request_err 335544582	&gt;</body><body package="IBEXDI" selector="isc_dsql_self_join">isc_dsql_self_join	&lt;C: #define isc_dsql_self_join 335544643	&gt;</body><body package="IBEXDI" selector="isc_dsql_shadow_number_err">isc_dsql_shadow_number_err	&lt;C: #define isc_dsql_shadow_number_err 335544633	&gt;</body><body package="IBEXDI" selector="isc_dsql_sqlda_err">isc_dsql_sqlda_err	&lt;C: #define isc_dsql_sqlda_err 335544583	&gt;</body><body package="IBEXDI" selector="isc_dsql_sqlda_value_err">isc_dsql_sqlda_value_err	&lt;C: #define isc_dsql_sqlda_value_err 335544713	&gt;</body><body package="IBEXDI" selector="isc_dsql_stmt_handle">isc_dsql_stmt_handle	&lt;C: #define isc_dsql_stmt_handle 335544585	&gt;</body><body package="IBEXDI" selector="isc_dsql_subselect_err">isc_dsql_subselect_err	&lt;C: #define isc_dsql_subselect_err 335544596	&gt;</body><body package="IBEXDI" selector="isc_dsql_token_unk_err">isc_dsql_token_unk_err	&lt;C: #define isc_dsql_token_unk_err 335544634	&gt;</body><body package="IBEXDI" selector="isc_dsql_tran_err">isc_dsql_tran_err	&lt;C: #define isc_dsql_tran_err 335544591	&gt;</body><body package="IBEXDI" selector="isc_dsql_transitional_numeric">isc_dsql_transitional_numeric	&lt;C: #define isc_dsql_transitional_numeric 336003075	&gt;</body><body package="IBEXDI" selector="isc_dsql_trigger_err">isc_dsql_trigger_err	&lt;C: #define isc_dsql_trigger_err 335544595	&gt;</body><body package="IBEXDI" selector="isc_dsql_var_conflict">isc_dsql_var_conflict	&lt;C: #define isc_dsql_var_conflict 335544656	&gt;</body><body package="IBEXDI" selector="isc_dsql_var_count_err">isc_dsql_var_count_err	&lt;C: #define isc_dsql_var_count_err 335544584	&gt;</body><body package="IBEXDI" selector="isc_dsql_warn_precision_ambiguous">isc_dsql_warn_precision_ambiguous	&lt;C: #define isc_dsql_warn_precision_ambiguous 336003082	&gt;</body><body package="IBEXDI" selector="isc_dsql_warn_precision_ambiguous1">isc_dsql_warn_precision_ambiguous1	&lt;C: #define isc_dsql_warn_precision_ambiguous1 336003083	&gt;</body><body package="IBEXDI" selector="isc_dsql_warn_precision_ambiguous2">isc_dsql_warn_precision_ambiguous2	&lt;C: #define isc_dsql_warn_precision_ambiguous2 336003084	&gt;</body><body package="IBEXDI" selector="isc_dsql_warning_number_ambiguous">isc_dsql_warning_number_ambiguous	&lt;C: #define isc_dsql_warning_number_ambiguous 336003080	&gt;</body><body package="IBEXDI" selector="isc_dsql_warning_number_ambiguous1">isc_dsql_warning_number_ambiguous1	&lt;C: #define isc_dsql_warning_number_ambiguous1 336003081	&gt;</body><body package="IBEXDI" selector="isc_dtype_renamed">isc_dtype_renamed	&lt;C: #define isc_dtype_renamed 335544808	&gt;</body><body package="IBEXDI" selector="isc_dup_usrname_found">isc_dup_usrname_found	&lt;C: #define isc_dup_usrname_found 335544752	&gt;</body><body package="IBEXDI" selector="isc_duplicate_base_table">isc_duplicate_base_table	&lt;C: #define isc_duplicate_base_table 335544659	&gt;</body><body package="IBEXDI" selector="isc_dupnodfnd">isc_dupnodfnd	&lt;C: #define isc_dupnodfnd 335544401	&gt;</body><body package="IBEXDI" selector="isc_dyn_begin">isc_dyn_begin	&lt;C: #define isc_dyn_begin 2	&gt;</body><body package="IBEXDI" selector="isc_dyn_char_fld_too_small">isc_dyn_char_fld_too_small	&lt;C: #define isc_dyn_char_fld_too_small 336068816	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_cache_file">isc_dyn_def_cache_file	&lt;C: #define isc_dyn_def_cache_file 180	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_database">isc_dyn_def_database	&lt;C: #define isc_dyn_def_database 5	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_default_log">isc_dyn_def_default_log	&lt;C: #define isc_dyn_def_default_log 202	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_dimension">isc_dyn_def_dimension	&lt;C: #define isc_dyn_def_dimension 140	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_exception">isc_dyn_def_exception	&lt;C: #define isc_dyn_def_exception 181	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_file">isc_dyn_def_file	&lt;C: #define isc_dyn_def_file 36	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_filter">isc_dyn_def_filter	&lt;C: #define isc_dyn_def_filter 26	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_foreign_key">isc_dyn_def_foreign_key	&lt;C: #define isc_dyn_def_foreign_key 38	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_function">isc_dyn_def_function	&lt;C: #define isc_dyn_def_function 25	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_function_arg">isc_dyn_def_function_arg	&lt;C: #define isc_dyn_def_function_arg 27	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_generator">isc_dyn_def_generator	&lt;C: #define isc_dyn_def_generator 24	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_global_fld">isc_dyn_def_global_fld	&lt;C: #define isc_dyn_def_global_fld 6	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_idx">isc_dyn_def_idx	&lt;C: #define isc_dyn_def_idx 8	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_local_fld">isc_dyn_def_local_fld	&lt;C: #define isc_dyn_def_local_fld 7	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_log_file">isc_dyn_def_log_file	&lt;C: #define isc_dyn_def_log_file 176	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_parameter">isc_dyn_def_parameter	&lt;C: #define isc_dyn_def_parameter 135	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_primary_key">isc_dyn_def_primary_key	&lt;C: #define isc_dyn_def_primary_key 37	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_procedure">isc_dyn_def_procedure	&lt;C: #define isc_dyn_def_procedure 164	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_rel">isc_dyn_def_rel	&lt;C: #define isc_dyn_def_rel 9	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_security_class">isc_dyn_def_security_class	&lt;C: #define isc_dyn_def_security_class 120	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_shadow">isc_dyn_def_shadow	&lt;C: #define isc_dyn_def_shadow 34	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_sql_fld">isc_dyn_def_sql_fld	&lt;C: #define isc_dyn_def_sql_fld 10	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_sql_role">isc_dyn_def_sql_role	&lt;C: #define isc_dyn_def_sql_role 211	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_trigger">isc_dyn_def_trigger	&lt;C: #define isc_dyn_def_trigger 15	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_trigger_msg">isc_dyn_def_trigger_msg	&lt;C: #define isc_dyn_def_trigger_msg 17	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_unique">isc_dyn_def_unique	&lt;C: #define isc_dyn_def_unique 40	&gt;</body><body package="IBEXDI" selector="isc_dyn_def_view">isc_dyn_def_view	&lt;C: #define isc_dyn_def_view 12	&gt;</body><body package="IBEXDI" selector="isc_dyn_del_default">isc_dyn_del_default	&lt;C: #define isc_dyn_del_default 197	&gt;</body><body package="IBEXDI" selector="isc_dyn_del_exception">isc_dyn_del_exception	&lt;C: #define isc_dyn_del_exception 183	&gt;</body><body package="IBEXDI" selector="isc_dyn_del_sql_role">isc_dyn_del_sql_role	&lt;C: #define isc_dyn_del_sql_role 214	&gt;</body><body package="IBEXDI" selector="isc_dyn_del_validation">isc_dyn_del_validation	&lt;C: #define isc_dyn_del_validation 198	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_database">isc_dyn_delete_database	&lt;C: #define isc_dyn_delete_database 18	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_dimensions">isc_dyn_delete_dimensions	&lt;C: #define isc_dyn_delete_dimensions 143	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_filter">isc_dyn_delete_filter	&lt;C: #define isc_dyn_delete_filter 32	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_function">isc_dyn_delete_function	&lt;C: #define isc_dyn_delete_function 33	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_global_fld">isc_dyn_delete_global_fld	&lt;C: #define isc_dyn_delete_global_fld 20	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_idx">isc_dyn_delete_idx	&lt;C: #define isc_dyn_delete_idx 22	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_local_fld">isc_dyn_delete_local_fld	&lt;C: #define isc_dyn_delete_local_fld 21	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_parameter">isc_dyn_delete_parameter	&lt;C: #define isc_dyn_delete_parameter 136	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_procedure">isc_dyn_delete_procedure	&lt;C: #define isc_dyn_delete_procedure 165	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_rel">isc_dyn_delete_rel	&lt;C: #define isc_dyn_delete_rel 19	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_rel_constraint">isc_dyn_delete_rel_constraint	&lt;C: #define isc_dyn_delete_rel_constraint 163	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_role_failed">isc_dyn_delete_role_failed	&lt;C: #define isc_dyn_delete_role_failed 336068799	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_security_class">isc_dyn_delete_security_class	&lt;C: #define isc_dyn_delete_security_class 123	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_shadow">isc_dyn_delete_shadow	&lt;C: #define isc_dyn_delete_shadow 35	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_trigger">isc_dyn_delete_trigger	&lt;C: #define isc_dyn_delete_trigger 23	&gt;</body><body package="IBEXDI" selector="isc_dyn_delete_trigger_msg">isc_dyn_delete_trigger_msg	&lt;C: #define isc_dyn_delete_trigger_msg 29	&gt;</body><body package="IBEXDI" selector="isc_dyn_dependency_exists">isc_dyn_dependency_exists	&lt;C: #define isc_dyn_dependency_exists 336068814	&gt;</body><body package="IBEXDI" selector="isc_dyn_description">isc_dyn_description	&lt;C: #define isc_dyn_description 53	&gt;</body><body package="IBEXDI" selector="isc_dyn_description2">isc_dyn_description2	&lt;C: #define isc_dyn_description2 154	&gt;</body><body package="IBEXDI" selector="isc_dyn_dim_lower">isc_dyn_dim_lower	&lt;C: #define isc_dyn_dim_lower 141	&gt;</body><body package="IBEXDI" selector="isc_dyn_dim_upper">isc_dyn_dim_upper	&lt;C: #define isc_dyn_dim_upper 142	&gt;</body><body package="IBEXDI" selector="isc_dyn_domain_name_exists">isc_dyn_domain_name_exists	&lt;C: #define isc_dyn_domain_name_exists 336068812	&gt;</body><body package="IBEXDI" selector="isc_dyn_drop_cache">isc_dyn_drop_cache	&lt;C: #define isc_dyn_drop_cache 195	&gt;</body><body package="IBEXDI" selector="isc_dyn_drop_log">isc_dyn_drop_log	&lt;C: #define isc_dyn_drop_log 194	&gt;</body><body package="IBEXDI" selector="isc_dyn_dtype_conv_invalid">isc_dyn_dtype_conv_invalid	&lt;C: #define isc_dyn_dtype_conv_invalid 336068818	&gt;</body><body package="IBEXDI" selector="isc_dyn_dtype_invalid">isc_dyn_dtype_invalid	&lt;C: #define isc_dyn_dtype_invalid 336068815	&gt;</body><body package="IBEXDI" selector="isc_dyn_dup_sql_role">isc_dyn_dup_sql_role	&lt;C: #define isc_dyn_dup_sql_role 336068802	&gt;</body><body package="IBEXDI" selector="isc_dyn_end">isc_dyn_end	&lt;C: #define isc_dyn_end 3	&gt;</body><body package="IBEXDI" selector="isc_dyn_eoc">isc_dyn_eoc	&lt;C: #define isc_dyn_eoc 255	&gt;</body><body package="IBEXDI" selector="isc_dyn_field_name_exists">isc_dyn_field_name_exists	&lt;C: #define isc_dyn_field_name_exists 336068813	&gt;</body><body package="IBEXDI" selector="isc_dyn_file_length">isc_dyn_file_length	&lt;C: #define isc_dyn_file_length 127	&gt;</body><body package="IBEXDI" selector="isc_dyn_file_name">isc_dyn_file_name	&lt;C: #define isc_dyn_file_name 125	&gt;</body><body package="IBEXDI" selector="isc_dyn_file_start">isc_dyn_file_start	&lt;C: #define isc_dyn_file_start 126	&gt;</body><body package="IBEXDI" selector="isc_dyn_filter_in_subtype">isc_dyn_filter_in_subtype	&lt;C: #define isc_dyn_filter_in_subtype 152	&gt;</body><body package="IBEXDI" selector="isc_dyn_filter_out_subtype">isc_dyn_filter_out_subtype	&lt;C: #define isc_dyn_filter_out_subtype 153	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_ambiguous">isc_dyn_fld_ambiguous	&lt;C: #define isc_dyn_fld_ambiguous 335544708	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_base_fld">isc_dyn_fld_base_fld	&lt;C: #define isc_dyn_fld_base_fld 91	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_char_length">isc_dyn_fld_char_length	&lt;C: #define isc_dyn_fld_char_length 172	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_character_set">isc_dyn_fld_character_set	&lt;C: #define isc_dyn_fld_character_set 203	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_character_set_name">isc_dyn_fld_character_set_name	&lt;C: #define isc_dyn_fld_character_set_name 174	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_collation">isc_dyn_fld_collation	&lt;C: #define isc_dyn_fld_collation 173	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_computed_blr">isc_dyn_fld_computed_blr	&lt;C: #define isc_dyn_fld_computed_blr 79	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_computed_source">isc_dyn_fld_computed_source	&lt;C: #define isc_dyn_fld_computed_source 80	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_computed_source2">isc_dyn_fld_computed_source2	&lt;C: #define isc_dyn_fld_computed_source2 155	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_default_source">isc_dyn_fld_default_source	&lt;C: #define isc_dyn_fld_default_source 193	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_default_value">isc_dyn_fld_default_value	&lt;C: #define isc_dyn_fld_default_value 82	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_dimensions">isc_dyn_fld_dimensions	&lt;C: #define isc_dyn_fld_dimensions 84	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_edit_string">isc_dyn_fld_edit_string	&lt;C: #define isc_dyn_fld_edit_string 76	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_edit_string2">isc_dyn_fld_edit_string2	&lt;C: #define isc_dyn_fld_edit_string2 156	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_length">isc_dyn_fld_length	&lt;C: #define isc_dyn_fld_length 71	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_missing_value">isc_dyn_fld_missing_value	&lt;C: #define isc_dyn_fld_missing_value 81	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_name">isc_dyn_fld_name	&lt;C: #define isc_dyn_fld_name 51	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_not_null">isc_dyn_fld_not_null	&lt;C: #define isc_dyn_fld_not_null 85	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_position">isc_dyn_fld_position	&lt;C: #define isc_dyn_fld_position 92	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_precision">isc_dyn_fld_precision	&lt;C: #define isc_dyn_fld_precision 86	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_query_header">isc_dyn_fld_query_header	&lt;C: #define isc_dyn_fld_query_header 75	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_query_header2">isc_dyn_fld_query_header2	&lt;C: #define isc_dyn_fld_query_header2 157	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_query_name">isc_dyn_fld_query_name	&lt;C: #define isc_dyn_fld_query_name 83	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_scale">isc_dyn_fld_scale	&lt;C: #define isc_dyn_fld_scale 72	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_segment_length">isc_dyn_fld_segment_length	&lt;C: #define isc_dyn_fld_segment_length 74	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_source">isc_dyn_fld_source	&lt;C: #define isc_dyn_fld_source 90	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_sub_type">isc_dyn_fld_sub_type	&lt;C: #define isc_dyn_fld_sub_type 73	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_type">isc_dyn_fld_type	&lt;C: #define isc_dyn_fld_type 70	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_update_flag">isc_dyn_fld_update_flag	&lt;C: #define isc_dyn_fld_update_flag 93	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_validation_blr">isc_dyn_fld_validation_blr	&lt;C: #define isc_dyn_fld_validation_blr 77	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_validation_source">isc_dyn_fld_validation_source	&lt;C: #define isc_dyn_fld_validation_source 78	&gt;</body><body package="IBEXDI" selector="isc_dyn_fld_validation_source2">isc_dyn_fld_validation_source2	&lt;C: #define isc_dyn_fld_validation_source2 158	&gt;</body><body package="IBEXDI" selector="isc_dyn_foreign_key_cascade">isc_dyn_foreign_key_cascade	&lt;C: #define isc_dyn_foreign_key_cascade 207	&gt;</body><body package="IBEXDI" selector="isc_dyn_foreign_key_default">isc_dyn_foreign_key_default	&lt;C: #define isc_dyn_foreign_key_default 208	&gt;</body><body package="IBEXDI" selector="isc_dyn_foreign_key_delete">isc_dyn_foreign_key_delete	&lt;C: #define isc_dyn_foreign_key_delete 206	&gt;</body><body package="IBEXDI" selector="isc_dyn_foreign_key_none">isc_dyn_foreign_key_none	&lt;C: #define isc_dyn_foreign_key_none 210	&gt;</body><body package="IBEXDI" selector="isc_dyn_foreign_key_null">isc_dyn_foreign_key_null	&lt;C: #define isc_dyn_foreign_key_null 209	&gt;</body><body package="IBEXDI" selector="isc_dyn_foreign_key_update">isc_dyn_foreign_key_update	&lt;C: #define isc_dyn_foreign_key_update 205	&gt;</body><body package="IBEXDI" selector="isc_dyn_func_arg_position">isc_dyn_func_arg_position	&lt;C: #define isc_dyn_func_arg_position 150	&gt;</body><body package="IBEXDI" selector="isc_dyn_func_entry_point">isc_dyn_func_entry_point	&lt;C: #define isc_dyn_func_entry_point 148	&gt;</body><body package="IBEXDI" selector="isc_dyn_func_mechanism">isc_dyn_func_mechanism	&lt;C: #define isc_dyn_func_mechanism 151	&gt;</body><body package="IBEXDI" selector="isc_dyn_func_module_name">isc_dyn_func_module_name	&lt;C: #define isc_dyn_func_module_name 147	&gt;</body><body package="IBEXDI" selector="isc_dyn_func_return_argument">isc_dyn_func_return_argument	&lt;C: #define isc_dyn_func_return_argument 149	&gt;</body><body package="IBEXDI" selector="isc_dyn_function_name">isc_dyn_function_name	&lt;C: #define isc_dyn_function_name 145	&gt;</body><body package="IBEXDI" selector="isc_dyn_function_type">isc_dyn_function_type	&lt;C: #define isc_dyn_function_type 146	&gt;</body><body package="IBEXDI" selector="isc_dyn_generator_id">isc_dyn_generator_id	&lt;C: #define isc_dyn_generator_id 96	&gt;</body><body package="IBEXDI" selector="isc_dyn_generator_name">isc_dyn_generator_name	&lt;C: #define isc_dyn_generator_name 95	&gt;</body><body package="IBEXDI" selector="isc_dyn_grant">isc_dyn_grant	&lt;C: #define isc_dyn_grant 30	&gt;</body><body package="IBEXDI" selector="isc_dyn_grant_admin_options">isc_dyn_grant_admin_options	&lt;C: #define isc_dyn_grant_admin_options 213	&gt;</body><body package="IBEXDI" selector="isc_dyn_grant_options">isc_dyn_grant_options	&lt;C: #define isc_dyn_grant_options 132	&gt;</body><body package="IBEXDI" selector="isc_dyn_grant_proc">isc_dyn_grant_proc	&lt;C: #define isc_dyn_grant_proc 186	&gt;</body><body package="IBEXDI" selector="isc_dyn_grant_role_to_user">isc_dyn_grant_role_to_user	&lt;C: #define isc_dyn_grant_role_to_user 336068800	&gt;</body><body package="IBEXDI" selector="isc_dyn_grant_trig">isc_dyn_grant_trig	&lt;C: #define isc_dyn_grant_trig 187	&gt;</body><body package="IBEXDI" selector="isc_dyn_grant_user">isc_dyn_grant_user	&lt;C: #define isc_dyn_grant_user 130	&gt;</body><body package="IBEXDI" selector="isc_dyn_grant_user_group">isc_dyn_grant_user_group	&lt;C: #define isc_dyn_grant_user_group 205	&gt;</body><body package="IBEXDI" selector="isc_dyn_grant_view">isc_dyn_grant_view	&lt;C: #define isc_dyn_grant_view 188	&gt;</body><body package="IBEXDI" selector="isc_dyn_idx_foreign_key">isc_dyn_idx_foreign_key	&lt;C: #define isc_dyn_idx_foreign_key 104	&gt;</body><body package="IBEXDI" selector="isc_dyn_idx_inactive">isc_dyn_idx_inactive	&lt;C: #define isc_dyn_idx_inactive 101	&gt;</body><body package="IBEXDI" selector="isc_dyn_idx_name">isc_dyn_idx_name	&lt;C: #define isc_dyn_idx_name 52	&gt;</body><body package="IBEXDI" selector="isc_dyn_idx_ref_column">isc_dyn_idx_ref_column	&lt;C: #define isc_dyn_idx_ref_column 105	&gt;</body><body package="IBEXDI" selector="isc_dyn_idx_statistic">isc_dyn_idx_statistic	&lt;C: #define isc_dyn_idx_statistic 204	&gt;</body><body package="IBEXDI" selector="isc_dyn_idx_type">isc_dyn_idx_type	&lt;C: #define isc_dyn_idx_type 103	&gt;</body><body package="IBEXDI" selector="isc_dyn_idx_unique">isc_dyn_idx_unique	&lt;C: #define isc_dyn_idx_unique 100	&gt;</body><body package="IBEXDI" selector="isc_dyn_if">isc_dyn_if	&lt;C: #define isc_dyn_if 4	&gt;</body><body package="IBEXDI" selector="isc_dyn_inv_sql_role_name">isc_dyn_inv_sql_role_name	&lt;C: #define isc_dyn_inv_sql_role_name 336068801	&gt;</body><body package="IBEXDI" selector="isc_dyn_invalid_dtype_conversion">isc_dyn_invalid_dtype_conversion	&lt;C: #define isc_dyn_invalid_dtype_conversion 336068817	&gt;</body><body package="IBEXDI" selector="isc_dyn_kywd_spec_for_role">isc_dyn_kywd_spec_for_role	&lt;C: #define isc_dyn_kywd_spec_for_role 336068803	&gt;</body><body package="IBEXDI" selector="isc_dyn_last_dyn_value">isc_dyn_last_dyn_value	&lt;C: #define isc_dyn_last_dyn_value 216	&gt;</body><body package="IBEXDI" selector="isc_dyn_log_buffer_size">isc_dyn_log_buffer_size	&lt;C: #define isc_dyn_log_buffer_size 190	&gt;</body><body package="IBEXDI" selector="isc_dyn_log_check_point_length">isc_dyn_log_check_point_length	&lt;C: #define isc_dyn_log_check_point_length 191	&gt;</body><body package="IBEXDI" selector="isc_dyn_log_file_overflow">isc_dyn_log_file_overflow	&lt;C: #define isc_dyn_log_file_overflow 200	&gt;</body><body package="IBEXDI" selector="isc_dyn_log_file_partitions">isc_dyn_log_file_partitions	&lt;C: #define isc_dyn_log_file_partitions 178	&gt;</body><body package="IBEXDI" selector="isc_dyn_log_file_raw">isc_dyn_log_file_raw	&lt;C: #define isc_dyn_log_file_raw 201	&gt;</body><body package="IBEXDI" selector="isc_dyn_log_file_sequence">isc_dyn_log_file_sequence	&lt;C: #define isc_dyn_log_file_sequence 177	&gt;</body><body package="IBEXDI" selector="isc_dyn_log_file_serial">isc_dyn_log_file_serial	&lt;C: #define isc_dyn_log_file_serial 179	&gt;</body><body package="IBEXDI" selector="isc_dyn_log_group_commit_wait">isc_dyn_log_group_commit_wait	&lt;C: #define isc_dyn_log_group_commit_wait 189	&gt;</body><body package="IBEXDI" selector="isc_dyn_log_num_of_buffers">isc_dyn_log_num_of_buffers	&lt;C: #define isc_dyn_log_num_of_buffers 192	&gt;</body><body package="IBEXDI" selector="isc_dyn_mod_database">isc_dyn_mod_database	&lt;C: #define isc_dyn_mod_database 39	&gt;</body><body package="IBEXDI" selector="isc_dyn_mod_exception">isc_dyn_mod_exception	&lt;C: #define isc_dyn_mod_exception 182	&gt;</body><body package="IBEXDI" selector="isc_dyn_mod_global_fld">isc_dyn_mod_global_fld	&lt;C: #define isc_dyn_mod_global_fld 13	&gt;</body><body package="IBEXDI" selector="isc_dyn_mod_idx">isc_dyn_mod_idx	&lt;C: #define isc_dyn_mod_idx 102	&gt;</body><body package="IBEXDI" selector="isc_dyn_mod_local_fld">isc_dyn_mod_local_fld	&lt;C: #define isc_dyn_mod_local_fld 14	&gt;</body><body package="IBEXDI" selector="isc_dyn_mod_procedure">isc_dyn_mod_procedure	&lt;C: #define isc_dyn_mod_procedure 175	&gt;</body><body package="IBEXDI" selector="isc_dyn_mod_rel">isc_dyn_mod_rel	&lt;C: #define isc_dyn_mod_rel 11	&gt;</body><body package="IBEXDI" selector="isc_dyn_mod_security_class">isc_dyn_mod_security_class	&lt;C: #define isc_dyn_mod_security_class 122	&gt;</body><body package="IBEXDI" selector="isc_dyn_mod_sql_fld">isc_dyn_mod_sql_fld	&lt;C: #define isc_dyn_mod_sql_fld 216	&gt;</body><body package="IBEXDI" selector="isc_dyn_mod_trigger">isc_dyn_mod_trigger	&lt;C: #define isc_dyn_mod_trigger 113	&gt;</body><body package="IBEXDI" selector="isc_dyn_mod_trigger_msg">isc_dyn_mod_trigger_msg	&lt;C: #define isc_dyn_mod_trigger_msg 28	&gt;</body><body package="IBEXDI" selector="isc_dyn_mod_view">isc_dyn_mod_view	&lt;C: #define isc_dyn_mod_view 16	&gt;</body><body package="IBEXDI" selector="isc_dyn_new_fld_name">isc_dyn_new_fld_name	&lt;C: #define isc_dyn_new_fld_name 215	&gt;</body><body package="IBEXDI" selector="isc_dyn_no_grant_admin_opt">isc_dyn_no_grant_admin_opt	&lt;C: #define isc_dyn_no_grant_admin_opt 336068797	&gt;</body><body package="IBEXDI" selector="isc_dyn_prc_blr">isc_dyn_prc_blr	&lt;C: #define isc_dyn_prc_blr 170	&gt;</body><body package="IBEXDI" selector="isc_dyn_prc_inputs">isc_dyn_prc_inputs	&lt;C: #define isc_dyn_prc_inputs 167	&gt;</body><body package="IBEXDI" selector="isc_dyn_prc_name">isc_dyn_prc_name	&lt;C: #define isc_dyn_prc_name 166	&gt;</body><body package="IBEXDI" selector="isc_dyn_prc_outputs">isc_dyn_prc_outputs	&lt;C: #define isc_dyn_prc_outputs 168	&gt;</body><body package="IBEXDI" selector="isc_dyn_prc_source">isc_dyn_prc_source	&lt;C: #define isc_dyn_prc_source 169	&gt;</body><body package="IBEXDI" selector="isc_dyn_prc_source2">isc_dyn_prc_source2	&lt;C: #define isc_dyn_prc_source2 171	&gt;</body><body package="IBEXDI" selector="isc_dyn_prm_name">isc_dyn_prm_name	&lt;C: #define isc_dyn_prm_name 137	&gt;</body><body package="IBEXDI" selector="isc_dyn_prm_number">isc_dyn_prm_number	&lt;C: #define isc_dyn_prm_number 138	&gt;</body><body package="IBEXDI" selector="isc_dyn_prm_type">isc_dyn_prm_type	&lt;C: #define isc_dyn_prm_type 139	&gt;</body><body package="IBEXDI" selector="isc_dyn_rel_constraint">isc_dyn_rel_constraint	&lt;C: #define isc_dyn_rel_constraint 162	&gt;</body><body package="IBEXDI" selector="isc_dyn_rel_dbkey_length">isc_dyn_rel_dbkey_length	&lt;C: #define isc_dyn_rel_dbkey_length 61	&gt;</body><body package="IBEXDI" selector="isc_dyn_rel_erase_trig">isc_dyn_rel_erase_trig	&lt;C: #define isc_dyn_rel_erase_trig 64	&gt;</body><body package="IBEXDI" selector="isc_dyn_rel_erase_trig_source">isc_dyn_rel_erase_trig_source	&lt;C: #define isc_dyn_rel_erase_trig_source 67	&gt;</body><body package="IBEXDI" selector="isc_dyn_rel_ext_file">isc_dyn_rel_ext_file	&lt;C: #define isc_dyn_rel_ext_file 68	&gt;</body><body package="IBEXDI" selector="isc_dyn_rel_modify_trig">isc_dyn_rel_modify_trig	&lt;C: #define isc_dyn_rel_modify_trig 63	&gt;</body><body package="IBEXDI" selector="isc_dyn_rel_modify_trig_source">isc_dyn_rel_modify_trig_source	&lt;C: #define isc_dyn_rel_modify_trig_source 66	&gt;</body><body package="IBEXDI" selector="isc_dyn_rel_name">isc_dyn_rel_name	&lt;C: #define isc_dyn_rel_name 50	&gt;</body><body package="IBEXDI" selector="isc_dyn_rel_sql_protection">isc_dyn_rel_sql_protection	&lt;C: #define isc_dyn_rel_sql_protection 69	&gt;</body><body package="IBEXDI" selector="isc_dyn_rel_store_trig">isc_dyn_rel_store_trig	&lt;C: #define isc_dyn_rel_store_trig 62	&gt;</body><body package="IBEXDI" selector="isc_dyn_rel_store_trig_source">isc_dyn_rel_store_trig_source	&lt;C: #define isc_dyn_rel_store_trig_source 65	&gt;</body><body package="IBEXDI" selector="isc_dyn_revoke">isc_dyn_revoke	&lt;C: #define isc_dyn_revoke 31	&gt;</body><body package="IBEXDI" selector="isc_dyn_role_does_not_exist">isc_dyn_role_does_not_exist	&lt;C: #define isc_dyn_role_does_not_exist 336068796	&gt;</body><body package="IBEXDI" selector="isc_dyn_roles_not_supported">isc_dyn_roles_not_supported	&lt;C: #define isc_dyn_roles_not_supported 336068804	&gt;</body><body package="IBEXDI" selector="isc_dyn_scl_acl">isc_dyn_scl_acl	&lt;C: #define isc_dyn_scl_acl 121	&gt;</body><body package="IBEXDI" selector="isc_dyn_security_class">isc_dyn_security_class	&lt;C: #define isc_dyn_security_class 54	&gt;</body><body package="IBEXDI" selector="isc_dyn_shadow_conditional">isc_dyn_shadow_conditional	&lt;C: #define isc_dyn_shadow_conditional 130	&gt;</body><body package="IBEXDI" selector="isc_dyn_shadow_man_auto">isc_dyn_shadow_man_auto	&lt;C: #define isc_dyn_shadow_man_auto 129	&gt;</body><body package="IBEXDI" selector="isc_dyn_shadow_number">isc_dyn_shadow_number	&lt;C: #define isc_dyn_shadow_number 128	&gt;</body><body package="IBEXDI" selector="isc_dyn_single_validation">isc_dyn_single_validation	&lt;C: #define isc_dyn_single_validation 199	&gt;</body><body package="IBEXDI" selector="isc_dyn_sql_object">isc_dyn_sql_object	&lt;C: #define isc_dyn_sql_object 196	&gt;</body><body package="IBEXDI" selector="isc_dyn_sql_role_name">isc_dyn_sql_role_name	&lt;C: #define isc_dyn_sql_role_name 212	&gt;</body><body package="IBEXDI" selector="isc_dyn_system_flag">isc_dyn_system_flag	&lt;C: #define isc_dyn_system_flag 55	&gt;</body><body package="IBEXDI" selector="isc_dyn_trg_blr">isc_dyn_trg_blr	&lt;C: #define isc_dyn_trg_blr 111	&gt;</body><body package="IBEXDI" selector="isc_dyn_trg_inactive">isc_dyn_trg_inactive	&lt;C: #define isc_dyn_trg_inactive 116	&gt;</body><body package="IBEXDI" selector="isc_dyn_trg_msg">isc_dyn_trg_msg	&lt;C: #define isc_dyn_trg_msg 118	&gt;</body><body package="IBEXDI" selector="isc_dyn_trg_msg2">isc_dyn_trg_msg2	&lt;C: #define isc_dyn_trg_msg2 159	&gt;</body><body package="IBEXDI" selector="isc_dyn_trg_msg_number">isc_dyn_trg_msg_number	&lt;C: #define isc_dyn_trg_msg_number 117	&gt;</body><body package="IBEXDI" selector="isc_dyn_trg_name">isc_dyn_trg_name	&lt;C: #define isc_dyn_trg_name 114	&gt;</body><body package="IBEXDI" selector="isc_dyn_trg_sequence">isc_dyn_trg_sequence	&lt;C: #define isc_dyn_trg_sequence 115	&gt;</body><body package="IBEXDI" selector="isc_dyn_trg_source">isc_dyn_trg_source	&lt;C: #define isc_dyn_trg_source 112	&gt;</body><body package="IBEXDI" selector="isc_dyn_trg_source2">isc_dyn_trg_source2	&lt;C: #define isc_dyn_trg_source2 160	&gt;</body><body package="IBEXDI" selector="isc_dyn_trg_type">isc_dyn_trg_type	&lt;C: #define isc_dyn_trg_type 110	&gt;</body><body package="IBEXDI" selector="isc_dyn_update_flag">isc_dyn_update_flag	&lt;C: #define isc_dyn_update_flag 56	&gt;</body><body package="IBEXDI" selector="isc_dyn_user_not_role_member">isc_dyn_user_not_role_member	&lt;C: #define isc_dyn_user_not_role_member 336068798	&gt;</body><body package="IBEXDI" selector="isc_dyn_version_1">isc_dyn_version_1	&lt;C: #define isc_dyn_version_1 1	&gt;</body><body package="IBEXDI" selector="isc_dyn_view_blr">isc_dyn_view_blr	&lt;C: #define isc_dyn_view_blr 43	&gt;</body><body package="IBEXDI" selector="isc_dyn_view_context">isc_dyn_view_context	&lt;C: #define isc_dyn_view_context 46	&gt;</body><body package="IBEXDI" selector="isc_dyn_view_context_name">isc_dyn_view_context_name	&lt;C: #define isc_dyn_view_context_name 47	&gt;</body><body package="IBEXDI" selector="isc_dyn_view_relation">isc_dyn_view_relation	&lt;C: #define isc_dyn_view_relation 45	&gt;</body><body package="IBEXDI" selector="isc_dyn_view_source">isc_dyn_view_source	&lt;C: #define isc_dyn_view_source 44	&gt;</body><body package="IBEXDI" selector="isc_dyn_view_source2">isc_dyn_view_source2	&lt;C: #define isc_dyn_view_source2 161	&gt;</body><body package="IBEXDI" selector="isc_dyn_xcp_msg">isc_dyn_xcp_msg	&lt;C: #define isc_dyn_xcp_msg 185	&gt;</body><body package="IBEXDI" selector="isc_dyn_xcp_msg2">isc_dyn_xcp_msg2	&lt;C: #define isc_dyn_xcp_msg2 184	&gt;</body><body package="IBEXDI" selector="isc_err_base">isc_err_base	&lt;C: #define isc_err_base 335544320	&gt;</body><body package="IBEXDI" selector="isc_err_factor">isc_err_factor	&lt;C: #define isc_err_factor 1	&gt;</body><body package="IBEXDI" selector="isc_err_max">isc_err_max	&lt;C: #define isc_err_max 689	&gt;</body><body package="IBEXDI" selector="isc_err_stack_limit">isc_err_stack_limit	&lt;C: #define isc_err_stack_limit 335544717	&gt;</body><body package="IBEXDI" selector="isc_error_adding_sec_record">isc_error_adding_sec_record	&lt;C: #define isc_error_adding_sec_record 335544754	&gt;</body><body package="IBEXDI" selector="isc_error_deleting_sec_record">isc_error_deleting_sec_record	&lt;C: #define isc_error_deleting_sec_record 335544756	&gt;</body><body package="IBEXDI" selector="isc_error_modifying_sec_record">isc_error_modifying_sec_record	&lt;C: #define isc_error_modifying_sec_record 335544755	&gt;</body><body package="IBEXDI" selector="isc_error_updating_sec_db">isc_error_updating_sec_db	&lt;C: #define isc_error_updating_sec_db 335544757	&gt;</body><body package="IBEXDI" selector="isc_except">isc_except	&lt;C: #define isc_except 335544517	&gt;</body><body package="IBEXDI" selector="isc_exception_access_violation">isc_exception_access_violation	&lt;C: #define isc_exception_access_violation 335544768	&gt;</body><body package="IBEXDI" selector="isc_exception_array_bounds_exceeded">isc_exception_array_bounds_exceeded	&lt;C: #define isc_exception_array_bounds_exceeded 335544770	&gt;</body><body package="IBEXDI" selector="isc_exception_datatype_missalignment">isc_exception_datatype_missalignment	&lt;C: #define isc_exception_datatype_missalignment 335544769	&gt;</body><body package="IBEXDI" selector="isc_exception_float_denormal_operand">isc_exception_float_denormal_operand	&lt;C: #define isc_exception_float_denormal_operand 335544771	&gt;</body><body package="IBEXDI" selector="isc_exception_float_divide_by_zero">isc_exception_float_divide_by_zero	&lt;C: #define isc_exception_float_divide_by_zero 335544772	&gt;</body><body package="IBEXDI" selector="isc_exception_float_inexact_result">isc_exception_float_inexact_result	&lt;C: #define isc_exception_float_inexact_result 335544773	&gt;</body><body package="IBEXDI" selector="isc_exception_float_invalid_operand">isc_exception_float_invalid_operand	&lt;C: #define isc_exception_float_invalid_operand 335544774	&gt;</body><body package="IBEXDI" selector="isc_exception_float_overflow">isc_exception_float_overflow	&lt;C: #define isc_exception_float_overflow 335544775	&gt;</body><body package="IBEXDI" selector="isc_exception_float_stack_check">isc_exception_float_stack_check	&lt;C: #define isc_exception_float_stack_check 335544776	&gt;</body><body package="IBEXDI" selector="isc_exception_float_underflow">isc_exception_float_underflow	&lt;C: #define isc_exception_float_underflow 335544777	&gt;</body><body package="IBEXDI" selector="isc_exception_integer_divide_by_zero">isc_exception_integer_divide_by_zero	&lt;C: #define isc_exception_integer_divide_by_zero 335544778	&gt;</body><body package="IBEXDI" selector="isc_exception_integer_overflow">isc_exception_integer_overflow	&lt;C: #define isc_exception_integer_overflow 335544779	&gt;</body><body package="IBEXDI" selector="isc_exception_name">isc_exception_name	&lt;C: #define isc_exception_name 335544610	&gt;</body><body package="IBEXDI" selector="isc_exception_sigbus">isc_exception_sigbus	&lt;C: #define isc_exception_sigbus 335544784	&gt;</body><body package="IBEXDI" selector="isc_exception_sigfpe">isc_exception_sigfpe	&lt;C: #define isc_exception_sigfpe 335544785	&gt;</body><body package="IBEXDI" selector="isc_exception_sigill">isc_exception_sigill	&lt;C: #define isc_exception_sigill 335544783	&gt;</body><body package="IBEXDI" selector="isc_exception_sigsegv">isc_exception_sigsegv	&lt;C: #define isc_exception_sigsegv 335544782	&gt;</body><body package="IBEXDI" selector="isc_exception_stack_overflow">isc_exception_stack_overflow	&lt;C: #define isc_exception_stack_overflow 335544781	&gt;</body><body package="IBEXDI" selector="isc_exception_unknown">isc_exception_unknown	&lt;C: #define isc_exception_unknown 335544780	&gt;</body><body package="IBEXDI" selector="isc_excess_trans">isc_excess_trans	&lt;C: #define isc_excess_trans 335544337	&gt;</body><body package="IBEXDI" selector="isc_existing_priv_mod">isc_existing_priv_mod	&lt;C: #define isc_existing_priv_mod 335544529	&gt;</body><body package="IBEXDI" selector="isc_expec_long">isc_expec_long	&lt;C: #define isc_expec_long 335544700	&gt;</body><body package="IBEXDI" selector="isc_expec_positive">isc_expec_positive	&lt;C: #define isc_expec_positive 335544712	&gt;</body><body package="IBEXDI" selector="isc_expec_short">isc_expec_short	&lt;C: #define isc_expec_short 335544699	&gt;</body><body package="IBEXDI" selector="isc_expec_ushort">isc_expec_ushort	&lt;C: #define isc_expec_ushort 335544701	&gt;</body><body package="IBEXDI" selector="isc_expression_eval_err">isc_expression_eval_err	&lt;C: #define isc_expression_eval_err 335544606	&gt;</body><body package="IBEXDI" selector="isc_ext_err">isc_ext_err	&lt;C: #define isc_ext_err 335544445	&gt;</body><body package="IBEXDI" selector="isc_ext_file_delete">isc_ext_file_delete	&lt;C: #define isc_ext_file_delete 335544786	&gt;</body><body package="IBEXDI" selector="isc_ext_file_modify">isc_ext_file_modify	&lt;C: #define isc_ext_file_modify 335544787	&gt;</body><body package="IBEXDI" selector="isc_ext_readonly_err">isc_ext_readonly_err	&lt;C: #define isc_ext_readonly_err 335544651	&gt;</body><body package="IBEXDI" selector="isc_extern_func_dir_error">isc_extern_func_dir_error	&lt;C: #define isc_extern_func_dir_error 335544809	&gt;</body><body package="IBEXDI" selector="isc_extern_func_err">isc_extern_func_err	&lt;C: #define isc_extern_func_err 335544619	&gt;</body><body package="IBEXDI" selector="isc_extfile_uns_op">isc_extfile_uns_op	&lt;C: #define isc_extfile_uns_op 335544715	&gt;</body><body package="IBEXDI" selector="isc_extract_input_mismatch">isc_extract_input_mismatch	&lt;C: #define isc_extract_input_mismatch 335544789	&gt;</body><body package="IBEXDI" selector="isc_facility">isc_facility	&lt;C: #define isc_facility 20	&gt;</body><body package="IBEXDI" selector="isc_fatal_conflict">isc_fatal_conflict	&lt;C: #define isc_fatal_conflict 335544383	&gt;</body><body package="IBEXDI" selector="isc_field_aggregate_err">isc_field_aggregate_err	&lt;C: #define isc_field_aggregate_err 335544615	&gt;</body><body package="IBEXDI" selector="isc_field_name">isc_field_name	&lt;C: #define isc_field_name 335544611	&gt;</body><body package="IBEXDI" selector="isc_field_ref_err">isc_field_ref_err	&lt;C: #define isc_field_ref_err 335544616	&gt;</body><body package="IBEXDI" selector="isc_file_in_use">isc_file_in_use	&lt;C: #define isc_file_in_use 335544791	&gt;</body><body package="IBEXDI" selector="isc_fldnotdef">isc_fldnotdef	&lt;C: #define isc_fldnotdef 335544396	&gt;</body><body package="IBEXDI" selector="isc_foreign_key">isc_foreign_key	&lt;C: #define isc_foreign_key 335544466	&gt;</body><body package="IBEXDI" selector="isc_foreign_key_notfound">isc_foreign_key_notfound	&lt;C: #define isc_foreign_key_notfound 335544533	&gt;</body><body package="IBEXDI" selector="isc_from_no_match">isc_from_no_match	&lt;C: #define isc_from_no_match 335544338	&gt;</body><body package="IBEXDI" selector="isc_funmismat">isc_funmismat	&lt;C: #define isc_funmismat 335544439	&gt;</body><body package="IBEXDI" selector="isc_funnotdef">isc_funnotdef	&lt;C: #define isc_funnotdef 335544438	&gt;</body><body package="IBEXDI" selector="isc_gbak_bkup_corrupt">isc_gbak_bkup_corrupt	&lt;C: #define isc_gbak_bkup_corrupt 336331019	&gt;</body><body package="IBEXDI" selector="isc_gbak_blob_col_missing">isc_gbak_blob_col_missing	&lt;C: #define isc_gbak_blob_col_missing 336330788	&gt;</body><body package="IBEXDI" selector="isc_gbak_blob_info_failed">isc_gbak_blob_info_failed	&lt;C: #define isc_gbak_blob_info_failed 336330772	&gt;</body><body package="IBEXDI" selector="isc_gbak_block_fac_specified">isc_gbak_block_fac_specified	&lt;C: #define isc_gbak_block_fac_specified 336330936	&gt;</body><body package="IBEXDI" selector="isc_gbak_cant_rest_record">isc_gbak_cant_rest_record	&lt;C: #define isc_gbak_cant_rest_record 336330799	&gt;</body><body package="IBEXDI" selector="isc_gbak_close_blob_failed">isc_gbak_close_blob_failed	&lt;C: #define isc_gbak_close_blob_failed 336330775	&gt;</body><body package="IBEXDI" selector="isc_gbak_comp_req_failed">isc_gbak_comp_req_failed	&lt;C: #define isc_gbak_comp_req_failed 336330779	&gt;</body><body package="IBEXDI" selector="isc_gbak_create_blob_failed">isc_gbak_create_blob_failed	&lt;C: #define isc_gbak_create_blob_failed 336330789	&gt;</body><body package="IBEXDI" selector="isc_gbak_db_create_failed">isc_gbak_db_create_failed	&lt;C: #define isc_gbak_db_create_failed 336330785	&gt;</body><body package="IBEXDI" selector="isc_gbak_db_exists">isc_gbak_db_exists	&lt;C: #define isc_gbak_db_exists 336330766	&gt;</body><body package="IBEXDI" selector="isc_gbak_db_format_too_old">isc_gbak_db_format_too_old	&lt;C: #define isc_gbak_db_format_too_old 336330803	&gt;</body><body package="IBEXDI" selector="isc_gbak_db_in_use">isc_gbak_db_in_use	&lt;C: #define isc_gbak_db_in_use 336330985	&gt;</body><body package="IBEXDI" selector="isc_gbak_db_info_failed">isc_gbak_db_info_failed	&lt;C: #define isc_gbak_db_info_failed 336330783	&gt;</body><body package="IBEXDI" selector="isc_gbak_db_specified">isc_gbak_db_specified	&lt;C: #define isc_gbak_db_specified 336330765	&gt;</body><body package="IBEXDI" selector="isc_gbak_decomp_len_error">isc_gbak_decomp_len_error	&lt;C: #define isc_gbak_decomp_len_error 336330786	&gt;</body><body package="IBEXDI" selector="isc_gbak_disk_space_ex">isc_gbak_disk_space_ex	&lt;C: #define isc_gbak_disk_space_ex 336331022	&gt;</body><body package="IBEXDI" selector="isc_gbak_dup_inout_names">isc_gbak_dup_inout_names	&lt;C: #define isc_gbak_dup_inout_names 336330763	&gt;</body><body package="IBEXDI" selector="isc_gbak_err_restore_charset">isc_gbak_err_restore_charset	&lt;C: #define isc_gbak_err_restore_charset 336330965	&gt;</body><body package="IBEXDI" selector="isc_gbak_err_restore_collation">isc_gbak_err_restore_collation	&lt;C: #define isc_gbak_err_restore_collation 336330967	&gt;</body><body package="IBEXDI" selector="isc_gbak_exp_data_type">isc_gbak_exp_data_type	&lt;C: #define isc_gbak_exp_data_type 336330793	&gt;</body><body package="IBEXDI" selector="isc_gbak_file_outof_sequence">isc_gbak_file_outof_sequence	&lt;C: #define isc_gbak_file_outof_sequence 336331015	&gt;</body><body package="IBEXDI" selector="isc_gbak_filename_missing">isc_gbak_filename_missing	&lt;C: #define isc_gbak_filename_missing 336330762	&gt;</body><body package="IBEXDI" selector="isc_gbak_gen_id_failed">isc_gbak_gen_id_failed	&lt;C: #define isc_gbak_gen_id_failed 336330794	&gt;</body><body package="IBEXDI" selector="isc_gbak_get_seg_failed">isc_gbak_get_seg_failed	&lt;C: #define isc_gbak_get_seg_failed 336330774	&gt;</body><body package="IBEXDI" selector="isc_gbak_hdr_write_failed">isc_gbak_hdr_write_failed	&lt;C: #define isc_gbak_hdr_write_failed 336331021	&gt;</body><body package="IBEXDI" selector="isc_gbak_inv_array_dim">isc_gbak_inv_array_dim	&lt;C: #define isc_gbak_inv_array_dim 336330804	&gt;</body><body package="IBEXDI" selector="isc_gbak_inv_bkup_ver">isc_gbak_inv_bkup_ver	&lt;C: #define isc_gbak_inv_bkup_ver 336330796	&gt;</body><body package="IBEXDI" selector="isc_gbak_inv_block_fac">isc_gbak_inv_block_fac	&lt;C: #define isc_gbak_inv_block_fac 336330935	&gt;</body><body package="IBEXDI" selector="isc_gbak_inv_page_size">isc_gbak_inv_page_size	&lt;C: #define isc_gbak_inv_page_size 336330764	&gt;</body><body package="IBEXDI" selector="isc_gbak_inv_rec_len">isc_gbak_inv_rec_len	&lt;C: #define isc_gbak_inv_rec_len 336330792	&gt;</body><body package="IBEXDI" selector="isc_gbak_inv_size">isc_gbak_inv_size	&lt;C: #define isc_gbak_inv_size 336331014	&gt;</body><body package="IBEXDI" selector="isc_gbak_inv_skipped_bytes">isc_gbak_inv_skipped_bytes	&lt;C: #define isc_gbak_inv_skipped_bytes 336330953	&gt;</body><body package="IBEXDI" selector="isc_gbak_join_file_missing">isc_gbak_join_file_missing	&lt;C: #define isc_gbak_join_file_missing 336331016	&gt;</body><body package="IBEXDI" selector="isc_gbak_missing_bkup_desc">isc_gbak_missing_bkup_desc	&lt;C: #define isc_gbak_missing_bkup_desc 336330797	&gt;</body><body package="IBEXDI" selector="isc_gbak_missing_block_fac">isc_gbak_missing_block_fac	&lt;C: #define isc_gbak_missing_block_fac 336330934	&gt;</body><body package="IBEXDI" selector="isc_gbak_missing_password">isc_gbak_missing_password	&lt;C: #define isc_gbak_missing_password 336330941	&gt;</body><body package="IBEXDI" selector="isc_gbak_missing_skipped_bytes">isc_gbak_missing_skipped_bytes	&lt;C: #define isc_gbak_missing_skipped_bytes 336330952	&gt;</body><body package="IBEXDI" selector="isc_gbak_missing_username">isc_gbak_missing_username	&lt;C: #define isc_gbak_missing_username 336330940	&gt;</body><body package="IBEXDI" selector="isc_gbak_mode_req">isc_gbak_mode_req	&lt;C: #define isc_gbak_mode_req 336331031	&gt;</body><body package="IBEXDI" selector="isc_gbak_multi_source_dest">isc_gbak_multi_source_dest	&lt;C: #define isc_gbak_multi_source_dest 336330761	&gt;</body><body package="IBEXDI" selector="isc_gbak_no_db_desc">isc_gbak_no_db_desc	&lt;C: #define isc_gbak_no_db_desc 336330784	&gt;</body><body package="IBEXDI" selector="isc_gbak_no_protection">isc_gbak_no_protection	&lt;C: #define isc_gbak_no_protection 336330759	&gt;</body><body package="IBEXDI" selector="isc_gbak_no_tbl_name">isc_gbak_no_tbl_name	&lt;C: #define isc_gbak_no_tbl_name 336330801	&gt;</body><body package="IBEXDI" selector="isc_gbak_not_ownr">isc_gbak_not_ownr	&lt;C: #define isc_gbak_not_ownr 336331026	&gt;</body><body package="IBEXDI" selector="isc_gbak_open_bkup_error">isc_gbak_open_bkup_error	&lt;C: #define isc_gbak_open_bkup_error 336330817	&gt;</body><body package="IBEXDI" selector="isc_gbak_open_blob_failed">isc_gbak_open_blob_failed	&lt;C: #define isc_gbak_open_blob_failed 336330776	&gt;</body><body package="IBEXDI" selector="isc_gbak_open_error">isc_gbak_open_error	&lt;C: #define isc_gbak_open_error 336330818	&gt;</body><body package="IBEXDI" selector="isc_gbak_page_buffers_missing">isc_gbak_page_buffers_missing	&lt;C: #define isc_gbak_page_buffers_missing 336331010	&gt;</body><body package="IBEXDI" selector="isc_gbak_page_buffers_restore">isc_gbak_page_buffers_restore	&lt;C: #define isc_gbak_page_buffers_restore 336331012	&gt;</body><body package="IBEXDI" selector="isc_gbak_page_buffers_wrong_param">isc_gbak_page_buffers_wrong_param	&lt;C: #define isc_gbak_page_buffers_wrong_param 336331011	&gt;</body><body package="IBEXDI" selector="isc_gbak_page_size_missing">isc_gbak_page_size_missing	&lt;C: #define isc_gbak_page_size_missing 336330754	&gt;</body><body package="IBEXDI" selector="isc_gbak_page_size_not_allowed">isc_gbak_page_size_not_allowed	&lt;C: #define isc_gbak_page_size_not_allowed 336330760	&gt;</body><body package="IBEXDI" selector="isc_gbak_page_size_toobig">isc_gbak_page_size_toobig	&lt;C: #define isc_gbak_page_size_toobig 336330755	&gt;</body><body package="IBEXDI" selector="isc_gbak_put_blr_gen_id_failed">isc_gbak_put_blr_gen_id_failed	&lt;C: #define isc_gbak_put_blr_gen_id_failed 336330777	&gt;</body><body package="IBEXDI" selector="isc_gbak_put_seg_failed">isc_gbak_put_seg_failed	&lt;C: #define isc_gbak_put_seg_failed 336330790	&gt;</body><body package="IBEXDI" selector="isc_gbak_read_error">isc_gbak_read_error	&lt;C: #define isc_gbak_read_error 336330972	&gt;</body><body package="IBEXDI" selector="isc_gbak_rec_failed">isc_gbak_rec_failed	&lt;C: #define isc_gbak_rec_failed 336330781	&gt;</body><body package="IBEXDI" selector="isc_gbak_rec_len_exp">isc_gbak_rec_len_exp	&lt;C: #define isc_gbak_rec_len_exp 336330791	&gt;</body><body package="IBEXDI" selector="isc_gbak_redir_ouput_missing">isc_gbak_redir_ouput_missing	&lt;C: #define isc_gbak_redir_ouput_missing 336330756	&gt;</body><body package="IBEXDI" selector="isc_gbak_rel_req_failed">isc_gbak_rel_req_failed	&lt;C: #define isc_gbak_rel_req_failed 336330782	&gt;</body><body package="IBEXDI" selector="isc_gbak_restore_role_failed">isc_gbak_restore_role_failed	&lt;C: #define isc_gbak_restore_role_failed 336331002	&gt;</body><body package="IBEXDI" selector="isc_gbak_role_op_missing">isc_gbak_role_op_missing	&lt;C: #define isc_gbak_role_op_missing 336331005	&gt;</body><body package="IBEXDI" selector="isc_gbak_send_failed">isc_gbak_send_failed	&lt;C: #define isc_gbak_send_failed 336330800	&gt;</body><body package="IBEXDI" selector="isc_gbak_size_lt_min">isc_gbak_size_lt_min	&lt;C: #define isc_gbak_size_lt_min 336331023	&gt;</body><body package="IBEXDI" selector="isc_gbak_start_req_failed">isc_gbak_start_req_failed	&lt;C: #define isc_gbak_start_req_failed 336330780	&gt;</body><body package="IBEXDI" selector="isc_gbak_stdin_not_supptd">isc_gbak_stdin_not_supptd	&lt;C: #define isc_gbak_stdin_not_supptd 336331017	&gt;</body><body package="IBEXDI" selector="isc_gbak_stdout_not_supptd">isc_gbak_stdout_not_supptd	&lt;C: #define isc_gbak_stdout_not_supptd 336331018	&gt;</body><body package="IBEXDI" selector="isc_gbak_string_trunc">isc_gbak_string_trunc	&lt;C: #define isc_gbak_string_trunc 336330798	&gt;</body><body package="IBEXDI" selector="isc_gbak_svc_name_missing">isc_gbak_svc_name_missing	&lt;C: #define isc_gbak_svc_name_missing 336331025	&gt;</body><body package="IBEXDI" selector="isc_gbak_switches_conflict">isc_gbak_switches_conflict	&lt;C: #define isc_gbak_switches_conflict 336330757	&gt;</body><body package="IBEXDI" selector="isc_gbak_sysmemex">isc_gbak_sysmemex	&lt;C: #define isc_gbak_sysmemex 336330990	&gt;</body><body package="IBEXDI" selector="isc_gbak_tbl_missing">isc_gbak_tbl_missing	&lt;C: #define isc_gbak_tbl_missing 336330787	&gt;</body><body package="IBEXDI" selector="isc_gbak_unexp_eof">isc_gbak_unexp_eof	&lt;C: #define isc_gbak_unexp_eof 336330802	&gt;</body><body package="IBEXDI" selector="isc_gbak_unk_blob_item">isc_gbak_unk_blob_item	&lt;C: #define isc_gbak_unk_blob_item 336330773	&gt;</body><body package="IBEXDI" selector="isc_gbak_unk_db_file_spec">isc_gbak_unk_db_file_spec	&lt;C: #define isc_gbak_unk_db_file_spec 336331020	&gt;</body><body package="IBEXDI" selector="isc_gbak_unk_device">isc_gbak_unk_device	&lt;C: #define isc_gbak_unk_device 336330767	&gt;</body><body package="IBEXDI" selector="isc_gbak_unk_rec_type">isc_gbak_unk_rec_type	&lt;C: #define isc_gbak_unk_rec_type 336330795	&gt;</body><body package="IBEXDI" selector="isc_gbak_unk_type">isc_gbak_unk_type	&lt;C: #define isc_gbak_unk_type 336330778	&gt;</body><body package="IBEXDI" selector="isc_gbak_unknown_device">isc_gbak_unknown_device	&lt;C: #define isc_gbak_unknown_device 336330758	&gt;</body><body package="IBEXDI" selector="isc_gbak_unknown_switch">isc_gbak_unknown_switch	&lt;C: #define isc_gbak_unknown_switch 336330753	&gt;</body><body package="IBEXDI" selector="isc_gbak_write_error">isc_gbak_write_error	&lt;C: #define isc_gbak_write_error 336330973	&gt;</body><body package="IBEXDI" selector="isc_gbak_xdr_len_expected">isc_gbak_xdr_len_expected	&lt;C: #define isc_gbak_xdr_len_expected 336330807	&gt;</body><body package="IBEXDI" selector="isc_gennotdef">isc_gennotdef	&lt;C: #define isc_gennotdef 335544463	&gt;</body><body package="IBEXDI" selector="isc_gfix_bad_pool">isc_gfix_bad_pool	&lt;C: #define isc_gfix_bad_pool 335740994	&gt;</body><body package="IBEXDI" selector="isc_gfix_corrupt_pool">isc_gfix_corrupt_pool	&lt;C: #define isc_gfix_corrupt_pool 335740992	&gt;</body><body package="IBEXDI" selector="isc_gfix_db_name">isc_gfix_db_name	&lt;C: #define isc_gfix_db_name 335740929	&gt;</body><body package="IBEXDI" selector="isc_gfix_exceed_max">isc_gfix_exceed_max	&lt;C: #define isc_gfix_exceed_max 335740991	&gt;</body><body package="IBEXDI" selector="isc_gfix_full_req">isc_gfix_full_req	&lt;C: #define isc_gfix_full_req 335740940	&gt;</body><body package="IBEXDI" selector="isc_gfix_incmp_sw">isc_gfix_incmp_sw	&lt;C: #define isc_gfix_incmp_sw 335740932	&gt;</body><body package="IBEXDI" selector="isc_gfix_invalid_sw">isc_gfix_invalid_sw	&lt;C: #define isc_gfix_invalid_sw 335740930	&gt;</body><body package="IBEXDI" selector="isc_gfix_mem_exhausted">isc_gfix_mem_exhausted	&lt;C: #define isc_gfix_mem_exhausted 335740993	&gt;</body><body package="IBEXDI" selector="isc_gfix_mode_req">isc_gfix_mode_req	&lt;C: #define isc_gfix_mode_req 335741038	&gt;</body><body package="IBEXDI" selector="isc_gfix_nval_req">isc_gfix_nval_req	&lt;C: #define isc_gfix_nval_req 335740946	&gt;</body><body package="IBEXDI" selector="isc_gfix_opt_SQL_dialect">isc_gfix_opt_SQL_dialect	&lt;C: #define isc_gfix_opt_SQL_dialect 335741039	&gt;</body><body package="IBEXDI" selector="isc_gfix_pass_req">isc_gfix_pass_req	&lt;C: #define isc_gfix_pass_req 335740942	&gt;</body><body package="IBEXDI" selector="isc_gfix_pgbuf_req">isc_gfix_pgbuf_req	&lt;C: #define isc_gfix_pgbuf_req 335740934	&gt;</body><body package="IBEXDI" selector="isc_gfix_pval_req">isc_gfix_pval_req	&lt;C: #define isc_gfix_pval_req 335740936	&gt;</body><body package="IBEXDI" selector="isc_gfix_recon_fail">isc_gfix_recon_fail	&lt;C: #define isc_gfix_recon_fail 335741018	&gt;</body><body package="IBEXDI" selector="isc_gfix_replay_req">isc_gfix_replay_req	&lt;C: #define isc_gfix_replay_req 335740933	&gt;</body><body package="IBEXDI" selector="isc_gfix_retry">isc_gfix_retry	&lt;C: #define isc_gfix_retry 335740948	&gt;</body><body package="IBEXDI" selector="isc_gfix_retry_db">isc_gfix_retry_db	&lt;C: #define isc_gfix_retry_db 335740951	&gt;</body><body package="IBEXDI" selector="isc_gfix_sec_req">isc_gfix_sec_req	&lt;C: #define isc_gfix_sec_req 335740945	&gt;</body><body package="IBEXDI" selector="isc_gfix_subs_name">isc_gfix_subs_name	&lt;C: #define isc_gfix_subs_name 335740943	&gt;</body><body package="IBEXDI" selector="isc_gfix_trn_not_valid">isc_gfix_trn_not_valid	&lt;C: #define isc_gfix_trn_not_valid 335740995	&gt;</body><body package="IBEXDI" selector="isc_gfix_trn_req">isc_gfix_trn_req	&lt;C: #define isc_gfix_trn_req 335740937	&gt;</body><body package="IBEXDI" selector="isc_gfix_trn_unknown">isc_gfix_trn_unknown	&lt;C: #define isc_gfix_trn_unknown 335741036	&gt;</body><body package="IBEXDI" selector="isc_gfix_type_shut">isc_gfix_type_shut	&lt;C: #define isc_gfix_type_shut 335740947	&gt;</body><body package="IBEXDI" selector="isc_gfix_unexp_eoi">isc_gfix_unexp_eoi	&lt;C: #define isc_gfix_unexp_eoi 335741012	&gt;</body><body package="IBEXDI" selector="isc_gfix_usrname_req">isc_gfix_usrname_req	&lt;C: #define isc_gfix_usrname_req 335740941	&gt;</body><body package="IBEXDI" selector="isc_gfix_val_req">isc_gfix_val_req	&lt;C: #define isc_gfix_val_req 335740935	&gt;</body><body package="IBEXDI" selector="isc_gfix_wal_req">isc_gfix_wal_req	&lt;C: #define isc_gfix_wal_req 335740944	&gt;</body><body package="IBEXDI" selector="isc_grant_fld_notfound">isc_grant_fld_notfound	&lt;C: #define isc_grant_fld_notfound 335544552	&gt;</body><body package="IBEXDI" selector="isc_grant_nopriv">isc_grant_nopriv	&lt;C: #define isc_grant_nopriv 335544553	&gt;</body><body package="IBEXDI" selector="isc_grant_nopriv_on_base">isc_grant_nopriv_on_base	&lt;C: #define isc_grant_nopriv_on_base 335544707	&gt;</body><body package="IBEXDI" selector="isc_grant_obj_notfound">isc_grant_obj_notfound	&lt;C: #define isc_grant_obj_notfound 335544551	&gt;</body><body package="IBEXDI" selector="isc_gsec_amb_switch">isc_gsec_amb_switch	&lt;C: #define isc_gsec_amb_switch 336724009	&gt;</body><body package="IBEXDI" selector="isc_gsec_cant_open_db">isc_gsec_cant_open_db	&lt;C: #define isc_gsec_cant_open_db 336723983	&gt;</body><body package="IBEXDI" selector="isc_gsec_db_admin_pw_specified">isc_gsec_db_admin_pw_specified	&lt;C: #define isc_gsec_db_admin_pw_specified 336724048	&gt;</body><body package="IBEXDI" selector="isc_gsec_db_admin_specified">isc_gsec_db_admin_specified	&lt;C: #define isc_gsec_db_admin_specified 336724047	&gt;</body><body package="IBEXDI" selector="isc_gsec_db_specified">isc_gsec_db_specified	&lt;C: #define isc_gsec_db_specified 336724046	&gt;</body><body package="IBEXDI" selector="isc_gsec_err_add">isc_gsec_err_add	&lt;C: #define isc_gsec_err_add 336723987	&gt;</body><body package="IBEXDI" selector="isc_gsec_err_delete">isc_gsec_err_delete	&lt;C: #define isc_gsec_err_delete 336723991	&gt;</body><body package="IBEXDI" selector="isc_gsec_err_find_del">isc_gsec_err_find_del	&lt;C: #define isc_gsec_err_find_del 336723992	&gt;</body><body package="IBEXDI" selector="isc_gsec_err_find_disp">isc_gsec_err_find_disp	&lt;C: #define isc_gsec_err_find_disp 336723996	&gt;</body><body package="IBEXDI" selector="isc_gsec_err_find_mod">isc_gsec_err_find_mod	&lt;C: #define isc_gsec_err_find_mod 336723989	&gt;</body><body package="IBEXDI" selector="isc_gsec_err_modify">isc_gsec_err_modify	&lt;C: #define isc_gsec_err_modify 336723988	&gt;</body><body package="IBEXDI" selector="isc_gsec_err_rec_not_found">isc_gsec_err_rec_not_found	&lt;C: #define isc_gsec_err_rec_not_found 336723990	&gt;</body><body package="IBEXDI" selector="isc_gsec_fname_specified">isc_gsec_fname_specified	&lt;C: #define isc_gsec_fname_specified 336724004	&gt;</body><body package="IBEXDI" selector="isc_gsec_gid_specified">isc_gsec_gid_specified	&lt;C: #define isc_gsec_gid_specified 336724001	&gt;</body><body package="IBEXDI" selector="isc_gsec_incompat_switch">isc_gsec_incompat_switch	&lt;C: #define isc_gsec_incompat_switch 336724012	&gt;</body><body package="IBEXDI" selector="isc_gsec_inv_param">isc_gsec_inv_param	&lt;C: #define isc_gsec_inv_param 336723997	&gt;</body><body package="IBEXDI" selector="isc_gsec_inv_pw_length">isc_gsec_inv_pw_length	&lt;C: #define isc_gsec_inv_pw_length 336724045	&gt;</body><body package="IBEXDI" selector="isc_gsec_inv_switch">isc_gsec_inv_switch	&lt;C: #define isc_gsec_inv_switch 336724008	&gt;</body><body package="IBEXDI" selector="isc_gsec_inv_username">isc_gsec_inv_username	&lt;C: #define isc_gsec_inv_username 336724044	&gt;</body><body package="IBEXDI" selector="isc_gsec_lname_specified">isc_gsec_lname_specified	&lt;C: #define isc_gsec_lname_specified 336724006	&gt;</body><body package="IBEXDI" selector="isc_gsec_mname_specified">isc_gsec_mname_specified	&lt;C: #define isc_gsec_mname_specified 336724005	&gt;</body><body package="IBEXDI" selector="isc_gsec_no_op_spec">isc_gsec_no_op_spec	&lt;C: #define isc_gsec_no_op_spec 336723985	&gt;</body><body package="IBEXDI" selector="isc_gsec_no_op_specified">isc_gsec_no_op_specified	&lt;C: #define isc_gsec_no_op_specified 336724010	&gt;</body><body package="IBEXDI" selector="isc_gsec_no_usr_name">isc_gsec_no_usr_name	&lt;C: #define isc_gsec_no_usr_name 336723986	&gt;</body><body package="IBEXDI" selector="isc_gsec_op_specified">isc_gsec_op_specified	&lt;C: #define isc_gsec_op_specified 336723998	&gt;</body><body package="IBEXDI" selector="isc_gsec_org_specified">isc_gsec_org_specified	&lt;C: #define isc_gsec_org_specified 336724003	&gt;</body><body package="IBEXDI" selector="isc_gsec_params_not_allowed">isc_gsec_params_not_allowed	&lt;C: #define isc_gsec_params_not_allowed 336724011	&gt;</body><body package="IBEXDI" selector="isc_gsec_proj_specified">isc_gsec_proj_specified	&lt;C: #define isc_gsec_proj_specified 336724002	&gt;</body><body package="IBEXDI" selector="isc_gsec_pw_specified">isc_gsec_pw_specified	&lt;C: #define isc_gsec_pw_specified 336723999	&gt;</body><body package="IBEXDI" selector="isc_gsec_sql_role_specified">isc_gsec_sql_role_specified	&lt;C: #define isc_gsec_sql_role_specified 336724049	&gt;</body><body package="IBEXDI" selector="isc_gsec_switches_error">isc_gsec_switches_error	&lt;C: #define isc_gsec_switches_error 336723984	&gt;</body><body package="IBEXDI" selector="isc_gsec_uid_specified">isc_gsec_uid_specified	&lt;C: #define isc_gsec_uid_specified 336724000	&gt;</body><body package="IBEXDI" selector="isc_gstat_open_err">isc_gstat_open_err	&lt;C: #define isc_gstat_open_err 336920605	&gt;</body><body package="IBEXDI" selector="isc_gstat_read_err">isc_gstat_read_err	&lt;C: #define isc_gstat_read_err 336920606	&gt;</body><body package="IBEXDI" selector="isc_gstat_retry">isc_gstat_retry	&lt;C: #define isc_gstat_retry 336920578	&gt;</body><body package="IBEXDI" selector="isc_gstat_sysmemex">isc_gstat_sysmemex	&lt;C: #define isc_gstat_sysmemex 336920607	&gt;</body><body package="IBEXDI" selector="isc_gstat_unexpected_eof">isc_gstat_unexpected_eof	&lt;C: #define isc_gstat_unexpected_eof 336920580	&gt;</body><body package="IBEXDI" selector="isc_gstat_unknown_switch">isc_gstat_unknown_switch	&lt;C: #define isc_gstat_unknown_switch 336920577	&gt;</body><body package="IBEXDI" selector="isc_gstat_wrong_ods">isc_gstat_wrong_ods	&lt;C: #define isc_gstat_wrong_ods 336920579	&gt;</body><body package="IBEXDI" selector="isc_high_minor">isc_high_minor	&lt;C: #define isc_high_minor 335544467	&gt;</body><body package="IBEXDI" selector="isc_host_unknown">isc_host_unknown	&lt;C: #define isc_host_unknown 335544706	&gt;</body><body package="IBEXDI" selector="isc_ib_error">isc_ib_error	&lt;C: #define isc_ib_error 335544689	&gt;</body><body package="IBEXDI" selector="isc_idx_create_err">isc_idx_create_err	&lt;C: #define isc_idx_create_err 335544628	&gt;</body><body package="IBEXDI" selector="isc_idx_key_err">isc_idx_key_err	&lt;C: #define isc_idx_key_err 335544631	&gt;</body><body package="IBEXDI" selector="isc_idx_seg_err">isc_idx_seg_err	&lt;C: #define isc_idx_seg_err 335544624	&gt;</body><body package="IBEXDI" selector="isc_imp_exc">isc_imp_exc	&lt;C: #define isc_imp_exc 335544381	&gt;</body><body package="IBEXDI" selector="isc_index_name">isc_index_name	&lt;C: #define isc_index_name 335544609	&gt;</body><body package="IBEXDI" selector="isc_index_root_page_full">isc_index_root_page_full	&lt;C: #define isc_index_root_page_full 335544661	&gt;</body><body package="IBEXDI" selector="isc_index_unused">isc_index_unused	&lt;C: #define isc_index_unused 335544642	&gt;</body><body package="IBEXDI" selector="isc_indexname">isc_indexname	&lt;C: #define isc_indexname 335544636	&gt;</body><body package="IBEXDI" selector="isc_indexnotdefined">isc_indexnotdefined	&lt;C: #define isc_indexnotdefined 335544471	&gt;</body><body package="IBEXDI" selector="isc_infinap">isc_infinap	&lt;C: #define isc_infinap 335544339	&gt;</body><body package="IBEXDI" selector="isc_info_access_path">isc_info_access_path	&lt;C: #define isc_info_access_path 12	&gt;</body><body package="IBEXDI" selector="isc_info_allocation">isc_info_allocation	&lt;C: #define isc_info_allocation 21	&gt;</body><body package="IBEXDI" selector="isc_info_attachment_id">isc_info_attachment_id	&lt;C: #define isc_info_attachment_id 22	&gt;</body><body package="IBEXDI" selector="isc_info_backout_count">isc_info_backout_count	&lt;C: #define isc_info_backout_count 28	&gt;</body><body package="IBEXDI" selector="isc_info_base_level">isc_info_base_level	&lt;C: #define isc_info_base_level 13	&gt;</body><body package="IBEXDI" selector="isc_info_blob_max_segment">isc_info_blob_max_segment	&lt;C: #define isc_info_blob_max_segment 5	&gt;</body><body package="IBEXDI" selector="isc_info_blob_num_segments">isc_info_blob_num_segments	&lt;C: #define isc_info_blob_num_segments 4	&gt;</body><body package="IBEXDI" selector="isc_info_blob_total_length">isc_info_blob_total_length	&lt;C: #define isc_info_blob_total_length 6	&gt;</body><body package="IBEXDI" selector="isc_info_blob_type">isc_info_blob_type	&lt;C: #define isc_info_blob_type 7	&gt;</body><body package="IBEXDI" selector="isc_info_bpage_errors">isc_info_bpage_errors	&lt;C: #define isc_info_bpage_errors 56	&gt;</body><body package="IBEXDI" selector="isc_info_cur_log_part_offset">isc_info_cur_log_part_offset	&lt;C: #define isc_info_cur_log_part_offset 37	&gt;</body><body package="IBEXDI" selector="isc_info_cur_logfile_name">isc_info_cur_logfile_name	&lt;C: #define isc_info_cur_logfile_name 36	&gt;</body><body package="IBEXDI" selector="isc_info_current_memory">isc_info_current_memory	&lt;C: #define isc_info_current_memory 17	&gt;</body><body package="IBEXDI" selector="isc_info_data_not_ready">isc_info_data_not_ready	&lt;C: #define isc_info_data_not_ready 4	&gt;</body><body package="IBEXDI" selector="isc_info_db_SQL_dialect">isc_info_db_SQL_dialect	&lt;C: #define isc_info_db_SQL_dialect 62	&gt;</body><body package="IBEXDI" selector="isc_info_db_class_access">isc_info_db_class_access	&lt;C: #define isc_info_db_class_access 1	&gt;</body><body package="IBEXDI" selector="isc_info_db_class_cache">isc_info_db_class_cache	&lt;C: #define isc_info_db_class_cache 12	&gt;</body><body package="IBEXDI" selector="isc_info_db_class_gateway">isc_info_db_class_gateway	&lt;C: #define isc_info_db_class_gateway 11	&gt;</body><body package="IBEXDI" selector="isc_info_db_class_pipe_int">isc_info_db_class_pipe_int	&lt;C: #define isc_info_db_class_pipe_int 7	&gt;</body><body package="IBEXDI" selector="isc_info_db_class_pipe_srvr">isc_info_db_class_pipe_srvr	&lt;C: #define isc_info_db_class_pipe_srvr 8	&gt;</body><body package="IBEXDI" selector="isc_info_db_class_rem_int">isc_info_db_class_rem_int	&lt;C: #define isc_info_db_class_rem_int 3	&gt;</body><body package="IBEXDI" selector="isc_info_db_class_rem_srvr">isc_info_db_class_rem_srvr	&lt;C: #define isc_info_db_class_rem_srvr 4	&gt;</body><body package="IBEXDI" selector="isc_info_db_class_sam_int">isc_info_db_class_sam_int	&lt;C: #define isc_info_db_class_sam_int 9	&gt;</body><body package="IBEXDI" selector="isc_info_db_class_sam_srvr">isc_info_db_class_sam_srvr	&lt;C: #define isc_info_db_class_sam_srvr 10	&gt;</body><body package="IBEXDI" selector="isc_info_db_class_y_valve">isc_info_db_class_y_valve	&lt;C: #define isc_info_db_class_y_valve 2	&gt;</body><body package="IBEXDI" selector="isc_info_db_id">isc_info_db_id	&lt;C: #define isc_info_db_id 4	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_a">isc_info_db_impl_isc_a	&lt;C: #define isc_info_db_impl_isc_a 25	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_apl_68K">isc_info_db_impl_isc_apl_68K	&lt;C: #define isc_info_db_impl_isc_apl_68K 25	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_cray">isc_info_db_impl_isc_cray	&lt;C: #define isc_info_db_impl_isc_cray 43	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_delta">isc_info_db_impl_isc_delta	&lt;C: #define isc_info_db_impl_isc_delta 45	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_dg">isc_info_db_impl_isc_dg	&lt;C: #define isc_info_db_impl_isc_dg 38	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_dos">isc_info_db_impl_isc_dos	&lt;C: #define isc_info_db_impl_isc_dos 47	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_epson">isc_info_db_impl_isc_epson	&lt;C: #define isc_info_db_impl_isc_epson 49	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_hp_mpexl">isc_info_db_impl_isc_hp_mpexl	&lt;C: #define isc_info_db_impl_isc_hp_mpexl 39	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_hp_ux">isc_info_db_impl_isc_hp_ux	&lt;C: #define isc_info_db_impl_isc_hp_ux 31	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_hp_ux68K">isc_info_db_impl_isc_hp_ux68K	&lt;C: #define isc_info_db_impl_isc_hp_ux68K 40	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_imp">isc_info_db_impl_isc_imp	&lt;C: #define isc_info_db_impl_isc_imp 44	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_mac_aux">isc_info_db_impl_isc_mac_aux	&lt;C: #define isc_info_db_impl_isc_mac_aux 34	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_mips_ult">isc_info_db_impl_isc_mips_ult	&lt;C: #define isc_info_db_impl_isc_mips_ult 36	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_next">isc_info_db_impl_isc_next	&lt;C: #define isc_info_db_impl_isc_next 46	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_os2">isc_info_db_impl_isc_os2	&lt;C: #define isc_info_db_impl_isc_os2 29	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_rt_aix">isc_info_db_impl_isc_rt_aix	&lt;C: #define isc_info_db_impl_isc_rt_aix 35	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_s">isc_info_db_impl_isc_s	&lt;C: #define isc_info_db_impl_isc_s 28	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_sco_unix">isc_info_db_impl_isc_sco_unix	&lt;C: #define isc_info_db_impl_isc_sco_unix 42	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_sgi">isc_info_db_impl_isc_sgi	&lt;C: #define isc_info_db_impl_isc_sgi 41	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_sun4">isc_info_db_impl_isc_sun4	&lt;C: #define isc_info_db_impl_isc_sun4 30	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_sun_386i">isc_info_db_impl_isc_sun_386i	&lt;C: #define isc_info_db_impl_isc_sun_386i 32	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_sun_68k">isc_info_db_impl_isc_sun_68k	&lt;C: #define isc_info_db_impl_isc_sun_68k 28	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_u">isc_info_db_impl_isc_u	&lt;C: #define isc_info_db_impl_isc_u 26	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_v">isc_info_db_impl_isc_v	&lt;C: #define isc_info_db_impl_isc_v 27	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_vax_ultr">isc_info_db_impl_isc_vax_ultr	&lt;C: #define isc_info_db_impl_isc_vax_ultr 26	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_vms">isc_info_db_impl_isc_vms	&lt;C: #define isc_info_db_impl_isc_vms 27	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_vms_orcl">isc_info_db_impl_isc_vms_orcl	&lt;C: #define isc_info_db_impl_isc_vms_orcl 33	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_winnt">isc_info_db_impl_isc_winnt	&lt;C: #define isc_info_db_impl_isc_winnt 48	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_isc_xenix">isc_info_db_impl_isc_xenix	&lt;C: #define isc_info_db_impl_isc_xenix 37	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_jri">isc_info_db_impl_jri	&lt;C: #define isc_info_db_impl_jri 6	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_jsv">isc_info_db_impl_jsv	&lt;C: #define isc_info_db_impl_jsv 7	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_rdb_eln">isc_info_db_impl_rdb_eln	&lt;C: #define isc_info_db_impl_rdb_eln 2	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_rdb_eln_dev">isc_info_db_impl_rdb_eln_dev	&lt;C: #define isc_info_db_impl_rdb_eln_dev 3	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_rdb_eln_y">isc_info_db_impl_rdb_eln_y	&lt;C: #define isc_info_db_impl_rdb_eln_y 5	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_rdb_vms">isc_info_db_impl_rdb_vms	&lt;C: #define isc_info_db_impl_rdb_vms 1	&gt;</body><body package="IBEXDI" selector="isc_info_db_impl_rdb_vms_y">isc_info_db_impl_rdb_vms_y	&lt;C: #define isc_info_db_impl_rdb_vms_y 4	&gt;</body><body package="IBEXDI" selector="isc_info_db_read_only">isc_info_db_read_only	&lt;C: #define isc_info_db_read_only 63	&gt;</body><body package="IBEXDI" selector="isc_info_db_size_in_pages">isc_info_db_size_in_pages	&lt;C: #define isc_info_db_size_in_pages 64	&gt;</body><body package="IBEXDI" selector="isc_info_db_sql_dialect">isc_info_db_sql_dialect	&lt;C: #define isc_info_db_sql_dialect 62	&gt;</body><body package="IBEXDI" selector="isc_info_delete_count">isc_info_delete_count	&lt;C: #define isc_info_delete_count 27	&gt;</body><body package="IBEXDI" selector="isc_info_dpage_errors">isc_info_dpage_errors	&lt;C: #define isc_info_dpage_errors 57	&gt;</body><body package="IBEXDI" selector="isc_info_end">isc_info_end	&lt;C: #define isc_info_end 1	&gt;</body><body package="IBEXDI" selector="isc_info_error">isc_info_error	&lt;C: #define isc_info_error 3	&gt;</body><body package="IBEXDI" selector="isc_info_expunge_count">isc_info_expunge_count	&lt;C: #define isc_info_expunge_count 30	&gt;</body><body package="IBEXDI" selector="isc_info_fetches">isc_info_fetches	&lt;C: #define isc_info_fetches 7	&gt;</body><body package="IBEXDI" selector="isc_info_flag_end">isc_info_flag_end	&lt;C: #define isc_info_flag_end 127	&gt;</body><body package="IBEXDI" selector="isc_info_forced_writes">isc_info_forced_writes	&lt;C: #define isc_info_forced_writes 52	&gt;</body><body package="IBEXDI" selector="isc_info_implementation">isc_info_implementation	&lt;C: #define isc_info_implementation 11	&gt;</body><body package="IBEXDI" selector="isc_info_insert_count">isc_info_insert_count	&lt;C: #define isc_info_insert_count 25	&gt;</body><body package="IBEXDI" selector="isc_info_ipage_errors">isc_info_ipage_errors	&lt;C: #define isc_info_ipage_errors 58	&gt;</body><body package="IBEXDI" selector="isc_info_license">isc_info_license	&lt;C: #define isc_info_license 20	&gt;</body><body package="IBEXDI" selector="isc_info_limbo">isc_info_limbo	&lt;C: #define isc_info_limbo 16	&gt;</body><body package="IBEXDI" selector="isc_info_logfile">isc_info_logfile	&lt;C: #define isc_info_logfile 35	&gt;</body><body package="IBEXDI" selector="isc_info_marks">isc_info_marks	&lt;C: #define isc_info_marks 8	&gt;</body><body package="IBEXDI" selector="isc_info_max_memory">isc_info_max_memory	&lt;C: #define isc_info_max_memory 18	&gt;</body><body package="IBEXDI" selector="isc_info_max_message">isc_info_max_message	&lt;C: #define isc_info_max_message 5	&gt;</body><body package="IBEXDI" selector="isc_info_max_receive">isc_info_max_receive	&lt;C: #define isc_info_max_receive 7	&gt;</body><body package="IBEXDI" selector="isc_info_max_send">isc_info_max_send	&lt;C: #define isc_info_max_send 6	&gt;</body><body package="IBEXDI" selector="isc_info_message_number">isc_info_message_number	&lt;C: #define isc_info_message_number 9	&gt;</body><body package="IBEXDI" selector="isc_info_message_size">isc_info_message_size	&lt;C: #define isc_info_message_size 10	&gt;</body><body package="IBEXDI" selector="isc_info_no_reserve">isc_info_no_reserve	&lt;C: #define isc_info_no_reserve 34	&gt;</body><body package="IBEXDI" selector="isc_info_num_buffers">isc_info_num_buffers	&lt;C: #define isc_info_num_buffers 15	&gt;</body><body package="IBEXDI" selector="isc_info_num_wal_buffers">isc_info_num_wal_buffers	&lt;C: #define isc_info_num_wal_buffers 38	&gt;</body><body package="IBEXDI" selector="isc_info_number_messages">isc_info_number_messages	&lt;C: #define isc_info_number_messages 4	&gt;</body><body package="IBEXDI" selector="isc_info_ods_minor_version">isc_info_ods_minor_version	&lt;C: #define isc_info_ods_minor_version 33	&gt;</body><body package="IBEXDI" selector="isc_info_ods_version">isc_info_ods_version	&lt;C: #define isc_info_ods_version 32	&gt;</body><body package="IBEXDI" selector="isc_info_page_errors">isc_info_page_errors	&lt;C: #define isc_info_page_errors 54	&gt;</body><body package="IBEXDI" selector="isc_info_page_size">isc_info_page_size	&lt;C: #define isc_info_page_size 14	&gt;</body><body package="IBEXDI" selector="isc_info_ppage_errors">isc_info_ppage_errors	&lt;C: #define isc_info_ppage_errors 59	&gt;</body><body package="IBEXDI" selector="isc_info_purge_count">isc_info_purge_count	&lt;C: #define isc_info_purge_count 29	&gt;</body><body package="IBEXDI" selector="isc_info_read_idx_count">isc_info_read_idx_count	&lt;C: #define isc_info_read_idx_count 24	&gt;</body><body package="IBEXDI" selector="isc_info_read_seq_count">isc_info_read_seq_count	&lt;C: #define isc_info_read_seq_count 23	&gt;</body><body package="IBEXDI" selector="isc_info_reads">isc_info_reads	&lt;C: #define isc_info_reads 5	&gt;</body><body package="IBEXDI" selector="isc_info_record_errors">isc_info_record_errors	&lt;C: #define isc_info_record_errors 55	&gt;</body><body package="IBEXDI" selector="isc_info_req_active">isc_info_req_active	&lt;C: #define isc_info_req_active 2	&gt;</body><body package="IBEXDI" selector="isc_info_req_delete_count">isc_info_req_delete_count	&lt;C: #define isc_info_req_delete_count 16	&gt;</body><body package="IBEXDI" selector="isc_info_req_inactive">isc_info_req_inactive	&lt;C: #define isc_info_req_inactive 3	&gt;</body><body package="IBEXDI" selector="isc_info_req_insert_count">isc_info_req_insert_count	&lt;C: #define isc_info_req_insert_count 14	&gt;</body><body package="IBEXDI" selector="isc_info_req_receive">isc_info_req_receive	&lt;C: #define isc_info_req_receive 5	&gt;</body><body package="IBEXDI" selector="isc_info_req_select">isc_info_req_select	&lt;C: #define isc_info_req_select 6	&gt;</body><body package="IBEXDI" selector="isc_info_req_select_count">isc_info_req_select_count	&lt;C: #define isc_info_req_select_count 13	&gt;</body><body package="IBEXDI" selector="isc_info_req_send">isc_info_req_send	&lt;C: #define isc_info_req_send 4	&gt;</body><body package="IBEXDI" selector="isc_info_req_sql_stall">isc_info_req_sql_stall	&lt;C: #define isc_info_req_sql_stall 7	&gt;</body><body package="IBEXDI" selector="isc_info_req_update_count">isc_info_req_update_count	&lt;C: #define isc_info_req_update_count 15	&gt;</body><body package="IBEXDI" selector="isc_info_request_cost">isc_info_request_cost	&lt;C: #define isc_info_request_cost 11	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_aggregate">isc_info_rsb_aggregate	&lt;C: #define isc_info_rsb_aggregate 10	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_and">isc_info_rsb_and	&lt;C: #define isc_info_rsb_and 1	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_begin">isc_info_rsb_begin	&lt;C: #define isc_info_rsb_begin 1	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_boolean">isc_info_rsb_boolean	&lt;C: #define isc_info_rsb_boolean 8	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_cross">isc_info_rsb_cross	&lt;C: #define isc_info_rsb_cross 5	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_dbkey">isc_info_rsb_dbkey	&lt;C: #define isc_info_rsb_dbkey 3	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_end">isc_info_rsb_end	&lt;C: #define isc_info_rsb_end 0	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_ext_dbkey">isc_info_rsb_ext_dbkey	&lt;C: #define isc_info_rsb_ext_dbkey 14	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_ext_indexed">isc_info_rsb_ext_indexed	&lt;C: #define isc_info_rsb_ext_indexed 13	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_ext_sequential">isc_info_rsb_ext_sequential	&lt;C: #define isc_info_rsb_ext_sequential 12	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_first">isc_info_rsb_first	&lt;C: #define isc_info_rsb_first 7	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_index">isc_info_rsb_index	&lt;C: #define isc_info_rsb_index 4	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_indexed">isc_info_rsb_indexed	&lt;C: #define isc_info_rsb_indexed 2	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_left_cross">isc_info_rsb_left_cross	&lt;C: #define isc_info_rsb_left_cross 15	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_merge">isc_info_rsb_merge	&lt;C: #define isc_info_rsb_merge 11	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_navigate">isc_info_rsb_navigate	&lt;C: #define isc_info_rsb_navigate 3	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_once">isc_info_rsb_once	&lt;C: #define isc_info_rsb_once 20	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_or">isc_info_rsb_or	&lt;C: #define isc_info_rsb_or 2	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_plan">isc_info_rsb_plan	&lt;C: #define isc_info_rsb_plan 4	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_procedure">isc_info_rsb_procedure	&lt;C: #define isc_info_rsb_procedure 21	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_relation">isc_info_rsb_relation	&lt;C: #define isc_info_rsb_relation 3	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_select">isc_info_rsb_select	&lt;C: #define isc_info_rsb_select 16	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_sequential">isc_info_rsb_sequential	&lt;C: #define isc_info_rsb_sequential 4	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_sim_cross">isc_info_rsb_sim_cross	&lt;C: #define isc_info_rsb_sim_cross 19	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_simulate">isc_info_rsb_simulate	&lt;C: #define isc_info_rsb_simulate 18	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_sort">isc_info_rsb_sort	&lt;C: #define isc_info_rsb_sort 6	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_sql_join">isc_info_rsb_sql_join	&lt;C: #define isc_info_rsb_sql_join 17	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_type">isc_info_rsb_type	&lt;C: #define isc_info_rsb_type 2	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_union">isc_info_rsb_union	&lt;C: #define isc_info_rsb_union 9	&gt;</body><body package="IBEXDI" selector="isc_info_rsb_unknown">isc_info_rsb_unknown	&lt;C: #define isc_info_rsb_unknown 1	&gt;</body><body package="IBEXDI" selector="isc_info_set_page_buffers">isc_info_set_page_buffers	&lt;C: #define isc_info_set_page_buffers 61	&gt;</body><body package="IBEXDI" selector="isc_info_sql_alias">isc_info_sql_alias	&lt;C: #define isc_info_sql_alias 19	&gt;</body><body package="IBEXDI" selector="isc_info_sql_batch_fetch">isc_info_sql_batch_fetch	&lt;C: #define isc_info_sql_batch_fetch 24	&gt;</body><body package="IBEXDI" selector="isc_info_sql_bind">isc_info_sql_bind	&lt;C: #define isc_info_sql_bind 5	&gt;</body><body package="IBEXDI" selector="isc_info_sql_describe_end">isc_info_sql_describe_end	&lt;C: #define isc_info_sql_describe_end 8	&gt;</body><body package="IBEXDI" selector="isc_info_sql_describe_vars">isc_info_sql_describe_vars	&lt;C: #define isc_info_sql_describe_vars 7	&gt;</body><body package="IBEXDI" selector="isc_info_sql_field">isc_info_sql_field	&lt;C: #define isc_info_sql_field 16	&gt;</body><body package="IBEXDI" selector="isc_info_sql_get_plan">isc_info_sql_get_plan	&lt;C: #define isc_info_sql_get_plan 22	&gt;</body><body package="IBEXDI" selector="isc_info_sql_length">isc_info_sql_length	&lt;C: #define isc_info_sql_length 14	&gt;</body><body package="IBEXDI" selector="isc_info_sql_message_seq">isc_info_sql_message_seq	&lt;C: #define isc_info_sql_message_seq 10	&gt;</body><body package="IBEXDI" selector="isc_info_sql_null_ind">isc_info_sql_null_ind	&lt;C: #define isc_info_sql_null_ind 15	&gt;</body><body package="IBEXDI" selector="isc_info_sql_num_variables">isc_info_sql_num_variables	&lt;C: #define isc_info_sql_num_variables 6	&gt;</body><body package="IBEXDI" selector="isc_info_sql_owner">isc_info_sql_owner	&lt;C: #define isc_info_sql_owner 18	&gt;</body><body package="IBEXDI" selector="isc_info_sql_records">isc_info_sql_records	&lt;C: #define isc_info_sql_records 23	&gt;</body><body package="IBEXDI" selector="isc_info_sql_relation">isc_info_sql_relation	&lt;C: #define isc_info_sql_relation 17	&gt;</body><body package="IBEXDI" selector="isc_info_sql_scale">isc_info_sql_scale	&lt;C: #define isc_info_sql_scale 13	&gt;</body><body package="IBEXDI" selector="isc_info_sql_select">isc_info_sql_select	&lt;C: #define isc_info_sql_select 4	&gt;</body><body package="IBEXDI" selector="isc_info_sql_sqlda_seq">isc_info_sql_sqlda_seq	&lt;C: #define isc_info_sql_sqlda_seq 9	&gt;</body><body package="IBEXDI" selector="isc_info_sql_sqlda_start">isc_info_sql_sqlda_start	&lt;C: #define isc_info_sql_sqlda_start 20	&gt;</body><body package="IBEXDI" selector="isc_info_sql_stmt_commit">isc_info_sql_stmt_commit	&lt;C: #define isc_info_sql_stmt_commit 10	&gt;</body><body package="IBEXDI" selector="isc_info_sql_stmt_ddl">isc_info_sql_stmt_ddl	&lt;C: #define isc_info_sql_stmt_ddl 5	&gt;</body><body package="IBEXDI" selector="isc_info_sql_stmt_delete">isc_info_sql_stmt_delete	&lt;C: #define isc_info_sql_stmt_delete 4	&gt;</body><body package="IBEXDI" selector="isc_info_sql_stmt_exec_procedure">isc_info_sql_stmt_exec_procedure	&lt;C: #define isc_info_sql_stmt_exec_procedure 8	&gt;</body><body package="IBEXDI" selector="isc_info_sql_stmt_get_segment">isc_info_sql_stmt_get_segment	&lt;C: #define isc_info_sql_stmt_get_segment 6	&gt;</body><body package="IBEXDI" selector="isc_info_sql_stmt_insert">isc_info_sql_stmt_insert	&lt;C: #define isc_info_sql_stmt_insert 2	&gt;</body><body package="IBEXDI" selector="isc_info_sql_stmt_put_segment">isc_info_sql_stmt_put_segment	&lt;C: #define isc_info_sql_stmt_put_segment 7	&gt;</body><body package="IBEXDI" selector="isc_info_sql_stmt_rollback">isc_info_sql_stmt_rollback	&lt;C: #define isc_info_sql_stmt_rollback 11	&gt;</body><body package="IBEXDI" selector="isc_info_sql_stmt_select">isc_info_sql_stmt_select	&lt;C: #define isc_info_sql_stmt_select 1	&gt;</body><body package="IBEXDI" selector="isc_info_sql_stmt_select_for_upd">isc_info_sql_stmt_select_for_upd	&lt;C: #define isc_info_sql_stmt_select_for_upd 12	&gt;</body><body package="IBEXDI" selector="isc_info_sql_stmt_set_generator">isc_info_sql_stmt_set_generator	&lt;C: #define isc_info_sql_stmt_set_generator 13	&gt;</body><body package="IBEXDI" selector="isc_info_sql_stmt_start_trans">isc_info_sql_stmt_start_trans	&lt;C: #define isc_info_sql_stmt_start_trans 9	&gt;</body><body package="IBEXDI" selector="isc_info_sql_stmt_type">isc_info_sql_stmt_type	&lt;C: #define isc_info_sql_stmt_type 21	&gt;</body><body package="IBEXDI" selector="isc_info_sql_stmt_update">isc_info_sql_stmt_update	&lt;C: #define isc_info_sql_stmt_update 3	&gt;</body><body package="IBEXDI" selector="isc_info_sql_sub_type">isc_info_sql_sub_type	&lt;C: #define isc_info_sql_sub_type 12	&gt;</body><body package="IBEXDI" selector="isc_info_sql_type">isc_info_sql_type	&lt;C: #define isc_info_sql_type 11	&gt;</body><body package="IBEXDI" selector="isc_info_state">isc_info_state	&lt;C: #define isc_info_state 8	&gt;</body><body package="IBEXDI" selector="isc_info_svc_capabilities">isc_info_svc_capabilities	&lt;C: #define isc_info_svc_capabilities 57	&gt;</body><body package="IBEXDI" selector="isc_info_svc_get_config">isc_info_svc_get_config	&lt;C: #define isc_info_svc_get_config 53	&gt;</body><body package="IBEXDI" selector="isc_info_svc_get_env">isc_info_svc_get_env	&lt;C: #define isc_info_svc_get_env 59	&gt;</body><body package="IBEXDI" selector="isc_info_svc_get_env_lock">isc_info_svc_get_env_lock	&lt;C: #define isc_info_svc_get_env_lock 60	&gt;</body><body package="IBEXDI" selector="isc_info_svc_get_env_msg">isc_info_svc_get_env_msg	&lt;C: #define isc_info_svc_get_env_msg 61	&gt;</body><body package="IBEXDI" selector="isc_info_svc_get_license">isc_info_svc_get_license	&lt;C: #define isc_info_svc_get_license 51	&gt;</body><body package="IBEXDI" selector="isc_info_svc_get_license_mask">isc_info_svc_get_license_mask	&lt;C: #define isc_info_svc_get_license_mask 52	&gt;</body><body package="IBEXDI" selector="isc_info_svc_get_licensed_users">isc_info_svc_get_licensed_users	&lt;C: #define isc_info_svc_get_licensed_users 65	&gt;</body><body package="IBEXDI" selector="isc_info_svc_get_users">isc_info_svc_get_users	&lt;C: #define isc_info_svc_get_users 68	&gt;</body><body package="IBEXDI" selector="isc_info_svc_implementation">isc_info_svc_implementation	&lt;C: #define isc_info_svc_implementation 56	&gt;</body><body package="IBEXDI" selector="isc_info_svc_limbo_trans">isc_info_svc_limbo_trans	&lt;C: #define isc_info_svc_limbo_trans 66	&gt;</body><body package="IBEXDI" selector="isc_info_svc_line">isc_info_svc_line	&lt;C: #define isc_info_svc_line 62	&gt;</body><body package="IBEXDI" selector="isc_info_svc_running">isc_info_svc_running	&lt;C: #define isc_info_svc_running 67	&gt;</body><body package="IBEXDI" selector="isc_info_svc_server_version">isc_info_svc_server_version	&lt;C: #define isc_info_svc_server_version 55	&gt;</body><body package="IBEXDI" selector="isc_info_svc_svr_db_info">isc_info_svc_svr_db_info	&lt;C: #define isc_info_svc_svr_db_info 50	&gt;</body><body package="IBEXDI" selector="isc_info_svc_timeout">isc_info_svc_timeout	&lt;C: #define isc_info_svc_timeout 64	&gt;</body><body package="IBEXDI" selector="isc_info_svc_to_eof">isc_info_svc_to_eof	&lt;C: #define isc_info_svc_to_eof 63	&gt;</body><body package="IBEXDI" selector="isc_info_svc_user_dbpath">isc_info_svc_user_dbpath	&lt;C: #define isc_info_svc_user_dbpath 58	&gt;</body><body package="IBEXDI" selector="isc_info_svc_version">isc_info_svc_version	&lt;C: #define isc_info_svc_version 54	&gt;</body><body package="IBEXDI" selector="isc_info_sweep_interval">isc_info_sweep_interval	&lt;C: #define isc_info_sweep_interval 31	&gt;</body><body package="IBEXDI" selector="isc_info_tpage_errors">isc_info_tpage_errors	&lt;C: #define isc_info_tpage_errors 60	&gt;</body><body package="IBEXDI" selector="isc_info_tra_id">isc_info_tra_id	&lt;C: #define isc_info_tra_id 4	&gt;</body><body package="IBEXDI" selector="isc_info_truncated">isc_info_truncated	&lt;C: #define isc_info_truncated 2	&gt;</body><body package="IBEXDI" selector="isc_info_update_count">isc_info_update_count	&lt;C: #define isc_info_update_count 26	&gt;</body><body package="IBEXDI" selector="isc_info_user_names">isc_info_user_names	&lt;C: #define isc_info_user_names 53	&gt;</body><body package="IBEXDI" selector="isc_info_version">isc_info_version	&lt;C: #define isc_info_version 12	&gt;</body><body package="IBEXDI" selector="isc_info_wal_avg_grpc_size">isc_info_wal_avg_grpc_size	&lt;C: #define isc_info_wal_avg_grpc_size 51	&gt;</body><body package="IBEXDI" selector="isc_info_wal_avg_io_size">isc_info_wal_avg_io_size	&lt;C: #define isc_info_wal_avg_io_size 49	&gt;</body><body package="IBEXDI" selector="isc_info_wal_buffer_size">isc_info_wal_buffer_size	&lt;C: #define isc_info_wal_buffer_size 39	&gt;</body><body package="IBEXDI" selector="isc_info_wal_ckpt_length">isc_info_wal_ckpt_length	&lt;C: #define isc_info_wal_ckpt_length 40	&gt;</body><body package="IBEXDI" selector="isc_info_wal_cur_ckpt_interval">isc_info_wal_cur_ckpt_interval	&lt;C: #define isc_info_wal_cur_ckpt_interval 41	&gt;</body><body package="IBEXDI" selector="isc_info_wal_grpc_wait_usecs">isc_info_wal_grpc_wait_usecs	&lt;C: #define isc_info_wal_grpc_wait_usecs 47	&gt;</body><body package="IBEXDI" selector="isc_info_wal_num_commits">isc_info_wal_num_commits	&lt;C: #define isc_info_wal_num_commits 50	&gt;</body><body package="IBEXDI" selector="isc_info_wal_num_io">isc_info_wal_num_io	&lt;C: #define isc_info_wal_num_io 48	&gt;</body><body package="IBEXDI" selector="isc_info_wal_prv_ckpt_fname">isc_info_wal_prv_ckpt_fname	&lt;C: #define isc_info_wal_prv_ckpt_fname 42	&gt;</body><body package="IBEXDI" selector="isc_info_wal_prv_ckpt_poffset">isc_info_wal_prv_ckpt_poffset	&lt;C: #define isc_info_wal_prv_ckpt_poffset 43	&gt;</body><body package="IBEXDI" selector="isc_info_wal_recv_ckpt_fname">isc_info_wal_recv_ckpt_fname	&lt;C: #define isc_info_wal_recv_ckpt_fname 44	&gt;</body><body package="IBEXDI" selector="isc_info_wal_recv_ckpt_poffset">isc_info_wal_recv_ckpt_poffset	&lt;C: #define isc_info_wal_recv_ckpt_poffset 45	&gt;</body><body package="IBEXDI" selector="isc_info_window_turns">isc_info_window_turns	&lt;C: #define isc_info_window_turns 19	&gt;</body><body package="IBEXDI" selector="isc_info_writes">isc_info_writes	&lt;C: #define isc_info_writes 6	&gt;</body><body package="IBEXDI" selector="isc_infona">isc_infona	&lt;C: #define isc_infona 335544340	&gt;</body><body package="IBEXDI" selector="isc_infunk">isc_infunk	&lt;C: #define isc_infunk 335544341	&gt;</body><body package="IBEXDI" selector="isc_insufficient_svc_privileges">isc_insufficient_svc_privileges	&lt;C: #define isc_insufficient_svc_privileges 335544790	&gt;</body><body package="IBEXDI" selector="isc_integ_deactivate_primary">isc_integ_deactivate_primary	&lt;C: #define isc_integ_deactivate_primary 335544729	&gt;</body><body package="IBEXDI" selector="isc_integ_fail">isc_integ_fail	&lt;C: #define isc_integ_fail 335544342	&gt;</body><body package="IBEXDI" selector="isc_integ_index_deactivate">isc_integ_index_deactivate	&lt;C: #define isc_integ_index_deactivate 335544728	&gt;</body><body package="IBEXDI" selector="isc_integ_index_del">isc_integ_index_del	&lt;C: #define isc_integ_index_del 335544539	&gt;</body><body package="IBEXDI" selector="isc_integ_index_mod">isc_integ_index_mod	&lt;C: #define isc_integ_index_mod 335544540	&gt;</body><body package="IBEXDI" selector="isc_integ_index_seg_del">isc_integ_index_seg_del	&lt;C: #define isc_integ_index_seg_del 335544537	&gt;</body><body package="IBEXDI" selector="isc_integ_index_seg_mod">isc_integ_index_seg_mod	&lt;C: #define isc_integ_index_seg_mod 335544538	&gt;</body><body package="IBEXDI" selector="isc_interp_eng_ascii">isc_interp_eng_ascii	&lt;C: #define isc_interp_eng_ascii 0	&gt;</body><body package="IBEXDI" selector="isc_interp_jpn_euc">isc_interp_jpn_euc	&lt;C: #define isc_interp_jpn_euc 6	&gt;</body><body package="IBEXDI" selector="isc_interp_jpn_sjis">isc_interp_jpn_sjis	&lt;C: #define isc_interp_jpn_sjis 5	&gt;</body><body package="IBEXDI" selector="isc_inv_client_dialect_specified">isc_inv_client_dialect_specified	&lt;C: #define isc_inv_client_dialect_specified 335544811	&gt;</body><body package="IBEXDI" selector="isc_inv_dialect_specified">isc_inv_dialect_specified	&lt;C: #define isc_inv_dialect_specified 335544805	&gt;</body><body package="IBEXDI" selector="isc_inval_key_posn">isc_inval_key_posn	&lt;C: #define isc_inval_key_posn 335544678	&gt;</body><body package="IBEXDI" selector="isc_invalid_array_id">isc_invalid_array_id	&lt;C: #define isc_invalid_array_id 335544714	&gt;</body><body package="IBEXDI" selector="isc_invalid_blr">isc_invalid_blr	&lt;C: #define isc_invalid_blr 335544343	&gt;</body><body package="IBEXDI" selector="isc_invalid_bookmark">isc_invalid_bookmark	&lt;C: #define isc_invalid_bookmark 335544473	&gt;</body><body package="IBEXDI" selector="isc_invalid_clause">isc_invalid_clause	&lt;C: #define isc_invalid_clause 335544760	&gt;</body><body package="IBEXDI" selector="isc_invalid_dimension">isc_invalid_dimension	&lt;C: #define isc_invalid_dimension 335544458	&gt;</body><body package="IBEXDI" selector="isc_invalid_direction">isc_invalid_direction	&lt;C: #define isc_invalid_direction 335544655	&gt;</body><body package="IBEXDI" selector="isc_invalid_key">isc_invalid_key	&lt;C: #define isc_invalid_key 335544718	&gt;</body><body package="IBEXDI" selector="isc_invalid_operator">isc_invalid_operator	&lt;C: #define isc_invalid_operator 335544647	&gt;</body><body package="IBEXDI" selector="isc_invalid_sdl">isc_invalid_sdl	&lt;C: #define isc_invalid_sdl 335544456	&gt;</body><body package="IBEXDI" selector="isc_invalid_sec_info">isc_invalid_sec_info	&lt;C: #define isc_invalid_sec_info 335544449	&gt;</body><body package="IBEXDI" selector="isc_invalid_string_constant">isc_invalid_string_constant	&lt;C: #define isc_invalid_string_constant 335544763	&gt;</body><body package="IBEXDI" selector="isc_invld_cnstrnt_type">isc_invld_cnstrnt_type	&lt;C: #define isc_invld_cnstrnt_type 335544547	&gt;</body><body package="IBEXDI" selector="isc_invpoolcl">isc_invpoolcl	&lt;C: #define isc_invpoolcl 335544385	&gt;</body><body package="IBEXDI" selector="isc_io_access_err">isc_io_access_err	&lt;C: #define isc_io_access_err 335544739	&gt;</body><body package="IBEXDI" selector="isc_io_close_err">isc_io_close_err	&lt;C: #define isc_io_close_err 335544735	&gt;</body><body package="IBEXDI" selector="isc_io_create_err">isc_io_create_err	&lt;C: #define isc_io_create_err 335544733	&gt;</body><body package="IBEXDI" selector="isc_io_delete_err">isc_io_delete_err	&lt;C: #define isc_io_delete_err 335544738	&gt;</body><body package="IBEXDI" selector="isc_io_error">isc_io_error	&lt;C: #define isc_io_error 335544344	&gt;</body><body package="IBEXDI" selector="isc_io_open_err">isc_io_open_err	&lt;C: #define isc_io_open_err 335544734	&gt;</body><body package="IBEXDI" selector="isc_io_read_err">isc_io_read_err	&lt;C: #define isc_io_read_err 335544736	&gt;</body><body package="IBEXDI" selector="isc_io_write_err">isc_io_write_err	&lt;C: #define isc_io_write_err 335544737	&gt;</body><body package="IBEXDI" selector="isc_isc_sql_dialect_conflict_num">isc_isc_sql_dialect_conflict_num	&lt;C: #define isc_isc_sql_dialect_conflict_num 336003079	&gt;</body><body package="IBEXDI" selector="isc_journerr">isc_journerr	&lt;C: #define isc_journerr 335544433	&gt;</body><body package="IBEXDI" selector="isc_jrn_enable">isc_jrn_enable	&lt;C: #define isc_jrn_enable 335544478	&gt;</body><body package="IBEXDI" selector="isc_jrn_file_full">isc_jrn_file_full	&lt;C: #define isc_jrn_file_full 335544687	&gt;</body><body package="IBEXDI" selector="isc_jrn_format_err">isc_jrn_format_err	&lt;C: #define isc_jrn_format_err 335544686	&gt;</body><body package="IBEXDI" selector="isc_jrn_present">isc_jrn_present	&lt;C: #define isc_jrn_present 335544520	&gt;</body><body package="IBEXDI" selector="isc_key_field_count_err">isc_key_field_count_err	&lt;C: #define isc_key_field_count_err 335544604	&gt;</body><body package="IBEXDI" selector="isc_key_field_err">isc_key_field_err	&lt;C: #define isc_key_field_err 335544672	&gt;</body><body package="IBEXDI" selector="isc_keytoobig">isc_keytoobig	&lt;C: #define isc_keytoobig 335544434	&gt;</body><body package="IBEXDI" selector="isc_license_amb_switch">isc_license_amb_switch	&lt;C: #define isc_license_amb_switch 336789528	&gt;</body><body package="IBEXDI" selector="isc_license_dup_id">isc_license_dup_id	&lt;C: #define isc_license_dup_id 336789534	&gt;</body><body package="IBEXDI" selector="isc_license_err_convert">isc_license_err_convert	&lt;C: #define isc_license_err_convert 336789538	&gt;</body><body package="IBEXDI" selector="isc_license_err_remove">isc_license_err_remove	&lt;C: #define isc_license_err_remove 336789536	&gt;</body><body package="IBEXDI" selector="isc_license_err_unk">isc_license_err_unk	&lt;C: #define isc_license_err_unk 336789539	&gt;</body><body package="IBEXDI" selector="isc_license_err_update">isc_license_err_update	&lt;C: #define isc_license_err_update 336789537	&gt;</body><body package="IBEXDI" selector="isc_license_eval_exists">isc_license_eval_exists	&lt;C: #define isc_license_eval_exists 336789563	&gt;</body><body package="IBEXDI" selector="isc_license_inv_id_key">isc_license_inv_id_key	&lt;C: #define isc_license_inv_id_key 336789535	&gt;</body><body package="IBEXDI" selector="isc_license_inv_op_combo">isc_license_inv_op_combo	&lt;C: #define isc_license_inv_op_combo 336789527	&gt;</body><body package="IBEXDI" selector="isc_license_inv_parameter">isc_license_inv_parameter	&lt;C: #define isc_license_inv_parameter 336789529	&gt;</body><body package="IBEXDI" selector="isc_license_inv_switch">isc_license_inv_switch	&lt;C: #define isc_license_inv_switch 336789525	&gt;</body><body package="IBEXDI" selector="isc_license_inv_switch_combo">isc_license_inv_switch_combo	&lt;C: #define isc_license_inv_switch_combo 336789526	&gt;</body><body package="IBEXDI" selector="isc_license_no_file">isc_license_no_file	&lt;C: #define isc_license_no_file 336789504	&gt;</body><body package="IBEXDI" selector="isc_license_op_missing">isc_license_op_missing	&lt;C: #define isc_license_op_missing 336789524	&gt;</body><body package="IBEXDI" selector="isc_license_op_specified">isc_license_op_specified	&lt;C: #define isc_license_op_specified 336789523	&gt;</body><body package="IBEXDI" selector="isc_license_param_req">isc_license_param_req	&lt;C: #define isc_license_param_req 336789531	&gt;</body><body package="IBEXDI" selector="isc_license_param_specified">isc_license_param_specified	&lt;C: #define isc_license_param_specified 336789530	&gt;</body><body package="IBEXDI" selector="isc_license_svc_err_add">isc_license_svc_err_add	&lt;C: #define isc_license_svc_err_add 336789540	&gt;</body><body package="IBEXDI" selector="isc_license_svc_err_remove">isc_license_svc_err_remove	&lt;C: #define isc_license_svc_err_remove 336789541	&gt;</body><body package="IBEXDI" selector="isc_license_syntx_error">isc_license_syntx_error	&lt;C: #define isc_license_syntx_error 336789532	&gt;</body><body package="IBEXDI" selector="isc_like_escape_invalid">isc_like_escape_invalid	&lt;C: #define isc_like_escape_invalid 335544702	&gt;</body><body package="IBEXDI" selector="isc_loadlib_failure">isc_loadlib_failure	&lt;C: #define isc_loadlib_failure 335544720	&gt;</body><body package="IBEXDI" selector="isc_lock_conflict">isc_lock_conflict	&lt;C: #define isc_lock_conflict 335544345	&gt;</body><body package="IBEXDI" selector="isc_lock_timeout">isc_lock_timeout	&lt;C: #define isc_lock_timeout 335544510	&gt;</body><body package="IBEXDI" selector="isc_lockmanerr">isc_lockmanerr	&lt;C: #define isc_lockmanerr 335544432	&gt;</body><body package="IBEXDI" selector="isc_locnotmar">isc_locnotmar	&lt;C: #define isc_locnotmar 335544402	&gt;</body><body package="IBEXDI" selector="isc_log_length_spec">isc_log_length_spec	&lt;C: #define isc_log_length_spec 335544696	&gt;</body><body package="IBEXDI" selector="isc_log_redef">isc_log_redef	&lt;C: #define isc_log_redef 335544692	&gt;</body><body package="IBEXDI" selector="isc_log_too_small">isc_log_too_small	&lt;C: #define isc_log_too_small 335544693	&gt;</body><body package="IBEXDI" selector="isc_logb_small">isc_logb_small	&lt;C: #define isc_logb_small 335544496	&gt;</body><body package="IBEXDI" selector="isc_logf_unexpected_eof">isc_logf_unexpected_eof	&lt;C: #define isc_logf_unexpected_eof 335544493	&gt;</body><body package="IBEXDI" selector="isc_logh_diff_dbname">isc_logh_diff_dbname	&lt;C: #define isc_logh_diff_dbname 335544492	&gt;</body><body package="IBEXDI" selector="isc_logh_inv_version">isc_logh_inv_version	&lt;C: #define isc_logh_inv_version 335544489	&gt;</body><body package="IBEXDI" selector="isc_logh_open_flag">isc_logh_open_flag	&lt;C: #define isc_logh_open_flag 335544490	&gt;</body><body package="IBEXDI" selector="isc_logh_open_flag2">isc_logh_open_flag2	&lt;C: #define isc_logh_open_flag2 335544491	&gt;</body><body package="IBEXDI" selector="isc_logh_small">isc_logh_small	&lt;C: #define isc_logh_small 335544488	&gt;</body><body package="IBEXDI" selector="isc_login">isc_login	&lt;C: #define isc_login 335544472	&gt;</body><body package="IBEXDI" selector="isc_login_same_as_role_name">isc_login_same_as_role_name	&lt;C: #define isc_login_same_as_role_name 335544745	&gt;</body><body package="IBEXDI" selector="isc_logr_header_small">isc_logr_header_small	&lt;C: #define isc_logr_header_small 335544495	&gt;</body><body package="IBEXDI" selector="isc_logr_incomplete">isc_logr_incomplete	&lt;C: #define isc_logr_incomplete 335544494	&gt;</body><body package="IBEXDI" selector="isc_lost_db_connection">isc_lost_db_connection	&lt;C: #define isc_lost_db_connection 335544741	&gt;</body><body package="IBEXDI" selector="isc_max_att_exceeded">isc_max_att_exceeded	&lt;C: #define isc_max_att_exceeded 335544744	&gt;</body><body package="IBEXDI" selector="isc_max_idx">isc_max_idx	&lt;C: #define isc_max_idx 335544477	&gt;</body><body package="IBEXDI" selector="isc_metadata_corrupt">isc_metadata_corrupt	&lt;C: #define isc_metadata_corrupt 335544346	&gt;</body><body package="IBEXDI" selector="isc_misc_interpreted">isc_misc_interpreted	&lt;C: #define isc_misc_interpreted 335544450	&gt;</body><body package="IBEXDI" selector="isc_must_be_dialect_2_and_up">isc_must_be_dialect_2_and_up	&lt;C: #define isc_must_be_dialect_2_and_up 335544766	&gt;</body><body package="IBEXDI" selector="isc_net_connect_err">isc_net_connect_err	&lt;C: #define isc_net_connect_err 335544722	&gt;</body><body package="IBEXDI" selector="isc_net_connect_listen_err">isc_net_connect_listen_err	&lt;C: #define isc_net_connect_listen_err 335544723	&gt;</body><body package="IBEXDI" selector="isc_net_event_connect_err">isc_net_event_connect_err	&lt;C: #define isc_net_event_connect_err 335544724	&gt;</body><body package="IBEXDI" selector="isc_net_event_listen_err">isc_net_event_listen_err	&lt;C: #define isc_net_event_listen_err 335544725	&gt;</body><body package="IBEXDI" selector="isc_net_init_error">isc_net_init_error	&lt;C: #define isc_net_init_error 335544719	&gt;</body><body package="IBEXDI" selector="isc_net_lookup_err">isc_net_lookup_err	&lt;C: #define isc_net_lookup_err 335544704	&gt;</body><body package="IBEXDI" selector="isc_net_read_err">isc_net_read_err	&lt;C: #define isc_net_read_err 335544726	&gt;</body><body package="IBEXDI" selector="isc_net_write_err">isc_net_write_err	&lt;C: #define isc_net_write_err 335544727	&gt;</body><body package="IBEXDI" selector="isc_network_error">isc_network_error	&lt;C: #define isc_network_error 335544721	&gt;</body><body package="IBEXDI" selector="isc_no_archive">isc_no_archive	&lt;C: #define isc_no_archive 335544505	&gt;</body><body package="IBEXDI" selector="isc_no_cur_rec">isc_no_cur_rec	&lt;C: #define isc_no_cur_rec 335544348	&gt;</body><body package="IBEXDI" selector="isc_no_dbkey">isc_no_dbkey	&lt;C: #define isc_no_dbkey 335544685	&gt;</body><body package="IBEXDI" selector="isc_no_delete">isc_no_delete	&lt;C: #define isc_no_delete 335544673	&gt;</body><body package="IBEXDI" selector="isc_no_dup">isc_no_dup	&lt;C: #define isc_no_dup 335544349	&gt;</body><body package="IBEXDI" selector="isc_no_field_access">isc_no_field_access	&lt;C: #define isc_no_field_access 335544684	&gt;</body><body package="IBEXDI" selector="isc_no_finish">isc_no_finish	&lt;C: #define isc_no_finish 335544350	&gt;</body><body package="IBEXDI" selector="isc_no_jrn">isc_no_jrn	&lt;C: #define isc_no_jrn 335544564	&gt;</body><body package="IBEXDI" selector="isc_no_lock_mgr">isc_no_lock_mgr	&lt;C: #define isc_no_lock_mgr 335544424	&gt;</body><body package="IBEXDI" selector="isc_no_meta_update">isc_no_meta_update	&lt;C: #define isc_no_meta_update 335544351	&gt;</body><body package="IBEXDI" selector="isc_no_priv">isc_no_priv	&lt;C: #define isc_no_priv 335544352	&gt;</body><body package="IBEXDI" selector="isc_no_recon">isc_no_recon	&lt;C: #define isc_no_recon 335544353	&gt;</body><body package="IBEXDI" selector="isc_no_record">isc_no_record	&lt;C: #define isc_no_record 335544354	&gt;</body><body package="IBEXDI" selector="isc_no_rollback">isc_no_rollback	&lt;C: #define isc_no_rollback 335544447	&gt;</body><body package="IBEXDI" selector="isc_no_segments_err">isc_no_segments_err	&lt;C: #define isc_no_segments_err 335544679	&gt;</body><body package="IBEXDI" selector="isc_no_segstr_close">isc_no_segstr_close	&lt;C: #define isc_no_segstr_close 335544355	&gt;</body><body package="IBEXDI" selector="isc_no_stream_plan">isc_no_stream_plan	&lt;C: #define isc_no_stream_plan 335544637	&gt;</body><body package="IBEXDI" selector="isc_no_wal">isc_no_wal	&lt;C: #define isc_no_wal 335544500	&gt;</body><body package="IBEXDI" selector="isc_no_wal_no_jrn">isc_no_wal_no_jrn	&lt;C: #define isc_no_wal_no_jrn 335544482	&gt;</body><body package="IBEXDI" selector="isc_no_write_user_priv">isc_no_write_user_priv	&lt;C: #define isc_no_write_user_priv 335544742	&gt;</body><body package="IBEXDI" selector="isc_noargacc_read">isc_noargacc_read	&lt;C: #define isc_noargacc_read 335544442	&gt;</body><body package="IBEXDI" selector="isc_noargacc_write">isc_noargacc_write	&lt;C: #define isc_noargacc_write 335544443	&gt;</body><body package="IBEXDI" selector="isc_node_err">isc_node_err	&lt;C: #define isc_node_err 335544607	&gt;</body><body package="IBEXDI" selector="isc_node_name_err">isc_node_name_err	&lt;C: #define isc_node_name_err 335544625	&gt;</body><body package="IBEXDI" selector="isc_nodetach">isc_nodetach	&lt;C: #define isc_nodetach 335544416	&gt;</body><body package="IBEXDI" selector="isc_nodnotfnd">isc_nodnotfnd	&lt;C: #define isc_nodnotfnd 335544400	&gt;</body><body package="IBEXDI" selector="isc_nofilter">isc_nofilter	&lt;C: #define isc_nofilter 335544454	&gt;</body><body package="IBEXDI" selector="isc_non_updatable">isc_non_updatable	&lt;C: #define isc_non_updatable 335544446	&gt;</body><body package="IBEXDI" selector="isc_nonsql_security_fld">isc_nonsql_security_fld	&lt;C: #define isc_nonsql_security_fld 335544555	&gt;</body><body package="IBEXDI" selector="isc_nonsql_security_rel">isc_nonsql_security_rel	&lt;C: #define isc_nonsql_security_rel 335544554	&gt;</body><body package="IBEXDI" selector="isc_nopoolids">isc_nopoolids	&lt;C: #define isc_nopoolids 335544386	&gt;</body><body package="IBEXDI" selector="isc_not_rel_owner">isc_not_rel_owner	&lt;C: #define isc_not_rel_owner 335544550	&gt;</body><body package="IBEXDI" selector="isc_not_valid">isc_not_valid	&lt;C: #define isc_not_valid 335544347	&gt;</body><body package="IBEXDI" selector="isc_notinlim">isc_notinlim	&lt;C: #define isc_notinlim 335544419	&gt;</body><body package="IBEXDI" selector="isc_notremote">isc_notremote	&lt;C: #define isc_notremote 335544417	&gt;</body><body package="IBEXDI" selector="isc_nullsegkey">isc_nullsegkey	&lt;C: #define isc_nullsegkey 335544435	&gt;</body><body package="IBEXDI" selector="isc_num_field_err">isc_num_field_err	&lt;C: #define isc_num_field_err 335544599	&gt;</body><body package="IBEXDI" selector="isc_num_old_files">isc_num_old_files	&lt;C: #define isc_num_old_files 335544483	&gt;</body><body package="IBEXDI" selector="isc_obj_in_use">isc_obj_in_use	&lt;C: #define isc_obj_in_use 335544453	&gt;</body><body package="IBEXDI" selector="isc_obsolete_metadata">isc_obsolete_metadata	&lt;C: #define isc_obsolete_metadata 335544356	&gt;</body><body package="IBEXDI" selector="isc_old_failure">isc_old_failure	&lt;C: #define isc_old_failure 335544479	&gt;</body><body package="IBEXDI" selector="isc_old_in_progress">isc_old_in_progress	&lt;C: #define isc_old_in_progress 335544480	&gt;</body><body package="IBEXDI" selector="isc_old_no_space">isc_old_no_space	&lt;C: #define isc_old_no_space 335544481	&gt;</body><body package="IBEXDI" selector="isc_open_trans">isc_open_trans	&lt;C: #define isc_open_trans 335544357	&gt;</body><body package="IBEXDI" selector="isc_optimizer_between_err">isc_optimizer_between_err	&lt;C: #define isc_optimizer_between_err 335544813	&gt;</body><body package="IBEXDI" selector="isc_optimizer_blk_exc">isc_optimizer_blk_exc	&lt;C: #define isc_optimizer_blk_exc 335544762	&gt;</body><body package="IBEXDI" selector="isc_order_by_err">isc_order_by_err	&lt;C: #define isc_order_by_err 335544617	&gt;</body><body package="IBEXDI" selector="isc_orphan">isc_orphan	&lt;C: #define isc_orphan 335544423	&gt;</body><body package="IBEXDI" selector="isc_out_of_bounds">isc_out_of_bounds	&lt;C: #define isc_out_of_bounds 335544457	&gt;</body><body package="IBEXDI" selector="isc_page_type_err">isc_page_type_err	&lt;C: #define isc_page_type_err 335544650	&gt;</body><body package="IBEXDI" selector="isc_partition_not_supp">isc_partition_not_supp	&lt;C: #define isc_partition_not_supp 335544695	&gt;</body><body package="IBEXDI" selector="isc_partition_too_small">isc_partition_too_small	&lt;C: #define isc_partition_too_small 335544694	&gt;</body><body package="IBEXDI" selector="isc_password_required">isc_password_required	&lt;C: #define isc_password_required 335544750	&gt;</body><body package="IBEXDI" selector="isc_password_too_long">isc_password_too_long	&lt;C: #define isc_password_too_long 335544748	&gt;</body><body package="IBEXDI" selector="isc_port_len">isc_port_len	&lt;C: #define isc_port_len 335544358	&gt;</body><body package="IBEXDI" selector="isc_prcmismat">isc_prcmismat	&lt;C: #define isc_prcmismat 335544512	&gt;</body><body package="IBEXDI" selector="isc_prcnotdef">isc_prcnotdef	&lt;C: #define isc_prcnotdef 335544511	&gt;</body><body package="IBEXDI" selector="isc_precision_err">isc_precision_err	&lt;C: #define isc_precision_err 335544697	&gt;</body><body package="IBEXDI" selector="isc_primary_key_exists">isc_primary_key_exists	&lt;C: #define isc_primary_key_exists 335544548	&gt;</body><body package="IBEXDI" selector="isc_primary_key_notnull">isc_primary_key_notnull	&lt;C: #define isc_primary_key_notnull 335544531	&gt;</body><body package="IBEXDI" selector="isc_primary_key_ref">isc_primary_key_ref	&lt;C: #define isc_primary_key_ref 335544530	&gt;</body><body package="IBEXDI" selector="isc_proc_name">isc_proc_name	&lt;C: #define isc_proc_name 335544627	&gt;</body><body package="IBEXDI" selector="isc_procedure_conflict_error">isc_procedure_conflict_error	&lt;C: #define isc_procedure_conflict_error 335544621	&gt;</body><body package="IBEXDI" selector="isc_psw_attach">isc_psw_attach	&lt;C: #define isc_psw_attach 335544653	&gt;</body><body package="IBEXDI" selector="isc_psw_start_trans">isc_psw_start_trans	&lt;C: #define isc_psw_start_trans 335544654	&gt;</body><body package="IBEXDI" selector="isc_quad_high">isc_quad_high	&lt;C: #define isc_quad_high gds_quad_high	&gt;</body><body package="IBEXDI" selector="isc_quad_low">isc_quad_low	&lt;C: #define isc_quad_low gds_quad_low	&gt;</body><body package="IBEXDI" selector="isc_random">isc_random	&lt;C: #define isc_random 335544382	&gt;</body><body package="IBEXDI" selector="isc_range_in_use">isc_range_in_use	&lt;C: #define isc_range_in_use 335544507	&gt;</body><body package="IBEXDI" selector="isc_range_not_found">isc_range_not_found	&lt;C: #define isc_range_not_found 335544508	&gt;</body><body package="IBEXDI" selector="isc_read_only">isc_read_only	&lt;C: #define isc_read_only 335544444	&gt;</body><body package="IBEXDI" selector="isc_read_only_database">isc_read_only_database	&lt;C: #define isc_read_only_database 335544765	&gt;</body><body package="IBEXDI" selector="isc_read_only_field">isc_read_only_field	&lt;C: #define isc_read_only_field 335544359	&gt;</body><body package="IBEXDI" selector="isc_read_only_rel">isc_read_only_rel	&lt;C: #define isc_read_only_rel 335544360	&gt;</body><body package="IBEXDI" selector="isc_read_only_trans">isc_read_only_trans	&lt;C: #define isc_read_only_trans 335544361	&gt;</body><body package="IBEXDI" selector="isc_read_only_view">isc_read_only_view	&lt;C: #define isc_read_only_view 335544362	&gt;</body><body package="IBEXDI" selector="isc_rec_in_limbo">isc_rec_in_limbo	&lt;C: #define isc_rec_in_limbo 335544459	&gt;</body><body package="IBEXDI" selector="isc_rec_size_err">isc_rec_size_err	&lt;C: #define isc_rec_size_err 335544681	&gt;</body><body package="IBEXDI" selector="isc_record_lock">isc_record_lock	&lt;C: #define isc_record_lock 335544476	&gt;</body><body package="IBEXDI" selector="isc_ref_cnstrnt_notfound">isc_ref_cnstrnt_notfound	&lt;C: #define isc_ref_cnstrnt_notfound 335544532	&gt;</body><body package="IBEXDI" selector="isc_ref_cnstrnt_update">isc_ref_cnstrnt_update	&lt;C: #define isc_ref_cnstrnt_update 335544534	&gt;</body><body package="IBEXDI" selector="isc_reftable_requires_pk">isc_reftable_requires_pk	&lt;C: #define isc_reftable_requires_pk 335544746	&gt;</body><body package="IBEXDI" selector="isc_rel_cnstrnt_update">isc_rel_cnstrnt_update	&lt;C: #define isc_rel_cnstrnt_update 335544545	&gt;</body><body package="IBEXDI" selector="isc_relation_conflict_err">isc_relation_conflict_err	&lt;C: #define isc_relation_conflict_err 335544622	&gt;</body><body package="IBEXDI" selector="isc_relation_lock">isc_relation_lock	&lt;C: #define isc_relation_lock 335544475	&gt;</body><body package="IBEXDI" selector="isc_relbadblk">isc_relbadblk	&lt;C: #define isc_relbadblk 335544387	&gt;</body><body package="IBEXDI" selector="isc_relnotdef">isc_relnotdef	&lt;C: #define isc_relnotdef 335544395	&gt;</body><body package="IBEXDI" selector="isc_req_depth_exceeded">isc_req_depth_exceeded	&lt;C: #define isc_req_depth_exceeded 335544683	&gt;</body><body package="IBEXDI" selector="isc_req_max_clones_exceeded">isc_req_max_clones_exceeded	&lt;C: #define isc_req_max_clones_exceeded 335544663	&gt;</body><body package="IBEXDI" selector="isc_req_no_trans">isc_req_no_trans	&lt;C: #define isc_req_no_trans 335544363	&gt;</body><body package="IBEXDI" selector="isc_req_sync">isc_req_sync	&lt;C: #define isc_req_sync 335544364	&gt;</body><body package="IBEXDI" selector="isc_req_wrong_db">isc_req_wrong_db	&lt;C: #define isc_req_wrong_db 335544365	&gt;</body><body package="IBEXDI" selector="isc_reqinuse">isc_reqinuse	&lt;C: #define isc_reqinuse 335544393	&gt;</body><body package="IBEXDI" selector="isc_return_mode_err">isc_return_mode_err	&lt;C: #define isc_return_mode_err 335544618	&gt;</body><body package="IBEXDI" selector="isc_scale_nogt">isc_scale_nogt	&lt;C: #define isc_scale_nogt 335544698	&gt;</body><body package="IBEXDI" selector="isc_sdl_add">isc_sdl_add	&lt;C: #define isc_sdl_add 13	&gt;</body><body package="IBEXDI" selector="isc_sdl_and">isc_sdl_and	&lt;C: #define isc_sdl_and 24	&gt;</body><body package="IBEXDI" selector="isc_sdl_assignment">isc_sdl_assignment	&lt;C: #define isc_sdl_assignment 28	&gt;</body><body package="IBEXDI" selector="isc_sdl_begin">isc_sdl_begin	&lt;C: #define isc_sdl_begin 31	&gt;</body><body package="IBEXDI" selector="isc_sdl_divide">isc_sdl_divide	&lt;C: #define isc_sdl_divide 16	&gt;</body><body package="IBEXDI" selector="isc_sdl_do1">isc_sdl_do1	&lt;C: #define isc_sdl_do1 35	&gt;</body><body package="IBEXDI" selector="isc_sdl_do2">isc_sdl_do2	&lt;C: #define isc_sdl_do2 34	&gt;</body><body package="IBEXDI" selector="isc_sdl_do3">isc_sdl_do3	&lt;C: #define isc_sdl_do3 33	&gt;</body><body package="IBEXDI" selector="isc_sdl_element">isc_sdl_element	&lt;C: #define isc_sdl_element 36	&gt;</body><body package="IBEXDI" selector="isc_sdl_end">isc_sdl_end	&lt;C: #define isc_sdl_end 32	&gt;</body><body package="IBEXDI" selector="isc_sdl_eoc">isc_sdl_eoc	&lt;C: #define isc_sdl_eoc 255	&gt;</body><body package="IBEXDI" selector="isc_sdl_eql">isc_sdl_eql	&lt;C: #define isc_sdl_eql 18	&gt;</body><body package="IBEXDI" selector="isc_sdl_fid">isc_sdl_fid	&lt;C: #define isc_sdl_fid 5	&gt;</body><body package="IBEXDI" selector="isc_sdl_field">isc_sdl_field	&lt;C: #define isc_sdl_field 4	&gt;</body><body package="IBEXDI" selector="isc_sdl_geq">isc_sdl_geq	&lt;C: #define isc_sdl_geq 21	&gt;</body><body package="IBEXDI" selector="isc_sdl_gtr">isc_sdl_gtr	&lt;C: #define isc_sdl_gtr 20	&gt;</body><body package="IBEXDI" selector="isc_sdl_label">isc_sdl_label	&lt;C: #define isc_sdl_label 29	&gt;</body><body package="IBEXDI" selector="isc_sdl_leave">isc_sdl_leave	&lt;C: #define isc_sdl_leave 30	&gt;</body><body package="IBEXDI" selector="isc_sdl_leq">isc_sdl_leq	&lt;C: #define isc_sdl_leq 23	&gt;</body><body package="IBEXDI" selector="isc_sdl_literal">isc_sdl_literal	&lt;C: #define isc_sdl_literal 12	&gt;</body><body package="IBEXDI" selector="isc_sdl_long_integer">isc_sdl_long_integer	&lt;C: #define isc_sdl_long_integer 11	&gt;</body><body package="IBEXDI" selector="isc_sdl_lss">isc_sdl_lss	&lt;C: #define isc_sdl_lss 22	&gt;</body><body package="IBEXDI" selector="isc_sdl_multiply">isc_sdl_multiply	&lt;C: #define isc_sdl_multiply 15	&gt;</body><body package="IBEXDI" selector="isc_sdl_negate">isc_sdl_negate	&lt;C: #define isc_sdl_negate 17	&gt;</body><body package="IBEXDI" selector="isc_sdl_neq">isc_sdl_neq	&lt;C: #define isc_sdl_neq 19	&gt;</body><body package="IBEXDI" selector="isc_sdl_not">isc_sdl_not	&lt;C: #define isc_sdl_not 26	&gt;</body><body package="IBEXDI" selector="isc_sdl_or">isc_sdl_or	&lt;C: #define isc_sdl_or 25	&gt;</body><body package="IBEXDI" selector="isc_sdl_relation">isc_sdl_relation	&lt;C: #define isc_sdl_relation 2	&gt;</body><body package="IBEXDI" selector="isc_sdl_rid">isc_sdl_rid	&lt;C: #define isc_sdl_rid 3	&gt;</body><body package="IBEXDI" selector="isc_sdl_scalar">isc_sdl_scalar	&lt;C: #define isc_sdl_scalar 8	&gt;</body><body package="IBEXDI" selector="isc_sdl_short_integer">isc_sdl_short_integer	&lt;C: #define isc_sdl_short_integer 10	&gt;</body><body package="IBEXDI" selector="isc_sdl_struct">isc_sdl_struct	&lt;C: #define isc_sdl_struct 6	&gt;</body><body package="IBEXDI" selector="isc_sdl_subtract">isc_sdl_subtract	&lt;C: #define isc_sdl_subtract 14	&gt;</body><body package="IBEXDI" selector="isc_sdl_tiny_integer">isc_sdl_tiny_integer	&lt;C: #define isc_sdl_tiny_integer 9	&gt;</body><body package="IBEXDI" selector="isc_sdl_variable">isc_sdl_variable	&lt;C: #define isc_sdl_variable 7	&gt;</body><body package="IBEXDI" selector="isc_sdl_version1">isc_sdl_version1	&lt;C: #define isc_sdl_version1 1	&gt;</body><body package="IBEXDI" selector="isc_sdl_while">isc_sdl_while	&lt;C: #define isc_sdl_while 27	&gt;</body><body package="IBEXDI" selector="isc_segment">isc_segment	&lt;C: #define isc_segment 335544366	&gt;</body><body package="IBEXDI" selector="isc_segstr_eof">isc_segstr_eof	&lt;C: #define isc_segstr_eof 335544367	&gt;</body><body package="IBEXDI" selector="isc_segstr_no_op">isc_segstr_no_op	&lt;C: #define isc_segstr_no_op 335544368	&gt;</body><body package="IBEXDI" selector="isc_segstr_no_read">isc_segstr_no_read	&lt;C: #define isc_segstr_no_read 335544369	&gt;</body><body package="IBEXDI" selector="isc_segstr_no_trans">isc_segstr_no_trans	&lt;C: #define isc_segstr_no_trans 335544370	&gt;</body><body package="IBEXDI" selector="isc_segstr_no_write">isc_segstr_no_write	&lt;C: #define isc_segstr_no_write 335544371	&gt;</body><body package="IBEXDI" selector="isc_segstr_wrong_db">isc_segstr_wrong_db	&lt;C: #define isc_segstr_wrong_db 335544372	&gt;</body><body package="IBEXDI" selector="isc_service_att_err">isc_service_att_err	&lt;C: #define isc_service_att_err 335544792	&gt;</body><body package="IBEXDI" selector="isc_service_not_supported">isc_service_not_supported	&lt;C: #define isc_service_not_supported 335544814	&gt;</body><body package="IBEXDI" selector="isc_service_unknown">isc_service_unknown	&lt;C: #define isc_service_unknown 335544705	&gt;</body><body package="IBEXDI" selector="isc_shadow_accessed">isc_shadow_accessed	&lt;C: #define isc_shadow_accessed 335544455	&gt;</body><body package="IBEXDI" selector="isc_shadow_missing">isc_shadow_missing	&lt;C: #define isc_shadow_missing 335544460	&gt;</body><body package="IBEXDI" selector="isc_shutdown">isc_shutdown	&lt;C: #define isc_shutdown 335544528	&gt;</body><body package="IBEXDI" selector="isc_shutfail">isc_shutfail	&lt;C: #define isc_shutfail 335544557	&gt;</body><body package="IBEXDI" selector="isc_shutinprog">isc_shutinprog	&lt;C: #define isc_shutinprog 335544506	&gt;</body><body package="IBEXDI" selector="isc_shutwarn">isc_shutwarn	&lt;C: #define isc_shutwarn 335544560	&gt;</body><body package="IBEXDI" selector="isc_sing_select_err">isc_sing_select_err	&lt;C: #define isc_sing_select_err 335544652	&gt;</body><body package="IBEXDI" selector="isc_sort_err">isc_sort_err	&lt;C: #define isc_sort_err 335544675	&gt;</body><body package="IBEXDI" selector="isc_sort_mem_err">isc_sort_mem_err	&lt;C: #define isc_sort_mem_err 335544676	&gt;</body><body package="IBEXDI" selector="isc_sort_rec_size_err">isc_sort_rec_size_err	&lt;C: #define isc_sort_rec_size_err 335544758	&gt;</body><body package="IBEXDI" selector="isc_spb_bkp_convert">isc_spb_bkp_convert	&lt;C: #define isc_spb_bkp_convert 64	&gt;</body><body package="IBEXDI" selector="isc_spb_bkp_expand">isc_spb_bkp_expand	&lt;C: #define isc_spb_bkp_expand 128	&gt;</body><body package="IBEXDI" selector="isc_spb_bkp_factor">isc_spb_bkp_factor	&lt;C: #define isc_spb_bkp_factor 6	&gt;</body><body package="IBEXDI" selector="isc_spb_bkp_file">isc_spb_bkp_file	&lt;C: #define isc_spb_bkp_file 5	&gt;</body><body package="IBEXDI" selector="isc_spb_bkp_ignore_checksums">isc_spb_bkp_ignore_checksums	&lt;C: #define isc_spb_bkp_ignore_checksums 1	&gt;</body><body package="IBEXDI" selector="isc_spb_bkp_ignore_limbo">isc_spb_bkp_ignore_limbo	&lt;C: #define isc_spb_bkp_ignore_limbo 2	&gt;</body><body package="IBEXDI" selector="isc_spb_bkp_length">isc_spb_bkp_length	&lt;C: #define isc_spb_bkp_length 7	&gt;</body><body package="IBEXDI" selector="isc_spb_bkp_metadata_only">isc_spb_bkp_metadata_only	&lt;C: #define isc_spb_bkp_metadata_only 4	&gt;</body><body package="IBEXDI" selector="isc_spb_bkp_no_garbage_collect">isc_spb_bkp_no_garbage_collect	&lt;C: #define isc_spb_bkp_no_garbage_collect 8	&gt;</body><body package="IBEXDI" selector="isc_spb_bkp_non_transportable">isc_spb_bkp_non_transportable	&lt;C: #define isc_spb_bkp_non_transportable 32	&gt;</body><body package="IBEXDI" selector="isc_spb_bkp_old_descriptions">isc_spb_bkp_old_descriptions	&lt;C: #define isc_spb_bkp_old_descriptions 16	&gt;</body><body package="IBEXDI" selector="isc_spb_command_line">isc_spb_command_line	&lt;C: #define isc_spb_command_line 105	&gt;</body><body package="IBEXDI" selector="isc_spb_connect_timeout">isc_spb_connect_timeout	&lt;C: #define isc_spb_connect_timeout isc_dpb_connect_timeout	&gt;</body><body package="IBEXDI" selector="isc_spb_current_version">isc_spb_current_version	&lt;C: #define isc_spb_current_version 2	&gt;</body><body package="IBEXDI" selector="isc_spb_dbname">isc_spb_dbname	&lt;C: #define isc_spb_dbname 106	&gt;</body><body package="IBEXDI" selector="isc_spb_dummy_packet_interval">isc_spb_dummy_packet_interval	&lt;C: #define isc_spb_dummy_packet_interval isc_dpb_dummy_packet_interval	&gt;</body><body package="IBEXDI" selector="isc_spb_lic_desc">isc_spb_lic_desc	&lt;C: #define isc_spb_lic_desc 7	&gt;</body><body package="IBEXDI" selector="isc_spb_lic_id">isc_spb_lic_id	&lt;C: #define isc_spb_lic_id 6	&gt;</body><body package="IBEXDI" selector="isc_spb_lic_key">isc_spb_lic_key	&lt;C: #define isc_spb_lic_key 5	&gt;</body><body package="IBEXDI" selector="isc_spb_multi_tra_id">isc_spb_multi_tra_id	&lt;C: #define isc_spb_multi_tra_id 20	&gt;</body><body package="IBEXDI" selector="isc_spb_num_att">isc_spb_num_att	&lt;C: #define isc_spb_num_att 5	&gt;</body><body package="IBEXDI" selector="isc_spb_num_db">isc_spb_num_db	&lt;C: #define isc_spb_num_db 6	&gt;</body><body package="IBEXDI" selector="isc_spb_options">isc_spb_options	&lt;C: #define isc_spb_options 108	&gt;</body><body package="IBEXDI" selector="isc_spb_password">isc_spb_password	&lt;C: #define isc_spb_password isc_dpb_password	&gt;</body><body package="IBEXDI" selector="isc_spb_password_enc">isc_spb_password_enc	&lt;C: #define isc_spb_password_enc isc_dpb_password_enc	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_access_mode">isc_spb_prp_access_mode	&lt;C: #define isc_spb_prp_access_mode 13	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_activate">isc_spb_prp_activate	&lt;C: #define isc_spb_prp_activate 256	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_am_readonly">isc_spb_prp_am_readonly	&lt;C: #define isc_spb_prp_am_readonly 39	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_am_readwrite">isc_spb_prp_am_readwrite	&lt;C: #define isc_spb_prp_am_readwrite 40	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_db_online">isc_spb_prp_db_online	&lt;C: #define isc_spb_prp_db_online 512	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_deny_new_attachments">isc_spb_prp_deny_new_attachments	&lt;C: #define isc_spb_prp_deny_new_attachments 9	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_deny_new_transactions">isc_spb_prp_deny_new_transactions	&lt;C: #define isc_spb_prp_deny_new_transactions 10	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_page_buffers">isc_spb_prp_page_buffers	&lt;C: #define isc_spb_prp_page_buffers 5	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_res">isc_spb_prp_res	&lt;C: #define isc_spb_prp_res 36	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_res_use_full">isc_spb_prp_res_use_full	&lt;C: #define isc_spb_prp_res_use_full 35	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_reserve_space">isc_spb_prp_reserve_space	&lt;C: #define isc_spb_prp_reserve_space 11	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_set_sql_dialect">isc_spb_prp_set_sql_dialect	&lt;C: #define isc_spb_prp_set_sql_dialect 14	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_shutdown_db">isc_spb_prp_shutdown_db	&lt;C: #define isc_spb_prp_shutdown_db 7	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_sweep_interval">isc_spb_prp_sweep_interval	&lt;C: #define isc_spb_prp_sweep_interval 6	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_wm_async">isc_spb_prp_wm_async	&lt;C: #define isc_spb_prp_wm_async 37	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_wm_sync">isc_spb_prp_wm_sync	&lt;C: #define isc_spb_prp_wm_sync 38	&gt;</body><body package="IBEXDI" selector="isc_spb_prp_write_mode">isc_spb_prp_write_mode	&lt;C: #define isc_spb_prp_write_mode 12	&gt;</body><body package="IBEXDI" selector="isc_spb_res_access_mode">isc_spb_res_access_mode	&lt;C: #define isc_spb_res_access_mode 12	&gt;</body><body package="IBEXDI" selector="isc_spb_res_am_readonly">isc_spb_res_am_readonly	&lt;C: #define isc_spb_res_am_readonly isc_spb_prp_am_readonly	&gt;</body><body package="IBEXDI" selector="isc_spb_res_am_readwrite">isc_spb_res_am_readwrite	&lt;C: #define isc_spb_res_am_readwrite isc_spb_prp_am_readwrite	&gt;</body><body package="IBEXDI" selector="isc_spb_res_buffers">isc_spb_res_buffers	&lt;C: #define isc_spb_res_buffers 9	&gt;</body><body package="IBEXDI" selector="isc_spb_res_create">isc_spb_res_create	&lt;C: #define isc_spb_res_create 8192	&gt;</body><body package="IBEXDI" selector="isc_spb_res_deactivate_idx">isc_spb_res_deactivate_idx	&lt;C: #define isc_spb_res_deactivate_idx 256	&gt;</body><body package="IBEXDI" selector="isc_spb_res_length">isc_spb_res_length	&lt;C: #define isc_spb_res_length 11	&gt;</body><body package="IBEXDI" selector="isc_spb_res_no_shadow">isc_spb_res_no_shadow	&lt;C: #define isc_spb_res_no_shadow 512	&gt;</body><body package="IBEXDI" selector="isc_spb_res_no_validity">isc_spb_res_no_validity	&lt;C: #define isc_spb_res_no_validity 1024	&gt;</body><body package="IBEXDI" selector="isc_spb_res_one_at_a_time">isc_spb_res_one_at_a_time	&lt;C: #define isc_spb_res_one_at_a_time 2048	&gt;</body><body package="IBEXDI" selector="isc_spb_res_page_size">isc_spb_res_page_size	&lt;C: #define isc_spb_res_page_size 10	&gt;</body><body package="IBEXDI" selector="isc_spb_res_replace">isc_spb_res_replace	&lt;C: #define isc_spb_res_replace 4096	&gt;</body><body package="IBEXDI" selector="isc_spb_res_use_all_space">isc_spb_res_use_all_space	&lt;C: #define isc_spb_res_use_all_space 16384	&gt;</body><body package="IBEXDI" selector="isc_spb_rpr_check_db">isc_spb_rpr_check_db	&lt;C: #define isc_spb_rpr_check_db 16	&gt;</body><body package="IBEXDI" selector="isc_spb_rpr_commit_trans">isc_spb_rpr_commit_trans	&lt;C: #define isc_spb_rpr_commit_trans 15	&gt;</body><body package="IBEXDI" selector="isc_spb_rpr_full">isc_spb_rpr_full	&lt;C: #define isc_spb_rpr_full 128	&gt;</body><body package="IBEXDI" selector="isc_spb_rpr_ignore_checksum">isc_spb_rpr_ignore_checksum	&lt;C: #define isc_spb_rpr_ignore_checksum 32	&gt;</body><body package="IBEXDI" selector="isc_spb_rpr_kill_shadows">isc_spb_rpr_kill_shadows	&lt;C: #define isc_spb_rpr_kill_shadows 64	&gt;</body><body package="IBEXDI" selector="isc_spb_rpr_list_limbo_trans">isc_spb_rpr_list_limbo_trans	&lt;C: #define isc_spb_rpr_list_limbo_trans 8	&gt;</body><body package="IBEXDI" selector="isc_spb_rpr_mend_db">isc_spb_rpr_mend_db	&lt;C: #define isc_spb_rpr_mend_db 4	&gt;</body><body package="IBEXDI" selector="isc_spb_rpr_recover_two_phase">isc_spb_rpr_recover_two_phase	&lt;C: #define isc_spb_rpr_recover_two_phase 17	&gt;</body><body package="IBEXDI" selector="isc_spb_rpr_rollback_trans">isc_spb_rpr_rollback_trans	&lt;C: #define isc_spb_rpr_rollback_trans 34	&gt;</body><body package="IBEXDI" selector="isc_spb_rpr_sweep_db">isc_spb_rpr_sweep_db	&lt;C: #define isc_spb_rpr_sweep_db 2	&gt;</body><body package="IBEXDI" selector="isc_spb_rpr_validate_db">isc_spb_rpr_validate_db	&lt;C: #define isc_spb_rpr_validate_db 1	&gt;</body><body package="IBEXDI" selector="isc_spb_sec_firstname">isc_spb_sec_firstname	&lt;C: #define isc_spb_sec_firstname 10	&gt;</body><body package="IBEXDI" selector="isc_spb_sec_groupid">isc_spb_sec_groupid	&lt;C: #define isc_spb_sec_groupid 6	&gt;</body><body package="IBEXDI" selector="isc_spb_sec_groupname">isc_spb_sec_groupname	&lt;C: #define isc_spb_sec_groupname 9	&gt;</body><body package="IBEXDI" selector="isc_spb_sec_lastname">isc_spb_sec_lastname	&lt;C: #define isc_spb_sec_lastname 12	&gt;</body><body package="IBEXDI" selector="isc_spb_sec_middlename">isc_spb_sec_middlename	&lt;C: #define isc_spb_sec_middlename 11	&gt;</body><body package="IBEXDI" selector="isc_spb_sec_password">isc_spb_sec_password	&lt;C: #define isc_spb_sec_password 8	&gt;</body><body package="IBEXDI" selector="isc_spb_sec_userid">isc_spb_sec_userid	&lt;C: #define isc_spb_sec_userid 5	&gt;</body><body package="IBEXDI" selector="isc_spb_sec_username">isc_spb_sec_username	&lt;C: #define isc_spb_sec_username 7	&gt;</body><body package="IBEXDI" selector="isc_spb_single_tra_id">isc_spb_single_tra_id	&lt;C: #define isc_spb_single_tra_id 19	&gt;</body><body package="IBEXDI" selector="isc_spb_sql_role_name">isc_spb_sql_role_name	&lt;C: #define isc_spb_sql_role_name isc_dpb_sql_role_name	&gt;</body><body package="IBEXDI" selector="isc_spb_sts_data_pages">isc_spb_sts_data_pages	&lt;C: #define isc_spb_sts_data_pages 1	&gt;</body><body package="IBEXDI" selector="isc_spb_sts_db_log">isc_spb_sts_db_log	&lt;C: #define isc_spb_sts_db_log 2	&gt;</body><body package="IBEXDI" selector="isc_spb_sts_hdr_pages">isc_spb_sts_hdr_pages	&lt;C: #define isc_spb_sts_hdr_pages 4	&gt;</body><body package="IBEXDI" selector="isc_spb_sts_idx_pages">isc_spb_sts_idx_pages	&lt;C: #define isc_spb_sts_idx_pages 8	&gt;</body><body package="IBEXDI" selector="isc_spb_sts_sys_relations">isc_spb_sts_sys_relations	&lt;C: #define isc_spb_sts_sys_relations 16	&gt;</body><body package="IBEXDI" selector="isc_spb_sys_user_name">isc_spb_sys_user_name	&lt;C: #define isc_spb_sys_user_name isc_dpb_sys_user_name	&gt;</body><body package="IBEXDI" selector="isc_spb_sys_user_name_enc">isc_spb_sys_user_name_enc	&lt;C: #define isc_spb_sys_user_name_enc isc_dpb_sys_user_name_enc	&gt;</body><body package="IBEXDI" selector="isc_spb_tra_advise">isc_spb_tra_advise	&lt;C: #define isc_spb_tra_advise 29	&gt;</body><body package="IBEXDI" selector="isc_spb_tra_advise_commit">isc_spb_tra_advise_commit	&lt;C: #define isc_spb_tra_advise_commit 30	&gt;</body><body package="IBEXDI" selector="isc_spb_tra_advise_rollback">isc_spb_tra_advise_rollback	&lt;C: #define isc_spb_tra_advise_rollback 31	&gt;</body><body package="IBEXDI" selector="isc_spb_tra_advise_unknown">isc_spb_tra_advise_unknown	&lt;C: #define isc_spb_tra_advise_unknown 33	&gt;</body><body package="IBEXDI" selector="isc_spb_tra_db_path">isc_spb_tra_db_path	&lt;C: #define isc_spb_tra_db_path 28	&gt;</body><body package="IBEXDI" selector="isc_spb_tra_host_site">isc_spb_tra_host_site	&lt;C: #define isc_spb_tra_host_site 26	&gt;</body><body package="IBEXDI" selector="isc_spb_tra_id">isc_spb_tra_id	&lt;C: #define isc_spb_tra_id 18	&gt;</body><body package="IBEXDI" selector="isc_spb_tra_remote_site">isc_spb_tra_remote_site	&lt;C: #define isc_spb_tra_remote_site 27	&gt;</body><body package="IBEXDI" selector="isc_spb_tra_state">isc_spb_tra_state	&lt;C: #define isc_spb_tra_state 21	&gt;</body><body package="IBEXDI" selector="isc_spb_tra_state_commit">isc_spb_tra_state_commit	&lt;C: #define isc_spb_tra_state_commit 23	&gt;</body><body package="IBEXDI" selector="isc_spb_tra_state_limbo">isc_spb_tra_state_limbo	&lt;C: #define isc_spb_tra_state_limbo 22	&gt;</body><body package="IBEXDI" selector="isc_spb_tra_state_rollback">isc_spb_tra_state_rollback	&lt;C: #define isc_spb_tra_state_rollback 24	&gt;</body><body package="IBEXDI" selector="isc_spb_tra_state_unknown">isc_spb_tra_state_unknown	&lt;C: #define isc_spb_tra_state_unknown 25	&gt;</body><body package="IBEXDI" selector="isc_spb_user_name">isc_spb_user_name	&lt;C: #define isc_spb_user_name isc_dpb_user_name	&gt;</body><body package="IBEXDI" selector="isc_spb_verbose">isc_spb_verbose	&lt;C: #define isc_spb_verbose 107	&gt;</body><body package="IBEXDI" selector="isc_spb_version">isc_spb_version	&lt;C: #define isc_spb_version isc_spb_current_version	&gt;</body><body package="IBEXDI" selector="isc_spb_version1">isc_spb_version1	&lt;C: #define isc_spb_version1 1	&gt;</body><body package="IBEXDI" selector="isc_specify_field_err">isc_specify_field_err	&lt;C: #define isc_specify_field_err 335544598	&gt;</body><body package="IBEXDI" selector="isc_sql_db_dialect_dtype_unsupport">isc_sql_db_dialect_dtype_unsupport	&lt;C: #define isc_sql_db_dialect_dtype_unsupport 336003077	&gt;</body><body package="IBEXDI" selector="isc_sql_dialect_datatype_unsupport">isc_sql_dialect_datatype_unsupport	&lt;C: #define isc_sql_dialect_datatype_unsupport 335544796	&gt;</body><body package="IBEXDI" selector="isc_sqlerr">isc_sqlerr	&lt;C: #define isc_sqlerr 335544436	&gt;</body><body package="IBEXDI" selector="isc_sqlwarn">isc_sqlwarn	&lt;C: #define isc_sqlwarn 335544807	&gt;</body><body package="IBEXDI" selector="isc_srvr_version_too_old">isc_srvr_version_too_old	&lt;C: #define isc_srvr_version_too_old 335544666	&gt;</body><body package="IBEXDI" selector="isc_start_cm_for_wal">isc_start_cm_for_wal	&lt;C: #define isc_start_cm_for_wal 335544566	&gt;</body><body package="IBEXDI" selector="isc_stream_bof">isc_stream_bof	&lt;C: #define isc_stream_bof 335544644	&gt;</body><body package="IBEXDI" selector="isc_stream_crack">isc_stream_crack	&lt;C: #define isc_stream_crack 335544645	&gt;</body><body package="IBEXDI" selector="isc_stream_eof">isc_stream_eof	&lt;C: #define isc_stream_eof 335544374	&gt;</body><body package="IBEXDI" selector="isc_stream_not_defined">isc_stream_not_defined	&lt;C: #define isc_stream_not_defined 335544502	&gt;</body><body package="IBEXDI" selector="isc_stream_not_found">isc_stream_not_found	&lt;C: #define isc_stream_not_found 335544639	&gt;</body><body package="IBEXDI" selector="isc_stream_twice">isc_stream_twice	&lt;C: #define isc_stream_twice 335544638	&gt;</body><body package="IBEXDI" selector="isc_subquery_err">isc_subquery_err	&lt;C: #define isc_subquery_err 335544605	&gt;</body><body package="IBEXDI" selector="isc_svc_in_use">isc_svc_in_use	&lt;C: #define isc_svc_in_use 335544716	&gt;</body><body package="IBEXDI" selector="isc_svc_name_missing">isc_svc_name_missing	&lt;C: #define isc_svc_name_missing 335544799	&gt;</body><body package="IBEXDI" selector="isc_svcnoexe">isc_svcnoexe	&lt;C: #define isc_svcnoexe 335544703	&gt;</body><body package="IBEXDI" selector="isc_svcnotdef">isc_svcnotdef	&lt;C: #define isc_svcnotdef 335544563	&gt;</body><body package="IBEXDI" selector="isc_svcnouser">isc_svcnouser	&lt;C: #define isc_svcnouser 335544797	&gt;</body><body package="IBEXDI" selector="isc_syntaxerr">isc_syntaxerr	&lt;C: #define isc_syntaxerr 335544390	&gt;</body><body package="IBEXDI" selector="isc_sys_request">isc_sys_request	&lt;C: #define isc_sys_request 335544373	&gt;</body><body package="IBEXDI" selector="isc_systrig_update">isc_systrig_update	&lt;C: #define isc_systrig_update 335544549	&gt;</body><body package="IBEXDI" selector="isc_table_name">isc_table_name	&lt;C: #define isc_table_name 335544626	&gt;</body><body package="IBEXDI" selector="isc_table_view_err">isc_table_view_err	&lt;C: #define isc_table_view_err 335544602	&gt;</body><body package="IBEXDI" selector="isc_text_subtype">isc_text_subtype	&lt;C: #define isc_text_subtype 335544568	&gt;</body><body package="IBEXDI" selector="isc_token_err">isc_token_err	&lt;C: #define isc_token_err 335544612	&gt;</body><body package="IBEXDI" selector="isc_token_too_long">isc_token_too_long	&lt;C: #define isc_token_too_long 335544743	&gt;</body><body package="IBEXDI" selector="isc_too_many_contexts">isc_too_many_contexts	&lt;C: #define isc_too_many_contexts 335544800	&gt;</body><body package="IBEXDI" selector="isc_too_many_handles">isc_too_many_handles	&lt;C: #define isc_too_many_handles 335544761	&gt;</body><body package="IBEXDI" selector="isc_tpb_autocommit">isc_tpb_autocommit	&lt;C: #define isc_tpb_autocommit 16	&gt;</body><body package="IBEXDI" selector="isc_tpb_commit_time">isc_tpb_commit_time	&lt;C: #define isc_tpb_commit_time 13	&gt;</body><body package="IBEXDI" selector="isc_tpb_concurrency">isc_tpb_concurrency	&lt;C: #define isc_tpb_concurrency 2	&gt;</body><body package="IBEXDI" selector="isc_tpb_consistency">isc_tpb_consistency	&lt;C: #define isc_tpb_consistency 1	&gt;</body><body package="IBEXDI" selector="isc_tpb_exclusive">isc_tpb_exclusive	&lt;C: #define isc_tpb_exclusive 5	&gt;</body><body package="IBEXDI" selector="isc_tpb_ignore_limbo">isc_tpb_ignore_limbo	&lt;C: #define isc_tpb_ignore_limbo 14	&gt;</body><body package="IBEXDI" selector="isc_tpb_lock_read">isc_tpb_lock_read	&lt;C: #define isc_tpb_lock_read 10	&gt;</body><body package="IBEXDI" selector="isc_tpb_lock_write">isc_tpb_lock_write	&lt;C: #define isc_tpb_lock_write 11	&gt;</body><body package="IBEXDI" selector="isc_tpb_no_auto_undo">isc_tpb_no_auto_undo	&lt;C: #define isc_tpb_no_auto_undo 20	&gt;</body><body package="IBEXDI" selector="isc_tpb_no_rec_version">isc_tpb_no_rec_version	&lt;C: #define isc_tpb_no_rec_version 18	&gt;</body><body package="IBEXDI" selector="isc_tpb_nowait">isc_tpb_nowait	&lt;C: #define isc_tpb_nowait 7	&gt;</body><body package="IBEXDI" selector="isc_tpb_protected">isc_tpb_protected	&lt;C: #define isc_tpb_protected 4	&gt;</body><body package="IBEXDI" selector="isc_tpb_read">isc_tpb_read	&lt;C: #define isc_tpb_read 8	&gt;</body><body package="IBEXDI" selector="isc_tpb_read_committed">isc_tpb_read_committed	&lt;C: #define isc_tpb_read_committed 15	&gt;</body><body package="IBEXDI" selector="isc_tpb_rec_version">isc_tpb_rec_version	&lt;C: #define isc_tpb_rec_version 17	&gt;</body><body package="IBEXDI" selector="isc_tpb_restart_requests">isc_tpb_restart_requests	&lt;C: #define isc_tpb_restart_requests 19	&gt;</body><body package="IBEXDI" selector="isc_tpb_shared">isc_tpb_shared	&lt;C: #define isc_tpb_shared 3	&gt;</body><body package="IBEXDI" selector="isc_tpb_verb_time">isc_tpb_verb_time	&lt;C: #define isc_tpb_verb_time 12	&gt;</body><body package="IBEXDI" selector="isc_tpb_version1">isc_tpb_version1	&lt;C: #define isc_tpb_version1 1	&gt;</body><body package="IBEXDI" selector="isc_tpb_version3">isc_tpb_version3	&lt;C: #define isc_tpb_version3 3	&gt;</body><body package="IBEXDI" selector="isc_tpb_wait">isc_tpb_wait	&lt;C: #define isc_tpb_wait 6	&gt;</body><body package="IBEXDI" selector="isc_tpb_write">isc_tpb_write	&lt;C: #define isc_tpb_write 9	&gt;</body><body package="IBEXDI" selector="isc_tra_must_sweep">isc_tra_must_sweep	&lt;C: #define isc_tra_must_sweep 335544731	&gt;</body><body package="IBEXDI" selector="isc_tra_state">isc_tra_state	&lt;C: #define isc_tra_state 335544468	&gt;</body><body package="IBEXDI" selector="isc_trainlim">isc_trainlim	&lt;C: #define isc_trainlim 335544418	&gt;</body><body package="IBEXDI" selector="isc_tranotzer">isc_tranotzer	&lt;C: #define isc_tranotzer 335544408	&gt;</body><body package="IBEXDI" selector="isc_trans_invalid">isc_trans_invalid	&lt;C: #define isc_trans_invalid 335544469	&gt;</body><body package="IBEXDI" selector="isc_transitional_date">isc_transitional_date	&lt;C: #define isc_transitional_date 335544764	&gt;</body><body package="IBEXDI" selector="isc_transliteration_failed">isc_transliteration_failed	&lt;C: #define isc_transliteration_failed 335544565	&gt;</body><body package="IBEXDI" selector="isc_traoutsta">isc_traoutsta	&lt;C: #define isc_traoutsta 335544420	&gt;</body><body package="IBEXDI" selector="isc_trareqmis">isc_trareqmis	&lt;C: #define isc_trareqmis 335544409	&gt;</body><body package="IBEXDI" selector="isc_udf_exception">isc_udf_exception	&lt;C: #define isc_udf_exception 335544740	&gt;</body><body package="IBEXDI" selector="isc_unavailable">isc_unavailable	&lt;C: #define isc_unavailable 335544375	&gt;</body><body package="IBEXDI" selector="isc_unexp_spb_form">isc_unexp_spb_form	&lt;C: #define isc_unexp_spb_form 335544795	&gt;</body><body package="IBEXDI" selector="isc_union_err">isc_union_err	&lt;C: #define isc_union_err 335544613	&gt;</body><body package="IBEXDI" selector="isc_unique_key_violation">isc_unique_key_violation	&lt;C: #define isc_unique_key_violation 335544665	&gt;</body><body package="IBEXDI" selector="isc_unlicensed">isc_unlicensed	&lt;C: #define isc_unlicensed 335544452	&gt;</body><body package="IBEXDI" selector="isc_unprepared_stmt">isc_unprepared_stmt	&lt;C: #define isc_unprepared_stmt 335544711	&gt;</body><body package="IBEXDI" selector="isc_unres_rel">isc_unres_rel	&lt;C: #define isc_unres_rel 335544376	&gt;</body><body package="IBEXDI" selector="isc_uns_ext">isc_uns_ext	&lt;C: #define isc_uns_ext 335544377	&gt;</body><body package="IBEXDI" selector="isc_unsupported_network_drive">isc_unsupported_network_drive	&lt;C: #define isc_unsupported_network_drive 335544732	&gt;</body><body package="IBEXDI" selector="isc_update_conflict">isc_update_conflict	&lt;C: #define isc_update_conflict 335544451	&gt;</body><body package="IBEXDI" selector="isc_usrname_not_found">isc_usrname_not_found	&lt;C: #define isc_usrname_not_found 335544753	&gt;</body><body package="IBEXDI" selector="isc_usrname_required">isc_usrname_required	&lt;C: #define isc_usrname_required 335544749	&gt;</body><body package="IBEXDI" selector="isc_usrname_too_long">isc_usrname_too_long	&lt;C: #define isc_usrname_too_long 335544747	&gt;</body><body package="IBEXDI" selector="isc_valid_client_dialects">isc_valid_client_dialects	&lt;C: #define isc_valid_client_dialects 335544812	&gt;</body><body package="IBEXDI" selector="isc_valid_db_dialects">isc_valid_db_dialects	&lt;C: #define isc_valid_db_dialects 335544806	&gt;</body><body package="IBEXDI" selector="isc_version4">isc_version4	&lt;C: #define isc_version4 	&gt;</body><body package="IBEXDI" selector="isc_version_err">isc_version_err	&lt;C: #define isc_version_err 335544677	&gt;</body><body package="IBEXDI" selector="isc_view_alias">isc_view_alias	&lt;C: #define isc_view_alias 335544660	&gt;</body><body package="IBEXDI" selector="isc_virmemexh">isc_virmemexh	&lt;C: #define isc_virmemexh 335544430	&gt;</body><body package="IBEXDI" selector="isc_waifortra">isc_waifortra	&lt;C: #define isc_waifortra 335544398	&gt;</body><body package="IBEXDI" selector="isc_wal_bugcheck">isc_wal_bugcheck	&lt;C: #define isc_wal_bugcheck 335544513	&gt;</body><body package="IBEXDI" selector="isc_wal_cache_err">isc_wal_cache_err	&lt;C: #define isc_wal_cache_err 335544556	&gt;</body><body package="IBEXDI" selector="isc_wal_cant_expand">isc_wal_cant_expand	&lt;C: #define isc_wal_cant_expand 335544514	&gt;</body><body package="IBEXDI" selector="isc_wal_err_expansion">isc_wal_err_expansion	&lt;C: #define isc_wal_err_expansion 335544524	&gt;</body><body package="IBEXDI" selector="isc_wal_err_jrn_comm">isc_wal_err_jrn_comm	&lt;C: #define isc_wal_err_jrn_comm 335544523	&gt;</body><body package="IBEXDI" selector="isc_wal_err_logwrite">isc_wal_err_logwrite	&lt;C: #define isc_wal_err_logwrite 335544522	&gt;</body><body package="IBEXDI" selector="isc_wal_err_rollover">isc_wal_err_rollover	&lt;C: #define isc_wal_err_rollover 335544499	&gt;</body><body package="IBEXDI" selector="isc_wal_err_rollover2">isc_wal_err_rollover2	&lt;C: #define isc_wal_err_rollover2 335544521	&gt;</body><body package="IBEXDI" selector="isc_wal_err_setup">isc_wal_err_setup	&lt;C: #define isc_wal_err_setup 335544525	&gt;</body><body package="IBEXDI" selector="isc_wal_err_ww_start">isc_wal_err_ww_start	&lt;C: #define isc_wal_err_ww_start 335544527	&gt;</body><body package="IBEXDI" selector="isc_wal_err_ww_sync">isc_wal_err_ww_sync	&lt;C: #define isc_wal_err_ww_sync 335544526	&gt;</body><body package="IBEXDI" selector="isc_wal_failure">isc_wal_failure	&lt;C: #define isc_wal_failure 335544486	&gt;</body><body package="IBEXDI" selector="isc_wal_file_open">isc_wal_file_open	&lt;C: #define isc_wal_file_open 335544484	&gt;</body><body package="IBEXDI" selector="isc_wal_illegal_attach">isc_wal_illegal_attach	&lt;C: #define isc_wal_illegal_attach 335544497	&gt;</body><body package="IBEXDI" selector="isc_wal_invalid_wpb">isc_wal_invalid_wpb	&lt;C: #define isc_wal_invalid_wpb 335544498	&gt;</body><body package="IBEXDI" selector="isc_wal_ovflow_log_required">isc_wal_ovflow_log_required	&lt;C: #define isc_wal_ovflow_log_required 335544567	&gt;</body><body package="IBEXDI" selector="isc_wal_shadow_err">isc_wal_shadow_err	&lt;C: #define isc_wal_shadow_err 335544629	&gt;</body><body package="IBEXDI" selector="isc_wal_subsys_corrupt">isc_wal_subsys_corrupt	&lt;C: #define isc_wal_subsys_corrupt 335544504	&gt;</body><body package="IBEXDI" selector="isc_wal_subsys_error">isc_wal_subsys_error	&lt;C: #define isc_wal_subsys_error 335544503	&gt;</body><body package="IBEXDI" selector="isc_walw_err">isc_walw_err	&lt;C: #define isc_walw_err 335544487	&gt;</body><body package="IBEXDI" selector="isc_where_err">isc_where_err	&lt;C: #define isc_where_err 335544601	&gt;</body><body package="IBEXDI" selector="isc_wish_list">isc_wish_list	&lt;C: #define isc_wish_list 335544378	&gt;</body><body package="IBEXDI" selector="isc_wroblrver">isc_wroblrver	&lt;C: #define isc_wroblrver 335544412	&gt;</body><body package="IBEXDI" selector="isc_wrodpbver">isc_wrodpbver	&lt;C: #define isc_wrodpbver 335544413	&gt;</body><body package="IBEXDI" selector="isc_wrodynver">isc_wrodynver	&lt;C: #define isc_wrodynver 335544437	&gt;</body><body package="IBEXDI" selector="isc_wrong_ods">isc_wrong_ods	&lt;C: #define isc_wrong_ods 335544379	&gt;</body><body package="IBEXDI" selector="isc_wronumarg">isc_wronumarg	&lt;C: #define isc_wronumarg 335544380	&gt;</body><body package="IBEXDI" selector="isc_wrospbver">isc_wrospbver	&lt;C: #define isc_wrospbver 335544561	&gt;</body><body package="IBEXDI" selector="isc_wrotpbver">isc_wrotpbver	&lt;C: #define isc_wrotpbver 335544411	&gt;</body><body package="IBEXDI" selector="isc_xcpnotdef">isc_xcpnotdef	&lt;C: #define isc_xcpnotdef 335544516	&gt;</body><body package="IBEXDI" selector="sec_dba_password_spec">sec_dba_password_spec	&lt;C: #define sec_dba_password_spec 512	&gt;</body><body package="IBEXDI" selector="sec_dba_user_name_spec">sec_dba_user_name_spec	&lt;C: #define sec_dba_user_name_spec 256	&gt;</body><body package="IBEXDI" selector="sec_first_name_spec">sec_first_name_spec	&lt;C: #define sec_first_name_spec 32	&gt;</body><body package="IBEXDI" selector="sec_gid_spec">sec_gid_spec	&lt;C: #define sec_gid_spec 2	&gt;</body><body package="IBEXDI" selector="sec_group_name_spec">sec_group_name_spec	&lt;C: #define sec_group_name_spec 16	&gt;</body><body package="IBEXDI" selector="sec_last_name_spec">sec_last_name_spec	&lt;C: #define sec_last_name_spec 128	&gt;</body><body package="IBEXDI" selector="sec_middle_name_spec">sec_middle_name_spec	&lt;C: #define sec_middle_name_spec 64	&gt;</body><body package="IBEXDI" selector="sec_password_spec">sec_password_spec	&lt;C: #define sec_password_spec 8	&gt;</body><body package="IBEXDI" selector="sec_protocol_local">sec_protocol_local	&lt;C: #define sec_protocol_local 4	&gt;</body><body package="IBEXDI" selector="sec_protocol_netbeui">sec_protocol_netbeui	&lt;C: #define sec_protocol_netbeui 2	&gt;</body><body package="IBEXDI" selector="sec_protocol_spx">sec_protocol_spx	&lt;C: #define sec_protocol_spx 3	&gt;</body><body package="IBEXDI" selector="sec_protocol_tcpip">sec_protocol_tcpip	&lt;C: #define sec_protocol_tcpip 1	&gt;</body><body package="IBEXDI" selector="sec_server_spec">sec_server_spec	&lt;C: #define sec_server_spec 4	&gt;</body><body package="IBEXDI" selector="sec_uid_spec">sec_uid_spec	&lt;C: #define sec_uid_spec 1	&gt;</body></methods><methods><class-id>Database.InterBaseInterface</class-id> <category>macros</category><body package="IBEXDI" selector="ADD_SPB_LENGTH:with:">ADD_SPB_LENGTH: p with: length	&lt;C: #define ADD_SPB_LENGTH(p, length) {*(p )++=(length );*(p )++=(length )&gt;&gt;8;}	&gt;</body><body package="IBEXDI" selector="ADD_SPB_NUMERIC:with:">ADD_SPB_NUMERIC: p with: data	&lt;C: #define ADD_SPB_NUMERIC(p, data) {*(p )++=(data );*(p )++=(data )&gt;&gt;8;*(p )++=(data )&gt;&gt;16;*(p )++=(data )&gt;&gt;24;}	&gt;</body><body package="IBEXDI" selector="XSQLDA_LENGTH:">XSQLDA_LENGTH: n	"&lt;C: #define XSQLDA_LENGTH(n) (sizeof(XSQLDA)+((n )-1)*sizeof(XSQLVAR))	&gt;"	^self XSQLDA1 sizeof + ((n - 1) * (self XSQLVAR sizeof))</body><body package="IBEXDI" selector="blr_word:">blr_word: n	&lt;C: #define blr_word(n) ((n )%256),((n )/256)	&gt;</body><body package="IBEXDI" selector="getb:">getb: p	&lt;C: #define getb(p) (--(p )-&gt;bstr_cnt&gt;=0?*(p )-&gt;bstr_ptr++&amp;255:BLOB_get(p ))	&gt;</body><body package="IBEXDI" selector="putb:with:">putb: x with: p	&lt;C: #define putb(x, p) (((x )==10 ||(!(--(p )-&gt;bstr_cnt)))?BLOB_put((x ),p ):((int)(*(p )-&gt;bstr_ptr++=(unsigned)(x ))))	&gt;</body><body package="IBEXDI" selector="putbx:with:">putbx: x with: p	&lt;C: #define putbx(x, p) ((!(--(p )-&gt;bstr_cnt))?BLOB_put((x ),p ):((int)(*(p )-&gt;bstr_ptr++=(unsigned)(x ))))	&gt;</body></methods><methods><class-id>Database.InterBaseInterface</class-id> <category>types</category><body package="IBEXDI" selector="BSTREAM">BSTREAM	&lt;C: typedef struct bstream BSTREAM&gt;</body><body package="IBEXDI" selector="GDS_QUAD">GDS_QUAD	&lt;C: typedef struct {			long gds_quad_high;			unsigned long gds_quad_low;		} GDS_QUAD&gt;</body><body package="IBEXDI" selector="GDS__QUAD">GDS__QUAD	&lt;C: typedef GDS_QUAD GDS__QUAD&gt;</body><body package="IBEXDI" selector="ISC_ARRAY_BOUND">ISC_ARRAY_BOUND	&lt;C: typedef struct {			short array_bound_lower, array_bound_upper;		} ISC_ARRAY_BOUND&gt;</body><body package="IBEXDI" selector="ISC_ARRAY_DESC">ISC_ARRAY_DESC	&lt;C: typedef struct {			unsigned char array_desc_dtype;			char array_desc_scale;			unsigned short array_desc_length;			char array_desc_field_name[32];			char array_desc_relation_name[32];			short array_desc_dimensions, array_desc_flags;			ISC_ARRAY_BOUND array_desc_bounds[16];		} ISC_ARRAY_DESC&gt;</body><body package="IBEXDI" selector="ISC_BLOB_CTL">ISC_BLOB_CTL	&lt;C: typedef struct isc_blob_ctl * ISC_BLOB_CTL&gt;</body><body package="IBEXDI" selector="ISC_BLOB_DESC">ISC_BLOB_DESC	&lt;C: typedef struct {			short blob_desc_subtype, blob_desc_charset, blob_desc_segment_size;			unsigned char blob_desc_field_name[32];			unsigned char blob_desc_relation_name[32];		} ISC_BLOB_DESC&gt;</body><body package="IBEXDI" selector="ISC_DATE">ISC_DATE	&lt;C: typedef long ISC_DATE&gt;</body><body package="IBEXDI" selector="ISC_INT64">ISC_INT64	&lt;C: typedef long long ISC_INT64&gt;</body><body package="IBEXDI" selector="ISC_TIME">ISC_TIME	&lt;C: typedef unsigned long ISC_TIME&gt;</body><body package="IBEXDI" selector="ISC_TIMESTAMP">ISC_TIMESTAMP	&lt;C: typedef struct {			ISC_DATE timestamp_date;			ISC_TIME timestamp_time;		} ISC_TIMESTAMP&gt;</body><body package="IBEXDI" selector="ISC_UINT64">ISC_UINT64	&lt;C: typedef unsigned long long ISC_UINT64&gt;</body><body package="IBEXDI" selector="PXSQLDA">PXSQLDA	&lt;C: typedef XSQLDA * PXSQLDA&gt;</body><body package="IBEXDI" selector="USER_SEC_DATA">USER_SEC_DATA	&lt;C: typedef struct {			short sec_flags;			int uid, gid, protocol;			char * server;			char * user_name;			char * password;			char * group_name;			char * first_name;			char * middle_name;			char * last_name;			char * dba_user_name;			char * dba_password;		} USER_SEC_DATA&gt;</body><body package="IBEXDI" selector="XSQLDA">XSQLDA	&lt;C: typedef struct {			short version;			char sqldaid[8];			long sqldabc;			short sqln, sqld;			XSQLVAR sqlvar[100];		} XSQLDA&gt;</body><body package="IBEXDI" selector="XSQLDA1">XSQLDA1	&lt;C: typedef struct {			short version;			char sqldaid[8];			long sqldabc;			short sqln, sqld;			XSQLVAR sqlvar[1];		} XSQLDA1&gt;</body><body package="IBEXDI" selector="XSQLVAR">XSQLVAR	&lt;C: typedef struct {			short sqltype, sqlscale, sqlsubtype, sqllen;			char * sqldata;			short * sqlind;			short sqlname_length;			char sqlname[32];			short relname_length;			char relname[32];			short ownname_length;			char ownname[32];			short aliasname_length;			char aliasname[32];		} XSQLVAR&gt;</body><body package="IBEXDI" selector="isc_att_handle">isc_att_handle	&lt;C: typedef void * isc_att_handle&gt;</body><body package="IBEXDI" selector="isc_blob_handle">isc_blob_handle	"was void * "	&lt;C: typedef void * isc_blob_handle&gt;</body><body package="IBEXDI" selector="isc_callback">isc_callback	&lt;C: typedef void (* isc_callback)(...)&gt;</body><body package="IBEXDI" selector="isc_db_handle">isc_db_handle	"replace void * with long"	&lt;C: typedef void * isc_db_handle&gt;</body><body package="IBEXDI" selector="isc_form_handle">isc_form_handle	&lt;C: typedef void * isc_form_handle&gt;</body><body package="IBEXDI" selector="isc_req_handle">isc_req_handle	&lt;C: typedef void * isc_req_handle&gt;</body><body package="IBEXDI" selector="isc_resv_handle">isc_resv_handle	&lt;C: typedef long isc_resv_handle&gt;</body><body package="IBEXDI" selector="isc_stmt_handle">isc_stmt_handle	" was void * "	&lt;C: typedef void *  isc_stmt_handle&gt;</body><body package="IBEXDI" selector="isc_svc_handle">isc_svc_handle	&lt;C: typedef void * isc_svc_handle&gt;</body><body package="IBEXDI" selector="isc_tr_handle">isc_tr_handle	"was void * "	&lt;C: typedef void * isc_tr_handle&gt;</body><body package="IBEXDI" selector="isc_win_handle">isc_win_handle	&lt;C: typedef void * isc_win_handle&gt;</body></methods><methods><class-id>Database.InterBaseInterface</class-id> <category>accessing</category><body package="IBEXDI" selector="copyToHeapSelector">copyToHeapSelector	^#copyToHeap</body><body package="IBEXDI" selector="encoding">encoding	^ #default</body><body package="IBEXDI" selector="gcMallocSelector">gcMallocSelector	^#gcMalloc:</body><body package="IBEXDI" selector="mallocSelector">mallocSelector	^#malloc:</body></methods><methods><class-id>Database.InterBaseInterface</class-id> <category>structs</category><body package="IBEXDI" selector="bstream">bstream	&lt;C: struct bstream {			void * bstr_blob;			char * bstr_buffer;			char * bstr_ptr;			short bstr_length, bstr_cnt;			char bstr_mode;		}&gt;</body><body package="IBEXDI" selector="isc_blob_ctl">isc_blob_ctl	&lt;C: struct isc_blob_ctl {			long (* ctl_source)(...);			struct isc_blob_ctl * ctl_source_handle;			short ctl_to_sub_type, ctl_from_sub_type;			unsigned short ctl_buffer_length, ctl_segment_length, ctl_bpb_length;			char * ctl_bpb;			unsigned char * ctl_buffer;			long ctl_max_segment, ctl_number_segments, ctl_total_length;			long * ctl_status;			long ctl_data[8];		}&gt;</body></methods><methods><class-id>Database.InterBaseInterface class</class-id> <category>private class initialization</category><body package="IBEXDI" selector="databaseInfoMap">databaseInfoMap	^DatabaseInfoMap</body><body package="IBEXDI" selector="databaseParameterMap">databaseParameterMap	^DatabaseParameterMap</body><body package="IBEXDI" selector="initialize">initialize	"InterBaseInterface withAllSubclasses do: [:class | class initialize]. InterBaseBuffer install"		self initializeDefineCaches.	self initializeMaps.</body><body package="IBEXDI" selector="initializeDatabaseInfoMap:">initializeDatabaseInfoMap: xif	(DatabaseInfoMap := IdentityDictionary new: 100)		add: #accessPath -&gt; xif isc_info_access_path;		add: #allocation -&gt; xif isc_info_allocation;		add: #attachmentId -&gt; xif isc_info_attachment_id;		add: #backoutCount -&gt; xif isc_info_backout_count;		add: #baseLevel -&gt; xif isc_info_base_level;		add: #bpageErrors -&gt; xif isc_info_bpage_errors;		add: #currentMemory -&gt; xif isc_info_current_memory;		add: #curLogfileName -&gt; xif isc_info_cur_logfile_name;		add: #curLogPartOffset -&gt; xif isc_info_cur_log_part_offset;		add: #dataNotReady -&gt; xif isc_info_data_not_ready;		add: #dbId -&gt; xif isc_info_db_id;		add: #dbReadOnly -&gt; xif isc_info_db_read_only;		add: #dbSizeInPages -&gt; xif isc_info_db_size_in_pages;		add: #dbSQLDialect -&gt; xif isc_info_db_SQL_dialect;		add: #dbSqlDialect -&gt; xif isc_info_db_sql_dialect;		add: #deleteCount -&gt; xif isc_info_delete_count;		add: #dpageErrors -&gt; xif isc_info_dpage_errors;		add: #end -&gt; xif isc_info_end;		add: #error -&gt; xif isc_info_error;		add: #expungeCount -&gt; xif isc_info_expunge_count;		add: #fetches -&gt; xif isc_info_fetches;		add: #flagEnd -&gt; xif isc_info_flag_end;		add: #forcedWrites -&gt; xif isc_info_forced_writes;		add: #implementation -&gt; xif isc_info_implementation;		add: #insertCount -&gt; xif isc_info_insert_count;		add: #ipageErrors -&gt; xif isc_info_ipage_errors;		add: #license -&gt; xif isc_info_license;		add: #limbo -&gt; xif isc_info_limbo;		add: #logfile -&gt; xif isc_info_logfile;		add: #marks -&gt; xif isc_info_marks;		add: #maxMemory -&gt; xif isc_info_max_memory;		add: #maxMessage -&gt; xif isc_info_max_message;		add: #maxReceive -&gt; xif isc_info_max_receive;		add: #maxSend -&gt; xif isc_info_max_send;		add: #messageNumber -&gt; xif isc_info_message_number;		add: #messageSize -&gt; xif isc_info_message_size;		add: #noReserve -&gt; xif isc_info_no_reserve;		add: #numberMessages -&gt; xif isc_info_number_messages;		add: #numBuffers -&gt; xif isc_info_num_buffers;		add: #numWalBuffers -&gt; xif isc_info_num_wal_buffers;		add: #odsMinorVersion -&gt; xif isc_info_ods_minor_version;		add: #odsVersion -&gt; xif isc_info_ods_version;		add: #pageErrors -&gt; xif isc_info_page_errors;		add: #pageSize -&gt; xif isc_info_page_size;		add: #ppageErrors -&gt; xif isc_info_ppage_errors;		add: #purgeCount -&gt; xif isc_info_purge_count;		add: #reads -&gt; xif isc_info_reads;		add: #readIdxCount -&gt; xif isc_info_read_idx_count;		add: #readSeqCount -&gt; xif isc_info_read_seq_count;		add: #recordErrors -&gt; xif isc_info_record_errors;		add: #requestCost -&gt; xif isc_info_request_cost;		add: #reqActive -&gt; xif isc_info_req_active;		add: #reqDeleteCount -&gt; xif isc_info_req_delete_count;		add: #reqInactive -&gt; xif isc_info_req_inactive;		add: #reqInsertCount -&gt; xif isc_info_req_insert_count;		add: #reqReceive -&gt; xif isc_info_req_receive;		add: #reqSelect -&gt; xif isc_info_req_select;		add: #reqSelectCount -&gt; xif isc_info_req_select_count;		add: #reqSend -&gt; xif isc_info_req_send;		add: #reqSqlStall -&gt; xif isc_info_req_sql_stall;		add: #reqUpdateCount -&gt; xif isc_info_req_update_count;		add: #setPageBuffers -&gt; xif isc_info_set_page_buffers;		add: #state -&gt; xif isc_info_state;		add: #sweepInterval -&gt; xif isc_info_sweep_interval;		add: #tpageErrors -&gt; xif isc_info_tpage_errors;		add: #traId -&gt; xif isc_info_tra_id;		add: #truncated -&gt; xif isc_info_truncated;		add: #updateCount -&gt; xif isc_info_update_count;		add: #userNames -&gt; xif isc_info_user_names;		add: #version -&gt; xif isc_info_version;		add: #walAvgGrpcSize -&gt; xif isc_info_wal_avg_grpc_size;		add: #walAvgIoSize -&gt; xif isc_info_wal_avg_io_size;		add: #walBufferSize -&gt; xif isc_info_wal_buffer_size;		add: #walCkptLength -&gt; xif isc_info_wal_ckpt_length;		add: #walCurCkptInterval -&gt; xif isc_info_wal_cur_ckpt_interval;		add: #walGrpcWaitUsecs -&gt; xif isc_info_wal_grpc_wait_usecs;		add: #walNumCommits -&gt; xif isc_info_wal_num_commits;		add: #walNumIo -&gt; xif isc_info_wal_num_io;		add: #walPrvCkptFname -&gt; xif isc_info_wal_prv_ckpt_fname;		add: #walPrvCkptPoffset -&gt; xif isc_info_wal_prv_ckpt_poffset;		add: #walRecvCkptFname -&gt; xif isc_info_wal_recv_ckpt_fname;		add: #walRecvCkptPoffset -&gt; xif isc_info_wal_recv_ckpt_poffset;		add: #windowTurns -&gt; xif isc_info_window_turns;		add: #writes -&gt; xif isc_info_writes;		yourself</body><body package="IBEXDI" selector="initializeDatabaseParameterMap:">initializeDatabaseParameterMap: xif	(DatabaseParameterMap := IdentityDictionary new: 100)		add: #activateShadow -&gt; xif isc_dpb_activate_shadow;		add: #allocation -&gt; xif isc_dpb_allocation;		add: #beginLog -&gt; xif isc_dpb_begin_log;		add: #bufferLength -&gt; xif isc_dpb_buffer_length;		add: #cacheManager -&gt; xif isc_dpb_cache_manager;		add: #cddPathname -&gt; xif isc_dpb_cdd_pathname;		add: #connectTimeout -&gt; xif isc_dpb_connect_timeout;		add: #damaged -&gt; xif isc_dpb_damaged;		add: #dbkeyScope -&gt; xif isc_dpb_dbkey_scope;		add: #debug -&gt; xif isc_dpb_debug;		add: #deleteShadow -&gt; xif isc_dpb_delete_shadow;		add: #disableJournal -&gt; xif isc_dpb_disable_journal;		add: #disableWal -&gt; xif isc_dpb_disable_wal;		add: #dropWalfile -&gt; xif isc_dpb_drop_walfile;		add: #dummyPacketInterval -&gt; xif isc_dpb_dummy_packet_interval;		add: #enableJournal -&gt; xif isc_dpb_enable_journal;		add: #encryptKey -&gt; xif isc_dpb_encrypt_key;		add: #forceWrite -&gt; xif isc_dpb_force_write;		add: #garbageCollect -&gt; xif isc_dpb_garbage_collect;		add: #gbakAttach -&gt; xif isc_dpb_gbak_attach;		add: #gfixAttach -&gt; xif isc_dpb_gfix_attach;		add: #gstatAttach -&gt; xif isc_dpb_gstat_attach;		add: #ignore -&gt; xif isc_dpb_ignore;		add: #indices -&gt; xif isc_dpb_indices;		add: #interp -&gt; xif isc_dpb_interp;		add: #journal -&gt; xif isc_dpb_journal;		add: #lcCtype -&gt; xif isc_dpb_lc_ctype;		add: #lcMessages -&gt; xif isc_dpb_lc_messages;		add: #license -&gt; xif isc_dpb_license;		add: #noGarbageCollect -&gt; xif isc_dpb_no_garbage_collect;		add: #noReserve -&gt; xif isc_dpb_no_reserve;		add: #noUpdate -&gt; xif isc_dpb_no_update;		add: #numberOfUsers -&gt; xif isc_dpb_number_of_users;		add: #numBuffers -&gt; xif isc_dpb_num_buffers;		add: #oldDumpId -&gt; xif isc_dpb_old_dump_id;		add: #oldFile -&gt; xif isc_dpb_old_file;		add: #oldFileSize -&gt; xif isc_dpb_old_file_size;		add: #oldNumFiles -&gt; xif isc_dpb_old_num_files;		add: #oldStartFile -&gt; xif isc_dpb_old_start_file;		add: #oldStartPage -&gt; xif isc_dpb_old_start_page;		add: #oldStartSeqno -&gt; xif isc_dpb_old_start_seqno;		add: #online -&gt; xif isc_dpb_online;		add: #onlineDump -&gt; xif isc_dpb_online_dump;		add: #overwrite -&gt; xif isc_dpb_overwrite;		add: #pages -&gt; xif isc_dpb_pages;		add: #pageSize -&gt; xif isc_dpb_page_size;		add: #password -&gt; xif isc_dpb_password;		add: #passwordEnc -&gt; xif isc_dpb_password_enc;		add: #quitLog -&gt; xif isc_dpb_quit_log;		add: #records -&gt; xif isc_dpb_records;		add: #repair -&gt; xif isc_dpb_repair;		add: #reserved -&gt; xif isc_dpb_reserved;		add: #secAttach -&gt; xif isc_dpb_sec_attach;		add: #setDbReadonly -&gt; xif isc_dpb_set_db_readonly;		add: #setDbSQLDialect -&gt; xif isc_dpb_set_db_SQL_dialect;		add: #setDbSqlDialect -&gt; xif isc_dpb_set_db_sql_dialect;		add: #setPageBuffers -&gt; xif isc_dpb_set_page_buffers;		add: #shutdown -&gt; xif isc_dpb_shutdown;		add: #shutdownDelay -&gt; xif isc_dpb_shutdown_delay;		add: #shutAttachment -&gt; xif isc_dpb_shut_attachment;		add: #shutCache -&gt; xif isc_dpb_shut_cache;		add: #shutForce -&gt; xif isc_dpb_shut_force;		add: #shutTransaction -&gt; xif isc_dpb_shut_transaction;		add: #SQLDialect -&gt; xif isc_dpb_SQL_dialect;		add: #sqlDialect -&gt; xif isc_dpb_sql_dialect;		add: #sqlRoleName -&gt; xif isc_dpb_sql_role_name;		add: #sweep -&gt; xif isc_dpb_sweep;		add: #sweepInterval -&gt; xif isc_dpb_sweep_interval;		add: #sysUserName -&gt; xif isc_dpb_sys_user_name;		add: #sysUserNameEnc -&gt; xif isc_dpb_sys_user_name_enc;		add: #trace -&gt; xif isc_dpb_trace;		add: #transactions -&gt; xif isc_dpb_transactions;		add: #userName -&gt; xif isc_dpb_user_name;		add: #verify -&gt; xif isc_dpb_verify;		add: #walBackupDir -&gt; xif isc_dpb_wal_backup_dir;		add: #walBufsize -&gt; xif isc_dpb_wal_bufsize;		add: #walChkptlen -&gt; xif isc_dpb_wal_chkptlen;		add: #walGrpCmtWait -&gt; xif isc_dpb_wal_grp_cmt_wait;		add: #walNumbufs -&gt; xif isc_dpb_wal_numbufs;		add: #workingDirectory -&gt; xif isc_dpb_working_directory;		yourself</body><body package="IBEXDI" selector="initializeDefineCaches">initializeDefineCaches	"self fillDefineCaches.	self fillDefineCaches"</body><body package="IBEXDI" selector="initializeMaps">initializeMaps	"self initializeMaps"	| xif |	xif := self new.	self initializeDatabaseParameterMap: xif.	self initializeTransactionParameterMap: xif.	self initializeSecProtocolMap: xif.	self initializeDatabaseInfoMap: xif.</body><body package="IBEXDI" selector="initializeSecProtocolMap:">initializeSecProtocolMap: xif		(SecProtocolMap := IdentityDictionary new) 		add: #local -&gt; xif sec_protocol_local;		add: #tcpip -&gt; xif sec_protocol_tcpip;		add:#netbeui -&gt; xif sec_protocol_netbeui;		add: #spx -&gt; xif sec_protocol_spx.</body><body package="IBEXDI" selector="initializeTransactionParameterMap:">initializeTransactionParameterMap: xif	(TransactionParameterMap := IdentityDictionary new)		add: #autocommit -&gt; xif isc_tpb_autocommit;		add: #commitTime -&gt; xif isc_tpb_commit_time;		add: #concurrency -&gt; xif isc_tpb_concurrency;		add: #consistency -&gt; xif isc_tpb_consistency;		add: #exclusive -&gt; xif isc_tpb_exclusive;		add: #ignoreLimbo -&gt; xif isc_tpb_ignore_limbo;		add: #lockRead -&gt; xif isc_tpb_lock_read;		add: #lockWrite -&gt; xif isc_tpb_lock_write;		add: #nowait -&gt; xif isc_tpb_nowait;		add: #noWait -&gt; xif isc_tpb_nowait;		add: #noAutoUndo -&gt; xif isc_tpb_no_auto_undo;		add: #noRecVersion -&gt; xif isc_tpb_no_rec_version;		add: #protected -&gt; xif isc_tpb_protected;		add: #read -&gt; xif isc_tpb_read;		add: #readCommitted -&gt; xif isc_tpb_read_committed;		add: #recVersion -&gt; xif isc_tpb_rec_version;		add: #restartRequests -&gt; xif isc_tpb_restart_requests;		add: #shared -&gt; xif isc_tpb_shared;		add: #verbTime -&gt; xif isc_tpb_verb_time;		add: #wait -&gt; xif isc_tpb_wait;		add: #write -&gt; xif isc_tpb_write;		yourself</body><body package="IBEXDI" selector="secProtocolMap">secProtocolMap	^SecProtocolMap</body><body package="IBEXDI" selector="transactionParameterMap">transactionParameterMap	^TransactionParameterMap</body></methods><methods><class-id>Database.InterBaseDatabase</class-id> <category>private-accessing</category><body package="IBEXDI" selector="databaseHandle">databaseHandle	^databaseHandleHolder value</body><body package="IBEXDI" selector="databaseHandle:">databaseHandle: aCPointerOrNil	| dbh |	"We may need to free existing space."	(dbh := self databaseHandle ) notNil		ifTrue:	[ dbh free ].	self databaseHandleHolder value: aCPointerOrNil</body><body package="IBEXDI" selector="databaseHandleHolder">databaseHandleHolder	^databaseHandleHolder</body><body package="IBEXDI" selector="databaseHandleHolder:">databaseHandleHolder: aValueHolder	databaseHandleHolder := aValueHolder</body><body package="IBEXDI" selector="getStatusInfo">getStatusInfo		"^self getStatusInfo: self statusBuffer"	^self statusBuffer getStatusInfo</body><body package="IBEXDI" selector="statusBuffer">statusBuffer	^statusBufferHolder value</body><body package="IBEXDI" selector="statusBuffer:">statusBuffer: aCPointerOrNil	| sb |	"We may need to free existing space."	(sb := self statusBuffer) notNil		ifTrue:	[ sb free ].	self statusBufferHolder value: aCPointerOrNil</body><body package="IBEXDI" selector="statusBufferHolder">statusBufferHolder	^statusBufferHolder</body><body package="IBEXDI" selector="statusBufferHolder:">statusBufferHolder: aValueHolder	statusBufferHolder:= aValueHolder</body><body package="IBEXDI" selector="statusVector">statusVector	^self statusBuffer status</body><body package="IBEXDI" selector="transactions">transactions	^transactions</body><body package="IBEXDI" selector="transactions:">transactions: aDictionary	transactions := aDictionary</body></methods><methods><class-id>Database.InterBaseDatabase</class-id> <category>user management</category><body package="IBEXDI" selector="addUser:password:serverName:protocol:dbaUser:dbaPassword:">addUser: anUser password: aPassword serverName: aServer protocol: aProtocol dbaUser: aDbaUser dbaPassword: aDbaPassword	| d |	d := IdentityDictionary new.	d 	at: #user_name put: anUser;		at: #password put: aPassword.	aServer notNil ifTrue: [d add: #server -&gt; aServer].	aProtocol notNil ifTrue: [d add: #protocol -&gt; aProtocol].	aDbaUser notNil ifTrue: [d add: #dba_user_name -&gt; aDbaUser].	aDbaPassword notNil ifTrue: [d add: #dba_password -&gt; aDbaPassword].	self addUser: d</body><body package="IBEXDI" selector="dropUser:serverName:protocol:dbaUser:dbaPassword:">dropUser: anUser serverName: aServer protocol: aProtocol dbaUser: aDbaUser dbaPassword: aDbaPassword	| d |	d := IdentityDictionary new.	d 	at: #user_name put: anUser.	aServer notNil ifTrue: [d add: #server -&gt; aServer].	aProtocol notNil ifTrue: [d add: #protocol -&gt; aProtocol].	aDbaUser notNil ifTrue: [d add: #dba_user_name -&gt; aDbaUser].	aDbaPassword notNil ifTrue: [d add: #dba_password -&gt; aDbaPassword].	self dropUser: d</body></methods><methods><class-id>Database.InterBaseDatabase</class-id> <category>private-library calls</category><body package="IBEXDI" selector="acquireExternal:">acquireExternal: aPassword 	"Acquire the external resources involved with a connection"	| uid pwd env xif dbh dpb pEnv rc dpbDictionary bytes |	uid := self username.	[uid isString] 		whileFalse: [uid := self class requiredUsernameSignal raiseRequest].	pwd := aPassword.	[pwd isString] 		whileFalse: [pwd := self class requiredPasswordSignal raiseRequest].	(env := self environment) isNil 		ifTrue: [env := self class defaultEnvironment].	[env isString] 		whileFalse: [env := self class requiredEnvironmentSignal raiseRequest].	env := self class fakeConnectionClass mapLogical: env.	xif := self class xif.		[	[dbh := xif isc_db_handle perform: xif mallocSelector with: 1.	dbh contents: 0.	"Set connect parameters"	(dpbDictionary := self databaseParameters)		at: #userName put: uid;		at: #password put: pwd;		yourself.	self charSet == nil 		ifFalse: [dpbDictionary at: #lcCtype put: self charSet].	self role == nil ifFalse: [dpbDictionary at: #sqlRoleName put: self role].	dpb := self setDPB: dpbDictionary.	self statusBuffer: (self class statusBufferClass forDatabase: self).	pEnv := (bytes := env asByteArrayEncoding: self encoding) 				perform: xif copyToHeapSelector.	rc := xif 				isc_attach_database: self statusBuffer status				with: bytes size				with: pEnv				with: dbh				with: dpb size				with: dpb] 			ensure: [pEnv notNil ifTrue: [pEnv freePointer]].	self databaseHandle: dbh.	traceLevel &gt;= 1 		ifTrue: 			[(self traceStream)				print: rc;				nextPutAll: ' = isc_attach_database( status = ';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', db_name = ';				nextPutAll: env;				nextPutAll: ', db_handle = ';				nextPutAll: (dbh referentAddress printStringRadix: 16);				nextPutAll: ', username = ';				nextPutAll: uid;				nextPut: $).			self class trace: self emitTrace].	rc ~= 0 		ifTrue: 			[| errs |			errs := self getStatusInfo.			^self class unableToConnectToSQLserverSignal raiseWith: errs				errorString: errs first dbmsErrorString]] 			ifCurtailed: 				[self databaseHandle: nil.				self statusBuffer: nil]</body><body package="IBEXDI" selector="beginExternal">beginExternal	^self shouldNotImplement</body><body package="IBEXDI" selector="commitExternal">commitExternal	^self shouldNotImplement</body><body package="IBEXDI" selector="createDatabase:">createDatabase: aCreateStatement 	"Acquire the external resources involved with a connection"	| xif dbh trh status rc stmt |	xif := self class xif.		["Begin unwind protection (level 1)"	dbh := xif isc_db_handle perform: xif mallocSelector with: 1.	dbh contents: 0.	trh := xif isc_tr_handle perform: xif mallocSelector with: 1.	trh contents: 0.	status := self class statusBufferClass forDatabase: self.	stmt := aCreateStatement asByteArrayEncoding: self encoding.	rc := xif 				isc_dsql_execute_immediate: status statusBuffer				with: dbh				with: trh				with: stmt size				with: stmt				with: self dialect				with: nil.	traceLevel &gt;= 1 		ifTrue: 			[(self traceStream)				print: rc;				nextPutAll: ' = _create_database_(';				nextPutAll: aCreateStatement;				nextPut: $).			self class trace: self emitTrace].	rc ~= 0 		ifTrue: 			[| errs |			errs := status getStatusInfo.			^self class externalDatabaseErrorSignal raiseWith: errs				errorString: errs first dbmsErrorString].	"rc:=xif isc_commit_transaction: status with: trh.	(traceLevel &gt;= 1) ifTrue:		[(self traceStream) nextPutAll: 'Database created!'.		self class trace: self emitTrace].	rc~=0 ifTrue: [| errs |			errs := self getStatusInfo: status.			^self class externalDatabaseErrorSignal raiseWith: errs]."	rc := xif isc_detach_database: status statusBuffer with: dbh.	rc ~= 0 		ifTrue: 			[| errs |			errs := status getStatusInfo.			^self class externalDatabaseErrorSignal raiseWith: errs				errorString: errs first dbmsErrorString]] 			ensure: 				[dbh notNil ifTrue: [dbh freePointer].				trh notNil ifTrue: [trh freePointer].				status notNil ifTrue: [status free]]</body><body package="IBEXDI" selector="dismissExternal">dismissExternal	"Release the external resources."	| rc |		["self databaseHandle isNil ifTrue: [^self]."	self transactions do: [:t | t finishTransaction].	rc := self class xif isc_detach_database: self statusBuffer status				with: self databaseHandle.	traceLevel &gt;= 1 		ifTrue: 			[(self traceStream)				print: rc;				nextPutAll: ' = isc_detach_database( status = ';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', db_handle = ';				nextPutAll: (self databaseHandle referentAddress printStringRadix: 16);				nextPutAll: ' )'.			self class trace: self emitTrace].	rc == 0 		ifFalse: 			[| errs |			errs := self getStatusInfo.			^self class unableToDisconnectSignal raiseRequestWith: errs				errorString: errs first dbmsErrorString]] 			ensure: 				[self databaseHandle: nil.				self statusBuffer: nil]</body><body package="IBEXDI" selector="dropDatabase">dropDatabase	| xif rc |	xif := self class xif.	rc := xif isc_drop_database: self statusVector with: self databaseHandle.	traceLevel &gt;= 1 		ifTrue: 			[(self traceStream)				print: rc;				nextPutAll: ' = isc_drop_database:(';				nextPutAll: self statusBuffer traceString;				nextPut: $,;				nextPutAll: (self databaseHandle referentAddress printStringRadix: 16);				nextPut: $).			self class trace: self emitTrace].	rc ~= 0 		ifTrue: 			[| errs |			errs := self getStatusInfo.			^self class externalDatabaseErrorSignal raiseWith: errs				errorString: errs first dbmsErrorString].	self freePointerHolder: self databaseHandleHolder</body><body package="IBEXDI" selector="installExternal">installExternal	"Perform return from snapshot processing for this connection."	super installExternal.	self databaseHandle: nil.	self statusBuffer: nil</body><body package="IBEXDI" selector="rollbackExternal">rollbackExternal	^self shouldNotImplement</body><body package="IBEXDI" selector="setDPB:">setDPB: aDictionary 	"creating and populating database parameters buffer"	| dpb xif map |	xif := self class xif.	dpb := (ByteArray new: 255) writeStream.	map := xif class databaseParameterMap.	dpb nextPut: xif isc_dpb_version1.	aDictionary keysAndValuesDo: 			[:key :val | 			dpb nextPut: (map at: key						ifAbsent: 							[^self class invalidDatabaseParameterSignal raiseWith: 'Invalid transaction parameter: ', key asString]).			key == #sweep 				ifTrue: 					[dpb						nextPut: 1;						nextPut: xif isc_dpb_records]				ifFalse: 					[val isString 						ifTrue: 							[dpb nextPut: val size.							dpb nextPutAll: val asByteArray]						ifFalse: 							[val isInteger 								ifTrue: 									[val &lt; 255 										ifTrue: 											[dpb												nextPut: 1;												nextPut: val]										ifFalse: 											[dpb												nextPut: 4;												nextPut: (val digitAt: 1);												nextPut: (val digitAt: 2);												nextPut: (val digitAt: 3);												nextPut: (val digitAt: 4)]]								ifFalse: 									[val isNil 										ifTrue: 											[dpb nextPut: 1.											dpb nextPut: 0]										ifFalse: 											[^self class invalidDatabaseParameterSignal raiseWith: 'Invalid transaction parameter: ', key asString]]]]].	^dpb contents</body></methods><methods><class-id>Database.InterBaseDatabase</class-id> <category>accessing</category><body package="IBEXDI" selector="charSet">charSet	^charSet</body><body package="IBEXDI" selector="charSet:">charSet: aString	charSet:=aString</body><body package="IBEXDI" selector="databaseParameters">databaseParameters	^databaseParameters</body><body package="IBEXDI" selector="databaseParameters:">databaseParameters: aDictionary	databaseParameters := aDictionary</body><body package="IBEXDI" selector="dialect">dialect	"Answer SQL dialect"	^dialect</body><body package="IBEXDI" selector="dialect:">dialect: aNumber	dialect := aNumber</body><body package="IBEXDI" selector="getDatabaseInfo:">getDatabaseInfo: arrayOfItems 	"Answer database info items, currently only numeric result items valid (e.g. numBuffers,  pageSize, maxMemory etc.).	Need more work. "	| rc resBuffer xif requestItems map p item length itemValue resultItems |	xif := self class xif.	map := xif class databaseInfoMap.	requestItems := ByteArray withAll: (arrayOfItems 						collect: [:x | map at: x ifAbsent: [self class externalDatabaseErrorSignal raise]]).		[resBuffer := CIntegerType unsignedChar perform: xif mallocSelector				with: 1024.	rc := xif 				isc_database_info: self statusVector				with: self databaseHandle				with: requestItems size				with: requestItems				with: 1024				with: resBuffer.	rc = 0 		ifFalse: 			[| errs |			errs := self getStatusInfo.			^self class externalDatabaseErrorSignal raiseWith: errs				errorString: errs first dbmsErrorString].	p := resBuffer copy.	resultItems := Dictionary new: requestItems size.	[(item := p at: 0) ~= xif isc_info_end] whileTrue: 			[p increment.			length := xif isc_vax_integer: p with: 2.			p += 2.			length &gt; 4 				ifFalse: [itemValue := xif isc_vax_integer: p with: length]				ifTrue: [itemValue := #currentlyNotSupported].			resultItems add: (map keyAtValue: item ifAbsent: [item]) -&gt; itemValue.			p += length]] 			ensure: [resBuffer notNil ifTrue: [resBuffer free]].	^resultItems</body><body package="IBEXDI" selector="role">role	^role</body><body package="IBEXDI" selector="role:">role: aString	role:=aString</body></methods><methods><class-id>Database.InterBaseDatabase</class-id> <category>initialize-release</category><body package="IBEXDI" selector="initialize">initialize	super initialize.	databaseHandleHolder:=nil asValue.	statusBufferHolder:=nil asValue.	dialect:=self class defaultDialect.	databaseParameters := IdentityDictionary new.	transactions := Set new.</body></methods><methods><class-id>Database.InterBaseDatabase</class-id> <category>private-finalization</category><body package="IBEXDI" selector="executor">executor	| ex |	ex := super executor.		ex statusBufferHolder: self statusBufferHolder.	ex databaseHandleHolder: self databaseHandleHolder.	ex transactions: self transactions.	^ex</body><body package="IBEXDI" selector="finalizeExternal">finalizeExternal	(self databaseHandle isNil or: [self databaseHandle referentAddress isNil]) ifTrue: [ ^self ].	"self dismissExternal."	super finalizeExternal</body><body package="IBEXDI" selector="key">key	"Key value to use when inserting receiver into a handle registry. This value	needs to be unique within the registry."	^self databaseHandleHolder</body></methods><methods><class-id>Database.InterBaseDatabase</class-id> <category>private-participation</category><body package="IBEXDI" selector="addConnection:">addConnection: conn 	"need more work"	self addParticipant: conn.	participantsSemaphore critical: [transactions add: conn transaction]</body><body package="IBEXDI" selector="checkDisconnect">checkDisconnect	self transactions size &gt; 0 ifFalse: [self disconnect]</body><body package="IBEXDI" selector="removeConnection:">removeConnection: conn 	"need more work"	| tr |	tr := conn transaction.	self removeParticipant: conn.	self participantsDetect: [:c | c transaction = tr]		ifNone: 			[transactions remove: tr ifAbsent: []].	self checkDisconnect</body></methods><methods><class-id>Database.InterBaseDatabase</class-id> <category>connections</category><body package="IBEXDI" selector="getConnection">getConnection	"Answer an instance of the driver's subclass of ExternalDatabaseConnection."	self isConnected ifFalse:		[ self class connectionNotOpenSignal raise ].	^self class fakeConnectionClass newForDatabase: self</body></methods><methods><class-id>Database.InterBaseDatabase</class-id> <category>printing</category><body package="IBEXDI" selector="printOn:">printOn: aStream	super printOn: aStream.	(self databaseHandle isNil) ifFalse:		[ aStream			nextPutAll: '( db_handle=';			nextPutAll: (self databaseHandle referentAddress printStringRadix: 16);			nextPutAll: ' )' ]</body></methods><methods><class-id>Database.InterBaseDatabase</class-id> <category>private-user management</category><body package="IBEXDI" selector="addUser:">addUser: userDictionary	self user: userDictionary action: #isc_add_user:with:</body><body package="IBEXDI" selector="dropUser:">dropUser: userDictionary	self user: userDictionary action: #isc_delete_user:with:</body><body package="IBEXDI" selector="modifyUser:">modifyUser: userDictionary	self user: userDictionary action: #isc_modify_user:with:</body><body package="IBEXDI" selector="user:action:">user: userDictionary action: aSelector 	| xif secData secFlags server val dbaUser dbaPassword rc userName passWord status |	xif := self class xif.		[secData := xif USER_SEC_DATA perform: xif mallocSelector with: 1.	secFlags := 0.	userName := (userDictionary at: #user_name ifAbsent: []) copyToHeap.	secData memberAt: #user_name put: userName.	(val := userDictionary at: #password ifAbsent: []) notNil 		ifTrue: 			[passWord := val copyToHeap.			secFlags := secFlags bitOr: xif sec_password_spec.			secData memberAt: #password put: passWord].	(val := userDictionary at: #server ifAbsent: nil) notNil 		ifTrue: 			[server := val copyToHeap.			secFlags := secFlags bitOr: xif sec_server_spec.			secData memberAt: #server put: server].	val := userDictionary at: #protocol ifAbsent: [#local].	val := xif class secProtocolMap at: val ifAbsent: [].	secData memberAt: #protocol put: val.	(val := userDictionary at: #dba_user_name ifAbsent: nil) notNil 		ifTrue: 			[dbaUser := val copyToHeap.			secFlags := secFlags bitOr: xif sec_dba_user_name_spec.			secData memberAt: #dba_user_name put: dbaUser].	(val := userDictionary at: #dba_password ifAbsent: nil) notNil 		ifTrue: 			[dbaPassword := val copyToHeap.			secFlags := secFlags bitOr: xif sec_dba_password_spec.			secData memberAt: #dba_password put: dbaPassword].	secData memberAt: #sec_flags put: secFlags.	status := self class statusBufferClass forDatabase: self.	rc := xif 				perform: aSelector				with: status statusBuffer				with: secData.	rc == 0 		ifFalse: 			[| errs |			errs := status getStatusInfo.			self class externalDatabaseErrorSignal raiseWith: errs				errorString: errs first dbmsErrorString]] 			ensure: 				[secData notNil ifTrue: [secData freePointer].				passWord notNil ifTrue: [passWord freePointer].				userName notNil ifTrue: [userName freePointer].				server notNil ifTrue: [server freePointer].				dbaUser notNil ifTrue: [dbaUser freePointer].				dbaPassword notNil ifTrue: [dbaPassword freePointer].				status notNil ifTrue: [status free]]</body></methods><methods><class-id>Database.InterBaseDatabase</class-id> <category>private-resources</category><body package="IBEXDI" selector="freePointerHolder:">freePointerHolder: aValueHolder	aValueHolder value notNil ifTrue: [		aValueHolder value freePointer.		aValueHolder value: nil		]</body></methods><methods><class-id>Database.InterBaseDatabase class</class-id> <category>signal constants</category><body package="IBEXDI" selector="invalidDatabaseParameterSignal">invalidDatabaseParameterSignal	"Answer the signal used to indicate that a transaction parameter was invalid."	^InterBaseDatabaseException notifierString: 'Invalid database parameter.'</body><body package="IBEXDI" selector="invalidTransactionParameterSignal">invalidTransactionParameterSignal	"Answer the signal used to indicate that a transaction parameter was invalid."	^InterBaseDatabaseException 		notifierString: 'Invalid transaction parameter.'</body><body package="IBEXDI" selector="missingBindVariableSignal">missingBindVariableSignal	"Answer the signal used to indicate that a bind variable is missing."	^InterBaseDatabaseException notifierString: 'Missing bind variable.'</body></methods><methods><class-id>Database.InterBaseDatabase class</class-id> <category>private-activation</category><body package="IBEXDI" selector="determinePlatformType">determinePlatformType	"Answer a symbol representing the current platform type."	"ExternalInterface must complete its #returnFromSnapshot processing before	this method can be safely invoked."	| platformArray platformSymbol osNameString |	platformArray := ExternalInterface currentPlatform.	platformSymbol := platformArray at: 1.	osNameString := platformArray at: 2.	#unix == platformSymbol		ifTrue: [^self determineUnixPlatformFrom: osNameString].	#win32 == platformSymbol		ifTrue: [^#nt].	^#unknown.</body><body package="IBEXDI" selector="determineUnixPlatformFrom:">determineUnixPlatformFrom: unixOSNameString	"Answer a symbol representing the current platform type."	"ExternalInterface must complete its #returnFromSnapshot processing before	this method can be safely invoked."	"Digital Unix ^#alpha_unix	HP Unix ^#hp_unix	IBM Aix ^#aix_unix			Sun Solaris ^#sun5_unix	Sun SunOS ^#sun4_unix        i386 Linux  ^#linux_i386_unix"	| tokens |	tokens := unixOSNameString tokensBasedOn: Character space.	"(tokens includes: 'osf1') ifTrue: [^#alpha_unix].	(tokens includes: 'hp-ux') ifTrue: [^#hp_unix].	(tokens includes: 'aix') ifTrue: [^#aix_unix].	(tokens includes: 'solaris') ifTrue: [^#sun5_unix].	((tokens includes: 'bsd') and: [tokens includes: 'sun']) ifTrue: [^#sun4_unix]."	((tokens includes: 'I386') and: [tokens includes: 'linux']) ifTrue:[^#linux_i386_unix].	^#unknown</body><body package="IBEXDI" selector="install">install	self xif: nil.	"InterBaseBuffer install."	self statusBufferClass releaseGlobalData.	self returnFromSnapshot</body></methods><methods><class-id>Database.InterBaseDatabase class</class-id> <category>accessing</category><body package="IBEXDI" selector="defaultDialect">defaultDialect	^defaultDialect</body><body package="IBEXDI" selector="kind">kind	^nil</body><body package="IBEXDI" selector="version">version	^'InterBase/Firebird Connect - Release 1.2 '</body></methods><methods><class-id>Database.InterBaseDatabase class</class-id> <category>private-accessing</category><body package="IBEXDI" selector="columnDescriptionClass">columnDescriptionClass	"Answer the class to use for column description objects associated with receiver."	^InterBaseColumnDescription</body><body package="IBEXDI" selector="fakeConnectionClass">fakeConnectionClass	^InterBaseConnection</body><body package="IBEXDI" selector="interfaceClass">interfaceClass	"Answer the class to use as the InterbaseInterface for the current platform."	| interfaceClassName |	interfaceClassName := xifMap at: self platformType ifAbsent: [nil].	^self environment at: interfaceClassName ifAbsent: [nil].</body><body package="IBEXDI" selector="sessionClass">sessionClass	^InterBaseSession</body><body package="IBEXDI" selector="statusBufferClass">statusBufferClass	^IBStatusBuffer</body><body package="IBEXDI" selector="transactionClass">transactionClass	^IBTransaction</body><body package="IBEXDI" selector="xif">xif	"Answer the ExternalInterface subclass instance to use." 	xif isNil ifTrue:		[ self initializeInterBaseInterface ].	^xif</body></methods><methods><class-id>Database.InterBaseDatabase class</class-id> <category>activation</category><body package="IBEXDI" selector="pause">pause	"Direct the suspension of all activity."	self quiesce.		^self statusBufferClass releaseGlobalData.</body><body package="IBEXDI" selector="resume">resume	"Direct the resumption of all suspended activity."	^self activate</body></methods><methods><class-id>Database.InterBaseDatabase class</class-id> <category>class initialization</category><body package="IBEXDI" selector="defaultDialect:">defaultDialect: aNumber 	defaultDialect := aNumber</body><body package="IBEXDI" selector="initialize">initialize	"InterbaseDatabase initialize"	self xif: nil.	self initRegistry.	self initializeInterfaceMapping.	self defaultDialect: 3.	signalMap := IdentityDictionary new.</body><body package="IBEXDI" selector="initializeInterBaseInterface">initializeInterBaseInterface	"Reset xif with the right interface class based on our platform."	" self initializeInterBaseInterface "	|  xifClass |	xifClass := self interfaceClass.	self xif: (xifClass notNil ifTrue: [ xifClass new ] ifFalse: [ nil ]).	xif isNil ifTrue:		[ ^Dialog warn: ('The Database Connect for Interbase/Firebird is not correctly installed.') withCRs ].</body><body package="IBEXDI" selector="initializeInterfaceMapping">initializeInterfaceMapping	"InterBaseDatabase initializeInterfaceMapping"	xifMap := IdentityDictionary new.	xifMap at: #win95 put: #InterBaseWin32Interface.	xifMap at: #nt put: #InterBaseWin32Interface.	xifMap at: #linux_i386_unix put: #InterBaseLinuxInterface.	xifMap at: #unknown put: #InterBaseInterface.</body><body package="IBEXDI" selector="releaseInterbaseInterface">releaseInterbaseInterface	" self releaseInterbaseInterface "	|  xifClass |	xifClass := self interfaceClass.	xifClass unloadLibraries.</body></methods><methods><class-id>Database.InterBaseDatabase class</class-id> <category>private-registry</category><body package="IBEXDI" selector="registry">registry	^RegisteredInterbaseDatabases</body><body package="IBEXDI" selector="registry:">registry: aCollection	RegisteredInterbaseDatabases := aCollection</body></methods><methods><class-id>Database.InterBaseBuffer</class-id> <category>private-accessing</category><body package="IBEXDI" selector="connection:">connection: aConnection</body><body package="IBEXDI" selector="getSelector">getSelector	^getSelector</body><body package="IBEXDI" selector="getSelector:">getSelector: aValue	getSelector := aValue</body><body package="IBEXDI" selector="indicatorPointer">indicatorPointer	^indicatorPointer</body><body package="IBEXDI" selector="indicatorPointer:">indicatorPointer: aValue	indicatorPointer := aValue</body><body package="IBEXDI" selector="nullsPossible">nullsPossible	^nullsPossible</body><body package="IBEXDI" selector="nullsPossible:">nullsPossible: aValue	nullsPossible := aValue</body><body package="IBEXDI" selector="scale">scale	^scale</body><body package="IBEXDI" selector="scale:">scale: aValue	scale := aValue</body><body package="IBEXDI" selector="setSelector">setSelector	^setSelector</body><body package="IBEXDI" selector="setSelector:">setSelector: aValue	setSelector := aValue</body><body package="IBEXDI" selector="statusBuffer">statusBuffer</body><body package="IBEXDI" selector="statusVector">statusVector	^self statusBuffer status</body></methods><methods><class-id>Database.InterBaseBuffer</class-id> <category>private-data accessing</category><body package="IBEXDI" selector="getArray">getArray	^self getNumber</body><body package="IBEXDI" selector="getDate">getDate"(Date newDay: 17 monthNumber: 11 year: 1858) asDays + 15385 == 0 - Interbase base date value"	^Date fromDays: self getNumber - 15385.</body><body package="IBEXDI" selector="getFetchedData">getFetchedData</body><body package="IBEXDI" selector="getInteger">getInteger	| v |	v := bufferPointer at: 0.	^(scale &lt; 0 and: [v isInteger])		ifTrue: [FixedPoint				numerator: v				denominator: (10 raisedTo: 0-scale)				scale: 0-scale]		ifFalse: [v]</body><body package="IBEXDI" selector="getNumber">getNumber	^bufferPointer at: 0.</body><body package="IBEXDI" selector="getString">getString	"Answer a string pointed to by bufferPointer."	| bytesInString ba |	bytesInString := elementSize-1.	ba := ByteArray new: bytesInString.	bufferPointer		copyAt: 0		to: ba		size: bytesInString		startingAt: 1.	^ba asStringEncoding: self encoding	"^bufferPointer copyCStringFromHeap" "look as not null-terminated ?? "</body><body package="IBEXDI" selector="getTime">getTime	^Time fromSeconds: self getNumber // 10000</body><body package="IBEXDI" selector="getTimestamp">getTimestamp	| ms |	^(Timestamp fromDate: (Date fromDays: (bufferPointer at: 0 ) - 15385) 		andTime:(Time fromSeconds: (ms :=bufferPointer at: 1) // 10000)) millisecond: (ms rem: 10000) // 10</body><body package="IBEXDI" selector="getVString">getVString	"Answer a string as described in the structure pointed to by bufferPointer."	| bp bytesInString ba |	bp := bufferPointer.	"length is first element of structured buffer "	bytesInString := self class connectionClass xif isc_vax_integer: ("bp refMemberAt: #length" varSizePointer ) with: 2.	ba := ByteArray new: bytesInString.	bp		copyAt: 2		to: ba		size: bytesInString		startingAt: 1.	^ba asStringEncoding: self encoding</body><body package="IBEXDI" selector="putDate:">putDate: aDate"(Date newDay: 17 monthNumber: 11 year: 1858) asDays + 15385 == 0 - Interbase base date value"	bufferPointer contents: (aDate asDays+ 15385)</body><body package="IBEXDI" selector="putFixedPoint:">putFixedPoint: aNumber" dialect 3 only "	scale := 0 - aNumber scale.	self putNumber: aNumber numerator * (10 raisedTo: aNumber scale) // aNumber denominator</body><body package="IBEXDI" selector="putNumber:">putNumber: aNumber	bufferPointer contents: aNumber</body><body package="IBEXDI" selector="putString:">putString: string		| sClass ba size bp |	(sClass := string class) == ByteArray		ifTrue:			[ ba := string ]		ifFalse:			[ | str |			sClass == Text				ifTrue:					[ str := string string ]				ifFalse:					[ sClass == GapString						ifTrue: 	[ str := string compress string ]						ifFalse:	[ str := string ] ].			ba := ByteArray fromString: str encoding: self encoding ].	" Ensure size/type compatibility "	((size := ba size) &gt; elementSize) ifTrue: [self rebindString:  string].	bp := bufferPointer.	" length is first in structured buffer "	bp memberAt: #length put: size.	bp		copyAt: 2		from: ba		size: size		startingAt: 1</body><body package="IBEXDI" selector="putTime:">putTime: aTime	bufferPointer contents: (aTime asSeconds * 10000)</body><body package="IBEXDI" selector="putTimestamp:">putTimestamp: aTimestamp	bufferPointer at: 0 put: (aTimestamp asDate asDays+ 15385).	bufferPointer at: 1 put: (aTimestamp asTime asSeconds * 10000  + (aTimestamp millisecond * 10)).</body><body package="IBEXDI" selector="putVString:">putVString: string		| sClass ba size bp |	(string ibConversion) == #ByteArray		ifTrue:			[ ba := string ]		ifFalse:			[ | str |			sClass := string class.			sClass == Text				ifTrue:					[ str := string string ]				ifFalse:					[ sClass == GapString						ifTrue: 	[ str := string compress string ]						ifFalse:	[ str := string ] ].			ba := ByteArray fromString: str encoding: self encoding ].	" Ensure size/type compatibility "	((size := ba size) &gt; elementSize) ifTrue: [self rebindString:  string].	bp := bufferPointer.	" length is first in structured buffer "	bp memberAt: #length put: size.	bp		copyAt: 2		from: ba		size: size		startingAt: 1</body></methods><methods><class-id>Database.InterBaseBuffer</class-id> <category>private-allocation</category><body package="IBEXDI" selector="allocScalarBufferType:">allocScalarBufferType: thePointerType	| address |	address := thePointerType 			primMalloc: elementSize			pointerKind: thePointerType kind.	^address == nil		ifTrue:		[ nil ]		ifFalse:	[ CPointer new newDatum: address ofType: thePointerType ]</body><body package="IBEXDI" selector="allocStructuredBuffer">allocStructuredBuffer	| newStruct thePointerType address ptr |	"Create structure on the fly"	newStruct := self structVCharBuffer: self elementSize.	thePointerType := newStruct pointerType.	address := thePointerType 					primMalloc: newStruct sizeof					pointerKind: thePointerType kind.	address == nil		ifTrue:		[ ^nil ]		ifFalse:	[ ptr := CCompositePointer new newDatum: address ofType: thePointerType ].	varSizePointer := ptr refMemberAt: #length.	ptr memberAt: #length put: (elementSize).	^ptr</body><body package="IBEXDI" selector="rebindString:">rebindString: string	string size &gt; 32765 ifTrue: [^self class connectionClass unableToBindSignal raise].	bufferPointer == nil ifFalse: [ bufferPointer freePointer ].	elementSize:=self class sizeForString: string.	bufferPointer := self allocStructuredBuffer</body><body package="IBEXDI" selector="structVCharBuffer:">structVCharBuffer: varSize	| newStruct |	"Create a structure on the fly"	newStruct := CCompositeType new beStructure.	newStruct at: #length put: 0 -&gt; CIntegerType unsignedShort.	newStruct at: #array put: 1 -&gt; (CArrayType defaultPointer			referentType: CIntegerType unsignedChar;			numElements: varSize).	^ newStruct align.</body></methods><methods><class-id>Database.InterBaseBuffer</class-id> <category>initialize-release</category><body package="IBEXDI" selector="elementSize:count:databaseType:">elementSize: anElementSize count: aCount databaseType: aDatabaseType	^self shouldNotImplement</body><body package="IBEXDI" selector="elementSize:databaseType:">elementSize: anElementSize databaseType: aDatabaseType	^ super 		elementSize: anElementSize		count: 0		" no bulk parameters "		databaseType: aDatabaseType</body></methods><methods><class-id>Database.InterBaseBuffer</class-id> <category>testing</category><body package="IBEXDI" selector="isNull">isNull	^nullsPossible and: [(indicatorPointer contents) == -1]</body></methods><methods><class-id>Database.InterBaseBuffer</class-id> <category>allocation</category><body package="IBEXDI" selector="free">free	"Free the external resources held by this buffer."	bufferPointer == nil ifFalse: [ bufferPointer freePointer ].	bufferPointer := nil.	indicatorPointer == nil ifFalse: [indicatorPointer freePointer].	indicatorPointer := nil.</body><body package="IBEXDI" selector="mallocBuffer">mallocBuffer	indicatorPointer := CIntegerType short malloc: 1.	indicatorPointer contents: 0.	(self databaseType == 448 or: [self databaseType == 449]) ifTrue: [ "SQL_VARYING"		^ self allocStructuredBuffer ] 	ifFalse:[^self allocScalarBufferType: (InterbasePointerTypeMap at: (databaseType bitAnd: -2) ifAbsent: [^nil])].</body><body package="IBEXDI" selector="mallocForParameter">mallocForParameter	[bufferPointer := self mallocBuffer	] 		ifCurtailed: [ self free ].	setSelector := PutSelectorMap at: (databaseType bitAnd: -2) ifAbsent: [].</body><body package="IBEXDI" selector="mallocForRowBuffer">mallocForRowBuffer	[bufferPointer := self mallocBuffer	] 		ifCurtailed: [ self free ].	getSelector := GetSelectorMap at: (databaseType bitAnd: -2) ifAbsent: [].</body></methods><methods><class-id>Database.InterBaseBuffer</class-id> <category>accessing</category><body package="IBEXDI" selector="at:">at: anIndex	"Answer the element in the buffer at anIndex."		^self isNull		ifTrue:  [ ^nil ]		ifFalse: [ self perform: getSelector]</body><body package="IBEXDI" selector="at:put:">at: anIndex put: aValue	"Set NULL, or store aValue at appropriate index in the receiver."	"No bulk parameters - ignore anIndex"	aValue isNil ifTrue: [ ^ self setNull ].	self setNotNull.	(self canBind: aValue)		ifFalse: [ ^ self class connectionClass unableToBindSignal raise ].	self perform: self setSelector with: aValue.</body><body package="IBEXDI" selector="setNotNull">setNotNull	indicatorPointer contents: 0</body><body package="IBEXDI" selector="setNull">setNull	indicatorPointer contents: -1</body></methods><methods><class-id>Database.InterBaseBuffer</class-id> <category>private-binding</category><body package="IBEXDI" selector="bindForInput">bindForInput</body><body package="IBEXDI" selector="bindForOutput">bindForOutput</body></methods><methods><class-id>Database.InterBaseBuffer</class-id> <category>private-testing</category><body package="IBEXDI" selector="canBind:">canBind: aValue 	"Answer whether or not the current hostvarType can accept aValue"	^(self databaseType bitAnd: -2 ) == ((self class databaseTypeFor: aValue ibConversion ) bitAnd: -2)</body></methods><methods><class-id>Database.InterBaseBuffer class</class-id> <category>fileIn/Out</category><body package="IBEXDI" selector="prerequisitesForLoading">prerequisitesForLoading	"InterbaseBuffer requires InterbaseInterface and subclasses to be initialized."	^super prerequisitesForLoading		addAll: InterBaseInterface withAllSubclasses;			addLast: InterBaseDatabase;		yourself</body></methods><methods><class-id>Database.InterBaseBuffer class</class-id> <category>instance creation</category><body package="IBEXDI" selector="databaseTypeFor:">databaseTypeFor: aType	^SmalltalkToInterbaseTypeMap at: aType ifAbsent: []</body><body package="IBEXDI" selector="defaultSizeFor:type:">defaultSizeFor: value type: aType	| sz |	aType ==  449 "SQL_VARYING+1" ifTrue: [^self sizeForString: value ].	sz := (DefaultFixedSizeMap at: (aType bitAnd: -2) ifAbsent: [nil]).	^sz</body><body package="IBEXDI" selector="newFor:type:size:session:">newFor: value type: type size: size session: session	" For input parameters, allocate buffer based on value attributes"	| aType aSize dbType |	value class == InterBaseArray ifTrue: [^InterBaseArrayBuffer newFor: value type: type size: size session: session].	aType := type isNil 		ifTrue: [ value ibConversion ]		ifFalse: [ type ] .	(dbType := self databaseTypeFor: aType) isNil		ifTrue: [ ^ self connectionClass unableToBindSignal raise ].	aSize := size isNil		ifTrue: [ self defaultSizeFor: value type: dbType]		ifFalse: [ size ].	^((aType == #LargeString or: [aType == #LargeByteArray]) ifTrue: [InterBaseLargeBuffer ] ifFalse:[self]) new		elementSize: aSize databaseType: dbType;		scale: 0;		nullsPossible: true;"		setSelector: (PutSelectorMap at: aType  ifAbsent: []);"		connection: session connection ;		yourself.</body><body package="IBEXDI" selector="newOn:session:">newOn: descr session: aSession	| sz |	descr isBlob ifTrue: [^InterBaseLargeBuffer newOn: descr session: aSession].	descr isArray ifTrue: [^InterBaseArrayBuffer newOn: descr session: aSession].	sz := (descr ibType == 452 or: [descr ibType == 453]) ifTrue: [descr precision + 1] ifFalse: [descr precision]. "SQL_TEXT null terminated"	^super new		elementSize: sz databaseType: descr ibType;		scale: descr scale;		nullsPossible: descr nullable;		yourself.</body><body package="IBEXDI" selector="sizeForString:">sizeForString: aString	| sz |	^(sz := aString size) &lt;= 256 			ifTrue: [ 256 ] 			ifFalse: [32767 min: (2 raisedTo: ( (sz floorLog: 2) + 1)) ] .</body></methods><methods><class-id>Database.InterBaseBuffer class</class-id> <category>private-activation</category><body package="IBEXDI" selector="install">install"InterBaseBuffer install"| xif |	(xif := self connectionClass xif) notNil ifTrue:		[ DefaultDoublePointerType := CLimitedPrecisionRealType double pointerType.		DefaultFloatPointerType := CLimitedPrecisionRealType float pointerType.		DefaultLongPointerType := CIntegerType long pointerType.		DefaultInt64PointerType := CIntegerType longLong pointerType.		DefaultShortPointerType := CIntegerType short pointerType.		DefaultDatePointerType :=   xif ISC_DATE pointerType.		DefaultTimePointerType :=   xif ISC_TIME pointerType.		DefaultTimestampPointerType :=   "xif ISC_TIMESTAMP pointerType."CIntegerType long pointerType.		DefaultQUADPointerType :=   xif GDS_QUAD "pointerType". "special case"		DefaultUnsignedCharPointerType := CIntegerType unsignedChar pointerType.		DefaultUnsignedShortPointerType := CIntegerType unsignedShort pointerType.		DefaultArrayDescriptorType := xif ISC_ARRAY_DESC.		(InterbasePointerTypeMap := IdentityDictionary new)			add: (xif SQL_VARYING -&gt; DefaultUnsignedCharPointerType); "need for item of array"			add: (xif SQL_TEXT -&gt; DefaultUnsignedCharPointerType);			add: (xif SQL_TYPE_DATE -&gt; DefaultDatePointerType);			add: (xif SQL_TYPE_TIME -&gt; DefaultTimePointerType);			add: (xif SQL_TIMESTAMP -&gt; DefaultTimestampPointerType);			add: (xif SQL_FLOAT -&gt; DefaultFloatPointerType);			add: (xif SQL_DOUBLE -&gt; DefaultDoublePointerType);			add: (xif SQL_SHORT -&gt; DefaultShortPointerType);			add: (xif SQL_LONG -&gt; DefaultLongPointerType);			add: (xif SQL_INT64 -&gt; DefaultInt64PointerType);			add: (xif SQL_BLOB -&gt; DefaultQUADPointerType);			add: (xif SQL_ARRAY -&gt; DefaultQUADPointerType);			yourself.		(DefaultFixedSizeMap:= IdentityDictionary new)			add: (xif SQL_TYPE_DATE -&gt; 4);			add: (xif SQL_TYPE_TIME -&gt; 4);			add: (xif SQL_TIMESTAMP -&gt; 8);			add: (xif SQL_FLOAT -&gt; 4);			add: (xif SQL_DOUBLE -&gt; 8);			add: (xif SQL_SHORT -&gt; 2);			add: (xif SQL_LONG -&gt; 4);			add: (xif SQL_INT64 -&gt; 8);			add: (xif SQL_BLOB -&gt; 8);			add: (xif SQL_ARRAY -&gt; 8);			yourself.		(GetSelectorMap := IdentityDictionary new)			add: (xif SQL_VARYING -&gt; #getVString);			add: (xif SQL_TEXT -&gt; #getString);			add: (xif SQL_TYPE_DATE -&gt; #getDate);			add: (xif SQL_TYPE_TIME -&gt; #getTime);			add: (xif SQL_TIMESTAMP -&gt; #getTimestamp);			add: (xif SQL_FLOAT -&gt; #getNumber);			add: (xif SQL_DOUBLE -&gt; #getNumber);			add: (xif SQL_SHORT -&gt; #getInteger);			add: (xif SQL_LONG -&gt; #getInteger);			add: (xif SQL_INT64 -&gt; #getInteger);			add: (xif SQL_BLOB -&gt; #getBlob);			add: (xif SQL_ARRAY -&gt; #getArray);			yourself.		 (PutSelectorMap := IdentityDictionary new)		"	add: (#Integer -&gt; #putNumber:);			add: (#Float -&gt; #putNumber:);			add: (#Double -&gt; #putNumber:);			add: (#FixedPoint -&gt; #putFixedPoint:);			add: (#ByteArray -&gt; #putVString:);			add: (#String -&gt; #putVString:);			add: (#Time -&gt; #putTime:);			add: (#Date -&gt; #putDate:);			add: (#Timestamp -&gt; #putTimestamp:);			add: (#LargeString -&gt; #putBlob:);			add: (#LargeByteArray -&gt; #putBlob:);			add: (#Array -&gt; #putArray: );"			add: (xif SQL_VARYING -&gt; #putVString:);			add: (xif SQL_TEXT -&gt; #putString:);			add: (xif SQL_TYPE_DATE -&gt; #putDate:);			add: (xif SQL_TYPE_TIME -&gt; #putTime:);			add: (xif SQL_TIMESTAMP -&gt; #putTimestamp:);			add: (xif SQL_FLOAT -&gt; #putNumber:);			add: (xif SQL_DOUBLE -&gt; #putNumber:);			add: (xif SQL_SHORT -&gt; #putNumber:);			add: (xif SQL_LONG -&gt; #putNumber:);			add: (xif SQL_INT64 -&gt; #putFixedPoint:);			add: (xif SQL_BLOB -&gt; #putBlob:);			add: (xif SQL_ARRAY -&gt; #putArray:);			yourself.		(SmalltalkToInterbaseTypeMap := IdentityDictionary new)			add: (#String -&gt; (xif SQL_VARYING+1));			add: (#ByteArray -&gt; (xif SQL_VARYING+1));			add: (#Date -&gt; (xif SQL_TYPE_DATE+1));			add: (#Time -&gt; (xif SQL_TYPE_TIME+1));			add: (#Timestamp -&gt; (xif SQL_TIMESTAMP+1));			add: (#Integer -&gt; (xif SQL_LONG+1));			add: (#Float -&gt; (xif SQL_FLOAT+1));			add: (#Double -&gt; (xif SQL_DOUBLE+1));			add: (#FixedPoint -&gt; (xif SQL_INT64+1)); "DOUBLE"			add: (#LargeString -&gt; (xif SQL_BLOB+1));			add: (#LargeByteArray -&gt; (xif SQL_BLOB+1));			add: (#Array -&gt; (xif SQL_ARRAY+1));			yourself.	]</body></methods><methods><class-id>Database.InterBaseBuffer class</class-id> <category>class initialization</category><body package="IBEXDI" selector="connectionClass">connectionClass	^InterBaseDatabase</body><body package="IBEXDI" selector="initialize">initialize	"InterbaseBuffer initialize"	self install.</body></methods><methods><class-id>Database.InterBaseArrayItemBuffer</class-id> <category>private-testing</category><body package="IBEXDI" selector="canBind:">canBind: aValue	^true</body></methods><methods><class-id>Database.InterBaseArrayItemBuffer</class-id> <category>private-data accessing</category><body package="IBEXDI" selector="getArrayValue">getArrayValue	| val ptr |	ptr:= self pointer copy.	[val := (1 to: count) collect: [:i | | v |		v:=self at: 0.		bufferPointer datum: bufferPointer datum+elementSize "+= 1".		v]] ensure: [bufferPointer := ptr].	^val</body><body package="IBEXDI" selector="getString">getString	"Answer a string pointed to by bufferPointer."	^bufferPointer copyCStringFromHeap</body><body package="IBEXDI" selector="getVString">getVString	"Answer a string pointed to by bufferPointer."	| s |	s:=bufferPointer copyCStringFromHeap: self encoding.	^s isEmpty ifTrue: [s] ifFalse: [s "copyFrom: 1 to: s size - 1"] "trim Linefeed character"</body><body package="IBEXDI" selector="putArrayValue:">putArrayValue: anIBArray	| ptr as |	ptr:= self pointer copy.	as :=anIBArray array readStream.	[1 to: count do: [:i | 		self at: 0 put: as next.		bufferPointer datum: bufferPointer datum+elementSize "+= 1".		]] ensure: [bufferPointer := ptr].	^self</body><body package="IBEXDI" selector="putString:">putString: string		| sClass ba size bp |	(sClass := string class) == ByteArray		ifTrue:			[ ba := string ]		ifFalse:			[ | str |			sClass == Text				ifTrue:					[ str := string string ]				ifFalse:					[ sClass == GapString						ifTrue: 	[ str := string compress string ]						ifFalse:	[ str := string ] ].			ba := ByteArray fromString: str encoding: self encoding ].	" Ensure size/type compatibility "	((size := ba size) &gt; (elementSize)) ifTrue: [^self class connectionClass unableToBindSignal raise].	bp := bufferPointer.	bp  copyAt: 0		from: ba		size: size		startingAt: 1.	size&lt;elementSize ifTrue: [bp at: size put: 0]."write 0 character at end"</body><body package="IBEXDI" selector="putVString:">putVString: string		| sClass ba size bp |	(sClass := string class) == ByteArray		ifTrue:			[ ba := string ]		ifFalse:			[ | str |			sClass == Text				ifTrue:					[ str := string string ]				ifFalse:					[ sClass == GapString						ifTrue: 	[ str := string compress string ]						ifFalse:	[ str := string ] ].			ba := ByteArray fromString: str encoding: self encoding ].	" Ensure size/type compatibility "	((size := ba size) &gt; (elementSize - 2)) ifTrue: [^self class connectionClass  unableToBindSignal raise].	bp := bufferPointer.	bp		copyAt: 0		from: ba		size: size		startingAt: 1.	bp at: size put: "1"0  "was Linefeed"	     "at: size+1 put: 0."</body></methods><methods><class-id>Database.InterBaseArrayItemBuffer</class-id> <category>private-accessing</category><body package="IBEXDI" selector="bufferSize">bufferSize	^bufferSize</body><body package="IBEXDI" selector="count:">count: aCount	count:= aCount</body><body package="IBEXDI" selector="pointer:">pointer: aPointer	bufferPointer:= aPointer</body><body package="IBEXDI" selector="sliceLength">sliceLength	^bufferSize</body></methods><methods><class-id>Database.InterBaseArrayItemBuffer</class-id> <category>private-allocation</category><body package="IBEXDI" selector="allocScalarBufferType:">allocScalarBufferType: thePointerType	| address |	bufferSize:=elementSize*count.	address := thePointerType 			primMalloc: bufferSize			pointerKind: thePointerType kind.	^address == nil		ifTrue:		[ nil ]		ifFalse:	[ CPointer new newDatum: address ofType: thePointerType ]</body><body package="IBEXDI" selector="allocStructuredBuffer">allocStructuredBuffer	| address thePointerType |	elementSize:=elementSize+2.	bufferSize:=elementSize*count+4. "!"	address := DefaultUnsignedCharPointerType 			primMalloc: bufferSize			pointerKind: DefaultUnsignedCharPointerType kind.	^address == nil		ifTrue:		[ nil ]		ifFalse:	[ CPointer new newDatum: address ofType: DefaultUnsignedCharPointerType ]	"thePointerType := CArrayType defaultPointer 		numElements: elementSize; 		referentType: CIntegerType char.	address := thePointerType 			primMalloc: bufferSize			pointerKind: thePointerType kind.	^address == nil		ifTrue:		[ nil ]		ifFalse:	[ CPointer new newDatum: address ofType: thePointerType ]"</body></methods><methods><class-id>Database.InterBaseArrayItemBuffer class</class-id> <category>instance creation</category><body package="IBEXDI" selector="newOn:count:">newOn: descr count: aCount	| sz |	sz := (descr ibType == 452 or: [descr ibType == 453]) ifTrue: [descr precision "+ 1"] ifFalse: [descr precision]. "SQL_TEXT null terminated"	^self new		elementSize: sz databaseType: descr ibType;		scale: descr scale;		nullsPossible: descr nullable;		count: aCount;		yourself.</body></methods><methods><class-id>Database.InterBaseTransaction</class-id> <category>private-transaction-policy</category><body package="IBEXDI" selector="answerStreamDismissed:">answerStreamDismissed: session	self autoCommit</body><body package="IBEXDI" selector="autoCommit">autoCommit	self isAutocommit ifTrue: [		self  commitExternal	]</body><body package="IBEXDI" selector="autoCommit2">autoCommit2	"Experimental: try use commitRetain if exists opened answer 	streams"	| mode |	self isAutocommit		ifTrue: 			[mode := (self participantsDetect: [:c | c participantsDetect: [:s | s state == #fetchingData]							ifNone: [false]]						ifNone: [nil]) notNil.			self transactExternal: #commit isRetain: (mode or: [retainMode])]</body><body package="IBEXDI" selector="beforeBind:">beforeBind: buffer 		self ensureTransaction.</body><body package="IBEXDI" selector="beforeExecute:">beforeExecute: session</body><body package="IBEXDI" selector="beforePrepare:">beforePrepare: session 		self ensureTransaction.</body><body package="IBEXDI" selector="multiStatementTransactions">multiStatementTransactions	autoCommitHolder value: false</body><body package="IBEXDI" selector="nonSelectAnswered:">nonSelectAnswered: session	self autoCommit</body><body package="IBEXDI" selector="sessionAcquired:">sessionAcquired: session</body><body package="IBEXDI" selector="sessionExecuted:">sessionExecuted: session</body><body package="IBEXDI" selector="sessionPrepared:">sessionPrepared: session</body><body package="IBEXDI" selector="singleStatementTransactions">singleStatementTransactions	autoCommitHolder value: true</body></methods><methods><class-id>Database.InterBaseTransaction</class-id> <category>testing</category><body package="IBEXDI" selector="inTransactionMode">inTransactionMode	"Answer true if a transaction has been started."	"^self isNullHandle not or: [super inTransactionMode]"	^super inTransactionMode</body><body package="IBEXDI" selector="isAutocommit">isAutocommit	^autoCommitHolder value</body><body package="IBEXDI" selector="isNullHandle">isNullHandle	"^self trHandle contents == 0  " "handles are long "	^self trHandle isNil or: [self trHandle contents referentAddress == 0] "handles are void * "</body><body package="IBEXDI" selector="isRetain">isRetain	^retainMode = true</body></methods><methods><class-id>Database.InterBaseTransaction</class-id> <category>private-accessing</category><body package="IBEXDI" selector="autoCommitHolder">autoCommitHolder	^autoCommitHolder</body><body package="IBEXDI" selector="autoCommitHolder:">autoCommitHolder: aValueHolder	autoCommitHolder := aValueHolder</body><body package="IBEXDI" selector="defaultRetainMode">defaultRetainMode	^self class defaultRetainMode</body><body package="IBEXDI" selector="getStatusInfo">getStatusInfo		^self statusBuffer getStatusInfo</body><body package="IBEXDI" selector="retainMode:">retainMode: aBoolean	retainMode:=aBoolean</body><body package="IBEXDI" selector="statusBuffer">statusBuffer	^statusBufferHolder value</body><body package="IBEXDI" selector="statusBuffer:">statusBuffer: aCPointerOrNil	| sb |	"We may need to free existing space."	(sb := self statusBuffer) notNil		ifTrue:	[ sb free ].	self statusBufferHolder value: aCPointerOrNil</body><body package="IBEXDI" selector="statusBufferHolder">statusBufferHolder	^statusBufferHolder</body><body package="IBEXDI" selector="statusBufferHolder:">statusBufferHolder: aValue	statusBufferHolder := aValue</body><body package="IBEXDI" selector="statusVector">statusVector	^self statusBuffer status</body><body package="IBEXDI" selector="tpb">tpb	tpbHolder value isNil ifTrue: [self tpb: (self setTPB: self tp)].	^tpbHolder value</body><body package="IBEXDI" selector="tpb:">tpb: aCPointerOrNil	| tpb |	"We may need to free existing space."	(tpb := self tpbHolder value ) notNil		ifTrue:	[ tpb free ].	self tpbHolder value: aCPointerOrNil</body><body package="IBEXDI" selector="tpbHolder">tpbHolder	^tpbHolder</body><body package="IBEXDI" selector="tpbHolder:">tpbHolder: aValue	tpbHolder := aValue</body><body package="IBEXDI" selector="tpbSize">tpbSize	^tpbSize</body><body package="IBEXDI" selector="tpbSize:">tpbSize: aValue	tpbSize := aValue</body><body package="IBEXDI" selector="trHandle">trHandle	^trHandleHolder value</body><body package="IBEXDI" selector="trHandle:">trHandle: aCPointerOrNil	| tr |	"We may need to free existing space."	(tr := self trHandle ) notNil		ifTrue:	[ tr free ].	self trHandleHolder value: aCPointerOrNil</body><body package="IBEXDI" selector="trHandleHolder">trHandleHolder	^trHandleHolder</body><body package="IBEXDI" selector="trHandleHolder:">trHandleHolder: aValue	trHandleHolder := aValue</body></methods><methods><class-id>Database.InterBaseTransaction</class-id> <category>private-transactions</category><body package="IBEXDI" selector="cursorsAreDeleted">cursorsAreDeleted	"Notify each participating connection and sessions that the cursor was closed by some event (like commit or rollback)."	self participantsDo: [ :conn | conn  cursorsAreDeleted ]</body><body package="IBEXDI" selector="ensureTransaction">ensureTransaction	| t |	self isNullHandle		ifTrue: 			[t := autoCommitHolder value.			self beginExternal.			autoCommitHolder value: t]</body><body package="IBEXDI" selector="finishTransaction">finishTransaction	(self trHandle isNil or: [self trHandle referentAddress isNil])		ifTrue: [^self].	self isNullHandle		ifFalse: 			[self state: #xactYes.			self isAutocommit == true				ifTrue: [[self hardCommit]						ifCurtailed: [self hardRollback]]				ifFalse: [self hardRollback]]</body><body package="IBEXDI" selector="hardCommit">hardCommit	self isNullHandle ifFalse: [self preserveRetainMode: [self retainModeOff; commit]]</body><body package="IBEXDI" selector="hardRollback">hardRollback	self isNullHandle ifFalse: [self preserveRetainMode: [self retainModeOff; rollback]]</body><body package="IBEXDI" selector="preserveRetainMode:">preserveRetainMode: aBlock	| rm |	rm := retainMode.	[^aBlock value] ensure: [retainMode := rm]</body><body package="IBEXDI" selector="retainModeOff">retainModeOff	retainMode:=false</body><body package="IBEXDI" selector="retainModeOn">retainModeOn	retainMode:=true</body><body package="IBEXDI" selector="softCommit">softCommit	self isNullHandle ifFalse: [self preserveRetainMode: [self retainModeOn; commit]]</body><body package="IBEXDI" selector="softRollback">softRollback	self isNullHandle ifFalse: [self preserveRetainMode: [self retainModeOn; rollback]]</body></methods><methods><class-id>Database.InterBaseTransaction</class-id> <category>private-library calls</category><body package="IBEXDI" selector="acquireExternal">acquireExternal	| trh xif |	xif:=self class xif.	[ "Begin unwind protection (level 1)"	trh := xif isc_tr_handle perform: xif mallocSelector with: 1.	trh contents: 0.	self trHandle: trh.	self statusBuffer: (self class statusBufferClass forTransaction: self) ]	ifCurtailed: [		self trHandle: nil.		self statusBuffer: nil].</body><body package="IBEXDI" selector="beginExternal">beginExternal	| xif args cnt rc myTpb myTpbSize |	self isNullHandle ifFalse: [^self].	"we are already in open transaction"	xif := self class xif.	cnt := 0.	(args := OrderedCollection new)		add: self statusVector;		add: self trHandle;		add: 0.	"place holder for db_count"	myTpb := self tpb.	myTpbSize := self tpbSize.	self participantsDo: 			[:x | 			cnt := cnt + 1.			args				add: x databaseHandle;				add: myTpbSize;				add: myTpb].	args at: 3 put: cnt.	rc := xif isc_start_transaction: args asArray.	traceLevel &gt;= 1 		ifTrue: 			[(self traceStream)				print: rc;				nextPutAll: ' = isc_start_transactions( status = ';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', tr_handle = ';				nextPutAll: (self trHandle contents referentAddress printStringRadix: 16);				nextPutAll: ', db_count = ';				nextPutAll: cnt printString;				nextPut: $).			self class trace: self emitTrace].	rc == 0 		ifFalse: 			[| errs |			errs := self getStatusInfo.			^self class connectionClass transactionExceptionSignal raiseWith: errs				errorString: errs first dbmsErrorString].	self multiStatementTransactions</body><body package="IBEXDI" selector="commitExternal">commitExternal	^self transactExternal: #commit isRetain: retainMode.</body><body package="IBEXDI" selector="dismissExternal">dismissExternal	self finishTransaction.	self trHandle: nil.	self statusBuffer: nil.	self tpb: nil</body><body package="IBEXDI" selector="installExternal">installExternal	"Perform return from snapshot processing."	"Subclasses that override should invoke super installExternal."	super installExternal.	self trHandle: nil.	self statusBuffer: nil.	self tpb: nil.</body><body package="IBEXDI" selector="rollbackExternal">rollbackExternal	^self transactExternal: #rollback isRetain: retainMode.</body><body package="IBEXDI" selector="transactExternal:isRetain:">transactExternal: aTransact isRetain: aRetain 	| rc err selector xif |	xif := self class xif.	selector := aTransact = #commit 				ifTrue: 					[aRetain 						ifTrue: [#isc_commit_retaining:with:]						ifFalse: [#isc_commit_transaction:with:]]				ifFalse: 					[aRetain 						ifTrue: [#isc_rollback_retaining:with:]						ifFalse: [#isc_rollback_transaction:with:]].	rc := xif 				perform: selector				with: self statusVector				with: self trHandle.	traceLevel &gt;= 1 		ifTrue: 			[(self traceStream)				print: rc;				nextPutAll: ' = ';				nextPutAll: selector asString;				nextPutAll: '( status=';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', tr_handle=';				nextPutAll: (self trHandle contents referentAddress printStringRadix: 16);				nextPutAll: ' )'.			self class trace: self emitTrace].	(rc == 0 or: [rc == xif isc_lost_db_connection]) 		ifFalse: 			[err := self getStatusInfo.			^self class connectionClass invalidTransactionStateSignal raiseWith: err				errorString: err first dbmsErrorString].	self singleStatementTransactions.	aRetain ifFalse: [self cursorsAreDeleted]</body></methods><methods><class-id>Database.InterBaseTransaction</class-id> <category>private-parameters</category><body package="IBEXDI" selector="clearParameters">clearParameters	self tp: nil.</body><body package="IBEXDI" selector="defaultTPB">defaultTPB	^#(recVersion readCommitted noWait )</body><body package="IBEXDI" selector="setTPB:">setTPB: anArray 	"creating and populating transaction parameters buffer"	| xif s ptr map rs param str |	xif := self class xif.	s := (ByteArray new: 256) writeStream.	s nextPut: xif isc_tpb_version3.	map := xif class transactionParameterMap.	rs := anArray readStream.	[rs atEnd] whileFalse: 			[param := rs next.			s nextPut: (map at: param						ifAbsent: 							[^self class connectionClass invalidTransactionParameterSignal 								raiseWith: param first dbmsErrorString]).			(param == #lockRead or: [param == #lockWrite]) 				ifTrue: 					[str := rs next asByteArray.					s						nextPut: str size;						nextPutAll: str]].	ptr := s contents perform: xif copyToHeapSelector.	self tpbSize: s contents size.	^ptr</body><body package="IBEXDI" selector="tp">tp	tp isNil ifTrue: [tp:=self defaultTPB].	^tp</body><body package="IBEXDI" selector="tp:">tp: aValue	tp := aValue.	self tpb: nil.	self tpbSize: 0.</body><body package="IBEXDI" selector="transactionParameters">transactionParameters"Verbose alias of tp"	^self tp</body><body package="IBEXDI" selector="transactionParameters:">transactionParameters: anArray"Verbose alias of tp: "	self tp: anArray</body></methods><methods><class-id>Database.InterBaseTransaction</class-id> <category>private-finalization</category><body package="IBEXDI" selector="executor">executor	| ex |	ex := super executor.	ex statusBufferHolder: self statusBufferHolder.	ex trHandleHolder: self trHandleHolder.	ex tpbHolder: self tpbHolder.	ex autoCommitHolder: self autoCommitHolder.	^ex</body><body package="IBEXDI" selector="finalizeExternal">finalizeExternal	(self trHandle isNil or: [self trHandle referentAddress isNil]) ifTrue: [ ^self ].	"self dismissExternal."	super finalizeExternal</body><body package="IBEXDI" selector="key">key	^self trHandleHolder</body></methods><methods><class-id>Database.InterBaseTransaction</class-id> <category>initialize-release</category><body package="IBEXDI" selector="initialize">initialize	super initialize.	trHandleHolder:=nil asValue.	statusBufferHolder:=nil asValue.	tpbHolder:=nil asValue.	retainMode:=self defaultRetainMode.	autoCommitHolder := true asValue.	self singleStatementTransactions</body></methods><methods><class-id>Database.InterBaseTransaction</class-id> <category>private-activation</category><body package="IBEXDI" selector="acquire">acquire	"Record existence of active member of this coordinated transaction."	super acquire.	self trHandle isNil ifTrue: [self acquireExternal notNil ifTrue: [self class register: self]]</body></methods><methods><class-id>Database.InterBaseTransaction class</class-id> <category>initialize</category><body package="IBEXDI" selector="initialize">initialize	self initRegistry.	self defaultRetainMode: false.</body></methods><methods><class-id>Database.InterBaseTransaction class</class-id> <category>accessing</category><body package="IBEXDI" selector="connectionClass">connectionClass	^InterBaseDatabase</body><body package="IBEXDI" selector="defaultRetainMode">defaultRetainMode	^defaultRetainMode</body><body package="IBEXDI" selector="defaultRetainMode:">defaultRetainMode: aBoolean	defaultRetainMode := aBoolean</body><body package="IBEXDI" selector="statusBufferClass">statusBufferClass	^IBStatusBuffer</body><body package="IBEXDI" selector="xif">xif	^self connectionClass xif</body></methods><methods><class-id>Database.InterBaseTransaction class</class-id> <category>private-registry</category><body package="IBEXDI" selector="registry">registry	^RegisteredInterbaseTransactions</body><body package="IBEXDI" selector="registry:">registry: aCollection		RegisteredInterbaseTransactions:= aCollection</body></methods><methods><class-id>Database.InterBaseConnection</class-id> <category>accessing</category><body package="IBEXDI" selector="charSet">charSet	^charSet</body><body package="IBEXDI" selector="charSet:">charSet: aString	charSet:=aString</body><body package="IBEXDI" selector="database">database	database isNil		ifTrue: 			[database := self class databaseClass new].	^database</body><body package="IBEXDI" selector="dialect">dialect	"Answer SQL dialect"	^dialect</body><body package="IBEXDI" selector="dialect:">dialect: aNumber	dialect := aNumber</body><body package="IBEXDI" selector="getDatabaseInfo:">getDatabaseInfo: anArray	^self database getDatabaseInfo: anArray</body><body package="IBEXDI" selector="role">role	^role</body><body package="IBEXDI" selector="role:">role: aString	role:=aString</body></methods><methods><class-id>Database.InterBaseConnection</class-id> <category>private-library calls</category><body package="IBEXDI" selector="acquireExternal:">acquireExternal: aPassword 		self database username: (self username); 			environment: (self environment); 			dialect: (self dialect); 			role: (self role);			charSet: (self charSet).	database isConnected ifFalse: [database connect: aPassword].	database isConnected		ifTrue: 			[database addConnection: self. "sic !"].	^self</body><body package="IBEXDI" selector="dismissExternal">dismissExternal	"Release the external resources."	^self</body><body package="IBEXDI" selector="installExternal">installExternal	"Perform return from snapshot processing for this connection."	super installExternal.	self participantsDo: [ :each | each installExternal ] "Need in Database -&gt; Connection -&gt; Session "</body></methods><methods><class-id>Database.InterBaseConnection</class-id> <category>private-accessing</category><body package="IBEXDI" selector="database:">database: aDatabase	database := aDatabase</body><body package="IBEXDI" selector="databaseHandle">databaseHandle	^database databaseHandle</body><body package="IBEXDI" selector="databaseParameters:">databaseParameters: aDictionary	"Set the database.parameters"	self isConnected ifFalse: [self database databaseParameters: aDictionary].</body><body package="IBEXDI" selector="getStatusInfo">getStatusInfo	^self database getStatusInfo</body><body package="IBEXDI" selector="isolationLevel:">isolationLevel: newIsolationLevel 	"Set the current isolation level."	| externalIsolationLevel |	externalIsolationLevel := SupportedIsolationLevels at: newIsolationLevel ifAbsent: [ExternalDatabaseConnection unsupportedIsolationLevelSignal raise].	self isConnected ifTrue: [self transaction transactionParameters: externalIsolationLevel].	isolationLevel := newIsolationLevel</body><body package="IBEXDI" selector="trHandle">trHandle	^transaction trHandle</body><body package="IBEXDI" selector="transactionParameters:">transactionParameters: anArray	"Set the transaction.parameters"	self isConnected ifTrue: [self transaction transactionParameters: anArray].</body></methods><methods><class-id>Database.InterBaseConnection</class-id> <category>connections</category><body package="IBEXDI" selector="cloneConnection">cloneConnection	^database getConnection</body><body package="IBEXDI" selector="createDatabase:">createDatabase: aCreateStatement	self class databaseClass new 		dialect: self dialect;		createDatabase: aCreateStatement.</body><body package="IBEXDI" selector="dropDatabase">dropDatabase		self database dropDatabase</body></methods><methods><class-id>Database.InterBaseConnection</class-id> <category>transactions</category><body package="IBEXDI" selector="commitRetain">commitRetain	"Commit all database changes made during the current multi-statement transaction."	self inTransactionMode		ifTrue:	[ self transaction softCommit ]</body><body package="IBEXDI" selector="rollbackRetain">rollbackRetain	"Rollback all database changes made during the current multi-statement transaction."	self inTransactionMode		ifTrue:	[ self transaction softRollback ]</body></methods><methods><class-id>Database.InterBaseConnection</class-id> <category>private-finalization</category><body package="IBEXDI" selector="executor">executor	^self shouldNotImplement</body><body package="IBEXDI" selector="finalizeExternal">finalizeExternal	^self shouldNotImplement</body><body package="IBEXDI" selector="key">key	^self shouldNotImplement</body></methods><methods><class-id>Database.InterBaseConnection</class-id> <category>private-transactions</category><body package="IBEXDI" selector="hardCommit">hardCommit	"Commit all database changes made during the current multi-statement transaction."	self inTransactionMode		ifTrue:	[ self transaction hardCommit ]</body><body package="IBEXDI" selector="hardRollback">hardRollback		self transaction hardRollback</body></methods><methods><class-id>Database.InterBaseConnection</class-id> <category>private</category><body package="IBEXDI" selector="cursorsAreDeleted">cursorsAreDeleted	"Notify each participating session that the cursor was deleted by some event (like commit or rollback)."	self participantsDo: [ :each | each cursorIsDeleted ]</body></methods><methods><class-id>Database.InterBaseConnection</class-id> <category>initialize-release</category><body package="IBEXDI" selector="initialize">initialize	super initialize.	dialect:=self class defaultDialect.</body></methods><methods><class-id>Database.InterBaseConnection</class-id> <category>printing</category><body package="IBEXDI" selector="printOn:">printOn: aStream	super printOn: aStream.	aStream nextPut: $(.	(self databaseHandle isNil) ifFalse:		[ aStream			nextPutAll: ' db_handle=';			nextPutAll: (self databaseHandle referentAddress printStringRadix: 16)].	(self trHandle isNil) ifFalse:		[ aStream			nextPutAll: ', tr_handle=';			nextPutAll: (self trHandle referentAddress printStringRadix: 16)].	aStream nextPut: $).</body></methods><methods><class-id>Database.InterBaseConnection</class-id> <category>private-testing</category><body package="IBEXDI" selector="isAutocommit">isAutocommit	^self transaction isAutocommit</body></methods><methods><class-id>Database.InterBaseConnection</class-id> <category>private-activation</category><body package="IBEXDI" selector="dismiss">dismiss	"Release the external resources."	self transaction finishTransaction.	database removeConnection: self.</body></methods><methods><class-id>Database.InterBaseConnection class</class-id> <category>private-registry</category><body package="IBEXDI" selector="registry">registry	"^RegisteredInterbaseConnections"	^nil</body><body package="IBEXDI" selector="registry:">registry: aCollection	"RegisteredInterbaseConnections := aCollection"	^nil</body></methods><methods><class-id>Database.InterBaseConnection class</class-id> <category>private-accessing</category><body package="IBEXDI" selector="columnDescriptionClass">columnDescriptionClass	"Answer the class to use for column description objects associated with receiver."	^InterBaseColumnDescription</body><body package="IBEXDI" selector="databaseClass">databaseClass	^InterBaseDatabase</body><body package="IBEXDI" selector="interfaceClass">interfaceClass	"Answer the class to use as the InterbaseInterface for the current platform."	| interfaceClassName |	interfaceClassName := xifMap at: self platformType ifAbsent: [nil].	^self environment at: interfaceClassName ifAbsent: [nil].</body><body package="IBEXDI" selector="sessionClass">sessionClass	^InterBaseSession</body><body package="IBEXDI" selector="statusBufferClass">statusBufferClass	^IBStatusBuffer</body><body package="IBEXDI" selector="transactionClass">transactionClass	^InterBaseTransaction</body><body package="IBEXDI" selector="xif">xif	"Answer the ExternalInterface subclass instance to use." 	^self databaseClass xif</body></methods><methods><class-id>Database.InterBaseConnection class</class-id> <category>activation</category><body package="IBEXDI" selector="pause">pause	"Direct the suspension of all activity."	^self "quiesce"</body><body package="IBEXDI" selector="resume">resume	"Direct the resumption of all suspended activity."	^self "activate"</body></methods><methods><class-id>Database.InterBaseConnection class</class-id> <category>class initialization</category><body package="IBEXDI" selector="defaultDialect:">defaultDialect: aNumber 	defaultDialect := aNumber</body><body package="IBEXDI" selector="initialize">initialize	"InterbaseConnection initialize"	self xif: nil.	self defaultDialect: 3.	SupportedIsolationLevels := IdentityDictionary new.	SupportedIsolationLevels at: #CONCURRENCY		put: #(#write #concurrency #nowait).	SupportedIsolationLevels at: #READ_COMMITTED		put: #(#write #readCommitted #recVersion #nowait).	SupportedIsolationLevels at: #WRITECONSISTENCY put: #(#write #consistency).	SupportedIsolationLevels at: #READCONSISTENCY put: #(#read #consistency).	"Lens names"	SupportedIsolationLevels at: #RR		put: (SupportedIsolationLevels at: #READ_COMMITTED)</body></methods><methods><class-id>Database.InterBaseConnection class</class-id> <category>instance-creation</category><body package="IBEXDI" selector="newForDatabase:">newForDatabase: aDatabase	"Answer a new fake connection associated with aDatabase."	| c |	(c := self basicNew) initialize.	c 	database: aDatabase.	c connect.	^c</body></methods><methods><class-id>Database.InterBaseConnection class</class-id> <category>accessing</category><body package="IBEXDI" selector="defaultDialect">defaultDialect	^defaultDialect</body><body package="IBEXDI" selector="kind">kind	^#InterBase</body><body package="IBEXDI" selector="version">version	^self databaseClass version</body></methods><methods><class-id>Database.InterBaseConnection class</class-id> <category>private-activation</category><body package="IBEXDI" selector="install">install	^self</body></methods><methods><class-id>Database.IBStatusBuffer</class-id> <category>accessing</category><body package="IBEXDI" selector="getStatusInfo">getStatusInfo		| xif errors err  rc  sqlcode errs msg | 	xif := self class xif.	msg := message.	sbp contents: self statusBuffer. "sic!"	errs := (String new: 512) writeStream.	 [rc:=xif isc_interprete: msg with: sbp.	  err := msg copyCStringFromHeap. rc &gt; 0 ]		whileTrue: [ errs nextPutAll: err; cr ].	errs nextPutAll: 'SQLCODE:'.	sqlcode:= xif isc_sqlcode: self statusBuffer.	errs nextPutAll: sqlcode printString ; cr.	rc := xif isc_sql_interprete: sqlcode with: msg with: 512.	err := msg copyCStringFromHeap. 	errors := Array with: (InterBaseError new 		osErrorCode: (statusBuffer at: 1);		dbmsErrorCode: sqlcode ; 		dbmsErrorString: (errs nextPutAll: err ; contents )).	^errors</body><body package="IBEXDI" selector="status">status	^statusBuffer</body></methods><methods><class-id>Database.IBStatusBuffer</class-id> <category>initialize</category><body package="IBEXDI" selector="allocateBuffers">allocateBuffers	statusBuffer:= CIntegerType long malloc: 20.	sbp := CPointerType defaultPointer malloc: 1.	message := CIntegerType char malloc: 512.</body><body package="IBEXDI" selector="initialize">initialize	self allocateBuffers</body></methods><methods><class-id>Database.IBStatusBuffer</class-id> <category>private-accessing</category><body package="IBEXDI" selector="free">free	"no-op"</body><body package="IBEXDI" selector="freeBuffers">freeBuffers	statusBuffer notNil ifTrue: [statusBuffer free. statusBuffer:=nil].	sbp notNil ifTrue: [sbp free.  sbp:=nil].	message notNil ifTrue: [message free.  message:=nil].</body><body package="IBEXDI" selector="statusBuffer">statusBuffer	^statusBuffer</body><body package="IBEXDI" selector="statusBuffer:">statusBuffer: aValue	statusBuffer := aValue</body></methods><methods><class-id>Database.IBStatusBuffer</class-id> <category>tracing</category><body package="IBEXDI" selector="traceString">traceString	^self statusBuffer referentAddress printStringRadix:16</body></methods><methods><class-id>Database.IBStatusBuffer class</class-id> <category>accessing</category><body package="IBEXDI" selector="connectionClass">connectionClass	^InterBaseDatabase</body><body package="IBEXDI" selector="releaseGlobalData">releaseGlobalData	self resetSingleton</body><body package="IBEXDI" selector="xif">xif	^self connectionClass xif</body></methods><methods><class-id>Database.IBStatusBuffer class</class-id> <category>instance-creating</category><body package="IBEXDI" selector="forBuffer:">forBuffer: aBuffer	^self singleton</body><body package="IBEXDI" selector="forConnection:">forConnection: aConnection	^self singleton</body><body package="IBEXDI" selector="forDatabase:">forDatabase: aConnection	^self singleton</body><body package="IBEXDI" selector="forSession:">forSession: aSession	^self singleton</body><body package="IBEXDI" selector="forTransaction:">forTransaction: aTransaction	^self singleton</body></methods><methods><class-id>Database.IBStatusBuffer class</class-id> <category>class initialization</category><body package="IBEXDI" selector="initialize">initialize		"self installSingleton."</body><body package="IBEXDI" selector="installSingleton">installSingleton	self singleton: (self basicNew initialize).</body></methods><methods><class-id>Database.IBStatusBuffer class</class-id> <category>private-accessing</category><body package="IBEXDI" selector="resetSingleton">resetSingleton	"self resetSingleton"	Singleton notNil ifTrue: [Singleton freeBuffers. self singleton: nil]</body><body package="IBEXDI" selector="singleton">singleton	"self singleton"	Singleton isNil ifTrue: [self installSingleton].	^Singleton</body><body package="IBEXDI" selector="singleton:">singleton: aValue	Singleton := aValue</body></methods><methods><class-id>Database.InterBaseColumnDescription</class-id> <category>accessing</category><body package="IBEXDI" selector="ibType">ibType	^ibType</body><body package="IBEXDI" selector="relname">relname	^relname</body><body package="IBEXDI" selector="subtype">subtype	^subtype</body></methods><methods><class-id>Database.InterBaseColumnDescription</class-id> <category>printing</category><body package="IBEXDI" selector="printOn:">printOn: aStream 	"Append to the argument aStream a sequence of characters that identifies the 	receiver."	| item  |	aStream nextPutAll: 'an InterbaseColumnDescription('.	(item := self name) notNil ifTrue:		[ aStream			nextPutAll: ' name=';			nextPutAll: item].	(item := self type) notNil ifTrue:		[ aStream nextPutAll: ' type='.		item printOn: aStream ].	(item := self relname) notNil ifTrue:		[ aStream			nextPutAll: ' relname=';			nextPutAll: item].	(item := self subtype) notNil ifTrue:		[ aStream nextPutAll: ' subtype='.		item printOn: aStream ].	aStream nextPut: $)</body></methods><methods><class-id>Database.InterBaseColumnDescription</class-id> <category>private-accessing</category><body package="IBEXDI" selector="ibType:">ibType: anInteger	ibType := anInteger</body><body package="IBEXDI" selector="relname:">relname: aTableName	relname:=aTableName</body><body package="IBEXDI" selector="subtype:">subtype: aValue	subtype:= aValue</body></methods><methods><class-id>Database.InterBaseColumnDescription</class-id> <category>testing</category><body package="IBEXDI" selector="isArray">isArray	^(self class connectionClass xif SQL_ARRAY) == (ibType bitAnd: -2 )</body><body package="IBEXDI" selector="isBlob">isBlob	^(self class connectionClass xif SQL_BLOB) == (ibType bitAnd: -2 )</body></methods><methods><class-id>Database.InterBaseColumnDescription</class-id> <category>initialize-release</category><body package="IBEXDI" selector="sqlvarDef:index:encoding:">sqlvarDef: curVar index: varIndex encoding: encoding 	 | internalType colNameLen colName relName |	colNameLen := curVar memberAt: #sqlname_length.	colName := ((curVar memberAt: #sqlname) datum asByteArray copyFrom: 1 to: colNameLen) asStringEncoding: encoding.	colNameLen := curVar memberAt: #relname_length.	relName := ((curVar memberAt: #relname) datum asByteArray copyFrom: 1 to: colNameLen) asStringEncoding: encoding.	self		index: varIndex;		name: colName;		relname: relName;		ibType: (internalType := curVar memberAt: #sqltype);		type: (InterbaseDatatypeToClassMap at: (internalType bitAnd: -2) ifAbsent: [] );		subtype:  (curVar memberAt: #sqlsubtype);		precision: (curVar memberAt: #sqllen);		scale: (curVar memberAt: #sqlscale);		nullable: ibType odd;		maxColumnConstraint: precision.</body></methods><methods><class-id>Database.InterBaseColumnDescription class</class-id> <category>fileIn/Out</category><body package="IBEXDI" selector="prerequisitesForLoading">prerequisitesForLoading	"InterbaseBuffer requires InterbaseInterface and subclasses to be initialized."	^super prerequisitesForLoading		addAll: InterBaseInterface withAllSubclasses;			addLast: InterBaseDatabase;		yourself</body></methods><methods><class-id>Database.InterBaseColumnDescription class</class-id> <category>class initialization</category><body package="IBEXDI" selector="initialize">initialize	"InterbaseColumnDescription initialize"	| xif |	xif := self connectionClass xif.	(InterbaseDatatypeToClassMap := IdentityDictionary new)		at: xif SQL_TEXT put: String;		at: xif SQL_VARYING put: String;		at: xif SQL_TYPE_DATE put: Date;		at: xif SQL_TYPE_TIME put: Time;		at: xif SQL_TIMESTAMP put: Timestamp;		at: xif SQL_SHORT put: Integer;		at: xif SQL_LONG put: Integer;		at: xif SQL_INT64 put: Integer;		at: xif SQL_FLOAT put: Float;		at: xif SQL_DOUBLE put: Double;		at: xif SQL_ARRAY put: Array;		at: xif SQL_BLOB put: ByteArray;		yourself</body></methods><methods><class-id>Database.InterBaseColumnDescription class</class-id> <category>accessing</category><body package="IBEXDI" selector="connectionClass">connectionClass	^InterBaseDatabase</body><body package="IBEXDI" selector="typeFor:">typeFor: internalType	^InterbaseDatatypeToClassMap at: (internalType bitAnd: -2) ifAbsent: []</body></methods><methods><class-id>Database.IBTransaction</class-id> <category>private-finalization</category><body package="IBEXDI" selector="acquireExternal">acquireExternal	^self</body><body package="IBEXDI" selector="beginExternal">beginExternal	^self</body><body package="IBEXDI" selector="commitExternal">commitExternal	^self</body><body package="IBEXDI" selector="dismissExternal">dismissExternal	^self</body><body package="IBEXDI" selector="rollbackExternal">rollbackExternal	^self</body></methods><methods><class-id>Database.IBTransaction</class-id> <category>private-execution</category><body package="IBEXDI" selector="executor">executor	^self shouldNotImplement</body><body package="IBEXDI" selector="finalizeExternal">finalizeExternal	^self shouldNotImplement</body><body package="IBEXDI" selector="key">key	^self shouldNotImplement</body></methods><methods><class-id>Database.IBTransaction class</class-id> <category>accessing</category><body package="IBEXDI" selector="connectionClass">connectionClass	"Answer the class to use for connection objects associated with receiver."	^InterBaseDatabase</body></methods><methods><class-id>Database.IBTransaction class</class-id> <category>private-registry</category><body package="IBEXDI" selector="registry:">registry: aCollection	^self shouldNotImplement</body></methods><methods><class-id>Database.InterBaseArray</class-id> <category>private</category><body package="IBEXDI" selector="getDimensions">getDimensions	"currently, only vectors"	dimensions:=Array with: (Array with: 1 with: self array size)</body></methods><methods><class-id>Database.InterBaseArray</class-id> <category>private-accessing</category><body package="IBEXDI" selector="arrayId">arrayId	^arrayId</body><body package="IBEXDI" selector="arrayId:">arrayId: aValue	arrayId := aValue</body></methods><methods><class-id>Database.InterBaseArray</class-id> <category>accessing</category><body package="IBEXDI" selector="array">array	^array</body><body package="IBEXDI" selector="array:">array: aValue	array := aValue.	dimensions := nil.</body><body package="IBEXDI" selector="dimensions">dimensions	dimensions isNil ifTrue: [self getDimensions].	^dimensions</body><body package="IBEXDI" selector="dimensions:">dimensions: aValue	dimensions := aValue</body><body package="IBEXDI" selector="relname">relname	^relname</body><body package="IBEXDI" selector="relname:">relname: aValue	relname := aValue</body><body package="IBEXDI" selector="sqlname">sqlname	^sqlname</body><body package="IBEXDI" selector="sqlname:">sqlname: aValue	sqlname := aValue</body></methods><methods><class-id>Database.InterBaseArray</class-id> <category>private-interbase</category><body package="IBEXDI" selector="ibConversion">ibConversion	^#Array</body></methods><methods><class-id>Database.InterBaseArray</class-id> <category>printing</category><body package="IBEXDI" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: '(id=';		nextPutAll: self arrayId printString;		nextPut: $,;		nextPutAll: self array printString;		nextPut: $);		cr</body></methods><methods><class-id>Database.InterBaseArray class</class-id> <category>instance-creating</category><body package="IBEXDI" selector="forArray:column:table:">forArray: array column: column table: table	^(self basicNew)		array: array ;		sqlname: column;		relname: table</body><body package="IBEXDI" selector="forArray:column:table:dimensions:">forArray: array column: column table: table dimensions: dims	^(self basicNew)		array: array ;		sqlname: column;		relname: table;		dimensions: dims</body><body package="IBEXDI" selector="forArray:descriptor:">forArray: array descriptor: descriptor	^self forArray: array column: descriptor name table: descriptor relname</body><body package="IBEXDI" selector="forArray:descriptor:dimensions:">forArray: array descriptor: descriptor dimensions: dims"dims are: #((1 4)) [1:4],  #((1 4) (1 8)) [1:4,1:8] etc. or #( (4) ) , #( (4) (8) ) for 1-based indexes"			^self forArray: array column: descriptor name table: descriptor relname dimensions: dims</body></methods><methods><class-id>Database.InterBaseArrayBuffer</class-id> <category>private-binding</category><body package="IBEXDI" selector="allocateItemBuffer">allocateItemBuffer	self allocateItemBuffer: self itemCounts</body><body package="IBEXDI" selector="allocateItemBuffer:">allocateItemBuffer: counts	itemBuffer notNil ifTrue: [itemBuffer free. itemBuffer :=nil].	itemBuffer := InterBaseArrayItemBuffer newOn: itemDescriptor count: counts</body><body package="IBEXDI" selector="bindForInput">bindForInput	| xif rc db tr |	xif := connection class xif.	connection transaction beforeBind: self.	rc := xif 				isc_array_lookup_bounds: self statusVector				with: (db := connection databaseHandle)				with: (tr := connection trHandle)				with: relname				with: sqlname				with: arrayDescriptor.	connection class traceLevel &gt;= 3 		ifTrue: 			[(connection traceStream)				print: rc;				nextPutAll: ' = isc_array_lookup_bounds(status=';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', dbHandle=';				nextPutAll: (db contents referentAddress printStringRadix: 16);				nextPutAll: ', trHandle=';				nextPutAll: (tr contents referentAddress printStringRadix: 16);				nextPutAll: ', tableName= ';				nextPutAll: relname;				nextPutAll: ', columnName= ';				nextPutAll: sqlname;				nextPutAll: ', descriptor=';				nextPutAll: (arrayDescriptor referentAddress printStringRadix: 16);				nextPut: $).			connection class trace: connection emitTrace].	rc ~~ 0 		ifTrue: 			[| errs |			errs := connection getStatusInfo.			^connection class unableToBindSignal raiseWith: errs				errorString: errs first dbmsErrorString].	self setArrayDimensions.	itemDescriptor := self getItemDescriptor.	self allocateItemBuffer.	itemBuffer mallocForParameter.	itemBuffer putArrayValue: bufferValue.	self putArrayData</body><body package="IBEXDI" selector="bindForOutput">bindForOutput	| xif rc db tr |	xif := connection class xif.	rc := xif 				isc_array_lookup_bounds: self statusVector				with: (db := connection databaseHandle)				with: (tr := connection trHandle)				with: relname				with: sqlname				with: arrayDescriptor.	connection class traceLevel &gt;= 3 		ifTrue: 			[(connection traceStream)				print: rc;				nextPutAll: ' = isc_array_lookup_bounds(status=';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', dbHandle=';				nextPutAll: (db contents referentAddress printStringRadix: 16);				nextPutAll: ', trHandle=';				nextPutAll: (tr contents referentAddress printStringRadix: 16);				nextPutAll: ', tableName= ';				nextPutAll: relname;				nextPutAll: ', columnName= ';				nextPutAll: sqlname;				nextPutAll: ', descriptor=';				nextPutAll: (arrayDescriptor referentAddress printStringRadix: 16);				nextPut: $).			connection class trace: connection emitTrace].	rc ~~ 0 		ifTrue: 			[| errs |			errs := connection getStatusInfo.			^connection class unableToBindSignal raiseWith: errs				errorString: errs first dbmsErrorString].	arrayDimensions := self getArrayDimensions.	itemDescriptor := self getItemDescriptor.	self allocateItemBuffer.	itemBuffer mallocForRowBuffer</body><body package="IBEXDI" selector="getArrayDimensions">getArrayDimensions	| num dims bounds |	num := arrayDescriptor memberAt: #array_desc_dimensions.	bounds := arrayDescriptor refMemberAt: #array_desc_bounds.	dims := Array new: num.	1 to: num		do: 			[:i | 			| ab |			ab := bounds refAt: i - 1.			dims at: i put: (Array with: (ab memberAt: #array_bound_lower)					with: (ab memberAt: #array_bound_upper))].	^dims</body><body package="IBEXDI" selector="getItemDescriptor">getItemDescriptor	| d internalType columnDescrClass |	columnDescrClass := connection class columnDescriptionClass.	d := columnDescrClass new.	d 	ibType: (internalType := InterbaseBlrToSqlTypeMap at: (arrayDescriptor memberAt: #array_desc_dtype) ifAbsent: []) ; "Check this"		type: (columnDescrClass typeFor: (internalType bitAnd: -2)  );		precision: (arrayDescriptor memberAt: #array_desc_length);		scale: (arrayDescriptor memberAt: #array_desc_scale);		nullable: false;		maxColumnConstraint: d precision.	^d</body><body package="IBEXDI" selector="itemCounts">itemCounts	"Calculate item counts"	^self itemCounts: arrayDimensions</body><body package="IBEXDI" selector="itemCounts:">itemCounts: dimensions	"Calculate item counts"	^dimensions inject: 0 into: [: s : dim | s+ dim last -dim first+1]</body><body package="IBEXDI" selector="setArrayDimensions">setArrayDimensions	"Assume: only vectors currently supported"	| dims columnCounts counts valueDims num bounds |	dims := self getArrayDimensions.	valueDims := bufferValue dimensions.	columnCounts :=self itemCounts: dims. 	counts := (self itemCounts: bufferValue dimensions).	counts &gt; columnCounts ifTrue:[^connection class unableToBindSignal raise].	num := valueDims size.	arrayDescriptor memberAt: #array_desc_dimensions put: num.	bounds := arrayDescriptor refMemberAt: #array_desc_bounds.	1 to: num		do: 			[:i | 			| ab |			ab := bounds refAt: i - 1.			ab memberAt: #array_bound_lower put: (valueDims at: i) first.			ab memberAt: #array_bound_upper put: (valueDims at: i) last].	arrayDimensions := valueDims</body></methods><methods><class-id>Database.InterBaseArrayBuffer</class-id> <category>private-data accessing</category><body package="IBEXDI" selector="getArray">getArray	"^bufferValue"	| myId |	myId := Array with: (bufferPointer memberAt: #gds_quad_high)				with: (bufferPointer memberAt: #gds_quad_low).	^(InterBaseArray		forArray: bufferValue		column: sqlname		table: relname		dimensions: arrayDimensions)		arrayId: myId</body><body package="IBEXDI" selector="getArrayValue">getArrayValue	bufferValue:= "self rebuildArray:" itemBuffer getArrayValue.</body><body package="IBEXDI" selector="getFetchedData">getFetchedData	| rc xif sb arrayId sliceLength |	self isNull ifTrue: [^nil].	bufferValue := OrderedCollection new.	sb := self statusVector.	xif := connection class xif.	arrayId := self pointer.	"getNumber."	sliceLength := CIntegerType long malloc: 1.	sliceLength contents: itemBuffer sliceLength.		[rc := xif 				isc_array_get_slice: sb				with: connection databaseHandle				with: connection trHandle				with: arrayId				with: arrayDescriptor				with: itemBuffer pointer				with: sliceLength.	connection class traceLevel &gt;= 3 		ifTrue: 			[(connection traceStream)				print: rc;				nextPutAll: ' = isc_array_getslice(status=';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', dbHandle=';				nextPutAll: (connection databaseHandle contents referentAddress 							printStringRadix: 16);				nextPutAll: ', trHandle=';				nextPutAll: (connection trHandle contents referentAddress 							printStringRadix: 16);				nextPutAll: ', arrayId=';				nextPutAll: (arrayId referentAddress printStringRadix: 16);				nextPutAll: ', arrayDesc=';				nextPutAll: (arrayDescriptor referentAddress printStringRadix: 16);				nextPutAll: ', dest_array=';				nextPutAll: (itemBuffer pointer referentAddress printStringRadix: 16);				nextPutAll: ', slice_length =';				print: sliceLength contents;				nextPut: $).			connection class trace: connection emitTrace].	rc ~~ 0 		ifTrue: 			[| errs |			errs := connection getStatusInfo.			^connection class unableToBindSignal raiseWith: errs				errorString: errs first dbmsErrorString]] 			ensure: [sliceLength == nil ifFalse: [sliceLength freePointer]].	self getArrayValue</body><body package="IBEXDI" selector="putArray:">putArray: anInterBaseArray	bufferValue := anInterBaseArray</body><body package="IBEXDI" selector="putArrayData">putArrayData	"bufferValue := OrderedCollection new.	"	| rc xif sb arrayId sliceLength |	sb := self statusVector.	xif := connection class xif.	arrayId := self pointer.	"getNumber."	bufferValue arrayId == nil 		ifTrue: [arrayId zeroFill]		ifFalse: 			[arrayId memberAt: #gds_quad_high put: bufferValue arrayId first.			arrayId memberAt: #gds_quad_low put: bufferValue arrayId last].	sliceLength := CIntegerType long malloc: 1.	sliceLength contents: itemBuffer sliceLength.		[rc := xif 				isc_array_put_slice: sb				with: connection databaseHandle				with: connection trHandle				with: arrayId				with: arrayDescriptor				with: itemBuffer pointer				with: sliceLength.	connection class traceLevel &gt;= 3 		ifTrue: 			[(connection traceStream)				print: rc;				nextPutAll: ' = isc_array_put_slice(status=';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', dbHandle=';				nextPutAll: (connection databaseHandle contents referentAddress 							printStringRadix: 16);				nextPutAll: ', trHandle=';				nextPutAll: (connection trHandle contents referentAddress 							printStringRadix: 16);				nextPutAll: ', arrayId=';				nextPutAll: (arrayId referentAddress printStringRadix: 16);				nextPutAll: ', arrayDesc=';				nextPutAll: (arrayDescriptor referentAddress printStringRadix: 16);				nextPutAll: ', dest_array=';				nextPutAll: (itemBuffer pointer referentAddress printStringRadix: 16);				nextPutAll: ', slice_length =';				print: sliceLength contents;				nextPut: $).			connection class trace: connection emitTrace].	rc ~~ 0 		ifTrue: 			[| errs |			errs := self statusBuffer getStatusInfo.			^connection class unableToBindSignal raiseWith: errs				errorString: errs first dbmsErrorString]] 			ensure: [sliceLength == nil ifFalse: [sliceLength freePointer]]</body><body package="IBEXDI" selector="rebuildArray:">rebuildArray: anArray"To Do: build array correspond to Interbase array dimensions "</body></methods><methods><class-id>Database.InterBaseArrayBuffer</class-id> <category>private-accessing</category><body package="IBEXDI" selector="connection:">connection: aConnection	connection := aConnection</body><body package="IBEXDI" selector="relname:">relname: aString	relname := aString</body><body package="IBEXDI" selector="sqlname:">sqlname: aString	sqlname := aString</body><body package="IBEXDI" selector="statusBuffer">statusBuffer	^statusBuffer</body></methods><methods><class-id>Database.InterBaseArrayBuffer</class-id> <category>allocation</category><body package="IBEXDI" selector="free">free	super free.	arrayDescriptor == nil ifFalse: [arrayDescriptor freePointer. arrayDescriptor := nil].	itemBuffer  == nil ifFalse: [itemBuffer free. itemBuffer:=nil].	statusBuffer == nil ifFalse: [statusBuffer free. statusBuffer := nil]</body><body package="IBEXDI" selector="mallocBuffer">mallocBuffer	indicatorPointer := CIntegerType short malloc: 1.	indicatorPointer contents: 0.	arrayDescriptor := DefaultArrayDescriptorType malloc: 1.	statusBuffer := connection class statusBufferClass forBuffer: self.	^DefaultQUADPointerType malloc: 1.</body></methods><methods><class-id>Database.InterBaseArrayBuffer class</class-id> <category>instance creation</category><body package="IBEXDI" selector="newFor:type:size:session:">newFor: value type: type size: size session: session	" For input parameters, allocate buffer based on value attributes"	| aType aSize dbType |	aType := #Array.	(dbType := self databaseTypeFor: aType) isNil		ifTrue: [ ^self connectionClass unableToBindSignal raise ].	aSize := size isNil		ifTrue: [ self defaultSizeFor: value type: dbType]		ifFalse: [ size ].	^self new		elementSize: aSize databaseType: dbType;		scale: 0;		nullsPossible: true;"		setSelector: (PutSelectorMap at: aType  ifAbsent: []);"		connection: session connection ;		sqlname: value sqlname;		relname: value relname;		yourself.</body><body package="IBEXDI" selector="newOn:session:">newOn: descr session: aSession^super new		elementSize: descr precision databaseType: descr ibType;		scale: descr scale;		nullsPossible: descr nullable;		connection: aSession connection ;		sqlname: descr name;		relname: descr relname;		yourself.</body></methods><methods><class-id>Database.InterBaseArrayBuffer class</class-id> <category>private-activation</category><body package="IBEXDI" selector="install">install	"self install "	| xif |	(xif := self connectionClass xif) notNil ifTrue: [	(InterbaseBlrToSqlTypeMap := IdentityDictionary new)			add: (xif blr_text -&gt;xif SQL_TEXT  );			add: (xif blr_varying -&gt;xif SQL_VARYING );			add: (xif blr_sql_date -&gt; xif SQL_TYPE_DATE );			add: (xif blr_sql_time -&gt; xif SQL_TYPE_TIME );			add: (xif blr_timestamp -&gt; xif SQL_TIMESTAMP );			add: (xif blr_float -&gt; xif SQL_FLOAT );			add: (xif blr_double -&gt; xif SQL_DOUBLE );			add: (xif blr_short -&gt; xif SQL_SHORT );			add: (xif blr_long -&gt; xif SQL_LONG );			add: (xif blr_int64 -&gt; xif SQL_INT64 );			yourself.	InterbaseSqlToBlrTypeMap := IdentityDictionary new.	InterbaseBlrToSqlTypeMap keysAndValuesDo: [:blr :sql | InterbaseSqlToBlrTypeMap add: sql -&gt; blr].		]</body></methods><methods><class-id>Database.InterBaseArrayBuffer class</class-id> <category>class initialization</category><body package="IBEXDI" selector="initialize">initialize	"InterbaseArrayBuffer initialize"	self install.</body></methods><methods><class-id>Database.InterBaseSession</class-id> <category>private-accessing</category><body package="IBEXDI" selector="bindValuePointersHolder">bindValuePointersHolder	^bindValuePointersHolder</body><body package="IBEXDI" selector="bindValuePointersHolder:">bindValuePointersHolder: aValue	bindValuePointersHolder := aValue</body><body package="IBEXDI" selector="getStatusInfo">getStatusInfo		^self statusBuffer getStatusInfo</body><body package="IBEXDI" selector="hstmt">hstmt	^self hstmtHolder value</body><body package="IBEXDI" selector="hstmt:">hstmt: aCPointerOrNil	| h |	(h := self hstmt) notNil		ifTrue:	[ h free ].	self hstmtHolder value: aCPointerOrNil</body><body package="IBEXDI" selector="hstmtHolder">hstmtHolder	^hstmtHolder</body><body package="IBEXDI" selector="hstmtHolder:">hstmtHolder: aValue	hstmtHolder := aValue</body><body package="IBEXDI" selector="mustResendQuery">mustResendQuery	^self mustResendQueryHolder value</body><body package="IBEXDI" selector="mustResendQuery:">mustResendQuery: aBoolean	self mustResendQueryHolder value: aBoolean</body><body package="IBEXDI" selector="mustResendQueryHolder">mustResendQueryHolder	^mustResendQueryHolder</body><body package="IBEXDI" selector="mustResendQueryHolder:">mustResendQueryHolder: aValue	mustResendQueryHolder := aValue</body><body package="IBEXDI" selector="outSqlda">outSqlda	^outSqldaHolder value</body><body package="IBEXDI" selector="outSqlda:">outSqlda: aCPointerOrNil	| h |	(h := self outSqlda) notNil		ifTrue:	[ h free ].	self outSqldaHolder value: aCPointerOrNil</body><body package="IBEXDI" selector="outSqldaHolder">outSqldaHolder	^outSqldaHolder</body><body package="IBEXDI" selector="outSqldaHolder:">outSqldaHolder: aValue	^outSqldaHolder := aValue</body><body package="IBEXDI" selector="paramDescriptions">paramDescriptions	^paramDescriptions</body><body package="IBEXDI" selector="paramDescriptions:">paramDescriptions: aValue	paramDescriptions := aValue</body><body package="IBEXDI" selector="resultsCache">resultsCache	"Answer the contents of the result cache.  Clear the cache."	| results |	results := resultsCache.	resultsCache := nil.	^results</body><body package="IBEXDI" selector="resultsCache:">resultsCache: results	"Cache results."	resultsCache := results</body><body package="IBEXDI" selector="sqlda">sqlda	^sqldaHolder value</body><body package="IBEXDI" selector="sqlda:">sqlda: aCPointerOrNil	| h |	(h := self sqlda) notNil		ifTrue:	[ h free ].	self sqldaHolder value: aCPointerOrNil</body><body package="IBEXDI" selector="sqldaHolder">sqldaHolder	^sqldaHolder</body><body package="IBEXDI" selector="sqldaHolder:">sqldaHolder: aValue	^sqldaHolder := aValue</body><body package="IBEXDI" selector="statusBuffer">statusBuffer	^statusBufferHolder value</body><body package="IBEXDI" selector="statusBuffer:">statusBuffer: aCPointerOrNil	| sb |	"We may need to free existing space."	(sb := self statusBuffer) notNil		ifTrue:	[ sb free ].	self statusBufferHolder value: aCPointerOrNil</body><body package="IBEXDI" selector="statusBufferHolder">statusBufferHolder	^statusBufferHolder</body><body package="IBEXDI" selector="statusBufferHolder:">statusBufferHolder: aValue	statusBufferHolder := aValue</body><body package="IBEXDI" selector="statusVector">statusVector	^self statusBuffer status</body><body package="IBEXDI" selector="stmtType">stmtType	^stmtType</body><body package="IBEXDI" selector="trHandle">trHandle	^connection transaction trHandle</body><body package="IBEXDI" selector="transaction">transaction	^connection transaction</body><body package="IBEXDI" selector="xif">xif	^self class connectionClass xif</body></methods><methods><class-id>Database.InterBaseSession</class-id> <category>data processing</category><body package="IBEXDI" selector="bindVariable:">bindVariable: name	"Answer the value of a bind variable."	| buffer |	buffer := self bindValuePointers at: name ifAbsent: [ nil ].	buffer isNil ifTrue: [ ^self connection class missingBindVariableSignal raise ].	^buffer value</body><body package="IBEXDI" selector="bindVariable:value:">bindVariable: marker value: value	"Set the value of a SQL variable. 	Value is restricted to objects of the classes 			{String, Text, ByteArray, Integer, Double, Float, FixedPoint, Date, Time, Timestamp, Array, Stream} 	"	| type |	type := value ibConversion.	self bindVariable: marker value: value type: type size: nil</body><body package="IBEXDI" selector="bindVariable:value:type:size:">bindVariable: aName value: aValue type: aType size: aSize	"Set the value of a parameter variable."	| buffer position |	position := aName isInteger ifTrue: [ aName] ifFalse: [(queryFragments indexOf: aName ifAbsent: [self connection class unableToBindSignal ] ) // 2 ].	buffer := self bindValuePointers at: position ifAbsent: [ nil ].	buffer notNil ifTrue:  [ 		[buffer value: aValue ] 			on: self connection class unableToBindSignal 			do: 	[ :ex | self bindValuePointers removeKey: position.				buffer free.				buffer := nil.				ex return ]].	buffer isNil 		ifTrue: [	buffer := self class bufferClass newFor: aValue type: aType size: nil session: self.				buffer 					encoding: self connection encoding;					mallocForParameter;					value: aValue.				buffer bindForInput.				self bindValuePointers at: position put: buffer].	^self</body><body package="IBEXDI" selector="cursorName:">cursorName: aString 	"Set the cursor name associated with receiver. "	| xif szCursor rc |	xif := self class xif.	self hstmt isNil ifTrue: [^nil].		["Begin unwind protection."	szCursor := aString perform: xif copyToHeapSelector.	rc := xif 				isc_dsql_set_cursor_name: self statusVector				with: self hstmt				with: szCursor				with: 0.	traceLevel &gt;= 2 		ifTrue: 			[(self traceStream)				print: rc;				nextPutAll: ' = isc_dsql_set_cursor_name( status=';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', hstmt = ';				nextPutAll: (self hstmt referentAddress printStringRadix: 16);				nextPutAll: ', *szCursor = ';				print: aString;				nextPutAll: ' , 0)'.			self class trace: self emitTrace].	rc == 0 		ifFalse: 			[| errs |			errs := self getStatusInfo.			^self class connectionClass externalDatabaseErrorSignal raiseWith: errs				errorString: errs first dbmsErrorString]	"End unwind protection."] 			ensure: [szCursor notNil ifTrue: [szCursor freePointer]]</body><body package="IBEXDI" selector="prepare:">prepare: aString 	"Prepare aString for processing."	"Based on Aragon ODBC Connect - will speed up StORE "	| stateTemp |	(self hstmt ~~ nil and: [aString = query])		ifTrue: 			["If we are about to prepare a query which is exactly the same as the query processed 			before, we do not need to do the full job of preparing as would be done in the 			superclass's implementation of prepare:. Rather we are able to reuse both the prepared 			statement in the odbc driver, as well as the parameter and column bindings."			self isExecuting ifTrue: ["Should we clean up after any previous work?"				self cancel].			self state == #new ifTrue: ["If not already held, acquire the right to execute SQL statements."				self connect].			((stateTemp := self state) == #connected or: ["Enforce: we're in a legal state to prepare new SQL text."				stateTemp == #prepared]) ifTrue: [self transaction beforePrepare: self]				ifFalse: [self class connectionClass invalidSessionStateSignal raise]]		ifFalse: [super prepare: aString]</body><body package="IBEXDI" selector="rowCount">rowCount	| resultBuffer infoRequest result xif |	xif := self xif.	result := -1.	infoRequest := ByteArray with: xif isc_info_sql_records.		[resultBuffer := CIntegerType char malloc: 64.	xif 		isc_dsql_sql_info: self statusBuffer status		with: self hstmt		with: 1		with: infoRequest		with: 64		with: resultBuffer.	result := xif isc_vax_integer: resultBuffer + 6 with: 4.	result := result + (xif isc_vax_integer: resultBuffer + 13 with: 4).	result := result + (xif isc_vax_integer: resultBuffer + 27 with: 4)] 			ensure: [resultBuffer notNil ifTrue: [resultBuffer free]].	^result</body></methods><methods><class-id>Database.InterBaseSession</class-id> <category>private-binding</category><body package="IBEXDI" selector="bindExternal">bindExternal	"Bind values to parameters in the query, avoiding unnecessary rebinding 	where possible."	"For each bind marker in the query fragments, get the corresponding 	value from the bindInput 	object. If the value isn't already bound, 	bind and remember it."	| leftToRightOrder |	leftToRightOrder := 0.	2 to: queryFragments size by: 2 do:		[ :index | | bindMarker value |		bindMarker := queryFragments at: index.		leftToRightOrder := leftToRightOrder + 1.		value := self inBindInputAt: bindMarker.		( self boundValueAt: bindMarker is: value )			ifFalse: [ self bindValue: value at: leftToRightOrder.					self bindValues at: bindMarker put: value. ] ].</body><body package="IBEXDI" selector="bindParameters">bindParameters	| curSqlvar |	self bindValuePointers		keysAndValuesDo: 			[:pos :buffer | 			curSqlvar := (self sqlda refMemberAt: #sqlvar)						refAt: pos - 1.			curSqlvar memberAt: #sqllen put: buffer elementSize.			curSqlvar memberAt: #sqlscale put: buffer scale.			curSqlvar memberAt: #sqldata put: buffer pointer.			curSqlvar memberAt: #sqltype put: buffer databaseType.			curSqlvar memberAt: #sqlind put: buffer indicatorPointer].	self sqlda memberAt: #sqld put: self bindValuePointers size</body><body package="IBEXDI" selector="bindValue:at:">bindValue: aValue at: position	"Bind a value to a parameter position in the query"	| buffer |		buffer := self bindValuePointers at: position ifAbsent: [ nil ].	buffer notNil ifTrue:  [ 		[buffer value: aValue ] 			on: self connection class unableToBindSignal 			do: 	[ :ex | self bindValuePointers removeKey: position.				buffer free.				buffer := nil.				ex return ]].	buffer isNil 		ifTrue: [	buffer := self class bufferClass newFor: aValue type: aValue ibConversion size: nil session: self.				buffer 					encoding: self connection encoding;					mallocForParameter;					value: aValue.				self bindValuePointers at: position put: buffer].	buffer bindForInput.	^self</body><body package="IBEXDI" selector="bindValuePointers">bindValuePointers	"Answer with the receiver's dictionary of bound value pointers (input parameters)."	| t |	(t:=bindValuePointersHolder value) isNil ifTrue: [ 		bindValuePointersHolder value: (t:=IdentityDictionary new) ].	^t</body><body package="IBEXDI" selector="describeParameters">describeParameters	"Fill in the paramDescriptions array."	|  sqlda lastColumn sqlvarArray descrs curVar col |	self isParameterized ifFalse: [^self paramDescriptions: nil ].	self executeDescribeBind.	sqlda := self sqlda.	lastColumn := sqlda memberAt: #sqld.	sqlvarArray := sqlda refMemberAt: #sqlvar.	descrs := Array new writeStream.	1 to: lastColumn do: [:i |			curVar := sqlvarArray at: i-1.			( col := self class connectionClass columnDescriptionClass new )				sqlvarDef: curVar				index: i 				encoding: self connection encoding.			descrs nextPut: col]. 	self paramDescriptions: (lastColumn &gt; 0 ifTrue: [ descrs contents ] ifFalse: [ nil ]).</body><body package="IBEXDI" selector="executeDescribeBind">executeDescribeBind	| rc xif |	xif := self class xif.	rc := xif 				isc_dsql_describe_bind: self statusBuffer				with: self hstmt				with: 1				with: self sqlda.	"da_version always 1"	traceLevel &gt;= 1 		ifTrue: 			[(self traceStream)				print: rc;				nextPutAll: ' = isc_dsql_describe_bind( status = ';				nextPutAll: (self statusBuffer referentAddress printStringRadix: 16);				nextPutAll: ', hstmt = ';				nextPutAll: (self hstmt contents printStringRadix: 16);				nextPutAll: ', da_version = 1 ';				nextPutAll: ', xsqlda = ';				nextPutAll: (self sqlda referentAddress printStringRadix: 16);				nextPutAll: ' )'.			self class trace: self emitTrace].	rc = 0 		ifFalse: 			[| errs |			errs := self getStatusInfo.			^self class connectionClass unableToPrepareSignal raiseWith: errs				errorString: errs first dbmsErrorString]</body><body package="IBEXDI" selector="releaseBindings">releaseBindings	| bvp  bvps  |	(bvp:=self bindValuePointersHolder value) notNil ifTrue:		[bvps := bvp values.		1 to: bvps size do:			[ :i | | buffer |			(buffer := bvps at: i) notNil ifTrue: [ buffer free ] ].		self bindValuePointersHolder value: nil ].	super releaseBindings</body></methods><methods><class-id>Database.InterBaseSession</class-id> <category>private-execution</category><body package="IBEXDI" selector="acquireExternal">acquireExternal	"Acquire external resources."	| xif phstmt rc |	xif := self xif.		[phstmt := xif isc_stmt_handle perform: xif mallocSelector with: 1.	phstmt contents: 0.	self statusBuffer: (connection class statusBufferClass forSession: self).	rc := xif 				isc_dsql_allocate_statement: self statusBuffer status				with: self connection databaseHandle				with: phstmt.	traceLevel &gt;= 3 		ifTrue: 			[(self traceStream)				print: rc;				nextPutAll: ' = isc_stmt_handle(status=';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', hdbc = ';				nextPutAll: (self connection databaseHandle contents referentAddress 							printStringRadix: 16);				nextPutAll: ', hstmt = ';				nextPutAll: (phstmt contents referentAddress printStringRadix: 16);				nextPutAll: ' )'.			self class trace: self emitTrace].	rc == 0 		ifFalse: 			[| errs |			errs := self connection getStatusInfo.			self class connectionClass unableToAllocateHandleSignal raiseWith: errs				errorString: errs first dbmsErrorString].	self hstmt: phstmt	"End unwind protection."] 			ifCurtailed: 				[self hstmt: nil.				self statusBuffer: nil].	self transaction sessionAcquired: self	"we are acquire new session before first prepare, now we must handle autocommit"</body><body package="IBEXDI" selector="cancelExternal">cancelExternal	"There's nothing to do here.  		Once execution begins, a request cannot be cancelled."	^self</body><body package="IBEXDI" selector="cursorIsDeleted">cursorIsDeleted	"Receiver's cursor was deleted and can no longer be used to access rows from the previous query.  Any prepared statements must be prepared again.  Parameters and bound buffers are still valid."	"If receiver isn't in an executing state, nothing to do."	(self isNeedPrepare ) ifFalse:	[ ^self ].	"If there is an extant answer stream, it's dead so mark it as such."	answerStream notNil ifTrue:		[ answerStream session: nil.		  answerStream := nil ].	"The SQL text must be sent to the server again."	self mustResendQuery: true.	"We're now back in the prepared state"	self state: #prepared.	( traceLevel &gt;= 3 ) ifTrue:		[ (self traceStream)			nextPutAll: 'hstmt = ';			nextPutAll: (self hstmt contents referentAddress printStringRadix: 16); cr; tab;			nextPutAll: 'self mustResendQuery: true. self state: #prepared'.		self class trace: self emitTrace ]</body><body package="IBEXDI" selector="dismissExternal">dismissExternal	"Release the external resources."	"All activity within this method must function with only the instance	variables defined in the executor object."	self freeStatementExternal: #DSQL_drop.	self hstmt: nil.	self outSqlda: nil.	self sqlda: nil.	self statusBuffer: nil.</body><body package="IBEXDI" selector="executeExternal">executeExternal	"Execute the prepared SQL text."	| xif rc |	xif := self class xif.	self transaction beforeExecute: self.	self state: #executing. "sic !"	"Does the query text need to be sent to the server again?"	self mustResendQuery ifTrue:		[ self prepareExternal.		  self mustResendQuery: false ].	self bindParameters.	rc := xif isc_dsql_execute: self statusBuffer status		with: self trHandle		with: self hstmt		with: 1 "XSQLDA version - always 1"		with: self sqlda.	( traceLevel &gt;= 1 ) ifTrue:	[ (self traceStream)			print: rc;  nextPutAll: ' = isc_dsql_execute( status = ';			nextPutAll: (self statusBuffer traceString)	;			nextPutAll: ', trHandle= '; nextPutAll: (self trHandle contents referentAddress printStringRadix: 16);			nextPutAll: ', hstmt= '; nextPutAll: (self hstmt contents referentAddress printStringRadix: 16);			nextPutAll: ', sqlda = '; nextPutAll: (self sqlda referentAddress printStringRadix: 16);			nextPutAll: ' )'.		self class trace: self emitTrace ].	(rc == 0) ifFalse: [self resultsCache: self getStatusInfo ].	self transaction sessionExecuted: self.	"self isDDL ifTrue: [ self connection  isAutocommit ifTrue: [connection hardCommit] ]		ifFalse: [self connection sessionExecuted]." " check this "</body><body package="IBEXDI" selector="freeStatementExternal:">freeStatementExternal: releaseOption 	"Release resources associated with a session."	| xif rc |	self hstmt isNil ifTrue: [^self].	xif := self xif.	rc := xif 				isc_dsql_free_statement: self statusVector				with: self hstmt				with: (xif perform: releaseOption).	traceLevel &gt;= 3 		ifTrue: 			[(self traceStream)				print: rc;				nextPutAll: ' = isc_dsql_free_statement( hstmt = ';				nextPutAll: (self hstmt contents referentAddress printStringRadix: 16);				nextPutAll: ', ';				print: releaseOption;				nextPutAll: ')'.			self class trace: self emitTrace].	(rc == 0 or: [rc == xif isc_lost_db_connection]) 		ifFalse: 			[| errs |			errs := self getStatusInfo.			self class connectionClass unableToFreeResourceSignal raiseWith: errs				errorString: errs first dbmsErrorString]</body><body package="IBEXDI" selector="getTypeOfStatement">getTypeOfStatement	"Answer type of sql statement"	| rc infoItem resBuffer xif |	xif := self class xif.	infoItem := ByteArray with: xif isc_info_sql_stmt_type.	resBuffer := ByteArray new: 10.	rc := xif 				isc_dsql_sql_info: self statusVector				with: self hstmt				with: 1				with: infoItem				with: resBuffer size				with: resBuffer.	"2 ?"	rc = 0 		ifFalse: 			[| errs |			errs := self getStatusInfo.			^self class connectionClass unableToPrepareSignal raiseWith: errs				errorString: errs first dbmsErrorString].	(resBuffer at: 1) ~= xif isc_info_sql_stmt_type 		ifTrue: [self error: 'Can''t get type of statement'].	stmtType := resBuffer at: 4	"dirty hack "	"  stmt_len := xif isc_vax_integer: (resBuffer +1) with: 2.    sqlType := xif isc_vax_integer: (resBuffer+3) with: stmt_len"</body><body package="IBEXDI" selector="installExternal">installExternal	super installExternal.	self hstmt: nil.	self mustResendQuery: false.</body><body package="IBEXDI" selector="moreResultsExternal">moreResultsExternal	"The Interbase doesn't support multiple answers."	^false</body><body package="IBEXDI" selector="prepareExternal">prepareExternal	"Send the query text to the external DBMS to be prepared."	"connection handleAutocommit: self."	| outSqlda xif newSize rc |	self transaction beforePrepare: self.	self prepareQuery.	"self describeParameters."	outSqlda := self outSqlda.	xif := self class xif.	(newSize := outSqlda memberAt: #sqld) &gt; (outSqlda memberAt: #sqln) 		ifTrue: 			["reallocate &amp; describe again"			self outSqlda: (self allocSqlda: newSize).						["Begin unwind protection"			rc := xif 						isc_dsql_describe: self statusVector						with: self hstmt						with: 1						with: self outSqlda.			traceLevel &gt;= 1 				ifTrue: 					[(self traceStream)						print: rc;						nextPutAll: ' = isc_dsql_describe( status = ';						nextPutAll: self statusBuffer traceString;						nextPutAll: ', hstmt = ';						nextPutAll: (self hstmt contents referentAddress printStringRadix: 16);						nextPutAll: ' )'.					self class trace: self emitTrace].			rc = 0 				ifFalse: 					[| errs |					errs := self getStatusInfo.					self class connectionClass unableToPrepareSignal raiseWith: errs						errorString: errs first dbmsErrorString]			"End unwind protection"] 					ifCurtailed: 						[self connection inTransactionMode ifFalse: [self connection rollback]]].	self mustResendQuery: false.	self transaction sessionPrepared: self</body><body package="IBEXDI" selector="prepareQuery">prepareQuery	"Send the query text to the external DBMS to be prepared."	"Prepare the server to execute a query."	| xif sql sqlBa rc |	xif := self class xif.	self allocInSqlda.	self allocOutSqlda.	"Assemble the query, substituting the correct parameter markers."	queryFragments size == 1 		ifTrue: [sql := queryFragments at: 1]		ifFalse: 			[| sqlStream |			sqlStream := (String new: query size) writeStream.			sqlStream nextPutAll: (queryFragments at: 1).			2 to: queryFragments size				by: 2				do: 					[:index | 					sqlStream						nextPut: $?;						nextPutAll: (queryFragments at: index + 1)].			sql := sqlStream contents].	sqlBa := sql asByteArrayEncoding: self connection encoding.		["Begin unwind protection."	rc := xif 				isc_dsql_prepare: self statusBuffer status				with: self trHandle				with: self hstmt				with: sqlBa size				with: sqlBa				with: self dialect				with: self outSqlda.	traceLevel &gt;= 1 		ifTrue: 			[(self traceStream)				print: rc;				nextPutAll: ' = isc_dsql_prepare( status = ';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', trHandle= ';				nextPutAll: (self trHandle contents referentAddress printStringRadix: 16);				nextPutAll: ', hstmt= ';				nextPutAll: (self hstmt contents referentAddress printStringRadix: 16);				nextPutAll: ', sqlStr = ''';				print: sql asString;				nextPutAll: ''', sqlSize = ';				print: sql size;				nextPutAll: ' )'.			self class trace: self emitTrace].	rc = 0 		ifFalse: 			[| errs |			errs := self getStatusInfo.			^self class connectionClass unableToPrepareSignal raiseWith: errs				errorString: errs first dbmsErrorString]	"self getTypeOfStatement."	"need more work"	"End unwind protection"] 			ifCurtailed: 				[self connection inTransactionMode ifFalse: [self connection rollback]]</body><body package="IBEXDI" selector="readyExternal">readyExternal		^true</body><body package="IBEXDI" selector="resultsExternal">resultsExternal	| errs |	(errs := self resultsCache) notNil 		ifTrue: 			[self class connectionClass unableToExecuteSQLSignal raiseWith: errs				errorString: errs first dbmsErrorString.			^false].	^true</body></methods><methods><class-id>Database.InterBaseSession</class-id> <category>private-testing</category><body package="IBEXDI" selector="isDDL">isDDL	^self stmtType = 5 "isc_info_sql_stmt_ddl"</body><body package="IBEXDI" selector="isNeedPrepare">isNeedPrepare	"Answer true if receiver is in an executing state.	Added #prepared"	| state |	^(state := self state) == #executing	or: [state == #ready	or: [state == #validResults	or: [state == #fetchingData	or: [state == #prepared]]]]</body><body package="IBEXDI" selector="isParameterized">isParameterized	^ queryFragments size &gt; 1</body></methods><methods><class-id>Database.InterBaseSession</class-id> <category>private-answer set</category><body package="IBEXDI" selector="advanceExternal">advanceExternal	"Fetch a row."	| xif rc |	xif := self class xif.	rc := xif 				isc_dsql_fetch: self statusBuffer status				with: self hstmt				with: 1				with: self outSqlda.	"XSQLDA version"	traceLevel &gt;= 3 		ifTrue: 			[(self traceStream)				print: rc;				nextPutAll: ' = isc_dsql_fetch( status =';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', hstmt = ';				nextPutAll: (self hstmt referentAddress printStringRadix: 16);				nextPutAll: ' )'.			self class trace: self emitTrace].	rc == 100 ifTrue: [^nil].	"no more rows found"	rc == 0 		ifFalse: 			[| errs |			errs := self getStatusInfo.			^self class connectionClass unableToFetchDataSignal raiseWith: errs				errorString: errs first dbmsErrorString].	self getFetchedData.	^self</body><body package="IBEXDI" selector="allocateRowBufferExternal:">allocateRowBufferExternal: aColumn 	"Allocate a InterbaseBuffer to receive data for aColumn. Answer 	the buffer."	| colDescr buffer curSqlvar |	colDescr := self columnDescriptions at: aColumn.	buffer := (self class bufferClass newOn: colDescr session: self)				encoding: self connection encoding; mallocForRowBuffer.	curSqlvar := (self outSqlda refMemberAt: #sqlvar)				refAt: colDescr index - 1.	curSqlvar memberAt: #sqldata put: buffer pointer referentAddress.	curSqlvar memberAt: #sqlind put: buffer indicatorPointer referentAddress.	buffer bindForOutput.	^buffer</body><body package="IBEXDI" selector="answerOfClass:">answerOfClass: anAnswerStreamClass	"Answer an instance of the given subclass of ExternalDatabaseAnswerStream"	"Assert: anAnswerStreamClass isKindOf: ExternalDatabaseAnswerStream"	| initialAnswer |	initialAnswer := ( self state == #ready ).	self state: #validResults.	initialAnswer		ifTrue:	[ "Verify that the query executed without error."				self resultsExternal ]		ifFalse:	[ "If we're still holding on to a prior answer stream, dismiss it."				answerStream notNil					ifTrue:	[ answerStream close ].				"Assert: self state == #validResults"				self moreResultsExternal					ifFalse:	[ self state: #prepared.							^#noMoreAnswers ] ].	self hasAnswerSetExternal		ifTrue:	[ | answer |				initialAnswer ifFalse:					[ "Previous descriptions/buffers are no longer valid"					self releaseBuffers.					self releaseAdaptors.					self columnDescriptions: nil ].				self getColumnDescriptions.				self acquireBuffers.				self setupAdaptors.				self aboutToAnswer.				answer := anAnswerStreamClass newForSession: self.				self answerStream: answer.				self state: #fetchingData.				^answer ]			ifFalse: [self transaction nonSelectAnswered: self]. "handle autocommit for non-select &amp; DDL"	^#noAnswerStream.</body><body package="IBEXDI" selector="answerStreamDismissed">answerStreamDismissed	"Close the cursor and discard pending results."	self freeStatementExternal: #DSQL_close.	super answerStreamDismissed.	self transaction answerStreamDismissed: self</body><body package="IBEXDI" selector="cancelAnswerSetExternal">cancelAnswerSetExternal	"Release any resources that must be explicitly released."	( self state == #fetchingData ) ifFalse:		[ ^self ].</body><body package="IBEXDI" selector="describeAnswerColumns">describeAnswerColumns	"Fill in the columnDescriptions array."	|  outSqlda lastColumn sqlvarArray descrs curVar col |	outSqlda := self outSqlda.	lastColumn := outSqlda memberAt: #sqld.	sqlvarArray := outSqlda refMemberAt: #sqlvar.	descrs := Array new writeStream.	1 to: lastColumn do: [:i |			curVar := sqlvarArray at: i-1.			( col := self class connectionClass columnDescriptionClass new )				sqlvarDef: curVar				index: i 				encoding: self connection encoding.			descrs nextPut: col]. 	self columnDescriptions: (lastColumn &gt; 0 ifTrue: [ descrs contents ] ifFalse: [ nil ]).	self numColumns: (lastColumn ).</body><body package="IBEXDI" selector="getColumnDescriptionExternal:">getColumnDescriptionExternal: aColumn	"Folded into describeAnswerColumns for efficiency."	^self shouldNotImplement</body><body package="IBEXDI" selector="getColumnDescriptions">getColumnDescriptions	"Get descriptions for the columns in the answer set"	"If column descriptions exist, they're safe to re-use."	( columnDescriptions == nil ) ifFalse: [ ^self ].	self describeAnswerColumns."	( resultTemplate == nil )		ifTrue: [ self describeAnswerColumns ]		ifFalse: [ self answerColumnsFromTemplate ]"</body><body package="IBEXDI" selector="getFetchedData">getFetchedData	self rowBuffers do: [ :buf |  buf getFetchedData ]	.</body><body package="IBEXDI" selector="getFieldExternal:">getFieldExternal: aColumn	"Answer the data for the aColumn-th column in the current row."	^((self rowBuffers) at: aColumn) at: 1</body><body package="IBEXDI" selector="hasAnswerSetExternal">hasAnswerSetExternal	^(self outSqlda memberAt: #sqld) &gt; 0 "select query"</body><body package="IBEXDI" selector="releaseBuffers">releaseBuffers	"Release buffers and their associated resources."	| rbs |	(rbs := self rowBuffers) notNil ifTrue:		[ 1 to: rbs size do: [ :aColumn | (rbs at: aColumn) free ] ].	super releaseBuffers</body></methods><methods><class-id>Database.InterBaseSession</class-id> <category>private-resources</category><body package="IBEXDI" selector="allocInSqlda">allocInSqlda	"Allocate at least a minimum size sqlda, 	but try to reuse one we 	have already allocated."	| numVars ptr |	numVars := queryFragments size quo: 2.	(ptr := self sqlda) isNil		ifTrue: [self sqlda: (self allocSqlda: (numVars max: self minSqlvarSize))]		ifFalse: [numVars &gt; (ptr memberAt: #sqln) ifTrue: [self sqlda: (self allocSqlda: numVars)]]</body><body package="IBEXDI" selector="allocOutSqlda">allocOutSqlda		"Allocate a minimum size sqlda,	but reuse one we have already allocated."	self outSqlda isNil		ifTrue: [ self outSqlda: (self allocSqlda: self minSqlvarSize) ]</body><body package="IBEXDI" selector="allocSqlda:">allocSqlda: sqlvarMax	| xif ptr memSize ptrType |	xif := self xif.	" Only allocate memory for the desired amount of SQLVARs "	memSize := xif XSQLDA_LENGTH: sqlvarMax.	ptrType := self genericType: memSize.	ptr := (ptrType perform: xif mallocSelector with: 1).	" Now cast it as the full structure"	ptr notNil ifTrue: [		ptr :=  xif PXSQLDA cast: ptr.		ptr memberAt: #version put: xif SQLDA_VERSION1.		ptr memberAt: #sqln put: sqlvarMax.		].	^ptr.</body><body package="IBEXDI" selector="genericType:">genericType: memSize	" Allocate memory for a generic type of the desired size "	^ CArrayType new			referentType: CIntegerType char;			numElements: memSize.</body></methods><methods><class-id>Database.InterBaseSession</class-id> <category>accessing</category><body package="IBEXDI" selector="blockFactor:">blockFactor: aSmallInteger	"For Interbase, the blockFactor can only be 1. "	blockFactor := 1</body><body package="IBEXDI" selector="dialect">dialect	^connection dialect</body><body package="IBEXDI" selector="minSqlvarSize">minSqlvarSize	"Answer the minimum number of SQLVARs which will be allocated in an SQLDA."	minSqlvarSize isNil 		ifTrue: [ minSqlvarSize := self class defaultSqlvarSize ].	^minSqlvarSize</body><body package="IBEXDI" selector="minSqlvarSize:">minSqlvarSize: aSmallInteger	"Set the minimum number of SQLVARs which will be		allocated in an SQLDA."	minSqlvarSize := aSmallInteger</body></methods><methods><class-id>Database.InterBaseSession</class-id> <category>initialize-release</category><body package="IBEXDI" selector="initialize">initialize	bindValuePointersHolder :=nil asValue.	statusBufferHolder :=nil asValue.	hstmtHolder := nil asValue. 	mustResendQueryHolder := false asValue.	sqldaHolder := nil asValue.	outSqldaHolder := nil asValue.	super initialize.</body></methods><methods><class-id>Database.InterBaseSession</class-id> <category>private-finalization</category><body package="IBEXDI" selector="executor">executor	"Answer with an executor for the receiver."	| ex |	ex := super executor.	ex hstmtHolder: self hstmtHolder.	ex bindValuePointersHolder: self bindValuePointersHolder.	ex statusBufferHolder: self statusBufferHolder.	ex sqldaHolder: self sqldaHolder.	ex outSqldaHolder: self outSqldaHolder.	^ex</body><body package="IBEXDI" selector="finalizeExternal">finalizeExternal	"Release all external resources"	self releaseBuffersAndAdaptors.	self releaseBindings.	(self hstmt isNil or: [self hstmt referentAddress isNil] ) ifTrue: [ ^self ].	( traceLevel &gt;= 1 ) ifTrue: [ self class trace: nil ].	super finalizeExternal</body><body package="IBEXDI" selector="key">key	"The hstmtHolder is unique to the session and is constant across pause/resume."	^self hstmtHolder</body></methods><methods><class-id>Database.InterBaseSession class</class-id> <category>class initialization</category><body package="IBEXDI" selector="initialize">initialize	"InterbaseSession initialize"	self initRegistry.</body></methods><methods><class-id>Database.InterBaseSession class</class-id> <category>private-accessing</category><body package="IBEXDI" selector="bufferClass">bufferClass	^InterBaseBuffer</body><body package="IBEXDI" selector="connectionClass">connectionClass	^InterBaseDatabase</body><body package="IBEXDI" selector="defaultSqlvarSize">defaultSqlvarSize	"Answer a default number of columns for the result set."	^20</body></methods><methods><class-id>Database.InterBaseSession class</class-id> <category>private-registry</category><body package="IBEXDI" selector="registry">registry	^RegisteredInterbaseSessions</body><body package="IBEXDI" selector="registry:">registry: aCollection	RegisteredInterbaseSessions := aCollection</body></methods><methods><class-id>Database.InterBaseLargeBuffer</class-id> <category>private-accessing</category><body package="IBEXDI" selector="blobHandle">blobHandle	^blobHandle</body><body package="IBEXDI" selector="connection:">connection: aConnection	connection:=aConnection</body><body package="IBEXDI" selector="defaultMaxSize">defaultMaxSize	^1000000 "about 1M"</body><body package="IBEXDI" selector="statusBuffer">statusBuffer	^statusBuffer</body></methods><methods><class-id>Database.InterBaseLargeBuffer</class-id> <category>private-data accessing</category><body package="IBEXDI" selector="closeBlob">closeBlob	| rc xif |	xif := connection class xif.	rc := xif isc_close_blob: self statusVector with: self blobHandle.	connection class traceLevel &gt;= 3 		ifTrue: 			[(connection traceStream)				print: rc;				nextPutAll: ' = isc_close_blob(status=';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', blobHandle=';				nextPutAll: (self blobHandle contents printStringRadix: 16);				nextPut: $).			connection class trace: connection emitTrace].	rc ~= 0 		ifTrue: 			[| errs |			errs := connection getStatusInfo.			^connection class unableToBindSignal raiseWith: errs				errorString: errs first dbmsErrorString]</body><body package="IBEXDI" selector="coalesce">coalesce	"Attempt to coalesce segments of data into a single large segment. 	Assumes very last segment of data is the smallest."	| allocationSize copyIndex largeSegment |	(bufferValue size  &gt; 0 ) 		ifFalse: [^bufferValue := (subtype ==1) ifTrue: [ByteString new] ifFalse: [ByteArray new]].	(bufferValue size  &gt; 1 ) 		ifFalse: [^bufferValue := bufferValue at: 1].	allocationSize := bufferValue inject: 0 into: [:s :x | s+ x size].	"Choose an appropriate object to hold chunks."	largeSegment := (bufferValue at: 1) species new: allocationSize.	copyIndex := 0.	bufferValue do: [:seg | 		largeSegment  replaceFrom: copyIndex + 1					    to: copyIndex + seg size					    with: seg					    startingAt: 1.					    copyIndex := copyIndex + seg size].	"Explicitly discard previously held segments of data and replace with a single large segment."	bufferValue := largeSegment.</body><body package="IBEXDI" selector="defaultSegmentSize">defaultSegmentSize	^16384 "16K default size"</body><body package="IBEXDI" selector="getBlob">getBlob	"^self getNumber"	^bufferValue</body><body package="IBEXDI" selector="getBlobInfoForRead">getBlobInfoForRead	| xif sb p length max_size num_segments total_length rc |	xif := connection class xif.	rc := xif 				isc_blob_info: (sb := self statusVector)				with: self blobHandle				with: 3				with: GetRequestBuffer				with: self defaultResultBufferSize				with: resultBuffer.	connection class traceLevel &gt;= 3 		ifTrue: 			[(connection traceStream)				print: rc;				nextPutAll: ' = isc_blob_info(status=';				nextPutAll: statusBuffer traceString;				nextPutAll: ', blobHandle=';				nextPutAll: (self blobHandle contents printStringRadix: 16);				nextPutAll: ', requestBufferSize=3, requestBuffer=';				nextPutAll: GetRequestBuffer printString;				nextPutAll: ', resultBufferSize=';				nextPutAll: self defaultResultBufferSize printString;				nextPutAll: ', resultBuffer=';				nextPutAll: (resultBuffer referentAddress printStringRadix: 16);				nextPut: $).			connection class trace: connection emitTrace].	((sb at: 0) == 1 and: [(sb at: 1) ~= 0]) 		ifTrue: 			[| errs |			errs := connection getStatusInfo.			^connection class unableToBindSignal raiseWith: errs				errorString: errs first dbmsErrorString].	p := resultBuffer copy.	p += 1.	length := xif isc_vax_integer: p with: 2.	p += 2.	max_size := xif isc_vax_integer: p with: length.	p += length.	p += 1.	length := xif isc_vax_integer: p with: 2.	p += 2.	num_segments := xif isc_vax_integer: p with: length.	p += length.	p += 1.	length := xif isc_vax_integer: p with: 2.	p += 2.	total_length := xif isc_vax_integer: p with: length.	p += length.	"Transcript show: (Array with: max_size with: num_segments with: total_length) printString ; cr."	^Array 		with: max_size		with: num_segments		with: total_length</body><body package="IBEXDI" selector="getFetchedData">getFetchedData	"Retrieve data from BLOB result column."	| rc xif bid bh sb byteArray sz maxSize |	self isNull ifTrue: [^nil].	bufferValue := OrderedCollection new.		sb := self statusVector.	xif := connection class xif.	bid := self pointer.	"getNumber."	bh := self blobHandle. bh contents: 0.	[rc := xif isc_open_blob2: sb				with: connection databaseHandle				with: connection trHandle				with: bh				with: bid				with: 0				with: nil.	(connection class traceLevel &gt;= 3) ifTrue:			[(connection traceStream) 				print: rc; 				nextPutAll: ' = isc_open_blob2(status=';				nextPutAll: (self statusBuffer traceString);				nextPutAll: ', dbHandle=' ;				nextPutAll: (self statusBuffer traceString);				nextPutAll: ', trHandle=' ;				nextPutAll: (self statusBuffer traceString);				nextPutAll: ', blobHandle=' ;				nextPutAll: (bh contents printStringRadix: 16 );				nextPutAll: ', blobId=' ;				nextPutAll: (bid referentAddress printStringRadix: 16 );				nextPut: $).		connection class trace: connection emitTrace].	blobInfo:=self getBlobInfoForRead.	maxSize:=blobInfo at: 1. "max_segment"	self updateSegment: maxSize.	[rc := xif				isc_get_segment: sb				with: bh				with: segmentSize				with: maxSize				with: segment.		(connection class traceLevel &gt;= 3) ifTrue:			[(connection traceStream) 				print: rc; 				nextPutAll: ' = isc_get_segment(status=';				nextPutAll: (self statusBuffer traceString);				nextPutAll: ', blobHandle=' ;				nextPutAll: (bh contents printStringRadix: 16);				nextPutAll: ', segmentSize=' ;				nextPutAll: (segmentSize contents printString);				nextPutAll: ', maxSize=' ;				nextPutAll: (maxSize printString);				nextPutAll: ', segment=' ;				nextPutAll: (segment referentAddress printStringRadix: 16);				nextPut: $).		connection class trace: connection emitTrace].	rc == 0 or: [(sb at: 1) == xif isc_segment]]		whileTrue: 			[sz:=(segmentSize contents min: maxSize).			byteArray := ByteArray new: sz.			segment				copyAt: 0				to: byteArray				size: sz				startingAt: 1.			subtype = 1 ifTrue: [byteArray:= byteArray asStringEncoding: self encoding ]. "TEXT"			bufferValue add: byteArray]]ensure: [self closeBlob].		self coalesce</body><body package="IBEXDI" selector="putBlob:">putBlob: aValue 	| rc xif valueStream bid bh sb chunk bytes |	xif := self class connectionClass xif.	valueStream := aValue reset.	"sic !"	bid := self pointer.	"getNumber."	(bh := self blobHandle) contents: 0.	connection transaction beforeBind: self.		[rc := xif 				isc_create_blob2: (sb := self statusVector)				with: connection databaseHandle				with: connection trHandle				with: bh				with: bid				with: 0				with: nil.	connection class traceLevel &gt;= 3 		ifTrue: 			[(connection traceStream)				print: rc;				nextPutAll: ' = isc_create_blob2(status=';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', dbHandle=';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', trHandle=';				nextPutAll: self statusBuffer traceString;				nextPutAll: ', blobHandle=';				nextPutAll: (bh contents printStringRadix: 16);				nextPutAll: ', blobId=';				nextPutAll: (bid referentAddress printStringRadix: 16);				nextPut: $).			connection class trace: connection emitTrace].	rc ~~ 0 		ifTrue: 			[| errs |			errs := connection getStatusInfo.			^connection class unableToBindSignal raiseWith: errs				errorString: errs first dbmsErrorString].	[valueStream atEnd] whileFalse: 			[chunk := valueStream nextAvailable: currentSegmentSize.			segment 				copyAt: 0				from: chunk				size: (bytes := chunk size)				startingAt: 1.			rc := xif 						isc_put_segment: sb						with: bh						with: bytes						with: segment.			connection class traceLevel &gt;= 3 				ifTrue: 					[(connection traceStream)						print: rc;						nextPutAll: ' = isc_put_segment(status=';						nextPutAll: self statusBuffer traceString;						nextPutAll: ', blobHandle=';						nextPutAll: (bh contents printStringRadix: 16);						nextPutAll: ', segmentSize=';						nextPutAll: segmentSize contents printString;						nextPutAll: ', segment=';						nextPutAll: (segment referentAddress printStringRadix: 16);						nextPut: $).					connection class trace: connection emitTrace].			rc ~~ 0 				ifTrue: 					[| errs |					errs := connection getStatusInfo.					^connection class unableToBindSignal raiseWith: errs						errorString: errs first dbmsErrorString]]] 			ensure: [self closeBlob]</body><body package="IBEXDI" selector="subtype:">subtype: aValue	subtype := aValue</body><body package="IBEXDI" selector="updateSegment:">updateSegment: newSize 	| sz |	newSize &lt;= currentSegmentSize ifTrue: [^self].	segment notNil ifTrue: [segment freePointer].	sz := newSize min: self defaultMaxSize.	[segment := CIntegerType unsignedChar malloc: sz.	currentSegmentSize := sz]		ifCurtailed: [self free]</body></methods><methods><class-id>Database.InterBaseLargeBuffer</class-id> <category>allocation</category><body package="IBEXDI" selector="defaultResultBufferSize">defaultResultBufferSize	^32</body><body package="IBEXDI" selector="free">free	super free.	blobHandle == nil ifFalse: [ blobHandle freePointer ].	blobHandle := nil.	segmentSize == nil ifFalse: [segmentSize freePointer].	segmentSize := nil.	segment == nil ifFalse: [segment freePointer].	segment := nil.	resultBuffer == nil ifFalse: [resultBuffer freePointer].	resultBuffer:=nil.	statusBuffer == nil ifFalse: [statusBuffer free. statusBuffer := nil]</body><body package="IBEXDI" selector="mallocBuffer">mallocBuffer	indicatorPointer := CIntegerType short malloc: 1.	indicatorPointer contents: 0.	blobHandle := CIntegerType long malloc: 1.	"blobHandle contents: 0."	currentSegmentSize:=self defaultSegmentSize.	segment := CIntegerType unsignedChar malloc: currentSegmentSize.	segmentSize := CIntegerType unsignedShort malloc: 1.	resultBuffer:=CIntegerType unsignedChar malloc: self defaultResultBufferSize.	statusBuffer := connection class statusBufferClass forBuffer: self.	^self allocScalarBufferType: (InterbasePointerTypeMap at: (databaseType bitAnd: -2) ifAbsent: []).</body><body package="IBEXDI" selector="mallocForParameter">mallocForParameter	super mallocForParameter.	statusBuffer := connection class statusBufferClass forBuffer: self.	"self updateSegment: (self getBlobInfoForWrite)."</body></methods><methods><class-id>Database.InterBaseLargeBuffer</class-id> <category>initialize-release</category><body package="IBEXDI" selector="elementSize:databaseType:">elementSize: anElementSize databaseType: aDatabaseType	bufferValue:=OrderedCollection new.	subtype:= aDatabaseType == #LargeString ifTrue: [1] ifFalse:[0].	^super elementSize: anElementSize databaseType: aDatabaseType</body></methods><methods><class-id>Database.InterBaseLargeBuffer</class-id> <category>accessing</category><body package="IBEXDI" selector="setNotNull">setNotNull	super setNotNull.		blobHandle contents: 0</body></methods><methods><class-id>Database.InterBaseLargeBuffer class</class-id> <category>class initialization</category><body package="IBEXDI" selector="initialize">initialize	self install</body><body package="IBEXDI" selector="install">install	"InterbaseLargeBuffer install"	| xif |	xif := self connectionClass xif.	LengthPointerType := CPointerType defaultPointer referentType: CIntegerType short.	GetRequestBuffer := ByteArray newInFixedSpace: 3.	PutRequestBuffer := ByteArray newInFixedSpace: 1.	GetRequestBuffer at: 1 put: (xif isc_info_blob_max_segment);		at: 2 put: (xif isc_info_blob_num_segments); 		at: 3 put: (xif isc_info_blob_total_length).	PutRequestBuffer at: 1 put: (xif isc_info_blob_max_segment).</body></methods><methods><class-id>Database.InterBaseLargeBuffer class</class-id> <category>instance creation</category><body package="IBEXDI" selector="newOn:session:">newOn: descr session: aSession	^super new		elementSize: descr precision databaseType: descr ibType;		scale: descr scale;		nullsPossible: descr nullable;		subtype: descr subtype;		connection: aSession connection;		yourself.</body></methods><methods><class-id>Core.Integer</class-id> <category>private-interbase</category><body package="IBEXDI" selector="ibConversion">ibConversion	^#Integer</body></methods><methods><class-id>Core.String</class-id> <category>private-interbase</category><body package="IBEXDI" selector="ibConversion">ibConversion	^#String</body></methods><methods><class-id>Core.Object</class-id> <category>private-interbase</category><body package="IBEXDI" selector="ibConversion">ibConversion	^nil</body></methods><methods><class-id>Core.FixedPoint</class-id> <category>private-interbase</category><body package="IBEXDI" selector="ibConversion">ibConversion	^#FixedPoint</body></methods><methods><class-id>Core.ByteArray</class-id> <category>private-interbase</category><body package="IBEXDI" selector="ibConversion">ibConversion	"Answer the symbolic conversion name for instances of this 	class or subclasses."	^#ByteArray</body></methods><methods><class-id>Core.Double</class-id> <category>private-interbase</category><body package="IBEXDI" selector="ibConversion">ibConversion	^#Double</body></methods><methods><class-id>Core.Timestamp</class-id> <category>private-interbase</category><body package="IBEXDI" selector="ibConversion">ibConversion	^#Timestamp</body></methods><methods><class-id>Core.UndefinedObject</class-id> <category>private-interbase</category><body package="IBEXDI" selector="ibConversion">ibConversion	^#Integer</body></methods><methods><class-id>Core.Time</class-id> <category>private-interbase</category><body package="IBEXDI" selector="ibConversion">ibConversion	^#Time</body></methods><methods><class-id>Core.Text</class-id> <category>private-interbase</category><body package="IBEXDI" selector="ibConversion">ibConversion	^#String</body></methods><methods><class-id>Core.Float</class-id> <category>private-interbase</category><body package="IBEXDI" selector="ibConversion">ibConversion	^#Float</body></methods><methods><class-id>Core.PositionableStream</class-id> <category>private-interbase</category><body package="IBEXDI" selector="ibConversion">ibConversion	(collection isKindOf: ByteArray ) 	ifTrue: [^#LargeByteArray  ].	(collection isKindOf: CharacterArray ) ifTrue: [^#LargeString ].	self error: 'The receiver does not have an appropriate InterBase conversion type.'</body></methods><methods><class-id>Core.Date</class-id> <category>private-interbase</category><body package="IBEXDI" selector="ibConversion">ibConversion	^#Date</body></methods><methods><class-id>Database.InterBaseInterface</class-id> <category>procedures</category><body package="IBEXDI" selector="BLOB_close:">BLOB_close: arg	&lt;C: int BLOB_close(BSTREAM * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="BLOB_display:with:with:with:">BLOB_display: arg1 with: arg2 with: arg3 with: arg4	&lt;C: int BLOB_display(GDS_QUAD * , isc_db_handle, isc_tr_handle, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="BLOB_dump:with:with:with:">BLOB_dump: arg1 with: arg2 with: arg3 with: arg4	&lt;C: int BLOB_dump(GDS_QUAD * , isc_db_handle, isc_tr_handle, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="BLOB_edit:with:with:with:">BLOB_edit: arg1 with: arg2 with: arg3 with: arg4	&lt;C: int BLOB_edit(GDS_QUAD * , isc_db_handle, isc_tr_handle, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="BLOB_get:">BLOB_get: arg	&lt;C: int BLOB_get(BSTREAM * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="BLOB_load:with:with:with:">BLOB_load: arg1 with: arg2 with: arg3 with: arg4	&lt;C: int BLOB_load(GDS_QUAD * , isc_db_handle, isc_tr_handle, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="BLOB_open:with:with:">BLOB_open: arg1 with: arg2 with: arg3	&lt;C: BSTREAM *  BLOB_open(isc_blob_handle, char * , int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="BLOB_put:with:">BLOB_put: arg1 with: arg2	&lt;C: int BLOB_put(char, BSTREAM * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="BLOB_text_dump:with:with:with:">BLOB_text_dump: arg1 with: arg2 with: arg3 with: arg4	&lt;C: int BLOB_text_dump(GDS_QUAD * , isc_db_handle, isc_tr_handle, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="BLOB_text_load:with:with:with:">BLOB_text_load: arg1 with: arg2 with: arg3 with: arg4	&lt;C: int BLOB_text_load(GDS_QUAD * , isc_db_handle, isc_tr_handle, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="Bopen2:with:with:with:with:">Bopen2: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: BSTREAM *  Bopen2(GDS_QUAD * , isc_db_handle, isc_tr_handle, char * , unsigned short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="Bopen:with:with:with:">Bopen: arg1 with: arg2 with: arg3 with: arg4	&lt;C: BSTREAM *  Bopen(GDS_QUAD * , isc_db_handle, isc_tr_handle, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_add_user:with:">isc_add_user: arg1 with: arg2	&lt;C: int isc_add_user(long * , USER_SEC_DATA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_array_gen_sdl:with:with:with:with:">isc_array_gen_sdl: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_array_gen_sdl(long * , ISC_ARRAY_DESC * , short * , char * , short * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_array_get_slice:with:with:with:with:with:with:">isc_array_get_slice: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_array_get_slice(long * , isc_db_handle * , isc_tr_handle * , GDS_QUAD * , ISC_ARRAY_DESC * , void * , long * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_array_lookup_bounds:with:with:with:with:with:">isc_array_lookup_bounds: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_array_lookup_bounds(long * , isc_db_handle * , isc_tr_handle * , char * , char * , ISC_ARRAY_DESC * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_array_lookup_desc:with:with:with:with:with:">isc_array_lookup_desc: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_array_lookup_desc(long * , isc_db_handle * , isc_tr_handle * , char * , char * , ISC_ARRAY_DESC * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_array_put_slice:with:with:with:with:with:with:">isc_array_put_slice: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_array_put_slice(long * , isc_db_handle * , isc_tr_handle * , GDS_QUAD * , ISC_ARRAY_DESC * , void * , long * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_array_set_desc:with:with:with:with:with:with:">isc_array_set_desc: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_array_set_desc(long * , char * , char * , short * , short * , short * , ISC_ARRAY_DESC * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_attach_database:with:with:with:with:with:">isc_attach_database: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_attach_database(long * , short, char * , isc_db_handle * , short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_blob_default_desc:with:with:">isc_blob_default_desc: arg1 with: arg2 with: arg3	&lt;C: void isc_blob_default_desc(ISC_BLOB_DESC * , unsigned char * , unsigned char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_blob_gen_bpb:with:with:with:with:with:">isc_blob_gen_bpb: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_blob_gen_bpb(long * , ISC_BLOB_DESC * , ISC_BLOB_DESC * , unsigned short, unsigned char * , unsigned short * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_blob_info:with:with:with:with:with:">isc_blob_info: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_blob_info(long * , isc_blob_handle * , short, char * , short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_blob_lookup_desc:with:with:with:with:with:with:">isc_blob_lookup_desc: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_blob_lookup_desc(long * , isc_db_handle * , isc_tr_handle * , unsigned char * , unsigned char * , ISC_BLOB_DESC * , unsigned char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_blob_set_desc:with:with:with:with:with:with:">isc_blob_set_desc: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_blob_set_desc(long * , unsigned char * , unsigned char * , short, short, short, ISC_BLOB_DESC * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_cancel_blob:with:">isc_cancel_blob: arg1 with: arg2	&lt;C: long isc_cancel_blob(long * , isc_blob_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_cancel_events:with:with:">isc_cancel_events: arg1 with: arg2 with: arg3	&lt;C: long isc_cancel_events(long * , isc_db_handle * , long * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_close:with:">isc_close: arg1 with: arg2	&lt;C: long isc_close(long * , char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_close_blob:with:">isc_close_blob: arg1 with: arg2	&lt;C: long isc_close_blob(long * , isc_blob_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_commit_retaining:with:">isc_commit_retaining: arg1 with: arg2	&lt;C: long isc_commit_retaining(long * , isc_tr_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_commit_transaction:with:">isc_commit_transaction: arg1 with: arg2	&lt;C: long isc_commit_transaction(long * , isc_tr_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_compile_map:with:with:with:with:">isc_compile_map: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_compile_map(long * , isc_form_handle * , isc_req_handle * , short * , char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_compile_menu:with:with:with:with:">isc_compile_menu: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_compile_menu(long * , isc_form_handle * , isc_req_handle * , short * , char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_compile_request2:with:with:with:with:">isc_compile_request2: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_compile_request2(long * , isc_db_handle * , isc_req_handle * , short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_compile_request:with:with:with:with:">isc_compile_request: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_compile_request(long * , isc_db_handle * , isc_req_handle * , short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_compile_sub_map:with:with:with:with:">isc_compile_sub_map: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_compile_sub_map(long * , isc_win_handle * , isc_req_handle * , short * , char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_create_blob2:with:with:with:with:with:with:">isc_create_blob2: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_create_blob2(long * , isc_db_handle * , isc_tr_handle * , isc_blob_handle * , GDS_QUAD * , short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_create_blob:with:with:with:with:">isc_create_blob: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_create_blob(long * , isc_db_handle * , isc_tr_handle * , isc_blob_handle * , GDS_QUAD * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_create_database:with:with:with:with:with:with:">isc_create_database: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_create_database(long * , short, char * , isc_db_handle * , short, char * , short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_create_window:with:with:with:with:with:">isc_create_window: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_create_window(long * , isc_win_handle * , short * , char * , short * , short * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_database_info:with:with:with:with:with:">isc_database_info: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_database_info(long * , isc_db_handle * , short, char * , short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_ddl:with:with:with:with:">isc_ddl: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_ddl(long * , isc_db_handle * , isc_tr_handle * , short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_declare:with:with:">isc_declare: arg1 with: arg2 with: arg3	&lt;C: long isc_declare(long * , char * , char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_decode_date:with:">isc_decode_date: arg1 with: arg2	&lt;C: void isc_decode_date(GDS_QUAD * , void * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_decode_sql_date:with:">isc_decode_sql_date: arg1 with: arg2	&lt;C: void isc_decode_sql_date(ISC_DATE * , void * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_decode_sql_time:with:">isc_decode_sql_time: arg1 with: arg2	&lt;C: void isc_decode_sql_time(ISC_TIME * , void * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_decode_timestamp:with:">isc_decode_timestamp: arg1 with: arg2	&lt;C: void isc_decode_timestamp(ISC_TIMESTAMP * , void * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_delete_user:with:">isc_delete_user: arg1 with: arg2	&lt;C: int isc_delete_user(long * , USER_SEC_DATA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_delete_window:with:">isc_delete_window: arg1 with: arg2	&lt;C: long isc_delete_window(long * , isc_win_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_describe:with:with:">isc_describe: arg1 with: arg2 with: arg3	&lt;C: long isc_describe(long * , char * , XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_describe_bind:with:with:">isc_describe_bind: arg1 with: arg2 with: arg3	&lt;C: long isc_describe_bind(long * , char * , XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_detach_database:with:">isc_detach_database: arg1 with: arg2	&lt;C: long isc_detach_database(long * , isc_db_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_drive_form:with:with:with:with:with:with:">isc_drive_form: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_drive_form(long * , isc_db_handle * , isc_tr_handle * , isc_win_handle * , isc_req_handle * , unsigned char * , unsigned char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_drive_menu:with:with:with:with:with:with:with:with:with:with:">isc_drive_menu: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7 with: arg8 with: arg9 with: arg10 with: arg11	&lt;C: long isc_drive_menu(long * , isc_win_handle * , isc_req_handle * , short * , char * , short * , char * , short * , short * , char * , long * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_drop_database:with:">isc_drop_database: arg1 with: arg2	&lt;C: long isc_drop_database(long * , isc_db_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_alloc_statement2:with:with:">isc_dsql_alloc_statement2: arg1 with: arg2 with: arg3	&lt;C: long isc_dsql_alloc_statement2(long * , isc_db_handle * , isc_stmt_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_allocate_statement:with:with:">isc_dsql_allocate_statement: arg1 with: arg2 with: arg3	&lt;C: long isc_dsql_allocate_statement(long * , isc_db_handle * , isc_stmt_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_describe:with:with:with:">isc_dsql_describe: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_dsql_describe(long * , isc_stmt_handle * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_describe_bind:with:with:with:">isc_dsql_describe_bind: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_dsql_describe_bind(long * , isc_stmt_handle * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_exec_immed2:with:with:with:with:with:with:with:">isc_dsql_exec_immed2: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7 with: arg8	&lt;C: long isc_dsql_exec_immed2(long * , isc_db_handle * , isc_tr_handle * , unsigned short, char * , unsigned short, XSQLDA * , XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_exec_immed3_m:with:with:with:with:with:with:with:with:with:with:with:with:with:with:with:">isc_dsql_exec_immed3_m: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7 with: arg8 with: arg9 with: arg10 with: arg11 with: arg12 with: arg13 with: arg14 with: arg15 with: arg16	&lt;C: long isc_dsql_exec_immed3_m(long * , isc_db_handle * , isc_tr_handle * , unsigned short, char * , unsigned short, unsigned short, char * , unsigned short, unsigned short, char * , unsigned short, char * , unsigned short, unsigned short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_execute2:with:with:with:with:with:">isc_dsql_execute2: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_dsql_execute2(long * , isc_tr_handle * , isc_stmt_handle * , unsigned short, XSQLDA * , XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_execute2_m:with:with:with:with:with:with:with:with:with:with:with:with:">isc_dsql_execute2_m: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7 with: arg8 with: arg9 with: arg10 with: arg11 with: arg12 with: arg13	&lt;C: long isc_dsql_execute2_m(long * , isc_tr_handle * , isc_stmt_handle * , unsigned short, char * , unsigned short, unsigned short, char * , unsigned short, char * , unsigned short, unsigned short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_execute:with:with:with:with:">isc_dsql_execute: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_dsql_execute(long * , isc_tr_handle * , isc_stmt_handle * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_execute_immediate:with:with:with:with:with:with:">isc_dsql_execute_immediate: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_dsql_execute_immediate(long * , isc_db_handle * , isc_tr_handle * , unsigned short, char * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_execute_immediate_m:with:with:with:with:with:with:with:with:with:with:">isc_dsql_execute_immediate_m: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7 with: arg8 with: arg9 with: arg10 with: arg11	&lt;C: long isc_dsql_execute_immediate_m(long * , isc_db_handle * , isc_tr_handle * , unsigned short, char * , unsigned short, unsigned short, char * , unsigned short, unsigned short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_execute_m:with:with:with:with:with:with:with:">isc_dsql_execute_m: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7 with: arg8	&lt;C: long isc_dsql_execute_m(long * , isc_tr_handle * , isc_stmt_handle * , unsigned short, char * , unsigned short, unsigned short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_fetch:with:with:with:">isc_dsql_fetch: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_dsql_fetch(long * , isc_stmt_handle * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_fetch_m:with:with:with:with:with:with:">isc_dsql_fetch_m: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_dsql_fetch_m(long * , isc_stmt_handle * , unsigned short, char * , unsigned short, unsigned short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_finish:">isc_dsql_finish: arg	&lt;C: long isc_dsql_finish(isc_db_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_free_statement:with:with:">isc_dsql_free_statement: arg1 with: arg2 with: arg3	&lt;C: long isc_dsql_free_statement(long * , isc_stmt_handle * , unsigned short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_insert:with:with:with:">isc_dsql_insert: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_dsql_insert(long * , isc_stmt_handle * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_insert_m:with:with:with:with:with:with:">isc_dsql_insert_m: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_dsql_insert_m(long * , isc_stmt_handle * , unsigned short, char * , unsigned short, unsigned short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_prepare:with:with:with:with:with:with:">isc_dsql_prepare: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_dsql_prepare(long * , isc_tr_handle * , isc_stmt_handle * , unsigned short, char * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_prepare_m:with:with:with:with:with:with:with:with:with:">isc_dsql_prepare_m: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7 with: arg8 with: arg9 with: arg10	&lt;C: long isc_dsql_prepare_m(long * , isc_tr_handle * , isc_stmt_handle * , unsigned short, char * , unsigned short, unsigned short, char * , unsigned short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_release:with:">isc_dsql_release: arg1 with: arg2	&lt;C: long isc_dsql_release(long * , char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_set_cursor_name:with:with:with:">isc_dsql_set_cursor_name: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_dsql_set_cursor_name(long * , isc_stmt_handle * , char * , unsigned short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_dsql_sql_info:with:with:with:with:with:">isc_dsql_sql_info: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_dsql_sql_info(long * , isc_stmt_handle * , short, char * , short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_embed_dsql_close:with:">isc_embed_dsql_close: arg1 with: arg2	&lt;C: long isc_embed_dsql_close(long * , char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_embed_dsql_declare:with:with:">isc_embed_dsql_declare: arg1 with: arg2 with: arg3	&lt;C: long isc_embed_dsql_declare(long * , char * , char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_embed_dsql_describe:with:with:with:">isc_embed_dsql_describe: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_embed_dsql_describe(long * , char * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_embed_dsql_describe_bind:with:with:with:">isc_embed_dsql_describe_bind: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_embed_dsql_describe_bind(long * , char * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_embed_dsql_execute2:with:with:with:with:with:">isc_embed_dsql_execute2: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_embed_dsql_execute2(long * , isc_tr_handle * , char * , unsigned short, XSQLDA * , XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_embed_dsql_execute:with:with:with:with:">isc_embed_dsql_execute: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_embed_dsql_execute(long * , isc_tr_handle * , char * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_embed_dsql_execute_immed:with:with:with:with:with:with:">isc_embed_dsql_execute_immed: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_embed_dsql_execute_immed(long * , isc_db_handle * , isc_tr_handle * , unsigned short, char * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_embed_dsql_fetch:with:with:with:">isc_embed_dsql_fetch: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_embed_dsql_fetch(long * , char * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_embed_dsql_insert:with:with:with:">isc_embed_dsql_insert: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_embed_dsql_insert(long * , char * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_embed_dsql_open2:with:with:with:with:with:">isc_embed_dsql_open2: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_embed_dsql_open2(long * , isc_tr_handle * , char * , unsigned short, XSQLDA * , XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_embed_dsql_open:with:with:with:with:">isc_embed_dsql_open: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_embed_dsql_open(long * , isc_tr_handle * , char * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_embed_dsql_prepare:with:with:with:with:with:with:with:">isc_embed_dsql_prepare: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7 with: arg8	&lt;C: long isc_embed_dsql_prepare(long * , isc_db_handle * , isc_tr_handle * , char * , unsigned short, char * , unsigned short, XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_embed_dsql_release:with:">isc_embed_dsql_release: arg1 with: arg2	&lt;C: long isc_embed_dsql_release(long * , char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_encode_date:with:">isc_encode_date: arg1 with: arg2	&lt;C: void isc_encode_date(void * , GDS_QUAD * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_encode_sql_date:with:">isc_encode_sql_date: arg1 with: arg2	&lt;C: void isc_encode_sql_date(void * , ISC_DATE * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_encode_sql_time:with:">isc_encode_sql_time: arg1 with: arg2	&lt;C: void isc_encode_sql_time(void * , ISC_TIME * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_encode_timestamp:with:">isc_encode_timestamp: arg1 with: arg2	&lt;C: void isc_encode_timestamp(void * , ISC_TIMESTAMP * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_event_block:">isc_event_block: argArray	&lt;C: long isc_event_block(char * * , char * * , unsigned short, ...)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_event_counts:with:with:with:">isc_event_counts: arg1 with: arg2 with: arg3 with: arg4	&lt;C: void isc_event_counts(unsigned long * , short, char * , char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_execute:with:with:with:">isc_execute: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_execute(long * , isc_tr_handle * , char * , XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_execute_immediate:with:with:with:with:">isc_execute_immediate: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_execute_immediate(long * , isc_db_handle * , isc_tr_handle * , short * , char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_expand_dpb:">isc_expand_dpb: argArray	&lt;C: void isc_expand_dpb(char * * , short * , ...)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_fetch:with:with:">isc_fetch: arg1 with: arg2 with: arg3	&lt;C: long isc_fetch(long * , char * , XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_form_delete:with:">isc_form_delete: arg1 with: arg2	&lt;C: long isc_form_delete(long * , isc_form_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_form_fetch:with:with:with:with:">isc_form_fetch: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_form_fetch(long * , isc_db_handle * , isc_tr_handle * , isc_req_handle * , unsigned char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_form_insert:with:with:with:with:">isc_form_insert: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_form_insert(long * , isc_db_handle * , isc_tr_handle * , isc_req_handle * , unsigned char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_free:">isc_free: arg	&lt;C: long isc_free(char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_ftof:with:with:with:">isc_ftof: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_ftof(char * , unsigned short, char * , unsigned short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_get_entree:with:with:with:with:with:">isc_get_entree: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_get_entree(long * , isc_req_handle * , short * , char * , long * , short * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_get_segment:with:with:with:with:">isc_get_segment: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_get_segment(long * , isc_blob_handle * , unsigned short * , unsigned short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_get_slice:with:with:with:with:with:with:with:with:with:with:">isc_get_slice: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7 with: arg8 with: arg9 with: arg10 with: arg11	&lt;C: long isc_get_slice(long * , isc_db_handle * , isc_tr_handle * , GDS_QUAD * , short, char * , short, long * , long, void * , long * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_initialize_menu:with:">isc_initialize_menu: arg1 with: arg2	&lt;C: long isc_initialize_menu(long * , isc_req_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_interprete:with:">isc_interprete: arg1 with: arg2	&lt;C: long isc_interprete(char * , long * * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_load_form:with:with:with:with:with:">isc_load_form: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_load_form(long * , isc_db_handle * , isc_tr_handle * , isc_form_handle * , short * , char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_menu:with:with:with:with:">isc_menu: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_menu(long * , isc_win_handle * , isc_req_handle * , short * , char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_modify_dpb:with:with:with:with:">isc_modify_dpb: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: int isc_modify_dpb(char * * , short * , unsigned short, char * , short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_modify_user:with:">isc_modify_user: arg1 with: arg2	&lt;C: int isc_modify_user(long * , USER_SEC_DATA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_open:with:with:with:">isc_open: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_open(long * , isc_tr_handle * , char * , XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_open_blob2:with:with:with:with:with:with:">isc_open_blob2: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_open_blob2(long * , isc_db_handle * , isc_tr_handle * , isc_blob_handle * , GDS_QUAD * , short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_open_blob:with:with:with:with:">isc_open_blob: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_open_blob(long * , isc_db_handle * , isc_tr_handle * , isc_blob_handle * , GDS_QUAD * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_pop_window:with:">isc_pop_window: arg1 with: arg2	&lt;C: long isc_pop_window(long * , isc_win_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_portable_integer:with:">isc_portable_integer: arg1 with: arg2	&lt;C: ISC_INT64 isc_portable_integer(unsigned char * , short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_prepare:with:with:with:with:with:with:">isc_prepare: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_prepare(long * , isc_db_handle * , isc_tr_handle * , char * , short * , char * , XSQLDA * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_prepare_transaction2:with:with:with:">isc_prepare_transaction2: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_prepare_transaction2(long * , isc_tr_handle * , short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_prepare_transaction:with:">isc_prepare_transaction: arg1 with: arg2	&lt;C: long isc_prepare_transaction(long * , isc_tr_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_print_blr:with:with:with:">isc_print_blr: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_print_blr(char * , isc_callback, void * , short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_print_sqlerror:with:">isc_print_sqlerror: arg1 with: arg2	&lt;C: void isc_print_sqlerror(short, long * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_print_status:">isc_print_status: arg	&lt;C: long isc_print_status(long * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_put_entree:with:with:with:with:">isc_put_entree: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_put_entree(long * , isc_req_handle * , short * , char * , long * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_put_segment:with:with:with:">isc_put_segment: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_put_segment(long * , isc_blob_handle * , unsigned short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_put_slice:with:with:with:with:with:with:with:with:with:">isc_put_slice: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7 with: arg8 with: arg9 with: arg10	&lt;C: long isc_put_slice(long * , isc_db_handle * , isc_tr_handle * , GDS_QUAD * , short, char * , short, long * , long, void * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_qtoq:with:">isc_qtoq: arg1 with: arg2	&lt;C: void isc_qtoq(GDS_QUAD * , GDS_QUAD * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_que_events:with:with:with:with:with:with:">isc_que_events: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_que_events(long * , isc_db_handle * , long * , short, char * , isc_callback, void * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_receive:with:with:with:with:with:">isc_receive: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_receive(long * , isc_req_handle * , short, short, void * , short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_reconnect_transaction:with:with:with:with:">isc_reconnect_transaction: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_reconnect_transaction(long * , isc_db_handle * , isc_tr_handle * , short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_release_request:with:">isc_release_request: arg1 with: arg2	&lt;C: long isc_release_request(long * , isc_req_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_request_info:with:with:with:with:with:with:">isc_request_info: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_request_info(long * , isc_req_handle * , short, short, char * , short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_reset_form:with:">isc_reset_form: arg1 with: arg2	&lt;C: long isc_reset_form(long * , isc_req_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_reset_fpe:">isc_reset_fpe: arg	&lt;C: long isc_reset_fpe(unsigned short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_rollback_retaining:with:">isc_rollback_retaining: arg1 with: arg2	&lt;C: long isc_rollback_retaining(long * , isc_tr_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_rollback_transaction:with:">isc_rollback_transaction: arg1 with: arg2	&lt;C: long isc_rollback_transaction(long * , isc_tr_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_seek_blob:with:with:with:with:">isc_seek_blob: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_seek_blob(long * , isc_blob_handle * , short, long, long * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_send:with:with:with:with:with:">isc_send: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_send(long * , isc_req_handle * , short, short, void * , short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_service_attach:with:with:with:with:with:">isc_service_attach: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_service_attach(long * , unsigned short, char * , isc_svc_handle * , unsigned short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_service_detach:with:">isc_service_detach: arg1 with: arg2	&lt;C: long isc_service_detach(long * , isc_svc_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_service_query:with:with:with:with:with:with:with:with:">isc_service_query: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7 with: arg8 with: arg9	&lt;C: long isc_service_query(long * , isc_svc_handle * , isc_resv_handle * , unsigned short, char * , unsigned short, char * , unsigned short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_service_start:with:with:with:with:">isc_service_start: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_service_start(long * , isc_svc_handle * , isc_resv_handle * , unsigned short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_set_debug:">isc_set_debug: arg	&lt;C: void isc_set_debug(int)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_sql_interprete:with:with:">isc_sql_interprete: arg1 with: arg2 with: arg3	&lt;C: void isc_sql_interprete(short, char * , short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_sqlcode:">isc_sqlcode: arg	&lt;C: long isc_sqlcode(long * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_start_and_send:with:with:with:with:with:with:">isc_start_and_send: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7	&lt;C: long isc_start_and_send(long * , isc_req_handle * , isc_tr_handle * , short, short, void * , short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_start_multiple:with:with:with:">isc_start_multiple: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_start_multiple(long * , isc_tr_handle * , short, void * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_start_request:with:with:with:">isc_start_request: arg1 with: arg2 with: arg3 with: arg4	&lt;C: long isc_start_request(long * , isc_req_handle * , isc_tr_handle * , short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_start_transaction:">isc_start_transaction: argArray	&lt;C: long isc_start_transaction(long * , isc_tr_handle * , short, ...)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_suspend_window:with:">isc_suspend_window: arg1 with: arg2	&lt;C: long isc_suspend_window(long * , isc_win_handle * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_transact_request:with:with:with:with:with:with:with:with:">isc_transact_request: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6 with: arg7 with: arg8 with: arg9	&lt;C: long isc_transact_request(long * , isc_db_handle * , isc_tr_handle * , unsigned short, char * , unsigned short, char * , unsigned short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_transaction_info:with:with:with:with:with:">isc_transaction_info: arg1 with: arg2 with: arg3 with: arg4 with: arg5 with: arg6	&lt;C: long isc_transaction_info(long * , isc_tr_handle * , short, char * , short, char * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_unwind_request:with:with:">isc_unwind_request: arg1 with: arg2 with: arg3	&lt;C: long isc_unwind_request(long * , isc_tr_handle * , short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_vax_integer:with:">isc_vax_integer: arg1 with: arg2	&lt;C: long isc_vax_integer(char * , short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_version:with:with:">isc_version: arg1 with: arg2 with: arg3	&lt;C: int isc_version(isc_db_handle * , isc_callback, void * )&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_vtof:with:with:">isc_vtof: arg1 with: arg2 with: arg3	&lt;C: void isc_vtof(char * , char * , unsigned short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_vtov:with:with:">isc_vtov: arg1 with: arg2 with: arg3	&lt;C: void isc_vtov(char * , char * , short)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="IBEXDI" selector="isc_wait_for_event:with:with:with:with:">isc_wait_for_event: arg1 with: arg2 with: arg3 with: arg4 with: arg5	&lt;C: long isc_wait_for_event(long * , isc_db_handle * , short, char * , char * )&gt;	^self externalAccessFailedWith: _errorCode</body></methods><initialize><class-id>Database.InterBaseInterface</class-id></initialize><initialize><class-id>Database.InterBaseDatabase</class-id></initialize><initialize><class-id>Database.InterBaseBuffer</class-id></initialize><initialize><class-id>Database.InterBaseTransaction</class-id></initialize><initialize><class-id>Database.InterBaseConnection</class-id></initialize><initialize><class-id>Database.IBStatusBuffer</class-id></initialize><initialize><class-id>Database.InterBaseColumnDescription</class-id></initialize><initialize><class-id>Database.InterBaseArrayBuffer</class-id></initialize><initialize><class-id>Database.InterBaseSession</class-id></initialize><initialize><class-id>Database.InterBaseLargeBuffer</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Time</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hours minutes seconds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>ExternalDatabaseSession</name><environment>Database</environment><super>Database.ExternalDatabaseFramework</super><private>false</private><indexed-type>none</indexed-type><inst-vars>connection query queryFragments bindInput bindTemplate bindOutput useNamedOutputBinding bindValues resultTemplate allocateForEachRow blockFactor numColumns columnDescriptions rowAdaptors rowBuffersHolder bufferIndex answerStream currentRow scrollable needBinding </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Interface</category><attributes><package>Database</package></attributes></class><class><name>Float</name><environment>Core</environment><super>Core.LimitedPrecisionReal</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>ExternalDatabaseColumnDescription</name><environment>Database</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name index type length precision scale nullable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Interface</category><attributes><package>Database</package></attributes></class><class><name>ByteArray</name><environment>Core</environment><super>Core.IntegerArray</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Arrayed</category><attributes><package>Collections-Arrayed</package></attributes></class><class><name>ExternalDatabaseTransaction</name><environment>Database</environment><super>Database.ExternalDatabaseFramework</super><private>false</private><indexed-type>none</indexed-type><inst-vars>memberCountHolder remainingCountHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Interface</category><attributes><package>Database</package></attributes></class><class><name>ExternalDatabaseException</name><environment>Database</environment><super>Core.Error</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Interface</category><attributes><package>Database</package></attributes></class><class><name>Double</name><environment>Core</environment><super>Core.LimitedPrecisionReal</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>Timestamp</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>year month day hour minute second millisecond </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Support</category><attributes><package>Magnitude-General</package></attributes></class><class><name>Text</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars>string runs </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>PositionableStream</name><environment>Core</environment><super>Core.PeekableStream</super><private>false</private><indexed-type>none</indexed-type><inst-vars>collection position readLimit writeLimit policy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Streams</category><attributes><package>Collections-Streams</package></attributes></class><class><name>ExternalDatabaseError</name><environment>Database</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dbmsErrorCode dbmsErrorString osErrorCode osErrorString </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Interface</category><attributes><package>Database</package></attributes></class><class><name>UndefinedObject</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Integer</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>ExternalInterface</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>includeFiles includeDirectories libraryFiles libraryDirectories virtual optimizationLevel </class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>External-Interface</category><attributes><package>External-Interface</package></attributes></class><class><name>FixedPoint</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars>numerator denominator scale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>String</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>ExternalDatabaseConnection</name><environment>Database</environment><super>Database.ExternalDatabaseFramework</super><private>false</private><indexed-type>none</indexed-type><inst-vars>transaction username password environment transactionCoordinator cachedSession isolationLevel encoding </inst-vars><class-inst-vars>environmentMap xif xifMap dependents </class-inst-vars><imports></imports><category>Database-Interface</category><attributes><package>Database</package></attributes></class><class><name>Date</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>day year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>ExternalDatabaseBuffer</name><environment>Database</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>databaseType encoding elementSize count bufferPointer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Interface</category><attributes><package>Database</package></attributes></class></st-source>