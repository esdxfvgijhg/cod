<?xml version="1.0"?><st-source><!-- Name: Monticello-ToolsNotice: Copyright © 2010-1999 Cincom Systems, Inc.  All Rights Reserved.Comment: Some basic tools integration for MonticelloDbIdentifier: bear73DbTrace: 316679DevelopmentPrerequisites: #(#(#bundle 'Base VisualWorks' '') #(#bundle 'StoreBase' '') #(#package 'URISupport' '') #(#package 'Monticello' ''))ExplicitPrerequisites: #()Id: d9112969-45ee-4cbc-9d9e-6a287b61fe22IgnoredPrerequisites: #()Namespace: Smalltalk.MonticelloPackageName: Monticello-ToolsParcel: #('Monticello-Tools')PrerequisiteParcels: #(#('Base VisualWorks' '') #('StoreBase' '') #('URISupport' '') #('Monticello' ''))PrintStringCache: (7.7 - mls.13 3,jkott)Url: http://www.squeaksource.com/MonticelloVW/Monticello-Tools-mls.13.mczVersion: 7.7 - mls.13 3Date: 9:55:48 AM January 28, 2011 --><time-stamp>From VisualWorks®, Pre-Release 7.8 (jan11.4) of January 28, 2011 on January 28, 2011 at 9:55:48 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>PublishVersionTool</name><environment>Monticello</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>version author comment filename package ancestor repository repositories </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>Monticello-Tools</package></attributes></class><comment><class-id>Monticello.PublishVersionTool</class-id><body>PublishVersionTool is a dialog to publish a StorePundle as a MCPackage to disk.Instance Variables	ancestor	&lt;MCPackage&gt;	the parent MCPackage	author	&lt;ValueModel&gt;	who is doing the publishing, usually the initials of the developer	comment	&lt;ValueModel&gt;	the publish comment	filename	&lt;ValueModel&gt;	the name of the file we're writing to disk in the package-cache directory	package	&lt;StorePackage&gt;	the store package we're publishing	version	&lt;ValueModel&gt;	the version string for the version we're publishing</body></comment><class><name>PackagesBrowserTool</name><environment>Monticello</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>repositories filter packages latestOnly </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>Monticello-Tools</package></attributes></class><comment><class-id>Monticello.PackagesBrowserTool</class-id><body>PackagesBrowserTool provides access to Monticello repositories, to browse their contents and load their packages.Instance Variables	filter	&lt;ValueModel&gt;	description of filter	latestOnly	&lt;ValueModel&gt;	description of latestOnly	packages	&lt;SelectionInList&gt;	description of packages	repositories	&lt;SelectionInList&gt;	description of repositories</body></comment><shared-variable><name>LastRepositoryAddress</name><environment>Tools.VisualLauncher</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>String new</initializer><attributes><package>Monticello-Tools</package></attributes></shared-variable><shared-variable><name>DefaultAuthor</name><environment>Monticello.PublishVersionTool</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>#guest asString</initializer><attributes><package>Monticello-Tools</package></attributes></shared-variable><shared-variable><name>Passwords</name><environment>Monticello.PublishVersionTool</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>Dictionary new</initializer><attributes><package>Monticello-Tools</package></attributes></shared-variable><methods><class-id>Monticello.PublishVersionTool</class-id> <category>actions</category><body package="Monticello-Tools" selector="cancel">cancel	self closeAndUnschedule</body><body package="Monticello-Tools" selector="publish">publish	| mcpackage |	mcpackage := package asMCPackage: ancestor version: self version value author: self author value comment: self comment value asString.	mcpackage url: self repository value asURI, self filename value.	mcpackage writeToDisk: self filename value asFilename.	mcpackage url protocol = 'http' ifTrue: [Cursor wait showWhile: [self upload: mcpackage]].	(Store.Registry packageNamed: package name)		propertyAt: #id put: (mcpackage metadata at: #id);		propertyAt: #url put: mcpackage url asString;		propertyAt: #version put: version value.	self storePublish: mcpackage.	self cancel</body><body package="Monticello-Tools" selector="storePublish:">storePublish: mcpackage	| dialog original pundle |	pundle := Store.Registry packageNamed: mcpackage name.	dialog := Store.PublishPackageDialog basicNew.	dialog initialize.	dialog package: pundle.	dialog blessingComment value: self comment value.	original := (pundle versionString readStream next; upTo: $,) tokensBasedOn: $-.	original size &gt; 1		ifTrue:	[dialog versionString value: original first trimBlanks, ' - ', mcpackage author, '.', mcpackage version, ' 1']		ifFalse:	[dialog versionString value: self version value].	dialog open</body><body package="Monticello-Tools" selector="updateFilename">updateFilename	DefaultAuthor := self author value.	self filename value: (package name, '-', self author value, '.', self version value, '.mcz')</body><body package="Monticello-Tools" selector="updateRepositories">updateRepositories	| url |	self repositories value: (MCRepository repositories collect: [:each | each asString]).	url := (package properties at: #url ifAbsent: [^self]) asURI.	url path removeLast; add: ''.	self repository value:		(MCRepository repositories			detect:	[:each | url = each]			ifNone:	[MCRepository repositories first]) asString</body><body package="Monticello-Tools" selector="upload:">upload: mcpackage	| data client request response password |	password := Passwords at: mcpackage author ifAbsent:		[password := SimplePasswordDialog new request: 'Password for ', mcpackage author initialAnswer: '' onCancel: [^self].		password isEmpty ifTrue: [^self].		Passwords at: mcpackage author put: password.		password].	data := ('package-cache' asFilename / self filename value) contentsOfEntireBinaryFile.	client := Net.HttpClient new.	request := client requestClass put: mcpackage url asString.	request contents: data.	client request: request.	client username: mcpackage author password: password.	client doNotChunk.	[response := client executeAndGetResponse]		on: Net.HttpUnauthorizedError do:			[Passwords removeKey: mcpackage author ifAbsent: [].			^self upload: mcpackage].	response isSuccess ifFalse: [Dialog warn: 'Upload failed'].</body></methods><methods><class-id>Monticello.PublishVersionTool</class-id> <category>aspects</category><body package="Monticello-Tools" selector="author">author	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^author isNil		ifTrue:			[author := DefaultAuthor asValue]		ifFalse:			[author]</body><body package="Monticello-Tools" selector="comment">comment	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^comment isNil		ifTrue:			[comment := String new asValue]		ifFalse:			[comment]</body><body package="Monticello-Tools" selector="filename">filename	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^filename isNil		ifTrue:			[filename := String new asValue]		ifFalse:			[filename]</body><body package="Monticello-Tools" selector="repositories">repositories	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^repositories isNil		ifTrue:			[repositories := List new asValue]		ifFalse:			[repositories]</body><body package="Monticello-Tools" selector="repository">repository	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^repository isNil		ifTrue:			[repository := String new asValue]		ifFalse:			[repository]</body><body package="Monticello-Tools" selector="version">version	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^version isNil		ifTrue:			[version := '1' copy asValue]		ifFalse:			[version]</body></methods><methods><class-id>Monticello.PublishVersionTool</class-id> <category>accessing</category><body package="Monticello-Tools" selector="package">package	^package</body><body package="Monticello-Tools" selector="package:">package: anObject	| session |	session := Store.Glorp.StoreLoginFactory currentStoreSession.	package := anObject asNewStorePundleIn: session.	(package properties at: #url ifAbsent: [nil]) ifNotNil: [:url | ancestor := Monticello.MCPackage at: url].	ancestor ifNil:		[self updateFilename.		self updateRepositories.		^self].	self version value: (ancestor version asNumber + 1) printString.	self author value = 'guest' ifTrue: [self author value: package username].	self updateFilename.	self updateRepositories</body></methods><methods><class-id>Monticello.PackagesBrowserTool</class-id> <category>notifications</category><body package="Monticello-Tools" selector="filterChanged">filterChanged	packages setList: self repositoryPackagesFiltered selecting: packages selection</body><body package="Monticello-Tools" selector="packageSelected">packageSelected	self updateToolbar.	self updateTitle</body><body package="Monticello-Tools" selector="repositorySelected">repositorySelected	packages list: self repositoryPackagesFiltered.	self updateToolbar.	self updateTitle</body></methods><methods><class-id>Monticello.PackagesBrowserTool</class-id> <category>actions</category><body package="Monticello-Tools" selector="addRepository">addRepository	| url |	url := Dialog request: 'Repository URL'.	url ifNil: [^self].	url isEmpty ifTrue: [^self].	url last ~= $/ ifTrue: [url := url, '/'].	[url := url asURI] on: Error do: [^self].	Cursor wait showWhile: [MCRepository at: url].	self repositories list: MCRepository repositories.	self repositories selection: url.	self repositorySelected</body><body package="Monticello-Tools" selector="browsePackage">browsePackage	| state |	state := Refactory.Browser.NavigatorState new.	state pundle: (Store.Registry packageNamed: (self packageName: packages selection)).	Refactory.Browser.RefactoringBrowser open navigator updateWithState: state</body><body package="Monticello-Tools" selector="editRepository">editRepository	| url |	url := Dialog request: 'Repository URL' initialAnswer: repositories selection asString.	url ifNil: [^self].	url isEmpty ifTrue: [^self].	url last ~= $/ ifTrue: [url := url, '/'].	[url := url asURI] on: Error do: [^self].	url = repositories selection ifTrue: [^self].	MCRepository removeRepository: repositories selection.	Cursor wait showWhile: [MCRepository at: url].	self repositories list: MCRepository repositories.	self repositories selection: url.	self repositorySelected</body><body package="Monticello-Tools" selector="importPackage">importPackage	| pundle dialog original package |	package := MCPackage at: packages selection.	pundle := Store.Registry packageNamed: package name.	original := (pundle versionString readStream next; upTo: $,) tokensBasedOn: $-.	original size &gt; 1 ifTrue: [package version: original first trimBlanks, ' - ', package author, '.', package version, ' 1'].	package import.	pundle := Store.Registry packageNamed: package name.	Store.DbRegistry doIfOnlineImage:		[Cursor wait showWhile:			[dialog := Store.PublishPackageDialog basicNew.			dialog initialize.			dialog package: pundle.			dialog blessingLevel value: Store.Policies blessingPolicy mergedBlessing.			dialog versionString value: package version.			dialog blessingComment value: (package metadata at: #message ifAbsent: ['']).			dialog open]].	self filterChanged</body><body package="Monticello-Tools" selector="loadPackage">loadPackage	(MCPackage at: packages selection) load.	self filterChanged</body><body package="Monticello-Tools" selector="mergePackage">mergePackage	(MCPackage at: packages selection) merge.	self filterChanged</body><body package="Monticello-Tools" selector="refreshRepository">refreshRepository	Cursor wait showWhile: [self repository refresh].	self repositorySelected</body><body package="Monticello-Tools" selector="removeRepository">removeRepository	MCRepository removeRepository: repositories selection.	self repositories list: MCRepository repositories.	self repositorySelected</body><body package="Monticello-Tools" selector="updateTitle">updateTitle	builder window label: self title</body><body package="Monticello-Tools" selector="updateToolbar">updateToolbar	(self widgetAt: #toolbarMenu) updateMenu</body></methods><methods><class-id>Monticello.PackagesBrowserTool</class-id> <category>testing</category><body package="Monticello-Tools" selector="isPackageSelected">isPackageSelected	^packages selection notNil</body><body package="Monticello-Tools" selector="isPackageSelectedAndLoaded">isPackageSelectedAndLoaded	self isPackageSelected ifFalse: [^false].	^(Store.Registry packageNamed: (self packageName: packages selection)) notNil</body><body package="Monticello-Tools" selector="isRepositorySelected">isRepositorySelected	^repositories selection notNil</body></methods><methods><class-id>Monticello.PackagesBrowserTool</class-id> <category>accessing</category><body package="Monticello-Tools" selector="packageName:">packageName: url	(url tail includes: $-) ifFalse: [^url tail allButLast: 4].	^url tail first: (url tail lastIndexOf: $-) - 1</body><body package="Monticello-Tools" selector="packageVersion:">packageVersion: url	(url tail includes: $-) ifFalse: [^''].	^(url tail allButFirst: (url tail lastIndexOf: $-)) allButLast: 4</body><body package="Monticello-Tools" selector="repository">repository	repositories selection ifNil: [^nil].	^(MCRepository hasRepository: repositories selection)		ifTrue: [MCRepository at: repositories selection]		ifFalse: [Cursor wait showWhile: [MCRepository at: repositories selection]]</body><body package="Monticello-Tools" selector="repositoryPackages">repositoryPackages	^self repository		ifNil:	[OrderedCollection new]		ifNotNil:	[:repository | repository packages]</body><body package="Monticello-Tools" selector="repositoryPackagesFiltered">repositoryPackagesFiltered	| filters filtered |	filters := (filter value tokensBasedOn: $ ) reject: [:each | each isEmpty].	filtered := self repositoryPackages collect: [:each | each -&gt; each tail asLowercase].	latestOnly value ifTrue:		[ | seen |		seen := Set new.		filtered := filtered select: [:package |			| name |			name := package value first: (package value lastIndexOf: $-).			(seen includes: name)				ifTrue: [false]				ifFalse: [seen add: name. true]]].	filters do: [:each |		| theFilter |		theFilter := each first = $- ifTrue: [each allButFirst: 1] ifFalse: [each].		each first = $-			ifFalse:	[filtered := filtered select: [:package | (package value indexOfSubCollection: theFilter startingAt: 1) &gt; 0]]			ifTrue:	[filtered := filtered reject: [:package | (package value indexOfSubCollection: theFilter startingAt: 1) &gt; 0]]].	^filtered collect: [:each | each key]</body><body package="Monticello-Tools" selector="title">title	packages selection ifNotNil: [^(self packageName: packages selection), ' ', (self packageVersion: packages selection), ' - ', repositories selection tail, ' - Monticello Packages'].	repositories selection ifNotNil: [^repositories selection tail, ' - Monticello Packages'].	^'Monticello Packages'</body></methods><methods><class-id>Monticello.PackagesBrowserTool</class-id> <category>interface opening</category><body package="Monticello-Tools" selector="createPackageWidget:at:">createPackageWidget: view at: index	| package name version top bottom smaller side |	package := view sequence at: index.	name := self packageName: package.	version := self packageVersion: package.	(Store.Registry packageNamed: name) ifNotNil: [:existing |		| url |		url := existing propertyAt: #url.		url = package asString ifTrue:			[name := name asText allBold.			version := version asText allBold].		(latestOnly value and: [url notNil and: [url ~= package asString]]) ifTrue:			[version := version, ' (loaded: ', (self packageVersion: url asURI), ')'.			name := name asText allItalic.			version := version asText allItalic]].	smaller := view textStyle copy.	smaller setCharacterAttributes: smaller characterAttributes copy.	smaller scalingFactor: 0.75.	top := Label with: name attributes: view textStyle.	side := Label with: version attributes: view textStyle.	bottom := Label with: (view sequence at: index) asString attributes: smaller.	^CompositePart new		add: top at: 2@2;		add: side at: (2 + top bounds width + 4) @ 2;		add: bottom at: 2@(top bounds height + 2);		yourself</body><body package="Monticello-Tools" selector="createRepositoryWidget:at:">createRepositoryWidget: view at: index	| top bottom smaller |	smaller := view textStyle copy.	smaller setCharacterAttributes: smaller characterAttributes copy.	smaller scalingFactor: 0.75.	top := Label with: (view sequence at: index) tail attributes: view textStyle.	bottom := Label with: (view sequence at: index) asString attributes: smaller.	^CompositePart new		add: top at: 2@2;		add: bottom at: 2@(top bounds height + 2);		yourself</body><body package="Monticello-Tools" selector="postBuildWith:">postBuildWith: aBuilder	| widget |	super postBuildWith: aBuilder.	" Configure the filter widget "	(aBuilder componentAt: #Filter) widget controller continuousAccept: true.	" Configure the Repositories list "	(widget := (aBuilder componentAt: #Repositories) widget)		lineGrid: [widget textStyle lineGrid * 2 + 4];		visualBlock: [:view :index | BoundedWrapper on: (self createRepositoryWidget: view at: index)];		selectedVisualBlock: [:view :index |			| rw |			rw := ReversingWrapper on: (self createRepositoryWidget: view at: index).			rw reverse setValue: true.			BoundedWrapper on: rw].	" Configure the Packages list"	(widget := (aBuilder componentAt: #Packages) widget)		lineGrid: [widget textStyle lineGrid * 2 + 4];		visualBlock: [:view :index | BoundedWrapper on: (self createPackageWidget: view at: index)];		selectedVisualBlock: [:view :index |			| rw |			rw := ReversingWrapper on: (self createPackageWidget: view at: index).			rw reverse setValue: true.			BoundedWrapper on: rw]</body></methods><methods><class-id>Monticello.PackagesBrowserTool</class-id> <category>aspects</category><body package="Monticello-Tools" selector="filter">filter	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^filter isNil		ifTrue:			[filter := String new asValue]		ifFalse:			[filter]</body><body package="Monticello-Tools" selector="latestOnly">latestOnly	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^latestOnly isNil		ifTrue:			[latestOnly := true asValue]		ifFalse:			[latestOnly]</body><body package="Monticello-Tools" selector="packages">packages	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^packages isNil		ifTrue:			[packages := SelectionInList new]		ifFalse:			[packages]</body><body package="Monticello-Tools" selector="repositories">repositories	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^repositories isNil		ifTrue:			[repositories := SelectionInList new]		ifFalse:			[repositories]</body></methods><methods><class-id>Monticello.PackagesBrowserTool</class-id> <category>initialize-release</category><body package="Monticello-Tools" selector="initialize">initialize	super initialize.	"Search for extra repositories sourced from loaded packages."	Store.Registry packagesDo: [:package |		| url |		url := (package propertyAt: #url) ifNotNil: #asURI.		url ifNotNil:			[url path removeLast; add: ''.			(MCRepository repositories includes: url) ifFalse: [MCRepository at: url]]].	"Refresh the on-disk repository."	MCRepository repositories do: [:each | (each protocol = 'file') ifTrue: [(MCRepository at: each) refresh]].	self repositories list: MCRepository repositories</body></methods><methods><class-id>Monticello.PublishVersionTool class</class-id> <category>interface specs</category><body package="Monticello-Tools" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Publish Version' 			#bounds: #(#{Graphics.Rectangle} 1746 715 2293 1160 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 5 5 ) 					#name: #VersionLabel 					#label: 'Version:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 25 0 -5 1 47 0 ) 					#name: #VersionInputField 					#model: #version 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateFilename ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 5 52 ) 					#name: #AuthorLabel 					#label: 'Author:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 72 0 -5 1 94 0 ) 					#name: #AuthorInputField 					#model: #author 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateFilename ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 5 99 ) 					#name: #CommentLabel 					#label: 'Comment:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 119 0 -5 1 -114 1 ) 					#name: #CommentTextEditor 					#model: #comment 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 -108 1 -205 1 -88 1 ) 					#name: #RepositoryLabel 					#label: 'Repository:' ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 -86 1 -205 1 -64 1 ) 					#name: #RepositoryComboBox 					#model: #repository 					#comboList: #repositories ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 -54 1 -205 1 -34 1 ) 					#name: #FilenameLabel 					#label: 'Filename:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 -32 1 -205 1 -10 1 ) 					#name: #FilenameInputField 					#model: #filename ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -190 1 -32 1 -110 1 -12 1 ) 					#name: #PublishActionButton 					#model: #publish 					#label: 'Publish' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -100 1 -32 1 -20 1 -12 1 ) 					#name: #CancelActionButton 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Monticello.PackagesBrowserTool class</class-id> <category>resources</category><body package="Monticello-Tools" selector="packagesMenu">packagesMenu	"Tools.MenuEditor new openOnClass: self andSelector: #packagesMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Browse' 				#enabled: false 				#nameKey: #browsePackage 				#value: #browsePackage 				#enablementSelector: #isPackageSelectedAndLoaded ) 			#(#{UI.MenuItem} 				#rawLabel: 'Load' 				#enabled: false 				#nameKey: #loadPackage 				#value: #loadPackage 				#enablementSelector: #isPackageSelected ) 			#(#{UI.MenuItem} 				#rawLabel: 'Merge' 				#enabled: false 				#nameKey: #mergePackage 				#value: #mergePackage 				#enablementSelector: #isPackageSelectedAndLoaded ) 			#(#{UI.MenuItem} 				#rawLabel: 'Import' 				#enabled: false 				#nameKey: #importPackage 				#value: #importPackage 				#enablementSelector: #isPackageSelectedAndLoaded ) ) #(1 3 ) nil ) decodeAsLiteralArray</body><body package="Monticello-Tools" selector="repositoriesMenu">repositoriesMenu	"Tools.MenuEditor new openOnClass: self andSelector: #repositoriesMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Refresh' 				#enabled: false 				#nameKey: #refreshRepository 				#value: #refreshRepository 				#enablementSelector: #isRepositorySelected ) 			#(#{UI.MenuItem} 				#rawLabel: 'Properties' 				#enabled: false 				#nameKey: #editRepository 				#value: #editRepository 				#enablementSelector: #isRepositorySelected ) 			#(#{UI.MenuItem} 				#rawLabel: 'Remove' 				#enabled: false 				#nameKey: #removeRepository 				#value: #removeRepository 				#enablementSelector: #isRepositorySelected ) 			#(#{UI.MenuItem} 				#rawLabel: 'Add' 				#nameKey: #addRepository 				#value: #addRepository ) ) #(3 1 ) nil ) decodeAsLiteralArray</body><body package="Monticello-Tools" selector="toolbarMenu">toolbarMenu	"Tools.MenuEditor new openOnClass: self andSelector: #toolbarMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Refresh' 				#enabled: false 				#nameKey: #refreshRepository 				#value: #refreshRepository 				#enablementSelector: #isRepositorySelected 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #doIt ) 				#helpText: 'Refresh Repository' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Add...' 				#nameKey: #addRepository 				#value: #addRepository 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #addRepository ) 				#helpText: 'Add Repository' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Properties' 				#enabled: false 				#nameKey: #editRepository 				#value: #editRepository 				#enablementSelector: #isRepositorySelected 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #properties ) 				#helpText: 'Edit Repository' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Remove' 				#enabled: false 				#nameKey: #removeRepository 				#value: #removeRepository 				#enablementSelector: #isRepositorySelected 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #delete ) 				#helpText: 'Remove Repository' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Load' 				#enabled: false 				#nameKey: #loadPackage 				#value: #loadPackage 				#enablementSelector: #isPackageSelected 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #loadParcel ) 				#helpText: 'Load into image' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Merge' 				#enabled: false 				#nameKey: #mergePackage 				#value: #mergePackage 				#enablementSelector: #isPackageSelectedAndLoaded 				#labelImage: #(#{UI.ResourceRetriever} #{Store.MergeIcons} #bigApply ) 				#helpText: 'Merge into image' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Import' 				#enabled: false 				#enablementSelector: #isPackageSelectedAndLoaded 				#labelImage: #(#{UI.ResourceRetriever} #{Store.MergeIcons} #applyAll ) 				#helpText: 'Import into image and publish' ) ) #(1 3 3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Monticello.PackagesBrowserTool class</class-id> <category>interface specs</category><body package="Monticello-Tools" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Monticello Packages' 			#bounds: #(#{Graphics.Rectangle} 1814 800 2560 1307 ) 			#toolBar: #toolbarMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -110 0.33 0 1 ) 					#name: #Repositories 					#model: #repositories 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #repositorySelected ) 					#menu: #repositoriesMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} -104 0.33 24 0 0 1 0 1 ) 					#name: #Packages 					#model: #packages 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #packageSelected ) 					#menu: #packagesMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -105 0.33 0 0 -75 1 24 0 ) 					#name: #Filter 					#model: #filter 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #filterChanged ) ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -109 0.33 0 0 -105 0.33 0 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'Repositories' 					#belowWidgets: 'Filter Packages Latest' ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} -75 1 3 0 0 1 19 0 ) 					#name: #Latest 					#model: #latestOnly 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #filterChanged ) 					#label: 'Latest' ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>actions</category><body package="Monticello-Tools" selector="isMonticelloPackageSelected">isMonticelloPackageSelected	| pundle |	(pundle := self pundle) ifNil: [^false].	pundle isPackage ifFalse: [^false].	pundle propertyAt: #url ifAbsent: [^false].	^true</body><body package="Monticello-Tools" selector="monticelloImport">monticelloImport	&lt;menuItem: 'Import Version...'		icon: nil		nameKey: #importVersion		enablement: #isMonticelloPackageSelected		indication: nil		menu: #(#pundleMenu #monticello)		position: 1.0&gt;	| version package pundle dialog original |	version := self pickMonticelloVersion: 'Merge Version'.	version ifNil: [^self].	package := Monticello.MCPackage at: version.	original := (self pundle versionString readStream next; upTo: $,) tokensBasedOn: $-.	original size &gt; 1 ifTrue: [package version: original first trimBlanks, ' - ', package author, '.', package version, ' 1'].	package import.	pundle := Store.Registry packageNamed: package name.	self dbRegistry doIfOnlineImage:		[self showWaitCursorWhile:			[dialog := Store.PublishPackageDialog new.			dialog package: pundle.			dialog blessingLevel value: Store.Policies blessingPolicy mergedBlessing.			dialog versionString value: package version.			dialog blessingComment value: (package metadata at: #message ifAbsent: ['']).			dialog open]]</body><body package="Monticello-Tools" selector="monticelloInspect">monticelloInspect	&lt;menuItem: 'Inspect Version...'		icon: nil		nameKey: #inspectVersion		enablement: #isMonticelloPackageSelected		indication: nil		menu: #(#pundleMenu #monticello)		position: 2.0&gt;	| version |	version := self pickMonticelloVersion: 'Inspect Version'.	version ifNil: [^self].	(Monticello.MCPackage at: version) inspect</body><body package="Monticello-Tools" selector="monticelloLoad">monticelloLoad	&lt;menuItem: 'Load Version...'		icon: nil		nameKey: #loadVersion		enablement: #isMonticelloPackageSelected		indication: nil		menu: #(#pundleMenu #monticello)		position: 0.0&gt;	| version |	version := self pickMonticelloVersion: 'Load Version'.	version ifNil: [^self].	(Monticello.MCPackage at: version) load</body><body package="Monticello-Tools" selector="monticelloMenu">monticelloMenu	&lt;submenu: 'Monticello'		nameKey: #monticello		menu: #(#pundleMenu)		position: 60.01&gt;</body><body package="Monticello-Tools" selector="monticelloMerge">monticelloMerge	&lt;menuItem: 'Merge Version...'		icon: nil		nameKey: #mergeVersion		enablement: #isMonticelloPackageSelected		indication: nil		menu: #(#pundleMenu #monticello)		position: 0.1&gt;	| version |	version := self pickMonticelloVersion: 'Merge Version'.	version ifNil: [^self].	(Monticello.MCPackage at: version) merge</body><body package="Monticello-Tools" selector="monticelloPublish">monticelloPublish	&lt;menuItem: 'Publish Version...'		icon: nil		nameKey: #publishVersion		enablement: nil		indication: nil		menu: #(#pundleMenu #monticello)		position: 0.2&gt;	Monticello.PublishVersionTool new		package: self pundle;		open</body><body package="Monticello-Tools" selector="pickMonticelloVersion:">pickMonticelloVersion: title	| url repository versions labels |	url := (self pundle propertyAt: #url) asURI.	url path at: url path size put: ''.	Cursor wait showWhile: [repository := Monticello.MCRepository at: url].	versions := repository packagesNamed: self pundle name.	labels := versions collect: [:each | each tail copyFrom: (each tail lastIndexOf: $-) + 1 to: each tail size - 4].	^Dialog choose: title fromList: labels values: versions lines: 10 cancel: [nil]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus</category><body package="Monticello-Tools" selector="monticelloPackageBrowser">monticelloPackageBrowser	&lt;menuItem: 'Monticello Packages'		icon: nil		nameKey: #monticelloPackages		enablement: nil		indication: nil		menu: #(menuBar #browse)		position: 10.05&gt;	Monticello.PackagesBrowserTool open</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>