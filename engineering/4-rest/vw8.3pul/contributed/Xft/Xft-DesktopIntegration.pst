<?xml version="1.0"?><st-source><!-- Name: Xft-DesktopIntegrationNotice: Licensed under the MIT licenseCopyright (c) 2012 Holger KleinsorgenPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: Gathers font information from the desktop configuration. The default text attributes will be resettet according to the default font of the desktop.Also provides additional settings (Look and Feel > Xft)Contact: h . kleinsorgen - at - gmail . comLicensed under the MIT license (see Copyright)DevelopmentPrerequisites: #(#(#any 'Xft' '') #(#any 'Xft-Integration' '') #(#any 'Tools-Settings-VW' '') #(#any 'Tools-Settings' ''))PackageName: Xft-DesktopIntegrationParcel: #('Xft-DesktopIntegration')ParcelDirectory: Xft-DesktopIntegrationPrerequisiteDescriptions: #(#(#name 'Xft' #componentType #package) #(#name 'Xft-Integration' #componentType #package) #(#name 'Tools-Settings-VW' #componentType #package) #(#name 'Tools-Settings' #componentType #package))PrerequisiteParcels: #(#('Xft' '') #('Xft-Integration' '') #('Tools-Settings-VW' '') #('Tools-Settings' ''))Version: (8.0).2Date: 1:23:44 PM July 26, 2014 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.0 (jul14.3) of 25. Juli 2014 on 26. Juli 2014 at 13:23:44</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>FontSettingsPage</name><environment>Xft</environment><super>Tools.ModularSettingsPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xft-DesktopIntegration</package></attributes></class><comment><class-id>Xft.FontSettingsPage</class-id><body>Settings page for Xft font settings. The only purpose of this subclass is to update the fonts after the settings have been changed.</body></comment><class><name>NativeGUIPolicyForXft</name><environment>Xft</environment><super>Graphics.NativeGUIPolicyForX11</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xft-DesktopIntegration</package></attributes></class><comment><class-id>Xft.NativeGUIPolicyForXft</class-id><body>Fixes font sizes when using Xft &amp; skins </body></comment><class><name>XSettingInterface</name><environment>Xft</environment><super>External.ExternalInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Xft.XSettingInterfaceDictionary.*			</imports><category></category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles><item type="sym">linkedIn</item></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>Xft-DesktopIntegration</package></attributes></class><comment><class-id>Xft.XSettingInterface</class-id><body>Additional X interface functions required by the XSettingClient</body></comment><class><name>XDesktopSystem</name><environment>Xft</environment><super>Core.Subsystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xft-DesktopIntegration</package></attributes></class><comment><class-id>Xft.XDesktopSystem</class-id><body>Initializes desktop-specific information on startup</body></comment><class><name>XDesktop</name><environment>Xft</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xft-DesktopIntegration</package></attributes></class><comment><class-id>Xft.XDesktop</class-id><body>Provides font information about the desktop</body></comment><class><name>XSettingClient</name><environment>Xft</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectionAtom settingsAtom settingsOwner bigEndian </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xft-DesktopIntegration</package></attributes></class><comment><class-id>Xft.XSettingClient</class-id><body>XSettings client interfaceSee http://www.freedesktop.org/wiki/Specifications/xsettings-spec</body></comment><class><name>XSettingsCompatibleDesktop</name><environment>Xft</environment><super>Xft.XDesktop</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>xSettings </class-inst-vars><imports></imports><category></category><attributes><package>Xft-DesktopIntegration</package></attributes></class><comment><class-id>Xft.XSettingsCompatibleDesktop</class-id><body>Accesses the XSettings for font configuratione.See http://www.freedesktop.org/wiki/Specifications/xsettings-spec</body></comment><class><name>KDEDesktop</name><environment>Xft</environment><super>Xft.XDesktop</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>generalSettings </class-inst-vars><imports></imports><category></category><attributes><package>Xft-DesktopIntegration</package></attributes></class><comment><class-id>Xft.KDEDesktop</class-id><body>KDE desktop</body></comment><class><name>UnknownDesktop</name><environment>Xft</environment><super>Xft.XDesktop</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xft-DesktopIntegration</package></attributes></class><comment><class-id>Xft.UnknownDesktop</class-id><body>Represents an unknown desktop environment</body></comment><shared-variable><name>FontSettingsInstalled</name><environment>Xft.XDesktopSystem</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>nil</initializer><attributes><package>Xft-DesktopIntegration</package></attributes></shared-variable><shared-variable><name>StyleBlocks</name><environment>Xft.XDesktop</environment><private>false</private><constant>false</constant><category>style parsing</category><initializer>nil</initializer><attributes><package>Xft-DesktopIntegration</package></attributes></shared-variable><shared-variable><name>SettingsChanged</name><environment>Xft.XDesktop</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>nil</initializer><attributes><package>Xft-DesktopIntegration</package></attributes></shared-variable><shared-variable><name>FontFamilyString</name><environment>Xft.XDesktop</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>nil</initializer><attributes><package>Xft-DesktopIntegration</package></attributes></shared-variable><shared-variable><name>CurrentDesktop</name><environment>Xft.XDesktop</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>nil</initializer><attributes><package>Xft-DesktopIntegration</package></attributes></shared-variable><shared-variable><name>OverrideFontFamily</name><environment>Xft.XDesktop</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>nil</initializer><attributes><package>Xft-DesktopIntegration</package></attributes></shared-variable><shared-variable><name>OverrideDesktop</name><environment>Xft.XDesktop</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>nil</initializer><attributes><package>Xft-DesktopIntegration</package></attributes></shared-variable><shared-variable><name>FontPointSize</name><environment>Xft.XDesktop</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>nil</initializer><attributes><package>Xft-DesktopIntegration</package></attributes></shared-variable><shared-variable><name>OverrideFontPointSize</name><environment>Xft.XDesktop</environment><private>false</private><constant>false</constant><category>accessing</category><initializer>nil</initializer><attributes><package>Xft-DesktopIntegration</package></attributes></shared-variable><shared-variable><name>XSettingInterfaceDictionary</name><environment>Xft</environment><private>false</private><constant>false</constant><category>external dictionaries</category><attributes><package>Xft-DesktopIntegration</package></attributes></shared-variable><methods><class-id>Graphics.WindowingSystem</class-id> <category>prerequisites</category><body package="Xft-DesktopIntegration">desktopSystemPrerequisite	&lt;prerequisites&gt;	^Array with: Xft.XDesktopSystem</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>pages</category><body package="Xft-DesktopIntegration">xft_10_OverrideFontPointSize	&lt;setting: #(#xft #overrideFontPointSize)&gt;	^ (BooleanSetting on: Xft.XDesktop aspect: #overrideFontPointSize)		default: false;		label: 'Ignore desktop font size';		helpText: 'Always use the specified font size instead of  the size of default desktop font.'</body><body package="Xft-DesktopIntegration">xft_11_FontPointSize	&lt;setting: #(#xft #defaultFontPointSize)&gt;	^ ((NumberSetting min: 1  max: 100) on: Xft.XDesktop aspect: #defaultFontPointSize)		label: 'Font size';		helpText: 'Font size in points. Used when either the desktop font could not be detected, or when the desktop font size is ignored.'</body><body package="Xft-DesktopIntegration">xft_20_OverrideFontFamily	&lt;setting: #(#xft #overrideFontFamily)&gt;	^ (BooleanSetting on: Xft.XDesktop aspect: #overrideFontFamily)		default: false;		label: 'Ignore desktop font family';		helpText: 'Always use the specified font family instead of the font family of default desktop font.'</body><body package="Xft-DesktopIntegration">xft_21_FontFamily	&lt;setting: #(#xft #fontFamily)&gt;	^ (StringSetting on: Xft.XDesktop aspect: #defaultFontFamilyString)		label: 'Font family';		helpText: 'Comma-separated list of font family names. Used when either the desktop font could not be detected, or when the desktop font family is ignored.'</body><body package="Xft-DesktopIntegration">xft_30_OverrideDesktop	&lt;setting: #(#xft #overrideDesktop)&gt;	^ (BooleanSetting on: Xft.XDesktop aspect: #overrideDesktop)		default: false;		label: 'Do not detect desktop environment';		helpText: 'Always use the specified desktop instead of trying to detect it on startup'</body><body package="Xft-DesktopIntegration">xft_31_Desktop	&lt;setting: #(#xft #desktop)&gt;	| desktops keys labels |	desktops := Xft.XDesktop knownDesktops asSortedCollection: [ : c1 : c2 | c1 name &lt;= c2 name ].	keys := desktops collect: [ : c | c name ].	labels := desktops collect: [ : c | c label ].	^((EnumerationSetting 		keys: keys		choices: desktops		labels: labels)		on: Xft.XDesktop aspect: #currentDesktop)		label: 'Desktop environment';		default: Xft.UnknownDesktop;		helpText: 'The current desktop environment. Xft-related settings and preferences are fetched from the configuration of the desktop, if possible';		yourself</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-look and feel</category><body package="Xft-DesktopIntegration">xftPage	&lt;settingsPage: #(lookAndFeel codingFeel)&gt;	^Xft.FontSettingsPage new		label: 'Xft';		icon: (ListIconLibrary visualFor: #window);		settings: (self settingsWithPrefix: #(xft))</body></methods><methods><class-id>Xft.XSettingInterface</class-id> <category>procedures</category><body package="Xft-DesktopIntegration">XGetSelectionOwner: display with: selection	&lt;C: Window XGetSelectionOwner(Display *display,   Atom selection)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Xft-DesktopIntegration">XGrabServer: display	&lt;C: int XGrabServer(Display *display)&gt;	^self externalAccessFailedWith: _errorCode</body><body package="Xft-DesktopIntegration">XUngrabServer: display	&lt;C: int XUngrabServer(Display *display)&gt;	^self externalAccessFailedWith: _errorCode</body></methods><methods><class-id>Xft.FontSettingsPage</class-id> <category>notifications</category><body package="Xft-DesktopIntegration">triggered	DeferrableAction new block: 			[	XDesktop settingsChanged 					ifTrue: [ XDesktop detectAndUpdateCurrentDesktop ].				XDesktop settingsChanged: false			];		window: self mainWindow;		activate.</body></methods><methods><class-id>Xft.FontSettingsPage</class-id> <category>initialize-release</category><body package="Xft-DesktopIntegration">manager: aSettingsManager	super manager: aSettingsManager.	manager triggerChannel		onChangeSend: #triggered		to: self</body></methods><methods><class-id>Xft.NativeGUIPolicyForXft</class-id> <category>accessing - fonts</category><body package="Xft-DesktopIntegration">fontDescriptionForContent	^ XftSettings current preferredFontDescription</body><body package="Xft-DesktopIntegration">fontDescriptionForMenubar	^ XftSettings current preferredFontDescription</body><body package="Xft-DesktopIntegration">fontDescriptionForWidgetOfSize: aSymbol	^ XftSettings current preferredFontDescription</body></methods><methods><class-id>Xft.XSettingInterface</class-id> <category>types</category><body package="Xft-DesktopIntegration">Atom	&lt;C: typedef unsigned long Atom&gt;</body><body package="Xft-DesktopIntegration">Display	&lt;C: typedef unsigned long Display&gt;</body><body package="Xft-DesktopIntegration">Time	&lt;C: typedef unsigned long Time&gt;</body><body package="Xft-DesktopIntegration">Window	&lt;C: typedef unsigned long Window&gt;</body></methods><methods><class-id>Xft.XDesktopSystem</class-id> <category>prerequisites</category><body package="Xft-DesktopIntegration">prerequisiteSystems	^ Array with: XftSystem</body></methods><methods><class-id>Xft.XDesktopSystem</class-id> <category>default actions</category><body package="Xft-DesktopIntegration">setUp	super setUp.	self initializeForCurrentDesktop</body></methods><methods><class-id>Xft.XDesktopSystem</class-id> <category>private</category><body package="Xft-DesktopIntegration">fontSettingsInstalled	" true if font settings were installed "	^ FontSettingsInstalled ifNil: [ false ]</body><body package="Xft-DesktopIntegration">fontSettingsInstalled: aBoolean	" true if font settings were installed "	FontSettingsInstalled := aBoolean</body><body package="Xft-DesktopIntegration">initializeForCurrentDesktop	" Update or reset fonts, depending on the current desktop environment "	WindowingSystem canActivate		ifTrue: 		[	Screen default defaultFontPolicy fontClass = XftFont				ifTrue: 				[	self fontSettingsInstalled: true.					XDesktop detectAndUpdateCurrentDesktop				]				ifFalse: 				[	self fontSettingsInstalled						ifTrue: 						[	" Restore the original settings of VisualWorks "							Locale current preferredPixelSize: nil.							XDesktop updateFonts .							self fontSettingsInstalled: false 						].				] 		]</body></methods><methods><class-id>Xft.XDesktop class</class-id> <category>testing</category><body package="Xft-DesktopIntegration">isAbstract	^ self = XDesktop</body><body package="Xft-DesktopIntegration">matchesCurrentDesktop	^ false</body></methods><methods><class-id>Xft.XDesktop class</class-id> <category>class initialization</category><body package="Xft-DesktopIntegration">flushCaches</body><body package="Xft-DesktopIntegration">initialize	self initializeStyleBlocks</body><body package="Xft-DesktopIntegration">initializeStyleBlocks	" Pango font names contain additional style information.	These blocks apply those styles to a font pattern "	StyleBlocks := Dictionary new.	self initializeStyleBlocksSlant: StyleBlocks.	self initializeStyleBlocksWeight: StyleBlocks.	self initializeStyleBlocksWidth: StyleBlocks.	self initializeStyleBlocksLanguage: StyleBlocks.</body><body package="Xft-DesktopIntegration">initializeStyleBlocksLanguage: styleBlocks	#('arabic' 'fallback' 'hangul' 'hebrew' 'indic' 'japanese' 'thai' ) do: [ : language |		styleBlocks at: language  put: [: fontPattern : lib | ].	].</body><body package="Xft-DesktopIntegration">initializeStyleBlocksSlant: styleBlocks	styleBlocks at: 'italic' put: [: fontPattern : lib | fontPattern slant: lib XFT_SLANT_ITALIC].	styleBlocks at: 'oblique' put: [: fontPattern : lib | fontPattern slant: lib XFT_SLANT_OBLIQUE ]</body><body package="Xft-DesktopIntegration">initializeStyleBlocksWeight: styleBlocks	styleBlocks at: 'black' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_BLACK ].	styleBlocks at: 'bold' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_BOLD ].	styleBlocks at: 'book' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_BOOK ].	styleBlocks at: 'demi-bold' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_DEMIBOLD ].	styleBlocks at: 'extra-black' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_EXTRABLACK ].	styleBlocks at: 'extra-bold' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_EXTRABOLD ].	styleBlocks at: 'extra-light' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_EXTRALIGHT ].	styleBlocks at: 'heavy' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_HEAVY ].	styleBlocks at: 'light' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_LIGHT ].	styleBlocks at: 'medium' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_MEDIUM ].	styleBlocks at: 'regular' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_REGULAR ].	styleBlocks at: 'semi-bold' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_SEMIBOLD ].	styleBlocks at: 'thin' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_THIN ].	styleBlocks at: 'ultra-black' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_ULTRABLACK ].	styleBlocks at: 'ultra-bold' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_ULTRABOLD ].	styleBlocks at: 'ultra-light' put: [: fontPattern : lib | fontPattern weight: lib FC_WEIGHT_ULTRALIGHT ]</body><body package="Xft-DesktopIntegration">initializeStyleBlocksWidth: styleBlocks	styleBlocks at: 'condensed' put: [: fontPattern : lib | fontPattern spacing: lib FC_WIDTH_CONDENSED ].	styleBlocks at: 'semi-condensed' put: [: fontPattern : lib | fontPattern spacing: lib FC_WIDTH_SEMICONDENSED ].	styleBlocks at: 'extra-condensed' put: [: fontPattern : lib | fontPattern spacing: lib FC_WIDTH_EXTRACONDENSED ].	styleBlocks at: 'ultra-condensed' put: [: fontPattern : lib | fontPattern spacing: lib FC_WIDTH_ULTRACONDENSED ].	styleBlocks at: 'expanded' put: [: fontPattern : lib | fontPattern spacing: lib FC_WIDTH_EXPANDED ].	styleBlocks at: 'semi-expanded' put: [: fontPattern : lib | fontPattern spacing: lib FC_WIDTH_SEMIEXPANDED ].	styleBlocks at: 'extra-expanded' put: [: fontPattern : lib | fontPattern spacing: lib FC_WIDTH_EXTRAEXPANDED ].	styleBlocks at: 'ultra-expanded' put: [: fontPattern : lib | fontPattern spacing: lib FC_WIDTH_ULTRAEXPANDED ].</body></methods><methods><class-id>Xft.XDesktop class</class-id> <category>settings</category><body package="Xft-DesktopIntegration">defaultFontFamilyNames	^ (self defaultFontFamilyString tokensBasedOn: $,) collect: [ : family | family xftTrimWhitespace ]</body><body package="Xft-DesktopIntegration">defaultFontFamilyString	^ FontFamilyString ifNil: [ 'Sans,Sans Serif,Helv,DejaVu,FreeSans' ]</body><body package="Xft-DesktopIntegration">defaultFontFamilyString: aFamilyString 	FontFamilyString ~= aFamilyString 		ifTrue: 		[	FontFamilyString := aFamilyString.			self settingsChanged: true		].</body><body package="Xft-DesktopIntegration">defaultFontPointSize	^ FontPointSize ifNil: [ 10 ]</body><body package="Xft-DesktopIntegration">defaultFontPointSize: aPointSize 	FontPointSize ~= aPointSize 		ifTrue: 		[	FontPointSize := aPointSize.			self settingsChanged: true		].</body><body package="Xft-DesktopIntegration">overrideDesktop	^ OverrideDesktop ifNil: [ false ]</body><body package="Xft-DesktopIntegration">overrideDesktop: aBoolean 	OverrideDesktop ~= aBoolean 		ifTrue: 		[	OverrideDesktop := aBoolean.			self settingsChanged: true		].</body><body package="Xft-DesktopIntegration">overrideFontFamily	^ OverrideFontFamily ifNil: [ false ]</body><body package="Xft-DesktopIntegration">overrideFontFamily: aBoolean 	OverrideFontFamily ~= aBoolean 		ifTrue: 		[	OverrideFontFamily := aBoolean.			self settingsChanged: true		].</body><body package="Xft-DesktopIntegration">overrideFontPointSize	^ OverrideFontPointSize ifNil: [ false ]</body><body package="Xft-DesktopIntegration">overrideFontPointSize: aBoolean 	OverrideFontPointSize ~= aBoolean 		ifTrue: 		[	OverrideFontPointSize := aBoolean.			self settingsChanged: true		].</body></methods><methods><class-id>Xft.XDesktop class</class-id> <category>desktop accessing</category><body package="Xft-DesktopIntegration">initializeForCurrentDesktop	" sent by the desktop system on startup "	self flushCaches.</body><body package="Xft-DesktopIntegration">label	" For presentation in the settings " 	^ self name asString copyReplaceAll: 'Desktop' with: ''</body><body package="Xft-DesktopIntegration">settings	" Settings of the desktop "	| settings |	settings := XftSettings new.	self initializeSettings: settings.	^ settings</body></methods><methods><class-id>Xft.XDesktop class</class-id> <category>private - font description</category><body package="Xft-DesktopIntegration">createFontPatternFromConfigurationValue: fontName		self subclassResponsibility</body><body package="Xft-DesktopIntegration">createFontPatternFromFamilies: families pointSize: pointSize	" Create a suitable font pattern "				^ (FontPattern new)		" add common family names for extra safety "		family: families,  XftFont commonFamilyNames;		weight: LibXft current XFT_WEIGHT_MEDIUM;		pointSize: pointSize;		yourself</body><body package="Xft-DesktopIntegration">createFontPatternFromPangoFontName: fontName	" Font name: '&lt;Family&gt; &lt;Styles&gt; &lt;Size&gt;' "	| pointSize i familyWithStyle |	i := fontName lastIndexOf: Character space.	familyWithStyle := fontName copyFrom: 1 to: i - 1.	pointSize := self overrideFontPointSize				ifTrue: [ self defaultFontPointSize ]				ifFalse: [ Integer readFromString: (fontName copyFrom: i + 1 to: fontName size) ].	^ self overrideFontFamily		ifTrue: [ self createFontPatternFromFamilies: self defaultFontFamilyNames pointSize: pointSize ]		ifFalse: [ self createFontPatternFromPangoName: familyWithStyle pointSize: pointSize ]</body><body package="Xft-DesktopIntegration">createFontPatternFromPangoName: pangoFontName pointSize: pointSize	" Font name: '&lt;Family&gt; &lt;Styles&gt;' "	| familyTokens stream fontPattern lib |	familyTokens := pangoFontName tokensBasedOn: Character space.	fontPattern := FontPattern new.	lib := LibXft current.	fontPattern		pointSize: pointSize.	" apply styles "	[ familyTokens size &gt; 1 and: [ self styleBlocks includesKey: familyTokens last asLowercase ]] whileTrue: [		| style |		style := familyTokens removeLast asLowercase.		(self styleBlocks at: style) value: fontPattern value: lib.	].	" apply family "	stream := String new writeStream.	familyTokens do: [ : token | stream nextPutAll: token ] separatedBy: [ stream space ].	" add common family names for extra safety "	fontPattern family: (Array with: stream contents), XftFont commonFamilyNames.	^ fontPattern</body><body package="Xft-DesktopIntegration">createPatternFromName: fontName pointSize: pointSize	" Create a suitable font pattern "	| families |	families := self overrideFontFamily				ifTrue: [ self defaultFontFamilyNames ]				ifFalse: [ Array with: fontName ].	^ self createFontPatternFromFamilies: families pointSize: pointSize</body><body package="Xft-DesktopIntegration">defaultFontDescription	" Returns the font description of the default font of the desktop "	self subclassResponsibility</body><body package="Xft-DesktopIntegration">getFontDescription: aFontPropertyName	| fontName |	fontName := self stringValueOfSetting: aFontPropertyName.	^ fontName notNil		ifTrue: [ (self createFontPatternFromConfigurationValue: fontName) createFontDescriptionForMatching ]		ifFalse: [ nil ]</body></methods><methods><class-id>Xft.XDesktop class</class-id> <category>private - environment</category><body package="Xft-DesktopIntegration">desktopSessionName	^ CEnvironment getenv: 'DESKTOP_SESSION'</body><body package="Xft-DesktopIntegration">gdmSessionName	^ CEnvironment getenv: 'GDMSESSION'</body></methods><methods><class-id>Xft.XDesktop class</class-id> <category>private - settings</category><body package="Xft-DesktopIntegration">booleanValueOfSetting: aSettingsName 	" Utility - Get the settings value as Boolean, or nil if not set "	^ ( self stringValueOfSetting: aSettingsName ) ifNotNil: 		[: string |			string = '1' 				ifTrue: [ true ]				ifFalse: 				[	string = '0' 						ifTrue: [ false ]						ifFalse: 						[	" default "							nil						]				]		]</body><body package="Xft-DesktopIntegration">convertHintStyleString: aString	" see http://freedesktop.org/wiki/ScreenFontSettings "	aString isNil ifTrue: [ ^ nil ].	aString = 'hintnone' ifTrue: [ ^ #FC_HINT_NONE ].	aString = 'hintslight' ifTrue: [ ^ #FC_HINT_SLIGHT ].	aString = 'hintmedium' ifTrue: [ ^ #FC_HINT_MEDIUM ].	aString = 'hintfull' ifTrue: [ ^ #FC_HINT_FULL ].	^ nil</body><body package="Xft-DesktopIntegration">convertLcdFilterString: aString	" see http://freedesktop.org/wiki/ScreenFontSettings "	aString isNil ifTrue: [ ^ nil ].	aString = 'lcdnone' ifTrue: [ ^ #FC_LCD_NONE ].	aString = 'lcddefault' ifTrue: [ ^ #FC_LCD_DEFAULT ].	aString = 'lcdlight' ifTrue: [ ^ #FC_LCD_LIGHT ].	aString = 'lcdlegacy' ifTrue: [ ^ #FC_LCD_LEGACY  ].	^ nil</body><body package="Xft-DesktopIntegration">convertSubPixelString: aString	" see http://freedesktop.org/wiki/ScreenFontSettings "	aString isNil ifTrue: [ ^ nil ].	aString = 'unknown' ifTrue: [ ^ #FC_RGBA_UNKNOWN ].	aString = 'rgb' ifTrue: [ ^ #FC_RGBA_RGB ].	aString = 'vrgb' ifTrue: [ ^ #FC_RGBA_BGR ].	aString = 'vbgr' ifTrue: [ ^ #FC_RGBA_VBGR  ].	aString = 'none' ifTrue: [ ^ #FC_RGBA_NONE  ].	^ nil</body><body package="Xft-DesktopIntegration">initializeAppearanceSettings: settings	" initialize the appearance settings (antialias etc.) according to the desktop "</body><body package="Xft-DesktopIntegration">initializeSettings: settings	" initialize the settings according to the desktop "	self initializeSettingsFontDescription: settings.	self initializeAppearanceSettings: settings.</body><body package="Xft-DesktopIntegration">initializeSettingsFontDescription: settings	" initialize the default font descriptino "	| fontDescription |	fontDescription := self defaultFontDescription.	fontDescription notNil		ifTrue: 		[	settings preferredFontDescription: fontDescription.			settings preferredFontPointSize: fontDescription pointSize 		]		ifFalse: [ settings preferredFontPointSize: self defaultFontPointSize ]</body><body package="Xft-DesktopIntegration">installSettings	" Apply the settings of the desktop "	| preferredFontSize settings |	preferredFontSize := nil.	settings := self settings.	XftSettings current: settings.	preferredFontSize := XftFont preferredFontPixelSize.	Locale current preferredPixelSize: preferredFontSize</body><body package="Xft-DesktopIntegration">numberValueOfSetting: aSettingsName	" Utility - Get the settings value as Number, or nil if not set  "	^ (self stringValueOfSetting: aSettingsName) ifNotNil: 		[: string | | stream number |			stream := string readStream.			number := Number readFrom: stream.			" sanity check "			stream atEnd				ifTrue: [ number ]				ifFalse: [ nil ] 		]</body><body package="Xft-DesktopIntegration">settingsChanged	^ SettingsChanged ifNil: [ false ]</body><body package="Xft-DesktopIntegration">settingsChanged: aBoolean	SettingsChanged := aBoolean</body><body package="Xft-DesktopIntegration">stringValueOfSetting: settingsName	" Get the settings value as String "	^ nil</body></methods><methods><class-id>Xft.XDesktop class</class-id> <category>private</category><body package="Xft-DesktopIntegration">detectDesktop	" Returns the desktop class matching the current desktop "	| allMatching |	allMatching := XDesktop allSubclasses				select: [: desktopClass | desktopClass isAbstract not and: [ desktopClass matchesCurrentDesktop ] ].	^ allMatching notEmpty		ifTrue: 		[	" choose the best one "			(allMatching				asSortedCollection: [: desktopClass1 : desktopClass2 | desktopClass1 priority &gt;= desktopClass2 priority ])					first 		]		ifFalse: [ UnknownDesktop ]</body><body package="Xft-DesktopIntegration">install	Screen default defaultFontPolicy fontClass = XftFont 		ifTrue: 		[	self initializeForCurrentDesktop.			self installSettings.			self updateFonts		].</body><body package="Xft-DesktopIntegration">priority	" if more than one desktop class matches the current environment, the one with the highes priority will be chosen "	^ self isAbstract		ifTrue: [ 0 ]		ifFalse: [ self superclass priority + 1 ]</body><body package="Xft-DesktopIntegration">styleBlocks	StyleBlocks isNil ifTrue: [ self initializeStyleBlocks ].	^ StyleBlocks</body><body package="Xft-DesktopIntegration">updateFonts	TextAttributes resetFonts.	" the look policy for the current platform might not have been determined at this point, so let all look policies flush their text attributes "	UILookPolicy allSubclasses do: [: policyClass | policyClass flushTextAttributes ]</body></methods><methods><class-id>Xft.XDesktop class</class-id> <category>accessing</category><body package="Xft-DesktopIntegration">currentDesktop	" Returns the current desktop environment class "	CurrentDesktop isNil ifTrue: [  CurrentDesktop := self detectDesktop ].	^ CurrentDesktop</body><body package="Xft-DesktopIntegration">currentDesktop: anXDesktopClass	" Set the current desktop environment class and install settings "	CurrentDesktop := anXDesktopClass.	CurrentDesktop install.</body><body package="Xft-DesktopIntegration">detectAndUpdateCurrentDesktop	(CurrentDesktop isNil or: [ self overrideDesktop not])		ifTrue: [ self currentDesktop: self detectDesktop ]		ifFalse: [ self currentDesktop install ].</body><body package="Xft-DesktopIntegration">knownDesktops	" All known concrete desktop environment classes "	^ XDesktop allSubclasses reject: [ : desktopClass | desktopClass isAbstract  ]</body></methods><methods><class-id>Xft.XSettingClient</class-id> <category>accessing</category><body package="Xft-DesktopIntegration">display	^ Screen default xftDisplay</body><body package="Xft-DesktopIntegration">screen	^ Screen default xftScreen</body></methods><methods><class-id>Xft.XSettingClient</class-id> <category>private</category><body package="Xft-DesktopIntegration">checkSettingsOwner	| selectionInterface display |	selectionInterface := self settingInterface.	display := self display.	selectionInterface XGrabServer: display.	settingsOwner := [			[ selectionInterface XGetSelectionOwner: display with: selectionAtom ]			ensure: [ selectionInterface XUngrabServer: display ] 		] on: Error do: [: ex | 0 ].	settingsOwner = 0		ifTrue: [ self error: 'Could not get selection owner' ]</body><body package="Xft-DesktopIntegration">pad: aNumber 	" pad to 4 bytes "	^ (aNumber + 3) bitAnd: -4</body><body package="Xft-DesktopIntegration">readSettings	" Parse the XSettings property .	Returns a dictionary with all settings "	| actualTypePointer actualFormatPointer lengthPointer bytesReturnedPointer dataPointer result |	actualTypePointer := self settingInterface Atom gcMalloc.	actualFormatPointer := CIntegerType int gcMalloc.	lengthPointer := CIntegerType unsignedLong gcMalloc.	bytesReturnedPointer := CIntegerType unsignedLong gcMalloc.	dataPointer := CIntegerType char pointerType gcMalloc.	result := self systemInterface 		XGetWindowProperty: self display		with: settingsOwner		with: settingsAtom		with: 0		with: SmallInteger maxVal		with: 0		with: settingsAtom		with: actualTypePointer		with: actualFormatPointer		with: lengthPointer		with: bytesReturnedPointer		with: dataPointer.	result &gt; 0 ifTrue: [ self error: 'Could not read XSettings property' ].	^ self parseSettings: dataPointer contents length: lengthPointer contents</body><body package="Xft-DesktopIntegration">settingInterface	^ XSettingInterface new</body><body package="Xft-DesktopIntegration">systemInterface	^ OSSystemSupport concreteClass new</body></methods><methods><class-id>Xft.XSettingClient</class-id> <category>private - parsing</category><body package="Xft-DesktopIntegration">parseColorSetting: name from: data at: bodyOffset into: settings	| red blue green |	red := data shortAt: bodyOffset bigEndian: bigEndian.	blue:= data shortAt: bodyOffset + 2 bigEndian: bigEndian.	green := data shortAt: bodyOffset + 4 bigEndian: bigEndian.	" VW does not provide a color class with alpha values ""	alpha := data shortAt: bodyOffset + 6."	settings at: name put: (ColorValue red: red green: green blue: blue range: 65535).	^ bodyOffset + 8</body><body package="Xft-DesktopIntegration">parseIntegerSetting: name from: data at: bodyOffset into: settings	| integer |	integer := data longAt: bodyOffset bigEndian: bigEndian.	settings at: name put: integer.	^ bodyOffset + 4</body><body package="Xft-DesktopIntegration">parseSettingFrom: data at: settingOffset into: settings 	" parse a single record "	| type nameLength name paddedLength bodyOffset |	type := data byteAt: settingOffset.	nameLength := data shortAt: settingOffset + 2 bigEndian: bigEndian.	name := data stringAt: settingOffset + 4 length: nameLength.	paddedLength := self pad: nameLength.	bodyOffset := settingOffset + paddedLength + 8.	type = 0 		ifTrue: [ ^ self parseIntegerSetting: name from: data at: bodyOffset into: settings ].	type = 1 		ifTrue: [ ^ self parseStringSetting: name from: data at: bodyOffset into: settings ].	type = 2 		ifTrue: [ ^ self parseColorSetting: name from: data at: bodyOffset into: settings ].	" can't skip the record, body size is unknown "	self error: 'Unknown XSetting type: ' , type printString.</body><body package="Xft-DesktopIntegration">parseSettings: dataPointer length: length	" see http://standards.freedesktop.org/xsettings-spec/xsettings-spec-0.5.html "	| data  numberOfSettings settingOffset settings |	data  :=  UninterpretedBytes new: length.	dataPointer copyAt: 0 to: data size: length startingAt: 1.	bigEndian := (data byteAt: 1) = 1.  " 0 = LSB / little endian, 1 = MSB = big endian"	numberOfSettings := data longAt:  9 bigEndian: bigEndian.	settingOffset := 13.	settings := Dictionary new.	1 to: numberOfSettings do: [ : i |		settingOffset  := self parseSettingFrom: data at: settingOffset into: settings	].	^ settings</body><body package="Xft-DesktopIntegration">parseStringSetting: name from: data at: bodyOffset into: settings 	| length string |	length := data longAt: bodyOffset bigEndian: bigEndian.	string := data stringAt: bodyOffset + 4 length: length.	settings at: name put: string.	^ bodyOffset + ( self pad: length ) + 4</body></methods><methods><class-id>Xft.XSettingClient</class-id> <category>initialize-release</category><body package="Xft-DesktopIntegration">initialize	bigEndian := UninterpretedBytes isBigEndian.	self initializeAtoms.	self checkSettingsOwner.</body><body package="Xft-DesktopIntegration">initializeAtoms	| selectionName |	selectionName := ( '_XSETTINGS_S' , self screen printString ) .	selectionAtom := self systemInterface XInternAtom: self display with: selectionName with: 0.	settingsAtom := self systemInterface XInternAtom: self display with: '_XSETTINGS_SETTINGS' with: 0.</body></methods><methods><class-id>Xft.XSettingClient class</class-id> <category>instance creation</category><body package="Xft-DesktopIntegration">new	^ super new initialize</body></methods><methods><class-id>Xft.XSettingsCompatibleDesktop class</class-id> <category>private - settings</category><body package="Xft-DesktopIntegration">booleanValueOfSetting: settingsName	| number |	number := (self valueOfSetting: settingsName).	number = 1 ifTrue: [ ^ true ].	number = 0 ifTrue: [ ^ false ].	"  default "	^ nil</body><body package="Xft-DesktopIntegration">fontSettingsName	^ 'Gtk/FontName'</body><body package="Xft-DesktopIntegration">initializeAppearanceSettings: settings	| dpi |	super initializeAppearanceSettings: settings.	dpi := (self valueOfSetting: 'Xft/DPI').	(dpi notNil and: [ dpi &gt; 0 ])		ifTrue: [ settings dpi: (dpi / 1024) rounded ].	settings antialias: (self booleanValueOfSetting: 'Xft/Antialias').	settings hintStyle: (self convertHintStyleString: (self valueOfSetting: 'Xft/HintStyle')).	settings subPixelRendering: (self convertSubPixelString: (self valueOfSetting: 'Xft/RGBA')).	settings lcdFilter: (self convertLcdFilterString: (self valueOfSetting: 'Xft/Lcdfilter')).</body><body package="Xft-DesktopIntegration">numberValueOfSetting: settingsName	^ self valueOfSetting: settingsName</body><body package="Xft-DesktopIntegration">stringValueOfSetting: settingsName	^ self valueOfSetting: settingsName</body><body package="Xft-DesktopIntegration">valueOfSetting: settingsName	" Get the settings value "	^ xSettings notNil		ifTrue: [ xSettings at: settingsName ifAbsent: [ nil ] ]		ifFalse: [ nil ]</body></methods><methods><class-id>Xft.XSettingsCompatibleDesktop class</class-id> <category>desktop accessing</category><body package="Xft-DesktopIntegration">initializeForCurrentDesktop	super initializeForCurrentDesktop.	self initializeXSettings</body><body package="Xft-DesktopIntegration">initializeXSettings	xSettings := [		XSettingClient new readSettings	] on: Error do: [ : ex |		Dictionary new	].</body><body package="Xft-DesktopIntegration">label	^ 'XSettings compatible'</body></methods><methods><class-id>Xft.XSettingsCompatibleDesktop class</class-id> <category>private - font description</category><body package="Xft-DesktopIntegration">createFontPatternFromConfigurationValue: fontName		^ self createFontPatternFromPangoFontName: fontName</body><body package="Xft-DesktopIntegration">defaultFontDescription	" Get the default font "	^ self getFontDescription: self fontSettingsName</body></methods><methods><class-id>Xft.XSettingsCompatibleDesktop class</class-id> <category>private</category><body package="Xft-DesktopIntegration">priority	^ self superclass priority -1</body></methods><methods><class-id>Xft.XSettingsCompatibleDesktop class</class-id> <category>testing</category><body package="Xft-DesktopIntegration">matchesCurrentDesktop	^ [	XSettingClient new readSettings.		true	] on: Error do: [: ex | false ]</body></methods><methods><class-id>Xft.KDEDesktop class</class-id> <category>private - parsing</category><body package="Xft-DesktopIntegration">parseConfigurationFile: aFilename	" Read the configuration file. Returns a dictionary with all sections.	Each section is a dictionary with configuration key/value pairs "	| stream |	stream := (aFilename withEncoding: #utf8) readStream.	^ [ self parseConfigurationFrom: stream ] ensure: [ stream close ]</body><body package="Xft-DesktopIntegration">parseConfigurationFrom: stream	" Read the configuration file. Returns a dictionary with all sections.	Each section is a dictionary with configuration key/value pairs "	| sections |	sections := Dictionary new.	[ stream atEnd ] whileFalse: 		[ | line section end sectionDictionary  |			line := stream upTo: Character cr.			(line notEmpty				and: [ line first = $[ and: [ (end := line lastIndexOf: $] ifAbsent: [ nil ]) notNil ] ])					ifTrue: 					[	section := line copyFrom: 2 to: end - 1.						sectionDictionary := self parseSectionFrom: stream.						sections at: section put: sectionDictionary 					] 		].	^ sections</body><body package="Xft-DesktopIntegration">parseSectionFrom: stream	" Each section is a dictionary with configuration key/value pairs "	| section |	section := Dictionary new.	[ stream atEnd or: [ stream peek = $[ ] ] whileFalse: 		[ | line separator key value |			line := stream upTo: Character cr.			(line notEmpty and: [ (separator := line indexOf: $= ifAbsent: [ nil ]) notNil ])				ifTrue: 				[	key := (line copyFrom: 1 to: separator - 1) xftTrimWhitespace.					value := (line copyFrom: separator + 1 to: line size) xftTrimWhitespace.					section at: key put: value 				] 		].	^ section</body></methods><methods><class-id>Xft.KDEDesktop class</class-id> <category>private</category><body package="Xft-DesktopIntegration">initializeGeneralSettings	" Read the general settings from the configuration file "	| file home configuration |	generalSettings := Dictionary new.	home := (CEnvironment getenv: 'HOME').	(home isNil or: [ home isEmpty ])		ifTrue: [ ^ self ].	home := home asFilename.	#('.kde' '.kde4') do: [ : kdeRoot |		file := (home construct: kdeRoot) construct: 'share/config/kdeglobals'.		file exists			ifTrue: [				configuration := self parseConfigurationFile: file.				configuration at: 'General' ifPresent: [ : generalSection |					generalSettings := generalSection .				].				^  self 			].	].</body></methods><methods><class-id>Xft.KDEDesktop class</class-id> <category>private - font description</category><body package="Xft-DesktopIntegration">createFontPatternFromConfigurationValue: fontName	" Font name: '&lt;Family&gt;,&lt;Size&gt;,&lt;other stuff that is ignored&gt;' "	| stream  family pointSize |	stream := fontName readStream.	family := stream upTo: $,.	pointSize := self overrideFontPointSize				ifTrue: [ self defaultFontPointSize ]				ifFalse: [ Integer readFromString: (stream upTo: $,) ].	^ self createPatternFromName: family pointSize: pointSize</body><body package="Xft-DesktopIntegration">defaultFontDescription	" Get the default font "	^ self getFontDescription: self fontSettingsName</body></methods><methods><class-id>Xft.KDEDesktop class</class-id> <category>class initialization</category><body package="Xft-DesktopIntegration">flushCaches	super flushCaches.	generalSettings := nil.</body></methods><methods><class-id>Xft.KDEDesktop class</class-id> <category>private - settings</category><body package="Xft-DesktopIntegration">fontSettingsName	^ 'font'</body><body package="Xft-DesktopIntegration">generalSettings	generalSettings isNil		ifTrue: [ self initializeGeneralSettings ].	^ generalSettings</body><body package="Xft-DesktopIntegration">getSettingWithConfTool: settingsName 	" Get the settings value with kreadconfig "	^ [ | settingsValue errors |		errors := ''.		ExternalProcess defaultClass new 			execute: 'kreadconfig'			arguments: ( Array with: '--group' with: 'General' with: '--key' with:  settingsName )			do: [: in : out | settingsValue := in upToEnd ]			errorStreamDo: [: err | errors := err upToEnd ].		( errors isEmpty and: [ settingsValue notEmpty ]) 			ifTrue: [ settingsValue xftTrimWhitespace ]			ifFalse: [ nil ]	] on: OsError do: [: ex | nil ]</body><body package="Xft-DesktopIntegration">initializeAppearanceSettings: settings	super initializeAppearanceSettings: settings.	settings antialias: (self booleanValueOfSetting: 'XftAntialias').	settings hintStyle: (self convertHintStyleString: (self stringValueOfSetting: 'XftHintStyle')).	settings subPixelRendering: (self convertSubPixelString: (self stringValueOfSetting: 'XftSubPixel')).</body><body package="Xft-DesktopIntegration">stringValueOfSetting: settingsName	" Get the settings value "	^ (self getSettingWithConfTool: settingsName)		ifNil: [ self generalSettings at: settingsName ifAbsent: [ nil ] ]</body></methods><methods><class-id>Xft.KDEDesktop class</class-id> <category>testing</category><body package="Xft-DesktopIntegration">matchesCurrentDesktop	^ self desktopSessionName = 'kde'		or: [ self gdmSessionName = 'kde' 		or: [ (CEnvironment getenv: 'KDE_FULL_SESSION') = 'true' ] ]</body></methods><methods><class-id>Xft.UnknownDesktop class</class-id> <category>private - font description</category><body package="Xft-DesktopIntegration">createFontPatternFromConfigurationValue: fontName	^ self createPatternFromName: fontName pointSize: self defaultFontPointSize</body><body package="Xft-DesktopIntegration">defaultFontDescription	| pattern |	pattern := self createFontPatternFromFamilies: self defaultFontFamilyNames pointSize: self defaultFontPointSize.	^  pattern createFontDescriptionForMatching</body></methods><methods><class-id>Core.CompositeLocale</class-id> <category>accessing</category><body package="Xft-DesktopIntegration">preferredPixelSize: anInteger	self encodingComponent preferredPixelSize: anInteger</body></methods><methods><class-id>Graphics.TextAttributes class</class-id> <category>class initialization</category><body package="Xft-DesktopIntegration">resetFonts	TextAttributes initialize.	VariableSizeTextAttributes initialize.	VariableSizeTextAttributes flushGridding.	Screen default installFontPolicy.	Locale changed: #localeFonts with: false.	TextAttributes resetViews.</body></methods><methods><class-id>Core.UninterpretedBytes</class-id> <category>accessing</category><body package="Xft-DesktopIntegration">stringAt: byteIndex length: byteLength	"Answer a string starting at the given index with the given length"	| bytes |	bytes := (ByteArray new: byteLength).	1 to: byteLength do: [ : i |		bytes at: i put: (self byteAt: i + byteIndex - 1).	].	^IOAccessor convertSimpleStringFromPlatform: bytes</body></methods><methods><class-id>Graphics.NativeGUIPolicy class</class-id> <category>singleton</category><body package="Xft-DesktopIntegration">current	"Return an implementation of the NativeGUIPolicy protocol corresponding to the underlying host GUI"	Current ifNil: [		Current := NativeGUIPolicyForRunningHeadless new.		Screen default isX11 ifTrue: [ Current := Screen default defaultFontPolicy fontClass = Xft.XftFont								ifTrue: [ Xft.NativeGUIPolicyForXft new ]								ifFalse: [ NativeGUIPolicyForX11 new ]  ].		Screen default isMacOSX ifTrue: [ Current := NativeGUIPolicyForMacOSX new ].		Screen default isMSWindows ifTrue: [ Current := NativeGUIPolicyForWindows new ].	].		^Current</body></methods><methods><class-id>UI.UILookPolicy class</class-id> <category>accessing</category><body package="Xft-DesktopIntegration">flushTextAttributes	" Hook for subclasses that want to adjust their text attributes based on the desktop, too "</body></methods><initialize><class-id>Xft.XDesktop</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>UninterpretedBytes</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Subsystem</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>state canActivate prerequisites </inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>System-Subsystems</category><attributes><package>System-Subsystems</package></attributes></class><class><name>NativeGUIPolicyForX11</name><environment>Graphics</environment><super>Graphics.NativeGUIPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>unfocusedBackground focusedElementBackground focusedTextBackground </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OS-Window System</package></attributes></class><class><name>CompositeLocale</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>localizationComponent encodingComponent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Internationalization</package></attributes></class><class><name>WindowingSystem</name><environment>Graphics</environment><super>Core.Subsystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>ExternalInterface</name><environment>External</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>includeFiles includeDirectories libraryFiles libraryDirectories virtual optimizationLevel </class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>External-Interface</category><attributes><package>External-Interface</package></attributes></class><class><name>ModularSettingsPage</name><environment>Tools</environment><super>Tools.SettingsManagerPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars>settings modules spec preferredModuleClasses enablementTrackers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-UI</category><attributes><package>Tools-Settings</package></attributes></class></st-source>