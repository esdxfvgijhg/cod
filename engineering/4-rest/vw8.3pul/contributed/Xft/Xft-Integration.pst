<?xml version="1.0"?><st-source><!-- Name: Xft-IntegrationNotice: Licensed under the MIT licenseCopyright (c) 2012 Holger KleinsorgenPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: Replaces the old XFonts handled by the VM with XftFonts.Requires a restart once the package is loaded.Loading new versions of this package can be difficult if Xft is active, especially if there have been substantial changes.Solution 1:     Load the new version on another platform (Windows, OS X)Solution 2:   - remove the method Screen>>preferredFontClass   - save, quit, open again. XFonts are now active   - load the new versions, including Xft-Integration, which contains Screen>>preferredFontClass   - save, quit, open again. Solution 3:   Perform the following script:	 ScheduledControllers scheduledControllers do: [ : controller | controller view collapse ].	Screen default installFontPolicy.	" fork -> no StoreProgressOverlay "	[			#('Xft' 'Xft-Integration' 'Xft-DesktopIntegration') do: [ : packageName |			(Store.Glorp.StorePackage newestVersionWithName: packageName) loadSource		].		ScheduledControllers scheduledControllers do: [ : controller | controller view expand ].	] fork.Contact: h . kleinsorgen - at - gmail . comLicensed under the MIT license (see Copyright)DevelopmentPrerequisites: #(#(#any 'Xft' ''))PackageName: Xft-IntegrationParcel: #('Xft-Integration')ParcelDirectory: Xft-IntegrationPrerequisiteDescriptions: #(#(#name 'Xft' #componentType #package))PrerequisiteParcels: #(#('Xft' ''))Version: (8.0).2Date: 1:23:48 PM July 26, 2014 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.0 (jul14.3) of 25. Juli 2014 on 26. Juli 2014 at 13:23:48</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Graphics.Screen</class-id> <category>private - allocating resources</category><body package="Xft-Integration">fontNameListsDo: aBlock 	"List all the font names available on this device."		| lookupPattern |	" &gt;&gt; Patch for Xft "	self preferredFontClass listFontNamesAsOneChunk		ifTrue: [ ^ super fontNameListsDo: aBlock  ].	" &lt;&lt;"	lookupPattern := self preferredFontClass fontLookupPattern.	['abcdefghijklmnopqrstuvwxyz' do: 			[:each | 			| list lookupString |			lookupString := lookupPattern expandMacrosWith: (String with: each).			list := self primFontNamesMatching: lookupString.			list := list collect: [:eachName | self preferredFontClass decodeFontName: eachName].			aBlock value: list.			ObjectMemory currentMemoryPolicy lowSpaceAction]] 		on: Error		do: 			[:exception | 			exception parameter = #notImplemented ifTrue: 				[exception return: (super fontNameListsDo: aBlock)].			exception pass]</body></methods><methods><class-id>Graphics.Screen</class-id> <category>accessing</category><body package="Xft-Integration">listFontNames	"Screen default listFontNames"	^self preferredFontClass listFontNamesFor: self</body><body package="Xft-Integration">preferredFontClass	| preferredFontClass |	preferredFontClass := super preferredFontClass.	^ (preferredFontClass = XFont and: [ Xft.LibXft isAvailable ])		ifTrue: [ Xft.XftFont ]		ifFalse: [ preferredFontClass ]</body></methods><methods><class-id>Graphics.CompositeFont class</class-id> <category>utility</category><body package="Xft-Integration">createFont: bestMatch toResemble: aFontDescription for: fontPolicy	" Let the screen font implementation decide how to do that properly "	^ fontPolicy fontClass createCompositeFont: bestMatch toResemble: aFontDescription for: fontPolicy</body><body package="Xft-Integration">createFontBasedOnEncodings: bestMatch toResemble: aFontDescription for: fontPolicy	"a copy of #createFont:toResemble:for: "	| fonts encodings actualEncodings actualEncoders |	fonts := OrderedCollection new.	encodings := aFontDescription encodings.	actualEncodings := OrderedCollection new.	actualEncoders := OrderedCollection new.	encodings do:		[ :encoding | | font best fontDesc |			fontDesc := aFontDescription copy.			fontDesc encodings: nil.			fontDesc encoding: encoding.			(Locale current ignoreSerifEncodings includes: encoding) ifTrue: [fontDesc serif: nil].			best := fontPolicy findBestFont: fontDesc.			font := (fontPolicy fontClass				createFont: best				toResemble: fontDesc				on: fontPolicy graphicsDevice).			actualEncodings add: font encodingType.			actualEncoders add: font encoder.			fonts add: font].	^CompositeFont new 		with: fonts asArray		priorityTable: (self				getPriorityTableFor: actualEncodings asArray				from: actualEncoders asArray)</body></methods><methods><class-id>Graphics.GraphicsHandle</class-id> <category>Xft</category><body package="Xft-Integration">primDisplayCharacterOfIndex: characterIndex at: aPoint on: aGraphicsContext	" a copy of the original implementation of GraphicsContext&gt;&gt;displayCharacterOfIndex:at: "	aGraphicsContext primDisplayCharacterOfIndex: characterIndex at: aPoint</body><body package="Xft-Integration">primDisplayMappedString: aString from: startIndex to: endIndex at: aPoint withMap: map on: aGraphicsContext	" a copy of the original implementation of GraphicsContext&gt;&gt;displayMappedString:from:to:at:withMap:"	aGraphicsContext		primDisplayMappedString: aString		from: startIndex to: endIndex		at: aPoint		withMap: map</body><body package="Xft-Integration">primDisplayTwoByteString: aString from: startIndex to: endIndex at: aPoint on: aGraphicsContext	" a copy of the original implementation of GraphicsContext&gt;&gt;displayTwoByteString:from:to:at: "	aGraphicsContext		primDisplayTwoByteString: aString		from: startIndex rounded		to: endIndex rounded		at: aPoint rounded</body></methods><methods><class-id>Graphics.ScreenFont class</class-id> <category>private</category><body package="Xft-Integration">createCompositeFont: bestMatch toResemble: aFontDescription for: fontPolicy	" use the original method "	^  CompositeFont createFontBasedOnEncodings: bestMatch toResemble: aFontDescription for: fontPolicy</body></methods><methods><class-id>Graphics.ScreenFont class</class-id> <category>accessing</category><body package="Xft-Integration">listFontNamesAsOneChunk	^ false</body><body package="Xft-Integration">listFontNamesFor: aGraphicsDevice	" a copy of HostGraphicsDevice&gt;&gt;listFontNames "	^aGraphicsDevice primListFontNames collect:		[: fontName | self decodeFontName: fontName ]</body></methods><methods><class-id>Graphics.VariableSizeTextAttributes class</class-id> <category>class initialization</category><body package="Xft-Integration">standardVariableWidthFont	OSHandle currentOS = #unix		ifTrue: 		[	Xft.XftSettings current preferredFontDescription				ifNotNil: [: preferredFontDescription | ^ preferredFontDescription ] 		].	^ super standardVariableWidthFont</body></methods><methods><class-id>Graphics.FontDescription</class-id> <category>private</category><body package="Xft-Integration">findBestMatchOn: fontPolicy allowance: allowance	^ fontPolicy fontClass = Xft.XftFont 		ifTrue: 		[	" let fontconfig do the matching "			self		]		ifFalse: [ fontPolicy bestFont: self allowance: allowance ]</body></methods><methods><class-id>Graphics.ScreenGraphicsContext</class-id> <category>displaying</category><body package="Xft-Integration">displayCharacterOfIndex: characterIndex at: aPoint 	" hook to allow external screen fonts to draw the glyph "	deviceFont ~~ nil 		ifTrue: [ deviceFont primDisplayCharacterOfIndex: characterIndex at: aPoint on: self ].</body><body package="Xft-Integration">displayMappedString: aString from: startIndex to: endIndex at: aPoint withMap: map 	" hook to allow external screen fonts to draw the string "	deviceFont ~~ nil 		ifTrue: [ deviceFont primDisplayMappedString: aString from: startIndex to: endIndex at: aPoint withMap: map on: self ].</body><body package="Xft-Integration">displayTwoByteString: aString from: startIndex to: endIndex at: aPoint 	" hook to allow external screen fonts to draw the string "	deviceFont ~~ nil 		ifTrue: [ deviceFont primDisplayTwoByteString: aString from: startIndex to: endIndex at: aPoint on: self ].</body></methods><methods><class-id>Graphics.ScreenGraphicsContext</class-id> <category>private-initialize-release</category><body package="Xft-Integration">setXftFont: anXftFont	self setDeviceFont:  anXftFont</body></methods><methods><class-id>UI.X11InputManager</class-id> <category>private-XFontSet</category><body package="Xft-Integration">createFontSet: aCompositeFont	" createFontSet relies on XFonts, which are not available here "	^ 0</body></methods><methods><class-id>UI.X11InputManager</class-id> <category>private-XIM</category><body package="Xft-Integration">openXIM	"Return an stXIM for the current locale."	^ [ self openXIM: Screen default key ]		on: Object errorSignal		do: 		[: theException |			" &gt;&gt; Patch: opening a dialog during the image startup phase is not a good idea, VW will hang.			#openXIM: can fail when SCIM or DBus are enabled "			nil 		]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>X11InputManager</name><environment>UI</environment><super>UI.InputManager</super><private>false</private><indexed-type>none</indexed-type><inst-vars>xim defaultFontSet windowMap style ximStyleWithStatusLine ximStyleWithoutStatusLine defaultStatusLineHeight lastView lastWindow </inst-vars><class-inst-vars></class-inst-vars><imports>			private UI.X11InputManagerDictionary.*			</imports><category>Internationalization</category><attributes><includeFiles></includeFiles><includeDirectories></includeDirectories><libraryFiles></libraryFiles><libraryDirectories></libraryDirectories><beVirtual>false</beVirtual><optimizationLevel>full</optimizationLevel><package>Internationalization</package></attributes></class><class><name>GraphicsHandle</name><environment>Graphics</environment><super>Core.UninterpretedBytes</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>ScreenGraphicsContext</name><environment>Graphics</environment><super>Graphics.GraphicsContext</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Support</category><attributes><package>Graphics-Support</package></attributes></class><class><name>FontDescription</name><environment>Graphics</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name family manufacturer pixelSize flags masks color encoding encodings </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Fonts</category><attributes><package>Graphics-Fonts</package></attributes></class><class><name>Screen</name><environment>Graphics</environment><super>Graphics.HostGraphicsDevice</super><private>false</private><indexed-type>none</indexed-type><inst-vars>boundingBox subRegions resolution rendererName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class></st-source>