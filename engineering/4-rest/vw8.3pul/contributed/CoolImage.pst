<?xml version="1.0"?><st-source><!-- Name: CoolImageNotice: Copyright 2002 - 2013 Travis GriggsThis utility is free to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: I put together CoolImage, becuase I wanted something better than the image editor provided by the baseVW system. That editor lacked strong editing capabilities and the ability to deal with opaqued graphics.  If you have questions on how/what any of the buttons or options mean, drop me a line and I'll answer it that way, rather than generate a comprehensive manual here.  The architecture of CoolImage is such that it treats various editing tools as 'plug in' components.  Look at EditingTool and its many sub-classes.   If you add any of your own plug ins, please send them to me, so that I can incorporate them in this tool.  				Travis GriggsDbIdentifier: bear73DbTrace: 454526DbUsername: nrossDbVersion: 8.0 - 16DevelopmentPrerequisites: #(#(#any 'UIPainter' ''))PackageName: CoolImageParcel: #('CoolImage')ParcelName: CoolImagePrerequisiteParcels: #(#('UIPainter' ''))PrintStringCache: (8.0 - 16,nross)Version: 8.0 - 16Date: 7:23:06 AM January 9, 2015 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.1 (jan15.1) of January 9, 2015 on January 9, 2015 at 7:23:06 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>CoolImage</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			</imports><category>CoolImage</category><attributes><package>CoolImage</package></attributes></name-space><class><name>EditingTool</name><environment>CoolImage</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>imageModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.EditingTool</class-id><body>I'm an abstract class for image editing tools.Subclasses must implement the following messages:	Class protocol:		resources			toolIconInstance Variables:	imageModel	&lt;CoolImageModel&gt;'</body></comment><class><name>DrawingTool</name><environment>CoolImage</environment><super>CoolImage.EditingTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>foregroundColorHolder backgroundColorHolder controller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.DrawingTool</class-id><body>I am, once again, an abstraction level in the editing tool heirarchy. Subclasses of me are those that respond to UI-events from a containing controller. Accordingly, I hold the information I'll need to edit the client image, these are hooked up at creation time. Most subclasses just require the implementation of the #redButtonPressedEvent: and #yellowButtonPressedEvent: messages.Subclasses must implement the following messages:	Class protocol:		resources			toolIconInstance Variables:	backgroundColorHolder		&lt;ValueHolder of: ColorValue&gt; model of color to use for yellow button events	foregroundColorHolder		&lt;ValueHolder of: ColorValue&gt; the model of color to use for red button events	controller					&lt;CoolImageToolController&gt; the domain for performing my editing operations on'</body></comment><class><name>DrawLine</name><environment>CoolImage</environment><super>CoolImage.DrawingTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>anchor currentColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><class><name>FlipTool</name><environment>CoolImage</environment><super>CoolImage.EditingTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.FlipTool</class-id><body>Flip tools just flip the image one way or another. This is an abstract class. They are immediate.'</body></comment><class><name>FlipX</name><environment>CoolImage</environment><super>CoolImage.FlipTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><class><name>Copy</name><environment>CoolImage</environment><super>CoolImage.EditingTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>largeView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.Copy</class-id><body>This tool does the standard copy function. It uses an immediate rectangle grab to get the bounds and then throws the result in the PasteBuffer of CoolImageWorkbench. Since it is not subclassed from the DrawingTool, it does not get events handed down to it by the controller. Therefore, it has a reference to the view for its context of what is being grabbed.Instance Variables:	largeView		&lt;CoolImageLargeView&gt; the view that I am to grab from'</body></comment><class><name>Resize</name><environment>CoolImage</environment><super>CoolImage.Copy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>workbench </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.Resize</class-id><body>The resize tool changes the bounding box of the current image. It inherits from the copy tool, because he has the mechanism for getting at an immediate rectangle relative to the large view. But he also holds onto the workbench directly since he has the services for creating new images of given sizes based on the current.Instance Variables:	workbench		&lt;CoolImageWorkbench&gt;'</body></comment><class><name>ToolSelectionTracker</name><environment>CoolImage</environment><super>UI.SelectionTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tool </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.ToolSelectionTracker</class-id><body>Abstract for doing drag type operations from the tools, they need access to the information in the tool.Instance Variables:	tool		&lt;CoolImageDrawingTool&gt; only non-immediate tools ever need me'</body></comment><class><name>DrawLineTracker</name><environment>CoolImage</environment><super>CoolImage.ToolSelectionTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dragOrigin viewOrigin dragEnd lineDrawProcess </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><class><name>DrawPixel</name><environment>CoolImage</environment><super>CoolImage.DrawingTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.DrawPixel</class-id><body>This is the class bitmap editng mode. As the mouse is dragged around over the image, the pixels under the mouse are flipped to the appropriate color. I use a customized selection tracker to do the actual dragging. I set the currentColor at button down time, since mouse tracking events don't reveal which button is down. The selectionTracker is an instance of CoolImagePixelSelectionTracker.Instance Variables:	currentColor		&lt;ColorValue&gt; either the foreground or background color, depending on which kind of event initiated the drag'</body></comment><class><name>DrawRectangle</name><environment>CoolImage</environment><super>CoolImage.DrawingTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.DrawRectangle</class-id><body>The rectangle filler gets a rectangle from the user, and fills it with the appropriate color.'</body></comment><class><name>Workbench</name><environment>CoolImage</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>imageModel zoomHolder backgroundColorHolder foregroundColorHolder zoomChoices currentToolHolder targetSelector targetClass doesCaching doesScreenPalette </inst-vars><class-inst-vars></class-inst-vars><imports>			Refactory.Browser.*			</imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.Workbench</class-id><body>This is the main application model behind the tool used to edit cool images. It uses a CoolImageModel to do the "domain" work. It uses two color selectors (one for foreground/boutton1 and one background/button2). It keeps track of the currentTool being used for editing the image with the mouse (note that the editing functions are not currently done with tools). Buttons in the button bar are hooked up as a radios on the tool type in the preBuildWith: method. In the future, I would like to create a class cache of tools that are "activated" and have the generation of the tool buttons be totally automatic. As well, some of the tool specifics (i.e. graphic) should then be offloaded into those tool classes. This will make the workbench much more extensible for third party tools. Class Variables:	PasteBuffer		&lt;(OrderedCollection of: Image) | nil&gt; a queue of images that have been copied or cut from any tool, class side methods limit it size and garuantee lazy initialization	PasteBufferLimit		&lt;Integer | nil&gt; lazy initializing limit of how big the PasteBuffer should be allowed to get	RegisteredTools			&lt;nil | IdentitySet&gt; of objects (usually classes) that can be sent the message #newTool to return a newTool. See the class CoolImageEditingTool for interface details.Instance Variables:	imageModel			&lt;CoolImageModel&gt; the domain model for the image editing, initialized with a white 32x32 image	zoomHolder			&lt;ValueHolder of: Integer&gt; the zoom factor to apply for the large view	backgroundColorHolder			&lt;ValueHolder of: ColorValue&gt; this gets wrapped with a ColorSelector for the color selection canvas	foregroundColorHolder			&lt;ValueHolder of: ColorValue&gt; this gets wrapped with a ColorSelector for the color selection canvas	zoomChoices			&lt;ValueHolder of: List&gt; list of possible zoom factors, initialized to 5, 8, 10, but dynamically updated to include newly typed in zoom factors	currentToolHolder			&lt;ValueHolder of: (nil | ImageEditingTool)&gt; the current tool for editing the image (the large view controller hangs onto this save ValueModel)	targetSelector			&lt;nil | Symbol&gt; the method name either opened from or last saved as	targetClassName			&lt;nil | Symbol&gt; the class name either opened from or last save into'</body></comment><class><name>FlipY</name><environment>CoolImage</environment><super>CoolImage.FlipTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.FlipY</class-id><body>I flip the image in the Y direction using facilities provided the Image itself.'</body></comment><class><name>ActualView</name><environment>CoolImage</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>imageModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.ActualView</class-id><body>I just draw the image in the model actual size. I have methods for just updating bits of the image for various drawing functions.Instance Variables:	cachedGC	&lt;GraphicsContext&gt; keep track of the last GC sent thru the displayOn: method	imageModel	&lt;CoolImageModel&gt; my "model", I don't use a dependent part because the "model" here is an EventManager (even though I do the exact same thing in each case, redraw the image)'</body></comment><class><name>FillTool</name><environment>CoolImage</environment><super>CoolImage.DrawingTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.FillTool</class-id><body>This tool tells the model to change all pixels that match the same as currently under the mouse and are bounded by any other color, to the color held by the according color model. Subclasses actually define the pattern to erode with.Subclasses must implement the following messages:	Instance protocol:		private-accessing			dilationPattern	Class protocol:		resources			toolIcon'</body></comment><class><name>ColorSelectorDialog</name><environment>CoolImage</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>colorSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Color Selection</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.ColorSelectorDialog</class-id><body>Missing comment'</body></comment><class><name>OneTimeTool</name><environment>CoolImage</environment><super>CoolImage.DrawingTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>originalTool </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.OneTimeTool</class-id><body>I am yet another abstraction for tools that keep track of which tool was loaded before this one. At hookup time, I look at the tool currently loaded and store it. When the mouse button up event is recieved, I then restore that original tool.Subclasses must implement the following messages:	Class protocol:		resources			toolIconInstance Variables:	originalTool		&lt;CoolImageEditingTool&gt;'</body></comment><class><name>ToolController</name><environment>CoolImage</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentToolHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.ToolController</class-id><body>This is the controller that goes with the large view in the workbench (it should probably be renamed). It is much like PPD's own ModalController, but different enough that I deemed it only effective to learn from theirs, not use it. The main problem was in that the "modes" had to be fully event enabled (I didn't want to do all of that), the controller assumed that IT had something to do if the mode didn't (here, the "tools" do all work) and it was subclassed from ControllerWithMenu which meant that all kinds of code and stuff existed for running a menu from button two (in this case, button two does the same things button does, but with the background color instead of the foreground).This controller just passes events along to it's current "tool", provided the current tool is not nil. The tool holder is held by the workbench and toggled by him. Currently, I just forward #redButtonPressedEvent: and #yellowButtonPressedEvent: to him. Eventually, I may do #enterEvent: and #exitEvent: to flip the mouse cursor.I filter modifier state to apply special tools in special cases (namely, the sip tool is always used for an event with shift on it, and then immediately the old tool is replaced).Instance Variables:	currentToolHolder		&lt;ValueHolder of: ImageEditingTool&gt;'</body></comment><class><name>Cut</name><environment>CoolImage</environment><super>CoolImage.Copy</super><private>false</private><indexed-type>none</indexed-type><inst-vars>backgroundColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.Cut</class-id><body>The cut tool does the same thing as the copy tool. In addition after it has copied, it fills in the copied rectangle with the current background color.Instance Variables:	backgroundColor		&lt;ColorValue&gt; set at hookup time'</body></comment><class><name>LargeView</name><environment>CoolImage</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>imageModel pixmap </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.LargeView</class-id><body>I draw the scaled large view of the image in the CoolImageWorkbench. I hook up to the various events posted by the image model, to perform kinds of redisplay. I employ a bit of optimization/cache-ing for fast visual feed back purposes. Namely, everything I draw, I draw onto a pixmap. I keep a copy of the pixmap's GC around always. I also keep a copy of the screen based GC as well, so that I don't have to constantly hunt it down to cast the changes on the pixmap up to the screen. These of course have to be updated at the appropriate times. The model is the value holder for the zoom value. I recompute the extent and everything if that should change. I work closely with CoolImageToolController to help tools interact with me.Instance Variables:	pixmap		&lt;Pixmap&gt; flushed by releasing and nilling it, it will be automatically recreated (along with its GC) on request	pixmapGC		&lt;GraphicsContext&gt; used for drawing on the pixmap, updated with the pixmap	cachedGC		&lt;GraphicsContext&gt; handed down from the screen, it is recached everytime we go through the displayOn: method, which then keeps it up to date.	imageModel			&lt;CoolImageModel&gt; the image I'm supposed to draw'</body></comment><class><name>FlipXY</name><environment>CoolImage</environment><super>CoolImage.FlipTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.FlipXY</class-id><body>I flip the image in both the X and Y direction using facilities provided the Image itself.'</body></comment><class><name>ImageModel</name><environment>CoolImage</environment><super>Core.EventManager</super><private>false</private><indexed-type>none</indexed-type><inst-vars>image lastImage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.ImageModel</class-id><body>This is the domain model for cool image editing. It holds the image under edit and has various image editing methods. All image editing methods, post some sort of event, which audience views (etc) can react to accordingly. Four events are currently supported: #newImage #boxColored #pointColored #complexEditCompleted. The last is for edits that are deemed to complex to describe simply, it is esentially the same as a new image, but one of the same size. Views can therefore just redraw rather than invalidating.I also hold onto a copy of the last image. This is for undo operations. It is the responsibility of the various tools to update this when appropriate. This could be changed to be multiple undo, by using a push stack collection, rather than a single revolving instance variable.Instance Variables:	image	&lt;Image&gt;	lastImage		&lt;nil | Image&gt;'</body></comment><class><name>Blend</name><environment>CoolImage</environment><super>CoolImage.EditingTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><class><name>WeakFill</name><environment>CoolImage</environment><super>CoolImage.FillTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.WeakFill</class-id><body>The line fill tool, uses an aggressive plus pattern (see below) to perform a fill (defined by my superclass). By adding the corners to the pattern, we can travel along lines that are kitty corner connected.Pattern:		1 1 1		1 0 1		1 1 1'</body></comment><class><name>DrawPixelTracker</name><environment>CoolImage</environment><super>CoolImage.ToolSelectionTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.DrawPixelTracker</class-id><body>The pixel selection tracker just acts as a mouse event grabbing callback to the pixel tool. It does have to override its parents implementation of yellow button handling, since we want to be able to grab mouse events for that button too.'</body></comment><class><name>StrongFill</name><environment>CoolImage</environment><super>CoolImage.FillTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.StrongFill</class-id><body>The area fill tool, uses a non aggressive plus pattern (see below) to perform a fill (defined by my superclass).Pattern:		0 1 0		1 0 1		0 1 0'</body></comment><class><name>ColorSelectorSwatchView</name><environment>CoolImage</environment><super>Graphics.DependentPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Color Selection</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.ColorSelectorSwatchView</class-id><body>Missing comment'</body></comment><class><name>Swap</name><environment>CoolImage</environment><super>CoolImage.OneTimeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.Swap</class-id><body>This tool swaps all of the color picked under the mouse click to the appropriate color (i.e. foreground or background depending on which button is pressed).'</body></comment><class><name>PointDialog</name><environment>CoolImage</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>xHolder yHolder validator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Utility</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.PointDialog</class-id><body>Missing comment'</body></comment><class><name>Capture</name><environment>CoolImage</environment><super>CoolImage.EditingTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.Capture</class-id><body>The capture tool, just uses 'Image fromUser' to fill the imageModel.'</body></comment><class><name>Undo</name><environment>CoolImage</environment><super>CoolImage.EditingTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.Undo</class-id><body>Works directly with the image model to reel back to the last saved image. Other tools should back up the image at appropriate times.'</body></comment><class><name>Sip</name><environment>CoolImage</environment><super>CoolImage.OneTimeTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.Sip</class-id><body>The color sipper tool sets the values of either color model, based on the color at the point selected in the current image. It is the antithesis of the pen tracing tool.'</body></comment><class><name>Zoom</name><environment>CoolImage</environment><super>CoolImage.EditingTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.Zoom</class-id><body>Get x and y values to magnify the image by and use methods in Image to change the image directly.'</body></comment><class><name>Paste</name><environment>CoolImage</environment><super>CoolImage.Cut</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.Paste</class-id><body>The paste tool does the opposite of the cut tool. It also needs access to the background color, to decide how to filter the incoming paste. Rather than get a rectangle from the user relative to the large view, it gets a point (the image is predetermined by what is being pasted).'</body></comment><class><name>ColorSelector</name><environment>CoolImage</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>colorModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Color Selection</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.ColorSelector</class-id><body>Missing comment'</body></comment><class><name>Rotate</name><environment>CoolImage</environment><super>CoolImage.EditingTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Cool Image</category><attributes><package>CoolImage</package></attributes></class><comment><class-id>CoolImage.Rotate</class-id><body>The rotate tool operates on the image model itself, using facilities in the Image class to rotate the image 1 quadrant.'</body></comment><shared-variable><name>PasteBuffer</name><environment>CoolImage.Workbench</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>CoolImage</package></attributes></shared-variable><shared-variable><name>PasteBufferLimit</name><environment>CoolImage.Workbench</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>CoolImage</package></attributes></shared-variable><shared-variable><name>RegisteredTools</name><environment>CoolImage.Workbench</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>CoolImage</package></attributes></shared-variable><shared-variable><name>NamedColors</name><environment>CoolImage.ColorSelector</environment><private>false</private><constant>false</constant><category>shares</category><initializer>Dictionary new</initializer><attributes><package>CoolImage</package></attributes></shared-variable><methods><class-id>CoolImage.EditingTool</class-id> <category>actions</category><body package="CoolImage">doAction	"immediate tools (see class side definition of this method) are operated through this method. 	Subclasses will want to use this as their 'entry point'"	Dialog warn: 'This tool doesn''t do anything!'</body></methods><methods><class-id>CoolImage.EditingTool</class-id> <category>initialize</category><body package="CoolImage">hookUpTo: aWorkbench 	"subclasses may want to do more"	imageModel := aWorkbench imageModel</body></methods><methods><class-id>CoolImage.EditingTool</class-id> <category>private-accessing</category><body package="CoolImage">image	^self imageModel image</body><body package="CoolImage">imageModel	^imageModel</body><body package="CoolImage">toolIcon	^self class toolIcon</body></methods><methods><class-id>CoolImage.EditingTool class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"all classes should return a button graphic for that tool, this is actually called from the instance side, 	so that if different instances of the same tool, wanted to have different icons, they could"	^self subclassResponsibility</body></methods><methods><class-id>CoolImage.EditingTool class</class-id> <category>testing</category><body package="CoolImage">isTransactional	"immediate tools are those that don't need any additional mouse input off of the view or anything (they may choose to open a query dialog or something). They should do something with the doAction message, whereas deferred action tools wait for more input. All my subclasses unless otherwise defined fit this model"	^false</body><body package="CoolImage">sortIndex	^50</body></methods><methods><class-id>CoolImage.EditingTool class</class-id> <category>accessing</category><body package="CoolImage">helpText	^name asString</body><body package="CoolImage">newTool	^self new</body><body package="CoolImage">register	"self register"	Workbench registerTool: self</body><body package="CoolImage">unRegister	"self unRegister"	Workbench unRegisterTool: self</body></methods><methods><class-id>CoolImage.DrawingTool</class-id> <category>events</category><body package="CoolImage">redButtonPressedEvent: anEvent 	self imageModel backupImage</body><body package="CoolImage">redButtonReleasedEvent: anEvent 	"subclasses may want to do more here"</body><body package="CoolImage">yellowButtonPressedEvent: anEvent 	self imageModel backupImage</body><body package="CoolImage">yellowButtonReleasedEvent: anEvent 	"subclasses may want to do more here"</body></methods><methods><class-id>CoolImage.DrawingTool</class-id> <category>private-accessing</category><body package="CoolImage">backgroundColor	^backgroundColorHolder value</body><body package="CoolImage">foregroundColor	^foregroundColorHolder value</body><body package="CoolImage">imageBoundsPoint: aPoint 	^self imageModel boundsPoint: aPoint</body><body package="CoolImage">imagePointFor: aPoint 	^self view imagePointFor: aPoint</body><body package="CoolImage">imagePointForEvent: anEvent 	^self imagePointFor: (self mousePointForEvent: anEvent)</body><body package="CoolImage">mousePointForEvent: anEvent 	^controller sensor mousePointFor: anEvent</body><body package="CoolImage">userRectangle	| rect windowO myO imRect myOFromWin |	windowO := self view topComponent globalOrigin.	myOFromWin := self view localPointToGlobal: 0 @ 0.	myO := windowO + myOFromWin.	rect := Rectangle fromUser: self view zoom asPoint				phase: myO \\ self view zoom.	imRect := (rect translatedBy: myO negated) scaledBy: 1 / self view zoom.	^imRect</body><body package="CoolImage">view	^controller view</body></methods><methods><class-id>CoolImage.DrawingTool</class-id> <category>initialize</category><body package="CoolImage">controller: aController 	controller := aController</body><body package="CoolImage">hookUpTo: aWorkbench 	super hookUpTo: aWorkbench.	backgroundColorHolder := aWorkbench backgroundColorHolder.	foregroundColorHolder := aWorkbench foregroundColorHolder</body></methods><methods><class-id>CoolImage.DrawingTool class</class-id> <category>testing</category><body package="CoolImage">isTransactional	"immediate tools are those that don't need any additional mouse input off of the view or anything (they may choose to open a query dialog or something). They should do something with the doAction  message, whereas deferred action tools wait for more input. All my subclasses are the other kind, we wait for more input from the user via his controller"	^true</body></methods><methods><class-id>CoolImage.DrawLine</class-id> <category>events</category><body package="CoolImage">redButtonPressedEvent: anEvent 	currentColor := self foregroundColor.	self selectionTracker redButtonPressedEvent: anEvent</body><body package="CoolImage">yellowButtonPressedEvent: anEvent 	currentColor := self backgroundColor.	self selectionTracker yellowButtonPressedEvent: anEvent</body></methods><methods><class-id>CoolImage.DrawLine</class-id> <category>private-accessing</category><body package="CoolImage">defaultLineWidth	^1</body><body package="CoolImage">selectionTracker	^(DrawLineTracker on: controller) tool: self</body></methods><methods><class-id>CoolImage.DrawLine</class-id> <category>private</category><body package="CoolImage">anchorOriginWith: anEvent 	anchor := self imagePointForEvent: anEvent</body><body package="CoolImage">drawLineTo: aPoint 	| end |	end := self imagePointFor: aPoint.	(anchor dist: end) &lt;= 2 sqrt ifTrue: [^self].	self imageModel backupImage.	self imageModel 		drawLineFrom: anchor		to: end		width: self defaultLineWidth		with: currentColor</body></methods><methods><class-id>CoolImage.DrawLine class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^14</body></methods><methods><class-id>CoolImage.FlipX</class-id> <category>actions</category><body package="CoolImage">doAction	self imageModel backupImage.	self imageModel image: self image reflectedInX</body></methods><methods><class-id>CoolImage.FlipX class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^61</body></methods><methods><class-id>CoolImage.Copy</class-id> <category>private</category><body package="CoolImage">addToPasteBuffer: anImage 	Workbench addToPasteBuffer: anImage</body><body package="CoolImage">userRectangle	| windowO viewO o rect |	windowO := largeView topComponent globalOrigin.	viewO := largeView localPointToGlobal: 0 @ 0.	o := windowO + viewO.	rect := Rectangle fromUser: largeView zoom asPoint				phase: o \\ largeView zoom.	^(rect translatedBy: o negated) scaledBy: largeView zoom reciprocal</body></methods><methods><class-id>CoolImage.Copy</class-id> <category>initialize</category><body package="CoolImage">hookUpTo: aWorkbench 	super hookUpTo: aWorkbench.	largeView := aWorkbench coolImageWidgetNamed: #largeView</body></methods><methods><class-id>CoolImage.Copy</class-id> <category>actions</category><body package="CoolImage">doAction	| rect |	rect := self userRectangle.	rect extent = 1 		ifFalse: [self addToPasteBuffer: (self image coolImageCopyBounds: rect)]</body></methods><methods><class-id>CoolImage.Copy class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^31</body></methods><methods><class-id>CoolImage.Resize</class-id> <category>initialize</category><body package="CoolImage">hookUpTo: aWorkbench 	super hookUpTo: aWorkbench.	workbench := aWorkbench</body></methods><methods><class-id>CoolImage.Resize</class-id> <category>actions</category><body package="CoolImage">doAction	| rect transX transY newIm |	rect := self userRectangle.	rect extent = 1 ifTrue: [^self].	self imageModel backupImage.	transX := rect left negated.	transY := rect top negated.	newIm := workbench makeImageSized: rect extent from: self image.	(self image bounds intersect: rect) inBoundsDo: 			[:x :y | 			newIm 				atX: x + transX				y: y + transY				put: (self image atX: x y: y)].	self imageModel image: newIm</body></methods><methods><class-id>CoolImage.Resize class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^71</body></methods><methods><class-id>CoolImage.ToolSelectionTracker</class-id> <category>initialize</category><body package="CoolImage">tool: anImageEditingTool 	tool := anImageEditingTool</body></methods><methods><class-id>CoolImage.ToolSelectionTracker</class-id> <category>events</category><body package="CoolImage">yellowButtonPressedEvent: aMouseButtonEvent 	self setUpFor: aMouseButtonEvent.	aMouseButtonEvent isBlue 		ifFalse: [self trackSelectionFor: (self cursorPointFor: aMouseButtonEvent)].	aMouseButtonEvent initiator grabMouseEventFor: self.	^nil</body><body package="CoolImage">yellowButtonReleasedEvent: aMouseButtonEvent 	self sensor ungrabMouseEventFor: self.	self finishSelectionFor: (self cursorPointFor: aMouseButtonEvent)</body></methods><methods><class-id>CoolImage.DrawLineTracker</class-id> <category>private</category><body package="CoolImage">finishSelectionFor: aPoint 	lineDrawProcess terminate.	tool drawLineTo: aPoint.	Cursor normal show</body><body package="CoolImage">setUpFor: anEvent 	| windowO viewOFromWin |	dragEnd := dragOrigin := anEvent globalPoint.	windowO := tool view topComponent globalOrigin.	viewOFromWin := tool view localPointToGlobal: 0 @ 0.	viewOrigin := windowO + viewOFromWin.	Cursor crossHair show.	tool anchorOriginWith: anEvent.	lineDrawProcess := 			[(Delay forMilliseconds: 30) wait.			Transcript show: '.'.			Screen default 				displayShape: (Array with: dragOrigin with: dragEnd)				lineWidth: tool defaultLineWidth * 4				at: 0 @ 0				forMilliseconds: 250] 					forkAt: Processor userInterruptPriority</body><body package="CoolImage">trackSelectionFor: aPoint 	dragEnd := aPoint + viewOrigin</body></methods><methods><class-id>CoolImage.DrawPixel</class-id> <category>events</category><body package="CoolImage">redButtonPressedEvent: anEvent 	currentColor := self foregroundColor.	self imageModel backupImage.	self selectionTracker redButtonPressedEvent: anEvent</body><body package="CoolImage">yellowButtonPressedEvent: anEvent 	currentColor := self backgroundColor.	self imageModel backupImage.	self selectionTracker yellowButtonPressedEvent: anEvent</body></methods><methods><class-id>CoolImage.DrawPixel</class-id> <category>private</category><body package="CoolImage">colorActualPoint: aPoint 	imageModel colorPoint: (self imagePointFor: aPoint) with: currentColor</body></methods><methods><class-id>CoolImage.DrawPixel</class-id> <category>private-accessing</category><body package="CoolImage">selectionTracker	^(DrawPixelTracker on: controller) tool: self</body></methods><methods><class-id>CoolImage.DrawPixel class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^11</body></methods><methods><class-id>CoolImage.DrawRectangle</class-id> <category>events</category><body package="CoolImage">redButtonPressedEvent: anEvent 	| rect |	rect := self userRectangle.	rect extent = 1 		ifFalse: 			[(self imageModel)				backupImage;				colorRectangle: rect with: self foregroundColor]</body><body package="CoolImage">yellowButtonPressedEvent: anEvent 	| rect |	rect := self userRectangle.	rect extent = 1 		ifFalse: 			[(self imageModel)				backupImage;				colorRectangle: rect with: self backgroundColor]</body></methods><methods><class-id>CoolImage.DrawRectangle class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^16</body></methods><methods><class-id>CoolImage.Workbench</class-id> <category>accessing</category><body package="CoolImage">backgroundColorHolder	^backgroundColorHolder</body><body package="CoolImage">currentTool	^currentToolHolder value</body><body package="CoolImage">currentTool: aTool 	^currentToolHolder value: aTool</body><body package="CoolImage">foregroundColorHolder	^foregroundColorHolder</body><body package="CoolImage">imageModel	^imageModel</body><body package="CoolImage">targetClass	^targetClass</body><body package="CoolImage">targetSelector	^targetSelector</body></methods><methods><class-id>CoolImage.Workbench</class-id> <category>private-accessing</category><body package="CoolImage">backgroundColor	^backgroundColorHolder value</body><body package="CoolImage">foregroundColor	^foregroundColorHolder value</body><body package="CoolImage">getLibraryIcons	| methods template |	methods := List new.	IconLibrary withAllSubclasses do: 			[:each | 			template := '*' , each default defaultIconSize.			each class 				selectorsAndMethodsDo: [:sel :meth | (template match: sel) ifTrue: [methods add: meth]]].	methods sortWith: [:a :b | a selector &lt; b selector].	^methods</body><body package="CoolImage">image	^imageModel image</body><body package="CoolImage">libraryIconDisplayString: each 	| text visualKey |	visualKey := self visualKeyFromSelector: each selector.	text := ('&lt;1s&gt; {&lt;2p&gt;}' expandMacrosWith: visualKey				with: each mclass soleInstance) asText.	text 		emphasizeFrom: 1		to: 1		with: #leadingInsert -&gt; (each mclass soleInstance visualFor: visualKey).	^text</body><body package="CoolImage">promptForIconLibraryTarget	| oldTargetClass oldTargetSelector |	oldTargetClass := targetClass.	oldTargetSelector := targetSelector.	self promptForTarget ifFalse: [^false].	(targetClass inheritsFrom: IconLibrary) 		ifFalse: 			[Dialog warn: 'Target class must be a kind of IconLibrary'.			targetClass := oldTargetClass.			targetSelector := oldTargetSelector.			^false].	^true</body><body package="CoolImage">sortedTools	^self class registeredTools asSortedCollection: 			[:a :b | 			a sortIndex = b sortIndex 				ifTrue: [a name &lt; b name]				ifFalse: [a sortIndex &lt; b sortIndex]]</body><body package="CoolImage">toolButtonWidth	^32</body><body package="CoolImage">zoom	^zoomHolder value</body></methods><methods><class-id>CoolImage.Workbench</class-id> <category>private-aspects</category><body package="CoolImage">backgroundColorSelector	^ColorSelector on: backgroundColorHolder</body><body package="CoolImage">buttonsComposite	^CompositePart new</body><body package="CoolImage">doesCaching	^doesCaching</body><body package="CoolImage">doesScreenPalette	^doesScreenPalette</body><body package="CoolImage">foregroundColorSelector	^ColorSelector on: foregroundColorHolder</body><body package="CoolImage">largeView	| view |	view := (LargeView model: zoomHolder) imageModel: imageModel.	view controller currentToolHolder: currentToolHolder.	^view</body><body package="CoolImage">smallView	^ActualView new imageModel: imageModel</body><body package="CoolImage">zoomChoices	^zoomChoices</body><body package="CoolImage">zoomHolder	^zoomHolder</body></methods><methods><class-id>CoolImage.Workbench</class-id> <category>validations</category><body package="CoolImage">validateCount: aController 	| ev |	aController hasEditValue 		ifFalse: 			[(aController model)				changed;				beepTheBell.			^false].	ev := aController editValue.	(ev &gt; 0 and: [ev isInteger]) 		ifFalse: 			[(aController model)				changed;				beepTheBell.			^false].	^true</body></methods><methods><class-id>CoolImage.Workbench</class-id> <category>private-initialize</category><body package="CoolImage">addToolButtons	| bldr tools |	bldr := builder newSubBuilder.	bldr composite: (self coolImageWidgetNamed: #buttonsComposite).	(tools := self sortedTools) keysAndValuesDo: 			[:i :tool | 			| spec |			spec := ActionButtonSpec new.			spec				model: (self toolButtonModel: tool);				label: tool toolIcon;				layout: (self toolLayout: i);				helpText: tool helpText;				hasCharacterOrientedLabel: false;				hasImageOrientedLabel: true;				noTabbing;				defaultable: false.			bldr add: spec].	bldr popComposite.	self currentTool: (tools first newTool hookUpTo: self)</body><body package="CoolImage">toolButtonModel: aToolClass 	| buttonModel |	aToolClass isTransactional 		ifFalse: 			[buttonModel := (PluggableAdaptor on: false asValue) 						getBlock: [:m | false]						putBlock: 							[:m :v | 							(aToolClass newTool)								hookUpTo: self;								doAction]						updateBlock: [:m :v :a | false]]		ifTrue: 			[buttonModel := (PluggableAdaptor on: currentToolHolder) 						getBlock: [:m | m value class = aToolClass]						putBlock: 							[:m :v | 							| newTool |							newTool := aToolClass newTool.							newTool hookUpTo: self.							m value: newTool]						updateBlock: [:m :v :a | true]].	^buttonModel</body><body package="CoolImage">toolLayout: anInteger 	^(LayoutFrame new)		bottomFraction: 1;		leftOffset: (anInteger - 1) * self toolButtonWidth;		rightOffset: anInteger * self toolButtonWidth</body></methods><methods><class-id>CoolImage.Workbench</class-id> <category>private</category><body package="CoolImage">addMethod: aString 	| change |	change := AddMethodChange 				compile: aString				in: targetClass class				classified: #resources.	RefactoryChangeManager instance performChange: change</body><body package="CoolImage">buildMethod: aString 	| ws |	ws := String new writeStream.	ws		nextPutAll: targetSelector;		cr.	ws		tab;		nextPutAll: '"UIMaskEditor new openOnClass: self andSelector: #';		nextPutAll: targetSelector;		nextPut: $";		cr.	ws cr.	ws		tab;		nextPutAll: '&lt;resource: #image&gt;';		cr.	ws cr.	ws		tab;		nextPut: $^;		nextPutAll: aString.	^ws contents</body><body package="CoolImage">colorMethod	| baseString |	baseString := self image minimalStorageString.	doesScreenPalette 		ifTrue: 			[baseString := '(&lt;1s&gt;) convertForGraphicsDevice: Screen default' 						expandMacrosWith: baseString].	doesCaching 		ifTrue: [baseString := 'CachedImage on: (&lt;1s&gt;)' expandMacrosWith: baseString].	^self buildMethod: baseString</body><body package="CoolImage">computeMask	^self image convertToCoverageWithTransparentPixel: (self image palette 				indexOfPaintNearest: self backgroundColor)</body><body package="CoolImage">convertImage: anImagyThingie 	| withoutCache withoutMask |	withoutMask := (anImagyThingie isKindOf: OpaqueImage) 				ifTrue: 					[self extractBackColor: anImagyThingie.					anImagyThingie figure]				ifFalse: [anImagyThingie].	withoutCache := (doesCaching := withoutMask isKindOf: CachedImage) 				ifTrue: [withoutMask image]				ifFalse: [withoutMask].	(withoutCache palette isKindOf: CoveragePalette) 		ifTrue: [withoutCache palette: MonoMappedPalette whiteBlack].	imageModel image: (withoutCache convertForGraphicsDevice: Screen default)</body><body package="CoolImage">extractBackColor: anOpaqueImage 	| figure shape |	figure := anOpaqueImage figure asImage.	shape := anOpaqueImage shape asImage.	0 to: shape height - 1		do: 			[:y | 			0 to: shape width - 1				do: 					[:x | 					(shape valueAtPoint: x @ y) coverage = 0 						ifTrue: [^backgroundColorHolder value: (figure valueAtPoint: x @ y)]]]</body><body package="CoolImage">finishInstall	Transcript		cr;		nextPutAll: targetClass name;		nextPut: $&gt;;		nextPutAll: targetSelector;		nextPutAll: ' defined';		endEntry.	targetClass removeSelector: #markedAsSystemClass.	UIFinderVW2 installed: (Array with: targetClass with: targetSelector)</body><body package="CoolImage">iconLibraryFigureMethod	| oldDoesScreenPalette oldDoesCaching |	oldDoesScreenPalette := doesScreenPalette.	oldDoesCaching := doesCaching.	^[self colorMethod] ensure: 			[doesScreenPalette := doesCaching := false.			doesScreenPalette := oldDoesScreenPalette.			doesCaching := oldDoesCaching]</body><body package="CoolImage">iconLibraryShapeMethod	| oldDoesScreenPalette oldDoesCaching oldTargetSelector |	oldDoesScreenPalette := doesScreenPalette.	oldDoesCaching := doesCaching.	oldTargetSelector := targetSelector.	^	[targetSelector := (targetSelector , 'mask') asSymbol.	doesScreenPalette := doesCaching := false.	self maskMethod] 			ensure: 				[doesScreenPalette := oldDoesScreenPalette.				doesCaching := oldDoesCaching.				targetSelector := oldTargetSelector]</body><body package="CoolImage">imageFromClass: aClass selector: aSelectorSymbol 	| originalImage |	originalImage := aClass perform: aSelectorSymbol.	self convertImage: originalImage.	targetClass := aClass.	targetSelector := aSelectorSymbol</body><body package="CoolImage">imageFromFileNamed: aFilename		| file reader originalImage |	file := aFilename asFilename.	reader := ImageReader fromFile: file.	originalImage := reader image.	imageModel image: originalImage</body><body package="CoolImage">imageFromLibrary: anIconLibrary selector: aSelectorSymbol 	| originalImage |	originalImage := anIconLibrary 				visualFor: (self visualKeyFromSelector: aSelectorSymbol).	self convertImage: originalImage.	targetClass := anIconLibrary.	targetSelector := aSelectorSymbol</body><body package="CoolImage">makeImageSized: aPoint from: anImageOrNil 	| im pix |	im := Image 				extent: aPoint				depth: (anImageOrNil isNil 						ifTrue: [Screen default colorDepth]						ifFalse: [anImageOrNil depth])				bitsPerPixel: (anImageOrNil isNil 						ifTrue: [Screen default colorBitsPerPixel]						ifFalse: [anImageOrNil bitsPerPixel])				palette: (anImageOrNil isNil 						ifTrue: [Screen default colorPalette]						ifFalse: [anImageOrNil palette]).	pix := im palette indexOfPaintNearest: self backgroundColor.	im pixelsDo: 			[:x :y | 			im 				atX: x				y: y				put: pix].	^im</body><body package="CoolImage">maskMethod	| baseString |	baseString := self computeMask minimalStorageString.	doesCaching 		ifTrue: [baseString := 'CachedImage on: (&lt;1s&gt;)' expandMacrosWith: baseString].	^self buildMethod: baseString</body><body package="CoolImage">opaqueMethod	| figureString shapeString |	figureString := self image minimalStorageString.	doesScreenPalette 		ifTrue: 			[figureString := '(&lt;1s&gt;) convertForGraphicsDevice: Screen default' 						expandMacrosWith: figureString].	doesCaching 		ifTrue: 			[figureString := 'CachedImage on: (&lt;1s&gt;)' expandMacrosWith: figureString].	shapeString := self computeMask minimalStorageString.	doesCaching 		ifTrue: 			[shapeString := 'CachedImage on: (&lt;1s&gt;)' expandMacrosWith: shapeString].	^self 		buildMethod: ('OpaqueImage		figure: (&lt;1s&gt;)		shape: (&lt;2s&gt;)' 				expandMacrosWith: figureString				with: shapeString)</body><body package="CoolImage">promptForTarget	| result |	result := targetClass ifNil: 					[UIFinderVW2 openDestinationDialogForResource: #image defaultSelector: nil]				ifNotNil: 					[UIFinderVW2 						openDestinationDialogWithClass: targetClass						andSelector: targetSelector						andResource: #image].	result isNil ifTrue: [^false].	targetClass := result at: 1.	targetSelector := result at: 2.	^true</body><body package="CoolImage">synchronizeTo: anotherWorkbench 	| newTool |	zoomHolder value: anotherWorkbench zoom.	zoomChoices value: anotherWorkbench zoomChoices value copy.	imageModel image: anotherWorkbench image copy.	foregroundColorHolder value: anotherWorkbench foregroundColorHolder value.	backgroundColorHolder value: anotherWorkbench backgroundColorHolder value.	targetSelector := anotherWorkbench targetSelector.	targetClass := anotherWorkbench targetClass.	doesCaching := anotherWorkbench doesCaching.	doesScreenPalette := anotherWorkbench doesScreenPalette.	newTool := anotherWorkbench currentTool class newTool.	newTool hookUpTo: self.	self currentTool: newTool</body><body package="CoolImage">updateZoomChoices	(zoomChoices value includes: zoomHolder value) 		ifFalse: [zoomChoices value add: zoomHolder value].	zoomChoices value sort</body><body package="CoolImage">visualKeyFromSelector: aSelectorSymbol 	^aSelectorSymbol copyFrom: 1 to: aSelectorSymbol size - 5</body></methods><methods><class-id>CoolImage.Workbench</class-id> <category>private-actions</category><body package="CoolImage">assureSelectorsEndsWithIconSize	(targetClass default availableIconSizes 		anySatisfy: [:each | '*' , each match: targetSelector]) 			ifFalse: [targetSelector := (targetSelector , targetClass iconSize) asSymbol]</body><body package="CoolImage">inspectImage	self image inspect</body><body package="CoolImage">installColor	self promptForTarget ifFalse: [^self].	self addMethod: self colorMethod.	self finishInstall</body><body package="CoolImage">installMask	self promptForTarget ifFalse: [^self].	self addMethod: self maskMethod.	self finishInstall</body><body package="CoolImage">installOpaque	self promptForTarget ifFalse: [^self].	self addMethod: self opaqueMethod.	self finishInstall</body><body package="CoolImage">installToIconLibrary	self promptForIconLibraryTarget ifFalse: [^self].	self assureSelectorsEndsWithIconSize.	self addMethod: self iconLibraryFigureMethod.	self addMethod: self iconLibraryShapeMethod.	self finishInstall.	targetClass flush</body><body package="CoolImage">loadFromIconLibrary	| methods selection |	methods := self getLibraryIcons.	selection := Dialog 				choose: 'Select icon:'				fromList: (methods collect: [:each | self libraryIconDisplayString: each])				values: methods				lines: 20				cancel: [^self].	self imageFromLibrary: selection mclass soleInstance		selector: selection selector</body><body package="CoolImage">loadImage	| result |	(result := UIFinderVW2 openSourceDialogForClass: targetClass				andResource: #image) ifNil: [^self].	self imageFromClass: (result at: 1) selector: (result at: 2)</body><body package="CoolImage">loadImageFromFile	| filename |	(filename := Dialog requestFileName: 'File to load:') isEmpty		ifTrue: [^self].	self imageFromFileNamed:  filename</body><body package="CoolImage">newImage	| newSize |	newSize := PointDialog 				request: 'What extent?'				initialPoint: self image extent				validate: 					[:ev | 					(ev isInteger and: [ev &gt; 0]) 						ifFalse: [Dialog warn: 'Image dimensions must be count numbers.']						ifTrue: [true]]				onCancel: [^self].	imageModel image: (self makeImageSized: newSize from: nil)</body><body package="CoolImage">spawnWorkbench	self class open source synchronizeTo: self</body><body package="CoolImage">toggleCaching	doesCaching := doesCaching not</body><body package="CoolImage">toggleScreenPalette	doesScreenPalette := doesScreenPalette not</body></methods><methods><class-id>CoolImage.Workbench</class-id> <category>initialize-release</category><body package="CoolImage">initColorHolders	foregroundColorHolder := ColorValue black asValue.	backgroundColorHolder := ColorValue white asValue</body><body package="CoolImage">initImageModel	imageModel := ImageModel new.	imageModel image: (self makeImageSized: 32 @ 32 from: nil)</body><body package="CoolImage">initInstallSettings	doesScreenPalette := false.	doesCaching := true</body><body package="CoolImage">initTools	currentToolHolder := nil asValue</body><body package="CoolImage">initZooms	zoomHolder := 8 asValue.	zoomHolder onChangeSend: #updateZoomChoices to: self.	zoomChoices := #(5 8 10) asList asValue</body><body package="CoolImage">initialize	super initialize.	self initColorHolders.	self initZooms.	self initTools.	self initImageModel.	self initInstallSettings</body></methods><methods><class-id>CoolImage.Workbench</class-id> <category>interface opening</category><body package="CoolImage">openOnClass: aClass andSelector: aSymbol 	self imageFromClass: aClass selector: aSymbol.	self open</body><body package="CoolImage">patchMenus	| item installMenu |	installMenu := ((builder menuAt: #windowMenu)				atNameKey: #installSubMenu) submenu.	item := installMenu atNameKey: #screenPaletteMenuToggle.	item realAdornment indicationSelector: #doesScreenPalette.	item := installMenu atNameKey: #cachedMenuToggle.	item realAdornment indicationSelector: #doesCaching</body><body package="CoolImage">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self addToolButtons.	self patchMenus</body></methods><methods><class-id>CoolImage.Workbench class</class-id> <category>tools</category><body package="CoolImage">registerTool: aTool 	self registeredTools add: aTool</body><body package="CoolImage">registeredTools	^RegisteredTools ifNil: [RegisteredTools := IdentitySet new]</body><body package="CoolImage">unRegisterTool: aTool 	self registeredTools remove: aTool		ifAbsent: 			["oh well"			]</body></methods><methods><class-id>CoolImage.Workbench class</class-id> <category>private-paste buffer</category><body package="CoolImage">addToPasteBuffer: anImage 	self pasteBuffer addFirst: anImage.	[self pasteBuffer size &gt; self pasteBufferLimit] 		whileTrue: [self pasteBuffer removeLast].	^anImage</body><body package="CoolImage">pasteBuffer	^PasteBuffer ifNil: [PasteBuffer := OrderedCollection new]</body><body package="CoolImage">pasteBufferAt: anInteger 	^self pasteBuffer at: anInteger</body><body package="CoolImage">pasteBufferLimit	^PasteBufferLimit ifNil: [PasteBufferLimit := 5]</body></methods><methods><class-id>CoolImage.Workbench class</class-id> <category>class initialization</category><body package="CoolImage">initialize	"self initialize"	#(#{Blend} #{Capture} #{Copy} #{Cut} #{Paste} #{Resize} #{StrongFill} #{WeakFill} #{DrawLine} #{Sip} #{Swap} #{DrawPixel} #{DrawRectangle} #{FlipX} #{FlipXY} #{FlipY} #{Rotate} #{Undo} #{Zoom}) 		do: [:each | each ifDefinedDo: [:class | class register]]</body></methods><methods><class-id>CoolImage.Workbench class</class-id> <category>instance creation</category><body package="CoolImage">editImage: anImage 	| inst |	inst := self new.	inst convertImage: anImage.	inst open</body><body package="CoolImage">openOnClass: aClass andSelector: aSymbol 	self new openOnClass: aClass andSelector: aSymbol</body></methods><methods><class-id>CoolImage.FlipY</class-id> <category>actions</category><body package="CoolImage">doAction	self imageModel backupImage.	self imageModel image: self image reflectedInY</body></methods><methods><class-id>CoolImage.FlipY class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^62</body></methods><methods><class-id>CoolImage.ActualView</class-id> <category>private-accessing</category><body package="CoolImage">image	^imageModel image</body></methods><methods><class-id>CoolImage.ActualView</class-id> <category>initialize-release</category><body package="CoolImage">release	imageModel removeAllActionsWithReceiver: self.	^super release</body></methods><methods><class-id>CoolImage.ActualView</class-id> <category>private-initialize</category><body package="CoolImage">imageModel: anImageModel 	imageModel := anImageModel.	imageModel 		when: #newImage		send: #invalidate		to: self.	#(#complexEditCompleted #pointColored #boxColored) do: 			[:evnt | 			imageModel 				when: evnt				send: #redraw				to: self]</body></methods><methods><class-id>CoolImage.ActualView</class-id> <category>displaying</category><body package="CoolImage">displayOn: aGC 	| im |	(im := self image) notNil ifTrue: [im displayOn: aGC]</body><body package="CoolImage">redraw	self isOpen ifTrue: [self displayOn: self graphicsContext]</body></methods><methods><class-id>CoolImage.ActualView</class-id> <category>bounds accessing</category><body package="CoolImage">preferredExtent	^self image ifNil: [0 @ 0] ifNotNil: [:image | image extent]</body></methods><methods><class-id>CoolImage.FillTool</class-id> <category>private-accessing</category><body package="CoolImage">dilationPattern	^self subclassResponsibility</body></methods><methods><class-id>CoolImage.FillTool</class-id> <category>events</category><body package="CoolImage">redButtonPressedEvent: anEvent 	| pt image target newPixel |	pt := self imagePointForEvent: anEvent.	(self imageBoundsPoint: pt) ifFalse: [^self].	image := self image.	target := image atPoint: pt.	newPixel := image palette indexOfPaintNearest: self foregroundColor.	target = newPixel ifTrue: [^self].	self imageModel backupImage.	image 		dilate: target		with: newPixel		at: pt		withPattern: self dilationPattern.	self imageModel resetImage: image</body><body package="CoolImage">yellowButtonPressedEvent: anEvent 	| pt image target newPixel |	pt := self imagePointForEvent: anEvent.	(self imageBoundsPoint: pt) ifFalse: [^self].	image := self image.	target := image atPoint: pt.	newPixel := image palette indexOfPaintNearest: self backgroundColor.	target = newPixel ifTrue: [^self].	self imageModel backupImage.	image 		dilate: target		with: newPixel		at: pt		withPattern: self dilationPattern.	self imageModel resetImage: image</body></methods><methods><class-id>CoolImage.ColorSelectorDialog</class-id> <category>accessing</category><body package="CoolImage">colorSelector	^colorSelector isNil 		ifTrue: [colorSelector := ColorSelector new]		ifFalse: [colorSelector]</body></methods><methods><class-id>CoolImage.ColorSelectorDialog class</class-id> <category>opening</category><body package="CoolImage">getColor	| inst |	inst := self new.	inst open.	^inst accept value 		ifTrue: [inst colorSelector colorModel value]		ifFalse: [nil]</body></methods><methods><class-id>CoolImage.OneTimeTool</class-id> <category>events</category><body package="CoolImage">redButtonReleasedEvent: anEvent 	self restoreOriginalTool</body><body package="CoolImage">yellowButtonReleasedEvent: anEvent 	self restoreOriginalTool</body></methods><methods><class-id>CoolImage.OneTimeTool</class-id> <category>initialize</category><body package="CoolImage">hookUpTo: aWorkbench 	super hookUpTo: aWorkbench.	originalTool := aWorkbench currentTool</body></methods><methods><class-id>CoolImage.OneTimeTool</class-id> <category>private</category><body package="CoolImage">restoreOriginalTool	controller currentTool: originalTool</body></methods><methods><class-id>CoolImage.ToolController</class-id> <category>initialize</category><body package="CoolImage">currentTool: aTool 	currentToolHolder value: aTool</body><body package="CoolImage">currentToolHolder: aValueHolder 	currentToolHolder notNil 		ifTrue: [currentToolHolder retractInterestsFor: self].	currentToolHolder := aValueHolder.	currentToolHolder onChangeSend: #hookUpTool to: self</body></methods><methods><class-id>CoolImage.ToolController</class-id> <category>private-accessing</category><body package="CoolImage">currentTool	^currentToolHolder value</body></methods><methods><class-id>CoolImage.ToolController</class-id> <category>events</category><body package="CoolImage">redButtonPressedEvent: anEvent 	anEvent shiftDown 		ifTrue: 			[self currentTool: (Sip newTool hookUpTo: self view topComponent model)].	self currentTool redButtonPressedEvent: anEvent</body><body package="CoolImage">redButtonReleasedEvent: anEvent 	self currentTool redButtonReleasedEvent: anEvent</body><body package="CoolImage">yellowButtonPressedEvent: anEvent 	anEvent shiftDown 		ifTrue: 			[self currentTool: (Sip newTool hookUpTo: self view topComponent model)].	self currentTool yellowButtonPressedEvent: anEvent</body><body package="CoolImage">yellowButtonReleasedEvent: anEvent 	self currentTool yellowButtonReleasedEvent: anEvent</body></methods><methods><class-id>CoolImage.ToolController</class-id> <category>private</category><body package="CoolImage">hookUpTool	self currentTool controller: self</body></methods><methods><class-id>CoolImage.ToolController</class-id> <category>event driven</category><body package="CoolImage">desiresFocus	^true</body></methods><methods><class-id>CoolImage.Cut</class-id> <category>initialize</category><body package="CoolImage">hookUpTo: aWorkbench 	super hookUpTo: aWorkbench.	backgroundColor := aWorkbench backgroundColor</body></methods><methods><class-id>CoolImage.Cut</class-id> <category>actions</category><body package="CoolImage">doAction	| rect |	rect := self userRectangle.	rect extent = 1 ifTrue: [^self].	self imageModel backupImage.	self addToPasteBuffer: (self image coolImageCopyBounds: rect).	self imageModel colorRectangle: rect with: backgroundColor</body></methods><methods><class-id>CoolImage.Cut class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^30</body></methods><methods><class-id>CoolImage.LargeView</class-id> <category>controller accessing</category><body package="CoolImage">defaultControllerClass	^ToolController</body></methods><methods><class-id>CoolImage.LargeView</class-id> <category>updating</category><body package="CoolImage">update: anAspect with: aParameter from: anObject 	self destroyPixmap.	^super 		update: anAspect		with: aParameter		from: anObject</body></methods><methods><class-id>CoolImage.LargeView</class-id> <category>private-displaying</category><body package="CoolImage">colorPoint: aPoint with: aColor 	| rect zm pgc |	pgc := self pixmap graphicsContext.	pgc paint: aColor.	rect := aPoint * (zm := self zoom asPoint) extent: zm - 1.	"the - 1 is to make sure we don't clobber the grid line"	pgc displayRectangle: rect.	self graphicsContext 		copyArea: rect		from: pgc		sourceOffset: 0 @ 0		destinationOffset: 0 @ 0</body><body package="CoolImage">colorRectangle: aRectangle with: aColor 	| rect pgc |	pgc := self pixmap graphicsContext.	pgc paint: aColor.	rect := aRectangle scaledBy: self zoom asPoint.	pgc displayRectangle: rect.	self gridPixmap.	self graphicsContext 		copyArea: rect		from: pgc		sourceOffset: 0 @ 0		destinationOffset: 0 @ 0</body><body package="CoolImage">drawNewImage	self destroyPixmap.	self invalidateRectangle: self bounds repairNow: true</body><body package="CoolImage">gridPixmap	| box pgc |	box := self pixmap bounds.	"first do every line in gray"	pgc := self pixmap graphicsContext.	pgc paint: ColorValue gray.	self zoom - 1 to: box bottom		by: self zoom		do: [:y | pgc displayLineFrom: box left @ y to: box right @ y].	self zoom - 1 to: box right		by: self zoom		do: [:x | pgc displayLineFrom: x @ box top to: x @ box bottom].	"now do some darker ones every five dots, this makes measuring easier"	pgc paint: ColorValue black.	-1 to: box bottom		by: self zoom * 5		do: [:y | pgc displayLineFrom: box left @ y to: box right @ y].	-1 to: box right		by: self zoom * 5		do: [:x | pgc displayLineFrom: x @ box top to: x @ box bottom]</body><body package="CoolImage">redrawOldImage	self destroyPixmap.	self redraw</body></methods><methods><class-id>CoolImage.LargeView</class-id> <category>initialize-release</category><body package="CoolImage">release	imageModel removeAllActionsWithReceiver: self.	^super release</body></methods><methods><class-id>CoolImage.LargeView</class-id> <category>private-accessing</category><body package="CoolImage">createPixmap	pixmap := (self image magnifiedBy: self zoom asPoint) asRetainedMedium.	self gridPixmap.	^pixmap</body><body package="CoolImage">image	^imageModel image</body><body package="CoolImage">imagePointFor: aPoint 	^aPoint // self zoom</body><body package="CoolImage">pixmap	(pixmap isNil or: [pixmap isOpen not]) ifTrue: [self createPixmap].	^pixmap</body><body package="CoolImage">zoom	^model value</body></methods><methods><class-id>CoolImage.LargeView</class-id> <category>private-initialize</category><body package="CoolImage">imageModel: anImageModel 	imageModel := anImageModel.	imageModel 		when: #newImage		send: #drawNewImage		to: self.	imageModel 		when: #complexEditCompleted		send: #redrawOldImage		to: self.	imageModel 		when: #pointColored		send: #colorPoint:with:		to: self.	imageModel 		when: #boxColored		send: #colorRectangle:with:		to: self</body></methods><methods><class-id>CoolImage.LargeView</class-id> <category>bounds accessing</category><body package="CoolImage">preferredBounds	^self pixmap bounds</body></methods><methods><class-id>CoolImage.LargeView</class-id> <category>displaying</category><body package="CoolImage">displayOn: aGC 	self pixmap displayOn: aGC</body></methods><methods><class-id>CoolImage.LargeView</class-id> <category>private</category><body package="CoolImage">destroyPixmap	pixmap release.	pixmap := nil</body></methods><methods><class-id>CoolImage.LargeView</class-id> <category>accessing</category><body package="CoolImage">pixmapGC	^self pixmap graphicsContext</body></methods><methods><class-id>CoolImage.LargeView</class-id> <category>As yet unclassified</category><body package="CoolImage">redraw	self displayOn: self graphicsContext</body></methods><methods><class-id>CoolImage.FlipXY</class-id> <category>actions</category><body package="CoolImage">doAction	self imageModel backupImage.	self imageModel image: self image reflectedInX reflectedInY</body></methods><methods><class-id>CoolImage.FlipXY class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^63</body></methods><methods><class-id>CoolImage.ImageModel</class-id> <category>accessing</category><body package="CoolImage">backupImage	lastImage := image copy</body><body package="CoolImage">image	^image</body><body package="CoolImage">image: anImage 	image := anImage.	self triggerEvent: #newImage with: anImage.	^anImage</body><body package="CoolImage">resetImage: anImage 	image := anImage.	self triggerEvent: #complexEditCompleted with: anImage.	^anImage</body><body package="CoolImage">restoreLastImage	self image: lastImage.	lastImage := nil</body></methods><methods><class-id>CoolImage.ImageModel</class-id> <category>painting</category><body package="CoolImage">colorPoint: aPoint with: aColor 	(self boundsPoint: aPoint) 		ifTrue: 			[image atPoint: aPoint put: (image palette indexOfPaintNearest: aColor).			self 				triggerEvent: #pointColored				with: aPoint				with: aColor]</body><body package="CoolImage">colorRectangle: aRectangle with: aColor 	| rect pixel |	rect := aRectangle intersect: image bounds.	pixel := image palette indexOfPaintNearest: aColor.	rect inBoundsDo: 			[:x :y | 			image 				atX: x				y: y				put: pixel].	self 		triggerEvent: #boxColored		with: aRectangle		with: aColor</body><body package="CoolImage">drawLineFrom: aPoint to: bPoint width: anInteger with: aColorValue 	"there's two ways we can do this, 1) we can draw the line ourselves into the image (and then post either per pixel or whole image changed events) or 2) we can flip to a pixmap where drawing is easy and then reset the image with a new image from our pixmap. We'll do #2 for now, allthough #1 might eventually give us more control"	| gc medium |	medium := image asRetainedMedium.	gc := medium graphicsContext.	gc		paint: aColorValue;		lineWidth: anInteger.	gc displayLineFrom: aPoint to: bPoint.	self resetImage: medium asImage</body><body package="CoolImage">paste: anImage at: aPoint transparent: aColorValue 	| transPix pRect transX transY paletteMap |	transPix := anImage palette indexOfPaintNearest: aColorValue.	"get the transparency pixel"	pRect := aPoint extent: anImage extent.	transX := aPoint x.	transY := aPoint y.	"build a map for cacheing the conversion of one pixel to the other, this reduces lookups in the palette"	paletteMap := IdentityDictionary new.	(image bounds intersect: pRect) inBoundsDo: 			[:x :y | 			| copyPix |			copyPix := anImage atX: x - transX y: y - transY.			copyPix = transPix 				ifFalse: 					[image 						atX: x						y: y						put: (paletteMap at: copyPix								ifAbsentPut: 									[image palette indexOfPaintNearest: (anImage palette at: copyPix)])]].	self triggerEvent: #complexEditCompleted</body></methods><methods><class-id>CoolImage.ImageModel</class-id> <category>testing</category><body package="CoolImage">boundsPoint: aPoint 	^image bounds containsPoint: aPoint</body><body package="CoolImage">hasLastImage	^lastImage notNil</body></methods><methods><class-id>CoolImage.ImageModel class</class-id> <category>private-events</category><body package="CoolImage">constructEventsTriggered	^(super constructEventsTriggered)		addAll: #(#newImage #boxColored #pointColored #complexEditCompleted);		yourself</body></methods><methods><class-id>CoolImage.Blend</class-id> <category>private</category><body package="CoolImage">blend: aColorValue with: bColorValue percent: aPercentage 	| rv gv bv |	rv := (aColorValue scaledRed * (100 - aPercentage) 				+ (bColorValue scaledRed * aPercentage) + 50) 				// 100.	gv := (aColorValue scaledGreen * (100 - aPercentage) 				+ (bColorValue scaledGreen * aPercentage) + 50) 				// 100.	bv := (aColorValue scaledBlue * (100 - aPercentage) 				+ (bColorValue scaledBlue * aPercentage) + 50) 				// 100.	^ColorValue 		scaledRed: rv		scaledGreen: gv		scaledBlue: bv</body></methods><methods><class-id>CoolImage.Blend</class-id> <category>actions</category><body package="CoolImage">doAction	| color im blendMap percent |	(color := ColorSelectorDialog getColor) isNil ifTrue: [^self].	percent := Dialog 				request: 'What percentage of colordo you want to add (0 - 100)?'				initialNumber: 50				onCancel: [^self].	(percent &gt;= 0 and: [percent &lt;= 100]) 		ifFalse: 			[Dialog warn: 'Blend percentage must be between 0 and 100.'.			^self doAction].	blendMap := IdentityDictionary new.	im := self image.	self imageModel backupImage.	im pixelsDo: 			[:x :y | 			im atPoint: x @ y				put: (blendMap at: (im atPoint: x @ y)						ifAbsentPut: 							[im palette indexOfPaintNearest: (self 										blend: (im valueAtPoint: x @ y)										with: color										percent: percent)])].	imageModel resetImage: im</body></methods><methods><class-id>CoolImage.WeakFill</class-id> <category>private-accessing</category><body package="CoolImage">dilationPattern	^(Array new: 8)		at: 1 put: -1 @ -1;		at: 2 put: 0 @ -1;		at: 3 put: 1 @ -1;		at: 4 put: -1 @ 0;		at: 5 put: 1 @ 0;		at: 6 put: -1 @ 1;		at: 7 put: 0 @ 1;		at: 8 put: 1 @ 1;		yourself</body></methods><methods><class-id>CoolImage.WeakFill class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^13</body></methods><methods><class-id>CoolImage.DrawPixelTracker</class-id> <category>private</category><body package="CoolImage">trackSelectionFor: aPoint 	tool colorActualPoint: aPoint</body></methods><methods><class-id>CoolImage.StrongFill</class-id> <category>private-accessing</category><body package="CoolImage">dilationPattern	^Array 		with: -1 @ 0		with: 0 @ -1		with: 1 @ 0		with: 0 @ 1</body></methods><methods><class-id>CoolImage.StrongFill class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^12</body></methods><methods><class-id>CoolImage.ColorSelectorSwatchView</class-id> <category>displaying</category><body package="CoolImage">displayOn: aGC 	aGC		paint: model value;		displayRectangle: self bounds</body></methods><methods><class-id>CoolImage.ColorSelectorSwatchView</class-id> <category>bounds accessing</category><body package="CoolImage">preferredBounds	^Screen default bounds</body><body package="CoolImage">preferredExtent	^Screen default bounds extent</body></methods><methods><class-id>CoolImage.Swap</class-id> <category>events</category><body package="CoolImage">changeColorAt: aPoint to: aColor 	| image target newPixel |	image := self image.	target := image atPoint: aPoint.	newPixel := image palette indexOfPaintNearest: aColor.	image replacePixel: target with: newPixel.	self imageModel resetImage: image</body><body package="CoolImage">redButtonPressedEvent: anEvent 	| pt |	pt := self imagePointForEvent: anEvent.	(self imageModel boundsPoint: pt) ifFalse: [^self].	super redButtonPressedEvent: anEvent.	self changeColorAt: pt to: self foregroundColor</body><body package="CoolImage">yellowButtonPressedEvent: anEvent 	| pt |	pt := self imagePointForEvent: anEvent.	(self imageModel boundsPoint: pt) ifFalse: [^self].	super yellowButtonPressedEvent: anEvent.	self changeColorAt: pt to: self backgroundColor</body></methods><methods><class-id>CoolImage.Swap class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^15</body></methods><methods><class-id>CoolImage.PointDialog</class-id> <category>accessing</category><body package="CoolImage">point	^xHolder value @ yHolder value</body></methods><methods><class-id>CoolImage.PointDialog</class-id> <category>private-initialize</category><body package="CoolImage">setLabel: aString 	(self coolImageWidgetNamed: #label) labelString: aString</body><body package="CoolImage">setPoint: aPoint 	xHolder value: aPoint x.	yHolder value: aPoint y</body><body package="CoolImage">validator: aBlock 	validator := aBlock</body></methods><methods><class-id>CoolImage.PointDialog</class-id> <category>initialize-release</category><body package="CoolImage">initialize	super initialize.	xHolder := 0 asValue.	yHolder := 0 asValue</body></methods><methods><class-id>CoolImage.PointDialog</class-id> <category>private</category><body package="CoolImage">validate: aController 	aController hasEditValue 		ifFalse: 			[(aController model)				changed;				beepTheBell.			^false].	^(validator value: aController editValue) 		ifFalse: 			[aController model changed.			false]		ifTrue: [true]</body></methods><methods><class-id>CoolImage.PointDialog</class-id> <category>aspects</category><body package="CoolImage">xHolder	^xHolder</body><body package="CoolImage">yHolder	^yHolder</body></methods><methods><class-id>CoolImage.PointDialog class</class-id> <category>utility</category><body package="CoolImage">request: aString initialPoint: aPoint validate: vBlock onCancel: aBlock 	| inst |	inst := self new.	inst validator: vBlock.	inst setPoint: aPoint.	inst allButOpenFrom: (self interfaceSpecFor: #windowSpec).	inst setLabel: aString.	inst builder openDialog.	^inst accept value ifTrue: [inst point] ifFalse: [aBlock value]</body></methods><methods><class-id>CoolImage.Capture</class-id> <category>actions</category><body package="CoolImage">doAction	self imageModel image: Image fromUser</body></methods><methods><class-id>CoolImage.Capture class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^70</body></methods><methods><class-id>CoolImage.Undo</class-id> <category>actions</category><body package="CoolImage">doAction	self imageModel hasLastImage 		ifTrue: [self imageModel restoreLastImage]		ifFalse: 			[Dialog				beepTheBell;				warn: 'Nothing to undo!']</body></methods><methods><class-id>CoolImage.Undo class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^33</body></methods><methods><class-id>CoolImage.Sip</class-id> <category>events</category><body package="CoolImage">redButtonPressedEvent: anEvent 	| pt |	pt := self imagePointForEvent: anEvent.	(self imageBoundsPoint: pt) 		ifTrue: [foregroundColorHolder value: (self image valueAtPoint: pt)]</body><body package="CoolImage">yellowButtonPressedEvent: anEvent 	| pt |	pt := self imagePointForEvent: anEvent.	(self imageBoundsPoint: pt) 		ifTrue: [backgroundColorHolder value: (self image valueAtPoint: pt)]</body></methods><methods><class-id>CoolImage.Sip class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^90</body></methods><methods><class-id>CoolImage.Zoom</class-id> <category>actions</category><body package="CoolImage">doAction	| pt |	pt := PointDialog 				request: 'Magnify extent by:'				initialPoint: 1 @ 1				validate: 					[:xOrY | 					xOrY strictlyPositive 						ifTrue: [true]						ifFalse: 							[Dialog								beepTheBell;								warn: 'Magnification factor must be greater than 0.']]				onCancel: [^self].	self imageModel backupImage.	self imageModel image: (self image shrunkenBy: 1 / pt)</body></methods><methods><class-id>CoolImage.Zoom class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^64</body></methods><methods><class-id>CoolImage.Paste</class-id> <category>private-accessing</category><body package="CoolImage">imageToPaste	^Workbench pasteBuffer first</body><body package="CoolImage">pastePointForImage: anImage 	"there is no #rectangleFromUserWithExtent: method in Rectangle, they all work the other way around. So I had to go to the Screen directly to drag an arbitrarily sized rectangle around by it's undetermined origin"	| windowO viewO o scrnPt |	windowO := largeView topComponent globalOrigin.	viewO := largeView localPointToGlobal: 0 @ 0.	o := windowO + viewO.	scrnPt := Screen default 				dragShape: (anImage bounds scaledBy: largeView zoom) asPointArray				offset: 0 @ 0				gridPhase: o \\ largeView zoom				gridSpacing: largeView zoom asPoint				boundedBy: nil				whileButton: 0				isDown: false.	^(scrnPt - o) / largeView zoom</body></methods><methods><class-id>CoolImage.Paste</class-id> <category>actions</category><body package="CoolImage">doAction	| im pt |	(im := self imageToPaste) isNil ifTrue: [^self].	pt := self pastePointForImage: im.	self imageModel backupImage.	imageModel 		paste: im		at: pt		transparent: backgroundColor</body></methods><methods><class-id>CoolImage.Paste class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^32</body></methods><methods><class-id>CoolImage.ColorSelector</class-id> <category>aspects</category><body package="CoolImage">bluePlug	^(PluggableAdaptor on: colorModel) 		getBlock: [:m | m value blue]		putBlock: 			[:m :v | 			| color |			color := m value.			m value: (ColorValue 						red: color red						green: color green						blue: v)]		updateBlock: [:m :v :a | true]</body><body package="CoolImage">brightnessPlug	^(PluggableAdaptor on: colorModel) 		getBlock: [:m | m value brightness]		putBlock: 			[:m :v | 			| color |			color := m value.			m value: (ColorValue 						hue: color hue						saturation: color saturation						brightness: v)]		updateBlock: [:m :v :a | true]</body><body package="CoolImage">buildColorMenu	| mb |	mb := MenuBuilder new.	mb addLabel: 'Add...' value: [self nameCurrentColor].	mb line.	(NamedColors associations asSortedCollection: [:a :b | a value &lt; b value]) 		do: [:each | mb addLabel: each value value: [colorModel value: each key]].	mb line.	mb addLabel: 'Remove...' value: [self removeANamedColor].	^mb menu</body><body package="CoolImage">colorMenu	^[self buildColorMenu]</body><body package="CoolImage">colorView	^ColorSelectorSwatchView model: colorModel</body><body package="CoolImage">greenPlug	^(PluggableAdaptor on: colorModel) 		getBlock: [:m | m value green]		putBlock: 			[:m :v | 			| color |			color := m value.			m value: (ColorValue 						red: color red						green: v						blue: color blue)]		updateBlock: [:m :v :a | true]</body><body package="CoolImage">huePlug	^(PluggableAdaptor on: colorModel) 		getBlock: [:m | m value hue]		putBlock: 			[:m :v | 			| color |			color := m value.			m value: (ColorValue 						hue: v						saturation: color saturation						brightness: color brightness)]		updateBlock: [:m :v :a | true]</body><body package="CoolImage">nameCurrentColor	| newName |	newName := Dialog 				request: 'Name color as:'				initialAnswer: (NamedColors at: self currentColor ifAbsent: [''])				onCancel: [^self].	NamedColors at: self currentColor put: newName</body><body package="CoolImage">redPlug	^(PluggableAdaptor on: colorModel) 		getBlock: [:m | m value red]		putBlock: 			[:m :v | 			| color |			color := m value.			m value: (ColorValue 						red: v						green: color green						blue: color blue)]		updateBlock: [:m :v :a | true]</body><body package="CoolImage">removeANamedColor	NamedColors removeKey: self currentColor ifAbsent: []</body><body package="CoolImage">saturationPlug	^(PluggableAdaptor on: colorModel) 		getBlock: [:m | m value saturation]		putBlock: 			[:m :v | 			| color |			color := m value.			m value: (ColorValue 						hue: color hue						saturation: v						brightness: color brightness)]		updateBlock: [:m :v :a | true]</body></methods><methods><class-id>CoolImage.ColorSelector</class-id> <category>accessing</category><body package="CoolImage">colorModel	^colorModel</body></methods><methods><class-id>CoolImage.ColorSelector</class-id> <category>validations</category><body package="CoolImage">validate0To1: aController 	| ev |	aController hasEditValue 		ifFalse: 			[aController model changed.			^false].	ev := aController editValue.	(ev between: 0 and: 1) 		ifFalse: 			[aController model changed.			^false].	^true</body></methods><methods><class-id>CoolImage.ColorSelector</class-id> <category>initialize-release</category><body package="CoolImage">colorModel: aValueModel 	colorModel ifNotNil: [colorModel retractInterestIn: #value for: self].	colorModel := aValueModel.	colorModel 		expressInterestIn: #value		for: [(self coolImageWidgetNamed: #colorMenuButton) labelString: '']		sendBack: #value</body><body package="CoolImage">initialize	super initialize.	self colorModel: ColorValue black asValue</body></methods><methods><class-id>CoolImage.ColorSelector</class-id> <category>interface opening</category><body package="CoolImage">currentColor	^colorModel value</body><body package="CoolImage">postBuildWith: aBuilder	super postBuildWith: aBuilder.	(self coolImageWidgetNamed: #colorMenuButton) vcBlock: 			[:obj :menu |			Label				with: (NamedColors at: self currentColor ifAbsent: ['']) asText allBold].	colorModel value: self currentColor</body></methods><methods><class-id>CoolImage.ColorSelector class</class-id> <category>instance-creation</category><body package="CoolImage">on: aValueModel 	^self new colorModel: aValueModel</body></methods><methods><class-id>CoolImage.ColorSelector class</class-id> <category>class initialization</category><body package="CoolImage">initialize	"self initialize"	NamedColors := Dictionary new.	ColorValue constantNames do: 			[:each | 			NamedColors at: (ColorValue perform: each)				put: (((each copyFrom: 1 to: 1) asUppercase 						, (each copyFrom: 2 to: each size) piecesCutWhere: [:a :b | b isUppercase]) 						fold: [:a :b | a , ' ' , b])]</body></methods><methods><class-id>CoolImage.Rotate</class-id> <category>actions</category><body package="CoolImage">doAction	self imageModel backupImage.	self imageModel image: (self image rotatedByQuadrants: -1)</body></methods><methods><class-id>CoolImage.Rotate class</class-id> <category>testing</category><body package="CoolImage">sortIndex	^60</body></methods><methods><class-id>UI.Dialog class</class-id> <category>fill in the number dialogs</category><body package="CoolImage">request: messageString initialNumber: aNumber 	"Create an instance of the receiver whose question is messageString. 	Display it centered around the cursor. Supply aString as an initial 	answer. Simply return whatever the user accepts."	"Dialog request: 'What is your age?' initialNumber: 32"	^self 		request: messageString		initialNumber: aNumber		onCancel: nil</body><body package="CoolImage">request: messageString initialNumber: aNumber onCancel: aBlockOrNil 	"Create an instance of the receiver whose question is messageString. 	Display it centered around the cursor. Supply aNumber as an initial 	answer. Simply return whatever the user accepts. If aBlockOrNil is 	not nil then cancel returns the result of evaluating the block."	"Dialog request: 'Your age?' initialNumber: 32 onCancel: [45]"	^self dialogSupplier 		request: messageString		initialNumber: aNumber		onCancel: aBlockOrNil</body></methods><methods><class-id>UI.SimpleDialog</class-id> <category>utility-numbers</category><body package="CoolImage">addNumberLine: model 	| height layout field grid |	height := builder window displayBox height.	layout := LayoutFrame new.	layout leftOffset: 16.	layout rightFraction: 1 offset: -16.	layout topOffset: height.	field := InputFieldSpec 				model: model				menu: nil				layout: layout.	field		type: #number;		alignment: #center.	builder add: field.	grid := builder wrapper preferredBounds height.	layout bottomOffset: height + grid.	self addGap: grid.	self minWidth: 200.	^builder wrapper</body><body package="CoolImage">request: messageString initialNumber: aNumber onCancel: aBlockOrNil 	"Create an instance of the receiver whose question is messageString. Display it centered around the cursor. Supply aString as an initial answer. Simply return whatever the user accepts. If aBlockOrNil is not nil then cancel returns the result of evaluating the block."	"SimpleDialog new request: 'Your age?' initialNumber: 26 onCancel: nil"	^self 		request: messageString		initialNumber: aNumber		onCancel: aBlockOrNil		for: nil</body><body package="CoolImage">request: messageString initialNumber: aNumber onCancel: aBlockOrNil for: aVisualOrNil 	"Create an instance of the receiver whose question is messageString. 	Display it centered around the cursor. Supply aString as an initial 	answer. Simply return whatever the user accepts. If aBlockOrNil is 	not nil then cancel returns the result of evaluating the block. 		Also, set the paragraph editor's paste buffer to the result."	"aVisualOrNil, if not nil, may be either a VisualPart or a 	ScheduledWindow. It controls the look and feel and color choices 	used by the dialog, and supplies the dialog's master window, which 	is used by some window systems to create a visual connection between 	the dialog and the window that created it."	"SimpleDialog new 	request: 'Your name?' 	initialNumber: 26 	onCancel: [26] 	for: Dialog defaultParentWindow"	| spec result numModel |	numModel := ValueHolder with: aNumber.	spec := self class interfaceSpecFor: #emptySpec.	self initializeBuilderFor: aVisualOrNil.	builder add: spec window.	builder add: spec component.	self initializeWindowFor: aVisualOrNil.	self setInitialGap.	self addMessage: messageString centered: false.	self addGap: 8.	self addNumberLine: numModel.	self addGap: 8.	self addOK: [true].	self addGap: 6.	self preOpen.	builder window 		maximumSize: Screen default bounds width @ builder window displayBox height.	builder window minimumSize: 150 @ builder window displayBox height.	builder openDialogWithExtent: builder window displayBox extent.	result := accept value 				ifTrue: [numModel value]				ifFalse: [aBlockOrNil isNil ifTrue: [nil] ifFalse: [aBlockOrNil value]].	^result</body></methods><methods><class-id>Graphics.CoveragePalette</class-id> <category>testing</category><body package="CoolImage">isCoverage	^true</body></methods><methods><class-id>Tools.UIMaskEditor class</class-id> <category>instance creation</category><body package="CoolImage">new	^CoolImage.Workbench new</body></methods><methods><class-id>UI.ApplicationModel</class-id> <category>widget utilities</category><body package="CoolImage">coolImageWidgetNamed: aSymbol 	"dumb method name, but it avoids conflicts with other packages that define the same -- sure would be nice if modules could share entities"	| wrpr |	wrpr := builder componentAt: aSymbol.	^wrpr ifNil: [nil] ifNotNil: [wrpr widget]</body></methods><methods><class-id>Core.Object</class-id> <category>accessing</category><body package="CoolImage">beepTheBell	Object errorSignal handle: [:ex | ex return] do: [Screen default ringBell]</body></methods><methods><class-id>Graphics.Image</class-id> <category>copying</category><body package="CoolImage">coolImageCopyBounds: aRectangle 	| newRect newIm transX transY |	newRect := self bounds intersect: aRectangle.	newIm := self class 				extent: newRect extent				depth: depth				bitsPerPixel: bitsPerPixel				palette: palette.	transX := newRect left.	transY := newRect top.	newIm pixelsDo: 			[:x :y | 			newIm 				atX: x				y: y				put: (self atX: x + transX y: y + transY)].	^newIm</body></methods><methods><class-id>Graphics.Image</class-id> <category>cool image</category><body package="CoolImage">dilate: anInteger with: bInteger at: aPoint withPattern: aCollection 	(aPoint x &gt;= 0 and: 			[aPoint x &lt; width and: 					[aPoint y &gt;= 0 						and: [aPoint y &lt; height and: [(self atPoint: aPoint) = anInteger]]]]) 		ifFalse: [^self].	self atPoint: aPoint put: bInteger.	aCollection do: 			[:each | 			self 				dilate: anInteger				with: bInteger				at: aPoint + each				withPattern: aCollection]</body></methods><methods><class-id>Graphics.Image</class-id> <category>image processing</category><body package="CoolImage">replacePixel: aPixel with: bPixel 	self pixelsDo: 			[:x :y | 			(self atX: x y: y) = aPixel 				ifTrue: 					[self 						atX: x						y: y						put: bPixel]]</body></methods><methods><class-id>Graphics.Palette</class-id> <category>testing</category><body package="CoolImage">isCoverage	^false</body></methods><methods><class-id>Graphics.Rectangle</class-id> <category>rectangle functions</category><body package="CoolImage">inBoundsDo: a2ArgBlock 	origin y to: corner y - 1		do: [:y | origin x to: corner x - 1 do: [:x | a2ArgBlock value: x value: y]]</body></methods><methods><class-id>CoolImage.DrawLine class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 24 @ 24						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[0 0 0 0 112 0 0 0 112 0 0 0 112 0 0 0 24 0 0 0 12 0 0 0 6 0 0 0 3 0 0 0 1 128 0 0 0 192 0 0 0 96 0 0 0 48 0 0 0 24 0 0 0 12 32 0 0 6 32 0 0 3 32 0 0 1 160 0 0 0 224 0 0 7 255 0 0 0 32 0 0 0 32 0 0 0 32 0 0 0 32 0 0 0 32 0]).	figure := CachedImage 				on: ((Image 						extent: 24 @ 24						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedString							convertToPalette: Screen default colorPalette							renderedBy: NearestPaint new).	^OpaqueImageWithEnablement figure: figure shape: shape</body></methods><methods><class-id>CoolImage.FlipX class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 24 @ 16						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[0 126 0 0 1 129 128 0 2 0 64 0 4 0 32 0 4 129 32 0 8 195 16 0 8 231 16 0 255 255 255 0 255 255 255 0 0 231 0 0 0 195 0 0 0 129 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]).	figure := CachedImage on: (Image 						extent: 24 @ 16						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedString	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.Copy class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 25 @ 22						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[255 128 0 0 255 192 0 0 255 224 0 0 255 240 0 0 255 248 0 0 255 255 224 0 255 255 240 0 255 255 248 0 255 255 252 0 255 255 254 0 255 255 255 0 255 255 255 128 255 255 255 128 255 255 255 128 255 255 255 128 255 255 255 128 255 255 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 128]).	figure := CachedImage on: (Image 						extent: 25 @ 22						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????????????????????????????????????????????????????????????????@@@@@K.?1K.?1K.?1K.?1K.?1K.?1K.?1@@@@@@@@O???????????????????????????????????????????????????????????0@@@@B;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;P@@@B+.LP@@@C???????????????????????????????????????????????????????&lt;@@@@@.;?D.;?D@@@@@@@@@@@@.;?D@@@@@@@@*;#D*;#D@@@@????????????????????????????????????????????????????@@@@@K.?1K.?1K.?1K.?1K.?1K.?1K.?1@@@@J.81J.81J.81@@@@O???????????????????????????????????????????????0@@@@B;/&lt;R;/&lt;P@@@@@@@@@@@@@@@B;/&lt;P@@@B+.LSD@@CD@@CD@@CD@@CD@@CD@@CD@@CD@@CD@@C???????????????????????&lt;@@@@@.;?D.;?D.;?D.;?D.;?D.;?D.;?D@@@@@@@@1@@@.;?D.;?D.;?D.;?D.;?D.;?D.;?D1@@@1@@@????????????????????@@@@@K.?1K.?1K.?1K.?1K.?1K.?1K.?1K.?1K.?1LP@@K.?1K.?1K.?1K.?1K.?1K.?1K.?1LP@@J.81LP@@O???????????????0@@@@B;/&lt;R;/&lt;P@@@@@@@@@@@@@@@@@@@B;/&lt;P@@@CD@@B;/&lt;R;/&lt;P@@@@@@@@@@@B;/&lt;P@@@CD@@B+.LR+.LSD@@C???????????&lt;@@@@@.;?D.;?D.;?D.;?D.;?D.;?D.;?D.;?D.;?D1@@@.;?D.;?D.;?D.;?D.;?D.;?D.;?D1@@@*;#D*;#D*;#D1@@@????????@@@@@K.?1K.?1@@@@@@@@@@@@K.?1@@@@@@@@@@@@LP@@K.?1K.?1@@@@@@@@@@@@@@@@K.?1LP@@J.81J.81J.81J.81LP@@O???0@@@@B;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;SD@@B;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;SD@@CD@@CD@@CD@@CD@@CD@@CD@@@@@@@@.;?D.;?D.;?D.;?D.;?D.;?D.;?D.;?D.;?D1@@@.;?D.;?D.;?D.;?D.;?D.;?D.;?D.;?D.;?D.;?D.;?D.;?D.;?D1@@@@@@@@K.?1K.?1@@@@@@@@@@@@@@@@K.?1@@@@@@@@LP@@K.?1K.?1@@@@@@@@@@@@@@@@@@@@K.?1@@@@@@@@@@@@K.?1K.?1LP@@@@@@@B;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;SD@@B;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;SD@@@@@@@@.;?D.;?D.;?D.;?D.;?D.;?D.;?D.;?D.;?D1@@@.;?D.;?D@@@@@@@@@@@@.;?D@@@@@@@@@@@@@@@@@@@@.;?D.;?D1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@LP@@K.?1K.?1K.?1K.?1K.?1K.?1K.?1K.?1K.?1K.?1K.?1K.?1K.?1LP@@@C????????????????????????????????????????D@@B;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;SD@@@@????????????????????????????????????????1@@@.;?D.;?D@@@@@@@@@@@@@@@@.;?D@@@@@@@@@@@@@@@@.;?D.;?D1@@@@O???????????????????????????????????????&lt;P@@K.?1K.?1K.?1K.?1K.?1K.?1K.?1K.?1K.?1K.?1K.?1K.?1K.?1LP@@@C????????????????????????????????????????D@@B;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;R;/&lt;SD@@@@????????????????????????????????????????1@@@1@@@1@@@1@@@1@@@1@@@1@@@1@@@1@@@1@@@1@@@1@@@1@@@1@@@1@@@@@@a')).	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.Resize class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 22 @ 22						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[255 255 252 0 128 0 20 0 160 1 68 0 159 244 4 0 144 16 4 0 144 16 4 0 144 16 4 0 144 16 4 0 144 16 4 0 144 16 4 0 159 240 4 0 128 8 4 0 144 0 4 0 128 2 4 0 160 0 4 0 128 1 4 0 160 0 4 0 128 0 68 0 160 0 4 0 128 0 20 0 192 0 4 0 255 255 252 0]).	figure := CachedImage on: (Image 						extent: 22 @ 22						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedString: '?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@@@C?@@C????????????????????????????????????????????????????????????????????????L@@C?????@@@@@O&lt;@@O???8@@@O???????????????????????????????????????????????6X@@O???9$@@O????????????&lt;@@@@@?0@@????????@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????L0@@?????????????????????????????0@@@@C?@@C???????&lt;@@@C???????????????????????????&lt;@@@C?????????????????????????????????????@@@@@O&lt;@@O???????0@@@O???????????????????????????0@@@O????????????????????????????????????&lt;@@@@@?0@@????????@@@@????????????????????????????@@@@?????????????????????????????????????0@@@@C?@@C???????&lt;@@@C???????????????????????????&lt;@@@C?????????????????????????????????????@@@@@O&lt;@@O???????0@@@O???????????????????????????0@@@O????????????????????????????????????&lt;@@@@@?0@@????????@@@@????????????????????????????@@@@?????????????????????????????????????0@@@@C?@@C???????&lt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@C?????????????????????????????????????@@@@@O&lt;@@O???????????????????????????????????????????3L@@O????????????????????????????????&lt;@@@@@?0@@????????L0@@?????????????????????????????????????????????????????????????????????0@@@@C?@@C???????????????????????????????????????????????????=&amp;@@C?????????????????????????@@@@@O&lt;@@O???6X@@O????????????????????????????????????????????????????????????????????????&lt;@@@@@?0@@????????????????????????????????????????????????????????&amp;P@@?????????????????????0@@@@C?@@C???&gt;Y@@C?????????????????????????????????????????????????????????????????????????@@@@@O&lt;@@O???????????????????????????????????????????????????????????????&lt;0@@O????????????&lt;@@@@@?0@@????3@@@?????????????????????????????????????????????????????????????????????????0@@@@C?@@C????????????????????????????????????????????????????????????????????????&amp;@@C?????@@@@@O&lt;@@NX@@O????????????????????????????????????????????????????????????????????????????&lt;@@@@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@@@@b')).	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.DrawPixel class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 24 @ 24						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[0 0 6 0 0 0 14 0 0 0 28 0 0 0 59 0 0 0 119 0 0 0 239 0 0 0 255 0 0 1 255 0 0 3 127 0 0 6 255 0 0 5 255 0 0 15 255 0 0 23 255 0 0 45 252 0 0 91 248 0 0 183 240 0 1 111 192 0 2 223 128 0 5 191 0 0 11 126 0 0 23 252 0 0 46 0 0 0 112 0 0 0 192 0 0 0]).	figure := CachedImage on: (Image 						extent: 24 @ 24						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedString: '????????????????????????????????????????????????????????????????????????????????????@@@@?0@@????????????????????????????????????????????????????????????????????????????????????@@@@?0@@?0@@????????????????????????????????????????????????????????????????????????????????@@@@?0@@?0@@????????????????????????????????????????????????????????????????????????????????@@@@?0@@?0@@?????0@@?0@@????????????????????????????????????????????????????????????????????@@@@?0@@?0@@?????0@@?0@@?0@@????????????????????????????????????????????????????????????????@@@@?0@@?0@@?????0@@?0@@?0@@ @@@????????????????????????????????????????????????????????????????@@@@?0@@?0@@?0@@?0@@?0@@ @@@?0@@????????????????????????????????????????????????????????????@@@@@@@@?0@@?0@@?0@@?0@@ @@@?0@@ @@@????????????????????????????????????????????????????????@@@@@@@@????@@@@?0@@?0@@ @@@?0@@ @@@?0@@????????????????????????????????????????????????????@@@@@@@@????@@@@@@@@@@@@@@@@?0@@ @@@?0@@ @@@????????????????????????????????????????????????????@@@@????@@@@@@@@@@@@@@@@@@@@@@@@?0@@ @@@ @@@????????????????????????????????????????????????@@@@@O??@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@ @@@????????????????????????????????????????????@@@@????@O??@O??@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????????????????????????????????????????@@@@????@O??@O??????0LC@@@@@@@@@@@@@@@@@@@@@@@@@????????????????????????????????????????????@@@@????@O??@O??????0LC@0LC@@HB@@@@@@@@@@@@@@@@@????????????????????????????????????????????@@@@????@O??@O??????0LC@0LC@@HB@@HB@@HB@@@@@@@@@????????????????????????????????????????????@@@@????@O??@O??????0LC@0LC@@HB@@HB@@HB@@@@@????????????????????????????????????????????????@@@@????@O??@O??????0LC@0LC@@HB@@HB@@HB@@@@@????????????????????????????????????????????????@@@@????@O??@O??????0LC@0LC@@HB@@HB@@HB@@@@@????????????????????????????????????????????????@@@@????@O??@O??????0LC@0LC@@HB@@HB@@HB@@@@@????????????????????????????????????????????????@@@@????@O?? HB@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????????????????????????????????????????????????@@@@????@@@@@@@@ HB@????????????????????????????????????????????????????????????????????????@@@@@@@@@@@@????????????????????????????????????????????????????????????????????????????????@@@@@@@@????????????????????????????????????????????????????????????????????????????????????????')).	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.DrawRectangle class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 20 @ 12						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[204 204 192 0 255 255 224 0 127 255 240 0 127 255 240 0 255 255 224 0 255 255 224 0 127 255 240 0 127 255 240 0 255 255 224 0 255 255 224 0 127 255 240 0 51 51 48 0]).	figure := CachedImage on: (Image 						extent: 20 @ 12						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedString	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.Workbench class</class-id> <category>interface specs</category><body package="CoolImage">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Cool Image Tool' 			#bounds: #(#{Graphics.Rectangle} 400 310 1280 1024 ) 			#flags: 4 			#menu: #windowMenu 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 80 0 30 0 1 1 ) 					#name: #magnifyLabel 					#label: 'Magnify:' ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.Rectangle} 80 5 200 30 ) 					#name: #zoomCombo 					#model: #zoomHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#validateCount: ) 					#alignment: #center 					#isReadOnly: false 					#type: #number 					#comboList: #zoomChoices ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 200 0 0 0 0 1 30 0 ) 					#name: #buttonsComposite 					#flags: 0 					#component: #buttonsComposite ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.Rectangle} 80 30 200 150 ) 					#name: #smallView 					#flags: 11 					#component: #smallView ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 100 0 155 0 0.5 0 ) 					#name: #foreColorLable 					#label: 'Fore Color (Button 1)' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.Rectangle} 5 180 200 410 ) 					#name: #foregroundColorSelectorCanvas 					#flags: 0 					#majorKey: #{CoolImage.ColorSelector} 					#minorKey: #windowSpec 					#clientKey: #foregroundColorSelector ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 100 0 415 0 0.5 0 ) 					#name: #backColorLabel 					#label: 'Back Color (Button 2)' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 440 0 200 0 0 1 ) 					#name: #backgroundColorSelectorCanvas 					#flags: 0 					#majorKey: #{CoolImage.ColorSelector} 					#minorKey: #windowSpec 					#clientKey: #backgroundColorSelector ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 200 0 30 0 0 1 0 1 ) 					#name: #largeView 					#flags: 11 					#component: #largeView ) ) ) )</body></methods><methods><class-id>CoolImage.Workbench class</class-id> <category>resources</category><body package="CoolImage">windowMenu	"Tools.MenuEditor new openOnClass: self andSelector: #windowMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;Image' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;New...' 							#value: #newImage ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Load...' 							#value: #loadImage ) 						#(#{UI.MenuItem} 							#rawLabel: 'Load From &amp;File...' 							#value: #loadImageFromFile ) 						#(#{UI.MenuItem} 							#rawLabel: 'Load from &amp;Icon Library...' 							#value: #loadFromIconLibrary ) 						#(#{UI.MenuItem} 							#rawLabel: 'Inspect' 							#nameKey: #inspectImage 							#value: #inspectImage ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Spawn' 							#nameKey: #spawnWorkbench 							#value: #spawnWorkbench ) ) #(4 2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Install' 				#nameKey: #installSubMenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Icon Library' 							#value: #installToIconLibrary ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Opaque' 							#value: #installOpaque ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Color' 							#value: #installColor ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Mask' 							#value: #installMask ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cached' 							#nameKey: #cachedMenuToggle 							#value: #toggleCaching ) 						#(#{UI.MenuItem} 							#rawLabel: 'Screen Palette' 							#nameKey: #screenPaletteMenuToggle 							#value: #toggleScreenPalette ) ) #(4 2 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>CoolImage.FlipY class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 16 @ 24						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[1 128 0 0 1 128 0 0 1 128 0 0 1 128 0 0 1 224 0 0 1 152 0 0 1 132 0 0 1 130 0 0 15 242 0 0 7 225 0 0 3 193 0 0 1 129 0 0 1 129 0 0 3 193 0 0 7 225 0 0 15 242 0 0 1 130 0 0 1 132 0 0 1 152 0 0 1 224 0 0 1 128 0 0 1 128 0 0 1 128 0 0 1 128 0 0]).	figure := CachedImage on: (Image 						extent: 16 @ 24						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedString	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.ColorSelectorDialog class</class-id> <category>interface specs</category><body package="CoolImage">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Pick a Color' 			#bounds: #(#{Graphics.Rectangle} 640 512 840 782 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -40 1 ) 					#flags: 0 					#majorKey: #{CoolImage.ColorSelector} 					#minorKey: #windowSpec 					#clientKey: #colorSelector ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 -35 1 -5 0.5 -5 1 ) 					#name: #acceptButton 					#model: #accept 					#label: 'Accept' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 -35 1 -5 1 -5 1 ) 					#name: #cancelButton 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>CoolImage.Cut class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 16 @ 24						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[2 32 0 0 6 48 0 0 6 48 0 0 6 48 0 0 6 48 0 0 6 48 0 0 6 32 0 0 3 96 0 0 3 64 0 0 1 192 0 0 1 192 0 0 1 192 0 0 1 192 0 0 3 224 0 0 3 96 0 0 7 124 0 0 63 126 0 0 127 103 0 0 227 99 0 0 195 99 0 0 195 119 0 0 195 62 0 0 126 28 0 0 60 0 0 0]).	figure := CachedImage on: (Image 						extent: 16 @ 24						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedString	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.FlipXY class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 24 @ 24						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[192 0 0 0 224 0 0 0 113 254 0 0 58 3 128 0 28 0 192 0 14 16 96 0 7 48 48 0 3 240 24 0 1 240 8 0 1 240 12 0 3 240 4 0 7 240 4 0 0 15 228 0 0 15 196 0 0 15 132 0 0 15 132 0 0 15 196 0 0 12 232 0 0 8 112 0 0 0 56 0 0 0 28 0 0 0 14 0 0 0 7 0 0 0 3 0]).	figure := CachedImage on: (Image 						extent: 24 @ 24						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedString: '@@@@@@@@????????????????????????????????????????????????????????????????????????????????????????@@@@@@@@@@@@????????????????????????????????????????????????????????????????????????????????????????@@@@@@@@@@@@????????????@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????????????????????????????????????????????@@@@@@@@@@@@????@@@@????????????????????????????@@@@@@@@@@@@????????????????????????????????????????@@@@@@@@@@@@????????????????????????????????????????@@@@@@@@????????????????????????????????????????@@@@@@@@@@@@????????????????@@@@????????????????????@@@@@@@@????????????????????????????????????????@@@@@@@@@@@@????????@@@@@@@@????????????????????????@@@@@@@@????????????????????????????????????????@@@@@@@@@@@@@@@@@@@@@@@@????????????????????????????@@@@@@@@????????????????????????????????????????@@@@@@@@@@@@@@@@@@@@????????????????????????????????@@@@????????????????????????????????????????@@@@@@@@@@@@@@@@@@@@????????????????????????????????@@@@@@@@????????????????????????????????@@@@@@@@@@@@@@@@@@@@@@@@????????????????????????????????????@@@@????????????????????????????@@@@@@@@@@@@@@@@@@@@@@@@@@@@????????????????????????????????????@@@@????????????????????????????????????????????????????????@@@@@@@@@@@@@@@@@@@@@@@@@@@@????????@@@@????????????????????????????????????????????????????????@@@@@@@@@@@@@@@@@@@@@@@@????????????@@@@????????????????????????????????????????????????????????@@@@@@@@@@@@@@@@@@@@????????????????@@@@????????????????????????????????????????????????????????@@@@@@@@@@@@@@@@@@@@????????????????@@@@????????????????????????????????????????????????????????@@@@@@@@@@@@@@@@@@@@@@@@????????????@@@@????????????????????????????????????????????????????????@@@@@@@@????????@@@@@@@@@@@@????@@@@????????????????????????????????????????????????????????????@@@@????????????????@@@@@@@@@@@@????????????????????????????????????????????????????????????????????????????????????????@@@@@@@@@@@@????????????????????????????????????????????????????????????????????????????????????????@@@@@@@@@@@@????????????????????????????????????????????????????????????????????????????????????????@@@@@@@@@@@@????????????????????????????????????????????????????????????????????????????????????????@@@@@@@@@@@@????????????????????????????????????????????????????????????????????????????????????????@@@@@@@@')).	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.Blend class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 24 @ 23						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[99 134 56 0 123 231 190 0 63 195 252 0 63 131 248 0 63 131 248 0 127 135 248 0 127 199 252 0 127 231 254 0 127 231 254 0 31 1 240 0 0 0 0 0 102 102 102 0 0 0 0 0 1 142 0 0 1 239 128 0 0 255 0 0 0 254 0 0 0 254 0 0 1 254 0 0 1 255 0 0 1 255 128 0 1 255 128 0 0 124 0 0]).	figure := CachedImage 				on: ((Image 						extent: 24 @ 23						depth: 3						bitsPerPixel: 4						palette: (MappedPalette withColors: ((Array new: 7)										at: 1 put: ColorValue black;										at: 2											put: (ColorValue 													scaledRed: 7548													scaledGreen: 7548													scaledBlue: 0);										at: 3											put: (ColorValue 													scaledRed: 0													scaledGreen: 8191													scaledBlue: 7195);										at: 4 put: ColorValue white;										at: 5 put: ColorValue blue;										at: 6											put: (ColorValue 													scaledRed: 6070													scaledGreen: 8191													scaledBlue: 0);										at: 7 put: ColorValue green;										yourself))						usingBits: (ByteArray 								fromPackedString: 'MDL3QDL3LQL3DQL3MDQCQDQCLQDSDQDSL4QDQDP3L1DQDQD3L4QDQDL3L1DQDQL3L4QDQDL3L1DQDQL3MDQDQDL3LQDQDQL3MDQDQDP3LQDQDQD3MDQDQDQCLQDQDQDSMDQDQDQCLQDQDQDSL3QDQCL3L3DQDSL3L3L3L3L3L3L3L3L3L@L0@3@CL@L0@3@CL3L3L3L3L3L3L3L3L3L3MDL3TQL3L3L3L3L3MBH#YUDSL3L3L3L3L2I&amp;Y%D3L3L3L3L3L2Y&amp;YQL3L3L3L3L3L2Y&amp;YQL3L3L3L3L3MBY&amp;YQL3L3L3L3L3MBY&amp;Y&amp;D3L3L3L3L3MBY&amp;Y%TSL3L3L3L3MBI&amp;Y%DSL3L3L3L3L3P&amp;TSL3L3L3')) 							convertToPalette: Screen default colorPalette							renderedBy: NearestPaint new).	^OpaqueImageWithEnablement figure: figure shape: shape</body></methods><methods><class-id>CoolImage.WeakFill class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 24 @ 24						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[0 0 0 0 0 24 0 0 0 60 0 0 28 24 56 0 28 24 56 0 30 24 120 0 7 24 224 0 3 153 192 0 1 219 128 0 0 129 0 0 32 24 4 0 127 189 254 0 127 189 254 0 32 24 4 0 0 129 0 0 1 219 128 0 3 153 192 0 7 24 224 0 30 24 120 0 28 24 56 0 28 24 56 0 0 60 0 0 0 24 0 0 0 0 0 0]).	figure := CachedImage on: (Image 						extent: 24 @ 24						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedStringgt;@?????????????0B@?0B@?0B@?0B@?0B@?0B@?0B@?0B@????@@@@@@@@@@@@@@@@????@O&gt;@@O&gt;@@O&gt;@@O&gt;@@O&gt;@@O&gt;@@O&gt;@@O&gt;@?????????0B@?0B@?0B@?0B@?0B@?0B@?0B@?0B@????@@@@@@@@@@@@@@@@????@O&gt;@@O&gt;@@O&gt;@@O&gt;@@O&gt;@@O&gt;@@O&gt;@@O&gt;@?????????????0B@????????????????????????????????@@@@@@@@????????????????????????????????@O&gt;@?????????????????????????????????????????4@@????????????????????????PO&lt;@?????????????????????????????????????????????????????????????4@@?4@@?4@@??????&lt;@??&lt;@????PO&lt;@PO&lt;@PO&lt;@?????????????????????????????????????????????????????4@@?4@@?4@@??????????&lt;@??&lt;@????????PO&lt;@PO&lt;@PO&lt;@?????????????????????????????????????????????4@@?4@@?4@@??????????????&lt;@??&lt;@????????????PO&lt;@PO&lt;@PO&lt;@?????????????????????????????????4@@?4@@?4@@?4@@??????????????????&lt;@??&lt;@????????????????PO&lt;@PO&lt;@PO&lt;@PO&lt;@?????????????????????????4@@?4@@?4@@??????????????????????&lt;@??&lt;@????????????????????PO&lt;@PO&lt;@PO&lt;@?????????????????????????4@@?4@@?4@@??????????????????????&lt;@??&lt;@????????????????????PO&lt;@PO&lt;@PO&lt;@??????????????????????????????????????????????????????&lt;@??&lt;@??&lt;@??&lt;@??????????????????????????????????????????????????????????????????????????????????????&lt;@??&lt;@????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????')).	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.StrongFill class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 24 @ 24						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[0 56 0 0 0 104 0 0 0 76 0 0 0 68 0 0 0 68 0 0 0 94 0 0 0 127 0 0 0 255 128 0 1 255 192 0 1 255 224 0 3 255 240 0 3 255 248 0 3 255 248 0 7 255 248 0 13 255 248 0 12 255 240 0 28 127 240 0 28 63 224 0 60 31 192 0 60 15 0 0 124 0 0 0 124 0 0 0 126 0 0 0 254 0 0 0]).	figure := CachedImage on: (Image 						extent: 24 @ 24						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedStringamp;PC?&amp;PC?@@@@@@@@@@@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@@@@@?0CL?0CL?0CL&amp;PC?@@@@@@@@&amp;PC?@@@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@@@@@?0@3?0@3?0@3?0CL@@C?@@@@@@@@?0CL&amp;PC?@@@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@@@@@??&lt;@??&lt;@Y/&lt;@&amp;PC?@@C?@@@@?0@3?0CL?0CL&amp;PC?@@@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@@@@@??&lt;@Y/&lt;@@O?L@I''?@@C?@@C?@@@@?0@3?0@3?0CL?0CL&amp;PC?@@@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@@@@@Y/&lt;@@O?L@I''?@I''?@I''?@@@@@@@@?6X@?0@3?0@3?0CL?0CL&amp;PC?@@@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@@@@@Y/&lt;@@O?L@O?L@@@@@@@@Y/&lt;@@@@@@@@@?6X@?0@3?0@3?0CL?0CL@@@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@????@@@@@@@@@@@@@@@@@I''?@O?L@O&lt;3@@@@??&lt;@??&lt;@?6X@?0@3?0@3?0CL@@@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@?????0CL HB@@@@@@@C?@@C?@I''?@I''?@O?L@O&lt;3Y/&lt;@??&lt;@??&lt;@?6X@?0@3?0@3@@@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@???????? HB@ HB@@@@@@@C?@@C?@I''?@I''?@O?L@O&lt;3Y/&lt;@??&lt;@??&lt;@?6X@@@@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@????@@C????? HB@ HB@ HB@@@@@@@C?@@C?@I''?@I''?@O?L@O&lt;3Y/&lt;@??&lt;@??&lt;@@@@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@???????????? HB@ HB@ HB@ HB@@@@@@@C?@@C?@I''?@I''?@O?L@O&lt;3Y/&lt;@@@@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@?????????0CL???? HB@ HB@ HB@ HB@ HB@@@@@@@C?@@C?@I''?@I''?@@@@@@@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@????@@C?????@O?L HB@ HB@ HB@ HB@ HB@ HB@@@@@@@@@@@@@@@@@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@????@I''??????0@3???? HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@????????Y/&lt;@???????? HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@?????0@3????@I''????????? HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@????&amp;PC?????Y/&lt;@?????????0CL HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@ HB@')).	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.Swap class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 23 @ 23						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[1 255 128 0 3 255 192 0 3 255 128 0 3 255 128 0 3 255 128 0 3 255 128 0 3 255 128 0 1 255 128 0 1 255 128 0 1 255 128 0 0 0 0 0 204 204 204 0 0 0 0 0 1 255 128 0 3 255 192 0 3 255 128 0 3 255 128 0 3 255 128 0 3 255 128 0 3 255 128 0 1 255 128 0 1 255 128 0 1 255 128 0]).	figure := CachedImage on: (Image 						extent: 23 @ 23						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedStringlt;@@O&lt;@@O&lt;@@O&lt;@@@C?@@C??0@@????????????????????????@@@@????????????????????????@@C?@@C?@@C?@O&lt;@@O&lt;@@O&lt;@@O&lt;@@O&lt;@@O&lt;@?0@@?0@@????????????????????????@@@@????????????????????????@@C?@@C?@@C?@O&lt;@@O&lt;@@O&lt;@@O&lt;@@O&lt;@@O&lt;@?0@@?0@@????????????????????????@@@@????????????????????????@@C?@@C?@@C?@O&lt;@@O&lt;@@O&lt;@@O&lt;@@O&lt;@@O&lt;@?0@@?0@@????????????????????????@@@@????????????????????????@@C?@@C??0@@@O&lt;@@O&lt;@@O&lt;@@O&lt;@@O&lt;@@O&lt;@?0@@?0@@????????????????????????@@@@?????????????????????????????0@@?0@@?0@@@O&lt;@@O&lt;@@O&lt;@@O&lt;@?0@@?0@@?0@@????????????????????????@@@@?????????????????????????????0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@????????????????????????@@@@?????????????????????????????0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@?0@@????????????????????????@@@@')).	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.PointDialog class</class-id> <category>interface specs</category><body package="CoolImage">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: '' 			#bounds: #(#{Graphics.Rectangle} 640 512 830 659 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 5 0 0.5 0 ) 					#name: #label ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} -5 0.5 65 0 1 1 ) 					#name: #xLabel 					#label: 'x:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.5 40 0 -5 1 65 0 ) 					#name: #xField 					#model: #xHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#validate: ) 					#alignment: #center 					#type: #number ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} -5 0.5 100 0 1 1 ) 					#name: #yLabel 					#label: 'y:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.5 75 0 -5 1 100 0 ) 					#name: #yField 					#model: #yHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#validate: ) 					#alignment: #center 					#type: #number ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 -35 1 -5 0.5 -5 1 ) 					#name: #acceptButton 					#model: #accept 					#label: 'Accept' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 -35 1 -5 1 -5 1 ) 					#name: #cancelButton 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>CoolImage.Capture class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 21 @ 15						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[0 112 0 0 1 252 0 0 127 255 240 0 131 254 8 0 255 255 248 0 128 0 8 0 128 112 8 0 128 136 8 0 129 4 8 0 129 4 8 0 129 4 8 0 128 136 8 0 128 112 8 0 128 0 8 0 255 255 248 0]).	figure := CachedImage on: (Image 						extent: 21 @ 15						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedString: '????????????????????????????????????@@@@@@@@@@@@????????????????????????????????????@O???????????????????????????0@@@@@@@@@@@@@@@@@@@@@@@@@@@O???????????????????????????0C???&lt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@C???&lt;@@@@@????????????????????@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????????????????????@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@C???????????????????????????????????????????????????????????????????????????&lt;@@@@@@@@@????????????????????????????????@@@@@@@@@@@@????????????????????????????????@@@@@@@@@O???????????????????????????0@@@O???????????0@@@O???????????????????????????0@@@@@@@@C???????????????????????&lt;@@@C???????????????????&lt;@@@C???????????????????????&lt;@@@@@@@@@????????????????????????@@@@????????????????????@@@@????????????????????????@@@@@@@@@O???????????????????????0@@@O???????????????????0@@@O???????????????????????0@@@@@@@@C???????????????????????????&lt;@@@C???????????&lt;@@@C???????????????????????????&lt;@@@@@@@@@????????????????????????????????@@@@@@@@@@@@????????????????????????????????@@@@@@@@@O???????????????????????????????????????????????????????????????????????????0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@')).	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.Undo class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 24 @ 24						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 31 224 0 0 127 248 0 192 255 252 0 225 224 30 0 243 192 14 0 255 128 7 0 255 0 7 0 254 0 7 0 255 0 7 0 255 128 7 0 255 192 14 0 255 192 30 0 0 0 28 0 0 0 28 0 0 0 24 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]).	figure := CachedImage on: (Image 						extent: 24 @ 24						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedString	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.Sip class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 24 @ 24						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[0 0 248 0 0 1 252 0 0 3 254 0 0 7 255 0 0 7 255 0 0 7 255 0 0 7 255 0 0 15 255 0 0 19 254 0 0 33 252 0 0 64 248 0 0 128 128 0 1 129 0 0 3 130 0 0 7 196 0 0 15 248 0 0 31 240 0 0 63 224 0 0 127 192 0 0 127 128 0 0 127 0 0 0 126 0 0 0 252 0 0 0 192 0 0 0]).	figure := CachedImage on: (Image 						extent: 24 @ 24						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedStringamp;?0@@PDB@PDB@PDB@PDA@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@?????7M3?41L?2X&amp;?0@@6P@@,0@@#@@@PDA@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@?????7M3?41L?2X&amp;?0@@6P@@,0@@#@@@PDA@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@?????7M3?41L?2X&amp;?0@@6P@@,0@@#@@@PDA@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@?????7M3?41L?2X&amp;?0@@6P@@,0@@#@@@PDA@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@?????41L?2X&amp;?0@@6P@@,0@@#@@@PDA@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@?????2X&amp;?0@@6P@@,0@@#@@@PDA@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@?????0@@6P@@,0@@#@@@PDA@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@????PDA@PDA@PDA@PDA@PDA@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDA@PDA@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@PDB@')).	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.Zoom class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 18 @ 18						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[0 126 0 0 0 195 0 0 1 159 128 0 3 27 192 0 2 25 64 0 2 255 64 0 2 255 64 0 2 152 64 0 3 88 192 0 1 249 128 0 3 195 0 0 7 126 0 0 14 0 0 0 28 0 0 0 56 0 0 0 112 0 0 0 224 0 0 0 192 0 0 0]).	figure := CachedImage on: (Image 						extent: 18 @ 18						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedString: '???????????????????????????????????? HB@@@@@@@@@@@@@@@@@ HB@????????????@@C???????????????????????????????&lt;@@@@@@@C???????????????&lt;@@@@@@@C???????&lt;@@O???????????????????????????0@@@HB@ O???????0@@@@@@@O??@O??@HB@ @@@@O???0@@???????????????????????? HB@@@@@????????????@@@@@@@@??????&lt;@??&lt;@@@@@ HB@@@C???????????????????????&lt;@@@C???????????????&lt;@@@@@@@C??????????0C???&lt;@@@@@@O???????????????????????0@@@O???0@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@O???0@@@@@@????????????????????????@@@@????@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@????@@@@@@C???????????????????????&lt;@@@C??????0C???????&lt;@@@@@@@C???????????????&lt;@@@@@@O???????????????????????8B@ @@@@O??????@O???0@@@@@@@O???????????0@@@HB@ @@@????????????????????????????@@@@ HB@??&lt;@??&lt;@@@@@@@@@???????? HB@@@@@????@@C???????????????????????=%YXA@PH@@@@@@@@C???????????????&lt;@@@@@@@C???????&lt;@@O???????????????????6U% DA@ B@ PO???8B@ @@@@@@@@@@@@@@@@HB@ O???????????0@@????????????????YVV@PDB@HBA@????????????????????????????????????????????@@C???????????=%YXA@PH@ HDC???????????????????????????????????????????????&lt;@@O???????6U% DA@ B@ PO???????????????????????????????????????????????????0@@????YVV@PDB@HBA@????????????????????????????????????????????????????????@@A%YXA@PH@ HDC???????????????????????????????????????????????????????????&lt;@@DA@ B@ PO???????????????????????????????????????????????????????????????0@@')).	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.Paste class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 23 @ 23						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[1 248 0 0 1 248 0 0 63 255 192 0 127 255 224 0 255 255 240 0 255 255 240 0 255 255 240 0 255 255 240 0 255 255 240 0 255 255 240 0 255 255 240 0 255 255 240 0 255 255 248 0 255 255 252 0 255 255 254 0 255 255 254 0 255 255 254 0 255 255 254 0 255 255 254 0 255 255 254 0 127 255 254 0 0 63 254 0 0 63 254 0]).	figure := CachedImage on: (Image 						extent: 23 @ 23						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedStringamp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;2P@@2P@@@@@@????????????@@@@@@@@ G%: G%: G%: G%: G%: G%: G%: G%: G%:2P@@6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;2P@@2P@@2P@@????????????@@@@@@@@ G%: G%: G%: G%: G%: G%: G%: G%: G%:2P@@6.G&amp;@@@@@@@@@@@@6.G&amp;@@@@2P@@**&gt;32P@@2P@@????????@@@@@@@@ G%: G%: G%: G%: G%: G%: G%: G%: G%:2P@@6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;2P@@**&gt;3**&gt;32P@@2P@@????@@@@@@@@ G%: G%: G%: G%: G%: G%: G%: G%: G%:2P@@6.G&amp;@@@@@@@@6.G&amp;@@@@@@@@2P@@**&gt;3**&gt;3**&gt;32P@@2P@@@@@@@@@@ G%: G%: G%: G%: G%: G%: G%: G%: G%:2P@@6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;2P@@2P@@2P@@2P@@2P@@2P@@@@@@@@@@ G%: G%: G%: G%: G%: G%: G%: G%: G%:2P@@6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;2P@@@@@@@@@@ G%: G%: G%: G%: G%: G%: G%: G%: G%:2P@@6.G&amp;@@@@@@@@@@@@6.G&amp;@@@@@@@@@@@@6.G&amp;@@@@6.G&amp;2P@@@@@@@@@@ G%: G%: G%: G%: G%: G%: G%: G%: G%:2P@@6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;2P@@@@@@@@@@@@@@ G%: G%: G%: G%: G%: G%: G%: G%:2P@@6.G&amp;@@@@6.G&amp;@@@@@@@@@@@@@@@@6.G&amp;@@@@@@@@6.G&amp;2P@@@@@@????@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2P@@6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;2P@@@@@@????????????????????????????????????????2P@@6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;6.G&amp;2P@@@@@@????????????????????????????????????????2P@@2P@@2P@@2P@@2P@@2P@@2P@@2P@@2P@@2P@@2P@@2P@@2P@@@@@@')).	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>CoolImage.ColorSelector class</class-id> <category>interface specs</category><body package="CoolImage">hsbSpec	"UIPainter new openOnClass: self andSelector: #hsbSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 468 376 812 648 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#label: 'H-S-B' 					#style: #small ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 20 0 30 0 1 0.5 ) 					#label: 'H:' 					#style: #small ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 22 0 -55 1 38 0 ) 					#name: #hueSlider 					#model: #huePlug 					#orientation: #horizontal 					#start: 0.0 					#stop: 1.0 					#step: 0.01 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 1 20 0 -5 1 40 0 ) 					#name: #hueField 					#model: #huePlug 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#validate0To1: ) 					#style: #small 					#type: #number 					#formatString: '0.000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 20 0 55 0 1 0.5 ) 					#label: 'S:' 					#style: #small ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 47 0 -55 1 63 0 ) 					#name: #saturationSlider 					#model: #saturationPlug 					#orientation: #horizontal 					#start: 0.0 					#stop: 1.0 					#step: 0.01 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 1 45 0 -5 1 65 0 ) 					#name: #saturationField 					#model: #saturationPlug 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#validate0To1: ) 					#style: #small 					#type: #number 					#formatString: '0.000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 20 0 80 0 1 0.5 ) 					#label: 'B:' 					#style: #small ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 72 0 -55 1 88 0 ) 					#name: #brightnessSlider 					#model: #brightnessPlug 					#orientation: #horizontal 					#start: 0.0 					#stop: 1.0 					#step: 0.01 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 1 70 0 -5 1 90 0 ) 					#name: #brightnessField 					#model: #brightnessPlug 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#validate0To1: ) 					#style: #small 					#type: #number 					#formatString: '0.000' ) ) ) )</body><body package="CoolImage">rgbSpec	"UIPainter new openOnClass: self andSelector: #rgbSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 468 376 812 648 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#label: 'R-G-B' 					#style: #small ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 20 0 30 0 1 0.5 ) 					#label: 'R:' 					#style: #small ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 22 0 -55 1 38 0 ) 					#name: #redSlider 					#model: #redPlug 					#orientation: #horizontal 					#start: 0.0 					#stop: 1.0 					#step: 0.01 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 1 20 0 -5 1 40 0 ) 					#name: #redField 					#model: #redPlug 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#validate0To1: ) 					#style: #small 					#type: #number 					#formatString: '0.000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 20 0 55 0 1 0.5 ) 					#label: 'G:' 					#style: #small ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 47 0 -55 1 63 0 ) 					#name: #greenSlider 					#model: #greenPlug 					#orientation: #horizontal 					#start: 0.0 					#stop: 1.0 					#step: 0.01 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 1 45 0 -5 1 65 0 ) 					#name: #greenField 					#model: #greenPlug 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#validate0To1: ) 					#style: #small 					#type: #number 					#formatString: '0.000' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 20 0 80 0 1 0.5 ) 					#label: 'B:' 					#style: #small ) 				#(#{UI.SliderSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 72 0 -55 1 88 0 ) 					#name: #blueSlider 					#model: #bluePlug 					#orientation: #horizontal 					#start: 0.0 					#stop: 1.0 					#step: 0.01 ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} -50 1 70 0 -5 1 90 0 ) 					#name: #blueField 					#model: #bluePlug 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#validate0To1: ) 					#style: #small 					#type: #number 					#formatString: '0.000' ) ) ) )</body><body package="CoolImage">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Unlabeled Canvas' 			#bounds: #(#{Graphics.Rectangle} 640 512 996 820 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -5 0.5 30 0 ) 					#name: #colorMenuButton 					#tabable: false 					#menu: #colorMenu 					#isPopUp: false ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0 0 1 30 0 ) 					#name: #colorView 					#component: #colorView ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 30 0 0 1 130 0 ) 					#name: #hsbCanvas 					#flags: 0 					#minorKey: #hsbSpec ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 130 0 0 1 230 0 ) 					#name: #rgbCanvas 					#flags: 0 					#minorKey: #rgbSpec ) ) ) )</body></methods><methods><class-id>CoolImage.Rotate class</class-id> <category>resources</category><body package="CoolImage">toolIcon	"CoolImageWorkbench openOnClass: self andSelector: #toolIcon"	&lt;resource: #image&gt;	| figure shape |	shape := CachedImage on: (Image 						extent: 18 @ 19						depth: 1						bitsPerPixel: 1						palette: CoveragePalette monoMaskPalette						usingBits: #[0 8 0 0 0 28 0 0 0 62 0 0 0 127 0 0 0 255 128 0 1 255 192 0 85 92 0 0 64 28 0 0 64 28 0 0 64 28 0 0 64 28 0 0 64 60 0 0 64 60 0 0 64 120 0 0 64 248 0 0 67 240 0 0 255 224 0 0 255 192 0 0 255 0 0 0]).	figure := CachedImage on: (Image 						extent: 18 @ 19						depth: 24						bitsPerPixel: 24						palette: (FixedPalette 								redShift: 0								redMask: 255								greenShift: 8								greenMask: 255								blueShift: 16								blueMask: 255)						usingBits: (ByteArray 								fromPackedString: '????????????????????????????????????????????????72B_????????????????????@@C????????????????????????????????????????????_HI?_HI?_HI????????????????&lt;@@O???????????????????????????????????????=&lt; ''=&lt; ''=&lt; ''=&lt; ''=&lt; ''????????????0@@????????????????????????????????????@@C?@@C?@@C?@@C?@@C?@@C?@@C?????????@@C???????????????????????????????&lt;@@O&lt;@@O&lt;@@O&lt;@@O&lt;@@O&lt;@@O&lt;@@O&lt;@@O&lt;@@O????&lt;@@O???????????????????????????=&lt; ''=&lt; ''=&lt; ''=&lt; ''=&lt; ''=&lt; ''=&lt; ''=&lt; ''=&lt; ''=&lt; ''=&lt; ''0@@????@@@@????@@@@????@@@@????@@@@????@@@@????72B_72B_72B_????????????????@@C???&lt;@@@C????????????????????????????????????_HI?_HI?_HI????????????????&lt;@@O???0@@@O???????????????????????????????????=&lt; ''=&lt; ''=&lt; ''????????????????0@@????@@@@????????????????????????????????????@@C?@@C?@@C?????????????????@@C???&lt;@@@C???????????????????????????????????&lt;@@O&lt;@@O&lt;@@O????????????????&lt;@@O???0@@@O???????????????????????????????=&lt; ''0@@?0@@?0@@?????????????????0@@????@@@@????????????????????????????????72B_72B_72B_@@C?????????????????@@C???&lt;@@@C????????????????????????????_HI?_HI?_HI?_HI????????????????????&lt;@@O???0@@@O???????????????????????0@@?=&lt; ''=&lt; ''=&lt; ''=&lt; ''????????????????????0@@????@@@@????????????????@@C?@@C?@@C?@@C?72B_72B_????????????????????????@@@@@O&lt;@@O&lt;@@O?_HI?_HI?_HI&lt;@@O&lt;@@O&lt;@@O&lt;@@O&lt;@@O????????????????????????????&lt;@@@@@?0@@?0@@?=&lt; ''=&lt; ''=&lt; ''0@@?0@@?0@@?0@@?????????????????????????????????0@@@@C?@@C?@@C?72B_72B_72B_72B_@@C?????????????????????????????????????????@@@b')).	^OpaqueImage figure: figure shape: shape</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="CoolImage">toolsCoolImageWorkbench	"Open the CoolImage Workbench, a much improved mask editor from Travis Griggs."	&lt;menuItem: 'CoolImage'		nameKey: nil		menu: #(#menuBar #tools)		position: 18.701&gt;	self openApplicationForClassNamed: #{CoolImage.Workbench}</body></methods><initialize><class-id>CoolImage.Workbench</class-id></initialize><initialize><class-id>CoolImage.ColorSelector</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>EventManager</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>handlers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Dependency Events</category><attributes><package>System-Dependency Events</package></attributes></class><class><name>Controller</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>SelectionTracker</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Events-Trackers</category><attributes><package>Interface-Events-Trackers</package></attributes></class><class><name>VisualPart</name><environment>Graphics</environment><super>Graphics.VisualComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>container eventHandlers properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Visual Objects</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>Palette</name><environment>Graphics</environment><super>Core.KeyedCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Palettes</category><attributes><package>Graphics-Palettes</package></attributes></class><class><name>CoveragePalette</name><environment>Graphics</environment><super>Graphics.Palette</super><private>false</private><indexed-type>none</indexed-type><inst-vars>maxPixelValue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Palettes</category><attributes><package>Graphics-Palettes</package></attributes></class><class><name>DependentPart</name><environment>Graphics</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Visual Objects</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>View</name><environment>UI</environment><super>Graphics.DependentPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView useParentColors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category><attributes><package>Interface-Dialogs</package></attributes></class><class><name>Rectangle</name><environment>Graphics</environment><super>Graphics.Geometric</super><private>false</private><indexed-type>none</indexed-type><inst-vars>origin corner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Geometry</category><attributes><package>Graphics-Geometry</package></attributes></class><class><name>Image</name><environment>Graphics</environment><super>Graphics.PixelArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bits width height depth bitsPerPixel palette maxPixelValue rowByteSize </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Images</category><attributes><package>Graphics-Images</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>