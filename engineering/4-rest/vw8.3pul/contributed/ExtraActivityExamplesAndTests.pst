<?xml version="1.0"?><st-source><!-- Name: ExtraActivityExamplesAndTestsNotice: Copyright 2003 - 2013 Travis Griggs, Michael Lucas-SmithThis utility is free to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: This package contains some tests for the ExtraActivity stuff, and it also has a small "clock" example to show in practice how one might use the extra activity APIs.DbIdentifier: bear73DbTrace: 494542DbUsername: nrossDbVersion: 8DevelopmentPrerequisites: #(#(#any 'ExtraActivity' '') #(#any 'SUnitToo' ''))PackageName: ExtraActivityExamplesAndTestsParcel: #('ExtraActivityExamplesAndTests')ParcelName: ExtraActivityExamplesAndTestsPrerequisiteParcels: #(#('ExtraActivity' '') #('SUnitToo' ''))PrintStringCache: (8,nross)Version: 8Date: 11:59:19 AM September 23, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (sep16.4) of September 23, 2016 on September 23, 2016 at 11:59:19 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ExtraActivityTestView</name><environment>ExtraActivity</environment><super>Graphics.VisualPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>eventBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>ExtraActivity</category><attributes><package>ExtraActivityExamplesAndTests</package></attributes></class><comment><class-id>ExtraActivity.ExtraActivityTestView</class-id><body>I'm a helper class for the Tests.Instance Variables:	eventBlock	&lt;BlockClosure&gt;	used as a general hook for capturing the tick events</body></comment><class><name>ExtraActivityApplicationModelTest</name><environment>ExtraActivity</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>window </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>ExtraActivity</category><attributes><package>ExtraActivityExamplesAndTests</package></attributes></class><comment><class-id>ExtraActivity.ExtraActivityApplicationModelTest</class-id><body>Open the clock example and test it is receiving activity ticks.</body></comment><class><name>ClockController</name><environment>ExtraActivity</environment><super>UI.Controller</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>ExtraActivity</category><attributes><package>ExtraActivityExamplesAndTests</package></attributes></class><comment><class-id>ExtraActivity.ClockController</class-id><body>I provide toggle behavior back to my view.</body></comment><class><name>ExtraActivityVisualPartTest</name><environment>ExtraActivity</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testView window </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>ExtraActivity</category><attributes><package>ExtraActivityExamplesAndTests</package></attributes></class><comment><class-id>ExtraActivity.ExtraActivityVisualPartTest</class-id><body>Open a trivial VisualPart and verify it respnds correctly to the API.</body></comment><class><name>ClockExample</name><environment>ExtraActivity</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>time pixmap color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>ExtraActivity</category><attributes><package>ExtraActivityExamplesAndTests</package></attributes></class><comment><class-id>ExtraActivity.ClockExample</class-id><body>Run 'ClockExample example' to see me in action. I'm just a simple analog clock that demonstrates hooking up an activity tick event.  I display time in Greenwich (UTC) regardless of the local timezone.Instance Variables:	color	&lt;ColorValue&gt;	the background color	pixmap	&lt;Pixmap&gt;	the buffer stuff is drawn intermediately to	time	&lt;Timestamp&gt;	the current time</body></comment><methods><class-id>ExtraActivity.ExtraActivityTestView</class-id> <category>accessing</category><body package="ExtraActivityExamplesAndTests">eventBlock	^eventBlock</body><body package="ExtraActivityExamplesAndTests">eventBlock: anObject	eventBlock := anObject</body></methods><methods><class-id>ExtraActivity.ExtraActivityTestView</class-id> <category>extra activity</category><body package="ExtraActivityExamplesAndTests">activityTickEvent: anEvent 	eventBlock value: anEvent</body></methods><methods><class-id>ExtraActivity.ExtraActivityApplicationModelTest</class-id> <category>running</category><body package="ExtraActivityExamplesAndTests">tearDown	window isNil ifFalse: 		[window controller closeAndUnschedule].</body><body package="ExtraActivityExamplesAndTests">testClockTicks	"Mainly the mark1 eyeball test, but we also check the clock has measured time.  (Time precision on Windows can be poor, so we compare with 50 milliseconds earlier to avoid any false failures due to that.)"	| justBeforeStartTime delayDuration |	delayDuration := 2 seconds.	justBeforeStartTime := Timestamp nowUTC - 50 milliseconds.	window := ClockExample example.	(Delay for: delayDuration) wait.	self assert: window component time - justBeforeStartTime &gt; delayDuration		description: 'The clock is not ticking (or not fast enough)'.</body></methods><methods><class-id>ExtraActivity.ClockController</class-id> <category>events</category><body package="ExtraActivityExamplesAndTests">redButtonPressedEvent: anEvent 	self view toggleColor</body></methods><methods><class-id>ExtraActivity.ExtraActivityVisualPartTest</class-id> <category>running</category><body package="ExtraActivityExamplesAndTests">setUp	testView := ExtraActivityTestView new.	testView eventBlock: [:ev | ].	window := ApplicationWindow new.	window		component: testView;		openWithExtent: 200 @ 200.	Screen default receiveAndProcessAllEvents.	ActivityLoop initialize</body><body package="ExtraActivityExamplesAndTests">tearDown	window sensor eventQuit: nil.	Screen default receiveAndProcessAllEvents</body><body package="ExtraActivityExamplesAndTests">testHits	| count now |	count := 0.	testView eventBlock: [:arg | count := count + 1].	self assert: count = 0.	testView startActivityRate: 100.	now := Time millisecondClockValue.	[Time millisecondClockValue - now &lt;= 10000 and: [count = 0]] 		whileTrue: [window windowManager processNextEvent].	self assert: count &gt; 0</body><body package="ExtraActivityExamplesAndTests">testNoLongerActiveButNotCollected	self deny: (ActivityLoop isActive: testView).	self deny: testView isActivityTicking.	testView startActivityRate: 33.	self assert: (ActivityLoop isActive: testView).	self assert: testView isActivityTicking.	testView container: nil.	window component: View new.	(Delay forSeconds: 1) wait.	self deny: (ActivityLoop isActive: testView).	self deny: testView isActivityTicking</body><body package="ExtraActivityExamplesAndTests">testRedundantRegistration	| loop |	testView startActivityRate: 500.	loop := ActivityLoop registeredOrNewFor: testView.	self assert: loop notNil.	testView startActivityRate: 250.	self assert: loop == (ActivityLoop registeredOrNewFor: testView)</body><body package="ExtraActivityExamplesAndTests">testRegistration	self deny: (ActivityLoop isActive: testView).	testView startActivityRate: 33.	self assert: (ActivityLoop isActive: testView).	testView stopActivity.	self deny: (ActivityLoop isActive: testView)</body><body package="ExtraActivityExamplesAndTests">testUnecessaryStop	testView stopActivity.	testView stopActivity</body></methods><methods><class-id>ExtraActivity.ClockExample</class-id> <category>extra activity</category><body package="ExtraActivityExamplesAndTests">activityTickEvent: anEvent 	time := Timestamp new setFromMicroseconds: anEvent time.	self isOpen 		ifTrue: 			[self displayOn: self graphicsContext.			Screen default sync]</body></methods><methods><class-id>ExtraActivity.ClockExample</class-id> <category>displaying</category><body package="ExtraActivityExamplesAndTests">assurePixmap	(pixmap isNil or: [pixmap bounds extent ~= self bounds extent or: [pixmap isOpen not]]) 		ifTrue: [pixmap := Pixmap extent: self bounds extent].	^pixmap</body><body package="ExtraActivityExamplesAndTests">clock	| gc circleBox angle |	self assurePixmap.	gc := pixmap graphicsContext.	gc		paint: (ColorValue 					red: 1 - color red					green: 1 - color green					blue: 1 - color blue);		displayRectangle: pixmap bounds.	circleBox := pixmap bounds center 				- ((pixmap width min: pixmap height) // 2) 					extent: (pixmap width min: pixmap height) asPoint.	gc		paint: color;		displayWedgeBoundedBy: circleBox			startAngle: 0			sweepAngle: 360.	gc capStyle: GraphicsContext capRound.	angle := (time hour - 3) \\ 12 / 12 * (Float pi * 2).	gc		paint: ColorValue blue;		lineWidth: 7;		displayLineFrom: circleBox center			to: circleBox center + (Point r: circleBox width * 0.7 // 2 theta: angle).	angle := (time minute - 15) \\ 60 / 60 * (Float pi * 2).	gc		paint: ColorValue green;		lineWidth: 5;		displayLineFrom: circleBox center			to: circleBox center + (Point r: circleBox width * 0.8 // 2 theta: angle).	angle := (time second - 15) \\ 60 / 60 * (Float pi * 2).	gc		paint: ColorValue red;		lineWidth: 3;		displayLineFrom: circleBox center			to: circleBox center + (Point r: circleBox width * 0.9 // 2 theta: angle).	angle := (time millisecond - 250) \\ 1000 / 1000 * (Float pi * 2).	gc		paint: ColorValue yellow;		lineWidth: 1;		displayLineFrom: circleBox center			to: circleBox center + (Point r: circleBox width // 2 theta: angle).	^pixmap</body><body package="ExtraActivityExamplesAndTests">displayOn: aGC 	self isActivityTicking ifFalse: [self startActivityRate: 33].	time ifNotNil: [self clock displayOn: aGC]</body></methods><methods><class-id>ExtraActivity.ClockExample</class-id> <category>controller accessing</category><body package="ExtraActivityExamplesAndTests">defaultControllerClass	^ClockController</body></methods><methods><class-id>ExtraActivity.ClockExample</class-id> <category>control</category><body package="ExtraActivityExamplesAndTests">toggleColor	color := color = ColorValue black 				ifTrue: [ColorValue white]				ifFalse: [ColorValue black]</body></methods><methods><class-id>ExtraActivity.ClockExample</class-id> <category>initialize-release</category><body package="ExtraActivityExamplesAndTests">initialize	super initialize.	color := ColorValue black</body><body package="ExtraActivityExamplesAndTests">release	self stopActivity.	^super release</body></methods><methods><class-id>ExtraActivity.ClockExample</class-id> <category>accessing</category><body package="ExtraActivityExamplesAndTests">time	^time</body></methods><methods><class-id>ExtraActivity.ClockExample class</class-id> <category>example</category><body package="ExtraActivityExamplesAndTests">example	"self example"	^ApplicationWindow new		component: self new;		openWithExtent: 400 @ 200</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>Controller</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>VisualPart</name><environment>Graphics</environment><super>Graphics.VisualComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>container eventHandlers properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Visual Objects</category><attributes><package>Graphics-Visual Objects</package></attributes></class><class><name>View</name><environment>UI</environment><super>Graphics.DependentPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class></st-source>