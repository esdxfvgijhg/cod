<?xml version="1.0"?><st-source><!-- Name: FileCopyProgressExampleNotice: Copyright © 1999 Cincom Systems, Inc.  All Rights Reserved.DbIdentifier: bear73DbTrace: 28389PackageName: FileCopyProgressExampleParcel: #('FileCopyProgressExample')PrerequisiteParcels: #(#('FileProgress' ''))PrintStringCache: (7.1 - 1.0,kgreek)Version: 7.1 - 1.0Date: 6:36:43 AM August 5, 2009 --><time-stamp>From VisualWorks®, Pre-Release 7.7 (aug09.0) of August 5, 2009 on August 5, 2009 at 6:36:43 AM </time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>FileCopyProgressExample</name><environment>Examples</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>source destination elapsedTime timeRemaining target fileSize totalFileSize fileProgress overallProgress fileCopied totalCopied status lastTimeCheck actualBytesCopied copyProcess temporaryDirectory </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>FileProgress-Examples</category><attributes><package>FileCopyProgressExample</package></attributes></class><comment><class-id>Examples.FileCopyProgressExample</class-id><body>This class shows an example of using John Brant's ProgressWidget to show progress while copying files.  The application copies each file in the current directory to a temporary name, then deletes the temporary file.Instance Variables:	source	&lt;ValueHolder with: String&gt;	name of file to copy	target	&lt;ValueHolder with: String&gt;	name of new file created	fileSize	&lt;ValueHolder with: Number&gt;	size in bytes of file being copied	totalFileSize	&lt;ValueHolder with: Number&gt;	size in bytes of all files to copy	fileProgress	&lt;ValueHolder with: Number&gt;	ratio of bytes copied to file size	overallProgress	&lt;ValueHolder with: Number&gt;	ratio of total bytes copied to total bytes to copy	fileCopied	&lt;ValueHolder with: Number&gt;	bytes copied of current file	totalCopied	&lt;ValueHolder with: Number&gt;	bytes copied of all files	thisChunk	&lt;Integer&gt;	bytes copied since last update of widget models.  Used for efficiency to prevent too frequent update of UI.	status	&lt;ValueHolder with: String&gt;	indicates current activity	copyProcess	&lt;Process&gt;	process where copying is occurring.  This process is forked to allow cancellation of copying and other user activity during copying.	temporaryDirectory	&lt;String&gt;	temporary subdirectory to which files are copied.  The directory is deleted on completion of copying.</body></comment><class><name>TimeInterval</name><environment>Examples</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>milliseconds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Examples-FileProgress</category><attributes><package>FileCopyProgressExample</package></attributes></class><comment><class-id>Examples.TimeInterval</class-id><body></body></comment><methods><class-id>Examples.FileCopyProgressExample</class-id> <category>aspects</category><body package="FileCopyProgressExample" selector="destination">destination	^destination isNil		ifTrue:			[destination := String new asValue]		ifFalse:			[destination]</body><body package="FileCopyProgressExample" selector="elapsedTime">elapsedTime	^elapsedTime isNil		ifTrue:			[elapsedTime := TimeInterval new asValue]		ifFalse:			[elapsedTime]</body><body package="FileCopyProgressExample" selector="fileCopied">fileCopied	^fileCopied isNil		ifTrue:			[fileCopied := 0 asValue]		ifFalse:			[fileCopied]</body><body package="FileCopyProgressExample" selector="fileProgress">fileProgress	^fileProgress isNil		ifTrue:			[fileProgress := 0 asValue]		ifFalse:			[fileProgress]</body><body package="FileCopyProgressExample" selector="fileSize">fileSize	^fileSize isNil		ifTrue:			[fileSize := 0 asValue]		ifFalse:			[fileSize]</body><body package="FileCopyProgressExample" selector="overallProgress">overallProgress	^overallProgress isNil		ifTrue:			[overallProgress := 0 asValue]		ifFalse:			[overallProgress]</body><body package="FileCopyProgressExample" selector="source">source	^source isNil		ifTrue:			[source := String new asValue]		ifFalse:			[source]</body><body package="FileCopyProgressExample" selector="status">status	^status isNil		ifTrue:			[status := String new asValue]		ifFalse:			[status]</body><body package="FileCopyProgressExample" selector="timeRemaining">timeRemaining	^timeRemaining isNil		ifTrue:			[timeRemaining := TimeInterval new asValue]		ifFalse:			[timeRemaining]</body><body package="FileCopyProgressExample" selector="totalCopied">totalCopied	^totalCopied isNil		ifTrue:			[totalCopied := 0 asValue]		ifFalse:			[totalCopied]</body><body package="FileCopyProgressExample" selector="totalFileSize">totalFileSize	^totalFileSize isNil		ifTrue:			[totalFileSize := 0 asValue]		ifFalse:			[totalFileSize]</body></methods><methods><class-id>Examples.FileCopyProgressExample</class-id> <category>initialize-release</category><body package="FileCopyProgressExample" selector="initializeDirectory">initializeDirectory	| random directory |	random := Random new.	directory := 'copy_dir'.	[(temporaryDirectory := directory asFilename) exists]		whileTrue: 			[directory 					at: (random next * 8) ceiling 					put: (Character value: (random next * 256) ceiling).			directory := Filename suggest: directory].</body><body package="FileCopyProgressExample" selector="resetValues">resetValues	source value: String new.	destination value: String new.	fileSize value: 0.	totalFileSize value: 0.	fileProgress value: 0.	overallProgress value: 0.	fileCopied value: 0.	totalCopied value: 0.	elapsedTime value: TimeInterval new.	timeRemaining value: TimeInterval new.	lastTimeCheck := Time millisecondClockValue.	status value: ''.	actualBytesCopied := 0.</body></methods><methods><class-id>Examples.FileCopyProgressExample</class-id> <category>interface opening</category><body package="FileCopyProgressExample" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow	self cancel</body></methods><methods><class-id>Examples.FileCopyProgressExample</class-id> <category>actions</category><body package="FileCopyProgressExample" selector="cancel">cancel	| file |	copyProcess isNil ifFalse:		[copyProcess terminate.		copyProcess := nil.		status value: 'Cancelled.'.		(Delay forMilliseconds: 50) wait.		destination value size &gt; 0 ifTrue:			[file := destination value asFilename.			file definitelyExists ifTrue: [file delete]]].</body><body package="FileCopyProgressExample" selector="copyFiles">copyFiles	| destinationFile files window |	self resetValues.	window := self builder window.	[status value: 'Initializing...'] uiEventFor: window.	copyProcess isNil ifFalse: [copyProcess terminate].	copyProcess :=		[self initializeDirectory.		temporaryDirectory makeDirectory.		destinationFile := temporaryDirectory construct: 'trash.tmp'.		[files := self filesToCopy.			[status value: 'Copying...'] uiEventFor: window.			files do:				[:filename |				self copyFrom: filename to: destinationFile]] 			ensure:				[destinationFile exists ifTrue: [destinationFile delete].				temporaryDirectory delete].		self updateTime: Time millisecondClockValue.		[status value: 'Done.'] uiEventFor: window.		copyProcess := nil]			forkAt: Processor userSchedulingPriority - 1</body><body package="FileCopyProgressExample" selector="copyFrom:to:">copyFrom: sourceFilename to: targetFilename 	"This method should be called from a forked process to allow progress updates to UIProcess."	[fileSize value: sourceFilename fileSize.	fileCopied value: 0.	fileProgress value: 0.	source value: sourceFilename asString.	destination value: targetFilename asString] 			uiEventFor: self builder window.	sourceFilename copyTo: targetFilename reportProgressTo: self</body><body package="FileCopyProgressExample" selector="filesToCopy">filesToCopy	| files |	Cursor read showWhile: 			[files := (Filename defaultDirectory filenamesMatching: '*') select: 							[:filename | 							(filename isReadable and: [filename isDirectory not]) 								ifTrue: 									[[totalFileSize value: totalFileSize value + filename fileSize] 										uiEventFor: self builder window.									true]								ifFalse: [false]]].	^files</body></methods><methods><class-id>Examples.FileCopyProgressExample</class-id> <category>updating</category><body package="FileCopyProgressExample" selector="update:with:">update: anAspectSymbol with: aValue 	| newFileProgress |	anAspectSymbol == #bytesCopied 		ifTrue: 			[actualBytesCopied := actualBytesCopied + aValue.			fileProgress value 				&lt; (newFileProgress := (fileCopied value + actualBytesCopied) 								/ fileSize value truncateTo: 0.01) 					ifTrue: 						[						[fileCopied value: fileCopied value + actualBytesCopied.						totalCopied value: totalCopied value + actualBytesCopied.						fileProgress value: newFileProgress.						overallProgress value: totalCopied value / totalFileSize value	"truncateTo: 0.01"] 								uiEventFor: self builder window.						actualBytesCopied := 0].			self updateTime: Time millisecondClockValue]</body><body package="FileCopyProgressExample" selector="updateTime:">updateTime: millisecondValue	| delta elapsed progress remaining window |	(progress := overallProgress value) &lt; 1			&amp; ((delta := millisecondValue - lastTimeCheck) &lt; 1000)		ifTrue: [^self].	elapsed := elapsedTime value milliseconds + delta.	elapsedTime value milliseconds: elapsed.	lastTimeCheck := millisecondValue.	window := self builder window.	progress isZero		ifFalse:			[remaining := elapsed - (progress * elapsed) / progress.			timeRemaining value milliseconds: remaining truncated.			[timeRemaining value: timeRemaining value]  uiEventFor: window].	[elapsedTime value: elapsedTime value]  uiEventFor: window.</body></methods><methods><class-id>Examples.TimeInterval</class-id> <category>accessing</category><body package="FileCopyProgressExample" selector="milliseconds">milliseconds	^milliseconds</body><body package="FileCopyProgressExample" selector="milliseconds:">milliseconds: aNumber	milliseconds := aNumber</body></methods><methods><class-id>Examples.TimeInterval</class-id> <category>initialize-release</category><body package="FileCopyProgressExample" selector="initialize">initialize	milliseconds := 0</body></methods><methods><class-id>Examples.TimeInterval</class-id> <category>printing</category><body package="FileCopyProgressExample" selector="displayString">displayString	| printValue label |	999 &lt; milliseconds		ifFalse:			[printValue := milliseconds.			label := ' milliseconds']		ifTrue:			[59999 &lt; milliseconds				ifFalse:					[printValue := milliseconds / 1000.					label := ' seconds']				ifTrue:					[3599999 &lt; milliseconds						ifFalse:							[printValue := milliseconds / 60000.							label := ' minutes']						ifTrue:							[86399999 &lt; milliseconds								ifFalse:									[printValue := milliseconds / 3600000.									label := ' hours']								ifTrue:									[31556735999 &lt; milliseconds										ifFalse:											[printValue := milliseconds / 86400000.											label := ' days']										ifTrue:											[printValue := milliseconds / 31556736000.											label := ' years']]]]].	^printValue truncated printString, label</body></methods><methods><class-id>Examples.TimeInterval class</class-id> <category>instance creation</category><body package="FileCopyProgressExample" selector="new">new	^super new initialize</body></methods><methods><class-id>Examples.FileCopyProgressExample class</class-id> <category>interface specs</category><body package="FileCopyProgressExample" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'File Copy Progress Example' 			#min: #(#Point 640 375 ) 			#bounds: #(#Rectangle 0 0 640 375 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#ProgressWidgetSpec 					#layout: #(#LayoutFrame 10 0.333333 0 0.192308 -20 1 0 0.269231 ) 					#isOpaque: true 					#colors: 					#(#LookPreferences 						#setForegroundColor: #(#ColorValue #blue ) ) 					#model: #fileProgress 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 25 0 -40 0.961538 120 0 0 0.961538 ) 					#model: #copyFiles 					#label: 'Copy' 					#defaultable: true ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin -10 0.333333 0 0.153846 1 0.5 ) 					#label: 'Destination:' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 10 0.333333 0 0.0384615 -20 1 0 0.115385 ) 					#flags: 0 					#model: #source 					#tabable: false 					#isReadOnly: true ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 10 0.333333 0 0.115385 -20 1 0 0.192308 ) 					#flags: 0 					#model: #destination 					#tabable: false 					#isReadOnly: true ) 				#(#ProgressWidgetSpec 					#layout: #(#LayoutFrame 10 0.333333 160 0 -20 1 185 0 ) 					#isOpaque: true 					#colors: 					#(#LookPreferences 						#setForegroundColor: #(#ColorValue #blue ) ) 					#model: #overallProgress 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin -10 0.333333 0 0.230769 1 0.5 ) 					#label: 'File Progress:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin -10 0.333333 0 0.461538 1 0.5 ) 					#label: 'Overall Progress:' ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -120 1 -40 0.961538 -25 1 0 0.961538 ) 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 10 0.333333 0 0.269231 -20 1 0 0.346154 ) 					#flags: 0 					#model: #fileSize 					#tabable: false 					#alignment: #center 					#isReadOnly: true 					#type: #number 					#formatString: '#,##0' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 10 0.333333 0 0.346154 -20 1 0 0.423077 ) 					#flags: 0 					#model: #fileCopied 					#tabable: false 					#alignment: #center 					#isReadOnly: true 					#type: #number 					#formatString: '#,##0' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 10 0.333333 0 0.5 -20 1 0 0.576923 ) 					#flags: 0 					#model: #totalFileSize 					#tabable: false 					#alignment: #center 					#isReadOnly: true 					#type: #number 					#formatString: '#,##0' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 10 0.333333 0 0.576923 -20 1 0 0.653846 ) 					#flags: 0 					#model: #totalCopied 					#tabable: false 					#alignment: #center 					#isReadOnly: true 					#type: #number 					#formatString: '#,##0' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 150 0 0 0.884615 -150 1 0 0.961538 ) 					#flags: 0 					#model: #status 					#tabable: false 					#alignment: #center 					#isReadOnly: true ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 0 0.846154 0.5 0.5 ) 					#label: 'Status:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin -10 0.333333 0 0.307692 1 0.5 ) 					#label: 'bytes to copy:' 					#style: #systemDefault ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin -10 0.333333 0 0.384615 1 0.5 ) 					#label: 'bytes copied:' 					#style: #systemDefault ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin -10 0.333333 0 0.538462 1 0.5 ) 					#label: 'bytes to copy:' 					#style: #systemDefault ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin -10 0.333333 0 0.615385 1 0.5 ) 					#label: 'bytes copied:' 					#style: #systemDefault ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin -10 0.333333 0 0.692308 1 0.5 ) 					#label: 'Elapsed Time:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin -10 0.333333 0 0.769231 1 0.5 ) 					#label: 'Est. Time Remaining:' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 10 0.333333 0 0.653846 -20 1 0 0.730769 ) 					#flags: 0 					#model: #elapsedTime 					#tabable: false 					#alignment: #center 					#isReadOnly: true 					#type: #object ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 10 0.333333 0 0.730769 -20 1 0 0.807692 ) 					#flags: 0 					#model: #timeRemaining 					#tabable: false 					#alignment: #center 					#isReadOnly: true 					#type: #object ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin -10 0.335938 0 0.0775401 1 0.5 ) 					#label: 'Source:' ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>