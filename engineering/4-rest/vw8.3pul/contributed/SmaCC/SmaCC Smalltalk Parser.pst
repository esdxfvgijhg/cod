<?xml version="1.0"?><st-source><!-- Name: SmaCC Smalltalk ParserNotice: Comment: This package is part of the Smalltalk Compiler-Compiler (SmaCC) written by John Brant and Don Roberts. It contains an example Smalltalk parser.If you want more information about SmaCC, visit http://www.refactoryworkers.com/SmaCC/. - - - - - - - - - - - - - - - - - - - - - - - - -Copyright (c) 2002-2010 John Brant, Don RobertsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.DbIdentifier: bear73DbTrace: 317931DevelopmentPrerequisites: #(#(#any 'Browser-Parser' '') #(#any 'SmaCC Runtime' ''))DisregardedPrerequisites: #(#(#name 'Base VisualWorks' #componentType #bundle))PackageName: SmaCC Smalltalk ParserParcel: #('SmaCC Smalltalk Parser')PrerequisiteParcels: #(#('Browser-Parser' '') #('SmaCC Runtime' ''))PrintStringCache: (2.0.3,brant)Version: 2.0.3Date: 9:56:24 AM January 28, 2011 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.8 (jan11.4) of January 28, 2011 on January 28, 2011 at 9:56:24 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>StParser</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Smalltalk Parser</package></attributes></class><class><name>StScanner</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCScanner</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Smalltalk Parser</category><attributes><package>SmaCC Smalltalk Parser</package></attributes></class><methods><class-id>Refactory.SmaCC.StParser</class-id> <category>generated-reduction actions</category><body package="SmaCC Smalltalk Parser" selector="reduceActionForArray1:">reduceActionForArray1: nodes	^WriteStream on: Array new</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForArray2:">reduceActionForArray2: nodes	^(nodes at: 1)		nextPut: (nodes at: 2);		yourself</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForArray3:">reduceActionForArray3: nodes	(nodes at: 2) stopPosition + 1 = (nodes at: 3) startPosition		ifTrue: [(nodes at: 1) nextPut: ((nodes at: 2) value , ':') asSymbol]		ifFalse:			[(nodes at: 1)				nextPut: (nodes at: 2) value asSymbol;				nextPut: #':'].	self position: (nodes at: 3) startPosition.	currentToken := nil.	^nodes at: 1</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForArrayLiteral2:">reduceActionForArrayLiteral2: nodes	^(nodes at: 1) value asSymbol</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForArrayLiteral6:">reduceActionForArrayLiteral6: nodes	^(nodes at: 2) value asQualifiedReference</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForArrayLiteral8:">reduceActionForArrayLiteral8: nodes	^(nodes at: 2) contents</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForBinaryMessage1:">reduceActionForBinaryMessage1: nodes	^Array with: (ReadStream on: (nodes at: 1) value) with: (Array with: (nodes at: 2))</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForBinaryMethodName1:">reduceActionForBinaryMethodName1: nodes	^Array with: (nodes at: 1) value asSymbol with: (Array with: (nodes at: 2))</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForBlock1:">reduceActionForBlock1: nodes	^RBBlockNode arguments: (nodes at: 2) body: (nodes at: 4)</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForBlock2:">reduceActionForBlock2: nodes	^RBBlockNode body: (nodes at: 2)</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForBlock3:">reduceActionForBlock3: nodes	^RBBlockNode arguments: (nodes at: 2) body: (RBSequenceNode statements: #())</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForBlock4:">reduceActionForBlock4: nodes	^RBBlockNode arguments: (nodes at: 2) body: (RBSequenceNode temporaries: (nodes at: 4) statements: (nodes at: 6))</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForBlockArgs1:">reduceActionForBlockArgs1: nodes	^OrderedCollection with: (nodes at: 2)</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForByteArray1:">reduceActionForByteArray1: nodes	^WriteStream on: ByteArray new</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForByteArray2:">reduceActionForByteArray2: nodes	^(nodes at: 1)		nextPut: (nodes at: 2) value;		yourself</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForCascade1:">reduceActionForCascade1: nodes	| messages |	(nodes at: 2) isEmpty ifTrue: [^nodes at: 1].	messages := OrderedCollection new: (nodes at: 2) size + 1.	messages add: (nodes at: 1).	(nodes at: 2)		do:			[:each | 			messages				add:					(RBMessageNode						receiver: (nodes at: 1) receiver						selector: each first contents asSymbol						arguments: each last)].	^RBCascadeNode messages: messages</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForExpression1:">reduceActionForExpression1: nodes	^RBAssignmentNode variable: (nodes at: 1) value: (nodes at: 3)</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForKeywordMethodName1:">reduceActionForKeywordMethodName1: nodes	| stream |	stream := WriteStream on: (String new: 30).	stream nextPutAll: (nodes at: 1) value.	^Array with: stream with: (OrderedCollection with: (nodes at: 2))</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForKeywordMethodName2:">reduceActionForKeywordMethodName2: nodes	(nodes at: 1) first nextPutAll: (nodes at: 2) value.	(nodes at: 1) last add: (nodes at: 3).	^nodes at: 1</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForLiteral14:">reduceActionForLiteral14: nodes	^(nodes at: 3) contents</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForLiteral15:">reduceActionForLiteral15: nodes	^(nodes at: 3) value asQualifiedReference</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForLiteral1:">reduceActionForLiteral1: nodes	^true</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForLiteral4:">reduceActionForLiteral4: nodes	^(nodes at: 1) value</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForLiteral6:">reduceActionForLiteral6: nodes	^(nodes at: 1) value at: 2</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForLiteral7:">reduceActionForLiteral7: nodes	^((nodes at: 1) value copyFrom: 2 to: (nodes at: 1) value size - 1) copyReplaceAll: '''''' with: ''''</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForLiteral8:">reduceActionForLiteral8: nodes	^(((nodes at: 2) value copyFrom: 2 to: (nodes at: 2) value size - 1) copyReplaceAll: '''''' with: '''') asSymbol</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForLiteral9:">reduceActionForLiteral9: nodes	^(nodes at: 2) value asSymbol</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForMethod1:">reduceActionForMethod1: nodes	^(RBMethodNode		selector: (nodes at: 1) value asSymbol		arguments: #()		body: (nodes at: 2) last) yourself</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForMethod2:">reduceActionForMethod2: nodes	^(RBMethodNode		selector: (nodes at: 1) first		arguments: (nodes at: 1) last		body: (nodes at: 2) last) yourself</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForMethod3:">reduceActionForMethod3: nodes	^(RBMethodNode		selector: (nodes at: 1) first contents asSymbol		arguments: (nodes at: 1) last		body: (nodes at: 2) last) yourself</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForMethodSequenceNode1:">reduceActionForMethodSequenceNode1: nodes	^Array		with:			((nodes at: 1)				addAll: (nodes at: 5);				yourself)		with: (RBSequenceNode temporaries: (nodes at: 3) statements: (nodes at: 6))</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForMethodSequenceNode2:">reduceActionForMethodSequenceNode2: nodes	^Array		with:			((nodes at: 1)				addAll: (nodes at: 3);				yourself)		with: (RBSequenceNode temporaries: #() statements: (nodes at: 4))</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForMethodSequenceNode3:">reduceActionForMethodSequenceNode3: nodes	^Array with: (nodes at: 1) with: (RBSequenceNode temporaries: #() statements: (nodes at: 2))</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForPrimary2:">reduceActionForPrimary2: nodes	^RBLiteralNode value: (nodes at: 1)</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForPrimitives1:">reduceActionForPrimitives1: nodes	^OrderedCollection new</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForPrimitives2:">reduceActionForPrimitives2: nodes	^(nodes at: 1)		add: ((nodes at: 2) startPosition to: (nodes at: 4) startPosition);		yourself</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForSequenceNode1:">reduceActionForSequenceNode1: nodes	^RBSequenceNode temporaries: (nodes at: 1) statements: (nodes at: 2)</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForStatementList2:">reduceActionForStatementList2: nodes	^(nodes at: 1)		add: (nodes at: 3);		yourself</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForStatements3:">reduceActionForStatements3: nodes	^(nodes at: 1)		add: (RBReturnNode value: (nodes at: 4));		yourself</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForStatements4:">reduceActionForStatements4: nodes	^OrderedCollection with: (RBReturnNode value: (nodes at: 2))</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForTemporaryVariables2:">reduceActionForTemporaryVariables2: nodes	^(nodes at: 1)		add: (nodes at: 2);		yourself</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForUnaryMessage1:">reduceActionForUnaryMessage1: nodes	^Array with: (ReadStream on: (nodes at: 1) value) with: #()</body><body package="SmaCC Smalltalk Parser" selector="reduceActionForVariable1:">reduceActionForVariable1: nodes	^RBVariableNode named: (nodes at: 1) value</body></methods><methods><class-id>Refactory.SmaCC.StParser</class-id> <category>generated</category><body package="SmaCC Smalltalk Parser" selector="reduceTable">reduceTable^#(	#(37 0 #symbolTypes) 	#(46 0 #reduceActionForPrimitives1:) 	#(35 0 #reduceActionForPrimitives1:) 	#(37 1 #errorTable) 	#(36 0 #reduceActionForPrimitives1:) 	#(56 2 #reduceActionForMethod1:) 	#(57 1 #reduceActionForVariable1:) 	#(34 2 #reduceActionForKeywordMethodName1:) 	#(58 2 #reduceActionForBinaryMethodName1:) 	#(56 2 #reduceActionForMethod3:) 	#(56 2 #reduceActionForMethod2:) 	#(68 1 #reduceActionForLiteral1:) 	#(68 1 #tryAllTokens) 	#(68 1 #nil) 	#(68 1 #reduceActionForLiteral4:) 	#(68 1 #reduceActionForLiteral7:) 	#(68 1 #reduceActionForLiteral6:) 	#(66 2 #reduceActionForSequenceNode1:) 	#(39 0 #reduceFor:) 	#(38 1 #reduceFor:) 	#(63 1 #liftFirstValue:) 	#(40 1 #liftFirstValue:) 	#(45 0 #reduceActionForPrimitives1:) 	#(44 1 #liftFirstValue:) 	#(43 1 #liftFirstValue:) 	#(63 1 #reduceActionForPrimary2:) 	#(33 0 #reduceFor:) 	#(59 2 #reduceActionForMethodSequenceNode3:) 	#(34 3 #reduceActionForKeywordMethodName2:) 	#(37 3 #liftSecondValue:) 	#(35 2 #reduceActionForTemporaryVariables2:) 	#(61 0 #reduceActionForArray1:) 	#(60 0 #reduceActionForByteArray1:) 	#(68 2 #reduceActionForLiteral9:) 	#(68 2 #reduceActionForLiteral8:) 	#(39 1 #reduceFor:) 	#(36 2 #liftFirstValue:) 	#(43 2 #reduceActionForCascade1:) 	#(48 2 #createMessageNodeFrom:) 	#(47 2 #createMessageNodeFrom:) 	#(51 1 #reduceActionForUnaryMessage1:) 	#(49 2 #createMessageNodeFrom:) 	#(63 3 #liftSecondValue:) 	#(36 3 #reduceActionForStatements4:) 	#(41 2 #reduceActionForBlockArgs1:) 	#(42 3 #reduceActionForBlock3:) 	#(42 3 #reduceActionForBlock2:) 	#(38 3 #reduceActionForStatementList2:) 	#(54 1 #liftFirstValue:) 	#(53 2 #reduceActionForKeywordMethodName1:) 	#(55 1 #liftFirstValue:) 	#(52 2 #reduceActionForBinaryMessage1:) 	#(40 3 #reduceActionForExpression1:) 	#(33 2 #nil) 	#(46 4 #reduceActionForPrimitives2:) 	#(59 4 #reduceActionForMethodSequenceNode2:) 	#(68 4 #reduceActionForLiteral15:) 	#(68 4 #reduceActionForLiteral14:) 	#(62 1 #reduceActionForArrayLiteral2:) 	#(62 1 #reduceActionForLiteral4:) 	#(61 2 #reduceActionForArray2:) 	#(62 1 #liftFirstValue:) 	#(60 2 #reduceActionForByteArray2:) 	#(41 3 #reduceActionForStatementList2:) 	#(45 3 #reduceActionForStatementList2:) 	#(50 1 #liftFirstValue:) 	#(53 3 #reduceActionForKeywordMethodName2:) 	#(61 3 #reduceActionForArray3:) 	#(42 5 #reduceActionForBlock1:) 	#(36 5 #reduceActionForStatements3:) 	#(59 6 #reduceActionForMethodSequenceNode1:) 	#(62 3 #reduceActionForArrayLiteral6:) 	#(62 3 #reduceActionForArrayLiteral8:) 	#(42 7 #reduceActionForBlock4:)	).</body><body package="SmaCC Smalltalk Parser" selector="transitionTable">transitionTable^#(#[1 0 13 0 20 0 17 0 24 0 21 0 26 0 25 0 34 0 29 0 56 0 33 0 58] #[1 0 37 0 1 0 6 0 4 0 6 0 7 0 6 0 12 0 6 0 13 0 41 0 14 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 6 0 29 0 6 0 30 0 45 0 37 0 6 0 64 0 49 0 66] #[1 0 10 0 1 0 10 0 4 0 10 0 7 0 10 0 9 0 10 0 12 0 10 0 13 0 10 0 14 0 10 0 15 0 10 0 16 0 10 0 17 0 10 0 20 0 10 0 21 0 10 0 22 0 10 0 23 0 10 0 29 0 10 0 30 0 53 0 46 0 57 0 59 0 10 0 64] #[1 0 61 0 20 0 65 0 29 0 69 0 57] #[1 0 61 0 20 0 65 0 29 0 73 0 57] #[1 0 10 0 1 0 10 0 4 0 10 0 7 0 10 0 9 0 10 0 12 0 10 0 13 0 10 0 14 0 10 0 15 0 10 0 16 0 10 0 17 0 10 0 20 0 10 0 21 0 10 0 22 0 10 0 23 0 77 0 24 0 10 0 29 0 10 0 30 0 53 0 46 0 81 0 59 0 10 0 64] #[0 0 0 0 64] #[1 0 10 0 1 0 10 0 4 0 10 0 7 0 10 0 9 0 10 0 12 0 10 0 13 0 10 0 14 0 10 0 15 0 10 0 16 0 10 0 17 0 10 0 20 0 10 0 21 0 10 0 22 0 10 0 23 0 10 0 29 0 10 0 30 0 53 0 46 0 85 0 59 0 10 0 64] #[1 0 14 0 1 0 14 0 20 0 14 0 29 0 89 0 35] #[0 0 18 0 4 0 7 0 12 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 23 0 29 0 30 0 64] #[1 0 93 0 4 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 15 0 113 0 16 0 117 0 17 0 22 0 18 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 137 0 36 0 141 0 38 0 145 0 40 0 149 0 42 0 153 0 43 0 157 0 44 0 161 0 47 0 165 0 48 0 169 0 49 0 173 0 57 0 177 0 63 0 22 0 64 0 181 0 68] #[0 0 0 0 64] #[1 0 185 0 1 0 93 0 4 0 97 0 7 0 189 0 9 0 101 0 12 0 105 0 13 0 193 0 14 0 109 0 15 0 113 0 16 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 197 0 36 0 141 0 38 0 145 0 40 0 149 0 42 0 153 0 43 0 157 0 44 0 161 0 47 0 165 0 48 0 169 0 49 0 173 0 57 0 177 0 63 0 22 0 64 0 181 0 68] #[0 0 26 0 64] #[0 0 30 0 1 0 2 0 3 0 4 0 6 0 7 0 9 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 26 0 29 0 30 0 64] #[0 0 30 0 1 0 2 0 3 0 4 0 6 0 7 0 9 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 26 0 29 0 30 0 64] #[0 0 34 0 1 0 4 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 29 0 30 0 64] #[0 0 38 0 1 0 4 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 29 0 30 0 64] #[1 0 61 0 20 0 65 0 29 0 201 0 57] #[0 0 42 0 64] #[0 0 46 0 64] #[1 0 205 0 1 0 61 0 20 0 65 0 29 0 209 0 57] #[1 0 213 0 5 0 217 0 7 0 221 0 17 0 225 0 20 0 229 0 23 0 233 0 24 0 237 0 25 0 241 0 26] #[1 0 93 0 4 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 15 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 245 0 40 0 149 0 42 0 153 0 43 0 157 0 44 0 161 0 47 0 165 0 48 0 169 0 49 0 173 0 57 0 177 0 63 0 181 0 68] #[0 0 50 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[0 0 54 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[0 0 58 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[1 0 93 0 4 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 15 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 249 0 40 0 149 0 42 0 153 0 43 0 157 0 44 0 161 0 47 0 165 0 48 0 169 0 49 0 173 0 57 0 177 0 63 0 181 0 68] #[1 0 37 0 1 0 6 0 4 0 6 0 7 0 6 0 12 0 6 0 13 0 41 0 14 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 18 0 253 0 19 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 6 0 29 0 6 0 30 0 45 0 37 1 1 0 41 1 5 0 66] #[0 0 62 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[0 0 62 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[0 0 66 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[0 0 70 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[0 0 74 0 18 0 64] #[1 1 9 0 2 0 78 0 18 1 13 0 39 0 78 0 64] #[0 0 82 0 2 0 18 0 64] #[0 0 86 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 64] #[0 0 90 0 2 0 6 0 18 0 64] #[1 0 94 0 2 0 94 0 3 0 94 0 6 0 94 0 18 1 17 0 45 0 94 0 64] #[0 0 98 0 2 0 3 0 6 0 18 0 64] #[1 0 98 0 2 0 98 0 3 0 98 0 6 0 98 0 18 1 21 0 24 1 25 0 26 1 29 0 52 1 33 0 53 0 98 0 64] #[1 0 98 0 2 0 98 0 3 0 98 0 6 0 98 0 18 1 37 0 20 1 21 0 24 1 25 0 26 1 41 0 51 1 45 0 52 1 49 0 53 0 98 0 64] #[1 0 86 0 2 0 86 0 6 1 53 0 11 0 86 0 18 0 86 0 20 0 86 0 24 0 86 0 26 0 86 0 64] #[1 0 102 0 2 0 102 0 6 0 102 0 18 1 37 0 20 1 21 0 24 1 25 0 26 1 57 0 51 1 61 0 52 1 65 0 53 0 102 0 64] #[0 0 106 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 64] #[1 0 14 0 1 0 14 0 20 0 14 0 29 1 69 0 35] #[1 0 110 0 2 0 110 0 3 0 110 0 4 0 110 0 5 0 110 0 6 0 110 0 7 0 110 0 8 0 110 0 10 0 110 0 12 0 110 0 13 0 110 0 15 0 110 0 20 0 110 0 21 0 110 0 22 0 110 0 23 0 110 0 24 0 110 0 26 0 110 0 30 1 73 0 33] #[1 0 10 0 4 0 10 0 7 0 10 0 9 0 10 0 12 0 10 0 13 0 10 0 15 0 10 0 16 0 10 0 17 0 10 0 20 0 10 0 21 0 10 0 22 0 10 0 23 0 10 0 29 0 10 0 30 1 77 0 46 0 10 0 64] #[0 0 114 0 64] #[0 0 118 0 1 0 4 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 29 0 30 0 64] #[0 0 122 0 4 0 7 0 12 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 23 0 29 0 30 0 64] #[0 0 126 0 1 0 20 0 29] #[1 1 81 0 20 1 85 0 29] #[1 0 130 0 4 0 130 0 5 0 130 0 6 0 130 0 7 0 130 0 12 0 130 0 13 0 130 0 15 0 130 0 17 0 130 0 20 0 130 0 21 0 130 0 22 0 130 0 23 0 130 0 24 0 130 0 25 0 130 0 26 0 130 0 29 0 130 0 30 0 130 0 32 1 89 0 61] #[1 0 134 0 18 0 134 0 21 1 93 0 60] #[0 0 138 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[0 0 142 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[0 0 138 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[0 0 138 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[0 0 138 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[0 1 97 0 6] #[1 1 101 0 2 0 78 0 18 1 105 0 39 0 78 0 64] #[1 0 61 0 20 0 65 0 29 1 109 0 57] #[1 1 113 0 1 1 117 0 14 1 121 0 18 1 125 0 19] #[0 1 129 0 18] #[1 0 93 0 4 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 15 1 133 0 16 0 117 0 17 0 146 0 18 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 1 137 0 40 0 149 0 42 0 153 0 43 0 157 0 44 0 161 0 47 0 165 0 48 0 169 0 49 0 173 0 57 0 177 0 63 0 146 0 64 0 181 0 68] #[0 0 150 0 18 0 64] #[1 0 154 0 2 1 141 0 3 0 154 0 6 0 154 0 18 0 154 0 64] #[1 0 93 0 4 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 15 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 149 0 42 1 145 0 48 1 149 0 49 1 153 0 54 1 157 0 57 1 161 0 63 0 181 0 68] #[1 0 93 0 4 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 15 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 149 0 42 1 165 0 49 1 169 0 55 1 157 0 57 1 173 0 63 0 181 0 68] #[0 0 158 0 2 0 3 0 6 0 18 0 24 0 26 0 64] #[1 0 162 0 2 0 162 0 3 0 162 0 6 0 162 0 18 1 177 0 24 0 162 0 64] #[0 0 166 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 64] #[0 0 170 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 64] #[0 0 158 0 2 0 3 0 6 0 18 0 24 0 26 0 64] #[1 0 162 0 2 0 162 0 3 0 162 0 6 0 162 0 18 1 177 0 24 0 162 0 64] #[1 0 93 0 4 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 15 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 1 181 0 40 0 149 0 42 0 153 0 43 0 157 0 44 0 161 0 47 0 165 0 48 0 169 0 49 0 173 0 57 0 177 0 63 0 181 0 68] #[0 0 170 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 64] #[0 0 158 0 2 0 3 0 6 0 18 0 24 0 26 0 64] #[1 0 162 0 2 0 162 0 3 0 162 0 6 0 162 0 18 1 177 0 24 0 162 0 64] #[1 1 185 0 1 0 61 0 20 0 65 0 29 0 209 0 57] #[1 1 189 0 2 1 193 0 3 0 93 0 4 1 197 0 5 1 201 0 6 1 205 0 7 1 209 0 8 1 213 0 10 0 101 0 12 0 105 0 13 0 109 0 15 1 217 0 20 0 121 0 21 0 125 0 22 0 129 0 23 1 221 0 24 1 225 0 26 0 133 0 30 1 229 0 68] #[1 0 93 0 4 0 97 0 7 0 189 0 9 0 101 0 12 0 105 0 13 0 109 0 15 0 113 0 16 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 1 233 0 36 0 141 0 38 0 145 0 40 0 149 0 42 0 153 0 43 0 157 0 44 0 161 0 47 0 165 0 48 0 169 0 49 0 173 0 57 0 177 0 63 0 22 0 64 0 181 0 68] #[0 1 237 0 10] #[0 1 241 0 10] #[1 0 93 0 4 1 245 0 5 1 249 0 6 1 253 0 7 0 101 0 12 0 105 0 13 0 109 0 15 2 1 0 17 2 5 0 20 0 121 0 21 0 125 0 22 0 129 0 23 2 9 0 24 2 13 0 25 2 17 0 26 2 21 0 29 0 133 0 30 2 25 0 32 2 29 0 62 2 33 0 68] #[1 2 37 0 18 2 41 0 21] #[0 0 174 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 64] #[0 0 146 0 18 0 64] #[0 0 178 0 18 0 64] #[0 0 182 0 1 0 14 0 18 0 19] #[1 0 37 0 1 0 6 0 4 0 6 0 7 0 6 0 12 0 6 0 13 0 41 0 14 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 18 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 6 0 29 0 6 0 30 0 45 0 37 2 45 0 66] #[1 0 14 0 1 0 14 0 20 0 14 0 29 2 49 0 35] #[0 0 186 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 64] #[1 0 61 0 20 0 65 0 29 2 53 0 57] #[0 0 190 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 64] #[1 0 93 0 4 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 15 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 2 57 0 40 0 149 0 42 0 153 0 43 0 157 0 44 0 161 0 47 0 165 0 48 0 169 0 49 0 173 0 57 0 177 0 63 0 181 0 68] #[0 0 194 0 2 0 18 0 64] #[1 1 37 0 20 1 21 0 24 1 25 0 26 2 61 0 50 2 65 0 51 2 69 0 52 2 73 0 53] #[1 0 198 0 2 0 198 0 3 0 198 0 6 0 198 0 18 0 198 0 24 1 25 0 26 1 29 0 52 0 198 0 64] #[1 0 198 0 2 0 198 0 3 0 198 0 6 0 198 0 18 1 37 0 20 0 198 0 24 1 25 0 26 1 41 0 51 1 45 0 52 0 198 0 64] #[0 0 202 0 2 0 3 0 6 0 18 0 24 0 64] #[0 0 86 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 64] #[1 0 198 0 2 0 198 0 3 0 198 0 6 0 198 0 18 1 37 0 20 0 198 0 24 1 25 0 26 1 57 0 51 1 61 0 52 0 198 0 64] #[1 0 206 0 2 0 206 0 3 0 206 0 6 0 206 0 18 1 37 0 20 0 206 0 24 0 206 0 26 1 41 0 51 0 206 0 64] #[0 0 210 0 2 0 3 0 6 0 18 0 24 0 26 0 64] #[1 0 206 0 2 0 206 0 3 0 206 0 6 0 206 0 18 1 37 0 20 0 206 0 24 0 206 0 26 1 57 0 51 0 206 0 64] #[1 0 93 0 4 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 15 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 149 0 42 1 145 0 48 1 149 0 49 2 77 0 54 1 157 0 57 1 161 0 63 0 181 0 68] #[0 0 214 0 2 0 6 0 18 0 64] #[1 0 10 0 4 0 10 0 7 0 10 0 9 0 10 0 12 0 10 0 13 0 10 0 15 0 10 0 16 0 10 0 17 0 10 0 20 0 10 0 21 0 10 0 22 0 10 0 23 0 10 0 29 0 10 0 30 2 81 0 46 0 10 0 64] #[0 0 218 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30] #[0 0 218 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30] #[0 0 218 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30] #[0 0 218 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30] #[0 0 218 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30] #[0 0 222 0 1 0 4 0 7 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 29 0 30 0 64] #[0 0 218 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30] #[0 0 218 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30] #[0 0 218 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30] #[0 0 218 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30] #[0 0 218 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 20 0 21 0 22 0 23 0 24 0 26 0 30] #[0 0 226 0 64] #[0 0 230 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[0 0 230 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[1 2 85 0 20 2 89 0 29] #[0 0 234 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[1 0 130 0 4 0 130 0 5 0 130 0 6 0 130 0 7 0 130 0 12 0 130 0 13 0 130 0 15 0 130 0 17 0 130 0 20 0 130 0 21 0 130 0 22 0 130 0 23 0 130 0 24 0 130 0 25 0 130 0 26 0 130 0 29 0 130 0 30 0 130 0 32 2 93 0 61] #[1 0 134 0 18 0 134 0 21 2 97 0 60] #[1 0 238 0 4 0 238 0 5 0 238 0 6 0 238 0 7 2 101 0 11 0 238 0 12 0 238 0 13 0 238 0 15 0 238 0 17 0 238 0 20 0 238 0 21 0 238 0 22 0 238 0 23 0 238 0 24 0 238 0 25 0 238 0 26 0 238 0 29 0 238 0 30 0 238 0 32] #[0 0 238 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32] #[0 0 238 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32] #[0 0 238 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32] #[0 0 242 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32] #[0 0 238 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32] #[0 0 246 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32] #[0 0 250 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32] #[0 0 234 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 15 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64] #[0 0 254 0 18 0 21] #[0 2 105 0 18] #[1 2 109 0 1 0 61 0 20 0 65 0 29 0 209 0 57] #[0 1 2 0 1 0 14 0 18 0 19] #[1 1 101 0 2 0 78 0 18 2 113 0 39 0 78 0 64] #[0 1 6 0 2 0 3 0 6 0 18 0 64] #[0 1 10 0 2 0 3 0 6 0 18 0 64] #[0 1 10 0 2 0 3 0 6 0 18 0 64] #[1 1 10 0 2 1 10 0 3 1 10 0 6 1 10 0 18 1 177 0 24 1 10 0 64] #[0 1 14 0 2 0 3 0 6 0 18 0 24 0 64] #[1 0 93 0 4 0 97 0 7 0 189 0 9 0 101 0 12 0 105 0 13 0 109 0 15 0 113 0 16 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 2 117 0 36 0 141 0 38 0 145 0 40 0 149 0 42 0 153 0 43 0 157 0 44 0 161 0 47 0 165 0 48 0 169 0 49 0 173 0 57 0 177 0 63 0 22 0 64 0 181 0 68] #[0 2 121 0 10] #[0 2 125 0 10] #[1 0 93 0 4 1 245 0 5 2 129 0 6 1 253 0 7 0 101 0 12 0 105 0 13 0 109 0 15 2 1 0 17 2 5 0 20 0 121 0 21 0 125 0 22 0 129 0 23 2 9 0 24 2 13 0 25 2 17 0 26 2 21 0 29 0 133 0 30 2 25 0 32 2 29 0 62 2 33 0 68] #[1 2 133 0 18 2 41 0 21] #[0 1 18 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32] #[0 1 22 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 64] #[1 0 93 0 4 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 15 0 113 0 16 0 117 0 17 0 22 0 18 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 2 137 0 36 0 141 0 38 0 145 0 40 0 149 0 42 0 153 0 43 0 157 0 44 0 161 0 47 0 165 0 48 0 169 0 49 0 173 0 57 0 177 0 63 0 181 0 68] #[0 1 26 0 18 0 64] #[0 1 30 0 64] #[0 1 34 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32] #[0 1 34 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32] #[0 1 38 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32] #[0 1 38 0 4 0 5 0 6 0 7 0 12 0 13 0 15 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32] #[0 2 141 0 18] #[0 1 42 0 2 0 3 0 6 0 18 0 20 0 24 0 26 0 64]	).</body></methods><methods><class-id>Refactory.SmaCC.StParser</class-id> <category>private</category><body package="SmaCC Smalltalk Parser" selector="actionForCurrentToken">actionForCurrentToken	| ids action |	ids := currentToken ids.	1		to: ids size		do:			[:i | 			action := self actionFor: (ids at: i).			(action bitAnd: self actionMask) = self errorAction ifFalse: [^action].			(ids at: i) = scanner negativeNumberId				ifTrue:					[currentToken := SmaCCToken						value: '-'						start: currentToken startPosition						ids: (Array with: scanner binarySymbolId).					self position: currentToken stopPosition - 1.					^self actionForCurrentToken]].	^self errorAction</body><body package="SmaCC Smalltalk Parser" selector="createMessageNodeFrom:">createMessageNodeFrom: aCollection 	^RBMessageNode 		receiver: aCollection first		selector: (aCollection at: 2) first contents asSymbol		arguments: (aCollection at: 2) last</body></methods><methods><class-id>Refactory.SmaCC.StParser class</class-id> <category>generated</category><body package="SmaCC Smalltalk Parser" selector="definitionComment">definitionComment"&lt;name&gt;	: (&lt;isLetter&gt; | \_) (&lt;isLetter&gt; | [\d\_]) *	;&lt;number&gt;	: \d	;&lt;negativeNumber&gt;	: \- &lt;number&gt;	;&lt;string&gt;	: \'  [^\']* \' (\' [^\']* \')*	;&lt;keyword&gt;	: &lt;name&gt; \:	;&lt;multikeyword&gt;	: &lt;name&gt; \: (&lt;name&gt; \: )+	;&lt;binarySymbol&gt;	: [\~\-\!\@\%\&amp;\*\+\=\\\|\?\/\&gt;\&lt;\,] [\~\!\@\%\&amp;\*\+\=\\\|\?\/\&gt;\&lt;\,]?	;&lt;whitespace&gt;	: &lt;isSeparator&gt;+	;&lt;comment&gt;	: \"" [^\""]* \""	;&lt;dottedName&gt;	: &lt;name&gt; (\. &lt;name&gt;)+	;&lt;character&gt;	: \$ .	;&lt;variableAssignment&gt;	: &lt;name&gt; \: \=	;&lt;anyChar&gt;	:  .	; # For VW literal arrays that handle #(;) -&gt; #(#';')%id &lt;number&gt; &lt;negativeNumber&gt; &lt;name&gt; &lt;binarySymbol&gt;;%start SequenceNode ;Method	: &lt;name&gt; MethodSequenceNode 			{(RBMethodNode 				selector: '1' value asSymbol 				arguments: #() 				body: '2' last) 					""tags: '2' first; ""					yourself}	| BinaryMethodName MethodSequenceNode 			{(RBMethodNode 				selector: '1' first 				arguments: '1' last 				body: '2' last) 					""tags: '2' first; ""					yourself}	| KeywordMethodName MethodSequenceNode 			{(RBMethodNode 				selector: '1' first contents asSymbol 				arguments: '1' last 				body: '2' last) 					""tags: '2' first; ""					yourself}	;BinaryMethodName	: &lt;binarySymbol&gt; Variable 			{Array with: '1' value asSymbol with: (Array with: '2')}	;KeywordMethodName	: &lt;keyword&gt; Variable 			{| stream | 			stream := WriteStream on: (String new: 30). 			stream nextPutAll: '1' value. 			Array with: stream with: (OrderedCollection with: '2')}	| KeywordMethodName &lt;keyword&gt; Variable 			{'1' first nextPutAll: '2' value. 			'1' last add: '3'. 			'1'}	;Primitives	: 		{OrderedCollection new}	| Primitives ""&lt;"" PrimitiveMessageSend ""&gt;"" 			{'1' 				add: ('2' startPosition to: '4' startPosition); 				yourself}	;PrimitiveMessageSend	:	| PrimitiveMessageSend &lt;keyword&gt; 			{nil}	| PrimitiveMessageSend Literal 			{nil}	| PrimitiveMessageSend ""("" 			{nil}	| PrimitiveMessageSend "")"" 			{nil}	| PrimitiveMessageSend ""{"" 			{nil}	| PrimitiveMessageSend ""}"" 			{nil}	| PrimitiveMessageSend "";"" 			{nil}	| PrimitiveMessageSend ""."" 			{nil}	| PrimitiveMessageSend &lt;name&gt; 			{nil}	| PrimitiveMessageSend &lt;binarySymbol&gt; 			{nil}	;MethodSequenceNode	: Primitives ""|"" TemporaryVariables ""|"" Primitives Statements 			{Array with: ('1' addAll: '5'; yourself) with: (RBSequenceNode temporaries: '3' statements: '6')}	| Primitives ""||"" Primitives Statements 			{Array with: ('1' addAll: '3'; yourself) with: (RBSequenceNode temporaries: #() statements: '4')}	| Primitives Statements 			{Array with: '1' with: (RBSequenceNode temporaries: #() statements: '2')}	;SequenceNode	: Temporaries Statements 			{RBSequenceNode temporaries: '1' statements: '2'}	;Temporaries	: 		{#()}	| ""||""			{#()}	| ""|"" TemporaryVariables ""|"" 			{'2'}	;TemporaryVariables	: 		{OrderedCollection new}	| TemporaryVariables Variable 			{'1' 				add: '2'; 				yourself}	;Statements	: 		{OrderedCollection new}	| StatementList OptionalPeriod			{#liftFirstValue:}	| StatementList ""."" ""^"" Expression OptionalPeriod			{'1' 				add: (RBReturnNode value: '4'); 				yourself}	| ""^"" Expression OptionalPeriod			{OrderedCollection with: (RBReturnNode value: '2')}	;OptionalPeriod	: 	| "".""	;StatementList	: Expression	| StatementList ""."" Expression 			{'1' 				add: '3'; 				yourself}	;Block	: ""["" BlockArgs ""|"" SequenceNode ""]"" 			{RBBlockNode arguments: '2' body: '4'}	| ""["" SequenceNode ""]"" 			{RBBlockNode body: '2'}	| ""["" BlockArgs ""]"" 			{RBBlockNode arguments: '2' body: (RBSequenceNode statements: #())}	| ""["" BlockArgs ""||"" TemporaryVariables ""|"" Statements ""]"" 			{RBBlockNode arguments: '2' body: (RBSequenceNode temporaries: '4' statements: '6')}	;BlockArgs	: "":"" Variable 			{OrderedCollection with: '2'}	| BlockArgs "":"" Variable 			{'1' 				add: '3'; 				yourself}	;Expression	: Variable "":="" Expression 			{RBAssignmentNode variable: '1' value: '3'}	| Cascade 			{#liftFirstValue:}	;Cascade	: MessageSend CascadeList 			{| messages |			'2' isEmpty ifTrue: [^'1'].			messages := OrderedCollection new: '2' size + 1.			messages add: '1'.			'2' do: [:each | messages add: (RBMessageNode receiver: '1' receiver selector: each first contents asSymbol arguments: each last)].			RBCascadeNode messages: messages}	| Primary 			{#liftFirstValue:}	;MessageSend	: KeywordMessageSend 			{#liftFirstValue:}	| BinaryMessageSend 			{#liftFirstValue:}	| UnaryMessageSend 			{#liftFirstValue:}	;CascadeList	: 		{OrderedCollection new}	| CascadeList "";"" SimpleMessage 			{'1' 				add: '3'; 				yourself}	;SimpleMessage	: UnaryMessage 			{#liftFirstValue:}	| BinaryMessage 			{#liftFirstValue:}	| KeywordMessage 			{#liftFirstValue:}	;KeywordMessageSend	: BinaryMessageSend KeywordMessage 			{#createMessageNodeFrom:}	| UnaryMessageSend KeywordMessage 			{#createMessageNodeFrom:}	| Primary KeywordMessage 			{#createMessageNodeFrom:}	;KeywordMessage	: &lt;keyword&gt; KeywordArgument 			{| stream | 			stream := WriteStream on: (String new: 30). 			stream nextPutAll: '1' value. 			Array with: stream with: (OrderedCollection with: '2')}	| KeywordMessage &lt;keyword&gt; KeywordArgument 			{'1' first nextPutAll: '2' value. 			'1' last add: '3'. 			'1'}	;KeywordArgument	: BinaryMessageSend 			{#liftFirstValue:}	| UnaryMessageSend 			{#liftFirstValue:}	| Primary 			{#liftFirstValue:}	;BinaryMessageSend	: BinaryMessageSend BinaryMessage 			{#createMessageNodeFrom:}	| UnaryMessageSend BinaryMessage 			{#createMessageNodeFrom:}	| Primary BinaryMessage 			{#createMessageNodeFrom:} 	;BinaryMessage 	: &lt;binarySymbol&gt; BinaryArgument 			{Array with: (ReadStream on: '1' value) with: (Array with: '2')}	;BinaryArgument	: UnaryMessageSend 			{#liftFirstValue:}	| Primary 			{#liftFirstValue:}	;UnaryMessageSend 	: UnaryMessageSend UnaryMessage 			{#createMessageNodeFrom:}	| Primary UnaryMessage 			{#createMessageNodeFrom:}	;UnaryMessage 	: &lt;name&gt; 			{Array with: (ReadStream on: '1' value) with: #()}	;Primary	: ""("" Expression "")"" 			{#liftSecondValue:}	| Literal 			{RBLiteralNode value: '1'}	| Variable 			{#liftFirstValue:}	| Block 			{#liftFirstValue:}	;Variable	: &lt;name&gt; 			{RBVariableNode named: '1' value}	| &lt;dottedName&gt; 			{RBVariableNode named: '1' value}	;Literal	: ""true"" 			{true}	| ""false"" 			{false}	| ""nil"" 			{nil}	| &lt;number&gt; 			{'1' value}	| &lt;negativeNumber&gt; 			{'1' value}	| &lt;character&gt; 			{'1' value at: 2}	| &lt;string&gt; 			{('1' value copyFrom: 2 to: '1' value size - 1) copyReplaceAll: '''''' with: ''''}	|  ""#"" &lt;string&gt; 			{(('2' value copyFrom: 2 to: '2' value size - 1) copyReplaceAll: '''''' with: '''') asSymbol}	| ""#"" &lt;name&gt; 			{'2' value asSymbol}	| ""#"" &lt;binarySymbol&gt; 			{'2' value asSymbol}	| ""#"" &lt;keyword&gt; 			{'2' value asSymbol}	| ""#"" &lt;multikeyword&gt; 			{'2' value asSymbol}	| ""#"" ""["" ByteArray ""]"" 			{'3' contents}	| ""#"" ""("" Array "")"" 			{'3' contents}	| ""#"" ""{"" &lt;name&gt; ""}"" 			{'3' value asQualifiedReference}	| ""#"" ""{"" &lt;dottedName&gt; ""}"" 			{'3' value asQualifiedReference}	;ByteArray	: 		{WriteStream on: ByteArray new}	| ByteArray &lt;number&gt; 			{'1' 				nextPut: '2' value; 				yourself}	;Array	: 		{WriteStream on: Array new}	| Array ArrayLiteral 			{'1' 				nextPut: '2'; 				yourself} 	| Array &lt;name&gt; "":="" 			{'2' stopPosition + 1 = '3' startPosition 				ifTrue: ['1' nextPut: ('2' value, ':') asSymbol] 				ifFalse: ['1' nextPut: '2' value asSymbol; nextPut: #':']. 			self position: '3' startPosition. 			currentToken := nil. 			'1'}	;ArrayLiteral	: Literal 			{#liftFirstValue:}	| &lt;name&gt; 			{'1' value asSymbol}	| &lt;binarySymbol&gt; 			{'1' value asSymbol}	| &lt;keyword&gt; 			{'1' value asSymbol}	| &lt;multikeyword&gt; 			{'1' value asSymbol}	| ""{"" &lt;name&gt; ""}"" 			{'2' value asQualifiedReference}	| ""{"" &lt;dottedName&gt; ""}"" 			{'2' value asQualifiedReference}	| ""("" Array "")"" 			{'2' contents}	| ""["" ByteArray ""]"" 			{'2' contents}	| &lt;anyChar&gt; 			{'1' value asSymbol}	| &lt;dottedName&gt; 			{'1' value}	;"</body><body package="SmaCC Smalltalk Parser" selector="startingStateForMethod">startingStateForMethod	^1</body><body package="SmaCC Smalltalk Parser" selector="startingStateForSequenceNode">startingStateForSequenceNode	^2</body></methods><methods><class-id>Refactory.SmaCC.StParser class</class-id> <category>private</category><body package="SmaCC Smalltalk Parser" selector="simplifyExpression:">simplifyExpression: aSequenceNode 	^(aSequenceNode statements size == 1 		and: [aSequenceNode temporaries isEmpty]) 			ifTrue: [aSequenceNode statements first]			ifFalse: [aSequenceNode]</body></methods><methods><class-id>Refactory.SmaCC.StParser class</class-id> <category>accessing</category><body package="SmaCC Smalltalk Parser" selector="parseExpression:">parseExpression: aString 	^self simplifyExpression: (self parse: aString				startingAt: self startingStateForSequenceNode)</body><body package="SmaCC Smalltalk Parser" selector="parseExpression:onError:">parseExpression: aString onError: aBlock 	^self simplifyExpression: (self 				parse: aString				startingAt: self startingStateForSequenceNode				onError: aBlock)</body><body package="SmaCC Smalltalk Parser" selector="parseMethod:">parseMethod: aString 	^self parse: aString startingAt: self startingStateForMethod</body><body package="SmaCC Smalltalk Parser" selector="parseMethod:onError:">parseMethod: aString onError: aBlock 	^self 		parse: aString		startingAt: self startingStateForMethod		onError: aBlock</body></methods><methods><class-id>Refactory.SmaCC.StParser class</class-id> <category>generated-accessing</category><body package="SmaCC Smalltalk Parser" selector="scannerClass">scannerClass	^StScanner</body></methods><methods><class-id>Refactory.SmaCC.StScanner</class-id> <category>generated</category><body package="SmaCC Smalltalk Parser" selector="binarySymbolId">binarySymbolId	^26</body><body package="SmaCC Smalltalk Parser" selector="emptySymbolTokenId">emptySymbolTokenId	^64</body><body package="SmaCC Smalltalk Parser" selector="errorTokenId">errorTokenId	^65</body><body package="SmaCC Smalltalk Parser" selector="nameId">nameId	^20</body><body package="SmaCC Smalltalk Parser" selector="negativeNumberId">negativeNumberId	^22</body><body package="SmaCC Smalltalk Parser" selector="numberId">numberId	^21</body><body package="SmaCC Smalltalk Parser" selector="scan1">scan1	[self step.	currentCharacter == $' ifTrue: [^self scan2]] repeat</body><body package="SmaCC Smalltalk Parser" selector="scan2">scan2	self recordMatch: #(23).	self step.	currentCharacter == $' ifTrue: [^self scan1].	^self reportLastMatch</body><body package="SmaCC Smalltalk Parser" selector="scan3">scan3	self step.	(currentCharacter isLetter or: [currentCharacter == $_])		ifTrue:			[[self recordMatch: #(29).			self step.			currentCharacter == $. ifTrue: [^self scan3].			currentCharacter isLetter or: [currentCharacter isAlphaNumeric or: [currentCharacter == $_]]] whileTrue].	^self reportLastMatch</body><body package="SmaCC Smalltalk Parser" selector="scan4">scan4	self recordMatch: #(24).	self step.	currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(31)].	(currentCharacter isLetter or: [currentCharacter == $_]) ifTrue: [^self scan5].	^self reportLastMatch</body><body package="SmaCC Smalltalk Parser" selector="scan5">scan5	[self step.	currentCharacter == $:		ifTrue:			[self recordMatch: #(25).			self step.			(currentCharacter isLetter or: [currentCharacter == $_]) ifTrue: [^self scan5].			^self reportLastMatch].	currentCharacter isLetter or: [currentCharacter isAlphaNumeric or: [currentCharacter == $_]]] whileTrue.	^self reportLastMatch</body><body package="SmaCC Smalltalk Parser" selector="scanForToken">scanForToken	self step.	currentCharacter == $"		ifTrue:			[self recordMatch: #(32).			self step.			currentCharacter == $" ifTrue: [^self recordAndReportMatch: #(28)].			true				ifTrue:					[[self step.					currentCharacter == $" ifTrue: [^self recordAndReportMatch: #(28)]] repeat].			^self reportLastMatch].	currentCharacter == $# ifTrue: [^self recordAndReportMatch: #(4 32)].	currentCharacter == $$		ifTrue:			[self recordMatch: #(32).			self step.			^self recordAndReportMatch: #(30)].	currentCharacter == $'		ifTrue:			[self recordMatch: #(32).			self step.			currentCharacter == $' ifTrue: [^self scan2].			^self scan1].	currentCharacter == $( ifTrue: [^self recordAndReportMatch: #(7 32)].	currentCharacter == $) ifTrue: [^self recordAndReportMatch: #(6 32)].	currentCharacter == $-		ifTrue:			[self recordMatch: #(26 32).			self step.			currentCharacter isDigit ifTrue: [^self recordAndReportMatch: #(22)].			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $,)								or: [currentCharacter == $/ or: [(currentCharacter between: $&lt; and: $@) or: ['\|~' includes: currentCharacter]]]]])				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $. ifTrue: [^self recordAndReportMatch: #(2 32)].	currentCharacter == $:		ifTrue:			[self recordMatch: #(19 32).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(11)].			^self reportLastMatch].	currentCharacter == $; ifTrue: [^self recordAndReportMatch: #(3 32)].	currentCharacter == $&lt;		ifTrue:			[self recordMatch: #(9 26 32).			self step.			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $,)								or: [currentCharacter == $/ or: [(currentCharacter between: $&lt; and: $@) or: ['\|~' includes: currentCharacter]]]]])				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $&gt;		ifTrue:			[self recordMatch: #(8 26 32).			self step.			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $,)								or: [currentCharacter == $/ or: [(currentCharacter between: $&lt; and: $@) or: ['\|~' includes: currentCharacter]]]]])				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $[ ifTrue: [^self recordAndReportMatch: #(17 32)].	currentCharacter == $] ifTrue: [^self recordAndReportMatch: #(18 32)].	currentCharacter == $^ ifTrue: [^self recordAndReportMatch: #(16 32)].	currentCharacter == ${ ifTrue: [^self recordAndReportMatch: #(5 32)].	currentCharacter == $|		ifTrue:			[self recordMatch: #(1 26 32).			self step.			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $,)								or: [currentCharacter == $/ or: [(currentCharacter between: $&lt; and: $@) or: ['\|~' includes: currentCharacter]]]]])				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $} ifTrue: [^self recordAndReportMatch: #(10 32)].	currentCharacter isDigit ifTrue: [^self recordAndReportMatch: #(21 32)].	currentCharacter isSeparator		ifTrue:			[self recordMatch: #(27 32).			self step.			currentCharacter isSeparator				ifTrue:					[[self recordMatch: #(27).					self step.					currentCharacter isSeparator] whileTrue].			^self reportLastMatch].	(currentCharacter isLetter or: [currentCharacter == $_])		ifTrue:			[self recordMatch: #(20 32).			self step.			currentCharacter == $. ifTrue: [^self scan3].			currentCharacter == $: ifTrue: [^self scan4].			(currentCharacter isLetter or: [currentCharacter isAlphaNumeric or: [currentCharacter == $_]])				ifTrue:					[[self recordMatch: #(20).					self step.					currentCharacter == $. ifTrue: [^self scan3].					currentCharacter == $: ifTrue: [^self scan4].					currentCharacter isLetter or: [currentCharacter isAlphaNumeric or: [currentCharacter == $_]]] whileTrue].			^self reportLastMatch].	(currentCharacter == $!		or:			[(currentCharacter between: $% and: $&amp;)				or:					[(currentCharacter between: $* and: $,)						or: [('/=' includes: currentCharacter) or: [(currentCharacter between: $? and: $@) or: ['\~' includes: currentCharacter]]]]])		ifTrue:			[self recordMatch: #(26 32).			self step.			(currentCharacter == $!				or:					[(currentCharacter between: $% and: $&amp;)						or:							[(currentCharacter between: $* and: $,)								or: [currentCharacter == $/ or: [(currentCharacter between: $&lt; and: $@) or: ['\|~' includes: currentCharacter]]]]])				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	^self recordAndReportMatch: #(32)</body><body package="SmaCC Smalltalk Parser" selector="tokenActions">tokenActions	^#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil #number #negativeNumber nil nil nil nil #whitespace #comment nil nil #variableAssignment)</body></methods><methods><class-id>Refactory.SmaCC.StScanner</class-id> <category>scanning</category><body package="SmaCC Smalltalk Parser" selector="negativeNumber">negativeNumber	stream skip: -2.	^self scanNumber: self negativeNumberId</body><body package="SmaCC Smalltalk Parser" selector="number">number	stream skip: -1.	^self scanNumber: self numberId</body><body package="SmaCC Smalltalk Parser" selector="scanNumber:">scanNumber: id 	| number |	number := Number readFrom: stream.	outputStream reset.	matchActions := Array with: id.	^self createTokenFor: number</body><body package="SmaCC Smalltalk Parser" selector="variableAssignment">variableAssignment	| token |	outputStream skip: -2.	stream skip: -2.	matchActions := Array with: self nameId.	token := self createTokenFor: outputStream contents.	outputStream reset.	^token</body></methods><methods><class-id>Refactory.SmaCC.StScanner class</class-id> <category>generated-initialization</category><body package="SmaCC Smalltalk Parser" selector="initializeKeywordMap">initializeKeywordMap	keywordMap := Dictionary new.	#(#(26 '||' 14) #(20 'false' 13) #(20 'nil' 15) #(20 'true' 12))		do: [:each | (keywordMap at: each first ifAbsentPut: [Dictionary new]) at: (each at: 2) put: each last].	^keywordMap</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>SmaCCScanner</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream start matchActions matchEnd currentCharacter outputStream lastOutputStreamMatchPosition lastMatchWasEmpty returnMatchBlock state comments </inst-vars><class-inst-vars>keywordMap </class-inst-vars><imports></imports><category>SmaCC Runtime</category><attributes><package>SmaCC Runtime</package></attributes></class><class><name>SmaCCParser</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>scanner currentToken errorToken stateStack nodeStack </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Runtime</category><attributes><package>SmaCC Runtime</package></attributes></class></st-source>