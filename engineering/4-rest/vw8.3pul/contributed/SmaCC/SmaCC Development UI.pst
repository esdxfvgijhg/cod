<?xml version="1.0"?><st-source><!-- Name: SmaCC Development UINotice: Comment: This package is part of the Smalltalk Compiler-Compiler (SmaCC) written by John Brant and Don Roberts. It contains a GUI to create new parsers. It was seperated from the SmaCC Development package to make porting SmaCC easier. The GUI can be accessed through the Tools menu in VW, and through the Additional Tools item in Dolphin.If you want more information about SmaCC, visit http://www.refactoryworkers.com/SmaCC/. - - - - - - - - - - - - - - - - - - - - - - - - -Copyright (c) 2002-2010 John Brant, Don RobertsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.DbIdentifier: bear73DbTrace: 317930DevelopmentPrerequisites: #(#(#any 'SmaCC Development' '') #(#any 'Browser-BaseUI' ''))DisregardedPrerequisites: #(#(#name 'Base VisualWorks' #componentType #bundle))PackageName: SmaCC Development UIParcel: #('SmaCC Development UI')PrerequisiteParcels: #(#('SmaCC Development' '') #('Browser-BaseUI' ''))PrintStringCache: (2.0.3,brant)Version: 2.0.3Date: 9:56:24 AM January 28, 2011 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.8 (jan11.4) of January 28, 2011 on January 28, 2011 at 9:56:24 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SmaCCParserGenerator</name><environment>Refactory.SmaCC</environment><super>Refactory.Browser.BrowserApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tabList definitionHolder messageHolder symbolHolder itemSetHolder testHolder subcanvasBuilder type parserClassName codeGeneratorType scannerClassName allowUnicode savedDefinition </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Development UI</category><attributes><package>SmaCC Development UI</package></attributes></class><shared-variable><name>ShowPrecedenceConflicts</name><environment>Refactory.SmaCC.SmaCCParserGenerator</environment><private>false</private><constant>false</constant><category>variables</category><initializer>false</initializer><attributes><package>SmaCC Development UI</package></attributes></shared-variable><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator</class-id> <category>private</category><body package="SmaCC Development UI" selector="addMenuItems">addMenuItems	| classes menu |	classes := self codeGeneratorClasses.	classes size &gt; 1 ifFalse: [^self].	menu := (self menu menuItemLabeled: 'Options') submenu.	menu addLine.	classes		do:			[:each | 			| item |			item := MenuItem labeled: each typeName.			item				nameKey: each typeName;				indication: self language = each typeName;				indicationSelector: #language;				value: [self setCodeGenerator: each typeName].			menu addItem: item]</body><body package="SmaCC Development UI" selector="codeGeneratorClass">codeGeneratorClass	^SmaCCCodeGenerator withAllSubclasses 		detect: [:each | each typeName = codeGeneratorType]		ifNone: [SmaCCSmalltalkCodeGenerator new]</body><body package="SmaCC Development UI" selector="codeGeneratorClasses">codeGeneratorClasses	^SmaCCCodeGenerator withAllSubclasses select: [:each | each typeName notNil]</body><body package="SmaCC Development UI" selector="compile:">compile: aSymbol 	| grammar stream oldCharacterSize parserCompiler |	(self scannerClassName isEmpty or: [self parserClassName isEmpty]) 		ifTrue: [^self warn: 'Both classes are not specified'].	Cursor wait showWhile: 			[oldCharacterSize := SmaCCGrammar maximumCharacterValue.						[SmaCCGrammar 				maximumCharacterValue: (allowUnicode ifTrue: [2 ** 16 - 1] ifFalse: [255]).			self verifyParser ifFalse: [^self].			parserCompiler := self compiler.			parserCompiler				codeGenerator: self codeGeneratorClass new;				buildDefinition: self definitionHolder value;				scannerClass: self scannerClassName;				parserClass: self parserClassName.			grammar := parserCompiler grammar.			grammar type: aSymbol.			stream := WriteStream on: String new.						[parserCompiler createChanges.			parserCompiler codeGenerator compileChanges.			self symbolHolder value: parserCompiler symbolsComment.			self itemSetHolder value: parserCompiler itemSetsComment] 					on: SmaCCCompilationNotification					do: 						[:ex | 						(ShowPrecedenceConflicts or: [('*precedence*' match: ex messageText) not]) 							ifTrue: 								[stream									nextPutAll: '-------------------------';									cr;									nextPutAll: ex messageText;									cr;									cr;									nextPutAll: ex parameter;									cr].						ex pass].			self messageHolder value: stream contents.			self messageHolder value notEmpty 				ifTrue: [self tabList selection: 'Messages'].			self markAsUnmodified] 					ensure: [SmaCCGrammar maximumCharacterValue: oldCharacterSize]]</body><body package="SmaCC Development UI" selector="compiler">compiler	^SmaCCGrammarCompiler new</body><body package="SmaCC Development UI" selector="displayError:at:">displayError: aString at: position 	self textWidget ifNotNil: 			[:each | 			each takeKeyboardFocus.			each widget controller insertAndSelect: aString , ' -&gt;' at: position]</body><body package="SmaCC Development UI" selector="installSpec">installSpec	subcanvasBuilder := nil.	(builder componentAt: #subcanvas) widget client: self		spec: self selectedSpec</body><body package="SmaCC Development UI" selector="isModified">isModified	^savedDefinition ~= self definitionHolder value</body><body package="SmaCC Development UI" selector="isValidName:">isValidName: aString	| substrings |	substrings := aString tokensBasedOn: $..	^substrings allSatisfy: [:each | each first isUppercase and: [RBScanner isVariable: each]]</body><body package="SmaCC Development UI" selector="language">language	^codeGeneratorType</body><body package="SmaCC Development UI" selector="menu">menu	^builder notNil ifTrue: [builder menuAt: #mainMenu] ifFalse: [nil]</body><body package="SmaCC Development UI" selector="parseAndEvaluate:">parseAndEvaluate: aBlock 	| class |	class := self parserClass.	class isNil ifTrue: [^self warn: 'No parser defined'].	aBlock value: (class parse: self testHolder value				onError: 					[:aString :position | 					self tabList selection: 'Test'.					self displayError: aString at: position.					^self])</body><body package="SmaCC Development UI" selector="parserClass">parserClass	self parserClassName isEmpty ifTrue: [^nil].	^self parserClassName asQualifiedReference value</body><body package="SmaCC Development UI" selector="promptToSaveChanges">promptToSaveChanges	^(self confirm: 'The definition has been modified. Do you wish to retain your changes?') not</body><body package="SmaCC Development UI" selector="removeCommentedPartOf:">removeCommentedPartOf: aString 	| inStream outStream |	inStream := ReadStream on: aString.	outStream := WriteStream with: String new.	inStream upTo: $".	[inStream atEnd] whileFalse: 			[(inStream peekFor: $") ifTrue: [outStream nextPut: $"].			outStream nextPutAll: (inStream upTo: $")].	^outStream contents</body><body package="SmaCC Development UI" selector="selectedSpec">selectedSpec	| name |	name := self tabList selection copyWithout: $ .	name at: 1 put: name first asLowercase.	^(name , 'WindowSpec') asSymbol</body><body package="SmaCC Development UI" selector="textController">textController	^(subcanvasBuilder componentAt: #text) widget controller</body><body package="SmaCC Development UI" selector="textWidget">textWidget	^subcanvasBuilder componentAt: #text</body><body package="SmaCC Development UI" selector="updateDefinitionFor:">updateDefinitionFor: parserClass 	| scannerClass |	scannerClass := [parserClass scannerClass] on: Error				do: [:ex | ex return: nil].	scannerClass notNil ifTrue: [self scannerClassName: scannerClass fullName].	(parserClass class includesSelector: #definitionComment) 		ifTrue: 			[self definitionHolder value: (self 						removeCommentedPartOf: (parserClass class sourceCodeAt: #definitionComment))]		ifFalse: 			[| source |			source := ''.			(parserClass class includesSelector: #parserDefinitionComment) 				ifTrue: 					[source := self removeCommentedPartOf: (parserClass class 										sourceCodeAt: #parserDefinitionComment)].			(scannerClass notNil 				and: [scannerClass class includesSelector: #scannerDefinitionComment]) 					ifTrue: 						[source := (self removeCommentedPartOf: (scannerClass class 											sourceCodeAt: #scannerDefinitionComment)) 									, '\' withCRs , source].			self definitionHolder value: source]</body><body package="SmaCC Development UI" selector="verifyParser">verifyParser	^	[(SmaCCGrammarCompiler new)		codeGenerator: self codeGeneratorClass new;		buildDefinition: self definitionHolder value.	true] 			on: SmaCCParserError			do: 				[:ex | 				self displayError: ex description at: ex parameter position.				ex return: false]</body></methods><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator</class-id> <category>actions</category><body package="SmaCC Development UI" selector="compile">compile	^self compile: type</body><body package="SmaCC Development UI" selector="copyText">copyText	self textController copySelection</body><body package="SmaCC Development UI" selector="cutText">cutText	self textController cut</body><body package="SmaCC Development UI" selector="exit">exit	self closeRequest</body><body package="SmaCC Development UI" selector="find">find	self textController find</body><body package="SmaCC Development UI" selector="findParserClass">findParserClass	| class |	self isModified ifTrue: [self promptToSaveChanges ifFalse: [^self]].	class := self choose: 'What class do you want to use?'				from: (SmaCCParser allSubclasses 						asSortedCollection: [:a :b | a name &lt; b name]).	class isNil ifTrue: [^self].	self parserClassName: class fullName.	self updateDefinitionFor: class.	self markAsUnmodified</body><body package="SmaCC Development UI" selector="markAsUnmodified">markAsUnmodified	savedDefinition := self definitionHolder value</body><body package="SmaCC Development UI" selector="parse">parse	self parseAndEvaluate: [:each | self warn: 'Parses without errors']</body><body package="SmaCC Development UI" selector="parseAndInspect">parseAndInspect	self parseAndEvaluate: [:each | each inspect]</body><body package="SmaCC Development UI" selector="pasteText">pasteText	self textController paste</body><body package="SmaCC Development UI" selector="replace">replace	self textController replace</body><body package="SmaCC Development UI" selector="setCodeGenerator:">setCodeGenerator: aSymbol	codeGeneratorType := aSymbol</body><body package="SmaCC Development UI" selector="setLALR1">setLALR1	type := #LALR1</body><body package="SmaCC Development UI" selector="setLR1">setLR1	type := #LR1</body><body package="SmaCC Development UI" selector="setParserClass">setParserClass	| name |	name := self request: 'Enter parser class name:'				initialAnswer: self parserClassName.	name isEmpty ifTrue: [^self].	(self isValidName: name) ifFalse: [^self warn: 'Invalid Class Name'].	self parserClassName: name asSymbol</body><body package="SmaCC Development UI" selector="setScannerClass">setScannerClass	| name |	name := self request: 'Enter scanner class name:'				initialAnswer: self scannerClassName.	name isEmpty ifTrue: [^self].	(self isValidName: name) ifFalse: [^self warn: 'Invalid Class Name'].	self scannerClassName: name asSymbol</body><body package="SmaCC Development UI" selector="type">type	^type</body><body package="SmaCC Development UI" selector="unicodeState">unicodeState	^allowUnicode printString asSymbol</body><body package="SmaCC Development UI" selector="useUnicode">useUnicode	allowUnicode := allowUnicode not</body></methods><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator</class-id> <category>aspects</category><body package="SmaCC Development UI" selector="definitionHolder">definitionHolder	definitionHolder isNil ifTrue: [definitionHolder := '' asValue].	^definitionHolder</body><body package="SmaCC Development UI" selector="itemSetHolder">itemSetHolder	itemSetHolder isNil ifTrue: [itemSetHolder := '' asValue].	^itemSetHolder</body><body package="SmaCC Development UI" selector="messageHolder">messageHolder	messageHolder isNil ifTrue: [messageHolder := '' asValue].	^messageHolder</body><body package="SmaCC Development UI" selector="symbolHolder">symbolHolder	symbolHolder isNil ifTrue: [symbolHolder := '' asValue].	^symbolHolder</body><body package="SmaCC Development UI" selector="tabList">tabList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^tabList isNil		ifTrue:			[tabList := SelectionInList new]		ifFalse:			[tabList]</body><body package="SmaCC Development UI" selector="testHolder">testHolder	testHolder isNil ifTrue: [testHolder := '' asValue].	^testHolder</body></methods><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator</class-id> <category>accessing</category><body package="SmaCC Development UI" selector="parserClassName">parserClassName	^parserClassName</body><body package="SmaCC Development UI" selector="parserClassName:">parserClassName: aString 	parserClassName := aString.	self menu ifNotNil: 			[:menu | 			(menu atNameKey: #parser) ifNotNil: 					[:mi | 					mi 						rawLabel: '&amp;Parser Class' , (parserClassName isEmpty 										ifTrue: ['...']										ifFalse: [' (' , parserClassName , ')...'])]]</body><body package="SmaCC Development UI" selector="scannerClassName">scannerClassName	^scannerClassName</body><body package="SmaCC Development UI" selector="scannerClassName:">scannerClassName: aString 	scannerClassName := aString.	self menu ifNotNil: 			[:menu | 			(menu atNameKey: #scanner) ifNotNil: 					[:mi | 					mi 						rawLabel: '&amp;Scanner Class' , (scannerClassName isEmpty 										ifTrue: ['...']										ifFalse: [' (' , scannerClassName , ')...'])]]</body></methods><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator</class-id> <category>interface opening</category><body package="SmaCC Development UI" selector="postBuildWith:">postBuildWith: aBuilder	| menu item |	builder == aBuilder ifFalse: [subcanvasBuilder := aBuilder].	(aBuilder componentAt: #text)		ifNotNil:			[:each | 			each widget controller continuousAccept: true.			self tabList selection = 'Test'				ifTrue:					[menu := each widget controller menuHolder value.					menu addLine.					item := MenuItem labeled: 'Evaluate'.					item value: #parse.					menu addItem: item.					item := MenuItem labeled: 'Inspect'.					item value: #parseAndInspect.					menu addItem: item]].	super postBuildWith: aBuilder</body><body package="SmaCC Development UI" selector="postOpenWith:">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self installSpec.	self tabList selectionHolder onChangeSend: #installSpec to: self.	self addMenuItems</body></methods><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator</class-id> <category>initialize-release</category><body package="SmaCC Development UI" selector="initialize">initialize	super initialize.	allowUnicode := false.	type := #LALR1.	self parserClassName: ''.	self scannerClassName: ''.	codeGeneratorType := #Smalltalk.	savedDefinition := ''</body></methods><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator</class-id> <category>events</category><body package="SmaCC Development UI" selector="requestForWindowClose">requestForWindowClose	^self isModified not or: [self promptToSaveChanges]</body></methods><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator class</class-id> <category>interface specs</category><body package="SmaCC Development UI" selector="definitionWindowSpec">definitionWindowSpec	^self textWindowSpec: #definitionHolder</body><body package="SmaCC Development UI" selector="itemSetsWindowSpec">itemSetsWindowSpec	^self textWindowSpec: #itemSetHolder</body><body package="SmaCC Development UI" selector="messagesWindowSpec">messagesWindowSpec	^self textWindowSpec: #messageHolder</body><body package="SmaCC Development UI" selector="symbolsWindowSpec">symbolsWindowSpec	^self textWindowSpec: #symbolHolder</body><body package="SmaCC Development UI" selector="testWindowSpec">testWindowSpec	^self textWindowSpec: #testHolder</body><body package="SmaCC Development UI" selector="textWindowSpec:">textWindowSpec: aSymbol 	^(OrderedCollection new)		addAll: #(#{UI.FullSpec} #window: #(#{UI.WindowSpec} #label: 'Unlabeled Canvas' #bounds: #(#{Graphics.Rectangle} 576 432 776 632)) #component:);		add: ((OrderedCollection new)					addAll: #(#{UI.SpecCollection} #collection:);					add: (Array 								with: (#(#{UI.TextEditorSpec} #layout: #(#{Graphics.LayoutFrame} 2 0 2 0 -2 1 -2 1) #name: #text #model: nil #tabRequiresControl: true #menu: #textMenu) 										copy replaceAll: nil with: aSymbol));					asArray);		asArray</body><body package="SmaCC Development UI" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'SmaCC' 			#bounds: #(#{Graphics.Rectangle} 720 450 1229 846 ) 			#flags: 4 			#menu: #mainMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #subcanvas 					#model: #tabList 					#labels: #('Definition' 'Messages' 'Symbols' 'Item Sets' 'Test' ) ) ) ) )</body></methods><methods><class-id>Refactory.SmaCC.SmaCCParserGenerator class</class-id> <category>resources</category><body package="SmaCC Development UI" selector="mainMenu">mainMenu	"Tools.MenuEditor new openOnClass: self andSelector: #mainMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;File' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Open' 							#value: #findParserClass 							#shortcutKeyCharacter: $o 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Save' 							#value: #compile 							#shortcutKeyCharacter: $s 							#shortcutModifiers: 3 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Close' 							#value: #exit ) ) #(2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Edit' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Find...' 							#value: #find 							#shortcutKeyCharacter: $f 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Replace...' 							#value: #replace 							#shortcutKeyCharacter: $h 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: 'Cu&amp;t' 							#value: #cutText 							#shortcutKeyCharacter: $x 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Copy' 							#value: #copyText 							#shortcutKeyCharacter: $c 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Paste' 							#value: #pasteText 							#shortcutKeyCharacter: $v 							#shortcutModifiers: 2 ) ) #(2 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Options' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Scanner Class...' 							#nameKey: #scanner 							#value: #setScannerClass ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Parser Class...' 							#nameKey: #parser 							#value: #setParserClass ) 						#(#{UI.MenuItem} 							#rawLabel: 'Allow &amp;Unicode Characters' 							#nameKey: #true 							#value: #useUnicode 							#indication: false 							#indicationSelector: #unicodeState ) 						#(#{UI.MenuItem} 							#rawLabel: 'L&amp;ALR(1)' 							#nameKey: #LALR1 							#value: #setLALR1 							#indication: true 							#indicationSelector: #type ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;LR(1)' 							#nameKey: #LR1 							#value: #setLR1 							#indication: false 							#indicationSelector: #type ) ) #(2 1 2 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body><body package="SmaCC Development UI" selector="textMenu">textMenu	"Tools.MenuEditor new openOnClass: self andSelector: #textMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Cut' 				#value: #cut ) 			#(#{UI.MenuItem} 				#rawLabel: 'Copy' 				#value: #copySelection ) 			#(#{UI.MenuItem} 				#rawLabel: 'Paste' 				#value: #paste ) 			#(#{UI.MenuItem} 				#rawLabel: 'Find' 				#value: #find ) 			#(#{UI.MenuItem} 				#rawLabel: 'Replace' 				#value: #replace ) ) #(3 2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="SmaCC Development UI" selector="openSmaCC">openSmaCC	&lt;menuItem: 'SmaCC Parser Generator'		nameKey: nil		menu: #(#menuBar #tools)		position: 30.00&gt;	Refactory.SmaCC.SmaCCParserGenerator open</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>BrowserApplicationModel</name><environment>Refactory.Browser</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BaseUI</package></attributes></class></st-source>