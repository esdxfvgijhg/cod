<?xml version="1.0"?><st-source><!-- Name: SmaCC Rewrite Engine TestsNotice: Comment: This package is part of the Smalltalk Compiler-Compiler (SmaCC) written by John Brant and Don Roberts. It contains some tests for the SmaCC Rewrite Engine.If you want more information about SmaCC, visit http://www.refactoryworkers.com/SmaCC/. - - - - - - - - - - - - - - - - - - - - - - - - -Copyright (c) 2002-2010 John Brant, Don RobertsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.DbIdentifier: bear73DbTrace: 317936DevelopmentPrerequisites: #(#(#any 'SmaCC Rewrite Engine' '') #(#any 'SmaCC GLR Runtime' '') #(#any 'SUnitToo' ''))DisregardedPrerequisites: #(#(#name 'Base VisualWorks' #componentType #bundle))PackageName: SmaCC Rewrite Engine TestsParcel: #('SmaCC Rewrite Engine Tests')PrerequisiteParcels: #(#('SmaCC Rewrite Engine' '') #('SmaCC GLR Runtime' '') #('SUnitToo' ''))PrintStringCache: (2.0.3,brant)Version: 2.0.3Date: 9:56:25 AM January 28, 2011 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.8 (jan11.4) of January 28, 2011 on January 28, 2011 at 9:56:25 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SmaCCRewriteTest</name><environment>Refactory.SmaCC</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Rewrite Engine Tests</category><attributes><package>SmaCC Rewrite Engine Tests</package></attributes></class><class><name>SmaCCRewriteTestScanner</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCScanner</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Rewrite Engine Tests</category><attributes><package>SmaCC Rewrite Engine Tests</package></attributes></class><class><name>SmaCCRewriteTestExpressionNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCParseNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>leftParens rightParens </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Rewrite Engine Tests</package></attributes></class><class><name>SmaCCRewriteTestBinaryExpressionNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCRewriteTestExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>left operator right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Rewrite Engine Tests</package></attributes></class><class><name>SmaCCRewriteTestExpressionNodeVisitor</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCParseNodeVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Rewrite Engine Tests</package></attributes></class><class><name>SmaCCRewriteTestParser</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCGLRParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Rewrite Engine Tests</package></attributes></class><class><name>SmaCCRewriteTestNumberNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCRewriteTestExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>number </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Rewrite Engine Tests</package></attributes></class><methods><class-id>Refactory.SmaCC.SmaCCRewriteTest</class-id> <category>private</category><body package="SmaCC Rewrite Engine Tests" selector="compareRewrite:isEqualTo:using:">compareRewrite: sourceString isEqualTo: resultString using: aSmaCCRewriteEngine	| tree rewriteResult |	tree := self parserClass parse: sourceString.	rewriteResult := aSmaCCRewriteEngine rewriteTree: tree.	self assert: rewriteResult = resultString</body><body package="SmaCC Rewrite Engine Tests" selector="lispRewriter">lispRewriter	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'Parser: SmaCCRewriteTestParser					&gt;&gt;&gt;`a{testBlock: [:node | 									| myParent grandParent | 									myParent := node parent. 									grandParent := myParent parent.									myParent class = grandParent class and: [myParent operator = grandParent operator]]}`								`op{beToken;testBlock: [:token | token value ~= ''^'']}` `b`&lt;&lt;&lt;					-&gt;					&gt;&gt;&gt;`a` `b`&lt;&lt;&lt;					&gt;&gt;&gt;`a`^`b`&lt;&lt;&lt;					-&gt;					&gt;&gt;&gt;(expt `a` `b`)&lt;&lt;&lt;					&gt;&gt;&gt;`a` `op{beToken}` `b`&lt;&lt;&lt;					-&gt;					&gt;&gt;&gt;(`op` `a` `b`)&lt;&lt;&lt;').	^rewriter</body><body package="SmaCC Rewrite Engine Tests" selector="parserClass">parserClass	^SmaCCRewriteTestParser</body><body package="SmaCC Rewrite Engine Tests" selector="postfixRewriter">postfixRewriter	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'Parser: SmaCCRewriteTestParser					&gt;&gt;&gt;`a` `op{beToken}` `b`&lt;&lt;&lt;					-&gt;					&gt;&gt;&gt;`a` `b` `op`&lt;&lt;&lt;').	^rewriter</body></methods><methods><class-id>Refactory.SmaCC.SmaCCRewriteTest</class-id> <category>tests</category><body package="SmaCC Rewrite Engine Tests" selector="testAddParens">testAddParens	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'Parser: SmaCCRewriteTestParser					&gt;&gt;&gt;`a` `op{beToken}` `b`&lt;&lt;&lt;					-&gt;					&gt;&gt;&gt;`(a)` `op` `(b)`&lt;&lt;&lt;').	self		compareRewrite: '1+(1+1)'		isEqualTo: '(1) + ((1) + (1))'		using: rewriter</body><body package="SmaCC Rewrite Engine Tests" selector="testCodeExpressionToRemoveParens">testCodeExpressionToRemoveParens	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'Parser: SmaCCRewriteTestParser					&gt;&gt;&gt;`a{testBlock: [:node | node leftParens notEmpty]}`&lt;&lt;&lt;					-&gt;					&gt;&gt;&gt;``match leftParens do: [:each | self delete: each].							match rightParens do: [:each | self delete: each].							match nodesDo: [:each | self rewrite: each]``&lt;&lt;&lt;').	self		compareRewrite: '(1)+ ( 1 +(1))'		isEqualTo: '1+  1 +1'		using: rewriter</body><body package="SmaCC Rewrite Engine Tests" selector="testCodeToRemoveParens">testCodeToRemoveParens	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'SmaCCRewriteTestExpressionNode					-&gt;					[match leftParens do: [:each | self delete: each].					self processChildren.					match rightParens do: [:each | self delete: each]]').	self		compareRewrite: '(1)+ ( 1 +(1))'		isEqualTo: '1+  1 +1'		using: rewriter</body><body package="SmaCC Rewrite Engine Tests" selector="testExpressions">testExpressions	| stream coreExpression |	stream := WriteStream on: String new.	(1 to: 25) do: [:i | stream nextPutAll: '1 +'] separatedBy: [stream space].	coreExpression := stream contents.	self		compareRewrite: coreExpression , ' 1'		isEqualTo: '1 ' , coreExpression		using: self postfixRewriter</body><body package="SmaCC Rewrite Engine Tests" selector="testLispExpressions">testLispExpressions	self		compareRewrite: '1+2*3^4+5'		isEqualTo: '(+ 1 (* 2 (expt 3 4)) 5)'		using: self lispRewriter</body><body package="SmaCC Rewrite Engine Tests" selector="testMultipleInsertAfters">testMultipleInsertAfters	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'SmaCCRewriteTestBinaryExpressionNode					-&gt;					[match parent notNil 						ifTrue:							[self insert: ''()'' after: match.							self insert: ''[]'' after: match].					self continue]').	self		compareRewrite: '1+1+1'		isEqualTo: '1+1()[]+1'		using: rewriter</body><body package="SmaCC Rewrite Engine Tests" selector="testNoChanges">testNoChanges	self		compareRewrite: '2'		isEqualTo: '2'		using: self postfixRewriter</body><body package="SmaCC Rewrite Engine Tests" selector="testOneExpression">testOneExpression	self		compareRewrite: '2+3'		isEqualTo: '2 3 +'		using: self postfixRewriter</body><body package="SmaCC Rewrite Engine Tests" selector="testTwoExpressions">testTwoExpressions	self		compareRewrite: '1+2*3'		isEqualTo: '1 2 3 * +'		using: self postfixRewriter</body><body package="SmaCC Rewrite Engine Tests" selector="testTypeAddParens">testTypeAddParens	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'Parser: SmaCCRewriteTestParser					SmaCCRewriteTestBinaryExpressionNode					-&gt;					&gt;&gt;&gt;`(left)` `operator` `(right)`&lt;&lt;&lt;').	self		compareRewrite: '1+(1+1)'		isEqualTo: '(1) + ((1) + (1))'		using: rewriter</body><body package="SmaCC Rewrite Engine Tests" selector="testWhitespace">testWhitespace	self		compareRewrite:			'1+	2	*3'		isEqualTo:			'1 	2	 3 * +'		using: self whitespacePostfixRewriter</body><body package="SmaCC Rewrite Engine Tests" selector="testWithParens">testWithParens	self		compareRewrite: '1+(2+3)'		isEqualTo: '1 2 3 + +'		using: self postfixRewriter</body><body package="SmaCC Rewrite Engine Tests" selector="whitespacePostfixRewriter">whitespacePostfixRewriter	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'Parser: SmaCCRewriteTestParser					&gt;&gt;&gt;`a` `op{beToken}` `b`&lt;&lt;&lt;					-&gt;					&gt;&gt;&gt;`\a\` `\b\` `op`&lt;&lt;&lt;').	^rewriter</body></methods><methods><class-id>Refactory.SmaCC.SmaCCRewriteTestScanner</class-id> <category>generated</category><body package="SmaCC Rewrite Engine Tests" selector="emptySymbolTokenId">emptySymbolTokenId	^13</body><body package="SmaCC Rewrite Engine Tests" selector="errorTokenId">errorTokenId	^14</body><body package="SmaCC Rewrite Engine Tests" selector="scanForToken">scanForToken	self step.	currentCharacter == $( ifTrue: [^self recordAndReportMatch: #(5)].	currentCharacter == $) ifTrue: [^self recordAndReportMatch: #(3)].	currentCharacter == $* ifTrue: [^self recordAndReportMatch: #(1)].	currentCharacter == $+ ifTrue: [^self recordAndReportMatch: #(4)].	currentCharacter == $- ifTrue: [^self recordAndReportMatch: #(2)].	currentCharacter == $/ ifTrue: [^self recordAndReportMatch: #(7)].	currentCharacter == $^ ifTrue: [^self recordAndReportMatch: #(6)].	currentCharacter == $`		ifTrue:			[[self step.			currentCharacter == $` ifTrue: [^self recordAndReportMatch: #(10)]] repeat].	currentCharacter isDigit		ifTrue:			[[self recordMatch: #(8).			self step.			currentCharacter isDigit] whileTrue.			^self reportLastMatch].	((currentCharacter between: Character tab and: Character cr) or: [currentCharacter == Character space])		ifTrue:			[[self recordMatch: #(9).			self step.			(currentCharacter between: Character tab and: Character cr) or: [currentCharacter == Character space]] whileTrue].	^self reportLastMatch</body><body package="SmaCC Rewrite Engine Tests" selector="tokenActions">tokenActions	^#(nil nil nil nil nil nil nil nil #whitespace #patternToken)</body></methods><methods><class-id>Refactory.SmaCC.SmaCCRewriteTestExpressionNode</class-id> <category>generated</category><body package="SmaCC Rewrite Engine Tests" selector="acceptVisitor:">acceptVisitor: anExpressionVisitor	^anExpressionVisitor visitExpression: self</body><body package="SmaCC Rewrite Engine Tests" selector="ignoredCompositeTokenVariables">ignoredCompositeTokenVariables	^#(#leftParens #rightParens)</body><body package="SmaCC Rewrite Engine Tests" selector="leftParens">leftParens	^leftParens</body><body package="SmaCC Rewrite Engine Tests" selector="leftParens:">leftParens: anOrderedCollection	leftParens := anOrderedCollection</body><body package="SmaCC Rewrite Engine Tests" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'leftParen' put: 'leftParens';		at: 'rightParen' put: 'rightParens';		yourself] once</body><body package="SmaCC Rewrite Engine Tests" selector="rightParens">rightParens	^rightParens</body><body package="SmaCC Rewrite Engine Tests" selector="rightParens:">rightParens: anOrderedCollection	rightParens := anOrderedCollection</body></methods><methods><class-id>Refactory.SmaCC.SmaCCRewriteTestExpressionNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Rewrite Engine Tests" selector="initialize">initialize	super initialize.	leftParens := OrderedCollection new: 2.	rightParens := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.SmaCCRewriteTestBinaryExpressionNode</class-id> <category>generated</category><body package="SmaCC Rewrite Engine Tests" selector="acceptVisitor:">acceptVisitor: anExpressionVisitor	^anExpressionVisitor visitBinaryExpression: self</body><body package="SmaCC Rewrite Engine Tests" selector="left">left	^left</body><body package="SmaCC Rewrite Engine Tests" selector="left:">left: aSmaCCRewriteTestExpressionNode	self left notNil ifTrue: [self left parent: nil].	left := aSmaCCRewriteTestExpressionNode.	self left notNil ifTrue: [self left parent: self]</body><body package="SmaCC Rewrite Engine Tests" selector="nodeVariables">nodeVariables	^#(#left #right)</body><body package="SmaCC Rewrite Engine Tests" selector="operator">operator	^operator</body><body package="SmaCC Rewrite Engine Tests" selector="operator:">operator: aSmaCCToken	operator := aSmaCCToken</body><body package="SmaCC Rewrite Engine Tests" selector="right">right	^right</body><body package="SmaCC Rewrite Engine Tests" selector="right:">right: aSmaCCRewriteTestExpressionNode	self right notNil ifTrue: [self right parent: nil].	right := aSmaCCRewriteTestExpressionNode.	self right notNil ifTrue: [self right parent: self]</body><body package="SmaCC Rewrite Engine Tests" selector="tokenVariables">tokenVariables	^#(#operator)</body></methods><methods><class-id>Refactory.SmaCC.SmaCCRewriteTestExpressionNodeVisitor</class-id> <category>generated</category><body package="SmaCC Rewrite Engine Tests" selector="visitBinaryExpression:">visitBinaryExpression: aBinaryExpression	^self visitExpression: aBinaryExpression</body><body package="SmaCC Rewrite Engine Tests" selector="visitExpression:">visitExpression: anExpression	^self visitSmaCCParseNode: anExpression</body><body package="SmaCC Rewrite Engine Tests" selector="visitNumber:">visitNumber: aNumber	^self visitExpression: aNumber</body></methods><methods><class-id>Refactory.SmaCC.SmaCCRewriteTestParser</class-id> <category>generated-reduction actions</category><body package="SmaCC Rewrite Engine Tests" selector="reduceActionForExpression1:">reduceActionForExpression1: nodes	| result |	result := nodes at: 2.	result addFirstToken: (nodes at: 1) to: result leftParens.	result addToken: (nodes at: 3) to: result rightParens.	^result</body><body package="SmaCC Rewrite Engine Tests" selector="reduceActionForExpression4:">reduceActionForExpression4: nodes	| result |	result := SmaCCRewriteTestBinaryExpressionNode new.	result left: (nodes at: 1).	result operator: (nodes at: 2).	result right: (nodes at: 3).	^result</body><body package="SmaCC Rewrite Engine Tests" selector="reduceActionForExpression7:">reduceActionForExpression7: nodes	| result |	result := SmaCCRewriteTestNumberNode new.	result number: (nodes at: 1).	^result</body></methods><methods><class-id>Refactory.SmaCC.SmaCCRewriteTestParser</class-id> <category>generated</category><body package="SmaCC Rewrite Engine Tests" selector="reduceTable">reduceTable^#(	#(11 1 #reduceActionForExpression7:) 	#(11 3 #reduceActionForExpression1:) 	#(11 3 #reduceActionForExpression4:)	).</body><body package="SmaCC Rewrite Engine Tests" selector="symbolTypes">symbolTypes	^#(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCRewriteTestExpressionNode #SmaCCRewriteTestExpressionNode #SmaCCToken #SmaCCToken)</body><body package="SmaCC Rewrite Engine Tests" selector="transitionTable">transitionTable^#(#[1 0 9 0 5 0 13 0 8 0 17 0 11] #[1 0 9 0 5 0 13 0 8 0 21 0 11] #[0 0 6 0 1 0 2 0 3 0 4 0 6 0 7 0 13] #[1 0 25 0 1 0 29 0 2 0 33 0 4 0 37 0 6 0 41 0 7 0 0 0 13] #[1 0 25 0 1 0 29 0 2 0 45 0 3 0 33 0 4 0 37 0 6 0 41 0 7] #[1 0 9 0 5 0 13 0 8 0 49 0 11] #[1 0 9 0 5 0 13 0 8 0 53 0 11] #[1 0 9 0 5 0 13 0 8 0 57 0 11] #[1 0 9 0 5 0 13 0 8 0 61 0 11] #[1 0 9 0 5 0 13 0 8 0 65 0 11] #[0 0 10 0 1 0 2 0 3 0 4 0 6 0 7 0 13] #[1 0 14 0 1 0 14 0 2 0 14 0 3 0 14 0 4 0 37 0 6 0 14 0 7 0 14 0 13] #[1 0 25 0 1 0 14 0 2 0 14 0 3 0 14 0 4 0 37 0 6 0 41 0 7 0 14 0 13] #[1 0 25 0 1 0 14 0 2 0 14 0 3 0 14 0 4 0 37 0 6 0 41 0 7 0 14 0 13] #[1 0 14 0 1 0 14 0 2 0 14 0 3 0 14 0 4 0 37 0 6 0 14 0 7 0 14 0 13] #[1 0 14 0 1 0 14 0 2 0 14 0 3 0 14 0 4 0 37 0 6 0 14 0 7 0 14 0 13]	).</body></methods><methods><class-id>Refactory.SmaCC.SmaCCRewriteTestParser class</class-id> <category>generated-accessing</category><body package="SmaCC Rewrite Engine Tests" selector="scannerClass">scannerClass	^SmaCCRewriteTestScanner</body></methods><methods><class-id>Refactory.SmaCC.SmaCCRewriteTestParser class</class-id> <category>generated</category><body package="SmaCC Rewrite Engine Tests" selector="definitionComment">definitionComment"%glr;%left ""+"" ""-"";%left ""*"" ""/"";%right ""^"";%prefix SmaCCRewriteTest;%suffix Node;%root Expression;%ignore_variables leftParen rightParen;%hierarchy Expression (	Number	BinaryExpression	);&lt;number&gt;	: \d+	;&lt;whitespace&gt;	: \s+	;&lt;patternToken&gt;	: \` [^\`]* \`	;Expression	: ""("" 'leftParen' Expression "")"" 'rightParen' {{Expression}}	| Expression 'left' ""+"" 'operator' Expression 'right' {{BinaryExpression}}	| Expression 'left' ""-"" 'operator' Expression 'right' {{BinaryExpression}}	| Expression 'left' ""*"" 'operator' Expression 'right' {{BinaryExpression}}	| Expression 'left' ""/"" 'operator' Expression 'right' {{BinaryExpression}}	| Expression 'left' ""^"" 'operator' Expression 'right' {{BinaryExpression}}	| &lt;number&gt; 'number' {{Number}}	;"</body><body package="SmaCC Rewrite Engine Tests" selector="startingStateForExpression">startingStateForExpression	^1</body></methods><methods><class-id>Refactory.SmaCC.SmaCCRewriteTestNumberNode</class-id> <category>generated</category><body package="SmaCC Rewrite Engine Tests" selector="acceptVisitor:">acceptVisitor: anExpressionVisitor	^anExpressionVisitor visitNumber: self</body><body package="SmaCC Rewrite Engine Tests" selector="number">number	^number</body><body package="SmaCC Rewrite Engine Tests" selector="number:">number: aSmaCCToken	number := aSmaCCToken</body><body package="SmaCC Rewrite Engine Tests" selector="tokenVariables">tokenVariables	^#(#number)</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>SmaCCScanner</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream start matchActions matchEnd currentCharacter outputStream lastOutputStreamMatchPosition lastMatchWasEmpty returnMatchBlock state comments </inst-vars><class-inst-vars>keywordMap </class-inst-vars><imports></imports><category>SmaCC Runtime</category><attributes><package>SmaCC Runtime</package></attributes></class><class><name>SmaCCParseNode</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent attributes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Runtime</category><attributes><package>SmaCC Runtime</package></attributes></class><class><name>SmaCCParseNodeVisitor</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Runtime</category><attributes><package>SmaCC Runtime</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>SmaCCGLRParser</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>states parseAll currentState tryAllStates lastToken lastPosition lastState nextScannerState nextScannerPosition </inst-vars><class-inst-vars>cachedTrees </class-inst-vars><imports></imports><category>SmaCC GLR Runtime</category><attributes><package>SmaCC GLR Runtime</package></attributes></class></st-source>