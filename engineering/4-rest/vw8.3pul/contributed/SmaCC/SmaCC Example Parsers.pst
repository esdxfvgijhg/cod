<?xml version="1.0"?><st-source><!-- Name: SmaCC Example ParsersComment: This package is part of the Smalltalk Compiler-Compiler (SmaCC) written by John Brant and Don Roberts. It contains some sample parsers written using SmaCC. The C and Java parsers don't create any parse trees. However, the Smalltalk parser (StParser) does create a Refactoring Browser parse tree.If you want more information about SmaCC, visit http://www.refactory.com/Software/SmaCC/. - - - - - - - - - - - - - - - - - - - - - - - - -Copyright (c) 2002-2003 John Brant, Don RobertsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.DbIdentifier: bear73DbTrace: 237208DevelopmentPrerequisites: #(#(#any 'SmaCC Runtime' '') #(#any 'Browser-Parser' ''))PackageName: SmaCC Example ParsersParcel: #('SmaCC Example Parsers')ParcelName: SmaCC Example ParsersPrerequisiteParcels: #(#('SmaCC Runtime' '') #('Browser-Parser' ''))PrintStringCache: (7.7 - 1.06,nross)Version: 7.7 - 1.06Date: 11:17:32 AM November 3, 2009 --><time-stamp>From VisualWorksÂ®, 7.7 of November 3, 2009 on November 3, 2009 at 11:17:32 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>JavaScanner</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCScanner</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Parsers</category><attributes><package>SmaCC Example Parsers</package></attributes></class><comment><class-id>Refactory.SmaCC.JavaScanner</class-id><body></body></comment><class><name>StScanner</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCScanner</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Parsers</category><attributes><package>SmaCC Example Parsers</package></attributes></class><comment><class-id>Refactory.SmaCC.StScanner</class-id><body></body></comment><class><name>CParser</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Parsers</category><attributes><package>SmaCC Example Parsers</package></attributes></class><comment><class-id>Refactory.SmaCC.CParser</class-id><body></body></comment><class><name>CScanner</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCScanner</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typeNames </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Parsers</category><attributes><package>SmaCC Example Parsers</package></attributes></class><comment><class-id>Refactory.SmaCC.CScanner</class-id><body></body></comment><class><name>StParser</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private Refactory.Browser.*			</imports><category>SmaCC Parsers</category><attributes><package>SmaCC Example Parsers</package></attributes></class><comment><class-id>Refactory.SmaCC.StParser</class-id><body></body></comment><class><name>JavaParser</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Parsers</category><attributes><package>SmaCC Example Parsers</package></attributes></class><comment><class-id>Refactory.SmaCC.JavaParser</class-id><body></body></comment><methods><class-id>Refactory.SmaCC.JavaScanner</class-id> <category>generated-scanner</category><body package="SmaCC Example Parsers" selector="scan1">scan1		[self recordMatch: #(94).	self step.	currentCharacter isDigit] whileTrue.	(currentCharacter == $D or: 			[currentCharacter == $F 				or: [currentCharacter == $d or: [currentCharacter == $f]]]) 		ifTrue: [^self recordAndReportMatch: #(94)].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan2">scan2		[self step.	currentCharacter isDigit] whileTrue.	(currentCharacter == $D or: 			[currentCharacter == $F 				or: [currentCharacter == $d or: [currentCharacter == $f]]]) 		ifTrue: [^self recordAndReportMatch: #(94)].	(currentCharacter == $E or: [currentCharacter == $e]) 		ifTrue: [^self scan4].	currentCharacter == $. ifTrue: [^self scan3].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan3">scan3		[self recordMatch: #(94).	self step.	currentCharacter isDigit] whileTrue.	(currentCharacter == $D or: 			[currentCharacter == $F 				or: [currentCharacter == $d or: [currentCharacter == $f]]]) 		ifTrue: [^self recordAndReportMatch: #(94)].	(currentCharacter == $E or: [currentCharacter == $e]) 		ifTrue: [^self scan4].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan4">scan4	self step.	(currentCharacter == $+ or: [currentCharacter == $-]) ifTrue: [self step].	currentCharacter isDigit ifTrue: [^self scan1].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan5">scan5	self step.	(currentCharacter between: $0 and: $7) ifTrue: [^self scan6].	currentCharacter == $' ifTrue: [^self recordAndReportMatch: #(96)].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan6">scan6	self step.	currentCharacter == $' ifTrue: [^self recordAndReportMatch: #(96)].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan7">scan7		[self step.	currentCharacter &lt;= $! 		or: [(currentCharacter between: $# and: $[) or: [currentCharacter &gt;= $]]]] 			whileTrue.	currentCharacter == $" ifTrue: [^self recordAndReportMatch: #(97)].	currentCharacter == $\ 		ifTrue: 			[self step.			(currentCharacter == $" or: 					[currentCharacter == $' or: 							[(currentCharacter between: $0 and: $7) or: 									[currentCharacter == $\ or: 											[currentCharacter == $b or: 													[currentCharacter == $f or: 															[currentCharacter == $n 																or: [currentCharacter == $r or: [currentCharacter == $t]]]]]]]]) 				ifTrue: [^self scan7]].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scanForToken">scanForToken	self step.	(currentCharacter isAlphabetic or: [currentCharacter == $_]) 		ifTrue: 			[			[self recordMatch: #(99).			self step.			currentCharacter isAlphaNumeric or: [currentCharacter == $_]] 					whileTrue.			^self reportLastMatch].	(currentCharacter between: $1 and: $9) 		ifTrue: 			[			[self recordMatch: #(93).			self step.			currentCharacter isDigit] 					whileTrue.			(currentCharacter == $D or: 					[currentCharacter == $F 						or: [currentCharacter == $d or: [currentCharacter == $f]]]) 				ifTrue: [^self recordAndReportMatch: #(94)].			(currentCharacter == $E or: [currentCharacter == $e]) 				ifTrue: [^self scan4].			(currentCharacter == $L or: [currentCharacter == $l]) 				ifTrue: [^self recordAndReportMatch: #(93)].			currentCharacter == $. ifTrue: [^self scan3].			^self reportLastMatch].	((currentCharacter between: Character tab and: Character cr) 		or: [currentCharacter == Character space]) 			ifTrue: 				[				[self recordMatch: #whitespace.				self step.				(currentCharacter between: Character tab and: Character cr) 					or: [currentCharacter == Character space]] 						whileTrue.				^self reportLastMatch].	currentCharacter == $! 		ifTrue: 			[self recordMatch: #(92).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(52)].			^self reportLastMatch].	currentCharacter == $" ifTrue: [^self scan7].	currentCharacter == $% 		ifTrue: 			[self recordMatch: #(83).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(68)].			^self reportLastMatch].	currentCharacter == $&amp; 		ifTrue: 			[self recordMatch: #(48).			self step.			currentCharacter == $&amp; ifTrue: [^self recordAndReportMatch: #(51)].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(62)].			^self reportLastMatch].	currentCharacter == $' 		ifTrue: 			[self step.			(currentCharacter &lt;= $&amp; 				or: [(currentCharacter between: $( and: $[) or: [currentCharacter &gt;= $]]]) 					ifTrue: [^self scan6].			currentCharacter == $\ 				ifTrue: 					[self step.					(currentCharacter == $" or: 							[currentCharacter == $' or: 									[currentCharacter == $\ or: 											[currentCharacter == $b or: 													[currentCharacter == $f or: 															[currentCharacter == $n 																or: [currentCharacter == $r or: [currentCharacter == $t]]]]]]]) 						ifTrue: [^self scan6].					(currentCharacter between: $0 and: $3) 						ifTrue: 							[self step.							(currentCharacter between: $0 and: $7) ifTrue: [^self scan5].							currentCharacter == $' ifTrue: [^self recordAndReportMatch: #(96)].							^self reportLastMatch].					(currentCharacter between: $4 and: $7) ifTrue: [^self scan5]].			^self reportLastMatch].	currentCharacter == $( ifTrue: [^self recordAndReportMatch: #(19)].	currentCharacter == $) ifTrue: [^self recordAndReportMatch: #(20)].	currentCharacter == $* 		ifTrue: 			[self recordMatch: #(43).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(66)].			^self reportLastMatch].	currentCharacter == $+ 		ifTrue: 			[self recordMatch: #(89).			self step.			currentCharacter == $+ ifTrue: [^self recordAndReportMatch: #(82)].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(69)].			^self reportLastMatch].	currentCharacter == $, ifTrue: [^self recordAndReportMatch: #(5)].	currentCharacter == $- 		ifTrue: 			[self recordMatch: #(90).			self step.			currentCharacter == $- ifTrue: [^self recordAndReportMatch: #(86)].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(70)].			^self reportLastMatch].	currentCharacter == $. 		ifTrue: 			[self recordMatch: #(27).			self step.			currentCharacter isDigit ifTrue: [^self scan3].			^self reportLastMatch].	currentCharacter == $/ 		ifTrue: 			[self recordMatch: #(88).			self step.			currentCharacter == $* 				ifTrue: [^self recordAndReportMatch: #multipleLineComment].			currentCharacter == $/ 				ifTrue: 					[					[self step.					currentCharacter &lt;= Character tab or: 							[(currentCharacter between: (Character value: 11) and: Character newPage) 								or: [currentCharacter &gt;= (Character value: 14)]]] 							whileTrue.					currentCharacter == Character lf 						ifTrue: [^self recordAndReportMatch: #comment].					currentCharacter == Character cr 						ifTrue: 							[self recordMatch: #comment.							self step.							currentCharacter == Character lf 								ifTrue: [^self recordAndReportMatch: #comment]].					^self reportLastMatch].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(67)].			^self reportLastMatch].	currentCharacter == $0 		ifTrue: 			[self recordMatch: #(93).			self step.			(currentCharacter between: $0 and: $7) 				ifTrue: 					[					[self recordMatch: #(93).					self step.					currentCharacter between: $0 and: $7] 							whileTrue.					(currentCharacter == $D or: 							[currentCharacter == $F 								or: [currentCharacter == $d or: [currentCharacter == $f]]]) 						ifTrue: [^self recordAndReportMatch: #(94)].					(currentCharacter between: $8 and: $9) ifTrue: [^self scan2].					(currentCharacter == $E or: [currentCharacter == $e]) 						ifTrue: [^self scan4].					(currentCharacter == $L or: [currentCharacter == $l]) 						ifTrue: [^self recordAndReportMatch: #(93)].					currentCharacter == $. ifTrue: [^self scan3].					^self reportLastMatch].			(currentCharacter == $D or: 					[currentCharacter == $F 						or: [currentCharacter == $d or: [currentCharacter == $f]]]) 				ifTrue: [^self recordAndReportMatch: #(94)].			(currentCharacter between: $8 and: $9) ifTrue: [^self scan2].			(currentCharacter == $E or: [currentCharacter == $e]) 				ifTrue: [^self scan4].			(currentCharacter == $L or: [currentCharacter == $l]) 				ifTrue: [^self recordAndReportMatch: #(93)].			(currentCharacter == $X or: [currentCharacter == $x]) 				ifTrue: 					[self step.					(currentCharacter isDigit or: 							[(currentCharacter between: $A and: $F) 								or: [currentCharacter between: $a and: $f]]) 						ifTrue: 							[							[self recordMatch: #(93).							self step.							currentCharacter isDigit or: 									[(currentCharacter between: $A and: $F) 										or: [currentCharacter between: $a and: $f]]] 									whileTrue.							(currentCharacter == $L or: [currentCharacter == $l]) 								ifTrue: [^self recordAndReportMatch: #(93)]].					^self reportLastMatch].			currentCharacter == $. ifTrue: [^self scan3].			^self reportLastMatch].	currentCharacter == $: ifTrue: [^self recordAndReportMatch: #(13)].	currentCharacter == $; ifTrue: [^self recordAndReportMatch: #(30)].	currentCharacter == $&lt; 		ifTrue: 			[self recordMatch: #(72).			self step.			currentCharacter == $&lt; 				ifTrue: 					[self recordMatch: #(84).					self step.					currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(64)].					^self reportLastMatch].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(55)].			^self reportLastMatch].	currentCharacter == $= 		ifTrue: 			[self recordMatch: #(3).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(65)].			^self reportLastMatch].	currentCharacter == $&gt; 		ifTrue: 			[self recordMatch: #(59).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(56)].			currentCharacter == $&gt; 				ifTrue: 					[self recordMatch: #(85).					self step.					currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(60)].					currentCharacter == $&gt; 						ifTrue: 							[self recordMatch: #(87).							self step.							currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(61)]]].			^self reportLastMatch].	currentCharacter == $? ifTrue: [^self recordAndReportMatch: #(54)].	currentCharacter == $[ ifTrue: [^self recordAndReportMatch: #(4)].	currentCharacter == $] ifTrue: [^self recordAndReportMatch: #(6)].	currentCharacter == $^ 		ifTrue: 			[self recordMatch: #(49).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(63)].			^self reportLastMatch].	currentCharacter == ${ ifTrue: [^self recordAndReportMatch: #(1)].	currentCharacter == $| 		ifTrue: 			[self recordMatch: #(50).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(14)].			currentCharacter == $| ifTrue: [^self recordAndReportMatch: #(53)].			^self reportLastMatch].	currentCharacter == $} ifTrue: [^self recordAndReportMatch: #(2)].	currentCharacter == $~ ifTrue: [^self recordAndReportMatch: #(91)].	^self reportLastMatch</body></methods><methods><class-id>Refactory.SmaCC.JavaScanner</class-id> <category>generated-tokens</category><body package="SmaCC Example Parsers" selector="emptySymbolTokenId">emptySymbolTokenId	^255</body><body package="SmaCC Example Parsers" selector="errorTokenId">errorTokenId	^256</body></methods><methods><class-id>Refactory.SmaCC.JavaScanner</class-id> <category>scanning</category><body package="SmaCC Example Parsers" selector="multipleLineComment">multipleLineComment	| char |		[[(char := stream next) isNil or: [char == $*]] whileFalse.	stream atEnd ifTrue: [self scannerError].	stream peekFor: $/] 			whileFalse.	^self whitespace</body></methods><methods><class-id>Refactory.SmaCC.JavaScanner class</class-id> <category>generated-comments</category><body package="SmaCC Example Parsers" selector="scannerDefinitionComment">scannerDefinitionComment	"&lt;DECIMAL_INTEGER&gt;: 0 | [1-9] [0-9]*	;&lt;HEX_INTEGER&gt;: 0[xX][0-9a-fA-F]+	;&lt;OCTAL_INTEGER&gt;: 0[0-7]+	;&lt;EXPONENT&gt;: [eE] [\-\+]? [0-9]+ 	;&lt;FLOAT_TYPE&gt;: [fFdD]	;&lt;ESCAPE_SEQUENCE&gt;: \\ ([btnfr\""\'\\] | ([0-3] [0-7]{0,2} | [4-7][0-7]?))	;&lt;INTEGER_LITERAL&gt;: (&lt;DECIMAL_INTEGER&gt; | &lt;HEX_INTEGER&gt; | &lt;OCTAL_INTEGER&gt;) [lL]?	;&lt;FLOATING_POINT_LITERAL&gt;: [0-9]+ \. [0-9]* &lt;EXPONENT&gt;? &lt;FLOAT_TYPE&gt;? | \. [0-9]+ &lt;EXPONENT&gt;? &lt;FLOAT_TYPE&gt;? | [0-9]+ &lt;EXPONENT&gt; &lt;FLOAT_TYPE&gt;? | [0-9]+ &lt;FLOAT_TYPE&gt;	;&lt;BOOLEAN_LITERAL&gt;: true | false	;&lt;CHARACTER_LITERAL&gt;: \' ([^\\\'] | &lt;ESCAPE_SEQUENCE&gt; ) \'	;&lt;STRING_LITERAL&gt;: \"" ([^\\\""] | &lt;ESCAPE_SEQUENCE&gt; )* \""	;&lt;NULL_LITERAL&gt;: null	;&lt;IDENTIFIER&gt;: [a-zA-Z_] \w*	;&lt;eol&gt;: \r | \n | \r\n	;&lt;whitespace&gt;: \s+	;&lt;comment&gt;: \/\/ [^\r\n]* &lt;eol&gt;	;&lt;multipleLineComment&gt;: \/ \* 	;"</body></methods><methods><class-id>Refactory.SmaCC.JavaScanner class</class-id> <category>generated-initialization</category><body package="SmaCC Example Parsers" selector="initializeKeywordMap">initializeKeywordMap	keywordMap := Dictionary new.	#(#(99 'abstract' 36) #(99 'boolean' 31) #(99 'break' 80) #(99 'byte' 32) #(99 'case' 41) #(99 'catch' 73) #(99 'char' 24) #(99 'class' 9) #(99 'continue' 81) #(99 'default' 47) #(99 'do' 78) #(99 'double' 26) #(99 'else' 15) #(99 'extends' 10) #(99 'false' 95) #(99 'final' 37) #(99 'finally' 74) #(99 'float' 25) #(99 'for' 79) #(99 'if' 35) #(99 'implements' 11) #(99 'import' 42) #(99 'instanceof' 57) #(99 'int' 34) #(99 'interface' 17) #(99 'long' 28) #(99 'native' 38) #(99 'new' 76) #(99 'null' 98) #(99 'package' 29) #(99 'private' 46) #(99 'protected' 45) #(99 'public' 44) #(99 'return' 75) #(99 'short' 33) #(99 'static' 40) #(99 'strictfp' 8) #(99 'super' 23) #(99 'switch' 16) #(99 'synchronized' 39) #(99 'this' 22) #(99 'throw' 71) #(99 'throws' 21) #(99 'transient' 18) #(99 'true' 95) #(99 'try' 77) #(99 'void' 7) #(99 'volatile' 12) #(99 'while' 58)) 		do: 			[:each | 			(keywordMap at: each first ifAbsentPut: [Dictionary new]) at: (each at: 2)				put: each last].	^keywordMap</body></methods><methods><class-id>Refactory.SmaCC.StScanner</class-id> <category>scanning</category><body package="SmaCC Example Parsers" selector="negativeNumber">negativeNumber	stream skip: -2.	self scanNumber: self negativeNumberId</body><body package="SmaCC Example Parsers" selector="number">number	stream skip: -1.	self scanNumber: self numberId</body><body package="SmaCC Example Parsers" selector="scanNumber:">scanNumber: id 	| number |	number := Number readFrom: stream.	outputStream reset.	matchActions := Array with: id.	^self createTokenFor: number</body><body package="SmaCC Example Parsers" selector="variableAssignment">variableAssignment	| token |	outputStream skip: -2.	stream skip: -2.	matchActions := Array with: self nameId.	token := self createTokenFor: outputStream contents.	outputStream reset.	^token</body></methods><methods><class-id>Refactory.SmaCC.StScanner</class-id> <category>generated-scanner</category><body package="SmaCC Example Parsers" selector="scan1">scan1		[self step.	currentCharacter ~~ $'] whileTrue.	^self scan5</body><body package="SmaCC Example Parsers" selector="scan2">scan2		[self step.	currentCharacter isLetter 		or: [(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]] 			whileTrue.	currentCharacter == $: 		ifTrue: 			[self recordMatch: #(25).			self step.			(currentCharacter isLetter or: [currentCharacter == $_]) 				ifTrue: [^self scan2]].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan3">scan3	self recordMatch: #(24).	self step.	(currentCharacter isLetter or: [currentCharacter == $_]) 		ifTrue: [^self scan2].	currentCharacter == $= 		ifTrue: [^self recordAndReportMatch: #variableAssignment].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan4">scan4	self step.	(currentCharacter isLetter or: [currentCharacter == $_]) 		ifTrue: 			[			[self recordMatch: #(29).			self step.			currentCharacter isLetter 				or: [(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]] 					whileTrue.			currentCharacter == $. ifTrue: [^self scan4]].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan5">scan5	self recordMatch: #(23).	self step.	currentCharacter == $' ifTrue: [^self scan1].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scanForToken">scanForToken	self step.	(currentCharacter isLetter or: [currentCharacter == $_]) 		ifTrue: 			[self recordMatch: #(20 32).			self step.			(currentCharacter isLetter 				or: [(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]) 					ifTrue: 						[						[self recordMatch: #(20).						self step.						currentCharacter isLetter 							or: [(currentCharacter between: $0 and: $9) or: [currentCharacter == $_]]] 								whileTrue].			currentCharacter == $: ifTrue: [^self scan3].			currentCharacter == $. ifTrue: [^self scan4].			^self reportLastMatch].	currentCharacter isSeparator 		ifTrue: 			[self recordMatch: #whitespace.			self step.			currentCharacter isSeparator 				ifTrue: 					[					[self recordMatch: #whitespace.					self step.					currentCharacter isSeparator] 							whileTrue].			^self reportLastMatch].	currentCharacter isDigit ifTrue: [^self recordAndReportMatch: #number].	currentCharacter == $: 		ifTrue: 			[self recordMatch: #(19 32).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(15)].			^self reportLastMatch].	currentCharacter == $. ifTrue: [^self recordAndReportMatch: #(2 32)].	(currentCharacter == $! or: 			[(currentCharacter between: $% and: $&amp;) or: 					[(currentCharacter between: $* and: $,) or: 							[currentCharacter == $/ or: 									[currentCharacter == $= or: 											[(currentCharacter between: $? and: $@) 												or: [currentCharacter == $\ or: [currentCharacter == $~]]]]]]]) 		ifTrue: 			[self recordMatch: #(26 32).			self step.			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $# ifTrue: [^self recordAndReportMatch: #(6 32)].	currentCharacter == $] ifTrue: [^self recordAndReportMatch: #(18 32)].	currentCharacter == $[ ifTrue: [^self recordAndReportMatch: #(17 32)].	currentCharacter == $( ifTrue: [^self recordAndReportMatch: #(7 32)].	currentCharacter == $) ifTrue: [^self recordAndReportMatch: #(10 32)].	currentCharacter == $" 		ifTrue: 			[self recordMatch: #(32).			self step.			currentCharacter ~~ $" 				ifTrue: [					[self step.					currentCharacter ~~ $"] whileTrue].			currentCharacter == $" ifTrue: [^self recordAndReportMatch: #comment].			^self reportLastMatch].	currentCharacter == $' 		ifTrue: 			[self recordMatch: #(32).			self step.			currentCharacter ~~ $' ifTrue: [^self scan1].			currentCharacter == $' ifTrue: [^self scan5].			^self reportLastMatch].	currentCharacter == $^ ifTrue: [^self recordAndReportMatch: #(16 32)].	currentCharacter == $| 		ifTrue: 			[self recordMatch: #(1 26 32).			self step.			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $; ifTrue: [^self recordAndReportMatch: #(3 32)].	currentCharacter == $- 		ifTrue: 			[self recordMatch: #(26 32).			self step.			currentCharacter isDigit 				ifTrue: [^self recordAndReportMatch: #negativeNumber].			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $&gt; 		ifTrue: 			[self recordMatch: #(8 26 32).			self step.			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $&lt; 		ifTrue: 			[self recordMatch: #(9 26 32).			self step.			(currentCharacter == $! or: 					[(currentCharacter between: $% and: $&amp;) or: 							[(currentCharacter between: $* and: $,) or: 									[currentCharacter == $/ or: 											[(currentCharacter between: $&lt; and: $@) or: 													[currentCharacter == $\ 														or: [currentCharacter == $| or: [currentCharacter == $~]]]]]]]) 				ifTrue: [^self recordAndReportMatch: #(26)].			^self reportLastMatch].	currentCharacter == $} ifTrue: [^self recordAndReportMatch: #(4 32)].	currentCharacter == ${ ifTrue: [^self recordAndReportMatch: #(5 32)].	((currentCharacter between: (Character value: 1) and: Character backspace) 		or: 			[currentCharacter == (Character value: 11) or: 					[(currentCharacter between: (Character value: 14) and: (Character value: 25)) 						or: 							[(currentCharacter between: Character esc and: (Character value: 31)) or: 									[currentCharacter == $` or: 											[(currentCharacter between: Character del and: $Â¿) 												or: [currentCharacter == $Ã or: [currentCharacter == $Ã·]]]]]]]) 			ifTrue: [^self recordAndReportMatch: #(32)].	currentCharacter == $$ 		ifTrue: 			[self recordMatch: #(32).			self step.			^self recordAndReportMatch: #(30)].	^self reportLastMatch</body></methods><methods><class-id>Refactory.SmaCC.StScanner</class-id> <category>generated-tokens</category><body package="SmaCC Example Parsers" selector="binarySymbolId">binarySymbolId	^26</body><body package="SmaCC Example Parsers" selector="emptySymbolTokenId">emptySymbolTokenId	^64</body><body package="SmaCC Example Parsers" selector="errorTokenId">errorTokenId	^65</body><body package="SmaCC Example Parsers" selector="nameId">nameId	^20</body><body package="SmaCC Example Parsers" selector="negativeNumberId">negativeNumberId	^22</body><body package="SmaCC Example Parsers" selector="numberId">numberId	^21</body></methods><methods><class-id>Refactory.SmaCC.StScanner class</class-id> <category>generated-comments</category><body package="SmaCC Example Parsers" selector="scannerDefinitionComment">scannerDefinitionComment	"&lt;name&gt;	:	(&lt;isLetter&gt; | \_) (&lt;isLetter&gt; | [\d\_]) *;&lt;number&gt;:	\d	;&lt;negativeNumber&gt;	:	\- &lt;number&gt;	;&lt;string&gt;	:	\'  [^\']* \' (\' [^\']* \')*	;&lt;keyword&gt;	:	&lt;name&gt; \:	;&lt;multikeyword&gt;	:	&lt;name&gt; \: (&lt;name&gt; \: )+	;&lt;binarySymbol&gt;	:	[\~\-\!\@\%\&amp;\*\+\=\\\|\?\/\&gt;\&lt;\,] [\~\!\@\%\&amp;\*\+\=\\\|\?\/\&gt;\&lt;\,]?	;&lt;whitespace&gt;	:	&lt;isSeparator&gt;+	;&lt;comment&gt;	:	\"" [^\""]* \""	;&lt;dottedName&gt;	:	&lt;name&gt; (\. &lt;name&gt;)+	;&lt;character&gt;	:	\$ .	;&lt;variableAssignment&gt; : &lt;name&gt; \: \=	;&lt;anyChar&gt; : . ; # For VW literal arrays that handle #(;) -&gt; #(#';')"</body></methods><methods><class-id>Refactory.SmaCC.StScanner class</class-id> <category>generated-initialization</category><body package="SmaCC Example Parsers" selector="initializeKeywordMap">initializeKeywordMap	keywordMap := Dictionary new.	#(#(26 '||' 11) #(20 'false' 13) #(20 'nil' 14) #(20 'true' 12)) do: 			[:each | 			(keywordMap at: each first ifAbsentPut: [Dictionary new]) at: (each at: 2)				put: each last].	^keywordMap</body></methods><methods><class-id>Refactory.SmaCC.StScanner class</class-id> <category>accessing</category><body package="SmaCC Example Parsers" selector="frequencyTable">frequencyTable	^#(0.0 1.31372e-7 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0481767 0.0 0.0 0.0 0.0252514 0.0 0.0 2.62743e-7 1.31372e-7 5.25487e-7 1.31372e-7 1.31372e-7 0.0 1.31372e-7 0.0 2.62743e-7 0.0 1.31372e-7 7.8823e-7 2.62743e-7 2.62743e-7 1.31372e-7 5.25487e-7 0.106011 5.13007e-5 0.004554 0.00655584 2.41133e-4 3.60615e-5 1.93248e-4 0.00410241 0.00463893 0.0046369 2.82712e-4 4.64268e-4 0.0011675 9.75895e-4 0.00982753 2.26945e-4 0.00795055 0.00590903 0.0036363 0.00220212 0.00180485 0.00224265 0.00183191 0.00138545 0.00146217 0.00115246 0.0248349 0.00129723 7.50395e-4 0.00496762 8.97532e-4 1.44378e-4 0.00164497 0.00403659 0.00332443 0.00587547 0.00266882 0.00223293 0.00382922 9.91266e-4 9.99673e-4 0.00418163 3.27773e-5 6.31044e-4 0.00271013 0.00248917 0.00292348 0.00278226 0.00359742 7.08751e-4 0.00239287 0.00749351 0.00486778 0.00145908 0.00167453 0.00112251 2.2458e-4 2.32856e-4 4.40752e-5 0.00467815 1.22701e-4 0.00470173 0.00298378 7.73451e-4 2.634e-4 0.0515694 0.00918972 0.0257636 0.0226939 0.09244 0.0167193 0.0108988 0.0138365 0.042864 9.52379e-4 0.00366494 0.0402202 0.0159142 0.0440905 0.0418992 0.0154463 5.66869e-4 0.043972 0.0443068 0.0543899 0.0180997 0.00593537 0.00725816 0.00494884 0.00808567 0.00128285 7.45009e-4 0.00281083 7.45206e-4 1.08907e-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 6.56859e-8 3.28429e-7 0.0 0.0 1.97058e-7 0.0 0.0 0.0 0.0 3.94115e-7 6.56859e-8 0.0 2.62743e-7 1.31372e-7 0.0 1.31372e-7 1.31372e-7 0.0 0.0 1.97058e-7 1.31372e-7 6.56859e-8 1.31372e-7 0.0 0.0 7.8823e-7 0.0 0.0 1.31372e-7 1.31372e-7 4.59801e-7 7.8823e-7 0.0 9.85288e-7 5.25487e-7 1.31372e-7 6.56859e-8 1.05097e-6 0.0 2.62743e-7 0.0 1.97058e-7 4.59801e-7 1.97058e-7 5.25487e-7 2.62743e-7 0.0 1.51078e-6 5.91173e-7 1.11666e-6 0.0 1.97058e-7 8.53916e-7 1.57646e-6 0.0 0.0 0.0 0.0 0.0 0.0 0.0 6.56859e-8 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 5.25487e-7 0.0 0.0 0.0 0.0 0.0 0.0 7.8823e-7 0.0 2.62743e-7 0.0 0.0 3.28429e-7 1.31372e-7 0.0 2.62743e-7 0.0 3.28429e-7 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 2.62743e-7 0.0 5.25487e-7 0.0 0.0 1.31372e-7 0.0 0.0 0.0 0.0)</body></methods><methods><class-id>Refactory.SmaCC.CParser</class-id> <category>generated-reduction actions</category><body package="SmaCC Example Parsers" selector="reduceActionForenumXspecifier2:">reduceActionForenumXspecifier2: nodes 	self addTypeName: (nodes at: 2) value.	^self reduceFor: nodes</body><body package="SmaCC Example Parsers" selector="reduceActionForenumXspecifier3:">reduceActionForenumXspecifier3: nodes 	self addTypeName: (nodes at: 2) value.	^self reduceFor: nodes</body><body package="SmaCC Example Parsers" selector="reduceActionForstructXorXunionXspecifier1:">reduceActionForstructXorXunionXspecifier1: nodes 	self addTypeName: (nodes at: 2) value.	^self reduceFor: nodes</body><body package="SmaCC Example Parsers" selector="reduceActionForstructXorXunionXspecifier3:">reduceActionForstructXorXunionXspecifier3: nodes 	self addTypeName: (nodes at: 2) value.	^self reduceFor: nodes</body></methods><methods><class-id>Refactory.SmaCC.CParser</class-id> <category>scanning</category><body package="SmaCC Example Parsers" selector="addTypeName:">addTypeName: aString 	scanner addTypeName: aString</body></methods><methods><class-id>Refactory.SmaCC.CParser</class-id> <category>generated-tables</category><body package="SmaCC Example Parsers" selector="reduceTable">reduceTable	^#(#(84 1 #reduceFor:)#(84 4 #reduceFor:)#(84 3 #reduceFor:)#(84 4 #reduceFor:)#(84 3 #reduceFor:)#(84 3 #reduceFor:)#(84 2 #reduceFor:)#(84 2 #reduceFor:)#(85 1 #reduceFor:)#(85 1 #reduceFor:)#(85 1 #reduceFor:)#(85 3 #reduceFor:)#(86 1 #reduceFor:)#(86 3 #reduceFor:)#(87 1 #reduceFor:)#(87 3 #reduceFor:)#(88 1 #reduceFor:)#(88 2 #reduceFor:)#(88 2 #reduceFor:)#(88 2 #reduceFor:)#(88 2 #reduceFor:)#(88 4 #reduceFor:)#(89 1 #reduceFor:)#(89 1 #reduceFor:)#(89 1 #reduceFor:)#(89 1 #reduceFor:)#(89 1 #reduceFor:)#(89 1 #reduceFor:)#(90 1 #reduceFor:)#(90 4 #reduceFor:)#(91 1 #reduceFor:)#(91 2 #reduceFor:)#(92 1 #reduceFor:)#(92 3 #reduceFor:)#(92 3 #reduceFor:)#(92 3 #reduceFor:)#(93 1 #reduceFor:)#(93 3 #reduceFor:)#(93 3 #reduceFor:)#(94 1 #reduceFor:)#(94 3 #reduceFor:)#(94 3 #reduceFor:)#(95 1 #reduceFor:)#(95 3 #reduceFor:)#(95 3 #reduceFor:)#(95 3 #reduceFor:)#(95 3 #reduceFor:)#(96 1 #reduceFor:)#(96 3 #reduceFor:)#(96 3 #reduceFor:)#(97 1 #reduceFor:)#(97 3 #reduceFor:)#(98 1 #reduceFor:)#(98 3 #reduceFor:)#(99 1 #reduceFor:)#(99 3 #reduceFor:)#(100 1 #reduceFor:)#(100 3 #reduceFor:)#(101 1 #reduceFor:)#(101 3 #reduceFor:)#(102 1 #reduceFor:)#(102 5 #reduceFor:)#(103 1 #reduceFor:)#(103 1 #reduceFor:)#(103 1 #reduceFor:)#(103 1 #reduceFor:)#(103 1 #reduceFor:)#(103 1 #reduceFor:)#(103 1 #reduceFor:)#(103 1 #reduceFor:)#(103 1 #reduceFor:)#(103 1 #reduceFor:)#(103 1 #reduceFor:)#(104 1 #reduceFor:)#(105 1 #reduceFor:)#(105 2 #reduceFor:)#(105 1 #reduceFor:)#(105 2 #reduceFor:)#(105 1 #reduceFor:)#(105 2 #reduceFor:)#(106 1 #reduceFor:)#(106 3 #reduceFor:)#(107 2 #reduceFor:)#(107 3 #reduceFor:)#(108 1 #reduceFor:)#(108 1 #reduceFor:)#(108 1 #reduceFor:)#(108 1 #reduceFor:)#(108 1 #reduceFor:)#(109 1 #reduceFor:)#(109 1 #reduceFor:)#(109 1 #reduceFor:)#(109 1 #reduceFor:)#(109 1 #reduceFor:)#(109 1 #reduceFor:)#(109 1 #reduceFor:)#(109 1 #reduceFor:)#(109 1 #reduceFor:)#(109 1 #reduceFor:)#(109 1 #reduceFor:)#(109 1 #reduceFor:)#(110 1 #reduceFor:)#(110 1 #reduceFor:)#(111 1 #reduceFor:)#(111 3 #reduceFor:)#(112 2 #reduceFor:)#(112 1 #reduceFor:)#(113 1 #reduceFor:)#(113 3 #reduceFor:)#(114 5 #reduceActionForstructXorXunionXspecifier1:)#(114 4 #reduceFor:)#(114 2 #reduceActionForstructXorXunionXspecifier3:)#(115 4 #reduceFor:)#(115 5 #reduceActionForenumXspecifier2:)#(115 2 #reduceActionForenumXspecifier3:)#(116 1 #reduceFor:)#(116 1 #reduceFor:)#(117 1 #reduceFor:)#(118 1 #reduceFor:)#(118 2 #reduceFor:)#(119 1 #reduceFor:)#(119 2 #reduceFor:)#(120 3 #reduceFor:)#(121 2 #reduceFor:)#(121 1 #reduceFor:)#(121 2 #reduceFor:)#(121 1 #reduceFor:)#(122 1 #reduceFor:)#(122 3 #reduceFor:)#(123 1 #reduceFor:)#(123 2 #reduceFor:)#(123 3 #reduceFor:)#(124 1 #reduceFor:)#(124 3 #reduceFor:)#(125 1 #reduceFor:)#(125 3 #reduceFor:)#(126 1 #reduceFor:)#(126 2 #reduceFor:)#(126 2 #reduceFor:)#(126 3 #reduceFor:)#(127 1 #reduceFor:)#(127 3 #reduceFor:)#(127 4 #reduceFor:)#(127 3 #reduceFor:)#(127 4 #reduceFor:)#(127 4 #reduceFor:)#(127 3 #reduceFor:)#(128 1 #reduceFor:)#(128 3 #reduceFor:)#(129 1 #reduceFor:)#(129 3 #reduceFor:)#(130 1 #reduceFor:)#(130 2 #reduceFor:)#(131 1 #reduceFor:)#(131 3 #reduceFor:)#(132 1 #reduceFor:)#(132 1 #reduceFor:)#(133 2 #reduceFor:)#(133 2 #reduceFor:)#(133 1 #reduceFor:)#(134 1 #reduceFor:)#(134 1 #reduceFor:)#(134 2 #reduceFor:)#(135 3 #reduceFor:)#(135 2 #reduceFor:)#(135 3 #reduceFor:)#(135 3 #reduceFor:)#(135 4 #reduceFor:)#(135 2 #reduceFor:)#(135 3 #reduceFor:)#(135 3 #reduceFor:)#(135 4 #reduceFor:)#(136 1 #reduceFor:)#(136 3 #reduceFor:)#(137 3 #reduceFor:)#(137 4 #reduceFor:)#(137 3 #reduceFor:)#(138 2 #reduceFor:)#(138 3 #reduceFor:)#(138 3 #reduceFor:)#(138 4 #reduceFor:)#(139 1 #reduceFor:)#(139 2 #reduceFor:)#(140 5 #reduceFor:)#(140 7 #reduceFor:)#(140 5 #reduceFor:)#(141 5 #reduceFor:)#(141 7 #reduceFor:)#(141 6 #reduceFor:)#(141 7 #reduceFor:)#(142 3 #reduceFor:)#(142 2 #reduceFor:)#(142 2 #reduceFor:)#(142 2 #reduceFor:)#(142 3 #reduceFor:)#(143 1 #reduceFor:)#(143 1 #reduceFor:)#(143 1 #reduceFor:)#(143 1 #reduceFor:)#(143 1 #reduceFor:)#(143 1 #reduceFor:)#(144 1 #reduceFor:)#(144 2 #reduceFor:)#(145 1 #reduceFor:)#(145 2 #reduceFor:)#(146 4 #reduceFor:)#(146 3 #reduceFor:)#(146 3 #reduceFor:)#(146 2 #reduceFor:)#(150 1 #reduceFor:)#(150 3 #reduceFor:)#(150 4 #reduceFor:))</body><body package="SmaCC Example Parsers" selector="transitionTable">transitionTable	^#(#[1 0 9 0 27 0 13 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 93 0 76 0 97 0 105 0 101 0 107 0 105 0 108 0 109 0 109 0 113 0 110 0 117 0 112 0 121 0 114 0 125 0 115 0 129 0 116 0 133 0 119 0 137 0 126 0 141 0 127 0 145 0 132 0 149 0 146 0 153 0 149]#[1 0 9 0 27 0 13 0 36 0 93 0 76 0 157 0 112 0 137 0 126 0 141 0 127]#[1 2 38 0 21 2 38 0 26 2 38 0 27 0 13 0 36 0 17 0 41 0 21 0 42 2 38 0 76 2 38 0 79 0 161 0 110 0 165 0 126 0 169 0 130]#[0 1 158 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 154 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[1 0 173 0 76 0 177 0 81]#[0 1 214 0 76 0 81]#[0 1 210 0 76 0 81]#[0 1 134 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 138 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 130 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 90 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 86 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 94 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 126 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 122 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 118 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 114 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 110 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 106 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 102 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 98 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 2 54 0 15 0 16 0 21 0 26 0 27 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 79 0 81 0 149]#[1 0 9 0 27 0 13 0 36 0 181 0 60 0 93 0 76 0 185 0 106 0 189 0 111 0 193 0 112 0 137 0 126 0 141 0 127]#[0 2 118 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 147 0 149]#[1 1 46 0 21 1 46 0 26 1 46 0 27 1 46 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 1 46 0 60 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 1 46 0 76 1 46 0 79 0 197 0 105 0 105 0 108 0 109 0 109 0 113 0 110 0 121 0 114 0 125 0 115 0 129 0 116 0 153 0 149]#[1 1 54 0 21 1 54 0 26 1 54 0 27 1 54 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 1 54 0 60 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 1 54 0 76 1 54 0 79 0 201 0 105 0 105 0 108 0 109 0 109 0 113 0 110 0 121 0 114 0 125 0 115 0 129 0 116 0 153 0 149]#[1 1 62 0 21 1 62 0 26 1 62 0 27 1 62 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 1 62 0 60 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 1 62 0 76 1 62 0 79 0 205 0 105 0 105 0 108 0 109 0 109 0 113 0 110 0 121 0 114 0 125 0 115 0 129 0 116 0 153 0 149]#[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 209 0 81 0 213 0 105 0 217 0 107 0 105 0 108 0 109 0 109 0 113 0 110 0 121 0 114 0 125 0 115 0 129 0 116 0 221 0 138 0 225 0 145 0 153 0 149]#[0 1 142 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 146 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[1 0 229 0 76 0 233 0 81]#[1 0 9 0 27 0 13 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 93 0 76 0 97 0 105 0 101 0 107 0 105 0 108 0 109 0 109 0 113 0 110 0 117 0 112 0 121 0 114 0 125 0 115 0 129 0 116 0 137 0 126 0 141 0 127 0 237 0 132 0 149 0 146 0 0 0 147 0 153 0 149]#[1 0 9 0 27 0 93 0 76 0 241 0 127]#[1 1 174 0 15 1 174 0 16 1 174 0 21 1 174 0 26 0 245 0 27 1 174 0 41 1 174 0 42 1 174 0 43 1 174 0 44 1 174 0 45 1 174 0 47 1 174 0 55 1 174 0 57 1 174 0 58 1 174 0 59 1 174 0 60 1 174 0 65 1 174 0 66 1 174 0 67 1 174 0 68 1 174 0 69 1 174 0 70 1 174 0 71 1 174 0 72 1 174 0 73 0 249 0 79 1 174 0 81 1 174 0 149]#[0 1 230 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 147 0 149]#[0 2 114 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 147 0 149]#[0 1 150 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 0 253 0 26]#[0 2 98 0 21 0 26 0 27 0 36 0 41 0 42 0 76 0 79]#[0 2 46 0 21 0 26 0 27 0 76 0 79]#[1 2 42 0 21 2 42 0 26 2 42 0 27 0 13 0 36 0 17 0 41 0 21 0 42 2 42 0 76 2 42 0 79 1 1 0 110 1 5 0 126]#[1 1 206 0 16 1 206 0 21 1 206 0 26 1 206 0 27 1 206 0 36 1 206 0 41 1 206 0 42 1 206 0 43 1 206 0 44 1 206 0 45 1 206 0 47 1 206 0 55 1 206 0 57 1 206 0 58 1 206 0 59 1 206 0 60 1 206 0 65 1 206 0 66 1 206 0 67 1 206 0 68 1 206 0 69 1 206 0 70 1 206 0 71 1 206 0 72 1 206 0 73 1 206 0 76 1 206 0 79 1 9 0 81 1 206 0 149]#[1 1 13 0 76 1 17 0 124 1 21 0 125]#[0 1 78 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 147 0 149]#[1 1 25 0 21 1 29 0 60]#[0 1 70 0 21 0 60]#[1 1 33 0 15 1 162 0 21 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 1 162 0 60 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 209 0 81 0 213 0 105 0 217 0 107 0 105 0 108 0 109 0 109 0 113 0 110 0 121 0 114 0 125 0 115 0 129 0 116 1 37 0 138 1 41 0 145 0 153 0 149]#[0 1 50 0 21 0 26 0 27 0 36 0 60 0 76 0 79]#[0 1 58 0 21 0 26 0 27 0 36 0 60 0 76 0 79]#[0 1 66 0 21 0 26 0 27 0 36 0 60 0 76 0 79]#[1 1 45 0 19 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 89 0 38 1 93 0 39 1 97 0 40 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 1 101 0 48 1 105 0 49 1 109 0 50 1 113 0 51 1 117 0 52 1 121 0 53 1 125 0 54 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 1 129 0 60 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 1 133 0 76 1 137 0 77 1 141 0 78 0 209 0 81 1 145 0 82 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 0 213 0 105 0 217 0 107 0 105 0 108 0 109 0 109 0 113 0 110 1 217 0 113 0 121 0 114 0 125 0 115 0 129 0 116 1 221 0 137 1 225 0 138 1 229 0 139 1 233 0 140 1 237 0 141 1 241 0 142 1 245 0 143 1 249 0 144 1 253 0 145 0 153 0 149]#[1 0 9 0 27 0 13 0 36 0 181 0 60 0 93 0 76 0 185 0 106 0 189 0 111 2 1 0 112 0 137 0 126 0 141 0 127]#[0 3 50 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 149]#[0 3 70 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 147 0 149]#[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 209 0 81 0 213 0 105 2 5 0 107 0 105 0 108 0 109 0 109 0 113 0 110 0 121 0 114 0 125 0 115 0 129 0 116 2 9 0 138 0 153 0 149]#[1 1 194 0 16 1 194 0 21 1 194 0 26 1 194 0 27 1 194 0 36 1 194 0 41 1 194 0 42 1 194 0 43 1 194 0 44 1 194 0 45 1 194 0 47 1 194 0 55 1 194 0 57 1 194 0 58 1 194 0 59 1 194 0 60 1 194 0 65 1 194 0 66 1 194 0 67 1 194 0 68 1 194 0 69 1 194 0 70 1 194 0 71 1 194 0 72 1 194 0 73 1 194 0 76 1 194 0 79 2 13 0 81 1 194 0 149]#[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 2 17 0 109 2 21 0 110 0 121 0 114 0 125 0 115 0 129 0 116 2 25 0 118 2 29 0 120 2 33 0 121 0 153 0 149]#[0 1 234 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 147 0 149]#[1 1 170 0 15 1 170 0 16 1 170 0 21 1 170 0 26 0 245 0 27 1 170 0 41 1 170 0 42 1 170 0 43 1 170 0 44 1 170 0 45 1 170 0 47 1 170 0 55 1 170 0 57 1 170 0 58 1 170 0 59 1 170 0 60 1 170 0 65 1 170 0 66 1 170 0 67 1 170 0 68 1 170 0 69 1 170 0 70 1 170 0 71 1 170 0 72 1 170 0 73 0 249 0 79 1 170 0 81 1 170 0 149]#[1 2 37 0 26 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 2 41 0 76 2 45 0 105 0 105 0 108 0 109 0 109 0 113 0 110 0 121 0 114 0 125 0 115 0 129 0 116 2 49 0 128 2 53 0 129 2 57 0 131 2 61 0 133 0 153 0 149]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 2 69 0 80 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 2 77 0 102 2 81 0 104]#[0 2 58 0 15 0 16 0 21 0 26 0 27 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 79 0 81 0 149]#[0 2 102 0 21 0 26 0 27 0 36 0 41 0 42 0 76 0 79]#[0 2 50 0 21 0 26 0 27 0 76 0 79]#[1 1 13 0 76 2 85 0 124 1 21 0 125]#[1 2 89 0 15 2 30 0 21 2 30 0 82]#[1 2 93 0 21 2 97 0 82]#[0 2 22 0 21 0 82]#[1 0 9 0 27 0 13 0 36 0 93 0 76 2 101 0 111 2 1 0 112 0 137 0 126 0 141 0 127]#[0 1 82 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 147 0 149]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 2 105 0 81 1 149 0 84 1 153 0 85 2 109 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 2 113 0 150]#[0 3 62 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 147 0 149]#[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 209 0 81 0 213 0 105 2 5 0 107 0 105 0 108 0 109 0 109 0 113 0 110 0 121 0 114 0 125 0 115 0 129 0 116 2 117 0 138 0 153 0 149]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 121 0 60 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 2 125 0 113]#[1 1 49 0 20 1 53 0 22 1 57 0 23 2 129 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 133 0 88 1 165 0 89]#[1 1 49 0 20 1 53 0 22 1 57 0 23 2 137 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 141 0 88 1 165 0 89]#[1 1 49 0 20 1 53 0 22 1 57 0 23 2 137 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 145 0 88 1 165 0 89]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 2 149 0 91 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 2 17 0 109 2 21 0 110 2 153 0 113 0 121 0 114 0 125 0 115 0 129 0 116 2 157 0 121 0 153 0 149]#[0 0 94 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 0 114 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 0 110 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 0 106 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 0 102 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 0 98 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 2 161 0 27]#[0 2 165 0 16]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 2 77 0 102 2 169 0 104]#[0 2 173 0 60]#[0 2 177 0 60]#[0 2 181 0 76]#[0 2 185 0 27]#[1 1 45 0 19 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 89 0 38 1 93 0 39 1 97 0 40 1 101 0 48 1 105 0 49 1 109 0 50 1 113 0 51 1 117 0 52 1 121 0 53 1 125 0 54 1 129 0 60 1 133 0 76 1 137 0 77 1 141 0 78 0 209 0 81 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 1 217 0 113 1 221 0 137 1 225 0 138 1 229 0 139 1 233 0 140 1 237 0 141 1 241 0 142 2 189 0 143]#[0 2 193 0 27]#[0 2 197 0 27]#[0 2 218 0 19 0 20 0 22 0 23 0 26 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[1 0 38 0 1 0 38 0 2 0 38 0 3 0 38 0 4 0 38 0 5 0 38 0 6 0 38 0 7 0 38 0 8 0 38 0 9 0 38 0 10 0 38 0 11 0 38 0 12 0 38 0 13 0 38 0 14 0 38 0 15 2 201 0 16 0 38 0 17 0 38 0 18 0 38 0 21 0 38 0 22 0 38 0 23 0 38 0 24 0 38 0 25 0 38 0 27 0 38 0 28 0 38 0 29 0 38 0 30 0 38 0 31 0 38 0 34 0 38 0 35 0 38 0 36 0 38 0 37 0 38 0 56 0 38 0 60 0 38 0 61 0 38 0 62 0 38 0 63 0 38 0 64 0 38 0 79]#[0 0 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82]#[0 0 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82]#[0 2 202 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 147 0 149]#[1 0 70 0 1 0 70 0 2 0 70 0 3 0 70 0 4 0 70 0 5 0 70 0 6 0 70 0 7 0 70 0 8 0 70 0 9 0 70 0 10 0 70 0 11 0 70 0 12 0 70 0 13 0 70 0 14 0 70 0 15 0 70 0 16 0 70 0 17 0 70 0 18 0 70 0 21 2 205 0 22 2 209 0 23 2 213 0 24 2 217 0 25 0 70 0 26 2 221 0 27 0 70 0 28 0 70 0 29 0 70 0 30 0 70 0 31 0 70 0 34 0 70 0 35 0 70 0 36 0 70 0 37 0 70 0 56 0 70 0 60 0 70 0 61 0 70 0 62 0 70 0 63 0 70 0 64 2 225 0 79 0 70 0 80 0 70 0 82]#[0 0 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82]#[0 1 178 0 16 0 21 0 26 0 60 0 80]#[1 0 118 0 1 0 118 0 2 0 118 0 3 0 118 0 4 0 118 0 5 0 118 0 6 0 118 0 7 0 118 0 8 0 118 0 9 0 118 0 10 2 229 0 11 2 233 0 12 2 237 0 13 2 241 0 14 2 245 0 15 0 118 0 16 0 118 0 17 0 118 0 18 0 118 0 21 0 118 0 26 0 118 0 28 0 118 0 29 0 118 0 30 0 118 0 31 0 118 0 34 0 118 0 35 0 118 0 36 2 249 0 37 2 253 0 56 0 118 0 60 3 1 0 61 3 5 0 62 3 9 0 63 3 13 0 64 0 118 0 80 0 118 0 82 3 17 0 103]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 3 21 0 90]#[0 0 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 60 0 80 0 82]#[1 0 150 0 1 0 150 0 2 0 150 0 3 0 150 0 4 0 150 0 5 0 150 0 6 0 150 0 7 0 150 0 8 0 150 0 9 0 150 0 10 0 150 0 16 0 150 0 17 0 150 0 18 0 150 0 21 0 150 0 26 0 150 0 28 0 150 0 29 3 25 0 30 3 29 0 31 0 150 0 34 0 150 0 35 3 33 0 36 0 150 0 60 0 150 0 80 0 150 0 82]#[1 0 162 0 1 0 162 0 2 0 162 0 3 0 162 0 4 0 162 0 5 0 162 0 6 0 162 0 7 0 162 0 8 0 162 0 9 0 162 0 10 0 162 0 16 0 162 0 17 0 162 0 18 0 162 0 21 0 162 0 26 0 162 0 28 0 162 0 29 3 37 0 34 3 41 0 35 0 162 0 60 0 162 0 80 0 162 0 82]#[1 0 174 0 1 0 174 0 2 0 174 0 3 0 174 0 4 0 174 0 5 0 174 0 6 0 174 0 7 0 174 0 8 0 174 0 9 3 45 0 10 0 174 0 16 0 174 0 17 0 174 0 18 0 174 0 21 0 174 0 26 0 174 0 28 3 49 0 29 0 174 0 60 0 174 0 80 0 174 0 82]#[1 0 194 0 1 0 194 0 2 0 194 0 3 0 194 0 4 0 194 0 5 3 53 0 6 3 57 0 7 3 61 0 8 0 194 0 9 0 194 0 16 0 194 0 17 3 65 0 18 0 194 0 21 0 194 0 26 0 194 0 28 0 194 0 60 0 194 0 80 0 194 0 82]#[1 0 206 0 1 0 206 0 2 0 206 0 3 3 69 0 4 3 73 0 5 0 206 0 9 0 206 0 16 0 206 0 17 0 206 0 21 0 206 0 26 0 206 0 28 0 206 0 60 0 206 0 80 0 206 0 82]#[1 0 214 0 1 0 214 0 2 0 214 0 3 0 214 0 9 0 214 0 16 0 214 0 17 0 214 0 21 0 214 0 26 3 77 0 28 0 214 0 60 0 214 0 80 0 214 0 82]#[1 0 222 0 1 0 222 0 2 3 81 0 3 0 222 0 9 0 222 0 16 0 222 0 17 0 222 0 21 0 222 0 26 0 222 0 60 0 222 0 80 0 222 0 82]#[1 0 230 0 1 3 85 0 2 0 230 0 9 0 230 0 16 0 230 0 17 0 230 0 21 0 230 0 26 0 230 0 60 0 230 0 80 0 230 0 82]#[1 3 89 0 1 0 238 0 9 0 238 0 16 0 238 0 17 0 238 0 21 0 238 0 26 0 238 0 60 0 238 0 80 0 238 0 82]#[1 3 93 0 9 0 246 0 16 3 97 0 17 0 246 0 21 0 246 0 26 0 246 0 60 0 246 0 80 0 246 0 82]#[0 0 62 0 16 0 21 0 26 0 60 0 80 0 82]#[1 3 101 0 21 3 105 0 60]#[0 3 18 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 3 22 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 3 26 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 3 30 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 3 34 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 3 38 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 3 42 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[1 1 45 0 19 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 89 0 38 1 93 0 39 1 97 0 40 1 101 0 48 1 105 0 49 1 109 0 50 1 113 0 51 1 117 0 52 1 121 0 53 1 125 0 54 1 129 0 60 1 133 0 76 1 137 0 77 1 141 0 78 0 209 0 81 3 109 0 82 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 1 217 0 113 1 221 0 137 1 225 0 138 1 229 0 139 1 233 0 140 1 237 0 141 1 241 0 142 3 113 0 143]#[1 1 45 0 19 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 89 0 38 1 93 0 39 1 97 0 40 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 1 101 0 48 1 105 0 49 1 109 0 50 1 113 0 51 1 117 0 52 1 121 0 53 1 125 0 54 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 1 129 0 60 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 1 133 0 76 1 137 0 77 1 141 0 78 0 209 0 81 3 117 0 82 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 0 213 0 105 2 5 0 107 0 105 0 108 0 109 0 109 0 113 0 110 1 217 0 113 0 121 0 114 0 125 0 115 0 129 0 116 1 221 0 137 1 225 0 138 1 229 0 139 1 233 0 140 1 237 0 141 1 241 0 142 1 245 0 143 3 121 0 144 0 153 0 149]#[1 1 33 0 15 1 162 0 21 1 162 0 60]#[0 3 54 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 149]#[0 3 66 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 147 0 149]#[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 2 17 0 109 2 21 0 110 0 121 0 114 0 125 0 115 0 129 0 116 3 125 0 118 2 29 0 120 2 33 0 121 0 153 0 149]#[1 1 246 0 16 1 246 0 26 1 246 0 27 1 246 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 1 246 0 76 1 246 0 79 2 17 0 109 2 21 0 110 0 121 0 114 0 125 0 115 0 129 0 116 3 129 0 121 0 153 0 149]#[1 1 254 0 16 1 254 0 26 1 254 0 27 1 254 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 1 254 0 76 1 254 0 79 2 17 0 109 2 21 0 110 0 121 0 114 0 125 0 115 0 129 0 116 3 133 0 121 0 153 0 149]#[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 3 137 0 82 2 17 0 109 2 21 0 110 0 121 0 114 0 125 0 115 0 129 0 116 3 141 0 120 2 33 0 121 0 153 0 149]#[0 1 222 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 66 0 67 0 68 0 69 0 70 0 71 0 82 0 149]#[1 3 145 0 16 0 9 0 27 0 13 0 36 0 93 0 76 3 149 0 112 3 153 0 122 3 157 0 123 0 137 0 126 0 141 0 127]#[0 2 78 0 15 0 16 0 21 0 26 0 27 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 79 0 81 0 149]#[0 2 90 0 21 0 26]#[1 2 130 0 21 2 130 0 26 3 161 0 27 0 13 0 36 0 93 0 76 3 165 0 79 3 169 0 112 3 173 0 126 0 141 0 127 3 177 0 134 3 181 0 135]#[0 3 185 0 26]#[1 3 189 0 21 3 193 0 26]#[1 3 197 0 21 2 82 0 26]#[0 2 106 0 21 0 26]#[0 0 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82]#[0 2 66 0 15 0 16 0 21 0 26 0 27 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 79 0 81 0 149]#[0 0 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 80 0 82]#[0 1 42 0 16 0 21 0 60 0 80 0 82]#[0 3 201 0 80]#[1 2 93 0 21 3 205 0 82]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 2 77 0 102 3 209 0 104]#[1 1 13 0 76 3 213 0 125]#[0 1 198 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 74 0 21 0 60]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 2 105 0 81 1 149 0 84 1 153 0 85 2 109 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 3 217 0 136 3 221 0 150]#[0 3 74 0 21 0 60 0 82]#[0 1 166 0 21 0 60]#[0 3 58 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 147 0 149]#[0 3 10 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[1 3 101 0 21 3 225 0 60]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 3 229 0 91 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 2 17 0 109 2 21 0 110 2 153 0 113 0 121 0 114 0 125 0 115 0 129 0 116 2 157 0 121 0 153 0 149]#[0 0 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 80 0 82]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 2 153 0 113]#[0 0 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 80 0 82]#[0 0 74 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 80 0 82]#[0 3 233 0 26]#[1 3 101 0 21 3 237 0 26]#[1 0 126 0 26 3 241 0 27 0 13 0 36 3 165 0 79 3 245 0 126 3 249 0 134 3 181 0 135]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 3 253 0 113]#[1 1 45 0 19 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 89 0 38 1 93 0 39 1 97 0 40 1 101 0 48 1 105 0 49 1 109 0 50 1 113 0 51 1 117 0 52 1 121 0 53 1 125 0 54 1 129 0 60 1 133 0 76 1 137 0 77 1 141 0 78 0 209 0 81 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 1 217 0 113 1 221 0 137 1 225 0 138 1 229 0 139 1 233 0 140 1 237 0 141 1 241 0 142 4 1 0 143]#[0 4 5 0 16]#[0 3 6 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 3 2 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 4 9 0 60]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 129 0 60 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 1 217 0 113 4 13 0 139]#[0 4 17 0 53]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 4 21 0 113]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 4 25 0 113]#[1 1 45 0 19 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 89 0 38 1 93 0 39 1 97 0 40 1 101 0 48 1 105 0 49 1 109 0 50 1 113 0 51 1 117 0 52 1 121 0 53 1 125 0 54 1 129 0 60 1 133 0 76 1 137 0 77 1 141 0 78 0 209 0 81 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 1 217 0 113 1 221 0 137 1 225 0 138 1 229 0 139 1 233 0 140 1 237 0 141 1 241 0 142 4 29 0 143]#[0 0 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82]#[0 0 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82]#[0 4 33 0 76]#[0 4 37 0 76]#[1 1 49 0 20 1 53 0 22 1 57 0 23 4 41 0 26 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 4 45 0 86 4 49 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 4 53 0 113]#[0 1 14 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 1 10 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 1 6 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 1 2 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 0 254 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 1 18 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 1 22 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 1 38 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 1 34 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 1 30 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[0 1 26 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 4 57 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102]#[0 0 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 80 0 82]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 4 61 0 90]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 4 65 0 90]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 4 69 0 90]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 4 73 0 92]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 4 77 0 92]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 4 81 0 93]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 4 85 0 93]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 4 89 0 94]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 4 93 0 94]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 4 97 0 94]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 4 101 0 94]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 4 105 0 95]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 4 109 0 95]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 4 113 0 96]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 4 117 0 97]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 4 121 0 98]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 4 125 0 99]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 4 129 0 100]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 4 133 0 113]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 4 137 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102]#[0 2 222 0 19 0 20 0 22 0 23 0 26 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 2 206 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 147 0 149]#[0 3 46 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 2 210 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 147 0 149]#[1 1 45 0 19 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 89 0 38 1 93 0 39 1 97 0 40 1 101 0 48 1 105 0 49 1 109 0 50 1 113 0 51 1 117 0 52 1 121 0 53 1 125 0 54 1 129 0 60 1 133 0 76 1 137 0 77 1 141 0 78 0 209 0 81 4 141 0 82 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 1 217 0 113 1 221 0 137 1 225 0 138 1 229 0 139 1 233 0 140 1 237 0 141 1 241 0 142 3 113 0 143]#[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 4 145 0 82 2 17 0 109 2 21 0 110 0 121 0 114 0 125 0 115 0 129 0 116 3 141 0 120 2 33 0 121 0 153 0 149]#[0 1 242 0 16 0 26 0 27 0 36 0 76 0 79]#[0 1 250 0 16 0 26 0 27 0 36 0 76 0 79]#[0 1 190 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 1 226 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 66 0 67 0 68 0 69 0 70 0 71 0 82 0 149]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 2 77 0 102 4 149 0 104]#[1 4 153 0 16 2 10 0 21 2 10 0 60]#[1 4 157 0 21 4 161 0 60]#[0 2 2 0 21 0 60]#[1 4 165 0 26 3 161 0 27 0 13 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 93 0 76 3 165 0 79 2 45 0 105 0 105 0 108 0 109 0 109 0 113 0 110 0 157 0 112 0 121 0 114 0 125 0 115 0 129 0 116 3 173 0 126 0 141 0 127 4 169 0 128 2 57 0 131 2 61 0 133 4 173 0 134 3 181 0 135 0 153 0 149]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 4 177 0 80 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 2 77 0 102 4 181 0 104]#[0 2 122 0 21 0 26]#[1 2 134 0 21 2 134 0 26 3 161 0 27 0 93 0 76 3 165 0 79 0 241 0 127 4 185 0 135]#[0 2 126 0 21 0 26]#[1 2 138 0 21 2 138 0 26 4 189 0 27 4 193 0 79]#[0 2 70 0 15 0 16 0 21 0 26 0 27 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 79 0 81 0 149]#[0 4 197 0 76]#[0 2 74 0 15 0 16 0 21 0 26 0 27 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 79 0 81 0 149]#[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 4 201 0 74 2 45 0 105 0 105 0 108 0 109 0 109 0 113 0 110 0 121 0 114 0 125 0 115 0 129 0 116 4 205 0 133 0 153 0 149]#[0 2 62 0 15 0 16 0 21 0 26 0 27 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 79 0 81 0 149]#[0 1 202 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 2 34 0 21 0 82]#[0 2 26 0 21 0 82]#[1 4 209 0 21 4 213 0 82]#[0 2 182 0 21 0 82]#[0 3 14 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 4 217 0 26]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 4 221 0 90]#[0 0 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82]#[1 4 165 0 26 3 241 0 27 0 13 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 3 165 0 79 2 45 0 105 0 105 0 108 0 109 0 109 0 113 0 110 0 121 0 114 0 125 0 115 0 129 0 116 3 245 0 126 4 169 0 128 2 57 0 131 2 61 0 133 4 173 0 134 3 181 0 135 0 153 0 149]#[1 2 134 0 26 3 241 0 27 3 165 0 79 4 185 0 135]#[0 0 130 0 26]#[1 3 101 0 21 4 225 0 26]#[0 2 198 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[1 1 45 0 19 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 89 0 38 1 93 0 39 1 97 0 40 1 101 0 48 1 105 0 49 1 109 0 50 1 113 0 51 1 117 0 52 1 121 0 53 1 125 0 54 1 129 0 60 1 133 0 76 1 137 0 77 1 141 0 78 0 209 0 81 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 1 217 0 113 1 221 0 137 1 225 0 138 1 229 0 139 1 233 0 140 1 237 0 141 1 241 0 142 4 229 0 143]#[0 2 254 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 129 0 60 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 1 217 0 113 4 233 0 139]#[0 4 237 0 27]#[1 3 101 0 21 4 241 0 26]#[1 3 101 0 21 4 245 0 26]#[0 2 190 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 0 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82]#[0 0 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82]#[0 0 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82]#[1 4 249 0 21 4 253 0 26]#[0 0 54 0 21 0 26]#[1 3 101 0 21 5 1 0 80]#[0 0 66 0 16 0 21 0 26 0 60 0 80 0 82]#[0 0 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 60 0 80 0 82]#[0 0 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 60 0 80 0 82]#[0 0 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 60 0 80 0 82]#[1 0 158 0 1 0 158 0 2 0 158 0 3 0 158 0 4 0 158 0 5 0 158 0 6 0 158 0 7 0 158 0 8 0 158 0 9 0 158 0 10 0 158 0 16 0 158 0 17 0 158 0 18 0 158 0 21 0 158 0 26 0 158 0 28 0 158 0 29 3 25 0 30 3 29 0 31 0 158 0 34 0 158 0 35 3 33 0 36 0 158 0 60 0 158 0 80 0 158 0 82]#[1 0 154 0 1 0 154 0 2 0 154 0 3 0 154 0 4 0 154 0 5 0 154 0 6 0 154 0 7 0 154 0 8 0 154 0 9 0 154 0 10 0 154 0 16 0 154 0 17 0 154 0 18 0 154 0 21 0 154 0 26 0 154 0 28 0 154 0 29 3 25 0 30 3 29 0 31 0 154 0 34 0 154 0 35 3 33 0 36 0 154 0 60 0 154 0 80 0 154 0 82]#[1 0 170 0 1 0 170 0 2 0 170 0 3 0 170 0 4 0 170 0 5 0 170 0 6 0 170 0 7 0 170 0 8 0 170 0 9 0 170 0 10 0 170 0 16 0 170 0 17 0 170 0 18 0 170 0 21 0 170 0 26 0 170 0 28 0 170 0 29 3 37 0 34 3 41 0 35 0 170 0 60 0 170 0 80 0 170 0 82]#[1 0 166 0 1 0 166 0 2 0 166 0 3 0 166 0 4 0 166 0 5 0 166 0 6 0 166 0 7 0 166 0 8 0 166 0 9 0 166 0 10 0 166 0 16 0 166 0 17 0 166 0 18 0 166 0 21 0 166 0 26 0 166 0 28 0 166 0 29 3 37 0 34 3 41 0 35 0 166 0 60 0 166 0 80 0 166 0 82]#[1 0 190 0 1 0 190 0 2 0 190 0 3 0 190 0 4 0 190 0 5 0 190 0 6 0 190 0 7 0 190 0 8 0 190 0 9 3 45 0 10 0 190 0 16 0 190 0 17 0 190 0 18 0 190 0 21 0 190 0 26 0 190 0 28 3 49 0 29 0 190 0 60 0 190 0 80 0 190 0 82]#[1 0 186 0 1 0 186 0 2 0 186 0 3 0 186 0 4 0 186 0 5 0 186 0 6 0 186 0 7 0 186 0 8 0 186 0 9 3 45 0 10 0 186 0 16 0 186 0 17 0 186 0 18 0 186 0 21 0 186 0 26 0 186 0 28 3 49 0 29 0 186 0 60 0 186 0 80 0 186 0 82]#[1 0 182 0 1 0 182 0 2 0 182 0 3 0 182 0 4 0 182 0 5 0 182 0 6 0 182 0 7 0 182 0 8 0 182 0 9 3 45 0 10 0 182 0 16 0 182 0 17 0 182 0 18 0 182 0 21 0 182 0 26 0 182 0 28 3 49 0 29 0 182 0 60 0 182 0 80 0 182 0 82]#[1 0 178 0 1 0 178 0 2 0 178 0 3 0 178 0 4 0 178 0 5 0 178 0 6 0 178 0 7 0 178 0 8 0 178 0 9 3 45 0 10 0 178 0 16 0 178 0 17 0 178 0 18 0 178 0 21 0 178 0 26 0 178 0 28 3 49 0 29 0 178 0 60 0 178 0 80 0 178 0 82]#[1 0 202 0 1 0 202 0 2 0 202 0 3 0 202 0 4 0 202 0 5 3 53 0 6 3 57 0 7 3 61 0 8 0 202 0 9 0 202 0 16 0 202 0 17 3 65 0 18 0 202 0 21 0 202 0 26 0 202 0 28 0 202 0 60 0 202 0 80 0 202 0 82]#[1 0 198 0 1 0 198 0 2 0 198 0 3 0 198 0 4 0 198 0 5 3 53 0 6 3 57 0 7 3 61 0 8 0 198 0 9 0 198 0 16 0 198 0 17 3 65 0 18 0 198 0 21 0 198 0 26 0 198 0 28 0 198 0 60 0 198 0 80 0 198 0 82]#[1 0 210 0 1 0 210 0 2 0 210 0 3 3 69 0 4 3 73 0 5 0 210 0 9 0 210 0 16 0 210 0 17 0 210 0 21 0 210 0 26 0 210 0 28 0 210 0 60 0 210 0 80 0 210 0 82]#[1 0 218 0 1 0 218 0 2 0 218 0 3 0 218 0 9 0 218 0 16 0 218 0 17 0 218 0 21 0 218 0 26 3 77 0 28 0 218 0 60 0 218 0 80 0 218 0 82]#[1 0 226 0 1 0 226 0 2 3 81 0 3 0 226 0 9 0 226 0 16 0 226 0 17 0 226 0 21 0 226 0 26 0 226 0 60 0 226 0 80 0 226 0 82]#[1 0 234 0 1 3 85 0 2 0 234 0 9 0 234 0 16 0 234 0 17 0 234 0 21 0 234 0 26 0 234 0 60 0 234 0 80 0 234 0 82]#[1 3 89 0 1 0 242 0 9 0 242 0 16 0 242 0 17 0 242 0 21 0 242 0 26 0 242 0 60 0 242 0 80 0 242 0 82]#[1 5 5 0 16 3 101 0 21]#[0 1 182 0 16 0 21 0 26 0 60 0 80]#[0 2 214 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 147 0 149]#[0 1 186 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 149]#[0 2 14 0 21 0 60]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 2 77 0 102 5 9 0 104]#[1 3 145 0 16 0 9 0 27 0 13 0 36 0 93 0 76 3 149 0 112 5 13 0 123 0 137 0 126 0 141 0 127]#[0 1 238 0 41 0 42 0 43 0 44 0 45 0 47 0 55 0 57 0 66 0 67 0 68 0 69 0 70 0 71 0 82 0 149]#[0 2 166 0 21 0 26 0 27 0 79]#[0 5 17 0 26]#[0 5 21 0 26]#[0 2 150 0 21 0 26 0 27 0 79]#[0 5 25 0 80]#[1 2 142 0 21 2 142 0 26 4 189 0 27 4 193 0 79]#[1 5 29 0 26 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 55 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 2 45 0 105 0 105 0 108 0 109 0 109 0 113 0 110 0 121 0 114 0 125 0 115 0 129 0 116 5 33 0 128 2 57 0 131 2 61 0 133 0 153 0 149]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 5 37 0 80 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 2 77 0 102 5 41 0 104]#[0 2 94 0 21 0 26]#[0 2 86 0 26]#[0 2 110 0 21 0 26]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 2 105 0 81 5 45 0 82 1 149 0 84 1 153 0 85 2 109 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 5 49 0 150]#[0 3 78 0 21 0 60 0 82]#[0 0 90 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 80 0 82]#[0 0 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 80 0 82]#[1 1 45 0 19 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 89 0 38 1 93 0 39 1 97 0 40 1 101 0 48 1 105 0 49 1 109 0 50 1 113 0 51 1 117 0 52 1 121 0 53 1 125 0 54 1 129 0 60 1 133 0 76 1 137 0 77 1 141 0 78 0 209 0 81 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 1 217 0 113 1 221 0 137 1 225 0 138 1 229 0 139 1 233 0 140 1 237 0 141 1 241 0 142 5 53 0 143]#[0 2 194 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[1 1 49 0 20 1 53 0 22 1 57 0 23 5 57 0 26 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 5 61 0 113]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 5 65 0 113]#[1 1 45 0 19 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 89 0 38 1 93 0 39 1 97 0 40 1 101 0 48 1 105 0 49 1 109 0 50 1 113 0 51 1 117 0 52 1 121 0 53 1 125 0 54 1 129 0 60 1 133 0 76 1 137 0 77 1 141 0 78 0 209 0 81 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 1 217 0 113 1 221 0 137 1 225 0 138 1 229 0 139 1 233 0 140 1 237 0 141 1 241 0 142 5 69 0 143]#[1 1 45 0 19 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 89 0 38 1 93 0 39 1 97 0 40 1 101 0 48 1 105 0 49 1 109 0 50 1 113 0 51 1 117 0 52 1 121 0 53 1 125 0 54 1 129 0 60 1 133 0 76 1 137 0 77 1 141 0 78 0 209 0 81 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 1 217 0 113 1 221 0 137 1 225 0 138 1 229 0 139 1 233 0 140 1 237 0 141 1 241 0 142 5 73 0 143]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 5 77 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102]#[0 0 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82]#[0 0 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 56 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82]#[1 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 2 65 0 76 1 137 0 77 1 141 0 78 1 149 0 84 1 153 0 85 2 73 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 5 81 0 102]#[0 2 18 0 21 0 60]#[0 2 6 0 21 0 60]#[0 2 170 0 21 0 26 0 27 0 79]#[0 2 146 0 21 0 26 0 27 0 79]#[0 2 154 0 21 0 26 0 27 0 79]#[0 2 174 0 21 0 26 0 27 0 79]#[0 5 85 0 26]#[0 2 158 0 21 0 26 0 27 0 79]#[0 5 89 0 80]#[0 3 82 0 21 0 60 0 82]#[0 2 186 0 21 0 82]#[1 2 226 0 19 2 226 0 20 2 226 0 22 2 226 0 23 2 226 0 27 2 226 0 28 2 226 0 32 2 226 0 33 2 226 0 34 2 226 0 35 2 226 0 36 2 226 0 38 2 226 0 39 2 226 0 40 5 93 0 46 2 226 0 48 2 226 0 49 2 226 0 50 2 226 0 51 2 226 0 52 2 226 0 53 2 226 0 54 2 226 0 60 2 226 0 76 2 226 0 77 2 226 0 78 2 226 0 81 2 226 0 82]#[1 1 45 0 19 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 89 0 38 1 93 0 39 1 97 0 40 1 101 0 48 1 105 0 49 1 109 0 50 1 113 0 51 1 117 0 52 1 121 0 53 1 125 0 54 1 129 0 60 1 133 0 76 1 137 0 77 1 141 0 78 0 209 0 81 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 1 217 0 113 1 221 0 137 1 225 0 138 1 229 0 139 1 233 0 140 1 237 0 141 1 241 0 142 5 97 0 143]#[1 3 101 0 21 5 101 0 26]#[1 3 101 0 21 5 105 0 26]#[0 2 238 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 2 234 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 0 58 0 21 0 26]#[0 0 250 0 16 0 21 0 26 0 60 0 80 0 82]#[0 2 178 0 21 0 26 0 27 0 79]#[0 2 162 0 21 0 26 0 27 0 79]#[1 1 45 0 19 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 89 0 38 1 93 0 39 1 97 0 40 1 101 0 48 1 105 0 49 1 109 0 50 1 113 0 51 1 117 0 52 1 121 0 53 1 125 0 54 1 129 0 60 1 133 0 76 1 137 0 77 1 141 0 78 0 209 0 81 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 1 217 0 113 1 221 0 137 1 225 0 138 1 229 0 139 1 233 0 140 1 237 0 141 1 241 0 142 5 109 0 143]#[0 2 246 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[1 1 45 0 19 1 49 0 20 1 53 0 22 1 57 0 23 1 61 0 27 1 65 0 28 1 69 0 32 1 73 0 33 1 77 0 34 1 81 0 35 1 85 0 36 1 89 0 38 1 93 0 39 1 97 0 40 1 101 0 48 1 105 0 49 1 109 0 50 1 113 0 51 1 117 0 52 1 121 0 53 1 125 0 54 1 129 0 60 1 133 0 76 1 137 0 77 1 141 0 78 0 209 0 81 1 149 0 84 1 153 0 85 1 157 0 87 1 161 0 88 1 165 0 89 1 169 0 90 1 173 0 92 1 177 0 93 1 181 0 94 1 185 0 95 1 189 0 96 1 193 0 97 1 197 0 98 1 201 0 99 1 205 0 100 1 209 0 101 1 213 0 102 1 217 0 113 1 221 0 137 1 225 0 138 1 229 0 139 1 233 0 140 1 237 0 141 1 241 0 142 5 113 0 143]#[0 5 117 0 60]#[0 2 230 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 2 250 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]#[0 2 242 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82])</body></methods><methods><class-id>Refactory.SmaCC.CParser class</class-id> <category>generated-starting states</category><body package="SmaCC Example Parsers" selector="startingStateFortranslationUnit">startingStateFortranslationUnit	^1</body></methods><methods><class-id>Refactory.SmaCC.CParser class</class-id> <category>generated-accessing</category><body package="SmaCC Example Parsers" selector="scannerClass">scannerClass	^CScanner</body></methods><methods><class-id>Refactory.SmaCC.CParser class</class-id> <category>generated-comments</category><body package="SmaCC Example Parsers" selector="parserDefinitionComment">parserDefinitionComment	"%id &lt;TypeName&gt; &lt;IDENTIFIER&gt; &lt;CONSTANT&gt; ;translationUnit	: external_declaration	| translationUnit external_declaration	;primary_expression	: &lt;IDENTIFIER&gt;	| &lt;CONSTANT&gt;	| &lt;STRING_LITERAL&gt;	| ""("" expression "")""	;postfix_expression	: primary_expression	| postfix_expression &lt;LEFT_BLOCK&gt; expression &lt;RIGHT_BLOCK&gt;	| postfix_expression ""("" "")""	| postfix_expression ""("" argument_expression_list "")""	| postfix_expression ""."" &lt;IDENTIFIER&gt;	| postfix_expression ""-&gt;"" &lt;IDENTIFIER&gt;	| postfix_expression ""++""	| postfix_expression ""--""	;argument_expression_list	: assignment_expression	| argument_expression_list "","" assignment_expression	;unary_expression	: postfix_expression	| ""++"" unary_expression	| ""--"" unary_expression	| unary_operator cast_expression	| ""sizeof"" unary_expression	| ""sizeof"" ""("" type_name "")""	;unary_operator	: ""&amp;""	| ""*""	| ""+""	| ""-""	| ""~""	| ""!""	;cast_expression	: unary_expression	| ""("" type_name "")"" cast_expression	;multiplicative_expression	: cast_expression	| multiplicative_expression ""*"" cast_expression	| multiplicative_expression ""/"" cast_expression	| multiplicative_expression ""%"" cast_expression	;additive_expression	: multiplicative_expression	| additive_expression ""+"" multiplicative_expression	| additive_expression ""-"" multiplicative_expression	;shift_expression	: additive_expression	| shift_expression ""&lt;&lt;"" additive_expression	| shift_expression ""&gt;&gt;"" additive_expression	;relational_expression	: shift_expression	| relational_expression ""&lt;"" shift_expression	| relational_expression ""&gt;"" shift_expression	| relational_expression ""&lt;="" shift_expression	| relational_expression ""&gt;="" shift_expression	;equality_expression	: relational_expression	| equality_expression ""=="" relational_expression	| equality_expression ""!="" relational_expression	;and_expression	: equality_expression	| and_expression ""&amp;"" equality_expression	;exclusive_or_expression	: and_expression	| exclusive_or_expression ""^"" and_expression	;inclusive_or_expression	: exclusive_or_expression	| inclusive_or_expression ""|"" exclusive_or_expression	;logical_and_expression	: inclusive_or_expression	| logical_and_expression ""&amp;&amp;"" inclusive_or_expression	;logical_or_expression	: logical_and_expression	| logical_or_expression ""||"" logical_and_expression	;conditional_expression	: logical_or_expression	| logical_or_expression ""?"" expression "":"" conditional_expression	;assignment_expression	: conditional_expression	| unary_expression assignment_operator assignment_expression	;assignment_operator	: ""=""	| ""*=""	| ""/=""	| ""%=""	| ""+=""	| ""-=""	| ""&lt;&lt;=""	| ""&gt;&gt;=""	| ""&amp;=""	| ""^=""	| ""|=""	;expression	: assignment_expression	| expression "","" assignment_expression	;constant_expression	: conditional_expression	;declaration	: declaration_specifiers "";""	| declaration_specifiers init_declarator_list "";""	;declaration_specifiers	: storage_class_specifier	| storage_class_specifier declaration_specifiers	| type_specifier	| type_specifier declaration_specifiers	| type_qualifier	| type_qualifier declaration_specifiers	;init_declarator_list	: init_declarator	| init_declarator_list "","" init_declarator	;init_declarator	: declarator	| declarator ""="" initializer	;storage_class_specifier	: ""typedef""	| ""extern""	| ""static""	| ""auto""	| ""register""	;type_specifier	: ""void""	| ""char""	| ""short""	| ""int""	| ""long""	| ""float""	| ""double""	| ""signed""	| ""unsigned""	| struct_or_union_specifier	| enum_specifier	| &lt;TypeName&gt;	;struct_or_union_specifier	: struct_or_union &lt;IDENTIFIER&gt; &lt;LEFT_BRACE&gt; struct_declaration_list &lt;RIGHT_BRACE&gt; {self addTypeName: '2' value. self reduceFor: nodes}	| struct_or_union &lt;LEFT_BRACE&gt; struct_declaration_list &lt;RIGHT_BRACE&gt;	| struct_or_union &lt;IDENTIFIER&gt; {self addTypeName: '2' value. self reduceFor: nodes}	;struct_or_union	: ""struct""	| ""union""	;struct_declaration_list	: struct_declaration	| struct_declaration_list struct_declaration	;struct_declaration	: specifier_qualifier_list struct_declarator_list "";""	;specifier_qualifier_list	: type_specifier specifier_qualifier_list	| type_specifier	| type_qualifier specifier_qualifier_list	| type_qualifier	;struct_declarator_list	: struct_declarator	| struct_declarator_list "","" struct_declarator	;struct_declarator	: declarator	| "":"" constant_expression	| declarator "":"" constant_expression	;enum_specifier	: ""enum"" &lt;LEFT_BRACE&gt; enumerator_list &lt;RIGHT_BRACE&gt;	| ""enum"" &lt;IDENTIFIER&gt; &lt;LEFT_BRACE&gt; enumerator_list &lt;RIGHT_BRACE&gt;  {self addTypeName: '2' value. self reduceFor: nodes}	| ""enum"" &lt;IDENTIFIER&gt;  {self addTypeName: '2' value. self reduceFor: nodes}	;enumerator_list	: enumerator	| enumerator_list "","" enumerator	;enumerator	: &lt;IDENTIFIER&gt;	| &lt;IDENTIFIER&gt; ""="" constant_expression	;type_qualifier	: ""const""	| ""volatile""	;declarator	: pointer direct_declarator	| direct_declarator	;direct_declarator	: &lt;IDENTIFIER&gt;	| ""("" declarator "")""	| direct_declarator &lt;LEFT_BLOCK&gt; constant_expression &lt;RIGHT_BLOCK&gt;	| direct_declarator &lt;LEFT_BLOCK&gt; &lt;RIGHT_BLOCK&gt;	| direct_declarator ""("" parameter_type_list "")""	| direct_declarator ""("" identifier_list "")""	| direct_declarator ""("" "")""	;pointer	: ""*""	| ""*"" type_qualifier_list	| ""*"" pointer	| ""*"" type_qualifier_list pointer	;type_qualifier_list	: type_qualifier	| type_qualifier_list type_qualifier	;parameter_type_list	: parameter_list	| parameter_list "","" &lt;ELLIPSIS&gt;	;parameter_list	: parameter_declaration	| parameter_list "","" parameter_declaration	;parameter_declaration	: declaration_specifiers declarator	| declaration_specifiers abstract_declarator	| declaration_specifiers	;identifier_list	: &lt;IDENTIFIER&gt;	| identifier_list "","" &lt;IDENTIFIER&gt;	;type_name	: specifier_qualifier_list	| specifier_qualifier_list abstract_declarator	;abstract_declarator	: pointer	| direct_abstract_declarator	| pointer direct_abstract_declarator	;direct_abstract_declarator	: ""("" abstract_declarator "")""	| &lt;LEFT_BLOCK&gt; &lt;RIGHT_BLOCK&gt;	| &lt;LEFT_BLOCK&gt; constant_expression &lt;RIGHT_BLOCK&gt;	| direct_abstract_declarator &lt;LEFT_BLOCK&gt; &lt;RIGHT_BLOCK&gt;	| direct_abstract_declarator &lt;LEFT_BLOCK&gt; constant_expression &lt;RIGHT_BLOCK&gt;	| ""("" "")""	| ""("" parameter_type_list "")""	| direct_abstract_declarator ""("" "")""	| direct_abstract_declarator ""("" parameter_type_list "")""	;initializer	: assignment_expression	| &lt;LEFT_BRACE&gt; initializer_list &lt;RIGHT_BRACE&gt;	| &lt;LEFT_BRACE&gt; initializer_list "","" &lt;RIGHT_BRACE&gt;	;initializer_list	: initializer	| initializer_list "","" initializer	;statement	: labeled_statement	| compound_statement	| expression_statement	| selection_statement	| iteration_statement	| jump_statement	;labeled_statement	: &lt;IDENTIFIER&gt; "":"" statement	| ""case"" constant_expression "":"" statement	| ""default"" "":"" statement	;compound_statement	: &lt;LEFT_BRACE&gt; &lt;RIGHT_BRACE&gt;	| &lt;LEFT_BRACE&gt; statement_list &lt;RIGHT_BRACE&gt;	| &lt;LEFT_BRACE&gt; declaration_list &lt;RIGHT_BRACE&gt;	| &lt;LEFT_BRACE&gt; declaration_list statement_list &lt;RIGHT_BRACE&gt;	;declaration_list	: declaration	| declaration_list declaration	;statement_list	: statement	| statement_list statement	;expression_statement	: "";""	| expression "";""	;selection_statement	: ""if"" ""("" expression "")"" statement	| ""if"" ""("" expression "")"" statement ""else"" statement	| ""switch"" ""("" expression "")"" statement	;iteration_statement	: ""while"" ""("" expression "")"" statement	| ""do"" statement ""while"" ""("" expression "")"" "";""	| ""for"" ""("" expression_statement expression_statement "")"" statement	| ""for"" ""("" expression_statement expression_statement expression "")"" statement	;jump_statement	: ""goto"" &lt;IDENTIFIER&gt; "";""	| ""continue"" "";""	| ""break"" "";""	| ""return"" "";""	| ""return"" expression "";""	;external_declaration	: function_definition	| declaration	;function_definition	: declaration_specifiers declarator declaration_list compound_statement	| declaration_specifiers declarator compound_statement	| declarator declaration_list compound_statement	| declarator compound_statement	;"</body></methods><methods><class-id>Refactory.SmaCC.CScanner</class-id> <category>generated-scanner</category><body package="SmaCC Example Parsers" selector="scan1">scan1		[self recordMatch: #(77).	self step.	currentCharacter isDigit] whileTrue.	(currentCharacter == $F or: 			[currentCharacter == $L 				or: [currentCharacter == $f or: [currentCharacter == $l]]]) 		ifTrue: [^self recordAndReportMatch: #(77)].	(currentCharacter == $E or: [currentCharacter == $e]) 		ifTrue: [^self scan5].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan2">scan2		[	[self step.	currentCharacter &lt;= $! 		or: [(currentCharacter between: $# and: $[) or: [currentCharacter &gt;= $]]]] 			whileTrue.	currentCharacter == $" ifTrue: [^self recordAndReportMatch: #(78)].	currentCharacter == $\] 			whileTrue: [self step].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan3">scan3		[self recordMatch: #(77).	self step.	currentCharacter isDigit] whileTrue.	(currentCharacter == $L or: 			[currentCharacter == $U 				or: [currentCharacter == $l or: [currentCharacter == $u]]]) 		ifTrue: [^self recordAndReportMatch: #(77)].	(currentCharacter == $E or: [currentCharacter == $e]) 		ifTrue: [^self scan5].	currentCharacter == $. ifTrue: [^self scan4].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan4">scan4	self step.	currentCharacter isDigit ifTrue: [^self scan1].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan5">scan5	self step.	(currentCharacter == $+ or: [currentCharacter == $-]) ifTrue: [self step].	currentCharacter isDigit ifTrue: [^self scan6].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan6">scan6		[self recordMatch: #(77).	self step.	currentCharacter isDigit] whileTrue.	(currentCharacter == $F or: 			[currentCharacter == $L 				or: [currentCharacter == $f or: [currentCharacter == $l]]]) 		ifTrue: [^self recordAndReportMatch: #(77)].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan7">scan7	self step.	(currentCharacter &lt;= $! 		or: [(currentCharacter between: $# and: $[) or: [currentCharacter &gt;= $]]]) 			ifTrue: [^self scan8].	currentCharacter == $\ ifTrue: [^self scan9].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan8">scan8		[self step.	currentCharacter &lt;= $! or: 			[(currentCharacter between: $# and: $&amp;) 				or: [(currentCharacter between: $( and: $[) or: [currentCharacter &gt;= $]]]]] 			whileTrue.	currentCharacter == $' 		ifTrue: 			[			[self recordMatch: #(77).			self step.			(currentCharacter &lt;= $! or: 					[(currentCharacter between: $# and: $&amp;) 						or: [(currentCharacter between: $( and: $[) or: [currentCharacter &gt;= $]]]]) 				ifTrue: [^self scan8].			currentCharacter == $'] 					whileTrue].	currentCharacter == $\ ifTrue: [^self scan9].	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scan9">scan9		[self step.		[self step.	currentCharacter &lt;= $! 		or: [(currentCharacter between: $# and: $[) or: [currentCharacter &gt;= $]]]] 			whileTrue.	currentCharacter == $' ifTrue: [^self recordAndReportMatch: #(77)].	currentCharacter == $\] 			whileTrue.	^self reportLastMatch</body><body package="SmaCC Example Parsers" selector="scanForToken">scanForToken	self step.	((currentCharacter between: $A and: $K) or: 			[(currentCharacter between: $M and: $Z) 				or: [currentCharacter == $_ or: [currentCharacter between: $a and: $z]]]) 		ifTrue: 			[			[self recordMatch: #IDENTIFIER.			self step.			currentCharacter isAlphaNumeric or: [currentCharacter == $_]] 					whileTrue.			^self reportLastMatch].	(currentCharacter between: $1 and: $9) ifTrue: [^self scan3].	((currentCharacter between: Character tab and: Character cr) 		or: [currentCharacter == Character space]) 			ifTrue: 				[				[self recordMatch: #whitespace.				self step.				(currentCharacter between: Character tab and: Character cr) 					or: [currentCharacter == Character space]] 						whileTrue.				^self reportLastMatch].	currentCharacter == $! 		ifTrue: 			[self recordMatch: #(32).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(4)].			^self reportLastMatch].	currentCharacter == $" ifTrue: [^self scan2].	currentCharacter == $% 		ifTrue: 			[self recordMatch: #(30).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(12)].			currentCharacter == $&gt; ifTrue: [^self recordAndReportMatch: #(82)].			^self reportLastMatch].	currentCharacter == $&amp; 		ifTrue: 			[self recordMatch: #(28).			self step.			currentCharacter == $&amp; ifTrue: [^self recordAndReportMatch: #(1)].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(63)].			^self reportLastMatch].	currentCharacter == $' ifTrue: [^self scan7].	currentCharacter == $( ifTrue: [^self recordAndReportMatch: #(27)].	currentCharacter == $) ifTrue: [^self recordAndReportMatch: #(26)].	currentCharacter == $* 		ifTrue: 			[self recordMatch: #(36).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(14)].			^self reportLastMatch].	currentCharacter == $+ 		ifTrue: 			[self recordMatch: #(35).			self step.			currentCharacter == $+ ifTrue: [^self recordAndReportMatch: #(23)].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(11)].			^self reportLastMatch].	currentCharacter == $, ifTrue: [^self recordAndReportMatch: #(21)].	currentCharacter == $- 		ifTrue: 			[self recordMatch: #(34).			self step.			currentCharacter == $- ifTrue: [^self recordAndReportMatch: #(22)].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(37)].			currentCharacter == $&gt; ifTrue: [^self recordAndReportMatch: #(24)].			^self reportLastMatch].	currentCharacter == $. 		ifTrue: 			[self recordMatch: #(25).			self step.			currentCharacter isDigit ifTrue: [^self scan1].			currentCharacter == $. 				ifTrue: 					[self step.					currentCharacter == $. ifTrue: [^self recordAndReportMatch: #(74)]].			^self reportLastMatch].	currentCharacter == $/ 		ifTrue: 			[self recordMatch: #(31).			self step.			currentCharacter == $* ifTrue: [^self recordAndReportMatch: #comment].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(13)].			^self reportLastMatch].	currentCharacter == $0 		ifTrue: 			[self recordMatch: #(77).			self step.			currentCharacter isDigit ifTrue: [^self scan3].			(currentCharacter == $L or: 					[currentCharacter == $U 						or: [currentCharacter == $l or: [currentCharacter == $u]]]) 				ifTrue: [^self recordAndReportMatch: #(77)].			(currentCharacter == $E or: [currentCharacter == $e]) 				ifTrue: [^self scan5].			(currentCharacter == $X or: [currentCharacter == $x]) 				ifTrue: 					[self step.					(currentCharacter isDigit or: 							[(currentCharacter between: $A and: $F) 								or: [currentCharacter between: $a and: $f]]) 						ifTrue: 							[							[self recordMatch: #(77).							self step.							currentCharacter isDigit or: 									[(currentCharacter between: $A and: $F) 										or: [currentCharacter between: $a and: $f]]] 									whileTrue.							(currentCharacter == $L or: 									[currentCharacter == $U 										or: [currentCharacter == $l or: [currentCharacter == $u]]]) 								ifTrue: [^self recordAndReportMatch: #(77)]].					^self reportLastMatch].			currentCharacter == $. ifTrue: [^self scan4].			^self reportLastMatch].	currentCharacter == $: 		ifTrue: 			[self recordMatch: #(16).			self step.			currentCharacter == $&gt; ifTrue: [^self recordAndReportMatch: #(80)].			^self reportLastMatch].	currentCharacter == $; ifTrue: [^self recordAndReportMatch: #(60)].	currentCharacter == $&lt; 		ifTrue: 			[self recordMatch: #(18).			self step.			currentCharacter == $% ifTrue: [^self recordAndReportMatch: #(81)].			currentCharacter == $: ifTrue: [^self recordAndReportMatch: #(79)].			currentCharacter == $&lt; 				ifTrue: 					[self recordMatch: #(29).					self step.					currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(56)].					^self reportLastMatch].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(7)].			^self reportLastMatch].	currentCharacter == $= 		ifTrue: 			[self recordMatch: #(15).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(5)].			^self reportLastMatch].	currentCharacter == $&gt; 		ifTrue: 			[self recordMatch: #(8).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(6)].			currentCharacter == $&gt; 				ifTrue: 					[self recordMatch: #(10).					self step.					currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(64)]].			^self reportLastMatch].	currentCharacter == $? ifTrue: [^self recordAndReportMatch: #(17)].	currentCharacter == $L 		ifTrue: 			[self recordMatch: #IDENTIFIER.			self step.			(currentCharacter isAlphaNumeric or: [currentCharacter == $_]) 				ifTrue: 					[					[self recordMatch: #IDENTIFIER.					self step.					currentCharacter isAlphaNumeric or: [currentCharacter == $_]] 							whileTrue.					^self reportLastMatch].			currentCharacter == $" ifTrue: [^self scan2].			currentCharacter == $' ifTrue: [^self scan7].			^self reportLastMatch].	currentCharacter == $[ ifTrue: [^self recordAndReportMatch: #(79)].	currentCharacter == $] ifTrue: [^self recordAndReportMatch: #(80)].	currentCharacter == $^ 		ifTrue: 			[self recordMatch: #(3).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(62)].			^self reportLastMatch].	currentCharacter == ${ ifTrue: [^self recordAndReportMatch: #(81)].	currentCharacter == $| 		ifTrue: 			[self recordMatch: #(2).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(61)].			currentCharacter == $| ifTrue: [^self recordAndReportMatch: #(9)].			^self reportLastMatch].	currentCharacter == $} ifTrue: [^self recordAndReportMatch: #(82)].	currentCharacter == $~ ifTrue: [^self recordAndReportMatch: #(33)].	^self reportLastMatch</body></methods><methods><class-id>Refactory.SmaCC.CScanner</class-id> <category>generated-tokens</category><body package="SmaCC Example Parsers" selector="CONSTANTId">CONSTANTId	^77</body><body package="SmaCC Example Parsers" selector="IDENTIFIERId">IDENTIFIERId	^76</body><body package="SmaCC Example Parsers" selector="TypeNameId">TypeNameId	^149</body><body package="SmaCC Example Parsers" selector="emptySymbolTokenId">emptySymbolTokenId	^147</body><body package="SmaCC Example Parsers" selector="errorTokenId">errorTokenId	^148</body></methods><methods><class-id>Refactory.SmaCC.CScanner</class-id> <category>scanning</category><body package="SmaCC Example Parsers" selector="IDENTIFIER">IDENTIFIER	| name |	name := outputStream contents.	matchActions := (typeNames includes: name) 				ifTrue: [Array with: self TypeNameId]				ifFalse: [Array with: self IDENTIFIERId].	outputStream reset.	^SmaCCToken 		value: name		start: start		id: matchActions</body><body package="SmaCC Example Parsers" selector="addTypeName:">addTypeName: aString 	typeNames add: aString</body></methods><methods><class-id>Refactory.SmaCC.CScanner</class-id> <category>default token handling</category><body package="SmaCC Example Parsers" selector="comment">comment	| char |		[[(char := stream next) isNil or: [char == $*]] whileFalse.	stream atEnd ifTrue: [self scannerError].	stream peekFor: $/] 			whileFalse.	^self whitespace</body></methods><methods><class-id>Refactory.SmaCC.CScanner</class-id> <category>initialize-release</category><body package="SmaCC Example Parsers" selector="initialize">initialize	super initialize.	typeNames := Set new</body></methods><methods><class-id>Refactory.SmaCC.CScanner class</class-id> <category>generated-comments</category><body package="SmaCC Example Parsers" selector="scannerDefinitionComment">scannerDefinitionComment	"&lt;H&gt;: [a-fA-F0-9]	;&lt;IS&gt;: [uUlL]	;&lt;D&gt;: [0-9]	;&lt;E&gt;: [Ee][\+\-]?&lt;D&gt;+	;&lt;FS&gt;: [fFlL]	;&lt;ELLIPSIS&gt; : \.\.\. ;&lt;comment&gt;: \/ \*	;&lt;LETTER&gt; : [a-zA-Z_] ;&lt;DIGIT&gt; : [0-9] ;&lt;IDENTIFIER&gt;: &lt;LETTER&gt; (&lt;LETTER&gt;|&lt;DIGIT&gt;)*	;&lt;CONSTANT&gt;: (0[xX]&lt;H&gt;+&lt;IS&gt;?) | 				(&lt;D&gt;+&lt;IS&gt;?) | 				(&lt;D&gt;+&lt;E&gt;&lt;FS&gt;?) | 				&lt;D&gt;*\.&lt;D&gt;+&lt;E&gt;?&lt;FS&gt;? | 				(L? \' ( (\\ .) | ([^\\\""]) )+ \')	;&lt;STRING_LITERAL&gt;: L? \"" ( (\\ .) | ([^\\\""]) )* \""	;&lt;LEFT_BLOCK&gt;: \[ | (\&lt; \:)	;&lt;RIGHT_BLOCK&gt;: \] | (\: \&gt;)	;&lt;LEFT_BRACE&gt;: \{ | (\&lt; \%)	;&lt;RIGHT_BRACE&gt;: \} | (\% \&gt;)	;&lt;whitespace&gt;: \s+	;"</body></methods><methods><class-id>Refactory.SmaCC.CScanner class</class-id> <category>generated-initialization</category><body package="SmaCC Example Parsers" selector="initializeKeywordMap">initializeKeywordMap	keywordMap := Dictionary new.	#(#(#IDENTIFIER 'auto' 73) #(#IDENTIFIER 'break' 48) #(#IDENTIFIER 'case' 40) #(#IDENTIFIER 'char' 70) #(#IDENTIFIER 'const' 42) #(#IDENTIFIER 'continue' 49) #(#IDENTIFIER 'default' 39) #(#IDENTIFIER 'do' 52) #(#IDENTIFIER 'double' 57) #(#IDENTIFIER 'else' 46) #(#IDENTIFIER 'enum' 43) #(#IDENTIFIER 'extern' 58) #(#IDENTIFIER 'float' 66) #(#IDENTIFIER 'for' 51) #(#IDENTIFIER 'goto' 50) #(#IDENTIFIER 'if' 38) #(#IDENTIFIER 'int' 68) #(#IDENTIFIER 'long' 67) #(#IDENTIFIER 'register' 72) #(#IDENTIFIER 'return' 19) #(#IDENTIFIER 'short' 69) #(#IDENTIFIER 'signed' 47) #(#IDENTIFIER 'sizeof' 20) #(#IDENTIFIER 'static' 65) #(#IDENTIFIER 'struct' 45) #(#IDENTIFIER 'switch' 54) #(#IDENTIFIER 'typedef' 59) #(#IDENTIFIER 'union' 44) #(#IDENTIFIER 'unsigned' 55) #(#IDENTIFIER 'void' 71) #(#IDENTIFIER 'volatile' 41) #(#IDENTIFIER 'while' 53)) 		do: 			[:each | 			(keywordMap at: each first ifAbsentPut: [Dictionary new]) at: (each at: 2)				put: each last].	^keywordMap</body></methods><methods><class-id>Refactory.SmaCC.CScanner class</class-id> <category>testing</category><body package="SmaCC Example Parsers" selector="needsLineNumbers">needsLineNumbers	^true</body></methods><methods><class-id>Refactory.SmaCC.StParser</class-id> <category>generated-reduction actions</category><body package="SmaCC Example Parsers" selector="reduceActionForArray1:">reduceActionForArray1: nodes 	^WriteStream on: Array new</body><body package="SmaCC Example Parsers" selector="reduceActionForArray2:">reduceActionForArray2: nodes 	^(nodes at: 1)		nextPut: (nodes at: 2);		yourself</body><body package="SmaCC Example Parsers" selector="reduceActionForArray3:">reduceActionForArray3: nodes 	(nodes at: 2) stopPosition + 1 = (nodes at: 3) startPosition 		ifTrue: [(nodes at: 1) nextPut: ((nodes at: 2) value , ':') asSymbol]		ifFalse: 			[(nodes at: 1)				nextPut: (nodes at: 2) value asSymbol;				nextPut: #':'].	scanner position: (nodes at: 3) startPosition.	currentToken := nil.	^nodes at: 1</body><body package="SmaCC Example Parsers" selector="reduceActionForArrayLiteral10:">reduceActionForArrayLiteral10: nodes 	^(nodes at: 1) value asSymbol</body><body package="SmaCC Example Parsers" selector="reduceActionForArrayLiteral11:">reduceActionForArrayLiteral11: nodes 	^(nodes at: 1) value</body><body package="SmaCC Example Parsers" selector="reduceActionForArrayLiteral2:">reduceActionForArrayLiteral2: nodes 	^(nodes at: 1) value asSymbol</body><body package="SmaCC Example Parsers" selector="reduceActionForArrayLiteral3:">reduceActionForArrayLiteral3: nodes 	^(nodes at: 1) value asSymbol</body><body package="SmaCC Example Parsers" selector="reduceActionForArrayLiteral4:">reduceActionForArrayLiteral4: nodes 	^(nodes at: 1) value asSymbol</body><body package="SmaCC Example Parsers" selector="reduceActionForArrayLiteral5:">reduceActionForArrayLiteral5: nodes 	^(nodes at: 1) value asSymbol</body><body package="SmaCC Example Parsers" selector="reduceActionForArrayLiteral6:">reduceActionForArrayLiteral6: nodes 	^(nodes at: 2) value asQualifiedReference</body><body package="SmaCC Example Parsers" selector="reduceActionForArrayLiteral7:">reduceActionForArrayLiteral7: nodes 	^(nodes at: 2) value asQualifiedReference</body><body package="SmaCC Example Parsers" selector="reduceActionForArrayLiteral8:">reduceActionForArrayLiteral8: nodes 	^(nodes at: 2) contents</body><body package="SmaCC Example Parsers" selector="reduceActionForArrayLiteral9:">reduceActionForArrayLiteral9: nodes 	^(nodes at: 2) contents</body><body package="SmaCC Example Parsers" selector="reduceActionForBinaryMessage1:">reduceActionForBinaryMessage1: nodes 	^Array with: (ReadStream on: (nodes at: 1) value)		with: (Array with: (nodes at: 2))</body><body package="SmaCC Example Parsers" selector="reduceActionForBinaryMethodName1:">reduceActionForBinaryMethodName1: nodes 	^Array with: (nodes at: 1) value asSymbol with: (Array with: (nodes at: 2))</body><body package="SmaCC Example Parsers" selector="reduceActionForBlock1:">reduceActionForBlock1: nodes 	^RBBlockNode arguments: (nodes at: 2) body: (nodes at: 4)</body><body package="SmaCC Example Parsers" selector="reduceActionForBlock2:">reduceActionForBlock2: nodes 	^RBBlockNode body: (nodes at: 2)</body><body package="SmaCC Example Parsers" selector="reduceActionForBlock3:">reduceActionForBlock3: nodes 	^RBBlockNode arguments: (nodes at: 2)		body: (RBSequenceNode statements: #())</body><body package="SmaCC Example Parsers" selector="reduceActionForBlock4:">reduceActionForBlock4: nodes 	^RBBlockNode arguments: (nodes at: 2)		body: (RBSequenceNode temporaries: (nodes at: 4) statements: (nodes at: 6))</body><body package="SmaCC Example Parsers" selector="reduceActionForBlockArgs1:">reduceActionForBlockArgs1: nodes 	^OrderedCollection with: (nodes at: 2)</body><body package="SmaCC Example Parsers" selector="reduceActionForBlockArgs2:">reduceActionForBlockArgs2: nodes 	^(nodes at: 1)		add: (nodes at: 3);		yourself</body><body package="SmaCC Example Parsers" selector="reduceActionForByteArray1:">reduceActionForByteArray1: nodes 	^WriteStream on: ByteArray new</body><body package="SmaCC Example Parsers" selector="reduceActionForByteArray2:">reduceActionForByteArray2: nodes 	^(nodes at: 1)		nextPut: (nodes at: 2) value;		yourself</body><body package="SmaCC Example Parsers" selector="reduceActionForCascade1:">reduceActionForCascade1: nodes 	| messages |	(nodes at: 2) isEmpty ifTrue: [^nodes at: 1].	messages := OrderedCollection new: (nodes at: 2) size + 1.	messages add: (nodes at: 1).	(nodes at: 2) do: 			[:each | 			messages add: (RBMessageNode 						receiver: (nodes at: 1) receiver						selector: each first contents asSymbol						arguments: each last)].	^RBCascadeNode messages: messages</body><body package="SmaCC Example Parsers" selector="reduceActionForCascadeList1:">reduceActionForCascadeList1: nodes 	^OrderedCollection new</body><body package="SmaCC Example Parsers" selector="reduceActionForCascadeList2:">reduceActionForCascadeList2: nodes 	^(nodes at: 1)		add: (nodes at: 3);		yourself</body><body package="SmaCC Example Parsers" selector="reduceActionForExpression1:">reduceActionForExpression1: nodes 	^RBAssignmentNode variable: (nodes at: 1) value: (nodes at: 3)</body><body package="SmaCC Example Parsers" selector="reduceActionForKeywordMessage1:">reduceActionForKeywordMessage1: nodes 	| stream |	stream := WriteStream on: (String new: 30).	stream nextPutAll: (nodes at: 1) value.	^Array with: stream with: (OrderedCollection with: (nodes at: 2))</body><body package="SmaCC Example Parsers" selector="reduceActionForKeywordMessage2:">reduceActionForKeywordMessage2: nodes 	(nodes at: 1) first nextPutAll: (nodes at: 2) value.	(nodes at: 1) last add: (nodes at: 3).	^nodes at: 1</body><body package="SmaCC Example Parsers" selector="reduceActionForKeywordMethodName1:">reduceActionForKeywordMethodName1: nodes 	| stream |	stream := WriteStream on: (String new: 30).	stream nextPutAll: (nodes at: 1) value.	^Array with: stream with: (OrderedCollection with: (nodes at: 2))</body><body package="SmaCC Example Parsers" selector="reduceActionForKeywordMethodName2:">reduceActionForKeywordMethodName2: nodes 	(nodes at: 1) first nextPutAll: (nodes at: 2) value.	(nodes at: 1) last add: (nodes at: 3).	^nodes at: 1</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral10:">reduceActionForLiteral10: nodes 	^(nodes at: 2) value asSymbol</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral11:">reduceActionForLiteral11: nodes 	^(nodes at: 2) value asSymbol</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral12:">reduceActionForLiteral12: nodes 	^(nodes at: 2) value asSymbol</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral13:">reduceActionForLiteral13: nodes 	^(nodes at: 3) contents</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral14:">reduceActionForLiteral14: nodes 	^(nodes at: 3) contents</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral15:">reduceActionForLiteral15: nodes 	^(nodes at: 3) value asQualifiedReference</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral16:">reduceActionForLiteral16: nodes 	^(nodes at: 3) value asQualifiedReference</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral1:">reduceActionForLiteral1: nodes 	^true</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral2:">reduceActionForLiteral2: nodes 	^false</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral3:">reduceActionForLiteral3: nodes 	^nil</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral4:">reduceActionForLiteral4: nodes 	^(nodes at: 1) value</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral5:">reduceActionForLiteral5: nodes 	^(nodes at: 1) value</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral6:">reduceActionForLiteral6: nodes 	^(nodes at: 1) value at: 2</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral7:">reduceActionForLiteral7: nodes 	^((nodes at: 1) value copyFrom: 2 to: (nodes at: 1) value size - 1) 		copyReplaceAll: ''''''		with: ''''</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral8:">reduceActionForLiteral8: nodes 	^(((nodes at: 2) value copyFrom: 2 to: (nodes at: 2) value size - 1) 		copyReplaceAll: ''''''		with: '''') asSymbol</body><body package="SmaCC Example Parsers" selector="reduceActionForLiteral9:">reduceActionForLiteral9: nodes 	^(nodes at: 2) value asSymbol</body><body package="SmaCC Example Parsers" selector="reduceActionForMethod1:">reduceActionForMethod1: nodes 	^(RBMethodNode 		selector: (nodes at: 1) value asSymbol		arguments: #()		body: (nodes at: 2) last)		tags: (nodes at: 2) first;		yourself</body><body package="SmaCC Example Parsers" selector="reduceActionForMethod2:">reduceActionForMethod2: nodes 	^(RBMethodNode 		selector: (nodes at: 1) first		arguments: (nodes at: 1) last		body: (nodes at: 2) last)		tags: (nodes at: 2) first;		yourself</body><body package="SmaCC Example Parsers" selector="reduceActionForMethod3:">reduceActionForMethod3: nodes 	^(RBMethodNode 		selector: (nodes at: 1) first contents asSymbol		arguments: (nodes at: 1) last		body: (nodes at: 2) last)		tags: (nodes at: 2) first;		yourself</body><body package="SmaCC Example Parsers" selector="reduceActionForMethodSequenceNode1:">reduceActionForMethodSequenceNode1: nodes 	^Array with: ((nodes at: 1)				addAll: (nodes at: 5);				yourself)		with: (RBSequenceNode temporaries: (nodes at: 3) statements: (nodes at: 6))</body><body package="SmaCC Example Parsers" selector="reduceActionForMethodSequenceNode2:">reduceActionForMethodSequenceNode2: nodes 	^Array with: ((nodes at: 1)				addAll: (nodes at: 3);				yourself)		with: (RBSequenceNode temporaries: #() statements: (nodes at: 4))</body><body package="SmaCC Example Parsers" selector="reduceActionForMethodSequenceNode3:">reduceActionForMethodSequenceNode3: nodes 	^Array with: (nodes at: 1)		with: (RBSequenceNode temporaries: #() statements: (nodes at: 2))</body><body package="SmaCC Example Parsers" selector="reduceActionForOptionalXXXXX1:">reduceActionForOptionalXXXXX1: nodes 	^nil</body><body package="SmaCC Example Parsers" selector="reduceActionForOptionalXXXXX2:">reduceActionForOptionalXXXXX2: nodes 	^nodes at: 1</body><body package="SmaCC Example Parsers" selector="reduceActionForPrimary2:">reduceActionForPrimary2: nodes 	^RBLiteralNode value: (nodes at: 1)</body><body package="SmaCC Example Parsers" selector="reduceActionForPrimitiveMessageSend10:">reduceActionForPrimitiveMessageSend10: nodes 	^nil</body><body package="SmaCC Example Parsers" selector="reduceActionForPrimitiveMessageSend11:">reduceActionForPrimitiveMessageSend11: nodes 	^nil</body><body package="SmaCC Example Parsers" selector="reduceActionForPrimitiveMessageSend2:">reduceActionForPrimitiveMessageSend2: nodes 	^nil</body><body package="SmaCC Example Parsers" selector="reduceActionForPrimitiveMessageSend3:">reduceActionForPrimitiveMessageSend3: nodes 	^nil</body><body package="SmaCC Example Parsers" selector="reduceActionForPrimitiveMessageSend4:">reduceActionForPrimitiveMessageSend4: nodes 	^nil</body><body package="SmaCC Example Parsers" selector="reduceActionForPrimitiveMessageSend5:">reduceActionForPrimitiveMessageSend5: nodes 	^nil</body><body package="SmaCC Example Parsers" selector="reduceActionForPrimitiveMessageSend6:">reduceActionForPrimitiveMessageSend6: nodes 	^nil</body><body package="SmaCC Example Parsers" selector="reduceActionForPrimitiveMessageSend7:">reduceActionForPrimitiveMessageSend7: nodes 	^nil</body><body package="SmaCC Example Parsers" selector="reduceActionForPrimitiveMessageSend8:">reduceActionForPrimitiveMessageSend8: nodes 	^nil</body><body package="SmaCC Example Parsers" selector="reduceActionForPrimitiveMessageSend9:">reduceActionForPrimitiveMessageSend9: nodes 	^nil</body><body package="SmaCC Example Parsers" selector="reduceActionForPrimitives1:">reduceActionForPrimitives1: nodes 	^OrderedCollection new</body><body package="SmaCC Example Parsers" selector="reduceActionForPrimitives2:">reduceActionForPrimitives2: nodes 	^(nodes at: 1)		add: ((nodes at: 2) startPosition to: (nodes at: 4) startPosition);		yourself</body><body package="SmaCC Example Parsers" selector="reduceActionForSequenceNode1:">reduceActionForSequenceNode1: nodes 	^RBSequenceNode temporaries: (nodes at: 1) statements: (nodes at: 2)</body><body package="SmaCC Example Parsers" selector="reduceActionForStatementList2:">reduceActionForStatementList2: nodes 	^(nodes at: 1)		add: (nodes at: 3);		yourself</body><body package="SmaCC Example Parsers" selector="reduceActionForStatements1:">reduceActionForStatements1: nodes 	^OrderedCollection new</body><body package="SmaCC Example Parsers" selector="reduceActionForStatements3:">reduceActionForStatements3: nodes 	^(nodes at: 1)		add: (RBReturnNode value: (nodes at: 4));		yourself</body><body package="SmaCC Example Parsers" selector="reduceActionForStatements4:">reduceActionForStatements4: nodes 	^OrderedCollection with: (RBReturnNode value: (nodes at: 2))</body><body package="SmaCC Example Parsers" selector="reduceActionForTemporaries1:">reduceActionForTemporaries1: nodes 	^#()</body><body package="SmaCC Example Parsers" selector="reduceActionForTemporaries2:">reduceActionForTemporaries2: nodes 	^#()</body><body package="SmaCC Example Parsers" selector="reduceActionForTemporaries3:">reduceActionForTemporaries3: nodes 	^nodes at: 2</body><body package="SmaCC Example Parsers" selector="reduceActionForTemporaryVariables1:">reduceActionForTemporaryVariables1: nodes 	^OrderedCollection new</body><body package="SmaCC Example Parsers" selector="reduceActionForTemporaryVariables2:">reduceActionForTemporaryVariables2: nodes 	^(nodes at: 1)		add: (nodes at: 2);		yourself</body><body package="SmaCC Example Parsers" selector="reduceActionForUnaryMessage1:">reduceActionForUnaryMessage1: nodes 	^Array with: (ReadStream on: (nodes at: 1) value) with: #()</body><body package="SmaCC Example Parsers" selector="reduceActionForVariable1:">reduceActionForVariable1: nodes 	^RBVariableNode named: (nodes at: 1) value</body><body package="SmaCC Example Parsers" selector="reduceActionForVariable2:">reduceActionForVariable2: nodes 	^RBVariableNode named: (nodes at: 1) value</body></methods><methods><class-id>Refactory.SmaCC.StParser</class-id> <category>private</category><body package="SmaCC Example Parsers" selector="actionForCurrentToken">actionForCurrentToken	| ids action |	ids := currentToken id.	1 to: ids size		do: 			[:i | 			action := self actionFor: (ids at: i).			(action bitAnd: self actionMask) = self errorAction ifFalse: [^action].			(ids at: i) = scanner negativeNumberId 				ifTrue: 					[currentToken := SmaCCToken 								value: '-'								start: currentToken startPosition								id: (Array with: scanner binarySymbolId).					scanner position: currentToken stopPosition - 1.					^self actionForCurrentToken]].	^self errorAction</body><body package="SmaCC Example Parsers" selector="createMessageNodeFrom:">createMessageNodeFrom: aCollection 	^RBMessageNode 		receiver: aCollection first		selector: (aCollection at: 2) first contents asSymbol		arguments: (aCollection at: 2) last</body></methods><methods><class-id>Refactory.SmaCC.StParser</class-id> <category>generated-tables</category><body package="SmaCC Example Parsers" selector="reduceTable">reduceTable	^#(#(33 0 #reduceFor:)#(33 2 #reduceActionForPrimitiveMessageSend2:)#(33 2 #reduceActionForPrimitiveMessageSend3:)#(33 2 #reduceActionForPrimitiveMessageSend4:)#(33 2 #reduceActionForPrimitiveMessageSend5:)#(33 2 #reduceActionForPrimitiveMessageSend6:)#(33 2 #reduceActionForPrimitiveMessageSend7:)#(33 2 #reduceActionForPrimitiveMessageSend8:)#(33 2 #reduceActionForPrimitiveMessageSend9:)#(33 2 #reduceActionForPrimitiveMessageSend10:)#(33 2 #reduceActionForPrimitiveMessageSend11:)#(34 1 #reduceActionForVariable1:)#(34 1 #reduceActionForVariable2:)#(35 0 #reduceActionForTemporaryVariables1:)#(35 2 #reduceActionForTemporaryVariables2:)#(36 0 #reduceActionForStatements1:)#(36 2 #liftFirstValue:)#(36 5 #reduceActionForStatements3:)#(36 3 #reduceActionForStatements4:)#(37 0 #reduceActionForTemporaries1:)#(37 1 #reduceActionForTemporaries2:)#(37 3 #reduceActionForTemporaries3:)#(38 1 #reduceFor:)#(38 3 #reduceActionForStatementList2:)#(39 0 #reduceActionForOptionalXXXXX1:)#(39 1 #reduceActionForOptionalXXXXX2:)#(40 3 #reduceActionForExpression1:)#(40 1 #liftFirstValue:)#(41 2 #reduceActionForBlockArgs1:)#(41 3 #reduceActionForBlockArgs2:)#(42 5 #reduceActionForBlock1:)#(42 3 #reduceActionForBlock2:)#(42 3 #reduceActionForBlock3:)#(42 7 #reduceActionForBlock4:)#(43 2 #reduceActionForCascade1:)#(43 1 #liftFirstValue:)#(44 1 #liftFirstValue:)#(44 1 #liftFirstValue:)#(44 1 #liftFirstValue:)#(45 0 #reduceActionForCascadeList1:)#(45 3 #reduceActionForCascadeList2:)#(46 3 #liftSecondValue:)#(46 1 #reduceActionForPrimary2:)#(46 1 #liftFirstValue:)#(46 1 #liftFirstValue:)#(47 2 #createMessageNodeFrom:)#(47 2 #createMessageNodeFrom:)#(47 2 #createMessageNodeFrom:)#(48 2 #createMessageNodeFrom:)#(48 2 #createMessageNodeFrom:)#(48 2 #createMessageNodeFrom:)#(49 2 #createMessageNodeFrom:)#(49 2 #createMessageNodeFrom:)#(50 1 #liftFirstValue:)#(50 1 #liftFirstValue:)#(50 1 #liftFirstValue:)#(51 1 #reduceActionForUnaryMessage1:)#(52 2 #reduceActionForBinaryMessage1:)#(53 2 #reduceActionForKeywordMessage1:)#(53 3 #reduceActionForKeywordMessage2:)#(54 1 #liftFirstValue:)#(54 1 #liftFirstValue:)#(54 1 #liftFirstValue:)#(55 1 #liftFirstValue:)#(55 1 #liftFirstValue:)#(56 1 #reduceFor:)#(57 2 #reduceActionForMethod1:)#(57 2 #reduceActionForMethod2:)#(57 2 #reduceActionForMethod3:)#(58 2 #reduceActionForKeywordMethodName1:)#(58 3 #reduceActionForKeywordMethodName2:)#(59 2 #reduceActionForBinaryMethodName1:)#(60 0 #reduceActionForByteArray1:)#(60 2 #reduceActionForByteArray2:)#(61 0 #reduceActionForArray1:)#(61 2 #reduceActionForArray2:)#(61 3 #reduceActionForArray3:)#(62 1 #liftFirstValue:)#(62 1 #reduceActionForArrayLiteral2:)#(62 1 #reduceActionForArrayLiteral3:)#(62 1 #reduceActionForArrayLiteral4:)#(62 1 #reduceActionForArrayLiteral5:)#(62 3 #reduceActionForArrayLiteral6:)#(62 3 #reduceActionForArrayLiteral7:)#(62 3 #reduceActionForArrayLiteral8:)#(62 3 #reduceActionForArrayLiteral9:)#(62 1 #reduceActionForArrayLiteral10:)#(62 1 #reduceActionForArrayLiteral11:)#(63 0 #reduceActionForPrimitives1:)#(63 4 #reduceActionForPrimitives2:)#(66 6 #reduceActionForMethodSequenceNode1:)#(66 4 #reduceActionForMethodSequenceNode2:)#(66 2 #reduceActionForMethodSequenceNode3:)#(67 2 #reduceActionForSequenceNode1:)#(68 1 #reduceActionForLiteral1:)#(68 1 #reduceActionForLiteral2:)#(68 1 #reduceActionForLiteral3:)#(68 1 #reduceActionForLiteral4:)#(68 1 #reduceActionForLiteral5:)#(68 1 #reduceActionForLiteral6:)#(68 1 #reduceActionForLiteral7:)#(68 2 #reduceActionForLiteral8:)#(68 2 #reduceActionForLiteral9:)#(68 2 #reduceActionForLiteral10:)#(68 2 #reduceActionForLiteral11:)#(68 2 #reduceActionForLiteral12:)#(68 4 #reduceActionForLiteral13:)#(68 4 #reduceActionForLiteral14:)#(68 4 #reduceActionForLiteral15:)#(68 4 #reduceActionForLiteral16:))</body><body package="SmaCC Example Parsers" selector="transitionTable">transitionTable	^#(#[1 0 13 0 20 0 17 0 24 0 21 0 26 0 25 0 57 0 29 0 58 0 33 0 59]#[1 0 37 0 1 0 82 0 6 0 82 0 7 0 41 0 11 0 82 0 12 0 82 0 13 0 82 0 14 0 82 0 16 0 82 0 17 0 82 0 20 0 82 0 21 0 82 0 22 0 82 0 23 0 82 0 29 0 82 0 30 0 45 0 37 0 82 0 64 0 49 0 67]#[1 1 102 0 1 1 102 0 6 1 102 0 7 1 102 0 9 1 102 0 11 1 102 0 12 1 102 0 13 1 102 0 14 1 102 0 16 1 102 0 17 1 102 0 20 1 102 0 21 1 102 0 22 1 102 0 23 1 102 0 29 1 102 0 30 0 53 0 63 1 102 0 64 0 57 0 66]#[1 0 61 0 20 0 65 0 29 0 69 0 34]#[1 0 61 0 20 0 65 0 29 0 73 0 34]#[0 0 0 0 64]#[1 1 102 0 1 1 102 0 6 1 102 0 7 1 102 0 9 1 102 0 11 1 102 0 12 1 102 0 13 1 102 0 14 1 102 0 16 1 102 0 17 1 102 0 20 1 102 0 21 1 102 0 22 1 102 0 23 0 77 0 24 1 102 0 29 1 102 0 30 0 53 0 63 1 102 0 64 0 81 0 66]#[1 1 102 0 1 1 102 0 6 1 102 0 7 1 102 0 9 1 102 0 11 1 102 0 12 1 102 0 13 1 102 0 14 1 102 0 16 1 102 0 17 1 102 0 20 1 102 0 21 1 102 0 22 1 102 0 23 1 102 0 29 1 102 0 30 0 53 0 63 1 102 0 64 0 85 0 66]#[1 0 58 0 1 0 58 0 20 0 58 0 29 0 89 0 35]#[0 0 86 0 6 0 7 0 12 0 13 0 14 0 16 0 17 0 18 0 20 0 21 0 22 0 23 0 29 0 30 0 64]#[1 0 93 0 6 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 14 0 113 0 16 0 117 0 17 0 66 0 18 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 137 0 34 0 141 0 36 0 145 0 38 0 149 0 40 0 153 0 42 0 157 0 43 0 161 0 44 0 165 0 46 0 169 0 47 0 173 0 48 0 177 0 49 0 66 0 64 0 181 0 68]#[0 0 0 0 64]#[1 0 185 0 1 0 93 0 6 0 97 0 7 0 189 0 9 0 193 0 11 0 101 0 12 0 105 0 13 0 109 0 14 0 113 0 16 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 137 0 34 0 197 0 36 0 145 0 38 0 149 0 40 0 153 0 42 0 157 0 43 0 161 0 44 0 165 0 46 0 169 0 47 0 173 0 48 0 177 0 49 0 66 0 64 0 181 0 68]#[0 1 14 0 64]#[0 0 50 0 1 0 2 0 3 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 26 0 29 0 30 0 64]#[0 0 54 0 1 0 2 0 3 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 26 0 29 0 30 0 64]#[0 1 26 0 1 0 6 0 7 0 9 0 11 0 12 0 13 0 14 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 29 0 30 0 64]#[0 1 34 0 1 0 6 0 7 0 9 0 11 0 12 0 13 0 14 0 16 0 17 0 20 0 21 0 22 0 23 0 29 0 30 0 64]#[1 0 61 0 20 0 65 0 29 0 201 0 34]#[0 1 22 0 64]#[0 1 18 0 64]#[1 0 205 0 1 0 61 0 20 0 65 0 29 0 209 0 34]#[1 0 213 0 5 0 217 0 7 0 221 0 17 0 225 0 20 0 229 0 23 0 233 0 24 0 237 0 25 0 241 0 26]#[1 0 93 0 6 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 14 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 137 0 34 0 245 0 40 0 153 0 42 0 157 0 43 0 161 0 44 0 165 0 46 0 169 0 47 0 173 0 48 0 177 0 49 0 181 0 68]#[0 1 126 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[0 1 130 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[0 1 134 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[1 0 93 0 6 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 14 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 137 0 34 0 249 0 40 0 153 0 42 0 157 0 43 0 161 0 44 0 165 0 46 0 169 0 47 0 173 0 48 0 177 0 49 0 181 0 68]#[1 0 37 0 1 0 82 0 6 0 82 0 7 0 41 0 11 0 82 0 12 0 82 0 13 0 82 0 14 0 82 0 16 0 82 0 17 0 82 0 18 0 253 0 19 0 82 0 20 0 82 0 21 0 82 0 22 0 82 0 23 0 82 0 29 0 82 0 30 0 45 0 37 1 1 0 41 1 5 0 67]#[0 1 138 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[0 1 142 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[0 1 150 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[0 1 146 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[1 0 178 0 2 0 178 0 10 1 9 0 15 0 178 0 18 0 178 0 20 0 178 0 24 0 178 0 26 0 178 0 64]#[0 1 122 0 18 0 64]#[1 1 13 0 2 0 102 0 18 1 17 0 39 0 102 0 64]#[0 0 94 0 2 0 18 0 64]#[0 0 182 0 2 0 3 0 10 0 18 0 20 0 24 0 26 0 64]#[0 0 114 0 2 0 10 0 18 0 64]#[1 0 162 0 2 0 162 0 3 0 162 0 10 0 162 0 18 1 21 0 45 0 162 0 64]#[1 0 146 0 2 0 146 0 10 0 146 0 18 1 25 0 20 1 29 0 24 1 33 0 26 1 37 0 51 1 41 0 52 1 45 0 53 0 146 0 64]#[0 0 150 0 2 0 3 0 10 0 18 0 64]#[1 0 154 0 2 0 154 0 3 0 154 0 10 0 154 0 18 1 29 0 24 1 33 0 26 1 49 0 52 1 53 0 53 0 154 0 64]#[1 0 158 0 2 0 158 0 3 0 158 0 10 0 158 0 18 1 25 0 20 1 29 0 24 1 33 0 26 1 57 0 51 1 61 0 52 1 65 0 53 0 158 0 64]#[0 0 174 0 2 0 3 0 10 0 18 0 20 0 24 0 26 0 64]#[1 0 58 0 1 0 58 0 20 0 58 0 29 1 69 0 35]#[1 0 6 0 2 0 6 0 3 0 6 0 4 0 6 0 5 0 6 0 6 0 6 0 7 0 6 0 8 0 6 0 10 0 6 0 12 0 6 0 13 0 6 0 14 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 23 0 6 0 24 0 6 0 26 0 6 0 30 1 73 0 33]#[1 1 102 0 6 1 102 0 7 1 102 0 9 1 102 0 12 1 102 0 13 1 102 0 14 1 102 0 16 1 102 0 17 1 102 0 20 1 102 0 21 1 102 0 22 1 102 0 23 1 102 0 29 1 102 0 30 1 77 0 63 1 102 0 64]#[0 1 118 0 64]#[0 1 30 0 1 0 6 0 7 0 9 0 11 0 12 0 13 0 14 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 29 0 30 0 64]#[0 0 90 0 6 0 7 0 12 0 13 0 14 0 16 0 17 0 18 0 20 0 21 0 22 0 23 0 29 0 30 0 64]#[0 0 62 0 1 0 20 0 29]#[1 1 81 0 20 1 85 0 29]#[1 1 46 0 5 1 46 0 6 1 46 0 7 1 46 0 10 1 46 0 12 1 46 0 13 1 46 0 14 1 46 0 17 1 46 0 20 1 46 0 21 1 46 0 22 1 46 0 23 1 46 0 24 1 46 0 25 1 46 0 26 1 46 0 29 1 46 0 30 1 46 0 32 1 89 0 61]#[1 1 38 0 18 1 38 0 21 1 93 0 60]#[0 1 158 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[0 1 154 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[0 1 166 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[0 1 170 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[0 1 162 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[0 1 97 0 10]#[1 1 101 0 2 0 102 0 18 1 105 0 39 0 102 0 64]#[1 0 61 0 20 0 65 0 29 1 109 0 34]#[1 1 113 0 1 1 117 0 11 1 121 0 18 1 125 0 19]#[0 1 129 0 18]#[1 0 93 0 6 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 14 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 137 0 34 1 133 0 40 0 153 0 42 0 157 0 43 0 161 0 44 0 165 0 46 0 169 0 47 0 173 0 48 0 177 0 49 0 181 0 68]#[1 0 93 0 6 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 14 1 137 0 16 0 117 0 17 0 106 0 18 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 137 0 34 1 141 0 40 0 153 0 42 0 157 0 43 0 161 0 44 0 165 0 46 0 169 0 47 0 173 0 48 0 177 0 49 0 106 0 64 0 181 0 68]#[0 0 70 0 18 0 64]#[1 0 142 0 2 1 145 0 3 0 142 0 10 0 142 0 18 0 142 0 64]#[0 0 230 0 2 0 3 0 10 0 18 0 20 0 24 0 26 0 64]#[1 0 93 0 6 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 14 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 1 149 0 34 0 153 0 42 1 153 0 46 1 157 0 48 1 161 0 49 1 165 0 54 0 181 0 68]#[1 0 93 0 6 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 14 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 1 149 0 34 0 153 0 42 1 169 0 46 1 173 0 49 1 177 0 55 0 181 0 68]#[0 0 214 0 2 0 3 0 10 0 18 0 20 0 24 0 26 0 64]#[0 0 206 0 2 0 3 0 10 0 18 0 24 0 26 0 64]#[1 0 194 0 2 0 194 0 3 0 194 0 10 0 194 0 18 1 181 0 24 0 194 0 64]#[0 0 198 0 2 0 3 0 10 0 18 0 24 0 26 0 64]#[1 0 186 0 2 0 186 0 3 0 186 0 10 0 186 0 18 1 181 0 24 0 186 0 64]#[0 0 210 0 2 0 3 0 10 0 18 0 20 0 24 0 26 0 64]#[0 0 202 0 2 0 3 0 10 0 18 0 24 0 26 0 64]#[1 0 190 0 2 0 190 0 3 0 190 0 10 0 190 0 18 1 181 0 24 0 190 0 64]#[1 1 185 0 1 0 61 0 20 0 65 0 29 0 209 0 34]#[1 1 189 0 2 1 193 0 3 1 197 0 4 1 201 0 5 0 93 0 6 1 205 0 7 1 209 0 8 1 213 0 10 0 101 0 12 0 105 0 13 0 109 0 14 1 217 0 20 0 121 0 21 0 125 0 22 0 129 0 23 1 221 0 24 1 225 0 26 0 133 0 30 1 229 0 68]#[1 0 93 0 6 0 97 0 7 0 189 0 9 0 101 0 12 0 105 0 13 0 109 0 14 0 113 0 16 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 137 0 34 1 233 0 36 0 145 0 38 0 149 0 40 0 153 0 42 0 157 0 43 0 161 0 44 0 165 0 46 0 169 0 47 0 173 0 48 0 177 0 49 0 66 0 64 0 181 0 68]#[0 1 237 0 4]#[0 1 241 0 4]#[1 1 245 0 5 0 93 0 6 1 249 0 7 1 253 0 10 0 101 0 12 0 105 0 13 0 109 0 14 2 1 0 17 2 5 0 20 0 121 0 21 0 125 0 22 0 129 0 23 2 9 0 24 2 13 0 25 2 17 0 26 2 21 0 29 0 133 0 30 2 25 0 32 2 29 0 62 2 33 0 68]#[1 2 37 0 18 2 41 0 21]#[0 0 170 0 2 0 3 0 10 0 18 0 20 0 24 0 26 0 64]#[0 0 106 0 18 0 64]#[0 0 78 0 18 0 64]#[0 0 118 0 1 0 11 0 18 0 19]#[1 0 37 0 1 0 82 0 6 0 82 0 7 0 41 0 11 0 82 0 12 0 82 0 13 0 82 0 14 0 82 0 16 0 82 0 17 0 82 0 18 0 82 0 20 0 82 0 21 0 82 0 22 0 82 0 23 0 82 0 29 0 82 0 30 0 45 0 37 2 45 0 67]#[1 0 58 0 1 0 58 0 20 0 58 0 29 2 49 0 35]#[0 0 134 0 2 0 3 0 10 0 18 0 20 0 24 0 26 0 64]#[1 0 61 0 20 0 65 0 29 2 53 0 34]#[0 0 130 0 2 0 3 0 10 0 18 0 20 0 24 0 26 0 64]#[0 0 110 0 2 0 10 0 18 0 64]#[1 0 93 0 6 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 14 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 137 0 34 2 57 0 40 0 153 0 42 0 157 0 43 0 161 0 44 0 165 0 46 0 169 0 47 0 173 0 48 0 177 0 49 0 181 0 68]#[0 0 98 0 2 0 18 0 64]#[1 1 25 0 20 1 29 0 24 1 33 0 26 2 61 0 50 2 65 0 51 2 69 0 52 2 73 0 53]#[0 0 178 0 2 0 3 0 10 0 18 0 20 0 24 0 26 0 64]#[1 0 254 0 2 0 254 0 3 0 254 0 10 0 254 0 18 1 25 0 20 0 254 0 24 1 33 0 26 1 37 0 51 1 41 0 52 0 254 0 64]#[1 0 246 0 2 0 246 0 3 0 246 0 10 0 246 0 18 0 246 0 24 1 33 0 26 1 49 0 52 0 246 0 64]#[1 0 250 0 2 0 250 0 3 0 250 0 10 0 250 0 18 1 25 0 20 0 250 0 24 1 33 0 26 1 57 0 51 1 61 0 52 0 250 0 64]#[0 0 238 0 2 0 3 0 10 0 18 0 24 0 64]#[1 1 6 0 2 1 6 0 3 1 6 0 10 1 6 0 18 1 25 0 20 1 6 0 24 1 6 0 26 1 37 0 51 1 6 0 64]#[1 1 2 0 2 1 2 0 3 1 2 0 10 1 2 0 18 1 25 0 20 1 2 0 24 1 2 0 26 1 57 0 51 1 2 0 64]#[0 0 234 0 2 0 3 0 10 0 18 0 24 0 26 0 64]#[1 0 93 0 6 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 14 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 1 149 0 34 0 153 0 42 1 153 0 46 1 157 0 48 1 161 0 49 2 77 0 54 0 181 0 68]#[1 1 102 0 6 1 102 0 7 1 102 0 9 1 102 0 12 1 102 0 13 1 102 0 14 1 102 0 16 1 102 0 17 1 102 0 20 1 102 0 21 1 102 0 22 1 102 0 23 1 102 0 29 1 102 0 30 2 81 0 63 1 102 0 64]#[0 0 38 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 34 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 30 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 26 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 18 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 1 106 0 1 0 6 0 7 0 9 0 11 0 12 0 13 0 14 0 16 0 17 0 20 0 21 0 22 0 23 0 29 0 30 0 64]#[0 0 22 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 42 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 10 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 46 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 0 14 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 20 0 21 0 22 0 23 0 24 0 26 0 30]#[0 1 114 0 64]#[0 1 182 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[0 1 186 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[1 2 85 0 20 2 89 0 29]#[1 1 46 0 5 1 46 0 6 1 46 0 7 1 46 0 10 1 46 0 12 1 46 0 13 1 46 0 14 1 46 0 17 1 46 0 20 1 46 0 21 1 46 0 22 1 46 0 23 1 46 0 24 1 46 0 25 1 46 0 26 1 46 0 29 1 46 0 30 1 46 0 32 2 93 0 61]#[0 1 178 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[1 1 38 0 18 1 38 0 21 2 97 0 60]#[1 1 62 0 5 1 62 0 6 1 62 0 7 1 62 0 10 1 62 0 12 1 62 0 13 1 62 0 14 2 101 0 15 1 62 0 17 1 62 0 20 1 62 0 21 1 62 0 22 1 62 0 23 1 62 0 24 1 62 0 25 1 62 0 26 1 62 0 29 1 62 0 30 1 62 0 32]#[0 1 70 0 5 0 6 0 7 0 10 0 12 0 13 0 14 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 74 0 5 0 6 0 7 0 10 0 12 0 13 0 14 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 66 0 5 0 6 0 7 0 10 0 12 0 13 0 14 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 98 0 5 0 6 0 7 0 10 0 12 0 13 0 14 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 94 0 5 0 6 0 7 0 10 0 12 0 13 0 14 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 50 0 5 0 6 0 7 0 10 0 12 0 13 0 14 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 58 0 5 0 6 0 7 0 10 0 12 0 13 0 14 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 174 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 10 0 12 0 13 0 14 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32 0 64]#[0 1 42 0 18 0 21]#[0 2 105 0 18]#[1 2 109 0 1 0 61 0 20 0 65 0 29 0 209 0 34]#[0 0 122 0 1 0 11 0 18 0 19]#[1 1 101 0 2 0 102 0 18 2 113 0 39 0 102 0 64]#[0 0 166 0 2 0 3 0 10 0 18 0 64]#[0 0 218 0 2 0 3 0 10 0 18 0 64]#[0 0 222 0 2 0 3 0 10 0 18 0 64]#[1 0 226 0 2 0 226 0 3 0 226 0 10 0 226 0 18 1 181 0 24 0 226 0 64]#[0 0 242 0 2 0 3 0 10 0 18 0 24 0 64]#[1 0 93 0 6 0 97 0 7 0 189 0 9 0 101 0 12 0 105 0 13 0 109 0 14 0 113 0 16 0 117 0 17 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 137 0 34 2 117 0 36 0 145 0 38 0 149 0 40 0 153 0 42 0 157 0 43 0 161 0 44 0 165 0 46 0 169 0 47 0 173 0 48 0 177 0 49 0 66 0 64 0 181 0 68]#[0 2 121 0 4]#[0 2 125 0 4]#[1 1 245 0 5 0 93 0 6 1 249 0 7 2 129 0 10 0 101 0 12 0 105 0 13 0 109 0 14 2 1 0 17 2 5 0 20 0 121 0 21 0 125 0 22 0 129 0 23 2 9 0 24 2 13 0 25 2 17 0 26 2 21 0 29 0 133 0 30 2 25 0 32 2 29 0 62 2 33 0 68]#[1 2 133 0 18 2 41 0 21]#[0 1 54 0 5 0 6 0 7 0 10 0 12 0 13 0 14 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 0 126 0 2 0 3 0 10 0 18 0 20 0 24 0 26 0 64]#[1 0 93 0 6 0 97 0 7 0 101 0 12 0 105 0 13 0 109 0 14 0 113 0 16 0 117 0 17 0 66 0 18 0 61 0 20 0 121 0 21 0 125 0 22 0 129 0 23 0 65 0 29 0 133 0 30 0 137 0 34 2 137 0 36 0 145 0 38 0 149 0 40 0 153 0 42 0 157 0 43 0 161 0 44 0 165 0 46 0 169 0 47 0 173 0 48 0 177 0 49 0 181 0 68]#[0 0 74 0 18 0 64]#[0 1 110 0 64]#[0 1 78 0 5 0 6 0 7 0 10 0 12 0 13 0 14 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 82 0 5 0 6 0 7 0 10 0 12 0 13 0 14 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 86 0 5 0 6 0 7 0 10 0 12 0 13 0 14 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 1 90 0 5 0 6 0 7 0 10 0 12 0 13 0 14 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 32]#[0 2 141 0 18]#[0 0 138 0 2 0 3 0 10 0 18 0 20 0 24 0 26 0 64])</body></methods><methods><class-id>Refactory.SmaCC.StParser class</class-id> <category>private</category><body package="SmaCC Example Parsers" selector="simplifyExpression:">simplifyExpression: aSequenceNode 	^(aSequenceNode statements size == 1 		and: [aSequenceNode temporaries isEmpty]) 			ifTrue: [aSequenceNode statements first]			ifFalse: [aSequenceNode]</body></methods><methods><class-id>Refactory.SmaCC.StParser class</class-id> <category>accessing</category><body package="SmaCC Example Parsers" selector="parseExpression:">parseExpression: aString 	^self simplifyExpression: (self parse: aString				startingAt: self startingStateForSequenceNode)</body><body package="SmaCC Example Parsers" selector="parseExpression:onError:">parseExpression: aString onError: aBlock 	^self simplifyExpression: (self 				parse: aString				startingAt: self startingStateForSequenceNode				onError: aBlock)</body><body package="SmaCC Example Parsers" selector="parseMethod:">parseMethod: aString 	^self parse: aString startingAt: self startingStateForMethod</body><body package="SmaCC Example Parsers" selector="parseMethod:onError:">parseMethod: aString onError: aBlock 	^self 		parse: aString		startingAt: self startingStateForMethod		onError: aBlock</body></methods><methods><class-id>Refactory.SmaCC.StParser class</class-id> <category>generated-comments</category><body package="SmaCC Example Parsers" selector="parserDefinitionComment">parserDefinitionComment	"%id &lt;number&gt; &lt;negativeNumber&gt; &lt;name&gt; &lt;binarySymbol&gt;;%start SequenceNode ;Method:	  &lt;name&gt; MethodSequenceNode {(RBMethodNode selector: '1' value asSymbol arguments: #() body: '2' last) tags: '2' first; yourself}	| BinaryMethodName MethodSequenceNode {(RBMethodNode selector: '1' first arguments: '1' last body: '2' last) tags: '2' first; yourself}	| KeywordMethodName MethodSequenceNode {(RBMethodNode selector: '1' first contents asSymbol arguments: '1' last body: '2' last) tags: '2' first; yourself};BinaryMethodName:	&lt;binarySymbol&gt; Variable {Array with: '1' value asSymbol with: (Array with: '2')} ;KeywordMethodName:	&lt;keyword&gt; Variable {| stream | stream := WriteStream on: (String new: 30). stream nextPutAll: '1' value. Array with: stream with: (OrderedCollection with: '2')}	| KeywordMethodName &lt;keyword&gt; Variable {'1' first nextPutAll: '2' value. '1' last add: '3'. '1'};Primitives:	{OrderedCollection new}	| Primitives ""&lt;"" PrimitiveMessageSend ""&gt;"" {'1' add: ('2' startPosition to: '4' startPosition); yourself};PrimitiveMessageSend:	| PrimitiveMessageSend &lt;keyword&gt; {nil}	| PrimitiveMessageSend Literal {nil}	| PrimitiveMessageSend ""("" {nil}	| PrimitiveMessageSend "")"" {nil}	| PrimitiveMessageSend ""{"" {nil}	| PrimitiveMessageSend ""}"" {nil}	| PrimitiveMessageSend "";"" {nil}	| PrimitiveMessageSend ""."" {nil}	| PrimitiveMessageSend &lt;name&gt; {nil}	| PrimitiveMessageSend &lt;binarySymbol&gt; {nil};MethodSequenceNode:	Primitives ""|"" TemporaryVariables ""|"" Primitives Statements {Array with: ('1' addAll: '5'; yourself) with: (RBSequenceNode temporaries: '3' statements: '6')}	| Primitives ""||"" Primitives Statements {Array with: ('1' addAll: '3'; yourself) with: (RBSequenceNode temporaries: #() statements: '4')}	| Primitives Statements {Array with: '1' with: (RBSequenceNode temporaries: #() statements: '2')};SequenceNode:	Temporaries Statements {RBSequenceNode temporaries: '1' statements: '2'};Temporaries:	{#()}	| ""||"" {#()}	| ""|"" TemporaryVariables ""|"" {'2'};TemporaryVariables:	{OrderedCollection new}	| TemporaryVariables Variable {'1' add: '2'; yourself};Statements:	{OrderedCollection new}	| StatementList "".""? {#liftFirstValue:}	| StatementList ""."" ""^"" Expression "".""? {'1' add: (RBReturnNode value: '4'); yourself}	| ""^"" Expression "".""? {OrderedCollection with: (RBReturnNode value: '2')};StatementList:	Expression	| StatementList ""."" Expression {'1' add: '3'; yourself};Block:	""["" BlockArgs ""|"" SequenceNode ""]"" {RBBlockNode arguments: '2' body: '4'}	| ""["" SequenceNode ""]"" {RBBlockNode body: '2'}	| ""["" BlockArgs ""]"" {RBBlockNode arguments: '2' body: (RBSequenceNode statements: #())}	| ""["" BlockArgs ""||"" TemporaryVariables ""|"" Statements ""]"" {RBBlockNode arguments: '2' body: (RBSequenceNode temporaries: '4' statements: '6')};BlockArgs:	"":"" Variable {OrderedCollection with: '2'}	| BlockArgs "":"" Variable {'1' add: '3'; yourself};Expression:	Variable "":="" Expression {RBAssignmentNode variable: '1' value: '3'}|	Cascade {#liftFirstValue:};Cascade:	MessageSend CascadeList 				{| messages |				'2' isEmpty ifTrue: [^'1'].				messages := OrderedCollection new: '2' size + 1.				messages add: '1'.				'2' do: [:each | messages add: (RBMessageNode receiver: '1' receiver selector: each first contents asSymbol arguments: each last)].				RBCascadeNode messages: messages}|	Primary {#liftFirstValue:};MessageSend:	KeywordMessageSend {#liftFirstValue:}|	BinaryMessageSend {#liftFirstValue:}|	UnaryMessageSend {#liftFirstValue:};CascadeList:	{OrderedCollection new}|	CascadeList "";"" SimpleMessage {'1' add: '3'; yourself};SimpleMessage:	UnaryMessage {#liftFirstValue:}|	BinaryMessage {#liftFirstValue:}|	KeywordMessage {#liftFirstValue:};KeywordMessageSend:	BinaryMessageSend KeywordMessage {#createMessageNodeFrom:}|	UnaryMessageSend KeywordMessage {#createMessageNodeFrom:}|	Primary KeywordMessage {#createMessageNodeFrom:};KeywordMessage:	&lt;keyword&gt; KeywordArgument {| stream | stream := WriteStream on: (String new: 30). stream nextPutAll: '1' value. Array with: stream with: (OrderedCollection with: '2')}|	KeywordMessage &lt;keyword&gt; KeywordArgument {'1' first nextPutAll: '2' value. '1' last add: '3'. '1'};KeywordArgument:	BinaryMessageSend {#liftFirstValue:}|	UnaryMessageSend {#liftFirstValue:}|	Primary {#liftFirstValue:};BinaryMessageSend:	BinaryMessageSend BinaryMessage {#createMessageNodeFrom:}|	UnaryMessageSend BinaryMessage {#createMessageNodeFrom:}|	Primary BinaryMessage {#createMessageNodeFrom:} ;BinaryMessage :	&lt;binarySymbol&gt; BinaryArgument {Array with: (ReadStream on: '1' value) with: (Array with: '2')};BinaryArgument:	UnaryMessageSend {#liftFirstValue:}|	Primary {#liftFirstValue:};UnaryMessageSend :	UnaryMessageSend UnaryMessage {#createMessageNodeFrom:}|	Primary UnaryMessage {#createMessageNodeFrom:};UnaryMessage :	&lt;name&gt; {Array with: (ReadStream on: '1' value) with: #()};Primary: 	""("" Expression "")"" {#liftSecondValue:}|	Literal {RBLiteralNode value: '1'}|	Variable {#liftFirstValue:}|	Block {#liftFirstValue:};Variable: 	&lt;name&gt; {RBVariableNode named: '1' value}|	&lt;dottedName&gt; {RBVariableNode named: '1' value};Literal:	""true"" {true}|	""false"" {false}|	""nil"" {nil}|	&lt;number&gt; {'1' value}|	&lt;negativeNumber&gt; {'1' value}|	&lt;character&gt; {'1' value at: 2}|	&lt;string&gt; {('1' value copyFrom: 2 to: '1' value size - 1) copyReplaceAll: '''''' with: ''''}|	 ""#"" &lt;string&gt; {(('2' value copyFrom: 2 to: '2' value size - 1) copyReplaceAll: '''''' with: '''') asSymbol}|	""#"" &lt;name&gt; {'2' value asSymbol}|	""#"" &lt;binarySymbol&gt; {'2' value asSymbol}|	""#"" &lt;keyword&gt; {'2' value asSymbol}|	""#"" &lt;multikeyword&gt; {'2' value asSymbol}|	""#"" ""["" ByteArray ""]"" {'3' contents}|	""#"" ""("" Array "")"" {'3' contents}|	""#"" ""{"" &lt;name&gt; ""}"" {'3' value asQualifiedReference}|	""#"" ""{"" &lt;dottedName&gt; ""}"" {'3' value asQualifiedReference};ByteArray: 	{WriteStream on: ByteArray new}|	ByteArray &lt;number&gt; {'1' nextPut: '2' value; yourself};Array: 	{WriteStream on: Array new}|	Array ArrayLiteral {'1' nextPut: '2'; yourself} |	Array &lt;name&gt; "":="" {'2' stopPosition + 1 = '3' startPosition ifTrue: ['1' nextPut: ('2' value, ':') asSymbol] ifFalse: ['1' nextPut: '2' value asSymbol; nextPut: #':']. scanner position: '3' startPosition. currentToken := nil. '1'};ArrayLiteral:	Literal {#liftFirstValue:}|	&lt;name&gt; {'1' value asSymbol}|	&lt;binarySymbol&gt; {'1' value asSymbol}|	&lt;keyword&gt; {'1' value asSymbol}|	&lt;multikeyword&gt; {'1' value asSymbol}|	""{"" &lt;name&gt; ""}"" {'2' value asQualifiedReference}|	""{"" &lt;dottedName&gt; ""}"" {'2' value asQualifiedReference}|	""("" Array "")"" {'2' contents}|	""["" ByteArray ""]"" {'2' contents}|	&lt;anyChar&gt; {'1' value asSymbol}|	&lt;dottedName&gt; {'1' value};"</body></methods><methods><class-id>Refactory.SmaCC.StParser class</class-id> <category>generated-starting states</category><body package="SmaCC Example Parsers" selector="startingStateForMethod">startingStateForMethod	^1</body><body package="SmaCC Example Parsers" selector="startingStateForSequenceNode">startingStateForSequenceNode	^2</body></methods><methods><class-id>Refactory.SmaCC.StParser class</class-id> <category>generated-accessing</category><body package="SmaCC Example Parsers" selector="scannerClass">scannerClass	^StScanner</body></methods><methods><class-id>Refactory.SmaCC.JavaParser</class-id> <category>generated-tables</category><body package="SmaCC Example Parsers" selector="reduceTable">reduceTable	^#(#(103 1 #reduceFor:)#(103 1 #reduceFor:)#(104 1 #reduceFor:)#(104 1 #reduceFor:)#(105 1 #reduceFor:)#(105 1 #reduceFor:)#(106 1 #reduceFor:)#(106 1 #reduceFor:)#(107 1 #reduceFor:)#(107 1 #reduceFor:)#(107 1 #reduceFor:)#(107 1 #reduceFor:)#(107 1 #reduceFor:)#(108 1 #reduceFor:)#(108 1 #reduceFor:)#(109 1 #reduceFor:)#(110 2 #reduceFor:)#(110 2 #reduceFor:)#(111 1 #reduceFor:)#(111 1 #reduceFor:)#(112 1 #reduceFor:)#(113 1 #reduceFor:)#(114 2 #reduceFor:)#(114 3 #reduceFor:)#(115 1 #reduceFor:)#(116 3 #reduceFor:)#(117 1 #reduceFor:)#(117 1 #reduceFor:)#(117 1 #reduceFor:)#(117 1 #reduceFor:)#(117 1 #reduceFor:)#(117 1 #reduceFor:)#(118 1 #reduceFor:)#(118 0 #reduceFor:)#(119 1 #reduceFor:)#(119 0 #reduceFor:)#(120 1 #reduceFor:)#(120 0 #reduceFor:)#(121 3 #reduceFor:)#(122 1 #reduceFor:)#(122 2 #reduceFor:)#(123 1 #reduceFor:)#(123 2 #reduceFor:)#(124 1 #reduceFor:)#(124 1 #reduceFor:)#(125 1 #reduceFor:)#(125 1 #reduceFor:)#(125 1 #reduceFor:)#(126 3 #reduceFor:)#(127 5 #reduceFor:)#(128 6 #reduceFor:)#(129 5 #reduceFor:)#(130 1 #reduceFor:)#(131 0 #reduceFor:)#(131 1 #reduceFor:)#(132 1 #reduceFor:)#(132 1 #reduceFor:)#(132 1 #reduceFor:)#(132 1 #reduceFor:)#(132 1 #reduceFor:)#(132 1 #reduceFor:)#(132 1 #reduceFor:)#(132 1 #reduceFor:)#(132 1 #reduceFor:)#(132 1 #reduceFor:)#(132 1 #reduceFor:)#(133 0 #reduceFor:)#(133 1 #reduceFor:)#(134 0 #reduceFor:)#(134 1 #reduceFor:)#(135 3 #reduceFor:)#(136 2 #reduceFor:)#(137 1 #reduceFor:)#(137 3 #reduceFor:)#(138 2 #reduceFor:)#(139 0 #reduceFor:)#(139 1 #reduceFor:)#(140 1 #reduceFor:)#(140 2 #reduceFor:)#(141 1 #reduceFor:)#(141 1 #reduceFor:)#(141 1 #reduceFor:)#(141 1 #reduceFor:)#(142 1 #reduceFor:)#(142 1 #reduceFor:)#(142 6 #reduceFor:)#(142 1 #reduceFor:)#(142 1 #reduceFor:)#(143 2 #reduceFor:)#(144 4 #reduceFor:)#(145 3 #reduceFor:)#(146 4 #reduceFor:)#(147 2 #reduceFor:)#(148 1 #reduceFor:)#(148 3 #reduceFor:)#(149 1 #reduceFor:)#(149 3 #reduceFor:)#(150 1 #reduceFor:)#(150 3 #reduceFor:)#(151 1 #reduceFor:)#(151 1 #reduceFor:)#(152 1 #reduceFor:)#(153 4 #reduceFor:)#(153 3 #reduceFor:)#(153 3 #reduceFor:)#(153 2 #reduceFor:)#(154 4 #reduceFor:)#(154 4 #reduceFor:)#(155 1 #reduceFor:)#(155 1 #reduceFor:)#(156 4 #reduceFor:)#(156 3 #reduceFor:)#(157 0 #reduceFor:)#(157 1 #reduceFor:)#(158 0 #reduceFor:)#(158 1 #reduceFor:)#(159 1 #reduceFor:)#(159 3 #reduceFor:)#(160 2 #reduceFor:)#(160 3 #reduceFor:)#(161 2 #reduceFor:)#(162 1 #reduceFor:)#(162 3 #reduceFor:)#(163 4 #reduceFor:)#(164 4 #reduceFor:)#(164 3 #reduceFor:)#(164 3 #reduceFor:)#(164 2 #reduceFor:)#(165 5 #reduceFor:)#(165 5 #reduceFor:)#(165 7 #reduceFor:)#(165 7 #reduceFor:)#(166 1 #reduceFor:)#(166 2 #reduceFor:)#(167 0 #reduceFor:)#(167 1 #reduceFor:)#(168 1 #reduceFor:)#(168 1 #reduceFor:)#(169 0 #reduceFor:)#(169 1 #reduceFor:)#(170 3 #reduceFor:)#(171 2 #reduceFor:)#(171 3 #reduceFor:)#(172 0 #reduceFor:)#(172 1 #reduceFor:)#(173 1 #reduceFor:)#(173 2 #reduceFor:)#(174 1 #reduceFor:)#(174 1 #reduceFor:)#(174 1 #reduceFor:)#(174 1 #reduceFor:)#(175 1 #reduceFor:)#(176 2 #reduceFor:)#(177 1 #reduceFor:)#(177 3 #reduceFor:)#(178 0 #reduceFor:)#(178 1 #reduceFor:)#(179 1 #reduceFor:)#(179 1 #reduceFor:)#(179 1 #reduceFor:)#(179 1 #reduceFor:)#(180 2 #reduceFor:)#(181 1 #reduceFor:)#(181 1 #reduceFor:)#(181 1 #reduceFor:)#(181 1 #reduceFor:)#(181 1 #reduceFor:)#(181 1 #reduceFor:)#(182 2 #reduceFor:)#(182 3 #reduceFor:)#(183 1 #reduceFor:)#(183 1 #reduceFor:)#(183 1 #reduceFor:)#(183 1 #reduceFor:)#(183 1 #reduceFor:)#(183 1 #reduceFor:)#(183 1 #reduceFor:)#(183 1 #reduceFor:)#(183 1 #reduceFor:)#(183 1 #reduceFor:)#(183 1 #reduceFor:)#(184 3 #reduceFor:)#(185 5 #reduceFor:)#(186 7 #reduceFor:)#(187 5 #reduceFor:)#(188 9 #reduceFor:)#(189 3 #reduceFor:)#(190 7 #reduceFor:)#(191 5 #reduceFor:)#(192 9 #reduceFor:)#(193 1 #reduceFor:)#(193 1 #reduceFor:)#(193 1 #reduceFor:)#(193 1 #reduceFor:)#(193 1 #reduceFor:)#(194 1 #reduceFor:)#(195 2 #reduceFor:)#(196 5 #reduceFor:)#(197 7 #reduceFor:)#(198 3 #reduceFor:)#(199 3 #reduceFor:)#(200 3 #reduceFor:)#(201 5 #reduceFor:)#(202 3 #reduceFor:)#(203 3 #reduceFor:)#(203 4 #reduceFor:)#(204 1 #reduceFor:)#(204 1 #reduceFor:)#(204 1 #reduceFor:)#(204 1 #reduceFor:)#(204 1 #reduceFor:)#(204 1 #reduceFor:)#(204 1 #reduceFor:)#(205 3 #reduceFor:)#(206 2 #reduceFor:)#(207 2 #reduceFor:)#(208 2 #reduceFor:)#(209 2 #reduceFor:)#(210 4 #reduceFor:)#(210 6 #reduceFor:)#(210 6 #reduceFor:)#(210 8 #reduceFor:)#(211 5 #reduceFor:)#(211 6 #reduceFor:)#(211 7 #reduceFor:)#(211 8 #reduceFor:)#(212 4 #reduceFor:)#(212 3 #reduceFor:)#(212 3 #reduceFor:)#(212 2 #reduceFor:)#(213 1 #reduceFor:)#(213 2 #reduceFor:)#(214 1 #reduceFor:)#(214 2 #reduceFor:)#(215 2 #reduceFor:)#(216 3 #reduceFor:)#(216 2 #reduceFor:)#(217 1 #reduceFor:)#(218 0 #reduceFor:)#(218 1 #reduceFor:)#(219 0 #reduceFor:)#(219 1 #reduceFor:)#(220 0 #reduceFor:)#(220 1 #reduceFor:)#(221 1 #reduceFor:)#(221 1 #reduceFor:)#(222 1 #reduceFor:)#(222 3 #reduceFor:)#(223 1 #reduceFor:)#(224 0 #reduceFor:)#(224 1 #reduceFor:)#(225 1 #reduceFor:)#(225 2 #reduceFor:)#(226 0 #reduceFor:)#(226 1 #reduceFor:)#(227 2 #reduceFor:)#(228 5 #reduceFor:)#(229 1 #reduceFor:)#(229 1 #reduceFor:)#(229 3 #reduceFor:)#(229 1 #reduceFor:)#(229 1 #reduceFor:)#(229 1 #reduceFor:)#(229 1 #reduceFor:)#(229 3 #reduceFor:)#(229 3 #reduceFor:)#(229 3 #reduceFor:)#(229 3 #reduceFor:)#(229 3 #reduceFor:)#(230 4 #reduceFor:)#(230 4 #reduceFor:)#(230 4 #reduceFor:)#(230 4 #reduceFor:)#(231 3 #reduceFor:)#(231 3 #reduceFor:)#(231 5 #reduceFor:)#(232 4 #reduceFor:)#(232 4 #reduceFor:)#(233 1 #reduceFor:)#(233 3 #reduceFor:)#(234 1 #reduceFor:)#(234 2 #reduceFor:)#(235 0 #reduceFor:)#(235 1 #reduceFor:)#(236 3 #reduceFor:)#(237 1 #reduceFor:)#(237 1 #reduceFor:)#(237 1 #reduceFor:)#(237 1 #reduceFor:)#(238 1 #reduceFor:)#(238 1 #reduceFor:)#(238 2 #reduceFor:)#(238 2 #reduceFor:)#(238 1 #reduceFor:)#(239 1 #reduceFor:)#(239 2 #reduceFor:)#(239 2 #reduceFor:)#(239 1 #reduceFor:)#(240 5 #reduceFor:)#(240 4 #reduceFor:)#(240 5 #reduceFor:)#(241 1 #reduceFor:)#(241 3 #reduceFor:)#(241 3 #reduceFor:)#(241 3 #reduceFor:)#(242 1 #reduceFor:)#(242 3 #reduceFor:)#(242 3 #reduceFor:)#(243 1 #reduceFor:)#(243 3 #reduceFor:)#(243 3 #reduceFor:)#(243 3 #reduceFor:)#(244 1 #reduceFor:)#(244 3 #reduceFor:)#(244 3 #reduceFor:)#(244 3 #reduceFor:)#(244 3 #reduceFor:)#(244 3 #reduceFor:)#(245 1 #reduceFor:)#(245 3 #reduceFor:)#(245 3 #reduceFor:)#(246 1 #reduceFor:)#(246 3 #reduceFor:)#(247 1 #reduceFor:)#(247 3 #reduceFor:)#(248 1 #reduceFor:)#(248 3 #reduceFor:)#(249 1 #reduceFor:)#(249 3 #reduceFor:)#(250 1 #reduceFor:)#(250 3 #reduceFor:)#(251 1 #reduceFor:)#(251 5 #reduceFor:)#(252 1 #reduceFor:)#(252 1 #reduceFor:)#(253 1 #reduceFor:)#(253 1 #reduceFor:)#(253 1 #reduceFor:)#(254 1 #reduceFor:)#(254 1 #reduceFor:)#(254 1 #reduceFor:)#(254 1 #reduceFor:)#(254 1 #reduceFor:)#(254 1 #reduceFor:)#(254 1 #reduceFor:)#(254 1 #reduceFor:)#(254 1 #reduceFor:)#(254 1 #reduceFor:)#(254 1 #reduceFor:)#(254 1 #reduceFor:)#(257 1 #reduceFor:)#(258 3 #reduceFor:)#(259 1 #reduceFor:)#(259 2 #reduceFor:))</body><body package="SmaCC Example Parsers" selector="transitionTable">transitionTable	^#(#[1 0 138 0 8 0 138 0 9 0 138 0 12 0 138 0 17 0 138 0 18 0 9 0 29 0 138 0 30 0 138 0 36 0 138 0 37 0 138 0 38 0 138 0 39 0 138 0 40 0 138 0 42 0 138 0 44 0 138 0 45 0 138 0 46 0 13 0 118 0 17 0 121 0 138 0 255 0 21 1 1 0 25 1 2]#[1 0 29 0 99 0 33 0 111 0 37 0 115 0 41 0 116]#[1 0 146 0 8 0 146 0 9 0 146 0 12 0 146 0 17 0 146 0 18 0 146 0 30 0 146 0 36 0 146 0 37 0 146 0 38 0 146 0 39 0 146 0 40 0 45 0 42 0 146 0 44 0 146 0 45 0 146 0 46 0 49 0 119 0 53 0 122 0 57 0 124 0 61 0 126 0 65 0 127 0 146 0 255]#[0 0 134 0 8 0 9 0 12 0 17 0 18 0 30 0 36 0 37 0 38 0 39 0 40 0 42 0 44 0 45 0 46 0 255]#[0 0 0 0 255]#[0 5 126 0 255]#[0 0 102 0 1 0 2 0 3 0 4 0 5 0 6 0 11 0 13 0 14 0 19 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 99]#[1 0 69 0 27 0 73 0 30]#[0 0 78 0 1 0 2 0 3 0 4 0 5 0 6 0 11 0 13 0 14 0 19 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 99]#[0 0 82 0 1 0 2 0 3 0 4 0 5 0 6 0 11 0 13 0 14 0 19 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 99]#[1 0 29 0 99 0 77 0 111 0 37 0 115 0 41 0 116]#[1 0 81 0 8 0 218 0 9 0 85 0 12 0 218 0 17 0 89 0 18 0 93 0 30 0 97 0 36 0 101 0 37 0 105 0 38 0 109 0 39 0 113 0 40 0 117 0 44 0 121 0 45 0 125 0 46 0 129 0 120 0 133 0 123 0 137 0 125 0 141 0 128 0 145 0 129 0 149 0 131 0 153 0 132 0 154 0 255 0 157 1 3]#[1 0 142 0 8 0 142 0 9 0 142 0 12 0 142 0 17 0 142 0 18 0 142 0 30 0 142 0 36 0 142 0 37 0 142 0 38 0 142 0 39 0 142 0 40 0 45 0 42 0 142 0 44 0 142 0 45 0 142 0 46 0 161 0 124 0 61 0 126 0 65 0 127 0 142 0 255]#[0 0 162 0 8 0 9 0 12 0 17 0 18 0 30 0 36 0 37 0 38 0 39 0 40 0 42 0 44 0 45 0 46 0 255]#[0 0 178 0 8 0 9 0 12 0 17 0 18 0 30 0 36 0 37 0 38 0 39 0 40 0 42 0 44 0 45 0 46 0 255]#[0 0 182 0 8 0 9 0 12 0 17 0 18 0 30 0 36 0 37 0 38 0 39 0 40 0 42 0 44 0 45 0 46 0 255]#[0 0 165 0 99]#[0 0 158 0 8 0 9 0 12 0 17 0 18 0 30 0 36 0 37 0 38 0 39 0 40 0 42 0 44 0 45 0 46 0 255]#[1 0 169 0 27 0 173 0 30]#[0 1 10 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 1 6 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 1 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 0 194 0 8 0 9 0 12 0 17 0 18 0 30 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 255]#[0 0 242 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 0 246 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 0 250 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 0 254 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 0 238 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 0 226 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 0 230 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 0 234 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 5 130 0 255]#[1 0 81 0 8 0 218 0 9 0 85 0 12 0 218 0 17 0 89 0 18 0 93 0 30 0 97 0 36 0 101 0 37 0 105 0 38 0 109 0 39 0 113 0 40 0 117 0 44 0 121 0 45 0 125 0 46 0 177 0 125 0 141 0 128 0 145 0 129 0 149 0 131 0 153 0 132 0 150 0 255 0 157 1 3]#[0 0 170 0 8 0 9 0 12 0 17 0 18 0 30 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 255]#[0 0 186 0 8 0 9 0 12 0 17 0 18 0 30 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 255]#[0 0 190 0 8 0 9 0 12 0 17 0 18 0 30 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 255]#[1 0 181 0 9 0 185 0 17]#[0 5 134 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[1 0 222 0 7 0 81 0 8 0 222 0 9 0 85 0 12 0 222 0 17 0 89 0 18 0 222 0 24 0 222 0 25 0 222 0 26 0 222 0 28 0 222 0 31 0 222 0 32 0 222 0 33 0 222 0 34 0 97 0 36 0 101 0 37 0 105 0 38 0 109 0 39 0 113 0 40 0 117 0 44 0 121 0 45 0 125 0 46 0 222 0 99 0 189 0 132]#[0 0 166 0 8 0 9 0 12 0 17 0 18 0 30 0 36 0 37 0 38 0 39 0 40 0 42 0 44 0 45 0 46 0 255]#[0 0 106 0 1 0 2 0 3 0 4 0 5 0 6 0 11 0 13 0 14 0 19 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 99]#[1 0 193 0 43 0 165 0 99]#[0 0 198 0 8 0 9 0 12 0 17 0 18 0 30 0 36 0 37 0 38 0 39 0 40 0 42 0 44 0 45 0 46 0 255]#[0 0 174 0 8 0 9 0 12 0 17 0 18 0 30 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 255]#[0 0 197 0 99]#[0 0 201 0 99]#[0 5 138 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 0 205 0 30]#[1 1 14 0 1 0 209 0 10 1 14 0 11 0 213 0 133 0 217 0 136]#[1 2 46 0 1 0 221 0 10 0 225 0 169 0 229 0 171]#[0 0 202 0 8 0 9 0 12 0 17 0 18 0 30 0 36 0 37 0 38 0 39 0 40 0 42 0 44 0 45 0 46 0 255]#[1 0 29 0 99 0 233 0 109 0 237 0 111 0 241 0 112 0 37 0 115 0 41 0 116]#[1 1 22 0 1 0 245 0 11 0 249 0 134 0 253 0 138]#[0 1 18 0 1 0 11]#[1 0 29 0 99 1 1 0 109 0 237 0 111 1 5 0 113 0 37 0 115 0 41 0 116]#[1 1 9 0 1 1 13 0 170]#[1 2 50 0 1 1 17 0 5]#[0 0 86 0 1 0 5 0 11 0 30]#[1 0 66 0 1 0 66 0 4 0 66 0 5 0 66 0 11 0 66 0 19 0 69 0 27 0 66 0 30]#[0 1 34 0 1 0 11]#[1 0 29 0 99 1 1 0 109 0 237 0 111 1 21 0 113 0 37 0 115 0 41 0 116 1 25 0 137]#[1 1 29 0 1 1 33 0 135]#[0 1 26 0 1]#[0 0 90 0 1 0 5]#[0 2 58 0 1 0 5]#[1 2 66 0 2 0 218 0 7 0 81 0 8 0 218 0 9 0 85 0 12 0 218 0 17 0 89 0 18 0 218 0 24 0 218 0 25 0 218 0 26 0 218 0 28 0 218 0 31 0 218 0 32 0 218 0 33 0 218 0 34 0 97 0 36 0 101 0 37 0 105 0 38 0 109 0 39 0 113 0 40 0 117 0 44 0 121 0 45 0 125 0 46 0 218 0 99 1 37 0 128 1 41 0 129 1 45 0 131 0 153 0 132 1 49 0 146 1 53 0 154 1 57 0 172 1 61 0 173 1 65 0 174 1 69 0 175 1 73 0 176 0 157 1 3]#[0 0 210 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 255]#[1 0 29 0 99 1 1 0 109 0 237 0 111 1 77 0 113 0 37 0 115 0 41 0 116]#[0 1 38 0 1 0 5]#[1 1 46 0 1 1 81 0 5]#[1 1 85 0 1 1 50 0 2 0 218 0 7 0 81 0 8 0 218 0 9 0 85 0 12 0 218 0 17 0 89 0 18 0 218 0 24 0 218 0 25 0 218 0 26 0 218 0 28 1 89 0 30 0 218 0 31 0 218 0 32 0 218 0 33 0 218 0 34 0 97 0 36 0 101 0 37 0 105 0 38 0 109 0 39 1 93 0 40 0 117 0 44 0 121 0 45 0 125 0 46 0 218 0 99 1 97 0 129 1 101 0 131 0 153 0 132 1 105 0 139 1 109 0 140 1 113 0 141 1 117 0 142 1 121 0 143 1 125 0 144 1 129 0 145 1 133 0 146 1 137 0 147 1 141 0 154 0 157 1 3]#[0 0 206 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 255]#[0 2 90 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 2 94 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[1 1 145 0 7 0 181 0 9 0 185 0 17 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 0 29 0 99 1 181 0 103 1 185 0 104 1 189 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 1 209 0 110 1 213 0 111 0 37 0 115 0 41 0 116]#[0 2 98 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 1 217 0 30]#[0 1 221 0 2]#[1 2 70 0 2 0 218 0 7 0 81 0 8 0 218 0 9 0 85 0 12 0 218 0 17 0 89 0 18 0 218 0 24 0 218 0 25 0 218 0 26 0 218 0 28 0 218 0 31 0 218 0 32 0 218 0 33 0 218 0 34 0 97 0 36 0 101 0 37 0 105 0 38 0 109 0 39 0 113 0 40 0 117 0 44 0 121 0 45 0 125 0 46 0 218 0 99 1 37 0 128 1 41 0 129 1 45 0 131 0 153 0 132 1 49 0 146 1 53 0 154 1 225 0 174 1 69 0 175 1 73 0 176 0 157 1 3]#[0 2 74 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 2 82 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 2 86 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 2 62 0 1 0 5]#[1 0 29 0 99 1 1 0 109 0 237 0 111 1 229 0 113 0 37 0 115 0 41 0 116]#[1 1 85 0 1 2 114 0 2 1 233 0 7 0 81 0 8 0 218 0 9 0 85 0 12 1 237 0 16 0 218 0 17 0 89 0 18 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 1 0 35 0 97 0 36 2 5 0 37 0 105 0 38 2 9 0 39 0 113 0 40 0 117 0 44 0 121 0 45 0 125 0 46 2 13 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 2 37 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 2 81 0 99 2 85 0 103 1 185 0 104 2 89 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 2 93 0 110 2 97 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 105 0 128 2 109 0 129 0 149 0 131 0 153 0 132 2 113 0 145 2 117 0 166 2 121 0 168 2 125 0 178 2 129 0 179 2 133 0 180 2 137 0 181 2 141 0 182 2 145 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253 0 157 1 3]#[0 1 98 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[1 1 85 0 1 0 238 0 7 0 238 0 8 0 238 0 9 0 238 0 12 0 238 0 17 0 238 0 18 0 238 0 24 0 238 0 25 0 238 0 26 0 238 0 28 0 238 0 31 0 238 0 32 0 238 0 33 0 238 0 34 0 238 0 36 0 238 0 37 0 238 0 38 0 238 0 39 0 238 0 40 0 238 0 44 0 238 0 45 0 238 0 46 0 238 0 99 3 9 0 145]#[0 1 94 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[1 1 145 0 7 3 13 0 9 0 185 0 17 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 0 29 0 99 1 181 0 103 1 185 0 104 1 189 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 1 209 0 110 1 213 0 111 3 17 0 115 0 41 0 116 3 21 0 163]#[0 3 25 0 2]#[1 1 85 0 1 1 54 0 2 0 218 0 7 0 81 0 8 0 218 0 9 0 85 0 12 0 218 0 17 0 89 0 18 0 218 0 24 0 218 0 25 0 218 0 26 0 218 0 28 1 89 0 30 0 218 0 31 0 218 0 32 0 218 0 33 0 218 0 34 0 97 0 36 0 101 0 37 0 105 0 38 0 109 0 39 1 93 0 40 0 117 0 44 0 121 0 45 0 125 0 46 0 218 0 99 1 97 0 129 1 101 0 131 0 153 0 132 3 29 0 141 1 117 0 142 1 121 0 143 1 125 0 144 1 129 0 145 1 133 0 146 1 137 0 147 1 141 0 154 0 157 1 3]#[0 1 58 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 1 66 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 1 70 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 1 74 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 1 78 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 1 82 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 1 86 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[1 1 85 0 1 3 33 0 30 3 37 0 145 3 41 0 155]#[1 3 45 0 99 3 49 0 156]#[0 0 54 0 4 0 20 0 27 0 99]#[0 0 58 0 4 0 20 0 27 0 99]#[0 0 62 0 4 0 20 0 27 0 99]#[0 0 50 0 4 0 20 0 27 0 99]#[0 0 10 0 4 0 20 0 27 0 99]#[0 0 38 0 4 0 20 0 27 0 99]#[0 0 42 0 4 0 20 0 27 0 99]#[0 0 46 0 4 0 20 0 27 0 99]#[1 3 53 0 4 0 22 0 99 3 57 0 114]#[0 0 26 0 99]#[1 3 61 0 99 3 65 0 148 3 69 0 149 3 73 0 150 3 77 0 156]#[0 0 6 0 4 0 20 0 27 0 99]#[0 0 30 0 4 0 20 0 27 0 99]#[0 0 34 0 4 0 20 0 27 0 99]#[0 0 14 0 2 0 5 0 6 0 13 0 20 0 30 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 99]#[0 0 18 0 2 0 5 0 6 0 13 0 20 0 30 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 99]#[1 0 66 0 2 3 53 0 4 0 66 0 5 0 66 0 6 0 66 0 13 0 66 0 20 0 69 0 27 0 66 0 30 0 66 0 48 0 66 0 49 0 66 0 50 0 66 0 51 0 66 0 52 0 66 0 53 0 66 0 54 0 66 0 55 0 66 0 56 0 66 0 57 0 66 0 59 0 66 0 65 0 66 0 72 0 66 0 99 3 81 0 114]#[0 2 102 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 2 54 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 255]#[0 2 78 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 1 42 0 1 0 5]#[0 3 85 0 27]#[0 3 89 0 19]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 3 125 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[0 4 14 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 3 221 0 27]#[0 3 18 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 3 225 0 19]#[1 0 246 0 8 0 246 0 9 0 246 0 12 0 246 0 17 0 246 0 18 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 0 246 0 36 0 246 0 37 0 246 0 38 0 246 0 39 0 246 0 40 0 246 0 44 0 246 0 45 0 246 0 46 0 29 0 99 1 181 0 103 1 185 0 104 3 229 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 1 209 0 110 1 213 0 111 0 37 0 115 0 41 0 116]#[1 0 254 0 8 0 254 0 9 0 254 0 12 0 254 0 17 0 254 0 18 3 233 0 19 0 254 0 36 0 254 0 37 0 254 0 38 0 254 0 39 0 254 0 40 0 254 0 44 0 254 0 45 0 254 0 46]#[0 3 237 0 19]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 3 241 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 3 198 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 3 245 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 3 249 0 219 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 0 29 0 99 3 253 0 103 1 193 0 106 1 197 0 107 1 201 0 108 4 1 0 109 0 237 0 111 4 5 0 112 0 37 0 115 0 41 0 116]#[1 1 85 0 1 4 9 0 145]#[1 1 85 0 1 1 233 0 7 1 237 0 16 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 1 0 35 4 13 0 39 2 13 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 2 37 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 2 81 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 113 0 145 2 121 0 168 4 17 0 181 2 145 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[0 4 21 0 19]#[1 3 234 0 30 4 25 0 99 4 29 0 224]#[1 3 234 0 30 4 25 0 99 4 33 0 224]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 4 49 0 238 3 165 0 239 3 169 0 240]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 4 53 0 238 3 165 0 239 3 169 0 240]#[0 0 110 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 0 114 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 0 118 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 0 122 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 0 126 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 0 130 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[1 0 102 0 3 0 102 0 4 4 57 0 13 0 102 0 14 0 102 0 19 0 102 0 27 0 102 0 60 0 102 0 61 0 102 0 62 0 102 0 63 0 102 0 64 0 102 0 66 0 102 0 67 0 102 0 68 0 102 0 69 0 102 0 70 0 102 0 82 0 102 0 86 0 102 0 99]#[1 3 53 0 4 4 61 0 27 0 22 0 99 3 57 0 114]#[1 4 65 0 99 4 69 0 148 3 69 0 149 3 73 0 150]#[1 4 73 0 27 0 18 0 99]#[1 5 66 0 3 4 77 0 4 5 66 0 14 4 81 0 19 4 85 0 27 5 66 0 60 5 66 0 61 5 66 0 62 5 66 0 63 5 66 0 64 5 66 0 66 5 66 0 67 5 66 0 68 5 66 0 69 5 66 0 70 4 126 0 82 4 126 0 86 0 66 0 99 3 81 0 114]#[0 4 10 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 2 130 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 134 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 174 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[1 1 85 0 1 2 118 0 2 1 233 0 7 0 81 0 8 0 218 0 9 0 85 0 12 1 237 0 16 0 218 0 17 0 89 0 18 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 1 0 35 0 97 0 36 2 5 0 37 0 105 0 38 2 9 0 39 0 113 0 40 0 117 0 44 0 121 0 45 0 125 0 46 2 13 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 2 37 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 2 81 0 99 2 85 0 103 1 185 0 104 2 89 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 2 93 0 110 2 97 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 105 0 128 2 109 0 129 0 149 0 131 0 153 0 132 2 113 0 145 2 121 0 168 4 89 0 179 2 133 0 180 2 137 0 181 2 141 0 182 2 145 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253 0 157 1 3]#[1 4 122 0 2 4 122 0 5 4 122 0 6 4 122 0 13 4 122 0 20 4 93 0 27 4 122 0 30 4 122 0 43 4 122 0 48 4 122 0 49 4 122 0 50 4 122 0 51 4 122 0 52 4 122 0 53 4 122 0 54 4 122 0 55 4 122 0 56 4 122 0 57 4 122 0 59 4 122 0 65 4 122 0 72 4 122 0 82 4 122 0 83 4 122 0 84 4 122 0 85 4 122 0 86 4 122 0 87 4 122 0 88 4 122 0 89 4 122 0 90]#[0 4 97 0 2]#[0 2 22 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 122 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 126 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 4 101 0 30]#[0 2 142 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 146 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 150 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 154 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 158 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 162 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 178 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 182 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 186 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 190 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 194 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 198 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 202 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 206 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 210 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 214 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 4 105 0 30]#[0 3 62 0 5 0 20 0 30]#[0 3 66 0 5 0 20 0 30]#[0 3 70 0 5 0 20 0 30]#[1 3 74 0 5 3 74 0 20 3 74 0 30 4 130 0 82 4 130 0 86]#[1 3 78 0 5 3 78 0 20 3 78 0 30 4 134 0 82 4 134 0 86]#[1 4 30 0 4 3 82 0 5 3 82 0 20 4 30 0 27 3 82 0 30 4 30 0 82 4 30 0 86]#[1 4 22 0 4 3 86 0 5 3 86 0 20 4 22 0 27 3 86 0 30 4 22 0 82 4 22 0 86]#[1 2 38 0 2 4 109 0 4 2 38 0 5 2 38 0 6 2 38 0 13 2 38 0 20 2 38 0 27 2 38 0 30 2 38 0 43 2 38 0 48 2 38 0 49 2 38 0 50 2 38 0 51 2 38 0 52 2 38 0 53 2 38 0 54 2 38 0 55 2 38 0 56 2 38 0 57 2 38 0 59 2 38 0 65 2 38 0 72 2 38 0 82 2 38 0 83 2 38 0 84 2 38 0 85 2 38 0 86 2 38 0 87 2 38 0 88 2 38 0 89 2 38 0 90]#[0 2 42 0 2 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[1 4 26 0 2 5 70 0 3 4 26 0 4 4 26 0 5 4 26 0 6 4 26 0 13 5 70 0 14 4 26 0 20 4 26 0 27 4 26 0 30 4 26 0 43 4 26 0 48 4 26 0 49 4 26 0 50 4 26 0 51 4 26 0 52 4 26 0 53 4 26 0 54 4 26 0 55 4 26 0 56 4 26 0 57 4 26 0 59 5 70 0 60 5 70 0 61 5 70 0 62 5 70 0 63 5 70 0 64 4 26 0 65 5 70 0 66 5 70 0 67 5 70 0 68 5 70 0 69 5 70 0 70 4 26 0 72 4 26 0 82 4 26 0 83 4 26 0 84 4 26 0 85 4 26 0 86 4 26 0 87 4 26 0 88 4 26 0 89 4 26 0 90]#[1 4 34 0 2 5 74 0 3 4 34 0 4 4 34 0 5 4 34 0 6 4 34 0 13 5 74 0 14 4 34 0 20 4 34 0 27 4 34 0 30 4 34 0 43 4 34 0 48 4 34 0 49 4 34 0 50 4 34 0 51 4 34 0 52 4 34 0 53 4 34 0 54 4 34 0 55 4 34 0 56 4 34 0 57 4 34 0 59 5 74 0 60 5 74 0 61 5 74 0 62 5 74 0 63 5 74 0 64 4 34 0 65 5 74 0 66 5 74 0 67 5 74 0 68 5 74 0 69 5 74 0 70 4 34 0 72 4 34 0 82 4 34 0 83 4 34 0 84 4 34 0 85 4 34 0 86 4 34 0 87 4 34 0 88 4 34 0 89 4 34 0 90]#[1 4 113 0 82 4 117 0 86]#[1 4 121 0 3 4 125 0 14 4 129 0 60 4 133 0 61 4 137 0 62 4 141 0 63 4 145 0 64 4 149 0 66 4 153 0 67 4 157 0 68 4 161 0 69 4 165 0 70 4 169 0 254]#[0 1 102 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 4 173 0 99]#[1 0 78 0 4 4 177 0 19 0 78 0 27 0 78 0 99]#[1 1 198 0 1 4 181 0 21 4 185 0 157 4 189 0 161]#[0 1 30 0 1 0 2 0 4 0 5 0 6 0 7 0 8 0 9 0 12 0 13 0 16 0 17 0 18 0 19 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 65 0 71 0 72 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 255]#[0 1 62 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 1 186 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 1 182 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 1 118 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 4 193 0 19]#[1 1 198 0 1 4 197 0 4 4 181 0 21 1 198 0 30 4 201 0 157 4 189 0 161]#[0 4 205 0 6]#[1 0 70 0 2 4 209 0 4 0 70 0 5 0 70 0 6 0 70 0 13 0 70 0 20 0 70 0 27 0 70 0 30 0 70 0 48 0 70 0 49 0 70 0 50 0 70 0 51 0 70 0 52 0 70 0 53 0 70 0 54 0 70 0 55 0 70 0 56 0 70 0 57 0 70 0 59 0 70 0 65 0 70 0 72 0 70 0 99]#[1 1 138 0 3 1 138 0 4 1 138 0 5 4 193 0 19 1 138 0 30]#[1 4 213 0 5 4 217 0 30]#[0 1 122 0 5 0 30]#[1 4 221 0 3 4 225 0 4 1 130 0 5 1 130 0 30]#[1 1 198 0 1 4 197 0 4 4 181 0 21 1 198 0 30 4 229 0 157 4 189 0 161]#[1 0 74 0 2 4 209 0 4 0 74 0 5 0 74 0 6 0 74 0 13 0 74 0 20 0 74 0 27 0 74 0 30 0 74 0 48 0 74 0 49 0 74 0 50 0 74 0 51 0 74 0 52 0 74 0 53 0 74 0 54 0 74 0 55 0 74 0 56 0 74 0 57 0 74 0 59 0 74 0 65 0 74 0 72 0 74 0 99]#[0 4 233 0 9]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 4 237 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 4 241 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 245 0 111 0 37 0 115 0 41 0 116 2 101 0 117 4 249 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 4 253 0 238 3 165 0 239 3 169 0 240]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 5 1 0 238 3 165 0 239 3 169 0 240]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 5 5 0 238 3 165 0 239 3 169 0 240]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 5 9 0 238 3 165 0 239 3 169 0 240]#[1 3 53 0 4 4 61 0 27 3 57 0 114]#[0 4 73 0 27]#[1 4 126 0 2 5 66 0 3 4 77 0 4 4 126 0 5 4 126 0 6 4 126 0 13 5 66 0 14 4 81 0 19 4 126 0 20 4 85 0 27 4 126 0 30 4 126 0 43 4 126 0 48 4 126 0 49 4 126 0 50 4 126 0 51 4 126 0 52 4 126 0 53 4 126 0 54 4 126 0 55 4 126 0 56 4 126 0 57 4 126 0 59 5 66 0 60 5 66 0 61 5 66 0 62 5 66 0 63 5 66 0 64 4 126 0 65 5 66 0 66 5 66 0 67 5 66 0 68 5 66 0 69 5 66 0 70 4 126 0 72 4 126 0 82 4 126 0 83 4 126 0 84 4 126 0 85 4 126 0 86 4 126 0 87 4 126 0 88 4 126 0 89 4 126 0 90 3 81 0 114]#[0 5 13 0 20]#[0 5 62 0 2 0 5 0 6 0 13 0 20 0 30]#[0 4 138 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[0 4 142 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[0 4 130 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 4 134 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 4 30 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 4 22 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[1 4 158 0 2 4 158 0 5 4 158 0 6 4 158 0 13 4 158 0 20 4 158 0 30 4 158 0 43 4 158 0 48 4 158 0 49 4 158 0 50 4 158 0 51 4 158 0 52 4 158 0 53 4 158 0 54 4 158 0 55 4 158 0 56 4 158 0 57 4 158 0 59 4 158 0 65 4 158 0 72 4 113 0 82 4 158 0 83 4 158 0 84 4 158 0 85 4 117 0 86 4 158 0 87 4 158 0 88 4 158 0 89 4 158 0 90]#[0 4 186 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[0 4 154 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[0 4 170 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[1 4 202 0 2 4 202 0 5 4 202 0 6 4 202 0 13 4 202 0 20 4 202 0 30 5 17 0 43 4 202 0 48 4 202 0 49 4 202 0 50 4 202 0 51 4 202 0 52 4 202 0 53 4 202 0 54 4 202 0 55 4 202 0 56 4 202 0 57 4 202 0 59 4 202 0 65 4 202 0 72 5 21 0 83 4 202 0 84 4 202 0 85 4 202 0 87 5 25 0 88 4 202 0 89 4 202 0 90]#[1 4 214 0 2 4 214 0 5 4 214 0 6 4 214 0 13 4 214 0 20 4 214 0 30 4 214 0 48 4 214 0 49 4 214 0 50 4 214 0 51 4 214 0 52 4 214 0 53 4 214 0 54 4 214 0 55 4 214 0 56 4 214 0 57 4 214 0 59 4 214 0 65 4 214 0 72 4 214 0 84 4 214 0 85 4 214 0 87 5 29 0 89 5 33 0 90]#[1 4 230 0 2 4 230 0 5 4 230 0 6 4 230 0 13 4 230 0 20 4 230 0 30 4 230 0 48 4 230 0 49 4 230 0 50 4 230 0 51 4 230 0 52 4 230 0 53 4 230 0 54 4 230 0 55 4 230 0 56 4 230 0 57 4 230 0 59 4 230 0 65 4 230 0 72 5 37 0 84 5 41 0 85 5 45 0 87]#[1 4 254 0 2 4 254 0 5 4 254 0 6 4 254 0 13 4 254 0 20 4 254 0 30 4 254 0 48 4 254 0 49 4 254 0 50 4 254 0 51 4 254 0 52 4 254 0 53 4 254 0 54 5 49 0 55 5 53 0 56 5 57 0 57 5 61 0 59 4 254 0 65 5 65 0 72]#[1 5 10 0 2 5 10 0 5 5 10 0 6 5 10 0 13 5 10 0 20 5 10 0 30 5 10 0 48 5 10 0 49 5 10 0 50 5 10 0 51 5 69 0 52 5 10 0 53 5 10 0 54 5 73 0 65]#[1 5 18 0 2 5 18 0 5 5 18 0 6 5 18 0 13 5 18 0 20 5 18 0 30 5 77 0 48 5 18 0 49 5 18 0 50 5 18 0 51 5 18 0 53 5 18 0 54]#[1 5 26 0 2 5 26 0 5 5 26 0 6 5 26 0 13 5 26 0 20 5 26 0 30 5 81 0 49 5 26 0 50 5 26 0 51 5 26 0 53 5 26 0 54]#[1 5 34 0 2 5 34 0 5 5 34 0 6 5 34 0 13 5 34 0 20 5 34 0 30 5 85 0 50 5 34 0 51 5 34 0 53 5 34 0 54]#[1 5 42 0 2 5 42 0 5 5 42 0 6 5 42 0 13 5 42 0 20 5 42 0 30 5 89 0 51 5 42 0 53 5 42 0 54]#[1 5 50 0 2 5 50 0 5 5 50 0 6 5 50 0 13 5 50 0 20 5 50 0 30 5 93 0 53 5 97 0 54]#[0 5 58 0 2 0 5 0 6 0 13 0 20 0 30]#[0 1 154 0 2 0 5 0 6 0 13 0 20 0 30]#[0 5 101 0 99]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 5 105 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 4 65 0 99 5 109 0 148 3 69 0 149 3 73 0 150]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 5 113 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 5 117 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[0 5 121 0 30]#[0 3 202 0 30]#[0 5 125 0 30]#[1 5 129 0 4 5 133 0 114 5 137 0 234 5 141 0 236]#[1 5 129 0 4 0 86 0 19 5 145 0 114 5 149 0 234 5 141 0 236]#[0 5 153 0 19]#[1 5 157 0 73 3 250 0 74 5 161 0 225 5 165 0 226 5 169 0 228]#[0 3 233 0 19]#[0 5 173 0 58]#[1 1 233 0 7 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 3 190 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 5 177 0 37 2 25 0 76 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 2 85 0 103 1 185 0 104 2 89 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 2 93 0 110 2 97 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 5 181 0 182 5 185 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 5 189 0 218 5 193 0 221 5 197 0 222 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[0 3 238 0 30]#[0 5 201 0 30]#[0 5 205 0 30]#[1 4 126 0 2 4 77 0 4 4 126 0 5 4 126 0 6 4 126 0 13 4 81 0 19 4 126 0 20 4 85 0 27 4 126 0 30 4 126 0 43 4 126 0 48 4 126 0 49 4 126 0 50 4 126 0 51 4 126 0 52 4 126 0 53 4 126 0 54 4 126 0 55 4 126 0 56 4 126 0 57 4 126 0 59 4 126 0 65 4 126 0 72 4 126 0 82 4 126 0 83 4 126 0 84 4 126 0 85 4 126 0 86 4 126 0 87 4 126 0 88 4 126 0 89 4 126 0 90 3 81 0 114]#[0 4 26 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 4 34 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 3 94 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[0 3 98 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[1 1 85 0 1 1 233 0 7 1 237 0 16 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 1 0 35 4 13 0 39 2 13 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 2 37 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 2 81 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 113 0 145 2 121 0 168 5 209 0 181 2 145 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[0 5 213 0 9]#[0 1 138 0 3 0 4 0 5 0 20 0 30]#[1 4 213 0 5 2 166 0 30]#[0 5 217 0 9]#[1 4 205 0 6 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 5 221 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 1 233 0 7 3 93 0 19 2 30 0 20 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 5 225 0 152 5 229 0 167 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 5 233 0 233 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 5 237 0 9 5 241 0 22 5 245 0 23 0 165 0 99]#[0 2 26 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[1 5 249 0 76 5 253 0 99]#[0 1 110 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 138 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 3 22 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 6 1 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[0 3 102 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 3 106 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 5 78 0 7 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 76 0 82 0 86 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 5 122 0 7 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 76 0 82 0 86 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 5 106 0 7 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 76 0 82 0 86 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 5 110 0 7 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 76 0 82 0 86 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 5 114 0 7 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 76 0 82 0 86 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 5 118 0 7 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 76 0 82 0 86 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 5 102 0 7 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 76 0 82 0 86 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 5 82 0 7 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 76 0 82 0 86 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 5 86 0 7 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 76 0 82 0 86 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 5 90 0 7 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 76 0 82 0 86 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 5 94 0 7 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 76 0 82 0 86 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 5 98 0 7 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 31 0 32 0 33 0 34 0 76 0 82 0 86 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 6 5 0 252 3 5 0 253]#[1 1 14 0 1 0 209 0 10 1 14 0 11 6 9 0 133 0 217 0 136]#[1 1 206 0 20 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 6 13 0 37 0 29 0 99 1 181 0 103 1 185 0 104 6 17 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 1 209 0 110 1 213 0 111 0 37 0 115 0 41 0 116 6 21 0 158 6 25 0 159 6 29 0 160]#[1 0 29 0 99 0 233 0 109 0 237 0 111 6 33 0 112 0 37 0 115 0 41 0 116 6 37 0 162]#[1 6 41 0 1 6 45 0 164]#[0 1 202 0 1 0 30]#[1 1 206 0 20 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 6 13 0 37 0 29 0 99 1 181 0 103 1 185 0 104 6 17 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 1 209 0 110 1 213 0 111 0 37 0 115 0 41 0 116 6 49 0 158 6 25 0 159 6 29 0 160]#[0 6 53 0 6]#[0 1 178 0 1 0 30]#[0 0 94 0 1 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 99]#[0 6 57 0 6]#[1 4 65 0 99 6 61 0 149 3 73 0 150]#[0 1 114 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[1 6 65 0 1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 6 69 0 151 6 73 0 152 6 77 0 153 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[0 6 81 0 6]#[0 1 174 0 1 0 30]#[0 4 42 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 6 85 0 20]#[1 3 53 0 4 4 110 0 20 4 61 0 27 6 89 0 114 6 93 0 235]#[1 5 66 0 3 4 77 0 4 5 66 0 14 4 81 0 19 4 126 0 20 4 85 0 27 4 126 0 43 4 126 0 48 4 126 0 49 4 126 0 50 4 126 0 51 4 126 0 52 4 126 0 53 4 126 0 54 4 126 0 55 4 126 0 56 4 126 0 57 4 126 0 59 5 66 0 60 5 66 0 61 5 66 0 62 5 66 0 63 5 66 0 64 4 126 0 65 5 66 0 66 5 66 0 67 5 66 0 68 5 66 0 69 5 66 0 70 4 126 0 72 4 126 0 82 4 126 0 83 4 126 0 84 4 126 0 85 4 126 0 86 4 126 0 87 4 126 0 88 4 126 0 89 4 126 0 90 6 97 0 114]#[0 6 101 0 20]#[0 4 146 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[0 4 150 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[0 4 162 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[0 4 166 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[0 4 18 0 4 0 27 0 82 0 86]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 6 105 0 238 3 165 0 239 3 169 0 240]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 6 109 0 238 3 165 0 239 3 169 0 240]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 6 113 0 238 3 165 0 239 3 169 0 240]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 6 117 0 241]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 6 121 0 241]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 6 125 0 242]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 6 129 0 242]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 6 133 0 242]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 6 137 0 243]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 6 141 0 243]#[1 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 0 29 0 99 6 145 0 103 6 149 0 104 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 1 209 0 110 1 213 0 111 0 37 0 115 0 41 0 116]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 6 153 0 243]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 6 157 0 243]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 6 161 0 244]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 6 165 0 244]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 6 169 0 245]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 6 173 0 246]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 6 177 0 247]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 6 181 0 248]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 6 185 0 249]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 6 189 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 4 78 0 2 4 78 0 3 4 78 0 4 4 78 0 5 4 78 0 6 4 78 0 13 4 78 0 14 6 193 0 19 4 78 0 20 4 78 0 27 4 78 0 30 4 78 0 43 4 78 0 48 4 78 0 49 4 78 0 50 4 78 0 51 4 78 0 52 4 78 0 53 4 78 0 54 4 78 0 55 4 78 0 56 4 78 0 57 4 78 0 59 4 78 0 60 4 78 0 61 4 78 0 62 4 78 0 63 4 78 0 64 4 78 0 65 4 78 0 66 4 78 0 67 4 78 0 68 4 78 0 69 4 78 0 70 4 78 0 72 4 78 0 82 4 78 0 83 4 78 0 84 4 78 0 85 4 78 0 86 4 78 0 87 4 78 0 88 4 78 0 89 4 78 0 90]#[0 6 197 0 20]#[1 4 213 0 5 2 170 0 30]#[0 6 201 0 20]#[0 6 205 0 20]#[0 3 50 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 3 42 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[1 4 205 0 6 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 6 209 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 6 65 0 1 4 209 0 4 6 213 0 153]#[1 4 110 0 2 5 129 0 4 4 110 0 5 4 110 0 6 4 110 0 13 4 110 0 20 4 110 0 27 4 110 0 30 4 110 0 43 4 110 0 48 4 110 0 49 4 110 0 50 4 110 0 51 4 110 0 52 4 110 0 53 4 110 0 54 4 110 0 55 4 110 0 56 4 110 0 57 4 110 0 59 4 110 0 65 4 110 0 72 4 110 0 82 4 110 0 83 4 110 0 84 4 110 0 85 4 110 0 86 4 110 0 87 4 110 0 88 4 110 0 89 4 110 0 90 6 217 0 114 6 221 0 235 6 225 0 236]#[0 4 102 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[1 6 65 0 1 4 209 0 4 6 229 0 153]#[1 4 110 0 2 5 129 0 4 4 110 0 5 4 110 0 6 4 110 0 13 4 110 0 20 4 110 0 27 4 110 0 30 4 110 0 43 4 110 0 48 4 110 0 49 4 110 0 50 4 110 0 51 4 110 0 52 4 110 0 53 4 110 0 54 4 110 0 55 4 110 0 56 4 110 0 57 4 110 0 59 4 110 0 65 4 110 0 72 4 110 0 82 4 110 0 83 4 110 0 84 4 110 0 85 4 110 0 86 4 110 0 87 4 110 0 88 4 110 0 89 4 110 0 90 6 217 0 114 6 233 0 235 6 225 0 236]#[1 1 233 0 7 3 93 0 19 2 30 0 20 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 5 225 0 152 6 237 0 167 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 5 233 0 233 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[0 6 241 0 19]#[1 3 54 0 1 3 54 0 2 3 54 0 7 3 54 0 8 3 54 0 9 3 54 0 12 3 54 0 15 3 54 0 16 3 54 0 17 3 54 0 18 3 54 0 19 3 54 0 22 3 54 0 23 3 54 0 24 3 54 0 25 3 54 0 26 3 54 0 28 3 54 0 30 3 54 0 31 3 54 0 32 3 54 0 33 3 54 0 34 3 54 0 35 3 54 0 36 3 54 0 37 3 54 0 38 3 54 0 39 3 54 0 40 3 54 0 41 3 54 0 44 3 54 0 45 3 54 0 46 3 54 0 47 3 54 0 58 3 54 0 71 5 157 0 73 3 254 0 74 3 54 0 75 3 54 0 76 3 54 0 77 3 54 0 78 3 54 0 79 3 54 0 80 3 54 0 81 3 54 0 82 3 54 0 86 3 54 0 93 3 54 0 94 3 54 0 95 3 54 0 96 3 54 0 97 3 54 0 98 3 54 0 99 6 245 0 228]#[1 6 249 0 74 6 253 0 227]#[0 3 242 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 7 1 0 19]#[1 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 0 29 0 99 1 181 0 103 1 185 0 104 3 229 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 1 209 0 110 1 213 0 111 0 37 0 115 0 41 0 116]#[0 3 218 0 30]#[0 3 222 0 5 0 20 0 30]#[0 7 5 0 30]#[0 3 194 0 30]#[1 7 9 0 5 3 214 0 30]#[0 3 34 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 3 38 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 218 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 4 38 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 4 46 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 7 13 0 6]#[0 4 94 0 5 0 20]#[0 7 17 0 20]#[1 7 21 0 5 2 34 0 20]#[0 4 50 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 4 54 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 7 25 0 27]#[0 7 29 0 99]#[1 4 74 0 2 4 74 0 3 4 74 0 4 4 74 0 5 4 74 0 6 4 74 0 13 4 74 0 14 7 33 0 19 4 74 0 20 4 74 0 27 4 74 0 30 4 74 0 43 4 74 0 48 4 74 0 49 4 74 0 50 4 74 0 51 4 74 0 52 4 74 0 53 4 74 0 54 4 74 0 55 4 74 0 56 4 74 0 57 4 74 0 59 4 74 0 60 4 74 0 61 4 74 0 62 4 74 0 63 4 74 0 64 4 74 0 65 4 74 0 66 4 74 0 67 4 74 0 68 4 74 0 69 4 74 0 70 4 74 0 72 4 74 0 82 4 74 0 83 4 74 0 84 4 74 0 85 4 74 0 86 4 74 0 87 4 74 0 88 4 74 0 89 4 74 0 90]#[0 7 37 0 6]#[0 3 90 0 2 0 5 0 6 0 13 0 20 0 30]#[1 1 22 0 1 0 245 0 11 7 41 0 134 0 253 0 138]#[1 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 0 29 0 99 1 181 0 103 1 185 0 104 7 45 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 1 209 0 110 1 213 0 111 0 37 0 115 0 41 0 116]#[1 4 65 0 99 7 49 0 150]#[0 7 53 0 20]#[1 7 57 0 5 1 210 0 20]#[0 1 214 0 5 0 20]#[0 1 234 0 1 0 5 0 30]#[1 1 230 0 1 7 61 0 5 1 230 0 30]#[1 1 85 0 1 7 65 0 2 1 233 0 7 0 81 0 8 0 218 0 9 0 85 0 12 1 237 0 16 0 218 0 17 0 89 0 18 1 241 0 19 7 69 0 22 7 73 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 1 0 35 0 97 0 36 2 5 0 37 0 105 0 38 2 9 0 39 0 113 0 40 0 117 0 44 0 121 0 45 0 125 0 46 2 13 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 2 37 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 2 81 0 99 2 85 0 103 1 185 0 104 2 89 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 2 93 0 110 2 97 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 105 0 128 2 109 0 129 0 149 0 131 0 153 0 132 2 113 0 145 7 77 0 165 7 81 0 166 7 85 0 168 2 129 0 179 2 133 0 180 2 137 0 181 2 141 0 182 2 145 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253 0 157 1 3]#[0 1 106 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 7 89 0 20]#[0 1 194 0 1 0 4 0 21 0 30]#[0 0 98 0 1 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 99]#[0 1 126 0 5 0 30]#[1 6 65 0 1 7 93 0 2 7 97 0 5 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 7 101 0 151 6 73 0 152 6 77 0 153 2 121 0 168 7 105 0 177 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[0 1 134 0 5 0 30]#[0 1 146 0 2 0 5 0 30]#[0 1 150 0 2 0 5 0 30]#[0 1 142 0 3 0 4 0 5 0 20 0 30]#[1 7 109 0 1 7 113 0 212]#[1 4 209 0 4 4 114 0 20 0 70 0 27]#[0 7 117 0 20]#[1 4 209 0 4 7 121 0 20 0 74 0 27]#[1 4 18 0 2 4 18 0 4 4 18 0 5 4 18 0 6 1 233 0 7 4 18 0 13 3 93 0 19 4 18 0 20 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 4 18 0 27 1 161 0 28 4 18 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 4 18 0 43 4 18 0 48 4 18 0 49 4 18 0 50 4 18 0 51 4 18 0 52 4 18 0 53 4 18 0 54 4 18 0 55 4 18 0 56 4 18 0 57 4 18 0 59 4 18 0 65 4 18 0 72 2 25 0 76 4 18 0 82 4 18 0 83 4 18 0 84 4 18 0 85 4 18 0 86 4 18 0 87 4 18 0 88 4 18 0 89 4 18 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 7 125 0 239 3 169 0 240]#[0 4 190 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[0 4 198 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[0 4 194 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[1 4 206 0 2 4 206 0 5 4 206 0 6 4 206 0 13 4 206 0 20 4 206 0 30 5 17 0 43 4 206 0 48 4 206 0 49 4 206 0 50 4 206 0 51 4 206 0 52 4 206 0 53 4 206 0 54 4 206 0 55 4 206 0 56 4 206 0 57 4 206 0 59 4 206 0 65 4 206 0 72 5 21 0 83 4 206 0 84 4 206 0 85 4 206 0 87 5 25 0 88 4 206 0 89 4 206 0 90]#[1 4 210 0 2 4 210 0 5 4 210 0 6 4 210 0 13 4 210 0 20 4 210 0 30 5 17 0 43 4 210 0 48 4 210 0 49 4 210 0 50 4 210 0 51 4 210 0 52 4 210 0 53 4 210 0 54 4 210 0 55 4 210 0 56 4 210 0 57 4 210 0 59 4 210 0 65 4 210 0 72 5 21 0 83 4 210 0 84 4 210 0 85 4 210 0 87 5 25 0 88 4 210 0 89 4 210 0 90]#[1 4 218 0 2 4 218 0 5 4 218 0 6 4 218 0 13 4 218 0 20 4 218 0 30 4 218 0 48 4 218 0 49 4 218 0 50 4 218 0 51 4 218 0 52 4 218 0 53 4 218 0 54 4 218 0 55 4 218 0 56 4 218 0 57 4 218 0 59 4 218 0 65 4 218 0 72 4 218 0 84 4 218 0 85 4 218 0 87 5 29 0 89 5 33 0 90]#[1 4 222 0 2 4 222 0 5 4 222 0 6 4 222 0 13 4 222 0 20 4 222 0 30 4 222 0 48 4 222 0 49 4 222 0 50 4 222 0 51 4 222 0 52 4 222 0 53 4 222 0 54 4 222 0 55 4 222 0 56 4 222 0 57 4 222 0 59 4 222 0 65 4 222 0 72 4 222 0 84 4 222 0 85 4 222 0 87 5 29 0 89 5 33 0 90]#[1 4 226 0 2 4 226 0 5 4 226 0 6 4 226 0 13 4 226 0 20 4 226 0 30 4 226 0 48 4 226 0 49 4 226 0 50 4 226 0 51 4 226 0 52 4 226 0 53 4 226 0 54 4 226 0 55 4 226 0 56 4 226 0 57 4 226 0 59 4 226 0 65 4 226 0 72 4 226 0 84 4 226 0 85 4 226 0 87 5 29 0 89 5 33 0 90]#[1 4 242 0 2 4 242 0 5 4 242 0 6 4 242 0 13 4 242 0 20 4 242 0 30 4 242 0 48 4 242 0 49 4 242 0 50 4 242 0 51 4 242 0 52 4 242 0 53 4 242 0 54 4 242 0 55 4 242 0 56 4 242 0 57 4 242 0 59 4 242 0 65 4 242 0 72 5 37 0 84 5 41 0 85 5 45 0 87]#[1 4 246 0 2 4 246 0 5 4 246 0 6 4 246 0 13 4 246 0 20 4 246 0 30 4 246 0 48 4 246 0 49 4 246 0 50 4 246 0 51 4 246 0 52 4 246 0 53 4 246 0 54 4 246 0 55 4 246 0 56 4 246 0 57 4 246 0 59 4 246 0 65 4 246 0 72 5 37 0 84 5 41 0 85 5 45 0 87]#[1 3 53 0 4 3 57 0 114]#[0 4 250 0 2 0 5 0 6 0 13 0 20 0 30 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72]#[1 4 238 0 2 4 238 0 5 4 238 0 6 4 238 0 13 4 238 0 20 4 238 0 30 4 238 0 48 4 238 0 49 4 238 0 50 4 238 0 51 4 238 0 52 4 238 0 53 4 238 0 54 4 238 0 55 4 238 0 56 4 238 0 57 4 238 0 59 4 238 0 65 4 238 0 72 5 37 0 84 5 41 0 85 5 45 0 87]#[1 4 234 0 2 4 234 0 5 4 234 0 6 4 234 0 13 4 234 0 20 4 234 0 30 4 234 0 48 4 234 0 49 4 234 0 50 4 234 0 51 4 234 0 52 4 234 0 53 4 234 0 54 4 234 0 55 4 234 0 56 4 234 0 57 4 234 0 59 4 234 0 65 4 234 0 72 5 37 0 84 5 41 0 85 5 45 0 87]#[1 5 6 0 2 5 6 0 5 5 6 0 6 5 6 0 13 5 6 0 20 5 6 0 30 5 6 0 48 5 6 0 49 5 6 0 50 5 6 0 51 5 6 0 52 5 6 0 53 5 6 0 54 5 49 0 55 5 53 0 56 5 57 0 57 5 61 0 59 5 6 0 65 5 65 0 72]#[1 5 2 0 2 5 2 0 5 5 2 0 6 5 2 0 13 5 2 0 20 5 2 0 30 5 2 0 48 5 2 0 49 5 2 0 50 5 2 0 51 5 2 0 52 5 2 0 53 5 2 0 54 5 49 0 55 5 53 0 56 5 57 0 57 5 61 0 59 5 2 0 65 5 65 0 72]#[1 5 14 0 2 5 14 0 5 5 14 0 6 5 14 0 13 5 14 0 20 5 14 0 30 5 14 0 48 5 14 0 49 5 14 0 50 5 14 0 51 5 69 0 52 5 14 0 53 5 14 0 54 5 73 0 65]#[1 5 22 0 2 5 22 0 5 5 22 0 6 5 22 0 13 5 22 0 20 5 22 0 30 5 77 0 48 5 22 0 49 5 22 0 50 5 22 0 51 5 22 0 53 5 22 0 54]#[1 5 30 0 2 5 30 0 5 5 30 0 6 5 30 0 13 5 30 0 20 5 30 0 30 5 81 0 49 5 30 0 50 5 30 0 51 5 30 0 53 5 30 0 54]#[1 5 38 0 2 5 38 0 5 5 38 0 6 5 38 0 13 5 38 0 20 5 38 0 30 5 85 0 50 5 38 0 51 5 38 0 53 5 38 0 54]#[1 5 46 0 2 5 46 0 5 5 46 0 6 5 46 0 13 5 46 0 20 5 46 0 30 5 89 0 51 5 46 0 53 5 46 0 54]#[0 7 129 0 13]#[1 1 233 0 7 3 93 0 19 2 30 0 20 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 5 225 0 152 7 133 0 167 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 5 233 0 233 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 1 85 0 1 1 233 0 7 1 237 0 16 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 7 137 0 35 4 13 0 39 7 141 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 7 145 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 7 149 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 113 0 145 2 121 0 168 7 153 0 181 7 157 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 7 161 0 189 7 165 0 190 7 169 0 191 7 173 0 192 7 177 0 193 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[1 1 85 0 1 7 181 0 145]#[1 1 85 0 1 1 233 0 7 1 237 0 16 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 1 0 35 4 13 0 39 2 13 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 2 37 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 2 81 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 113 0 145 2 121 0 168 7 185 0 181 2 145 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[0 7 189 0 6]#[0 4 66 0 2 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[1 4 114 0 2 4 209 0 4 4 114 0 5 4 114 0 6 4 114 0 13 4 114 0 20 4 114 0 27 4 114 0 30 4 114 0 43 4 114 0 48 4 114 0 49 4 114 0 50 4 114 0 51 4 114 0 52 4 114 0 53 4 114 0 54 4 114 0 55 4 114 0 56 4 114 0 57 4 114 0 59 4 114 0 65 4 114 0 72 4 114 0 82 4 114 0 83 4 114 0 84 4 114 0 85 4 114 0 86 4 114 0 87 4 114 0 88 4 114 0 89 4 114 0 90]#[0 4 58 0 2 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 4 106 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 4 70 0 2 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 4 62 0 2 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 7 193 0 20]#[1 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 6 13 0 37 0 29 0 99 1 181 0 103 1 185 0 104 6 17 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 1 209 0 110 1 213 0 111 0 37 0 115 0 41 0 116 7 197 0 160]#[0 3 246 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[1 1 85 0 1 7 201 0 145]#[0 3 58 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 7 205 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 3 198 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 3 245 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 7 209 0 219 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 1 233 0 7 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 7 213 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[0 4 86 0 2 0 3 0 4 0 5 0 6 0 13 0 14 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 3 110 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 7 217 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[0 7 221 0 99]#[0 7 225 0 19]#[1 1 233 0 7 3 93 0 19 2 30 0 20 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 5 225 0 152 7 229 0 167 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 5 233 0 233 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[0 4 90 0 2 0 3 0 4 0 5 0 6 0 13 0 14 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[1 1 29 0 1 7 233 0 135]#[1 4 65 0 99 7 237 0 150]#[1 4 225 0 4 1 222 0 5 1 222 0 20]#[0 1 242 0 1 0 21]#[1 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 6 13 0 37 0 29 0 99 1 181 0 103 1 185 0 104 6 17 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 1 209 0 110 1 213 0 111 0 37 0 115 0 41 0 116 7 241 0 160]#[1 0 29 0 99 0 233 0 109 0 237 0 111 7 245 0 112 0 37 0 115 0 41 0 116]#[0 2 2 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[1 4 14 0 4 7 249 0 19 4 14 0 27 4 14 0 82 4 14 0 86]#[1 7 253 0 19 3 221 0 27]#[1 1 85 0 1 8 1 0 2 1 233 0 7 0 81 0 8 0 218 0 9 0 85 0 12 1 237 0 16 0 218 0 17 0 89 0 18 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 1 0 35 0 97 0 36 2 5 0 37 0 105 0 38 2 9 0 39 0 113 0 40 0 117 0 44 0 121 0 45 0 125 0 46 2 13 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 2 37 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 2 81 0 99 2 85 0 103 1 185 0 104 2 89 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 2 93 0 110 2 97 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 105 0 128 2 109 0 129 0 149 0 131 0 153 0 132 2 113 0 145 8 5 0 166 2 121 0 168 2 129 0 179 2 133 0 180 2 137 0 181 2 141 0 182 2 145 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253 0 157 1 3]#[1 1 85 0 1 8 9 0 2 1 233 0 7 0 81 0 8 0 218 0 9 0 85 0 12 1 237 0 16 0 218 0 17 0 89 0 18 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 1 0 35 0 97 0 36 2 5 0 37 0 105 0 38 2 9 0 39 0 113 0 40 0 117 0 44 0 121 0 45 0 125 0 46 2 13 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 2 37 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 2 81 0 99 2 85 0 103 1 185 0 104 2 89 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 2 93 0 110 2 97 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 105 0 128 2 109 0 129 0 149 0 131 0 153 0 132 2 113 0 145 2 121 0 168 4 89 0 179 2 133 0 180 2 137 0 181 2 141 0 182 2 145 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253 0 157 1 3]#[1 8 13 0 27 4 122 0 82 4 122 0 86]#[0 1 190 0 1 0 4 0 21 0 30]#[0 1 170 0 2 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 8 17 0 2]#[0 2 106 0 2 0 5]#[1 8 21 0 2 8 25 0 5]#[1 8 29 0 2 8 33 0 41 8 37 0 47 8 41 0 213 8 45 0 214 8 49 0 215 8 53 0 216]#[0 3 26 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 8 57 0 238 3 165 0 239 3 169 0 240]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 8 61 0 239 3 169 0 240]#[0 4 178 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 4 37 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 4 41 0 231 4 45 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 8 65 0 251]#[0 8 69 0 20]#[0 8 73 0 19]#[0 8 77 0 19]#[0 8 81 0 19]#[1 0 102 0 3 0 102 0 4 8 85 0 13 0 102 0 14 0 102 0 19 0 102 0 27 0 102 0 60 0 102 0 61 0 102 0 62 0 102 0 63 0 102 0 64 0 102 0 66 0 102 0 67 0 102 0 68 0 102 0 69 0 102 0 70 0 102 0 82 0 102 0 86]#[0 2 222 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[1 2 142 0 1 2 142 0 2 2 142 0 7 2 142 0 8 2 142 0 9 2 142 0 12 2 254 0 15 2 142 0 16 2 142 0 17 2 142 0 18 2 142 0 19 2 142 0 22 2 142 0 23 2 142 0 24 2 142 0 25 2 142 0 26 2 142 0 28 2 142 0 30 2 142 0 31 2 142 0 32 2 142 0 33 2 142 0 34 2 142 0 35 2 142 0 36 2 142 0 37 2 142 0 38 2 142 0 39 2 142 0 40 2 142 0 41 2 142 0 44 2 142 0 45 2 142 0 46 2 142 0 47 2 142 0 58 2 142 0 71 2 142 0 75 2 142 0 76 2 142 0 77 2 142 0 78 2 142 0 79 2 142 0 80 2 142 0 81 2 142 0 82 2 142 0 86 2 142 0 93 2 142 0 94 2 142 0 95 2 142 0 96 2 142 0 97 2 142 0 98 2 142 0 99]#[0 3 2 0 15]#[0 3 6 0 15]#[0 3 10 0 15]#[0 3 14 0 15]#[0 8 89 0 15]#[0 3 46 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 230 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 4 118 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[1 1 29 0 1 3 126 0 2 3 126 0 4 3 126 0 5 3 126 0 6 3 126 0 13 3 126 0 20 3 126 0 27 3 126 0 30 3 126 0 43 3 126 0 48 3 126 0 49 3 126 0 50 3 126 0 51 3 126 0 52 3 126 0 53 3 126 0 54 3 126 0 55 3 126 0 56 3 126 0 57 3 126 0 59 3 126 0 65 3 126 0 72 3 126 0 82 3 126 0 83 3 126 0 84 3 126 0 85 3 126 0 86 3 126 0 87 3 126 0 88 3 126 0 89 3 126 0 90 8 93 0 135]#[0 8 97 0 20]#[0 4 2 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 8 101 0 20]#[0 8 105 0 30]#[0 3 226 0 5 0 20 0 30]#[0 4 98 0 5 0 20]#[1 4 82 0 2 4 82 0 3 4 82 0 4 4 82 0 5 4 82 0 6 4 82 0 13 4 82 0 14 8 109 0 19 4 82 0 20 4 82 0 27 4 82 0 30 4 82 0 43 4 82 0 48 4 82 0 49 4 82 0 50 4 82 0 51 4 82 0 52 4 82 0 53 4 82 0 54 4 82 0 55 4 82 0 56 4 82 0 57 4 82 0 59 4 82 0 60 4 82 0 61 4 82 0 62 4 82 0 63 4 82 0 64 4 82 0 65 4 82 0 66 4 82 0 67 4 82 0 68 4 82 0 69 4 82 0 70 4 82 0 72 4 82 0 82 4 82 0 83 4 82 0 84 4 82 0 85 4 82 0 86 4 82 0 87 4 82 0 88 4 82 0 89 4 82 0 90]#[1 1 233 0 7 3 93 0 19 2 30 0 20 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 5 225 0 152 8 113 0 167 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 5 233 0 233 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[0 8 117 0 20]#[0 1 90 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[1 4 225 0 4 1 226 0 5 1 226 0 20]#[0 1 218 0 5 0 20]#[0 1 238 0 1 0 5 0 30]#[1 1 233 0 7 3 93 0 19 2 30 0 20 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 5 225 0 152 8 121 0 167 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 5 233 0 233 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 1 233 0 7 3 93 0 19 2 30 0 20 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 5 225 0 152 8 125 0 167 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 5 233 0 233 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[0 1 250 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[1 1 85 0 1 8 129 0 2 1 233 0 7 0 81 0 8 0 218 0 9 0 85 0 12 1 237 0 16 0 218 0 17 0 89 0 18 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 1 0 35 0 97 0 36 2 5 0 37 0 105 0 38 2 9 0 39 0 113 0 40 0 117 0 44 0 121 0 45 0 125 0 46 2 13 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 2 37 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 2 81 0 99 2 85 0 103 1 185 0 104 2 89 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 2 93 0 110 2 97 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 105 0 128 2 109 0 129 0 149 0 131 0 153 0 132 2 113 0 145 2 121 0 168 4 89 0 179 2 133 0 180 2 137 0 181 2 141 0 182 2 145 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253 0 157 1 3]#[0 1 254 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[1 8 133 0 22 8 137 0 23 5 249 0 76 5 253 0 99]#[0 1 166 0 2 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 1 162 0 2 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[1 6 65 0 1 8 141 0 2 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 8 145 0 151 6 73 0 152 6 77 0 153 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[0 3 154 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 8 149 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 8 153 0 217 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[0 8 157 0 13]#[1 8 161 0 2 8 33 0 41 8 37 0 47 8 165 0 214 8 169 0 215 8 53 0 216]#[1 1 85 0 1 8 173 0 2 1 233 0 7 0 81 0 8 0 218 0 9 0 85 0 12 1 237 0 16 0 218 0 17 0 89 0 18 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 1 0 35 0 97 0 36 2 5 0 37 0 105 0 38 2 9 0 39 0 113 0 40 8 33 0 41 0 117 0 44 0 121 0 45 0 125 0 46 8 37 0 47 2 13 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 2 37 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 2 81 0 99 2 85 0 103 1 185 0 104 2 89 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 2 93 0 110 2 97 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 105 0 128 2 109 0 129 0 149 0 131 0 153 0 132 2 113 0 145 8 177 0 166 2 121 0 168 2 129 0 179 2 133 0 180 2 137 0 181 2 141 0 182 2 145 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 8 181 0 216 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253 0 157 1 3]#[0 3 158 0 2 0 41 0 47]#[0 3 166 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 4 174 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[0 4 182 0 2 0 5 0 6 0 13 0 20 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 83 0 84 0 85 0 87 0 88 0 89 0 90]#[0 5 54 0 2 0 5 0 6 0 13 0 20 0 30]#[0 3 118 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 8 185 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 8 189 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 1 233 0 7 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 3 190 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 5 177 0 37 2 25 0 76 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 2 85 0 103 1 185 0 104 2 89 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 2 93 0 110 2 97 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 5 181 0 182 5 185 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 8 193 0 218 5 193 0 221 5 197 0 222 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[1 1 85 0 1 1 233 0 7 1 237 0 16 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 7 137 0 35 4 13 0 39 7 141 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 7 145 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 7 149 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 113 0 145 2 121 0 168 5 209 0 181 7 157 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 7 161 0 189 7 165 0 190 7 169 0 191 7 173 0 192 8 197 0 193 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[1 1 85 0 1 1 233 0 7 1 237 0 16 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 1 0 35 4 13 0 39 2 13 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 2 37 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 2 81 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 113 0 145 2 121 0 168 8 201 0 181 2 145 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[0 3 130 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[1 1 85 0 1 8 205 0 145]#[0 8 209 0 30]#[1 1 233 0 7 1 241 0 19 3 206 0 20 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 5 185 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 8 213 0 220 8 217 0 222 8 221 0 223 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[1 1 233 0 7 3 93 0 19 2 30 0 20 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 5 225 0 152 8 225 0 167 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 5 233 0 233 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[0 8 229 0 20]#[0 3 114 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 8 233 0 20]#[0 8 237 0 20]#[0 1 246 0 1 0 2 0 7 0 8 0 9 0 12 0 17 0 18 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 99]#[0 8 241 0 19]#[0 8 245 0 19]#[0 1 158 0 2 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 2 110 0 2 0 5]#[0 3 186 0 13]#[0 8 249 0 13]#[0 3 182 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 3 146 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[1 1 85 0 1 8 253 0 2 1 233 0 7 0 81 0 8 0 218 0 9 0 85 0 12 1 237 0 16 0 218 0 17 0 89 0 18 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 1 0 35 0 97 0 36 2 5 0 37 0 105 0 38 2 9 0 39 0 113 0 40 8 33 0 41 0 117 0 44 0 121 0 45 0 125 0 46 8 37 0 47 2 13 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 2 37 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 2 81 0 99 2 85 0 103 1 185 0 104 2 89 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 2 93 0 110 2 97 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 105 0 128 2 109 0 129 0 149 0 131 0 153 0 132 2 113 0 145 8 177 0 166 2 121 0 168 2 129 0 179 2 133 0 180 2 137 0 181 2 141 0 182 2 145 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 8 181 0 216 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253 0 157 1 3]#[0 3 162 0 2 0 41 0 47]#[0 3 150 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[1 1 85 0 1 3 174 0 2 1 233 0 7 0 81 0 8 0 218 0 9 0 85 0 12 1 237 0 16 0 218 0 17 0 89 0 18 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 1 0 35 0 97 0 36 2 5 0 37 0 105 0 38 2 9 0 39 0 113 0 40 3 174 0 41 0 117 0 44 0 121 0 45 0 125 0 46 3 174 0 47 2 13 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 2 37 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 2 81 0 99 2 85 0 103 1 185 0 104 2 89 0 105 1 193 0 106 1 197 0 107 1 201 0 108 1 205 0 109 2 93 0 110 2 97 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 105 0 128 2 109 0 129 0 149 0 131 0 153 0 132 2 113 0 145 2 121 0 168 4 89 0 179 2 133 0 180 2 137 0 181 2 141 0 182 2 145 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253 0 157 1 3]#[0 3 170 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 9 1 0 20]#[0 9 5 0 20]#[0 9 9 0 30]#[0 2 238 0 15]#[0 2 226 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 4 6 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 3 30 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 9 13 0 20]#[1 7 9 0 5 3 230 0 20]#[0 3 210 0 20]#[0 9 17 0 20]#[1 1 29 0 1 3 134 0 2 3 134 0 4 3 134 0 5 3 134 0 6 3 134 0 13 3 134 0 20 3 134 0 27 3 134 0 30 3 134 0 43 3 134 0 48 3 134 0 49 3 134 0 50 3 134 0 51 3 134 0 52 3 134 0 53 3 134 0 54 3 134 0 55 3 134 0 56 3 134 0 57 3 134 0 59 3 134 0 65 3 134 0 72 3 134 0 82 3 134 0 83 3 134 0 84 3 134 0 85 3 134 0 86 3 134 0 87 3 134 0 88 3 134 0 89 3 134 0 90 9 21 0 135]#[0 9 25 0 30]#[0 9 29 0 30]#[1 1 233 0 7 3 93 0 19 2 30 0 20 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 5 225 0 152 9 33 0 167 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 5 233 0 233 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 1 233 0 7 3 93 0 19 2 30 0 20 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 5 225 0 152 9 37 0 167 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 5 233 0 233 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[0 3 178 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 3 142 0 1 0 2 0 7 0 8 0 9 0 12 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[1 1 85 0 1 1 233 0 7 1 237 0 16 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 7 137 0 35 4 13 0 39 7 141 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 7 145 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 7 149 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 113 0 145 2 121 0 168 7 153 0 181 7 157 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 7 161 0 189 7 165 0 190 7 169 0 191 7 173 0 192 9 41 0 193 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[1 1 85 0 1 1 233 0 7 1 237 0 16 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 7 137 0 35 4 13 0 39 7 141 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 7 145 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 7 149 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 113 0 145 2 121 0 168 7 185 0 181 7 157 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 7 161 0 189 7 165 0 190 7 169 0 191 7 173 0 192 9 45 0 193 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[1 1 233 0 7 3 93 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 3 198 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 3 97 0 89 3 101 0 90 3 105 0 91 3 109 0 92 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 3 245 0 152 2 121 0 168 3 129 0 205 3 133 0 206 3 137 0 207 3 141 0 208 3 145 0 209 3 149 0 210 3 153 0 211 9 49 0 219 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 157 0 237 3 161 0 238 3 165 0 239 3 169 0 240 3 173 0 241 3 177 0 242 3 181 0 243 3 185 0 244 3 189 0 245 3 193 0 246 3 197 0 247 3 201 0 248 3 205 0 249 3 209 0 250 3 213 0 251 3 217 0 252 3 5 0 253]#[1 1 85 0 1 1 233 0 7 1 237 0 16 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 1 0 35 4 13 0 39 2 13 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 2 37 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 2 81 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 113 0 145 2 121 0 168 9 53 0 181 2 145 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[0 3 122 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 3 138 0 2 0 4 0 5 0 6 0 13 0 20 0 27 0 30 0 43 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 59 0 65 0 72 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90]#[0 2 6 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 10 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 9 57 0 20]#[0 9 61 0 20]#[0 9 65 0 15]#[0 2 246 0 15]#[0 9 69 0 30]#[0 2 234 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 44 0 45 0 46 0 47 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 9 73 0 30]#[0 9 77 0 30]#[1 1 85 0 1 1 233 0 7 1 237 0 16 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 7 137 0 35 4 13 0 39 7 141 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 7 145 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 7 149 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 113 0 145 2 121 0 168 8 201 0 181 7 157 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 7 161 0 189 7 165 0 190 7 169 0 191 7 173 0 192 9 81 0 193 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[1 1 233 0 7 1 241 0 19 3 206 0 20 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 2 25 0 76 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 0 29 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 121 0 168 5 185 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 9 85 0 220 8 217 0 222 8 221 0 223 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[0 2 14 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 18 0 1 0 2 0 7 0 8 0 9 0 12 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 46 0 58 0 71 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 86 0 93 0 94 0 95 0 96 0 97 0 98 0 99]#[0 2 242 0 15]#[0 9 89 0 20]#[1 1 85 0 1 1 233 0 7 1 237 0 16 1 241 0 19 1 245 0 22 1 249 0 23 1 149 0 24 1 153 0 25 1 157 0 26 1 161 0 28 1 253 0 30 1 165 0 31 1 169 0 32 1 173 0 33 1 177 0 34 7 137 0 35 4 13 0 39 7 141 0 58 2 17 0 71 2 21 0 75 2 25 0 76 2 29 0 77 2 33 0 78 7 145 0 79 2 41 0 80 2 45 0 81 2 49 0 82 2 53 0 86 2 57 0 93 2 61 0 94 2 65 0 95 2 69 0 96 2 73 0 97 2 77 0 98 7 149 0 99 3 113 0 103 1 193 0 106 1 197 0 107 1 201 0 108 3 117 0 110 3 121 0 111 0 37 0 115 0 41 0 116 2 101 0 117 2 113 0 145 2 121 0 168 9 53 0 181 7 157 0 183 2 149 0 184 2 153 0 185 2 157 0 186 2 161 0 187 2 165 0 188 7 161 0 189 7 165 0 190 7 169 0 191 7 173 0 192 9 93 0 193 2 169 0 194 2 173 0 195 2 177 0 196 2 181 0 197 2 185 0 198 2 189 0 199 2 193 0 200 2 197 0 201 2 201 0 202 2 205 0 203 2 209 0 204 2 213 0 205 2 217 0 206 2 221 0 207 2 225 0 208 2 229 0 209 2 233 0 210 2 237 0 211 2 241 0 229 2 245 0 230 2 249 0 231 2 253 0 232 3 1 0 237 3 5 0 253]#[0 2 250 0 15])</body></methods><methods><class-id>Refactory.SmaCC.JavaParser class</class-id> <category>generated-comments</category><body package="SmaCC Example Parsers" selector="parserDefinitionComment">parserDefinitionComment	"goal :	compilation_unit	;# 19.3) Lexical Structure.literal :	&lt;INTEGER_LITERAL&gt;	|	&lt;FLOATING_POINT_LITERAL&gt;	|	&lt;BOOLEAN_LITERAL&gt;#	| 	""true""#	| 	""false""	|	&lt;CHARACTER_LITERAL&gt;	|	&lt;STRING_LITERAL&gt;	|	&lt;NULL_LITERAL&gt;	;# 19.4) Types, Values, and Variablestype	:	primitive_type	|	reference_type	;primitive_type :		numeric_type	|	""boolean""	;numeric_type:	integral_type	|	floating_point_type	;integral_type : 		""byte"" 	|	""short"" 	|	""int"" 	|	""long"" 	|	""char"" 	;floating_point_type : 		""float"" 	|	""double""	;reference_type :		class_or_interface_type	|	array_type	;class_or_interface_type : name;class_type :	class_or_interface_type;interface_type : class_or_interface_type;		array_type :	primitive_type dims	|	name dims	;# 19.5) Namesname	:	simple_name	|	qualified_name	;simple_name :	&lt;IDENTIFIER&gt;	;qualified_name :		name ""."" &lt;IDENTIFIER&gt;	;# 19.6) ""package""scompilation_unit :		package_declaration_opt 		import_declarations_opt		type_declarations_opt		;package_declaration_opt : package_declaration | ;import_declarations_opt : import_declarations | ;type_declarations_opt   : type_declarations   | ;import_declarations : 		import_declaration	|	import_declarations import_declaration	;type_declarations : 		type_declaration	|	type_declarations type_declaration	;package_declaration : 		""package"" name "";""	;import_declaration : 		single_type_import_declaration	|	type_import_on_demand_declaration	;single_type_import_declaration : 		""import"" name "";""	;type_import_on_demand_declaration :		""import"" name ""."" ""*"" "";""	;type_declaration :		class_declaration	|	interface_declaration	|	"";""	;# 19.7) Productions used only in the LALR(1) grammarmodifiers_opt:	|	modifiers	;modifiers : 	modifier	|	modifiers modifier	;modifier :	""public"" | ""protected"" | ""private""	|	""static""	|	""abstract"" | ""final"" | ""native"" | ""synchronized"" | ""transient"" | ""volatile""	|	""strictfp"" # note that semantic analysis must check that the	                 # context of the modifier allows strictfp.	;# 19.8) Classes# 19.8.1) Class Declaration:class_declaration : 	modifiers_opt ""class"" &lt;IDENTIFIER&gt; super_opt interfaces_opt class_body	;super :	""extends"" class_type	;super_opt :		|	super	;interfaces :	""implements"" interface_type_list	;interfaces_opt:	|	interfaces 	;interface_type_list : 		interface_type	|	interface_type_list "","" interface_type	;class_body :	""{"" class_body_declarations_opt ""}"" 	;class_body_declarations_opt : 	|	class_body_declarations ;class_body_declarations : 		class_body_declaration	|	class_body_declarations class_body_declaration	;class_body_declaration :		class_member_declaration	|	static_initializer	|	constructor_declaration	|	block	;class_member_declaration :		field_declaration	|	method_declaration	# repeat the prod for 'class_declaration' here: 	|	modifiers_opt ""class"" &lt;IDENTIFIER&gt; super_opt interfaces_opt class_body	|	interface_declaration	|	"";""	;# 19.8.2) Field Declarationsfield_declaration : 		modifiers_opt type variable_declarators "";""	;variable_declarators :		variable_declarator	|	variable_declarators "","" variable_declarator	;variable_declarator :		variable_declarator_id	|	variable_declarator_id ""="" variable_initializer	;variable_declarator_id :		&lt;IDENTIFIER&gt;	|	variable_declarator_id ""["" ""]""	;variable_initializer :		expression	|	array_initializer	;# 19.8.3) Method Declarationsmethod_declaration :		method_header method_body	;method_header :		modifiers_opt type method_declarator throws_opt	|	modifiers_opt ""void"" method_declarator throws_opt	;method_declarator :		&lt;IDENTIFIER&gt; ""("" formal_parameter_list_opt "")""	|	method_declarator ""["" ""]"" # deprecated	# be careful; the above production also allows 'void foo() []'	;formal_parameter_list_opt :	|	formal_parameter_list	;formal_parameter_list :		formal_parameter	|	formal_parameter_list "","" formal_parameter	;formal_parameter :		type variable_declarator_id	|	""final"" type variable_declarator_id	;throws_opt :		|	throws	;throws :	""throws"" class_type_list	;class_type_list :		class_type	|	class_type_list "","" class_type	;method_body :	block	|	"";""	;# 19.8.4) Static Initializersstatic_initializer :		""static"" block	;# 19.8.5) Constructor Declarationsconstructor_declaration :		modifiers_opt constructor_declarator throws_opt 			constructor_body	;constructor_declarator :		simple_name ""("" formal_parameter_list_opt "")""	;constructor_body :		""{"" explicit_constructor_invocation			block_statements ""}""	|	""{"" explicit_constructor_invocation ""}""	|	""{"" block_statements ""}""	|	""{"" ""}""	;explicit_constructor_invocation :		""this"" ""("" argument_list_opt "")"" "";""	|	""super"" ""("" argument_list_opt "")"" "";""	|	primary ""."" ""this"" ""("" argument_list_opt "")"" "";""	|	primary ""."" ""super"" ""("" argument_list_opt "")"" "";""	;# 19.9) Interfaces# 19.9.1) Interface Declarationsinterface_declaration :		modifiers_opt ""interface"" &lt;IDENTIFIER&gt; extends_interfaces_opt 			interface_body	;extends_interfaces_opt :	|	extends_interfaces	;extends_interfaces :		""extends"" interface_type	|	extends_interfaces "","" interface_type	;interface_body :		""{"" interface_member_declarations_opt ""}""	;interface_member_declarations_opt :	|	interface_member_declarations	;interface_member_declarations :		interface_member_declaration	|	interface_member_declarations interface_member_declaration	;interface_member_declaration :		constant_declaration	|	abstract_method_declaration	|	class_declaration	|	interface_declaration	;constant_declaration :		field_declaration	# need to semantically check that modifiers of field declaration	# include only PUBLIC, ""static"", or ""final"".  Other modifiers are	# disallowed.	;abstract_method_declaration :		method_header "";""	;# 19.10) Arraysarray_initializer :		""{"" variable_initializers "","" ""}""	|	""{"" variable_initializers ""}""	|	""{"" "","" ""}""	|	""{"" ""}""	;variable_initializers :		variable_initializer	|	variable_initializers "","" variable_initializer	;# 19.11) Blocks and Statementsblock :	""{"" block_statements_opt ""}""	;block_statements_opt :	|	block_statements	;block_statements :		block_statement	|	block_statements block_statement	;block_statement :		local_variable_declaration_statement	|	statement	|	class_declaration	|	interface_declaration	;local_variable_declaration_statement :		local_variable_declaration "";""	;local_variable_declaration :		type variable_declarators	|	""final"" type variable_declarators	;statement :	statement_without_trailing_substatement	|	labeled_statement	|	if_then_statement	|	if_then_else_statement	|	while_statement	|	for_statement	;statement_no_short_if :		statement_without_trailing_substatement	|	labeled_statement_no_short_if	|	if_then_else_statement_no_short_if	|	while_statement_no_short_if	|	for_statement_no_short_if	;statement_without_trailing_substatement :		block	|	empty_statement	|	expression_statement	|	switch_statement	|	do_statement	|	break_statement	|	continue_statement	|	return_statement	|	synchronized_statement	|	throw_statement	|	try_statement	;empty_statement :		"";""	;labeled_statement :		&lt;IDENTIFIER&gt; "":"" statement	;labeled_statement_no_short_if :		&lt;IDENTIFIER&gt; "":"" statement_no_short_if	;expression_statement :		statement_expression "";""	;statement_expression :		assignment	|	preincrement_expression	|	predecrement_expression	|	postincrement_expression	|	postdecrement_expression	|	method_invocation	|	class_instance_creation_expression	;if_then_statement :		""if"" ""("" expression "")"" statement	;if_then_else_statement :		""if"" ""("" expression "")"" statement_no_short_if 			""else"" statement	;if_then_else_statement_no_short_if :		""if"" ""("" expression "")"" statement_no_short_if			""else"" statement_no_short_if	;switch_statement :		""switch"" ""("" expression "")"" switch_block	;switch_block :		""{"" switch_block_statement_groups switch_labels ""}""	|	""{"" switch_block_statement_groups ""}""	|	""{"" switch_labels ""}""	|	""{"" ""}""	;switch_block_statement_groups :		switch_block_statement_group	|	switch_block_statement_groups switch_block_statement_group	;switch_block_statement_group :		switch_labels block_statements	;switch_labels :		switch_label	|	switch_labels switch_label	;switch_label :		""case"" constant_expression "":""	|	""default"" "":""	;while_statement :		""while"" ""("" expression "")"" statement	;while_statement_no_short_if :		""while"" ""("" expression "")"" statement_no_short_if	;do_statement :		""do"" statement ""while"" ""("" expression "")"" "";""	;for_statement :		""for"" ""("" for_init_opt "";"" expression_opt "";""			for_update_opt "")"" statement	;for_statement_no_short_if :		""for"" ""("" for_init_opt "";"" expression_opt "";""			for_update_opt "")"" statement_no_short_if	;for_init_opt :	|	for_init	;for_init :	statement_expression_list	|	local_variable_declaration	;for_update_opt :	|	for_update	;for_update :	statement_expression_list	;statement_expression_list :		statement_expression	|	statement_expression_list "","" statement_expression	;identifier_opt : 	|	&lt;IDENTIFIER&gt;	;break_statement :		""break"" identifier_opt "";""	;continue_statement :		""continue"" identifier_opt "";""	;return_statement :		""return"" expression_opt "";""	;throw_statement :		""throw"" expression "";""	;synchronized_statement :		""synchronized"" ""("" expression "")"" block	;try_statement :		""try"" block catches	|	""try"" block catches_opt finally	;catches_opt :	|	catches	;catches :	catch_clause	|	catches catch_clause	;catch_clause :		""catch"" ""("" formal_parameter "")"" block	;finally :	""finally"" block	;# 19.12) Expressionsprimary :	primary_no_new_array	|	array_creation_expression	;primary_no_new_array :		literal	|	""this""	|	""("" expression "")""	|	class_instance_creation_expression	|	field_access	|	method_invocation	|	array_access	|	primitive_type ""."" ""class""	|	""void"" ""."" ""class""	|	array_type ""."" ""class""	|	name ""."" ""class""	|	name ""."" ""this""	;class_instance_creation_expression :		""new"" class_type ""("" argument_list_opt "")""	|	""new"" class_type ""("" argument_list_opt "")"" class_body	|	primary ""."" ""new"" &lt;IDENTIFIER&gt;			""("" argument_list_opt "")""	|	primary ""."" ""new"" &lt;IDENTIFIER&gt;			""("" argument_list_opt "")"" class_body	;argument_list_opt :	|	argument_list	;argument_list :		expression	|	argument_list "","" expression	;array_creation_expression :		""new"" primitive_type dim_exprs dims_opt	|	""new"" class_or_interface_type dim_exprs dims_opt	|	""new"" primitive_type dims array_initializer	|	""new"" class_or_interface_type dims array_initializer	;dim_exprs :	dim_expr	|	dim_exprs dim_expr	;dim_expr :	""["" expression ""]""	;dims_opt :	|	dims	;dims :	""["" ""]""	|	dims ""["" ""]""	;field_access :		primary ""."" &lt;IDENTIFIER&gt;	|	""super"" ""."" &lt;IDENTIFIER&gt;	|	name ""."" ""super"" ""."" &lt;IDENTIFIER&gt;	;method_invocation :		name ""("" argument_list_opt "")""	|	primary ""."" &lt;IDENTIFIER&gt; ""("" argument_list_opt "")""	|	""super"" ""."" &lt;IDENTIFIER&gt; ""("" argument_list_opt "")""	|	name ""."" ""super"" ""."" &lt;IDENTIFIER&gt; ""("" argument_list_opt "")""	;array_access :		name ""["" expression ""]""	|	primary_no_new_array ""["" expression ""]""	;postfix_expression :		primary	|	name	|	postincrement_expression	|	postdecrement_expression	;postincrement_expression :		postfix_expression ""++""	;postdecrement_expression :		postfix_expression ""--""	;unary_expression :		preincrement_expression	|	predecrement_expression	|	""+"" unary_expression	|	""-"" unary_expression	|	unary_expression_not_plus_minus	;preincrement_expression :		""++"" unary_expression	;predecrement_expression :		""--"" unary_expression	;unary_expression_not_plus_minus :		postfix_expression	|	""~"" unary_expression	|	""!"" unary_expression	|	cast_expression	;cast_expression :		""("" primitive_type dims_opt "")"" unary_expression	|	""("" expression "")"" unary_expression_not_plus_minus	|	""("" name dims "")"" unary_expression_not_plus_minus	;multiplicative_expression :		unary_expression	|	multiplicative_expression ""*"" unary_expression	|	multiplicative_expression ""/"" unary_expression	|	multiplicative_expression ""%"" unary_expression	;additive_expression :		multiplicative_expression	|	additive_expression ""+"" multiplicative_expression	|	additive_expression ""-"" multiplicative_expression	;shift_expression :		additive_expression	|	shift_expression ""&lt;&lt;"" additive_expression	|	shift_expression ""&gt;&gt;"" additive_expression	|	shift_expression ""&gt;&gt;&gt;"" additive_expression	;relational_expression :		shift_expression	|	relational_expression ""&lt;"" shift_expression	|	relational_expression ""&gt;"" shift_expression	|	relational_expression ""&lt;="" shift_expression	|	relational_expression ""&gt;="" shift_expression	|	relational_expression ""instanceof"" reference_type	;equality_expression :		relational_expression	|	equality_expression ""=="" relational_expression	|	equality_expression ""!="" relational_expression	;and_expression :		equality_expression	|	and_expression ""&amp;"" equality_expression	;exclusive_or_expression :		and_expression	|	exclusive_or_expression ""^"" and_expression	;inclusive_or_expression :		exclusive_or_expression	|	inclusive_or_expression ""|"" exclusive_or_expression	;conditional_and_expression :		inclusive_or_expression	|	conditional_and_expression ""&amp;&amp;"" inclusive_or_expression	;conditional_or_expression :		conditional_and_expression	|	conditional_or_expression ""||"" conditional_and_expression	;conditional_expression :		conditional_or_expression	|	conditional_or_expression ""?"" expression 			"":"" conditional_expression	;assignment_expression :		conditional_expression	|	assignment	;assignment :	left_hand_side assignment_operator assignment_expression	;left_hand_side :		name	|	field_access	|	array_access	;assignment_operator :		""=""	|	""*=""	|	""/=""	|	""%=""	|	""+=""	|	""-=""	|	""&lt;&lt;=""	|	""&gt;&gt;=""	|	""&gt;&gt;&gt;=""	|	""&amp;=""	|	""^=""	|	""|=""	;expression_opt :	|	expression	;expression :	assignment_expression	;constant_expression :		expression	;"</body></methods><methods><class-id>Refactory.SmaCC.JavaParser class</class-id> <category>generated-accessing</category><body package="SmaCC Example Parsers" selector="scannerClass">scannerClass	^JavaScanner</body></methods><methods><class-id>Refactory.SmaCC.JavaParser class</class-id> <category>generated-starting states</category><body package="SmaCC Example Parsers" selector="startingStateForgoal">startingStateForgoal	^1</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>SmaCCParser</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>scanner currentToken errorToken stateStack nodeStack </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Runtime</category><attributes><package>SmaCC Runtime</package></attributes></class><class><name>SmaCCScanner</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream start matchActions matchEnd currentCharacter outputStream lastOutputStreamMatchPosition lastMatchWasEmpty returnMatchBlock state </inst-vars><class-inst-vars>keywordMap </class-inst-vars><imports></imports><category>SmaCC Runtime</category><attributes><package>SmaCC Runtime</package></attributes></class></st-source>