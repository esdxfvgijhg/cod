<?xml version="1.0"?><st-source><!-- Name: SmaCC Rewrite Server WorkerNotice: Comment: This package is part of the Smalltalk Compiler-Compiler (SmaCC) written by John Brant and Don Roberts. It contains workers that the server use to distribute work across several different workers/images. Once the server has been started a worker can be started by evaluating:	SmaCCRewriteServerWorker new startConnectingTo: 'localhost' onPort: 36rSMIf you want more information about SmaCC, visit http://www.refactoryworkers.com/SmaCC/. - - - - - - - - - - - - - - - - - - - - - - - - -Copyright (c) 2002-2010 John Brant, Don RobertsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.DbIdentifier: bear73DbTrace: 317935DevelopmentPrerequisites: #(#(#any 'SmaCC Rewrite Engine' ''))DisregardedPrerequisites: #(#(#name 'Base VisualWorks' #componentType #bundle))PackageName: SmaCC Rewrite Server WorkerParcel: #('SmaCC Rewrite Server Worker')PrerequisiteParcels: #(#('SmaCC Rewrite Engine' ''))PrintStringCache: (2.0.3,brant)Version: 2.0.3Date: 9:56:25 AM January 28, 2011 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.8 (jan11.4) of January 28, 2011 on January 28, 2011 at 9:56:25 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SmaCCRewriteServerWorker</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rewriteFiles stream remotePrefix localPrefix </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Rewrite Server Worker</category><attributes><package>SmaCC Rewrite Server Worker</package></attributes></class><methods><class-id>Refactory.SmaCC.SmaCCRewriteServerWorker</class-id> <category>running</category><body package="SmaCC Rewrite Server Worker" selector="classNamed:">classNamed: aString	| name |	name := aString asSymbol.	^SmaCCParser withAllSubclasses detect: [:each | each name = name] ifNone: [nil]</body><body package="SmaCC Rewrite Server Worker" selector="delocalizeFilename:">delocalizeFilename: aString 	| newString localSep remoteSep |	newString := (self localPrefix notEmpty 				and: [aString beginsWith: self localPrefix]) 					ifTrue: 						[self remotePrefix 							, (aString copyFrom: self localPrefix size + 1 to: aString size)]					ifFalse: [aString].	localSep := self separatorCharFrom: self localPrefix.	remoteSep := self separatorCharFrom: self remotePrefix.	^newString copy replaceAll: localSep with: remoteSep</body><body package="SmaCC Rewrite Server Worker" selector="loadRewrites:">loadRewrites: aString	[| rewrites |	rewrites := rewriteFiles at: aString ifAbsentPut: [SmaCCRewriteRuleFileParser parseFile: aString].	rewrites isUpToDate ifTrue: [^rewrites].	rewriteFiles removeKey: aString] repeat</body><body package="SmaCC Rewrite Server Worker" selector="localizeFilename:">localizeFilename: aString 	| newString localSep remoteSep |	self remotePrefix isEmpty ifTrue: [^aString].	newString := (aString beginsWith: self remotePrefix) 				ifTrue: 					[self localPrefix 						, (aString copyFrom: self remotePrefix size + 1 to: aString size)]				ifFalse: [aString].	localSep := self separatorCharFrom: self localPrefix.	remoteSep := self separatorCharFrom: self remotePrefix.	^newString copy replaceAll: remoteSep with: localSep</body><body package="SmaCC Rewrite Server Worker" selector="processRequest:">processRequest: aString	| file outputDirectory rewrites inputParser outputParser result resultBytes baseDirectory |	aString		splitFirstOn: $;		andThen: $=		do:			[:type :value | 			type = 'FILE' ifTrue: [file := self localizeFilename: value].			type = 'OUTPUTDIRECTORY' ifTrue: [outputDirectory := self localizeFilename: value].			type = 'BASEDIRECTORY' ifTrue: [baseDirectory := self localizeFilename: value].			type = 'REWRITEFILE' ifTrue: [rewrites := self loadRewrites: (self localizeFilename: value)].			type = 'INPUTPARSER' ifTrue: [inputParser := self classNamed: value].			type = 'OUTPUTPARSER' ifTrue: [outputParser := self classNamed: value]].	result := SmaCCRewriteResult new.	(SmaCCRewriteProcessor new)		rules: rewrites;		parserClass: inputParser;		validationParserClass: outputParser;		outputDirectory: outputDirectory;		baseDirectory: baseDirectory;		processFile: file usingResult: result.	result filename: (self delocalizeFilename: result filename).	resultBytes := result asSocketString asByteArray.	self writeBytes: resultBytes</body><body package="SmaCC Rewrite Server Worker" selector="processRequests">processRequests	[| bytes |	bytes := self readBytes.	self processRequest: bytes asString] repeat</body><body package="SmaCC Rewrite Server Worker" selector="readBytes">readBytes	| size |	size := self readInteger.	^stream next: size</body><body package="SmaCC Rewrite Server Worker" selector="readInteger">readInteger	| value |	value := 0.	0 to: 3 do: [:i | value := value + (stream next bitShift: i * 8)].	^value</body><body package="SmaCC Rewrite Server Worker" selector="separatorCharFrom:">separatorCharFrom: pathString 	^(pathString includes: $/) ifTrue: [$/] ifFalse: [$\]</body><body package="SmaCC Rewrite Server Worker" selector="startConnectingTo:onPort:">startConnectingTo: aString onPort: anInteger	| socket connection |	socket := SocketAccessor newTCPclientToHost: aString port: anInteger.	connection := ExternalConnection new.	connection		input: socket;		output: socket.	stream := (connection withEncoding: #binary) readAppendStream.	[stream		nextPut: $0 asInteger;		flush.	self processRequests] ensure: [stream close]</body><body package="SmaCC Rewrite Server Worker" selector="writeBytes:">writeBytes: resultBytes	stream isNil ifTrue: [^self].	self writeInteger: resultBytes size.	stream		nextPutAll: resultBytes;		flush</body><body package="SmaCC Rewrite Server Worker" selector="writeInteger:">writeInteger: anInteger	| value |	value := anInteger.	4		timesRepeat:			[stream nextPut: (value bitAnd: 16rFF).			value := value bitShift: -8]</body></methods><methods><class-id>Refactory.SmaCC.SmaCCRewriteServerWorker</class-id> <category>accessing</category><body package="SmaCC Rewrite Server Worker" selector="localPrefix">localPrefix	^localPrefix ifNil: ['']</body><body package="SmaCC Rewrite Server Worker" selector="localPrefix:">localPrefix: aString	localPrefix := aString</body><body package="SmaCC Rewrite Server Worker" selector="remotePrefix">remotePrefix	^remotePrefix ifNil: ['']</body><body package="SmaCC Rewrite Server Worker" selector="remotePrefix:">remotePrefix: aString	remotePrefix := aString</body></methods><methods><class-id>Refactory.SmaCC.SmaCCRewriteServerWorker</class-id> <category>initialize-release</category><body package="SmaCC Rewrite Server Worker" selector="initialize">initialize	super initialize.	rewriteFiles := Dictionary new</body></methods><methods><class-id>Refactory.SmaCC.SmaCCRewriteServerWorker class</class-id> <category>instance creation</category><body package="SmaCC Rewrite Server Worker" selector="new">new	^(super new)		initialize;		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class></st-source>