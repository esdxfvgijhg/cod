<?xml version="1.0"?><st-source><!-- Name: SmaCC JavaNotice: Comment: This package is part of the Smalltalk Compiler-Compiler (SmaCC) written by John Brant and Don Roberts. It contains code to parse Java code.If you want more information about SmaCC, visit http://www.refactoryworkers.com/SmaCC/. - - - - - - - - - - - - - - - - - - - - - - - - -Copyright (c) 2002-2010 John Brant, Don RobertsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.DbIdentifier: bear73DbTrace: 317939DevelopmentPrerequisites: #(#(#any 'SmaCC Runtime' ''))DisregardedPrerequisites: #(#(#name 'Base VisualWorks' #componentType #bundle))PackageName: SmaCC JavaParcel: #('SmaCC Java')PrerequisiteParcels: #(#('SmaCC Runtime' ''))PrintStringCache: (2.0.3,brant)Version: 2.0.3Date: 9:56:28 AM January 28, 2011 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.8 (jan11.4) of January 28, 2011 on January 28, 2011 at 9:56:28 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>JavaProgramNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCParseNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaSynchronizedStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>synchronizedToken left expression right block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaExpressionNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>lefts rights </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaLiteralNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>token </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaNullNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaLiteralNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaVariableDeclarationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>variable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaThrowsNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>throwsToken classTypes commas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaTypeParameterNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name extendsToken types amps </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaClassPropertyNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type period classToken name thisToken </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaTypeNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaPrimitiveTypeNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaTypeNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>token </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaLongTypeNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaPrimitiveTypeNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaLabeledStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>identifier colon statement </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaForEachStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>forToken left modifiers type colon expression right statement </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaElementArrayInitializerNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>left values commas right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaFinallyClauseNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>finallyToken block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaCharTypeNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaPrimitiveTypeNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaSwitchBlockStatementGroupNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>labels statements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaBlockNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>left statements right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaNameNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaQualifiedNameNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaNameNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nspace period </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaStatementExpressionListNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>expressions commas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaContinueStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>continueToken identifier semicolon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaMethodDeclarationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modifiers type declarator throws body </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaInterfaceNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modifiers interfaceToken name typeParameters extendsToken interfaceTypes commas left declarations right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaMethodInvocationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name expressions commas receiver period superToken superPeriod </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaEmptyStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>semicolon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaClassDeclarationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modifiers classToken name typeParameters extendsToken superclass implementsToken interfaces commas left declarations right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaConditionalExpressionNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testExpression questionMark trueExpression colon falseExpression </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaLocalVariableDeclarationStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>declaration semicolon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaClassTypeNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaTypeNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaSuperConstructorInvocationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superToken left expressions commas right semicolon primary period </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaProgramNodeVisitor</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCParseNodeVisitor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaDoWhileStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>doToken statement whileToken left expression right semicolon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaEnumConstantNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>annotations name leftParen expressions commas rightParen left declarations right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaPostDecrementExpressionNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>expression minusMinus </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaTypeNameNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name left arguments commas right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaDoubleTypeNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaPrimitiveTypeNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaAbstractMethodDeclarationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modifiers type declarator throws semicolon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaPostIncrementExpressionNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>expression plusPlus </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaSingleTypeImportDeclarationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>importToken staticToken name semicolon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaTypeImportOnDemandDeclarationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaSingleTypeImportDeclarationNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>period star </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaMethodDeclaratorNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name left parameters commas right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaInitializedVariableDeclarationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaVariableDeclarationNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>equals initializer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaEmptyMethodBodyNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>semicolon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaNewNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>newToken type expressions commas primary period name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaNewClassNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaNewNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>declarations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaBreakStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>breakToken identifier semicolon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaPreDecrementExpressionNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>minusMinus expression </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaDefaultLabelNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>defaultToken colon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaPackageDeclarationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>annotations packageToken name semicolon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaParameterNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modifiers type variable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaConstructorBodyNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>left constructorInvocation statements right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaIntTypeNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaPrimitiveTypeNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaStaticInitializerNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>staticToken block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaAssignmentNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>variable op value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaFieldAccessNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>receiver period name superToken superPeriod </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaConstructorDeclarationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modifiers name left parameters commas right throws body </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaElementValuePairNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name equals value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaBinaryExpressionNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>leftExpression op rightExpression </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaUnaryBitInvertNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tilde expression </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaShortTypeNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaPrimitiveTypeNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaVariableNameNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaAnnotationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>_at name left values commas right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaBooleanLiteralNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaLiteralNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaEmptyDimensionListNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>left right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaEnumDeclarationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modifiers enumToken name implementsToken interfaces commas left constants semicolon declarations right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaUnarySubtractionNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>minus expression </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaIdentifierNameNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaIfStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>ifToken left expression right trueStatement </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaIfElseStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaIfStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elseToken falseStatement </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaAssertStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>assertToken testExpression semicolon colon messageExpression </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaCharacterLiteralNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaLiteralNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaProgramFileNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>packageDeclaration imports typeDeclarations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaVoidTypeNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>voidToken </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaUnaryNotNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bang expression </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaByteTypeNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaPrimitiveTypeNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaTryStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tryToken block catches finally </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaArrayMethodDeclaratorNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>declarator left right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaStringLiteralNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaLiteralNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaEmptyDeclarationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>semicolon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaLocalVariableDeclarationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modifiers type variableDeclarations commas </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaAssignmentExpressionNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>variable op value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaArrayTypeNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaTypeNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>baseType emptyDims </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaCatchClauseNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>catchToken left modifiers type variable right block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaSwitchLabelNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>caseToken constant colon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaArrayVariableNameNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>variable left right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaIntegerLiteralNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaLiteralNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaWhileStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>whileToken left expression right statement </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaSwitchStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>switchToken left expression right block </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaArrayAccessNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>array expression </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaExpressionStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>expression semicolon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaDimensionExpressionNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>left expression right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaForStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>forToken left initial firstSemicolon test secondSemicolon _update right statement </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaThisConstructorInvocationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>thisToken left expressions commas right semicolon primary period </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaFloatLiteralNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaLiteralNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaUnaryAdditionNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>plus expression </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaSwitchBlockNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>left statementGroups labels right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaFloatTypeNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaPrimitiveTypeNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaParser</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCGLRParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaThrowStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>throwToken expression semicolon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaFieldDeclarationNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modifiers type variableDeclarations commas semicolon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaCastExpressionNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type emptyDims expression </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaQualifiedTypeNameNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nspace period name left arguments commas right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaBooleanTypeNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaPrimitiveTypeNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaPreIncrementExpressionNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>plusPlus expression </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaTypeArgumentNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type questionMark token </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaTypeParametersNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>left parameters commas right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaNewArrayNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>newToken type dimExpressions emptyDims initializer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaReturnStatementNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaStatementNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>returnToken expression semicolon </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaArrayInitializerNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>left initializers commas right </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaScanner</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCScanner</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Java</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaModifierNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaProgramNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>token </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><class><name>JavaThisNode</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.JavaExpressionNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>thisToken </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Generated Scanner/Parser</category><attributes><package>SmaCC Java</package></attributes></class><methods><class-id>Refactory.SmaCC.JavaProgramNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitProgram: self</body></methods><methods><class-id>Refactory.SmaCC.JavaStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitStatement: self</body></methods><methods><class-id>Refactory.SmaCC.JavaSynchronizedStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitSynchronizedStatement: self</body><body package="SmaCC Java" selector="block">block	^block</body><body package="SmaCC Java" selector="block:">block: aJavaBlockNode	self block notNil ifTrue: [self block parent: nil].	block := aJavaBlockNode.	self block notNil ifTrue: [self block parent: self]</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression #block)</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="synchronizedToken">synchronizedToken	^synchronizedToken</body><body package="SmaCC Java" selector="synchronizedToken:">synchronizedToken: aSmaCCToken	synchronizedToken := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#synchronizedToken #left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaExpressionNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitExpression: self</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#lefts #rights)</body><body package="SmaCC Java" selector="lefts">lefts	^lefts</body><body package="SmaCC Java" selector="lefts:">lefts: anOrderedCollection	lefts := anOrderedCollection</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'left' put: 'lefts';		at: 'right' put: 'rights';		yourself] once</body><body package="SmaCC Java" selector="rights">rights	^rights</body><body package="SmaCC Java" selector="rights:">rights: anOrderedCollection	rights := anOrderedCollection</body></methods><methods><class-id>Refactory.SmaCC.JavaExpressionNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	lefts := OrderedCollection new: 2.	rights := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaLiteralNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitLiteral: self</body><body package="SmaCC Java" selector="token">token	^token</body><body package="SmaCC Java" selector="token:">token: aSmaCCToken	token := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#token)</body></methods><methods><class-id>Refactory.SmaCC.JavaNullNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitNull: self</body></methods><methods><class-id>Refactory.SmaCC.JavaVariableDeclarationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitVariableDeclaration: self</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#variable)</body><body package="SmaCC Java" selector="variable">variable	^variable</body><body package="SmaCC Java" selector="variable:">variable: aJavaProgramNode	self variable notNil ifTrue: [self variable parent: nil].	variable := aJavaProgramNode.	self variable notNil ifTrue: [self variable parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaThrowsNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitThrows: self</body><body package="SmaCC Java" selector="classTypes">classTypes	^classTypes</body><body package="SmaCC Java" selector="classTypes:">classTypes: anOrderedCollection	self setParents: self classTypes to: nil.	classTypes := anOrderedCollection.	self setParents: self classTypes to: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#classTypes)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'classType' put: 'classTypes';		at: 'comma' put: 'commas';		yourself] once</body><body package="SmaCC Java" selector="throwsToken">throwsToken	^throwsToken</body><body package="SmaCC Java" selector="throwsToken:">throwsToken: aSmaCCToken	throwsToken := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#throwsToken)</body></methods><methods><class-id>Refactory.SmaCC.JavaThrowsNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	classTypes := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaTypeParameterNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitTypeParameter: self</body><body package="SmaCC Java" selector="amps">amps	^amps</body><body package="SmaCC Java" selector="amps:">amps: anOrderedCollection	amps := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#types)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#amps)</body><body package="SmaCC Java" selector="extendsToken">extendsToken	^extendsToken</body><body package="SmaCC Java" selector="extendsToken:">extendsToken: aSmaCCToken	extendsToken := aSmaCCToken</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aSmaCCToken	name := aSmaCCToken</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'type' put: 'types';		at: 'amp' put: 'amps';		yourself] once</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#name #extendsToken)</body><body package="SmaCC Java" selector="types">types	^types</body><body package="SmaCC Java" selector="types:">types: anOrderedCollection	self setParents: self types to: nil.	types := anOrderedCollection.	self setParents: self types to: self</body></methods><methods><class-id>Refactory.SmaCC.JavaTypeParameterNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	types := OrderedCollection new: 2.	amps := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaClassPropertyNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitClassProperty: self</body><body package="SmaCC Java" selector="classToken">classToken	^classToken</body><body package="SmaCC Java" selector="classToken:">classToken: aSmaCCToken	classToken := aSmaCCToken</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aJavaNameNode	self name notNil ifTrue: [self name parent: nil].	name := aJavaNameNode.	self name notNil ifTrue: [self name parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#type #name)</body><body package="SmaCC Java" selector="period">period	^period</body><body package="SmaCC Java" selector="period:">period: aSmaCCToken	period := aSmaCCToken</body><body package="SmaCC Java" selector="thisToken">thisToken	^thisToken</body><body package="SmaCC Java" selector="thisToken:">thisToken: aSmaCCToken	thisToken := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#period #classToken #thisToken)</body><body package="SmaCC Java" selector="type">type	^type</body><body package="SmaCC Java" selector="type:">type: aJavaProgramNode	self type notNil ifTrue: [self type parent: nil].	type := aJavaProgramNode.	self type notNil ifTrue: [self type parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaTypeNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitType: self</body></methods><methods><class-id>Refactory.SmaCC.JavaPrimitiveTypeNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitPrimitiveType: self</body><body package="SmaCC Java" selector="token">token	^token</body><body package="SmaCC Java" selector="token:">token: aSmaCCToken	token := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#token)</body></methods><methods><class-id>Refactory.SmaCC.JavaLongTypeNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitLongType: self</body></methods><methods><class-id>Refactory.SmaCC.JavaLabeledStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitLabeledStatement: self</body><body package="SmaCC Java" selector="colon">colon	^colon</body><body package="SmaCC Java" selector="colon:">colon: aSmaCCToken	colon := aSmaCCToken</body><body package="SmaCC Java" selector="identifier">identifier	^identifier</body><body package="SmaCC Java" selector="identifier:">identifier: aSmaCCToken	identifier := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#statement)</body><body package="SmaCC Java" selector="statement">statement	^statement</body><body package="SmaCC Java" selector="statement:">statement: aJavaStatementNode	self statement notNil ifTrue: [self statement parent: nil].	statement := aJavaStatementNode.	self statement notNil ifTrue: [self statement parent: self]</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#identifier #colon)</body></methods><methods><class-id>Refactory.SmaCC.JavaForEachStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitForEachStatement: self</body><body package="SmaCC Java" selector="colon">colon	^colon</body><body package="SmaCC Java" selector="colon:">colon: aSmaCCToken	colon := aSmaCCToken</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#modifiers)</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="forToken">forToken	^forToken</body><body package="SmaCC Java" selector="forToken:">forToken: aSmaCCToken	forToken := aSmaCCToken</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="modifiers">modifiers	^modifiers</body><body package="SmaCC Java" selector="modifiers:">modifiers: anOrderedCollection	self setParents: self modifiers to: nil.	modifiers := anOrderedCollection.	self setParents: self modifiers to: self</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#type #expression #statement)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'modifier' put: 'modifiers';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="statement">statement	^statement</body><body package="SmaCC Java" selector="statement:">statement: aJavaStatementNode	self statement notNil ifTrue: [self statement parent: nil].	statement := aJavaStatementNode.	self statement notNil ifTrue: [self statement parent: self]</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#forToken #left #colon #right)</body><body package="SmaCC Java" selector="type">type	^type</body><body package="SmaCC Java" selector="type:">type: aJavaTypeNode	self type notNil ifTrue: [self type parent: nil].	type := aJavaTypeNode.	self type notNil ifTrue: [self type parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaForEachStatementNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	modifiers := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaElementArrayInitializerNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitElementArrayInitializer: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#values)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'value' put: 'values';		at: 'comma' put: 'commas';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#left #right)</body><body package="SmaCC Java" selector="values">values	^values</body><body package="SmaCC Java" selector="values:">values: anOrderedCollection	self setParents: self values to: nil.	values := anOrderedCollection.	self setParents: self values to: self</body></methods><methods><class-id>Refactory.SmaCC.JavaElementArrayInitializerNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	values := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaFinallyClauseNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitFinallyClause: self</body><body package="SmaCC Java" selector="block">block	^block</body><body package="SmaCC Java" selector="block:">block: aJavaBlockNode	self block notNil ifTrue: [self block parent: nil].	block := aJavaBlockNode.	self block notNil ifTrue: [self block parent: self]</body><body package="SmaCC Java" selector="finallyToken">finallyToken	^finallyToken</body><body package="SmaCC Java" selector="finallyToken:">finallyToken: aSmaCCToken	finallyToken := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#block)</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#finallyToken)</body></methods><methods><class-id>Refactory.SmaCC.JavaCharTypeNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitCharType: self</body></methods><methods><class-id>Refactory.SmaCC.JavaSwitchBlockStatementGroupNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitSwitchBlockStatementGroup: self</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#labels #statements)</body><body package="SmaCC Java" selector="labels">labels	^labels</body><body package="SmaCC Java" selector="labels:">labels: anOrderedCollection	self setParents: self labels to: nil.	labels := anOrderedCollection.	self setParents: self labels to: self</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'label' put: 'labels';		at: 'statement' put: 'statements';		yourself] once</body><body package="SmaCC Java" selector="statements">statements	^statements</body><body package="SmaCC Java" selector="statements:">statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self</body></methods><methods><class-id>Refactory.SmaCC.JavaSwitchBlockStatementGroupNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	labels := OrderedCollection new: 2.	statements := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaBlockNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitBlock: self</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#statements)</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'statement' put: 'statements';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="statements">statements	^statements</body><body package="SmaCC Java" selector="statements:">statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaBlockNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	statements := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaNameNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitName: self</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aSmaCCToken	name := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#name)</body></methods><methods><class-id>Refactory.SmaCC.JavaQualifiedNameNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitQualifiedName: self</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#nspace)</body><body package="SmaCC Java" selector="nspace">nspace	^nspace</body><body package="SmaCC Java" selector="nspace:">nspace: aJavaNameNode	self nspace notNil ifTrue: [self nspace parent: nil].	nspace := aJavaNameNode.	self nspace notNil ifTrue: [self nspace parent: self]</body><body package="SmaCC Java" selector="period">period	^period</body><body package="SmaCC Java" selector="period:">period: aSmaCCToken	period := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#period #name)</body></methods><methods><class-id>Refactory.SmaCC.JavaStatementExpressionListNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitStatementExpressionList: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#expressions)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="expressions">expressions	^expressions</body><body package="SmaCC Java" selector="expressions:">expressions: anOrderedCollection	self setParents: self expressions to: nil.	expressions := anOrderedCollection.	self setParents: self expressions to: self</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'expression' put: 'expressions';		at: 'comma' put: 'commas';		yourself] once</body></methods><methods><class-id>Refactory.SmaCC.JavaStatementExpressionListNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	expressions := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaContinueStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitContinueStatement: self</body><body package="SmaCC Java" selector="continueToken">continueToken	^continueToken</body><body package="SmaCC Java" selector="continueToken:">continueToken: aSmaCCToken	continueToken := aSmaCCToken</body><body package="SmaCC Java" selector="identifier">identifier	^identifier</body><body package="SmaCC Java" selector="identifier:">identifier: aSmaCCToken	identifier := aSmaCCToken</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#continueToken #identifier #semicolon)</body></methods><methods><class-id>Refactory.SmaCC.JavaMethodDeclarationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitMethodDeclaration: self</body><body package="SmaCC Java" selector="body">body	^body</body><body package="SmaCC Java" selector="body:">body: aJavaProgramNode	self body notNil ifTrue: [self body parent: nil].	body := aJavaProgramNode.	self body notNil ifTrue: [self body parent: self]</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#modifiers)</body><body package="SmaCC Java" selector="declarator">declarator	^declarator</body><body package="SmaCC Java" selector="declarator:">declarator: aJavaProgramNode	self declarator notNil ifTrue: [self declarator parent: nil].	declarator := aJavaProgramNode.	self declarator notNil ifTrue: [self declarator parent: self]</body><body package="SmaCC Java" selector="modifiers">modifiers	^modifiers</body><body package="SmaCC Java" selector="modifiers:">modifiers: anOrderedCollection	self setParents: self modifiers to: nil.	modifiers := anOrderedCollection.	self setParents: self modifiers to: self</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#type #declarator #throws #body)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'modifier' put: 'modifiers';		yourself] once</body><body package="SmaCC Java" selector="throws">throws	^throws</body><body package="SmaCC Java" selector="throws:">throws: aJavaThrowsNode	self throws notNil ifTrue: [self throws parent: nil].	throws := aJavaThrowsNode.	self throws notNil ifTrue: [self throws parent: self]</body><body package="SmaCC Java" selector="type">type	^type</body><body package="SmaCC Java" selector="type:">type: aJavaProgramNode	self type notNil ifTrue: [self type parent: nil].	type := aJavaProgramNode.	self type notNil ifTrue: [self type parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaMethodDeclarationNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	modifiers := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaInterfaceNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitInterface: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#modifiers #interfaceTypes #declarations)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="declarations">declarations	^declarations</body><body package="SmaCC Java" selector="declarations:">declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self</body><body package="SmaCC Java" selector="extendsToken">extendsToken	^extendsToken</body><body package="SmaCC Java" selector="extendsToken:">extendsToken: aSmaCCToken	extendsToken := aSmaCCToken</body><body package="SmaCC Java" selector="interfaceToken">interfaceToken	^interfaceToken</body><body package="SmaCC Java" selector="interfaceToken:">interfaceToken: aSmaCCToken	interfaceToken := aSmaCCToken</body><body package="SmaCC Java" selector="interfaceTypes">interfaceTypes	^interfaceTypes</body><body package="SmaCC Java" selector="interfaceTypes:">interfaceTypes: anOrderedCollection	self setParents: self interfaceTypes to: nil.	interfaceTypes := anOrderedCollection.	self setParents: self interfaceTypes to: self</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="modifiers">modifiers	^modifiers</body><body package="SmaCC Java" selector="modifiers:">modifiers: anOrderedCollection	self setParents: self modifiers to: nil.	modifiers := anOrderedCollection.	self setParents: self modifiers to: self</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aSmaCCToken	name := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#typeParameters)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'modifier' put: 'modifiers';		at: 'interfaceType' put: 'interfaceTypes';		at: 'comma' put: 'commas';		at: 'declaration' put: 'declarations';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#interfaceToken #name #extendsToken #left #right)</body><body package="SmaCC Java" selector="typeParameters">typeParameters	^typeParameters</body><body package="SmaCC Java" selector="typeParameters:">typeParameters: aJavaTypeParametersNode	self typeParameters notNil ifTrue: [self typeParameters parent: nil].	typeParameters := aJavaTypeParametersNode.	self typeParameters notNil ifTrue: [self typeParameters parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaInterfaceNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	modifiers := OrderedCollection new: 2.	interfaceTypes := OrderedCollection new: 2.	commas := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaMethodInvocationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitMethodInvocation: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#expressions)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas #lefts #rights)</body><body package="SmaCC Java" selector="expressions">expressions	^expressions</body><body package="SmaCC Java" selector="expressions:">expressions: anOrderedCollection	self setParents: self expressions to: nil.	expressions := anOrderedCollection.	self setParents: self expressions to: self</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aJavaProgramNode	self name notNil ifTrue: [self name parent: nil].	name := aJavaProgramNode.	self name notNil ifTrue: [self name parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#name #receiver)</body><body package="SmaCC Java" selector="period">period	^period</body><body package="SmaCC Java" selector="period:">period: aSmaCCToken	period := aSmaCCToken</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'expression' put: 'expressions';		at: 'comma' put: 'commas';		at: 'left' put: 'lefts';		at: 'right' put: 'rights';		yourself] once</body><body package="SmaCC Java" selector="receiver">receiver	^receiver</body><body package="SmaCC Java" selector="receiver:">receiver: aJavaExpressionNode	self receiver notNil ifTrue: [self receiver parent: nil].	receiver := aJavaExpressionNode.	self receiver notNil ifTrue: [self receiver parent: self]</body><body package="SmaCC Java" selector="superPeriod">superPeriod	^superPeriod</body><body package="SmaCC Java" selector="superPeriod:">superPeriod: aSmaCCToken	superPeriod := aSmaCCToken</body><body package="SmaCC Java" selector="superToken">superToken	^superToken</body><body package="SmaCC Java" selector="superToken:">superToken: aSmaCCToken	superToken := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#period #superToken #superPeriod)</body></methods><methods><class-id>Refactory.SmaCC.JavaMethodInvocationNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	expressions := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaEmptyStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitEmptyStatement: self</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#semicolon)</body></methods><methods><class-id>Refactory.SmaCC.JavaClassDeclarationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitClassDeclaration: self</body><body package="SmaCC Java" selector="classToken">classToken	^classToken</body><body package="SmaCC Java" selector="classToken:">classToken: aSmaCCToken	classToken := aSmaCCToken</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#modifiers #interfaces #declarations)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="declarations">declarations	^declarations</body><body package="SmaCC Java" selector="declarations:">declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self</body><body package="SmaCC Java" selector="extendsToken">extendsToken	^extendsToken</body><body package="SmaCC Java" selector="extendsToken:">extendsToken: aSmaCCToken	extendsToken := aSmaCCToken</body><body package="SmaCC Java" selector="implementsToken">implementsToken	^implementsToken</body><body package="SmaCC Java" selector="implementsToken:">implementsToken: aSmaCCToken	implementsToken := aSmaCCToken</body><body package="SmaCC Java" selector="interfaces">interfaces	^interfaces</body><body package="SmaCC Java" selector="interfaces:">interfaces: anOrderedCollection	self setParents: self interfaces to: nil.	interfaces := anOrderedCollection.	self setParents: self interfaces to: self</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="modifiers">modifiers	^modifiers</body><body package="SmaCC Java" selector="modifiers:">modifiers: anOrderedCollection	self setParents: self modifiers to: nil.	modifiers := anOrderedCollection.	self setParents: self modifiers to: self</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aSmaCCToken	name := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#typeParameters #superclass)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'modifier' put: 'modifiers';		at: 'interface' put: 'interfaces';		at: 'comma' put: 'commas';		at: 'declaration' put: 'declarations';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="superclass">superclass	^superclass</body><body package="SmaCC Java" selector="superclass:">superclass: aJavaClassTypeNode	self superclass notNil ifTrue: [self superclass parent: nil].	superclass := aJavaClassTypeNode.	self superclass notNil ifTrue: [self superclass parent: self]</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#classToken #name #extendsToken #implementsToken #left #right)</body><body package="SmaCC Java" selector="typeParameters">typeParameters	^typeParameters</body><body package="SmaCC Java" selector="typeParameters:">typeParameters: aJavaTypeParametersNode	self typeParameters notNil ifTrue: [self typeParameters parent: nil].	typeParameters := aJavaTypeParametersNode.	self typeParameters notNil ifTrue: [self typeParameters parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaClassDeclarationNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	modifiers := OrderedCollection new: 2.	interfaces := OrderedCollection new: 2.	commas := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaConditionalExpressionNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitConditionalExpression: self</body><body package="SmaCC Java" selector="colon">colon	^colon</body><body package="SmaCC Java" selector="colon:">colon: aSmaCCToken	colon := aSmaCCToken</body><body package="SmaCC Java" selector="falseExpression">falseExpression	^falseExpression</body><body package="SmaCC Java" selector="falseExpression:">falseExpression: aJavaExpressionNode	self falseExpression notNil ifTrue: [self falseExpression parent: nil].	falseExpression := aJavaExpressionNode.	self falseExpression notNil ifTrue: [self falseExpression parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#testExpression #trueExpression #falseExpression)</body><body package="SmaCC Java" selector="questionMark">questionMark	^questionMark</body><body package="SmaCC Java" selector="questionMark:">questionMark: aSmaCCToken	questionMark := aSmaCCToken</body><body package="SmaCC Java" selector="testExpression">testExpression	^testExpression</body><body package="SmaCC Java" selector="testExpression:">testExpression: aJavaExpressionNode	self testExpression notNil ifTrue: [self testExpression parent: nil].	testExpression := aJavaExpressionNode.	self testExpression notNil ifTrue: [self testExpression parent: self]</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#questionMark #colon)</body><body package="SmaCC Java" selector="trueExpression">trueExpression	^trueExpression</body><body package="SmaCC Java" selector="trueExpression:">trueExpression: aJavaExpressionNode	self trueExpression notNil ifTrue: [self trueExpression parent: nil].	trueExpression := aJavaExpressionNode.	self trueExpression notNil ifTrue: [self trueExpression parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaLocalVariableDeclarationStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitLocalVariableDeclarationStatement: self</body><body package="SmaCC Java" selector="declaration">declaration	^declaration</body><body package="SmaCC Java" selector="declaration:">declaration: aJavaLocalVariableDeclarationNode	self declaration notNil ifTrue: [self declaration parent: nil].	declaration := aJavaLocalVariableDeclarationNode.	self declaration notNil ifTrue: [self declaration parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#declaration)</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#semicolon)</body></methods><methods><class-id>Refactory.SmaCC.JavaClassTypeNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitClassType: self</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aJavaProgramNode	self name notNil ifTrue: [self name parent: nil].	name := aJavaProgramNode.	self name notNil ifTrue: [self name parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#name)</body></methods><methods><class-id>Refactory.SmaCC.JavaSuperConstructorInvocationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitSuperConstructorInvocation: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#expressions)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="expressions">expressions	^expressions</body><body package="SmaCC Java" selector="expressions:">expressions: anOrderedCollection	self setParents: self expressions to: nil.	expressions := anOrderedCollection.	self setParents: self expressions to: self</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#primary)</body><body package="SmaCC Java" selector="period">period	^period</body><body package="SmaCC Java" selector="period:">period: aSmaCCToken	period := aSmaCCToken</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'expression' put: 'expressions';		at: 'comma' put: 'commas';		yourself] once</body><body package="SmaCC Java" selector="primary">primary	^primary</body><body package="SmaCC Java" selector="primary:">primary: aJavaExpressionNode	self primary notNil ifTrue: [self primary parent: nil].	primary := aJavaExpressionNode.	self primary notNil ifTrue: [self primary parent: self]</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="superToken">superToken	^superToken</body><body package="SmaCC Java" selector="superToken:">superToken: aSmaCCToken	superToken := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#superToken #left #right #semicolon #period)</body></methods><methods><class-id>Refactory.SmaCC.JavaSuperConstructorInvocationNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	expressions := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaProgramNodeVisitor</class-id> <category>generated</category><body package="SmaCC Java" selector="visitAbstractMethodDeclaration:">visitAbstractMethodDeclaration: anAbstractMethodDeclaration	^self visitProgram: anAbstractMethodDeclaration</body><body package="SmaCC Java" selector="visitAnnotation:">visitAnnotation: anAnnotation	^self visitProgram: anAnnotation</body><body package="SmaCC Java" selector="visitArrayAccess:">visitArrayAccess: anArrayAccess	^self visitExpression: anArrayAccess</body><body package="SmaCC Java" selector="visitArrayInitializer:">visitArrayInitializer: anArrayInitializer	^self visitProgram: anArrayInitializer</body><body package="SmaCC Java" selector="visitArrayMethodDeclarator:">visitArrayMethodDeclarator: anArrayMethodDeclarator	^self visitProgram: anArrayMethodDeclarator</body><body package="SmaCC Java" selector="visitArrayType:">visitArrayType: anArrayType	^self visitType: anArrayType</body><body package="SmaCC Java" selector="visitArrayVariableName:">visitArrayVariableName: anArrayVariableName	^self visitProgram: anArrayVariableName</body><body package="SmaCC Java" selector="visitAssertStatement:">visitAssertStatement: anAssertStatement	^self visitStatement: anAssertStatement</body><body package="SmaCC Java" selector="visitAssignment:">visitAssignment: anAssignment	^self visitExpression: anAssignment</body><body package="SmaCC Java" selector="visitAssignmentExpression:">visitAssignmentExpression: anAssignmentExpression	^self visitExpression: anAssignmentExpression</body><body package="SmaCC Java" selector="visitBinaryExpression:">visitBinaryExpression: aBinaryExpression	^self visitExpression: aBinaryExpression</body><body package="SmaCC Java" selector="visitBlock:">visitBlock: aBlock	^self visitStatement: aBlock</body><body package="SmaCC Java" selector="visitBooleanLiteral:">visitBooleanLiteral: aBooleanLiteral	^self visitLiteral: aBooleanLiteral</body><body package="SmaCC Java" selector="visitBooleanType:">visitBooleanType: aBooleanType	^self visitPrimitiveType: aBooleanType</body><body package="SmaCC Java" selector="visitBreakStatement:">visitBreakStatement: aBreakStatement	^self visitStatement: aBreakStatement</body><body package="SmaCC Java" selector="visitByteType:">visitByteType: aByteType	^self visitPrimitiveType: aByteType</body><body package="SmaCC Java" selector="visitCastExpression:">visitCastExpression: aCastExpression	^self visitExpression: aCastExpression</body><body package="SmaCC Java" selector="visitCatchClause:">visitCatchClause: aCatchClause	^self visitProgram: aCatchClause</body><body package="SmaCC Java" selector="visitCharType:">visitCharType: aCharType	^self visitPrimitiveType: aCharType</body><body package="SmaCC Java" selector="visitCharacterLiteral:">visitCharacterLiteral: aCharacterLiteral	^self visitLiteral: aCharacterLiteral</body><body package="SmaCC Java" selector="visitClassDeclaration:">visitClassDeclaration: aClassDeclaration	^self visitProgram: aClassDeclaration</body><body package="SmaCC Java" selector="visitClassProperty:">visitClassProperty: aClassProperty	^self visitExpression: aClassProperty</body><body package="SmaCC Java" selector="visitClassType:">visitClassType: aClassType	^self visitType: aClassType</body><body package="SmaCC Java" selector="visitConditionalExpression:">visitConditionalExpression: aConditionalExpression	^self visitExpression: aConditionalExpression</body><body package="SmaCC Java" selector="visitConstructorBody:">visitConstructorBody: aConstructorBody	^self visitProgram: aConstructorBody</body><body package="SmaCC Java" selector="visitConstructorDeclaration:">visitConstructorDeclaration: aConstructorDeclaration	^self visitProgram: aConstructorDeclaration</body><body package="SmaCC Java" selector="visitContinueStatement:">visitContinueStatement: aContinueStatement	^self visitStatement: aContinueStatement</body><body package="SmaCC Java" selector="visitDefaultLabel:">visitDefaultLabel: aDefaultLabel	^self visitProgram: aDefaultLabel</body><body package="SmaCC Java" selector="visitDimensionExpression:">visitDimensionExpression: aDimensionExpression	^self visitProgram: aDimensionExpression</body><body package="SmaCC Java" selector="visitDoWhileStatement:">visitDoWhileStatement: aDoWhileStatement	^self visitStatement: aDoWhileStatement</body><body package="SmaCC Java" selector="visitDoubleType:">visitDoubleType: aDoubleType	^self visitPrimitiveType: aDoubleType</body><body package="SmaCC Java" selector="visitElementArrayInitializer:">visitElementArrayInitializer: anElementArrayInitializer	^self visitProgram: anElementArrayInitializer</body><body package="SmaCC Java" selector="visitElementValuePair:">visitElementValuePair: anElementValuePair	^self visitProgram: anElementValuePair</body><body package="SmaCC Java" selector="visitEmptyDeclaration:">visitEmptyDeclaration: anEmptyDeclaration	^self visitProgram: anEmptyDeclaration</body><body package="SmaCC Java" selector="visitEmptyDimensionList:">visitEmptyDimensionList: anEmptyDimensionList	^self visitProgram: anEmptyDimensionList</body><body package="SmaCC Java" selector="visitEmptyMethodBody:">visitEmptyMethodBody: anEmptyMethodBody	^self visitProgram: anEmptyMethodBody</body><body package="SmaCC Java" selector="visitEmptyStatement:">visitEmptyStatement: anEmptyStatement	^self visitStatement: anEmptyStatement</body><body package="SmaCC Java" selector="visitEnumConstant:">visitEnumConstant: anEnumConstant	^self visitProgram: anEnumConstant</body><body package="SmaCC Java" selector="visitEnumDeclaration:">visitEnumDeclaration: anEnumDeclaration	^self visitProgram: anEnumDeclaration</body><body package="SmaCC Java" selector="visitExpression:">visitExpression: anExpression	^self visitProgram: anExpression</body><body package="SmaCC Java" selector="visitExpressionStatement:">visitExpressionStatement: anExpressionStatement	^self visitStatement: anExpressionStatement</body><body package="SmaCC Java" selector="visitFieldAccess:">visitFieldAccess: aFieldAccess	^self visitExpression: aFieldAccess</body><body package="SmaCC Java" selector="visitFieldDeclaration:">visitFieldDeclaration: aFieldDeclaration	^self visitProgram: aFieldDeclaration</body><body package="SmaCC Java" selector="visitFinallyClause:">visitFinallyClause: aFinallyClause	^self visitProgram: aFinallyClause</body><body package="SmaCC Java" selector="visitFloatLiteral:">visitFloatLiteral: aFloatLiteral	^self visitLiteral: aFloatLiteral</body><body package="SmaCC Java" selector="visitFloatType:">visitFloatType: aFloatType	^self visitPrimitiveType: aFloatType</body><body package="SmaCC Java" selector="visitForEachStatement:">visitForEachStatement: aForEachStatement	^self visitStatement: aForEachStatement</body><body package="SmaCC Java" selector="visitForStatement:">visitForStatement: aForStatement	^self visitStatement: aForStatement</body><body package="SmaCC Java" selector="visitIdentifierName:">visitIdentifierName: anIdentifierName	^self visitProgram: anIdentifierName</body><body package="SmaCC Java" selector="visitIfElseStatement:">visitIfElseStatement: anIfElseStatement	^self visitIfStatement: anIfElseStatement</body><body package="SmaCC Java" selector="visitIfStatement:">visitIfStatement: anIfStatement	^self visitStatement: anIfStatement</body><body package="SmaCC Java" selector="visitInitializedVariableDeclaration:">visitInitializedVariableDeclaration: anInitializedVariableDeclaration	^self visitVariableDeclaration: anInitializedVariableDeclaration</body><body package="SmaCC Java" selector="visitIntType:">visitIntType: anIntType	^self visitPrimitiveType: anIntType</body><body package="SmaCC Java" selector="visitIntegerLiteral:">visitIntegerLiteral: anIntegerLiteral	^self visitLiteral: anIntegerLiteral</body><body package="SmaCC Java" selector="visitInterface:">visitInterface: anInterface	^self visitProgram: anInterface</body><body package="SmaCC Java" selector="visitLabeledStatement:">visitLabeledStatement: aLabeledStatement	^self visitStatement: aLabeledStatement</body><body package="SmaCC Java" selector="visitLiteral:">visitLiteral: aLiteral	^self visitExpression: aLiteral</body><body package="SmaCC Java" selector="visitLocalVariableDeclaration:">visitLocalVariableDeclaration: aLocalVariableDeclaration	^self visitProgram: aLocalVariableDeclaration</body><body package="SmaCC Java" selector="visitLocalVariableDeclarationStatement:">visitLocalVariableDeclarationStatement: aLocalVariableDeclarationStatement	^self visitStatement: aLocalVariableDeclarationStatement</body><body package="SmaCC Java" selector="visitLongType:">visitLongType: aLongType	^self visitPrimitiveType: aLongType</body><body package="SmaCC Java" selector="visitMethodDeclaration:">visitMethodDeclaration: aMethodDeclaration	^self visitProgram: aMethodDeclaration</body><body package="SmaCC Java" selector="visitMethodDeclarator:">visitMethodDeclarator: aMethodDeclarator	^self visitProgram: aMethodDeclarator</body><body package="SmaCC Java" selector="visitMethodInvocation:">visitMethodInvocation: aMethodInvocation	^self visitExpression: aMethodInvocation</body><body package="SmaCC Java" selector="visitModifier:">visitModifier: aModifier	^self visitProgram: aModifier</body><body package="SmaCC Java" selector="visitName:">visitName: aName	^self visitExpression: aName</body><body package="SmaCC Java" selector="visitNew:">visitNew: aNew	^self visitExpression: aNew</body><body package="SmaCC Java" selector="visitNewArray:">visitNewArray: aNewArray	^self visitExpression: aNewArray</body><body package="SmaCC Java" selector="visitNewClass:">visitNewClass: aNewClass	^self visitNew: aNewClass</body><body package="SmaCC Java" selector="visitNull:">visitNull: aNull	^self visitLiteral: aNull</body><body package="SmaCC Java" selector="visitPackageDeclaration:">visitPackageDeclaration: aPackageDeclaration	^self visitProgram: aPackageDeclaration</body><body package="SmaCC Java" selector="visitParameter:">visitParameter: aParameter	^self visitProgram: aParameter</body><body package="SmaCC Java" selector="visitPostDecrementExpression:">visitPostDecrementExpression: aPostDecrementExpression	^self visitExpression: aPostDecrementExpression</body><body package="SmaCC Java" selector="visitPostIncrementExpression:">visitPostIncrementExpression: aPostIncrementExpression	^self visitExpression: aPostIncrementExpression</body><body package="SmaCC Java" selector="visitPreDecrementExpression:">visitPreDecrementExpression: aPreDecrementExpression	^self visitExpression: aPreDecrementExpression</body><body package="SmaCC Java" selector="visitPreIncrementExpression:">visitPreIncrementExpression: aPreIncrementExpression	^self visitExpression: aPreIncrementExpression</body><body package="SmaCC Java" selector="visitPrimitiveType:">visitPrimitiveType: aPrimitiveType	^self visitType: aPrimitiveType</body><body package="SmaCC Java" selector="visitProgram:">visitProgram: aProgram	^self visitSmaCCParseNode: aProgram</body><body package="SmaCC Java" selector="visitProgramFile:">visitProgramFile: aProgramFile	^self visitProgram: aProgramFile</body><body package="SmaCC Java" selector="visitQualifiedName:">visitQualifiedName: aQualifiedName	^self visitName: aQualifiedName</body><body package="SmaCC Java" selector="visitQualifiedTypeName:">visitQualifiedTypeName: aQualifiedTypeName	^self visitProgram: aQualifiedTypeName</body><body package="SmaCC Java" selector="visitReturnStatement:">visitReturnStatement: aReturnStatement	^self visitStatement: aReturnStatement</body><body package="SmaCC Java" selector="visitShortType:">visitShortType: aShortType	^self visitPrimitiveType: aShortType</body><body package="SmaCC Java" selector="visitSingleTypeImportDeclaration:">visitSingleTypeImportDeclaration: aSingleTypeImportDeclaration	^self visitProgram: aSingleTypeImportDeclaration</body><body package="SmaCC Java" selector="visitStatement:">visitStatement: aStatement	^self visitProgram: aStatement</body><body package="SmaCC Java" selector="visitStatementExpressionList:">visitStatementExpressionList: aStatementExpressionList	^self visitProgram: aStatementExpressionList</body><body package="SmaCC Java" selector="visitStaticInitializer:">visitStaticInitializer: aStaticInitializer	^self visitProgram: aStaticInitializer</body><body package="SmaCC Java" selector="visitStringLiteral:">visitStringLiteral: aStringLiteral	^self visitLiteral: aStringLiteral</body><body package="SmaCC Java" selector="visitSuperConstructorInvocation:">visitSuperConstructorInvocation: aSuperConstructorInvocation	^self visitProgram: aSuperConstructorInvocation</body><body package="SmaCC Java" selector="visitSwitchBlock:">visitSwitchBlock: aSwitchBlock	^self visitProgram: aSwitchBlock</body><body package="SmaCC Java" selector="visitSwitchBlockStatementGroup:">visitSwitchBlockStatementGroup: aSwitchBlockStatementGroup	^self visitProgram: aSwitchBlockStatementGroup</body><body package="SmaCC Java" selector="visitSwitchLabel:">visitSwitchLabel: aSwitchLabel	^self visitProgram: aSwitchLabel</body><body package="SmaCC Java" selector="visitSwitchStatement:">visitSwitchStatement: aSwitchStatement	^self visitStatement: aSwitchStatement</body><body package="SmaCC Java" selector="visitSynchronizedStatement:">visitSynchronizedStatement: aSynchronizedStatement	^self visitStatement: aSynchronizedStatement</body><body package="SmaCC Java" selector="visitThis:">visitThis: aThis	^self visitExpression: aThis</body><body package="SmaCC Java" selector="visitThisConstructorInvocation:">visitThisConstructorInvocation: aThisConstructorInvocation	^self visitProgram: aThisConstructorInvocation</body><body package="SmaCC Java" selector="visitThrowStatement:">visitThrowStatement: aThrowStatement	^self visitStatement: aThrowStatement</body><body package="SmaCC Java" selector="visitThrows:">visitThrows: aThrows	^self visitProgram: aThrows</body><body package="SmaCC Java" selector="visitTryStatement:">visitTryStatement: aTryStatement	^self visitStatement: aTryStatement</body><body package="SmaCC Java" selector="visitType:">visitType: aType	^self visitProgram: aType</body><body package="SmaCC Java" selector="visitTypeArgument:">visitTypeArgument: aTypeArgument	^self visitProgram: aTypeArgument</body><body package="SmaCC Java" selector="visitTypeImportOnDemandDeclaration:">visitTypeImportOnDemandDeclaration: aTypeImportOnDemandDeclaration	^self visitSingleTypeImportDeclaration: aTypeImportOnDemandDeclaration</body><body package="SmaCC Java" selector="visitTypeName:">visitTypeName: aTypeName	^self visitProgram: aTypeName</body><body package="SmaCC Java" selector="visitTypeParameter:">visitTypeParameter: aTypeParameter	^self visitProgram: aTypeParameter</body><body package="SmaCC Java" selector="visitTypeParameters:">visitTypeParameters: aTypeParameters	^self visitProgram: aTypeParameters</body><body package="SmaCC Java" selector="visitUnaryAddition:">visitUnaryAddition: anUnaryAddition	^self visitExpression: anUnaryAddition</body><body package="SmaCC Java" selector="visitUnaryBitInvert:">visitUnaryBitInvert: anUnaryBitInvert	^self visitExpression: anUnaryBitInvert</body><body package="SmaCC Java" selector="visitUnaryNot:">visitUnaryNot: anUnaryNot	^self visitExpression: anUnaryNot</body><body package="SmaCC Java" selector="visitUnarySubtraction:">visitUnarySubtraction: anUnarySubtraction	^self visitExpression: anUnarySubtraction</body><body package="SmaCC Java" selector="visitVariableDeclaration:">visitVariableDeclaration: aVariableDeclaration	^self visitProgram: aVariableDeclaration</body><body package="SmaCC Java" selector="visitVariableName:">visitVariableName: aVariableName	^self visitProgram: aVariableName</body><body package="SmaCC Java" selector="visitVoidType:">visitVoidType: aVoidType	^self visitProgram: aVoidType</body><body package="SmaCC Java" selector="visitWhileStatement:">visitWhileStatement: aWhileStatement	^self visitStatement: aWhileStatement</body></methods><methods><class-id>Refactory.SmaCC.JavaDoWhileStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitDoWhileStatement: self</body><body package="SmaCC Java" selector="doToken">doToken	^doToken</body><body package="SmaCC Java" selector="doToken:">doToken: aSmaCCToken	doToken := aSmaCCToken</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#statement #expression)</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="statement">statement	^statement</body><body package="SmaCC Java" selector="statement:">statement: aJavaStatementNode	self statement notNil ifTrue: [self statement parent: nil].	statement := aJavaStatementNode.	self statement notNil ifTrue: [self statement parent: self]</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#doToken #whileToken #left #right #semicolon)</body><body package="SmaCC Java" selector="whileToken">whileToken	^whileToken</body><body package="SmaCC Java" selector="whileToken:">whileToken: aSmaCCToken	whileToken := aSmaCCToken</body></methods><methods><class-id>Refactory.SmaCC.JavaEnumConstantNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitEnumConstant: self</body><body package="SmaCC Java" selector="annotations">annotations	^annotations</body><body package="SmaCC Java" selector="annotations:">annotations: anOrderedCollection	self setParents: self annotations to: nil.	annotations := anOrderedCollection.	self setParents: self annotations to: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#annotations #expressions #declarations)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="declarations">declarations	^declarations</body><body package="SmaCC Java" selector="declarations:">declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self</body><body package="SmaCC Java" selector="expressions">expressions	^expressions</body><body package="SmaCC Java" selector="expressions:">expressions: anOrderedCollection	self setParents: self expressions to: nil.	expressions := anOrderedCollection.	self setParents: self expressions to: self</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="leftParen">leftParen	^leftParen</body><body package="SmaCC Java" selector="leftParen:">leftParen: aSmaCCToken	leftParen := aSmaCCToken</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aSmaCCToken	name := aSmaCCToken</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'annotation' put: 'annotations';		at: 'expression' put: 'expressions';		at: 'comma' put: 'commas';		at: 'declaration' put: 'declarations';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="rightParen">rightParen	^rightParen</body><body package="SmaCC Java" selector="rightParen:">rightParen: aSmaCCToken	rightParen := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#name #leftParen #rightParen #left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaEnumConstantNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	annotations := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	commas := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaPostDecrementExpressionNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitPostDecrementExpression: self</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="minusMinus">minusMinus	^minusMinus</body><body package="SmaCC Java" selector="minusMinus:">minusMinus: aSmaCCToken	minusMinus := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression)</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#minusMinus)</body></methods><methods><class-id>Refactory.SmaCC.JavaTypeNameNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitTypeName: self</body><body package="SmaCC Java" selector="arguments">arguments	^arguments</body><body package="SmaCC Java" selector="arguments:">arguments: anOrderedCollection	self setParents: self arguments to: nil.	arguments := anOrderedCollection.	self setParents: self arguments to: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#arguments)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aSmaCCToken	name := aSmaCCToken</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'argument' put: 'arguments';		at: 'comma' put: 'commas';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#name #left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaTypeNameNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	arguments := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaDoubleTypeNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitDoubleType: self</body></methods><methods><class-id>Refactory.SmaCC.JavaAbstractMethodDeclarationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitAbstractMethodDeclaration: self</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#modifiers)</body><body package="SmaCC Java" selector="declarator">declarator	^declarator</body><body package="SmaCC Java" selector="declarator:">declarator: aJavaProgramNode	self declarator notNil ifTrue: [self declarator parent: nil].	declarator := aJavaProgramNode.	self declarator notNil ifTrue: [self declarator parent: self]</body><body package="SmaCC Java" selector="modifiers">modifiers	^modifiers</body><body package="SmaCC Java" selector="modifiers:">modifiers: anOrderedCollection	self setParents: self modifiers to: nil.	modifiers := anOrderedCollection.	self setParents: self modifiers to: self</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#type #declarator #throws)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'modifier' put: 'modifiers';		yourself] once</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="throws">throws	^throws</body><body package="SmaCC Java" selector="throws:">throws: aJavaThrowsNode	self throws notNil ifTrue: [self throws parent: nil].	throws := aJavaThrowsNode.	self throws notNil ifTrue: [self throws parent: self]</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#semicolon)</body><body package="SmaCC Java" selector="type">type	^type</body><body package="SmaCC Java" selector="type:">type: aJavaProgramNode	self type notNil ifTrue: [self type parent: nil].	type := aJavaProgramNode.	self type notNil ifTrue: [self type parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaAbstractMethodDeclarationNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	modifiers := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaPostIncrementExpressionNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitPostIncrementExpression: self</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression)</body><body package="SmaCC Java" selector="plusPlus">plusPlus	^plusPlus</body><body package="SmaCC Java" selector="plusPlus:">plusPlus: aSmaCCToken	plusPlus := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#plusPlus)</body></methods><methods><class-id>Refactory.SmaCC.JavaSingleTypeImportDeclarationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitSingleTypeImportDeclaration: self</body><body package="SmaCC Java" selector="importToken">importToken	^importToken</body><body package="SmaCC Java" selector="importToken:">importToken: aSmaCCToken	importToken := aSmaCCToken</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aJavaNameNode	self name notNil ifTrue: [self name parent: nil].	name := aJavaNameNode.	self name notNil ifTrue: [self name parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#name)</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="staticToken">staticToken	^staticToken</body><body package="SmaCC Java" selector="staticToken:">staticToken: aSmaCCToken	staticToken := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#importToken #staticToken #semicolon)</body></methods><methods><class-id>Refactory.SmaCC.JavaTypeImportOnDemandDeclarationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitTypeImportOnDemandDeclaration: self</body><body package="SmaCC Java" selector="period">period	^period</body><body package="SmaCC Java" selector="period:">period: aSmaCCToken	period := aSmaCCToken</body><body package="SmaCC Java" selector="star">star	^star</body><body package="SmaCC Java" selector="star:">star: aSmaCCToken	star := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#period #star #importToken #staticToken #semicolon)</body></methods><methods><class-id>Refactory.SmaCC.JavaMethodDeclaratorNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitMethodDeclarator: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#parameters)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aSmaCCToken	name := aSmaCCToken</body><body package="SmaCC Java" selector="parameters">parameters	^parameters</body><body package="SmaCC Java" selector="parameters:">parameters: anOrderedCollection	self setParents: self parameters to: nil.	parameters := anOrderedCollection.	self setParents: self parameters to: self</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'parameter' put: 'parameters';		at: 'comma' put: 'commas';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#name #left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaMethodDeclaratorNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	parameters := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaInitializedVariableDeclarationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitInitializedVariableDeclaration: self</body><body package="SmaCC Java" selector="equals">equals	^equals</body><body package="SmaCC Java" selector="equals:">equals: aSmaCCToken	equals := aSmaCCToken</body><body package="SmaCC Java" selector="initializer">initializer	^initializer</body><body package="SmaCC Java" selector="initializer:">initializer: aJavaProgramNode	self initializer notNil ifTrue: [self initializer parent: nil].	initializer := aJavaProgramNode.	self initializer notNil ifTrue: [self initializer parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#initializer #variable)</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#equals)</body></methods><methods><class-id>Refactory.SmaCC.JavaEmptyMethodBodyNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitEmptyMethodBody: self</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#semicolon)</body></methods><methods><class-id>Refactory.SmaCC.JavaNewNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitNew: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#expressions)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas #lefts #rights)</body><body package="SmaCC Java" selector="expressions">expressions	^expressions</body><body package="SmaCC Java" selector="expressions:">expressions: anOrderedCollection	self setParents: self expressions to: nil.	expressions := anOrderedCollection.	self setParents: self expressions to: self</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aSmaCCToken	name := aSmaCCToken</body><body package="SmaCC Java" selector="newToken">newToken	^newToken</body><body package="SmaCC Java" selector="newToken:">newToken: aSmaCCToken	newToken := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#type #primary)</body><body package="SmaCC Java" selector="period">period	^period</body><body package="SmaCC Java" selector="period:">period: aSmaCCToken	period := aSmaCCToken</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'expression' put: 'expressions';		at: 'comma' put: 'commas';		at: 'left' put: 'lefts';		at: 'right' put: 'rights';		yourself] once</body><body package="SmaCC Java" selector="primary">primary	^primary</body><body package="SmaCC Java" selector="primary:">primary: aJavaExpressionNode	self primary notNil ifTrue: [self primary parent: nil].	primary := aJavaExpressionNode.	self primary notNil ifTrue: [self primary parent: self]</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#newToken #period #name)</body><body package="SmaCC Java" selector="type">type	^type</body><body package="SmaCC Java" selector="type:">type: aJavaClassTypeNode	self type notNil ifTrue: [self type parent: nil].	type := aJavaClassTypeNode.	self type notNil ifTrue: [self type parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaNewNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	expressions := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaNewClassNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitNewClass: self</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#declarations #expressions)</body><body package="SmaCC Java" selector="declarations">declarations	^declarations</body><body package="SmaCC Java" selector="declarations:">declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'declaration' put: 'declarations';		at: 'expression' put: 'expressions';		at: 'comma' put: 'commas';		at: 'left' put: 'lefts';		at: 'right' put: 'rights';		yourself] once</body></methods><methods><class-id>Refactory.SmaCC.JavaNewClassNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	declarations := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaBreakStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitBreakStatement: self</body><body package="SmaCC Java" selector="breakToken">breakToken	^breakToken</body><body package="SmaCC Java" selector="breakToken:">breakToken: aSmaCCToken	breakToken := aSmaCCToken</body><body package="SmaCC Java" selector="identifier">identifier	^identifier</body><body package="SmaCC Java" selector="identifier:">identifier: aSmaCCToken	identifier := aSmaCCToken</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#breakToken #identifier #semicolon)</body></methods><methods><class-id>Refactory.SmaCC.JavaPreDecrementExpressionNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitPreDecrementExpression: self</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="minusMinus">minusMinus	^minusMinus</body><body package="SmaCC Java" selector="minusMinus:">minusMinus: aSmaCCToken	minusMinus := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression)</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#minusMinus)</body></methods><methods><class-id>Refactory.SmaCC.JavaDefaultLabelNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitDefaultLabel: self</body><body package="SmaCC Java" selector="colon">colon	^colon</body><body package="SmaCC Java" selector="colon:">colon: aSmaCCToken	colon := aSmaCCToken</body><body package="SmaCC Java" selector="defaultToken">defaultToken	^defaultToken</body><body package="SmaCC Java" selector="defaultToken:">defaultToken: aSmaCCToken	defaultToken := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#defaultToken #colon)</body></methods><methods><class-id>Refactory.SmaCC.JavaPackageDeclarationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitPackageDeclaration: self</body><body package="SmaCC Java" selector="annotations">annotations	^annotations</body><body package="SmaCC Java" selector="annotations:">annotations: anOrderedCollection	self setParents: self annotations to: nil.	annotations := anOrderedCollection.	self setParents: self annotations to: self</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#annotations)</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aJavaNameNode	self name notNil ifTrue: [self name parent: nil].	name := aJavaNameNode.	self name notNil ifTrue: [self name parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#name)</body><body package="SmaCC Java" selector="packageToken">packageToken	^packageToken</body><body package="SmaCC Java" selector="packageToken:">packageToken: aSmaCCToken	packageToken := aSmaCCToken</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'annotation' put: 'annotations';		yourself] once</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#packageToken #semicolon)</body></methods><methods><class-id>Refactory.SmaCC.JavaPackageDeclarationNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	annotations := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaParameterNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitParameter: self</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#modifiers)</body><body package="SmaCC Java" selector="modifiers">modifiers	^modifiers</body><body package="SmaCC Java" selector="modifiers:">modifiers: anOrderedCollection	self setParents: self modifiers to: nil.	modifiers := anOrderedCollection.	self setParents: self modifiers to: self</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#type #variable)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'modifier' put: 'modifiers';		yourself] once</body><body package="SmaCC Java" selector="type">type	^type</body><body package="SmaCC Java" selector="type:">type: aJavaTypeNode	self type notNil ifTrue: [self type parent: nil].	type := aJavaTypeNode.	self type notNil ifTrue: [self type parent: self]</body><body package="SmaCC Java" selector="variable">variable	^variable</body><body package="SmaCC Java" selector="variable:">variable: aJavaProgramNode	self variable notNil ifTrue: [self variable parent: nil].	variable := aJavaProgramNode.	self variable notNil ifTrue: [self variable parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaParameterNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	modifiers := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaConstructorBodyNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitConstructorBody: self</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#statements)</body><body package="SmaCC Java" selector="constructorInvocation">constructorInvocation	^constructorInvocation</body><body package="SmaCC Java" selector="constructorInvocation:">constructorInvocation: aJavaProgramNode	self constructorInvocation notNil ifTrue: [self constructorInvocation parent: nil].	constructorInvocation := aJavaProgramNode.	self constructorInvocation notNil ifTrue: [self constructorInvocation parent: self]</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#constructorInvocation)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'statement' put: 'statements';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="statements">statements	^statements</body><body package="SmaCC Java" selector="statements:">statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaConstructorBodyNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	statements := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaIntTypeNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitIntType: self</body></methods><methods><class-id>Refactory.SmaCC.JavaStaticInitializerNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitStaticInitializer: self</body><body package="SmaCC Java" selector="block">block	^block</body><body package="SmaCC Java" selector="block:">block: aJavaBlockNode	self block notNil ifTrue: [self block parent: nil].	block := aJavaBlockNode.	self block notNil ifTrue: [self block parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#block)</body><body package="SmaCC Java" selector="staticToken">staticToken	^staticToken</body><body package="SmaCC Java" selector="staticToken:">staticToken: aSmaCCToken	staticToken := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#staticToken)</body></methods><methods><class-id>Refactory.SmaCC.JavaAssignmentNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitAssignment: self</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#variable #value)</body><body package="SmaCC Java" selector="op">op	^op</body><body package="SmaCC Java" selector="op:">op: aSmaCCToken	op := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#op)</body><body package="SmaCC Java" selector="value">value	^value</body><body package="SmaCC Java" selector="value:">value: aJavaExpressionNode	self value notNil ifTrue: [self value parent: nil].	value := aJavaExpressionNode.	self value notNil ifTrue: [self value parent: self]</body><body package="SmaCC Java" selector="variable">variable	^variable</body><body package="SmaCC Java" selector="variable:">variable: aJavaExpressionNode	self variable notNil ifTrue: [self variable parent: nil].	variable := aJavaExpressionNode.	self variable notNil ifTrue: [self variable parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaFieldAccessNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitFieldAccess: self</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aSmaCCToken	name := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#receiver)</body><body package="SmaCC Java" selector="period">period	^period</body><body package="SmaCC Java" selector="period:">period: aSmaCCToken	period := aSmaCCToken</body><body package="SmaCC Java" selector="receiver">receiver	^receiver</body><body package="SmaCC Java" selector="receiver:">receiver: aJavaExpressionNode	self receiver notNil ifTrue: [self receiver parent: nil].	receiver := aJavaExpressionNode.	self receiver notNil ifTrue: [self receiver parent: self]</body><body package="SmaCC Java" selector="superPeriod">superPeriod	^superPeriod</body><body package="SmaCC Java" selector="superPeriod:">superPeriod: aSmaCCToken	superPeriod := aSmaCCToken</body><body package="SmaCC Java" selector="superToken">superToken	^superToken</body><body package="SmaCC Java" selector="superToken:">superToken: aSmaCCToken	superToken := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#period #name #superToken #superPeriod)</body></methods><methods><class-id>Refactory.SmaCC.JavaConstructorDeclarationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitConstructorDeclaration: self</body><body package="SmaCC Java" selector="body">body	^body</body><body package="SmaCC Java" selector="body:">body: aJavaConstructorBodyNode	self body notNil ifTrue: [self body parent: nil].	body := aJavaConstructorBodyNode.	self body notNil ifTrue: [self body parent: self]</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#modifiers #parameters)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="modifiers">modifiers	^modifiers</body><body package="SmaCC Java" selector="modifiers:">modifiers: anOrderedCollection	self setParents: self modifiers to: nil.	modifiers := anOrderedCollection.	self setParents: self modifiers to: self</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aJavaNameNode	self name notNil ifTrue: [self name parent: nil].	name := aJavaNameNode.	self name notNil ifTrue: [self name parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#name #throws #body)</body><body package="SmaCC Java" selector="parameters">parameters	^parameters</body><body package="SmaCC Java" selector="parameters:">parameters: anOrderedCollection	self setParents: self parameters to: nil.	parameters := anOrderedCollection.	self setParents: self parameters to: self</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'modifier' put: 'modifiers';		at: 'parameter' put: 'parameters';		at: 'comma' put: 'commas';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="throws">throws	^throws</body><body package="SmaCC Java" selector="throws:">throws: aJavaThrowsNode	self throws notNil ifTrue: [self throws parent: nil].	throws := aJavaThrowsNode.	self throws notNil ifTrue: [self throws parent: self]</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaConstructorDeclarationNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	modifiers := OrderedCollection new: 2.	parameters := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaElementValuePairNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitElementValuePair: self</body><body package="SmaCC Java" selector="equals">equals	^equals</body><body package="SmaCC Java" selector="equals:">equals: aSmaCCToken	equals := aSmaCCToken</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aSmaCCToken	name := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#value)</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#name #equals)</body><body package="SmaCC Java" selector="value">value	^value</body><body package="SmaCC Java" selector="value:">value: aJavaProgramNode	self value notNil ifTrue: [self value parent: nil].	value := aJavaProgramNode.	self value notNil ifTrue: [self value parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaBinaryExpressionNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitBinaryExpression: self</body><body package="SmaCC Java" selector="leftExpression">leftExpression	^leftExpression</body><body package="SmaCC Java" selector="leftExpression:">leftExpression: aJavaExpressionNode	self leftExpression notNil ifTrue: [self leftExpression parent: nil].	leftExpression := aJavaExpressionNode.	self leftExpression notNil ifTrue: [self leftExpression parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#leftExpression #rightExpression)</body><body package="SmaCC Java" selector="op">op	^op</body><body package="SmaCC Java" selector="op:">op: aSmaCCToken	op := aSmaCCToken</body><body package="SmaCC Java" selector="rightExpression">rightExpression	^rightExpression</body><body package="SmaCC Java" selector="rightExpression:">rightExpression: aJavaProgramNode	self rightExpression notNil ifTrue: [self rightExpression parent: nil].	rightExpression := aJavaProgramNode.	self rightExpression notNil ifTrue: [self rightExpression parent: self]</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#op)</body></methods><methods><class-id>Refactory.SmaCC.JavaUnaryBitInvertNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitUnaryBitInvert: self</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression)</body><body package="SmaCC Java" selector="tilde">tilde	^tilde</body><body package="SmaCC Java" selector="tilde:">tilde: aSmaCCToken	tilde := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#tilde)</body></methods><methods><class-id>Refactory.SmaCC.JavaShortTypeNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitShortType: self</body></methods><methods><class-id>Refactory.SmaCC.JavaVariableNameNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitVariableName: self</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aSmaCCToken	name := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#name)</body></methods><methods><class-id>Refactory.SmaCC.JavaAnnotationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="_at">_at	^_at</body><body package="SmaCC Java" selector="_at:">_at: aSmaCCToken	_at := aSmaCCToken</body><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitAnnotation: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#values)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aJavaNameNode	self name notNil ifTrue: [self name parent: nil].	name := aJavaNameNode.	self name notNil ifTrue: [self name parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#name)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'value' put: 'values';		at: 'comma' put: 'commas';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#_at #left #right)</body><body package="SmaCC Java" selector="values">values	^values</body><body package="SmaCC Java" selector="values:">values: anOrderedCollection	self setParents: self values to: nil.	values := anOrderedCollection.	self setParents: self values to: self</body></methods><methods><class-id>Refactory.SmaCC.JavaAnnotationNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	values := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaBooleanLiteralNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitBooleanLiteral: self</body></methods><methods><class-id>Refactory.SmaCC.JavaEmptyDimensionListNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitEmptyDimensionList: self</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaEnumDeclarationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitEnumDeclaration: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#modifiers #interfaces #constants #declarations)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="constants">constants	^constants</body><body package="SmaCC Java" selector="constants:">constants: anOrderedCollection	self setParents: self constants to: nil.	constants := anOrderedCollection.	self setParents: self constants to: self</body><body package="SmaCC Java" selector="declarations">declarations	^declarations</body><body package="SmaCC Java" selector="declarations:">declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self</body><body package="SmaCC Java" selector="enumToken">enumToken	^enumToken</body><body package="SmaCC Java" selector="enumToken:">enumToken: aSmaCCToken	enumToken := aSmaCCToken</body><body package="SmaCC Java" selector="implementsToken">implementsToken	^implementsToken</body><body package="SmaCC Java" selector="implementsToken:">implementsToken: aSmaCCToken	implementsToken := aSmaCCToken</body><body package="SmaCC Java" selector="interfaces">interfaces	^interfaces</body><body package="SmaCC Java" selector="interfaces:">interfaces: anOrderedCollection	self setParents: self interfaces to: nil.	interfaces := anOrderedCollection.	self setParents: self interfaces to: self</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="modifiers">modifiers	^modifiers</body><body package="SmaCC Java" selector="modifiers:">modifiers: anOrderedCollection	self setParents: self modifiers to: nil.	modifiers := anOrderedCollection.	self setParents: self modifiers to: self</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aSmaCCToken	name := aSmaCCToken</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'modifier' put: 'modifiers';		at: 'interface' put: 'interfaces';		at: 'comma' put: 'commas';		at: 'constant' put: 'constants';		at: 'declaration' put: 'declarations';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#enumToken #name #implementsToken #left #semicolon #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaEnumDeclarationNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	modifiers := OrderedCollection new: 2.	interfaces := OrderedCollection new: 2.	commas := OrderedCollection new: 2.	constants := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaUnarySubtractionNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitUnarySubtraction: self</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="minus">minus	^minus</body><body package="SmaCC Java" selector="minus:">minus: aSmaCCToken	minus := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression)</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#minus)</body></methods><methods><class-id>Refactory.SmaCC.JavaIdentifierNameNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitIdentifierName: self</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aSmaCCToken	name := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#name)</body></methods><methods><class-id>Refactory.SmaCC.JavaIfStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitIfStatement: self</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="ifToken">ifToken	^ifToken</body><body package="SmaCC Java" selector="ifToken:">ifToken: aSmaCCToken	ifToken := aSmaCCToken</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression #trueStatement)</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#ifToken #left #right)</body><body package="SmaCC Java" selector="trueStatement">trueStatement	^trueStatement</body><body package="SmaCC Java" selector="trueStatement:">trueStatement: aJavaStatementNode	self trueStatement notNil ifTrue: [self trueStatement parent: nil].	trueStatement := aJavaStatementNode.	self trueStatement notNil ifTrue: [self trueStatement parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaIfElseStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitIfElseStatement: self</body><body package="SmaCC Java" selector="elseToken">elseToken	^elseToken</body><body package="SmaCC Java" selector="elseToken:">elseToken: aSmaCCToken	elseToken := aSmaCCToken</body><body package="SmaCC Java" selector="falseStatement">falseStatement	^falseStatement</body><body package="SmaCC Java" selector="falseStatement:">falseStatement: aJavaStatementNode	self falseStatement notNil ifTrue: [self falseStatement parent: nil].	falseStatement := aJavaStatementNode.	self falseStatement notNil ifTrue: [self falseStatement parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#falseStatement #expression #trueStatement)</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#elseToken #ifToken #left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaAssertStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitAssertStatement: self</body><body package="SmaCC Java" selector="assertToken">assertToken	^assertToken</body><body package="SmaCC Java" selector="assertToken:">assertToken: aSmaCCToken	assertToken := aSmaCCToken</body><body package="SmaCC Java" selector="colon">colon	^colon</body><body package="SmaCC Java" selector="colon:">colon: aSmaCCToken	colon := aSmaCCToken</body><body package="SmaCC Java" selector="messageExpression">messageExpression	^messageExpression</body><body package="SmaCC Java" selector="messageExpression:">messageExpression: aJavaExpressionNode	self messageExpression notNil ifTrue: [self messageExpression parent: nil].	messageExpression := aJavaExpressionNode.	self messageExpression notNil ifTrue: [self messageExpression parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#testExpression #messageExpression)</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="testExpression">testExpression	^testExpression</body><body package="SmaCC Java" selector="testExpression:">testExpression: aJavaExpressionNode	self testExpression notNil ifTrue: [self testExpression parent: nil].	testExpression := aJavaExpressionNode.	self testExpression notNil ifTrue: [self testExpression parent: self]</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#assertToken #semicolon #colon)</body></methods><methods><class-id>Refactory.SmaCC.JavaCharacterLiteralNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitCharacterLiteral: self</body></methods><methods><class-id>Refactory.SmaCC.JavaProgramFileNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitProgramFile: self</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#imports #typeDeclarations)</body><body package="SmaCC Java" selector="imports">imports	^imports</body><body package="SmaCC Java" selector="imports:">imports: anOrderedCollection	self setParents: self imports to: nil.	imports := anOrderedCollection.	self setParents: self imports to: self</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#packageDeclaration)</body><body package="SmaCC Java" selector="packageDeclaration">packageDeclaration	^packageDeclaration</body><body package="SmaCC Java" selector="packageDeclaration:">packageDeclaration: aJavaPackageDeclarationNode	self packageDeclaration notNil ifTrue: [self packageDeclaration parent: nil].	packageDeclaration := aJavaPackageDeclarationNode.	self packageDeclaration notNil ifTrue: [self packageDeclaration parent: self]</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'import' put: 'imports';		at: 'typeDeclaration' put: 'typeDeclarations';		yourself] once</body><body package="SmaCC Java" selector="typeDeclarations">typeDeclarations	^typeDeclarations</body><body package="SmaCC Java" selector="typeDeclarations:">typeDeclarations: anOrderedCollection	self setParents: self typeDeclarations to: nil.	typeDeclarations := anOrderedCollection.	self setParents: self typeDeclarations to: self</body></methods><methods><class-id>Refactory.SmaCC.JavaProgramFileNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	imports := OrderedCollection new: 2.	typeDeclarations := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaVoidTypeNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitVoidType: self</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#voidToken)</body><body package="SmaCC Java" selector="voidToken">voidToken	^voidToken</body><body package="SmaCC Java" selector="voidToken:">voidToken: aSmaCCToken	voidToken := aSmaCCToken</body></methods><methods><class-id>Refactory.SmaCC.JavaUnaryNotNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitUnaryNot: self</body><body package="SmaCC Java" selector="bang">bang	^bang</body><body package="SmaCC Java" selector="bang:">bang: aSmaCCToken	bang := aSmaCCToken</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression)</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#bang)</body></methods><methods><class-id>Refactory.SmaCC.JavaByteTypeNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitByteType: self</body></methods><methods><class-id>Refactory.SmaCC.JavaTryStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitTryStatement: self</body><body package="SmaCC Java" selector="block">block	^block</body><body package="SmaCC Java" selector="block:">block: aJavaBlockNode	self block notNil ifTrue: [self block parent: nil].	block := aJavaBlockNode.	self block notNil ifTrue: [self block parent: self]</body><body package="SmaCC Java" selector="catches">catches	^catches</body><body package="SmaCC Java" selector="catches:">catches: anOrderedCollection	self setParents: self catches to: nil.	catches := anOrderedCollection.	self setParents: self catches to: self</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#catches)</body><body package="SmaCC Java" selector="finally">finally	^finally</body><body package="SmaCC Java" selector="finally:">finally: aJavaFinallyClauseNode	self finally notNil ifTrue: [self finally parent: nil].	finally := aJavaFinallyClauseNode.	self finally notNil ifTrue: [self finally parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#block #finally)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'catch' put: 'catches';		yourself] once</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#tryToken)</body><body package="SmaCC Java" selector="tryToken">tryToken	^tryToken</body><body package="SmaCC Java" selector="tryToken:">tryToken: aSmaCCToken	tryToken := aSmaCCToken</body></methods><methods><class-id>Refactory.SmaCC.JavaTryStatementNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	catches := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaArrayMethodDeclaratorNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitArrayMethodDeclarator: self</body><body package="SmaCC Java" selector="declarator">declarator	^declarator</body><body package="SmaCC Java" selector="declarator:">declarator: aJavaProgramNode	self declarator notNil ifTrue: [self declarator parent: nil].	declarator := aJavaProgramNode.	self declarator notNil ifTrue: [self declarator parent: self]</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#declarator)</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaStringLiteralNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitStringLiteral: self</body></methods><methods><class-id>Refactory.SmaCC.JavaEmptyDeclarationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitEmptyDeclaration: self</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#semicolon)</body></methods><methods><class-id>Refactory.SmaCC.JavaLocalVariableDeclarationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitLocalVariableDeclaration: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#modifiers #variableDeclarations)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="modifiers">modifiers	^modifiers</body><body package="SmaCC Java" selector="modifiers:">modifiers: anOrderedCollection	self setParents: self modifiers to: nil.	modifiers := anOrderedCollection.	self setParents: self modifiers to: self</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#type)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'modifier' put: 'modifiers';		at: 'variableDeclaration' put: 'variableDeclarations';		at: 'comma' put: 'commas';		yourself] once</body><body package="SmaCC Java" selector="type">type	^type</body><body package="SmaCC Java" selector="type:">type: aJavaTypeNode	self type notNil ifTrue: [self type parent: nil].	type := aJavaTypeNode.	self type notNil ifTrue: [self type parent: self]</body><body package="SmaCC Java" selector="variableDeclarations">variableDeclarations	^variableDeclarations</body><body package="SmaCC Java" selector="variableDeclarations:">variableDeclarations: anOrderedCollection	self setParents: self variableDeclarations to: nil.	variableDeclarations := anOrderedCollection.	self setParents: self variableDeclarations to: self</body></methods><methods><class-id>Refactory.SmaCC.JavaLocalVariableDeclarationNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	modifiers := OrderedCollection new: 2.	variableDeclarations := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaAssignmentExpressionNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitAssignmentExpression: self</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#variable #value)</body><body package="SmaCC Java" selector="op">op	^op</body><body package="SmaCC Java" selector="op:">op: aSmaCCToken	op := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#op)</body><body package="SmaCC Java" selector="value">value	^value</body><body package="SmaCC Java" selector="value:">value: aJavaExpressionNode	self value notNil ifTrue: [self value parent: nil].	value := aJavaExpressionNode.	self value notNil ifTrue: [self value parent: self]</body><body package="SmaCC Java" selector="variable">variable	^variable</body><body package="SmaCC Java" selector="variable:">variable: aJavaExpressionNode	self variable notNil ifTrue: [self variable parent: nil].	variable := aJavaExpressionNode.	self variable notNil ifTrue: [self variable parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaArrayTypeNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitArrayType: self</body><body package="SmaCC Java" selector="baseType">baseType	^baseType</body><body package="SmaCC Java" selector="baseType:">baseType: aJavaProgramNode	self baseType notNil ifTrue: [self baseType parent: nil].	baseType := aJavaProgramNode.	self baseType notNil ifTrue: [self baseType parent: self]</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#emptyDims)</body><body package="SmaCC Java" selector="emptyDims">emptyDims	^emptyDims</body><body package="SmaCC Java" selector="emptyDims:">emptyDims: anOrderedCollection	self setParents: self emptyDims to: nil.	emptyDims := anOrderedCollection.	self setParents: self emptyDims to: self</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#baseType)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'emptyDim' put: 'emptyDims';		yourself] once</body></methods><methods><class-id>Refactory.SmaCC.JavaArrayTypeNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	emptyDims := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaCatchClauseNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitCatchClause: self</body><body package="SmaCC Java" selector="block">block	^block</body><body package="SmaCC Java" selector="block:">block: aJavaBlockNode	self block notNil ifTrue: [self block parent: nil].	block := aJavaBlockNode.	self block notNil ifTrue: [self block parent: self]</body><body package="SmaCC Java" selector="catchToken">catchToken	^catchToken</body><body package="SmaCC Java" selector="catchToken:">catchToken: aSmaCCToken	catchToken := aSmaCCToken</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#modifiers)</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="modifiers">modifiers	^modifiers</body><body package="SmaCC Java" selector="modifiers:">modifiers: anOrderedCollection	self setParents: self modifiers to: nil.	modifiers := anOrderedCollection.	self setParents: self modifiers to: self</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#type #variable #block)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'modifier' put: 'modifiers';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#catchToken #left #right)</body><body package="SmaCC Java" selector="type">type	^type</body><body package="SmaCC Java" selector="type:">type: aJavaTypeNode	self type notNil ifTrue: [self type parent: nil].	type := aJavaTypeNode.	self type notNil ifTrue: [self type parent: self]</body><body package="SmaCC Java" selector="variable">variable	^variable</body><body package="SmaCC Java" selector="variable:">variable: aJavaProgramNode	self variable notNil ifTrue: [self variable parent: nil].	variable := aJavaProgramNode.	self variable notNil ifTrue: [self variable parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaCatchClauseNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	modifiers := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaSwitchLabelNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitSwitchLabel: self</body><body package="SmaCC Java" selector="caseToken">caseToken	^caseToken</body><body package="SmaCC Java" selector="caseToken:">caseToken: aSmaCCToken	caseToken := aSmaCCToken</body><body package="SmaCC Java" selector="colon">colon	^colon</body><body package="SmaCC Java" selector="colon:">colon: aSmaCCToken	colon := aSmaCCToken</body><body package="SmaCC Java" selector="constant">constant	^constant</body><body package="SmaCC Java" selector="constant:">constant: aJavaExpressionNode	self constant notNil ifTrue: [self constant parent: nil].	constant := aJavaExpressionNode.	self constant notNil ifTrue: [self constant parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#constant)</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#caseToken #colon)</body></methods><methods><class-id>Refactory.SmaCC.JavaArrayVariableNameNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitArrayVariableName: self</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#variable)</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#left #right)</body><body package="SmaCC Java" selector="variable">variable	^variable</body><body package="SmaCC Java" selector="variable:">variable: aJavaProgramNode	self variable notNil ifTrue: [self variable parent: nil].	variable := aJavaProgramNode.	self variable notNil ifTrue: [self variable parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaIntegerLiteralNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitIntegerLiteral: self</body></methods><methods><class-id>Refactory.SmaCC.JavaWhileStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitWhileStatement: self</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression #statement)</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="statement">statement	^statement</body><body package="SmaCC Java" selector="statement:">statement: aJavaStatementNode	self statement notNil ifTrue: [self statement parent: nil].	statement := aJavaStatementNode.	self statement notNil ifTrue: [self statement parent: self]</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#whileToken #left #right)</body><body package="SmaCC Java" selector="whileToken">whileToken	^whileToken</body><body package="SmaCC Java" selector="whileToken:">whileToken: aSmaCCToken	whileToken := aSmaCCToken</body></methods><methods><class-id>Refactory.SmaCC.JavaSwitchStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitSwitchStatement: self</body><body package="SmaCC Java" selector="block">block	^block</body><body package="SmaCC Java" selector="block:">block: aJavaSwitchBlockNode	self block notNil ifTrue: [self block parent: nil].	block := aJavaSwitchBlockNode.	self block notNil ifTrue: [self block parent: self]</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression #block)</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="switchToken">switchToken	^switchToken</body><body package="SmaCC Java" selector="switchToken:">switchToken: aSmaCCToken	switchToken := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#switchToken #left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaArrayAccessNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitArrayAccess: self</body><body package="SmaCC Java" selector="array">array	^array</body><body package="SmaCC Java" selector="array:">array: aJavaExpressionNode	self array notNil ifTrue: [self array parent: nil].	array := aJavaExpressionNode.	self array notNil ifTrue: [self array parent: self]</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#array #expression)</body></methods><methods><class-id>Refactory.SmaCC.JavaExpressionStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitExpressionStatement: self</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression)</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#semicolon)</body></methods><methods><class-id>Refactory.SmaCC.JavaDimensionExpressionNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitDimensionExpression: self</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression)</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaForStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="_update">_update	^_update</body><body package="SmaCC Java" selector="_update:">_update: aJavaStatementExpressionListNode	self _update notNil ifTrue: [self _update parent: nil].	_update := aJavaStatementExpressionListNode.	self _update notNil ifTrue: [self _update parent: self]</body><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitForStatement: self</body><body package="SmaCC Java" selector="firstSemicolon">firstSemicolon	^firstSemicolon</body><body package="SmaCC Java" selector="firstSemicolon:">firstSemicolon: aSmaCCToken	firstSemicolon := aSmaCCToken</body><body package="SmaCC Java" selector="forToken">forToken	^forToken</body><body package="SmaCC Java" selector="forToken:">forToken: aSmaCCToken	forToken := aSmaCCToken</body><body package="SmaCC Java" selector="initial">initial	^initial</body><body package="SmaCC Java" selector="initial:">initial: aJavaProgramNode	self initial notNil ifTrue: [self initial parent: nil].	initial := aJavaProgramNode.	self initial notNil ifTrue: [self initial parent: self]</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#initial #test #_update #statement)</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="secondSemicolon">secondSemicolon	^secondSemicolon</body><body package="SmaCC Java" selector="secondSemicolon:">secondSemicolon: aSmaCCToken	secondSemicolon := aSmaCCToken</body><body package="SmaCC Java" selector="statement">statement	^statement</body><body package="SmaCC Java" selector="statement:">statement: aJavaStatementNode	self statement notNil ifTrue: [self statement parent: nil].	statement := aJavaStatementNode.	self statement notNil ifTrue: [self statement parent: self]</body><body package="SmaCC Java" selector="test">test	^test</body><body package="SmaCC Java" selector="test:">test: aJavaExpressionNode	self test notNil ifTrue: [self test parent: nil].	test := aJavaExpressionNode.	self test notNil ifTrue: [self test parent: self]</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#forToken #left #firstSemicolon #secondSemicolon #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaThisConstructorInvocationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitThisConstructorInvocation: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#expressions)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="expressions">expressions	^expressions</body><body package="SmaCC Java" selector="expressions:">expressions: anOrderedCollection	self setParents: self expressions to: nil.	expressions := anOrderedCollection.	self setParents: self expressions to: self</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#primary)</body><body package="SmaCC Java" selector="period">period	^period</body><body package="SmaCC Java" selector="period:">period: aSmaCCToken	period := aSmaCCToken</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'expression' put: 'expressions';		at: 'comma' put: 'commas';		yourself] once</body><body package="SmaCC Java" selector="primary">primary	^primary</body><body package="SmaCC Java" selector="primary:">primary: aJavaExpressionNode	self primary notNil ifTrue: [self primary parent: nil].	primary := aJavaExpressionNode.	self primary notNil ifTrue: [self primary parent: self]</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="thisToken">thisToken	^thisToken</body><body package="SmaCC Java" selector="thisToken:">thisToken: aSmaCCToken	thisToken := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#thisToken #left #right #semicolon #period)</body></methods><methods><class-id>Refactory.SmaCC.JavaThisConstructorInvocationNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	expressions := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaFloatLiteralNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitFloatLiteral: self</body></methods><methods><class-id>Refactory.SmaCC.JavaUnaryAdditionNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitUnaryAddition: self</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression)</body><body package="SmaCC Java" selector="plus">plus	^plus</body><body package="SmaCC Java" selector="plus:">plus: aSmaCCToken	plus := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#plus)</body></methods><methods><class-id>Refactory.SmaCC.JavaSwitchBlockNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitSwitchBlock: self</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#statementGroups #labels)</body><body package="SmaCC Java" selector="labels">labels	^labels</body><body package="SmaCC Java" selector="labels:">labels: anOrderedCollection	self setParents: self labels to: nil.	labels := anOrderedCollection.	self setParents: self labels to: self</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'statementGroup' put: 'statementGroups';		at: 'label' put: 'labels';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="statementGroups">statementGroups	^statementGroups</body><body package="SmaCC Java" selector="statementGroups:">statementGroups: anOrderedCollection	self setParents: self statementGroups to: nil.	statementGroups := anOrderedCollection.	self setParents: self statementGroups to: self</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaSwitchBlockNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	statementGroups := OrderedCollection new: 2.	labels := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaFloatTypeNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitFloatType: self</body></methods><methods><class-id>Refactory.SmaCC.JavaParser</class-id> <category>generated-reduction actions</category><body package="SmaCC Java" selector="reduceActionForabstract_method_declaration1:">reduceActionForabstract_method_declaration1: nodes	| result |	result := JavaAbstractMethodDeclarationNode new.	result addNodes: ((nodes at: 1) at: 1) to: result modifiers.	result type: ((nodes at: 1) at: 2).	result declarator: ((nodes at: 1) at: 3).	result throws: ((nodes at: 1) at: 4).	result semicolon: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForannotation1:">reduceActionForannotation1: nodes	| result |	result := JavaAnnotationNode new.	result _at: (nodes at: 1).	result name: (nodes at: 2).	result left: ((nodes at: 3) at: 1).	result addNodes: ((nodes at: 3) at: 2) to: result values.	result addTokens: ((nodes at: 3) at: 3) to: result commas.	result right: ((nodes at: 3) at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionForannotations1:">reduceActionForannotations1: nodes	| result |	result := Array new: 1.	result at: 1 put: (OrderedCollection new: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForannotations2:">reduceActionForannotations2: nodes	| result |	result := Array new: 1.	result at: 1 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self add: (nodes at: 2) to: (result at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForargument_list_opt1:">reduceActionForargument_list_opt1: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForargument_list_opt2:">reduceActionForargument_list_opt2: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForarray_access1:">reduceActionForarray_access1: nodes	| result |	result := JavaArrayAccessNode new.	result array: (nodes at: 1).	result addToken: (nodes at: 2) to: result lefts.	result expression: (nodes at: 3).	result addToken: (nodes at: 4) to: result rights.	^result</body><body package="SmaCC Java" selector="reduceActionForarray_creation_expression1:">reduceActionForarray_creation_expression1: nodes	| result |	result := JavaNewArrayNode new.	result newToken: (nodes at: 1).	result type: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result dimExpressions.	result addNodes: ((nodes at: 4) at: 1) to: result emptyDims.	^result</body><body package="SmaCC Java" selector="reduceActionForarray_creation_expression3:">reduceActionForarray_creation_expression3: nodes	| result |	result := JavaNewArrayNode new.	result newToken: (nodes at: 1).	result type: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result emptyDims.	result initializer: (nodes at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionForarray_initializer1:">reduceActionForarray_initializer1: nodes	| result |	result := JavaArrayInitializerNode new.	result left: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result initializers.	result addTokens: ((nodes at: 2) at: 2) to: result commas.	result addToken: (nodes at: 3) to: result commas.	result right: (nodes at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionForarray_initializer2:">reduceActionForarray_initializer2: nodes	| result |	result := JavaArrayInitializerNode new.	result left: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result initializers.	result addTokens: ((nodes at: 2) at: 2) to: result commas.	result right: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForarray_initializer3:">reduceActionForarray_initializer3: nodes	| result |	result := JavaArrayInitializerNode new.	result left: (nodes at: 1).	result addToken: (nodes at: 2) to: result commas.	result right: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForarray_initializer4:">reduceActionForarray_initializer4: nodes	| result |	result := JavaArrayInitializerNode new.	result left: (nodes at: 1).	result right: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForarray_type1:">reduceActionForarray_type1: nodes	| result |	result := JavaArrayTypeNode new.	result baseType: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result emptyDims.	^result</body><body package="SmaCC Java" selector="reduceActionForassert_statement1:">reduceActionForassert_statement1: nodes	| result |	result := JavaAssertStatementNode new.	result assertToken: (nodes at: 1).	result testExpression: (nodes at: 2).	result semicolon: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForassert_statement2:">reduceActionForassert_statement2: nodes	| result |	result := JavaAssertStatementNode new.	result assertToken: (nodes at: 1).	result testExpression: (nodes at: 2).	result colon: (nodes at: 3).	result messageExpression: (nodes at: 4).	result semicolon: (nodes at: 5).	^result</body><body package="SmaCC Java" selector="reduceActionForassignment1:">reduceActionForassignment1: nodes	| result |	result := JavaAssignmentNode new.	result variable: (nodes at: 1).	result op: (nodes at: 2).	result value: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForassignment_expression2:">reduceActionForassignment_expression2: nodes	| result |	result := JavaAssignmentExpressionNode new.	result addTokens: (nodes at: 1) lefts to: result lefts.	result addTokens: (nodes at: 1) rights to: result rights.	result variable: (nodes at: 1) variable.	result op: (nodes at: 1) op.	result value: (nodes at: 1) value.	^result</body><body package="SmaCC Java" selector="reduceActionForblock1:">reduceActionForblock1: nodes	| result |	result := JavaBlockNode new.	result left: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result statements.	result right: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForbreak_statement1:">reduceActionForbreak_statement1: nodes	| result |	result := JavaBreakStatementNode new.	result breakToken: (nodes at: 1).	result identifier: (nodes at: 2).	result semicolon: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForcast_expression1:">reduceActionForcast_expression1: nodes	| result |	result := JavaCastExpressionNode new.	result addToken: (nodes at: 1) to: result lefts.	result type: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result emptyDims.	result addToken: (nodes at: 4) to: result rights.	result expression: (nodes at: 5).	^result</body><body package="SmaCC Java" selector="reduceActionForcast_expression2:">reduceActionForcast_expression2: nodes	| result |	result := JavaCastExpressionNode new.	result addToken: (nodes at: 1) to: result lefts.	result type: (nodes at: 2).	result addToken: (nodes at: 3) to: result rights.	result expression: (nodes at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionForcatch_clause1:">reduceActionForcatch_clause1: nodes	| result |	result := JavaCatchClauseNode new.	result catchToken: (nodes at: 1).	result left: (nodes at: 2).	result addNodes: (nodes at: 3) modifiers to: result modifiers.	result type: (nodes at: 3) type.	result variable: (nodes at: 3) variable.	result right: (nodes at: 4).	result block: (nodes at: 5).	^result</body><body package="SmaCC Java" selector="reduceActionForclass_body1:">reduceActionForclass_body1: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	result at: 3 put: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForclass_body_opt1:">reduceActionForclass_body_opt1: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForclass_body_opt2:">reduceActionForclass_body_opt2: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	result at: 1 put: ((nodes at: 1) at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	result at: 3 put: ((nodes at: 1) at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForclass_declaration1:">reduceActionForclass_declaration1: nodes	| result |	result := JavaClassDeclarationNode new.	result addNodes: ((nodes at: 1) at: 1) to: result modifiers.	result classToken: (nodes at: 2).	result name: (nodes at: 3).	result typeParameters: (nodes at: 4).	result extendsToken: ((nodes at: 5) at: 1).	result superclass: ((nodes at: 5) at: 2).	result implementsToken: ((nodes at: 6) at: 1).	result addNodes: ((nodes at: 6) at: 2) to: result interfaces.	result addTokens: ((nodes at: 6) at: 3) to: result commas.	result left: ((nodes at: 7) at: 1).	result addNodes: ((nodes at: 7) at: 2) to: result declarations.	result right: ((nodes at: 7) at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForclass_instance_creation_expression1:">reduceActionForclass_instance_creation_expression1: nodes	| result |	result := JavaNewNode new.	result newToken: (nodes at: 1).	result type: (nodes at: 2).	result addToken: (nodes at: 3) to: result lefts.	result addNodes: ((nodes at: 4) at: 1) to: result expressions.	result addTokens: ((nodes at: 4) at: 2) to: result commas.	result addToken: (nodes at: 5) to: result rights.	^result</body><body package="SmaCC Java" selector="reduceActionForclass_instance_creation_expression2:">reduceActionForclass_instance_creation_expression2: nodes	| result |	result := JavaNewClassNode new.	result newToken: (nodes at: 1).	result type: (nodes at: 2).	result addToken: (nodes at: 3) to: result lefts.	result addNodes: ((nodes at: 4) at: 1) to: result expressions.	result addTokens: ((nodes at: 4) at: 2) to: result commas.	result addToken: (nodes at: 5) to: result rights.	result addToken: ((nodes at: 6) at: 1) to: result lefts.	result addNodes: ((nodes at: 6) at: 2) to: result declarations.	result addToken: ((nodes at: 6) at: 3) to: result rights.	^result</body><body package="SmaCC Java" selector="reduceActionForclass_instance_creation_expression3:">reduceActionForclass_instance_creation_expression3: nodes	| result |	result := JavaNewNode new.	result primary: (nodes at: 1).	result period: (nodes at: 2).	result newToken: (nodes at: 3).	result name: (nodes at: 4).	result addToken: (nodes at: 5) to: result lefts.	result addNodes: ((nodes at: 6) at: 1) to: result expressions.	result addTokens: ((nodes at: 6) at: 2) to: result commas.	result addToken: (nodes at: 7) to: result rights.	^result</body><body package="SmaCC Java" selector="reduceActionForclass_instance_creation_expression4:">reduceActionForclass_instance_creation_expression4: nodes	| result |	result := JavaNewClassNode new.	result primary: (nodes at: 1).	result period: (nodes at: 2).	result newToken: (nodes at: 3).	result name: (nodes at: 4).	result addToken: (nodes at: 5) to: result lefts.	result addNodes: ((nodes at: 6) at: 1) to: result expressions.	result addTokens: ((nodes at: 6) at: 2) to: result commas.	result addToken: (nodes at: 7) to: result rights.	result addToken: ((nodes at: 8) at: 1) to: result lefts.	result addNodes: ((nodes at: 8) at: 2) to: result declarations.	result addToken: ((nodes at: 8) at: 3) to: result rights.	^result</body><body package="SmaCC Java" selector="reduceActionForclass_or_interface_type1:">reduceActionForclass_or_interface_type1: nodes	| result |	result := JavaClassTypeNode new.	result name: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForcompilation_unit1:">reduceActionForcompilation_unit1: nodes	| result |	result := JavaProgramFileNode new.	result packageDeclaration: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result imports.	result addNodes: ((nodes at: 3) at: 1) to: result typeDeclarations.	^result</body><body package="SmaCC Java" selector="reduceActionForconditional_expression2:">reduceActionForconditional_expression2: nodes	| result |	result := JavaConditionalExpressionNode new.	result testExpression: (nodes at: 1).	result questionMark: (nodes at: 2).	result trueExpression: (nodes at: 3).	result colon: (nodes at: 4).	result falseExpression: (nodes at: 5).	^result</body><body package="SmaCC Java" selector="reduceActionForconstructor_body1:">reduceActionForconstructor_body1: nodes	| result |	result := JavaConstructorBodyNode new.	result left: (nodes at: 1).	result constructorInvocation: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result statements.	result right: (nodes at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionForconstructor_body2:">reduceActionForconstructor_body2: nodes	| result |	result := JavaConstructorBodyNode new.	result left: (nodes at: 1).	result constructorInvocation: (nodes at: 2).	result right: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForconstructor_body3:">reduceActionForconstructor_body3: nodes	| result |	result := JavaConstructorBodyNode new.	result left: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result statements.	result right: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForconstructor_body4:">reduceActionForconstructor_body4: nodes	| result |	result := JavaConstructorBodyNode new.	result left: (nodes at: 1).	result right: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForconstructor_declaration1:">reduceActionForconstructor_declaration1: nodes	| result |	result := JavaConstructorDeclarationNode new.	result addNodes: ((nodes at: 1) at: 1) to: result modifiers.	result name: ((nodes at: 2) at: 1).	result left: ((nodes at: 2) at: 2).	result addNodes: ((nodes at: 2) at: 3) to: result parameters.	result addTokens: ((nodes at: 2) at: 4) to: result commas.	result right: ((nodes at: 2) at: 5).	result throws: (nodes at: 3).	result body: (nodes at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionForconstructor_declarator1:">reduceActionForconstructor_declarator1: nodes	| result |	result := Array new: 5.	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).	result at: 5 put: (nodes at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionForcontinue_statement1:">reduceActionForcontinue_statement1: nodes	| result |	result := JavaContinueStatementNode new.	result continueToken: (nodes at: 1).	result identifier: (nodes at: 2).	result semicolon: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionFordim_expr1:">reduceActionFordim_expr1: nodes	| result |	result := JavaDimensionExpressionNode new.	result left: (nodes at: 1).	result expression: (nodes at: 2).	result right: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionFordo_statement1:">reduceActionFordo_statement1: nodes	| result |	result := JavaDoWhileStatementNode new.	result doToken: (nodes at: 1).	result statement: (nodes at: 2).	result whileToken: (nodes at: 3).	result left: (nodes at: 4).	result expression: (nodes at: 5).	result right: (nodes at: 6).	result semicolon: (nodes at: 7).	^result</body><body package="SmaCC Java" selector="reduceActionForelementValueArrayInitializer1:">reduceActionForelementValueArrayInitializer1: nodes	| result |	result := JavaElementArrayInitializerNode new.	result left: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result values.	result addTokens: ((nodes at: 2) at: 2) to: result commas.	result addToken: ((nodes at: 3) at: 1) to: result commas.	result right: (nodes at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionForelementValuePair1:">reduceActionForelementValuePair1: nodes	| result |	result := JavaElementValuePairNode new.	result name: (nodes at: 1).	result equals: (nodes at: 2).	result value: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForempty_dim_expr1:">reduceActionForempty_dim_expr1: nodes	| result |	result := JavaEmptyDimensionListNode new.	result left: (nodes at: 1).	result right: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForempty_statement1:">reduceActionForempty_statement1: nodes	| result |	result := JavaEmptyStatementNode new.	result semicolon: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForenum_body1:">reduceActionForenum_body1: nodes	| result |	result := Array new: 6.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self add: ((nodes at: 3) at: 1) to: (result at: 3).	result at: 4 put: ((nodes at: 4) at: 1).	self addAll: ((nodes at: 4) at: 2) to: (result at: 5).	result at: 6 put: (nodes at: 5).	^result</body><body package="SmaCC Java" selector="reduceActionForenum_body_declarations1:">reduceActionForenum_body_declarations1: nodes	| result |	result := Array new: 2.	result at: 2 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForenum_body_declarations_opt1:">reduceActionForenum_body_declarations_opt1: nodes	| result |	result := Array new: 2.	result at: 2 put: (OrderedCollection new: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForenum_body_declarations_opt2:">reduceActionForenum_body_declarations_opt2: nodes	| result |	result := Array new: 2.	result at: 2 put: (OrderedCollection new: 2).	result at: 1 put: ((nodes at: 1) at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForenum_constant1:">reduceActionForenum_constant1: nodes	| result |	result := JavaEnumConstantNode new.	result addNodes: ((nodes at: 1) at: 1) to: result annotations.	result name: (nodes at: 2).	result leftParen: ((nodes at: 3) at: 1).	result addNodes: ((nodes at: 3) at: 2) to: result expressions.	result addTokens: ((nodes at: 3) at: 3) to: result commas.	result rightParen: ((nodes at: 3) at: 4).	result left: ((nodes at: 4) at: 1).	result addNodes: ((nodes at: 4) at: 2) to: result declarations.	result right: ((nodes at: 4) at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForenum_declaration1:">reduceActionForenum_declaration1: nodes	| result |	result := JavaEnumDeclarationNode new.	result addNodes: ((nodes at: 1) at: 1) to: result modifiers.	result enumToken: (nodes at: 2).	result name: (nodes at: 3).	result implementsToken: ((nodes at: 4) at: 1).	result addNodes: ((nodes at: 4) at: 2) to: result interfaces.	result addTokens: ((nodes at: 4) at: 3) to: result commas.	result left: ((nodes at: 5) at: 1).	result addNodes: ((nodes at: 5) at: 2) to: result constants.	result addTokens: ((nodes at: 5) at: 3) to: result commas.	result semicolon: ((nodes at: 5) at: 4).	result addNodes: ((nodes at: 5) at: 5) to: result declarations.	result right: ((nodes at: 5) at: 6).	^result</body><body package="SmaCC Java" selector="reduceActionForexplicit_constructor_invocation1:">reduceActionForexplicit_constructor_invocation1: nodes	| result |	result := JavaThisConstructorInvocationNode new.	result thisToken: (nodes at: 1).	result left: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result expressions.	result addTokens: ((nodes at: 3) at: 2) to: result commas.	result right: (nodes at: 4).	result semicolon: (nodes at: 5).	^result</body><body package="SmaCC Java" selector="reduceActionForexplicit_constructor_invocation2:">reduceActionForexplicit_constructor_invocation2: nodes	| result |	result := JavaSuperConstructorInvocationNode new.	result superToken: (nodes at: 1).	result left: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result expressions.	result addTokens: ((nodes at: 3) at: 2) to: result commas.	result right: (nodes at: 4).	result semicolon: (nodes at: 5).	^result</body><body package="SmaCC Java" selector="reduceActionForexplicit_constructor_invocation3:">reduceActionForexplicit_constructor_invocation3: nodes	| result |	result := JavaThisConstructorInvocationNode new.	result primary: (nodes at: 1).	result period: (nodes at: 2).	result thisToken: (nodes at: 3).	result left: (nodes at: 4).	result addNodes: ((nodes at: 5) at: 1) to: result expressions.	result addTokens: ((nodes at: 5) at: 2) to: result commas.	result right: (nodes at: 6).	result semicolon: (nodes at: 7).	^result</body><body package="SmaCC Java" selector="reduceActionForexplicit_constructor_invocation4:">reduceActionForexplicit_constructor_invocation4: nodes	| result |	result := JavaSuperConstructorInvocationNode new.	result primary: (nodes at: 1).	result period: (nodes at: 2).	result superToken: (nodes at: 3).	result left: (nodes at: 4).	result addNodes: ((nodes at: 5) at: 1) to: result expressions.	result addTokens: ((nodes at: 5) at: 2) to: result commas.	result right: (nodes at: 6).	result semicolon: (nodes at: 7).	^result</body><body package="SmaCC Java" selector="reduceActionForexpression_statement1:">reduceActionForexpression_statement1: nodes	| result |	result := JavaExpressionStatementNode new.	result expression: (nodes at: 1).	result semicolon: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForextends_interfaces1:">reduceActionForextends_interfaces1: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self add: (nodes at: 2) to: (result at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForextends_interfaces2:">reduceActionForextends_interfaces2: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: ((nodes at: 1) at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self add: (nodes at: 2) to: (result at: 3).	self add: (nodes at: 3) to: (result at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForfield_access1:">reduceActionForfield_access1: nodes	| result |	result := JavaFieldAccessNode new.	result receiver: (nodes at: 1).	result period: (nodes at: 2).	result name: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForfield_access2:">reduceActionForfield_access2: nodes	| result |	result := JavaFieldAccessNode new.	result superToken: (nodes at: 1).	result period: (nodes at: 2).	result name: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForfield_access3:">reduceActionForfield_access3: nodes	| result |	result := JavaFieldAccessNode new.	result receiver: (nodes at: 1).	result superPeriod: (nodes at: 2).	result superToken: (nodes at: 3).	result period: (nodes at: 4).	result name: (nodes at: 5).	^result</body><body package="SmaCC Java" selector="reduceActionForfield_declaration1:">reduceActionForfield_declaration1: nodes	| result |	result := JavaFieldDeclarationNode new.	result addNodes: ((nodes at: 1) at: 1) to: result modifiers.	result type: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result variableDeclarations.	result addTokens: ((nodes at: 3) at: 2) to: result commas.	result semicolon: (nodes at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionForfinally1:">reduceActionForfinally1: nodes	| result |	result := JavaFinallyClauseNode new.	result finallyToken: (nodes at: 1).	result block: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForfloating_point_type1:">reduceActionForfloating_point_type1: nodes	| result |	result := JavaFloatTypeNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForfloating_point_type2:">reduceActionForfloating_point_type2: nodes	| result |	result := JavaDoubleTypeNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForfor_statement1:">reduceActionForfor_statement1: nodes	| result |	result := JavaForStatementNode new.	result forToken: (nodes at: 1).	result left: (nodes at: 2).	result initial: (nodes at: 3).	result firstSemicolon: (nodes at: 4).	result test: (nodes at: 5).	result secondSemicolon: (nodes at: 6).	result _update: (nodes at: 7).	result right: (nodes at: 8).	result statement: (nodes at: 9).	^result</body><body package="SmaCC Java" selector="reduceActionForforeach_statement1:">reduceActionForforeach_statement1: nodes	| result |	result := JavaForEachStatementNode new.	result forToken: (nodes at: 1).	result left: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result modifiers.	result type: (nodes at: 4).	result colon: (nodes at: 6).	result expression: (nodes at: 7).	result right: (nodes at: 8).	result statement: (nodes at: 9).	^result</body><body package="SmaCC Java" selector="reduceActionForformal_parameter1:">reduceActionForformal_parameter1: nodes	| result |	result := JavaParameterNode new.	result addNodes: ((nodes at: 1) at: 1) to: result modifiers.	result type: (nodes at: 2).	result variable: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForgoal1:">reduceActionForgoal1: nodes	^nodes at: 1</body><body package="SmaCC Java" selector="reduceActionForidentifierName1:">reduceActionForidentifierName1: nodes	| result |	result := JavaIdentifierNameNode new.	result name: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForif_then_else_statement1:">reduceActionForif_then_else_statement1: nodes	| result |	result := JavaIfElseStatementNode new.	result ifToken: (nodes at: 1).	result left: (nodes at: 2).	result expression: (nodes at: 3).	result right: (nodes at: 4).	result trueStatement: (nodes at: 5).	result elseToken: (nodes at: 6).	result falseStatement: (nodes at: 7).	^result</body><body package="SmaCC Java" selector="reduceActionForif_then_statement1:">reduceActionForif_then_statement1: nodes	| result |	result := JavaIfStatementNode new.	result ifToken: (nodes at: 1).	result left: (nodes at: 2).	result expression: (nodes at: 3).	result right: (nodes at: 4).	result trueStatement: (nodes at: 5).	^result</body><body package="SmaCC Java" selector="reduceActionForintegral_type1:">reduceActionForintegral_type1: nodes	| result |	result := JavaByteTypeNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForintegral_type2:">reduceActionForintegral_type2: nodes	| result |	result := JavaShortTypeNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForintegral_type3:">reduceActionForintegral_type3: nodes	| result |	result := JavaIntTypeNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForintegral_type4:">reduceActionForintegral_type4: nodes	| result |	result := JavaLongTypeNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForintegral_type5:">reduceActionForintegral_type5: nodes	| result |	result := JavaCharTypeNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForinterface_declaration1:">reduceActionForinterface_declaration1: nodes	| result |	result := JavaInterfaceNode new.	result addNodes: ((nodes at: 1) at: 1) to: result modifiers.	result interfaceToken: (nodes at: 2).	result name: (nodes at: 3).	result typeParameters: (nodes at: 4).	result extendsToken: ((nodes at: 5) at: 1).	result addNodes: ((nodes at: 5) at: 2) to: result interfaceTypes.	result addTokens: ((nodes at: 5) at: 3) to: result commas.	result left: ((nodes at: 6) at: 1).	result addNodes: ((nodes at: 6) at: 2) to: result declarations.	result right: ((nodes at: 6) at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForinterfaces1:">reduceActionForinterfaces1: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForinterfaces_opt1:">reduceActionForinterfaces_opt1: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForinterfaces_opt2:">reduceActionForinterfaces_opt2: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: ((nodes at: 1) at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForlabeled_statement1:">reduceActionForlabeled_statement1: nodes	| result |	result := JavaLabeledStatementNode new.	result identifier: (nodes at: 1).	result colon: (nodes at: 2).	result statement: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForliteral1:">reduceActionForliteral1: nodes	| result |	result := JavaIntegerLiteralNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForliteral2:">reduceActionForliteral2: nodes	| result |	result := JavaFloatLiteralNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForliteral3:">reduceActionForliteral3: nodes	| result |	result := JavaBooleanLiteralNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForliteral4:">reduceActionForliteral4: nodes	| result |	result := JavaCharacterLiteralNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForliteral5:">reduceActionForliteral5: nodes	| result |	result := JavaStringLiteralNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForliteral6:">reduceActionForliteral6: nodes	| result |	result := JavaNullNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForlocal_variable_declaration1:">reduceActionForlocal_variable_declaration1: nodes	| result |	result := JavaLocalVariableDeclarationNode new.	result addNodes: ((nodes at: 1) at: 1) to: result modifiers.	result type: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result variableDeclarations.	result addTokens: ((nodes at: 3) at: 2) to: result commas.	^result</body><body package="SmaCC Java" selector="reduceActionForlocal_variable_declaration_statement1:">reduceActionForlocal_variable_declaration_statement1: nodes	| result |	result := JavaLocalVariableDeclarationStatementNode new.	result declaration: (nodes at: 1).	result semicolon: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionFormethod_body2:">reduceActionFormethod_body2: nodes	| result |	result := JavaEmptyMethodBodyNode new.	result semicolon: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionFormethod_declaration1:">reduceActionFormethod_declaration1: nodes	| result |	result := JavaMethodDeclarationNode new.	result addNodes: ((nodes at: 1) at: 1) to: result modifiers.	result type: ((nodes at: 1) at: 2).	result declarator: ((nodes at: 1) at: 3).	result throws: ((nodes at: 1) at: 4).	result body: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionFormethod_declarator1:">reduceActionFormethod_declarator1: nodes	| result |	result := JavaMethodDeclaratorNode new.	result name: (nodes at: 1).	result left: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result parameters.	result addTokens: ((nodes at: 3) at: 2) to: result commas.	result right: (nodes at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionFormethod_declarator2:">reduceActionFormethod_declarator2: nodes	| result |	result := JavaArrayMethodDeclaratorNode new.	result declarator: (nodes at: 1).	result left: (nodes at: 2).	result right: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionFormethod_header1:">reduceActionFormethod_header1: nodes	| result |	result := Array new: 4.	result at: 1 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	result at: 2 put: (nodes at: 2).	result at: 3 put: (nodes at: 3).	result at: 4 put: (nodes at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionFormethod_invocation1:">reduceActionFormethod_invocation1: nodes	| result |	result := JavaMethodInvocationNode new.	result name: (nodes at: 1).	result addToken: (nodes at: 2) to: result lefts.	result addNodes: ((nodes at: 3) at: 1) to: result expressions.	result addTokens: ((nodes at: 3) at: 2) to: result commas.	result addToken: (nodes at: 4) to: result rights.	^result</body><body package="SmaCC Java" selector="reduceActionFormethod_invocation2:">reduceActionFormethod_invocation2: nodes	| result |	result := JavaMethodInvocationNode new.	result receiver: (nodes at: 1).	result period: (nodes at: 2).	result name: (nodes at: 3).	result addToken: (nodes at: 4) to: result lefts.	result addNodes: ((nodes at: 5) at: 1) to: result expressions.	result addTokens: ((nodes at: 5) at: 2) to: result commas.	result addToken: (nodes at: 6) to: result rights.	^result</body><body package="SmaCC Java" selector="reduceActionFormethod_invocation3:">reduceActionFormethod_invocation3: nodes	| result |	result := JavaMethodInvocationNode new.	result superToken: (nodes at: 1).	result period: (nodes at: 2).	result name: (nodes at: 3).	result addToken: (nodes at: 4) to: result lefts.	result addNodes: ((nodes at: 5) at: 1) to: result expressions.	result addTokens: ((nodes at: 5) at: 2) to: result commas.	result addToken: (nodes at: 6) to: result rights.	^result</body><body package="SmaCC Java" selector="reduceActionFormethod_invocation4:">reduceActionFormethod_invocation4: nodes	| result |	result := JavaMethodInvocationNode new.	result receiver: (nodes at: 1).	result superPeriod: (nodes at: 2).	result superToken: (nodes at: 3).	result period: (nodes at: 4).	result name: (nodes at: 5).	result addToken: (nodes at: 6) to: result lefts.	result addNodes: ((nodes at: 7) at: 1) to: result expressions.	result addTokens: ((nodes at: 7) at: 2) to: result commas.	result addToken: (nodes at: 8) to: result rights.	^result</body><body package="SmaCC Java" selector="reduceActionFormodifier11:">reduceActionFormodifier11: nodes	| result |	result := JavaModifierNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionFormodifiers1:">reduceActionFormodifiers1: nodes	| result |	result := Array new: 1.	result at: 1 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionFormodifiers_opt2:">reduceActionFormodifiers_opt2: nodes	| result |	result := Array new: 1.	result at: 1 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionFormultiplicative_expression2:">reduceActionFormultiplicative_expression2: nodes	| result |	result := JavaBinaryExpressionNode new.	result leftExpression: (nodes at: 1).	result op: (nodes at: 2).	result rightExpression: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForpackage_declaration1:">reduceActionForpackage_declaration1: nodes	| result |	result := JavaPackageDeclarationNode new.	result addNodes: ((nodes at: 1) at: 1) to: result annotations.	result packageToken: (nodes at: 2).	result name: (nodes at: 3).	result semicolon: (nodes at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionForpostdecrement_expression1:">reduceActionForpostdecrement_expression1: nodes	| result |	result := JavaPostDecrementExpressionNode new.	result expression: (nodes at: 1).	result minusMinus: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForpostincrement_expression1:">reduceActionForpostincrement_expression1: nodes	| result |	result := JavaPostIncrementExpressionNode new.	result expression: (nodes at: 1).	result plusPlus: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForpredecrement_expression1:">reduceActionForpredecrement_expression1: nodes	| result |	result := JavaPreDecrementExpressionNode new.	result minusMinus: (nodes at: 1).	result expression: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForpreincrement_expression1:">reduceActionForpreincrement_expression1: nodes	| result |	result := JavaPreIncrementExpressionNode new.	result plusPlus: (nodes at: 1).	result expression: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForprimary_no_new_array11:">reduceActionForprimary_no_new_array11: nodes	| result |	result := JavaClassPropertyNode new.	result name: (nodes at: 1).	result period: (nodes at: 2).	result classToken: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForprimary_no_new_array12:">reduceActionForprimary_no_new_array12: nodes	| result |	result := JavaClassPropertyNode new.	result name: (nodes at: 1).	result period: (nodes at: 2).	result thisToken: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForprimary_no_new_array2:">reduceActionForprimary_no_new_array2: nodes	| result |	result := JavaThisNode new.	result thisToken: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForprimary_no_new_array3:">reduceActionForprimary_no_new_array3: nodes	| result |	result := nodes at: 2.	result addFirstToken: (nodes at: 1) to: result lefts.	result addToken: (nodes at: 3) to: result rights.	^result</body><body package="SmaCC Java" selector="reduceActionForprimary_no_new_array8:">reduceActionForprimary_no_new_array8: nodes	| result |	result := JavaClassPropertyNode new.	result type: (nodes at: 1).	result period: (nodes at: 2).	result classToken: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForprimitive_type2:">reduceActionForprimitive_type2: nodes	| result |	result := JavaBooleanTypeNode new.	result token: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForqualified_name1:">reduceActionForqualified_name1: nodes	| result |	result := JavaQualifiedNameNode new.	result nspace: (nodes at: 1).	result period: (nodes at: 2).	result name: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForqualified_type_name1:">reduceActionForqualified_type_name1: nodes	| result |	result := JavaQualifiedTypeNameNode new.	result nspace: (nodes at: 1).	result period: (nodes at: 2).	result name: (nodes at: 3).	result left: ((nodes at: 4) at: 1).	result addNodes: ((nodes at: 4) at: 2) to: result arguments.	result addTokens: ((nodes at: 4) at: 3) to: result commas.	result right: ((nodes at: 4) at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionForreturn_statement1:">reduceActionForreturn_statement1: nodes	| result |	result := JavaReturnStatementNode new.	result returnToken: (nodes at: 1).	result expression: (nodes at: 2).	result semicolon: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForsimple_name1:">reduceActionForsimple_name1: nodes	| result |	result := JavaNameNode new.	result name: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForsimple_type_name1:">reduceActionForsimple_type_name1: nodes	| result |	result := JavaTypeNameNode new.	result name: (nodes at: 1).	result left: ((nodes at: 2) at: 1).	result addNodes: ((nodes at: 2) at: 2) to: result arguments.	result addTokens: ((nodes at: 2) at: 3) to: result commas.	result right: ((nodes at: 2) at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionForsingle_type_import_declaration1:">reduceActionForsingle_type_import_declaration1: nodes	| result |	result := JavaSingleTypeImportDeclarationNode new.	result importToken: (nodes at: 1).	result staticToken: ((nodes at: 2) at: 1).	result name: (nodes at: 3).	result semicolon: (nodes at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionForstatement_expression_list1:">reduceActionForstatement_expression_list1: nodes	| result |	result := JavaStatementExpressionListNode new.	result addNode: (nodes at: 1) to: result expressions.	^result</body><body package="SmaCC Java" selector="reduceActionForstatement_expression_list2:">reduceActionForstatement_expression_list2: nodes	| result |	result := nodes at: 1.	result addToken: (nodes at: 2) to: result commas.	result addNode: (nodes at: 3) to: result expressions.	^result</body><body package="SmaCC Java" selector="reduceActionForstatic_initializer1:">reduceActionForstatic_initializer1: nodes	| result |	result := JavaStaticInitializerNode new.	result staticToken: (nodes at: 1).	result block: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForstatic_opt1:">reduceActionForstatic_opt1: nodes	| result |	result := Array new: 1.	^result</body><body package="SmaCC Java" selector="reduceActionForstatic_opt2:">reduceActionForstatic_opt2: nodes	| result |	result := Array new: 1.	result at: 1 put: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForsuper_opt1:">reduceActionForsuper_opt1: nodes	| result |	result := Array new: 2.	^result</body><body package="SmaCC Java" selector="reduceActionForsuper_opt2:">reduceActionForsuper_opt2: nodes	| result |	result := Array new: 2.	result at: 1 put: ((nodes at: 1) at: 1).	result at: 2 put: ((nodes at: 1) at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForswitch_block1:">reduceActionForswitch_block1: nodes	| result |	result := JavaSwitchBlockNode new.	result left: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result statementGroups.	result addNodes: ((nodes at: 3) at: 1) to: result labels.	result right: (nodes at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionForswitch_block2:">reduceActionForswitch_block2: nodes	| result |	result := JavaSwitchBlockNode new.	result left: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result statementGroups.	result right: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForswitch_block3:">reduceActionForswitch_block3: nodes	| result |	result := JavaSwitchBlockNode new.	result left: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result labels.	result right: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForswitch_block4:">reduceActionForswitch_block4: nodes	| result |	result := JavaSwitchBlockNode new.	result left: (nodes at: 1).	result right: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForswitch_block_statement_group1:">reduceActionForswitch_block_statement_group1: nodes	| result |	result := JavaSwitchBlockStatementGroupNode new.	result addNodes: ((nodes at: 1) at: 1) to: result labels.	result addNodes: ((nodes at: 2) at: 1) to: result statements.	^result</body><body package="SmaCC Java" selector="reduceActionForswitch_label1:">reduceActionForswitch_label1: nodes	| result |	result := JavaSwitchLabelNode new.	result caseToken: (nodes at: 1).	result constant: (nodes at: 2).	result colon: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForswitch_label2:">reduceActionForswitch_label2: nodes	| result |	result := JavaDefaultLabelNode new.	result defaultToken: (nodes at: 1).	result colon: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForswitch_statement1:">reduceActionForswitch_statement1: nodes	| result |	result := JavaSwitchStatementNode new.	result switchToken: (nodes at: 1).	result left: (nodes at: 2).	result expression: (nodes at: 3).	result right: (nodes at: 4).	result block: (nodes at: 5).	^result</body><body package="SmaCC Java" selector="reduceActionForsynchronized_statement1:">reduceActionForsynchronized_statement1: nodes	| result |	result := JavaSynchronizedStatementNode new.	result synchronizedToken: (nodes at: 1).	result left: (nodes at: 2).	result expression: (nodes at: 3).	result right: (nodes at: 4).	result block: (nodes at: 5).	^result</body><body package="SmaCC Java" selector="reduceActionForthrow_statement1:">reduceActionForthrow_statement1: nodes	| result |	result := JavaThrowStatementNode new.	result throwToken: (nodes at: 1).	result expression: (nodes at: 2).	result semicolon: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForthrows1:">reduceActionForthrows1: nodes	| result |	result := JavaThrowsNode new.	result throwsToken: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result classTypes.	result addTokens: ((nodes at: 2) at: 2) to: result commas.	^result</body><body package="SmaCC Java" selector="reduceActionFortry_statement1:">reduceActionFortry_statement1: nodes	| result |	result := JavaTryStatementNode new.	result tryToken: (nodes at: 1).	result block: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result catches.	^result</body><body package="SmaCC Java" selector="reduceActionFortry_statement2:">reduceActionFortry_statement2: nodes	| result |	result := JavaTryStatementNode new.	result tryToken: (nodes at: 1).	result block: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result catches.	result finally: (nodes at: 4).	^result</body><body package="SmaCC Java" selector="reduceActionFortype_argument1:">reduceActionFortype_argument1: nodes	| result |	result := JavaTypeArgumentNode new.	result type: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionFortype_argument2:">reduceActionFortype_argument2: nodes	| result |	result := JavaTypeArgumentNode new.	result questionMark: (nodes at: 1).	result token: ((nodes at: 2) at: 1).	result type: ((nodes at: 2) at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionFortype_argument_type1:">reduceActionFortype_argument_type1: nodes	| result |	result := Array new: 2.	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionFortype_arguments1:">reduceActionFortype_arguments1: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionFortype_arguments2:">reduceActionFortype_arguments2: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self add: (nodes at: 2) to: (result at: 2).	self add: (nodes at: 3) to: (result at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionFortype_arguments_opt1:">reduceActionFortype_arguments_opt1: nodes	| result |	result := Array new: 4.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	^result</body><body package="SmaCC Java" selector="reduceActionFortype_arguments_opt2:">reduceActionFortype_arguments_opt2: nodes	| result |	result := Array new: 4.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	result at: 4 put: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionFortype_declaration3:">reduceActionFortype_declaration3: nodes	| result |	result := JavaEmptyDeclarationNode new.	result semicolon: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionFortype_import_on_demand_declaration1:">reduceActionFortype_import_on_demand_declaration1: nodes	| result |	result := JavaTypeImportOnDemandDeclarationNode new.	result importToken: (nodes at: 1).	result staticToken: ((nodes at: 2) at: 1).	result name: (nodes at: 3).	result period: (nodes at: 4).	result star: (nodes at: 5).	result semicolon: (nodes at: 6).	^result</body><body package="SmaCC Java" selector="reduceActionFortype_parameter1:">reduceActionFortype_parameter1: nodes	| result |	result := JavaTypeParameterNode new.	result name: (nodes at: 1).	result extendsToken: ((nodes at: 2) at: 1).	result addNodes: ((nodes at: 2) at: 2) to: result types.	result addTokens: ((nodes at: 2) at: 3) to: result amps.	^result</body><body package="SmaCC Java" selector="reduceActionFortype_parameters_opt2:">reduceActionFortype_parameters_opt2: nodes	| result |	result := JavaTypeParametersNode new.	result left: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result parameters.	result addTokens: ((nodes at: 2) at: 2) to: result commas.	result right: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForunary_expression3:">reduceActionForunary_expression3: nodes	| result |	result := JavaUnaryAdditionNode new.	result plus: (nodes at: 1).	result expression: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForunary_expression4:">reduceActionForunary_expression4: nodes	| result |	result := JavaUnarySubtractionNode new.	result minus: (nodes at: 1).	result expression: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForunary_expression_not_plus_minus2:">reduceActionForunary_expression_not_plus_minus2: nodes	| result |	result := JavaUnaryBitInvertNode new.	result tilde: (nodes at: 1).	result expression: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForunary_expression_not_plus_minus3:">reduceActionForunary_expression_not_plus_minus3: nodes	| result |	result := JavaUnaryNotNode new.	result bang: (nodes at: 1).	result expression: (nodes at: 2).	^result</body><body package="SmaCC Java" selector="reduceActionForvariable_declarator1:">reduceActionForvariable_declarator1: nodes	| result |	result := JavaVariableDeclarationNode new.	result variable: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForvariable_declarator2:">reduceActionForvariable_declarator2: nodes	| result |	result := JavaInitializedVariableDeclarationNode new.	result variable: (nodes at: 1).	result equals: (nodes at: 2).	result initializer: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForvariable_declarator_id1:">reduceActionForvariable_declarator_id1: nodes	| result |	result := JavaVariableNameNode new.	result name: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForvariable_declarator_id2:">reduceActionForvariable_declarator_id2: nodes	| result |	result := JavaArrayVariableNameNode new.	result variable: (nodes at: 1).	result left: (nodes at: 2).	result right: (nodes at: 3).	^result</body><body package="SmaCC Java" selector="reduceActionForvoid1:">reduceActionForvoid1: nodes	| result |	result := JavaVoidTypeNode new.	result voidToken: (nodes at: 1).	^result</body><body package="SmaCC Java" selector="reduceActionForwhile_statement1:">reduceActionForwhile_statement1: nodes	| result |	result := JavaWhileStatementNode new.	result whileToken: (nodes at: 1).	result left: (nodes at: 2).	result expression: (nodes at: 3).	result right: (nodes at: 4).	result statement: (nodes at: 5).	^result</body></methods><methods><class-id>Refactory.SmaCC.JavaParser</class-id> <category>generated</category><body package="SmaCC Java" selector="ambiguousTransitions">ambiguousTransitions^#(#[ 0 6 0 10] #[ 0 18 0 81] #[ 0 18 0 85] #[ 0 18 0 89] #[ 0 18 0 93] #[ 0 18 0 97] #[ 0 18 0 105] #[ 0 18 0 109] #[ 0 18 0 113] #[ 0 18 0 125] #[ 0 18 0 161] #[ 0 18 0 229] #[ 0 118 0 122] #[ 0 118 2 241] #[ 0 122 2 241] #[ 0 18 1 233] #[ 2 226 7 201] #[ 3 142 8 253]	).</body><body package="SmaCC Java" selector="reduceTable">reduceTable^#(	#(124 0 #nil) 	#(132 0 #reduceActionForannotations1:) 	#(139 0 #reduceActionForannotations1:) 	#(172 0 #reduceActionForannotations1:) 	#(296 1 #reduceActionForgoal1:) 	#(125 0 #reduceActionForannotations1:) 	#(124 1 #reduceActionForgoal1:) 	#(190 0 #reduceActionForannotations1:) 	#(140 1 #reduceActionFormodifier11:) 	#(168 1 #reduceActionForvoid1:) 	#(237 1 #reduceActionForprimary_no_new_array2:) 	#(112 1 #reduceActionForintegral_type4:) 	#(112 1 #reduceActionForintegral_type5:) 	#(113 1 #reduceActionForfloating_point_type1:) 	#(113 1 #reduceActionForfloating_point_type2:) 	#(112 1 #reduceActionForintegral_type3:) 	#(201 1 #reduceActionForempty_statement1:) 	#(108 1 #reduceActionForprimitive_type2:) 	#(112 1 #reduceActionForintegral_type1:) 	#(112 1 #reduceActionForintegral_type2:) 	#(232 0 #nil) 	#(227 0 #nil) 	#(107 1 #reduceActionForliteral1:) 	#(107 1 #reduceActionForliteral2:) 	#(107 1 #reduceActionForliteral3:) 	#(107 1 #reduceActionForliteral4:) 	#(107 1 #reduceActionForliteral5:) 	#(107 1 #reduceActionForliteral6:) 	#(120 1 #reduceActionForsimple_name1:) 	#(287 0 #reduceActionFortype_arguments_opt1:) 	#(237 1 #reduceActionForgoal1:) 	#(108 1 #reduceActionForgoal1:) 	#(111 1 #reduceActionForgoal1:) 	#(122 1 #reduceActionForgoal1:) 	#(247 1 #reduceActionForgoal1:) 	#(263 1 #reduceActionForgoal1:) 	#(295 1 #reduceActionForgoal1:) 	#(139 1 #reduceActionFormodifiers_opt2:) 	#(138 1 #reduceActionFormodifiers1:) 	#(140 1 #reduceActionForgoal1:) 	#(136 1 #reduceActionForgoal1:) 	#(194 1 #reduceActionForgoal1:) 	#(192 1 #reduceActionForgoal1:) 	#(212 1 #reduceActionForgoal1:) 	#(180 1 #reduceActionForgoal1:) 	#(116 1 #reduceActionForgoal1:) 	#(262 1 #reduceActionForassignment_expression2:) 	#(248 1 #reduceActionForgoal1:) 	#(249 1 #reduceActionForgoal1:) 	#(251 1 #reduceActionForgoal1:) 	#(252 1 #reduceActionForgoal1:) 	#(253 1 #reduceActionForgoal1:) 	#(254 1 #reduceActionForgoal1:) 	#(255 1 #reduceActionForgoal1:) 	#(256 1 #reduceActionForgoal1:) 	#(257 1 #reduceActionForgoal1:) 	#(258 1 #reduceActionForgoal1:) 	#(259 1 #reduceActionForgoal1:) 	#(260 1 #reduceActionForgoal1:) 	#(261 1 #reduceActionForgoal1:) 	#(262 1 #reduceActionForgoal1:) 	#(149 1 #reduceActionForgoal1:) 	#(135 0 #reduceActionForstatic_opt1:) 	#(126 0 #reduceActionForannotations1:) 	#(125 1 #reduceActionFormodifiers_opt2:) 	#(128 1 #reduceActionFormodifiers1:) 	#(130 1 #reduceActionForgoal1:) 	#(132 2 #reduceActionForannotations2:) 	#(190 1 #reduceActionFormodifiers_opt2:) 	#(178 1 #reduceActionFormodifiers1:) 	#(265 0 #reduceActionFortype_arguments_opt1:) 	#(234 0 #reduceActionForannotations1:) 	#(117 1 #reduceActionForgoal1:) 	#(114 1 #reduceActionForclass_or_interface_type1:) 	#(226 0 #nil) 	#(232 1 #reduceActionForgoal1:) 	#(227 1 #reduceActionForgoal1:) 	#(214 2 #reduceActionForpreincrement_expression1:) 	#(215 2 #reduceActionForpredecrement_expression1:) 	#(290 2 #reduceActionForsimple_type_name1:) 	#(115 2 #reduceActionForarray_type1:) 	#(119 1 #reduceActionFormodifiers1:) 	#(179 0 #reduceActionForargument_list_opt1:) 	#(138 2 #reduceActionForannotations2:) 	#(292 1 #reduceActionFormodifier11:) 	#(110 1 #reduceActionForgoal1:) 	#(109 1 #reduceActionForgoal1:) 	#(292 1 #reduceActionForgoal1:) 	#(172 2 #reduceActionForannotations2:) 	#(191 2 #reduceActionForlocal_variable_declaration_statement1:) 	#(202 2 #reduceActionForexpression_statement1:) 	#(216 2 #reduceActionForpostincrement_expression1:) 	#(217 2 #reduceActionForpostdecrement_expression1:) 	#(264 1 #reduceActionForgoal1:) 	#(243 0 #reduceActionForannotations1:) 	#(248 2 #reduceActionForunary_expression3:) 	#(248 2 #reduceActionForunary_expression4:) 	#(249 2 #reduceActionForunary_expression_not_plus_minus2:) 	#(249 2 #reduceActionForunary_expression_not_plus_minus3:) 	#(135 1 #reduceActionForstatic_opt2:) 	#(131 1 #reduceActionFortype_declaration3:) 	#(123 3 #reduceActionForcompilation_unit1:) 	#(126 1 #reduceActionFormodifiers_opt2:) 	#(129 1 #reduceActionFormodifiers1:) 	#(131 1 #reduceActionForgoal1:) 	#(128 2 #reduceActionForannotations2:) 	#(178 2 #reduceActionForannotations2:) 	#(156 3 #reduceActionForblock1:) 	#(237 3 #reduceActionForprimary_no_new_array3:) 	#(239 3 #reduceActionForfield_access2:) 	#(246 1 #reduceActionForidentifierName1:) 	#(266 0 #reduceActionForargument_list_opt1:) 	#(141 3 #reduceActionForannotation1:) 	#(210 3 #reduceActionFortry_statement1:) 	#(234 1 #reduceActionFormodifiers_opt2:) 	#(233 1 #reduceActionFormodifiers1:) 	#(211 3 #reduceActionForassert_statement1:) 	#(242 1 #reduceActionFormodifiers1:) 	#(209 3 #reduceActionForthrow_statement1:) 	#(229 1 #reduceActionForgoal1:) 	#(230 1 #reduceActionForstatement_expression_list1:) 	#(226 1 #reduceActionForgoal1:) 	#(205 3 #reduceActionForbreak_statement1:) 	#(206 3 #reduceActionForcontinue_statement1:) 	#(207 3 #reduceActionForreturn_statement1:) 	#(195 3 #reduceActionForlabeled_statement1:) 	#(288 1 #reduceActionFortype_argument1:) 	#(286 1 #reduceActionFortype_arguments1:) 	#(245 2 #reduceActionForempty_dim_expr1:) 	#(237 3 #reduceActionForprimary_no_new_array8:) 	#(119 2 #reduceActionForannotations2:) 	#(241 1 #reduceActionFortype_arguments1:) 	#(179 1 #reduceActionForargument_list_opt2:) 	#(237 3 #reduceActionForprimary_no_new_array11:) 	#(237 3 #reduceActionForprimary_no_new_array12:) 	#(121 3 #reduceActionForqualified_name1:) 	#(142 0 #nil) 	#(144 0 #reduceActionForinterfaces_opt1:) 	#(161 1 #reduceActionForvariable_declarator_id1:) 	#(193 3 #reduceActionForlocal_variable_declaration1:) 	#(159 1 #reduceActionFortype_arguments1:) 	#(160 1 #reduceActionForvariable_declarator1:) 	#(239 3 #reduceActionForfield_access1:) 	#(213 3 #reduceActionForassignment1:) 	#(243 1 #reduceActionFormodifiers_opt2:) 	#(251 3 #reduceActionFormultiplicative_expression2:) 	#(252 3 #reduceActionFormultiplicative_expression2:) 	#(253 3 #reduceActionFormultiplicative_expression2:) 	#(254 3 #reduceActionFormultiplicative_expression2:) 	#(255 3 #reduceActionFormultiplicative_expression2:) 	#(256 3 #reduceActionFormultiplicative_expression2:) 	#(257 3 #reduceActionFormultiplicative_expression2:) 	#(258 3 #reduceActionFormultiplicative_expression2:) 	#(259 3 #reduceActionFormultiplicative_expression2:) 	#(260 3 #reduceActionFormultiplicative_expression2:) 	#(129 2 #reduceActionForannotations2:) 	#(127 4 #reduceActionForpackage_declaration1:) 	#(271 0 #reduceActionForargument_list_opt1:) 	#(268 1 #reduceActionForgoal1:) 	#(266 1 #reduceActionForargument_list_opt2:) 	#(266 1 #reduceActionFortype_arguments1:) 	#(267 1 #reduceActionFortype_arguments1:) 	#(233 2 #reduceActionForannotations2:) 	#(210 4 #reduceActionFortry_statement2:) 	#(238 4 #reduceActionForarray_creation_expression3:) 	#(238 4 #reduceActionForarray_creation_expression1:) 	#(242 2 #reduceActionForannotations2:) 	#(288 2 #reduceActionFortype_argument2:) 	#(287 3 #reduceActionFortype_arguments_opt2:) 	#(291 4 #reduceActionForqualified_type_name1:) 	#(240 4 #reduceActionForarray_access1:) 	#(218 4 #reduceActionFormethod_invocation1:) 	#(143 0 #reduceActionForsuper_opt1:) 	#(144 1 #reduceActionForinterfaces_opt2:) 	#(181 0 #reduceActionForinterfaces_opt1:) 	#(250 4 #reduceActionForcast_expression2:) 	#(133 4 #reduceActionForsingle_type_import_declaration1:) 	#(203 5 #reduceActionForswitch_statement1:) 	#(208 5 #reduceActionForsynchronized_statement1:) 	#(196 5 #reduceActionForif_then_statement1:) 	#(198 5 #reduceActionForwhile_statement1:) 	#(273 1 #reduceActionFortype_arguments1:) 	#(272 0 #reduceActionForstatic_opt1:) 	#(271 1 #reduceActionForargument_list_opt2:) 	#(265 3 #reduceActionFortype_arguments_opt2:) 	#(235 2 #reduceActionForfinally1:) 	#(211 5 #reduceActionForassert_statement2:) 	#(244 3 #reduceActionFordim_expr1:) 	#(163 2 #reduceActionForarray_initializer4:) 	#(162 1 #reduceActionForgoal1:) 	#(189 1 #reduceActionFortype_arguments1:) 	#(219 5 #reduceActionForclass_instance_creation_expression1:) 	#(230 3 #reduceActionForstatement_expression_list2:) 	#(289 2 #reduceActionFortype_argument_type1:) 	#(286 3 #reduceActionFortype_arguments2:) 	#(241 3 #reduceActionFortype_arguments2:) 	#(239 5 #reduceActionForfield_access3:) 	#(284 0 #reduceActionForinterfaces_opt1:) 	#(282 1 #reduceActionFortype_arguments1:) 	#(143 1 #reduceActionForsuper_opt2:) 	#(118 1 #reduceActionForgoal1:) 	#(148 1 #reduceActionFortype_arguments1:) 	#(297 2 #reduceActionForinterfaces1:) 	#(275 0 #reduceActionForargument_list_opt1:) 	#(146 5 #reduceActionForenum_declaration1:) 	#(181 1 #reduceActionForinterfaces_opt2:) 	#(159 3 #reduceActionFortype_arguments2:) 	#(160 3 #reduceActionForvariable_declarator2:) 	#(161 3 #reduceActionForvariable_declarator_id2:) 	#(250 5 #reduceActionForcast_expression1:) 	#(261 5 #reduceActionForconditional_expression2:) 	#(220 2 #reduceActionForswitch_block4:) 	#(221 1 #reduceActionFormodifiers1:) 	#(222 1 #reduceActionFormodifiers1:) 	#(218 6 #reduceActionFormethod_invocation3:) 	#(272 1 #reduceActionForstatic_opt2:) 	#(269 3 #reduceActionForelementValuePair1:) 	#(267 3 #reduceActionFortype_arguments2:) 	#(163 3 #reduceActionForarray_initializer3:) 	#(163 3 #reduceActionForarray_initializer2:) 	#(150 0 #reduceActionForannotations1:) 	#(219 6 #reduceActionForclass_instance_creation_expression2:) 	#(228 0 #nil) 	#(283 2 #reduceActionFortype_parameter1:) 	#(142 3 #reduceActionFortype_parameters_opt2:) 	#(147 2 #reduceActionFortype_argument_type1:) 	#(275 1 #reduceActionForargument_list_opt2:) 	#(277 1 #reduceActionFortype_arguments1:) 	#(183 2 #reduceActionForextends_interfaces1:) 	#(184 0 #reduceActionForannotations1:) 	#(137 6 #reduceActionForinterface_declaration1:) 	#(218 6 #reduceActionFormethod_invocation2:) 	#(134 6 #reduceActionFortype_import_on_demand_declaration1:) 	#(225 1 #reduceActionForgoal1:) 	#(224 2 #reduceActionForswitch_label2:) 	#(220 3 #reduceActionForswitch_block2:) 	#(221 2 #reduceActionForannotations2:) 	#(220 3 #reduceActionForswitch_block3:) 	#(223 2 #reduceActionForswitch_block_statement_group1:) 	#(222 2 #reduceActionForannotations2:) 	#(197 7 #reduceActionForif_then_else_statement1:) 	#(204 7 #reduceActionFordo_statement1:) 	#(270 4 #reduceActionForelementValueArrayInitializer1:) 	#(273 3 #reduceActionFortype_arguments2:) 	#(236 5 #reduceActionForcatch_clause1:) 	#(171 3 #reduceActionForformal_parameter1:) 	#(163 4 #reduceActionForarray_initializer1:) 	#(189 3 #reduceActionFortype_arguments2:) 	#(153 1 #reduceActionFortype_declaration3:) 	#(153 1 #reduceActionForgoal1:) 	#(150 1 #reduceActionFormodifiers_opt2:) 	#(151 1 #reduceActionFormodifiers1:) 	#(152 1 #reduceActionForgoal1:) 	#(231 1 #reduceActionForgoal1:) 	#(228 1 #reduceActionForgoal1:) 	#(285 1 #reduceActionFortype_arguments1:) 	#(284 2 #reduceActionForinterfaces1:) 	#(282 3 #reduceActionFortype_arguments2:) 	#(136 7 #reduceActionForclass_declaration1:) 	#(148 3 #reduceActionFortype_arguments2:) 	#(279 0 #reduceActionFortype_arguments_opt1:) 	#(276 0 #reduceActionForenum_body_declarations_opt1:) 	#(186 1 #reduceActionForgoal1:) 	#(187 1 #reduceActionForgoal1:) 	#(184 1 #reduceActionFormodifiers_opt2:) 	#(185 1 #reduceActionFormodifiers1:) 	#(183 3 #reduceActionForextends_interfaces2:) 	#(219 7 #reduceActionForclass_instance_creation_expression3:) 	#(224 3 #reduceActionForswitch_label1:) 	#(220 4 #reduceActionForswitch_block1:) 	#(154 2 #reduceActionForstatic_initializer1:) 	#(167 0 #nil) 	#(145 3 #reduceActionForclass_body1:) 	#(151 2 #reduceActionForannotations2:) 	#(165 1 #reduceActionFormethod_body2:) 	#(165 1 #reduceActionForgoal1:) 	#(158 2 #reduceActionFormethod_declaration1:) 	#(218 8 #reduceActionFormethod_invocation4:) 	#(280 0 #reduceActionForclass_body_opt1:) 	#(276 1 #reduceActionForenum_body_declarations_opt2:) 	#(277 3 #reduceActionFortype_arguments2:) 	#(188 2 #reduceActionForabstract_method_declaration1:) 	#(182 3 #reduceActionForclass_body1:) 	#(185 2 #reduceActionForannotations2:) 	#(219 8 #reduceActionForclass_instance_creation_expression4:) 	#(169 0 #reduceActionForargument_list_opt1:) 	#(167 1 #reduceActionForgoal1:) 	#(200 9 #reduceActionForforeach_statement1:) 	#(199 9 #reduceActionForfor_statement1:) 	#(285 3 #reduceActionFortype_arguments2:) 	#(280 1 #reduceActionForclass_body_opt2:) 	#(278 4 #reduceActionForenum_constant1:) 	#(281 2 #reduceActionForenum_body_declarations1:) 	#(274 5 #reduceActionForenum_body1:) 	#(157 4 #reduceActionForfield_declaration1:) 	#(164 4 #reduceActionFormethod_header1:) 	#(169 1 #reduceActionForargument_list_opt2:) 	#(170 1 #reduceActionFortype_arguments1:) 	#(174 1 #reduceActionFortype_arguments1:) 	#(173 2 #reduceActionForthrows1:) 	#(155 4 #reduceActionForconstructor_declaration1:) 	#(279 3 #reduceActionFortype_arguments_opt2:) 	#(166 3 #reduceActionFormethod_declarator2:) 	#(175 4 #reduceActionForconstructor_declarator1:) 	#(176 2 #reduceActionForconstructor_body4:) 	#(166 4 #reduceActionFormethod_declarator1:) 	#(170 3 #reduceActionFortype_arguments2:) 	#(174 3 #reduceActionFortype_arguments2:) 	#(176 3 #reduceActionForconstructor_body2:) 	#(176 3 #reduceActionForconstructor_body3:) 	#(176 4 #reduceActionForconstructor_body1:) 	#(177 5 #reduceActionForexplicit_constructor_invocation1:) 	#(177 5 #reduceActionForexplicit_constructor_invocation2:) 	#(177 7 #reduceActionForexplicit_constructor_invocation3:) 	#(177 7 #reduceActionForexplicit_constructor_invocation4:)	).</body><body package="SmaCC Java" selector="symbolTypes">symbolTypes	^#(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #JavaProgramFileNode #JavaLiteralNode #JavaPrimitiveTypeNode #JavaTypeNode #JavaTypeNode #JavaPrimitiveTypeNode #JavaPrimitiveTypeNode #JavaPrimitiveTypeNode #JavaClassTypeNode #JavaArrayTypeNode #JavaProgramNode #JavaClassTypeNode #JavaClassTypeNode #OrderedCollection #JavaNameNode #JavaQualifiedNameNode #JavaNameNode #JavaProgramFileNode #JavaPackageDeclarationNode #OrderedCollection #OrderedCollection #JavaPackageDeclarationNode #OrderedCollection #OrderedCollection #JavaSingleTypeImportDeclarationNode #JavaProgramNode #OrderedCollection #JavaSingleTypeImportDeclarationNode #JavaTypeImportOnDemandDeclarationNode #OrderedCollection #JavaProgramNode #JavaInterfaceNode #OrderedCollection #OrderedCollection #JavaProgramNode #JavaAnnotationNode #JavaTypeParametersNode #OrderedCollection #OrderedCollection #OrderedCollection #JavaEnumDeclarationNode #OrderedCollection #OrderedCollection #JavaExpressionNode #OrderedCollection #OrderedCollection #JavaProgramNode #JavaProgramNode #JavaStaticInitializerNode #JavaConstructorDeclarationNode #JavaBlockNode #JavaFieldDeclarationNode #JavaMethodDeclarationNode #OrderedCollection #JavaVariableDeclarationNode #JavaProgramNode #JavaProgramNode #JavaArrayInitializerNode #OrderedCollection #JavaProgramNode #JavaProgramNode #JavaThrowsNode #JavaVoidTypeNode #OrderedCollection #OrderedCollection #JavaParameterNode #OrderedCollection #JavaThrowsNode #OrderedCollection #OrderedCollection #JavaConstructorBodyNode #JavaProgramNode #OrderedCollection #OrderedCollection #JavaExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #JavaProgramNode #JavaFieldDeclarationNode #JavaAbstractMethodDeclarationNode #OrderedCollection #OrderedCollection #JavaLocalVariableDeclarationStatementNode #JavaStatementNode #JavaLocalVariableDeclarationNode #JavaStatementNode #JavaLabeledStatementNode #JavaIfStatementNode #JavaIfElseStatementNode #JavaWhileStatementNode #JavaForStatementNode #JavaForEachStatementNode #JavaEmptyStatementNode #JavaExpressionStatementNode #JavaSwitchStatementNode #JavaDoWhileStatementNode #JavaBreakStatementNode #JavaContinueStatementNode #JavaReturnStatementNode #JavaSynchronizedStatementNode #JavaThrowStatementNode #JavaTryStatementNode #JavaAssertStatementNode #JavaExpressionNode #JavaAssignmentNode #JavaPreIncrementExpressionNode #JavaPreDecrementExpressionNode #JavaPostIncrementExpressionNode #JavaPostDecrementExpressionNode #JavaMethodInvocationNode #JavaNewNode #JavaSwitchBlockNode #OrderedCollection #OrderedCollection #JavaSwitchBlockStatementGroupNode #JavaProgramNode #JavaExpressionNode #JavaProgramNode #JavaExpressionNode #JavaStatementExpressionListNode #JavaProgramNode #JavaStatementExpressionListNode #JavaStatementExpressionListNode #SmaCCToken #OrderedCollection #OrderedCollection #JavaFinallyClauseNode #JavaCatchClauseNode #JavaExpressionNode #JavaNewArrayNode #JavaFieldAccessNode #JavaArrayAccessNode #OrderedCollection #OrderedCollection #OrderedCollection #JavaDimensionExpressionNode #JavaEmptyDimensionListNode #JavaIdentifierNameNode #JavaExpressionNode #JavaExpressionNode #JavaExpressionNode #JavaCastExpressionNode #JavaExpressionNode #JavaExpressionNode #JavaExpressionNode #JavaExpressionNode #JavaExpressionNode #JavaExpressionNode #JavaExpressionNode #JavaExpressionNode #JavaExpressionNode #JavaExpressionNode #JavaExpressionNode #JavaExpressionNode #JavaExpressionNode #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #JavaProgramNode #JavaElementValuePairNode #JavaElementArrayInitializerNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #JavaEnumConstantNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #JavaTypeParameterNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #JavaTypeArgumentNode #OrderedCollection #JavaTypeNameNode #JavaQualifiedTypeNameNode #JavaProgramNode #SmaCCToken #SmaCCToken #JavaProgramNode #JavaProgramFileNode #OrderedCollection)</body><body package="SmaCC Java" selector="transitionTable">transitionTable^#(#[1 0 6 0 8 0 6 0 9 0 6 0 14 0 6 0 18 0 6 0 19 0 6 0 24 0 6 0 31 0 10 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 42 0 6 0 44 0 6 0 46 0 6 0 47 0 7 0 65 0 21 0 123 0 25 0 124 0 29 0 127 0 33 0 132 0 6 1 37 0 37 1 40] #[1 0 6 0 8 0 6 0 9 0 6 0 14 0 6 0 18 0 6 0 19 0 6 0 24 0 6 0 31 0 10 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 42 0 6 0 44 0 6 0 46 0 6 0 47 0 7 0 65 0 21 0 123 0 25 0 124 0 29 0 127 0 33 0 132 0 6 1 37 0 41 1 40] #[1 0 45 0 1 0 49 0 7 0 53 0 8 0 14 0 9 0 57 0 12 0 14 0 14 0 61 0 15 0 14 0 18 0 65 0 19 0 69 0 22 0 73 0 23 0 77 0 24 0 11 0 25 0 15 0 26 0 19 0 27 0 23 0 28 0 27 0 30 0 101 0 31 0 31 0 33 0 35 0 34 0 39 0 35 0 117 0 37 0 121 0 38 0 43 0 39 0 129 0 40 0 133 0 41 0 137 0 42 0 141 0 43 0 145 0 46 0 149 0 47 0 153 0 48 0 157 0 59 0 47 0 65 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 51 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 17 0 136 1 21 0 137 1 25 0 138 1 29 0 139 1 33 0 140 1 37 0 141 1 41 0 146 1 45 0 156 1 49 0 168 1 53 0 172 1 57 0 180 1 61 0 191 1 65 0 192 1 69 0 193 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35 1 209 1 39] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 237 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 0 22 1 37] #[1 0 26 0 8 0 26 0 9 0 26 0 14 0 26 0 18 0 26 0 19 0 26 0 24 0 26 0 31 0 26 0 37 0 26 0 38 0 26 0 39 0 26 0 40 0 26 0 41 0 26 0 42 2 77 0 44 0 26 0 46 0 26 0 47 0 26 0 65 2 81 0 125 2 85 0 128 2 89 0 130 2 93 0 133 2 97 0 134 0 26 1 37] #[0 0 30 0 8 0 9 0 14 0 18 0 19 0 24 0 31 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 46 0 47 0 65 1 37] #[1 2 101 0 36 0 161 0 65 2 105 0 141] #[0 0 0 1 37] #[0 0 0 1 37] #[1 0 45 0 1 0 34 0 2 0 49 0 7 0 53 0 8 0 14 0 9 0 57 0 12 0 14 0 14 0 61 0 15 0 14 0 18 0 65 0 19 0 69 0 22 0 73 0 23 0 77 0 24 0 11 0 25 0 15 0 26 0 19 0 27 0 23 0 28 0 27 0 30 0 101 0 31 0 31 0 33 0 35 0 34 0 39 0 35 0 117 0 37 0 121 0 38 0 43 0 39 0 129 0 40 0 133 0 41 0 137 0 42 0 141 0 43 0 145 0 46 0 149 0 47 0 153 0 48 0 157 0 59 0 47 0 65 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 51 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 17 0 136 1 21 0 137 1 25 0 138 1 29 0 139 1 33 0 140 1 37 0 141 1 41 0 146 1 45 0 156 1 49 0 168 1 53 0 172 2 109 0 178 1 57 0 180 2 113 0 190 1 61 0 191 1 65 0 192 1 69 0 193 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35 2 117 1 39] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 2 121 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 0 38 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 0 42 0 29 0 102] #[0 2 125 0 7] #[0 0 38 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 0 46 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 2 129 0 29] #[0 0 38 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 0 50 0 4 0 6 0 20 0 29 0 54 0 74 0 102] #[0 0 54 0 4 0 6 0 20 0 29 0 54 0 74 0 102] #[0 0 58 0 4 0 6 0 20 0 29 0 54 0 74 0 102] #[0 0 62 0 4 0 6 0 20 0 29 0 54 0 74 0 102] #[0 0 66 0 4 0 6 0 20 0 29 0 54 0 74 0 102] #[0 0 70 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 74 0 4 0 6 0 20 0 29 0 54 0 74 0 102] #[0 0 78 0 4 0 6 0 20 0 29 0 54 0 74 0 102] #[0 0 82 0 4 0 6 0 20 0 29 0 54 0 74 0 102] #[0 0 38 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 0 38 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 0 38 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 0 38 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[1 2 133 0 7 0 38 0 8 0 38 0 9 0 38 0 14 0 38 0 18 0 38 0 19 0 38 0 24 0 38 0 37 0 38 0 38 0 38 0 39 0 38 0 40 0 38 0 41 0 38 0 42 0 38 0 46 0 38 0 47 0 38 0 65] #[0 0 38 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 2 137 0 7] #[0 0 38 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 0 38 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 2 141 0 7] #[1 0 45 0 1 0 49 0 7 0 57 0 12 0 61 0 15 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 101 0 31 0 105 0 33 0 109 0 34 0 113 0 35 2 145 0 41 0 141 0 43 0 153 0 48 0 157 0 59 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 229 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 45 0 156 1 49 0 168 1 57 0 180 2 149 0 192 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35] #[1 2 153 0 102 1 5 0 120 1 9 0 121 2 157 0 122] #[1 0 45 0 1 2 161 0 156] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 2 165 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 2 169 0 102 2 173 0 108 0 241 0 111 0 245 0 112 0 249 0 113 2 177 0 114 2 181 0 116 2 185 0 117 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 2 189 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 2 193 0 7] #[1 0 86 0 31 2 197 0 102 2 201 0 232] #[1 0 86 0 31 2 197 0 102 2 205 0 232] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 90 0 31 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 2 209 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 2 213 0 227 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 229 0 248 2 21 0 249 2 25 0 250 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 233 0 248 2 21 0 249 2 25 0 250 1 201 1 34 1 205 1 35] #[0 0 94 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 0 98 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 0 102 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 0 106 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 0 110 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 0 114 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[1 0 118 0 3 0 55 0 4 0 118 0 7 2 237 0 13 0 55 0 29 0 118 0 55 0 118 0 60 0 118 0 61 0 118 0 62 0 118 0 63 0 118 0 64 0 118 0 66 0 118 0 68 0 118 0 69 0 118 0 70 0 118 0 71 0 118 0 84 0 118 0 89 2 241 0 90 2 245 1 31] #[0 0 126 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[1 2 249 0 4 2 253 0 29 3 1 0 119 3 5 0 245] #[0 0 130 0 4 0 6 0 20 0 29 0 54 0 74 0 102] #[0 0 134 0 4 0 6 0 20 0 29 0 54 0 74 0 102] #[0 0 134 0 4 0 6 0 20 0 29 0 54 0 74 0 102] #[0 3 9 0 29] #[1 2 249 0 4 3 13 0 29 3 17 0 119 3 5 0 245] #[0 0 138 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 12 0 13 0 14 0 18 0 19 0 20 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 45 0 46 0 47 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 0 102 1 37] #[0 0 138 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 12 0 13 0 14 0 18 0 19 0 20 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 45 0 46 0 47 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 0 102 1 37] #[1 0 142 0 2 0 146 0 3 3 21 0 4 0 142 0 5 0 142 0 6 3 25 0 7 0 142 0 13 0 142 0 20 3 29 0 29 0 142 0 31 0 142 0 45 0 142 0 49 0 142 0 50 0 142 0 51 0 142 0 52 0 142 0 53 0 142 0 54 0 146 0 55 0 142 0 56 0 142 0 57 0 142 0 58 0 146 0 60 0 146 0 61 0 146 0 62 0 146 0 63 0 146 0 64 0 146 0 66 0 142 0 67 0 146 0 68 0 146 0 69 0 146 0 70 0 146 0 71 0 142 0 72 0 142 0 74 0 142 0 84 0 142 0 85 0 142 0 86 0 142 0 87 0 142 0 88 0 142 0 89 0 142 0 90 0 142 0 91 0 142 0 92 0 142 0 95 0 142 1 37] #[0 0 150 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 150 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 0 53 0 8 0 154 0 9 0 154 0 12 0 154 0 14 0 154 0 18 0 65 0 19 0 77 0 24 0 154 0 25 0 154 0 26 0 154 0 27 0 154 0 28 0 154 0 30 0 154 0 33 0 154 0 34 0 154 0 35 0 117 0 37 0 121 0 38 0 125 0 39 0 129 0 40 3 33 0 41 0 137 0 42 0 145 0 46 0 149 0 47 0 161 0 65 0 154 0 102 3 37 0 140 1 37 0 141] #[1 3 41 0 9 3 45 0 14 3 49 0 18] #[0 0 158 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 0 162 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 0 166 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 170 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 3 53 0 29] #[1 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 3 57 0 39 0 161 0 65 2 169 0 102 3 61 0 108 3 65 0 109 3 69 0 110 0 241 0 111 0 245 0 112 0 249 0 113 3 73 0 114 3 77 0 115 3 81 0 116 3 85 0 141 1 201 1 34 1 205 1 35 3 89 1 36] #[1 0 142 0 2 0 142 0 5 0 142 0 6 0 142 0 13 0 142 0 20 3 93 0 29 0 142 0 31 0 142 0 45 0 142 0 49 0 142 0 50 0 142 0 51 0 142 0 52 0 142 0 53 0 142 0 54 0 142 0 56 0 142 0 57 0 142 0 58 0 142 0 67 0 142 0 72 0 142 0 74 0 142 0 84 0 142 0 85 0 142 0 86 0 142 0 87 0 142 0 88 0 142 0 89 0 142 0 90 0 142 0 91 0 142 0 92 0 142 0 95 0 142 1 37] #[0 0 150 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 150 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 3 97 0 31] #[0 0 174 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 174 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 174 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 174 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 174 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 174 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 174 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 170 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 170 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 170 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 170 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 170 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 170 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 170 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 170 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 170 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 170 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 0 170 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 3 101 0 31] #[0 0 178 0 6 0 20 0 31] #[0 0 178 0 6 0 20 0 31] #[0 0 178 0 6 0 20 0 31] #[1 0 178 0 6 0 178 0 20 0 178 0 31 0 142 0 84 0 142 0 89] #[1 0 178 0 6 0 178 0 20 0 178 0 31 0 142 0 84 0 142 0 89] #[1 0 126 0 4 0 178 0 6 0 178 0 20 0 126 0 29 0 178 0 31 0 126 0 84 0 126 0 89] #[1 0 126 0 4 0 178 0 6 0 178 0 20 0 126 0 29 0 178 0 31 0 126 0 84 0 126 0 89] #[1 0 182 0 2 3 105 0 4 0 182 0 5 0 182 0 6 0 182 0 13 0 182 0 20 0 182 0 29 0 182 0 31 0 182 0 45 0 182 0 49 0 182 0 50 0 182 0 51 0 182 0 52 0 182 0 53 0 182 0 54 0 182 0 56 0 182 0 57 0 182 0 58 0 182 0 67 0 182 0 72 0 182 0 74 0 182 0 84 0 182 0 85 0 182 0 86 0 182 0 87 0 182 0 88 0 182 0 89 0 182 0 90 0 182 0 91 0 182 0 92 0 182 0 95 0 182 1 37] #[0 0 182 0 2 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[1 0 126 0 2 0 146 0 3 0 126 0 4 0 126 0 5 0 126 0 6 0 126 0 13 0 126 0 20 0 126 0 29 0 126 0 31 0 126 0 45 0 126 0 49 0 126 0 50 0 126 0 51 0 126 0 52 0 126 0 53 0 126 0 54 0 146 0 55 0 126 0 56 0 126 0 57 0 126 0 58 0 146 0 60 0 146 0 61 0 146 0 62 0 146 0 63 0 146 0 64 0 146 0 66 0 126 0 67 0 146 0 68 0 146 0 69 0 146 0 70 0 146 0 71 0 126 0 72 0 126 0 74 0 126 0 84 0 126 0 85 0 126 0 86 0 126 0 87 0 126 0 88 0 126 0 89 0 126 0 90 0 126 0 91 0 126 0 92 0 126 0 95 0 126 1 37] #[1 0 126 0 2 0 146 0 3 0 126 0 4 0 126 0 5 0 126 0 6 0 126 0 13 0 126 0 20 0 126 0 29 0 126 0 31 0 126 0 45 0 126 0 49 0 126 0 50 0 126 0 51 0 126 0 52 0 126 0 53 0 126 0 54 0 146 0 55 0 126 0 56 0 126 0 57 0 126 0 58 0 146 0 60 0 146 0 61 0 146 0 62 0 146 0 63 0 146 0 64 0 146 0 66 0 126 0 67 0 146 0 68 0 146 0 69 0 146 0 70 0 146 0 71 0 126 0 72 0 126 0 74 0 126 0 84 0 126 0 85 0 126 0 86 0 126 0 87 0 126 0 88 0 126 0 89 0 126 0 90 0 126 0 91 0 126 0 92 0 126 0 95 0 126 1 37] #[1 3 109 0 84 3 113 0 89] #[1 3 117 0 3 3 121 0 55 3 125 0 60 3 129 0 61 3 133 0 62 3 137 0 63 3 141 0 64 3 145 0 66 3 149 0 68 3 153 0 69 3 157 0 70 3 161 0 71 3 165 1 8] #[0 0 186 0 1 0 2 0 4 0 5 0 6 0 7 0 11 0 13 0 20 0 29 0 31 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 90 0 102 1 37] #[0 0 186 0 1 0 2 0 4 0 5 0 6 0 7 0 11 0 13 0 20 0 29 0 31 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 90 0 102 1 37] #[0 0 0 1 37] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 3 169 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 3 173 0 122 3 177 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 3 181 0 248 2 21 0 249 2 25 0 250 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 3 185 0 248 2 21 0 249 2 25 0 250 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 3 189 0 248 2 21 0 249 2 25 0 250 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 3 193 0 248 2 21 0 249 2 25 0 250 1 201 1 34 1 205 1 35] #[1 0 118 0 2 0 118 0 3 0 55 0 4 0 118 0 5 0 118 0 6 0 118 0 7 0 118 0 13 0 118 0 20 0 55 0 29 0 118 0 31 0 118 0 45 0 118 0 49 0 118 0 50 0 118 0 51 0 118 0 52 0 118 0 53 0 118 0 54 0 118 0 55 0 118 0 56 0 118 0 57 0 118 0 58 0 118 0 60 0 118 0 61 0 118 0 62 0 118 0 63 0 118 0 64 0 118 0 66 0 118 0 67 0 118 0 68 0 118 0 69 0 118 0 70 0 118 0 71 0 118 0 72 0 118 0 74 0 118 0 84 0 118 0 85 0 118 0 86 0 118 0 87 0 118 0 88 0 118 0 89 0 59 0 90 0 118 0 91 0 118 0 92 0 118 0 95 0 122 0 102 2 245 1 31 0 118 1 37] #[0 0 0 1 37] #[0 0 190 0 2 0 5 0 6 0 13 0 20 0 31 1 37] #[0 0 194 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[0 0 194 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[0 0 142 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 0 142 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 0 126 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 0 126 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[1 0 198 0 2 0 198 0 5 0 198 0 6 0 198 0 13 0 198 0 20 0 198 0 31 0 198 0 45 0 198 0 49 0 198 0 50 0 198 0 51 0 198 0 52 0 198 0 53 0 198 0 54 0 198 0 56 0 198 0 57 0 198 0 58 0 198 0 67 0 198 0 72 0 198 0 74 3 109 0 84 0 198 0 85 0 198 0 86 0 198 0 87 0 198 0 88 3 113 0 89 0 198 0 90 0 198 0 91 0 198 0 92 0 198 0 95 0 198 1 37] #[0 0 202 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[0 0 194 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[0 0 198 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[1 0 206 0 2 0 206 0 5 0 206 0 6 0 206 0 13 0 206 0 20 0 206 0 31 3 197 0 45 0 206 0 49 0 206 0 50 0 206 0 51 0 206 0 52 0 206 0 53 0 206 0 54 0 206 0 56 0 206 0 57 0 206 0 58 0 206 0 67 0 206 0 72 0 206 0 74 3 201 0 85 0 206 0 86 0 206 0 87 0 206 0 88 0 206 0 90 0 206 0 91 0 206 0 92 3 205 0 95 0 206 1 37] #[1 0 210 0 2 0 210 0 5 0 210 0 6 0 210 0 13 0 210 0 20 0 210 0 31 0 210 0 49 0 210 0 50 0 210 0 51 0 210 0 52 0 210 0 53 0 210 0 54 0 210 0 56 0 210 0 57 0 210 0 58 0 210 0 67 0 210 0 72 0 210 0 74 0 210 0 86 0 210 0 87 0 210 0 88 0 210 0 90 3 209 0 91 3 213 0 92 0 210 1 37] #[1 0 214 0 2 0 214 0 5 0 214 0 6 0 214 0 13 0 214 0 20 0 214 0 31 0 214 0 49 0 214 0 50 0 214 0 51 0 214 0 52 0 214 0 53 0 214 0 54 0 214 0 56 0 214 0 57 0 214 0 58 0 214 0 67 0 214 0 72 0 214 0 74 3 217 0 86 3 221 0 87 3 225 0 88 0 214 0 90 0 214 1 37] #[1 0 218 0 2 0 218 0 5 0 218 0 6 0 218 0 13 0 218 0 20 0 218 0 31 0 218 0 49 0 218 0 50 0 218 0 51 0 218 0 52 0 218 0 53 0 218 0 54 3 229 0 56 3 233 0 57 0 218 0 58 3 237 0 67 0 218 0 72 3 241 0 74 3 245 0 90 0 218 1 37] #[1 0 222 0 2 0 222 0 5 0 222 0 6 0 222 0 13 0 222 0 20 0 222 0 31 0 222 0 49 0 222 0 50 0 222 0 51 0 222 0 52 0 222 0 53 0 222 0 54 3 249 0 58 3 253 0 72 0 222 1 37] #[1 0 226 0 2 0 226 0 5 0 226 0 6 0 226 0 13 0 226 0 20 0 226 0 31 0 226 0 49 0 226 0 50 0 226 0 51 0 226 0 52 0 226 0 53 4 1 0 54 0 226 1 37] #[1 0 230 0 2 0 230 0 5 0 230 0 6 0 230 0 13 0 230 0 20 0 230 0 31 4 5 0 49 0 230 0 50 0 230 0 51 0 230 0 52 0 230 0 53 0 230 1 37] #[1 0 234 0 2 0 234 0 5 0 234 0 6 0 234 0 13 0 234 0 20 0 234 0 31 4 9 0 50 0 234 0 51 0 234 0 52 0 234 0 53 0 234 1 37] #[1 0 238 0 2 0 238 0 5 0 238 0 6 0 238 0 13 0 238 0 20 0 238 0 31 4 13 0 51 0 238 0 52 0 238 0 53 0 238 1 37] #[1 0 242 0 2 0 242 0 5 0 242 0 6 0 242 0 13 0 242 0 20 0 242 0 31 4 17 0 52 4 21 0 53 0 242 1 37] #[0 0 246 0 2 0 5 0 6 0 13 0 20 0 31 1 37] #[0 0 250 0 2 0 5 0 6 0 13 0 20 0 31 1 37] #[1 4 25 0 37 0 254 0 102 4 29 0 135] #[1 0 53 0 8 0 14 0 9 0 14 0 14 0 14 0 18 0 65 0 19 0 77 0 24 4 33 0 31 0 117 0 37 0 121 0 38 0 125 0 39 0 129 0 40 3 33 0 41 0 137 0 42 0 145 0 46 0 149 0 47 0 161 0 65 4 37 0 126 4 41 0 129 4 45 0 131 4 49 0 136 4 53 0 137 1 25 0 138 1 29 0 139 1 33 0 140 1 37 0 141 1 41 0 146 1 2 1 37] #[1 1 6 0 8 1 6 0 9 1 6 0 14 1 6 0 18 1 6 0 19 1 6 0 24 1 6 0 31 1 6 0 37 1 6 0 38 1 6 0 39 1 6 0 40 1 6 0 41 1 6 0 42 2 77 0 44 1 6 0 46 1 6 0 47 1 6 0 65 4 57 0 130 2 93 0 133 2 97 0 134 1 6 1 37] #[0 1 10 0 8 0 9 0 14 0 18 0 19 0 24 0 31 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 46 0 47 0 65 1 37] #[0 1 14 0 8 0 9 0 14 0 18 0 19 0 24 0 31 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 46 0 47 0 65 1 37] #[0 1 14 0 8 0 9 0 14 0 18 0 19 0 24 0 31 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 46 0 47 0 65 1 37] #[1 2 153 0 102 1 5 0 120 1 9 0 121 4 61 0 122] #[0 1 18 0 36 0 65 0 102] #[1 0 45 0 1 1 22 0 2 0 49 0 7 0 53 0 8 0 14 0 9 0 57 0 12 0 14 0 14 0 61 0 15 0 14 0 18 0 65 0 19 0 69 0 22 0 73 0 23 0 77 0 24 0 11 0 25 0 15 0 26 0 19 0 27 0 23 0 28 0 27 0 30 0 101 0 31 0 31 0 33 0 35 0 34 0 39 0 35 0 117 0 37 0 121 0 38 0 43 0 39 0 129 0 40 0 133 0 41 0 137 0 42 0 141 0 43 0 145 0 46 0 149 0 47 0 153 0 48 0 157 0 59 0 47 0 65 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 51 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 17 0 136 1 21 0 137 1 25 0 138 1 29 0 139 1 33 0 140 1 37 0 141 1 41 0 146 1 45 0 156 1 49 0 168 1 53 0 172 1 57 0 180 1 61 0 191 1 65 0 192 1 69 0 193 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35 4 65 1 39] #[0 4 69 0 2] #[0 1 26 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 4 73 0 20] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 77 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 4 81 0 102 4 85 0 246] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 89 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 93 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 97 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 2 133 0 7] #[0 4 101 0 48] #[0 0 118 0 2 0 6 0 7 0 8 0 9 0 12 0 14 0 18 0 19 0 20 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[1 1 30 0 2 1 30 0 6 4 105 0 7 1 30 0 8 1 30 0 9 1 30 0 12 1 30 0 14 1 30 0 18 1 30 0 19 1 30 0 20 1 30 0 24 1 30 0 25 1 30 0 26 1 30 0 27 1 30 0 28 4 109 0 29 1 30 0 30 1 30 0 33 1 30 0 34 1 30 0 35 1 30 0 36 1 30 0 37 1 30 0 38 1 30 0 39 1 30 0 40 1 30 0 41 1 30 0 42 1 30 0 46 1 30 0 47 1 30 0 65 1 30 0 102 4 113 1 9] #[1 1 34 0 75 4 117 0 79 4 121 0 233 4 125 0 234 4 129 0 236] #[1 4 133 0 13 4 137 0 31] #[1 0 122 0 1 0 122 0 2 0 122 0 4 0 122 0 5 0 122 0 6 0 122 0 7 0 122 0 11 0 122 0 13 0 122 0 20 0 122 0 29 0 122 0 31 0 122 0 49 0 122 0 50 0 122 0 51 0 122 0 52 0 122 0 53 0 122 0 54 0 122 0 56 0 122 0 57 0 122 0 58 0 122 0 67 0 122 0 72 0 122 0 74 0 63 0 90 0 122 0 102 2 245 1 31 0 122 1 37] #[1 4 141 0 4 4 145 0 119 4 149 0 242 4 153 0 244 3 5 0 245] #[1 4 141 0 4 1 38 0 7 4 157 0 119 4 161 0 242 4 153 0 244 3 5 0 245] #[1 1 42 0 1 1 42 0 4 1 42 0 6 1 42 0 7 1 42 0 11 3 13 0 29 1 42 0 31] #[0 4 165 0 7] #[0 4 169 0 31] #[1 0 49 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 11 0 25 0 15 0 26 0 19 0 27 0 23 0 28 0 27 0 30 1 46 0 31 0 31 0 33 0 35 0 34 0 39 0 35 0 18 0 39 0 18 0 65 0 173 0 77 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 67 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 49 0 168 4 173 0 172 1 57 0 180 4 177 0 193 4 181 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 4 185 0 226 4 189 0 229 4 193 0 230 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35] #[0 1 50 0 31] #[0 4 197 0 31] #[0 4 201 0 31] #[0 1 54 0 31] #[0 4 205 0 31] #[1 0 142 0 2 3 21 0 4 0 142 0 5 0 142 0 6 3 25 0 7 0 142 0 13 0 142 0 20 3 29 0 29 0 142 0 31 0 142 0 45 0 142 0 49 0 142 0 50 0 142 0 51 0 142 0 52 0 142 0 53 0 142 0 54 0 142 0 56 0 142 0 57 0 142 0 58 0 142 0 67 0 142 0 72 0 142 0 74 0 142 0 84 0 142 0 85 0 142 0 86 0 142 0 87 0 142 0 88 0 142 0 89 0 142 0 90 0 142 0 91 0 142 0 92 0 142 0 95 0 142 1 37] #[0 0 126 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 0 126 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 1 58 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[0 1 62 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[1 0 45 0 1 0 49 0 7 0 57 0 12 0 61 0 15 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 101 0 31 0 105 0 33 0 109 0 34 0 113 0 35 2 145 0 41 0 141 0 43 0 153 0 48 0 157 0 59 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 229 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 45 0 156 1 49 0 168 1 57 0 180 4 209 0 192 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35] #[1 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 4 213 0 53 2 169 0 102 3 61 0 108 3 65 0 109 4 217 0 110 0 241 0 111 0 245 0 112 0 249 0 113 3 73 0 114 3 77 0 115 3 81 0 116 4 221 1 30 4 225 1 32 1 201 1 34 1 205 1 35] #[0 1 66 0 1 0 2 0 4 0 5 0 6 0 7 0 11 0 13 0 20 0 29 0 31 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 90 0 102 1 37] #[0 4 229 0 5] #[0 4 233 0 9] #[1 1 70 0 2 2 249 0 4 1 70 0 5 1 70 0 6 1 70 0 13 1 70 0 20 1 70 0 29 1 70 0 31 1 70 0 49 1 70 0 50 1 70 0 51 1 70 0 52 1 70 0 53 1 70 0 54 1 70 0 56 1 70 0 57 1 70 0 58 1 70 0 67 1 70 0 72 1 70 0 74 1 70 0 90 1 70 0 102 4 237 0 245 1 70 1 37] #[0 1 74 0 1 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 0 102 1 37] #[0 4 241 0 9] #[0 4 245 0 102] #[1 1 70 0 2 2 249 0 4 1 70 0 5 1 70 0 6 1 70 0 13 1 70 0 20 1 70 0 29 1 70 0 31 1 70 0 49 1 70 0 50 1 70 0 51 1 70 0 52 1 70 0 53 1 70 0 54 1 70 0 56 1 70 0 57 1 70 0 58 1 70 0 67 1 70 0 72 1 70 0 74 1 70 0 90 1 70 0 102 4 237 0 245 1 70 1 37] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 249 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 1 78 0 20 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 253 0 149 1 49 0 168 5 1 0 179 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 5 5 0 241 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 5 9 0 9 5 13 0 22 5 17 0 23 5 21 0 102] #[0 0 38 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 1 82 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 5 25 0 102] #[0 5 29 0 102] #[0 5 33 0 102] #[0 5 37 0 9] #[0 1 86 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 39 0 65 0 102] #[1 2 249 0 4 1 90 0 6 1 90 0 54 1 90 0 74 1 90 0 102 3 1 0 119 3 5 0 245] #[0 1 90 0 6 0 54 0 74 0 102] #[1 5 41 0 102 5 45 0 159 5 49 0 160 5 53 0 161] #[0 1 94 0 2 0 5 0 6 0 13 0 20 0 31 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 90 0 102 1 37] #[0 1 94 0 2 0 5 0 6 0 13 0 20 0 31 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 90 0 102 1 37] #[1 1 42 0 2 2 249 0 4 1 42 0 5 1 42 0 6 1 42 0 13 1 42 0 20 3 13 0 29 1 42 0 31 1 42 0 49 1 42 0 50 1 42 0 51 1 42 0 52 1 42 0 53 1 42 0 54 1 42 0 56 1 42 0 57 1 42 0 58 1 42 0 67 1 42 0 72 1 42 0 74 1 42 0 90 1 42 0 102 3 17 0 119 3 5 0 245 1 42 1 37] #[0 1 98 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 39 0 65 0 102] #[0 1 102 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 39 0 65 0 102] #[1 5 57 0 77 5 61 0 102 5 65 0 246] #[0 1 106 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 1 110 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 5 69 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 1 114 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 1 118 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 1 122 0 7 0 12 0 22 0 23 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 77 0 84 0 89 0 91 0 92 0 93 0 94 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 1 122 0 7 0 12 0 22 0 23 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 77 0 84 0 89 0 91 0 92 0 93 0 94 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 1 122 0 7 0 12 0 22 0 23 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 77 0 84 0 89 0 91 0 92 0 93 0 94 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 1 122 0 7 0 12 0 22 0 23 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 77 0 84 0 89 0 91 0 92 0 93 0 94 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 1 122 0 7 0 12 0 22 0 23 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 77 0 84 0 89 0 91 0 92 0 93 0 94 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 1 122 0 7 0 12 0 22 0 23 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 77 0 84 0 89 0 91 0 92 0 93 0 94 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 1 122 0 7 0 12 0 22 0 23 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 77 0 84 0 89 0 91 0 92 0 93 0 94 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 1 122 0 7 0 12 0 22 0 23 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 77 0 84 0 89 0 91 0 92 0 93 0 94 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 1 122 0 7 0 12 0 22 0 23 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 77 0 84 0 89 0 91 0 92 0 93 0 94 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 1 122 0 7 0 12 0 22 0 23 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 77 0 84 0 89 0 91 0 92 0 93 0 94 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 1 122 0 7 0 12 0 22 0 23 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 77 0 84 0 89 0 91 0 92 0 93 0 94 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 1 122 0 7 0 12 0 22 0 23 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 77 0 84 0 89 0 91 0 92 0 93 0 94 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 5 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 2 249 0 4 1 126 0 20 2 253 0 29 5 77 0 119 5 81 0 243 3 5 0 245] #[1 0 146 0 3 5 85 0 4 3 25 0 7 0 142 0 20 3 29 0 29 0 142 0 45 0 142 0 49 0 142 0 50 0 142 0 51 0 142 0 52 0 142 0 53 0 142 0 54 0 146 0 55 0 142 0 56 0 142 0 57 0 142 0 58 0 146 0 60 0 146 0 61 0 146 0 62 0 146 0 63 0 146 0 64 0 146 0 66 0 142 0 67 0 146 0 68 0 146 0 69 0 146 0 70 0 146 0 71 0 142 0 72 0 142 0 74 0 142 0 84 0 142 0 85 0 142 0 86 0 142 0 87 0 142 0 88 0 142 0 89 0 142 0 90 0 142 0 91 0 142 0 92 0 142 0 95 5 89 0 119 3 5 0 245] #[0 5 93 0 20] #[0 1 130 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[0 1 134 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[0 1 138 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[0 1 142 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 5 97 0 248 2 21 0 249 2 25 0 250 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 5 101 0 248 2 21 0 249 2 25 0 250 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 5 105 0 248 2 21 0 249 2 25 0 250 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 5 109 0 251 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 5 113 0 251 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 5 117 0 252 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 5 121 0 252 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 5 125 0 252 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 5 129 0 253 1 201 1 34 1 205 1 35] #[1 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 2 169 0 102 5 133 0 108 5 137 0 109 0 241 0 111 0 245 0 112 0 249 0 113 3 73 0 114 3 77 0 115 3 81 0 116 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 5 141 0 253 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 5 145 0 253 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 5 149 0 253 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 5 153 0 254 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 5 157 0 254 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 5 161 0 255 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 5 165 1 0 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 5 169 1 1 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 5 173 1 2 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 5 177 1 3 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 5 181 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 1 146 0 102] #[1 2 153 0 102 1 5 0 120 1 9 0 121 5 185 0 122] #[0 1 150 0 8 0 9 0 14 0 18 0 19 0 24 0 31 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 1 37] #[0 1 154 1 37] #[1 0 53 0 8 0 14 0 9 0 14 0 14 0 14 0 18 0 65 0 19 0 77 0 24 4 33 0 31 0 117 0 37 0 121 0 38 0 125 0 39 0 129 0 40 3 33 0 41 0 137 0 42 0 145 0 46 0 149 0 47 0 161 0 65 5 189 0 131 4 49 0 136 4 53 0 137 1 25 0 138 1 29 0 139 1 33 0 140 1 37 0 141 1 41 0 146 1 158 1 37] #[0 1 162 0 8 0 9 0 14 0 18 0 19 0 24 0 31 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 1 37] #[0 1 166 0 8 0 9 0 14 0 18 0 19 0 24 0 31 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 1 37] #[0 1 166 0 8 0 9 0 14 0 18 0 19 0 24 0 31 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 1 37] #[0 1 170 0 8 0 9 0 14 0 18 0 19 0 24 0 31 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 46 0 47 0 65 1 37] #[1 4 109 0 29 5 193 0 31] #[0 1 174 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 1 178 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 1 182 0 4 0 29 0 84 0 89] #[0 5 197 0 20] #[1 1 186 0 2 1 186 0 3 1 186 0 4 1 186 0 5 1 186 0 6 1 190 0 7 1 186 0 13 1 186 0 20 1 186 0 29 1 186 0 31 1 186 0 45 1 186 0 49 1 186 0 50 1 186 0 51 1 186 0 52 1 186 0 53 1 186 0 54 1 186 0 55 1 186 0 56 1 186 0 57 1 186 0 58 1 186 0 60 1 186 0 61 1 186 0 62 1 186 0 63 1 186 0 64 1 186 0 66 1 186 0 67 1 186 0 68 1 186 0 69 1 186 0 70 1 186 0 71 1 186 0 72 1 186 0 74 1 186 0 84 1 186 0 85 1 186 0 86 1 186 0 87 1 186 0 88 1 186 0 89 1 186 0 90 1 186 0 91 1 186 0 92 1 186 0 95 1 186 1 37] #[0 5 201 0 7] #[0 5 205 0 20] #[0 5 209 0 20] #[0 5 213 0 20] #[0 5 217 0 7] #[1 5 221 0 1 1 213 0 7 0 57 0 12 1 194 0 20 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 161 0 65 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 5 225 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 5 229 0 141 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 5 233 1 5 5 237 1 10 5 241 1 11 5 245 1 12 5 249 1 13 5 253 1 14 1 201 1 34 1 205 1 35] #[0 5 21 0 102] #[0 1 198 0 2 0 6 0 8 0 9 0 12 0 14 0 18 0 19 0 20 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 6 1 0 7] #[1 1 202 0 1 1 202 0 2 1 202 0 7 1 202 0 8 1 202 0 9 1 202 0 12 1 202 0 14 1 202 0 15 1 202 0 16 1 202 0 17 1 202 0 18 1 202 0 19 1 202 0 22 1 202 0 23 1 202 0 24 1 202 0 25 1 202 0 26 1 202 0 27 1 202 0 28 1 202 0 30 1 202 0 31 1 202 0 32 1 202 0 33 1 202 0 34 1 202 0 35 1 202 0 37 1 202 0 38 1 202 0 39 1 202 0 40 1 202 0 41 1 202 0 42 1 202 0 43 1 202 0 46 1 202 0 47 1 202 0 48 1 202 0 59 1 202 0 65 1 202 0 73 1 206 0 75 1 202 0 76 1 202 0 77 1 202 0 78 4 117 0 79 1 202 0 80 1 202 0 81 1 202 0 82 1 202 0 83 1 202 0 84 1 202 0 89 1 202 0 96 1 202 0 97 1 202 0 98 1 202 0 99 1 202 0 100 1 202 0 101 1 202 0 102 6 5 0 236 1 202 1 37] #[1 6 9 0 75 6 13 0 235] #[0 1 210 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 6 17 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 1 214 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 4 229 0 5 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 6 21 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 6 25 0 1 2 249 0 4 6 29 0 163 4 237 0 245] #[1 1 126 0 2 4 141 0 4 1 126 0 5 1 126 0 6 1 126 0 13 1 126 0 20 1 126 0 29 1 126 0 31 1 126 0 45 1 126 0 49 1 126 0 50 1 126 0 51 1 126 0 52 1 126 0 53 1 126 0 54 1 126 0 56 1 126 0 57 1 126 0 58 1 126 0 67 1 126 0 72 1 126 0 74 1 126 0 84 1 126 0 85 1 126 0 86 1 126 0 87 1 126 0 88 1 126 0 89 1 126 0 90 1 126 0 91 1 126 0 92 1 126 0 95 6 33 0 119 6 37 0 243 6 41 0 244 3 5 0 245 1 126 1 37] #[0 1 218 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[1 6 25 0 1 2 249 0 4 6 45 0 163 4 237 0 245] #[1 1 126 0 2 4 141 0 4 1 126 0 5 1 126 0 6 1 126 0 13 1 126 0 20 1 126 0 29 1 126 0 31 1 126 0 45 1 126 0 49 1 126 0 50 1 126 0 51 1 126 0 52 1 126 0 53 1 126 0 54 1 126 0 56 1 126 0 57 1 126 0 58 1 126 0 67 1 126 0 72 1 126 0 74 1 126 0 84 1 126 0 85 1 126 0 86 1 126 0 87 1 126 0 88 1 126 0 89 1 126 0 90 1 126 0 91 1 126 0 92 1 126 0 95 6 33 0 119 6 49 0 243 6 41 0 244 3 5 0 245 1 126 1 37] #[1 1 213 0 7 0 57 0 12 1 78 0 20 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 253 0 149 1 49 0 168 6 53 0 179 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 5 5 0 241 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 1 222 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 3 57 0 39 0 161 0 65 2 169 0 102 3 61 0 108 3 65 0 109 6 57 0 110 0 241 0 111 0 245 0 112 0 249 0 113 3 73 0 114 3 77 0 115 3 81 0 116 3 85 0 141 1 201 1 34 1 205 1 35 3 89 1 36] #[0 1 226 0 31] #[0 1 230 0 6 0 20 0 31] #[0 6 61 0 31] #[0 1 234 0 31] #[1 6 65 0 6 1 226 0 31] #[0 1 238 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 1 242 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 1 246 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 1 250 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 6 69 0 10 6 73 0 23 6 77 1 33] #[0 1 254 0 6 0 74] #[1 6 81 0 6 6 85 0 74] #[0 2 2 0 6 0 74] #[0 2 6 0 1 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 0 102 1 37] #[0 2 10 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 2 14 0 1 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 0 102 1 37] #[0 2 10 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[1 0 122 0 1 0 122 0 2 0 122 0 4 0 122 0 5 0 122 0 6 0 122 0 7 0 122 0 11 0 122 0 13 0 122 0 20 0 122 0 29 0 122 0 31 0 122 0 49 0 122 0 50 0 122 0 51 0 122 0 52 0 122 0 53 0 122 0 54 0 122 0 56 0 122 0 57 0 122 0 58 0 122 0 67 0 122 0 72 0 122 0 74 0 63 0 90 0 122 0 102 6 89 1 31 0 122 1 37] #[0 6 93 0 5] #[0 2 18 0 6 0 20] #[0 6 97 0 20] #[1 6 101 0 6 2 22 0 20] #[0 2 26 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 2 30 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 6 105 0 29] #[0 2 34 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 12 0 13 0 14 0 18 0 19 0 20 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 45 0 46 0 47 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 0 102 1 37] #[1 2 38 0 1 2 38 0 10 2 38 0 11 6 109 0 90 6 113 0 142] #[1 2 42 0 1 6 117 0 11 6 121 0 144 6 125 1 41] #[1 2 38 0 1 2 38 0 10 6 109 0 90 6 129 0 142] #[0 2 10 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 2 46 0 3 0 4 0 6 0 20 0 31] #[1 6 133 0 6 2 50 0 31] #[0 2 54 0 6 0 31] #[1 6 137 0 3 6 141 0 4 2 58 0 6 2 58 0 31] #[0 6 145 0 102] #[1 2 62 0 2 2 62 0 3 2 62 0 4 2 62 0 5 2 62 0 6 1 190 0 7 2 62 0 13 2 62 0 20 2 62 0 29 2 62 0 31 2 62 0 45 2 62 0 49 2 62 0 50 2 62 0 51 2 62 0 52 2 62 0 53 2 62 0 54 2 62 0 55 2 62 0 56 2 62 0 57 2 62 0 58 2 62 0 60 2 62 0 61 2 62 0 62 2 62 0 63 2 62 0 64 2 62 0 66 2 62 0 67 2 62 0 68 2 62 0 69 2 62 0 70 2 62 0 71 2 62 0 72 2 62 0 74 2 62 0 84 2 62 0 85 2 62 0 86 2 62 0 87 2 62 0 88 2 62 0 89 2 62 0 90 2 62 0 91 2 62 0 92 2 62 0 95 2 62 1 37] #[0 6 149 0 7] #[0 6 153 0 5] #[0 2 66 0 2 0 5 0 6 0 13 0 20 0 31 1 37] #[1 2 249 0 4 2 70 0 20 1 70 0 29 4 237 0 245] #[0 6 157 0 20] #[1 4 229 0 5 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 249 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 2 249 0 4 6 161 0 20 4 237 0 245] #[1 1 182 0 2 1 182 0 4 1 182 0 5 1 182 0 6 1 213 0 7 0 57 0 12 1 182 0 13 1 182 0 20 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 1 182 0 29 0 97 0 30 1 182 0 31 0 105 0 33 0 109 0 34 0 113 0 35 1 182 0 45 1 182 0 49 1 182 0 50 1 182 0 51 1 182 0 52 1 182 0 53 1 182 0 54 1 182 0 56 1 182 0 57 1 182 0 58 1 182 0 67 1 182 0 72 1 182 0 74 0 173 0 77 1 182 0 84 1 182 0 85 1 182 0 86 1 182 0 87 1 182 0 88 1 182 0 89 1 182 0 90 1 182 0 91 1 182 0 92 1 225 0 93 1 229 0 94 1 182 0 95 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 6 165 0 249 2 25 0 250 1 201 1 34 1 205 1 35 1 182 1 37] #[0 2 74 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[0 2 74 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[0 2 74 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[1 2 78 0 2 2 78 0 5 2 78 0 6 2 78 0 13 2 78 0 20 2 78 0 31 3 197 0 45 2 78 0 49 2 78 0 50 2 78 0 51 2 78 0 52 2 78 0 53 2 78 0 54 2 78 0 56 2 78 0 57 2 78 0 58 2 78 0 67 2 78 0 72 2 78 0 74 3 201 0 85 2 78 0 86 2 78 0 87 2 78 0 88 2 78 0 90 2 78 0 91 2 78 0 92 3 205 0 95 2 78 1 37] #[1 2 78 0 2 2 78 0 5 2 78 0 6 2 78 0 13 2 78 0 20 2 78 0 31 3 197 0 45 2 78 0 49 2 78 0 50 2 78 0 51 2 78 0 52 2 78 0 53 2 78 0 54 2 78 0 56 2 78 0 57 2 78 0 58 2 78 0 67 2 78 0 72 2 78 0 74 3 201 0 85 2 78 0 86 2 78 0 87 2 78 0 88 2 78 0 90 2 78 0 91 2 78 0 92 3 205 0 95 2 78 1 37] #[1 2 82 0 2 2 82 0 5 2 82 0 6 2 82 0 13 2 82 0 20 2 82 0 31 2 82 0 49 2 82 0 50 2 82 0 51 2 82 0 52 2 82 0 53 2 82 0 54 2 82 0 56 2 82 0 57 2 82 0 58 2 82 0 67 2 82 0 72 2 82 0 74 2 82 0 86 2 82 0 87 2 82 0 88 2 82 0 90 3 209 0 91 3 213 0 92 2 82 1 37] #[1 2 82 0 2 2 82 0 5 2 82 0 6 2 82 0 13 2 82 0 20 2 82 0 31 2 82 0 49 2 82 0 50 2 82 0 51 2 82 0 52 2 82 0 53 2 82 0 54 2 82 0 56 2 82 0 57 2 82 0 58 2 82 0 67 2 82 0 72 2 82 0 74 2 82 0 86 2 82 0 87 2 82 0 88 2 82 0 90 3 209 0 91 3 213 0 92 2 82 1 37] #[1 2 82 0 2 2 82 0 5 2 82 0 6 2 82 0 13 2 82 0 20 2 82 0 31 2 82 0 49 2 82 0 50 2 82 0 51 2 82 0 52 2 82 0 53 2 82 0 54 2 82 0 56 2 82 0 57 2 82 0 58 2 82 0 67 2 82 0 72 2 82 0 74 2 82 0 86 2 82 0 87 2 82 0 88 2 82 0 90 3 209 0 91 3 213 0 92 2 82 1 37] #[1 2 86 0 2 2 86 0 5 2 86 0 6 2 86 0 13 2 86 0 20 2 86 0 31 2 86 0 49 2 86 0 50 2 86 0 51 2 86 0 52 2 86 0 53 2 86 0 54 2 86 0 56 2 86 0 57 2 86 0 58 2 86 0 67 2 86 0 72 2 86 0 74 3 217 0 86 3 221 0 87 3 225 0 88 2 86 0 90 2 86 1 37] #[1 2 249 0 4 3 1 0 119 3 5 0 245] #[0 2 86 0 2 0 5 0 6 0 13 0 20 0 31 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 90 1 37] #[1 2 86 0 2 2 86 0 5 2 86 0 6 2 86 0 13 2 86 0 20 2 86 0 31 2 86 0 49 2 86 0 50 2 86 0 51 2 86 0 52 2 86 0 53 2 86 0 54 2 86 0 56 2 86 0 57 2 86 0 58 2 86 0 67 2 86 0 72 2 86 0 74 3 217 0 86 3 221 0 87 3 225 0 88 2 86 0 90 2 86 1 37] #[1 2 86 0 2 2 86 0 5 2 86 0 6 2 86 0 13 2 86 0 20 2 86 0 31 2 86 0 49 2 86 0 50 2 86 0 51 2 86 0 52 2 86 0 53 2 86 0 54 2 86 0 56 2 86 0 57 2 86 0 58 2 86 0 67 2 86 0 72 2 86 0 74 3 217 0 86 3 221 0 87 3 225 0 88 2 86 0 90 2 86 1 37] #[1 2 86 0 2 2 86 0 5 2 86 0 6 2 86 0 13 2 86 0 20 2 86 0 31 2 86 0 49 2 86 0 50 2 86 0 51 2 86 0 52 2 86 0 53 2 86 0 54 2 86 0 56 2 86 0 57 2 86 0 58 2 86 0 67 2 86 0 72 2 86 0 74 3 217 0 86 3 221 0 87 3 225 0 88 2 86 0 90 2 86 1 37] #[1 2 90 0 2 2 90 0 5 2 90 0 6 2 90 0 13 2 90 0 20 2 90 0 31 2 90 0 49 2 90 0 50 2 90 0 51 2 90 0 52 2 90 0 53 2 90 0 54 3 229 0 56 3 233 0 57 2 90 0 58 3 237 0 67 2 90 0 72 3 241 0 74 3 245 0 90 2 90 1 37] #[1 2 90 0 2 2 90 0 5 2 90 0 6 2 90 0 13 2 90 0 20 2 90 0 31 2 90 0 49 2 90 0 50 2 90 0 51 2 90 0 52 2 90 0 53 2 90 0 54 3 229 0 56 3 233 0 57 2 90 0 58 3 237 0 67 2 90 0 72 3 241 0 74 3 245 0 90 2 90 1 37] #[1 2 94 0 2 2 94 0 5 2 94 0 6 2 94 0 13 2 94 0 20 2 94 0 31 2 94 0 49 2 94 0 50 2 94 0 51 2 94 0 52 2 94 0 53 2 94 0 54 3 249 0 58 3 253 0 72 2 94 1 37] #[1 2 98 0 2 2 98 0 5 2 98 0 6 2 98 0 13 2 98 0 20 2 98 0 31 2 98 0 49 2 98 0 50 2 98 0 51 2 98 0 52 2 98 0 53 4 1 0 54 2 98 1 37] #[1 2 102 0 2 2 102 0 5 2 102 0 6 2 102 0 13 2 102 0 20 2 102 0 31 4 5 0 49 2 102 0 50 2 102 0 51 2 102 0 52 2 102 0 53 2 102 1 37] #[1 2 106 0 2 2 106 0 5 2 106 0 6 2 106 0 13 2 106 0 20 2 106 0 31 4 9 0 50 2 106 0 51 2 106 0 52 2 106 0 53 2 106 1 37] #[1 2 110 0 2 2 110 0 5 2 110 0 6 2 110 0 13 2 110 0 20 2 110 0 31 4 13 0 51 2 110 0 52 2 110 0 53 2 110 1 37] #[0 6 169 0 13] #[1 6 173 0 29 6 177 0 31] #[0 2 114 0 8 0 9 0 14 0 18 0 19 0 24 0 31 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 1 37] #[0 2 118 0 8 0 9 0 14 0 18 0 19 0 24 0 31 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 46 0 47 0 65 1 37] #[1 6 181 0 1 6 185 0 220] #[1 1 213 0 7 0 57 0 12 1 78 0 20 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 253 0 149 1 49 0 168 6 189 0 179 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 5 5 0 241 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 0 45 0 1 6 193 0 156] #[1 0 45 0 1 0 49 0 7 0 57 0 12 0 61 0 15 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 101 0 31 0 105 0 33 0 109 0 34 0 113 0 35 2 145 0 41 0 141 0 43 0 153 0 48 0 157 0 59 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 229 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 45 0 156 1 49 0 168 1 57 0 180 6 197 0 192 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35] #[1 0 45 0 1 0 49 0 7 0 57 0 12 0 61 0 15 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 101 0 31 0 105 0 33 0 109 0 34 0 113 0 35 2 145 0 41 0 141 0 43 0 153 0 48 0 157 0 59 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 229 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 45 0 156 1 49 0 168 1 57 0 180 6 201 0 192 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 6 205 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 5 221 0 1 2 122 0 2 2 122 0 6 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 161 0 65 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 5 229 0 141 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 5 233 1 5 6 209 1 12 5 253 1 14 6 213 1 15 6 217 1 17 1 201 1 34 1 205 1 35] #[1 6 221 0 3 0 55 0 4 0 118 0 7 0 118 0 20 0 55 0 29 0 118 0 45 0 118 0 49 0 118 0 50 0 118 0 51 0 118 0 52 0 118 0 53 0 118 0 54 0 118 0 56 0 118 0 57 0 118 0 58 0 118 0 67 0 118 0 72 0 118 0 74 0 118 0 84 0 118 0 85 0 118 0 86 0 118 0 87 0 118 0 88 0 118 0 89 0 59 0 90 0 118 0 91 0 118 0 92 0 118 0 95 2 245 1 31] #[0 2 126 0 2 0 6 0 20] #[0 2 126 0 2 0 6 0 20] #[0 6 225 0 20] #[1 6 229 0 6 2 130 0 20] #[0 2 134 0 20] #[0 2 138 0 6 0 20] #[0 2 126 0 2 0 6 0 20] #[1 0 18 0 25 0 18 0 26 0 18 0 27 0 18 0 28 0 18 0 30 0 18 0 33 0 18 0 34 0 18 0 35 0 18 0 39 0 18 0 65 0 18 0 102 6 233 0 171 6 237 0 172] #[0 2 142 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 0 45 0 1 6 241 0 156] #[0 2 146 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 6 245 0 31] #[0 6 249 0 5] #[1 6 25 0 1 6 253 0 2 7 1 0 6 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 7 5 0 149 7 9 0 162 7 13 0 163 1 49 0 168 1 57 0 180 7 17 0 189 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 2 150 0 2 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[1 2 70 0 2 2 249 0 4 2 70 0 5 2 70 0 6 2 70 0 13 2 70 0 20 2 70 0 29 2 70 0 31 2 70 0 45 2 70 0 49 2 70 0 50 2 70 0 51 2 70 0 52 2 70 0 53 2 70 0 54 2 70 0 56 2 70 0 57 2 70 0 58 2 70 0 67 2 70 0 72 2 70 0 74 2 70 0 84 2 70 0 85 2 70 0 86 2 70 0 87 2 70 0 88 2 70 0 89 2 70 0 90 2 70 0 91 2 70 0 92 2 70 0 95 4 237 0 245 2 70 1 37] #[0 2 154 0 2 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 2 158 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 2 150 0 2 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 2 154 0 2 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 7 21 0 20] #[1 7 25 0 102 5 45 0 159 5 49 0 160 5 53 0 161] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 90 0 31 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 2 209 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 7 29 0 227 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 0 49 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 49 0 168 1 57 0 180 7 33 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35] #[1 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 2 169 0 102 3 61 0 108 3 65 0 109 7 37 0 110 0 241 0 111 0 245 0 112 0 249 0 113 3 73 0 114 3 77 0 115 3 81 0 116 1 201 1 34 1 205 1 35] #[1 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 2 169 0 102 3 61 0 108 3 65 0 109 7 41 0 110 0 241 0 111 0 245 0 112 0 249 0 113 3 73 0 114 3 77 0 115 3 81 0 116 1 201 1 34 1 205 1 35] #[0 2 162 0 6 0 74] #[1 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 4 213 0 53 2 169 0 102 3 61 0 108 3 65 0 109 4 217 0 110 0 241 0 111 0 245 0 112 0 249 0 113 3 73 0 114 3 77 0 115 3 81 0 116 7 45 1 32 1 201 1 34 1 205 1 35] #[0 2 166 0 1 0 2 0 4 0 5 0 6 0 7 0 11 0 13 0 20 0 29 0 31 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 90 0 102 1 37] #[0 2 170 0 1 0 2 0 4 0 5 0 6 0 7 0 11 0 13 0 20 0 29 0 31 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 90 0 102 1 37] #[0 2 174 0 2 0 3 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 2 178 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 7 49 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 7 53 0 102 7 57 0 246] #[1 7 61 0 102 7 65 1 26 7 69 1 27] #[1 2 182 0 1 7 73 0 10 2 182 0 11 7 77 0 143 7 81 0 147] #[1 2 169 0 102 7 85 0 114 2 181 0 116 7 89 0 118 7 93 0 148 1 201 1 34 1 205 1 35] #[1 7 97 0 1 7 101 1 18] #[0 2 186 0 1] #[1 2 190 0 1 7 105 0 10 7 109 0 181 7 113 0 183] #[1 5 41 0 102 7 117 0 160 5 53 0 161] #[1 6 25 0 1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 7 5 0 149 7 121 0 162 7 13 0 163 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 7 125 0 5] #[0 7 129 0 7] #[1 1 213 0 7 0 57 0 12 1 78 0 20 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 253 0 149 1 49 0 168 7 133 0 179 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 5 5 0 241 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 2 174 0 2 0 3 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 60 0 61 0 62 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 7 137 0 248 2 21 0 249 2 25 0 250 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 7 141 0 249 2 25 0 250 1 201 1 34 1 205 1 35] #[0 2 194 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 7 145 1 5 1 201 1 34 1 205 1 35] #[1 7 149 0 45 5 21 0 102] #[0 2 198 0 8 0 9 0 14 0 18 0 19 0 24 0 31 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 46 0 47 0 65 1 37] #[1 7 153 0 2 7 157 0 16 7 161 0 17 7 165 0 221 7 169 0 222 7 173 0 223 7 177 0 224] #[0 2 202 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 7 181 0 20] #[0 2 206 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 2 210 0 1 2 210 0 2 2 210 0 7 2 210 0 8 2 210 0 9 2 210 0 12 2 210 0 14 2 210 0 15 2 210 0 16 2 210 0 17 2 210 0 18 2 210 0 19 2 210 0 22 2 210 0 23 2 210 0 24 2 210 0 25 2 210 0 26 2 210 0 27 2 210 0 28 2 210 0 30 2 210 0 31 7 185 0 32 2 210 0 33 2 210 0 34 2 210 0 35 2 210 0 37 2 210 0 38 2 210 0 39 2 210 0 40 2 210 0 41 2 210 0 42 2 210 0 43 2 210 0 46 2 210 0 47 2 210 0 48 2 210 0 59 2 210 0 65 2 210 0 73 2 210 0 76 2 210 0 77 2 210 0 78 2 210 0 80 2 210 0 81 2 210 0 82 2 210 0 83 2 210 0 84 2 210 0 89 2 210 0 96 2 210 0 97 2 210 0 98 2 210 0 99 2 210 0 100 2 210 0 101 2 210 0 102 2 210 1 37] #[0 2 214 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 7 189 0 20] #[0 2 218 0 2 0 6] #[1 2 222 0 2 7 193 0 6 7 197 1 16] #[1 2 226 0 2 0 71 0 6] #[1 5 221 0 1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 161 0 65 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 5 229 0 141 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 5 233 1 5 7 205 1 12 5 253 1 14 1 201 1 34 1 205 1 35] #[0 2 230 0 2 0 6 0 8 0 9 0 12 0 14 0 18 0 19 0 20 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[1 7 209 0 102 7 213 1 13] #[0 7 217 0 20] #[1 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 3 57 0 39 0 161 0 65 2 169 0 102 3 61 0 108 3 65 0 109 7 221 0 110 0 241 0 111 0 245 0 112 0 249 0 113 3 73 0 114 3 77 0 115 3 81 0 116 3 85 0 141 1 201 1 34 1 205 1 35 3 89 1 36] #[0 2 234 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 2 238 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 2 242 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 2 246 0 2 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 7 225 0 2] #[0 2 250 0 2 0 6 0 31] #[0 2 254 0 2 0 6] #[0 2 250 0 2 0 6 0 31] #[1 7 229 0 2 7 233 0 6] #[1 7 237 0 1 3 2 0 2 3 2 0 4 3 2 0 5 3 2 0 6 3 2 0 13 3 2 0 20 3 2 0 29 3 2 0 31 3 2 0 45 3 2 0 49 3 2 0 50 3 2 0 51 3 2 0 52 3 2 0 53 3 2 0 54 3 2 0 56 3 2 0 57 3 2 0 58 3 2 0 67 3 2 0 72 3 2 0 74 3 2 0 84 3 2 0 85 3 2 0 86 3 2 0 87 3 2 0 88 3 2 0 89 3 2 0 90 3 2 0 91 3 2 0 92 3 2 0 95 7 241 0 145 3 2 1 37] #[1 2 46 0 3 2 46 0 4 2 46 0 6 7 245 0 13 2 46 0 31] #[0 7 249 0 31] #[0 3 6 0 6 0 20 0 31] #[0 3 10 0 6 0 74] #[0 3 10 0 6 0 74] #[0 3 14 0 6 0 74] #[0 3 18 0 6 0 20] #[1 3 22 0 2 3 22 0 3 3 22 0 4 3 22 0 5 3 22 0 6 1 190 0 7 3 22 0 13 3 22 0 20 3 22 0 29 3 22 0 31 3 22 0 45 3 22 0 49 3 22 0 50 3 22 0 51 3 22 0 52 3 22 0 53 3 22 0 54 3 22 0 55 3 22 0 56 3 22 0 57 3 22 0 58 3 22 0 60 3 22 0 61 3 22 0 62 3 22 0 63 3 22 0 64 3 22 0 66 3 22 0 67 3 22 0 68 3 22 0 69 3 22 0 70 3 22 0 71 3 22 0 72 3 22 0 74 3 22 0 84 3 22 0 85 3 22 0 86 3 22 0 87 3 22 0 88 3 22 0 89 3 22 0 90 3 22 0 91 3 22 0 92 3 22 0 95 3 22 1 37] #[0 7 253 0 7] #[1 3 26 0 6 8 1 0 10 3 26 0 74 8 5 1 28] #[1 8 9 0 6 8 13 0 74] #[0 3 30 0 6 0 74] #[1 2 169 0 102 8 17 0 114 2 181 0 116 8 21 0 117 1 201 1 34 1 205 1 35] #[1 2 42 0 1 6 117 0 11 8 25 0 144 6 125 1 41] #[0 3 34 0 1 0 11] #[0 3 38 0 1 0 6] #[0 3 42 0 1 0 6] #[1 3 46 0 1 8 29 0 6] #[1 3 50 0 2 3 50 0 6 3 50 0 31 0 10 0 65 0 10 0 102 8 33 0 132 8 37 1 19 8 41 1 21 8 45 1 22] #[0 3 54 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 2 169 0 102 7 85 0 114 2 181 0 116 8 49 0 118 1 201 1 34 1 205 1 35] #[1 8 53 0 1 8 57 0 182] #[1 3 58 0 1 8 61 0 6] #[0 3 62 0 6 0 31] #[0 3 66 0 6 0 31] #[0 3 70 0 3 0 4 0 6 0 20 0 31] #[1 1 213 0 7 0 57 0 12 1 78 0 20 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 253 0 149 1 49 0 168 8 65 0 179 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 5 5 0 241 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 8 69 0 20] #[0 3 74 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[0 3 74 0 2 0 5 0 6 0 13 0 20 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 85 0 86 0 87 0 88 0 90 0 91 0 92 0 95 1 37] #[0 3 78 0 2 0 5 0 6 0 13 0 20 0 31 1 37] #[0 8 73 0 31] #[0 3 82 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 8 77 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 8 81 0 225 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 8 85 0 13] #[1 8 89 0 2 7 157 0 16 7 161 0 17 8 93 0 222 8 97 0 223 7 177 0 224] #[1 0 45 0 1 8 101 0 2 0 49 0 7 0 53 0 8 0 14 0 9 0 57 0 12 0 14 0 14 0 61 0 15 7 157 0 16 7 161 0 17 0 14 0 18 0 65 0 19 0 69 0 22 0 73 0 23 0 77 0 24 0 11 0 25 0 15 0 26 0 19 0 27 0 23 0 28 0 27 0 30 0 101 0 31 0 31 0 33 0 35 0 34 0 39 0 35 0 117 0 37 0 121 0 38 0 43 0 39 0 129 0 40 0 133 0 41 0 137 0 42 0 141 0 43 0 145 0 46 0 149 0 47 0 153 0 48 0 157 0 59 0 47 0 65 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 51 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 17 0 136 1 21 0 137 1 25 0 138 1 29 0 139 1 33 0 140 1 37 0 141 1 41 0 146 1 45 0 156 1 49 0 168 1 53 0 172 8 105 0 178 1 57 0 180 1 61 0 191 1 65 0 192 1 69 0 193 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 8 109 0 224 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35 2 117 1 39] #[0 3 86 0 2 0 16 0 17] #[0 3 90 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 3 94 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[1 0 45 0 1 0 49 0 7 0 57 0 12 0 61 0 15 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 101 0 31 0 105 0 33 0 109 0 34 0 113 0 35 2 145 0 41 0 141 0 43 0 153 0 48 0 157 0 59 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 229 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 45 0 156 1 49 0 168 1 57 0 180 8 113 0 192 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35] #[0 8 117 0 31] #[0 3 98 0 2 0 31] #[0 8 121 0 2] #[1 5 221 0 1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 161 0 65 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 2 217 0 122 5 229 0 141 1 49 0 168 1 57 0 180 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 2 221 0 239 2 225 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 5 233 1 5 8 125 1 12 5 253 1 14 1 201 1 34 1 205 1 35] #[0 3 102 0 6 0 20] #[0 6 221 0 3] #[0 3 106 0 6 0 20] #[1 0 45 0 1 8 129 0 156] #[1 5 41 0 102 8 133 0 161] #[0 3 110 0 2 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 3 114 0 2 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[1 6 25 0 1 8 137 0 2 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 7 5 0 149 8 141 0 162 7 13 0 163 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 0 45 0 1 3 118 0 2 0 53 0 8 0 14 0 9 0 14 0 12 0 14 0 14 0 14 0 18 0 65 0 19 0 77 0 24 0 14 0 25 0 14 0 26 0 14 0 27 0 14 0 28 0 14 0 30 8 145 0 31 0 14 0 33 0 14 0 34 0 14 0 35 8 149 0 37 0 121 0 38 0 125 0 39 0 129 0 40 3 33 0 41 0 137 0 42 0 145 0 46 0 149 0 47 0 161 0 65 0 14 0 102 8 153 0 136 8 157 0 137 1 25 0 138 8 161 0 139 1 33 0 140 1 37 0 141 1 41 0 146 8 165 0 150 8 169 0 151 8 173 0 152 8 177 0 153 8 181 0 154 8 185 0 155 8 189 0 156 8 193 0 157 8 197 0 158 8 201 0 164] #[0 3 122 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[1 1 213 0 7 0 57 0 12 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 8 205 0 149 1 49 0 168 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 0 49 0 7 0 57 0 12 3 126 0 20 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 49 0 168 1 57 0 180 4 181 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 8 209 0 228 8 213 0 230 8 217 0 231 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 1 78 0 20 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 253 0 149 1 49 0 168 8 221 0 179 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 5 5 0 241 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 2 169 0 102 3 61 0 108 3 65 0 109 8 225 0 110 0 241 0 111 0 245 0 112 0 249 0 113 3 73 0 114 3 77 0 115 3 81 0 116 8 229 1 29 1 201 1 34 1 205 1 35] #[0 3 130 0 6 0 74] #[1 7 61 0 102 8 233 1 27] #[0 3 134 0 1 0 10 0 11] #[0 1 38 0 1 0 6 0 11 0 31] #[0 3 138 0 1 0 11] #[1 7 237 0 1 8 237 0 145] #[1 2 169 0 102 7 85 0 114 2 181 0 116 8 241 0 118 1 201 1 34 1 205 1 35] #[1 0 161 0 65 8 245 0 102 2 105 0 141] #[1 2 222 0 2 7 193 0 6 2 222 0 31 8 249 1 16] #[1 3 142 0 2 0 75 0 6 3 142 0 31] #[0 3 146 0 2 0 6 0 31] #[0 3 150 0 1 0 6] #[1 3 154 0 2 0 53 0 8 0 14 0 9 0 14 0 12 0 14 0 14 0 14 0 18 0 65 0 19 0 77 0 24 0 14 0 25 0 14 0 26 0 14 0 27 0 14 0 28 0 14 0 30 0 14 0 33 0 14 0 34 0 14 0 35 0 117 0 37 0 121 0 38 0 125 0 39 0 129 0 40 3 33 0 41 0 137 0 42 0 145 0 46 0 149 0 47 0 161 0 65 0 14 0 102 9 1 0 136 9 5 0 137 1 25 0 138 9 9 0 139 1 33 0 140 1 37 0 141 1 41 0 146 9 13 0 157 9 17 0 164 9 21 0 184 9 25 0 185 9 29 0 186 9 33 0 187 9 37 0 188] #[0 3 158 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 2 169 0 102 7 85 0 114 2 181 0 116 9 41 0 118 1 201 1 34 1 205 1 35] #[0 9 45 0 20] #[0 3 162 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 3 166 0 8 0 9 0 14 0 18 0 19 0 24 0 31 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 46 0 47 0 65 1 37] #[0 3 170 0 13] #[0 9 49 0 13] #[0 3 174 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 3 178 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 0 45 0 1 9 53 0 2 0 49 0 7 0 53 0 8 0 14 0 9 0 57 0 12 0 14 0 14 0 61 0 15 7 157 0 16 7 161 0 17 0 14 0 18 0 65 0 19 0 69 0 22 0 73 0 23 0 77 0 24 0 11 0 25 0 15 0 26 0 19 0 27 0 23 0 28 0 27 0 30 0 101 0 31 0 31 0 33 0 35 0 34 0 39 0 35 0 117 0 37 0 121 0 38 0 43 0 39 0 129 0 40 0 133 0 41 0 137 0 42 0 141 0 43 0 145 0 46 0 149 0 47 0 153 0 48 0 157 0 59 0 47 0 65 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 51 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 17 0 136 1 21 0 137 1 25 0 138 1 29 0 139 1 33 0 140 1 37 0 141 1 41 0 146 1 45 0 156 1 49 0 168 1 53 0 172 8 105 0 178 1 57 0 180 1 61 0 191 1 65 0 192 1 69 0 193 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 8 109 0 224 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35 2 117 1 39] #[0 3 182 0 2 0 16 0 17] #[0 3 186 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 0 45 0 1 3 190 0 2 0 49 0 7 0 53 0 8 0 14 0 9 0 57 0 12 0 14 0 14 0 61 0 15 3 190 0 16 3 190 0 17 0 14 0 18 0 65 0 19 0 69 0 22 0 73 0 23 0 77 0 24 0 11 0 25 0 15 0 26 0 19 0 27 0 23 0 28 0 27 0 30 0 101 0 31 0 31 0 33 0 35 0 34 0 39 0 35 0 117 0 37 0 121 0 38 0 43 0 39 0 129 0 40 0 133 0 41 0 137 0 42 0 141 0 43 0 145 0 46 0 149 0 47 0 153 0 48 0 157 0 59 0 47 0 65 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 51 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 17 0 136 1 21 0 137 1 25 0 138 1 29 0 139 1 33 0 140 1 37 0 141 1 41 0 146 1 45 0 156 1 49 0 168 1 53 0 172 1 57 0 180 1 61 0 191 1 65 0 192 1 69 0 193 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35 4 65 1 39] #[0 3 194 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 3 198 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 3 202 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 3 206 0 2 0 6 0 20] #[0 3 210 0 2 0 6] #[0 3 214 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 6 141 0 4 3 218 0 6 3 218 0 20] #[0 3 222 0 2 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[0 3 226 0 2 0 6] #[0 3 230 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[1 0 45 0 1 0 38 0 8 0 38 0 9 0 38 0 12 0 38 0 14 0 38 0 18 0 38 0 19 0 38 0 24 0 38 0 25 0 38 0 26 0 38 0 27 0 38 0 28 0 38 0 30 0 38 0 33 0 38 0 34 0 38 0 35 0 38 0 37 0 38 0 38 0 38 0 39 0 38 0 40 0 38 0 41 0 38 0 42 0 38 0 46 0 38 0 47 0 38 0 65 0 38 0 102 9 57 0 156] #[0 3 234 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 3 234 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[1 3 41 0 9 0 57 0 12 3 45 0 14 3 49 0 18 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 1 233 0 102 3 61 0 108 3 65 0 109 9 61 0 110 0 241 0 111 0 245 0 112 0 249 0 113 3 73 0 114 3 77 0 115 3 81 0 116 9 65 0 120 9 69 0 168 9 73 0 175 1 201 1 34 1 205 1 35] #[0 9 77 0 2] #[1 0 45 0 1 3 238 0 2 0 53 0 8 0 14 0 9 0 14 0 12 0 14 0 14 0 14 0 18 0 65 0 19 0 77 0 24 0 14 0 25 0 14 0 26 0 14 0 27 0 14 0 28 0 14 0 30 8 145 0 31 0 14 0 33 0 14 0 34 0 14 0 35 8 149 0 37 0 121 0 38 0 125 0 39 0 129 0 40 3 33 0 41 0 137 0 42 0 145 0 46 0 149 0 47 0 161 0 65 0 14 0 102 8 153 0 136 8 157 0 137 1 25 0 138 8 161 0 139 1 33 0 140 1 37 0 141 1 41 0 146 9 81 0 152 8 177 0 153 8 181 0 154 8 185 0 155 8 189 0 156 8 193 0 157 8 197 0 158 8 201 0 164] #[0 3 242 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 3 246 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 3 246 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 3 246 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 3 246 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 3 234 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 3 234 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[1 0 45 0 1 9 85 0 31 9 89 0 156 9 93 0 165] #[0 9 97 0 20] #[0 9 101 0 20] #[1 6 65 0 6 3 250 0 20] #[0 3 254 0 20] #[0 9 105 0 20] #[0 4 2 0 6 0 54 0 74] #[1 4 6 0 6 9 109 0 54 4 6 0 74] #[0 4 10 0 6 0 74] #[0 4 14 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 4 18 0 1 0 6] #[1 4 22 0 1 4 22 0 2 4 22 0 6 9 113 0 7 4 22 0 31 9 117 1 23] #[1 4 26 0 2 9 121 0 31 9 125 1 20 9 129 1 25] #[1 0 10 0 65 0 10 0 102 8 33 0 132 9 133 1 22] #[0 4 30 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 4 30 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[1 3 41 0 9 0 57 0 12 3 45 0 14 3 49 0 18 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 2 169 0 102 3 61 0 108 3 65 0 109 9 61 0 110 0 241 0 111 0 245 0 112 0 249 0 113 3 73 0 114 3 77 0 115 3 81 0 116 9 69 0 168 1 201 1 34 1 205 1 35] #[0 4 34 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 9 137 0 31] #[0 9 141 0 2] #[1 4 38 0 2 0 53 0 8 0 14 0 9 0 14 0 12 0 14 0 14 0 14 0 18 0 65 0 19 0 77 0 24 0 14 0 25 0 14 0 26 0 14 0 27 0 14 0 28 0 14 0 30 0 14 0 33 0 14 0 34 0 14 0 35 0 117 0 37 0 121 0 38 0 125 0 39 0 129 0 40 3 33 0 41 0 137 0 42 0 145 0 46 0 149 0 47 0 161 0 65 0 14 0 102 9 1 0 136 9 5 0 137 1 25 0 138 9 9 0 139 1 33 0 140 1 37 0 141 1 41 0 146 9 13 0 157 9 17 0 164 9 145 0 186 9 33 0 187 9 37 0 188] #[0 4 42 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 4 30 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 4 30 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 4 46 0 1 0 6] #[1 7 237 0 1 4 50 0 2 4 50 0 4 4 50 0 5 4 50 0 6 4 50 0 13 4 50 0 20 4 50 0 29 4 50 0 31 4 50 0 45 4 50 0 49 4 50 0 50 4 50 0 51 4 50 0 52 4 50 0 53 4 50 0 54 4 50 0 56 4 50 0 57 4 50 0 58 4 50 0 67 4 50 0 72 4 50 0 74 4 50 0 84 4 50 0 85 4 50 0 86 4 50 0 87 4 50 0 88 4 50 0 89 4 50 0 90 4 50 0 91 4 50 0 92 4 50 0 95 9 149 0 145 4 50 1 37] #[0 4 54 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 4 58 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 4 62 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[1 9 153 0 102 9 157 0 159 5 49 0 160 5 53 0 161 9 161 0 166] #[0 9 165 0 7] #[1 9 169 0 102 9 173 0 166] #[1 4 66 0 1 9 177 0 21 9 181 0 167 9 185 0 173] #[0 4 70 0 1 0 2 0 4 0 5 0 6 0 7 0 8 0 9 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 59 0 65 0 67 0 72 0 73 0 74 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 4 74 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 4 78 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 4 82 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 4 86 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[1 0 45 0 1 0 49 0 7 0 57 0 12 0 61 0 15 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 101 0 31 0 105 0 33 0 109 0 34 0 113 0 35 2 145 0 41 0 141 0 43 0 153 0 48 0 157 0 59 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 229 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 45 0 156 1 49 0 168 1 57 0 180 9 189 0 192 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35] #[1 0 45 0 1 0 49 0 7 0 57 0 12 0 61 0 15 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 101 0 31 0 105 0 33 0 109 0 34 0 113 0 35 2 145 0 41 0 141 0 43 0 153 0 48 0 157 0 59 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 229 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 45 0 156 1 49 0 168 1 57 0 180 9 193 0 192 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35] #[0 4 90 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[1 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 2 169 0 102 3 61 0 108 3 65 0 109 9 197 0 110 0 241 0 111 0 245 0 112 0 249 0 113 3 73 0 114 3 77 0 115 3 81 0 116 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 1 78 0 20 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 253 0 149 1 49 0 168 9 201 0 179 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 5 5 0 241 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 7 237 0 1 4 94 0 2 4 94 0 6 4 94 0 31 9 205 0 145 9 209 1 24] #[1 0 45 0 1 3 118 0 2 0 53 0 8 0 14 0 9 0 14 0 12 0 14 0 14 0 14 0 18 0 65 0 19 0 77 0 24 0 14 0 25 0 14 0 26 0 14 0 27 0 14 0 28 0 14 0 30 8 145 0 31 0 14 0 33 0 14 0 34 0 14 0 35 8 149 0 37 0 121 0 38 0 125 0 39 0 129 0 40 3 33 0 41 0 137 0 42 0 145 0 46 0 149 0 47 0 161 0 65 0 14 0 102 8 153 0 136 8 157 0 137 1 25 0 138 8 161 0 139 1 33 0 140 1 37 0 141 1 41 0 146 9 213 0 150 8 169 0 151 8 173 0 152 8 177 0 153 8 181 0 154 8 185 0 155 8 189 0 156 8 193 0 157 8 197 0 158 8 201 0 164] #[0 9 217 0 2] #[0 4 98 0 2] #[0 4 102 0 2 0 6 0 31] #[0 4 106 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 4 110 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 4 114 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 4 118 0 2 0 4 0 5 0 6 0 13 0 20 0 29 0 31 0 45 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 67 0 72 0 74 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 95 1 37] #[1 2 46 0 3 2 46 0 4 2 46 0 6 9 221 0 7 2 46 0 31] #[1 6 133 0 6 9 225 0 31] #[1 4 66 0 1 9 229 0 4 9 177 0 21 4 66 0 31 9 233 0 167 9 185 0 173] #[1 4 122 0 20 0 18 0 25 0 18 0 26 0 18 0 27 0 18 0 28 0 18 0 30 0 18 0 33 0 18 0 34 0 18 0 35 0 18 0 39 0 18 0 65 0 18 0 102 9 237 0 169 9 241 0 170 9 245 0 171 6 237 0 172] #[0 9 221 0 7] #[1 4 66 0 1 9 229 0 4 9 177 0 21 4 66 0 31 9 249 0 167 9 185 0 173] #[1 2 169 0 102 8 17 0 114 2 181 0 116 9 253 0 117 10 1 0 174 1 201 1 34 1 205 1 35] #[1 10 5 0 1 10 9 0 176] #[0 4 126 0 1 0 31] #[0 4 130 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 4 134 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[0 4 138 0 6 0 54 0 74] #[0 10 13 0 20] #[0 4 142 0 2 0 6 0 31] #[0 4 146 0 2 0 6 0 31] #[0 4 150 0 2] #[0 4 154 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 16 0 17 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102 1 37] #[1 4 122 0 20 0 18 0 25 0 18 0 26 0 18 0 27 0 18 0 28 0 18 0 30 0 18 0 33 0 18 0 34 0 18 0 35 0 18 0 39 0 18 0 65 0 18 0 102 10 17 0 169 9 241 0 170 9 245 0 171 6 237 0 172] #[0 4 158 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 10 21 0 5] #[0 4 162 0 1 0 31] #[0 10 25 0 20] #[1 10 29 0 6 4 166 0 20] #[0 4 170 0 6 0 20] #[0 4 162 0 1 0 31] #[0 4 174 0 1 0 6 0 31] #[1 4 178 0 1 10 33 0 6 4 178 0 31] #[1 0 45 0 1 10 37 0 2 0 49 0 7 0 53 0 8 0 14 0 9 0 57 0 12 0 14 0 14 0 61 0 15 0 14 0 18 0 65 0 19 10 41 0 22 10 45 0 23 0 77 0 24 0 11 0 25 0 15 0 26 0 19 0 27 0 23 0 28 0 27 0 30 0 101 0 31 0 31 0 33 0 35 0 34 0 39 0 35 0 117 0 37 0 121 0 38 0 43 0 39 0 129 0 40 0 133 0 41 0 137 0 42 0 141 0 43 0 145 0 46 0 149 0 47 0 153 0 48 0 157 0 59 0 47 0 65 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 51 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 17 0 136 1 21 0 137 1 25 0 138 1 29 0 139 1 33 0 140 1 37 0 141 1 41 0 146 1 45 0 156 1 49 0 168 1 53 0 172 10 49 0 177 10 53 0 178 10 57 0 180 1 61 0 191 1 65 0 192 1 69 0 193 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35 2 117 1 39] #[0 4 182 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 4 186 0 1 0 2 0 6 0 31] #[0 10 61 0 20] #[0 4 190 0 1 0 4 0 21 0 31] #[0 4 194 0 1 0 21] #[1 0 18 0 25 0 18 0 26 0 18 0 27 0 18 0 28 0 18 0 30 0 18 0 33 0 18 0 34 0 18 0 35 0 18 0 39 0 18 0 65 0 18 0 102 10 65 0 171 6 237 0 172] #[1 2 169 0 102 8 17 0 114 2 181 0 116 10 69 0 117 1 201 1 34 1 205 1 35] #[0 4 198 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[1 0 46 0 4 10 73 0 7 0 46 0 29 0 46 0 84 0 46 0 89] #[1 10 77 0 7 2 129 0 29] #[1 0 45 0 1 10 81 0 2 0 49 0 7 0 53 0 8 0 14 0 9 0 57 0 12 0 14 0 14 0 61 0 15 0 14 0 18 0 65 0 19 0 69 0 22 0 73 0 23 0 77 0 24 0 11 0 25 0 15 0 26 0 19 0 27 0 23 0 28 0 27 0 30 0 101 0 31 0 31 0 33 0 35 0 34 0 39 0 35 0 117 0 37 0 121 0 38 0 43 0 39 0 129 0 40 0 133 0 41 0 137 0 42 0 141 0 43 0 145 0 46 0 149 0 47 0 153 0 48 0 157 0 59 0 47 0 65 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 51 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 17 0 136 1 21 0 137 1 25 0 138 1 29 0 139 1 33 0 140 1 37 0 141 1 41 0 146 1 45 0 156 1 49 0 168 1 53 0 172 10 85 0 178 1 57 0 180 1 61 0 191 1 65 0 192 1 69 0 193 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35 2 117 1 39] #[1 0 45 0 1 10 89 0 2 0 49 0 7 0 53 0 8 0 14 0 9 0 57 0 12 0 14 0 14 0 61 0 15 0 14 0 18 0 65 0 19 0 69 0 22 0 73 0 23 0 77 0 24 0 11 0 25 0 15 0 26 0 19 0 27 0 23 0 28 0 27 0 30 0 101 0 31 0 31 0 33 0 35 0 34 0 39 0 35 0 117 0 37 0 121 0 38 0 43 0 39 0 129 0 40 0 133 0 41 0 137 0 42 0 141 0 43 0 145 0 46 0 149 0 47 0 153 0 48 0 157 0 59 0 47 0 65 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 51 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 17 0 136 1 21 0 137 1 25 0 138 1 29 0 139 1 33 0 140 1 37 0 141 1 41 0 146 1 45 0 156 1 49 0 168 1 53 0 172 1 57 0 180 1 61 0 191 1 65 0 192 1 69 0 193 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35 4 65 1 39] #[1 10 93 0 29 0 142 0 84 0 142 0 89] #[0 4 202 0 1 0 4 0 21 0 31] #[0 4 206 0 6 0 20] #[0 4 210 0 1 0 6 0 31] #[1 1 213 0 7 0 57 0 12 1 78 0 20 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 253 0 149 1 49 0 168 10 97 0 179 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 5 5 0 241 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 1 78 0 20 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 253 0 149 1 49 0 168 10 101 0 179 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 5 5 0 241 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 4 214 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[1 0 45 0 1 10 105 0 2 0 49 0 7 0 53 0 8 0 14 0 9 0 57 0 12 0 14 0 14 0 61 0 15 0 14 0 18 0 65 0 19 0 69 0 22 0 73 0 23 0 77 0 24 0 11 0 25 0 15 0 26 0 19 0 27 0 23 0 28 0 27 0 30 0 101 0 31 0 31 0 33 0 35 0 34 0 39 0 35 0 117 0 37 0 121 0 38 0 43 0 39 0 129 0 40 0 133 0 41 0 137 0 42 0 141 0 43 0 145 0 46 0 149 0 47 0 153 0 48 0 157 0 59 0 47 0 65 0 165 0 73 0 169 0 76 0 173 0 77 0 177 0 78 0 181 0 80 0 185 0 81 0 189 0 82 0 193 0 83 0 197 0 84 0 201 0 89 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 0 51 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 1 17 0 136 1 21 0 137 1 25 0 138 1 29 0 139 1 33 0 140 1 37 0 141 1 41 0 146 1 45 0 156 1 49 0 168 1 53 0 172 1 57 0 180 1 61 0 191 1 65 0 192 1 69 0 193 1 73 0 194 1 77 0 195 1 81 0 196 1 85 0 197 1 89 0 198 1 93 0 199 1 97 0 200 1 101 0 201 1 105 0 202 1 109 0 203 1 113 0 204 1 117 0 205 1 121 0 206 1 125 0 207 1 129 0 208 1 133 0 209 1 137 0 210 1 141 0 211 1 145 0 212 1 149 0 213 1 153 0 214 1 157 0 215 1 161 0 216 1 165 0 217 1 169 0 218 1 173 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 1 193 0 247 1 197 1 7 1 201 1 34 1 205 1 35 4 65 1 39] #[0 4 218 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[1 10 109 0 22 10 113 0 23 5 57 0 77 5 61 0 102 5 65 0 246] #[0 10 117 0 20] #[0 10 121 0 20] #[0 4 222 0 1 0 2 0 8 0 9 0 12 0 14 0 18 0 19 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 65 0 102] #[0 10 125 0 7] #[0 10 129 0 7] #[0 10 133 0 31] #[0 10 137 0 31] #[1 1 213 0 7 0 57 0 12 1 78 0 20 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 253 0 149 1 49 0 168 10 141 0 179 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 5 5 0 241 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[1 1 213 0 7 0 57 0 12 1 78 0 20 0 69 0 22 0 73 0 23 0 81 0 25 0 85 0 26 0 89 0 27 0 93 0 28 0 97 0 30 0 105 0 33 0 109 0 34 0 113 0 35 0 173 0 77 0 197 0 84 0 201 0 89 1 217 0 91 1 221 0 92 1 225 0 93 1 229 0 94 0 205 0 96 0 209 0 97 0 213 0 98 0 217 0 99 0 221 0 100 0 225 0 101 1 233 0 102 0 233 0 107 0 237 0 108 0 241 0 111 0 245 0 112 0 249 0 113 0 253 0 115 1 1 0 116 1 5 0 120 1 9 0 121 1 13 0 122 4 253 0 149 1 49 0 168 10 145 0 179 1 57 0 180 1 241 0 213 1 245 0 214 1 249 0 215 1 253 0 216 2 1 0 217 2 5 0 218 2 9 0 219 1 177 0 237 1 181 0 238 1 185 0 239 1 189 0 240 5 5 0 241 2 13 0 247 2 17 0 248 2 21 0 249 2 25 0 250 2 29 0 251 2 33 0 252 2 37 0 253 2 41 0 254 2 45 0 255 2 49 1 0 2 53 1 1 2 57 1 2 2 61 1 3 2 65 1 4 2 69 1 5 2 73 1 6 1 197 1 7 1 201 1 34 1 205 1 35] #[0 4 226 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 4 230 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 10 149 0 20] #[0 10 153 0 20] #[0 10 157 0 31] #[0 10 161 0 31] #[0 4 234 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102] #[0 4 238 0 1 0 2 0 7 0 8 0 9 0 12 0 14 0 15 0 18 0 19 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 46 0 47 0 48 0 59 0 65 0 73 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 84 0 89 0 96 0 97 0 98 0 99 0 100 0 101 0 102]	).</body></methods><methods><class-id>Refactory.SmaCC.JavaParser class</class-id> <category>generated</category><body package="SmaCC Java" selector="definitionComment">definitionComment"%start goal block_statement expression ;%glr;%right ""else"";%prefix Java ;%suffix Node ;%root Program ;%hierarchy IfStatement (IfElseStatement);%hierarchy New (NewClass);%hierarchy Literal (IntegerLiteral FloatLiteral BooleanLiteral CharacterLiteral StringLiteral Null);%hierarchy PrimitiveType (BooleanType ByteType ShortType IntType LongType CharType FloatType DoubleType) ;%hierarchy Type (PrimitiveType ClassType ArrayType) ;%hierarchy Statement (Block LocalVariableDeclarationStatement EmptyStatement LabeledStatement					ExpressionStatement IfStatement SwitchStatement WhileStatement DoWhileStatement					ForStatement ForEachStatement BreakStatement ContinueStatement ReturnStatement ThrowStatement					SynchronizedStatement TryStatement AssertStatement);%hierarchy Expression (PostIncrementExpression PostDecrementExpression UnaryAddition UnarySubtraction					PreIncrementExpression PreDecrementExpression UnaryBitInvert UnaryNot					CastExpression BinaryExpression ConditionalExpression Assignment 					This ClassProperty FieldAccess MethodInvocation ArrayAccess					New Literal AssignmentExpression Name NewArray);%hierarchy Name (QualifiedName) ;%hierarchy SingleTypeImportDeclaration (TypeImportOnDemandDeclaration);%hierarchy VariableDeclaration (InitializedVariableDeclaration) ;&lt;DECIMAL_INTEGER&gt;	: 0 | [1-9] [0-9]*		;&lt;HEX_INTEGER&gt;	: 0[xX][0-9a-fA-F]+		;&lt;OCTAL_INTEGER&gt;	: 0[0-7]+		;&lt;EXPONENT&gt;	: [eE] [\-\+]? [0-9]+ 		;&lt;FLOAT_TYPE&gt;	: [fFdD]		;&lt;ESCAPE_SEQUENCE&gt;	: \\ ([btnfr\""\'\\] | ([0-3] [0-7]{0,2} | [4-7][0-7]?) | (u [0-9a-fA-F]{4,4}))		;&lt;INTEGER_LITERAL&gt;	: (&lt;DECIMAL_INTEGER&gt; | &lt;HEX_INTEGER&gt; | &lt;OCTAL_INTEGER&gt;) [lL]?		;&lt;FLOATING_POINT_LITERAL&gt;	: [0-9]+ \. [0-9]* &lt;EXPONENT&gt;? &lt;FLOAT_TYPE&gt;? 	| \. [0-9]+ &lt;EXPONENT&gt;? &lt;FLOAT_TYPE&gt;? 	| [0-9]+ &lt;EXPONENT&gt; &lt;FLOAT_TYPE&gt;? 	| [0-9]+ &lt;FLOAT_TYPE&gt;		;&lt;BOOLEAN_LITERAL&gt;	: true 	| false		;&lt;CHARACTER_LITERAL&gt;	: \' ([^\\\'] | &lt;ESCAPE_SEQUENCE&gt; ) \'		;&lt;STRING_LITERAL&gt;	: \"" ([^\\\""] | &lt;ESCAPE_SEQUENCE&gt; )* \""		;&lt;NULL_LITERAL&gt;	: null		;&lt;IDENTIFIER&gt;	: [a-zA-Z_$] (\w|$)*		;&lt;eol&gt;	: \r 	| \n 	| \r\n	;&lt;whitespace&gt;	: \s+	;&lt;comment&gt;	: \/\/ [^\r\n]* &lt;eol&gt; 	| /\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/ 	;&lt;patternToken&gt;	: (\`  [^\`]* \`)+	;goal 	: compilation_unit 	;# 19.3) Lexical Structure.literal 	: &lt;INTEGER_LITERAL&gt; 'token' {{IntegerLiteral}}	| &lt;FLOATING_POINT_LITERAL&gt; 'token' {{FloatLiteral}}	| &lt;BOOLEAN_LITERAL&gt; 'token' {{BooleanLiteral}}	| &lt;CHARACTER_LITERAL&gt; 'token' {{CharacterLiteral}}	| &lt;STRING_LITERAL&gt; 'token' {{StringLiteral}}	| &lt;NULL_LITERAL&gt; 'token' {{Null}}	;# 19.4) Types, Values, and Variablestype	: primitive_type 	| reference_type 	;primitive_type 	: numeric_type 	| ""boolean"" 'token' {{BooleanType}}	;numeric_type	: integral_type 	| floating_point_type 	;integral_type 	: ""byte"" 'token' {{ByteType}}	| ""short"" 'token' {{ShortType}}	| ""int"" 'token' {{IntType}}	| ""long"" 'token' {{LongType}}	| ""char"" 'token' {{CharType}}	;floating_point_type 	: ""float"" 'token' {{FloatType}}	| ""double"" 'token' {{DoubleType}}	;reference_type 	: class_or_interface_type 	| array_type 	;class_or_interface_type 	: type_name 'name' {{ClassType}}	;class_type 	: class_or_interface_type 	;interface_type 	: class_or_interface_type 	;		array_type 	: primitive_type 'baseType' dims {{ArrayType}}	| type_name 'baseType' dims {{ArrayType}}	;# 19.5) Namesname	: simple_name 	| qualified_name 	;simple_name 	: &lt;IDENTIFIER&gt; 'name' {{Name}}	;qualified_name 	: name 'nspace' ""."" 'period' &lt;IDENTIFIER&gt; 'name' {{QualifiedName}}	;# 19.6) ""package""scompilation_unit 	: package_declaration_opt 'packageDeclaration'		import_declarations_opt 		type_declarations_opt {{ProgramFile}}	;package_declaration_opt 	: package_declaration	|	;import_declarations_opt 	: import_declarations	|	;type_declarations_opt 	: type_declarations 	|	;import_declarations 	: import_declaration 'import' 	| import_declarations import_declaration 'import'	;type_declarations 	: type_declaration 'typeDeclaration' 	| type_declarations type_declaration 'typeDeclaration' 	;package_declaration 	: annotations ""package"" 'packageToken' name 'name' "";"" 'semicolon' {{PackageDeclaration}}	;import_declaration 	: single_type_import_declaration 	| type_import_on_demand_declaration 	;single_type_import_declaration 	: ""import"" 'importToken' static_opt name 'name' "";"" 'semicolon' {{SingleTypeImportDeclaration}}	;type_import_on_demand_declaration 	: ""import"" 'importToken' static_opt name 'name' ""."" 'period' ""*"" 'star' "";"" 'semicolon' {{TypeImportOnDemandDeclaration}}	;type_declaration 	: class_declaration 	| interface_declaration 	| "";"" 'semicolon' {{EmptyDeclaration}}	;# 19.7) Productions used only in the LALR(1) grammarmodifiers_opt	:	| modifiers 	;modifiers 	: modifier 'modifier'	| modifiers modifier 'modifier'	;modifier 	: ""public"" 'token' {{Modifier}}	| ""protected"" 'token' {{Modifier}}	| ""private"" 'token' {{Modifier}}	| ""static"" 'token' {{Modifier}}	| ""abstract"" 'token' {{Modifier}}	| ""final"" 'token' {{Modifier}}	| ""native"" 'token' {{Modifier}}	| ""synchronized"" 'token' {{Modifier}}	| ""transient"" 'token' {{Modifier}}	| ""volatile"" 'token' {{Modifier}}	| ""strictfp"" 'token' {{Modifier}} # note that semantic analysis must check that the	                 # context of the modifier allows strictfp.	| annotation	;# 19.8) Classes# 19.8.1) Class Declaration:class_declaration 	: modifiers_opt ""class"" 'classToken' &lt;IDENTIFIER&gt; 'name' type_parameters_opt 'typeParameters' super_opt interfaces_opt class_body {{ClassDeclaration}}	| enum_declaration	;super 	: ""extends"" 'extendsToken' class_type 'superclass'	;super_opt 	: 	| super 	;interfaces 	: ""implements"" 'implementsToken' interface_type_list	;interfaces_opt	: 	| interfaces 	;interface_type_list 	: interface_type 'interface' 	| interface_type_list "","" 'comma' interface_type 'interface' 	;class_body 	: ""{"" 'left' class_body_declarations_opt ""}"" 'right'	;class_body_declarations_opt 	: 	| class_body_declarations	;class_body_declarations 	: class_body_declaration 'declaration' 	| class_body_declarations class_body_declaration 'declaration' 	;class_body_declaration 	: class_member_declaration 	| static_initializer 	| constructor_declaration 	| block 	;class_member_declaration 	: field_declaration 	| method_declaration 	| class_declaration	| interface_declaration 	| "";"" 'semicolon' {{EmptyDeclaration}}	;# 19.8.2) Field Declarationsfield_declaration 	: modifiers_opt type 'type' variable_declarators "";"" 'semicolon' {{FieldDeclaration}}	;variable_declarators 	: variable_declarator 'variableDeclaration' 	| variable_declarators "","" 'comma' variable_declarator 'variableDeclaration'	;variable_declarator 	: variable_declarator_id 'variable' {{VariableDeclaration}}	| variable_declarator_id 'variable' ""="" 'equals' variable_initializer 'initializer' {{InitializedVariableDeclaration}}	;variable_declarator_id 	: &lt;IDENTIFIER&gt; 'name' {{VariableName}}	| variable_declarator_id 'variable' ""["" 'left' ""]"" 'right' {{ArrayVariableName}}	;variable_initializer 	: expression 	| array_initializer 	;# 19.8.3) Method Declarationsmethod_declaration 	: method_header method_body 'body' {{MethodDeclaration}}	;method_header 	: modifiers_opt type 'type' method_declarator 'declarator' throws_opt 'throws'	| modifiers_opt void 'type' method_declarator 'declarator' throws_opt 'throws'	;####void 	: ""void"" 'voidToken' {{VoidType}} 	;####method_declarator 	: &lt;IDENTIFIER&gt; 'name' ""("" 'left' formal_parameter_list_opt "")"" 'right' {{MethodDeclarator}}	| method_declarator 'declarator' ""["" 'left' ""]"" 'right' {{ArrayMethodDeclarator}} # deprecated	# be careful; the above production also allows 'void foo() []'	;formal_parameter_list_opt 	: 	| formal_parameter_list 	;formal_parameter_list 	: formal_parameter 'parameter' 	| formal_parameter_list "","" 'comma' formal_parameter 'parameter' 	;formal_parameter 	: variable_modifiers type 'type' variable_declarator_id 'variable' {{Parameter}}	;throws_opt 	: 	| throws 	;throws 	: ""throws"" 'throwsToken' class_type_list {{Throws}}	;class_type_list 	: class_type 'classType'	| class_type_list "","" 'comma' class_type 'classType' 	;method_body 	: block 	| "";"" 'semicolon' {{EmptyMethodBody}}	;# 19.8.4) Static Initializersstatic_initializer 	: ""static"" 'staticToken' block 'block' {{StaticInitializer}}	;# 19.8.5) Constructor Declarationsconstructor_declaration 	: modifiers_opt constructor_declarator throws_opt 'throws'			constructor_body 'body' {{ConstructorDeclaration}}	;constructor_declarator 	: simple_name 'name' ""("" 'left' formal_parameter_list_opt "")"" 'right'	;constructor_body 	: ""{"" 'left' explicit_constructor_invocation 'constructorInvocation'			block_statements ""}"" 'right' {{ConstructorBody}}	| ""{"" 'left' explicit_constructor_invocation 'constructorInvocation' ""}"" 'right' {{ConstructorBody}}	| ""{"" 'left' block_statements ""}"" 'right' {{ConstructorBody}}	| ""{"" 'left' ""}"" 'right' {{ConstructorBody}}	;explicit_constructor_invocation 	: ""this"" 'thisToken' ""("" 'left' argument_list_opt "")"" 'right' "";"" 'semicolon' {{ThisConstructorInvocation}}	| ""super"" 'superToken' ""("" 'left' argument_list_opt "")"" 'right' "";"" 'semicolon' {{SuperConstructorInvocation}}	| primary 'primary' ""."" 'period' ""this"" 'thisToken' ""("" 'left' argument_list_opt "")"" 'right' "";"" 'semicolon' {{ThisConstructorInvocation}}	| primary 'primary' ""."" 'period' ""super"" 'superToken' ""("" 'left' argument_list_opt "")"" 'right' "";"" 'semicolon' {{SuperConstructorInvocation}}	;# 19.9) Interfaces# 19.9.1) Interface Declarationsinterface_declaration 	: modifiers_opt ""interface"" 'interfaceToken' &lt;IDENTIFIER&gt; 'name' type_parameters_opt 'typeParameters' extends_interfaces_opt 			interface_body {{Interface}}	;extends_interfaces_opt 	: 	| extends_interfaces 	;extends_interfaces 	: ""extends"" 'extendsToken' interface_type 'interfaceType' 	| extends_interfaces "","" 'comma' interface_type 'interfaceType' 	;interface_body 	: ""{"" 'left' interface_member_declarations_opt ""}"" 'right'	;interface_member_declarations_opt 	: 	| interface_member_declarations 	;interface_member_declarations 	: interface_member_declaration 'declaration'	| interface_member_declarations interface_member_declaration 'declaration'	;interface_member_declaration 	: constant_declaration 	| abstract_method_declaration 	| class_declaration 	| interface_declaration 	;constant_declaration 	: field_declaration 	# need to semantically check that modifiers of field declaration	# include only PUBLIC, ""static"", or ""final"". Other modifiers are	# disallowed.	;abstract_method_declaration 	: method_header "";"" 'semicolon' {{AbstractMethodDeclaration}}	;# 19.10) Arraysarray_initializer 	: ""{"" 'left' variable_initializers "","" 'comma' ""}"" 'right' {{ArrayInitializer}}	| ""{"" 'left' variable_initializers ""}"" 'right' {{ArrayInitializer}}	| ""{"" 'left' "","" 'comma' ""}"" 'right' {{ArrayInitializer}}	| ""{"" 'left' ""}"" 'right' {{ArrayInitializer}}	;variable_initializers 	: variable_initializer 'initializer' 	| variable_initializers "","" 'comma' variable_initializer 'initializer'	;# 19.11) Blocks and Statementsblock 	:	""{"" 'left' block_statements_opt ""}"" 'right' {{Block}}	;block_statements_opt 	: 	| block_statements 	;block_statements 	: block_statement 'statement' 	| block_statements block_statement 'statement' 	;block_statement 	: local_variable_declaration_statement 	| statement 	| class_declaration 	| interface_declaration 	;local_variable_declaration_statement 	: local_variable_declaration 'declaration' "";"" 'semicolon' {{LocalVariableDeclarationStatement}}	;local_variable_declaration 	: variable_modifiers type 'type' variable_declarators {{LocalVariableDeclaration}}	;statement 	: statement_without_trailing_substatement 	| labeled_statement 	| if_then_statement 	| if_then_else_statement 	| while_statement 	| for_statement	| foreach_statement	;statement_without_trailing_substatement 	: block 	| empty_statement 	| expression_statement 	| switch_statement 	| do_statement 	| break_statement 	| continue_statement 	| return_statement 	| synchronized_statement 	| throw_statement 	| try_statement 	| assert_statement	;empty_statement 	: "";"" 'semicolon' {{EmptyStatement}}	;labeled_statement 	: &lt;IDENTIFIER&gt; 'identifier' "":"" 'colon' statement 'statement' {{LabeledStatement}}	;expression_statement 	: statement_expression 'expression' "";"" 'semicolon' {{ExpressionStatement}}	;statement_expression 	: assignment 	| preincrement_expression 	| predecrement_expression 	| postincrement_expression 	| postdecrement_expression 	| method_invocation 	| class_instance_creation_expression 	;if_then_statement 	: ""if"" 'ifToken' ""("" 'left' expression 'expression' "")"" 'right' statement 'trueStatement' {{IfStatement}}	;if_then_else_statement 	: ""if"" 'ifToken' ""("" 'left' expression 'expression' "")"" 'right' statement 'trueStatement'			""else"" 'elseToken' statement 'falseStatement' {{IfElseStatement}}	;switch_statement 	: ""switch"" 'switchToken' ""("" 'left' expression 'expression' "")"" 'right' switch_block 'block' {{SwitchStatement}}	;switch_block 	: ""{"" 'left' switch_block_statement_groups switch_labels ""}"" 'right' {{SwitchBlock}}	| ""{"" 'left' switch_block_statement_groups ""}"" 'right' {{SwitchBlock}}	| ""{"" 'left' switch_labels ""}"" 'right' {{SwitchBlock}}	| ""{"" 'left' ""}"" 'right' {{SwitchBlock}}	;switch_block_statement_groups 	: switch_block_statement_group 'statementGroup' 	| switch_block_statement_groups switch_block_statement_group 'statementGroup' 	;switch_block_statement_group 	: switch_labels block_statements {{SwitchBlockStatementGroup}}	;switch_labels 	: switch_label 'label' 	| switch_labels switch_label 'label'	;switch_label 	: ""case"" 'caseToken' constant_expression 'constant' "":"" 'colon' {{SwitchLabel}}	| ""default"" 'defaultToken' "":"" 'colon' {{DefaultLabel}}	;while_statement 	: ""while"" 'whileToken' ""("" 'left' expression 'expression' "")"" 'right' statement 'statement' {{WhileStatement}}	;do_statement 	: ""do"" 'doToken' statement 'statement' ""while"" 'whileToken' ""("" 'left' expression 'expression' "")"" 'right' "";"" 'semicolon' {{DoWhileStatement}}	;for_statement 	: ""for"" 'forToken' ""("" 'left' for_init_opt 'initial' "";"" 'firstSemicolon' expression_opt 'test' "";"" 'secondSemicolon'			for_update_opt 'update' "")"" 'right' statement 'statement' {{ForStatement}}	;for_init_opt 	: 	| for_init 	;for_init 	: statement_expression_list 	| local_variable_declaration 	;for_update_opt 	: 	| for_update 	;for_update 	: statement_expression_list 	;statement_expression_list 	: statement_expression 'expression' {{StatementExpressionList}}	| statement_expression_list "","" 'comma' statement_expression 'expression' {{StatementExpressionList}}	;identifier_opt 	: 	| &lt;IDENTIFIER&gt; 	;break_statement 	: ""break"" 'breakToken' identifier_opt 'identifier' "";"" 'semicolon' {{BreakStatement}}	;continue_statement 	: ""continue"" 'continueToken' identifier_opt 'identifier' "";"" 'semicolon' {{ContinueStatement}}	;return_statement 	: ""return"" 'returnToken' expression_opt 'expression' "";"" 'semicolon' {{ReturnStatement}}	;throw_statement 	: ""throw"" 'throwToken' expression 'expression' "";"" 'semicolon' {{ThrowStatement}}	;synchronized_statement 	: ""synchronized"" 'synchronizedToken' ""("" 'left' expression 'expression' "")"" 'right' block 'block' {{SynchronizedStatement}}	;try_statement 	: ""try"" 'tryToken' block 'block' catches {{TryStatement}}	| ""try"" 'tryToken' block 'block' catches_opt finally 'finally' {{TryStatement}}	;catches_opt 	: 	| catches 	;catches 	: catch_clause 'catch'	| catches catch_clause 'catch'	;catch_clause 	: ""catch"" 'catchToken' ""("" 'left' formal_parameter "")"" 'right' block 'block' {{CatchClause}}	;finally 	: ""finally"" 'finallyToken' block 'block' {{FinallyClause}}	;assert_statement	: ""assert"" 'assertToken' expression 'testExpression' "";"" 'semicolon' {{AssertStatement}}	| ""assert"" 'assertToken' expression 'testExpression' "":"" 'colon' expression 'messageExpression' "";"" 'semicolon' {{AssertStatement}}	;# 19.12) Expressionsprimary 	: primary_no_new_array 	| array_creation_expression 	;primary_no_new_array 	: literal 	| ""this"" 'thisToken' {{This}}	| ""("" 'left' expression "")"" 'right' {{Expression}}	| class_instance_creation_expression 	| field_access 	| method_invocation 	| array_access 	| primitive_type 'type' ""."" 'period' ""class"" 'classToken' {{ClassProperty}}	| void 'type' ""."" 'period' ""class"" 'classToken' {{ClassProperty}}	| array_type 'type' ""."" 'period' ""class"" 'classToken' {{ClassProperty}}	| name 'name' ""."" 'period' ""class"" 'classToken' {{ClassProperty}} ###???	| name 'name' ""."" 'period' ""this"" 'thisToken' {{ClassProperty}} ###???	;class_instance_creation_expression 	: ""new"" 'newToken' class_type 'type' ""("" 'left' argument_list_opt "")"" 'right' {{New}}	| ""new"" 'newToken' class_type 'type' ""("" 'left' argument_list_opt "")"" 'right' class_body {{NewClass}}	| primary 'primary' ""."" 'period' ""new"" 'newToken' &lt;IDENTIFIER&gt; 'name' 			""("" 'left' argument_list_opt "")"" 'right' {{New}}	| primary 'primary' ""."" 'period' ""new"" 'newToken' &lt;IDENTIFIER&gt; 'name' 			""("" 'left' argument_list_opt "")"" 'right' class_body {{NewClass}}	;argument_list_opt 	: 	| argument_list 	;argument_list 	: expression 'expression' 	| argument_list "","" 'comma' expression 'expression'	;array_creation_expression 	: ""new"" 'newToken' primitive_type 'type' dim_exprs dims_opt {{NewArray}}	| ""new"" 'newToken' class_or_interface_type 'type' dim_exprs dims_opt {{NewArray}}	| ""new"" 'newToken' primitive_type 'type' dims array_initializer 'initializer' {{NewArray}}	| ""new"" 'newToken' class_or_interface_type 'type' dims array_initializer 'initializer' {{NewArray}}	;dim_exprs 	: dim_expr 'dimExpression' 	| dim_exprs dim_expr 'dimExpression' 	;dim_expr 	: ""["" 'left' expression 'expression' ""]"" 'right' {{DimensionExpression}}	;dims_opt 	: 	| dims 	;dims 	: empty_dim_expr 'emptyDim'	| dims empty_dim_expr 'emptyDim'	;empty_dim_expr	: ""["" 'left' ""]"" 'right' {{EmptyDimensionList}}	;field_access 	: primary 'receiver' ""."" 'period' &lt;IDENTIFIER&gt; 'name' {{FieldAccess}}	| ""super"" 'superToken' ""."" 'period' &lt;IDENTIFIER&gt; 'name' {{FieldAccess}}	| name 'receiver' ""."" 'superPeriod' ""super"" 'superToken' ""."" 'period' &lt;IDENTIFIER&gt; 'name' {{FieldAccess}}###???	;method_invocation 	: name 'name' ""("" 'left' argument_list_opt "")"" 'right' {{MethodInvocation}}	| primary 'receiver' ""."" 'period' identifierName 'name' ""("" 'left' argument_list_opt "")"" 'right' {{MethodInvocation}}	| ""super"" 'superToken' ""."" 'period' identifierName 'name' ""("" 'left' argument_list_opt "")"" 'right' {{MethodInvocation}}	| name 'receiver' ""."" 'superPeriod' ""super"" 'superToken' ""."" 'period' identifierName 'name' ""("" 'left' argument_list_opt "")"" 'right' {{MethodInvocation}}	;####identifierName 	: &lt;IDENTIFIER&gt; 'name' {{IdentifierName}}	;####array_access 	: name 'array' ""["" 'left' expression 'expression' ""]"" 'right' {{ArrayAccess}}	| primary_no_new_array 'array' ""["" 'left' expression 'expression' ""]"" 'right' {{ArrayAccess}}	;postfix_expression 	: primary 	| name 	| postincrement_expression 	| postdecrement_expression 	;postincrement_expression 	: postfix_expression 'expression' ""++"" 'plusPlus' {{PostIncrementExpression}}	;postdecrement_expression 	: postfix_expression 'expression' ""--"" 'minusMinus' {{PostDecrementExpression}}	;unary_expression 	: preincrement_expression 	| predecrement_expression 	| ""+"" 'plus' unary_expression 'expression' {{UnaryAddition}}	| ""-"" 'minus' unary_expression 'expression' {{UnarySubtraction}}	| unary_expression_not_plus_minus 	;preincrement_expression 	: ""++"" 'plusPlus' unary_expression 'expression' {{PreIncrementExpression}}	;predecrement_expression 	: ""--"" 'minusMinus' unary_expression 'expression' {{PreDecrementExpression}}	;unary_expression_not_plus_minus 	: postfix_expression 	| ""~"" 'tilde' unary_expression 'expression' {{UnaryBitInvert}}	| ""!"" 'bang' unary_expression 'expression' {{UnaryNot}}	| cast_expression 	;cast_expression 	: ""("" 'left' primitive_type 'type' dims_opt "")"" 'right' unary_expression 'expression' {{CastExpression}}	| ""("" 'left' expression 'type' "")"" 'right' unary_expression_not_plus_minus 'expression' {{CastExpression}}	| ""("" 'left' name 'type' dims "")"" 'right' unary_expression_not_plus_minus 'expression' {{CastExpression}}	;multiplicative_expression 	: unary_expression 	| multiplicative_expression 'leftExpression' ""*"" 'op' unary_expression 'rightExpression' {{BinaryExpression}}	| multiplicative_expression 'leftExpression' ""/"" 'op' unary_expression 'rightExpression' {{BinaryExpression}}	| multiplicative_expression 'leftExpression' ""%"" 'op' unary_expression 'rightExpression' {{BinaryExpression}}	;additive_expression 	: multiplicative_expression 	| additive_expression 'leftExpression' ""+"" 'op' multiplicative_expression 'rightExpression' {{BinaryExpression}}	| additive_expression 'leftExpression' ""-"" 'op' multiplicative_expression 'rightExpression' {{BinaryExpression}}	;shift_expression 	: additive_expression 	| shift_expression 'leftExpression' ""&lt;&lt;"" 'op' additive_expression 'rightExpression' {{BinaryExpression}}	| shift_expression 'leftExpression' ""&gt;&gt;"" 'op' additive_expression 'rightExpression' {{BinaryExpression}}	| shift_expression 'leftExpression' ""&gt;&gt;&gt;"" 'op' additive_expression 'rightExpression' {{BinaryExpression}}	;relational_expression 	: shift_expression 	| relational_expression 'leftExpression' ""&lt;"" 'op' shift_expression 'rightExpression' {{BinaryExpression}}	| relational_expression 'leftExpression' ""&gt;"" 'op' shift_expression 'rightExpression' {{BinaryExpression}}	| relational_expression 'leftExpression' ""&lt;="" 'op' shift_expression 'rightExpression' {{BinaryExpression}}	| relational_expression 'leftExpression' ""&gt;="" 'op' shift_expression 'rightExpression' {{BinaryExpression}}	| relational_expression 'leftExpression' ""instanceof"" 'op' reference_type 'rightExpression' {{BinaryExpression}}	;equality_expression 	: relational_expression 	| equality_expression 'leftExpression' ""=="" 'op' relational_expression 'rightExpression' {{BinaryExpression}}	| equality_expression 'leftExpression' ""!="" 'op' relational_expression 'rightExpression' {{BinaryExpression}}	;and_expression 	: equality_expression 	| and_expression 'leftExpression' ""&amp;"" 'op' equality_expression 'rightExpression' {{BinaryExpression}}	;exclusive_or_expression 	: and_expression 	| exclusive_or_expression 'leftExpression' ""^"" 'op' and_expression 'rightExpression' {{BinaryExpression}}	;inclusive_or_expression 	: exclusive_or_expression 	| inclusive_or_expression 'leftExpression' ""|"" 'op' exclusive_or_expression 'rightExpression' {{BinaryExpression}}	;conditional_and_expression 	: inclusive_or_expression 	| conditional_and_expression 'leftExpression' ""&amp;&amp;"" 'op' inclusive_or_expression 'rightExpression' {{BinaryExpression}}	;conditional_or_expression 	: conditional_and_expression 	| conditional_or_expression 'leftExpression' ""||"" 'op' conditional_and_expression 'rightExpression' {{BinaryExpression}}	;conditional_expression 	: conditional_or_expression 	| conditional_or_expression 'testExpression' ""?"" 'questionMark' expression 'trueExpression'			"":"" 'colon' conditional_expression 'falseExpression' {{ConditionalExpression}}	;assignment_expression 	: conditional_expression 	| assignment {{AssignmentExpression}}	;assignment 	: left_hand_side 'variable' assignment_operator 'op' assignment_expression 'value' {{Assignment}}	;left_hand_side 	: name 	| field_access 	| array_access 	;assignment_operator 	: ""="" 	| ""*="" 	| ""/="" 	| ""%="" 	| ""+="" 	| ""-="" 	| ""&lt;&lt;="" 	| ""&gt;&gt;="" 	| ""&gt;&gt;&gt;="" 	| ""&amp;="" 	| ""^="" 	| ""|="" 	;expression_opt 	: 	| expression 	;expression 	: assignment_expression 	;constant_expression 	: expression 	;####annotations	:	| annotations annotation 'annotation'	;annotation	: ""@"" 'at' name 'name' annotation_args_opt {{Annotation}}	;annotation_args_opt	:	| ""("" 'left' annotation_args "")"" 'right'	;annotation_args	: 	| elementValuePairs	| elementValue 'value'	;elementValuePairs	: elementValuePair 'value'	| elementValuePairs "","" 'comma' elementValuePair 'value'	;elementValuePair	: &lt;IDENTIFIER&gt; 'name' ""="" 'equals' elementValue 'value' {{ElementValuePair}}	;elementValue	: conditional_expression	| annotation	| elementValueArrayInitializer	;elementValueArrayInitializer	: ""{"" 'left' elementValues_opt comma_opt ""}"" 'right' {{ElementArrayInitializer}}	;elementValues_opt	:	| elementValues	;elementValues	: elementValue 'value'	| elementValues "","" 'comma' elementValue 'value'	;comma_opt	:	| "","" 'comma'	;static_opt	:	| ""static"" 'staticToken'	;enum_declaration	: modifiers_opt ""enum"" 'enumToken' &lt;IDENTIFIER&gt; 'name' interfaces_opt enum_body {{EnumDeclaration}}	;enum_body	: ""{"" 'left' enum_constants_opt comma_opt enum_body_declarations_opt ""}"" 'right'	;enum_constants_opt	:	| enum_constants	;enum_constants	: enum_constant 'constant'	| enum_constants "","" 'comma' enum_constant 'constant'	;enum_constant	: annotations &lt;IDENTIFIER&gt; 'name' arguments_opt class_body_opt {{EnumConstant}}	;arguments_opt	:	| ""("" 'leftParen' argument_list_opt "")"" 'rightParen'	;class_body_opt	:	| class_body	;enum_body_declarations_opt	:	| enum_body_declarations	;enum_body_declarations	: "";"" 'semicolon' class_body_declarations_opt	;type_parameters_opt	:	| ""&lt;"" 'left' type_parameters ""&gt;"" 'right' {{TypeParameters}}	;type_parameters	: type_parameter 'parameter'	| type_parameters "","" 'comma' type_parameter 'parameter'	;type_parameter	: &lt;IDENTIFIER&gt; 'name' extends_type_parameter_opt {{TypeParameter}}	;extends_type_parameter_opt	:	| ""extends"" 'extendsToken' type_bound 	;type_bound	: type 'type'	| type_bound ""&amp;"" 'amp' type 'type'	;type_arguments_opt	:	| ""&lt;"" 'left' type_arguments ""&gt;"" 'right'	;type_arguments	: type_argument 'argument'	| type_arguments "","" 'comma' type_argument 'argument'	;type_argument	: type 'type' {{TypeArgument}}	| ""?"" 'questionMark' type_argument_type {{TypeArgument}}	;type_argument_type	: ""extends"" 'token' type 'type'	| ""super"" 'token' type 'type'	;type_name	: simple_type_name 	| qualified_type_name 	;simple_type_name 	: &lt;IDENTIFIER&gt; 'name' type_arguments_opt {{TypeName}}	;qualified_type_name 	: type_name 'nspace' ""."" 'period' &lt;IDENTIFIER&gt; 'name' type_arguments_opt {{QualifiedTypeName}}	;foreach_statement 	: ""for"" 'forToken' ""("" 'left' variable_modifiers type 'type' &lt;IDENTIFIER&gt; "":"" 'colon' expression 'expression' "")"" 'right' statement 'statement' {{ForEachStatement}}	;variable_modifiers	: 	| variable_modifiers variable_modifier 'modifier'	;variable_modifier	: ""final"" 'token' {{Modifier}}	| annotation	;"</body><body package="SmaCC Java" selector="startingStateForblock_statement">startingStateForblock_statement	^3</body><body package="SmaCC Java" selector="startingStateForexpression">startingStateForexpression	^4</body><body package="SmaCC Java" selector="startingStateForgoal">startingStateForgoal	^2</body></methods><methods><class-id>Refactory.SmaCC.JavaParser class</class-id> <category>file types</category><body package="SmaCC Java" selector="fileExtension">fileExtension	^'.java'</body><body package="SmaCC Java" selector="fileExtensionType">fileExtensionType	^'Java files'</body></methods><methods><class-id>Refactory.SmaCC.JavaParser class</class-id> <category>generated-accessing</category><body package="SmaCC Java" selector="scannerClass">scannerClass	^JavaScanner</body></methods><methods><class-id>Refactory.SmaCC.JavaThrowStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitThrowStatement: self</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression)</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="throwToken">throwToken	^throwToken</body><body package="SmaCC Java" selector="throwToken:">throwToken: aSmaCCToken	throwToken := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#throwToken #semicolon)</body></methods><methods><class-id>Refactory.SmaCC.JavaFieldDeclarationNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitFieldDeclaration: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#modifiers #variableDeclarations)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="modifiers">modifiers	^modifiers</body><body package="SmaCC Java" selector="modifiers:">modifiers: anOrderedCollection	self setParents: self modifiers to: nil.	modifiers := anOrderedCollection.	self setParents: self modifiers to: self</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#type)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'modifier' put: 'modifiers';		at: 'variableDeclaration' put: 'variableDeclarations';		at: 'comma' put: 'commas';		yourself] once</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#semicolon)</body><body package="SmaCC Java" selector="type">type	^type</body><body package="SmaCC Java" selector="type:">type: aJavaTypeNode	self type notNil ifTrue: [self type parent: nil].	type := aJavaTypeNode.	self type notNil ifTrue: [self type parent: self]</body><body package="SmaCC Java" selector="variableDeclarations">variableDeclarations	^variableDeclarations</body><body package="SmaCC Java" selector="variableDeclarations:">variableDeclarations: anOrderedCollection	self setParents: self variableDeclarations to: nil.	variableDeclarations := anOrderedCollection.	self setParents: self variableDeclarations to: self</body></methods><methods><class-id>Refactory.SmaCC.JavaFieldDeclarationNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	modifiers := OrderedCollection new: 2.	variableDeclarations := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaCastExpressionNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitCastExpression: self</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#emptyDims)</body><body package="SmaCC Java" selector="emptyDims">emptyDims	^emptyDims</body><body package="SmaCC Java" selector="emptyDims:">emptyDims: anOrderedCollection	self setParents: self emptyDims to: nil.	emptyDims := anOrderedCollection.	self setParents: self emptyDims to: self</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#type #expression)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'emptyDim' put: 'emptyDims';		at: 'left' put: 'lefts';		at: 'right' put: 'rights';		yourself] once</body><body package="SmaCC Java" selector="type">type	^type</body><body package="SmaCC Java" selector="type:">type: aJavaProgramNode	self type notNil ifTrue: [self type parent: nil].	type := aJavaProgramNode.	self type notNil ifTrue: [self type parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaCastExpressionNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	emptyDims := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaQualifiedTypeNameNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitQualifiedTypeName: self</body><body package="SmaCC Java" selector="arguments">arguments	^arguments</body><body package="SmaCC Java" selector="arguments:">arguments: anOrderedCollection	self setParents: self arguments to: nil.	arguments := anOrderedCollection.	self setParents: self arguments to: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#arguments)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="name">name	^name</body><body package="SmaCC Java" selector="name:">name: aSmaCCToken	name := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#nspace)</body><body package="SmaCC Java" selector="nspace">nspace	^nspace</body><body package="SmaCC Java" selector="nspace:">nspace: aJavaProgramNode	self nspace notNil ifTrue: [self nspace parent: nil].	nspace := aJavaProgramNode.	self nspace notNil ifTrue: [self nspace parent: self]</body><body package="SmaCC Java" selector="period">period	^period</body><body package="SmaCC Java" selector="period:">period: aSmaCCToken	period := aSmaCCToken</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'argument' put: 'arguments';		at: 'comma' put: 'commas';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#period #name #left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaQualifiedTypeNameNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	arguments := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaBooleanTypeNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitBooleanType: self</body></methods><methods><class-id>Refactory.SmaCC.JavaPreIncrementExpressionNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitPreIncrementExpression: self</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression)</body><body package="SmaCC Java" selector="plusPlus">plusPlus	^plusPlus</body><body package="SmaCC Java" selector="plusPlus:">plusPlus: aSmaCCToken	plusPlus := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#plusPlus)</body></methods><methods><class-id>Refactory.SmaCC.JavaTypeArgumentNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitTypeArgument: self</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#type)</body><body package="SmaCC Java" selector="questionMark">questionMark	^questionMark</body><body package="SmaCC Java" selector="questionMark:">questionMark: aSmaCCToken	questionMark := aSmaCCToken</body><body package="SmaCC Java" selector="token">token	^token</body><body package="SmaCC Java" selector="token:">token: aSmaCCToken	token := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#questionMark #token)</body><body package="SmaCC Java" selector="type">type	^type</body><body package="SmaCC Java" selector="type:">type: aJavaTypeNode	self type notNil ifTrue: [self type parent: nil].	type := aJavaTypeNode.	self type notNil ifTrue: [self type parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaTypeParametersNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitTypeParameters: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#parameters)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="parameters">parameters	^parameters</body><body package="SmaCC Java" selector="parameters:">parameters: anOrderedCollection	self setParents: self parameters to: nil.	parameters := anOrderedCollection.	self setParents: self parameters to: self</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'parameter' put: 'parameters';		at: 'comma' put: 'commas';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaTypeParametersNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	parameters := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaNewArrayNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitNewArray: self</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#dimExpressions #emptyDims)</body><body package="SmaCC Java" selector="dimExpressions">dimExpressions	^dimExpressions</body><body package="SmaCC Java" selector="dimExpressions:">dimExpressions: anOrderedCollection	self setParents: self dimExpressions to: nil.	dimExpressions := anOrderedCollection.	self setParents: self dimExpressions to: self</body><body package="SmaCC Java" selector="emptyDims">emptyDims	^emptyDims</body><body package="SmaCC Java" selector="emptyDims:">emptyDims: anOrderedCollection	self setParents: self emptyDims to: nil.	emptyDims := anOrderedCollection.	self setParents: self emptyDims to: self</body><body package="SmaCC Java" selector="initializer">initializer	^initializer</body><body package="SmaCC Java" selector="initializer:">initializer: aJavaArrayInitializerNode	self initializer notNil ifTrue: [self initializer parent: nil].	initializer := aJavaArrayInitializerNode.	self initializer notNil ifTrue: [self initializer parent: self]</body><body package="SmaCC Java" selector="newToken">newToken	^newToken</body><body package="SmaCC Java" selector="newToken:">newToken: aSmaCCToken	newToken := aSmaCCToken</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#type #initializer)</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'dimExpression' put: 'dimExpressions';		at: 'emptyDim' put: 'emptyDims';		at: 'left' put: 'lefts';		at: 'right' put: 'rights';		yourself] once</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#newToken)</body><body package="SmaCC Java" selector="type">type	^type</body><body package="SmaCC Java" selector="type:">type: aJavaTypeNode	self type notNil ifTrue: [self type parent: nil].	type := aJavaTypeNode.	self type notNil ifTrue: [self type parent: self]</body></methods><methods><class-id>Refactory.SmaCC.JavaNewArrayNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	dimExpressions := OrderedCollection new: 2.	emptyDims := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaReturnStatementNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitReturnStatement: self</body><body package="SmaCC Java" selector="expression">expression	^expression</body><body package="SmaCC Java" selector="expression:">expression: aJavaExpressionNode	self expression notNil ifTrue: [self expression parent: nil].	expression := aJavaExpressionNode.	self expression notNil ifTrue: [self expression parent: self]</body><body package="SmaCC Java" selector="nodeVariables">nodeVariables	^#(#expression)</body><body package="SmaCC Java" selector="returnToken">returnToken	^returnToken</body><body package="SmaCC Java" selector="returnToken:">returnToken: aSmaCCToken	returnToken := aSmaCCToken</body><body package="SmaCC Java" selector="semicolon">semicolon	^semicolon</body><body package="SmaCC Java" selector="semicolon:">semicolon: aSmaCCToken	semicolon := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#returnToken #semicolon)</body></methods><methods><class-id>Refactory.SmaCC.JavaArrayInitializerNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitArrayInitializer: self</body><body package="SmaCC Java" selector="commas">commas	^commas</body><body package="SmaCC Java" selector="commas:">commas: anOrderedCollection	commas := anOrderedCollection</body><body package="SmaCC Java" selector="compositeNodeVariables">compositeNodeVariables	^#(#initializers)</body><body package="SmaCC Java" selector="compositeTokenVariables">compositeTokenVariables	^#(#commas)</body><body package="SmaCC Java" selector="initializers">initializers	^initializers</body><body package="SmaCC Java" selector="initializers:">initializers: anOrderedCollection	self setParents: self initializers to: nil.	initializers := anOrderedCollection.	self setParents: self initializers to: self</body><body package="SmaCC Java" selector="left">left	^left</body><body package="SmaCC Java" selector="left:">left: aSmaCCToken	left := aSmaCCToken</body><body package="SmaCC Java" selector="pluralVariablesMap">pluralVariablesMap	^[(Dictionary new)		at: 'initializer' put: 'initializers';		at: 'comma' put: 'commas';		yourself] once</body><body package="SmaCC Java" selector="right">right	^right</body><body package="SmaCC Java" selector="right:">right: aSmaCCToken	right := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#left #right)</body></methods><methods><class-id>Refactory.SmaCC.JavaArrayInitializerNode</class-id> <category>generated-initialize-release</category><body package="SmaCC Java" selector="initialize">initialize	super initialize.	initializers := OrderedCollection new: 2.	commas := OrderedCollection new: 2.</body></methods><methods><class-id>Refactory.SmaCC.JavaScanner</class-id> <category>generated</category><body package="SmaCC Java" selector="emptySymbolTokenId">emptySymbolTokenId	^293</body><body package="SmaCC Java" selector="errorTokenId">errorTokenId	^294</body><body package="SmaCC Java" selector="scan1">scan1	[self step.	currentCharacter == $`		ifTrue:			[self recordMatch: #(105).			self step.			currentCharacter == $` ifTrue: [^self scan1].			^self reportLastMatch]] repeat</body><body package="SmaCC Java" selector="scan2">scan2	[self recordMatch: #(97).	self step.	currentCharacter isDigit] whileTrue.	('Ee' includes: currentCharacter) ifTrue: [^self scan3].	('DFdf' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(97)].	^self reportLastMatch</body><body package="SmaCC Java" selector="scan3">scan3	self step.	('+-' includes: currentCharacter) ifTrue: [self step].	currentCharacter isDigit ifTrue: [^self scan4].	^self reportLastMatch</body><body package="SmaCC Java" selector="scan4">scan4	[self recordMatch: #(97).	self step.	currentCharacter isDigit] whileTrue.	('DFdf' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(97)].	^self reportLastMatch</body><body package="SmaCC Java" selector="scan5">scan5	self step.	currentCharacter == $' ifTrue: [^self recordAndReportMatch: #(99)].	^self reportLastMatch</body><body package="SmaCC Java" selector="scan6">scan6	self step.	currentCharacter == $' ifTrue: [^self recordAndReportMatch: #(99)].	(currentCharacter between: $0 and: $7) ifTrue: [^self scan5].	^self reportLastMatch</body><body package="SmaCC Java" selector="scan7">scan7	[self step.	currentCharacter == $" ifTrue: [^self recordAndReportMatch: #(100)].	currentCharacter == $\		ifTrue:			[self step.			currentCharacter == $u				ifTrue:					[self step.					(currentCharacter isDigit or: [(currentCharacter between: $A and: $F) or: [currentCharacter between: $a and: $f]])						ifTrue:							[3								timesRepeat:									[self step.									(currentCharacter isDigit or: [(currentCharacter between: $A and: $F) or: [currentCharacter between: $a and: $f]])										ifFalse: [^self reportLastMatch]].							^self scan7].					^self reportLastMatch].			(('"''' includes: currentCharacter) or: [(currentCharacter between: $0 and: $7) or: ['\bfnrt' includes: currentCharacter]]) ifTrue: [^self scan7].			^self reportLastMatch]] repeat</body><body package="SmaCC Java" selector="scan8">scan8	[self step.	currentCharacter == $*		ifTrue:			[[self step.			currentCharacter == $*] whileTrue.			currentCharacter == $/ ifTrue: [^self recordAndReportMatch: #(104)].			^self scan8]] repeat</body><body package="SmaCC Java" selector="scan9">scan9	[self step.	currentCharacter == $. ifTrue: [^self scan2].	currentCharacter isDigit] whileTrue.	('Ee' includes: currentCharacter) ifTrue: [^self scan3].	('DFdf' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(97)].	^self reportLastMatch</body><body package="SmaCC Java" selector="scanForToken">scanForToken	self step.	currentCharacter == $` ifTrue: [^self scan1].	currentCharacter == $^		ifTrue:			[self recordMatch: #(49).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(63)].			^self reportLastMatch].	currentCharacter == $-		ifTrue:			[self recordMatch: #(92).			self step.			currentCharacter == $- ifTrue: [^self recordAndReportMatch: #(89)].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(70)].			^self reportLastMatch].	currentCharacter == $, ifTrue: [^self recordAndReportMatch: #(6)].	currentCharacter == $; ifTrue: [^self recordAndReportMatch: #(31)].	currentCharacter == $: ifTrue: [^self recordAndReportMatch: #(13)].	currentCharacter == $!		ifTrue:			[self recordMatch: #(94).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(72)].			^self reportLastMatch].	currentCharacter == $? ifTrue: [^self recordAndReportMatch: #(53)].	currentCharacter == $.		ifTrue:			[self recordMatch: #(29).			self step.			currentCharacter isDigit ifTrue: [^self scan2].			^self reportLastMatch].	currentCharacter == $'		ifTrue:			[self step.			currentCharacter == $\				ifTrue:					[self step.					currentCharacter == $u						ifTrue:							[self step.							(currentCharacter isDigit or: [(currentCharacter between: $A and: $F) or: [currentCharacter between: $a and: $f]])								ifTrue:									[3										timesRepeat:											[self step.											(currentCharacter isDigit or: [(currentCharacter between: $A and: $F) or: [currentCharacter between: $a and: $f]])												ifFalse: [^self reportLastMatch]].									^self scan5].							^self reportLastMatch].					(currentCharacter between: $0 and: $3)						ifTrue:							[self step.							currentCharacter == $' ifTrue: [^self recordAndReportMatch: #(99)].							(currentCharacter between: $0 and: $7) ifTrue: [^self scan6].							^self reportLastMatch].					(currentCharacter between: $4 and: $7) ifTrue: [^self scan6].					('"''\bfnrt' includes: currentCharacter) ifTrue: [^self scan5].					^self reportLastMatch].			(currentCharacter &lt;= $&amp; or: [(currentCharacter between: $( and: $[) or: [currentCharacter &gt;= $]]]) ifTrue: [^self scan5].			^self reportLastMatch].	currentCharacter == $" ifTrue: [^self scan7].	currentCharacter == $( ifTrue: [^self recordAndReportMatch: #(7)].	currentCharacter == $) ifTrue: [^self recordAndReportMatch: #(20)].	currentCharacter == $[ ifTrue: [^self recordAndReportMatch: #(4)].	currentCharacter == $] ifTrue: [^self recordAndReportMatch: #(5)].	currentCharacter == ${ ifTrue: [^self recordAndReportMatch: #(1)].	currentCharacter == $} ifTrue: [^self recordAndReportMatch: #(2)].	currentCharacter == $@ ifTrue: [^self recordAndReportMatch: #(65)].	currentCharacter == $*		ifTrue:			[self recordMatch: #(45).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(60)].			^self reportLastMatch].	currentCharacter == $/		ifTrue:			[self recordMatch: #(95).			self step.			currentCharacter == $* ifTrue: [^self scan8].			currentCharacter == $/				ifTrue:					[[self step.					currentCharacter == Character lf ifTrue: [^self recordAndReportMatch: #(104)].					currentCharacter == Character cr						ifTrue:							[self recordMatch: #(104).							self step.							currentCharacter == Character lf ifTrue: [^self recordAndReportMatch: #(104)].							^self reportLastMatch]] repeat].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(55)].			^self reportLastMatch].	currentCharacter == $&amp;		ifTrue:			[self recordMatch: #(54).			self step.			currentCharacter == $&amp; ifTrue: [^self recordAndReportMatch: #(51)].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(62)].			^self reportLastMatch].	currentCharacter == $%		ifTrue:			[self recordMatch: #(85).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(68)].			^self reportLastMatch].	currentCharacter == $+		ifTrue:			[self recordMatch: #(91).			self step.			currentCharacter == $+ ifTrue: [^self recordAndReportMatch: #(84)].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(69)].			^self reportLastMatch].	currentCharacter == $&lt;		ifTrue:			[self recordMatch: #(90).			self step.			currentCharacter == $&lt;				ifTrue:					[self recordMatch: #(86).					self step.					currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(71)].					^self reportLastMatch].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(67)].			^self reportLastMatch].	currentCharacter == $=		ifTrue:			[self recordMatch: #(3).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(58)].			^self reportLastMatch].	currentCharacter == $&gt;		ifTrue:			[self recordMatch: #(74).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(56)].			currentCharacter == $&gt;				ifTrue:					[self recordMatch: #(87).					self step.					currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(66)].					currentCharacter == $&gt;						ifTrue:							[self recordMatch: #(88).							self step.							currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(61)]]].			^self reportLastMatch].	currentCharacter == $|		ifTrue:			[self recordMatch: #(50).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(64)].			currentCharacter == $| ifTrue: [^self recordAndReportMatch: #(52)].			^self reportLastMatch].	currentCharacter == $~ ifTrue: [^self recordAndReportMatch: #(93)].	currentCharacter == $0		ifTrue:			[self recordMatch: #(96).			self step.			currentCharacter == $. ifTrue: [^self scan2].			(currentCharacter between: $8 and: $9) ifTrue: [^self scan9].			currentCharacter isDigit				ifTrue:					[[self recordMatch: #(96).					self step.					currentCharacter == $. ifTrue: [^self scan2].					(currentCharacter between: $8 and: $9) ifTrue: [^self scan9].					currentCharacter isDigit] whileTrue.					('Ee' includes: currentCharacter) ifTrue: [^self scan3].					('Ll' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(96)].					('DFdf' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(97)].					^self reportLastMatch].			('Ee' includes: currentCharacter) ifTrue: [^self scan3].			('Ll' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(96)].			('Xx' includes: currentCharacter)				ifTrue:					[self step.					(currentCharacter isDigit or: [(currentCharacter between: $A and: $F) or: [currentCharacter between: $a and: $f]])						ifTrue:							[[self recordMatch: #(96).							self step.							('Ll' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(96)].							currentCharacter isDigit or: [(currentCharacter between: $A and: $F) or: [currentCharacter between: $a and: $f]]] whileTrue].					^self reportLastMatch].			('DFdf' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(97)].			^self reportLastMatch].	currentCharacter isDigit		ifTrue:			[[self recordMatch: #(96).			self step.			currentCharacter == $. ifTrue: [^self scan2].			currentCharacter isDigit] whileTrue.			('Ee' includes: currentCharacter) ifTrue: [^self scan3].			('Ll' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(96)].			('DFdf' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(97)].			^self reportLastMatch].	((currentCharacter between: Character tab and: Character cr) or: [currentCharacter == Character space])		ifTrue:			[[self recordMatch: #(103).			self step.			(currentCharacter between: Character tab and: Character cr) or: [currentCharacter == Character space]] whileTrue.			^self reportLastMatch].	(currentCharacter isAlphabetic or: ['$_' includes: currentCharacter])		ifTrue:			[[self recordMatch: #(102).			self step.			currentCharacter isAlphaNumeric or: ['$_' includes: currentCharacter]] whileTrue].	^self reportLastMatch</body><body package="SmaCC Java" selector="tokenActions">tokenActions	^#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil #whitespace #comment #patternToken)</body></methods><methods><class-id>Refactory.SmaCC.JavaScanner class</class-id> <category>generated-initialization</category><body package="SmaCC Java" selector="initializeKeywordMap">initializeKeywordMap	keywordMap := Dictionary new.	#(#(102 'abstract' 38) #(102 'assert' 76) #(102 'boolean' 33) #(102 'break' 81) #(102 'byte' 34) #(102 'case' 16) #(102 'catch' 79) #(102 'char' 26) #(102 'class' 9) #(102 'continue' 82) #(102 'default' 17) #(102 'do' 59) #(102 'double' 28) #(102 'else' 32) #(102 'enum' 14) #(102 'extends' 10) #(102 'false' 98) #(102 'final' 39) #(102 'finally' 75) #(102 'float' 27) #(102 'for' 80) #(102 'if' 43) #(102 'implements' 11) #(102 'import' 44) #(102 'instanceof' 57) #(102 'int' 30) #(102 'interface' 18) #(102 'long' 25) #(102 'native' 40) #(102 'new' 77) #(102 'null' 101) #(102 'package' 36) #(102 'private' 42) #(102 'protected' 47) #(102 'public' 46) #(102 'return' 83) #(102 'short' 35) #(102 'static' 37) #(102 'strictfp' 8) #(102 'super' 23) #(102 'switch' 15) #(102 'synchronized' 41) #(102 'this' 22) #(102 'throw' 78) #(102 'throws' 21) #(102 'transient' 24) #(102 'true' 98) #(102 'try' 73) #(102 'void' 12) #(102 'volatile' 19) #(102 'while' 48))		do: [:each | (keywordMap at: each first ifAbsentPut: [Dictionary new]) at: (each at: 2) put: each last].	^keywordMap</body></methods><methods><class-id>Refactory.SmaCC.JavaModifierNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitModifier: self</body><body package="SmaCC Java" selector="token">token	^token</body><body package="SmaCC Java" selector="token:">token: aSmaCCToken	token := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#token)</body></methods><methods><class-id>Refactory.SmaCC.JavaThisNode</class-id> <category>generated</category><body package="SmaCC Java" selector="acceptVisitor:">acceptVisitor: aProgramVisitor	^aProgramVisitor visitThis: self</body><body package="SmaCC Java" selector="thisToken">thisToken	^thisToken</body><body package="SmaCC Java" selector="thisToken:">thisToken: aSmaCCToken	thisToken := aSmaCCToken</body><body package="SmaCC Java" selector="tokenVariables">tokenVariables	^#(#thisToken)</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>SmaCCScanner</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream start matchActions matchEnd currentCharacter outputStream lastOutputStreamMatchPosition lastMatchWasEmpty returnMatchBlock state comments </inst-vars><class-inst-vars>keywordMap </class-inst-vars><imports></imports><category>SmaCC Runtime</category><attributes><package>SmaCC Runtime</package></attributes></class><class><name>SmaCCParseNode</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent attributes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Runtime</category><attributes><package>SmaCC Runtime</package></attributes></class><class><name>SmaCCParseNodeVisitor</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Runtime</category><attributes><package>SmaCC Runtime</package></attributes></class><class><name>SmaCCGLRParser</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>states parseAll currentState tryAllStates lastToken lastPosition lastState nextScannerState nextScannerPosition </inst-vars><class-inst-vars>cachedTrees </class-inst-vars><imports></imports><category>SmaCC GLR Runtime</category><attributes><package>SmaCC GLR Runtime</package></attributes></class></st-source>