<?xml version="1.0"?><st-source><!-- Name: SmaCC C ParserNotice: Comment: This package is part of the Smalltalk Compiler-Compiler (SmaCC) written by John Brant and Don Roberts. It contains an example C parser. The parser isn't that useful though as it does not do any preprocessing.If you want more information about SmaCC, visit http://www.refactoryworkers.com/SmaCC/. - - - - - - - - - - - - - - - - - - - - - - - - -Copyright (c) 2002-2010 John Brant, Don RobertsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.DbIdentifier: bear73DbTrace: 317937DevelopmentPrerequisites: #(#(#any 'SmaCC Runtime' ''))DisregardedPrerequisites: #(#(#name 'Base VisualWorks' #componentType #bundle))PackageName: SmaCC C ParserParcel: #('SmaCC C Parser')PrerequisiteParcels: #(#('SmaCC Runtime' ''))PrintStringCache: (2.0.3,brant)Version: 2.0.3Date: 9:56:26 AM January 28, 2011 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.8 (jan11.4) of January 28, 2011 on January 28, 2011 at 9:56:26 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>CParser</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCParser</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC C Parser</category><attributes><package>SmaCC C Parser</package></attributes></class><class><name>CScanner</name><environment>Refactory.SmaCC</environment><super>Refactory.SmaCC.SmaCCScanner</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typeNames </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC C Parser</category><attributes><package>SmaCC C Parser</package></attributes></class><methods><class-id>Refactory.SmaCC.CParser</class-id> <category>generated-reduction actions</category><body package="SmaCC C Parser" selector="reduceActionForenum_specifier3:">reduceActionForenum_specifier3: nodes	self addTypeName: (nodes at: 2) value.	^self reduceFor: nodes</body><body package="SmaCC C Parser" selector="reduceActionForinit_declaration1:">reduceActionForinit_declaration1: nodes	(nodes at: 1) first value = 'typedef'		ifTrue:			[1				to: (nodes at: 2) size				by: 2				do: [:i | self addTypeName: ((nodes at: 2) at: i) value]].	^self reduceFor: nodes</body></methods><methods><class-id>Refactory.SmaCC.CParser</class-id> <category>generated</category><body package="SmaCC C Parser" selector="reduceTable">reduceTable^#(	#(127 1 #reduceFor:) 	#(111 1 #reduceFor:) 	#(117 1 #reduceFor:) 	#(110 1 #reduceFor:) 	#(109 1 #reduceFor:) 	#(128 1 #reduceFor:) 	#(151 1 #reduceFor:) 	#(133 1 #reduceFor:) 	#(113 1 #reduceFor:) 	#(120 1 #reduceFor:) 	#(131 1 #reduceFor:) 	#(127 2 #reduceFor:) 	#(116 2 #reduceActionForenum_specifier3:) 	#(107 2 #reduceFor:) 	#(133 2 #reduceFor:) 	#(146 1 #reduceFor:) 	#(147 2 #reduceFor:) 	#(115 2 #reduceActionForenum_specifier3:) 	#(120 2 #reduceFor:) 	#(113 2 #reduceFor:) 	#(106 2 #reduceActionForinit_declaration1:) 	#(108 1 #reduceFor:) 	#(112 1 #reduceFor:) 	#(128 3 #reduceFor:) 	#(131 2 #reduceFor:) 	#(127 3 #reduceFor:) 	#(126 1 #reduceFor:) 	#(125 1 #reduceFor:) 	#(89 1 #reduceFor:) 	#(140 1 #reduceFor:) 	#(85 1 #reduceFor:) 	#(139 2 #reduceFor:) 	#(88 1 #reduceFor:) 	#(84 1 #reduceFor:) 	#(105 1 #reduceFor:) 	#(90 1 #reduceFor:) 	#(92 1 #reduceFor:) 	#(93 1 #reduceFor:) 	#(94 1 #reduceFor:) 	#(95 1 #reduceFor:) 	#(96 1 #reduceFor:) 	#(97 1 #reduceFor:) 	#(98 1 #reduceFor:) 	#(99 1 #reduceFor:) 	#(100 1 #reduceFor:) 	#(101 1 #reduceFor:) 	#(102 1 #reduceFor:) 	#(87 1 #reduceFor:) 	#(144 1 #reduceFor:) 	#(145 1 #reduceFor:) 	#(146 2 #reduceFor:) 	#(147 3 #reduceFor:) 	#(122 1 #reduceFor:) 	#(119 1 #reduceFor:) 	#(130 1 #reduceFor:) 	#(129 1 #reduceFor:) 	#(134 1 #reduceFor:) 	#(132 1 #reduceFor:) 	#(104 1 #reduceFor:) 	#(116 4 #reduceFor:) 	#(143 2 #reduceFor:) 	#(88 2 #reduceFor:) 	#(91 1 #reduceFor:) 	#(84 2 #reduceFor:) 	#(103 1 #reduceFor:) 	#(140 2 #reduceFor:) 	#(139 3 #reduceFor:) 	#(145 2 #reduceFor:) 	#(122 2 #reduceFor:) 	#(115 4 #reduceFor:) 	#(119 2 #reduceFor:) 	#(124 1 #reduceFor:) 	#(123 1 #reduceFor:) 	#(128 4 #reduceFor:) 	#(134 2 #reduceFor:) 	#(135 1 #reduceFor:) 	#(108 3 #reduceFor:) 	#(114 1 #reduceFor:) 	#(112 3 #reduceFor:) 	#(147 4 #reduceFor:) 	#(116 5 #reduceActionForenum_specifier3:) 	#(126 3 #reduceFor:) 	#(125 3 #reduceFor:) 	#(143 3 #reduceFor:) 	#(85 3 #reduceFor:) 	#(91 2 #reduceFor:) 	#(138 3 #reduceFor:) 	#(84 3 #reduceFor:) 	#(86 1 #reduceFor:) 	#(87 3 #reduceFor:) 	#(92 3 #reduceFor:) 	#(93 3 #reduceFor:) 	#(94 3 #reduceFor:) 	#(95 3 #reduceFor:) 	#(96 3 #reduceFor:) 	#(97 3 #reduceFor:) 	#(98 3 #reduceFor:) 	#(99 3 #reduceFor:) 	#(100 3 #reduceFor:) 	#(101 3 #reduceFor:) 	#(105 3 #reduceFor:) 	#(139 4 #reduceFor:) 	#(115 5 #reduceActionForenum_specifier3:) 	#(124 2 #reduceFor:) 	#(121 3 #reduceFor:) 	#(130 3 #reduceFor:) 	#(129 3 #reduceFor:) 	#(132 3 #reduceFor:) 	#(136 2 #reduceFor:) 	#(135 2 #reduceFor:) 	#(137 1 #reduceFor:) 	#(88 4 #reduceFor:) 	#(90 4 #reduceFor:) 	#(138 4 #reduceFor:) 	#(84 4 #reduceFor:) 	#(124 3 #reduceFor:) 	#(123 3 #reduceFor:) 	#(136 3 #reduceFor:) 	#(114 3 #reduceFor:) 	#(141 5 #reduceFor:) 	#(142 5 #reduceFor:) 	#(86 3 #reduceFor:) 	#(102 5 #reduceFor:) 	#(136 4 #reduceFor:) 	#(114 4 #reduceFor:) 	#(137 3 #reduceFor:) 	#(142 6 #reduceFor:) 	#(141 7 #reduceFor:) 	#(142 7 #reduceFor:)	).</body><body package="SmaCC C Parser" selector="transitionTable">transitionTable^#(#[1 0 9 0 27 0 13 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 93 0 76 0 97 0 106 0 101 0 107 0 105 0 109 0 109 0 110 0 113 0 111 0 117 0 113 0 121 0 115 0 125 0 116 0 129 0 117 0 133 0 120 0 137 0 127 0 141 0 128 0 145 0 133 0 149 0 147 0 153 0 150 0 157 0 151] #[1 0 9 0 27 0 13 0 36 0 93 0 76 0 161 0 113 0 137 0 127 0 141 0 128] #[1 0 6 0 21 0 6 0 26 0 6 0 27 0 13 0 36 0 17 0 41 0 21 0 42 0 6 0 76 0 6 0 79 0 165 0 111 0 169 0 127 0 173 0 131] #[0 0 10 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 10 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[1 0 177 0 76 0 181 0 81] #[0 0 14 0 76 0 81] #[0 0 14 0 76 0 81] #[0 0 18 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 18 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 18 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 22 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 22 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 22 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 22 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 18 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 18 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 18 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 18 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 22 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 18 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 18 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 26 0 15 0 16 0 21 0 26 0 27 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 79 0 81 0 150] #[0 0 185 0 60] #[0 0 30 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 148 0 150] #[1 0 34 0 21 0 34 0 26 0 34 0 27 0 34 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 0 34 0 60 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 34 0 76 0 34 0 79 0 105 0 109 0 109 0 110 0 113 0 111 0 121 0 115 0 125 0 116 0 129 0 117 0 189 0 133 0 153 0 150] #[1 0 34 0 21 0 34 0 26 0 34 0 27 0 34 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 0 34 0 60 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 34 0 76 0 34 0 79 0 105 0 109 0 109 0 110 0 113 0 111 0 121 0 115 0 125 0 116 0 129 0 117 0 193 0 133 0 153 0 150] #[1 0 34 0 21 0 34 0 26 0 34 0 27 0 34 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 0 34 0 60 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 34 0 76 0 34 0 79 0 105 0 109 0 109 0 110 0 113 0 111 0 121 0 115 0 125 0 116 0 129 0 117 0 197 0 133 0 153 0 150] #[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 201 0 81 0 97 0 106 0 205 0 107 0 105 0 109 0 109 0 110 0 113 0 111 0 121 0 115 0 125 0 116 0 129 0 117 0 209 0 133 0 213 0 139 0 217 0 146 0 153 0 150] #[0 0 18 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 18 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[1 0 221 0 76 0 225 0 81] #[1 0 9 0 27 0 13 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 93 0 76 0 97 0 106 0 101 0 107 0 105 0 109 0 109 0 110 0 113 0 111 0 117 0 113 0 121 0 115 0 125 0 116 0 129 0 117 0 137 0 127 0 141 0 128 0 145 0 133 0 149 0 147 0 0 0 148 0 153 0 150 0 229 0 151] #[1 0 9 0 27 0 93 0 76 0 233 0 128] #[1 0 38 0 15 0 38 0 16 0 38 0 21 0 38 0 26 0 237 0 27 0 38 0 41 0 38 0 42 0 38 0 43 0 38 0 44 0 38 0 45 0 38 0 47 0 38 0 56 0 38 0 57 0 38 0 58 0 38 0 59 0 38 0 60 0 38 0 65 0 38 0 66 0 38 0 67 0 38 0 68 0 38 0 69 0 38 0 70 0 38 0 71 0 38 0 72 0 38 0 73 0 241 0 79 0 38 0 81 0 38 0 150] #[1 0 9 0 27 0 13 0 36 0 245 0 60 0 93 0 76 0 249 0 108 0 253 0 112 1 1 0 113 0 137 0 127 0 141 0 128] #[0 0 30 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 148 0 150] #[0 0 18 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 42 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 148 0 150] #[0 1 5 0 26] #[0 0 46 0 21 0 26 0 27 0 36 0 41 0 42 0 76 0 79] #[0 0 50 0 21 0 26 0 27 0 76 0 79] #[1 0 50 0 21 0 50 0 26 0 50 0 27 0 13 0 36 0 17 0 41 0 21 0 42 0 50 0 76 0 50 0 79 1 9 0 111 1 13 0 127] #[1 0 54 0 16 0 54 0 21 0 54 0 26 0 54 0 27 0 54 0 36 0 54 0 41 0 54 0 42 0 54 0 43 0 54 0 44 0 54 0 45 0 54 0 47 0 54 0 56 0 54 0 57 0 54 0 58 0 54 0 59 0 54 0 60 0 54 0 65 0 54 0 66 0 54 0 67 0 54 0 68 0 54 0 69 0 54 0 70 0 54 0 71 0 54 0 72 0 54 0 73 0 54 0 76 0 54 0 79 1 17 0 81 0 54 0 150] #[1 1 21 0 76 1 25 0 125 1 29 0 126] #[0 0 58 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 148 0 150] #[0 0 62 0 21 0 26 0 27 0 36 0 60 0 76 0 79] #[0 0 62 0 21 0 26 0 27 0 36 0 60 0 76 0 79] #[0 0 62 0 21 0 26 0 27 0 36 0 60 0 76 0 79] #[1 1 33 0 19 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 77 0 38 1 81 0 39 1 85 0 40 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 1 89 0 48 1 93 0 49 1 97 0 50 1 101 0 51 1 105 0 52 1 109 0 53 1 113 0 54 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 1 117 0 60 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 1 121 0 76 1 125 0 77 1 129 0 78 0 201 0 81 1 133 0 82 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 0 97 0 106 0 205 0 107 0 105 0 109 0 109 0 110 0 113 0 111 0 121 0 115 0 125 0 116 0 129 0 117 0 209 0 133 1 209 0 138 1 213 0 139 1 217 0 140 1 221 0 141 1 225 0 142 1 229 0 143 1 233 0 144 1 237 0 145 1 241 0 146 0 153 0 150] #[0 0 66 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 150] #[1 0 9 0 27 0 13 0 36 0 245 0 60 0 93 0 76 0 249 0 108 0 253 0 112 1 245 0 113 0 137 0 127 0 141 0 128] #[0 0 70 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 148 0 150] #[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 201 0 81 0 97 0 106 1 249 0 107 0 105 0 109 0 109 0 110 0 113 0 111 0 121 0 115 0 125 0 116 0 129 0 117 0 209 0 133 1 253 0 139 0 153 0 150] #[1 0 74 0 16 0 74 0 21 0 74 0 26 0 74 0 27 0 74 0 36 0 74 0 41 0 74 0 42 0 74 0 43 0 74 0 44 0 74 0 45 0 74 0 47 0 74 0 56 0 74 0 57 0 74 0 58 0 74 0 59 0 74 0 60 0 74 0 65 0 74 0 66 0 74 0 67 0 74 0 68 0 74 0 69 0 74 0 70 0 74 0 71 0 74 0 72 0 74 0 73 0 74 0 76 0 74 0 79 2 1 0 81 0 74 0 150] #[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 85 0 72 0 89 0 73 2 5 0 110 2 9 0 111 0 121 0 115 0 125 0 116 0 129 0 117 2 13 0 119 2 17 0 121 2 21 0 122 0 153 0 150] #[0 0 78 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 148 0 150] #[1 0 82 0 15 0 82 0 16 0 82 0 21 0 82 0 26 0 237 0 27 0 82 0 41 0 82 0 42 0 82 0 43 0 82 0 44 0 82 0 45 0 82 0 47 0 82 0 56 0 82 0 57 0 82 0 58 0 82 0 59 0 82 0 60 0 82 0 65 0 82 0 66 0 82 0 67 0 82 0 68 0 82 0 69 0 82 0 70 0 82 0 71 0 82 0 72 0 82 0 73 0 241 0 79 0 82 0 81 0 82 0 150] #[1 2 25 0 26 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 2 29 0 76 0 105 0 109 0 109 0 110 0 113 0 111 0 121 0 115 0 125 0 116 0 129 0 117 2 33 0 129 2 37 0 130 2 41 0 132 2 45 0 133 2 49 0 134 0 153 0 150] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 2 57 0 80 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 2 65 0 102 2 69 0 104] #[0 0 58 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 148 0 150] #[1 2 73 0 21 0 86 0 60] #[0 0 90 0 21 0 60] #[1 2 77 0 15 0 94 0 21 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 0 94 0 60 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 201 0 81 0 97 0 106 0 205 0 107 0 105 0 109 0 109 0 110 0 113 0 111 0 121 0 115 0 125 0 116 0 129 0 117 0 209 0 133 2 81 0 139 2 85 0 146 0 153 0 150] #[0 0 98 0 15 0 16 0 21 0 26 0 27 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 79 0 81 0 150] #[0 0 102 0 21 0 26 0 27 0 36 0 41 0 42 0 76 0 79] #[0 0 106 0 21 0 26 0 27 0 76 0 79] #[1 1 21 0 76 2 89 0 125 1 29 0 126] #[1 2 93 0 15 0 110 0 21 0 110 0 82] #[1 2 97 0 21 2 101 0 82] #[0 0 114 0 21 0 82] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 105 0 60 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 2 109 0 105] #[1 1 37 0 20 1 41 0 22 1 45 0 23 2 113 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 117 0 88 1 153 0 89] #[1 1 37 0 20 1 41 0 22 1 45 0 23 2 121 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 125 0 88 1 153 0 89] #[1 1 37 0 20 1 41 0 22 1 45 0 23 2 121 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 129 0 88 1 153 0 89] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 85 0 72 0 89 0 73 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 2 133 0 91 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 2 137 0 105 2 5 0 110 2 9 0 111 0 121 0 115 0 125 0 116 0 129 0 117 2 141 0 122 0 153 0 150] #[0 0 118 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 0 118 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 0 118 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 0 118 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 0 118 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 0 118 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 2 145 0 27] #[0 2 149 0 16] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 2 65 0 102 2 153 0 104] #[0 2 157 0 60] #[0 2 161 0 60] #[0 2 165 0 76] #[0 2 169 0 27] #[1 1 33 0 19 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 77 0 38 1 81 0 39 1 85 0 40 1 89 0 48 1 93 0 49 1 97 0 50 1 101 0 51 1 105 0 52 1 109 0 53 1 113 0 54 1 117 0 60 1 121 0 76 1 125 0 77 1 129 0 78 0 201 0 81 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 1 209 0 138 1 213 0 139 1 217 0 140 1 221 0 141 1 225 0 142 1 229 0 143 2 173 0 144] #[0 2 177 0 27] #[0 2 181 0 27] #[0 0 122 0 19 0 20 0 22 0 23 0 26 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[1 0 126 0 1 0 126 0 2 0 126 0 3 0 126 0 4 0 126 0 5 0 126 0 6 0 126 0 7 0 126 0 8 0 126 0 9 0 126 0 10 0 126 0 11 0 126 0 12 0 126 0 13 0 126 0 14 0 126 0 15 2 185 0 16 0 126 0 17 0 126 0 18 0 126 0 21 0 126 0 22 0 126 0 23 0 126 0 24 0 126 0 25 0 126 0 27 0 126 0 28 0 126 0 29 0 126 0 30 0 126 0 31 0 126 0 34 0 126 0 35 0 126 0 36 0 126 0 37 0 126 0 55 0 126 0 60 0 126 0 61 0 126 0 62 0 126 0 63 0 126 0 64 0 126 0 79] #[0 0 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82] #[0 0 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82] #[0 0 130 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 148 0 150] #[1 0 134 0 1 0 134 0 2 0 134 0 3 0 134 0 4 0 134 0 5 0 134 0 6 0 134 0 7 0 134 0 8 0 134 0 9 0 134 0 10 0 134 0 11 0 134 0 12 0 134 0 13 0 134 0 14 0 134 0 15 0 134 0 16 0 134 0 17 0 134 0 18 0 134 0 21 2 189 0 22 2 193 0 23 2 197 0 24 2 201 0 25 0 134 0 26 2 205 0 27 0 134 0 28 0 134 0 29 0 134 0 30 0 134 0 31 0 134 0 34 0 134 0 35 0 134 0 36 0 134 0 37 0 134 0 55 0 134 0 60 0 134 0 61 0 134 0 62 0 134 0 63 0 134 0 64 2 209 0 79 0 134 0 80 0 134 0 82] #[0 0 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82] #[0 0 142 0 16 0 21 0 26 0 60 0 80] #[1 0 146 0 1 0 146 0 2 0 146 0 3 0 146 0 4 0 146 0 5 0 146 0 6 0 146 0 7 0 146 0 8 0 146 0 9 0 146 0 10 2 213 0 11 2 217 0 12 2 221 0 13 2 225 0 14 2 229 0 15 0 146 0 16 0 146 0 17 0 146 0 18 0 146 0 21 0 146 0 26 0 146 0 28 0 146 0 29 0 146 0 30 0 146 0 31 0 146 0 34 0 146 0 35 0 146 0 36 2 233 0 37 2 237 0 55 0 146 0 60 2 241 0 61 2 245 0 62 2 249 0 63 2 253 0 64 0 146 0 80 0 146 0 82 3 1 0 103] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 3 5 0 90] #[0 0 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 60 0 80 0 82] #[1 0 154 0 1 0 154 0 2 0 154 0 3 0 154 0 4 0 154 0 5 0 154 0 6 0 154 0 7 0 154 0 8 0 154 0 9 0 154 0 10 0 154 0 16 0 154 0 17 0 154 0 18 0 154 0 21 0 154 0 26 0 154 0 28 0 154 0 29 3 9 0 30 3 13 0 31 0 154 0 34 0 154 0 35 3 17 0 36 0 154 0 60 0 154 0 80 0 154 0 82] #[1 0 158 0 1 0 158 0 2 0 158 0 3 0 158 0 4 0 158 0 5 0 158 0 6 0 158 0 7 0 158 0 8 0 158 0 9 0 158 0 10 0 158 0 16 0 158 0 17 0 158 0 18 0 158 0 21 0 158 0 26 0 158 0 28 0 158 0 29 3 21 0 34 3 25 0 35 0 158 0 60 0 158 0 80 0 158 0 82] #[1 0 162 0 1 0 162 0 2 0 162 0 3 0 162 0 4 0 162 0 5 0 162 0 6 0 162 0 7 0 162 0 8 0 162 0 9 3 29 0 10 0 162 0 16 0 162 0 17 0 162 0 18 0 162 0 21 0 162 0 26 0 162 0 28 3 33 0 29 0 162 0 60 0 162 0 80 0 162 0 82] #[1 0 166 0 1 0 166 0 2 0 166 0 3 0 166 0 4 0 166 0 5 3 37 0 6 3 41 0 7 3 45 0 8 0 166 0 9 0 166 0 16 0 166 0 17 3 49 0 18 0 166 0 21 0 166 0 26 0 166 0 28 0 166 0 60 0 166 0 80 0 166 0 82] #[1 0 170 0 1 0 170 0 2 0 170 0 3 3 53 0 4 3 57 0 5 0 170 0 9 0 170 0 16 0 170 0 17 0 170 0 21 0 170 0 26 0 170 0 28 0 170 0 60 0 170 0 80 0 170 0 82] #[1 0 174 0 1 0 174 0 2 0 174 0 3 0 174 0 9 0 174 0 16 0 174 0 17 0 174 0 21 0 174 0 26 3 61 0 28 0 174 0 60 0 174 0 80 0 174 0 82] #[1 0 178 0 1 0 178 0 2 3 65 0 3 0 178 0 9 0 178 0 16 0 178 0 17 0 178 0 21 0 178 0 26 0 178 0 60 0 178 0 80 0 178 0 82] #[1 0 182 0 1 3 69 0 2 0 182 0 9 0 182 0 16 0 182 0 17 0 182 0 21 0 182 0 26 0 182 0 60 0 182 0 80 0 182 0 82] #[1 3 73 0 1 0 186 0 9 0 186 0 16 0 186 0 17 0 186 0 21 0 186 0 26 0 186 0 60 0 186 0 80 0 186 0 82] #[1 3 77 0 9 0 190 0 16 3 81 0 17 0 190 0 21 0 190 0 26 0 190 0 60 0 190 0 80 0 190 0 82] #[0 0 194 0 16 0 21 0 26 0 60 0 80 0 82] #[1 3 85 0 21 3 89 0 60] #[0 0 198 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 0 198 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 0 198 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 0 198 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 0 198 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 0 198 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 0 202 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[1 1 33 0 19 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 77 0 38 1 81 0 39 1 85 0 40 1 89 0 48 1 93 0 49 1 97 0 50 1 101 0 51 1 105 0 52 1 109 0 53 1 113 0 54 1 117 0 60 1 121 0 76 1 125 0 77 1 129 0 78 0 201 0 81 3 93 0 82 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 1 209 0 138 1 213 0 139 1 217 0 140 1 221 0 141 1 225 0 142 1 229 0 143 3 97 0 144] #[1 1 33 0 19 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 77 0 38 1 81 0 39 1 85 0 40 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 1 89 0 48 1 93 0 49 1 97 0 50 1 101 0 51 1 105 0 52 1 109 0 53 1 113 0 54 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 1 117 0 60 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 1 121 0 76 1 125 0 77 1 129 0 78 0 201 0 81 3 101 0 82 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 0 97 0 106 1 249 0 107 0 105 0 109 0 109 0 110 0 113 0 111 0 121 0 115 0 125 0 116 0 129 0 117 0 209 0 133 1 209 0 138 1 213 0 139 1 217 0 140 1 221 0 141 1 225 0 142 1 229 0 143 1 233 0 144 3 105 0 145 0 153 0 150] #[1 2 77 0 15 0 94 0 21 0 94 0 60] #[0 0 206 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 150] #[0 0 210 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 148 0 150] #[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 85 0 72 0 89 0 73 2 5 0 110 2 9 0 111 0 121 0 115 0 125 0 116 0 129 0 117 3 109 0 119 2 17 0 121 2 21 0 122 0 153 0 150] #[1 0 214 0 16 0 214 0 26 0 214 0 27 0 214 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 85 0 72 0 89 0 73 0 214 0 76 0 214 0 79 2 5 0 110 2 9 0 111 0 121 0 115 0 125 0 116 0 129 0 117 3 113 0 122 0 153 0 150] #[1 0 214 0 16 0 214 0 26 0 214 0 27 0 214 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 85 0 72 0 89 0 73 0 214 0 76 0 214 0 79 2 5 0 110 2 9 0 111 0 121 0 115 0 125 0 116 0 129 0 117 3 117 0 122 0 153 0 150] #[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 85 0 72 0 89 0 73 3 121 0 82 2 5 0 110 2 9 0 111 0 121 0 115 0 125 0 116 0 129 0 117 3 125 0 121 2 21 0 122 0 153 0 150] #[0 0 218 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 67 0 68 0 69 0 70 0 72 0 73 0 82 0 150] #[1 3 129 0 16 0 9 0 27 0 13 0 36 0 93 0 76 3 133 0 113 3 137 0 123 3 141 0 124 0 137 0 127 0 141 0 128] #[0 0 98 0 15 0 16 0 21 0 26 0 27 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 79 0 81 0 150] #[0 0 222 0 21 0 26] #[0 3 145 0 26] #[1 3 149 0 21 3 153 0 26] #[1 3 157 0 21 0 226 0 26] #[1 0 230 0 21 0 230 0 26 3 161 0 27 0 13 0 36 0 93 0 76 3 165 0 79 3 169 0 113 3 173 0 127 0 141 0 128 3 177 0 135 3 181 0 136] #[0 0 234 0 21 0 26] #[0 0 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82] #[0 0 98 0 15 0 16 0 21 0 26 0 27 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 79 0 81 0 150] #[0 0 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 80 0 82] #[0 0 238 0 16 0 21 0 60 0 80 0 82] #[0 3 185 0 80] #[1 0 9 0 27 0 13 0 36 0 93 0 76 3 189 0 112 1 245 0 113 0 137 0 127 0 141 0 128] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 3 193 0 81 1 137 0 84 1 141 0 85 3 197 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 3 201 0 114] #[0 0 210 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 148 0 150] #[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 201 0 81 0 97 0 106 1 249 0 107 0 105 0 109 0 109 0 110 0 113 0 111 0 121 0 115 0 125 0 116 0 129 0 117 0 209 0 133 3 205 0 139 0 153 0 150] #[1 2 97 0 21 3 209 0 82] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 2 65 0 102 3 213 0 104] #[1 1 21 0 76 3 217 0 126] #[0 0 242 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 0 246 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[1 3 85 0 21 3 221 0 60] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 85 0 72 0 89 0 73 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 3 225 0 91 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 2 137 0 105 2 5 0 110 2 9 0 111 0 121 0 115 0 125 0 116 0 129 0 117 2 141 0 122 0 153 0 150] #[0 0 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 80 0 82] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 2 137 0 105] #[0 0 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 80 0 82] #[0 0 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 80 0 82] #[0 3 229 0 26] #[1 3 85 0 21 3 233 0 26] #[1 0 254 0 26 3 237 0 27 0 13 0 36 3 165 0 79 3 241 0 127 3 245 0 135 3 181 0 136] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 3 249 0 105] #[1 1 33 0 19 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 77 0 38 1 81 0 39 1 85 0 40 1 89 0 48 1 93 0 49 1 97 0 50 1 101 0 51 1 105 0 52 1 109 0 53 1 113 0 54 1 117 0 60 1 121 0 76 1 125 0 77 1 129 0 78 0 201 0 81 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 1 209 0 138 1 213 0 139 1 217 0 140 1 221 0 141 1 225 0 142 1 229 0 143 3 253 0 144] #[0 4 1 0 16] #[0 0 246 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 0 246 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 4 5 0 60] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 117 0 60 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 4 9 0 140] #[0 4 13 0 53] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 4 17 0 105] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 4 21 0 105] #[1 1 33 0 19 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 77 0 38 1 81 0 39 1 85 0 40 1 89 0 48 1 93 0 49 1 97 0 50 1 101 0 51 1 105 0 52 1 109 0 53 1 113 0 54 1 117 0 60 1 121 0 76 1 125 0 77 1 129 0 78 0 201 0 81 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 1 209 0 138 1 213 0 139 1 217 0 140 1 221 0 141 1 225 0 142 1 229 0 143 4 25 0 144] #[0 1 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82] #[0 1 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82] #[0 4 29 0 76] #[0 4 33 0 76] #[1 1 37 0 20 1 41 0 22 1 45 0 23 4 37 0 26 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 4 41 0 86 4 45 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 4 49 0 105] #[0 1 6 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 1 6 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 1 6 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 1 6 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 1 6 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 1 6 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 1 6 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 1 6 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 1 6 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 1 6 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[0 1 6 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 76 0 77 0 78] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 4 53 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102] #[0 0 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 80 0 82] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 4 57 0 90] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 4 61 0 90] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 4 65 0 90] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 4 69 0 92] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 4 73 0 92] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 4 77 0 93] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 4 81 0 93] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 4 85 0 94] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 4 89 0 94] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 4 93 0 94] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 4 97 0 94] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 4 101 0 95] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 4 105 0 95] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 4 109 0 96] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 4 113 0 97] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 4 117 0 98] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 4 121 0 99] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 4 125 0 100] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 4 129 0 105] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 4 133 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102] #[0 1 10 0 19 0 20 0 22 0 23 0 26 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 1 14 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 148 0 150] #[0 1 18 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 1 14 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 148 0 150] #[1 1 33 0 19 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 77 0 38 1 81 0 39 1 85 0 40 1 89 0 48 1 93 0 49 1 97 0 50 1 101 0 51 1 105 0 52 1 109 0 53 1 113 0 54 1 117 0 60 1 121 0 76 1 125 0 77 1 129 0 78 0 201 0 81 4 137 0 82 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 1 209 0 138 1 213 0 139 1 217 0 140 1 221 0 141 1 225 0 142 1 229 0 143 3 97 0 144] #[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 85 0 72 0 89 0 73 4 141 0 82 2 5 0 110 2 9 0 111 0 121 0 115 0 125 0 116 0 129 0 117 3 125 0 121 2 21 0 122 0 153 0 150] #[0 1 22 0 16 0 26 0 27 0 36 0 76 0 79] #[0 1 22 0 16 0 26 0 27 0 36 0 76 0 79] #[0 1 26 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 1 30 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 67 0 68 0 69 0 70 0 72 0 73 0 82 0 150] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 2 65 0 102 4 145 0 104] #[1 4 149 0 16 1 34 0 21 1 34 0 60] #[1 4 153 0 21 4 157 0 60] #[0 1 38 0 21 0 60] #[0 1 42 0 15 0 16 0 21 0 26 0 27 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 79 0 81 0 150] #[0 4 161 0 76] #[0 1 42 0 15 0 16 0 21 0 26 0 27 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 79 0 81 0 150] #[1 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 4 165 0 74 0 105 0 109 0 109 0 110 0 113 0 111 0 121 0 115 0 125 0 116 0 129 0 117 2 45 0 133 4 169 0 134 0 153 0 150] #[1 4 173 0 26 3 161 0 27 0 13 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 93 0 76 3 165 0 79 0 105 0 109 0 109 0 110 0 113 0 111 0 161 0 113 0 121 0 115 0 125 0 116 0 129 0 117 3 173 0 127 0 141 0 128 4 177 0 129 2 41 0 132 2 45 0 133 2 49 0 134 4 181 0 135 3 181 0 136 0 153 0 150] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 4 185 0 80 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 2 65 0 102 4 189 0 104] #[0 1 46 0 21 0 26] #[1 1 50 0 21 1 50 0 26 3 161 0 27 0 93 0 76 3 165 0 79 0 233 0 128 4 193 0 136] #[0 1 46 0 21 0 26] #[1 1 50 0 21 1 50 0 26 4 197 0 27 4 201 0 79] #[0 1 42 0 15 0 16 0 21 0 26 0 27 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 79 0 81 0 150] #[0 1 54 0 21 0 60] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 3 193 0 81 1 137 0 84 1 141 0 85 3 197 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 4 205 0 114 4 209 0 137] #[0 1 58 0 21 0 60 0 82] #[0 1 62 0 21 0 60] #[0 1 66 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 148 0 150] #[0 1 70 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 1 74 0 21 0 82] #[0 1 78 0 21 0 82] #[0 1 82 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 4 213 0 26] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 4 217 0 90] #[0 1 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82] #[1 4 173 0 26 3 237 0 27 0 13 0 36 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 3 165 0 79 0 105 0 109 0 109 0 110 0 113 0 111 0 121 0 115 0 125 0 116 0 129 0 117 3 241 0 127 4 177 0 129 2 41 0 132 2 45 0 133 2 49 0 134 4 181 0 135 3 181 0 136 0 153 0 150] #[1 1 50 0 26 3 237 0 27 3 165 0 79 4 193 0 136] #[0 1 90 0 26] #[1 3 85 0 21 4 221 0 26] #[0 1 94 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[1 1 33 0 19 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 77 0 38 1 81 0 39 1 85 0 40 1 89 0 48 1 93 0 49 1 97 0 50 1 101 0 51 1 105 0 52 1 109 0 53 1 113 0 54 1 117 0 60 1 121 0 76 1 125 0 77 1 129 0 78 0 201 0 81 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 1 209 0 138 1 213 0 139 1 217 0 140 1 221 0 141 1 225 0 142 1 229 0 143 4 225 0 144] #[0 1 82 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 117 0 60 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 4 229 0 140] #[0 4 233 0 27] #[1 3 85 0 21 4 237 0 26] #[1 3 85 0 21 4 241 0 26] #[0 1 94 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 1 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82] #[0 1 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82] #[0 1 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82] #[1 4 245 0 21 4 249 0 26] #[0 1 102 0 21 0 26] #[1 3 85 0 21 4 253 0 80] #[0 1 106 0 16 0 21 0 26 0 60 0 80 0 82] #[0 1 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 60 0 80 0 82] #[0 1 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 60 0 80 0 82] #[0 1 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 60 0 80 0 82] #[1 1 114 0 1 1 114 0 2 1 114 0 3 1 114 0 4 1 114 0 5 1 114 0 6 1 114 0 7 1 114 0 8 1 114 0 9 1 114 0 10 1 114 0 16 1 114 0 17 1 114 0 18 1 114 0 21 1 114 0 26 1 114 0 28 1 114 0 29 3 9 0 30 3 13 0 31 1 114 0 34 1 114 0 35 3 17 0 36 1 114 0 60 1 114 0 80 1 114 0 82] #[1 1 114 0 1 1 114 0 2 1 114 0 3 1 114 0 4 1 114 0 5 1 114 0 6 1 114 0 7 1 114 0 8 1 114 0 9 1 114 0 10 1 114 0 16 1 114 0 17 1 114 0 18 1 114 0 21 1 114 0 26 1 114 0 28 1 114 0 29 3 9 0 30 3 13 0 31 1 114 0 34 1 114 0 35 3 17 0 36 1 114 0 60 1 114 0 80 1 114 0 82] #[1 1 118 0 1 1 118 0 2 1 118 0 3 1 118 0 4 1 118 0 5 1 118 0 6 1 118 0 7 1 118 0 8 1 118 0 9 1 118 0 10 1 118 0 16 1 118 0 17 1 118 0 18 1 118 0 21 1 118 0 26 1 118 0 28 1 118 0 29 3 21 0 34 3 25 0 35 1 118 0 60 1 118 0 80 1 118 0 82] #[1 1 118 0 1 1 118 0 2 1 118 0 3 1 118 0 4 1 118 0 5 1 118 0 6 1 118 0 7 1 118 0 8 1 118 0 9 1 118 0 10 1 118 0 16 1 118 0 17 1 118 0 18 1 118 0 21 1 118 0 26 1 118 0 28 1 118 0 29 3 21 0 34 3 25 0 35 1 118 0 60 1 118 0 80 1 118 0 82] #[1 1 122 0 1 1 122 0 2 1 122 0 3 1 122 0 4 1 122 0 5 1 122 0 6 1 122 0 7 1 122 0 8 1 122 0 9 3 29 0 10 1 122 0 16 1 122 0 17 1 122 0 18 1 122 0 21 1 122 0 26 1 122 0 28 3 33 0 29 1 122 0 60 1 122 0 80 1 122 0 82] #[1 1 122 0 1 1 122 0 2 1 122 0 3 1 122 0 4 1 122 0 5 1 122 0 6 1 122 0 7 1 122 0 8 1 122 0 9 3 29 0 10 1 122 0 16 1 122 0 17 1 122 0 18 1 122 0 21 1 122 0 26 1 122 0 28 3 33 0 29 1 122 0 60 1 122 0 80 1 122 0 82] #[1 1 122 0 1 1 122 0 2 1 122 0 3 1 122 0 4 1 122 0 5 1 122 0 6 1 122 0 7 1 122 0 8 1 122 0 9 3 29 0 10 1 122 0 16 1 122 0 17 1 122 0 18 1 122 0 21 1 122 0 26 1 122 0 28 3 33 0 29 1 122 0 60 1 122 0 80 1 122 0 82] #[1 1 122 0 1 1 122 0 2 1 122 0 3 1 122 0 4 1 122 0 5 1 122 0 6 1 122 0 7 1 122 0 8 1 122 0 9 3 29 0 10 1 122 0 16 1 122 0 17 1 122 0 18 1 122 0 21 1 122 0 26 1 122 0 28 3 33 0 29 1 122 0 60 1 122 0 80 1 122 0 82] #[1 1 126 0 1 1 126 0 2 1 126 0 3 1 126 0 4 1 126 0 5 3 37 0 6 3 41 0 7 3 45 0 8 1 126 0 9 1 126 0 16 1 126 0 17 3 49 0 18 1 126 0 21 1 126 0 26 1 126 0 28 1 126 0 60 1 126 0 80 1 126 0 82] #[1 1 126 0 1 1 126 0 2 1 126 0 3 1 126 0 4 1 126 0 5 3 37 0 6 3 41 0 7 3 45 0 8 1 126 0 9 1 126 0 16 1 126 0 17 3 49 0 18 1 126 0 21 1 126 0 26 1 126 0 28 1 126 0 60 1 126 0 80 1 126 0 82] #[1 1 130 0 1 1 130 0 2 1 130 0 3 3 53 0 4 3 57 0 5 1 130 0 9 1 130 0 16 1 130 0 17 1 130 0 21 1 130 0 26 1 130 0 28 1 130 0 60 1 130 0 80 1 130 0 82] #[1 1 134 0 1 1 134 0 2 1 134 0 3 1 134 0 9 1 134 0 16 1 134 0 17 1 134 0 21 1 134 0 26 3 61 0 28 1 134 0 60 1 134 0 80 1 134 0 82] #[1 1 138 0 1 1 138 0 2 3 65 0 3 1 138 0 9 1 138 0 16 1 138 0 17 1 138 0 21 1 138 0 26 1 138 0 60 1 138 0 80 1 138 0 82] #[1 1 142 0 1 3 69 0 2 1 142 0 9 1 142 0 16 1 142 0 17 1 142 0 21 1 142 0 26 1 142 0 60 1 142 0 80 1 142 0 82] #[1 3 73 0 1 1 146 0 9 1 146 0 16 1 146 0 17 1 146 0 21 1 146 0 26 1 146 0 60 1 146 0 80 1 146 0 82] #[1 5 1 0 16 3 85 0 21] #[0 1 150 0 16 0 21 0 26 0 60 0 80] #[0 1 154 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 81 0 82 0 148 0 150] #[0 1 158 0 16 0 21 0 26 0 27 0 36 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 58 0 59 0 60 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 79 0 150] #[0 1 162 0 21 0 60] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 2 65 0 102 5 5 0 104] #[1 3 129 0 16 0 9 0 27 0 13 0 36 0 93 0 76 3 133 0 113 5 9 0 124 0 137 0 127 0 141 0 128] #[0 1 166 0 41 0 42 0 43 0 44 0 45 0 47 0 56 0 57 0 67 0 68 0 69 0 70 0 72 0 73 0 82 0 150] #[0 1 170 0 21 0 26] #[0 1 174 0 26] #[0 1 178 0 21 0 26] #[0 1 182 0 21 0 26 0 27 0 79] #[0 5 13 0 26] #[0 5 17 0 26] #[0 1 182 0 21 0 26 0 27 0 79] #[0 5 21 0 80] #[1 1 186 0 21 1 186 0 26 4 197 0 27 4 201 0 79] #[1 5 25 0 26 0 17 0 41 0 21 0 42 0 25 0 43 0 29 0 44 0 33 0 45 0 37 0 47 0 41 0 56 0 45 0 57 0 49 0 58 0 53 0 59 0 57 0 65 0 61 0 66 0 65 0 67 0 69 0 68 0 73 0 69 0 77 0 70 0 81 0 71 0 85 0 72 0 89 0 73 0 105 0 109 0 109 0 110 0 113 0 111 0 121 0 115 0 125 0 116 0 129 0 117 5 29 0 129 2 41 0 132 2 45 0 133 2 49 0 134 0 153 0 150] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 5 33 0 80 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 2 65 0 102 5 37 0 104] #[0 1 190 0 21 0 82] #[1 5 41 0 21 5 45 0 82] #[0 1 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 80 0 82] #[0 1 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 26 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 80 0 82] #[1 1 33 0 19 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 77 0 38 1 81 0 39 1 85 0 40 1 89 0 48 1 93 0 49 1 97 0 50 1 101 0 51 1 105 0 52 1 109 0 53 1 113 0 54 1 117 0 60 1 121 0 76 1 125 0 77 1 129 0 78 0 201 0 81 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 1 209 0 138 1 213 0 139 1 217 0 140 1 221 0 141 1 225 0 142 1 229 0 143 5 49 0 144] #[0 1 202 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[1 1 37 0 20 1 41 0 22 1 45 0 23 5 53 0 26 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 5 57 0 105] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 5 61 0 105] #[1 1 33 0 19 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 77 0 38 1 81 0 39 1 85 0 40 1 89 0 48 1 93 0 49 1 97 0 50 1 101 0 51 1 105 0 52 1 109 0 53 1 113 0 54 1 117 0 60 1 121 0 76 1 125 0 77 1 129 0 78 0 201 0 81 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 1 209 0 138 1 213 0 139 1 217 0 140 1 221 0 141 1 225 0 142 1 229 0 143 5 65 0 144] #[1 1 33 0 19 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 77 0 38 1 81 0 39 1 85 0 40 1 89 0 48 1 93 0 49 1 97 0 50 1 101 0 51 1 105 0 52 1 109 0 53 1 113 0 54 1 117 0 60 1 121 0 76 1 125 0 77 1 129 0 78 0 201 0 81 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 1 209 0 138 1 213 0 139 1 217 0 140 1 221 0 141 1 225 0 142 1 229 0 143 5 69 0 144] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 5 73 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102] #[0 1 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82] #[0 1 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 34 0 35 0 36 0 37 0 55 0 60 0 61 0 62 0 63 0 64 0 79 0 80 0 82] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 1 137 0 84 1 141 0 85 2 61 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 5 77 0 102] #[0 1 210 0 21 0 60] #[0 1 214 0 21 0 60] #[0 1 218 0 21 0 26 0 27 0 79] #[0 1 218 0 21 0 26 0 27 0 79] #[0 1 218 0 21 0 26 0 27 0 79] #[0 1 218 0 21 0 26 0 27 0 79] #[0 5 81 0 26] #[0 1 218 0 21 0 26 0 27 0 79] #[0 5 85 0 80] #[1 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 2 53 0 76 1 125 0 77 1 129 0 78 3 193 0 81 5 89 0 82 1 137 0 84 1 141 0 85 3 197 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 5 93 0 114] #[0 1 222 0 21 0 60 0 82] #[1 1 226 0 19 1 226 0 20 1 226 0 22 1 226 0 23 1 226 0 27 1 226 0 28 1 226 0 32 1 226 0 33 1 226 0 34 1 226 0 35 1 226 0 36 1 226 0 38 1 226 0 39 1 226 0 40 5 97 0 46 1 226 0 48 1 226 0 49 1 226 0 50 1 226 0 51 1 226 0 52 1 226 0 53 1 226 0 54 1 226 0 60 1 226 0 76 1 226 0 77 1 226 0 78 1 226 0 81 1 226 0 82] #[1 1 33 0 19 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 77 0 38 1 81 0 39 1 85 0 40 1 89 0 48 1 93 0 49 1 97 0 50 1 101 0 51 1 105 0 52 1 109 0 53 1 113 0 54 1 117 0 60 1 121 0 76 1 125 0 77 1 129 0 78 0 201 0 81 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 1 209 0 138 1 213 0 139 1 217 0 140 1 221 0 141 1 225 0 142 1 229 0 143 5 101 0 144] #[1 3 85 0 21 5 105 0 26] #[1 3 85 0 21 5 109 0 26] #[0 1 230 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 1 226 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 1 234 0 21 0 26] #[0 1 238 0 16 0 21 0 26 0 60 0 80 0 82] #[0 1 242 0 21 0 26 0 27 0 79] #[0 1 242 0 21 0 26 0 27 0 79] #[0 1 246 0 21 0 60 0 82] #[0 1 250 0 21 0 82] #[1 1 33 0 19 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 77 0 38 1 81 0 39 1 85 0 40 1 89 0 48 1 93 0 49 1 97 0 50 1 101 0 51 1 105 0 52 1 109 0 53 1 113 0 54 1 117 0 60 1 121 0 76 1 125 0 77 1 129 0 78 0 201 0 81 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 1 209 0 138 1 213 0 139 1 217 0 140 1 221 0 141 1 225 0 142 1 229 0 143 5 113 0 144] #[0 1 254 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[1 1 33 0 19 1 37 0 20 1 41 0 22 1 45 0 23 1 49 0 27 1 53 0 28 1 57 0 32 1 61 0 33 1 65 0 34 1 69 0 35 1 73 0 36 1 77 0 38 1 81 0 39 1 85 0 40 1 89 0 48 1 93 0 49 1 97 0 50 1 101 0 51 1 105 0 52 1 109 0 53 1 113 0 54 1 117 0 60 1 121 0 76 1 125 0 77 1 129 0 78 0 201 0 81 1 137 0 84 1 141 0 85 1 145 0 87 1 149 0 88 1 153 0 89 1 157 0 90 1 161 0 92 1 165 0 93 1 169 0 94 1 173 0 95 1 177 0 96 1 181 0 97 1 185 0 98 1 189 0 99 1 193 0 100 1 197 0 101 1 201 0 102 1 205 0 105 1 209 0 138 1 213 0 139 1 217 0 140 1 221 0 141 1 225 0 142 1 229 0 143 5 117 0 144] #[0 5 121 0 60] #[0 2 2 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 2 6 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82] #[0 2 6 0 19 0 20 0 22 0 23 0 27 0 28 0 32 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 46 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 60 0 76 0 77 0 78 0 81 0 82]	).</body></methods><methods><class-id>Refactory.SmaCC.CParser</class-id> <category>scanning</category><body package="SmaCC C Parser" selector="addTypeName:">addTypeName: aString 	scanner addTypeName: aString</body></methods><methods><class-id>Refactory.SmaCC.CParser class</class-id> <category>generated-accessing</category><body package="SmaCC C Parser" selector="scannerClass">scannerClass	^CScanner</body></methods><methods><class-id>Refactory.SmaCC.CParser class</class-id> <category>file types</category><body package="SmaCC C Parser" selector="fileExtension">fileExtension	^'.c'</body><body package="SmaCC C Parser" selector="fileExtensionType">fileExtensionType	^'C files'</body></methods><methods><class-id>Refactory.SmaCC.CParser class</class-id> <category>generated</category><body package="SmaCC C Parser" selector="definitionComment">definitionComment"&lt;H&gt;	: [a-fA-F0-9]	;&lt;IS&gt;	: [uUlL]		;&lt;D&gt;	: [0-9]	;&lt;E&gt;	: [Ee][\+\-]?&lt;D&gt;+		;&lt;FS&gt;	: [fFlL]		;&lt;ELLIPSIS&gt; 	: \.\.\. 	;&lt;comment&gt;	: (\/\* [^\*]* \*+ ([^\/\*] [^\*]* \*+)* \/)	;&lt;LETTER&gt;	: [a-zA-Z_] 	;&lt;DIGIT&gt; 	: [0-9] 	;&lt;IDENTIFIER&gt;	: &lt;LETTER&gt; (&lt;LETTER&gt;|&lt;DIGIT&gt;)*	;&lt;CONSTANT&gt;	: (0[xX]&lt;H&gt;+&lt;IS&gt;?) 	| (&lt;D&gt;+&lt;IS&gt;?) 	| (&lt;D&gt;+&lt;E&gt;&lt;FS&gt;?) 	| &lt;D&gt;*\.&lt;D&gt;+&lt;E&gt;?&lt;FS&gt;? 	| (L? \' ( (\\ .) | ([^\\\""]) )+ \')	;&lt;STRING_LITERAL&gt;	: L? \"" ( (\\ .) | ([^\\\""]) )* \""	;&lt;LEFT_BLOCK&gt;	: \[ | (\&lt; \:)	;&lt;RIGHT_BLOCK&gt;	: \] | (\: \&gt;)		;&lt;LEFT_BRACE&gt;	: \{ | (\&lt; \%)	;&lt;RIGHT_BRACE&gt;	: \} | (\% \&gt;)	;&lt;whitespace&gt;	: \s+	;%id &lt;TypeName&gt; &lt;IDENTIFIER&gt; &lt;CONSTANT&gt; ;translationUnit	: external_declaration	| translationUnit external_declaration	;primary_expression	: &lt;IDENTIFIER&gt;	| &lt;CONSTANT&gt;	| &lt;STRING_LITERAL&gt;	| ""("" expression "")""	;postfix_expression	: primary_expression	| postfix_expression &lt;LEFT_BLOCK&gt; expression &lt;RIGHT_BLOCK&gt;	| postfix_expression ""("" "")""	| postfix_expression ""("" argument_expression_list "")""	| postfix_expression ""."" &lt;IDENTIFIER&gt;	| postfix_expression ""-&gt;"" &lt;IDENTIFIER&gt;	| postfix_expression ""++""	| postfix_expression ""--""	;argument_expression_list	: assignment_expression	| argument_expression_list "","" assignment_expression	;unary_expression	: postfix_expression	| ""++"" unary_expression	| ""--"" unary_expression	| unary_operator cast_expression	| ""sizeof"" unary_expression	| ""sizeof"" ""("" type_name "")""	;unary_operator	: ""&amp;""	| ""*""	| ""+""	| ""-""	| ""~""	| ""!""	;cast_expression	: unary_expression	| ""("" type_name "")"" cast_expression	;multiplicative_expression	: cast_expression	| multiplicative_expression ""*"" cast_expression	| multiplicative_expression ""/"" cast_expression	| multiplicative_expression ""%"" cast_expression	;additive_expression	: multiplicative_expression	| additive_expression ""+"" multiplicative_expression	| additive_expression ""-"" multiplicative_expression	;shift_expression	: additive_expression	| shift_expression ""&lt;&lt;"" additive_expression	| shift_expression ""&gt;&gt;"" additive_expression	;relational_expression	: shift_expression	| relational_expression ""&lt;"" shift_expression	| relational_expression ""&gt;"" shift_expression	| relational_expression ""&lt;="" shift_expression	| relational_expression ""&gt;="" shift_expression	;equality_expression	: relational_expression	| equality_expression ""=="" relational_expression	| equality_expression ""!="" relational_expression	;and_expression	: equality_expression	| and_expression ""&amp;"" equality_expression	;exclusive_or_expression	: and_expression	| exclusive_or_expression ""^"" and_expression	;inclusive_or_expression	: exclusive_or_expression	| inclusive_or_expression ""|"" exclusive_or_expression	;logical_and_expression	: inclusive_or_expression	| logical_and_expression ""&amp;&amp;"" inclusive_or_expression	;logical_or_expression	: logical_and_expression	| logical_or_expression ""||"" logical_and_expression	;conditional_expression	: logical_or_expression	| logical_or_expression ""?"" expression "":"" conditional_expression	;assignment_expression	: conditional_expression	| unary_expression assignment_operator assignment_expression	;assignment_operator	: ""=""	| ""*=""	| ""/=""	| ""%=""	| ""+=""	| ""-=""	| ""&lt;&lt;=""	| ""&gt;&gt;=""	| ""&amp;=""	| ""^=""	| ""|=""	;expression	: assignment_expression	| expression "","" assignment_expression	;constant_expression	: conditional_expression	;declaration	: declaration_specifiers "";""	| init_declaration "";""	;init_declaration	: declaration_specifiers init_declarator_list 		{'1' first value = 'typedef'			ifTrue: 				[1 to: '2' size by: 2 do: [:i | self addTypeName: ('2' at: i) value]].		self reduceFor: nodes}	;declaration_specifiers	: storage_class_specifier	| storage_class_specifier declaration_specifiers	| type_specifier	| type_specifier declaration_specifiers	| type_qualifier	| type_qualifier declaration_specifiers	;init_declarator_list	: init_declarator	| init_declarator_list "","" init_declarator	;init_declarator	: declarator	| declarator ""="" initializer	;storage_class_specifier	: ""typedef""	| ""extern""	| ""static""	| ""auto""	| ""register""	;type_specifier	: ""void""	| ""char""	| ""short""	| ""int""	| ""long""	| ""float""	| ""double""	| ""signed""	| ""unsigned""	| struct_or_union_specifier	| enum_specifier	| &lt;TypeName&gt;	;struct_or_union_specifier	: struct_or_union &lt;IDENTIFIER&gt; &lt;LEFT_BRACE&gt; struct_declaration_list &lt;RIGHT_BRACE&gt; {self addTypeName: '2' value. self reduceFor: nodes}	| struct_or_union &lt;LEFT_BRACE&gt; struct_declaration_list &lt;RIGHT_BRACE&gt;	| struct_or_union &lt;IDENTIFIER&gt; {self addTypeName: '2' value. self reduceFor: nodes}	;struct_or_union	: ""struct""	| ""union""	;struct_declaration_list	: struct_declaration	| struct_declaration_list struct_declaration	;struct_declaration	: specifier_qualifier_list struct_declarator_list "";""	;specifier_qualifier_list	: type_specifier specifier_qualifier_list	| type_specifier	| type_qualifier specifier_qualifier_list	| type_qualifier	;struct_declarator_list	: struct_declarator	| struct_declarator_list "","" struct_declarator	;struct_declarator	: declarator	| "":"" constant_expression	| declarator "":"" constant_expression	;enum_specifier	: ""enum"" &lt;LEFT_BRACE&gt; enumerator_list &lt;RIGHT_BRACE&gt;	| ""enum"" &lt;IDENTIFIER&gt; &lt;LEFT_BRACE&gt; enumerator_list &lt;RIGHT_BRACE&gt;  {self addTypeName: '2' value. self reduceFor: nodes}	| ""enum"" &lt;IDENTIFIER&gt;  {self addTypeName: '2' value. self reduceFor: nodes}	;enumerator_list	: enumerator	| enumerator_list "","" enumerator	;enumerator	: &lt;IDENTIFIER&gt;	| &lt;IDENTIFIER&gt; ""="" constant_expression	;type_qualifier	: ""const""	| ""volatile""	;declarator	: pointer direct_declarator	| direct_declarator	;direct_declarator	: &lt;IDENTIFIER&gt;	| ""("" declarator "")""	| direct_declarator &lt;LEFT_BLOCK&gt; constant_expression &lt;RIGHT_BLOCK&gt;	| direct_declarator &lt;LEFT_BLOCK&gt; &lt;RIGHT_BLOCK&gt;	| direct_declarator ""("" parameter_type_list "")""	| direct_declarator ""("" identifier_list "")""	| direct_declarator ""("" "")""	;pointer	: ""*""	| ""*"" type_qualifier_list	| ""*"" pointer	| ""*"" type_qualifier_list pointer	;type_qualifier_list	: type_qualifier	| type_qualifier_list type_qualifier	;parameter_type_list	: parameter_list	| parameter_list "","" &lt;ELLIPSIS&gt;	;parameter_list	: parameter_declaration	| parameter_list "","" parameter_declaration	;parameter_declaration	: declaration_specifiers declarator	| declaration_specifiers abstract_declarator	| declaration_specifiers	;identifier_list	: &lt;IDENTIFIER&gt;	| identifier_list "","" &lt;IDENTIFIER&gt;	;type_name	: specifier_qualifier_list	| specifier_qualifier_list abstract_declarator	;abstract_declarator	: pointer	| direct_abstract_declarator	| pointer direct_abstract_declarator	;direct_abstract_declarator	: ""("" abstract_declarator "")""	| &lt;LEFT_BLOCK&gt; &lt;RIGHT_BLOCK&gt;	| &lt;LEFT_BLOCK&gt; constant_expression &lt;RIGHT_BLOCK&gt;	| direct_abstract_declarator &lt;LEFT_BLOCK&gt; &lt;RIGHT_BLOCK&gt;	| direct_abstract_declarator &lt;LEFT_BLOCK&gt; constant_expression &lt;RIGHT_BLOCK&gt;	| ""("" "")""	| ""("" parameter_type_list "")""	| direct_abstract_declarator ""("" "")""	| direct_abstract_declarator ""("" parameter_type_list "")""	;initializer	: assignment_expression	| &lt;LEFT_BRACE&gt; initializer_list &lt;RIGHT_BRACE&gt;	| &lt;LEFT_BRACE&gt; initializer_list "","" &lt;RIGHT_BRACE&gt;	;initializer_list	: initializer	| initializer_list "","" initializer	;statement	: labeled_statement	| compound_statement	| expression_statement	| selection_statement	| iteration_statement	| jump_statement	;labeled_statement	: &lt;IDENTIFIER&gt; "":"" statement	| ""case"" constant_expression "":"" statement	| ""default"" "":"" statement	;compound_statement	: &lt;LEFT_BRACE&gt; &lt;RIGHT_BRACE&gt;	| &lt;LEFT_BRACE&gt; statement_list &lt;RIGHT_BRACE&gt;	| &lt;LEFT_BRACE&gt; declaration_list &lt;RIGHT_BRACE&gt;	| &lt;LEFT_BRACE&gt; declaration_list statement_list &lt;RIGHT_BRACE&gt;	;declaration_list	: declaration	| declaration_list declaration	;statement_list	: statement	| statement_list statement	;expression_statement	: "";""	| expression "";""	;selection_statement	: ""if"" ""("" expression "")"" statement	| ""if"" ""("" expression "")"" statement ""else"" statement	| ""switch"" ""("" expression "")"" statement	;iteration_statement	: ""while"" ""("" expression "")"" statement	| ""do"" statement ""while"" ""("" expression "")"" "";""	| ""for"" ""("" expression_statement expression_statement "")"" statement	| ""for"" ""("" expression_statement expression_statement expression "")"" statement	;jump_statement	: ""goto"" &lt;IDENTIFIER&gt; "";""	| ""continue"" "";""	| ""break"" "";""	| ""return"" "";""	| ""return"" expression "";""	;external_declaration	: function_definition	| declaration	;function_definition	: declaration_specifiers declarator declaration_list compound_statement	| declaration_specifiers declarator compound_statement	| declarator declaration_list compound_statement	| declarator compound_statement	;"</body><body package="SmaCC C Parser" selector="startingStateFortranslationUnit">startingStateFortranslationUnit	^1</body></methods><methods><class-id>Refactory.SmaCC.CScanner</class-id> <category>generated</category><body package="SmaCC C Parser" selector="CONSTANTId">CONSTANTId	^77</body><body package="SmaCC C Parser" selector="IDENTIFIERId">IDENTIFIERId	^76</body><body package="SmaCC C Parser" selector="TypeNameId">TypeNameId	^150</body><body package="SmaCC C Parser" selector="emptySymbolTokenId">emptySymbolTokenId	^148</body><body package="SmaCC C Parser" selector="errorTokenId">errorTokenId	^149</body><body package="SmaCC C Parser" selector="scan1">scan1	[self step.	currentCharacter == $" ifTrue: [^self recordAndReportMatch: #(78)].	currentCharacter == $\		ifTrue:			[self step.			^self scan1]] repeat</body><body package="SmaCC C Parser" selector="scan10">scan10	[self recordMatch: #(77).	self step.	currentCharacter == $. ifTrue: [^self scan9].	currentCharacter isDigit] whileTrue.	('Ee' includes: currentCharacter) ifTrue: [^self scan6].	('LUlu' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(77)].	^self reportLastMatch</body><body package="SmaCC C Parser" selector="scan2">scan2	self step.	currentCharacter == $\ ifTrue: [^self scan4].	(currentCharacter &lt;= $! or: [(currentCharacter between: $# and: $[) or: [currentCharacter &gt;= $]]]) ifTrue: [^self scan3].	^self reportLastMatch</body><body package="SmaCC C Parser" selector="scan3">scan3	[self step.	currentCharacter == $'		ifTrue:			[[self recordMatch: #(77).			self step.			currentCharacter == $'] whileTrue.			currentCharacter == $\ ifTrue: [^self scan4].			(currentCharacter &lt;= $! or: [(currentCharacter between: $# and: $&amp;) or: [(currentCharacter between: $( and: $[) or: [currentCharacter &gt;= $]]]])				ifTrue: [^self scan3].			^self reportLastMatch].	currentCharacter == $\ ifTrue: [^self scan4].	currentCharacter &lt;= $! or: [(currentCharacter between: $# and: $&amp;) or: [(currentCharacter between: $( and: $[) or: [currentCharacter &gt;= $]]]]]		whileTrue.	^self reportLastMatch</body><body package="SmaCC C Parser" selector="scan4">scan4	self step.	^self scan3</body><body package="SmaCC C Parser" selector="scan5">scan5	[self recordMatch: #(77).	self step.	currentCharacter isDigit] whileTrue.	('Ee' includes: currentCharacter) ifTrue: [^self scan6].	('FLfl' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(77)].	^self reportLastMatch</body><body package="SmaCC C Parser" selector="scan6">scan6	self step.	('+-' includes: currentCharacter) ifTrue: [self step].	currentCharacter isDigit ifTrue: [^self scan7].	^self reportLastMatch</body><body package="SmaCC C Parser" selector="scan7">scan7	[self recordMatch: #(77).	self step.	currentCharacter isDigit] whileTrue.	('FLfl' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(77)].	^self reportLastMatch</body><body package="SmaCC C Parser" selector="scan8">scan8	[self step.	currentCharacter == $*		ifTrue:			[[self step.			currentCharacter == $*] whileTrue.			currentCharacter == $/ ifTrue: [^self recordAndReportMatch: #(75)].			^self scan8]] repeat</body><body package="SmaCC C Parser" selector="scan9">scan9	self step.	currentCharacter isDigit ifTrue: [^self scan5].	^self reportLastMatch</body><body package="SmaCC C Parser" selector="scanForToken">scanForToken	self step.	currentCharacter == $!		ifTrue:			[self recordMatch: #(32).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(4)].			^self reportLastMatch].	currentCharacter == $" ifTrue: [^self scan1].	currentCharacter == $%		ifTrue:			[self recordMatch: #(30).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(12)].			currentCharacter == $&gt; ifTrue: [^self recordAndReportMatch: #(82)].			^self reportLastMatch].	currentCharacter == $&amp;		ifTrue:			[self recordMatch: #(28).			self step.			currentCharacter == $&amp; ifTrue: [^self recordAndReportMatch: #(1)].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(63)].			^self reportLastMatch].	currentCharacter == $' ifTrue: [^self scan2].	currentCharacter == $( ifTrue: [^self recordAndReportMatch: #(27)].	currentCharacter == $) ifTrue: [^self recordAndReportMatch: #(26)].	currentCharacter == $*		ifTrue:			[self recordMatch: #(36).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(14)].			^self reportLastMatch].	currentCharacter == $+		ifTrue:			[self recordMatch: #(35).			self step.			currentCharacter == $+ ifTrue: [^self recordAndReportMatch: #(23)].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(11)].			^self reportLastMatch].	currentCharacter == $, ifTrue: [^self recordAndReportMatch: #(21)].	currentCharacter == $-		ifTrue:			[self recordMatch: #(34).			self step.			currentCharacter == $- ifTrue: [^self recordAndReportMatch: #(22)].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(37)].			currentCharacter == $&gt; ifTrue: [^self recordAndReportMatch: #(24)].			^self reportLastMatch].	currentCharacter == $.		ifTrue:			[self recordMatch: #(25).			self step.			currentCharacter == $.				ifTrue:					[self step.					currentCharacter == $. ifTrue: [^self recordAndReportMatch: #(74)].					^self reportLastMatch].			currentCharacter isDigit ifTrue: [^self scan5].			^self reportLastMatch].	currentCharacter == $/		ifTrue:			[self recordMatch: #(31).			self step.			currentCharacter == $* ifTrue: [^self scan8].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(13)].			^self reportLastMatch].	currentCharacter == $0		ifTrue:			[self recordMatch: #(77).			self step.			currentCharacter == $. ifTrue: [^self scan9].			currentCharacter isDigit ifTrue: [^self scan10].			('Ee' includes: currentCharacter) ifTrue: [^self scan6].			('Xx' includes: currentCharacter)				ifTrue:					[self step.					(currentCharacter isDigit or: [(currentCharacter between: $A and: $F) or: [currentCharacter between: $a and: $f]])						ifTrue:							[[self recordMatch: #(77).							self step.							currentCharacter isDigit or: [(currentCharacter between: $A and: $F) or: [currentCharacter between: $a and: $f]]] whileTrue.							('LUlu' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(77)]].					^self reportLastMatch].			('LUlu' includes: currentCharacter) ifTrue: [^self recordAndReportMatch: #(77)].			^self reportLastMatch].	currentCharacter == $:		ifTrue:			[self recordMatch: #(16).			self step.			currentCharacter == $&gt; ifTrue: [^self recordAndReportMatch: #(80)].			^self reportLastMatch].	currentCharacter == $; ifTrue: [^self recordAndReportMatch: #(60)].	currentCharacter == $&lt;		ifTrue:			[self recordMatch: #(18).			self step.			currentCharacter == $% ifTrue: [^self recordAndReportMatch: #(81)].			currentCharacter == $: ifTrue: [^self recordAndReportMatch: #(79)].			currentCharacter == $&lt;				ifTrue:					[self recordMatch: #(29).					self step.					currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(55)].					^self reportLastMatch].			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(7)].			^self reportLastMatch].	currentCharacter == $=		ifTrue:			[self recordMatch: #(15).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(5)].			^self reportLastMatch].	currentCharacter == $&gt;		ifTrue:			[self recordMatch: #(8).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(6)].			currentCharacter == $&gt;				ifTrue:					[self recordMatch: #(10).					self step.					currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(64)]].			^self reportLastMatch].	currentCharacter == $? ifTrue: [^self recordAndReportMatch: #(17)].	currentCharacter == $L		ifTrue:			[self recordMatch: #(76).			self step.			currentCharacter == $" ifTrue: [^self scan1].			currentCharacter == $' ifTrue: [^self scan2].			(currentCharacter isAlphaNumeric or: [currentCharacter == $_])				ifTrue:					[[self recordMatch: #(76).					self step.					currentCharacter isAlphaNumeric or: [currentCharacter == $_]] whileTrue].			^self reportLastMatch].	currentCharacter == $[ ifTrue: [^self recordAndReportMatch: #(79)].	currentCharacter == $] ifTrue: [^self recordAndReportMatch: #(80)].	currentCharacter == $^		ifTrue:			[self recordMatch: #(3).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(62)].			^self reportLastMatch].	currentCharacter == ${ ifTrue: [^self recordAndReportMatch: #(81)].	currentCharacter == $|		ifTrue:			[self recordMatch: #(2).			self step.			currentCharacter == $= ifTrue: [^self recordAndReportMatch: #(61)].			currentCharacter == $| ifTrue: [^self recordAndReportMatch: #(9)].			^self reportLastMatch].	currentCharacter == $} ifTrue: [^self recordAndReportMatch: #(82)].	currentCharacter == $~ ifTrue: [^self recordAndReportMatch: #(33)].	currentCharacter isDigit ifTrue: [^self scan10].	((currentCharacter between: Character tab and: Character cr) or: [currentCharacter == Character space])		ifTrue:			[[self recordMatch: #(83).			self step.			(currentCharacter between: Character tab and: Character cr) or: [currentCharacter == Character space]] whileTrue.			^self reportLastMatch].	(currentCharacter isAlphabetic or: [currentCharacter == $_])		ifTrue:			[[self recordMatch: #(76).			self step.			currentCharacter isAlphaNumeric or: [currentCharacter == $_]] whileTrue].	^self reportLastMatch</body><body package="SmaCC C Parser" selector="tokenActions">tokenActions	^#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil #comment #IDENTIFIER nil nil nil nil nil nil #whitespace)</body></methods><methods><class-id>Refactory.SmaCC.CScanner</class-id> <category>scanning</category><body package="SmaCC C Parser" selector="IDENTIFIER">IDENTIFIER	| name |	name := outputStream contents.	matchActions := (typeNames includes: name)		ifTrue: [Array with: self TypeNameId]		ifFalse: [Array with: self IDENTIFIERId].	outputStream reset.	^SmaCCToken		value: name		start: start		ids: matchActions</body><body package="SmaCC C Parser" selector="addTypeName:">addTypeName: aString 	typeNames add: aString</body></methods><methods><class-id>Refactory.SmaCC.CScanner</class-id> <category>initialize-release</category><body package="SmaCC C Parser" selector="initialize">initialize	super initialize.	typeNames := Set new</body></methods><methods><class-id>Refactory.SmaCC.CScanner class</class-id> <category>generated-initialization</category><body package="SmaCC C Parser" selector="initializeKeywordMap">initializeKeywordMap	keywordMap := Dictionary new.	#(#(76 'auto' 66) #(76 'break' 48) #(76 'case' 40) #(76 'char' 73) #(76 'const' 42) #(76 'continue' 49) #(76 'default' 39) #(76 'do' 52) #(76 'double' 57) #(76 'else' 46) #(76 'enum' 43) #(76 'extern' 58) #(76 'float' 68) #(76 'for' 51) #(76 'goto' 50) #(76 'if' 38) #(76 'int' 69) #(76 'long' 67) #(76 'register' 71) #(76 'return' 19) #(76 'short' 70) #(76 'signed' 56) #(76 'sizeof' 20) #(76 'static' 65) #(76 'struct' 45) #(76 'switch' 54) #(76 'typedef' 59) #(76 'union' 44) #(76 'unsigned' 47) #(76 'void' 72) #(76 'volatile' 41) #(76 'while' 53))		do: [:each | (keywordMap at: each first ifAbsentPut: [Dictionary new]) at: (each at: 2) put: each last].	^keywordMap</body></methods><methods><class-id>Refactory.SmaCC.CScanner class</class-id> <category>testing</category><body package="SmaCC C Parser" selector="needsLineNumbers">needsLineNumbers	^true</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>SmaCCScanner</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream start matchActions matchEnd currentCharacter outputStream lastOutputStreamMatchPosition lastMatchWasEmpty returnMatchBlock state comments </inst-vars><class-inst-vars>keywordMap </class-inst-vars><imports></imports><category>SmaCC Runtime</category><attributes><package>SmaCC Runtime</package></attributes></class><class><name>SmaCCParser</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>scanner currentToken errorToken stateStack nodeStack </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Runtime</category><attributes><package>SmaCC Runtime</package></attributes></class></st-source>