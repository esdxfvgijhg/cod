<?xml version="1.0"?><st-source><!-- Name: SmaCC Rewrite ServerNotice: Comment: This package is part of the Smalltalk Compiler-Compiler (SmaCC) written by John Brant and Don Roberts. It contains server that can be used to run the rewrite engine in multiple processes. A server can be started by evaluating:	SmaCCServer startOn: self portIf you want more information about SmaCC, visit http://www.refactoryworkers.com/SmaCC/. - - - - - - - - - - - - - - - - - - - - - - - - -Copyright (c) 2002-2010 John Brant, Don RobertsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.DbIdentifier: bear73DbTrace: 317934DevelopmentPrerequisites: #(#(#any 'SmaCC Namespace' ''))DisregardedPrerequisites: #(#(#name 'Base VisualWorks' #componentType #bundle))PackageName: SmaCC Rewrite ServerParcel: #('SmaCC Rewrite Server')PrerequisiteParcels: #(#('SmaCC Namespace' ''))PrintStringCache: (2.0.3,brant)Version: 2.0.3Date: 9:56:25 AM January 28, 2011 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.8 (jan11.4) of January 28, 2011 on January 28, 2011 at 9:56:25 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SmaCCServer</name><environment>Refactory.SmaCC</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>socket availableServers registeredServers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmaCC Rewrite Server</category><attributes><package>SmaCC Rewrite Server</package></attributes></class><methods><class-id>Refactory.SmaCC.SmaCCServer</class-id> <category>running</category><body package="SmaCC Rewrite Server" selector="nextInteger:">nextInteger: aStream	| value |	value := 0.	0 to: 3 do: [:i | value := value + (aStream next bitShift: i * 8)].	^value</body><body package="SmaCC Rewrite Server" selector="nextPutInteger:on:">nextPutInteger: anInteger on: aStream	| value |	value := anInteger.	4		timesRepeat:			[aStream nextPut: (value bitAnd: 16rFF).			value := value bitShift: -8]</body><body package="SmaCC Rewrite Server" selector="process:">process: aSocketAccessor	| type stream connection |	connection := (ExternalConnection new)		input: aSocketAccessor;		output: aSocketAccessor;		yourself.	stream := (connection withEncoding: #binary) readAppendStream.	type := stream next.	type = $0 asInteger ifTrue: [^self register: stream].	type = $1 asInteger ifTrue: [^self processRequest: stream].	self error: 'Invalid request'</body><body package="SmaCC Rewrite Server" selector="processRequest:">processRequest: aStream	[[| string items canceled results |	string := (self readBytesFrom: aStream) asString.	items := string tokensBasedOn: (Character value: 0).	canceled := ValueHolder with: false.	results := SharedQueue new.	[items		do:			[:each | 			canceled value				ifFalse:					[| server |					server := availableServers next.					[self processRequest: each on: server notifying: results canceled: canceled] fork]]] fork.	[items size		timesRepeat:			[| bytes |			bytes := results next.			self writeBytes: bytes on: aStream]] on: Error do: [:ex | canceled value: true]] ensure: [aStream close]] fork</body><body package="SmaCC Rewrite Server" selector="processRequest:on:notifying:canceled:">processRequest: aByteArray on: aStream notifying: aSharedQueue canceled: aValueHolder	| resultBytes |	[self writeBytes: aByteArray on: aStream.	resultBytes := self readBytesFrom: aStream.	availableServers nextPut: aStream]		on: Error		do:			[:ex | 			registeredServers remove: aStream.			[aStream close] on: Error do: [:e | ].			aValueHolder value ifFalse: [^self].			^self				processRequest: aByteArray				on: availableServers next				notifying: aSharedQueue				canceled: aValueHolder].	aSharedQueue nextPut: resultBytes</body><body package="SmaCC Rewrite Server" selector="readBytesFrom:">readBytesFrom: aStream	^aStream next: (self nextInteger: aStream)</body><body package="SmaCC Rewrite Server" selector="register:">register: aSocket	availableServers nextPut: aSocket.	registeredServers add: aSocket</body><body package="SmaCC Rewrite Server" selector="run">run	[self process: socket accept] repeat</body><body package="SmaCC Rewrite Server" selector="startOn:">startOn: anInteger	"| server |	server := self new.	[server startOn: 36rSM] fork.	server"	availableServers := SharedQueue new.	registeredServers := IdentitySet new.	socket := SocketAccessor newTCPserverAtPort: anInteger.	socket listenFor: 50.	[self run] ensure: [socket close]</body><body package="SmaCC Rewrite Server" selector="writeBytes:on:">writeBytes: bytes on: aStream	self nextPutInteger: bytes size on: aStream.	aStream		nextPutAll: bytes asByteArray;		flush</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class></st-source>