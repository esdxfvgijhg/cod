<?xml version="1.0"?><st-source><!-- Name: TrippyFloatingPointExtensionsComment: This package provides additional IEEE functionality to Trippy.  Floating point value inspectors receive the following six additional fields:ieee - actual binary: Displays the bits of the floating point number as they are stored in the platform.  This field is sensitive to storage endianness.ieee - actual hex: Displays the bytes of the floating point number as they are stored in the platform.  This field is sensitive to storage endianness.ieee - binary: Same as 'ieee - actual binary', but always display information in natural (big endian) order.ieee - hex: Same as 'ieee - actual hex', but always display information in natural (big endian) order.ieee - parsed binary: Same as 'ieee - binary', but separate the sign, exponent and mantissa fields.ieee - parsed hex: Same as 'ieee - hex', but separate the sign, exponent and mantissa fields.DbIdentifier: bear73DbTrace: 305054PackageName: TrippyFloatingPointExtensionsParcel: #('TrippyFloatingPointExtensions')PrintStringCache: (7.8 - 1001,avalloud)Version: 7.8 - 1001Date: 10:15:48 AM October 22, 2010 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.8 (oct10.4) of October 22, 2010 on October 22, 2010 at 10:15:48 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Core.LimitedPrecisionReal class</class-id> <category>constants access</category><body package="TrippyFloatingPointExtensions" selector="exponentBits">exponentBits	^self instanceByteSize * 8 - 1 - self actualPrecision</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy</category><body package="TrippyFloatingPointExtensions" selector="bitsBE">bitsBE	^self byteIndicesBE		inject: 0		into: [:answer :eachIndex | answer * 256 + (self basicAt: eachIndex)]</body><body package="TrippyFloatingPointExtensions" selector="byteIndicesBE">byteIndicesBE	^self byteIndicesBE: self isBigEndian</body><body package="TrippyFloatingPointExtensions" selector="byteIndicesBE:">byteIndicesBE: useBigEndian	^useBigEndian		ifTrue: [1 to: self class instanceByteSize]		ifFalse: [self class instanceByteSize to: 1 by: -1]</body><body package="TrippyFloatingPointExtensions" selector="byteIndicesLE">byteIndicesLE	^self byteIndicesBE: self isBigEndian not</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy - hex</category><body package="TrippyFloatingPointExtensions" selector="hexPrintStringBE">hexPrintStringBE	^self hexPrintStringBEFor: self</body><body package="TrippyFloatingPointExtensions" selector="hexPrintStringBEFor:">hexPrintStringBEFor: aLimitedPrecisionReal	^self		printBytesIndices: self byteIndicesBE		of: aLimitedPrecisionReal		accordingTo: [:eachByte :writeStream | self printByte: eachByte hexOn: writeStream]</body><body package="TrippyFloatingPointExtensions" selector="hexPrintStringLE">hexPrintStringLE	^self hexPrintStringLEFor: self</body><body package="TrippyFloatingPointExtensions" selector="hexPrintStringLEFor:">hexPrintStringLEFor: aLimitedPrecisionReal	^self		printBytesIndices: self byteIndicesLE		of: aLimitedPrecisionReal		accordingTo: [:eachByte :writeStream | self printByte: eachByte hexOn: writeStream]</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy</category><body package="TrippyFloatingPointExtensions" selector="inspectorExtraAttributesBE">inspectorExtraAttributesBE	| answer |	answer := OrderedCollection new.	answer add:		(Tools.Trippy.TextAttribute			label: #hexLE &lt;&lt; #dialogs &gt;&gt; 'ieee - hex'			text: self hexPrintStringBE).	answer add:		(Tools.Trippy.TextAttribute			label: #binaryLE &lt;&lt; #dialogs &gt;&gt; 'ieee - binary'			text: self paddedBinaryPrintStringBE).	^answer</body><body package="TrippyFloatingPointExtensions" selector="inspectorExtraAttributesFormat">inspectorExtraAttributesFormat	| answer |	answer := OrderedCollection new.	answer add:		(Tools.Trippy.TextAttribute			label: #hexLE &lt;&lt; #dialogs &gt;&gt; 'ieee - parsed hex'			text: self nativeFormatHexPrintString).	answer add:		(Tools.Trippy.TextAttribute			label: #binaryLE &lt;&lt; #dialogs &gt;&gt; 'ieee - parsed binary'			text: self nativeFormatPaddedBinaryPrintString).	^answer</body><body package="TrippyFloatingPointExtensions" selector="inspectorExtraAttributesLE">inspectorExtraAttributesLE	| answer |	answer := OrderedCollection new.	self isBigEndian ifTrue: [^answer].	answer add:		(Tools.Trippy.TextAttribute			label: #hexLE &lt;&lt; #dialogs &gt;&gt; 'ieee - actual hex'			text: self hexPrintStringLE).	answer add:		(Tools.Trippy.TextAttribute			label: #hexLE &lt;&lt; #dialogs &gt;&gt; 'ieee - actual binary'			text: self paddedBinaryPrintStringLE).	^answer</body><body package="TrippyFloatingPointExtensions" selector="nativeFormatExponent">nativeFormatExponent	^(self bitsBE bitShift: 0 - self class actualPrecision)		bitAnd: (1 bitShift: self class exponentBits) - 1</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy - hex - native format</category><body package="TrippyFloatingPointExtensions" selector="nativeFormatHexPrintString">nativeFormatHexPrintString	| answer |	answer := String new writeStream.	self printNativeFormatSignOn: answer.	self printNativeFormatExponentHexOn: answer.	self printNativeFormatMantissaHexOn: answer.	^answer contents</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy</category><body package="TrippyFloatingPointExtensions" selector="nativeFormatMantissa">nativeFormatMantissa	^self bitsBE bitAnd: (1 bitShift: self class actualPrecision) - 1</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy - binary - native format</category><body package="TrippyFloatingPointExtensions" selector="nativeFormatPaddedBinaryPrintString">nativeFormatPaddedBinaryPrintString	| answer |	answer := String new writeStream.	self printNativeFormatSignOn: answer.	self printNativeFormatExponentPaddedBinaryOn: answer.	self printNativeFormatMantissaPaddedBinaryOn: answer.	^answer contents</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy - binary</category><body package="TrippyFloatingPointExtensions" selector="paddedBinaryPrintStringBE">paddedBinaryPrintStringBE	^self paddedBinaryPrintStringBEFor: self</body><body package="TrippyFloatingPointExtensions" selector="paddedBinaryPrintStringBEFor:">paddedBinaryPrintStringBEFor: aLimitedPrecisionReal	^self		printBytesIndices: self byteIndicesBE		of: aLimitedPrecisionReal		accordingTo: [:eachByte :writeStream | self printByte: eachByte bitsOn: writeStream]</body><body package="TrippyFloatingPointExtensions" selector="paddedBinaryPrintStringLE">paddedBinaryPrintStringLE	^self paddedBinaryPrintStringLEFor: self</body><body package="TrippyFloatingPointExtensions" selector="paddedBinaryPrintStringLEFor:">paddedBinaryPrintStringLEFor: aLimitedPrecisionReal	^self		printBytesIndices: self byteIndicesLE		of: aLimitedPrecisionReal		accordingTo: [:eachByte :writeStream | self printByte: eachByte bitsOn: writeStream]</body><body package="TrippyFloatingPointExtensions" selector="printByte:bitsOn:">printByte: aByte bitsOn: aStream	aByte		printOn: aStream		paddedWith: $0		to: 8		base: 2</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy - hex</category><body package="TrippyFloatingPointExtensions" selector="printByte:hexOn:">printByte: aByte hexOn: aStream	aByte		printOn: aStream		base: 16		digitsToPad: 2		highDigit: 2</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy</category><body package="TrippyFloatingPointExtensions" selector="printBytesIndices:of:accordingTo:">printBytesIndices: indexesof: aLimitedPrecisionRealaccordingTo: aBlock	| answer |	answer := String new writeStream.	indexes		do:			[:eachIndex |				aBlock					value: (aLimitedPrecisionReal basicAt: eachIndex)					value: answer			]		separatedBy: [answer space].	^answer contents</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy - hex - native format</category><body package="TrippyFloatingPointExtensions" selector="printHex:bitsFrom:on:">printHex: bitSizebitsFrom: anIntegeron: aStream	self		printSquareBracketsOn: aStream		around:			[				(bitSize - 1 // 8 + 1 to: 1 by: -1)					do:						[:eachIndex |							| hexDigitsToPrint |							hexDigitsToPrint := eachIndex * 8 &gt; bitSize								ifTrue: [bitSize \\ 8 + 1 // 4]								ifFalse: [2].							(anInteger digitAt: eachIndex)								printOn: aStream								base: 16								digitsToPad: hexDigitsToPrint								highDigit: 2						]					separatedBy: [aStream space]			]</body><body package="TrippyFloatingPointExtensions" selector="printNativeFormatExponentHexOn:">printNativeFormatExponentHexOn: aStream	self		printHex: self class exponentBits		bitsFrom: self nativeFormatExponent		on: aStream</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy - binary - native format</category><body package="TrippyFloatingPointExtensions" selector="printNativeFormatExponentPaddedBinaryOn:">printNativeFormatExponentPaddedBinaryOn: aStream	self		printPaddedBinary: self class exponentBits		bitsFrom: self nativeFormatExponent		on: aStream</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy - hex - native format</category><body package="TrippyFloatingPointExtensions" selector="printNativeFormatMantissaHexOn:">printNativeFormatMantissaHexOn: aStream	self		printHex: self class actualPrecision		bitsFrom: self nativeFormatMantissa		on: aStream</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy - binary - native format</category><body package="TrippyFloatingPointExtensions" selector="printNativeFormatMantissaPaddedBinaryOn:">printNativeFormatMantissaPaddedBinaryOn: aStream	self		printPaddedBinary: self class actualPrecision		bitsFrom: self nativeFormatMantissa		on: aStream</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy</category><body package="TrippyFloatingPointExtensions" selector="printNativeFormatSignOn:">printNativeFormatSignOn: aStream	self		printSquareBracketsOn: aStream		around: [self signBit printOn: aStream]</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy - binary - native format</category><body package="TrippyFloatingPointExtensions" selector="printPaddedBinary:bitsFrom:on:">printPaddedBinary: bitSizebitsFrom: anIntegeron: aStream	self		printSquareBracketsOn: aStream		around:			[				(bitSize - 1 // 8 + 1 to: 1 by: -1)					do:						[:eachIndex |							| bitsToPrint |							bitsToPrint := eachIndex * 8 &gt; bitSize								ifTrue: [bitSize \\ 8]								ifFalse: [8].							(anInteger digitAt: eachIndex)								printOn: aStream								paddedWith: $0								to: bitsToPrint								base: 2						]					separatedBy: [aStream space]			]</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy</category><body package="TrippyFloatingPointExtensions" selector="printSquareBracketsOn:around:">printSquareBracketsOn: aStreamaround: aBlock	aStream nextPut: $[.	aBlock value.	aStream nextPut: $]</body></methods><methods><class-id>Core.SmallDouble</class-id> <category>printing - trippy</category><body package="TrippyFloatingPointExtensions" selector="bitsBE">bitsBE	^self asDegenerateDouble bitsBE</body></methods><methods><class-id>Core.SmallDouble</class-id> <category>printing - trippy - hex</category><body package="TrippyFloatingPointExtensions" selector="hexPrintStringBE">hexPrintStringBE	^self hexPrintStringBEFor: self asDegenerateDouble</body><body package="TrippyFloatingPointExtensions" selector="hexPrintStringLE">hexPrintStringLE	^self hexPrintStringLEFor: self asDegenerateDouble</body></methods><methods><class-id>Core.SmallDouble</class-id> <category>printing - trippy - binary</category><body package="TrippyFloatingPointExtensions" selector="paddedBinaryPrintStringBE">paddedBinaryPrintStringBE	^self paddedBinaryPrintStringBEFor: self asDegenerateDouble</body><body package="TrippyFloatingPointExtensions" selector="paddedBinaryPrintStringLE">paddedBinaryPrintStringLE	^self paddedBinaryPrintStringLEFor: self asDegenerateDouble</body></methods><methods><class-id>Core.LimitedPrecisionReal</class-id> <category>printing - trippy</category><body package="TrippyFloatingPointExtensions" selector="inspectorExtraAttributes">inspectorExtraAttributes	&lt;inspectorFields&gt;	| answer |	answer := OrderedCollection new.	answer addAll: self inspectorExtraAttributesBE.	answer addAll: self inspectorExtraAttributesLE.	answer addAll: self inspectorExtraAttributesFormat.	^answer</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>LimitedPrecisionReal</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>powersOfTwo </class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>SmallDouble</name><environment>Core</environment><super>Core.LimitedPrecisionReal</super><private>false</private><indexed-type>immediate</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class></st-source>