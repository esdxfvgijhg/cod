<?xml version="1.0"?><st-source><!-- Name: VRLensNotice: Copyright © 2002 Cincom Systems, Inc.  All Rights Reserved.Comment: This package contains some basic Lens enhancements.  Class ExtendedDataModel is useful for working with the ObjectLens outside the Lens Form structure - it contains convenience methods for login, logout, and querying.DevelopmentPrerequisites: #(#(#any 'BOSS' '') #(#any 'Database' '') #(#any 'Lens-Dev' '') #(#any 'Lens-Runtime' '') #(#any 'VRUIPainter' ''))PackageName: VRLensParcel: #('VRLens')ParcelName: VRLensPrerequisiteParcels: #(#('BOSS' '') #('Database' '') #('Lens-Dev' '') #('Lens-Runtime' '') #('VRUIPainter' ''))Version: 7Date: 10:26:17 AM November 19, 2015 --><time-stamp>From VisualWorks®, 8.1 of July 17, 2015 on November 19, 2015 at 10:26:17 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ExtendedLensApplication</name><environment>Lens</environment><super>Lens.LensMainApplication</super><private>false</private><indexed-type>none</indexed-type><inst-vars>qbeSlot user pwd failureString userField passwordField </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-Application-Frameworks</category><attributes><package>VRLens</package></attributes></class><comment><class-id>Lens.ExtendedLensApplication</class-id><body>This class is designed for ObjectLens form usage in the VR Framework.  It adds some useful application behaviorInstance Variables:	qbeSlot	&lt;Object&gt;	a place to hold an object for a QBE	user	&lt;String&gt;	 username for DB	pwd	 &lt;String&gt;	password for DB	failureString	&lt;String&gt;	 describes DB failures	userField	&lt;ValueHolder&gt;	holds username	passwordField	&lt;ValueHolder&gt;	holds password</body></comment><class><name>ExtendedDataModel</name><environment>Lens</environment><super>Lens.LensMainApplication</super><private>false</private><indexed-type>none</indexed-type><inst-vars>user pass fail reason transactionState </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-ApplicationFrameworks</category><attributes><package>VRLens</package></attributes></class><comment><class-id>Lens.ExtendedDataModel</class-id><body>This class subclasses LensMainApplication in a way that enables programmatic usage of the object lens.  It has extensive protocol for creating and accessing queries, and for logging in and out of a database without dialog boxes.Instance Variables:	user	&lt;String&gt;	 Username for db	pass	&lt;String&gt;	 Password for DB	fail	&lt;Boolean&gt;	If true, database operation failed	reason	&lt;String&gt;	 Description of failure	transactionState	&lt;Symbol&gt;	state of trx in process</body></comment><class><name>QBEManager</name><environment>Lens</environment><super>Lens.LensDataManager</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shouldRelease </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-Application-Frameworks</category><attributes><package>VRLens</package></attributes></class><comment><class-id>Lens.QBEManager</class-id><body>This is a VR Lens form that enables some QBE behaviorInstance Variables:	shouldRelease	&lt;Boolean&gt;	If true, clear QBE slot after each query</body></comment><methods><class-id>Lens.ExtendedLensApplication</class-id> <category>api</category><body package="VRLens">authenticate	"override the default to avoid the dialog.  Developer must have set username, password	into our instance variables"	failureString := nil.	self hasSession		ifFalse: [ ^nil ].	self existingSession username: user.	self existingSession connection class connectionExceptionSignal		handle: 			[:ex | self setFailureReason: ex signal.						ex return]		do: 			["Connect to the dbms."			self existingSession connect: pwd.			^self].</body><body package="VRLens">confirmationOfLogout	"make sure to nil the session"	super confirmationOfLogout.	self session: nil</body><body package="VRLens">login	"login to the database"	(self username: self userField value password: self passwordField value)		ifFalse: [ Dialog warn: 'Login failed: ', failureString]		ifTrue: [self conditionInterface]</body><body package="VRLens">performQuery: aString with: anObject	"perform a QBE.  Assume that the query is the concatenation of aString	with 'query'"	| queryName query |	queryName := (aString, 'Query') asSymbol.	query := self perform: queryName.	self qbeSlot: anObject.	self prepareObjectForQBE.	query session: self session.	^query values</body><body package="VRLens">prepareObjectForQBE	"iterate over the iVars of the sample object, replacing nil with Object new"	| sample dummy|	sample := self qbeSlot.	dummy := Object new.	1 to: sample class instVarNames size do:		[:index | (sample instVarAt: index) isNil					ifTrue: [ sample instVarAt: index put: dummy ]]</body><body package="VRLens">setFailureReason: signal	"set the failure string so failed logins can check"	failureString := signal errorString</body><body package="VRLens">username: username password: password	"log user into database"	user := username.	pwd := password.	self databaseLogin.	"do not hold password"	pwd := nil.	^self session hasDatabaseConnection</body></methods><methods><class-id>Lens.ExtendedLensApplication</class-id> <category>accessing</category><body package="VRLens">failureString	^failureString</body><body package="VRLens">passwordField	passwordField isNil ifTrue:		[passwordField := '' asValue].	^passwordField</body><body package="VRLens">qbeSlot	^qbeSlot</body><body package="VRLens">qbeSlot: aValue	qbeSlot := aValue</body><body package="VRLens">userField	userField isNil ifTrue:		[userField := '' asValue].	^userField</body></methods><methods><class-id>Lens.ExtendedLensApplication</class-id> <category>interface control</category><body package="VRLens">conditionInterface	"condition interface based on login"	self passwordField value: ''.</body></methods><methods><class-id>Lens.ExtendedDataModel</class-id> <category>accessing</category><body package="VRLens">fail	^fail</body><body package="VRLens">fail: aValue	fail := aValue</body><body package="VRLens">pass	^pass</body><body package="VRLens">pass: aValue	pass := aValue</body><body package="VRLens">reason	^reason</body><body package="VRLens">user	^user</body><body package="VRLens">user: aValue	user := aValue</body></methods><methods><class-id>Lens.ExtendedDataModel</class-id> <category>api</category><body package="VRLens">addAll: aCollection	self executeWithProtection: [self session addAll: aCollection].</body><body package="VRLens">addObject: anObject	"add object to the database"	self executeWithProtection: [self session add: anObject].</body><body package="VRLens">login: username password: password	"login to the database"	self user: username.	self pass: password.	self databaseLogin.</body><body package="VRLens">messageFor: exception	^exception errorString.</body><body package="VRLens">performQuery: aSymbol	"get the query"	| query sess |	query := self perform: aSymbol.	sess := self session.	query session: sess.	^query values asList</body><body package="VRLens">removeAll: aCollection	aCollection do: [:each |		self session remove: each].</body><body package="VRLens">removeObject: anObject	"remove object to the database"	self executeWithProtection: [self session remove: anObject].</body><body package="VRLens">updateAll: aCollection	aCollection do: [:each |		each postUpdates].</body><body package="VRLens">updateObject: anObject	"update object to the database"	 	self executeWithProtection: [anObject postUpdates].</body></methods><methods><class-id>Lens.ExtendedDataModel</class-id> <category>testing</category><body package="VRLens">isDataModel	^true</body><body package="VRLens">isDBAppModel	^false</body></methods><methods><class-id>Lens.ExtendedDataModel</class-id> <category>trx support</category><body package="VRLens">abortTransaction	"end a transaction"	transactionState := #transactionFailed.	self session rollback</body><body package="VRLens">beginTransaction	"start a transaction"	transactionState == #transactionStarted		ifTrue: [^self].	self session begin.	transactionState := #transactionStarted</body><body package="VRLens">endTransaction	"wrap up"	self fail		ifTrue: [self abortTransaction]		ifFalse: [self okTransaction]</body><body package="VRLens">okTransaction	"end a transaction"	self session commit.	transactionState := #transactionSuccess.</body><body package="VRLens">transactionState	^transactionState</body></methods><methods><class-id>Lens.ExtendedDataModel</class-id> <category>initialize-release</category><body package="VRLens">initialize	super initialize.	fail := false</body><body package="VRLens">release	"release all dbms related resources; rollback any uncommitted changes"	super release.	self databaseRollback.	self databaseLogout.	self session: nil.</body></methods><methods><class-id>Lens.ExtendedDataModel</class-id> <category>overrides</category><body package="VRLens">authenticate	"override the default to avoid the dialog.  Developer must have set username, password	into our instance variables"	self hasSession		ifFalse: [ ^nil ].	self existingSession username: self user.	self existingSession connection class connectionExceptionSignal		handle: 			[:ex | fail := true.					self reportError: ex.					ex return]		do: 			["Connect to the dbms."			self existingSession connect: self pass.			^self].</body><body package="VRLens">notifyUserOfLensException: anException 	"catch lens exceptions and report them"	self reportError: anException</body></methods><methods><class-id>Lens.ExtendedDataModel</class-id> <category>queries</category><body package="VRLens">doAllQuery: classNameSymbol forTable: tableNameString	| query container1 newChar |	query := LensQuery new.	container1 := classNameSymbol asString.	newChar := (container1 at: 1) asLowercase.	container1 at: 1 put: newChar.	query arrayContainerNames: (Array with: (Array with: container1 asSymbol with: classNameSymbol)).	query answerBlockSource: ''.	query selectBlockSource: ''.	query orderByBlockSource: ''.	query groupByBlockSource: ''.	query mode: nil.	query session: self session.	^query values</body><body package="VRLens">doEXDICommand: sqlString	"direct EXDI access for non query SQL"	| connection exdiSession |	connection := self session connection.	exdiSession := connection getSession.	exdiSession prepare: sqlString.	exdiSession execute.	exdiSession disconnect</body><body package="VRLens">doSQLQuery: aString forClass: classNameSymbol	| query container1 newChar | 	query := LensQuery new.	container1 := classNameSymbol asString.	newChar := (container1 at: 1) asLowercase.	container1 at: 1 put: newChar.	query arrayContainerNames: (Array with: (Array with: container1 asSymbol with: classNameSymbol)).	query answerBlockSource: ''.	query selectBlockSource: ''.	query orderByBlockSource: ''.	query groupByBlockSource: ''.	query alternateSQL: aString.	query session: self session.	query mode: nil.	^query values</body></methods><methods><class-id>Lens.ExtendedDataModel</class-id> <category>private</category><body package="VRLens">executeWithProtection: aBlock	"execute the block, looking for SQL errors"	| sig |	sig := SignalCollection new.	sig add: ExternalDatabaseConnection unableToExecuteSQLSignal.	sig add: ExternalDatabaseConnection unableToPrepareSignal.	sig add: ExternalDatabaseConnection externalDatabaseErrorSignal.	Cursor database showWhile: [sig handle: [:ex | self reportError: ex]								do: [aBlock value]]</body></methods><methods><class-id>Lens.ExtendedDataModel</class-id> <category>error reporting</category><body package="VRLens">reportError: exception	"subclasses should override"	reason := self messageFor: exception.	fail := true</body></methods><methods><class-id>Lens.QBEManager</class-id> <category>initialize-release</category><body package="VRLens">initialize	"set default to False"	super initialize.	self shouldRelease: false</body><body package="VRLens">initializeQBE: sampleObject	"initialize the QBE"	| wildcard |	"set up the qbe state"	wildcard := Object new.	1 to: sampleObject class instVarNames size do: [:index | 		(sampleObject instVarAt: index) isNil 			ifTrue: [sampleObject instVarAt: index put: wildcard]].</body><body package="VRLens">releaseQBE: sampleObject	"reset the QBE"	1 to: sampleObject class instVarNames size do: 		[:index | sampleObject instVarAt: index put: nil]</body></methods><methods><class-id>Lens.QBEManager</class-id> <category>qbe</category><body package="VRLens">factorResultsOn: aSymbol for: aList	"build a dictionary of lists based on the input selector "	|main sortSet |	main := Dictionary new.	sortSet := IdentitySet new.	aList do: [:each | sortSet add: (each perform: aSymbol)].	sortSet do: [:each | main at: each put: List new].	aList do: [:each | (main at: (each perform: aSymbol)) add: each].	^main</body><body package="VRLens">localCriteriaValid	"answer whether this form is ok for a query-subclasses should override"	^true</body><body package="VRLens">performQuery: anObject	"perform the query"	self initializeQBE: anObject.	super performQuery.	self shouldRelease ifTrue: [self releaseQBE: anObject]</body><body package="VRLens">restoreResults: aFile	"answer the results of the reading the file"	| bossFile results |	aFile asFilename exists	ifTrue: [bossFile := BinaryObjectStorage onOldNoScan: (aFile asFilename readStream).				[results := bossFile next] valueNowOrOnUnwindDo: [bossFile close]].			^results</body><body package="VRLens">storeResults: aCollection into: aFile	"store results"	| bossFile |	bossFile := BinaryObjectStorage onNew: (aFile asFilename writeStream).		[bossFile nextPut: aCollection] valueNowOrOnUnwindDo: [bossFile close].</body></methods><methods><class-id>Lens.QBEManager</class-id> <category>accessing</category><body package="VRLens">shouldRelease	^shouldRelease</body><body package="VRLens">shouldRelease: aValue	shouldRelease := aValue</body></methods><methods><class-id>Lens.ExtendedLensApplication class</class-id> <category>As yet unclassified</category><body package="VRLens">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'LensDemoDataModel' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 140 141 489 342 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0315186 0 0.129213 ) 					#name: #user 					#label: 'User' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0315186 0 0.533708 ) 					#name: #password 					#label: 'Password' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.326648 0 0.101124 0 0.954155 0 0.258427 ) 					#name: #userName 					#model: #userField ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.326648 0 0.505618 0 0.954155 0 0.662921 ) 					#name: #passwordName 					#model: #passwordField 					#type: #password ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.00859599 0 0.724719 0 0.246418 0 0.960674 ) 					#name: #login 					#model: #login 					#label: 'Login' 					#isDefault: true 					#defaultable: true ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>LensDataManager</name><environment>Lens</environment><super>Lens.LensApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>rows row trigger rowCount isEditing isCreating isDirty lockPolicy </inst-vars><class-inst-vars>rowType </class-inst-vars><imports></imports><category>Lens-Applications-Framework</category><attributes><package>Lens-Runtime</package></attributes></class><class><name>LensMainApplication</name><environment>Lens</environment><super>Lens.LensApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Lens-Applications-Framework</category><attributes><package>Lens-Runtime</package></attributes></class></st-source>