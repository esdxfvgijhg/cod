<?xml version="1.0"?><st-source><!-- Name: VRObjectReferenceNotice: Copyright © 2002 Cincom Systems, Inc.  All Rights Reserved.Comment: This is a replacement for the Object Reference tool.  basically, it adds:1) shows all classes.  If no specific Object Reference doc has been added, the base classcomment is shown.2) search capability by class namePackageName: VRObjectReferenceParcel: #('VRObjectReference')ParcelName: VRObjectReferenceVersion: 7Date: 10:26:47 AM November 19, 2015 --><time-stamp>From VisualWorks®, 8.1 of July 17, 2015 on November 19, 2015 at 10:26:47 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>VRObjectReference</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>searchString model classDoc classList isDocumented </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>ObjectReference-Tools</category><attributes><package>VRObjectReference</package></attributes></class><comment><class-id>VRObjectReference</class-id><body>This is the auto-generated comment for class #VRObjectReference.  This comment should be edited for accuracyInstance Variables: </body></comment><class><name>VRObjectReferenceModel</name><environment>Smalltalk</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classDoc searchString classList classDict isEditingSpecialDoc selectedScope classNameBeingEdited isEditing isDocumented </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>ObjectReference-Tools</category><attributes><package>VRObjectReference</package></attributes></class><comment><class-id>VRObjectReferenceModel</class-id><body>This is the auto-generated comment for class #VRObjectReferenceModel.  This comment should be edited for accuracyInstance Variables: classDoc		&lt;Undefined&gt;searchString		&lt;Undefined&gt;classList		&lt;List&gt;</body></comment><class><name>VRObjectReferenceDoc</name><environment>Smalltalk</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>documentation isSeparateFromComment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>ObjectReference-Tools</category><attributes><package>VRObjectReference</package></attributes></class><methods><class-id>VRObjectReference</class-id> <category>actions</category><body package="VRObjectReference">acceptComment	"This stub method was generated by UIDefiner"	self model value acceptNewDoc.	self disableEditButtons.	self makeEditorReadOnlyWithKeyboard.</body><body package="VRObjectReference">cancelComment	"This stub method was generated by UIDefiner"	self model value restoreOldDoc.	self disableEditButtons.	self makeEditorReadOnlyWithKeyboard.</body><body package="VRObjectReference">editComment	"Put editor in edit mode.  Set model mode as to whether we are editing separate doc"	| sel |	sel := self classList selection.	sel isNil		ifTrue: [^self].	self model value setEditFlag: sel.	self setEditorToEditMode.	self enableEditButtons.</body><body package="VRObjectReference">search	"try to find a matching name in the list"	| matchIndex |	matchIndex := self model value tryToMatchFrom: self classList selectionIndex.	matchIndex = 0		ifTrue: [Dialog warn: 'No match for your search string'.				^self].	self classList selectionIndex: matchIndex</body></methods><methods><class-id>VRObjectReference</class-id> <category>private</category><body package="VRObjectReference">disableEditButtons	(self builder componentAt: #editComment) enable.	(self builder componentAt: #acceptComment) disable.	(self builder componentAt: #cancelComment) disable.</body><body package="VRObjectReference">enableEditButtons	(self builder componentAt: #editComment) disable.	(self builder componentAt: #acceptComment) enable.	(self builder componentAt: #cancelComment) enable.</body><body package="VRObjectReference">for: aScopeName	"init model on scope"	self model value on: aScopeName andCategory: nil</body><body package="VRObjectReference">for: aScopeName andCategory: aCategoryOrNil	"init model on scope"	self model value on: aScopeName andCategory: aCategoryOrNil</body><body package="VRObjectReference">getKbdBlock	"answer the keyboardHook block for the doc widget"	^[:event : controller |		event isKeyboard			ifTrue: [(self isScrollingCharacter: event)					ifTrue: [event]					ifFalse: [nil]]			ifFalse:  [event]]</body><body package="VRObjectReference">getReadWriteKbdBlock	"nil out hook"	^nil</body><body package="VRObjectReference">isScrollingCharacter: event	"answer true if character is arrow key or paging key."	| included |	included := #(#Right #Left #Up #Down #PageUp #PageDown #Home #End).	^(included includes: event keyValue)</body><body package="VRObjectReference">makeEditorReadOnlyWithKeyboard	| editorController kbdBlock mb |	editorController := (self builder componentAt: #classDoc) widget controller.	kbdBlock := self getKbdBlock.	editorController keyboardHook: kbdBlock.	mb := MenuBuilder new.	mb add: 'find...'-&gt;#find.	mb add: 'copy'-&gt;#copy.	editorController menuHolder value: mb menu</body><body package="VRObjectReference">setEditorToEditMode	"set edit mode on"	| editorController kbdBlock menu |	editorController := (self builder componentAt: #classDoc) widget controller.	kbdBlock := self getReadWriteKbdBlock.	editorController keyboardHook: kbdBlock.	menu := ParagraphEditor new initializeMenuForText value.	editorController menuHolder value: menu</body><body package="VRObjectReference">setToNotEditing	self disableEditButtons.	self model value setToNotEditing</body></methods><methods><class-id>VRObjectReference</class-id> <category>accessing</category><body package="VRObjectReference">classDoc	^classDoc</body><body package="VRObjectReference">classList	^classList</body><body package="VRObjectReference">isDocumented	^isDocumented</body><body package="VRObjectReference">model	^model</body><body package="VRObjectReference">model: aValue	model := aValue</body><body package="VRObjectReference">searchString	^searchString</body></methods><methods><class-id>VRObjectReference</class-id> <category>events</category><body package="VRObjectReference">changedSelection	"new selection made in class list"	| sel |	sel := self classList selection.	sel isNil		ifTrue: [self setToNotEditing.				^nil].	self model value changeDocFor: sel</body><body package="VRObjectReference">noticeOfWindowClose: aWindow	super noticeOfWindowClose: aWindow.	self release</body></methods><methods><class-id>VRObjectReference</class-id> <category>interface opening</category><body package="VRObjectReference">postBuildWith: bldr	super postBuildWith: bldr.	self makeEditorReadOnlyWithKeyboard.</body></methods><methods><class-id>VRObjectReference</class-id> <category>initialize-release</category><body package="VRObjectReference">initialize	"UIDefiner defined this method.	Do NOT modify this method; place custom code in &lt;initializeApplication&gt;"	super initialize.	self model: VRObjectReferenceModel new asValue.	self initializeAspects.	self initializeApplication.</body><body package="VRObjectReference">initializeApplication	"UIDefiner defined this method.	UIDefiner will not recreate this method, so all custom initialization code should be placed here."	self classList selectionIndexHolder onChangeSend: #changedSelection to: self</body><body package="VRObjectReference">initializeAspects	"Preset all aspects.  UIDefiner will overwrite this method"		classDoc:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #classDoc).		searchString:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #searchString).	isDocumented := ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #isDocumented).		classList := SelectionInList with: self model value classList.</body><body package="VRObjectReference">release	super release.	self classList selectionIndexHolder retractInterestsFor: self</body></methods><methods><class-id>VRObjectReference class</class-id> <category>instance creation</category><body package="VRObjectReference">for: aScopeName	"create and open"	(self new for: aScopeName andCategory: nil) open</body><body package="VRObjectReference">for: aScopeName andCategory: aCategoryOrNil	"create and open"	(self new for: aScopeName andCategory: aCategoryOrNil) open</body></methods><methods><class-id>VRObjectReference class</class-id> <category>accessing</category><body package="VRObjectReference">uiDomainModelName	"UIDefiner defined this method.	This method is used internally by UIDefiner"	^#VRObjectReferenceModel</body></methods><methods><class-id>VRObjectReferenceModel</class-id> <category>accessing</category><body package="VRObjectReference">classDict	^classDict</body><body package="VRObjectReference">classDict: aValue	classDict := aValue</body><body package="VRObjectReference">classDoc	^classDoc</body><body package="VRObjectReference">classDoc: aValue	classDoc := aValue.	self changed: #classDoc</body><body package="VRObjectReference">classList	^classList</body><body package="VRObjectReference">classList: aValue	classList := aValue.	self changed: #classList</body><body package="VRObjectReference">classNameBeingEdited	^classNameBeingEdited</body><body package="VRObjectReference">classNameBeingEdited: aValue	classNameBeingEdited := aValue</body><body package="VRObjectReference">isDocumented	^isDocumented</body><body package="VRObjectReference">isDocumented: aValue	isDocumented := aValue.	self changed: #isDocumented</body><body package="VRObjectReference">isEditing	^isEditing</body><body package="VRObjectReference">isEditing: aValue	isEditing := aValue</body><body package="VRObjectReference">isEditingSpecialDoc	^isEditingSpecialDoc</body><body package="VRObjectReference">isEditingSpecialDoc: aValue	isEditingSpecialDoc := aValue</body><body package="VRObjectReference">searchString	^searchString</body><body package="VRObjectReference">searchString: aValue	searchString := aValue.	self changed: #searchString</body><body package="VRObjectReference">selectedScope	^selectedScope</body><body package="VRObjectReference">selectedScope: aValue	selectedScope := aValue</body></methods><methods><class-id>VRObjectReferenceModel</class-id> <category>initialize-release</category><body package="VRObjectReference">initialize	"This is an auto-generated initialize method.  It should be updated"	self classList: List new.	self classDoc: ''.	self searchString: ''.	self classDict: IdentityDictionary new.	self isEditing: false.	self isDocumented: false.</body><body package="VRObjectReference">on: aScopeName	self on: aScopeName andCategory: nil</body><body package="VRObjectReference">on: aScopeName andCategory: aCategoryOrNil	self getClassesFrom: aScopeName and: aCategoryOrNil.	self classList do: [:each | | doc |		doc := self getDocumentationFor: each from: aScopeName.		self classDict at: each put: doc].</body></methods><methods><class-id>VRObjectReferenceModel</class-id> <category>api</category><body package="VRObjectReference">acceptNewDoc	"accept new documentation"	| newDoc |	newDoc := self classDoc.	self isEditingSpecialDoc		ifTrue: [self updateSpecial: newDoc]		ifFalse: [self updateNormal: newDoc]</body><body package="VRObjectReference">changeDocFor: selectedClassName	| doc | 	doc := self classDict at: selectedClassName.	self classDoc: doc.	self isDocumented: doc isSeparateFromComment</body><body package="VRObjectReference">restoreOldDoc	"reset doc for selection"	self classDoc: (self classDict at: self classNameBeingEdited)</body><body package="VRObjectReference">setEditFlag: aClassname	self isEditingSpecialDoc: (self amIEditingCommentOrDoc: aClassname).	self classNameBeingEdited: aClassname.	self isEditing: true</body><body package="VRObjectReference">setToNotEditing	self isEditing: false.	self classDoc: '' asText</body><body package="VRObjectReference">tryToMatch	"try to do a wildcard search.  answer index of first match"	^self classList findFirst: [:each | | stringName |		stringName := each asString.		self searchString match: stringName].</body><body package="VRObjectReference">tryToMatchFrom: position	"try to do a wildcard search.  answer index of first match starting at position (or 1 if none)"	| findBlock start |	findBlock :=  [:each | | stringName |		stringName := each asString.		self searchString match: stringName].	position = 0		ifTrue: [start := 1]		ifFalse: [start := (position + 1) min: (self classList size)].	start to: self classList size do: [:index |		(findBlock value: (self classList privateAt: index)) ifTrue: [^index]].	^ 0</body></methods><methods><class-id>VRObjectReferenceModel</class-id> <category>private</category><body package="VRObjectReference">amIEditingCommentOrDoc: aClassname	| comment |	comment := (self classDict at: aClassname) documentation.	^((comment indexOfSubCollection: 'Object Reference:' startingAt: 1) ~= 0)</body><body package="VRObjectReference">amIEditingCommentOrSpecialDoc: aClassname	| comment |	comment := (self classDict at: aClassname) comment.	^((comment indexOfSubCollection: 'Object Reference:' startingAt: 1) ~= 0)</body><body package="VRObjectReference">getClassesFrom: aScopeName and: aCategoryOrNil	| classes | 	self selectedScope: aScopeName.	classes := (aScopeName classNames).	aCategoryOrNil isNil		ifTrue: [self classList addAll: classes]		ifFalse: [self classList addAll: (classes select: [:each | | aClass | 					aClass := aScopeName at: each.					aClass category = aCategoryOrNil])].</body><body package="VRObjectReference">getDocumentationFor: aClassName from: aScopeName	"answer doc (if a doc separate from comment is available) or just class comment"	| class comment docIndex doc |	class := aScopeName at: aClassName.	comment := class comment.	comment isEmpty		ifTrue: [^self getNoDocComment].	docIndex := comment indexOfSubCollection: 'Object Reference:' startingAt: 1.	docIndex &gt; 0		ifTrue: [docIndex := docIndex + 'Object Reference:' size.				[(comment at: docIndex) isSeparator] whileTrue: [docIndex := docIndex + 1].				doc :=  (comment copyFrom: docIndex to: comment size).				^VRObjectReferenceDoc doc: doc isSeparate: true]		ifFalse: [^VRObjectReferenceDoc doc: comment isSeparate: false].</body><body package="VRObjectReference">getNoDocComment	^VRObjectReferenceDoc doc: 'This class has not been documented.  This may imply that it should be considered private' isSeparate: false</body><body package="VRObjectReference">updateNormal: newDoc	| slot theClass |	slot := self classDict at: self classNameBeingEdited.	slot documentation: newDoc.	theClass := self selectedScope at: self classNameBeingEdited.	theClass comment: newDoc</body><body package="VRObjectReference">updateSpecial: newDoc	| slot theClass oldComment index newIndex stream |	slot := self classDict at: self classNameBeingEdited.	slot documentation: newDoc.	theClass := self selectedScope at: self classNameBeingEdited.	oldComment := theClass comment.	searchString := 'Object Reference:'.	index := searchString indexOfSubCollection: searchString startingAt: 1.	newIndex := index + searchString size.	stream := WriteStream on: (String new: oldComment size).	stream nextPutAll: (oldComment copyFrom: 1 to: newIndex).	stream cr.	stream nextPutAll: newDoc.	theClass comment: stream contents</body></methods><methods><class-id>VRObjectReferenceModel class</class-id> <category>instance creation</category><body package="VRObjectReference">new	^super new initialize</body><body package="VRObjectReference">on: aScopeName	"answer object reference on a scope"	^self new on: aScopeName andCategory: nil</body><body package="VRObjectReference">on: aScopeName andCategory: aCategoryOrNil	"answer object reference on a scope (and possibly category)"	^self new on: aScopeName andCategory: aCategoryOrNil</body></methods><methods><class-id>VRObjectReferenceDoc</class-id> <category>displaying</category><body package="VRObjectReference">asText        ^self displayString asText</body><body package="VRObjectReference">displayString	^self documentation</body><body package="VRObjectReference">printOn: aStream	aStream nextPutAll: self documentation</body></methods><methods><class-id>VRObjectReferenceDoc</class-id> <category>accessing</category><body package="VRObjectReference">documentation	^documentation</body><body package="VRObjectReference">documentation: aValue	documentation := aValue</body><body package="VRObjectReference">isSeparateFromComment	^isSeparateFromComment</body><body package="VRObjectReference">isSeparateFromComment: aValue	isSeparateFromComment := aValue</body></methods><methods><class-id>VRObjectReferenceDoc</class-id> <category>initialize-release</category><body package="VRObjectReference">doc: doc isSeparate: aBoolean	self documentation: doc.	self isSeparateFromComment: aBoolean</body></methods><methods><class-id>VRObjectReferenceDoc class</class-id> <category>instance creation</category><body package="VRObjectReference">doc: documentation isSeparate: aBoolean	^self new doc: documentation isSeparate: aBoolean</body></methods><methods><class-id>VRObjectReference class</class-id> <category>interface specs</category><body package="VRObjectReference">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Object Reference' 			#bounds: #(#Rectangle 96 122 730 414 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.00630915 0 0.0410959 ) 					#name: #searchLabel 					#label: 'Search' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0126183 0 0.150685 ) 					#name: #classesLabel 					#label: 'Classes In System' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.468454 0 0.157534 ) 					#name: #documentationLabel 					#label: 'Documentation' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.116719 0 0.0273973 0 0.460568 0 0.126712 ) 					#name: #searchString 					#model: #searchString ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.488959 0 0.0136986 0 0.570978 0 0.0993151 ) 					#name: #search 					#model: #search 					#label: 'Search' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.676656 0 0.0136986 0 0.758675 0 0.0993151 ) 					#name: #editComment 					#model: #editComment 					#label: 'Edit' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.804416 0 0.0136986 0 0.886435 0 0.0993151 ) 					#name: #acceptComment 					#flags: 40 					#model: #acceptComment 					#label: 'Accept' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.891167 0 0.0136986 0 0.973186 0 0.0993151 ) 					#name: #cancelComment 					#flags: 40 					#model: #cancelComment 					#label: 'Cancel' 					#defaultable: true ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 0 0.0126183 0 0.226027 0 0.463722 0 0.982877 ) 					#name: #classList 					#model: #classList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#TextEditorSpec 					#layout: #(#LayoutFrame 0 0.468454 0 0.226027 0 0.995268 0 0.982877 ) 					#name: #classDoc 					#model: #classDoc ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 0 0.839117 0 0.143836 ) 					#name: #isDocumented 					#flags: 32 					#model: #isDocumented 					#label: 'Documented' ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="VRObjectReference">helpObjectReference	&lt;menuItem: 'Object Reference'		nameKey: nil		menu: #(#menuBar #help)		position: 10.03&gt;	| env |	env := Dialog 		choose: 'Which one do you want?' 		fromList: (NameSpace allInstances asList collect: [:each  | each name])		values: NameSpace allInstances asList		lines: 8 		cancel: [nil].	env isNil		ifTrue: [^self].	Cursor wait showWhile: [		VRObjectReference for: env]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>