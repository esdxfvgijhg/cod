<?xml version="1.0"?><st-source><!-- Name: VRLensDemoNotice: Copyright © 2002 Cincom Systems, Inc.  All Rights Reserved.Comment: This package contains a demo of using the ObjectLens tools to auto-generate classesDevelopmentPrerequisites: #(#(#any 'VRLens' ''))PackageName: VRLensDemoParcel: #('VRLensDemo')ParcelName: VRLensDemoPrerequisiteParcels: #(#('VRLens' ''))Version: 7Date: 10:26:31 AM November 19, 2015 --><time-stamp>From VisualWorks®, 8.1 of July 17, 2015 on November 19, 2015 at 10:26:31 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>VRDataModelBuilderModel</name><environment>Lens</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dataModelName domainModel length name type varList dataModelType dataInfoHolder rawObjectList fieldSep recSep sourceFile </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Generic-DB-Import</category><attributes><package>VRLensDemo</package></attributes></class><class><name>VRDemoGeneratorModel</name><environment>Lens</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>form isTabular loginForm clsCategory codeGen dataModelClass dbEntityName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Generic-File-Reader</category><attributes><package>VRLensDemo</package></attributes></class><class><name>VRFileImporterModel</name><environment>Lens</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fieldSeparator file recordSeparator reader </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Generic-File-Reader</category><attributes><package>VRLensDemo</package></attributes></class><class><name>VRDataInfoHolder</name><environment>Lens</environment><super>Core.ExtendedModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>exampleString varName varType varLength </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Generic-DB-Import</category><attributes><package>VRLensDemo</package></attributes></class><class><name>VRDataModelDefiner</name><environment>Lens</environment><super>Core.ExtendedModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dm dataModelName dataModelType domainName dataDefCollection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Generic-DB-Import</category><attributes><package>VRLensDemo</package></attributes></class><class><name>VRDemoGenerator</name><environment>Lens</environment><super>UI.VRDetailForm</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isTabular loginForm form clsCategory dbEntityName dataModelClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Generic-File-Reader</category><attributes><package>VRLensDemo</package></attributes></class><class><name>VRFileImportTool</name><environment>Lens</environment><super>UI.VRDetailForm</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fieldSeparator file recordSeparator vrBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Generic-File-Reader</category><attributes><package>VRLensDemo</package></attributes></class><class><name>VRImportLoginDialog</name><environment>Lens</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>user pass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Generic-DB-Import</category><attributes><package>VRLensDemo</package></attributes></class><class><name>VRDataModelBuilder</name><environment>Lens</environment><super>UI.VRDetailForm</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type varList domainModel length name dataModelType dataModelName typeIsChanging </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Generic-DB-Import</category><attributes><package>VRLensDemo</package></attributes></class><methods><class-id>Lens.VRDataModelBuilderModel</class-id> <category>api</category><body package="VRLensDemo">changedLengthFor: aString	| item |	item := self dataInfoHolder detect: [:each | each itemFor: aString] ifNone: [nil].	item isNil		ifTrue: [^self].	item varLength: self length</body><body package="VRLensDemo">changedNameFor: aString	"change the name info"	| item |	item := self dataInfoHolder detect: [:each | each itemFor: aString] ifNone: [nil].	item isNil		ifTrue: [^self].	item varName: self name</body><body package="VRLensDemo">changedTypeFor: aString	"change the type info"	| item |	item := self dataInfoHolder detect: [:each | each itemFor: aString] ifNone: [nil].	item isNil		ifTrue: [^self].	item varType: self type</body><body package="VRLensDemo">importUsing: username and: password	| db reader coll |	db := (Smalltalk at: self dataModelName) new.	reader := VRFileReader new.	reader fieldSeparator: self fieldSep.	reader recordSeparator: self recSep.	reader read: self sourceFile into: self domainModel.	coll := reader modelCollection.	db login: username password: password.	db addAll: coll.	db databaseLogout</body><body package="VRLensDemo">save	"save the datamodel.  pass info off to the definer object to do the work"	| definer |	definer := VRDataModelDefiner new.	definer dataModelName: self dataModelName.	definer domainName: self domainModel.	definer dataModelType: self dataModelType.	definer dataDefCollection: self dataInfoHolder.	definer doDefine.</body></methods><methods><class-id>Lens.VRDataModelBuilderModel</class-id> <category>accessing</category><body package="VRLensDemo">dataInfoHolder	^dataInfoHolder</body><body package="VRLensDemo">dataInfoHolder: aValue	dataInfoHolder := aValue</body><body package="VRLensDemo">dataModelName	^dataModelName</body><body package="VRLensDemo">dataModelName: aValue	dataModelName := aValue.	self changed: #dataModelName</body><body package="VRLensDemo">dataModelType	^dataModelType</body><body package="VRLensDemo">dataModelType: aValue	dataModelType := aValue.	self changed: #dataModelType</body><body package="VRLensDemo">domainModel	^domainModel</body><body package="VRLensDemo">domainModel: aValue	domainModel := aValue.	self changed: #domainModel</body><body package="VRLensDemo">fieldSep	^fieldSep</body><body package="VRLensDemo">fieldSep: aValue	fieldSep := aValue</body><body package="VRLensDemo">length	^length</body><body package="VRLensDemo">length: aValue	length := aValue.	self changed: #length</body><body package="VRLensDemo">name	^name</body><body package="VRLensDemo">name: aValue	name := aValue.	self changed: #name</body><body package="VRLensDemo">rawObjectList	^rawObjectList</body><body package="VRLensDemo">rawObjectList: aValue	rawObjectList := aValue</body><body package="VRLensDemo">recSep	^recSep</body><body package="VRLensDemo">recSep: aValue	recSep := aValue</body><body package="VRLensDemo">sourceFile	^sourceFile</body><body package="VRLensDemo">sourceFile: aValue	sourceFile := aValue</body><body package="VRLensDemo">type	^type</body><body package="VRLensDemo">type: aValue	type := aValue.	self changed: #type</body><body package="VRLensDemo">varList	^varList</body><body package="VRLensDemo">varList: aValue	varList := aValue.	self changed: #varList</body></methods><methods><class-id>Lens.VRDataModelBuilderModel</class-id> <category>initialize-release</category><body package="VRLensDemo">for: aList	| count |	count := 1.	self varList: aList asList.	aList do: [:each |		self dataInfoHolder add: (VRDataInfoHolder for: each count: count).		count := count + 1].</body><body package="VRLensDemo">for: aCollectionOfStrings and: aCollectionOfTypes	| count |	count := 1.	self varList addAll: aCollectionOfStrings.	1 to: aCollectionOfStrings size do: [:index | | string newType |		string := aCollectionOfStrings at: index.		newType := aCollectionOfTypes at: index.		self dataInfoHolder add: (VRDataInfoHolder for: string for: newType count: count).		count := count + 1].</body><body package="VRLensDemo">initialize	"This is an auto-generated initialize method.  It should be updated"	self varList: List new.	self dataModelName: nil.	self domainModel: nil.	self length: 0.	self name: ''.	self type: nil.	self dataModelType: nil.	self dataInfoHolder: OrderedCollection new</body></methods><methods><class-id>Lens.VRDataModelBuilderModel</class-id> <category>private</category><body package="VRLensDemo">handleNewSelection: aString	| item  |	item := self dataInfoHolder detect: [:each | each itemFor: aString] ifNone: [nil].	item isNil		ifTrue: [^self].	self type: item varType.	self name: item varName.	self length: item varLength</body></methods><methods><class-id>Lens.VRDataModelBuilderModel class</class-id> <category>As yet unclassified</category><body package="VRLensDemo">for: aList	"sets up the collection of sample vars"	^self new for: aList</body><body package="VRLensDemo">for: aCollectionOfStrings and: aCollectionOfTypes	"sets up the collection of sample vars"	^self new for: aCollectionOfStrings and: aCollectionOfTypes</body><body package="VRLensDemo">new	^super new initialize</body></methods><methods><class-id>Lens.VRDemoGeneratorModel</class-id> <category>accessing</category><body package="VRLensDemo">clsCategory	^clsCategory</body><body package="VRLensDemo">clsCategory: aValue	clsCategory := aValue.	self changed: #clsCategory</body><body package="VRLensDemo">codeGen	^codeGen</body><body package="VRLensDemo">codeGen: aValue	codeGen := aValue.	self changed: #codeGen</body><body package="VRLensDemo">dataModelClass	^dataModelClass</body><body package="VRLensDemo">dataModelClass: aValue	dataModelClass := aValue.	self changed: #dataModelClass</body><body package="VRLensDemo">dbEntityName	^dbEntityName</body><body package="VRLensDemo">dbEntityName: aValue	dbEntityName := aValue.	self changed: #dbEntityName</body><body package="VRLensDemo">form	^form</body><body package="VRLensDemo">form: aValue	form := aValue.	self changed: #form</body><body package="VRLensDemo">isTabular	^isTabular</body><body package="VRLensDemo">isTabular: aValue	isTabular := aValue.	self changed: #isTabular</body><body package="VRLensDemo">loginForm	^loginForm</body><body package="VRLensDemo">loginForm: aValue	loginForm := aValue.	self changed: #loginForm</body></methods><methods><class-id>Lens.VRDemoGeneratorModel</class-id> <category>class generation</category><body package="VRLensDemo">createClassMethods	"create the class methods"	| stream |	self codeGen isMeta: true.	self codeGen protocol: 'accessing'.	self codeGen targetClass: (Smalltalk at: self loginForm).	stream := WriteStream on: String new.	stream nextPutAll: 'dataModelClass'; cr; tab.	stream nextPutAll: '^', self dataModelClass asString.	self codeGen generateMethod: stream</body><body package="VRLensDemo">createForList: stream	stream nextPutAll: '| form dataList |'; cr; tab.	stream nextPutAll: 'dataList := self doQuery asList.'; cr; tab.	stream nextPutAll: 'form := VRListForm on: dataList detailForm: ', self form printString, '.'; cr; tab.	stream nextPutAll: 'self open: form interface: #windowSpec'.	self codeGen generateMethod: stream</body><body package="VRLensDemo">createForTabular: stream</body><body package="VRLensDemo">createInstanceMethods	"create the instance methods"	| stream |	self codeGen isMeta: false.	self codeGen protocol: 'navigating'.	stream := WriteStream on: String new.	self createNavigateMethod: stream.	stream reset.	self createQueryMethod: stream.</body><body package="VRLensDemo">createLoginForm	"create a login form"	AbstractVRLoginForm subclass: self loginForm	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: self clsCategory.	self createClassMethods.	self createInstanceMethods.</body><body package="VRLensDemo">createNavigateMethod: stream	stream nextPutAll: 'navigateToNext'; cr; tab.	self isTabular		ifTrue: [self createForTabular: stream]		ifFalse: [self createForList: stream]</body><body package="VRLensDemo">createQueryMethod: stream	"create the query method"	stream nextPutAll: 'doQuery'; cr; tab.	stream nextPutAll: '^self dataModel doAllQuery: ', self dbEntityName printString, ' forTable: ', self dbEntityName asString.	self codeGen generateMethod: stream</body></methods><methods><class-id>Lens.VRDemoGeneratorModel</class-id> <category>initialize-release</category><body package="VRLensDemo">initialize	"This is an auto-generated initialize method.  It should be updated"	self form: nil.	self isTabular: false.	self loginForm: nil.	self clsCategory: ''.	self codeGen: VRCodeGeneratorModel new.</body></methods><methods><class-id>Lens.VRDemoGeneratorModel class</class-id> <category>As yet unclassified</category><body package="VRLensDemo">new	^super new initialize</body></methods><methods><class-id>Lens.VRFileImporterModel</class-id> <category>accessing</category><body package="VRLensDemo">fieldSeparator	^fieldSeparator</body><body package="VRLensDemo">fieldSeparator: aValue	fieldSeparator := aValue.	self changed: #fieldSeparator</body><body package="VRLensDemo">file	^file</body><body package="VRLensDemo">file: aValue	file := aValue.	self changed: #file</body><body package="VRLensDemo">reader	^reader</body><body package="VRLensDemo">reader: aValue	reader := aValue</body><body package="VRLensDemo">recordSeparator	^recordSeparator</body><body package="VRLensDemo">recordSeparator: aValue	recordSeparator := aValue.	self changed: #recordSeparator</body></methods><methods><class-id>Lens.VRFileImporterModel</class-id> <category>private</category><body package="VRLensDemo">getFieldSeparator	^self reader fieldSeparator</body><body package="VRLensDemo">getRecSeparator	^self reader recordSeparator</body><body package="VRLensDemo">reset	"reset, as we are processing a new file"	self reader: VRFileReader new</body><body package="VRLensDemo">sampleData	^self reader modelCollection at: 1</body><body package="VRLensDemo">sampleTypes	^self reader typeCollection</body></methods><methods><class-id>Lens.VRFileImporterModel</class-id> <category>initialize-release</category><body package="VRLensDemo">initialize	"This is an auto-generated initialize method.  It should be updated"	self fieldSeparator: ''.	self file: ''.	self recordSeparator: ''.	self reader: VRFileReader new</body></methods><methods><class-id>Lens.VRFileImporterModel</class-id> <category>reading</category><body package="VRLensDemo">readFile	"read in the file"	self reader fieldSeparator: self translateField.	self reader recordSeparator: self translateRecord.	self reader read: self file into: #Array.	self reader guessTypes.</body><body package="VRLensDemo">translateField	self fieldSeparator = 'tab'		ifTrue: [^Character tab].	self fieldSeparator = 'cr'		ifTrue: [^Character cr].	self fieldSeparator = 'lf'		ifTrue: [^Character lf].	^self fieldSeparator at: 1</body><body package="VRLensDemo">translateRecord	self recordSeparator = 'tab'		ifTrue: [^Character tab].	self recordSeparator = 'cr'		ifTrue: [^Character cr].	self recordSeparator = 'lf'		ifTrue: [^Character lf].	^self recordSeparator at: 1</body></methods><methods><class-id>Lens.VRFileImporterModel class</class-id> <category>As yet unclassified</category><body package="VRLensDemo">new	^super new initialize</body></methods><methods><class-id>Lens.VRDataInfoHolder</class-id> <category>accessing</category><body package="VRLensDemo">exampleString	^exampleString</body><body package="VRLensDemo">exampleString: aValue	exampleString := aValue</body><body package="VRLensDemo">varLength	^varLength</body><body package="VRLensDemo">varLength: aValue	varLength := aValue</body><body package="VRLensDemo">varName	^varName</body><body package="VRLensDemo">varName: aValue	varName := aValue</body><body package="VRLensDemo">varType	^varType</body><body package="VRLensDemo">varType: aValue	varType := aValue</body></methods><methods><class-id>Lens.VRDataInfoHolder</class-id> <category>initialize-release</category><body package="VRLensDemo">initialize	super initialize.	self varLength: 0</body></methods><methods><class-id>Lens.VRDataInfoHolder</class-id> <category>private</category><body package="VRLensDemo">itemFor: aString	"answer whether this item matches the string"	^aString = self exampleString</body></methods><methods><class-id>Lens.VRDataInfoHolder class</class-id> <category>As yet unclassified</category><body package="VRLensDemo">for: aString count: i	| inst |	inst := self new.	inst exampleString: aString.	inst varName: 'var', i printString.	inst varType: #string.	^inst</body><body package="VRLensDemo">for: aString for: aType count: i	| inst |	inst := self new.	inst exampleString: aString.	inst varName: 'var', i printString.	inst varType: aType.	^inst</body></methods><methods><class-id>Lens.VRDataModelDefiner</class-id> <category>db interaction</category><body package="VRLensDemo">addColumnDefFor: aStructVariable from: aVarDef	| context columnObject |	context := Smalltalk at: self dataModelType.	columnObject := context tableColumnClass new.	columnObject name: aVarDef varName.	aVarDef varType == #String		ifTrue: [columnObject maxColumnConstraint: aVarDef varLength].	columnObject dataType: (self inferDataTypeFrom: context and: aVarDef).	aStructVariable column: columnObject</body><body package="VRLensDemo">addIDVar	"add variables to structure"	| sVar  |	sVar := LensStructureVariable new.	sVar name: (self dataDefCollection at: 1) varName.	sVar valueType: (self lensTypeFor: (self dataDefCollection at: 1)).	sVar fieldType: (self dataDefCollection at: 1) varType.	sVar generatesAccessor: true.	sVar generatesMutator: true.	sVar isMapped: true.	^sVar</body><body package="VRLensDemo">addStructureVariablesTo: aStruct	"add variables to structure"	| coll |	coll := OrderedCollection new: self dataDefCollection size.	self dataDefCollection do: [:each | |sVar |		sVar := LensStructureVariable new.		sVar name: each varName.		sVar valueType: (self lensTypeFor: each).		sVar fieldType: each varType.		sVar generatesAccessor: true.		sVar generatesMutator: true.		sVar isMapped: true.		self addColumnDefFor: sVar from: each.		coll add: sVar].	(coll at: 1) isId: true.	(coll at: 1) isNotNil: true.	aStruct setVariables: coll</body><body package="VRLensDemo">addTableDefFrom: contextClass	| tableObject |	tableObject := contextClass tableClass new.	tableObject name: self domainName.	^tableObject</body><body package="VRLensDemo">createDataModel	| cls |	cls := Smalltalk at: self dataModelName ifAbsent: [nil].	cls notNil		ifTrue: [^self].	ExtendedDataModel 		subclass: self dataModelName		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: (self dataModelName asString, '-database')</body><body package="VRLensDemo">createDataModelSpec	| contextObject curStruct |	contextObject := (Smalltalk at: self dataModelType) new.	self dm application: (Smalltalk at: self dataModelName).	self dm tables add: self domainName.	self dm dataTypes addAll: self extractDataTypes.	self dm databaseContext: contextObject.	curStruct := 		(LensStructureType 			memberClass: (Smalltalk at: self domainName)			dataModel: self dm).	curStruct table: (self addTableDefFrom: (Smalltalk at: self dataModelType)).	curStruct idVariable: self addIDVar.	self dm addStructureType: curStruct.	self addStructureVariablesTo: curStruct.	self dm writeSpec</body><body package="VRLensDemo">inferDataTypeFrom: lensDBContextClass and: aVarDef	"from the context class and the given ST 'type', get the data type"	| typeMappings match symbolToMatch |	symbolToMatch := aVarDef varType.	(symbolToMatch == #Date or: [symbolToMatch == #Time])		ifTrue: [symbolToMatch := #Timestamp].	typeMappings := lensDBContextClass dataTypeMappings.	match := typeMappings detect: [:each | each fieldType name = symbolToMatch].	^match columnType</body><body package="VRLensDemo">lensTypeFor: aVariable	| theType |	theType := LensType new.	theType name: aVariable varType.	theType memberClass: (Smalltalk at: self domainName).	^theType</body></methods><methods><class-id>Lens.VRDataModelDefiner</class-id> <category>class generation</category><body package="VRLensDemo">createDomainModel	| cls instVars |	cls := Smalltalk at: self domainName ifAbsent: [nil].	cls notNil		ifTrue: [^self].	instVars := self getDomainInstVars.	(Smalltalk at:#ExtendedObject )		subclass: self domainName		instanceVariableNames: instVars		classVariableNames: ''		poolDictionaries: ''		category: (self dataModelName asString, '-database').</body><body package="VRLensDemo">createDomainModelAccessors	"create accessing methods"	| codeGen cls |	cls := Smalltalk at: self domainName.	codeGen := (Smalltalk at:#VRCodeGeneratorModel) new.	codeGen protocol: 'accessing'.	codeGen targetClass: cls.	codeGen isMeta: false.	self generateAccessorWith: codeGen.	self generateMutatorWith: codeGen.</body><body package="VRLensDemo">createDomainModelTypeDef	"create a type def method (class side) for later use"	| codegen  stream |	codegen := (Smalltalk at:#VRCodeGeneratorModel) new.	codegen targetClass: (Smalltalk at: self domainName).	codegen protocol: 'type-converting'.	codegen isMeta: true.	stream := WriteStream on: String new.	stream nextPutAll: 'typeDef'; cr; tab.	stream nextPutAll: '^#('.	self dataDefCollection do: [:each | 		stream nextPutAll: each varType printString.		stream nextPut: Character space].	stream nextPutAll: ')'.	codegen generateMethod: stream</body><body package="VRLensDemo">generateAccessorWith: codeGen	| vars stream |	vars := codeGen targetClass instVarNames.	stream := WriteStream on: String new.	vars do: [:each |		stream reset.		stream nextPutAll: each; cr; tab.		stream nextPutAll: '^', each.		codeGen generateMethod: stream].</body><body package="VRLensDemo">generateMutatorWith: codeGen	| vars stream |	vars := codeGen targetClass instVarNames.	stream := WriteStream on: String new.	vars do: [:each |		stream reset.		stream nextPutAll: each, ': aValue'; cr; tab.		stream nextPutAll: 'self update: ', each printString, ' to: aValue.'; cr; tab.		stream nextPutAll: 'self changed: #', each, '.'.		codeGen generateMethod: stream].</body><body package="VRLensDemo">getDomainInstVars	| stream |	stream := WriteStream on: String new.	self dataDefCollection do: [:each |		stream nextPutAll: each varName.		stream nextPut: Character space].	^stream contents</body></methods><methods><class-id>Lens.VRDataModelDefiner</class-id> <category>accessing</category><body package="VRLensDemo">dataDefCollection	^dataDefCollection</body><body package="VRLensDemo">dataDefCollection: aValue	dataDefCollection := aValue</body><body package="VRLensDemo">dataModelName	^dataModelName</body><body package="VRLensDemo">dataModelName: aValue	dataModelName := aValue</body><body package="VRLensDemo">dataModelType	^dataModelType</body><body package="VRLensDemo">dataModelType: aValue	dataModelType := aValue</body><body package="VRLensDemo">dm	^dm</body><body package="VRLensDemo">dm: aValue	dm := aValue</body><body package="VRLensDemo">domainName	^domainName</body><body package="VRLensDemo">domainName: aValue	domainName := aValue</body></methods><methods><class-id>Lens.VRDataModelDefiner</class-id> <category>api</category><body package="VRLensDemo">doDefine	"define the datamodel.  if the class exists, modify it.  Otherwise, create it and populate it"	self createDataModel. 	self createDomainModel.	self createDomainModelAccessors.	self createDataModelSpec.	self createDomainModelTypeDef</body></methods><methods><class-id>Lens.VRDataModelDefiner</class-id> <category>private</category><body package="VRLensDemo">extractDataTypes	^self dataDefCollection collect: [:each | each varType]</body><body package="VRLensDemo">extractVariableNames	^(self dataDefCollection collect: [:each | each varName]) asArray</body></methods><methods><class-id>Lens.VRDataModelDefiner</class-id> <category>initialize-release</category><body package="VRLensDemo">initialize	super initialize.	self dm: LensDataModel new.</body></methods><methods><class-id>Lens.VRDataModelDefiner class</class-id> <category>As yet unclassified</category><body package="VRLensDemo">fillDM: dm context: aContextName	| inst |	inst := self new.	inst dm: dm.	dm databaseContext: aContextName.	^inst</body></methods><methods><class-id>Lens.VRDemoGenerator</class-id> <category>accessing</category><body package="VRLensDemo">clsCategory	^clsCategory</body><body package="VRLensDemo">dataModelClass	^dataModelClass</body><body package="VRLensDemo">dataModelClass: dbModelClass dbEntityClass: dbEntityClass categoryName: categoryName	self modelValue clsCategory: categoryName.	self modelValue dataModelClass: dbModelClass.	self modelValue dbEntityName: dbEntityClass</body><body package="VRLensDemo">dbEntityName	^dbEntityName</body><body package="VRLensDemo">form	^form</body><body package="VRLensDemo">loginForm	^loginForm</body><body package="VRLensDemo">model	^model</body><body package="VRLensDemo">model: aValue	model := aValue</body></methods><methods><class-id>Lens.VRDemoGenerator</class-id> <category>actions</category><body package="VRLensDemo">generate	"This stub method was generated by UIDefiner"	| gen |	gen := VRFormGenerator new.	gen domainModel value: self  dbEntityName value.	gen category value: self clsCategory value.	gen canvasClassName value: self form value.	gen open.	self modelValue createLoginForm.	self enable: #test</body><body package="VRLensDemo">test	"test the demo"	(Smalltalk at: self loginForm value) open</body></methods><methods><class-id>Lens.VRDemoGenerator</class-id> <category>initialize-release</category><body package="VRLensDemo">initialize	"UIDefiner defined this method.	Do NOT modify this method; place custom code in &lt;initializeApplication&gt;"	super initialize.	self model: VRDemoGeneratorModel new asValue.	self initializeAspects.	self initializeApplication.</body><body package="VRLensDemo">initializeApplication	"UIDefiner defined this method.	UIDefiner will not recreate this method, so all custom initialization code should be placed here."</body><body package="VRLensDemo">initializeAspects	"Preset all aspects.  UIDefiner will overwrite this method"		clsCategory:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #clsCategory).		dataModelClass:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #dataModelClass).		dbEntityName:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #dbEntityName).		form:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #form).		isTabular:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #isTabular).		loginForm:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #loginForm).</body></methods><methods><class-id>Lens.VRDemoGenerator</class-id> <category>testing</category><body package="VRLensDemo">isTabular	^isTabular</body></methods><methods><class-id>Lens.VRDemoGenerator</class-id> <category>interface control</category><body package="VRLensDemo">postBuildWith: bldr	super postBuildWith: bldr.	self dbEntityName value isNil		ifTrue: [self enable: #dbEntityName].	self dataModelClass value isNil		ifTrue: [self enable: #dataModelClass]</body></methods><methods><class-id>Lens.VRDemoGenerator class</class-id> <category>As yet unclassified</category><body package="VRLensDemo">dataModelClass: dbModelClass dbEntityClass: dbEntityClass categoryName: categoryName	"create a new instance, set up model with data"	^self new 		dataModelClass: dbModelClass 		dbEntityClass: dbEntityClass 		categoryName: categoryName</body><body package="VRLensDemo">uiDomainModelName	"UIDefiner defined this method.	This method is used internally by UIDefiner"	^#VRDemoGeneratorModel</body></methods><methods><class-id>Lens.VRFileImportTool</class-id> <category>accessing</category><body package="VRLensDemo">categoryName	^''</body><body package="VRLensDemo">dbEntityClass	^self vrBuilder domainModel value</body><body package="VRLensDemo">dbModelClass	^self vrBuilder dataModelName value</body><body package="VRLensDemo">fieldSeparator	^fieldSeparator</body><body package="VRLensDemo">file	^file</body><body package="VRLensDemo">model	^model</body><body package="VRLensDemo">model: aValue	model := aValue</body><body package="VRLensDemo">recordSeparator	^recordSeparator</body><body package="VRLensDemo">vrBuilder	^vrBuilder</body><body package="VRLensDemo">vrBuilder: aValue	vrBuilder := aValue</body></methods><methods><class-id>Lens.VRFileImportTool</class-id> <category>actions</category><body package="VRLensDemo">createDemo	"This stub method was generated by UIDefiner"	| demoGen |	demoGen := VRDemoGenerator 					dataModelClass: self  dbModelClass 					dbEntityClass: self  dbEntityClass 					categoryName: self  categoryName.	demoGen open</body><body package="VRLensDemo">createDM	"open up the definer tool"	| sample types  |	sample := self modelValue sampleData.	types := self modelValue sampleTypes.	vrBuilder := (VRDataModelBuilder for: sample and: types).	vrBuilder rawData: self modelValue reader modelCollection.	vrBuilder fieldSep: self modelValue getFieldSeparator.	vrBuilder recSep: self modelValue getRecSeparator.	vrBuilder sourceFile: self file value.	self enable: #createDemo.	vrBuilder open</body><body package="VRLensDemo">readFile	"read the file, do auto-guessing of types"	self modelValue readFile.	self enable: #createDM.</body><body package="VRLensDemo">selectFile	"This stub method was generated by UIDefiner"	| maybe |	maybe := (Smalltalk at:#CommonFileSelectionDialog) openFile.	maybe asFilename exists		ifTrue: [self file value: maybe.				self enable: #readFile.				self disable: #createDM.				self modelValue reset]</body></methods><methods><class-id>Lens.VRFileImportTool</class-id> <category>initialize-release</category><body package="VRLensDemo">initialize	"UIDefiner defined this method.	Do NOT modify this method; place custom code in &lt;initializeApplication&gt;"	super initialize.	self model: VRFileImporterModel new asValue.	self initializeAspects.	self initializeApplication.</body><body package="VRLensDemo">initializeApplication	"UIDefiner defined this method.	UIDefiner will not recreate this method, so all custom initialization code should be placed here."</body><body package="VRLensDemo">initializeAspects	"Preset all aspects.  UIDefiner will overwrite this method"		fieldSeparator:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #fieldSeparator).		file:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #file).		recordSeparator:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #recordSeparator).</body></methods><methods><class-id>Lens.VRImportLoginDialog</class-id> <category>actions</category><body package="VRLensDemo">login	"This stub method was generated by UIDefiner"	self accept value: true</body></methods><methods><class-id>Lens.VRImportLoginDialog</class-id> <category>aspects</category><body package="VRLensDemo">pass	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^pass isNil		ifTrue:			[pass := String new asValue]		ifFalse:			[pass]</body><body package="VRLensDemo">user	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^user isNil		ifTrue:			[user := String new asValue]		ifFalse:			[user]</body></methods><methods><class-id>Lens.VRDataModelBuilder</class-id> <category>testing</category><body package="VRLensDemo">canSave	self domainModel value isNil		ifTrue: [^false].	self dataModelName value isNil		ifTrue: [^false].	self dataModelType value isNil		ifTrue: [^false].	^true</body></methods><methods><class-id>Lens.VRDataModelBuilder</class-id> <category>events</category><body package="VRLensDemo">changedNameOfVar	"new variable name selected; change model"	| sel |	sel := self varList selection.	sel isNil		ifTrue: [^self].	self modelValue changedNameFor: sel</body><body package="VRLensDemo">changedSelectedVar	"set a new var; change values in model"	| sel |	sel := self varList selection.	sel isNil		ifTrue: [^self].	self name retractInterestsFor: self.	self length retractInterestsFor: self.	self type retractInterestsFor: self.	self modelValue handleNewSelection: sel.	self updateLengthSetting.	self type onChangeSend: #changedTypeOfVar to: self.	self name onChangeSend: #changedNameOfVar to: self.	self length onChangeSend: #changedVarLength to: self</body><body package="VRLensDemo">changedTypeOfVar	"new variable type selected; change model"	| sel |	typeIsChanging ifTrue: [^self].	sel := self varList selection.	sel isNil		ifTrue: [^self].	self modelValue changedTypeFor: sel.	self updateLengthSetting</body><body package="VRLensDemo">changedVarLength	"new variable length selected; change model"	| sel |	sel := self varList selection.	sel isNil		ifTrue: [^self].	self modelValue changedLengthFor: sel.</body><body package="VRLensDemo">setEvents	self varList selectionIndexHolder onChangeSend: #changedSelectedVar to: self.	self type onChangeSend: #changedTypeOfVar to: self.	self name onChangeSend: #changedNameOfVar to: self.	self length onChangeSend: #changedVarLength to: self</body><body package="VRLensDemo">unsetEvents	self varList selectionIndexHolder retractInterestsFor: self.	self type retractInterestsFor: self.	self name retractInterestsFor: self.	self length retractInterestsFor: self</body><body package="VRLensDemo">updateLengthSetting	self type value == #String		ifTrue: [self enable: #length]		ifFalse: [self disable: #length]</body></methods><methods><class-id>Lens.VRDataModelBuilder</class-id> <category>accessing</category><body package="VRLensDemo">dataModelName	^dataModelName</body><body package="VRLensDemo">dataModelType	^dataModelType</body><body package="VRLensDemo">dataModelTypeMenu	"set up the menu"	| menu |	menu := Menu new.	((LensDatabaseContext allSubclasses select: [ :c | c kind notNil ]) asSortedCollection: [ :c1 :c2 | c1 kind &lt;= c2 kind ]) do:		[ :aContext |		menu addItemLabel: aContext kind asString value: aContext name ].	^menu</body><body package="VRLensDemo">domainModel	^domainModel</body><body package="VRLensDemo">length	^length</body><body package="VRLensDemo">model	^model</body><body package="VRLensDemo">model: aValue	model := aValue</body><body package="VRLensDemo">name	^name</body><body package="VRLensDemo">type	^type</body><body package="VRLensDemo">varList	^varList</body></methods><methods><class-id>Lens.VRDataModelBuilder</class-id> <category>private</category><body package="VRLensDemo">fieldSep: aChar	self modelValue fieldSep: aChar</body><body package="VRLensDemo">rawData: aCollection	self modelValue rawObjectList: aCollection</body><body package="VRLensDemo">recSep: aChar	self modelValue recSep: aChar</body><body package="VRLensDemo">sourceFile: aFile	self modelValue sourceFile: aFile</body></methods><methods><class-id>Lens.VRDataModelBuilder</class-id> <category>actions</category><body package="VRLensDemo">importIntoDB	"import data into the dbms"	| dlg |	dlg := VRImportLoginDialog new.	dlg open		ifTrue: [ self modelValue importUsing:  dlg user value and: dlg pass value]</body><body package="VRLensDemo">quit	"This stub method was generated by UIDefiner"	self closeRequest</body><body package="VRLensDemo">save	"This stub method was generated by UIDefiner"	Cursor wait showWhile: [		self canSave			ifTrue: [self modelValue save]].	LensEditor new 		openOnClass: (Smalltalk at: self dataModelName value) 		andSelector: #dataModelSpec.	self enable: #importIntoDB</body></methods><methods><class-id>Lens.VRDataModelBuilder</class-id> <category>initialize-release</category><body package="VRLensDemo">initialize	"UIDefiner defined this method.	Do NOT modify this method; place custom code in &lt;initializeApplication&gt;"	super initialize.	self model: VRDataModelBuilderModel new asValue.	self initializeAspects.	self initializeApplication.</body><body package="VRLensDemo">initializeApplication	"UIDefiner defined this method.	UIDefiner will not recreate this method, so all custom initialization code should be placed here."	typeIsChanging := false</body><body package="VRLensDemo">initializeAspects	"Preset all aspects.  UIDefiner will overwrite this method"		dataModelName:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #dataModelName).		dataModelType:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #dataModelType).		domainModel:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #domainModel).		length:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #length).		name:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #name).		type:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #type).		varList := SelectionInList with: self model value varList.</body><body package="VRLensDemo">release	super release.	self unsetEvents</body></methods><methods><class-id>Lens.VRDataModelBuilder</class-id> <category>interface control</category><body package="VRLensDemo">noticeOfWindowClose: aWindow	super noticeOfWindowClose: aWindow.	self release</body><body package="VRLensDemo">postBuildWith: bldr	super postBuildWith: bldr.	self setEvents</body></methods><methods><class-id>Lens.VRDataModelBuilder class</class-id> <category>As yet unclassified</category><body package="VRLensDemo">for: aCollection	| inst |	inst := self new.	inst model value for: aCollection.	^inst</body><body package="VRLensDemo">for: aCollectionOfStrings and: aCollectionOfTypes	| inst |	inst := self new.	inst model value for: aCollectionOfStrings and: aCollectionOfTypes.	^inst</body></methods><methods><class-id>Lens.VRDemoGenerator class</class-id> <category>As yet unclassified</category><body package="VRLensDemo">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'VRDemo Generator' 			#min: #(#Point 584 300 ) 			#bounds: #(#Rectangle 93 166 677 466 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.00684931 0 0.0233333 ) 					#name: #loginFormNameLabel 					#label: 'Login Form Name' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.010274 0 0.15 ) 					#name: #formLabel 					#label: 'Form' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.00856164 0 0.276667 ) 					#name: #categoryLabel 					#label: 'Category' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.00856164 0 0.52 ) 					#name: #dataModelLabel 					#label: 'DataModel' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.00856164 0 0.64 ) 					#name: #dataEntityLabel 					#label: 'Data Entity' ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame 0 0.00342466 0 0.41 0 0.982877 0 0.783333 ) 					#label: 'DataModel Info' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.342466 0 0.00666667 0 0.950342 0 0.116667 ) 					#name: #loginForm 					#model: #loginForm 					#type: #symbol ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.342466 0 0.136667 0 0.953767 0 0.24 ) 					#name: #form 					#model: #form 					#type: #symbol ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.342466 0 0.263333 0 0.955479 0 0.366667 ) 					#name: #clsCategory 					#model: #clsCategory 					#type: #string ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.342466 0 0.506667 0 0.955479 0 0.603333 ) 					#name: #dataModelClass 					#flags: 40 					#model: #dataModelClass 					#type: #symbol ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.342466 0 0.626667 0 0.955479 0 0.723333 ) 					#name: #dbEntityName 					#flags: 40 					#model: #dbEntityName 					#type: #symbol ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 0 0.00684931 0 0.806667 ) 					#name: #isTabular 					#flags: 32 					#model: #isTabular 					#label: 'isTabular' ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.00856164 0 0.873333 0 0.183219 0 0.993333 ) 					#name: #generate 					#model: #generate 					#label: '&amp;Generate' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.260274 0 0.873333 0 0.434931 0 0.993333 ) 					#name: #test 					#flags: 40 					#model: #test 					#label: '&amp;Test' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.815068 0 0.873333 0 0.989726 0 0.993333 ) 					#name: #close 					#model: #closeRequest 					#label: '&amp;Close' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Lens.VRFileImportTool class</class-id> <category>As yet unclassified</category><body package="VRLensDemo">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Flat File Importer' 			#bounds: #(#Rectangle 146 142 646 343 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.016 0 0.0497512 ) 					#name: #fieldSeparatorLabel 					#label: 'Field Separator' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.018 0 0.243781 ) 					#name: #recordSeparatorLabel 					#label: 'Record Separator' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.252 0 0.0348259 0 0.408 0 0.174129 ) 					#name: #fieldSeparator 					#model: #fieldSeparator ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.25 0 0.228856 0 0.406 0 0.368159 ) 					#name: #recordSeparator 					#model: #recordSeparator ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.02 0 0.462687 ) 					#name: #fileLabel 					#label: 'File' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.116 0 0.442786 0 0.892 0 0.582089 ) 					#name: #file 					#model: #file 					#isReadOnly: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.01 0 0.771144 0 0.182 0 0.955224 ) 					#name: #selectFile 					#model: #selectFile 					#label: 'Select File' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.186 0 0.771144 0 0.358 0 0.955224 ) 					#name: #readFile 					#flags: 40 					#model: #readFile 					#label: 'Read File' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.438 0 0.771144 0 0.61 0 0.955224 ) 					#name: #createDM 					#flags: 40 					#model: #createDM 					#label: 'Create DM' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.822 0 0.771144 0 0.994 0 0.955224 ) 					#name: #quit 					#model: #closeRequest 					#label: 'Quit' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.622 0 0.771144 0 0.794 0 0.955224 ) 					#name: #createDemo 					#flags: 40 					#model: #createDemo 					#label: '&amp;Demo' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Lens.VRImportLoginDialog class</class-id> <category>As yet unclassified</category><body package="VRLensDemo">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Import Tool Login' 			#min: #(#Point 360 150 ) 			#max: #(#Point 360 150 ) 			#bounds: #(#Rectangle 300 200 660 350 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.025 0 0.0866667 ) 					#name: #usernameLabel 					#label: 'Username' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.025 0 0.406667 ) 					#name: #passwordLabel 					#label: 'Password' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.255556 0 0.0666667 0 0.786111 0 0.24 ) 					#name: #user 					#model: #user ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.255556 0 0.386667 0 0.786111 0 0.56 ) 					#name: #pass 					#model: #pass 					#type: #password ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.025 0 0.746667 0 0.219444 0 0.946667 ) 					#name: #login 					#model: #login 					#label: 'Login' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Lens.VRDataModelBuilder class</class-id> <category>As yet unclassified</category><body package="VRLensDemo">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'DataModel Builder' 			#bounds: #(#Rectangle 171 76 629 525 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 0 0.0262009 0 0.273942 0 0.41048 0 0.703786 ) 					#name: #varList 					#model: #varList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0240175 0 0.106904 ) 					#name: #domainLabel 					#label: 'Domain Class' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.266376 0 0.0979955 0 0.652838 0 0.162584 ) 					#name: #domainModel 					#model: #domainModel 					#type: #symbol ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0240175 0 0.180401 ) 					#name: #dataModelLabel 					#label: 'Data Model Class' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.266376 0 0.171492 0 0.652838 0 0.23608 ) 					#name: #dataModelName 					#model: #dataModelName 					#type: #symbol ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin 0 0.438865 0 0.538975 ) 					#name: #integerType 					#model: #type 					#label: 'Integer' 					#select: #Integer ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin 0 0.438865 0 0.608018 ) 					#name: #fixedpointType 					#model: #type 					#label: 'Fixed Point' 					#select: #Fixedpoint ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin 0 0.438865 0 0.67706 ) 					#name: #booleanType 					#model: #type 					#label: 'Boolean' 					#select: #Boolean ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin 0 0.438865 0 0.746102 ) 					#name: #stringType 					#model: #type 					#label: 'String' 					#select: #String ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin 0 0.689956 0 0.538975 ) 					#name: #timeType 					#model: #type 					#label: 'Time' 					#select: #Time ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin 0 0.689956 0 0.608018 ) 					#name: #dateType 					#model: #type 					#label: 'Date' 					#select: #Date ) 				#(#RadioButtonSpec 					#layout: #(#LayoutOrigin 0 0.689956 0 0.67706 ) 					#name: #timestampType 					#model: #type 					#label: 'Timestamp' 					#select: #Timestamp ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.427948 0 0.376392 ) 					#name: #lengthLabel 					#label: 'Length' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.534934 0 0.36971 0 0.978166 0 0.434298 ) 					#name: #length 					#model: #length 					#type: #number 					#formatString: '0' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.427948 0 0.287305 ) 					#name: #nameLabel 					#label: 'Name' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.534934 0 0.280624 0 0.978166 0 0.345212 ) 					#name: #name 					#model: #name ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.0262009 0 0.890869 0 0.320961 0 0.951002 ) 					#name: #save 					#model: #save 					#label: 'Save Spec' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.79476 0 0.890869 0 0.925764 0 0.951002 ) 					#name: #quit 					#model: #quit 					#label: 'Quit' 					#defaultable: true ) 				#(#GroupBoxSpec 					#layout: #(#LayoutFrame 0 0.421397 0 0.489978 0 0.945415 0 0.830735 ) 					#name: #dataTypesLabel 					#label: 'Data Types' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0240175 0 0.0334076 ) 					#name: #dataModelTypeLabel 					#label: 'Data Model Type' ) 				#(#MenuButtonSpec 					#layout: #(#LayoutFrame 0 0.266376 0 0.0244989 0 0.650655 0 0.0890869 ) 					#name: #dataModelType 					#model: #dataModelType 					#menu: #dataModelTypeMenu ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.371179 0 0.890869 0 0.665939 0 0.951002 ) 					#name: #importIntoDB 					#flags: 40 					#model: #importIntoDB 					#label: 'Import into DB' 					#defaultable: true ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView useParentColors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category><attributes><package>Interface-Dialogs</package></attributes></class><class><name>ExtendedModel</name><environment>Core</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Abstract-Models-Base</category><attributes><package>VRForms</package></attributes></class><class><name>VRDetailForm</name><environment>UI</environment><super>UI.VRDBApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>editMode parent owner windowLabel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Form-Deployment</category><attributes><package>VRForms</package></attributes></class></st-source>