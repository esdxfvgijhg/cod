<?xml version="1.0"?><st-source><!-- Name: VRGoodiesComment: This package contains a grab bag of goodies that didn't fit cleanly into any other package.  many of these date from work I first did in VW 1.0DbIdentifier: psql_public_cst_2007DbTrace: 65406DevelopmentPrerequisites: #(#(#any 'BOSS' '') #(#any 'Database' '') #(#any 'VRUIPainter' ''))PackageName: VRGoodiesParcel: #('VRGoodies')PrerequisiteParcels: #(#('BOSS' '') #('Database' '') #('VRUIPainter' ''))PrintStringCache: (7.3,jamesr)Date: 11:55:12 am September 29, 2009 --><time-stamp>From VisualWorksÂ®, 7.6 of March 3, 2008 on September 29, 2009 at 11:55:12 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>FileToolModel</name><environment>Smalltalk</environment><super>Core.ExtendedModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>curSep upSep dirList fileList fileEntry curDir separator fileSelection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-File</category><attributes><package>VRGoodies</package></attributes></class><class><name>ThreadSafeCollection</name><environment>Core</environment><super>Core.ExtendedModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>collection errorReporter sem </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Deployment</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>Core.ThreadSafeCollection</class-id><body>This is a generic wrapper allowing one to have an arbitrary collection be held in a thread safe manner.Instance Variablescollection &lt;Collection&gt; The collection wrappederrorReporter &lt;GenericErrorReporter&gt; Reports errors (i.e., protocol mistakes)sem &lt;Semaphore&gt; Protexts wrapped object</body></comment><class><name>DevAdHocQueryTool</name><environment>Smalltalk</environment><super>Database.AdHocQueryTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>category </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Development</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>DevAdHocQueryTool</class-id><body>This version of the query tool can be used to generate domain objects to back tables in the dbInstance Variables:	category	&lt;String&gt;	 System category for class to generate</body></comment><class><name>DBAdjustmentModel</name><environment>Database</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>newLibString pattern interfaces oldDict oldSelections </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VR-DBTools</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>Database.DBAdjustmentModel</class-id><body>Domain model for the DBInterfacesAdjustmentToolInstance Variables: newLibString		&lt;String&gt; new interfaces to look forpattern		&lt;String&gt; filter for searching for classesinterfaces		&lt;List&gt; Collection of classes found by filter</body></comment><class><name>VRTimer</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>time delta delay running timerProcess ticks </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Deployment</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>Core.VRTimer</class-id><body>This class creates a simple timer that may be used to notify applications when a set amount of time has passedInstance Variablestime &lt;ValueHolder | Number&gt; How long timer has rundelta &lt;ValueHolder | Number&gt; How much to add to time each tickdelay &lt;ValueHolder | Number&gt; How long process should sleep for between ticksrunning &lt;ValueHolder | Boolean&gt; If true, timer is runningtimerProcess &lt;Process&gt; The actual processticks &lt;ValueHolder | Number&gt; How many ticks have passed</body></comment><class><name>CaseStatement</name><environment>Core</environment><super>Core.ExtendedObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cases </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Deployment</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>Core.CaseStatement</class-id><body>This class shows how one might implement a case statement like objectInstance Variables:	cases	&lt;Dictionary&gt; The cases and their blocks</body></comment><class><name>FontDialog</name><environment>UI</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>font fontMenu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Deployment</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>UI.FontDialog</class-id><body>This dialog allows easy selection of fonts for useInstance Variables:	font	&lt;Symbol&gt;	The name of the current font	fontMenu	&lt;Menu&gt;	 menu of system fonts</body></comment><class><name>FontTool</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>styles styleList name styleName pointSizeList fonts fontList italicCBox boldCBox strikeThroughCBox underlineCBox portStyleCBox portableStyles textSample showSample text fD outlineCBox colorCBox shadowCBox </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Development</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>UI.FontTool</class-id><body>This tool allows creation of or editing of fonts based on platform fonts present.  It is derived from a tool that was used in the VW Intro class at ParcPlace Systems.Instance Variablesstyles &lt;Collection&gt; Collection of text stylesstyleList  &lt;Collection&gt; Sorted list of stylesname &lt;Symbol&gt; Name of selected fontstyleName &lt;Symbol&gt; Name of selected stylepointSizeList  &lt;Collection&gt; Possible point sizesfonts &lt;Collection | FontDescription&gt; List of available system fontsfontList &lt;Collection&gt; Collection of VW fontsitalicCBox &lt;Value Holder&gt; If true, use italicsboldCBox  &lt;ValueHolder&gt; If true, use boldstrikeThroughCBox &lt;ValueHolder&gt; If true, use strike throughunderlineCBox &lt;ValueHolder&gt; If true, use underlineportStyleCBox &lt;ValueHolder&gt; If true, this font is portableportableStyles &lt;Collection&gt; Styles that can move between platformstextSample &lt;Text&gt; Sample text using current fontshowSample &lt;Boolean&gt; If true, show the sampletext &lt;Text&gt; The textfD &lt;FontDescription&gt; The current fontoutlineCBox &lt;ValueHolder&gt; If true, use outlinecolorCBox &lt;ValueHolder&gt; If true, use colorshadowCBox &lt;ValueHolder&gt; If true, use shadowing</body></comment><class><name>VRFeelPolicy</name><environment>UI</environment><super>UI.UIFeelPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			TextConstants.*			</imports><category>UIBuilder-Support</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>UI.VRFeelPolicy</class-id><body>This is a feel policy that adds some shortcuts for common behavior (accept, inspect, do it, print it)Instance Variables:</body></comment><class><name>AdHocQueryTool</name><environment>VRApps</environment><super>Database.AdHocQueryTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>hList hText </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VRQueryTool</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>VRApps.AdHocQueryTool</class-id><body>This class adds 'history' to the query tool - queries can be saved to a shared variable, and then to a file.  This allows commonly used queries to be summonedInstance Variables:	hList	&lt;Collection&gt;	 The list of queries	hText	&lt;String&gt;	 The query textShared Variables:	HistoryList	&lt;Collection&gt; saved list of queries</body></comment><class><name>VRGoodiesDescriptionReader</name><environment>Smalltalk</environment><super>Core.ExtendedModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parcList otherList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Goodies-Describing</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>VRGoodiesDescriptionReader</class-id><body>Reads file of descriptionsInstance Variables:	parcList	&lt;Collection&gt;	 What is a Cincom goodie	otherList	&lt;Collection&gt;	 What is donated</body></comment><class><name>FileToolBrowser</name><environment>Smalltalk</environment><super>UI.VRApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dirList fileList fileSelection volume volumeMenu volCache curVol volChanging dirItems fileItems </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-File</category><attributes><package>VRGoodies</package></attributes></class><class><name>FileTool</name><environment>Smalltalk</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dirList fileList fileSelection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-File</category><attributes><package>VRGoodies</package></attributes></class><class><name>DBCurrentDefinitionsUI</name><environment>Database</environment><super>UI.VRDetailForm</super><private>false</private><indexed-type>none</indexed-type><inst-vars>ifcList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VR-DB</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>Database.DBCurrentDefinitionsUI</class-id><body>Shows current interface information on an EXDI objectInstance Variables:	ifcList	&lt;Collection&gt;	 List of libraries to call</body></comment><class><name>VRDocument</name><environment>Graphics</environment><super>Graphics.Document</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VR-DBTools</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>Graphics.VRDocument</class-id><body>This is a place holder at present, until I recover code apparently lost in the transition from file-ins to parcels back for VW 3.0.  Instance Variables:</body></comment><class><name>DatabaseImportTool</name><environment>Smalltalk</environment><super>UI.JARApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dataModelValue bossFileValue passwordValue userValue dbModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Development</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>DatabaseImportTool</class-id><body>This class imports objects from BOSS files and stuffs them into a database using ObjectLensInstance VariablesdataModelValue &lt;ValueHolder&gt; Holder on the dataModelbossFileValue &lt;ValueHolder&gt; Holder on the BOSS FilepasswordValue &lt;ValueHolder&gt; Holder on the passworduserValue &lt;ValueHolder&gt; Holder on the usernamedbModel &lt;ExtendedDataModel&gt; The dataModel object</body></comment><class><name>DBInterfaceAdjustmentTool</name><environment>Database</environment><super>UI.VRDetailForm</super><private>false</private><indexed-type>none</indexed-type><inst-vars>newLibString pattern interfaces </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VR-DBTools</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>Database.DBInterfaceAdjustmentTool</class-id><body>The UI used to adjust interface information on an EXDI objectInstance Variables: newLibString		&lt;String&gt; new library string to addpattern		&lt;String&gt; Filter for searchinginterfaces		&lt;MultiSelectionInList&gt; Collection returned by filter</body></comment><class><name>GenericErrorReporter</name><environment>UI</environment><super>Core.ExtendedModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>showVisual dumpToFile filename </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Deployment</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>UI.GenericErrorReporter</class-id><body>This is a generic error reporter.  See the class side protocol for example usageInstance Variables:	showVisual	&lt;Boolean&gt;	If true, show as dialog.  Else to Transcript	dumpToFile	&lt;Boolean&gt;	If true, dump errors to file	filename	&lt;String&gt;	 Error file for dumpingShared Variables:	DefaultFileName	&lt;String&gt;	 Default error file	Sem	&lt;Semaphore&gt;	serializes access to the error file</body></comment><class><name>DependencyWatcher</name><environment>UI</environment><super>UI.DependencyTransformer</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Deployment</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>UI.DependencyWatcher</class-id><body>VW 2.5 era optimizer of dependencyInstance Variables:</body></comment><class><name>VRGoodiesDescription</name><environment>Smalltalk</environment><super>Core.ExtendedModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parcelName parcelPath parcelDescription </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Goodies-Describing</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>VRGoodiesDescription</class-id><body>Describes a goodieInstance Variables:	parcelName	&lt;String&gt;	 name of parcel	parcelPath	&lt;String&gt;	 where it is	parcelDescription	&lt;String&gt; description</body></comment><class><name>DBSelectionsModel</name><environment>Database</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dbClassName dbLibsString </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VR-DBTools</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>Database.DBSelectionsModel</class-id><body>Model behind DB adjustment toolInstance Variables:	dbClassName	&lt;Symbol&gt;	name of EXDI class	dbLibsString	&lt;String&gt;	 all interfaces</body></comment><class><name>StringTransformer</name><environment>Core</environment><super>Core.ExtendedObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>replacement string position </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Deployment</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>Core.StringTransformer</class-id><body>This class may be used to replace objects in strings.  It is used to eliminate the '&amp;' character with underlined text as part of the VR framework support for hotkeysInstance Variables:	replacement	&lt;Character&gt;	new character	string	&lt;String&gt; to be transformed	position	&lt;Number&gt;	current index of replacementShared Variables:	DefaultChar	&lt;Character&gt;	Default character to replace</body></comment><class><name>VRGoodiesDescriptionTool</name><environment>Smalltalk</environment><super>UI.VRDetailForm</super><private>false</private><indexed-type>none</indexed-type><inst-vars>doc parcelList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Goodies-Describing</category><attributes><package>VRGoodies</package></attributes></class><comment><class-id>VRGoodiesDescriptionTool</class-id><body>UI for showing descriptionsInstance Variables:	doc	&lt;String&gt;	 Goodie description	parcelList	&lt;Collection&gt;	 All goodies found</body></comment><shared-variable><name>DefaultChar</name><environment>Core.StringTransformer</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>VRGoodies</package></attributes></shared-variable><shared-variable><name>HistoryList</name><environment>VRApps.AdHocQueryTool</environment><private>false</private><constant>false</constant><category>history</category><attributes><package>VRGoodies</package></attributes></shared-variable><shared-variable><name>Traces</name><environment>UI.FontTool</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>VRGoodies</package></attributes></shared-variable><shared-variable><name>TraceSwitch</name><environment>UI.FontTool</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>VRGoodies</package></attributes></shared-variable><shared-variable><name>Sem</name><environment>Core.ThreadSafeCollection</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>VRGoodies</package></attributes></shared-variable><shared-variable><name>Sem</name><environment>UI.GenericErrorReporter</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>VRGoodies</package></attributes></shared-variable><shared-variable><name>DefaultFileName</name><environment>UI.GenericErrorReporter</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>VRGoodies</package></attributes></shared-variable><shared-variable><name>WildCards</name><environment>FileToolModel</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>VRGoodies</package></attributes></shared-variable><methods><class-id>FileToolModel</class-id> <category>accessing</category><body package="VRGoodies" selector="curDir">curDir	^curDir</body><body package="VRGoodies" selector="curDir:">curDir: aValue	curDir := aValue asFilename.	self changed: #curDir with: aValue asString</body><body package="VRGoodies" selector="dirList">dirList	^dirList</body><body package="VRGoodies" selector="dirList:">dirList: aValue	dirList := aValue.	self changed: #dirList</body><body package="VRGoodies" selector="fileEntry">fileEntry	^fileEntry</body><body package="VRGoodies" selector="fileEntry:">fileEntry: aValue	fileEntry := aValue.	self changed: #fileEntry with: aValue.</body><body package="VRGoodies" selector="fileList">fileList	^fileList</body><body package="VRGoodies" selector="fileList:">fileList: aValue	fileList := aValue.	self changed: #fileList with: aValue</body><body package="VRGoodies" selector="fileSelection">fileSelection	^fileSelection</body><body package="VRGoodies" selector="fileSelection:">fileSelection: aValue	fileSelection := aValue.	self changed: #fileSelection with: aValue</body><body package="VRGoodies" selector="getCurSeparator">getCurSeparator	^curSep</body><body package="VRGoodies" selector="getSeparator">getSeparator	^String with: self separator</body><body package="VRGoodies" selector="getUpSeparator">getUpSeparator	^upSep</body><body package="VRGoodies" selector="separator">separator	separator isNil ifTrue: [self separator:  Filename separator].	^separator</body><body package="VRGoodies" selector="separator:">separator: aChar	separator := aChar</body><body package="VRGoodies" selector="setDirList:">setDirList: aCollection	"add to the list"	self dirList isEmpty ifTrue: [self dirList addAll: aCollection]		ifFalse: [self dirList removeFrom: 1 to: self dirList size. self dirList addAll: aCollection]</body><body package="VRGoodies" selector="setFileList:">setFileList: aCollection	"add to the list"	self fileList isEmpty ifTrue: [self fileList addAll: aCollection]		ifFalse: [self fileList removeFrom: 1 to: self fileList size. self fileList addAll: aCollection]</body></methods><methods><class-id>FileToolModel</class-id> <category>private accessing</category><body package="VRGoodies" selector="wildAll">wildAll	^WildCards at: #MATCH_ALL</body><body package="VRGoodies" selector="wildOne">wildOne	^WildCards at: #MATCH_ONE</body></methods><methods><class-id>FileToolModel</class-id> <category>operations</category><body package="VRGoodies" selector="changeAbsoluteDir:">changeAbsoluteDir: path	"change absolute directory"	self fillLists: path.	self curDir:  path.</body><body package="VRGoodies" selector="extractFiles:">extractFiles: fileArray 	"extract files, dirs from the array"	| path fullList anArray |	path := (fileArray at: 1) asFilename head.	fullList := OrderedCollection new: fileArray size.	fileArray do: [:each | fullList add: each asFilename tail].	"now separate"	anArray := self parseDirList: fullList from: path.	self setDirList: (anArray at: 1).	self setFileList: (anArray at: 2)</body><body package="VRGoodies" selector="fillLists:">fillLists: aFilename	"get current dir, files"	| fullList anArray |	fullList := aFilename asFilename directoryContents.	"now separate"	anArray := self parseDirList: fullList from: aFilename asString.	self setDirList: (anArray at: 1).	self setFileList: (anArray at: 2)</body><body package="VRGoodies" selector="findCurrentDir">findCurrentDir	"find current dir"	^Filename defaultDirectory asString.</body><body package="VRGoodies" selector="handleDirChange:">handleDirChange: aDir 	"handle ."	| newDir |	aDir = '.' ifTrue: [^self].	aDir = '..'		ifTrue: [newDir := self curDir head]		ifFalse: [newDir := self curDir construct: aDir].	self fillLists: newDir.	self curDir: newDir</body><body package="VRGoodies" selector="parseDirList:from:">parseDirList: aList from: aDir 	"from full dir listing, separate the files and dirs"	| files dirs  | 	files := SortedCollection new.	dirs := SortedCollection new.	dirs add: self getCurSeparator.	(self atRoot: aDir)		ifFalse: 			[dirs add: (self getUpSeparator)].	aList do: [:each | (aDir asFilename construct: each) isDirectory			ifTrue: [dirs add: each]			ifFalse: [files add: each]].	^Array with: dirs with: files</body><body package="VRGoodies" selector="showMatch:">showMatch: path 	"user entered a path to be matched"	| results |	results := Filename filesMatching: path.	results notNil		ifTrue: 			[| anArray |			anArray := Filename splitPath: path.			self extractFiles: results.			" if true, then current directory sticks"			(anArray at: 1) = ''				ifFalse: [self curDir: (anArray at: 1)]]</body></methods><methods><class-id>FileToolModel</class-id> <category>interface operations</category><body package="VRGoodies" selector="changeDir:">changeDir: aDirectory	"changed to a new directory"	aDirectory notNil 		ifTrue: [self handleDirChange: aDirectory]</body><body package="VRGoodies" selector="changeFile:">changeFile: aFile	"changed current file"	self fileSelection: aFile</body><body package="VRGoodies" selector="copyTo:">copyTo: destination	"edit the file"	| dest |	dest := self determineDestinationPath: destination.	(self curDir construct: self fileSelection) copyTo: dest.	self fillLists: self curDir</body><body package="VRGoodies" selector="createDirectory:">createDirectory: aString	"create a directory and refresh self - assumption - relative to curDir"	| newDir |	newDir := self curDir construct: aString.	newDir makeDirectory.	self refresh</body><body package="VRGoodies" selector="delete">delete	"delete the file"	self fileSelection ~= ''		ifTrue: [(self curDir construct: self fileSelection) delete.				self fillLists: self curDir]		ifFalse: [self error: 'Must make a selection first']</body><body package="VRGoodies" selector="edit">edit	"edit the file"	self fileSelection ~= ''		ifTrue: [(self curDir construct: self fileSelection) edit]		ifFalse: [self error: 'Must select a file']</body><body package="VRGoodies" selector="fileIn">fileIn	"file in the file"	self fileSelection ~= ''		ifTrue: [(self curDir construct: self fileSelection) fileIn]		ifFalse: [self error: 'Must select a file']</body><body package="VRGoodies" selector="handleDataEntry">handleDataEntry	"user entered a file to be matched"	| path |	path := self fileEntry.	((path includes: self wildOne)		or: [path includes: self wildAll])		ifTrue: 			[self showMatch: path.			^self].	path asFilename isDirectory		ifTrue: [self changeAbsoluteDir: path]		ifFalse: [self showMatch: path]</body><body package="VRGoodies" selector="moveTo:">moveTo: destination	"edit the file"	| dest |	dest := self determineDestinationPath: destination.	(self curDir construct: self fileSelection) moveTo: dest.	self fillLists: self curDir</body><body package="VRGoodies" selector="parcelIn">parcelIn	"load in the file"	self fileSelection ~= ''		ifTrue: [| file |				file := (self curDir construct: self fileSelection).				Parcel loadParcelFrom: file]		ifFalse: [self error: 'Must select a file']</body><body package="VRGoodies" selector="refresh">refresh	"refresh view"	self fillLists: self curDir</body></methods><methods><class-id>FileToolModel</class-id> <category>private</category><body package="VRGoodies" selector="atRoot:">atRoot: aDir	"return true if at root"	| platform |	platform := self platform.	(platform = 'MS-Windows' or: [platform = 'OS/2'])		ifTrue: [^(aDir = self getSeparator or: 			[aDir size = 3 and: [(aDir at: 2) = $: and: [(aDir at: 3) = self separator]]])]		ifFalse: [^aDir = self getSeparator]</body><body package="VRGoodies" selector="determineCurrentVolume">determineCurrentVolume	"answer the current volume"	^((Filename concreteClass readVolumeFrom: Filename defaultDirectory asString  readStream), self getSeparator) asUppercase</body><body package="VRGoodies" selector="determineDestinationPath:">determineDestinationPath: aString	"return the path to copy/move to"	"if it's relative, qualify it"	| path endpath |	path := aString asFilename.	aString asFilename isRelative		ifTrue: [path := self curDir construct: aString].	"now, is it a directory ?"	endpath := path.	path asFilename isDirectory		ifTrue: [endpath := path construct: self fileSelection].	^endpath</body></methods><methods><class-id>FileToolModel</class-id> <category>initialize-release</category><body package="VRGoodies" selector="initialize">initialize	"set current directory, lists"	super initialize.	self dirList: (List new: 100).	self fileList: (List new: 100).	curSep := Filename currentDirectory asString.	upSep := curSep, curSep.	self fileSelection: ''.	self curDir: self findCurrentDir.	self fillLists: self curDir.</body></methods><methods><class-id>FileToolModel</class-id> <category>testing</category><body package="VRGoodies" selector="hasVolumes">hasVolumes	| plat |	plat := ExternalInterface currentPlatform.	^plat first = #win32</body></methods><methods><class-id>FileToolModel class</class-id> <category>class initialization</category><body package="VRGoodies" selector="initialize">initialize	"FileToolModel initialize"	WildCards := IdentityDictionary new.	WildCards at: #MATCH_ONE	put: $#.	WildCards at: #MATCH_ALL put: $*</body></methods><methods><class-id>Core.ThreadSafeCollection</class-id> <category>initialize-release</category><body package="VRGoodies" selector="initialize">initialize	super initialize.	errorReporter := GenericErrorReporter new.	self sem: Semaphore forMutualExclusion</body></methods><methods><class-id>Core.ThreadSafeCollection</class-id> <category>private</category><body package="VRGoodies" selector="copy">copy	"need to return the collection, so implement this directly"	^self class messageNotUnderstoodSignal		handle: [:ex | | msg |					msg := 'Message not understood: #copy'.					errorReporter reportError: msg.					ex return]		do: [self sem critical: [collection copy]]</body><body package="VRGoodies" selector="doesNotUnderstand:">doesNotUnderstand: aMessage	"forward to collection after wrapping - catch internal mnu to prevent looping"self class messageNotUnderstoodSignal                handle: [:ex | | msg |                                        msg := 'Message not understood: ', aMessage selector printString.                                        errorReporter reportError: msg.                                        ex return]                do: [self sem critical: [^collection                                                 perform: aMessage selector                                                withArguments: aMessage arguments]]</body><body package="VRGoodies" selector="sem">sem	^sem</body></methods><methods><class-id>Core.ThreadSafeCollection</class-id> <category>accessing</category><body package="VRGoodies" selector="sem:">sem: aValue	sem := aValue</body></methods><methods><class-id>Core.ThreadSafeCollection</class-id> <category>api</category><body package="VRGoodies" selector="setCollection:">setCollection: aCollection	collection := aCollection</body></methods><methods><class-id>Core.ThreadSafeCollection class</class-id> <category>As yet unclassified</category><body package="VRGoodies" selector="for:">for: collectionClassName	^self for: collectionClassName size: 100</body><body package="VRGoodies" selector="for:size:">for: collectionClassName size: n	| inst |	inst := self new.	Dictionary keyNotFoundSignal		handle: [:ex | Transcript show: 'Class ', collectionClassName printString, ' does not exist !'.				ex return]		do: [inst setCollection: ((Smalltalk at: collectionClassName) new: n)].	^inst</body><body package="VRGoodies" selector="initialize">initialize	"ThreadSafeCollection initialize"	Sem := Semaphore forMutualExclusion</body></methods><methods><class-id>DevAdHocQueryTool</class-id> <category>private</category><body package="VRGoodies" selector="createModelObjectWithVars:">createModelObjectWithVars: data	"create model objects"	| className dataString |	className := self getNameFromQuery.	dataString := self stringFromArray: data.	(Smalltalk at:#ExtendedObject) subclass: className	instanceVariableNames: dataString	classVariableNames: ''	poolDictionaries: ''	category: self category value.	self generateAccessorsFor: className.	^className</body><body package="VRGoodies" selector="executeStatusChanged">executeStatusChanged	super executeStatusChanged.	(builder componentAt: #generate) isEnabled: self executeStatusHolder value</body><body package="VRGoodies" selector="generate">generate	"generate a 'model' class"	| data name class |	data := self tableModel columnLabels value baseCollection at: 1.	name := self createModelObjectWithVars: data.	class := Smalltalk at: name ifAbsent: [nil].	class isNil		ifTrue: [Dialog warn: 'Could not create ', name printString.				^self].	class browse</body><body package="VRGoodies" selector="getNameFromQuery">getNameFromQuery	"get the class name"	| stream name |	stream := self queryModel value string readStream.	stream throughAll: 'from'.	stream skipSeparators.	name := stream upTo: Character space.	name at: 1 put: ((name at: 1) asUppercase).	^name asSymbol</body><body package="VRGoodies" selector="scrub:">scrub: aString	"get rid of any extraneous characters"	| removals newString |	removals := #($! $@ $# $$ $% $^ $&amp; $* $( $) $&lt; $&gt; $? $. $, $/ $; $: $' $" $[ ${ $] $} $\ $| $= $+).	newString := aString.	removals do: [:each |			(newString includes: each)				ifTrue: [newString := newString copyWithout: each]].	^newString</body><body package="VRGoodies" selector="stringFromArray:">stringFromArray: data	"answer a space delimited string"	| stream  newData |	"clean out possible dupes"	newData := data asSet asArray.	stream := WriteStream on: (String new: 100).	newData do: [:each | | datum |		datum := self scrub: each copy asLowercase.		stream nextPutAll: datum.		stream nextPut: Character space].	^stream contents</body></methods><methods><class-id>DevAdHocQueryTool</class-id> <category>accessing</category><body package="VRGoodies" selector="category">category	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^category isNil		ifTrue:			[category := nil asValue]		ifFalse:			[category]</body></methods><methods><class-id>DevAdHocQueryTool</class-id> <category>actions</category><body package="VRGoodies" selector="generateAccessorsFor:">generateAccessorsFor: className	"generate accessing methods"	(AccessorDefiner on: className) createAccessors</body></methods><methods><class-id>Database.DBAdjustmentModel</class-id> <category>private</category><body package="VRGoodies" selector="buildUndoDictFor:">buildUndoDictFor: selections	self oldDict: IdentityDictionary new.	selections do: [:each |		self oldDict at: each put: (self getArrayOfNamesFrom: each libraryFiles)]</body><body package="VRGoodies" selector="getArrayOfNamesFrom:">getArrayOfNamesFrom: libs	|  array |	array := OrderedCollection new.	1 to: libs size do: [:index |		array add: (libs at: index) name].	^array</body><body package="VRGoodies" selector="getStringFrom:">getStringFrom: libFiles	| stream |	stream := WriteStream on: (String new).	1 to: libFiles size do: [:index |		stream nextPutAll: (libFiles at: index) name.		stream nextPut: Character space].	stream skip: -1.	^stream contents</body><body package="VRGoodies" selector="matchNameWithKnownFor:">matchNameWithKnownFor: aSymbol	| potential |	potential := aSymbol asString.	^(('Sybase*Interface' match: potential)		or: ['Oracle*Interface' match: potential])		or: ['ODBC*Interface' match: potential]</body><body package="VRGoodies" selector="matchPatternFor:">matchPatternFor: aSymbol	| potential |	potential := aSymbol asString.	^(self pattern match: potential)</body><body package="VRGoodies" selector="parseLibsFromInput">parseLibsFromInput	| stream coll |	stream := self newLibString readStream.		coll := OrderedCollection new: 20.	[stream atEnd]		whileFalse: [| next |				next := stream upTo: Character space.				next isEmpty not					ifTrue: [coll add: next]].	^coll</body></methods><methods><class-id>Database.DBAdjustmentModel</class-id> <category>initialize-release</category><body package="VRGoodies" selector="getAllDBInterfaces">getAllDBInterfaces	"answer a collection of class names"	^(Database allClasses select: [:each | self matchNameWithKnownFor: each]) asList</body><body package="VRGoodies" selector="initialize">initialize	"This is an auto-generated initialize method.  It should be updated"	self interfaces: self getAllDBInterfaces.	self newLibString: ''.	self pattern: ''.</body></methods><methods><class-id>Database.DBAdjustmentModel</class-id> <category>accessing</category><body package="VRGoodies" selector="interfaces">interfaces	^interfaces</body><body package="VRGoodies" selector="interfaces:">interfaces: aValue	interfaces := aValue.	self changed: #interfaces</body><body package="VRGoodies" selector="newLibString">newLibString	^newLibString</body><body package="VRGoodies" selector="newLibString:">newLibString: aValue	newLibString := aValue.	self changed: #newLibString</body><body package="VRGoodies" selector="oldDict">oldDict	^oldDict</body><body package="VRGoodies" selector="oldDict:">oldDict: aValue	oldDict := aValue</body><body package="VRGoodies" selector="oldSelections">oldSelections	^oldSelections</body><body package="VRGoodies" selector="oldSelections:">oldSelections: aValue	oldSelections := aValue</body><body package="VRGoodies" selector="pattern">pattern	^pattern</body><body package="VRGoodies" selector="pattern:">pattern: aValue	pattern := aValue.	self changed: #pattern</body></methods><methods><class-id>Database.DBAdjustmentModel</class-id> <category>api</category><body package="VRGoodies" selector="changeLibraryFilesFor:">changeLibraryFilesFor: selections	| newLibs |	self buildUndoDictFor: selections.	self oldSelections: selections.	newLibs := self parseLibsFromInput.	selections do: [:each |		each unloadLibraries.		each libraryFiles: newLibs].</body><body package="VRGoodies" selector="getCurrentDefsFor:">getCurrentDefsFor: selections	^(selections collect: [:each |		| def |		def := DBSelectionsModel new.		def dbClassName: each name.		def dbLibsString: (self getStringFrom: each libraryFiles)]) asList</body><body package="VRGoodies" selector="match">match	| classes |	classes := Database allClasses.	self interfaces: (classes select: [:each | self pattern match: each name asString]) asList.</body><body package="VRGoodies" selector="undo">undo	self oldDict keysAndValuesDo: [:cls :libs |		cls unloadLibraries.		cls libraryFiles: libs].	self buildUndoDictFor: self oldSelections.</body></methods><methods><class-id>Database.DBAdjustmentModel class</class-id> <category>instance creation</category><body package="VRGoodies" selector="new">new	^super new initialize</body></methods><methods><class-id>Core.VRTimer</class-id> <category>api</category><body package="VRGoodies" selector="makeTimerProcess">makeTimerProcess	timerProcess == nil ifFalse: [^self].	timerProcess := [		[(Delay forMilliseconds: delay value) wait.		self timerStep] repeat] newProcess.	timerProcess resume</body></methods><methods><class-id>Core.VRTimer</class-id> <category>accessing</category><body package="VRGoodies" selector="delay">delay	^delay</body><body package="VRGoodies" selector="delta">delta	^delta</body><body package="VRGoodies" selector="running">running	^running</body><body package="VRGoodies" selector="step">step	self timerStep</body><body package="VRGoodies" selector="ticks">ticks	^ticks</body><body package="VRGoodies" selector="time">time	^time</body></methods><methods><class-id>Core.VRTimer</class-id> <category>private</category><body package="VRGoodies" selector="runningStatusChanged">runningStatusChanged	| status |	status := running value.	timerProcess == nil		ifTrue: [status ifTrue: [self makeTimerProcess]]		ifFalse: [status ifFalse: [self stopTimerProcess]]</body><body package="VRGoodies" selector="stopTimerProcess">stopTimerProcess	| p |	timerProcess == nil ifTrue: [^self].	p := timerProcess.	timerProcess := nil.	p terminate</body><body package="VRGoodies" selector="timerStep">timerStep	time value: time value + delta value.	self time value = self ticks value		ifTrue: [self time value: 0.				self changed: #timerChanged]</body></methods><methods><class-id>Core.VRTimer</class-id> <category>initialize-release</category><body package="VRGoodies" selector="initialize">initialize	time := 0 asValue.		ticks := 0 asValue.	delta := 1 asValue.	delay := 1000 asValue.	running := false asValue onChangeSend: #runningStatusChanged to: self</body><body package="VRGoodies" selector="release">release	self stopTimerProcess</body></methods><methods><class-id>Core.VRTimer class</class-id> <category>As yet unclassified</category><body package="VRGoodies" selector="new">new	^super new initialize</body></methods><methods><class-id>Core.CaseStatement</class-id> <category>api</category><body package="VRGoodies" selector="case:do:">case: aCondition do: aValueBlock	"add a case to the list"	cases add: (aCondition -&gt; aValueBlock).</body><body package="VRGoodies" selector="switch:">switch: aCondition	"execute block previously stored"	self switch: aCondition default: [self error: 'No Default Found']</body><body package="VRGoodies" selector="switch:default:">switch: aCondition default: aBlock	"execute block previously stored"	| association |	association := self findOnKey: aCondition.	association notNil 		ifTrue: [(self findValue: association) value]		ifFalse: [aBlock value]</body></methods><methods><class-id>Core.CaseStatement</class-id> <category>private</category><body package="VRGoodies" selector="findOnKey:">findOnKey: aCondition	"answer association or nil"	^cases detect: [:each | each key = aCondition] ifNone: [nil]</body><body package="VRGoodies" selector="findValue:">findValue: anAssociation	"answer the value"	^anAssociation value</body><body package="VRGoodies" selector="remove:">remove: aCondition	"remove if in, else do nothing"	| elementToRemove |	elementToRemove := self findOnKey: aCondition.	elementToRemove notNil		ifTrue: [cases remove: elementToRemove]</body></methods><methods><class-id>Core.CaseStatement</class-id> <category>printing</category><body package="VRGoodies" selector="printOn:">printOn: aStream	"print self"	cases do: [:each |				aStream nextPutAll: 'Key: ', each key printString.				aStream nextPutAll: ' Value: ', each value printString.				aStream cr]</body></methods><methods><class-id>Core.CaseStatement</class-id> <category>initialize-release</category><body package="VRGoodies" selector="initialize">initialize	"set up the collection of cases"	super initialize.	cases := OrderedCollection new.</body><body package="VRGoodies" selector="initialize:">initialize: size	"set up the collection of cases"	cases := OrderedCollection new: size.</body></methods><methods><class-id>Core.CaseStatement class</class-id> <category>As yet unclassified</category><body package="VRGoodies" selector="case:do:">case: aCondition do: aBlock	"answer a new instance with initial condition"	^self new case: aCondition do: aBlock</body><body package="VRGoodies" selector="new:">new: size	"initialize the size of the collection"	^self basicNew initialize: size</body></methods><methods><class-id>UI.FontDialog</class-id> <category>accessing</category><body package="VRGoodies" selector="font">font	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^font isNil		ifTrue:			[font := nil asValue]		ifFalse:			[font]</body><body package="VRGoodies" selector="fontMenu">fontMenu	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^fontMenu isNil		ifTrue:			[fontMenu := nil asValue]		ifFalse:			[fontMenu]</body></methods><methods><class-id>UI.FontDialog</class-id> <category>initialize-release</category><body package="VRGoodies" selector="initialize">initialize	"set the fontMenu up"	| styles values mb |	super initialize.	styles := TextAttributes styles asArray.	values := Array new: styles size.	1 to: styles size do: [:i | values at: i put: (styles at: i) asString].	mb := MenuBuilder new.	self fontMenu value: (mb addLabels: values andValues: styles) buildMenu.	"set the default choice"	self font value: #default</body></methods><methods><class-id>UI.FontDialog class</class-id> <category>As yet unclassified</category><body package="VRGoodies" selector="selectFont">selectFont	"open the edialog, and answer the selection or nil"	| dlg |	dlg := self new.	dlg open		ifTrue: [^dlg font value]		ifFalse:[^nil]</body></methods><methods><class-id>UI.FontTool</class-id> <category>accessing</category><body package="VRGoodies" selector="attributes">attributes	| attr |	attr := OrderedCollection new.	self boldCBox value ifTrue: [attr add: #bold].	self italicCBox value ifTrue: [attr add: #italic].	self strikeThroughCBox value ifTrue: [attr add: #strikeout].	self underlineCBox value ifTrue: [attr add: #underline].	^attr asArray.</body><body package="VRGoodies" selector="attributesClear">attributesClear	self boldCBox value: false.	self italicCBox value: false.	self strikeThroughCBox value: false.	self underlineCBox value: false.</body><body package="VRGoodies" selector="attributesDecodeFont:">attributesDecodeFont: aFont	self boldCBox setValue: aFont boldness &gt;0.7.	self italicCBox setValue: aFont italic.	self strikeThroughCBox setValue: aFont strikeout.	self underlineCBox setValue: aFont underline.</body><body package="VRGoodies" selector="attributesEncodeIntoFont:">attributesEncodeIntoFont: aFont	aFont boldness: (self boldCBox value ifTrue: [0.7] ifFalse: [0.5]).	aFont italic: self italicCBox value.	aFont strikeout: self strikeThroughCBox value.	aFont underline: self underlineCBox value.</body><body package="VRGoodies" selector="attributesShowFont:">attributesShowFont: aFont	self boldCBox value: aFont boldness &gt;=0.7.	self italicCBox value: aFont italic.	self strikeThroughCBox value: aFont strikeout.	self underlineCBox value: aFont underline.</body><body package="VRGoodies" selector="boldCBox">boldCBox	^boldCBox isNil		ifTrue: [boldCBox := false asValue]		ifFalse: [boldCBox]</body><body package="VRGoodies" selector="colorCBox">colorCBox	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^colorCBox isNil		ifTrue:			[colorCBox := false asValue]		ifFalse:			[colorCBox]</body><body package="VRGoodies" selector="fD">fD	"Tu.05.Apr.94 cjm"	fD isNil ifTrue: [ self fontBuildnew.].	^fD</body><body package="VRGoodies" selector="fD:">fD: arg	fD := arg.</body><body package="VRGoodies" selector="fontBuildnew">fontBuildnew		"Tu.05.Apr.94 cjm"	"Build new fD"| fd  pS | 	fd := (FontDescription new family:  self name).	(pS := self pointSize) isNil ifTrue: [ pS := 12].	fd pixelSize:pS.	self attributesEncodeIntoFont: fd.	self fD: fd.	^fd.</body><body package="VRGoodies" selector="fontBuildorNil">fontBuildorNil| fd  fIndex fName |	(self pointSize) isNil ifTrue: [^nil].	(fIndex := self fontList selectionIndex) &lt;1 ifTrue: [^nil].	(self pointSizeList selectionIndex) &lt;1 ifTrue: [^nil].	fName := self fontList list at: fIndex.	fd := (FontDescription new family:  fName).	fd pixelSize: self pointSize asInteger.	self attributesEncodeIntoFont: fd.	self fD: fd.	^fd.</body><body package="VRGoodies" selector="fontList">fontList	"This method was generated by UIDefiner. The initialization provided 	below may have been preempted by an initialize method."	^fontList isNil ifTrue: [fontList := SelectionInList new] ifFalse: [fontList]</body><body package="VRGoodies" selector="fontList:">fontList: aValueModel	fontList := aValueModel</body><body package="VRGoodies" selector="fonts">fonts	^fonts</body><body package="VRGoodies" selector="fonts:">fonts: anArgument	fonts := anArgument.</body><body package="VRGoodies" selector="italicCBox">italicCBox	"This method was generated by UIDefiner. The initialization provided 	below may have been preempted by an initialize method."	^italicCBox isNil		ifTrue: [italicCBox := false asValue]		ifFalse: [italicCBox]</body><body package="VRGoodies" selector="name">name	^name</body><body package="VRGoodies" selector="name:">name: anArgument	name := anArgument.</body><body package="VRGoodies" selector="outlineCBox">outlineCBox	^outlineCBox isNil		ifTrue: [outlineCBox := false asValue]		ifFalse: [outlineCBox]</body><body package="VRGoodies" selector="pointSize">pointSize  | ix |	(ix := self pointSizeList selectionIndex) &lt; 1 ifTrue: [^nil].	^self pointSizes at: ix.</body><body package="VRGoodies" selector="pointSizeList">pointSizeList	"This method was generated by UIDefiner. The initialization provided 	below may have been preempted by an initialize method."	^pointSizeList isNil ifTrue: [pointSizeList := SelectionInList new] ifFalse: [pointSizeList]</body><body package="VRGoodies" selector="pointSizes">pointSizes	^self pointSizeList list</body><body package="VRGoodies" selector="pointSizes:">pointSizes: aSortedCollection	self pointSizeList list: aSortedCollection.</body><body package="VRGoodies" selector="portableStyles">portableStyles	^portableStyles</body><body package="VRGoodies" selector="portableStyles:">portableStyles: aStyleSymbol	portableStyles := aStyleSymbol</body><body package="VRGoodies" selector="reset">reset		"Th.16.Jun.94 cjm"	^self initialize</body><body package="VRGoodies" selector="shadowCBox">shadowCBox	^shadowCBox isNil		ifTrue: [shadowCBox := false asValue]		ifFalse: [shadowCBox]</body><body package="VRGoodies" selector="strikeThroughCBox">strikeThroughCBox	^strikeThroughCBox isNil		ifTrue: [strikeThroughCBox := false asValue]		ifFalse: [strikeThroughCBox]</body><body package="VRGoodies" selector="styleList">styleList	"This method was generated by UIDefiner. The initialization provided 	below may have been preempted by an initialize method."	^styleList isNil ifTrue: [styleList := SelectionInList new] ifFalse: [styleList]</body><body package="VRGoodies" selector="styleList:">styleList: aValueModel	styleList := aValueModel</body><body package="VRGoodies" selector="styleName">styleName	"This method was generated by UIDefiner. The initialization provided 	below may have been preempted by an initialize method."	^styleName isNil ifTrue: [styleName := String new asValue] ifFalse: [styleName]</body><body package="VRGoodies" selector="styles">styles	^styles</body><body package="VRGoodies" selector="styles:">styles: anArgument	styles := anArgument.</body><body package="VRGoodies" selector="text">text	^text</body><body package="VRGoodies" selector="text:">text: arg	text := arg.</body><body package="VRGoodies" selector="textSample">textSample	"This method was generated by UIDefiner. The initialization provided 	below may have been preempted by an initialize method."	^textSample isNil ifTrue: [textSample := String new asValue] ifFalse: [textSample]</body><body package="VRGoodies" selector="underlineCBox">underlineCBox	^underlineCBox isNil		ifTrue: [underlineCBox := false asValue]		ifFalse: [underlineCBox]</body></methods><methods><class-id>UI.FontTool</class-id> <category>processing</category><body package="VRGoodies" selector="addFont:">addFont:  aFamily	| entry |	entry := self fonts at: aFamily ifAbsent: [nil].	entry isNil		ifTrue: [self fonts at: aFamily put: SortedCollection new]</body><body package="VRGoodies" selector="addSize:for:">addSize: aSize for: family	| entry |	aSize == 0		ifFalse: [ entry := self fonts at: family ifAbsent: [nil].		entry isNil			ifTrue: [self fonts at: family put: (SortedCollection new add: aSize)]			ifFalse: [(entry includes: aSize) ifFalse: [ entry add: aSize]]]</body><body package="VRGoodies" selector="changedEmphasis">changedEmphasis	self attributesEncodeIntoFont: self fD.	self showSample.</body><body package="VRGoodies" selector="changedFont">changedFont	"Tu.05.Apr.94 cjm"| index |	index := self fontList selectionIndex value.	index &lt; 1		ifTrue: [^self noFontSelected]		ifFalse: [self setFontAtIndex: index. 			      self fontBuildnew]</body><body package="VRGoodies" selector="changedName">changedName	| nName |	nName := self styleName value.	[nName first =$ ] whileTrue: [nName := nName copyFrom:2 to: nName size].	nName size &lt;1 ifTrue: [^self].	[nName last =$ ] whileTrue: [nName := nName copyFrom:1 to: nName size -1].	self styleName setValue: nName.</body><body package="VRGoodies" selector="changedSize">changedSize	"Tu.05.Apr.94 cjm"	| index |	index := self pointSizeList selectionIndex value.	index &gt; 0 ifTrue: [		self fD pixelSize: (self pointSizes at: index).		self fontBuildnew.		self initSample. ].	self showSample.</body><body package="VRGoodies" selector="clearSample">clearSample	self text: ''.	self showSample.</body><body package="VRGoodies" selector="clearSizes">clearSizes	self pointSizes: #().</body><body package="VRGoodies" selector="decodeNameFrom:">decodeNameFrom: fNam2		"7 September 1994 rlp"| dPos pName |	(dPos := fNam2 indexOf: $~) = 0		ifTrue: [ dPos := fNam2 indexOf: $- ].	dPos = 0 ifTrue:[ self error: 'Unrecognized Family Name' ].	pName := fNam2 copyFrom: 1 to: dPos - 1.	^pName.</body><body package="VRGoodies" selector="factorName:">factorName: pName | ret pNlc parts stream done ret1 ret2 elm r2s r1s |	ret := Array with: nil with: nil.	pNlc := pName asLowercase.	parts := OrderedCollection new.	stream := ReadStream on: pNlc.	[ stream atEnd ] whileFalse: [ parts add: (stream upTo:$ ).].	done := false.  ret1 := ''.  ret2 := ''. r2s := ''. r1s :=''.	parts size to: 1 by: -1 do: 		[ :ix |			elm := parts at: ix.			done ifFalse:				[ (elm = 'bold' or: [elm = 'italic']) 					ifTrue: [  ret2 := elm , r2s, ret2.  r2s := ' '. ]					ifFalse: [ ret1 := elm, r1s, ret1.  r1s := ' '. done := true ]				]			  ifTrue: [ ret1 := elm, r1s, ret1.  r1s := ' '. ]		].	ret at: 1 put: ret1.   ret at: 2 put: ret2.	^ret</body><body package="VRGoodies" selector="noFontSelected">noFontSelected	self fontList selectionIndexHolder retractInterestsFor: self.	self clearSizes.	self clearSample.	self name: ''.	self fontList  selectionIndexHolder onChangeSend: #changedFont to: self.</body><body package="VRGoodies" selector="pointSizeIndexOf:">pointSizeIndexOf: pSize	| sIndex pSList pSArray |	(sIndex := (pSList := self  pointSizeList list) indexOf: pSize) &lt; 1 ifTrue:		[ (pSList isKindOf: OrderedCollection) ifFalse:			[ pSList := pSList asSortedCollection .].		  pSList add: pSize.		  sIndex := pSList  indexOf: pSize.		  self pointSizeList list: (pSArray := pSList asArray).		  self pointSizes: pSArray. ].	^sIndex.</body><body package="VRGoodies" selector="selectedStyle">selectedStyle	" Added 7 September 1994 by RLP"	(self styleList selection notNil)		ifTrue: [(self builder componentAt: #setDefault ) enable.				self styleEditAction]		ifFalse: [(self builder componentAt: #setDefault ) disable.				self styleName value: 'newStyle']</body><body package="VRGoodies" selector="setFontAtIndex:">setFontAtIndex: anIndex	| assn list sel |	assn := self fonts associationAt: (self fontList list at: anIndex).	self name: assn key.	list := assn value.	list isEmpty ifTrue: [list := (9 to: 40) collect: [:i | i ]].	sel := self pointSizeList selection.	self pointSizes: list.	self pointSizeList selection: sel.</body><body package="VRGoodies" selector="setSystemDefault">setSystemDefault	| newDefault |	Cursor wait showWhile: [	newDefault := self styleList selection value.	TextAttributes setDefaultTo: newDefault.	TextAttributes resetViews]</body><body package="VRGoodies" selector="showSample">showSample| currentFont dFQAttributes aCT stw pSize |  	showSample ifFalse: [^self].	currentFont := self fD copy.	(pSize := self pointSize) notNil ifTrue: [ currentFont  pixelSize: pSize ].	dFQAttributes := TextAttributes defaultFontQuery: currentFont.	aCT := ComposedText 			withText: ((Text fromString: self text)) 			style: dFQAttributes.	aCT gridWithLead: 2.	stw := self builder componentAt: #textSampleId.	self textSample value: aCT.	stw widget  displayContents: aCT.	stw widget invalidate</body><body package="VRGoodies" selector="showSampleOff">showSampleOff	showSample := false.</body><body package="VRGoodies" selector="showSampleOn">showSampleOn	showSample := true.</body><body package="VRGoodies" selector="styleEditAction">styleEditAction	"Th.16.Jun.94 cjm"| index aStyle style font pSize fNam2 font2 pName factName fIndex sIndex font1 pName2 |	(index := self styleList selectionIndex) &lt;1 ifTrue: [^self].	aStyle := self styleList list at: index.	style := TextAttributes styleNamed: aStyle value ifAbsent:[^self]. self class trace: 'edit style' with: ( style).	self fontBuildnew.	self showSampleOff.	self attributesClear.	(font1 := style characterAttributes defaultQueryFor: nil "aFontPolicy?") copy.  	font := (style defaultFontFor: Screen default defaultFontPolicy) copy.	  font boldness: font1 boldness.  font italic: font1 italic. 	  font underline: font1 underline. font1 strikeout: font1 strikeout. self class trace: 'edit font' with: ( font).	font2 := Screen default defaultFontPolicy findFont: font.	fNam2 := font2 name. self class trace: 'edit font2' with: (('named:',fNam2 asString) -&gt; font2).	pSize := font pixelSize.	self attributesDecodeFont: font1.	self styleName value: aStyle key.	self fD: font.  	pName := self decodeNameFrom: fNam2.	factName := self factorName: pName.	pName2  := factName at: 1.	(fIndex := self fontList list indexOf: pName2 asLowercase) &lt;1 ifTrue: [( Dialog confirm: 'Error: debug it?' )ifTrue: [ self halt] ifFalse: [self reset. ^nil]].	self setFontAtIndex: fIndex. 	self fontList selectionIndex: fIndex.	sIndex := self  pointSizeIndexOf: pSize. self class trace: 'edit font1' with: (('named:',pName2 asString) -&gt; font1).  self builder window sensor shiftDown ifTrue: [ self halt]. 	self pointSizeList selectionIndex: sIndex.	self attributesShowFont: font1.	self showSampleOn.	self showSample.</body><body package="VRGoodies" selector="styleRemove">styleRemove	"Tu.29.Mch.94 cjm"	"Remove textStyle, unless it's a system style"	| index aStyle styleSymbol  |	(index := self styleList selectionIndex) &lt;1 ifTrue: [^self].	aStyle := self styleList list at: index.	styleSymbol := aStyle value.	self systemStyles do: 		[:each | each == styleSymbol ifTrue: 			[ ^Dialog warn: 'Can''t remove system style!' ].].	(Dialog confirm: ('		Confirm removal of ', styleSymbol, '?\(It may not remove all references to the style!)') withCRs) ifFalse: [^self ].	TextAttributes removeStyleNamed: styleSymbol 		ifAbsent: [ ^Dialog warn: 'Couldn''t remove style!' ].	(self builder componentAt: #setDefault ) disable.	self initStyles.	self styleList list: self styles.	self initFonts.	self updateUsers.</body><body package="VRGoodies" selector="styleSaveAction">styleSaveAction | nName nSym cAt  tAt  fd isNew  |				(nName := self styleName value) size &lt;1 ifTrue: [^self].	nName := Dialog request: 'Name of new Style?' initialAnswer: nName.	nName isEmpty ifTrue: [^self].	self styleName value: nName.	nSym := nName asSymbol.	(fd := self fontBuildorNil) isNil ifTrue: [^self].	(self checkSaveSystem: nSym) isNil ifTrue: [^self]. self class trace: 'save-new-fD' with: fd.	self fD: fd.	self attributesEncodeIntoFont:fd.	cAt := CharacterAttributes newWithDefaultAttributes. self class trace: 'save-new-cAt' with: cAt.	cAt setDefaultQuery: fd.	(tAt := TextAttributes new) setCharacterAttributes: cAt. self class trace: 'save-new-tAt' with: (('named:',nSym asString) -&gt; tAt).	tAt gridForFont: nil withLead: 2.	isNew := false. 	TextAttributes styleNamed:nSym ifAbsent: [ isNew := true ].	TextAttributes styleNamed: nSym put: tAt. 	isNew ifTrue: [ self updateUsers ].	self initStyles.	self styleList list: self styles.	self styleList selection: nName-&gt;nSym.	(self builder componentAt: #setDefault ) enable.</body><body package="VRGoodies" selector="systemStyles">systemStyles	^#(large systemDefault fixed small default)</body><body package="VRGoodies" selector="updateUsers">updateUsers	"UISettings allInstances do:		[:each |	each updateMenu ]."</body></methods><methods><class-id>UI.FontTool</class-id> <category>initialize-release</category><body package="VRGoodies" selector="initFonts">initFonts	self fonts: Dictionary new.	(Screen default listFontNames collect:		[ :fn| Screen default preferredFontClass parse: fn ])	  do:		[ :ft | ft specifiesFamily ifTrue:			[ self addFont: ft family.			  ft specifiesPixelSize ifTrue:			  	[self addSize: ft pixelSize for: ft family. 		]	]	].	"self fonts associationsDo:		[ :assn | assn value size &lt;1 ifTrue: [ self fonts removeKey: assn key ]]."</body><body package="VRGoodies" selector="initialize">initialize	self text: ''.	self portableStyles:  #(#small #large #fixed #pixelSmall #pixelFixed #pixelDefault #pixelLarge #default #systemDefault).	self initStyles.	self styleList: (SelectionInList with: self styles).	self showSampleOn.	self initFonts.	self fontList: (SelectionInList with: self fonts keys asSortedCollection).	self fontList selectionIndexHolder onChangeSend: #changedFont to: self.	self pointSizeList  selectionIndexHolder onChangeSend: #changedSize to: self.	self styleName onChangeSend: #changedName to: self.	self boldCBox onChangeSend: #changedEmphasis to: self.	self italicCBox onChangeSend: #changedEmphasis to: self.	self strikeThroughCBox onChangeSend: #changedEmphasis to: self.	self underlineCBox onChangeSend: #changedEmphasis to: self.	"self colorCBox onChangeSend: #changedEmphasis to: self.	self outlineCBox onChangeSend: #changedEmphasis to: self.	self shadowCBox onChangeSend: #changedEmphasis to: self."</body><body package="VRGoodies" selector="initSample">initSample	"7 September 1994 rlp"	self text: 'abcdefghijklmnopqrstuvwxyz\' withCRs,	'ABCDEFGHIJKLMNOPQRSTUVWXYZ\' withCRs,	'0123456789	!@#$%^&amp;*()_+{}|:"&lt;&gt;?[]\;'',./     ' , ' - '.</body><body package="VRGoodies" selector="initStyles">initStyles	| given |	given := (TextAttributes styles collect: [:key | key asString -&gt; key ]).	self styles: (SortedCollection withAll: given sortBlock: [:a :b | a key &lt; b key]) .</body></methods><methods><class-id>UI.FontTool</class-id> <category>interface control</category><body package="VRGoodies" selector="postBuildWith:">postBuildWith: aBuilder	(aBuilder componentAt: #colorId) disable.	(aBuilder componentAt: #outlineId) disable.	(aBuilder componentAt: #shadowId) disable.</body></methods><methods><class-id>UI.FontTool</class-id> <category>testing</category><body package="VRGoodies" selector="checkSaveSystem:">checkSaveSystem: nSym	"return nil if nSym is one of system types and dialog confirms save"	(self portableStyles indexOf: nSym) &gt;0		ifTrue: [ (Dialog confirm: 'Do you realy want to redefine the system style: ',nSym asString  initialAnswer: false)				ifTrue: [ ^self ]  ifFalse: [^nil] ]		ifFalse: [^self].</body></methods><methods><class-id>UI.FontTool class</class-id> <category>tracing</category><body package="VRGoodies" selector="traceInit">traceInit	"FontTool traceInit"	Traces := nil.</body><body package="VRGoodies" selector="traceOff">traceOff	"FontTool traceOff"	TraceSwitch := nil.</body><body package="VRGoodies" selector="traceOn">traceOn	"FontTool traceOn"	TraceSwitch := true.</body><body package="VRGoodies" selector="traces">traces	"FontTool traces"	^Traces</body></methods><methods><class-id>UI.FontTool class</class-id> <category>As yet unclassified</category><body package="VRGoodies" selector="trace:with:">trace: aKey with: aValue	TraceSwitch isNil ifTrue: [ ^nil ].	Traces isNil ifTrue: [Traces := OrderedCollection new].	Traces add: ( aKey -&gt; aValue).</body></methods><methods><class-id>UI.VRFeelPolicy</class-id> <category>keyboard dispatch</category><body package="VRGoodies" selector="keyboardDispatchTable">keyboardDispatchTable	"Initialize the keyboard dispatch table."	super keyboardDispatchTable.	self keyboard bindValue: #againKey: to: #F3.	self keyboard bindValue: #acceptKey: to: #F5.	self keyboard bindValue: #doItKey: to: #F6.	self keyboard bindValue: #printItKey: to: #F7.	self keyboard bindValue: #inspectItKey: to: #F8.	"add some menu bindings"	self keyboard bindValue: #operateMenuKey: to: #F9.</body></methods><methods><class-id>UI.VRFeelPolicy class</class-id> <category>As yet unclassified</category><body package="VRGoodies" selector="menuName">menuName	^'VR Feel'</body></methods><methods><class-id>VRApps.AdHocQueryTool</class-id> <category>aspects</category><body package="VRGoodies" selector="hList">hList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^hList isNil		ifTrue:			[hList := SelectionInList new]		ifFalse:			[hList]</body><body package="VRGoodies" selector="hText">hText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^hText isNil		ifTrue:			[hText := String new asValue]		ifFalse:			[hText]</body></methods><methods><class-id>VRApps.AdHocQueryTool</class-id> <category>actions</category><body package="VRGoodies" selector="add">add	| text |	text := self hText value string.	self hList list add: text</body><body package="VRGoodies" selector="copySelected">copySelected	"This stub method was generated by UIDefiner"	self queryModel value: self hText value</body><body package="VRGoodies" selector="execute">execute	super execute.	(self hList list includes: self queryModel value)		ifFalse: [self hList list add: self queryModel value]</body><body package="VRGoodies" selector="executeAll">executeAll	self hList list isEmpty		ifTrue: [^self].	Cursor wait showWhile:  		[self hList list do: 			[:each | self queryModel value: each.					self execute]]</body><body package="VRGoodies" selector="history">history	| old |	old := self builder.	self openInterface: #historySpec.	self builder: old</body><body package="VRGoodies" selector="load">load	"This stub method was generated by UIDefiner"	| file bos |	file := Dialog requestFileName: 'Load History List From?'.	file isEmpty		ifTrue: [^self].	bos := BinaryObjectStorage onOld: file asFilename readStream.	self hList list: bos next.	bos close</body><body package="VRGoodies" selector="remove">remove	| sel |	sel := self hList selection.	sel isNil		ifTrue: [^self].	self hList list remove: sel</body><body package="VRGoodies" selector="save">save	"This stub method was generated by UIDefiner"	| file bos |	file := Dialog requestFileName: 'Save History List To?'.	file isEmpty		ifTrue: [^self].	bos := BinaryObjectStorage onNew: file asFilename writeStream.	bos nextPut: self hList list copy breakDependents.	bos close</body></methods><methods><class-id>VRApps.AdHocQueryTool</class-id> <category>initialize-release</category><body package="VRGoodies" selector="initialize">initialize	super initialize.	self hList list: HistoryList</body></methods><methods><class-id>VRApps.AdHocQueryTool</class-id> <category>events</category><body package="VRGoodies" selector="connectedStatusChanged">connectedStatusChanged	| connected |	super connectedStatusChanged.	connected := self connectedStatusHolder value.	(builder componentAt: #history) isEnabled: connected.</body><body package="VRGoodies" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow	aWindow label = 'History List'		ifTrue: [^self].	super noticeOfWindowClose: aWindow.	HistoryList := self hList list</body><body package="VRGoodies" selector="selectedItem">selectedItem	self hList selection isNil		ifTrue: [self hText value: '' asText]		ifFalse: [self hText value: self hList selection].</body></methods><methods><class-id>VRApps.AdHocQueryTool</class-id> <category>interface opening</category><body package="VRGoodies" selector="postOpenWith:">postOpenWith: aBuilder 	"This message is sent by the builder after it has opened a completed 	window."	aBuilder window label = 'History List'		ifTrue: [^self].	super postOpenWith: aBuilder</body></methods><methods><class-id>VRApps.AdHocQueryTool</class-id> <category>accessing</category><body package="VRGoodies" selector="hList:">hList: aValue	hList := aValue</body></methods><methods><class-id>VRApps.AdHocQueryTool class</class-id> <category>class initialization</category><body package="VRGoodies" selector="initialize">initialize	"VRApps.AdHocQueryTool initialize"	HistoryList := List new</body></methods><methods><class-id>VRGoodiesDescriptionReader</class-id> <category>initialize-release</category><body package="VRGoodies" selector="initialize">initialize	self otherList: List new.	self parcList: List new</body></methods><methods><class-id>VRGoodiesDescriptionReader</class-id> <category>accessing</category><body package="VRGoodies" selector="otherList">otherList	^otherList</body><body package="VRGoodies" selector="otherList:">otherList: aValue	otherList := aValue</body><body package="VRGoodies" selector="parcList">parcList	^parcList</body><body package="VRGoodies" selector="parcList:">parcList: aValue	parcList := aValue</body></methods><methods><class-id>VRGoodiesDescriptionReader</class-id> <category>private</category><body package="VRGoodies" selector="addEntryFrom:to:">addEntryFrom: string to: collection	| stream description |	stream := string readStream.	description := VRGoodiesDescription new.	description parcelName: (stream upTo: $=).	description parcelDescription: (stream upToEnd).	collection add: description</body><body package="VRGoodies" selector="addEntryFrom:to:using:">addEntryFrom: string to: collection using: pathString	| stream description |	stream := string readStream.	description := VRGoodiesDescription new.	description parcelName: (stream upTo: $=).	description parcelDescription: (stream upToEnd).	description parcelPath: pathString.	collection add: description</body><body package="VRGoodies" selector="demarcation">demarcation	^${</body></methods><methods><class-id>VRGoodiesDescriptionReader</class-id> <category>reading</category><body package="VRGoodies" selector="readFrom:into:using:">readFrom: aFile into: aCollection using: pathString	| file stream entry |	file := '$(VISUALWORKS)' asFilename construct: 'goodies'.	file := file construct: 'parc'.	file := file construct: 'VRGoodies'.	file := file construct: aFile.	stream := file readStream.	[[stream atEnd]		whileFalse: [entry := stream upTo: self demarcation.						entry isEmpty							ifFalse: [self addEntryFrom: entry to: aCollection using: pathString]]]		ensure: [stream close]</body><body package="VRGoodies" selector="readInDescriptions">readInDescriptions	self readFrom: 'parc.help' into: self parcList using: 'parc'.	self readFrom: 'other.help' into: self otherList using: 'other'.	self parcList sortWith: [:a :b | a parcelName &lt;= b parcelName].	self otherList sortWith: [:a :b | a parcelName &lt;= b parcelName].</body></methods><methods><class-id>FileToolBrowser</class-id> <category>actions</category><body package="VRGoodies" selector="copyTo">copyTo	"This stub method was generated by UIDefiner"	self execute: [| destination |				destination := Dialog request: 'Enter new name/directory' .				self model copyTo: destination]</body><body package="VRGoodies" selector="createDirectory">createDirectory	"ask for input, then create the directory"		self execute: [| name |			name := Dialog request: 'Enter new directory name: '.			name ~= ''				ifTrue: [self model createDirectory: name]]</body><body package="VRGoodies" selector="delete">delete	"This stub method was generated by UIDefiner"	self execute: [self model delete]</body><body package="VRGoodies" selector="edit">edit	"edit selected file if there is one, or a new one if none"	self fileList selection isNil		ifTrue: [self execute: [FileBrowser openPrompted]]		ifFalse: [self execute: [self model edit]]</body><body package="VRGoodies" selector="exit">exit	"quit the tool"	self closeRequest</body><body package="VRGoodies" selector="fileIn">fileIn	"File in the code.  In this case, do not raise an exception, as we may want to	intervene in a failed file in"	Cursor wait showWhile: [self model fileIn]</body><body package="VRGoodies" selector="moveTo">moveTo	"This stub method was generated by UIDefiner"	self execute: [| destination |				destination := Dialog request: 'Enter new name/directory' .				self model moveTo: destination]</body><body package="VRGoodies" selector="newFile">newFile	| fname |	fname := Dialog request: 'New File Name?' initialAnswer: 'test.txt'.	fname isEmpty ifTrue: [^self].	FileBrowser openOnFileNamed: fname</body><body package="VRGoodies" selector="parcelIn">parcelIn	"load from a parcel"	Cursor wait showWhile: [self model parcelIn]</body><body package="VRGoodies" selector="refresh">refresh	"refresh view"	self execute: [self model refresh]</body></methods><methods><class-id>FileToolBrowser</class-id> <category>aspects</category><body package="VRGoodies" selector="dirList">dirList	"This method was generated by UIDefiner. The initialization provided 	below may have been preempted by an initialize method."	^dirList isNil ifTrue: [dirList := SelectionInList with: self model dirList] ifFalse: [dirList]</body><body package="VRGoodies" selector="fileEntry">fileEntry	"This method was generated by UIDefiner. The initialization provided 	below may have been preempted by an initialize method."	^(AspectAdaptor subject: self model sendsUpdates: true) forAspect: #fileEntry</body><body package="VRGoodies" selector="fileList">fileList	"This method was generated by UIDefiner. The initialization provided 	below may have been preempted by an initialize method."	^fileList isNil ifTrue: [fileList := SelectionInList with: self model fileList] ifFalse: [fileList]</body><body package="VRGoodies" selector="fileSelection">fileSelection	"This method was generated by UIDefiner. The initialization provided 	below may have been preempted by an initialize method."	^(AspectAdaptor subject: self model sendsUpdates: true) forAspect: #fileSelection</body><body package="VRGoodies" selector="volume">volume	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^volume isNil		ifTrue:			[volume := nil asValue]		ifFalse:			[volume]</body><body package="VRGoodies" selector="volumeMenu">volumeMenu	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^volumeMenu isNil		ifTrue:			[volumeMenu := nil asValue]		ifFalse:			[volumeMenu]</body></methods><methods><class-id>FileToolBrowser</class-id> <category>accessing</category><body package="VRGoodies" selector="curVol">curVol	^curVol</body><body package="VRGoodies" selector="curVol:">curVol: aValue	curVol := aValue</body><body package="VRGoodies" selector="volCache">volCache	^volCache</body><body package="VRGoodies" selector="volCache:">volCache: aValue	volCache := aValue</body><body package="VRGoodies" selector="volumeMenu:">volumeMenu: aValue	volumeMenu := aValue</body></methods><methods><class-id>FileToolBrowser</class-id> <category>updating</category><body package="VRGoodies" selector="update:with:from:">update: anAspect with: aValue from: aModel	"if aspect is #curDir, then change window title.  else ignore."	anAspect == #curDir		ifTrue: [self window label: aValue]</body></methods><methods><class-id>FileToolBrowser</class-id> <category>interface opening</category><body package="VRGoodies" selector="postBuildWith:">postBuildWith: bldr	"install hotkeys"	super postBuildWith: bldr.	"set current volume"	self model hasVolumes		ifTrue: [self volume value: self curVol.				self volume onChangeSend: #changedVolume to: self]		ifFalse: [self removeVolumeInfo].	"label the window with the directory"	self window label: self model curDir asString</body><body package="VRGoodies" selector="postOpenWith:">postOpenWith: bldr	super postOpenWith: bldr.	self gatherMenuItems.</body></methods><methods><class-id>FileToolBrowser</class-id> <category>private</category><body package="VRGoodies" selector="execute:">execute: aBlock	"execute the block"	self execute: aBlock with: nil</body><body package="VRGoodies" selector="execute:with:">execute: aBlock with: aString	"execute with exception handling"	Cursor wait showWhile: [		Object errorSignal 			handle: [:ex | aString isNil 					ifTrue: [Dialog warn: '&lt;', ex errorString, '&gt;']					ifFalse: [Dialog warn: aString].					ex return]			do: [aBlock value]]</body><body package="VRGoodies" selector="getVolumes">getVolumes	"create the menu of volumes"	| volumes mb |	self volCache: Dictionary new.	volumes := Filename volumes.	mb := MenuBuilder new.	volumes do: [:each | mb add: each-&gt;(each).				self volCache at: each put: nil].	self volumeMenu value: mb menu.	self curVol: self model determineCurrentVolume.	self volCache at: self curVol put: self model curDir .</body><body package="VRGoodies" selector="removeVolumeInfo">removeVolumeInfo	self disableAll: #(#volumeMenu #newVolume:).	self beInvisibleAll: #(#volumeMenu #newVolume:)</body></methods><methods><class-id>FileToolBrowser</class-id> <category>changing</category><body package="VRGoodies" selector="changedDirSelection">changedDirSelection	"changed to a new directory"	self fileSelection value: self dirList selection.	self resetMenuForDir</body><body package="VRGoodies" selector="changedFileEntry">changedFileEntry	"data entered into file entry field changed"	Cursor wait showWhile: [			Filename errorReporter errorSignal				handle: [:ex | volChanging 								ifTrue: [ex reject]								ifFalse: [Dialog warn: ex errorString. ex return]]				do:	[self model handleDataEntry]]</body><body package="VRGoodies" selector="changedFileSelection">changedFileSelection	"changed to a new file"	self execute: [self model changeFile: self fileList selection].	self resetMenuForFile</body><body package="VRGoodies" selector="changedVolume">changedVolume	"volume chosen; toss choice into file entry"	| old |	volChanging := true.	Filename errorReporter errorSignal	handle: [:ex | Dialog warn: 'Volume not Ready'.				self volume value: self curVol.  ex return]	do: [" cache current location " 		self volCache at: self curVol put: self model curDir.		self curVol: self volume value.		" test for former location on this volume "		old := self volCache at: self volume value.		old isNil			ifTrue: [self fileEntry value: self volume value]			ifFalse: [self fileEntry value: old asString].		self changedFileEntry].	volChanging := false.</body><body package="VRGoodies" selector="doubleClickDirSelection">doubleClickDirSelection	"changed to a new directory"	self execute: [self model changeDir: self dirList selection.					self dirList selectionIndex: 0]</body></methods><methods><class-id>FileToolBrowser</class-id> <category>initialize-release</category><body package="VRGoodies" selector="initialize">initialize	"init connection to model"	super initialize.	self model: FileToolModel new.		" initialize the menu "	self model  hasVolumes		ifTrue: [self  getVolumes].	"add a dependency on the model so that the current dir may be displayed in the banner"	self model addDependent: self.</body></methods><methods><class-id>FileToolBrowser</class-id> <category>menus</category><body package="VRGoodies" selector="gatherMenuItems">gatherMenuItems	| menu items  |	menu := self getMenu.	items := OrderedCollection new.	items add: (menu menuItemWithValue: #copyTo).	items add: (menu menuItemWithValue: #moveTo).	items add: (menu menuItemWithValue: #delete).	dirItems := items.	items := OrderedCollection new.	items add: (menu menuItemWithValue: #parcelIn).	items add: (menu menuItemWithValue: #fileIn).	items add: (menu menuItemWithValue: #edit). 	fileItems := OrderedCollection new.	fileItems addAll: items</body><body package="VRGoodies" selector="getMenu">getMenu	| menu |	menu := self builder bindings at: #menuBar.	^(menu menuItemAt: 1) submenu</body><body package="VRGoodies" selector="resetMenuForDir">resetMenuForDir	| sel |	sel := self dirList selection.	sel isNil		ifTrue: [dirItems do: [:each | each disable]]		ifFalse: [dirItems do: [:each | each enable]]</body><body package="VRGoodies" selector="resetMenuForFile">resetMenuForFile	| sel |	self resetMenuForDir.	sel := self fileList selection.	sel isNil		ifTrue: [fileItems do: [:each | each disable]]		ifFalse: [fileItems do: [:each | each enable]]</body></methods><methods><class-id>FileTool</class-id> <category>actions</category><body package="VRGoodies" selector="accept">accept	"accept the file"	super accept value: true.	^self fileSelection value</body><body package="VRGoodies" selector="cancel">cancel	"cancel"	super cancel value: true.	^''</body></methods><methods><class-id>FileTool</class-id> <category>initialize-release</category><body package="VRGoodies" selector="initialize">initialize	"init connection to model"	super initialize.	self model: FileToolModel new.	self optimizeInterestIn: self fileList selectionIndexHolder		using: #changedFileSelection 		for: self.	self optimizeInterestIn: self dirList selectionIndexHolder		using: #changedDirSelection 		for: self.	self model addDependent: self.</body></methods><methods><class-id>FileTool</class-id> <category>updating</category><body package="VRGoodies" selector="update:with:from:">update: anAspect with: aValue from: aModel	"if  #fileEntry, change the label"	anAspect == #fileEntry		ifTrue: [self builder window label: self model curDir]</body></methods><methods><class-id>FileTool</class-id> <category>interface opening</category><body package="VRGoodies" selector="postBuildWith:">postBuildWith: bldr	"set window label"	super postBuildWith: bldr.	bldr window label: self model curDir</body></methods><methods><class-id>FileTool</class-id> <category>aspects</category><body package="VRGoodies" selector="curDir">curDir	^(AspectAdaptor subject: self model sendsUpdates: true) forAspect: #curDir</body><body package="VRGoodies" selector="dirList">dirList	"This method was generated by UIDefiner. The initialization provided 	below may have been preempted by an initialize method."	^dirList isNil ifTrue: [dirList := SelectionInList with: self model dirList] ifFalse: [dirList]</body><body package="VRGoodies" selector="fileEntry">fileEntry	"This method was generated by UIDefiner. The initialization provided 	below may have been preempted by an initialize method."	^(AspectAdaptor subject: self model sendsUpdates: true) forAspect: #fileEntry</body><body package="VRGoodies" selector="fileList">fileList	"This method was generated by UIDefiner. The initialization provided 	below may have been preempted by an initialize method."	^fileList isNil ifTrue: [fileList := SelectionInList with: self model fileList] ifFalse: [fileList]</body><body package="VRGoodies" selector="fileSelection">fileSelection	"This method was generated by UIDefiner. The initialization provided 	below may have been preempted by an initialize method."	^(AspectAdaptor subject: self model sendsUpdates: true) forAspect: #fileSelection</body></methods><methods><class-id>FileTool</class-id> <category>changing</category><body package="VRGoodies" selector="changedDirSelection">changedDirSelection	"changed to a new directory"	Filename errorReporter errorSignal 		handle: [:ex | Dialog warn:  ex errorString. ex return]		do: [Cursor wait showWhile: [self model changeDir: self dirList selection.						self dirList selectionIndex: 0]]</body><body package="VRGoodies" selector="changedFileSelection">changedFileSelection	"changed to a new file"	Filename errorReporter errorSignal 		handle: [:ex | Dialog warn: ex errorString. ex return]		do: [Cursor wait showWhile: [self model changeFile: self fileList selection]]</body></methods><methods><class-id>FileTool class</class-id> <category>interface opening</category><body package="VRGoodies" selector="open">open	"make sure to return selection"	| inst |	inst := self new.	inst open 		ifTrue: [^inst model curDir asString, inst fileSelection value]		ifFalse: [^'']</body></methods><methods><class-id>Database.DBCurrentDefinitionsUI</class-id> <category>aspects</category><body package="VRGoodies" selector="ifcList">ifcList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^ifcList isNil		ifTrue:			[ifcList := SelectionInList new]		ifFalse:			[ifcList]</body></methods><methods><class-id>Database.DBCurrentDefinitionsUI</class-id> <category>actions</category><body package="VRGoodies" selector="copyString">copyString	"This stub method was generated by UIDefiner"	| sel |	sel := self ifcList selection.	sel isNil		ifTrue: [^self].	ParagraphEditor currentSelection: sel dbLibsString.	self owner updateWith: sel dbLibsString</body></methods><methods><class-id>Database.DBCurrentDefinitionsUI</class-id> <category>interface opening</category><body package="VRGoodies" selector="openWith:">openWith: defs	self ifcList list: defs.	^self open</body></methods><methods><class-id>Database.DBCurrentDefinitionsUI class</class-id> <category>interface opening</category><body package="VRGoodies" selector="openOn:">openOn: defs	^self new openWith: defs</body></methods><methods><class-id>DatabaseImportTool</class-id> <category>accessing</category><body package="VRGoodies" selector="bossFileValue">bossFileValue	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^bossFileValue isNil		ifTrue:			[bossFileValue := String new asValue]		ifFalse:			[bossFileValue]</body><body package="VRGoodies" selector="dataModelValue">dataModelValue	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^dataModelValue isNil		ifTrue:			[dataModelValue := String new asValue]		ifFalse:			[dataModelValue]</body><body package="VRGoodies" selector="passwordValue">passwordValue	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^passwordValue isNil		ifTrue:			[passwordValue := String new asValue]		ifFalse:			[passwordValue]</body><body package="VRGoodies" selector="userValue">userValue	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^userValue isNil		ifTrue:			[userValue := String new asValue]		ifFalse:			[userValue]</body></methods><methods><class-id>DatabaseImportTool</class-id> <category>private</category><body package="VRGoodies" selector="getObjects">getObjects	"answer collection from boss file or nil"	| bos answer |	Filename errorReporter errorSignal		handle: [:ex | bos isNil ifFalse: [bos close].						answer := nil]		do: [bos := BinaryObjectStorage 				onOldNoScan: (self bossFileValue value asFilename readStream).			answer := bos next].	bos close.	^answer</body><body package="VRGoodies" selector="import:into:">import: aCollection into: aDataModel	"import the data"	aDataModel addAll: aCollection. 	aDataModel fail ifTrue: [^false].	^true</body></methods><methods><class-id>DatabaseImportTool</class-id> <category>actions</category><body package="VRGoodies" selector="dbLogin">dbLogin	"answer datamodel or nil"	dbModel := (Smalltalk at: self dataModelValue value) new.	dbModel login: self userValue value password: self passwordValue value.	dbModel fail ifTrue: [^nil].	^dbModel</body><body package="VRGoodies" selector="import">import	"import objects from the bossfile and insert into database"	|  objects |	self dbLogin isNil ifTrue: [^Dialog warn: 'Invalid login'].	objects := self getObjects.	objects isNil ifTrue: [^Dialog warn: 'Import from file failed'].	(self import: objects into: dbModel)		ifTrue: [Dialog warn: 'Succeeded']		ifFalse: [Dialog warn: 'Failed: &lt;', dbModel reason, '&gt;']</body></methods><methods><class-id>DatabaseImportTool</class-id> <category>interface control</category><body package="VRGoodies" selector="noticeOfWindowClose:">noticeOfWindowClose: aWindow	super noticeOfWindowClose: aWindow.	dbModel notNil ifTrue: [dbModel databaseLogout.							dbModel release.							dbModel := nil]</body></methods><methods><class-id>Database.DBInterfaceAdjustmentTool</class-id> <category>actions</category><body package="VRGoodies" selector="changeSelected">changeSelected	"This stub method was generated by UIDefiner"	| selections |	self trigger value: true.	selections := self interfaces selections.	selections isEmpty		ifTrue: [^self].	self model value changeLibraryFilesFor: selections.	self trigger value: false</body><body package="VRGoodies" selector="match">match	self trigger value: true.	self model value match.	self interfaces list: self model value interfaces.	self trigger value: false</body><body package="VRGoodies" selector="showCurrent">showCurrent	| selections currentDefs defApp |	selections := self interfaces selections.	selections isEmpty		ifTrue: [^self].	currentDefs := self model value getCurrentDefsFor: self interfaces selections.	defApp := DBCurrentDefinitionsUI new.	defApp owner: self.	defApp openWith: currentDefs.</body><body package="VRGoodies" selector="undo">undo	"This stub method was generated by UIDefiner"	(Dialog confirm: 'Undo Last Changes ?')		ifTrue: [self model value undo]</body></methods><methods><class-id>Database.DBInterfaceAdjustmentTool</class-id> <category>initialize-release</category><body package="VRGoodies" selector="initialize">initialize	"UIDefiner defined this method.	Do NOT modify this method; place custom code in &lt;initializeApplication&gt;"	super initialize.	self model: DBAdjustmentModel new asValue.	self trigger: false asValue.	self initializeAspects.	self initializeApplication.</body><body package="VRGoodies" selector="initializeApplication">initializeApplication	"UIDefiner defined this method.	UIDefiner will not recreate this method, so all custom initialization code should be placed here."</body><body package="VRGoodies" selector="initializeAspects">initializeAspects	"Preset all aspects.  UIDefiner will overwrite this method"		newLibString:= BufferedValueHolder subject: (	((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #newLibString))		triggerChannel: self trigger.		pattern:= BufferedValueHolder subject: (	((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #pattern))		triggerChannel: self trigger.		interfaces := MultiSelectionInList with: self model value interfaces.</body></methods><methods><class-id>Database.DBInterfaceAdjustmentTool</class-id> <category>accessing</category><body package="VRGoodies" selector="interfaces">interfaces	^interfaces</body><body package="VRGoodies" selector="model">model	^model</body><body package="VRGoodies" selector="model:">model: aValue	model := aValue</body><body package="VRGoodies" selector="newLibString">newLibString	^newLibString</body><body package="VRGoodies" selector="pattern">pattern	^pattern</body><body package="VRGoodies" selector="trigger">trigger	^trigger</body><body package="VRGoodies" selector="trigger:">trigger: aValue	trigger := aValue</body></methods><methods><class-id>Database.DBInterfaceAdjustmentTool</class-id> <category>private</category><body package="VRGoodies" selector="updateWith:">updateWith: aString	self newLibString value: aString</body></methods><methods><class-id>Database.DBInterfaceAdjustmentTool class</class-id> <category>accessing</category><body package="VRGoodies" selector="uiDomainModelName">uiDomainModelName	"UIDefiner defined this method.	This method is used internally by UIDefiner"	^Database.DBAdjustmentModel</body></methods><methods><class-id>UI.GenericErrorReporter</class-id> <category>accessing</category><body package="VRGoodies" selector="dumpToFile">dumpToFile	^dumpToFile</body><body package="VRGoodies" selector="dumpToFile:">dumpToFile: aValue	dumpToFile := aValue</body><body package="VRGoodies" selector="filename">filename	^filename</body><body package="VRGoodies" selector="filename:">filename: aValue	filename := aValue</body></methods><methods><class-id>UI.GenericErrorReporter</class-id> <category>private</category><body package="VRGoodies" selector="privateReportToFile:">privateReportToFile: aMessage	| stream |	[stream := self filename asFilename appendStream.	stream nextPutAll: aMessage.	stream cr.	stream close] valueNowOrOnUnwindDo: [stream notNil ifTrue: [stream close]]</body><body package="VRGoodies" selector="reportError:">reportError: anErrorMessage	self showVisual		ifTrue: [^self reportToVisual: anErrorMessage].	self dumpToFile		ifTrue: [^self reportToFile: anErrorMessage].	Transcript show: anErrorMessage; cr</body><body package="VRGoodies" selector="reportToFile:">reportToFile: aMessage	self sem critical: [self privateReportToFile: aMessage]</body><body package="VRGoodies" selector="reportToVisual:">reportToVisual: aMessage	Dialog warn: aMessage</body><body package="VRGoodies" selector="sem">sem	^Sem</body><body package="VRGoodies" selector="setErrorFile:">setErrorFile: aFilename	self filename: aFilename</body></methods><methods><class-id>UI.GenericErrorReporter</class-id> <category>api</category><body package="VRGoodies" selector="makeFileBased">makeFileBased	self dumpToFile: true</body><body package="VRGoodies" selector="makeVisual">makeVisual	self showVisual: true</body><body package="VRGoodies" selector="noFile">noFile	self dumpToFile: false</body><body package="VRGoodies" selector="noVisual">noVisual	self showVisual: false</body><body package="VRGoodies" selector="showVisual">showVisual	^showVisual</body><body package="VRGoodies" selector="showVisual:">showVisual: aValue	showVisual := aValue</body></methods><methods><class-id>UI.GenericErrorReporter</class-id> <category>initialize-release</category><body package="VRGoodies" selector="initialize">initialize	super initialize.	self showVisual: true.	self dumpToFile: false.	self filename: DefaultFileName</body></methods><methods><class-id>UI.GenericErrorReporter class</class-id> <category>As yet unclassified</category><body package="VRGoodies" selector="initialize">initialize	"GenericErrorReporter initialize"	Sem := Semaphore forMutualExclusion.	DefaultFileName := 'vwerror.log'</body></methods><methods><class-id>UI.DependencyWatcher</class-id> <category>overrides</category><body package="VRGoodies" selector="setReceiver:aspect:selector:">setReceiver: aReceiver aspect: anAspect selector: aSymbol		receiver := aReceiver.	aspect := anAspect.	selector := aSymbol.	numArguments := 0</body></methods><methods><class-id>VRGoodiesDescription</class-id> <category>accessing</category><body package="VRGoodies" selector="parcelDescription">parcelDescription	^parcelDescription</body><body package="VRGoodies" selector="parcelDescription:">parcelDescription: aValue	parcelDescription := aValue.	self changed: #parcelDescription</body><body package="VRGoodies" selector="parcelName">parcelName	^parcelName</body><body package="VRGoodies" selector="parcelName:">parcelName: aValue	parcelName := aValue.	self changed: #parcelName</body><body package="VRGoodies" selector="parcelPath">parcelPath	^parcelPath</body><body package="VRGoodies" selector="parcelPath:">parcelPath: aValue	parcelPath := aValue.	self changed: #parcelPath</body></methods><methods><class-id>VRGoodiesDescription</class-id> <category>printing</category><body package="VRGoodies" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' Name: ', self parcelName.</body></methods><methods><class-id>VRGoodiesDescription</class-id> <category>displaying</category><body package="VRGoodies" selector="displayString">displayString	| stream |	stream := FormattingStream on: (String new: 100).	stream nextPutAll: self parcelName width: 25.	stream nextPutAll: ' From: ', self parcelPath.	^stream contents</body></methods><methods><class-id>Database.DBSelectionsModel</class-id> <category>accessing</category><body package="VRGoodies" selector="dbClassName">dbClassName	^dbClassName</body><body package="VRGoodies" selector="dbClassName:">dbClassName: aValue	dbClassName := aValue.	self changed: #dbClassName</body><body package="VRGoodies" selector="dbLibsString">dbLibsString	^dbLibsString</body><body package="VRGoodies" selector="dbLibsString:">dbLibsString: aValue	dbLibsString := aValue.	self changed: #dbLibsString</body></methods><methods><class-id>Database.DBSelectionsModel</class-id> <category>displaying</category><body package="VRGoodies" selector="displayString">displayString	| stream |	stream := FormattingStream on: (String new: 40).	stream nextPutAll: self dbClassName width: 40.	stream nextPutAll: self dbLibsString.	^stream contents</body></methods><methods><class-id>Core.StringTransformer</class-id> <category>initialize-release</category><body package="VRGoodies" selector="initialize">initialize	"set defaults"	self position: 1.	self replacement: #(underline bold)</body><body package="VRGoodies" selector="initializeWith:with:">initializeWith: aString with: emphasis	"set my instance vars"	self string: aString.	self replacement: emphasis</body></methods><methods><class-id>Core.StringTransformer</class-id> <category>accessing</category><body package="VRGoodies" selector="defaultChar">defaultChar	^DefaultChar</body><body package="VRGoodies" selector="position">position	^position</body><body package="VRGoodies" selector="position:">position: aValue	position := aValue</body><body package="VRGoodies" selector="replacement">replacement	^replacement</body><body package="VRGoodies" selector="replacement:">replacement: aValue	"if initialized to nil, do not set"	aValue isNil		ifFalse: [replacement := aValue]</body><body package="VRGoodies" selector="string">string	^string</body><body package="VRGoodies" selector="string:">string: aValue	string := aValue</body></methods><methods><class-id>Core.StringTransformer</class-id> <category>transforming</category><body package="VRGoodies" selector="highlightString">highlightString	"answer a composed text with transformed character"	| aText  |	aText := self string asText allBold emphasizeFrom: self position 									to: self position 									with: self replacement.	^aText asComposedText</body><body package="VRGoodies" selector="transform">transform	"transform the string-answer a highlighted copy"	| pos |	pos := self string indexOf: self defaultChar.	pos ~= 0		ifTrue: [self position: pos].	self string: (self string copyWithout: self defaultChar).	^self highlightString</body><body package="VRGoodies" selector="transform:">transform: aString 	"replace inst vars, transform"	self string: aString.	^self transform</body><body package="VRGoodies" selector="transformFirst:">transformFirst: aChar	"transform the string-using first character found"	| pos tString tChar |	tChar := aChar asLowercase.	tString := self string asLowercase.	pos := tString indexOf: tChar.	pos ~= 0		ifTrue: [self position: pos].	^self highlightString</body></methods><methods><class-id>Core.StringTransformer class</class-id> <category>As yet unclassified</category><body package="VRGoodies" selector="from:">from: aString	"transform the input string"	^self from: aString with: nil</body><body package="VRGoodies" selector="from:with:">from: aString with: emphasis	"transform the input string"	| inst |	inst := self new.	inst initializeWith: aString with: emphasis.	^inst transform</body><body package="VRGoodies" selector="initialize">initialize	"StringTransformer initialize"	DefaultChar := $&amp;</body></methods><methods><class-id>VRGoodiesDescriptionTool</class-id> <category>aspects</category><body package="VRGoodies" selector="doc">doc	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^doc isNil		ifTrue:			[doc := String new asValue]		ifFalse:			[doc]</body><body package="VRGoodies" selector="parcelList">parcelList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^parcelList isNil		ifTrue:			[parcelList := SelectionInList new]		ifFalse:			[parcelList]</body></methods><methods><class-id>VRGoodiesDescriptionTool</class-id> <category>initialize-release</category><body package="VRGoodies" selector="initialize">initialize	| reader |	super initialize.	reader := VRGoodiesDescriptionReader new readInDescriptions.	reader parcList addAll: reader otherList.	self parcelList list: reader parcList</body></methods><methods><class-id>VRGoodiesDescriptionTool</class-id> <category>interface control</category><body package="VRGoodies" selector="postBuildWith:">postBuildWith: bldr	super postBuildWith: bldr.	self setTextFieldReadOnly: #doc</body><body package="VRGoodies" selector="setBasedOnSelection:">setBasedOnSelection: aDescription	| name parcelOrNil |	name := aDescription parcelName.	parcelOrNil := Parcel parcelNamed: name.	self doc value: aDescription parcelDescription.	parcelOrNil isNil		ifTrue: [self enable: #load.				self disable: #unload]		ifFalse: [self enable: #unload.				self disable: #load]</body><body package="VRGoodies" selector="setForNoSelection">setForNoSelection	self disableAll: #(load unload).	self doc value: ''</body></methods><methods><class-id>VRGoodiesDescriptionTool</class-id> <category>notification events</category><body package="VRGoodies" selector="changedParcelSelection">changedParcelSelection	"UIDefiner defined this method"	| sel |	sel := self parcelList selection.	sel isNil		ifTrue: [self setForNoSelection]		ifFalse: [self setBasedOnSelection: sel]</body></methods><methods><class-id>VRGoodiesDescriptionTool</class-id> <category>actions</category><body package="VRGoodies" selector="load">load	"This stub method was generated by UIDefiner"	| description path |	description := self parcelList selection.	path := (LogicalFilename named: '$(VISUALWORKS)') asFilename.	path := path construct: 'goodies'.	path := path construct: description parcelPath.	path := path construct: description parcelName, '.pcl'.	path exists		ifTrue: [Parcel loadParcelFrom: path asString.				self setBasedOnSelection: description]		ifFalse: [Dialog warn: 'Parcel is not directly in the ''parc'' or ''other'' directory; please set the parcel path and load using standard system tools'].</body><body package="VRGoodies" selector="unload">unload	"This stub method was generated by UIDefiner"	| description  |	Cursor wait showWhile: [		description := self parcelList selection.		Parcel removeParcelNamed: description parcelName.		self setBasedOnSelection: description]</body></methods><methods><class-id>UI.ParagraphEditor</class-id> <category>editing-functions</category><body package="VRGoodies" selector="againKey:">againKey: aCharEvent	"again event"	self again</body></methods><methods><class-id>UI.ParagraphEditor</class-id> <category>editing extensions</category><body package="VRGoodies" selector="doItKey:">doItKey: aCharEvent	"doIt event"	self doIt</body><body package="VRGoodies" selector="inspectItKey:">inspectItKey: aCharEvent	"printIt event"	self inspectIt</body></methods><methods><class-id>UI.ParagraphEditor</class-id> <category>As yet unclassified</category><body package="VRGoodies" selector="operateMenuKey:">operateMenuKey: aCharEvent	"pop the operate menu"	self yellowButtonActivity</body></methods><methods><class-id>UI.ParagraphEditor</class-id> <category>editing extensions</category><body package="VRGoodies" selector="printItKey:">printItKey: aCharEvent	"printIt event"	self printIt</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="VRGoodies" selector="openAdHocQuery">openAdHocQuery	| cl | 	cl := [#{VRApps.AdHocQueryTool} asQualifiedReference value]		on: Error		do: [:ex | AdHocQueryTool].	cl open		"self openApplicationForClassNamed: #{AdHocQueryTool}"</body><body package="VRGoodies" selector="openFileList">openFileList	self openApplicationForClassNamed: #{FileToolBrowser}</body></methods><methods><class-id>DevAdHocQueryTool class</class-id> <category>As yet unclassified</category><body package="VRGoodies" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Ad Hoc SQL' 			#min: #(#Point 458 317 ) 			#max: #(#Point 1152 900 ) 			#bounds: #(#Rectangle 43 111 501 428 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#ActionButtonSpec 					#layout: #(#Rectangle 4 6 88 36 ) 					#name: #connect 					#model: #connect 					#label: 'Connect' 					#isDefault: false ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 90 6 174 36 ) 					#name: #disconnect 					#flags: 40 					#model: #disconnect 					#label: 'Disconnect' ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 176 6 260 36 ) 					#name: #execute 					#flags: 40 					#model: #execute 					#label: 'Execute' ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 262 6 346 36 ) 					#name: #nextAnswer 					#flags: 40 					#model: #nextAnswer 					#label: 'Next Answer' ) 				#(#TextEditorSpec 					#layout: #(#LayoutFrame 2 0 73 0 0 1.00218 24 0.33 ) 					#name: #query 					#model: #queryModel ) 				#(#TableViewSpec 					#layout: #(#LayoutFrame 2 0 0 0.40604 0 1.00218 0 1.0 ) 					#model: #tableModel 					#showHGrid: true 					#showVGrid: true 					#selectionStyle: #row ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 374 4 458 34 ) 					#name: #generate 					#flags: 40 					#model: #generate 					#label: 'Generate...' ) 				#(#LabelSpec 					#layout: #(#Point 282 48 ) 					#name: #categoryLabel 					#label: 'Category' ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 339 45 457 69 ) 					#name: #category 					#model: #category 					#type: #string ) ) ) )</body></methods><methods><class-id>UI.FontDialog class</class-id> <category>As yet unclassified</category><body package="VRGoodies" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Font Selection' 			#min: #(#Point 298 192 ) 			#bounds: #(#Rectangle 221 187 519 379 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#MenuButtonSpec 					#layout: #(#LayoutFrame 0 0.281879 0 0.109375 0 0.966443 0 0.255208 ) 					#name: #fontMenu 					#model: #font 					#menu: #fontMenu ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0268456 0 0.130208 ) 					#name: #fontsId 					#label: 'Fonts' ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.0268456 0 0.734375 0 0.265101 0 0.963542 ) 					#name: #accept 					#model: #accept 					#label: 'Accept' 					#isDefault: true 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.728188 0 0.734375 0 0.966443 0 0.963542 ) 					#name: #cancel 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>UI.FontTool class</class-id> <category>As yet unclassified</category><body package="VRGoodies" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Text Style Editor Tool' 			#min: #(#Point 452 333 ) 			#bounds: #(#Rectangle 404 216 856 549 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.00987654 0 0 ) 					#label: 'Current Styles:' ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 0 0.00987654 0 0.0636364 0 0.340741 0 0.578788 ) 					#name: #styleListId 					#flags: 15 					#model: #styleList 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #selectedStyle ) 					#tabable: false ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.652655 0 0.00600601 -5 1 0 0.0690691 ) 					#name: #styleNameId 					#model: #styleName 					#tabable: false 					#alignment: #center ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 0 0.474074 0 0.718182 ) 					#name: #boldId 					#model: #boldCBox 					#tabable: true 					#label: 'bold' ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 0 0.474074 0 0.772727 ) 					#name: #italicId 					#model: #italicCBox 					#label: 'italic' ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 0 0.474074 0 0.827273 ) 					#name: #underlineId 					#model: #underlineCBox 					#label: 'underline' ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 0 0.474074 0 0.884848 ) 					#name: #strikeThroughId 					#model: #strikeThroughCBox 					#tabable: false 					#label: 'strike through' ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 0 0.00987654 0 0.627273 0 0.288889 0 0.99697 ) 					#name: #fontListId 					#flags: 15 					#model: #fontList ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 0 0.31358 0 0.627273 0 0.441975 0 0.99697 ) 					#name: #pointSizeId 					#model: #pointSizeList ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.306173 0 0.569697 ) 					#label: 'Point Sizes' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.00987654 0 0.569697 ) 					#label: 'Fonts:' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.451852 0 0.648485 ) 					#label: 'Text Attributes:' ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.375309 0 0.415151 0 0.632099 0 0.490909 ) 					#name: #styleSaveId 					#model: #styleSaveAction 					#label: 'Save Style...' 					#defaultable: true ) 				#(#TextEditorSpec 					#layout: #(#LayoutFrame 0 0.380247 0 0.0727273 0 0.990123 0 0.40303 ) 					#name: #textSampleId 					#flags: 15 					#model: #textSample ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.380247 0 0.00606061 ) 					#label: 'Sample Text for' ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 0 0.758025 0 0.739394 ) 					#name: #colorId 					#flags: 16 					#model: #colorCBox 					#label: 'color' ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 0 0.758025 0 0.884848 ) 					#name: #shadowId 					#flags: 16 					#model: #shadowCBox 					#label: 'shadow' ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 0 0.758025 0 0.812121 ) 					#name: #outlineId 					#flags: 16 					#model: #outlineCBox 					#label: 'outline' ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.659259 0 0.415151 0 0.916049 0 0.490909 ) 					#name: #styleRemoveId 					#model: #styleRemove 					#tabable: false 					#label: 'Remove Style...' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.501235 0 0.524242 0 0.804938 0 0.606061 ) 					#name: #setDefault 					#flags: 40 					#model: #setSystemDefault 					#label: 'Set as Default' 					#defaultable: true ) ) ) )</body><body package="VRGoodies" selector="windowSpecOld">windowSpecOld	"UIPainter new openOnClass: self andSelector: #windowSpecOld"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Text Style Editor Tool' 			#min: #(#Point 405 330 ) 			#max: #(#Point 405 330 ) 			#bounds: #(#Rectangle 203 142 608 472 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.679012 1 0 ) 					#label: 'Current Styles:' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.0246914 0 0.138973 0 0.353086 0 0.214502 ) 					#name: #styleNameId 					#model: #styleName ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0246914 0 0.0785498 ) 					#label: 'Editing style named:' ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 0 0.474074 0 0.718182 ) 					#name: #boldId 					#model: #boldCBox 					#tabable: true 					#label: 'bold' ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 0 0.474074 0 0.772727 ) 					#name: #italicId 					#model: #italicCBox 					#label: 'italic' ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 0 0.474074 0 0.827273 ) 					#name: #underlineId 					#model: #underlineCBox 					#label: 'underline' ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 0 0.474074 0 0.884848 ) 					#name: #strikeThroughId 					#model: #strikeThroughCBox 					#tabable: false 					#label: 'strike through' ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 0 0.0246914 0 0.628399 0 0.264198 0 0.987915 ) 					#name: #fontListId 					#flags: 15 					#model: #fontList ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 0 0.276543 0 0.628399 0 0.441975 0 0.984894 ) 					#name: #pointSizeId 					#model: #pointSizeList ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.276543 0 0.570997 ) 					#label: 'Point Sizes' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0246914 0 0.570997 ) 					#label: 'Fonts:' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.451852 0 0.648485 ) 					#label: 'Text Attributes:' ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.397531 0 0.229607 0 0.654321 0 0.305136 ) 					#name: #styleSaveId 					#model: #styleSaveAction 					#label: '&gt;&gt;Save Style&gt;&gt;' 					#defaultable: true ) 				#(#TextEditorSpec 					#layout: #(#LayoutFrame 0 0.0246914 0 0.314199 0 0.622222 0 0.55287 ) 					#name: #textSampleId 					#flags: 15 					#model: #textSample ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0246914 0 0.259819 ) 					#label: 'Sample Text:' ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 0 0.68642 0 0.0666667 0 0.977778 0 0.581818 ) 					#name: #styleListId 					#flags: 15 					#model: #styleList 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #selectedStyle ) 					#tabable: false ) 				#(#CheckBoxSpec 					#layout: #(#LayoutOrigin 0 0.758025 0 0.739394 ) 					#name: #colorId 					#model: #colorCBox 					#label: 'color' ) 				#(#CheckBoxSpec 					#layout: #(#Point 307 292 ) 					#name: #shadowId 					#model: #shadowCBox 					#label: 'shadow' ) 				#(#CheckBoxSpec 					#layout: #(#Point 307 268 ) 					#name: #outlineId 					#model: #outlineCBox 					#label: 'outline' ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 161 46 265 71 ) 					#name: #styleRemoveId 					#model: #styleRemove 					#tabable: false 					#label: 'Remove Style&gt;&gt;' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 161 16 265 43 ) 					#name: #styleEditId 					#model: #styleEditAction 					#tabable: false 					#label: '&lt;&lt;Edit Style&lt;&lt;' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.683951 0 0.587879 -5 1 0 0.669697 ) 					#name: #setDefault 					#flags: 40 					#model: #setSystemDefault 					#label: 'Set as Default' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>VRApps.AdHocQueryTool class</class-id> <category>interface specs</category><body package="VRGoodies" selector="historySpec">historySpec	"UIPainter new openOnClass: self andSelector: #historySpec" 	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'History List' 			#bounds: #(#{Graphics.Rectangle} 127 177 673 424 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.Rectangle} 0 3 260 205 ) 					#name: #hList 					#model: #hList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #selectedItem ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.Rectangle} 263 3 542 205 ) 					#name: #hText 					#model: #hText 					#tabRequiresControl: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 0 207 121 243 ) 					#name: #copySelected 					#model: #copySelected 					#label: 'Copy Selected' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 111 210 204 243 ) 					#name: #load 					#model: #load 					#label: 'Load...' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 198 210 291 243 ) 					#name: #save 					#model: #save 					#label: 'Save...' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 459 210 552 243 ) 					#name: #remove 					#model: #remove 					#label: 'Remove' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 372 210 465 243 ) 					#name: #add 					#model: #add 					#label: 'Add' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 285 210 378 243 ) 					#name: #executeAll 					#model: #executeAll 					#label: 'Execute All' 					#defaultable: true ) ) ) )</body><body package="VRGoodies" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #adHocSQL 				#defaultString: 'Ad Hoc SQL' ) 			#min: #(#{Core.Point} 458 317 ) 			#max: #(#{Core.Point} 1152 900 ) 			#bounds: #(#{Graphics.Rectangle} 171 142 676 459 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 10 5 90 35 ) 					#name: #connect 					#model: #connect 					#label: 					#(#{Kernel.UserMessage} 						#key: #connect1 						#defaultString: 'Connect' ) 					#isDefault: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 100 5 200 35 ) 					#name: #disconnect 					#flags: 40 					#model: #disconnect 					#label: 					#(#{Kernel.UserMessage} 						#key: #disconnect1 						#defaultString: 'Disconnect' ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 210 5 300 35 ) 					#name: #execute 					#flags: 40 					#model: #execute 					#label: 					#(#{Kernel.UserMessage} 						#key: #execute 						#defaultString: 'Execute' ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 310 5 400 35 ) 					#name: #nextAnswer 					#flags: 40 					#model: #nextAnswer 					#label: 					#(#{Kernel.UserMessage} 						#key: #nextAnswer1 						#defaultString: 'Next Answer' ) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 40 0 0 1 -3 0.33 ) 					#name: #query 					#model: #queryModel 					#tabRequiresControl: true ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.33 0 1 0 1 ) 					#model: #tableModel 					#showHGrid: true 					#showVGrid: true 					#selectionStyle: #row ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 407 2 503 38 ) 					#name: #history 					#flags: 40 					#model: #history 					#label: 'History' 					#isDefault: false 					#defaultable: true ) ) ) )</body></methods><methods><class-id>FileToolBrowser class</class-id> <category>interface specs</category><body package="VRGoodies" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'File Tool' 			#min: #(#{Core.Point} 50 50 ) 			#bounds: #(#{Graphics.Rectangle} 487 384 1024 715 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.0204842 0 0.166667 ) 					#name: #file 					#label: 'File Pattern:' 					#style: #default ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.273743 0 0.160256 0 0.979516 0 0.25 ) 					#name: #fileEntry 					#model: #fileEntry 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedFileEntry ) 					#helpText: 'Search Pattern' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0204842 0 0.291667 0 0.47486 0 0.746795 ) 					#name: #dirList 					#model: #dirList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedDirSelection 						#doubleClickSelector: #doubleClickDirSelection ) 					#helpText: 'Directory List' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.51306 0 0.290801 0 0.968284 0 0.747774 ) 					#name: #fileList 					#model: #fileList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedFileSelection 						#doubleClickSelector: #edit ) 					#helpText: 'File List' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.0205224 0 0.771513 ) 					#name: #currentSelection 					#label: 'Current Selection:' 					#style: #default ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.276119 0 0.762611 0 0.981343 0 0.83086 ) 					#name: #fileSelection 					#model: #fileSelection 					#tabable: false 					#helpText: 'Current' 					#isReadOnly: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0204842 0 0.883495 0 0.139665 0 0.980583 ) 					#name: #edit 					#model: #edit 					#helpText: 'Edit the File' 					#label: '&amp;Edit' 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.171322 0 0.883495 0 0.292365 0 0.980583 ) 					#name: #delete 					#model: #delete 					#helpText: 'Delete the File' 					#label: '&amp;Delete' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.86194 0 0.884273 0 0.981343 0 0.979228 ) 					#name: #exit 					#model: #exit 					#helpText: 'Quit' 					#label: 'E&amp;xit' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.324022 0 0.883495 0 0.445065 0 0.980583 ) 					#name: #parcelIn 					#model: #parcelIn 					#helpText: 'File in' 					#label: '&amp;Parcel In' 					#defaultable: true ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.273743 0 0.0128205 0 0.527002 0 0.102564 ) 					#name: #volumeMenu 					#model: #volume 					#helpText: 'Select a Volume' 					#menu: #volumeMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.0204842 0 0.0192308 ) 					#name: 					#newVolume: 					#label: 'Volume:' 					#style: #default ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.47486 0 0.883495 0 0.595903 0 0.980583 ) 					#name: #ActionButton1 					#model: #fileIn 					#helpText: 'File in' 					#label: '&amp;File In' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>FileToolBrowser class</class-id> <category>resources</category><body package="VRGoodies" selector="menuBar">menuBar	"MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;File' 				#nameKey: #file 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'New File...' 							#nameKey: #newFile 							#value: #newFile ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Edit' 							#enabled: false 							#value: #edit ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Copy To...' 							#enabled: false 							#value: #copyTo ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Move To...' 							#enabled: false 							#value: #moveTo ) 						#(#{UI.MenuItem} 							#rawLabel: 'Crea&amp;te Directory...' 							#value: #createDirectory ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Parcel In' 							#enabled: false 							#nameKey: #parcelIn 							#value: #parcelIn ) 						#(#{UI.MenuItem} 							#rawLabel: 'File &amp;In' 							#enabled: false 							#value: #fileIn ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Delete' 							#enabled: false 							#value: #delete ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Refresh' 							#value: #refresh ) 						#(#{UI.MenuItem} 							#rawLabel: 'E&amp;xit' 							#value: #exit ) ) #(4 3 1 1 1 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>FileTool class</class-id> <category>interface specs</category><body package="VRGoodies" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'File Tool' 			#min: #(#Point 50 50 ) 			#bounds: #(#Rectangle 32 86 569 417 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#Point 5 7 ) 					#name: #file 					#label: 'File Pattern:' 					#style: #default ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.264432 0 0.0241692 0 0.970205 0 0.0936556 ) 					#name: #fileEntry 					#model: #fileEntry ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 0 0.00931099 0 0.154079 0 0.424581 0 0.731118 ) 					#name: #dirList 					#model: #dirList ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 0 0.554935 0 0.154079 0 0.970205 0 0.731118 ) 					#name: #fileList 					#model: #fileList 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#doubleClickSelector: #accept ) ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.00931099 0 0.827795 0 0.175047 0 0.942598 ) 					#name: #accept 					#model: #accept 					#label: 'Accept' 					#isDefault: true 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.804469 0 0.827795 0 0.970205 0 0.942598 ) 					#name: #cancel 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.00931099 0 0.758308 ) 					#name: #currentSelection 					#label: 'Current Selection:' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.264432 0 0.746224 0 0.970205 0 0.821752 ) 					#name: #fileSelection 					#model: #fileSelection 					#tabable: false 					#isReadOnly: true ) ) ) )</body></methods><methods><class-id>Database.DBCurrentDefinitionsUI class</class-id> <category>interface specs</category><body package="VRGoodies" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Current Definitions' 			#bounds: #(#{Graphics.Rectangle} 112 156 608 379 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00403226 0 0.00896861 0 1.0 0 0.816143 ) 					#name: #ifcList 					#flags: 15 					#model: #ifcList 					#style: #fixed 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00403226 0 0.852018 0 0.413306 0 0.995516 ) 					#name: #copyString 					#model: #copyString 					#label: 'Copy Selected String' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>DatabaseImportTool class</class-id> <category>As yet unclassified</category><body package="VRGoodies" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Database Demo Tool' 			#bounds: #(#Rectangle 121 125 486 393 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0465753 0 0.0559702 ) 					#label: 'Datamodel Class' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0493151 0 0.246269 ) 					#name: #user 					#label: 'User' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0493151 0 0.429104 ) 					#name: #password 					#label: 'Password' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0493151 0 0.641791 ) 					#name: #bossFile 					#label: 'BOSS File' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.358904 0 0.0485075 0 0.835616 0 0.13806 ) 					#name: #dataModelValue 					#model: #dataModelValue 					#type: #symbol ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.358904 0 0.238806 0 0.835616 0 0.328358 ) 					#name: #userValue 					#model: #userValue ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.358904 0 0.421642 0 0.835616 0 0.511194 ) 					#name: #passwordValue 					#model: #passwordValue 					#type: #password ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.358904 0 0.634328 0 0.835616 0 0.723881 ) 					#name: #bossFileValue 					#model: #bossFileValue ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.0493151 0 0.783582 0 0.235616 0 0.958955 ) 					#name: #import 					#model: #import 					#label: 'Import' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.764384 0 0.783582 0 0.950685 0 0.958955 ) 					#name: #close 					#model: #closeRequest 					#label: 'Close' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Database.DBInterfaceAdjustmentTool class</class-id> <category>interface specs</category><body package="VRGoodies" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'DB Interface Adjustment Tool' 			#bounds: #(#{Graphics.Rectangle} 111 80 545 451 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00691244 0 0.183288 0 1.00461 0 0.725067 ) 					#name: #interfaces 					#model: #interfaces 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #checkMark ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.Rectangle} 3 3 41 24 ) 					#name: #patternLabel 					#label: 'Pattern' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.00691244 0 0.0808625 0 0.725806 0 0.15903 ) 					#name: #pattern 					#model: #pattern 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #match ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.Rectangle} 3 279 87 300 ) 					#name: #newLibraryFilesLabel 					#label: 'New Library Files' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.232719 0 0.743935 0 0.993087 0 0.816712 ) 					#name: #newLibString 					#model: #newLibString ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 0 0.913747 0 0.248848 0 0.997305 ) 					#name: #changeSelected 					#model: #changeSelected 					#label: 'Change Selected' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.290323 0 0.913747 0 0.532258 0 0.997305 ) 					#name: #undo 					#model: #undo 					#label: 'Undo' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.751152 0 0.913747 0 0.993087 0 0.997305 ) 					#name: #close 					#model: #closeRequest 					#label: 'Close' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.741935 0 0.0781671 0 0.983871 0 0.161725 ) 					#name: #match 					#model: #match 					#label: 'Match' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 3 0 0 0.822102 0 0.248848 0 0.90566 ) 					#name: #showCurrent 					#model: #showCurrent 					#label: 'Show Current' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>VRGoodiesDescriptionTool class</class-id> <category>interface specs</category><body package="VRGoodies" selector="windowSpec">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Parcel Documentation Tool' 			#bounds: #(#{Graphics.Rectangle} 61 97 776 517 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.0 0 0.148459 0 1.0 ) 							#name: #load 							#flags: 40 							#model: #load 							#label: '&amp;Load' 							#defaultable: true ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.159664 0 0.0 0 0.308123 0 1.0 ) 							#name: #unload 							#flags: 40 							#model: #unload 							#label: '&amp;Unload' 							#defaultable: true ) 						#(#{UI.ActionButtonSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.851541 0 0.0 0 1.0 0 1.0 ) 							#name: #exit 							#model: #closeRequest 							#label: 'E&amp;xit' 							#defaultable: true ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.Rectangle} 0 3 714 30 ) ) ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.133333 0 0.516084 0 0.985714 ) 					#name: #parcelList 					#flags: 15 					#model: #parcelList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #changedParcelSelection 						#doubleClickSelector: #load ) 					#style: #fixed 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.Rectangle} 0 32 39 53 ) 					#name: #parcelsLabel 					#label: 'Parcels' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.521678 0 0.133333 0 0.998601 0 0.985714 ) 					#name: #doc 					#model: #doc ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.Rectangle} 373 35 449 56 ) 					#name: #docLabel 					#label: 'Documentation' ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>db menu</category><body package="VRGoodies" selector="editInterfaceLibs">editInterfaceLibs	&lt;menuItem: '&amp;Edit Library Interfaces'		icon: nil		nameKey: nil		menu: #(#menuBar #database)		position: 10.01&gt;	Database.DBInterfaceAdjustmentTool open</body><body package="VRGoodies" selector="openFontTool">openFontTool	&lt;menuItem: '&amp;F&amp;ont Tool'		icon: nil		nameKey: nil		menu: #(#menuBar #tools)		position: 10.10&gt;	FontTool open</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>tool menu</category><body package="VRGoodies" selector="openGoodiesDescriptionTool">openGoodiesDescriptionTool	&lt;menuItem: '&amp;Goodies Descriptions'		icon: nil		nameKey: nil		menu: #(#menuBar #tools)		position: 10.11&gt;	VRGoodiesDescriptionTool open</body><body package="VRGoodies" selector="searchForStringInMethods">searchForStringInMethods	&lt;menuItem: 'Searc&amp;h Methods For Text...'		icon: nil		nameKey: nil		menu: #(#menuBar #tools)		position: 10.12&gt;	| string  |	string := Dialog request: 'What String do you wish to match ?'.	string isEmpty		ifTrue: [^self].	Cursor wait showWhile: [		(MethodCollector new methodsSelect: [:m | string match: m getSource])			browseSelect]</body></methods><initialize><class-id>FileToolModel</class-id></initialize><initialize><class-id>Core.ThreadSafeCollection</class-id></initialize><initialize><class-id>VRApps.AdHocQueryTool</class-id></initialize><initialize><class-id>UI.GenericErrorReporter</class-id></initialize><initialize><class-id>Core.StringTransformer</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>AdHocQueryTool</name><environment>Database</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>connection session answerStream queryModel tableModel whichDriverModel connectedStatusHolder executeStatusHolder moreAnswersStatusHolder profile blockFactorModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Tools</category><attributes><package>Database</package></attributes></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category><attributes><package>Interface-Dialogs</package></attributes></class><class><name>ExtendedObject</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Abstract-Models-Base</category><attributes><package>VRForms</package></attributes></class><class><name>JARApplicationModel</name><environment>UI</environment><super>UI.CommonApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model trigger dialogBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Abstract-Models-Base</category><attributes><package>VRForms</package></attributes></class><class><name>VRApplicationModel</name><environment>UI</environment><super>UI.ServiceApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>registry creationFlag shouldCache errorText enclosingFrameset selectorsEligibleFromHyperlinks customizationBlock customizationArgument </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Abstract-Models-VRDB</category><attributes><package>VRForms</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>ExtendedModel</name><environment>Core</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Abstract-Models-Base</category><attributes><package>VRForms</package></attributes></class><class><name>ParagraphEditor</name><environment>UI</environment><super>UI.ControllerWithMenu</super><private>false</private><indexed-type>none</indexed-type><inst-vars>beginTypeInIndex anchorIndex emphasisHere dispatchTable charComposer textHasChanged feelPolicy supportCodeEditingFeels localMenuItems extendingDown </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>UIBasics-Support</category><attributes><package>UIBasics-Support</package></attributes></class><class><name>UIFeelPolicy</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>altKeys keyboard metaKeys supportsCodeEditing </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>UIBuilder-Support</category><attributes><package>UIBuilder-Support</package></attributes></class><class><name>Document</name><environment>Graphics</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>entities currentMargins </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Printing</category><attributes><package>System-Printing</package></attributes></class><class><name>DependencyTransformer</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>receiver selector numArguments aspect suspended </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Models</category><attributes><package>Interface-Models</package></attributes></class><class><name>VRDetailForm</name><environment>UI</environment><super>UI.VRDBApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>editMode parent owner windowLabel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Form-Deployment</category><attributes><package>VRForms</package></attributes></class></st-source>