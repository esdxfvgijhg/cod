<?xml version="1.0"?><st-source><!-- Name: VRUIPainterNotice: Copyright © 2002 Cincom Systems, Inc.  All Rights Reserved.Comment: This package contains the VR UI Building extension tools.  These split into two areas - the form builder, which helps build a simple form from a selected domain model, and the UIDefiner hacks, which auto-generates aspect adaptors and/or buffered value holders.  It also makes the definer spit out methods for notification and validation routines, something it does not do by defaultDevelopmentPrerequisites: #(#(#any 'BOSS' '') #(#any 'VRUIPainterPreReq2' '') #(#any 'VRForms' ''))PackageName: VRUIPainterParcel: #('VRUIPainter')ParcelName: VRUIPainterPrerequisiteParcels: #(#('BOSS' '') #('VRUIPainterPreReq2' '') #('VRForms' ''))Version: 7Date: 10:22:53 AM November 19, 2015 --><time-stamp>From VisualWorks®, 8.1 of July 17, 2015 on November 19, 2015 at 10:22:53 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>VRFormModel</name><environment>UI</environment><super>Core.ExtendedModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>canvasClassName canvasSpecName category format ifc isTabular shouldUseFramework type genVariableList variableList domainModel spec selectList aspect select nameSpace </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Form-New</category><attributes><package>VRUIPainter</package></attributes></class><comment><class-id>UI.VRFormModel</class-id><body>This is the domain model behind VRFormGeneratorInstance Variablesifc &lt;Class&gt; The interface class being worked oncanvasSpecName &lt;Symbol&gt; defaults to #windowSpectype &lt;Symbol&gt; the 'type' as understood by the UIPainter toolscanvasClassName &lt;Symbol&gt; New class namegenVariableList &lt;Collection&gt; Collection of aspects to be generatedformat &lt;Symbol&gt; The format as understood by the UIPainter tools for the current aspectcategory &lt;String&gt; category for the new class (Browser)variableList &lt;Collection&gt; Collection of all variables in the domain model isTabular &lt;Boolean&gt; If true, use VRTableForm and generate a tabular UIdomainModel &lt;Class&gt; The domain model classselectList &lt;Collection&gt; Collection of aspects actually chosen for modelingselect &lt;String&gt; Current selection in selectListaspect &lt;Symbol&gt; The current aspectnameSpace &lt;NameSpace&gt; Namespace to generate in</body></comment><class><name>VRFormSettingsModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>current explanation setting settingsDict </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Form-New</category><attributes><package>VRUIPainter</package></attributes></class><comment><class-id>UI.VRFormSettingsModel</class-id><body>This class holds settings being used by the VR Form tools.  They are saved to a shared variable in VRFormSpecGenerator.Instance Variablescurrent &lt;Symbol&gt; Current setting being worked onexplanation &lt;String&gt; Explanation of what setting controlssetting &lt;Association&gt; The key/value pair of the current settingsettinsDict &lt;Dictionary&gt; The current settings dictionary</body></comment><class><name>VRStubLabel</name><environment>UI</environment><super>Core.ExtendedModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name model </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Form-New</category><attributes><package>VRUIPainter</package></attributes></class><comment><class-id>UI.VRStubLabel</class-id><body>This class is used by the VRForm tools to hold labels.  For many of the generated objects (Input Fields, for instance) it is useful to have anassociated label.  This object is a transient holder of such objects inserted into the chain of VRFormSpecObjectsInstance Variables:	name	&lt;Symbol&gt;	The ID of the label	model	&lt;Symbol&gt;	the ID of the label.  </body></comment><class><name>VRCodeGeneratorModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetClass protocol isMeta </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Form-New</category><attributes><package>VRUIPainter</package></attributes></class><comment><class-id>UI.VRCodeGeneratorModel</class-id><body>This class serves as a front end abstracting away the compiler.Instance Variables:	targetClass	&lt;Class&gt;	Class to be targeted for code generation	protocol	&lt;String&gt;	 Protocol category for new methods	isMeta	&lt;Boolean&gt;	If true, generate class methods</body></comment><class><name>VRFormGenerator</name><environment>UI</environment><super>UI.VRDetailForm</super><private>false</private><indexed-type>none</indexed-type><inst-vars>shouldUseFramework ifc canvasSpecName type canvasClassName genVariableList format category variableList isTabular formatMenu formatDict domainModel selectList select aspect editingControls curControl nameSpace nameSpaceMenu </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Form-New</category><attributes><package>VRUIPainter</package></attributes></class><comment><class-id>UI.VRFormGenerator</class-id><body>This class is the front end for the VR GUI generator.  It is not a 'complete' generator; it assumes that the developer will want to use the painter to finish laying out the GUI.  Still, it does a reasonable job of creating widgets based on user input.  It can handle most of the 'common' UI widgets, and is especially useful for creating simple forms quickly.Generally, this tool is summoned from the browser as a way of generating a UI for an existing domain model; it lists all domain model variables as possible UI aspects.  Instance VariablesshouldUseFramework &lt;Boolean&gt; if true, descend new class from VRDetailFormifc &lt;Class&gt; New classcanvasSpecName &lt;Symbol&gt; defaults to #windowSpectype &lt;Symbol&gt; the 'type' as understood by the UIPainter toolscanvasClassName &lt;Symbol&gt; New class namegenVariableList &lt;Collection&gt; Collection of aspects to be generatedformat &lt;Symbol&gt; The format as understood by the UIPainter tools for the current aspectcategory &lt;String&gt; category for the new class (Browser)variableList &lt;Collection&gt; Collection of all variables in the domain model isTabular &lt;Boolean&gt; If true, use VRTableForm and generate a tabular UIformatMenu &lt;Menu&gt; menu showing all possible formats based on UI typeformatDict &lt;Dictionary&gt; Dictionary of all possible menus for formatsdomainModel &lt;Class&gt; The domain model classselectList &lt;Collection&gt; Collection of aspects actually chosen for modelingselect &lt;String&gt; Current selection in selectListaspect &lt;Symbol&gt; The current aspecteditingControls &lt;Collection&gt; All the possible control typescurControl &lt;Symbol&gt; Control to use for current selectionnameSpace &lt;NameSpace&gt; Namespace to generate innameSpaceMenu &lt;Menu&gt; Menu of all possible Namespaces</body></comment><class><name>VRFormWindowSpec</name><environment>UI</environment><super>Core.ExtendedModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>spec specCollection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Form-New</category><attributes><package>VRUIPainter</package></attributes></class><comment><class-id>UI.VRFormWindowSpec</class-id><body>This class is the high level holder of spec objects for the VRForm Tools.  It holds instances of VRFormSpecObjects, for later use in creating specs for an interfaceInstance Variablesspec &lt;VRFormSpecObject&gt; The spec being worked onspecCollection &lt;Collection&gt; All specs held for this interface</body></comment><class><name>AccessorDefiner</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>generator instVarNameList classVarNameList targetClass iVars isModel classInstVars </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Development</category><attributes><package>VRUIPainter</package></attributes></class><comment><class-id>UI.AccessorDefiner</class-id><body>This class may be used to programmatically generate accessing methods for instance or Shared variables.  It will either generate all or a subset based on how it is used.Instance Variablesgenerator &lt;Class&gt; The class used to interface with the compilerinstVarNameList  &lt;Collection&gt; Collection of variables to generate accessors forclassVarNameList &lt;Collection&gt; Collection of Shared Variables to generate accessors fortargetClass &lt;Symbol&gt; The name of the class to generate  foriVars &lt;Collection&gt; All instance variables of target.  Used to sanity check generationisModel  &lt;Boolean&gt; If true, have dependency updates sent.  classInstVars &lt;Collection&gt; Collection of class instance variables to generate accessors for</body></comment><class><name>VRFormSpecGenerator</name><environment>UI</environment><super>Core.ExtendedModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>windowClass windowCategory windowSpecName windowSpec ifcIsTabular codeGen useFramework curX curY nameSpace </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Form-New</category><attributes><package>VRUIPainter</package></attributes></class><comment><class-id>UI.VRFormSpecGenerator</class-id><body>This class holds the values that will be used to create a spec object when the VRFormGenerator actually generates a windowSpec and an associated class.  It is private to the VR Form toolsInstance VariableswindowClass &lt;Symbol&gt; Name of the class to be generatedwindowCategory &lt;String&gt; System category to generate the spec intowindowSpecName &lt;Symbol&gt; Name of the windowSpec to createwindowSpec &lt;WindowSpec&gt; The nascent spec to be filled inifcIsTabular &lt;Boolean&gt; If true, settings will be used to create a tabular displaycodeGen &lt;VRFormGenerator&gt; The code generator object to usecurX &lt;Number&gt; When assigning layout values for spec objects, tracks current X valuecurY &lt;Number&gt; When assigning layout values for spec objects, tracks current Y valuenameSpace &lt;NameSpace&gt; The namespace to generate the class into</body></comment><class><name>VRFormSpecObject</name><environment>UI</environment><super>Core.ExtendedModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name spec isCurrent specType specDataType menuSelects </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Form-New</category><attributes><package>VRUIPainter</package></attributes></class><comment><class-id>UI.VRFormSpecObject</class-id><body>This is the class used by the VRForm Tools to hold spec objects before they are reified into actual specs upon generation.   It is internal to VRFormSpecGeneratorInstance Variablesname &lt;Symbol&gt; The id for the spec in questionspec &lt;WidgetSpec&gt; The actual spec objectisCurrent &lt;Boolean&gt; If true, this spec object is being editedspecType &lt;Symbol&gt; The type of the spec being worked onspecDataType &lt;Symbol&gt; The type of spec from the perspective of the paintermenuSelects &lt;Menu&gt; Menu for editing</body></comment><class><name>VRNameSpaceTool</name><environment>UI</environment><super>Core.ExtendedModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>allAvailableNameSpaces selectedNameSpace </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Form-New</category><attributes><package>VRUIPainter</package></attributes></class><comment><class-id>UI.VRNameSpaceTool</class-id><body>This class is part of the VR Form tools.  It hands back to the tools the available namespaces, isolating that code from the tools.Instance Variables:	allAvailableNameSpaces	&lt;Collection&gt;	 All available	selectedNameSpace	&lt;NameSpace&gt;	The one selected</body></comment><class><name>VRFormSettingsTool</name><environment>UI</environment><super>UI.VRDetailForm</super><private>false</private><indexed-type>none</indexed-type><inst-vars>setting current explanation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Form-New</category><attributes><package>VRUIPainter</package></attributes></class><comment><class-id>UI.VRFormSettingsTool</class-id><body>This is the UI Tool used for editing the current VR Form settings.  VRFormSettingsModel is the domain model.  This tool is summoned from VRFormGenerator.Instance Variablessetting &lt;Association&gt; The current settingcurrent &lt;Symbol&gt; The key for the current settingexplanation &lt;String&gt; explanation fo what the current setting is</body></comment><shared-variable><name>VRSettings</name><environment>UI.VRFormSpecGenerator</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>VRUIPainter</package></attributes></shared-variable><methods><class-id>UI.VRFormModel</class-id> <category>accessing</category><body package="VRUIPainter">aspect	^aspect</body><body package="VRUIPainter">aspect: aValue	aspect := aValue.	self changed: #aspect</body><body package="VRUIPainter">canvasClassName	^canvasClassName</body><body package="VRUIPainter">canvasClassName: aValue	canvasClassName := aValue.	self changed: #canvasClassName</body><body package="VRUIPainter">canvasSpecName	^canvasSpecName</body><body package="VRUIPainter">canvasSpecName: aValue	canvasSpecName := aValue.	self changed: #canvasSpecName</body><body package="VRUIPainter">category	^category</body><body package="VRUIPainter">category: aValue	category := aValue.	self changed: #category</body><body package="VRUIPainter">domainModel	^domainModel</body><body package="VRUIPainter">domainModel: aValue	domainModel := aValue.	self changed: #domainModel</body><body package="VRUIPainter">format	^format</body><body package="VRUIPainter">format: aValue	format := aValue.	self changed: #format</body><body package="VRUIPainter">genVariableList	^genVariableList</body><body package="VRUIPainter">genVariableList: aValue	genVariableList := aValue.	self changed: #genVariableList</body><body package="VRUIPainter">ifc	^ifc</body><body package="VRUIPainter">ifc: aValue	ifc := aValue.	self changed: #ifc</body><body package="VRUIPainter">isTabular	^isTabular</body><body package="VRUIPainter">isTabular: aValue	isTabular := aValue.	self changed: #isTabular</body><body package="VRUIPainter">nameSpace	nameSpace isNil		ifTrue: [self nameSpace: Smalltalk].	^nameSpace</body><body package="VRUIPainter">nameSpace: aValue	nameSpace := aValue.	self changed: #nameSpace</body><body package="VRUIPainter">select	^select</body><body package="VRUIPainter">select: aValue	select := aValue.	self changed: #select</body><body package="VRUIPainter">selectList	^selectList</body><body package="VRUIPainter">shouldUseFramework	^shouldUseFramework</body><body package="VRUIPainter">shouldUseFramework: aValue	shouldUseFramework := aValue.	self changed: #shouldUseFramework</body><body package="VRUIPainter">spec	^spec</body><body package="VRUIPainter">spec: aValue	spec := aValue</body><body package="VRUIPainter">take: selections	self variableList removeAll: selections.	self genVariableList addAll: selections.	self spec add: selections</body><body package="VRUIPainter">type	^type</body><body package="VRUIPainter">variableList	^variableList</body><body package="VRUIPainter">variableList: aValue	variableList := aValue.	self changed: #variableList</body></methods><methods><class-id>UI.VRFormModel</class-id> <category>api</category><body package="VRUIPainter">addSelect: aSelection	(self selectList includes: aSelection)		ifTrue: [^self].	self selectList add: aSelection</body><body package="VRUIPainter">checkForExisting: controlType	| match   |	match := self spec specCollection detect: [:each | each name = self aspect] ifNone: [nil].	match specType = controlType		ifTrue: [| selects |				controlType == #radio					ifTrue: [selects := match spec collect: [:each | each select]]					ifFalse: [selects := match menuSelects].				self selectList removeAllSuchThat: [:each | true].				self selectList addAll: selects]</body><body package="VRUIPainter">generate	"actually generate the window spec"	| generator |	generator := VRFormSpecGenerator new.	generator windowClass: self ifc.	generator windowCategory: self category.	generator windowSpec: self spec.	generator useFramework: self shouldUseFramework.	generator ifcIsTabular: self isTabular.	generator nameSpace: self nameSpace.	generator generate</body><body package="VRUIPainter">handleNewDomainModel	| newModelClass | 	self genVariableList removeAllSuchThat: [:each | true].	self variableList removeAllSuchThat: [:each | true].	newModelClass := self domainModel.	newModelClass isNil		ifTrue: [^false].	self variableList addAll: newModelClass allInstVarNames.	self spec createFrom: self variableList.	self ifc: (self domainModel name, 'Form') asSymbol.	self category: self domainModel name, '-UI'.	^true</body><body package="VRUIPainter">leave: selection	self genVariableList remove: selection.	self variableList add: selection.	self spec remove: selection</body><body package="VRUIPainter">removeSelect: aSelection	aSelection isNil		ifTrue: [^self].	self selectList remove: aSelection ifAbsent: [nil]</body><body package="VRUIPainter">resetSpecInfoFor: anAspect 	self type: (self spec typeInfoFor: anAspect). 	self format: (self spec formatInfoFor: anAspect).</body><body package="VRUIPainter">saveCanvasInfo: anAspect	"save subcanvas spec info"	self spec		saveCanvasInfoFor: anAspect asSymbol		className: self canvasClassName		specName: self canvasSpecName</body><body package="VRUIPainter">saveMenuInfo	"save the menu information"	self spec		saveMenuInfoFor: self aspect		selects: self selectList.	self selectList removeAllSuchThat: [:each | true].</body><body package="VRUIPainter">saveRadioInfo	"save the radio information"	self spec		saveRadioInfoFor: self aspect		selects: self selectList.	self selectList removeAllSuchThat: [:each | true]</body><body package="VRUIPainter">selectList: aValue	selectList := aValue.	self changed: #selectList</body><body package="VRUIPainter">type: aValue	type := aValue.	self changed: #type</body><body package="VRUIPainter">updateSpecFor: anAspect	"update type, format (and possibly spec type) based on change"	self spec 		newInfoFor: anAspect asSymbol		type: self type		format: self format</body><body package="VRUIPainter">weedOutNonSelectedAspects	"take out aspects left behind"	self spec specCollection do: [:each |		(self variableList includes: each name asString)			ifTrue: [each isCurrent: false]]</body></methods><methods><class-id>UI.VRFormModel</class-id> <category>private</category><body package="VRUIPainter">getSelectMessageFor: controlType	controlType == #radio		ifTrue: [^#select]		ifFalse: [^#menuSelects]</body></methods><methods><class-id>UI.VRFormModel</class-id> <category>initialize-release</category><body package="VRUIPainter">initialize	"This is an auto-generated initialize method.  It should be updated"	self genVariableList: List new.	self selectList: List new.	self domainModel: nil.	self variableList: List new.	self canvasClassName: nil.	self canvasSpecName: nil.	self category: ''.	self format: nil.	self ifc: ''.	self isTabular: false.	self shouldUseFramework: true.	self type: #string.	self spec: VRFormWindowSpec new</body></methods><methods><class-id>UI.VRFormSettingsModel</class-id> <category>accessing</category><body package="VRUIPainter">current	^current</body><body package="VRUIPainter">current: aValue	current := aValue.	self changed: #current</body><body package="VRUIPainter">explanation	^explanation</body><body package="VRUIPainter">explanation: aValue	explanation := aValue.	self changed: #explanation</body><body package="VRUIPainter">inputHeight	^self settingsDict at: #inputHeight</body><body package="VRUIPainter">inputWidth	^self settingsDict at: #inputWidth</body><body package="VRUIPainter">labelSeparation	^self settingsDict at: #labelSeparation</body><body package="VRUIPainter">rectangleHeight	^self settingsDict at: #rectangleHeight</body><body package="VRUIPainter">rectangleWidth	^self settingsDict at: #rectangleWidth</body><body package="VRUIPainter">setting	^setting</body><body package="VRUIPainter">setting: aValue	setting := aValue.	self changed: #setting</body><body package="VRUIPainter">settingsDict	^settingsDict</body><body package="VRUIPainter">settingsDict: aValue	settingsDict := aValue</body><body package="VRUIPainter">widgetSeparation	^self settingsDict at: #widgetSeparation</body><body package="VRUIPainter">widgetXStart	^self settingsDict at: #widgetXStart</body></methods><methods><class-id>UI.VRFormSettingsModel</class-id> <category>private</category><body package="VRUIPainter">cacheSettings	self settingsDict: VRFormSpecGenerator settings.	self current: self inputWidth</body></methods><methods><class-id>UI.VRFormSettingsModel</class-id> <category>api</category><body package="VRUIPainter">changedCurrent	"changed current setting, so change the input field"	| aspect |	aspect := self setting.	self settingsDict at: aspect put: self current</body><body package="VRUIPainter">changedSetting	"changed current setting, so change the input field"	self current: (self perform: self setting)</body><body package="VRUIPainter">save	VRFormSpecGenerator settings: self settings</body></methods><methods><class-id>UI.VRFormSettingsModel</class-id> <category>initialize-release</category><body package="VRUIPainter">initialize	"This is an auto-generated initialize method.  It should be updated"	self cacheSettings.	self explanation: 'Select the setting you wish to modify, and then change the number in\the input field.  To save the settings, press the &lt;Save&gt; button' withCRs.	self setting: #inputWidth.</body></methods><methods><class-id>UI.VRFormSettingsModel class</class-id> <category>As yet unclassified</category><body package="VRUIPainter">new	^super new initialize</body></methods><methods><class-id>UI.VRStubLabel</class-id> <category>accessing</category><body package="VRUIPainter">model	^model</body><body package="VRUIPainter">model: aValue	model := aValue</body><body package="VRUIPainter">name	^name</body><body package="VRUIPainter">name: aValue	name := aValue</body></methods><methods><class-id>UI.VRStubLabel class</class-id> <category>instance creation</category><body package="VRUIPainter">name: aName model: aModel	^self new name: aName; model: aModel</body></methods><methods><class-id>UI.VRCodeGeneratorModel</class-id> <category>accessing</category><body package="VRUIPainter">addInstVar: iVar	"add an instance variable to the target class"	(self targetClass instVarNames includes: iVar)		ifFalse: [self targetClass addInstVarName: iVar]</body><body package="VRUIPainter">isMeta	^isMeta</body><body package="VRUIPainter">isMeta: aValue	isMeta := aValue.</body><body package="VRUIPainter">protocol	^protocol</body><body package="VRUIPainter">protocol: aValue	protocol := aValue</body><body package="VRUIPainter">targetClass	^targetClass</body><body package="VRUIPainter">targetClass: aValue	targetClass := aValue</body></methods><methods><class-id>UI.VRCodeGeneratorModel</class-id> <category>initialize-release</category><body package="VRUIPainter">initialize	"initialize self"	self isMeta: false</body></methods><methods><class-id>UI.VRCodeGeneratorModel</class-id> <category>generating</category><body package="VRUIPainter">generateMethod: aStream 	"generate the code"	self generateMethod: aStream forClass: self targetClass</body><body package="VRUIPainter">generateMethod: aStream forClass: aClass	"generate the code"	self generateMethod: aStream forClass: self targetClass forProtocol: self protocol</body><body package="VRUIPainter">generateMethod: aStream forClass: aClass forProtocol: aProtocol	"generate the code"	self isMeta		ifTrue: [aClass class compile: aStream contents classified: aProtocol]		ifFalse: [aClass compile: aStream contents classified: aProtocol]</body></methods><methods><class-id>UI.VRCodeGeneratorModel class</class-id> <category>As yet unclassified</category><body package="VRUIPainter">new	^self new: nil</body><body package="VRUIPainter">new: aClass	^self new: nil forProtocol: nil</body><body package="VRUIPainter">new: aClass forProtocol: aSymbol	"create a new instance"	| inst |	inst := super new initialize.	inst targetClass: aClass.	inst protocol: aSymbol.	^inst</body></methods><methods><class-id>UI.VRFormGenerator</class-id> <category>api</category><body package="VRUIPainter">about	CommonMessageDialog openInformation: 'Form Generator V5i\James A. Robertson, Cincom' withCRs.</body><body package="VRUIPainter">addSelect	"This stub method was generated by UIDefiner"	self model value addSelect: self select value</body><body package="VRUIPainter">changedTableSetting	"changed to tabular - change UI to support that"	self isTabular value		ifTrue: [self shouldUseFramework value: true.				self disable: #shouldUseFramework.				self disable: #editingControls]		ifFalse: [self enable: #shouldUseFramework.				self enable: #editingControls]</body><body package="VRUIPainter">leave	| leave |	leave := self genVariableList selection.	self modelValue leave: leave</body><body package="VRUIPainter">menuButton	"menu button selected"	self curControl: #menuButton.	self switchTo: #radioEditControls.	self genVariableList selection isNil		ifTrue: [^self].	self aspect value: self genVariableList selection asSymbol.	self model value checkForExisting: #menuButton.	self format retractInterestsFor: self.	self format value: nil.	self format onChangeSend: #newFormat to: self.</body><body package="VRUIPainter">nilMenu	^Menu new</body><body package="VRUIPainter">normalType		"normal type change"	(self curControl == #format)		ifFalse: [self curControl: #format.				self switchTo: #formatMenuSpec].	self genVariableList selection isNil		ifTrue: [^self].	self format retractInterestsFor: self.	self modelValue updateSpecFor: self genVariableList selection.	self format onChangeSend: #newFormat to: self. 	self setFormatMenu</body><body package="VRUIPainter">radio	"radio button selected"	self curControl: #radio.	self switchTo: #radioEditControls.	self genVariableList selection isNil		ifTrue: [^self].	self aspect value: self genVariableList selection asSymbol.	self model value checkForExisting: #radio.	self format retractInterestsFor: self.	self format value: nil.	self format onChangeSend: #newFormat to: self.</body><body package="VRUIPainter">removeSelect	"This stub method was generated by UIDefiner"	self model value removeSelect: self selectList selection</body><body package="VRUIPainter">saveCanvasInfo	"This stub method was generated by UIDefiner"	self genVariableList selection isNil		ifTrue: [^self].	self modelValue saveCanvasInfo: self genVariableList selection</body><body package="VRUIPainter">saveRadioInfo	"check control type, as we reuse the canvas for menus"	self genVariableList selection isNil		ifTrue: [^self].	self curControl == #radio		ifTrue: [self modelValue saveRadioInfo]		ifFalse: [self modelValue saveMenuInfo]</body><body package="VRUIPainter">selectedAspect	"an aspect has been selected - set format, type info accordingly"	self genVariableList selection isNil		ifTrue: [^self].	self setEditingControls.</body><body package="VRUIPainter">subcanvas	"subcanvas selected"	(self curControl == #subcanvas)		ifTrue: [^self]		ifFalse: [self curControl: #subcanvas.				self switchTo: #canvasEditSpec].	self genVariableList selection isNil		ifTrue: [^self].	self format retractInterestsFor: self.	self format value: nil.	self modelValue updateSpecFor: self genVariableList selection.	self format onChangeSend: #newFormat to: self.</body><body package="VRUIPainter">take	| takes |	takes := self variableList selections.	self modelValue take: takes</body><body package="VRUIPainter">unsetEvents	self type retractInterestsFor: self.	self domainModel retractInterestsFor: self.	self format retractInterestsFor: self.	self genVariableList selectionIndexHolder retractInterestsFor: self.	self isTabular retractInterestsFor: self.</body></methods><methods><class-id>UI.VRFormGenerator</class-id> <category>accessing</category><body package="VRUIPainter">aspect	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."		aspect isNil 		ifTrue: [aspect:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #aspect)].	^aspect</body><body package="VRUIPainter">canvasClassName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."		canvasClassName isNil 		ifTrue: [canvasClassName:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #canvasClassName)].	^canvasClassName</body><body package="VRUIPainter">canvasSpecName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."		canvasSpecName isNil 		ifTrue: [canvasSpecName:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #canvasSpecName)].	^canvasSpecName</body><body package="VRUIPainter">category	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."		category isNil 		ifTrue: [category:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #category)].	^category</body><body package="VRUIPainter">curControl	^curControl</body><body package="VRUIPainter">curControl: aValue	curControl := aValue</body><body package="VRUIPainter">domainModel	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	domainModel isNil 		ifTrue: [domainModel:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #domainModel)].	^domainModel</body><body package="VRUIPainter">editingControls	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^editingControls isNil		ifTrue:			[editingControls := self]		ifFalse:			[editingControls]</body><body package="VRUIPainter">format	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."		format isNil 		ifTrue: [format:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #format)].	^format</body><body package="VRUIPainter">formatDict	^formatDict</body><body package="VRUIPainter">formatDict: aValue	formatDict := aValue</body><body package="VRUIPainter">formatMenu	^formatMenu</body><body package="VRUIPainter">formatMenu: aValue	formatMenu := aValue</body><body package="VRUIPainter">genVariableList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^genVariableList isNil		ifTrue:			[genVariableList := SelectionInList with: self model value genVariableList]		ifFalse:			[genVariableList]</body><body package="VRUIPainter">ifc	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."		ifc isNil 		ifTrue: [ifc:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #ifc)].	^ifc</body><body package="VRUIPainter">isTabular	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."		isTabular isNil 		ifTrue: [isTabular:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #isTabular)].	^isTabular</body><body package="VRUIPainter">model	^model</body><body package="VRUIPainter">model: aValue	model := aValue</body><body package="VRUIPainter">nameSpace	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."		nameSpace isNil 		ifTrue: [nameSpace:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #nameSpace)].	^nameSpace</body><body package="VRUIPainter">nameSpace: aValue	nameSpace := aValue.	self changed: #nameSpace</body><body package="VRUIPainter">nameSpaceMenu	^nameSpaceMenu</body><body package="VRUIPainter">nameSpaceMenu: aValue	nameSpaceMenu := aValue.	self changed: #nameSpaceMenu</body><body package="VRUIPainter">newDomainModel 	self modelValue handleNewDomainModel		ifFalse: [| aMessage |				aMessage := 'Class ', self domainModel value, ' does not exist'.				CommonMessageDialog openWarning: aMessage]</body><body package="VRUIPainter">select	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."		select isNil 		ifTrue: [select:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #select)].	^select</body><body package="VRUIPainter">selectList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^selectList isNil		ifTrue:			[selectList := SelectionInList with: self model value selectList]		ifFalse:			[selectList]</body><body package="VRUIPainter">setEditingControls	"set up the edit controls"	self type retractInterestsFor: self.	self format retractInterestsFor: self. 	self modelValue resetSpecInfoFor: self genVariableList selection.	self newType.	self setFormatMenu.	self type onChangeSend: #newType to: self.	self format onChangeSend: #newFormat to: self.</body><body package="VRUIPainter">setEvents	self type onChangeSend: #newType to: self.	self domainModel onChangeSend: #newDomainModel to: self.	self format onChangeSend: #newFormat to: self.	self genVariableList selectionIndexHolder onChangeSend: #selectedAspect to: self.	self isTabular onChangeSend: #changedTableSetting to: self</body><body package="VRUIPainter">setFormatDict	"set up the mapping of menus"	| dict |	dict := Dictionary new.	dict at: #date put: self getDateMenu.	dict at: #fixed put: self getFixedpointMenu.	dict at: #number put: self getNumberMenu.	dict at: #string put: self getStringMenu.	dict at: #time put: self getTimeMenu.	dict at: #timestamp put: self getTimestampMenu.	self formatDict: dict</body><body package="VRUIPainter">setSelectedItemIfKnown	"set the selected menu item"	| item view | 	self modelValue format isNil		ifTrue: [^self].	Menu notFoundSignal		handle: [:ex | ex return]		do: [item := self formatMenu value menuItemLabeled: self modelValue format].	self formatMenu value selectionMemory: item.	view := ((self widget: #editingControls) components at: 1) component component.	view currentChoice: item</body><body package="VRUIPainter">settings	"modify settings"	VRFormSettingsTool open</body><body package="VRUIPainter">shouldUseFramework	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."		shouldUseFramework isNil 		ifTrue: [shouldUseFramework:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #shouldUseFramework)].	^shouldUseFramework</body><body package="VRUIPainter">switchTo: aSpecName	"switch to a different spec"	|  subcanvas spec  |	"Get the spec object for the embedded canvas."	spec := self class interfaceSpecFor: aSpecName.	"Get the subcanvas and install the editing application."	subcanvas := self widget: #editingControls.	subcanvas client: self spec: spec.</body><body package="VRUIPainter">type	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."		type isNil 		ifTrue: [type:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #type)].	^type</body><body package="VRUIPainter">variableList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^variableList isNil		ifTrue:			[variableList := MultiSelectionInList with: self model value variableList]		ifFalse:			[variableList]</body></methods><methods><class-id>UI.VRFormGenerator</class-id> <category>menus</category><body package="VRUIPainter">getBooleanMenu	^self nilMenu</body><body package="VRUIPainter">getByteArrayMenu	^self nilMenu</body><body package="VRUIPainter">getCollectionMenu	^self nilMenu</body><body package="VRUIPainter">getCorrectMenuFor: aSymbol	| string newSymbol |	string := aSymbol asString.	string at: 1 put: ((string at: 1) asUppercase).	newSymbol := ('get', string, 'Menu') asSymbol.	^self perform: newSymbol</body><body package="VRUIPainter">getDateMenu	| mb |	mb := MenuBuilder new.	mb add: 'm/d/yy'-&gt;'m/d/yy'.	mb add: 'd-mmm-yy'-&gt;'d-mmm-yy'.	mb add: 'd-mmm'-&gt;'d-mmm'.	mb add: 'mmm-yy'-&gt;'mmm-yy'.	^mb menu</body><body package="VRUIPainter">getFixedpointMenu	| mb |	mb := MenuBuilder new.	mb add: '0.00'-&gt;'0.00'.	mb add: '#,##0.00'-&gt;'#,##0.00'.	mb add: '#,##0.00;-#,##0.00'-&gt;'#,##0.00;-#,##0.00'.	mb add: '#,##0.00;[Red]-#,##0.00'-&gt;'#,##0.00;[Red]-#,##0.00'.	mb add: '$#,##0.00;-$#,##0.00'-&gt;'$#,##0.00;-$#,##0.00'.	mb add: '$#,##0.00;[Red]-$#,##0.00'-&gt;'$#,##0.00;[Red]-$#,##0.00'.	mb add: '$#,##0.00;[Red]($#,##0.00)'-&gt;'$#,##0.00;[Red]($#,##0.00)'.	mb add: '0.00%'-&gt;'0.00%'.	^mb menu</body><body package="VRUIPainter">getMenuButtonMenu	^self nilMenu</body><body package="VRUIPainter">getNumberMenu	| mb |	mb := MenuBuilder new.	mb add: '0'-&gt;'0'.	mb add: '0.00'-&gt;'0.00'.	mb add: '#,##0'-&gt;'#,##0'.	mb add: '#,##0.00'-&gt;'#,##0.00'.	mb add: '#,##0;-#,##0'-&gt;'#,##0;-#,##0'.	mb add: '#,##0;[Red]-#,##0'-&gt;'#,##0;[Red]-#,##0'.	mb add: '#,##0.00;-#,##0.00'-&gt;'#,##0.00;-#,##0.00'.	mb add: '#,##0.00;[Red]-#,##0.00'-&gt;'#,##0.00;[Red]-#,##0.00'.	mb add: '$#,##0;-$#,##0'-&gt;'$#,##0;-$#,##0'.	mb add: '$#,##0;[Red]-$#,##0'-&gt;'$#,##0;[Red]-$#,##0'.	mb add: '$#,##0.00;-$#,##0.00'-&gt;'$#,##0.00;-$#,##0.00'.	mb add: '$#,##0.00;[Red]-$#,##0.00'-&gt;'$#,##0.00;[Red]-$#,##0.00'.	mb add: '$#,##0.00;[Red]($#,##0.00)'-&gt;'$#,##0.00;[Red]($#,##0.00)'.	mb add: '(000) 000-0000'-&gt;'(000) 000-0000'.	mb add: '#000-00-0000'-&gt;'#000-00-0000'.	mb add: '0%'-&gt;'0%'.	mb add: '0.00%'-&gt;'0.00%'.	mb add: '0.00E+00'-&gt;'0.00E+00'.	^mb menu</body><body package="VRUIPainter">getObjectMenu	^self nilMenu</body><body package="VRUIPainter">getPasswordMenu	^self nilMenu</body><body package="VRUIPainter">getRadioMenu	^self nilMenu</body><body package="VRUIPainter">getStringMenu	| mb |	mb := MenuBuilder new.	mb add: '(@@@) @@@-@@@@'-&gt;'(@@@) @@@-@@@@'.	mb add: '#@@@-@@-@@@@'-&gt;'#@@@-@@-@@@@'.	^mb menu</body><body package="VRUIPainter">getSubcanvasMenu	^self nilMenu</body><body package="VRUIPainter">getSymbolMenu	^self nilMenu</body><body package="VRUIPainter">getTextMenu	^self nilMenu</body><body package="VRUIPainter">getTimeMenu	| mb |	mb := MenuBuilder new.	mb add: 'h:mm AM/PM'-&gt;'h:mm AM/PM'.	mb add: 'h:mm:ss AM/PM'-&gt;'h:mm:ss AM/PM'.	mb add: 'h:mm'-&gt;'h:mm'.	mb add: 'h:mm:ss'-&gt;'h:mm:ss'.	^mb menu</body><body package="VRUIPainter">getTimestampMenu	| mb |	mb := MenuBuilder new.	mb add: 'm/d/yy h:mm AM/PM'-&gt;'m/d/yy h:mm AM/PM'.	mb add: 'd-mm-yy h:mm AM/PM'-&gt;'d-mm-yy h:mm AM/PM'.	mb add: 'mmm-yy h:mm'-&gt;'mmm-yy h:mm'.	^mb menu</body><body package="VRUIPainter">setFormatMenu	"set up the format menu"	self formatMenu value:  (self getCorrectMenuFor: self type value).	self setSelectedItemIfKnown</body><body package="VRUIPainter">setNameSpaceMenu	|  mb nameSpaces |	nameSpaces := VRNameSpaceTool allAvailableNameSpaces.	mb := MenuBuilder new.	nameSpaces do: [:each |		mb add: each fullName-&gt;each].	self nameSpaceMenu: mb menu asValue</body></methods><methods><class-id>UI.VRFormGenerator</class-id> <category>events</category><body package="VRUIPainter">newFormat	"new format selected, update spec object"	self genVariableList selection isNil		ifTrue: [^self].	self modelValue updateSpecFor: self genVariableList selection</body><body package="VRUIPainter">newType	"new type selected, change menu and possible subcanvas info - update spec object.	These messages are in protocol event-handling"	self selectList list removeAllSuchThat: [:each | true].	self select value: nil.	self class messageNotUnderstoodSignal		handle: [:ex | self normalType]		do: [self perform: self type value].</body></methods><methods><class-id>UI.VRFormGenerator</class-id> <category>initialize-release</category><body package="VRUIPainter">initialize	"UIDefiner defined this method"	super initialize.	self model: VRFormModel new asValue.	self setEvents.	self formatMenu: nil asValue.	self setNameSpaceMenu.	self setFormatDict</body><body package="VRUIPainter">release	super release.	self unsetEvents</body></methods><methods><class-id>UI.VRFormGenerator</class-id> <category>building</category><body package="VRUIPainter">editNewCanvasAndDefine	"edit the canvas and bring up definer on it.  Pre-hook definer"	| painter |	painter := UIPainter new.	painter definer domainModel value: self domainModel value.	painter openOnClass: (self nameSpace value bindingFor: self ifc value) value andSelector: #windowSpec.</body><body package="VRUIPainter">generate	"generate the windowSpec, support code"	Cursor wait 		showWhile: [self modelValue weedOutNonSelectedAspects. 					self modelValue generate.					self editNewCanvasAndDefine]</body></methods><methods><class-id>UI.VRFormGenerator</class-id> <category>interface control</category><body package="VRUIPainter">noticeOfWindowClose: aWindow	super noticeOfWindowClose: aWindow.	self release</body></methods><methods><class-id>UI.VRFormGenerator class</class-id> <category>As yet unclassified</category><body package="VRUIPainter">on: aDomainModel	|   inst |	aDomainModel isNil		ifTrue: [| aMessage |				aMessage := 'Class ',  aDomainModel fullName, ' does not exist'.				CommonMessageDialog openWarning: aMessage.				^self].	inst := self new.	inst domainModel value: aDomainModel.	inst open</body></methods><methods><class-id>UI.VRFormWindowSpec</class-id> <category>specs-private</category><body package="VRUIPainter">setbooleanSpecForType: type model: aModel format: aFormat	| matchingSpec |	matchingSpec := self						findOrCreateMatchingSpecFor: aModel						type: type 						format: aFormat.	(matchingSpec isCheckboxType not)		ifTrue: [matchingSpec 					newCheckBoxSpecWithName: aModel					type: type					model: aModel					format: aFormat]		ifFalse: [matchingSpec specDataType: type.					matchingSpec spec						name: aModel;						model: aModel]</body><body package="VRUIPainter">setcollectionSpecForType: type model: aModel format: aFormat	| matchingSpec |	matchingSpec := self						findOrCreateMatchingSpecFor: aModel						type: type 						format: aFormat.	(matchingSpec isListType not)		ifTrue: [matchingSpec					newListSpecWithName: aModel					type: type					model: aModel					format: aFormat]		ifFalse: [matchingSpec specDataType: type.				matchingSpec spec					name: aModel;					model: aModel]</body><body package="VRUIPainter">setdateSpecForType: type model: aModel format: aFormat	self setInputFieldSpecForType: type model: aModel format: aFormat</body><body package="VRUIPainter">setfixedpointSpecForType: type model: aModel format: aFormat	self setInputFieldSpecForType: type model: aModel format: aFormat</body><body package="VRUIPainter">setInitialSpec	self spec: WindowSpec new.	self spec min: 40@20.	self spec bounds: (Rectangle origin: 100@50 extent: 450@450).	self spec isEventDriven: true</body><body package="VRUIPainter">setInputFieldSpecForType: type model: aModel format: aFormat	| matchingSpec |	matchingSpec := self						findOrCreateMatchingSpecFor: aModel						type: type 						format: aFormat.	(matchingSpec isInputType not)		ifTrue: [matchingSpec					newInputFieldSpecWithName: aModel					type: type					model: aModel					format: aFormat]		ifFalse: [matchingSpec specDataType: type.				matchingSpec spec					name: aModel;					type: type;					model: aModel;					formatString: aFormat]</body><body package="VRUIPainter">setmenuButtonSpecForType: type model: aModel format: aFormat	"no op - user must press button for this"</body><body package="VRUIPainter">setnumberSpecForType: type model: aModel format: aFormat	self setInputFieldSpecForType: type model: aModel format: aFormat</body><body package="VRUIPainter">setpasswordSpecForType: type model: aModel format: aFormat	self setInputFieldSpecForType: type model: aModel format: aFormat</body><body package="VRUIPainter">setradioSpecForType: type model: aModel format: aFormat	"no op - user must press button for this"</body><body package="VRUIPainter">setstringSpecForType: type model: aModel format: aFormat	self setInputFieldSpecForType: type model: aModel format: aFormat</body><body package="VRUIPainter">setsubcanvasSpecForType: type model: aModel format: aFormat	"no op - user must press button in UI to do this"	^self</body><body package="VRUIPainter">setsymbolSpecForType: type model: aModel format: aFormat	self setInputFieldSpecForType: type model: aModel format: aFormat</body><body package="VRUIPainter">settextSpecForType: type model: aModel format: aFormat	| matchingSpec |	matchingSpec := self						findOrCreateMatchingSpecFor: aModel						type: type 						format: aFormat.	(matchingSpec isTextType not)		ifTrue: [matchingSpec					newTextSpecWithName: aModel					type: type					model: aModel					format: aFormat]		ifFalse: [matchingSpec specDataType: type.				matchingSpec spec					name: aModel;					model: aModel]</body><body package="VRUIPainter">settimeSpecForType: type model: aModel format: aFormat	self setInputFieldSpecForType: type model: aModel format: aFormat</body><body package="VRUIPainter">settimestampSpecForType: type model: aModel format: aFormat	self setInputFieldSpecForType: type model: aModel format: aFormat</body><body package="VRUIPainter">typeInfoFor: anAspect	| aspectName specObject |	aspectName := anAspect asSymbol.	specObject := self specCollection 					detect: [:each |						each name = aspectName]					ifNone: [nil].	specObject isNil		ifTrue: [^nil].	^specObject  specDataType</body></methods><methods><class-id>UI.VRFormWindowSpec</class-id> <category>accessing</category><body package="VRUIPainter">spec	^spec</body><body package="VRUIPainter">spec: aValue	spec := aValue</body><body package="VRUIPainter">specCollection	^specCollection</body><body package="VRUIPainter">specCollection: aValue	specCollection := aValue</body></methods><methods><class-id>UI.VRFormWindowSpec</class-id> <category>specs</category><body package="VRUIPainter">addSpec: specType id: id model: aModel label: aLabel type: aType format: aFormat	"add a spec to the collection based on specType"	| existing |	existing := self specCollection detect: [:each | each name = id] ifNone: [nil].	existing isNil		ifTrue: [self 				addNewSpec: specType				id: id				model: aModel				label: aLabel				type: aType				format: aFormat]		ifFalse: [self				modifyExistingSpec: existing				specType: specType				id: id				model: aModel				label: aLabel				type: aType				format: aFormat]</body><body package="VRUIPainter">existingMenuButtonSpecFor: anAspect with: aCollection spec: aSpec	"create a new menu spec"	aSpec isMenuButtonType		ifFalse: [aSpec specType: #menuButton.				aSpec specDataType: #menuButton.				aSpec spec: MenuButtonSpec new].	aSpec menuSelects: aCollection.	aSpec spec model: anAspect.	aSpec spec name: anAspect.	aSpec spec menu: (anAspect asString, 'Menu') asSymbol.</body><body package="VRUIPainter">existingRadioSpecFor: anAspect with: aCollection spec: aSpec	"create a new collection of radio specs for this spec"	aSpec isRadioButtonType		ifFalse: [aSpec specType: #radio.				aSpec specDataType: #radio.				aSpec spec: OrderedCollection new].	aCollection do: [:each | 	| newSpec |		newSpec := RadioButtonSpec new.		newSpec model: anAspect.		newSpec label: each asString.		newSpec select: each asSymbol.		newSpec name: anAspect.		aSpec spec add: newSpec]</body><body package="VRUIPainter">findOrCreateMatchingSpecFor: aModel type: aType format: aFormat	| matchingSpec |	matchingSpec := self specCollection 						detect: [:each | each name == aModel]						ifNone: [nil].	matchingSpec isNil		ifTrue: [matchingSpec := self specForType: aType.				matchingSpec model: aModel.				matchingSpec name: aModel.				(matchingSpec respondsTo: #type:)					ifTrue: [matchingSpec type: aType].				(matchingSpec respondsTo: #formatString:)					ifTrue: [matchingSpec formatString: aFormat]].	^matchingSpec</body><body package="VRUIPainter">formatInfoFor: anAspect 	| aspectName specObject | 	aspectName := anAspect asSymbol.	specObject := self specCollection 					detect: [:each |						each name = aspectName]					ifNone: [nil].	specObject isNil		ifTrue: [^nil].	(specObject spec respondsTo: #formatString:)		ifFalse: [^nil].	^specObject spec formatString.</body><body package="VRUIPainter">newInfoFor: anAspect type: type format: format	"new info for the aspect - create proper spec"	| message args | 	message := ('set', type asString, 'SpecForType:model:format:') asSymbol.	args := Array			with: type			with: anAspect			with: format.	self perform: message withArguments: args</body><body package="VRUIPainter">newMenuButtonSpecFor: anAspect with: aCollection	"create a new menu spec"	| newSpec |	newSpec := VRFormSpecObject new.	newSpec name: anAspect.	newSpec spec: MenuButtonSpec new.	newSpec isCurrent: true.	newSpec specType: #menuButton.	newSpec specDataType: #menuButton.	self existingMenuButtonSpecFor: anAspect with: aCollection spec: newSpec</body><body package="VRUIPainter">newRadioSpecFor: anAspect with: aCollection	"create a new collection of radio specs"	| newSpec |	newSpec := VRFormSpecObject new.	newSpec name: anAspect.	newSpec spec: OrderedCollection new.	newSpec isCurrent: true.	newSpec specType: #radio.	newSpec specDataType: #radio.	self existingRadioSpecFor: anAspect with: aCollection spec: newSpec</body><body package="VRUIPainter">saveCanvasInfoFor: anAspect className: className specName: specName	"save canvas info after user has signalled"	| matchingSpec |	matchingSpec := self specCollection 						detect: [:each | each name == anAspect]						ifNone: [nil].	(matchingSpec isNil or: [matchingSpec isSubcanvasType not])		ifTrue: [matchingSpec					newSubcanvasSpecWithName: anAspect					model: anAspect					forClass: className					forSpec: specName]		ifFalse: [matchingSpec 					name: anAspect;					clientKey: anAspect;					majorKey: className;					minorKey: specName]</body><body package="VRUIPainter">saveMenuInfoFor: anAspect selects: aCollection	"save the menu button info as a menuButton spec"	| matchingSpec |	matchingSpec := self specCollection 						detect: [:each | each name == anAspect]						ifNone: [nil].	matchingSpec isNil		ifTrue: [self newMenuButtonSpecFor: anAspect with: aCollection copy]		ifFalse: [self existingMenuButtonSpecFor: anAspect with: aCollection copy spec: matchingSpec]</body><body package="VRUIPainter">saveRadioInfoFor: anAspect selects: aCollection	"save the radio button info as a collection of specs"	| matchingSpec |	matchingSpec := self specCollection 						detect: [:each | each name == anAspect]						ifNone: [nil].	matchingSpec isNil		ifTrue: [self newRadioSpecFor: anAspect with: aCollection]		ifFalse: [self existingRadioSpecFor: anAspect with: aCollection spec: matchingSpec]</body></methods><methods><class-id>UI.VRFormWindowSpec</class-id> <category>api</category><body package="VRUIPainter">add: aList	"add a list of new specs.  By default, they will all be input fields on strings"	aList do: [:each | | newName  match |		newName := each asSymbol.		match := self specCollection 					detect: [:eachSpec | eachSpec name = newName]					ifNone: [nil].		match isNil			ifTrue: [ | newSpec |					newSpec := VRFormSpecObject new.					newSpec spec: InputFieldSpec new.					newSpec name: newName.					newSpec spec name: newName.					newSpec spec model: newName.					newSpec spec type: #string.					self specCollection add: newSpec]			ifFalse: [match isCurrent: true]]</body><body package="VRUIPainter">createFrom: aList	"create new specs"	self specCollection: OrderedCollection new.	self add: aList</body><body package="VRUIPainter">remove: aSpecName	"remove spec (make it not current)"	| theName theSpec |	theName := aSpecName asSymbol.	theSpec := self specCollection 					detect: [:each | each name = theName]					ifNone: [nil].	theSpec notNil		ifTrue: [theSpec isCurrent: false]</body></methods><methods><class-id>UI.VRFormWindowSpec</class-id> <category>initialize-release</category><body package="VRUIPainter">initialize	super initialize.	self specCollection: OrderedCollection new.	self setInitialSpec</body></methods><methods><class-id>UI.VRFormWindowSpec</class-id> <category>testing</category><body package="VRUIPainter">specForType: aType	aType == #collection		ifTrue: [^SequenceViewSpec new].	aType == #subcanvas		ifTrue: [^SubCanvasSpec new].	aType == #boolean		ifTrue: [^CheckBoxSpec new].	aType == #radio		ifTrue: [^RadioButtonSpec new].	^InputFieldSpec new</body></methods><methods><class-id>UI.AccessorDefiner</class-id> <category>accessing</category><body package="VRUIPainter">classInstVars	^classInstVars</body><body package="VRUIPainter">classInstVars: aValue	classInstVars := aValue</body><body package="VRUIPainter">classVarNameList	^classVarNameList</body><body package="VRUIPainter">classVarNameList: aValue	classVarNameList := aValue</body><body package="VRUIPainter">generator	^generator</body><body package="VRUIPainter">generator: aValue	generator := aValue</body><body package="VRUIPainter">instVarNameList	^instVarNameList</body><body package="VRUIPainter">instVarNameList: aValue	instVarNameList := aValue</body><body package="VRUIPainter">isModel	^isModel</body><body package="VRUIPainter">isModel: aValue	isModel := aValue</body><body package="VRUIPainter">iVars	^iVars</body><body package="VRUIPainter">iVars: aValue	iVars := aValue</body><body package="VRUIPainter">targetClass	^targetClass</body><body package="VRUIPainter">targetClass: aValue	targetClass := aValue.	self initialize</body></methods><methods><class-id>UI.AccessorDefiner</class-id> <category>generating</category><body package="VRUIPainter">createAccessors	"create accessors for all vars"	"create instance vars if needed"	self iVars ifTrue: [self createInstanceVars].	"create instance accessors" 	self instVarNameList notNil	ifTrue: [instVarNameList do: [:elem | self createReadAccessor: elem.						self isModel ifTrue: [self createWriteModelAccessor: elem]								ifFalse: [self createWriteAccessor: elem]]].		"create class accessors"	self classVarNameList notNil	ifTrue: [classVarNameList do: [:elem | self createClassReadAccessor: elem.						self createClassWriteAccessor: elem]].	"create class instVar accessors"	self classInstVars notNil	ifTrue: [classInstVars do: [:elem | self createClassInstVarReadAccessor: elem.						self createClassInstVarWriteAccessor: elem]].</body><body package="VRUIPainter">createClassInstVarReadAccessor: instVar	"create read accessor"	| aStream |	(self targetClass class selectors includes: instVar asSymbol)	ifFalse: [aStream := String new writeStream.			aStream nextPutAll: instVar.			aStream cr; cr; tab.			aStream nextPutAll: '^', instVar.			self generator isMeta: true.			self generator protocol: #accessing.			self generate: aStream].</body><body package="VRUIPainter">createClassInstVarWriteAccessor: instVar	"create write accessor"	| aStream |	(self targetClass class selectors includes: (instVar, ':') asSymbol)	ifFalse: [aStream := String new writeStream.			aStream nextPutAll: (instVar, ': aValue').			aStream cr; cr; tab.			aStream nextPutAll: (instVar, ' := aValue').			self generator isMeta: true.			self generator protocol: #accessing.			self generate: aStream].</body><body package="VRUIPainter">createClassReadAccessor: classVar	"create class read accessor"	| aStream mName tName|	mName := ((classVar at: 1) asLowercase).	tName := classVar printString copyFrom: 2 to: classVar size+1.	tName at: 1 put: mName.	(self targetClass class selectors includes: classVar)	ifFalse: [aStream := String new writeStream.			aStream nextPutAll: tName.			aStream cr; cr; tab.			aStream nextPutAll: ('^', classVar).			self generator isMeta: true.			self generator protocol: #accessing.			self generate: aStream].</body><body package="VRUIPainter">createClassWriteAccessor: classVar	"create class write accessor"	| aStream mName tName|	mName := ((classVar at: 1) asLowercase).	tName := classVar printString copyFrom: 2 to: classVar size+1.	tName at: 1 put: mName.	(self targetClass class selectors includes: (tName, ':') asSymbol)	ifFalse: [aStream := String new writeStream.			aStream nextPutAll: (tName, ': aValue').			aStream cr; cr; tab.			aStream nextPutAll: (classVar, ' := aValue').			self generator isMeta: true.			self generator protocol: #accessing.			self generate: aStream].</body><body package="VRUIPainter">createInstanceVars	self instVarNameList do: [:iVar | self generator addInstVar: iVar].</body><body package="VRUIPainter">createReadAccessor: instVar	"create read accessor"	| aStream |	(self targetClass selectors includes: instVar asSymbol)	ifFalse: [aStream := String new writeStream.			aStream nextPutAll: instVar.			aStream cr; cr; tab.			aStream nextPutAll: '^', instVar.			self generator isMeta: false.			self generator protocol: #accessing.			self generate: aStream].</body><body package="VRUIPainter">createWriteAccessor: instVar	"create write accessor"	| aStream |	(self targetClass selectors includes: (instVar, ':') asSymbol)	ifFalse: [aStream := String new writeStream.			aStream nextPutAll: (instVar, ': aValue').			aStream cr; cr; tab.			aStream nextPutAll: (instVar, ' := aValue').			self generator isMeta: false.			self generator protocol: #accessing.			self generate: aStream].</body><body package="VRUIPainter">createWriteModelAccessor: instVar	"create write accessor"	| aStream |	(self targetClass selectors includes: (instVar, ':') asSymbol)	ifFalse: [aStream := String new writeStream.			aStream nextPutAll: (instVar, ': aValue').			aStream cr; cr; tab.			aStream nextPutAll: (instVar, ' := aValue.').			aStream cr;tab.			aStream nextPutAll: 'self changed: #', instVar, ' with: aValue'.						self generator isMeta: false.			self generator protocol: #accessing.			self generate: aStream].</body><body package="VRUIPainter">generate: aStream	"generate code"	self generator generateMethod: aStream</body></methods><methods><class-id>UI.AccessorDefiner</class-id> <category>initialize-release</category><body package="VRUIPainter">initialize	"initialize self"	self generator isNil ifTrue: [self generator: VRCodeGeneratorModel new].	self targetClass isNil	ifFalse: [self generator targetClass: self targetClass.			self instVarNameList: List new.			self classVarNameList: List new.			self instVarNameList: self targetClass instVarNames.			self classVarNameList: self targetClass classVarNames.			self classInstVars: self targetClass class instVarNames].	self isModel isNil ifTrue: [self isModel: false]</body></methods><methods><class-id>UI.AccessorDefiner class</class-id> <category>instance creation</category><body package="VRUIPainter">on: aClass	"create a new instance on a class"	^self on: aClass with: nil</body><body package="VRUIPainter">on: aClass with: iVarList	"create a new instance on a class, with instance vars"	^self on: aClass with: iVarList isModel: false</body><body package="VRUIPainter">on: aClass with: iVarList isModel: aBool	"create a new instance on a class"	| inst |	inst := self new targetClass: aClass.	inst initialize.	iVarList notNil ifTrue: [inst instVarNameList: iVarList].	inst iVars: iVarList notNil.	inst isModel: aBool.	^inst</body></methods><methods><class-id>UI.VRFormSpecGenerator</class-id> <category>constants</category><body package="VRUIPainter">baseX	^10.</body><body package="VRUIPainter">inputHeight	^VRSettings at: #inputHeight</body><body package="VRUIPainter">inputWidth	^VRSettings at: #inputWidth</body><body package="VRUIPainter">labelSeparation	^VRSettings at: #labelSeparation</body><body package="VRUIPainter">rectangleHeight	^VRSettings at: #rectangleHeight</body><body package="VRUIPainter">rectangleWidth	^VRSettings at: #rectangleWidth</body><body package="VRUIPainter">widgetSeparation	^VRSettings at: #widgetSeparation</body><body package="VRUIPainter">widgetXStart	^VRSettings at: #widgetXStart</body><body package="VRUIPainter">xIndent	^100</body><body package="VRUIPainter">yIndent	^50</body><body package="VRUIPainter">yLargeIndent	^50</body></methods><methods><class-id>UI.VRFormSpecGenerator</class-id> <category>accessing</category><body package="VRUIPainter">codeGen	^codeGen</body><body package="VRUIPainter">codeGen: aValue	codeGen := aValue</body><body package="VRUIPainter">curX	^curX</body><body package="VRUIPainter">curX: aValue	curX := aValue</body><body package="VRUIPainter">curY	^curY</body><body package="VRUIPainter">curY: aValue	curY := aValue</body><body package="VRUIPainter">ifcIsTabular	^ifcIsTabular</body><body package="VRUIPainter">ifcIsTabular: aValue	ifcIsTabular := aValue</body><body package="VRUIPainter">nameSpace	^nameSpace</body><body package="VRUIPainter">nameSpace: aValue	nameSpace := aValue</body><body package="VRUIPainter">useFramework	^useFramework</body><body package="VRUIPainter">useFramework: aValue	useFramework := aValue</body><body package="VRUIPainter">windowCategory	^windowCategory</body><body package="VRUIPainter">windowCategory: aValue	windowCategory := aValue</body><body package="VRUIPainter">windowClass	^windowClass</body><body package="VRUIPainter">windowClass: aValue	windowClass := aValue</body><body package="VRUIPainter">windowSpec	^windowSpec</body><body package="VRUIPainter">windowSpec: aValue	windowSpec := aValue</body><body package="VRUIPainter">windowSpecName	^windowSpecName</body><body package="VRUIPainter">windowSpecName: aValue	windowSpecName := aValue</body></methods><methods><class-id>UI.VRFormSpecGenerator</class-id> <category>testing</category><body package="VRUIPainter">isPointLayout: aSpec	"is it a point oriented spec ?"	^(((aSpec class == CheckBoxSpec) 		or: [aSpec class == RadioButtonSpec])		or: [aSpec class == LabelSpec])</body><body package="VRUIPainter">isResetLayout: aSpec	"is it a reset oriented spec ?"	^(aSpec respondsTo: #specType) and: [aSpec specType == #reset]</body><body package="VRUIPainter">needLabelFor: aSpec	"does this one need a label ?"	^aSpec  isInputType</body></methods><methods><class-id>UI.VRFormSpecGenerator</class-id> <category>building</category><body package="VRUIPainter">addResetSpec	| spec |	spec := VRFormSpecObject new.	spec specType: #reset.	^spec</body><body package="VRUIPainter">buildStockMenuFor: aVRSpec	"build a class side menu spec"	| mb coll encoding stream sel | 	mb := MenuBuilder new.	coll := aVRSpec menuSelects.	coll do: [:each |		mb add: each asString-&gt;each].	encoding := mb menu literalArrayEncoding printString.	self codeGen isMeta: true.	self codeGen protocol: 'resources'.	self codeGen targetClass: (Smalltalk at: self windowClass).	sel := aVRSpec spec name asString, 'Menu'.	stream := WriteStream on: String new.	stream nextPutAll: sel.	stream cr; tab.	stream nextPutAll: '"UIMenuEditor new openOnClass: self andSelector: #', sel, '"'.	stream cr; cr; tab.	stream nextPutAll: '&lt;resource: #menu&gt;'.	stream cr; tab.	stream nextPutAll: '^'.	stream nextPutAll: encoding.	stream nextPutAll: ' decodeAsLiteralArray'.	self codeGen generateMethod: stream.	self codeGen protocol: 'interface-specs'</body><body package="VRUIPainter">buildTableDetails	"build the spec for the table we want to use"	| specs names aspects widths stream |	specs := self windowSpec specCollection select: [:each | each isCurrent].	names := OrderedCollection new.	aspects := OrderedCollection new.	widths := OrderedCollection new.	specs do: [:each |		names add: each name asString.		aspects add: each name.		widths add: 150].	stream := WriteStream on: String new.	stream nextPutAll: 'tableSpec'; cr; tab.	stream nextPutAll: '"Table Definition defined by VRFormGenerator V2.0"'; cr; cr; tab.	stream nextPutAll: '^'.	stream nextPutAll: 		(Array with: names asArray with: aspects asArray with: widths asArray) printString.	self codeGen isMeta: false.	self codeGen protocol: #'table specs'.	self codeGen generateMethod: stream</body><body package="VRUIPainter">buildUIDetailClass	| superclass | 	self useFramework		ifTrue: [superclass := VRDetailForm]		ifFalse: [superclass := ApplicationModel].	superclass 		subclass: self windowClass		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: self windowCategory.	self setEnvironmentForClass</body><body package="VRUIPainter">buildUIDetailSpec	| specs newArray spec stream | 	specs := self windowSpec specCollection select: [:each | each isCurrent].	newArray := OrderedCollection new.	specs do: [:each |		each isRadioButtonType			ifTrue: [| labelSpec stub |					stub := VRStubLabel name: (each name asString, 'label') model: each name.					labelSpec := (self labelSpecFor: stub).					newArray add: labelSpec.					each spec do: [:eachRadioSpec |					newArray add: eachRadioSpec].					newArray add: self addResetSpec]			ifFalse: [(self needLabelFor: each)						ifTrue: [ | labelSpec |								labelSpec := (self labelSpecFor: each spec).								newArray add: labelSpec].						each isMenuButtonType							ifTrue: [self buildStockMenuFor: each].						newArray add: each spec]].	self setCoordsFor: newArray.	newArray := self cleanResetsFrom: newArray.	spec := FullSpec new.	self windowSpec spec bounds: (Rectangle origin: 10@20 corner: 300@300).	spec window: self windowSpec spec. 	spec component: (self getComponentSpecsFrom: newArray).	stream := WriteStream on: (String new: 400).	stream nextPutAll: self windowSpecName asString; cr; tab.	stream nextPutAll: '"UIPainter new openOnClass: ', self windowClass, ' andSelector: #windowSpec"'; cr; tab.	stream nextPutAll: '&lt;resource: #canvas&gt;'; cr; cr; tab.	stream nextPutAll: '^'. 	UISpecification 		prettyPrintSpecArray: spec  		literalArrayEncoding 		on: stream tabLevel: 1.	self codeGen targetClass: (self nameSpace bindingFor: self windowClass) value.	self codeGen generateMethod: stream.</body><body package="VRUIPainter">buildUITableClass	VRTableForm		subclass: self windowClass		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: self windowCategory.	self setEnvironmentForClass</body><body package="VRUIPainter">buildUITableSpec	"build the spec for this class"	| uiSpec stream |	uiSpec := VRTableForm windowSpec literalArrayEncoding.	stream := WriteStream on: String new.	stream nextPutAll: 'windowSpec'; cr; tab.	stream nextPutAll:  '"UIPainter new openOnClass: ', self windowClass, ' andSelector: #windowSpec"'; cr; tab.	stream nextPutAll: '&lt;resource: #canvas&gt;'; cr; cr; tab.	stream nextPutAll: '^'.	UISpecification 		prettyPrintSpecArray: uiSpec  		on: stream tabLevel: 1.	self codeGen targetClass: ((self nameSpace bindingFor: self windowClass) value).	self codeGen generateMethod: stream.	self buildTableDetails</body><body package="VRUIPainter">buildUITableSupport	"create an instance creation method"	| stream |	stream := WriteStream on: String new.	stream nextPutAll: 'with: aList'; cr; tab.	stream nextPutAll: '"instantiates the table with the collection aList.  Must still be opened"'; cr; cr; tab.	stream nextPutAll: '| inst |'; cr; tab.	stream nextPutAll: 'inst := self new.'; cr; tab.	stream nextPutAll: 'inst initializeTable: aList.';cr; tab.	stream nextPutAll: '^inst'.	self codeGen isMeta: true.	self codeGen protocol: 'instance creation'.	self codeGen generateMethod: stream</body><body package="VRUIPainter">doPointLayoutFor: aSpec	| point |	point := self curX@self curY.	aSpec layout: point.	aSpec class == LabelSpec		ifTrue: [self curX: self curX + self labelSeparation]		ifFalse: [self curY: self curY + self widgetSeparation]</body><body package="VRUIPainter">doRectangleLayoutFor: aSpec	| startX startY endX endY rect  |	startX := self curX.	startY := self curY.	(aSpec class == InputFieldSpec or: [aSpec class == MenuButtonSpec])		ifTrue: [endX := startX + self inputWidth.				endY := startY + self inputHeight]		ifFalse: [endX := startX +self rectangleWidth.				endY := startY + self rectangleHeight].	aSpec class == SubCanvasSpec		ifTrue: [| sRect cls theSpec |				cls := Smalltalk at: aSpec majorKey.				theSpec := UISpecification from: (cls perform: (aSpec minorKey)).				sRect := theSpec window bounds.				endX := startX + sRect width.				endY := startY + sRect height].	rect := Rectangle origin: startX@startY corner: endX@endY.	aSpec layout: rect.	self curY: endY + self widgetSeparation.	self curX: self widgetXStart.</body><body package="VRUIPainter">doReset	self curX: self curX - self labelSeparation</body><body package="VRUIPainter">generate	"actually do the generation"	self ifcIsTabular		ifTrue: [self buildUITableClass.				self buildUITableSpec.				self buildUITableSupport]		ifFalse: [self buildUIDetailClass.				self buildUIDetailSpec.]</body><body package="VRUIPainter">getComponentSpecsFrom: anArray	| coll |	coll := SpecCollection new.	coll collection: anArray.	^coll</body><body package="VRUIPainter">initialize	super initialize.	self codeGen: VRCodeGeneratorModel new.	self codeGen isMeta: true.	self codeGen protocol: #'interface specs'.	self curX: 5.	self curY: 10.	self windowSpecName: 'windowSpec'</body><body package="VRUIPainter">labelSpecFor: aSpec	| labelSpec |	labelSpec := LabelSpec new.	labelSpec name: (aSpec name asString, 'Label') asSymbol.	labelSpec label: aSpec model asString.	^labelSpec</body><body package="VRUIPainter">setCoordsFor: aCollectionOfSpecs	"set the coords for the specs"	aCollectionOfSpecs do: [:each |		(self isPointLayout: each)			ifTrue: [self doPointLayoutFor: each]			ifFalse: [(self isResetLayout: each)						ifTrue: [self doReset]						ifFalse: [self doRectangleLayoutFor: each]]]</body><body package="VRUIPainter">setEnvironmentForClass	"set the name space if it has been specified; if not, let it stay with default"	| theClass space |	self nameSpace isNil		ifTrue: [^self].	self useFramework		ifTrue: [space := UI]		ifFalse: [space := UI].	theClass := (space bindingFor: self windowClass) value.	theClass relocateTo: self nameSpace</body></methods><methods><class-id>UI.VRFormSpecGenerator</class-id> <category>private</category><body package="VRUIPainter">cleanResetsFrom: anArray	^anArray reject: [:each | each respondsTo: #specType]</body></methods><methods><class-id>UI.VRFormSpecGenerator class</class-id> <category>As yet unclassified</category><body package="VRUIPainter">initialize	"VRFormSpecGenerator initialize"	VRSettings := IdentityDictionary new.	VRSettings at: #inputWidth put: 150.	VRSettings at: #inputHeight put: 25.	VRSettings at: #labelSeparation put: 100.	VRSettings at: #widgetSeparation put: 20.	VRSettings at: #rectangleHeight put: 150.	VRSettings at: #rectangleWidth put: 300.	VRSettings at: #widgetXStart put: 5.</body><body package="VRUIPainter">settings	^VRSettings copy</body><body package="VRUIPainter">settings: aDict	VRSettings := aDict</body></methods><methods><class-id>UI.VRFormSpecObject</class-id> <category>accessing</category><body package="VRUIPainter">initialize	super initialize.	self isCurrent: true.	self specType: #inputField.	self specDataType: #string</body><body package="VRUIPainter">isCurrent	^isCurrent</body><body package="VRUIPainter">isCurrent: aValue	isCurrent := aValue</body><body package="VRUIPainter">menuSelects	^menuSelects</body><body package="VRUIPainter">menuSelects: aValue	menuSelects := aValue</body><body package="VRUIPainter">name	^name</body><body package="VRUIPainter">name: aValue	name := aValue</body><body package="VRUIPainter">spec	^spec</body><body package="VRUIPainter">spec: aValue	spec := aValue</body><body package="VRUIPainter">specDataType	^specDataType</body><body package="VRUIPainter">specDataType: aValue	specDataType := aValue</body><body package="VRUIPainter">specType	^specType</body><body package="VRUIPainter">specType: aValue	specType := aValue</body></methods><methods><class-id>UI.VRFormSpecObject</class-id> <category>testing</category><body package="VRUIPainter">isCheckboxType	^self specType == #checkBox</body><body package="VRUIPainter">isInputType	^self specType == #inputField or: [self specType == #text]</body><body package="VRUIPainter">isListType	^self specType == #listBox</body><body package="VRUIPainter">isMenuButtonType	^self specType == #menuButton</body><body package="VRUIPainter">isRadioButtonType	^self specType == #radio</body><body package="VRUIPainter">isResetType	^self specType == #reset</body><body package="VRUIPainter">isSubcanvasType	^self specType == #subcanvas</body><body package="VRUIPainter">isTextType	^self specType == #text</body></methods><methods><class-id>UI.VRFormSpecObject</class-id> <category>specs</category><body package="VRUIPainter">newCheckBoxSpecWithName: aName type: type model: aModel format: aFormat	self specType: #checkBox.	self specDataType: type.	self name: aName.	self isCurrent: true.	self spec: CheckBoxSpec new.	self spec name: aName.	self spec label: aName asString.	self spec model: aName</body><body package="VRUIPainter">newInputFieldSpecWithName: aName type: type model: aModel format: aFormat	self specType: #inputField.	self specDataType: type.	self name: aName.	self isCurrent: true.	self spec: InputFieldSpec new.	self spec name: aName.	self spec model: aModel.	self spec type: type.	self spec formatString: aFormat</body><body package="VRUIPainter">newListSpecWithName: aName type: type model: aModel format: aFormat	self specType: #listBox.	self specDataType: type.	self name: aName.	self isCurrent: true.	self spec: SequenceViewSpec new.	self spec name: aName.	self spec model: aModel.	self spec useModifierKeys: true.	self spec selectionType: #highlight</body><body package="VRUIPainter">newMenuButtonSpecWithName: aName type: type model: aModel select: select	self specType: #menuButton.	self specDataType: type.	self name: aName.	self isCurrent: true.	self spec: MenuButtonSpec new.	self spec name: aName.	self spec label: aName asString.	self spec model: aName.	self spec menu: (aName asString, 'Menu') asSymbol.</body><body package="VRUIPainter">newRadioButtonSpecWithName: aName type: type model: aModel select: select	self specType: #radio.	self specDataType: type.	self name: aName.	self isCurrent: true.	self spec: RadioButtonSpec new.	self spec name: aName.	self spec label: aName asString.	self spec model: aName.	self spec select: select</body><body package="VRUIPainter">newSubcanvasSpecWithName: aName model: aModel forClass: className forSpec: specName	self specType: #subcanvas.	self specDataType: #subcanvas.	self name: aName.	self isCurrent: true.	self spec: SubCanvasSpec new.	self spec name: aName.	self spec flags: 0.	self spec majorKey: className.	self spec minorKey: specName.	self spec clientKey: aModel.</body><body package="VRUIPainter">newTextSpecWithName: aName type: type model: aModel format: aFormat	self specType: #text.	self specDataType: type.	self name: aName.	self isCurrent: true.	self spec: TextEditorSpec new.	self spec name: aName.	self spec model: aModel.</body></methods><methods><class-id>UI.VRFormSpecObject</class-id> <category>printing</category><body package="VRUIPainter">printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' ', self name</body></methods><methods><class-id>UI.VRNameSpaceTool</class-id> <category>accessing</category><body package="VRUIPainter">allAvailableNameSpaces	^allAvailableNameSpaces</body><body package="VRUIPainter">allAvailableNameSpaces: aValue	allAvailableNameSpaces := aValue.	self changed: #allAvailableNameSpaces</body><body package="VRUIPainter">selectedNameSpace	^selectedNameSpace</body><body package="VRUIPainter">selectedNameSpace: aValue	selectedNameSpace := aValue.	self changed: #selectedNameSpace</body></methods><methods><class-id>UI.VRNameSpaceTool</class-id> <category>initialize-release</category><body package="VRUIPainter">initialize	| all |	all := Root allNameSpaces.	self allAvailableNameSpaces:  		(all select: [:each | each classNames isEmpty not])</body></methods><methods><class-id>UI.VRNameSpaceTool class</class-id> <category>As yet unclassified</category><body package="VRUIPainter">allAvailableNameSpaces	^self new allAvailableNameSpaces</body></methods><methods><class-id>UI.VRFormSettingsTool</class-id> <category>accessing</category><body package="VRUIPainter">current	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."		current isNil 		ifTrue: [current:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #current)].	^current</body><body package="VRUIPainter">explanation	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."		explanation isNil 		ifTrue: [explanation:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #explanation)].	^explanation</body><body package="VRUIPainter">model	^model</body><body package="VRUIPainter">model: aValue	model := aValue</body><body package="VRUIPainter">setting	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."		setting isNil 		ifTrue: [setting:= ((AspectAdaptor subjectChannel: self model			sendsUpdates: true)	forAspect: #setting)].	^setting</body></methods><methods><class-id>UI.VRFormSettingsTool</class-id> <category>api</category><body package="VRUIPainter">save	"save the settings"	self modelValue save</body></methods><methods><class-id>UI.VRFormSettingsTool</class-id> <category>initialize-release</category><body package="VRUIPainter">initialize	"UIDefiner defined this method"	super initialize.	self model: VRFormSettingsModel new asValue.	self setting onChangeSend: #changedSetting to: self modelValue.	self current onChangeSend: #changedCurrent to: self modelValue.</body><body package="VRUIPainter">release	super release.	self setting retractInterestsFor: self modelValue.	self current retractInterestsFor: self modelValue</body></methods><methods><class-id>Kernel.BlockClosure</class-id> <category>aspect creation</category><body package="VRUIPainter">doUIBindingCodeUsingModel:  targetModelClass forAspect: methodSymbol doBuffering: aBoolean onto: stream	stream nextPutAll: methodSymbol asString.	stream cr; cr; tab.	stream nextPutAll: '"VRUIDefiner Generated Method.'.	stream cr; tab.	stream nextPutAll: 'Generated at: ', Timestamp now printString.	stream nextPutAll: '"'; cr; cr; tab.	targetModelClass isNil		ifFalse: [stream nextPutAll: 'self model value ', methodSymbol asString]		ifTrue: [stream nextPutAll: '^self'].	^'actions'</body><body package="VRUIPainter">shouldGenerateModelCall	^true</body><body package="VRUIPainter">shouldHaveIVarBindingInUI	^false</body></methods><methods><class-id>Core.Object</class-id> <category>aspect creation</category><body package="VRUIPainter">shouldGenerateModelCall	^false</body><body package="VRUIPainter">shouldHaveIVarBindingInUI	^false</body></methods><methods><class-id>UI.ValueModel</class-id> <category>aspect creation</category><body package="VRUIPainter">shouldGenerateModelCall	^false</body><body package="VRUIPainter">shouldHaveIVarBindingInUI	^true</body></methods><methods><class-id>UI.VRFormGenerator class</class-id> <category>As yet unclassified</category><body package="VRUIPainter">canvasEditSpec	"UIPainter new openOnClass: self andSelector: #canvasEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Form Generator' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 102 64 388 175 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0229508 0 0.0614035 ) 					#name: #canvasClassLabel 					#label: 'Canvas Class' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.321311 0 0.0350877 0 0.895082 0 0.27193 ) 					#name: #canvasClassName 					#model: #canvasClassName 					#type: #symbol ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0229508 0 0.368421 ) 					#name: #canvasSpecLabel 					#label: 'Canvas Spec' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.321311 0 0.342105 0 0.895082 0 0.578947 ) 					#name: #canvasSpecName 					#model: #canvasSpecName 					#type: #symbol ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.0229508 0 0.666667 0 0.370492 0 0.973684 ) 					#name: #saveCanvasInfo 					#model: #saveCanvasInfo 					#label: '&amp;Save Info' 					#defaultable: true ) ) ) )</body><body package="VRUIPainter">formatMenuSpec	"UIPainter new openOnClass: self andSelector: #formatMenuSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Form Generator' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 142 286 406 332 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#MenuButtonSpec 					#layout: #(#LayoutFrame 0 0.0194805 0 0.103448 0 0.863636 0 0.362069 ) 					#name: #formatMenu 					#model: #format 					#menu: #formatMenu ) ) ) )</body><body package="VRUIPainter">menuBar	"UIMenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: '&amp;File' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;Generate' 							#value: #generate ) 						#(#MenuItem 							#rawLabel: '&amp;Settings' 							#value: #settings ) 						#(#MenuItem 							#rawLabel: 'E&amp;xit' 							#value: #closeRequest ) ) #(1 1 1 ) nil ) ) 			#(#MenuItem 				#rawLabel: '&amp;Help' 				#submenu: #(#Menu #(						#(#MenuItem 							#rawLabel: '&amp;About' 							#value: #about ) ) #(1 ) nil ) ) ) #(2 ) nil ) decodeAsLiteralArray</body><body package="VRUIPainter">radioEditControls	"UIPainter new openOnClass: self andSelector: #radioEditControls"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Form Generator' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 243 232 557 368 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0127389 0 0.404412 ) 					#name: #radioSelect 					#label: 'Select' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.159236 0 0.382353 0 0.538217 0 0.573529 ) 					#name: #select 					#model: #select 					#type: #symbol ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 0 0.570064 0 0.0367647 0 0.977707 0 0.926471 ) 					#name: #selectList 					#model: #selectList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 0 0.0127389 0 0.0882353 ) 					#name: #radioAspect 					#label: 'Aspect' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.159236 0 0.0661765 0 0.538217 0 0.257353 ) 					#name: #aspect 					#model: #aspect 					#isReadOnly: true 					#type: #symbol ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.0127389 0 0.588235 0 0.200637 0 0.764706 ) 					#name: #addSelect 					#model: #addSelect 					#label: 'Add' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.219745 0 0.588235 0 0.407643 0 0.764706 ) 					#name: #removeSelect 					#model: #removeSelect 					#label: 'Remove' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.0127389 0 0.757353 0 0.563694 0 0.926471 ) 					#name: #saveRadioInfo 					#model: #saveRadioInfo 					#label: 'Save' 					#defaultable: true ) ) ) )</body><body package="VRUIPainter">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{FullSpec} 		#window: 		#(#{WindowSpec} 			#label: 'Form Generator' 			#min: #(#{Point} 40 20 ) 			#bounds: #(#{Rectangle} 53 60 649 533 ) 			#flags: 4 			#menu: #menuBar 			#isEventDriven: true ) 		#component: 		#(#{SpecCollection} 			#collection: #(				#(#{SequenceViewSpec} 					#layout: #(#{LayoutFrame} 0 0.0033557 0 0.112051 0 0.454698 0 0.401691 ) 					#name: #variableList 					#model: #variableList 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #checkMark ) 				#(#{SequenceViewSpec} 					#layout: #(#{LayoutFrame} 0 0.538591 0 0.112051 0 0.989933 0 0.401691 ) 					#name: #genVariableList 					#model: #genVariableList 					#multipleSelections: false 					#useModifierKeys: true 					#selectionType: #checkMark ) 				#(#{LabelSpec} 					#layout: #(#{LayoutOrigin} 0 0.00838926 0 0.730337 ) 					#name: #category 					#label: 'Category' ) 				#(#{LabelSpec} 					#layout: #(#{LayoutOrigin} 0 0.00838926 0 0.644944 ) 					#name: #ifcClassLabel 					#label: 'IFC Class' ) 				#(#{CompositeSpecCollection} 					#collection: #(						#(#{ActionButtonSpec} 							#layout: #(#{LayoutFrame} 0 0.0 0 0.0 0 0.98 0 0.425287 ) 							#name: #take 							#model: #take 							#label: '&amp;&gt;&gt;' 							#defaultable: true ) 						#(#{ActionButtonSpec} 							#layout: #(#{LayoutFrame} 0 0.0 0 0.574713 0 1.0 0 1.0 ) 							#name: #leave 							#model: #leave 							#label: '&amp;&lt;&lt;' 							#defaultable: true ) ) 					#compositeSpec: 					#(#{CompositeSpec} 						#layout: #(#{Rectangle} 271 78 321 165 ) ) ) 				#(#{LabelSpec} 					#layout: #(#{LayoutOrigin} 0 0.0033557 0 0.0274841 ) 					#name: #domainModelLabel 					#label: 'Domain Model' ) 				#(#{InputFieldSpec} 					#layout: #(#{LayoutFrame} 0 0.194631 0 0.0169133 0 0.75 0 0.0824524 ) 					#name: #domainModel 					#model: #domainModel 					#type: #symbol ) 				#(#{InputFieldSpec} 					#layout: #(#{LayoutFrame} 0 0.17953 0 0.651685 0 0.528523 0 0.71236 ) 					#name: #ifc 					#model: #ifc 					#type: #symbol ) 				#(#{InputFieldSpec} 					#layout: #(#{LayoutFrame} 0 0.17953 0 0.72809 0 0.528523 0 0.786517 ) 					#name: #category 					#model: #category ) 				#(#{CheckBoxSpec} 					#layout: #(#{LayoutOrigin} 0 0.224832 0 0.862579 ) 					#name: #isTabular 					#model: #isTabular 					#label: 'Tabular ?' ) 				#(#{CheckBoxSpec} 					#layout: #(#{LayoutOrigin} 0 0.22651 0 0.913319 ) 					#name: #shouldUseFramework 					#model: #shouldUseFramework 					#label: 'Use Extended Framework' ) 				#(#{ActionButtonSpec} 					#layout: #(#{LayoutFrame} 0 0.0033557 0 0.890063 0 0.184564 0 0.97463 ) 					#name: #generate 					#model: #generate 					#label: '&amp;Generate' 					#defaultable: true ) 				#(#{ActionButtonSpec} 					#layout: #(#{LayoutFrame} 0 0.802013 0 0.890063 0 0.983221 0 0.97463 ) 					#name: #exit 					#model: #closeRequest 					#label: 'E&amp;xit' 					#defaultable: true ) 				#(#{SubCanvasSpec} 					#layout: #(#{LayoutFrame} 0 0.0033557 0 0.388764 0 0.533557 0 0.685393 ) 					#name: #editingControls 					#flags: 0 					#majorKey: #VRFormGenerator 					#minorKey: #formatMenuSpec 					#clientKey: #editingControls ) 				#(#{CompositeSpecCollection} 					#collection: #(						#(#{RadioButtonSpec} 							#layout: #(#{LayoutOrigin} 0 0 0 0 ) 							#name: #stringType 							#model: #type 							#label: 'String' 							#select: #string ) 						#(#{RadioButtonSpec} 							#layout: #(#{LayoutOrigin} 0 0.677536 0 0.0 ) 							#name: #symbolType 							#model: #type 							#label: 'Symbol' 							#select: #symbol ) 						#(#{RadioButtonSpec} 							#layout: #(#{LayoutOrigin} 0 0.0 0 0.145985 ) 							#name: #textType 							#model: #type 							#label: 'Text' 							#select: #text ) 						#(#{RadioButtonSpec} 							#layout: #(#{LayoutOrigin} 0 0.677536 0 0.145985 ) 							#name: #numberType 							#model: #type 							#label: 'Number' 							#select: #number ) 						#(#{RadioButtonSpec} 							#layout: #(#{LayoutOrigin} 0 0.0 0 0.284672 ) 							#name: #passwordType 							#model: #type 							#label: 'Password' 							#select: #password ) 						#(#{RadioButtonSpec} 							#layout: #(#{LayoutOrigin} 0 0.677536 0 0.284672 ) 							#name: #dateType 							#model: #type 							#label: 'Date' 							#select: #date ) 						#(#{RadioButtonSpec} 							#layout: #(#{LayoutOrigin} 0 0.0 0 0.430657 ) 							#name: #timeType 							#model: #type 							#label: 'Time' 							#select: #time ) 						#(#{RadioButtonSpec} 							#layout: #(#{LayoutOrigin} 0 0.677536 0 0.430657 ) 							#name: #timestampType 							#model: #type 							#label: 'Timestamp' 							#select: #timestamp ) 						#(#{RadioButtonSpec} 							#layout: #(#{LayoutOrigin} 0 0.0 0 0.576642 ) 							#name: #fixedPointType 							#model: #type 							#label: 'Fixed Point' 							#select: #fixedpoint ) 						#(#{RadioButtonSpec} 							#layout: #(#{LayoutOrigin} 0 0.677536 0 0.576642 ) 							#name: #booleanType 							#model: #type 							#label: 'Boolean' 							#select: #boolean ) 						#(#{RadioButtonSpec} 							#layout: #(#{LayoutOrigin} 0 0.0 0 0.715328 ) 							#name: #collectionType 							#model: #type 							#label: 'Collection' 							#select: #collection ) 						#(#{RadioButtonSpec} 							#layout: #(#{LayoutOrigin} 0 0.677536 0 0.715328 ) 							#name: #subcanvasType 							#model: #type 							#label: 'Subcanvas' 							#select: #subcanvas ) 						#(#{RadioButtonSpec} 							#layout: #(#{LayoutOrigin} 0 0.0 0 0.861314 ) 							#name: #radioType 							#model: #type 							#label: 'Radio Buttons' 							#select: #radio ) 						#(#{RadioButtonSpec} 							#layout: #(#{LayoutOrigin} 0 0.677536 0 0.861314 ) 							#name: #menuButtonType 							#model: #type 							#label: 'MenuButton' 							#select: #menuButton ) ) 					#compositeSpec: 					#(#{CompositeSpec} 						#layout: #(#{Rectangle} 319 188 595 389 ) ) ) 				#(#{MenuButtonSpec} 					#layout: #(#{LayoutFrame} 0 0.177852 0 0.795506 0 0.533557 0 0.865168 ) 					#name: #nameSpace 					#model: #nameSpace 					#menu: #nameSpaceMenu ) 				#(#{LabelSpec} 					#layout: #(#{LayoutOrigin} 0 0.00838926 0 0.806742 ) 					#name: #nameSpaceLabel 					#label: 'Name Space' ) ) ) )</body></methods><methods><class-id>UI.VRFormSettingsTool class</class-id> <category>As yet unclassified</category><body package="VRUIPainter">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Form Generator Settings' 			#min: #(#Point 425 319 ) 			#max: #(#Point 425 319 ) 			#bounds: #(#Rectangle 188 141 613 460 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#RadioButtonSpec 					#layout: #(#Point 8 101 ) 					#name: #inputWidth 					#model: #setting 					#label: 'InputField Width' 					#select: #inputWidth ) 				#(#RadioButtonSpec 					#layout: #(#Point 8 131 ) 					#name: #inputHeight 					#model: #setting 					#label: 'InputField Height' 					#select: #inputHeight ) 				#(#RadioButtonSpec 					#layout: #(#Point 8 162 ) 					#name: #labelSeparation 					#model: #setting 					#label: 'Label/Input Width Separation' 					#select: #labelSeparation ) 				#(#RadioButtonSpec 					#layout: #(#Point 8 192 ) 					#name: #widgetSeparation 					#model: #setting 					#label: 'Widget Vertical Separation' 					#select: #widgetSeparation ) 				#(#RadioButtonSpec 					#layout: #(#Point 8 222 ) 					#name: #rectangleHeight 					#model: #setting 					#label: 'Large Widget Height' 					#select: #rectangleHeight ) 				#(#RadioButtonSpec 					#layout: #(#Point 8 252 ) 					#name: #rectangleWidth 					#model: #setting 					#label: 'Large Widget Height' 					#select: #rectangleWidth ) 				#(#RadioButtonSpec 					#layout: #(#Point 8 283 ) 					#name: #widgetXStart 					#model: #setting 					#label: 'Widget Indentation' 					#select: #widgetXStart ) 				#(#LabelSpec 					#layout: #(#Point 150 100 ) 					#name: #currentLabel 					#label: 'Current Setting' ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 258 98 400 123 ) 					#name: #current 					#model: #current 					#type: #number 					#formatString: '0' ) 				#(#TextEditorSpec 					#layout: #(#Rectangle 0 0 424 71 ) 					#name: #explanation 					#flags: 12 					#model: #explanation 					#isReadOnly: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 312 277 419 313 ) 					#name: #save 					#model: #save 					#label: '&amp;Save' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>vr-enhance</category><body package="VRUIPainter">createForm     &lt;menuItem: 'Create Form'          nameKey: nil          menu: #(#classMenu)          position: 40.2 &gt; 	| sels cls |	sels := state classesAndNameSpaces.	sels size &gt; 1		ifTrue: [Dialog warn: 'Select one Class and try again'.				^self].	cls := sels first.	UI.VRFormGenerator on: cls</body><body package="VRUIPainter">genAccessors     &lt;menuItem: 'Gen Accessors'          nameKey: nil          menu: #(#classMenu)          position: 40.1 &gt; 	| sels cls |	sels := state classesAndNameSpaces.	sels size &gt; 1		ifTrue: [Dialog warn: 'Select one Class and try again'.				^self].	cls := sels first.	CodingAssistant openFor: cls</body></methods><methods><class-id>Tools.ClassesBrowserHelper</class-id> <category>As yet unclassified</category><body package="VRUIPainter">createForm     &lt;menuItem: 'create form'          nameKey: nil          menu: #(#listMenu)          position: 40.2 &gt;	UI.VRFormGenerator on: self module selection</body><body package="VRUIPainter">genAccessors     &lt;menuItem: 'gen accessors'          nameKey: nil          menu: #(#listMenu)          position: 40.1 &gt;	start := self module selection.	(start respondsTo: #actual)		ifTrue: [start := start actual].	CodingAssistant openFor: start</body><body package="VRUIPainter">genAllAccessorsAndMutators     &lt;menuItem: 'gen all accessors'          nameKey: nil          menu: #(#listMenu)          position: 40.2 &gt;	(AccessorDefiner on: self module selection) createAccessors</body></methods><initialize><class-id>UI.VRFormSpecGenerator</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>VRDetailForm</name><environment>UI</environment><super>UI.VRDBApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>editMode parent owner windowLabel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Form-Deployment</category><attributes><package>VRForms</package></attributes></class><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>Tools.ClassesBrowserHelper</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>module selectionId attribute lastSelection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>As yet unclassified</category></class><class><name>ExtendedModel</name><environment>Core</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Abstract-Models-Base</category><attributes><package>VRForms</package></attributes></class><class><name>BlockClosure</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>method outerContext copiedValues </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>ValueModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Support</category><attributes><package>Interface-Support</package></attributes></class></st-source>