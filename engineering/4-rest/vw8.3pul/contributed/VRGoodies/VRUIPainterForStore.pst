<?xml version="1.0"?><st-source><!-- Name: VRUIPainterForStoreNotice: Copyright © 2002 Cincom Systems, Inc.  All Rights Reserved.DbIdentifier: bear73DbTrace: 17434DevelopmentPrerequisites: #(#(#any 'StoreBase' ''))PackageName: VRUIPainterForStoreParcel: #('VRUIPainterForStore')PrerequisiteParcels: #(#('StoreBase' ''))PrintStringCache: (7.0,jamesr)Version: 7Date: 10:09:54 am June 3, 2002 --><time-stamp>From VisualWorks®, Pre-Release 7 of June 3, 2002 on June 3, 2002 at 10:09:54 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>PublishAsParcelDialog</name><environment>Store</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pundle bundleStructure databaseLinks parcelDirectory parcelSave parcelSaveSource parcelHideSource parcelPadded parcelRepublish parcelBackup parcelOverwrite publishAsLoader </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Store-UI</category><attributes><package>VRUIPainterForStore</package></attributes></class><methods><class-id>Store.PublishAsParcelDialog</class-id> <category>interface opening</category><body package="VRUIPainterForStore">postBuildWith: bldr	super postBuildWith: bldr.	( pundle isBundle not)		ifTrue: [(bldr componentAt: #publishAsLoader) disable].</body></methods><methods><class-id>Store.PublishAsParcelDialog</class-id> <category>aspects</category><body package="VRUIPainterForStore">publishAsLoader	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^publishAsLoader isNil		ifTrue:			[publishAsLoader := false asValue]		ifFalse:			[publishAsLoader]</body></methods><methods><class-id>Store.PublishAsParcelDialog class</class-id> <category>interface opening</category><body package="VRUIPainterForStore">publishAsParcel: aPundle	"Open a dialog for package/bundle parcel publishing."	"self publishAsParcel: ( Registry packageNamed: 'Store-UI' )"	| dialog filename |	aPundle hasCodeOverridden		ifTrue: [ ^Dialog warn: 'Parcels cannot be saved with overrides.' ].	( aPundle relatedParcel ~~ nil and: [ aPundle relatedParcel hasUninstalledCode ] )		ifTrue: [ ^Dialog warn: 'Parcels cannot be saved with uninstalled code.' ].	dialog := self new.	dialog pundle: aPundle.	dialog open.	dialog accept value		ifFalse: [ ^nil ].	 	filename := Filename named: ( dialog parcelDirectory value ).	aPundle 		saveAsParcel: filename 		saveStructure: dialog bundleStructure value  		saveLinks: dialog databaseLinks value		parcelOptions: dialog options		asLoader: dialog publishAsLoader value</body></methods><methods><class-id>Store.PublishAsParcelDialog class</class-id> <category>interface specs</category><body package="VRUIPainterForStore">windowSpec"	^PublishPundleDialog parcelSpec"	^self vrParcelSpec</body></methods><methods><class-id>Kernel.CodeComponent</class-id> <category>load/unload</category><body package="VRUIPainterForStore">getDeployPrereqsFrom: containedPackages	| list |	list := OrderedCollection new.	containedPackages do: [:each | | array |		each isBundle		ifFalse: [array := Array					with: each name					with: ''.			list add: array]].	^list asArray</body><body package="VRUIPainterForStore">getDevPrereqsFrom: containedPackages	| list |	list := OrderedCollection new.	containedPackages do: [:each | | array |		each isBundle			ifFalse: [array := Array						with: #any						with: each name						with: ''.				list add: array]].	^list asArray</body><body package="VRUIPainterForStore">parcelOutTo: parcelFileName sourceFileName: sourceFileName parcelOptions: parcelOptions	"Generic publish the parcel with sources. Don't republish."	| cWriter existing sfn |	cWriter := CodeWriter new.	"fetch the parcel in the image if it exists."	( existing := self relatedParcel ) == nil 		ifTrue: [ existing := self ].	(parcelOptions at: #asLoader ifAbsent: [false])		ifTrue: [^self saveAsLoader].	self propertyAt: #padded put: ( parcelOptions at: #padded ifAbsent: nil ).	sfn := ( parcelOptions at: #parcelSaveSource ifAbsent: true )		ifTrue: [ sourceFileName asLogicalFileSpecification ]		ifFalse: [ nil ].	Cursor wait showWhile: [ self prepareCodeWriter: cWriter ].	[ cWriter 		writeToParcelFileNamed: parcelFileName asLogicalFileSpecification		sourceFileNamed: sfn		oldSourceIndex: ( existing propertyAt: #sourceIndex ifAbsent: nil )		hideSource: ( parcelOptions at: #parcelHideSource ifAbsent: false )		republish: ( parcelOptions at: #parcelRepublish ifAbsent: false )		backup: ( parcelOptions at: #parcelBackup ifAbsent: false ).	] on: CodeWriter invalidTraceSignal		do: [ :ex | Parcel invalidNamedObjectSignal raiseWith: ex parameter ]</body><body package="VRUIPainterForStore">saveAsLoader	" create a temp new parcel, save it, drop from image "	| containedPackages newDev newDeploy pcl |	containedPackages := self allContainedItems.	newDev := self getDevPrereqsFrom: containedPackages.	newDeploy := self getDeployPrereqsFrom: containedPackages.	pcl := Parcel createParcelNamed: (self name, 'Loader').	pcl prerequisiteParcels: newDeploy.	pcl developmentPrerequisites: newDev.	[pcl saveParcelDialogFor: nil]		ensure: [pcl unload]</body></methods><methods><class-id>Store.PackageModel</class-id> <category>parcel support</category><body package="VRUIPainterForStore">saveAsParcel: fullPathName saveStructure: saveStructure saveLinks: saveLinks parcelOptions: aDictionary asLoader: aBoolean	"Save the receiver as a parcel -without creating the parcel in the image.	fullPathName is a directory/parcelName with no extension.	If saveStructure is meaningless for packages	If saveLinks is true, save the db link."	| dir pname |	pname := fullPathName tail.	dir := fullPathName directory.	dir exists 		ifFalse:			[ ( Dialog confirm: ( 'Create directory &lt;1s&gt;?' expandMacrosWith: dir asString ) )				ifFalse: [ ^self ].			dir makeDirectory.			].	properties at: #packageName put: name.	self		parcelOutTo: ( dir  construct: ( pname, '.pcl' ) ) asString		sourceFileName: ( dir construct: ( pname, '.pst' ) ) asString		parcelOptions: aDictionary.</body></methods><methods><class-id>Store.BundleModel</class-id> <category>parcel support</category><body package="VRUIPainterForStore">saveAsParcel: fullPathName saveStructure: saveStructure saveLinks: saveLinks parcelOptions: aDictionary asLoader: aBoolean	"save the bundle as a shell loader - all the contents as pre-reqs in order"	| dir link pname |	aDictionary at: #asLoader put: aBoolean.	link := saveLinks.	 ( saveLinks &amp; self hasBeenModified )		ifTrue: 			[ ( Dialog confirm: 				( '&lt;t&gt;&lt;1s&gt; has unpublished modifications.&lt;n&gt;This means that database links will not be included.&lt;ntttt&gt;Continue?'						 expandMacrosWith: name ) )					ifFalse: [ ^self ].			link := false.			].	pname := fullPathName tail.	dir := fullPathName directory.	dir exists 		ifFalse:			[ ( Dialog confirm: ( 'Create directory &lt;1s&gt;?' expandMacrosWith: dir asString ) )				ifFalse: [ ^self ].			dir makeDirectory.			].	properties 		at: #bundleName put: self name;		at: #parcelName put: pname.	saveStructure		ifTrue: [ properties at: #bundleStructure put: ( PundleForParcel from: self saveLinks: link ) ].	[ self		parcelOutTo: ( dir construct: ( pname, '.pcl' ) ) asString		sourceFileName: ( dir construct: ( pname, '.pst' ) ) asString		parcelOptions: aDictionary.	] ensure:		[ properties			removeKey: #bundleStructure ifAbsent: [ ];			removeKey: #bundleName ifAbsent: [ ].		].</body></methods><methods><class-id>Store.PublishAsParcelDialog class</class-id> <category>interface specs</category><body package="VRUIPainterForStore">vrParcelSpec	"UIPainter new openOnClass: self andSelector: #vrParcelSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Publish' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 512 288 984 768 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 4 0 5 0 -4 1 -39 1 ) 					#label: 'Parcel options' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 11 80 ) 					#name: #parcelWarningMessage 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #red ) ) 					#label: #parcelWarningMessage ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 11 25 ) 					#name: #parcelSave 					#model: #parcelSave 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #parcelSaveChanged ) 					#label: 'Publish Parcel' ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.LabelSpec} 							#layout: #(#{Core.Point} 0 3 ) 							#label: 'Parcel Path:' ) 						#(#{UI.InputFieldSpec} 							#layout: #(#{Graphics.LayoutFrame} 100 0 0 0 0 1 25 0 ) 							#name: #parcelDirectory 							#flags: 40 							#model: #parcelDirectory ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 11 0 50 0 -11 1 75 0 ) ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.GroupBoxSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0.0 0 1.0 0 1.0 ) 							#label: 'Store options' ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.0787037 0 0.253333 ) 							#name: #bundleStructure 							#model: #bundleStructure 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #bundleStructureChanged ) 							#label: 'Include bundle structure' ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.174699 0 0.537634 ) 							#name: #databaseLinks 							#model: #databaseLinks 							#label: 'With database links' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 15 0 0 0.333333 -5 0.5 75 0.333333 ) ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.GroupBoxSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0.0 0 1.0 0 1.0 ) 							#label: 'Source options' ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.0722892 0 0.198276 ) 							#name: #parcelSaveSource 							#model: #parcelSaveSource 							#callbacksSpec: 							#(#{UI.UIEventCallbackSubSpec} 								#valueChangeSelector: #parcelSaveSourceChanged ) 							#label: 'Save source file' ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.174699 0 0.422414 ) 							#name: #parcelHideSource 							#model: #parcelHideSource 							#label: 'Hide source on load' ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.174699 0 0.681034 ) 							#name: #parcelPadded 							#model: #parcelPadded 							#label: 'Pad source' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 15 0 0 0.583333 -5 0.5 80 0.583333 ) ) ) 				#(#{UI.CompositeSpecCollection} 					#collection: #(						#(#{UI.GroupBoxSpec} 							#layout: #(#{Graphics.LayoutFrame} 0 0.0 0 0.0 0 1.0 0 1.0 ) 							#label: 'Miscellaeonous Options' ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.0843373 0 0.2 ) 							#name: #parcelRepublish 							#model: #parcelRepublish 							#label: 'Republish' ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.0843373 0 0.448 ) 							#name: #parcelBackup 							#model: #parcelBackup 							#label: 'Backup' ) 						#(#{UI.CheckBoxSpec} 							#layout: #(#{Graphics.LayoutOrigin} 0 0.0843373 0 0.712 ) 							#name: #parcelOverwrite 							#model: #parcelOverwrite 							#label: 'Overwrite existing files' ) ) 					#compositeSpec: 					#(#{UI.CompositeSpec} 						#layout: #(#{Graphics.LayoutFrame} 5 0.5 0 0.583333 -15 1 80 0.583333 ) ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 -5 1 0 1 ) 					#model: #accept 					#label: 'Publish' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 -5 1 0.5 1 ) 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} -10 1 -5 1 1 1 ) 					#model: #helpAction 					#label: 'Help' 					#defaultable: true ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 15 374 ) 					#name: #publishAsLoader 					#model: #publishAsLoader 					#label: 'Publish As Loader' ) ) ) )</body></methods><methods><class-id>Store.PackageClassesBrowserHelper</class-id> <category>ui-extensions</category><body package="VRUIPainterForStore">createForm     &lt;menuItem: 'create form'          nameKey: nil          menu: #(#listMenu)          position: 40.2 &gt;	UI.VRFormGenerator on: self module selection binding value</body><body package="VRUIPainterForStore">genAccessors     &lt;menuItem: 'gen accessors'          nameKey: nil          menu: #(#listMenu)          position: 40.1 &gt;	CodingAssistant openFor: self module selection actual</body><body package="VRUIPainterForStore">genAllAccessorsAndMutators     &lt;menuItem: 'gen all accessors'          nameKey: nil          menu: #(#listMenu)          position: 40.2 &gt;	(AccessorDefiner on: self module selection actual) createAccessors</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category><attributes><package>Interface-Dialogs</package></attributes></class><class><name>CodeComponent</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name properties </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Code Components</category><attributes><package>System-Code Components</package></attributes></class><class><name>PackageModel</name><environment>Store</environment><super>Store.PundleModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>models </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Store-IMG-Pundles</category><attributes><package>Store-IMG-Pundles</package></attributes></class><class><name>BundleModel</name><environment>Store</environment><super>Store.PundleModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Store-IMG-Pundles</category><attributes><package>Store-IMG-Pundles</package></attributes></class><class><name>PackageClassesBrowserHelper</name><environment>Store</environment><super>Tools.NameSpaceCategoryBrowserHelper</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Store-UI-Browser</category><attributes><package>Store-UI-Browser</package></attributes></class></st-source>