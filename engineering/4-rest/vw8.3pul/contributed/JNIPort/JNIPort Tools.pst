<?xml version="1.0"?><st-source><!-- Name: JNIPort ToolsNotice: Copyright © 2006-2014 Joachim GeidelPortions of this software created by Chris Uppal are © Chris Uppal, 2002-2007.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.- - Portions of this software which were created by Chris Uppal are covered by Chris Uppal's  license:"The terms under which you may use this software are:	You must not claim that you wrote it.	You must not claim that you own it.	You use it at your own risk.I'd appreciate it if you didn't distribute modified versions without at least trying to tell me about the changes you thought worthwhile.	-  chris"BundleName: JNIPort ToolsBundleStructure: a Store.BundleForParcelComment: The bundle JNIPort Tools contains tool support for JNIPort. Currently it contains a package with browser icons and inspector additions for JNIPort classes and a package with an interactive settings tool.This bundle is part of JNIPort and not intended to be used in isolation. If you want to use JNIPort, load the bundle JNIPort.DevelopmentPrerequisites: #(#(#any 'Browser-BrowserUI' '') #(#any 'Browser-ChangeObjects' '') #(#any 'Tools-Settings' '') #(#any 'Tools-Trippy' '') #(#any 'ExtraEmphases' '') #(#any 'SUnitToo(ls)' '') #(#any 'JNIPort' ''))DisregardedPrerequisites: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'JNIPort-Namespace' #componentType #package) #(#name 'JNIPort-GhostClasses' #componentType #package))Parcel: nilParcelName: JNIPort ToolsPrerequisiteDescriptions: #(#(#name 'Browser-BrowserUI' #componentType #package) #(#name 'Browser-ChangeObjects' #componentType #package) #(#name 'Tools-Settings' #componentType #package) #(#name 'Tools-Trippy' #componentType #package) #(#name 'ExtraEmphases' #componentType #package) #(#name 'SUnitToo(ls)' #componentType #package) #(#name 'JNIPort' #componentType #bundle))PrerequisiteParcels: #(#('Browser-BrowserUI' '') #('Browser-ChangeObjects' '') #('Tools-Settings' '') #('Tools-Trippy' '') #('ExtraEmphases' '') #('SUnitToo(ls)' '') #('JNIPort' '') #('Browser-BrowserUI' '') #('Browser-ChangeObjects' '') #('Tools-Trippy' '') #('JNIPort' '') #('ExtraEmphases' '') #('Tools-Settings' ''))Version: 3.0a1Date: 5:10:20 PM August 22, 2014 --><time-stamp>From VisualWorks®, Pre-Release 8.0 (aug14.2) of 8 August 2014 on 22 August 2014 at 17:10:20</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>DirectActionSetting</name><environment>JNIPort</environment><super>Tools.SettingsPageDecoration</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label action helpText </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings</category><attributes><package>JNIPort Tools-Settings</package></attributes></class><comment><class-id>JNIPort.DirectActionSetting</class-id><body>DirectActionSettings are not settings in the true sense of the word. They are rendered as an ActionButton (see DirectActionSettingModule) and execute an arbitrary block when the button is pressed. They do not represent values that can be changed by the user and that can be written out to a file to be loaded into another image. However, they are settings in the sense that they are found by the framework and are picked up and rendered by auto-generated settings pages.Instance Variables:	action	&lt;BlockClosure&gt;	The action which is executed by the instance	helpText	&lt;CharacterArray&gt;	Help text for the action	label	&lt;CharacterArray&gt;	Label for the ActionButton</body></comment><class><name>DirectActionSettingModule</name><environment>JNIPort</environment><super>Tools.ModularSettingsPageModule</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-UI</category><attributes><package>JNIPort Tools-Settings</package></attributes></class><comment><class-id>JNIPort.DirectActionSettingModule</class-id><body>DirectActionSettingModule is a module rendering as a label with a button that executes an arbitrary block when pressed.</body></comment><class><name>JavaClassBrowser</name><environment>JNIPort</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classSelector sideHolder textHolder methodListHolder selectedClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort VW Tool Extensions</category><attributes><package>JNIPort VW Tool Extensions</package></attributes></class><class><name>JNIPortSettingsDomain</name><environment>JNIPort</environment><super>Tools.SettingsDomain</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database</category><attributes><package>JNIPort Tools-Settings</package></attributes></class><comment><class-id>JNIPort.JNIPortSettingsDomain</class-id><body>JNIPortSettingsDomain generates the pages for all settings of JNIPort. It generates pages and settings for all predefined JVMSettings on the fly. This is not supported by the pragma mechanism used in the superclass SettingsDomain, which is also not capable of accessing dynamically generated settings for import and export to XML files. Currently, import and export are restricted to the Registry, which is the Windows registry on Windows, and a file based registry on all other platforms. XML storage is not yet supported.</body></comment><class><name>JNIPortSettingsManager</name><environment>JNIPort</environment><super>Tools.SettingsManager</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings</category><attributes><package>JNIPort Tools-Settings</package></attributes></class><comment><class-id>JNIPort.JNIPortSettingsManager</class-id><body>JNIPortSettingsManager implements the GUI for the JNIPort settings tool.</body></comment><class><name>JavaWrapperClassCreationDialog</name><environment>JNIPort</environment><super>Tools.DefinitionCreationDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclassModule createInitializeHolder defineSubclassResponsibilitiesHolder tabHolder lastSubBuilder javaClassNameHolder wrapperTypeHolder </inst-vars><class-inst-vars></class-inst-vars><imports>			private Refactory.Browser.Navigator			</imports><category>Tools-Programming</category><attributes><package>JNIPort VW Tool Extensions</package></attributes></class><comment><class-id>JNIPort.JavaWrapperClassCreationDialog</class-id><body>JavaWrapperClassCreationDialog provides the user with an interface to specify properties of a wrapper class for a Java class about to be created. It also performs basic input validation, such as testing that all the objects referenced by the user do exist, none of the instance variable names are already used by the superclass, etc.However, the dialog itself does not create a class. Creating the class is the responsibility of the creator of the dialog. The normal usage protocol is as follows. The dialog is created using the usual #new message. The client can then provide initial values of the namespace, superclass, etc. (See the methods in the 'initialize-release' protocol). The dialog is then opened by sending the #open message. The message returns after the user closes the dialog. If the return value is true, the user clicked the OK button, and it is now the responsibility of the caller to create a class with all the user-specified parameters (see the 'accessing' protocol).The class variables CreateInitializer and CreateSubclassResponsibilities maintain the last last accepted state of the Create checkboxes.Instance Variables:	wrapperTypeHolder	&lt;ValueHolder&gt;	A value holder with the current state of the wrapper type radio buttons.	createInitializeHolder	&lt;ValueHolder&gt;	A value holder with the current state of the Create Initializer check box.	defineSubclassResponsibilitiesHolder	&lt;ValueHolder&gt;	A value holder with the current state of the Create Subclass Responsibilities check box.	lastSubBuilder	&lt;UIBuilder&gt;	The builder used to build the last page (that is, the current page) of the dialog, used to access the widgets on the current page.	superclassModule	&lt;EntryWithPasteButtonModule&gt;	The module that implements the superclass name input field and browse button.	tabHolder 	&lt;SelectionInList&gt; A SelectionInList with the labels for the tabs in the dialog's notebookClass Variables	CreateInitializer 	&lt;Booelan&gt;	The last accepted state of the create initializer checkbox	CreateSubclassResponsibilities	&lt;Boolean&gt;	The last accepted state of the create subclass reponsibilities checkbox</body></comment><class><name>StaticJNIPortTreeModelExample</name><environment>JNIPort</environment><super>JNIPort.StaticJavaLangObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CU Java Examples</category><attributes><package>CU Java Examples</package></attributes></class><comment><class-id>JNIPort.StaticJNIPortTreeModelExample</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortToolsSubsystem</name><environment>JNIPort</environment><super>Core.Subsystem</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>JNIPort Tools-Settings</package></attributes></class><comment><class-id>JNIPort.JNIPortToolsSubsystem</class-id><body>The JNIPortToolsSubsystem is responsible for refreshing open tools upon image startup.</body></comment><class><name>GhostMethodDecompiler</name><environment>JNIPort</environment><super>Kernel.Decompiler</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Compiler-Public Access</category><attributes><package>JNIPort VW Tool Extensions</package></attributes></class><comment><class-id>JNIPort.GhostMethodDecompiler</class-id><body>A GhostMethodDecompiler can handle methods where a literal has been replaced by an arbitrary object. A normal Decompiler would try to write the storeString of these embedded objects in the decompiled source code. For non-literal objects, the storeString can be very large, and the resulting method source would evoke the misleading impression that the message sends in the storeString are part of the method. A GhostMethodDecompiler will produce a surrogate literal (a String) instead of a storeString for an embedded object.</body></comment><class><name>EmbeddedValueNode</name><environment>JNIPort</environment><super>Kernel.LiteralNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Compiler-Program Objects</category><attributes><package>JNIPort VW Tool Extensions</package></attributes></class><comment><class-id>JNIPort.EmbeddedValueNode</class-id><body>An EmbeddedValueNode represents an non-literal object which has been embedded in a CompiledMethod in the same way as a literal. EmbeddedLiteralNodes don't try to produce the storeString of the embedded object when printing their value on the Stream which assembles the decompiled source code of a method. Instead, they produce a surrogate literal ('&lt;&lt;embedded object&gt;&gt;') followed by a comment containing the printString of the embedded object.</body></comment><shared-variable><name>CreateSubclassResponsibilities</name><environment>JNIPort.JavaWrapperClassCreationDialog</environment><private>false</private><constant>false</constant><category>defaults</category><initializer>true</initializer><attributes><package>JNIPort VW Tool Extensions</package></attributes></shared-variable><shared-variable><name>CreateInitializer</name><environment>JNIPort.JavaWrapperClassCreationDialog</environment><private>false</private><constant>false</constant><category>defaults</category><initializer>true</initializer><attributes><package>JNIPort VW Tool Extensions</package></attributes></shared-variable><methods><class-id>JNIPort.DirectActionSetting</class-id> <category>persistence</category><body package="JNIPort Tools-Settings">addStateXmlElementsTo: anElement	"Do nothing"</body><body package="JNIPort Tools-Settings">restoreFrom: aSettingSnapshot	"Do nothing"</body></methods><methods><class-id>JNIPort.DirectActionSetting</class-id> <category>accessing</category><body package="JNIPort Tools-Settings">action: aBlockLikeThing 	"aBlockLikeThing must understand #value which will be sent when the action button corresponding to this 'setting' is pressed."	action := aBlockLikeThing</body><body package="JNIPort Tools-Settings">helpText: aStringOrUserMessage	helpText := aStringOrUserMessage</body><body package="JNIPort Tools-Settings">label	^label</body><body package="JNIPort Tools-Settings">label: aStringOrUserMessage	label := aStringOrUserMessage</body></methods><methods><class-id>JNIPort.DirectActionSetting</class-id> <category>actions</category><body package="JNIPort Tools-Settings">executeAction	action value</body></methods><methods><class-id>JNIPort.DirectActionSetting</class-id> <category>As yet unclassified</category><body package="JNIPort Tools-Settings">helpText	^helpText asText</body></methods><methods><class-id>JNIPort.DirectActionSetting</class-id> <category>private</category><body package="JNIPort Tools-Settings">moduleClass	^DirectActionSettingModule</body></methods><methods><class-id>JNIPort.DirectActionSettingModule</class-id> <category>binding</category><body package="JNIPort Tools-Settings">labelFor: aSymbol	^self formattedLabel</body></methods><methods><class-id>JNIPort.DirectActionSettingModule</class-id> <category>accessing</category><body package="JNIPort Tools-Settings">formattedLabel	^self label</body></methods><methods><class-id>JNIPort.DirectActionSettingModule</class-id> <category>private</category><body package="JNIPort Tools-Settings">componentWithLabelID	^#executeButton</body></methods><methods><class-id>JNIPort.DirectActionSettingModule</class-id> <category>actions</category><body package="JNIPort Tools-Settings">execute	self setting executeAction</body></methods><methods><class-id>JNIPort.JavaClassBrowser</class-id> <category>updating</category><body package="JNIPort VW Tool Extensions">updateMethodList	self methodListHolder list: (selectedClass ifNil: [List new]				ifNotNil: [selectedClass methodDictionary keys asSortedCollection])</body><body package="JNIPort VW Tool Extensions">updateSelectedClass	selectedClass := (classSelector selection isNil 				or: [classSelector selection isString]) 					ifTrue: [nil]					ifFalse: 						[self showsInstanceSide 							ifTrue: [classSelector selection instanceClass]							ifFalse: [classSelector selection class]]</body><body package="JNIPort VW Tool Extensions">updateText	| selector method |	self methodListHolder selections size ~= 1 		ifTrue: [^self textHolder value: String new].	selector := self methodListHolder selections first.	method := selectedClass methodDictionary at: selector.	self textHolder 		value: (selectedClass sourceCodeForMethod: method at: selector)</body></methods><methods><class-id>JNIPort.JavaClassBrowser</class-id> <category>testing</category><body package="JNIPort VW Tool Extensions">showsInstanceSide	^self sideHolder value = #instance</body></methods><methods><class-id>JNIPort.JavaClassBrowser</class-id> <category>initialize-release</category><body package="JNIPort VW Tool Extensions">initialize	super initialize.	classSelector := self classSelectionModule</body></methods><methods><class-id>JNIPort.JavaClassBrowser</class-id> <category>interface opening</category><body package="JNIPort VW Tool Extensions">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	(self widgetAt: #classSelector) 		client: classSelector		spec: classSelector preferredWindowSpec		builder: aBuilder newSubBuilder.	classSelector selectionHolder onChangeSend: #classSelectionChanged to: self</body></methods><methods><class-id>JNIPort.JavaClassBrowser</class-id> <category>notifications</category><body package="JNIPort VW Tool Extensions">classSelectionChanged	self		updateSelectedClass;		updateMethodList;		updateText</body><body package="JNIPort VW Tool Extensions">methodSelectionChanged	self updateText</body><body package="JNIPort VW Tool Extensions">sideChanged	self		updateSelectedClass;		updateMethodList;		updateText</body></methods><methods><class-id>JNIPort.JavaClassBrowser</class-id> <category>private-menus</category><body package="JNIPort VW Tool Extensions">methodListMenu	^[Menu new]</body></methods><methods><class-id>JNIPort.JavaClassBrowser</class-id> <category>aspects</category><body package="JNIPort VW Tool Extensions">methodListHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^methodListHolder isNil		ifTrue:			[methodListHolder := MultiSelectionInList new]		ifFalse:			[methodListHolder]</body><body package="JNIPort VW Tool Extensions">sideHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^sideHolder isNil		ifTrue:			[sideHolder := #instance asValue]		ifFalse:			[sideHolder]</body><body package="JNIPort VW Tool Extensions">textHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^textHolder isNil		ifTrue:			[textHolder := String new asValue]		ifFalse:			[textHolder]</body></methods><methods><class-id>JNIPort.JavaClassBrowser</class-id> <category>actions</category><body package="JNIPort VW Tool Extensions">refresh	classSelector rootHolder: self buildClassAndInterfaceTree.	classSelector setupTreeHolder.	classSelector treeHolder list expandToLevel: 1.	self		updateSelectedClass;		updateMethodList;		updateText</body></methods><methods><class-id>JNIPort.JavaClassBrowser</class-id> <category>private</category><body package="JNIPort VW Tool Extensions">buildClassAndInterfaceTree	| interfaces interfaceTree classTree classes allClasses |	allClasses := JVM current				ifNil: [#()]				ifNotNil: 					[:jvm |					jvm classRegistry allClasses						asSortedCollection: [:class1 :class2 | class1 name &lt;= class2 name]].	classes := allClasses reject: [:each | each isAnInterface].	interfaces := allClasses select: [:each | each isAnInterface].	classTree := ArtificialTreeItemHolder hierarchicallyArranged: classes				usingDirectRelation: [:class1 :class2 | class2 javaSuperclass = class1].	classTree value: 'Classes'.	interfaceTree := ArtificialTreeItemHolder				hierarchicallyArranged: interfaces				usingDirectRelation: [:class1 :class2 | class2 isDerivedFrom: class1].	interfaceTree value: 'Interfaces'.	^(ArtificialTreeItemHolder new)		addChild: classTree;		addChild: interfaceTree;		yourself</body><body package="JNIPort VW Tool Extensions">classSelectionModule	"self new classSelectionModule open"	^(TreeSelectionModule new)		rootHolder: self buildClassAndInterfaceTree;		iconBlock: [:item | (item isNil or: [item isString]) ifFalse: [item toolListIcon]];		showRoot: false;		expandableRoots: true;		preExpandTo: 2;		yourself</body></methods><methods><class-id>JNIPort.JNIPortSettingsDomain</class-id> <category>accessing</category><body package="JNIPort Tools-Settings">reset	JVMSettings initializeSettingsTemplate.	super reset.</body></methods><methods><class-id>JNIPort.JNIPortSettingsDomain class</class-id> <category>private</category><body package="JNIPort Tools-Settings">addGhostClassSwitchesFor: aJVMSetting to: settings rootPageId: anArrayOfSymbols	| adaptor choices labels setting |	adaptor := PluggableAdaptor new				getBlock: [:m | aJVMSetting usesGhosts ifTrue: [#useGhostClasses] ifFalse: [#noGhostClasses]]				putBlock: [:m :v | aJVMSetting usesGhosts: v == #useGhostClasses]				updateBlock: [:m :a :p | true].	choices := #(#noGhostClasses #useGhostClasses).	labels := Array with: #noGhostClasses &lt;&lt; #jniport &gt;&gt; 'Do not generate ghost classes'				with: #useGhostClasses &lt;&lt; #jniport &gt;&gt; 'Generate ghost classes'.	setting := ((EnumerationSetting choices: choices labels: labels) on: adaptor)				id: (anArrayOfSymbols copyWith: #ghostClassSwitches);				label: #GhostClassGeneration &lt;&lt; #jniport &gt;&gt; 'Ghost class generation';				helpText: #GhostClassGenerationHelpText &lt;&lt; #jniport							&gt;&gt; 'Select if JNIPort should generate ghost classes.';				yourself.	settings add: setting</body><body package="JNIPort Tools-Settings">addNameSettingFor: aJVMSetting to: settings rootPageId: anArrayOfSymbols 	| setting |	setting := (StringSetting on: aJVMSetting aspect: #name)				id: anArrayOfSymbols , #(#name);				default: aJVMSetting name;				label: #Name &lt;&lt; #jniport &gt;&gt; 'Name';				helpText: #NameHelpText &lt;&lt; #jniport 							&gt;&gt; 'This is the name of the JVM settings.';				yourself.	setting target onChangeSend: #value		to: [JNIPortSettingsManager refreshInstancesOpenOn: self current].	settings add: setting</body></methods><methods><class-id>JNIPort.JNIPortSettingsDomain class</class-id> <category>settings</category><body package="JNIPort Tools-Settings">collectPages	| pages |	pages := super collectPages.	JVMSettings predefined keysAndValuesDo: 			[:index :jvmSettings | 			self 				addPagesFor: jvmSettings				position: index				to: pages].	^pages</body></methods><methods><class-id>JNIPort.JNIPortSettingsDomain class</class-id> <category>accessing</category><body package="JNIPort Tools-Settings">jniPortHelpText	"Answers an introductory help text for JNIPort."	| textBuilder |	textBuilder := TextStream on: String new.	textBuilder		emphasize: #bold;		nextPutAll: 'Prerequisites for using JNIPort';		deemphasize: #bold;		cr;		nextPutAll: 'Detailed documentation of JNIPort is available in the archive JNIPort_Docs.zip which accompanies the JNIPort distribution, and online on the JNIPort wiki:	http://jniport.wikispaces.com/To use all features of JNIPort, you will also need the files in the archive JNIPort_Extras.zip.';		emphasize: #bold;		nextPutAll: 'Configuring JNIPort';		deemphasize: #bold;		cr;		nextPutAll: 'To work with JNIPort, you have to create appropriate settings for the Java VM. This can be done programmatically, or by using the JNIPort Settings tool. For a quick start, it is best to create a setting with lazy ghost class generation. This property is set on the main page of a JVM setting. On the ''JNIPort settings'' page of a JVM setting, select JVMWithoutCallbacks as the JVM class if the Java classes you will be using do not call back into Smalltalk (this is the default). On the same page, select the JNILibrary class which corresponds to the Java environment which you are going to use. The default is a class which supports Sun''s Java Runtime Environment (JRE). It may be necessary to edit the filename of the Java VM, the Java VM''s version name and its type on the ''JNIPort settings'' page if JNIPort cannot determine them automatically.On the ''Runtime settings'' page, you should edit the classpath which is used when starting the Java VM. It is a list of paths to directories and JAR files which the Java VM searches when looking for classes. If you want to use only classes from the JRE, it is not necessary to set this property. The library path property determines where the Java virtual machine will try to find libraries. Both properties are lists of directory paths separated by ; (MS Windows) or : (Unix / Linux / MacOs X). On Unix, you can set the environment variable LD_LIBRARY_PATH instead of using this property.You can also implement your own classloader and modify the findLibrary method.For more information about the JNIPort Settings tool, see the help texts for the individual pages of the tool.';		emphasize: #bold;		nextPutAll: 'Starting the JVM';		deemphasize: #bold;		cr;		nextPutAll: 'To start a JVM, select the page of the appropriate settings in the JNIPort Settings tool, and choose the menu item ''Start Java VM'' from the context menu of the page list. Once the Java VM is running, the icon of its settings changes and shows a red background. You can stop the Java VM from the context menu, but once it is stopped, it cannot be started again - you will have to restart the VisualWorks image. This is a limitation of the Java VM, not of JNIPort.';		emphasize: #bold;		nextPutAll: 'Using Java objects';		deemphasize: #bold;		cr;		nextPutAll: 'To use Java objects, you will first have to look up a Java class. You can then create an instance of the class by using a constructor message of the class, or use another static method from this class'' protocol. Smalltalk message selectors corresponding to Java method selectors are (with some exceptions) composed of the Java method selector, an underscore character ($_), and the type names of the arguments. The type names are either lowercase names for primitive types (like char, int, double), or uppercase class names without the dotted package name. Examples:	Smalltalk:					Java:	getLogger_String:			Logger getLogger(String name)	log_Level:String:Object:		void log(Level level, String msg, Object param1)For a more detailed explanation, consult the JNIPort documentation.';		emphasize: #bold;		nextPutAll: 'An Example';		deemphasize: #bold;		cr;		nextPutAll: 'The JNIPort documentation contains several examples for using JNIPort. Here is another short example showing how to use the package java.util.logging to log messages in an XML log file.	| jvm loggerStatic handlerStatic levelStatic logger handler |	jvm := JVM current.	loggerStatic := jvm findClass: ''java.util.logging.Logger''.	handlerStatic := jvm findClass: ''java.util.logging.FileHandler''.	levelStatic := jvm findClass: ''java.util.logging.Level''.	logger := loggerStatic getLogger_String: ''VisualWorks''.	handler := handlerStatic new_String: ''exampleLog.txt''.	logger addHandler_Handler: handler.	logger setLevel_Level: levelStatic get_CONFIG.	logger severe_String: ''Arrgh...''.	logger info_String: ''Better now.''.	logger 		log_Level: levelStatic get_CONFIG		String: ''Log level changed''		Object: levelStatic get_INFO.	logger setLevel_Level: levelStatic get_INFO.'.	^textBuilder contents</body><body package="JNIPort Tools-Settings">openManagerPage: symbolArray	"Open the settings manager on this domain, and pre-select a page	with the given ID."	^JNIPortSettingsManager open: self selectPage: symbolArray</body></methods><methods><class-id>JNIPort.JNIPortSettingsDomain class</class-id> <category>privileged</category><body package="JNIPort Tools-Settings">addPagesFor: jvmSettings position: index to: pages 	| rootPage |	rootPage := self pageForJVMSettings: jvmSettings position: index.	pages add: rootPage.	jvmSettings jniPortSettings addSettingsPagesWithRootPageId: rootPage id		to: pages.	jvmSettings runtimeSettings addSettingsPagesWithRootPageId: rootPage id		to: pages.	jvmSettings wrapperGeneratorSettings 		addSettingsPagesWithRootPageId: rootPage id		to: pages.	jvmSettings ghostClassSettings addSettingsPagesWithRootPageId: rootPage id		to: pages.	jvmSettings supplementaryClassloaders 		addSettingsPagesWithRootPageId: rootPage id		to: pages</body><body package="JNIPort Tools-Settings">pageForJVMSettings: aJVMSetting position: anInteger 	| page settings |	page := (ModularSettingsPage new)				label: aJVMSetting name;				icon: aJVMSetting listIcon;				yourself.	page		id: (Array with: #JNIPort with: aJVMSetting name asSymbol);		position: anInteger;		useRadioButtonsForEnumerations.	settings := OrderedCollection new.	self		addNameSettingFor: aJVMSetting			to: settings			rootPageId: page id;		addGhostClassSwitchesFor: aJVMSetting			to: settings			rootPageId: page id.	page settings: settings.	^page</body></methods><methods><class-id>JNIPort.JNIPortSettingsManager</class-id> <category>actions</category><body package="JNIPort Tools-Settings">addSettings	| settingsName |	settingsName := Dialog request: #EnterJVMSettingsName &lt;&lt; #jniport 						&gt;&gt; 'Enter the name of the new JVM settings:'.	(settingsName isNil or: [settingsName isEmpty]) ifTrue: [^self].	JVMSettings addSettingsNamed: settingsName.	self class refreshInstancesOpenOn: self domain.	self selectPageWithId: (Array with: #JNIPort with: settingsName asSymbol)</body><body package="JNIPort Tools-Settings">exportSettings	JNIPort.JVMSettings saveToRegistry</body><body package="JNIPort Tools-Settings">helpPressed	| helpViewer |	self currentPage ifNil: 			[helpViewer := SimpleHelp helpString: self helpText.			SimpleHelp openOn: helpViewer]		ifNotNil: [super helpPressed]</body><body package="JNIPort Tools-Settings">helpText	| helpTextStream |	helpTextStream := TextStream on: String new.	self writeJNIPortHelpTextOn: helpTextStream.	(self builder menuAt: #pageTreeMenu) menuItems do: 			[:item | 			helpTextStream				emphasize: #bold					while: 						[helpTextStream							nextPutAll: item label asString;							nextPut: $:];				space;				nextPutAll: item helpText asString]		separatedBy: 			[helpTextStream				cr;				cr].	^helpTextStream contents</body><body package="JNIPort Tools-Settings">importAllSettings	JNIPort.JVMSettings loadFromRegistry.	SettingsManager refreshInstancesOpenOn: self domain.	triggerChannel value: false.	self showAcceptedStateUI</body><body package="JNIPort Tools-Settings">inspectRunningJavaVMs	JVM runningInstances inspect</body><body package="JNIPort Tools-Settings">removeSettings	self pageListHolder selectionDo: 			[:page |			| settingsName |			settingsName := (page id at: 2) asString.			(Dialog				confirm: (#ConfirmRemoveSettings &lt;&lt; #jniport						&gt;&gt; 'Remove the JVM settings named ''&lt;1s&gt;''?' expandMacrosWith: settingsName))					ifTrue: 						[JVMSettings removeSettingsNamed: settingsName.						self class refreshInstancesOpenOn: self domain]]</body><body package="JNIPort Tools-Settings">resetAllToDefault	(Dialog confirm: #ConfirmResetDoDefaults &lt;&lt; #jniport 				&gt;&gt; 'This will remove all predefined settings except the default JVM setting. Do you want to proceed?') 		ifFalse: [^self].	self domain reset.	SettingsManager refreshInstancesOpenOn: self domain.	triggerChannel value: false.	self showAcceptedStateUI</body><body package="JNIPort Tools-Settings">shutdownJavaVMs	self pageListHolder selectionDo: 			[:page |			| jvmSettings |			jvmSettings := JVMSettings named: (page id at: 2) asString.			Cursor wait showWhile: [JVM shutdownInstancesForSettings: jvmSettings].			self class refreshInstancesOpenOn: self domain.			self selectPageWithId: page id]</body><body package="JNIPort Tools-Settings">startJavaVM	| jvmSettings |	self pageListHolder selectionDo: 			[:page |			jvmSettings := JVMSettings named: (page id at: 2) asString.			jvmSettings				ifNotNil: 					[Cursor wait showWhile: [JVM newWithSettings: jvmSettings].					self class refreshInstancesOpenOn: self domain.					self selectPageWithId: page id]]</body></methods><methods><class-id>JNIPort.JNIPortSettingsManager</class-id> <category>private</category><body package="JNIPort Tools-Settings">writeJNIPortHelpTextOn: aTextStream 	aTextStream		emphasize: #bold			while: 				[aTextStream 					nextPutAll: (#JNIPortForVisualWorksSettings &lt;&lt; #jniport 							&gt;&gt; 'JNIPort for VisualWorks Settings') asString];		cr;		nextPutAll: (#JNIPortHelpText &lt;&lt; #jniport 					&gt;&gt; 'Use this tool to define, edit and remove JVM settings of JNIPort for VisualWorks, and to start and shutdown Java VMs.&lt;n&gt;&lt;n&gt;The context menu of the list view contains the following items:') 						expandMacros;		cr;		cr</body></methods><methods><class-id>JNIPort.JNIPortSettingsManager</class-id> <category>testing</category><body package="JNIPort Tools-Settings">isInactiveJVMSelected	^self isJVMSettingSelected and: 			[| settingsName |			settingsName := (self currentPage id at: 2) asString.			(JVMSettings named: settingsName) ~~ JVMSettings default				and: [(JVM hasRunningInstancesForSettingsNamed: settingsName) not]]</body><body package="JNIPort Tools-Settings">isJVMSettingSelected	^self isPageSelected and: 			[| id |			id := self currentPage id.			id size &gt;= 2 and: [(JVMSettings named: (id at: 2) asString) notNil]]</body><body package="JNIPort Tools-Settings">isRunningJVMSelected	^self isJVMSettingSelected and: 			[JVM				hasRunningInstancesForSettingsNamed: (self currentPage id at: 2) asString]</body></methods><methods><class-id>JNIPort.JavaWrapperClassCreationDialog</class-id> <category>aspects</category><body package="JNIPort VW Tool Extensions">createInitializeHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^createInitializeHolder isNil		ifTrue:			[createInitializeHolder := false asValue]		ifFalse:			[createInitializeHolder]</body><body package="JNIPort VW Tool Extensions">defineSubclassResponsibilitiesHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^defineSubclassResponsibilitiesHolder isNil		ifTrue:			[defineSubclassResponsibilitiesHolder := false asValue]		ifFalse:			[defineSubclassResponsibilitiesHolder]</body><body package="JNIPort VW Tool Extensions">javaClassNameHolder		^javaClassNameHolder isNil		ifTrue: [javaClassNameHolder := String new asValue]		ifFalse: [javaClassNameHolder]</body><body package="JNIPort VW Tool Extensions">superclassModule	^superclassModule</body><body package="JNIPort VW Tool Extensions">tabHolder	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^tabHolder isNil		ifTrue:			[tabHolder := SelectionInList new]		ifFalse:			[tabHolder]</body><body package="JNIPort VW Tool Extensions">wrapperTypeHolder	^wrapperTypeHolder isNil		ifTrue:			[wrapperTypeHolder := nil asValue]		ifFalse:			[wrapperTypeHolder]</body></methods><methods><class-id>JNIPort.JavaWrapperClassCreationDialog</class-id> <category>initialize-release</category><body package="JNIPort VW Tool Extensions">defaultSuperclassName		^JNIPort.JavaLangObject unambiguousName</body><body package="JNIPort VW Tool Extensions">initialize		super initialize.	self tabHolder list: self pageLabelStrings asList.	superclassModule := EntryWithPasteButtonModule forClasses</body><body package="JNIPort VW Tool Extensions">postBuildMainCanvas	"The main canvas of the dialog has been built using this application model's builder."	self tabHolder selectionIndexHolder onChangeSend: #pageChanged to: self</body><body package="JNIPort VW Tool Extensions">postBuildTabControlPage	"A page has been built; the builder is saved in lastSubBuilder.	Do the necessary widget setup."		packageModule continuouslyAccept.	namespaceModule continuouslyAccept.	(lastSubBuilder componentAt: #nameField) ifNotNil:			[:wrapper | wrapper widget controller continuousAccept: true].	superclassModule continuouslyAccept</body><body package="JNIPort VW Tool Extensions">postBuildWith: aBuilder		super postBuildWith: aBuilder.	aBuilder == builder ifTrue: [self postBuildMainCanvas]		ifFalse: [self postBuildTabControlPage]</body><body package="JNIPort VW Tool Extensions">postOpenWith: aBuilder	super postOpenWith: aBuilder.	self tabHolder selectionIndex: 1.	(lastSubBuilder componentAt: #nameField) takeKeyboardFocus.	self activateValidation</body><body package="JNIPort VW Tool Extensions">setMissingDefaults		super setMissingDefaults.	superclassModule value isEmpty ifTrue: [superclassModule value: self defaultSuperclassName].	wrapperTypeHolder isNil ifTrue:			[self wrapperTypeHolder value: #instanceWrapperClass].	createInitializeHolder isNil ifTrue: [self createInitializeHolder value: CreateInitializer].	defineSubclassResponsibilitiesHolder isNil ifTrue:			[self defineSubclassResponsibilitiesHolder value: CreateSubclassResponsibilities]</body><body package="JNIPort VW Tool Extensions">superclass: aClassOrNil	aClassOrNil notNil		ifTrue: [self superclassModule value: aClassOrNil fullName]</body></methods><methods><class-id>JNIPort.JavaWrapperClassCreationDialog</class-id> <category>validation</category><body package="JNIPort VW Tool Extensions">validateEverything	| firstPageOK secondPageOK |	firstPageOK := self 		validateInView: (lastSubBuilder componentAt: #javaClassNameField)		indicator: (lastSubBuilder componentAt: #javaClassErrorLabel)		using: #validateJavaClassIfFails:.	firstPageOK := firstPageOK &amp; (self 		validateInView: (lastSubBuilder componentAt: #nameField)		indicator: (lastSubBuilder componentAt: #nameErrorLabel)		using: #validateNameIfFails:).	firstPageOK := firstPageOK &amp; (self 		validateInView: superclassModule entryWidget		indicator: (lastSubBuilder componentAt: #superclassErrorLabel)		using: #validateSuperclassIfFails:).	firstPageOK := firstPageOK &amp; (self 		validateInView: packageModule entryWidget		indicator: (lastSubBuilder componentAt: #packageErrorLabel)		using: #validatePackageIfFails:).	firstPageOK := firstPageOK &amp; (self 		validateInView: namespaceModule entryWidget		indicator: (lastSubBuilder componentAt: #namespaceErrorLabel)		using: #validateNameSpaceIfFails:).	self showError: firstPageOK not inTabLabel: 1.	secondPageOK := self 		validateInView: (lastSubBuilder componentAt: #importsEditor)		indicator: (lastSubBuilder componentAt: #importsErrorLabel)		using: #validateImportsIfFails:.	self showError: secondPageOK not inTabLabel: 2.	firstPageOK &amp; secondPageOK		ifTrue: [self enableAccept]		ifFalse: [self disableAccept]</body><body package="JNIPort VW Tool Extensions">validateJavaClassIfFails: aBlock		| name javaClass jvm wrapperExists superclass rootClass |	name := javaClassNameHolder value.	(name notNil and: [(name := name trimBlanks) notEmpty])		ifFalse: [aBlock value: #JavaClassNameInvalid &lt;&lt; #jniport &gt;&gt; 'Java class name is invalid'].	jvm := JVM currentIfNone: [^aBlock value: #NoRunningJVM &lt;&lt; #jniport &gt;&gt; 'There is no running JVM'].	javaClass := [jvm findClass: name]		on: JavaException		do: [:exception | exception return: nil].	javaClass		ifNil:			[aBlock				value: (#JavaClassNotFound &lt;&lt; #jniport &gt;&gt; 'Java class not found: &lt;1s&gt;' expandMacrosWith: name)].	"Check if a wrapper class for this Java class exists already. The test depends on the setting of the wrapperTypeHolder."	rootClass := self shouldCreateInstanceWrapperClass		ifTrue: [JavaInstance]		ifFalse: [JavaStatic].	wrapperExists := rootClass allSubclasses		contains: [:aClass | (aClass respondsTo: #javaClassName) 			and: [aClass javaClassName asSymbol = name asSymbol]].	wrapperExists		ifTrue:			[| message |			message := #WrapperClassExists &lt;&lt; #jniport &gt;&gt;					'&lt;1?An instance:A static&gt; wrapper class for this Java class already exists'				expandMacrosWith: self shouldCreateInstanceWrapperClass.			aBlock value: message].	"Validation should fail if java class does not inherit from the java class which is wrapped by the superclass."	(superclass := self javaSuperclassOrNil) ifNil: [^self].	(javaClass isDerivedFrom: superclass)		ifFalse:			[aBlock				value:					#WrapperDoesNotInheritFromSuperclass &lt;&lt; #jniport &gt;&gt;							'The Java class does not inherit from the Java class wrapped by the specified superclass']</body><body package="JNIPort VW Tool Extensions">validateSuperclassIfFails: aBlock		| name existsAndIsClass superclass javaSuperclass jvm |	name := superclassModule value.	(name notNil and: [(name := name trimBlanks) notEmpty])		ifFalse: [aBlock value: #SuperclassNameInvalid &lt;&lt; #dialogs &gt;&gt; 'Superclass name is invalid'].	existsAndIsClass := [name asQualifiedReference		ifDefinedDo: [:value | value isForClass]		elseDo: [false]]		on: Error		do: [:ex | ex return: false].	existsAndIsClass		ifFalse: [aBlock value: #NoSuchSuperclass &lt;&lt; #dialogs &gt;&gt; 'There is no such superclass'].	superclass := name asQualifiedReference value.	(superclass includesBehavior: JavaObject)		ifFalse:			[aBlock				value:					#SuperclassIsNotAJavaWrapperClass &lt;&lt; #jniport &gt;&gt; 'The superclass is not a Java wrapper class'].	(superclass		includesBehavior:			(self shouldCreateInstanceWrapperClass				ifTrue: [JavaInstance]				ifFalse: [JavaStatic]))		ifFalse:			[| message |			message := #SuperclassIsWrongType &lt;&lt; #jniport &gt;&gt;					'The superclass is not &lt;1?an instance:a static&gt; wrapper class'				expandMacrosWith: self shouldCreateInstanceWrapperClass.			aBlock value: message].	jvm := JVM currentIfNone: [^aBlock value: #NoRunningJVM &lt;&lt; #jniport &gt;&gt; 'There is no running JVM'].	"Validation has to fail if java class does not inherit from the java class which is wrapped by the superclass."	javaSuperclass := [jvm findClass: superclass javaClassName]		on: JavaException , MessageNotUnderstood		do: [:exception | exception return: nil].	javaSuperclass		ifNil:			[aBlock				value:					(#JavaClassNotFound &lt;&lt; #jniport &gt;&gt; 'Java class not found: &lt;1s&gt;'						expandMacrosWith: superclass javaClassName)]</body></methods><methods><class-id>JNIPort.JavaWrapperClassCreationDialog</class-id> <category>private</category><body package="JNIPort VW Tool Extensions">activateValidation	"Setup all the value holders to notify the dialog of changes in their value here.	Some of the controllers of the views using those holders should be independently setup	for continuous accept."	super activateValidation.	self 		validateWhenChanged: self superclassModule entryHolder;		validateWhenChanged: self javaClassNameHolder;		validateWhenChanged: self wrapperTypeHolder;		validateWhenChanged: self privateHolder;		validateWhenChanged: self importsHolder.	self validateEverything</body><body package="JNIPort VW Tool Extensions">closeAccept		CreateInitializer := self createInitializeHolder value.	CreateSubclassResponsibilities := self defineSubclassResponsibilitiesHolder value.	super closeAccept</body><body package="JNIPort VW Tool Extensions">installAdvancedPage	(self widgetAt: #tabControl)		client: self		spec: #advancedSpec		builder: (lastSubBuilder := builder newSubBuilder)</body><body package="JNIPort VW Tool Extensions">installDetailsPage	(self widgetAt: #tabControl)		client: self		spec: #detailsSpec		builder: (lastSubBuilder := builder newSubBuilder)</body><body package="JNIPort VW Tool Extensions">javaSuperclassOrNil		| name existsAndIsClass reference |	name := superclassModule value.	(name isNil or: [(name := name trimBlanks) isEmpty]) ifTrue: [^nil].	reference := name asQualifiedReference.	existsAndIsClass := [reference		ifDefinedDo:			[:value | value isForClass and: [(value inheritsFrom: JavaObject) and: [value respondsTo: #javaClassName]]]		elseDo: [false]]		on: Error		do: [:ex | ex return: false].	^existsAndIsClass		ifTrue: [JVM current findClass: reference value javaClassName]		ifFalse: [nil]</body><body package="JNIPort VW Tool Extensions">pageDefinitions	^Array		with: (#BasicCDLabel &lt;&lt; #labels &gt;&gt; 'Basic') -&gt; #installDetailsPage		with: (#AdvancedCDLabel &lt;&lt; #labels &gt;&gt; 'Advanced') -&gt; #installAdvancedPage</body><body package="JNIPort VW Tool Extensions">pageLabelStrings	^self pageDefinitions collect: [:each | each key asString]</body><body package="JNIPort VW Tool Extensions">showError: aBoolean inTabLabel: anInteger	| hackyMagicLabel |	hackyMagicLabel := aBoolean		ifTrue: [self errorIcon -&gt; (self pageLabelStrings at: anInteger)]		ifFalse: [self pageLabelStrings at: anInteger].	self tabHolder list at: anInteger put: hackyMagicLabel</body></methods><methods><class-id>JNIPort.JavaWrapperClassCreationDialog</class-id> <category>accessing</category><body package="JNIPort VW Tool Extensions">shouldCreateInitializer	^self createInitializeHolder value</body><body package="JNIPort VW Tool Extensions">shouldCreateInstanceWrapperClass		^self wrapperTypeHolder value == #instanceWrapperClass</body><body package="JNIPort VW Tool Extensions">shouldDefineSubclassResponsibilities	^self defineSubclassResponsibilitiesHolder value</body><body package="JNIPort VW Tool Extensions">superclassOrDo: aBlock	| reference value |	reference := [superclassModule value trimBlanks asQualifiedReference]		on: Error		do: [:ex | ^aBlock value].	value := reference valueOrDo: [^aBlock value].	^value isForClass ifTrue: [value] ifFalse: [aBlock value]</body></methods><methods><class-id>JNIPort.JavaWrapperClassCreationDialog</class-id> <category>notifications</category><body package="JNIPort VW Tool Extensions">pageChanged	| page |	page := self tabHolder selectionIndex.	self 		perform: (self pageDefinitions at: page) value;		validateEverything</body></methods><methods><class-id>JNIPort.JavaWrapperClassCreationDialog class</class-id> <category>class initialization</category><body package="JNIPort VW Tool Extensions">initialize	"self initialize"	#{CreateInitializer} initialize.	#{CreateSubclassResponsibilities} initialize.</body></methods><methods><class-id>JNIPort.StaticJNIPortTreeModelExample</class-id> <category>auto generated</category><body package="CU Java Examples">getChildCountTag	"answer the result of calling the receiver's public static getChildCountTag() Java method"	^ self callObjectMethod: 'getChildCountTag' signature: '()Ljava/lang/Object;'.</body><body package="CU Java Examples">getChildTag	"answer the result of calling the receiver's public static getChildTag() Java method"	^ self callObjectMethod: 'getChildTag' signature: '()Ljava/lang/Object;'.</body><body package="CU Java Examples">getIndexOfChildTag	"answer the result of calling the receiver's public static getIndexOfChildTag() Java method"	^ self callObjectMethod: 'getIndexOfChildTag' signature: '()Ljava/lang/Object;'.</body></methods><methods><class-id>JNIPort.StaticJNIPortTreeModelExample</class-id> <category>callbacks</category><body package="CU Java Examples">handleGetChild: aJavaArray 	"called from Java as the implementation of Object getChild(Object, int)"	| name index classes class |	name := aJavaArray at: 1.	"should be a java.Lang.String naming a class or '&lt;&lt;root&gt;&gt;'"	name := name asString.	index := aJavaArray at: 2.	"should be a java.lang.Integer (0-based)"	index := index intValue + 1.	"get list of subclasses"	classes := name = '&lt;&lt;root&gt;&gt;' 				ifTrue: [Class rootsOfTheWorld]				ifFalse: 					[name asStrictReference ifDefinedDo: [:theClass | theClass subclasses]						elseDo: [^nil]].	"we want to return the name of the indexed subclass as a Java string"	class := (classes 				asSortedCollection: [:c1 :c2 | c1 fullName &lt;= c2 fullName]) at: index					ifAbsent: [^nil].	^class fullName asJavaString: self jvm</body><body package="CU Java Examples">handleGetChildCount: aJavaLangString 	"called from Java as the implementation of int getChildCount(Object)"	| name classes |	name := aJavaLangString asString.	"get list of subclasses"	classes := name = '&lt;&lt;root&gt;&gt;' 				ifTrue: [Class rootsOfTheWorld]				ifFalse: 					[name asStrictReference ifDefinedDo: [:theClass | theClass subclasses]						elseDo: [#()]].	"we want to return the number of subclasses as a java.lang.Integer"	^(jvm findClass: #'java.lang.Integer') new_int: classes size</body><body package="CU Java Examples">handleGetIndexOfChild: aJavaArray 	"called from Java as the implementation of Integer getIndexOfChild(Object, Object)"	| parentName childName classes index |	parentName := aJavaArray at: 1.	"should be a java.Lang.String naming a class or '&lt;&lt;root&gt;&gt;'"	parentName := parentName asString.	childName := aJavaArray at: 2.	"should be a java.Lang.String naming a class"	childName := childName asString.	"get list of subclasses"	classes := parentName = '&lt;&lt;root&gt;&gt;' 				ifTrue: [Class rootsOfTheWorld]				ifFalse: 					[parentName asStrictReference 						ifDefinedDo: [:theClass | theClass subclasses]						elseDo: [#()]].	"find child"	index := childName asStrictReference ifDefinedDo: 					[:child | 					(classes asSortedCollection: [:c1 :c2 | c1 fullName &lt;= c2 fullName]) 						indexOf: child						ifAbsent: [0]]				elseDo: [0].	"we want to return the index (0-based) as a java.lang.Integer, or -1 if not found. -1 is a legal return value, see the implementation of getIndexOfChild() in org.metagnostic.jniport.eg.TreeModelExample"	^(jvm findClass: #'java.lang.Integer') new_int: index - 1</body></methods><methods><class-id>JNIPort.StaticJNIPortTreeModelExample</class-id> <category>initializing</category><body package="CU Java Examples">notifyRegistered	"this is called by the class registry once we have been fully initialised.	Normally that means that the instance class and static class are both	correct and stable (will not change unless you, the programmer, manually	create and register a new wrapper class that is more appropriate for the	Java class we represent.  If ghost classes are in use then we are fully	populated with ghost methods by the time this is called too"	| callbackRegistry |	callbackRegistry := self jvm callbackRegistry ifNil: [^ self].	callbackRegistry		setCallback: self getChildTag handler: [:it :params | self handleGetChild: params];		setCallback: self getChildCountTag handler: [:it :params | self handleGetChildCount: params];		setCallback: self getIndexOfChildTag handler: [:it :params | self handleGetIndexOfChild: params].</body></methods><methods><class-id>JNIPort.StaticJNIPortTreeModelExample class</class-id> <category>accessing</category><body package="CU Java Examples">javaClassName	"answer the Symbol name of the Java class we stand for"	^ #'jniport.examples.TreeModelExample'.</body></methods><methods><class-id>JNIPort.StaticJNIPortTreeModelExample class</class-id> <category>listing wrapper methods</category><body package="CU Java Examples">generatedConstructorSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(		#new	).</body><body package="CU Java Examples">generatedGetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="CU Java Examples">generatedWrapperSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(		#getChildCountTag		#getChildTag		#getIndexOfChildTag	).</body></methods><methods><class-id>JNIPort.JNIPortToolsSubsystem</class-id> <category>default actions</category><body package="JNIPort Tools-Settings">setUp	super setUp.	WindowingSystem isHeadless		ifFalse: [JNIPortSettingsManager refreshInstancesOpenOn: JNIPortSettingsDomain current]</body></methods><methods><class-id>JNIPort.JNIPortToolsSubsystem</class-id> <category>prerequisites</category><body package="JNIPort Tools-Settings">prerequisiteSystems	^Array with: JNIPortSubsystem.</body></methods><methods><class-id>JNIPort.GhostMethodDecompiler</class-id> <category>opcodes-data movement</category><body package="JNIPort VW Tool Extensions">pushConstant: value 	"Produce a ProgramNode for a constant. If value is an embedded object and not a literal, treat it in a way which produces a legible representation in the method's decompiled source code."	(value isMemberOf: BlockClosure) 		ifTrue: [self codeBlock: value method copied: #()]		ifFalse: 			[stack addLast: (value isLiteral 						ifTrue: [builder newLiteralValue: value]						ifFalse: [builder newEmbeddedValue: value])]</body></methods><methods><class-id>JNIPort.EmbeddedValueNode</class-id> <category>printing</category><body package="JNIPort VW Tool Extensions">printOn: aStream indent: level 	aStream nextPutAll: '(''&lt;&lt;embedded object&gt;&gt;'' "'.	[aStream print: value] on: Error		do: [:ex | aStream nextPutAll: 'Error printing the object'].	aStream nextPutAll: '")'</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>actions</category><body package="JNIPort VW Tool Extensions">addJavaWrapperClassChangeFromDialog: aCreateClassDialog		| arguments definition change |	arguments := OrderedCollection new.	arguments		add: (aCreateClassDialog nameSpaceOrDo: [^nil]) unambiguousName;		add: (aCreateClassDialog nameOrDo: [^nil]);		add: (aCreateClassDialog superclassOrDo: [^nil]) fullyQualifiedReference makeUnambiguous;		add: (aCreateClassDialog superclassOrDo: []) behaviorType;		add: aCreateClassDialog private;		add: aCreateClassDialog imports.	definition := '&lt;1s&gt; defineClass: #&lt;2s&gt; superclass: &lt;3p&gt; indexedType: #&lt;4s&gt; private: &lt;5p&gt;  instanceVariableNames: '''' classInstanceVariableNames: '''' imports: ''&lt;6s&gt;'' category: '''''		expandMacrosWithArguments: arguments.	change := AddClassChange definition: definition.	change package: (aCreateClassDialog packageOrDo: [^nil]).	^change</body><body package="JNIPort VW Tool Extensions">createJavaWrapperClassFromDialog: aCreateClassDialog	"Creates a new wrapper class, taking the attributes of the class from aCreateClassDialog. Creates a wrapper either for the 'instance side' of the Java class or for the static fields and methods, depending on a setting in the dialog. The new class will be populated with wrapper methods for the Java methods. Wrapper generation is controlled by the Wrapper generator settings of the JNIPort settings."		| addClassChange class |	addClassChange := self addJavaWrapperClassChangeFromDialog: aCreateClassDialog.	addClassChange isNil ifTrue: [^nil].	self performChange: addClassChange.	class := addClassChange definedObject.	aCreateClassDialog shouldCreateInitializer ifTrue: [self createInitializerInNewClass: class].	aCreateClassDialog shouldDefineSubclassResponsibilities		ifTrue:			[self createSubclassResponsibilityStubsInNewClass: class.			self createSubclassResponsibilityStubsInNewClass: class class].	JNIPort.JavaClassWrapperInstaller		installWrapperFor: aCreateClassDialog javaClassNameHolder value		in: class		forStatic: aCreateClassDialog shouldCreateInstanceWrapperClass not.	^class</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>testing</category><body package="JNIPort VW Tool Extensions">hasRunningJVM	"Answers if there is a running JVM."		^JNIPort.JVM current notNil</body></methods><methods><class-id>Kernel.ProgramNodeBuilder</class-id> <category>node creation-basic</category><body package="JNIPort VW Tool Extensions">newEmbeddedValue: anObject 	"Produce a ProgramNode for the embedded object anObject. Use a node which produces a legible representation in the method's decompiled source code."	^JNIPort.EmbeddedValueNode new value: anObject</body></methods><methods><class-id>JNIPort.JVM class</class-id> <category>RefactoringBrowser</category><body package="JNIPort VW Tool Extensions">browserIcon	^ListIconLibrary visualFor: #jvm</body></methods><methods><class-id>JNIPort.JavaInstance class</class-id> <category>RefactoringBrowser</category><body package="JNIPort VW Tool Extensions">browserIcon	^ListIconLibrary visualFor: (self isGhostClass 				ifTrue: [#javaInstanceGhost]				ifFalse: [#javaInstance])</body></methods><methods><class-id>JNIPort.JavaPrimitiveArray</class-id> <category>user interface</category><body package="JNIPort VW Tool Extensions">inspectorClasses	^self jniEnv isDead 		ifTrue: [super inspectorClasses]		ifFalse: 			[Array with: Tools.Trippy.ArrayInspector with: Tools.Trippy.BasicInspector]</body></methods><methods><class-id>JNIPort.JavaStatic class</class-id> <category>RefactoringBrowser</category><body package="JNIPort VW Tool Extensions">browserIcon	^ListIconLibrary visualFor: (self isGhostClass 				ifTrue: [#javaStaticGhost]				ifFalse: [#javaStatic])</body></methods><methods><class-id>JNIPort.JavaStatic</class-id> <category>user interface</category><body package="JNIPort VW Tool Extensions">inspectorExtraAttributes		^self jniEnv isDead		ifTrue: [super inspectorExtraAttributes]		ifFalse:			[(Array				with:					(Tools.Trippy.DerivedAttribute						label: 'class hierarchy'						valueBlock: [self inheritanceStringWithStatus]))				, super inspectorExtraAttributes]</body></methods><methods><class-id>JNIPort.JavaStatic</class-id> <category>displaying</category><body package="JNIPort VW Tool Extensions">toolListIcon	^self class browserIcon</body></methods><methods><class-id>JNIPort.JavaObjectArray</class-id> <category>user interface</category><body package="JNIPort VW Tool Extensions">inspectorClasses	^self jniEnv isDead 		ifTrue: [super inspectorClasses]		ifFalse: 			[Array with: Tools.Trippy.ArrayInspector with: Tools.Trippy.BasicInspector]</body></methods><methods><class-id>Core.Metaclass</class-id> <category>accessing method dictionary</category><body package="JNIPort VW Tool Extensions">sourceCodeForMethod: method at: messageSelector 	"Answer the string corresponding to the source code for the argument. If method is a GhostMethod, generate a comment which says so."	| reason |	method isGhostMethod ifFalse: [^super sourceCodeForMethod: method at: messageSelector ].	reason := #ThisIsAGhostMethod &lt;&lt; #jniport &gt;&gt; 'This is a dynamically generated method of a ghost class.'.	^[method getSourceForUserIfNone:		[(self decompilerClass new				decompile: messageSelector				in: self				method: method) decompiledCodeWithExplanation: reason]]		on: SourceNotAvailable		do: [:x |			reason := x parameter.			x resume]</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>resources</category><body package="JNIPort VW Tool Extensions">jniPortClassBrowserIcon	^ListIconLibrary visualFor: #javaStatic</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="JNIPort VW Tool Extensions">jvmIsRunning	^JNIPort.JVM current notNil</body></methods><methods><class-id>JNIPort.JavaObject class</class-id> <category>RefactoringBrowser</category><body package="JNIPort VW Tool Extensions">browserIcon	^ListIconLibrary visualFor: #javaObject</body></methods><methods><class-id>JNIPort.JavaObject class</class-id> <category>compiling</category><body package="JNIPort VW Tool Extensions">classDecompilerClass	"Answer a decompiler class appropriate for compiled methods of this class."	^self isGhostClass 		ifTrue: [GhostMethodDecompiler]		ifFalse: [super classDecompilerClass]</body><body package="JNIPort VW Tool Extensions">decompilerClass	"Answer a decompiler class appropriate for compiled methods of this class."	^self isGhostClass 		ifTrue: [GhostMethodDecompiler]		ifFalse: [super decompilerClass]</body></methods><methods><class-id>JNIPort.JavaObject class</class-id> <category>accessing method dictionary</category><body package="JNIPort VW Tool Extensions">sourceCodeForMethod: method at: messageSelector 	"Answer the string corresponding to the source code for the argument. If method is a GhostMethod, generate a comment which says so."	| reason |	method isGhostMethod ifFalse: [^super sourceCodeForMethod: method at: messageSelector ].	reason := #ThisIsAGhostMethod &lt;&lt; #jniport &gt;&gt; 'This is a dynamically generated method of a ghost class.'.	^[method getSourceForUserIfNone:		[(self decompilerClass new				decompile: messageSelector				in: self				method: method) decompiledCodeWithExplanation: reason]]		on: SourceNotAvailable		do: [:x |			reason := x parameter.			x resume]</body></methods><methods><class-id>JNIPort.JavaRuntimeSettings</class-id> <category>tool support</category><body package="JNIPort Tools-Settings">addClasspathSettingWithParentId: anArrayOfSymbols to: aCollection		| setting |	setting := (StringSetting on: self aspect: #classpath)		id: anArrayOfSymbols , #(#classpath);		default: (self classpath ifNil: [String new]);		label: #Classpath &lt;&lt; #jniport &gt;&gt; 'Class path';		helpText:				#ClasspathHelpText &lt;&lt; #jniport &gt;&gt;							'This is the class path option of the Java virtual machine.';		yourself.	aCollection add: setting</body><body package="JNIPort Tools-Settings">addLibraryPathSettingWithParentId: anArrayOfSymbols to: aCollection		| setting |	setting := (StringSetting on: self aspect: #libpath)		id: anArrayOfSymbols , #(#libpath);		default: (self libpath ifNil: [String new]);		label: #LibraryPath &lt;&lt; #jniport &gt;&gt; 'Library path';		helpText:				#LibraryPathHelpText &lt;&lt; #jniport &gt;&gt;							'This is the library path property which the Java virtual machine will use to find libraries. It is a list of directory paths separated by ; (MS Windows) or : (Unix / Linux / MacOs X). On Unix, you can set the environment variable LD_LIBRARY_PATH instead of using this property.You can also implement your own classloader and modify the findLibrary method.';		yourself.	aCollection add: setting</body><body package="JNIPort Tools-Settings">addSettingsPagesWithRootPageId: rootPageId to: pages 	super addSettingsPagesWithRootPageId: rootPageId to: pages.	pages add: (self runtimeOptionsPageWithRootPageId: rootPageId)</body><body package="JNIPort Tools-Settings">addSettingsWithParentId: anArrayOfSymbols to: aCollection 	self		addClasspathSettingWithParentId: anArrayOfSymbols to: aCollection;		addLibraryPathSettingWithParentId: anArrayOfSymbols to: aCollection.	super addSettingsWithParentId: anArrayOfSymbols to: aCollection</body><body package="JNIPort Tools-Settings">optionsSettingWithParentId: anArrayOfSymbols		^((SequenceSetting of: StringSetting) on: self aspect:			#miscellaneousOptions)		id: anArrayOfSymbols , #(#options);		label: #JVMOptions &lt;&lt; #jniport &gt;&gt; 'Other Java VM options';		helpText:				#JVMOptionsHelpText &lt;&lt; #dialogs &gt;&gt; 'Add other Java VM options here.';		yourself</body><body package="JNIPort Tools-Settings">runtimeOptionsPageWithRootPageId: aSymbol 	| subPage subPageId |	subPage := SequenceSettingPage new.	subPage label: #JVMOptions &lt;&lt; #jniport &gt;&gt; 'Java VM options'.	subPageId := aSymbol , #(#runtimeSettings #options).	subPage		id: subPageId;		setting: (self optionsSettingWithParentId: subPageId).	^subPage</body><body package="JNIPort Tools-Settings">settingsPageWithRootPageId: aSymbol 	| subPage subPageId |	subPage := ModularSettingsPage new.	subPage label: #RuntimeSettings &lt;&lt; #jniport &gt;&gt; 'Runtime settings'.	subPageId := aSymbol , #(#runtimeSettings).	subPage		id: subPageId;		position: 2;		settings: (self settingsWithParentId: subPageId).	^subPage</body></methods><methods><class-id>JNIPort.JavaWrapperGeneratorSettings</class-id> <category>tool support</category><body package="JNIPort Tools-Settings">settingsPageWithRootPageId: aSymbol 	| subPageId subPage |	subPage := ModularSettingsPage new.	subPage label: #WrapperGeneratorSettings &lt;&lt; #jniport 				&gt;&gt; 'Wrapper generator settings'.	subPageId := aSymbol , #(#wrapperGeneratorSettings).	subPage		id: subPageId;		position: 3;		settings: (self settingsWithParentId: subPageId).	^subPage</body></methods><methods><class-id>JNIPort.JNIPortSettings</class-id> <category>tool support</category><body package="JNIPort Tools-Settings">addJVMClassSettingWithParentId: anArrayOfSymbols to: aCollection		| jvmClasses adaptor choices setting |	jvmClasses := JVM allSubclasses.	adaptor := (PluggableAdaptor on: self)		getBlock: [:model | model jvmClass name]		putBlock:			[:model :value | model jvmClass: (jvmClasses detect: [:class | class name = value])]		updateBlock: [:m :a :p | true].	choices := (jvmClasses collect: [:each | each name]) asSortedCollection.	setting := ((EnumerationSetting choices: choices labels: choices) on:			adaptor)		id: anArrayOfSymbols , #(#jvmClass);		label: #JVMClass &lt;&lt; #jniport &gt;&gt; 'JVM class';		helpText:				#JVMClassHelpText &lt;&lt; #jniport &gt;&gt;							'Select which JVM class (with or without callbacks) will be used.';		yourself.	aCollection add: setting</body><body package="JNIPort Tools-Settings">addLibraryFilenameSettingWithParentId: anArrayOfSymbols to: aCollection 	| libraryFilenameAdaptor setting |	libraryFilenameAdaptor := (PluggableAdaptor on: self) 				getBlock: [:model | model jniLibraryFilename ifNil: [String new]]				putBlock: 					[:model :string | 					model jniLibraryFilename: (string 								ifNotNil: [string isEmpty ifTrue: [nil] ifFalse: [string]])]				updateBlock: [:model :aspect :parameter | true].	setting := (StringSetting forNameOfFile on: libraryFilenameAdaptor)				id: anArrayOfSymbols , #(#jniLibraryFilename);				default: (self jniLibraryFilename ifNil: [String new]);				label: #JNILibraryFilename &lt;&lt; #jniport &gt;&gt; 'Java VM library filename';				helpText: #JNILibraryFilenameHelpText &lt;&lt; #jniport 							&gt;&gt; 'This is the filename of the library file containing the Java virtual machine. You only have to specify this when JNIPort is not able to find the library otherwise.';				yourself.	aCollection add: setting</body><body package="JNIPort Tools-Settings">addSettingsWithParentId: anArrayOfSymbols to: aCollection 	self		addJVMClassSettingWithParentId: anArrayOfSymbols to: aCollection;		addLibraryFilenameSettingWithParentId: anArrayOfSymbols to: aCollection.	super addSettingsWithParentId: anArrayOfSymbols to: aCollection</body><body package="JNIPort Tools-Settings">settingsPageWithRootPageId: aSymbol 	| subPage subPageId |	subPage := ModularSettingsPage new.	subPage label: #JNIPortSettings &lt;&lt; #jniport &gt;&gt; 'JNIPort settings'.	subPageId := aSymbol , #(#jniPortSettings).	subPage		id: subPageId;		position: 1;		settings: (self settingsWithParentId: subPageId).	^subPage</body></methods><methods><class-id>JNIPort.SupplementaryClassloadersSettings</class-id> <category>tool support</category><body package="JNIPort Tools-Settings">addClassLoaderCreationSettingWithParentId: anArrayOfSymbols to: aCollection 	| setting |	setting := (JNIPort.DirectActionSetting new)				id: (anArrayOfSymbols copyWith: #addClassLoader);				label: #AddSupplementaryClassLoader &lt;&lt; #jniport 							&gt;&gt; 'Add a supplementary class loader';				action: [self addSupplementaryClassLoader];				helpText: #AddSupplementaryClassLoaderHelpText &lt;&lt; #jniport 							&gt;&gt; 'Add a supplementary class loader.';				yourself.	aCollection add: setting</body><body package="JNIPort Tools-Settings">addSettingsPagesWithRootPageId: rootPageId to: pages 	| settingsPage |	settingsPage := self settingsPageWithRootPageId: rootPageId.	pages add: settingsPage.	entries do: 			[:classLoader | 			pages 				add: (self classLoaderPageFor: classLoader rootPageId: settingsPage id)]</body><body package="JNIPort Tools-Settings">addSettingsWithParentId: anArrayOfSymbols to: aCollection 	super addSettingsWithParentId: anArrayOfSymbols to: aCollection.	self addClassLoaderCreationSettingWithParentId: anArrayOfSymbols		to: aCollection</body><body package="JNIPort Tools-Settings">addSupplementaryClassLoader	| classLoaderName |	classLoaderName := Dialog request: #EnterClassLoaderName &lt;&lt; #jniport 						&gt;&gt; 'Enter the name of the class loader:'.	classLoaderName ifNil: [^self].	classLoaderName isEmpty ifTrue: [^self].	classLoaderName := classLoaderName asSymbol.	(self entries contains: [:classLoader | classLoader name = classLoaderName])		ifTrue: [^Dialog warn: #DuplicateClassLoaderName &lt;&lt; #jniport &gt;&gt; 'A class loader with this name already exists.'].	self addEntry: (SupplementaryClassloader named: classLoaderName).	SettingsManager refreshInstancesOpenOn: JNIPortSettingsDomain current</body><body package="JNIPort Tools-Settings">classloaderClassSettingFor: aSupplementaryClassLoader 	^(StringSetting on: aSupplementaryClassLoader aspect: #classloaderClass)		default: aSupplementaryClassLoader defaultClassloaderClass;		label: #ClassLoaderClass &lt;&lt; #jniport &gt;&gt; 'Class loader class';		helpText: #ClassLoaderClassHelpText &lt;&lt; #jniport 					&gt;&gt; 'The name of the Java classloader class.';		yourself</body><body package="JNIPort Tools-Settings">classLoaderPageFor: aSupplementaryClassLoader rootPageId: anArrayOfSymbols 	| subPageId subPage |	subPage := ModularSettingsPage new.	subPage label: aSupplementaryClassLoader name.	subPageId := anArrayOfSymbols copyWith: aSupplementaryClassLoader name.	subPage		id: subPageId;		settings: (self settingsFor: aSupplementaryClassLoader parentId: subPageId).	^subPage</body><body package="JNIPort Tools-Settings">enablementSettingFor: aSupplementaryClassLoader 	^(BooleanSetting on: aSupplementaryClassLoader aspect: #isEnabled)		default: true;		label: #Enabled &lt;&lt; #jniport &gt;&gt; 'Enabled';		helpText: #ClassLoaderEnabledHelpText &lt;&lt; #jniport 					&gt;&gt; 'Choose if this class loader is enabled.';		yourself</body><body package="JNIPort Tools-Settings">parentNameSettingFor: aSupplementaryClassLoader 	| choices |	choices := self entries collect: [:aClassLoader | aClassLoader name].	aSupplementaryClassLoader hasParent 		ifTrue: 			["add the current parentName in case there is no current entry with this name"			choices add: aSupplementaryClassLoader parentName].	choices remove: aSupplementaryClassLoader name.	choices := choices asSet asSortedCollection.	^((EnumerationSetting choices: choices labels: choices) 		on: aSupplementaryClassLoader		aspect: #parentName)		label: #ParentName &lt;&lt; #jniport &gt;&gt; 'Parent name';		helpText: #ClassLoaderParentNameHelpText &lt;&lt; #jniport 					&gt;&gt; 'Select the name of the parent class loader. This setting may be left blank.';		yourself</body><body package="JNIPort Tools-Settings">pathSettingFor: aSupplementaryClassLoader 	^(StringSetting on: aSupplementaryClassLoader aspect: #path)		default: aSupplementaryClassLoader path;		label: #ClassLoaderPath &lt;&lt; #jniport &gt;&gt; 'Path';		helpText: #ClassLoaderPathHelpText &lt;&lt; #jniport 					&gt;&gt; 'Path of the class loader. This is a slightly ill-defined concept, if our classloaderClass is java.lang.Classloader, then the path is the string that will be passed to its constructor -- a searchpath of URLs. If the class is different then the path will be interpreted in whatever way is appropriate (in so far as we can make a sensible guess about what is appropriate).';		yourself</body><body package="JNIPort Tools-Settings">removeButtonFor: aSupplementaryClassLoader 	^(JNIPort.DirectActionSetting new)		label: #RemoveThisClassLoader &lt;&lt; #jniport &gt;&gt; 'Remove this class loader';		action: 				[(Dialog confirm: #ConfirmRemoveClassLoader &lt;&lt; #jniport 							&gt;&gt; 'Remove this class loader?') 					ifTrue: 						[(self entries 							contains: [:classLoader | classLoader parentName = aSupplementaryClassLoader name]) 								ifTrue: 									[Dialog warn: #ClassLoaderHasChild &lt;&lt; #jniport 												&gt;&gt; 'This class loader is referenced as parent of another class loader.']								ifFalse: 									[self removeEntry: aSupplementaryClassLoader.									SettingsManager refreshInstancesOpenOn: JNIPortSettingsDomain current]]];		helpText: #RemoveClassLoaderHelpText &lt;&lt; #jniport 					&gt;&gt; 'Remove this class loader from the supplementary class loaders';		yourself</body><body package="JNIPort Tools-Settings">renameButtonFor: aSupplementaryClassLoader 	^(JNIPort.DirectActionSetting new)		label: #RenameClassLoader &lt;&lt; #jniport &gt;&gt; 'Rename this class loader';		action: [self renameEntry: aSupplementaryClassLoader];		helpText: #RenameSupplementaryClassLoaderHelpText &lt;&lt; #jniport 					&gt;&gt; 'Rename this supplementary class loader. Duplicate names are not allowed.';		yourself</body><body package="JNIPort Tools-Settings">renameEntry: aSupplementaryClassLoader 	| classLoaderName |	classLoaderName := Dialog request: #EnterClassLoaderName &lt;&lt; #jniport 						&gt;&gt; 'Enter the name of the class loader:'.	classLoaderName ifNil: [^self].	classLoaderName isEmpty ifTrue: [^self].	classLoaderName := classLoaderName asSymbol.	classLoaderName asSymbol = aSupplementaryClassLoader name ifTrue: [^self].	(self entries 		contains: [:classLoader | classLoader name = classLoaderName]) 			ifTrue: 				[^Dialog warn: #DuplicateClassLoaderName &lt;&lt; #jniport 							&gt;&gt; 'A class loader with this name already exists.'].	aSupplementaryClassLoader name: classLoaderName.	SettingsManager refreshInstancesOpenOn: JNIPortSettingsDomain current</body><body package="JNIPort Tools-Settings">settingsFor: aSupplementaryClassLoader parentId: subPageId 	| settings |	settings := OrderedCollection new.	settings		add: ((self renameButtonFor: aSupplementaryClassLoader) 					id: (subPageId copyWith: #rename));		add: ((self removeButtonFor: aSupplementaryClassLoader) 					id: (subPageId copyWith: #remove));		add: ((self parentNameSettingFor: aSupplementaryClassLoader) 					id: (subPageId copyWith: #parentName));		add: ((self classloaderClassSettingFor: aSupplementaryClassLoader) 					id: (subPageId copyWith: #classloaderClass));		add: ((self pathSettingFor: aSupplementaryClassLoader) 					id: (subPageId copyWith: #path));		add: ((self enablementSettingFor: aSupplementaryClassLoader) 					id: (subPageId copyWith: #enabled)).	^settings</body><body package="JNIPort Tools-Settings">settingsPageWithRootPageId: aSymbol 	| subPageId subPage |	subPage := ModularSettingsPage new.	subPage label: #SupplementaryClassloaders &lt;&lt; #jniport 				&gt;&gt; 'Supplementary Classloaders'.	subPageId := aSymbol , #(#supplementaryClassloaders).	subPage		id: subPageId;		position: 5;		settings: (self settingsWithParentId: subPageId).	^subPage</body></methods><methods><class-id>JNIPort.JavaGhostClassGeneratorSettings</class-id> <category>tool support</category><body package="JNIPort Tools-Settings">settingsPageWithRootPageId: aSymbol 	| subPageId subPage |	subPage := ModularSettingsPage new.	subPage label: #GhostClassSettings &lt;&lt; #jniport &gt;&gt; 'Ghost class settings'.	subPageId := aSymbol , #(#ghostClassSettings).	subPage		id: subPageId;		position: 4;		settings: (self settingsWithParentId: subPageId).	^subPage</body></methods><methods><class-id>JNIPort.JVMSettings</class-id> <category>privileged</category><body package="JNIPort Tools-Settings">listIcon	^ListIconLibrary visualFor: ((JVM hasRunningInstancesForSettingsNamed: self name)				ifTrue: [#runningJvm]				ifFalse: [#jvm])</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>resources</category><body package="JNIPort Tools-Settings">jniPortIcon	^ListIconLibrary visualFor: #jvm</body></methods><methods><class-id>JNIPort.JVMSubSettings</class-id> <category>tool support</category><body package="JNIPort Tools-Settings">addBooleanSettingsWithParentId: anArrayOfSymbols to: aCollection 	self class booleanAspectNames do: 			[:aspect | 			| booleanSetting |			booleanSetting := (BooleanSetting on: self aspect: aspect)						id: (anArrayOfSymbols copyWith: aspect);						default: false;						label: aspect &lt;&lt; #jniport &gt;&gt; aspect asString;						helpText: (aspect , 'HelpText') asSymbol &lt;&lt; #jniport 									&gt;&gt; ('See the comment in ' , self class name , ' &gt;&gt;' , aspect , ' for help');						yourself.			aCollection add: booleanSetting]</body><body package="JNIPort Tools-Settings">addSettingsPagesWithRootPageId: rootPageId to: pages 	pages add: (self settingsPageWithRootPageId: rootPageId)</body><body package="JNIPort Tools-Settings">addSettingsWithParentId: anArrayOfSymbols to: settings 	self addBooleanSettingsWithParentId: anArrayOfSymbols to: settings</body><body package="JNIPort Tools-Settings">settingsPageWithRootPageId: rootPageId	self subclassResponsibility</body><body package="JNIPort Tools-Settings">settingsWithParentId: anArrayOfSymbols 	| settings |	settings := OrderedCollection new.	self addSettingsWithParentId: anArrayOfSymbols to: settings.	^settings</body></methods><methods><class-id>JNIPort.DirectActionSettingModule class</class-id> <category>interface specs</category><body package="JNIPort Tools-Settings">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#min: #(#{Core.Point} 20 25 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 700 525 900 550 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 0 1 ) 					#name: #executeButton 					#model: #execute 					#label: #label 					#defaultable: true ) ) ) )</body></methods><methods><class-id>JNIPort.JavaClassBrowser class</class-id> <category>interface specs</category><body package="JNIPort VW Tool Extensions">behaviorInspectorSpec	"Tools.UIPainter new openOnClass: self andSelector: #behaviorInspectorSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #UnlabeledCanvas 				#defaultString: 'Unlabeled Canvas' 				#catalogID: #labels ) 			#bounds: #(#{Graphics.Rectangle} 700 525 1124 851 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 -20 0.4 ) 					#name: #methodList 					#flags: 15 					#model: #methodListHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #methodSelectionChanged 						#requestValueChangeSelector: #updateRequest ) 					#menu: #methodListMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.4 0 1 0 1 ) 					#name: #text 					#flags: 15 					#model: #textHolder 					#isReadOnly: true 					#tabRequiresControl: false ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0 0 0.4 0 1 ) 					#model: #sideHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #sideChanged 						#requestValueChangeSelector: #updateRequest ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #instance 						#defaultString: 'instance' 						#catalogID: #labels ) 					#select: #instance ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.2 0 0.4 0 1 ) 					#model: #sideHolder 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #sideChanged 						#requestValueChangeSelector: #updateRequest ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #class 						#defaultString: 'class' 						#catalogID: #labels ) 					#select: #class ) ) ) )</body><body package="JNIPort VW Tool Extensions">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #JavaClassWrappers 				#defaultString: 'Java Class Wrappers' 				#catalogID: #jniport ) 			#min: #(#{Core.Point} 200 200 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 700 525 1300 925 ) 			#flags: 4 			#menu: #menuBarMenu 			#toolBar: #toolBarMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 200 0 0 1 ) 					#name: #classSelector 					#flags: 0 					#clientKey: #classSelectionModule ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 200 0 0 0 205 0 0 1 ) 					#name: #ResizingSplitter1 					#flags: 8 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'classSelector' 					#belowWidgets: 'behaviorInspector' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 205 0 0 0 0 1 0 1 ) 					#name: #behaviorInspector 					#flags: 0 					#minorKey: #behaviorInspectorSpec ) ) ) )</body></methods><methods><class-id>JNIPort.JavaClassBrowser class</class-id> <category>resources</category><body package="JNIPort VW Tool Extensions">menuBarMenu	"Tools.MenuEditor new openOnClass: self andSelector: #menuBarMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Browser 					#defaultString: 'Browser' 					#catalogID: #jniport ) 				#nameKey: #browserSubmenu 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Refresh 								#defaultString: 'Refresh' 								#catalogID: #jniport ) 							#nameKey: #refresh 							#value: #refresh 							#shortcutKeyCharacter: #F5 							#shortcutModifiers: 0 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #doIt ) 							#helpText: 							#(#{Kernel.UserMessage} 								#key: #RefreshBrowserContents 								#defaultString: 'Refresh the browser contents' 								#catalogID: #jniport ) ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Close 								#defaultString: 'Close' 								#catalogID: #jniport ) 							#nameKey: #close 							#value: #closeRequest ) ) #(2 ) nil ) ) ) #(1 ) nil ) decodeAsLiteralArray</body><body package="JNIPort VW Tool Extensions">toolBarMenu	"Tools.MenuEditor new openOnClass: self andSelector: #toolBarMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Refresh 					#defaultString: 'Refresh' 					#catalogID: #jniport ) 				#nameKey: #refresh 				#value: #refresh 				#shortcutKeyCharacter: #F5 				#shortcutModifiers: 0 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #doIt ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #RefreshBrowserContents 					#defaultString: 'Refresh the browser contents' 					#catalogID: #jniport ) ) ) #(1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>JNIPort.JNIPortSettingsManager class</class-id> <category>interface specs</category><body package="JNIPort Tools-Settings">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #JNIPortSettings 				#defaultString: 'JNIPort Settings' 				#catalogID: #jniport ) 			#min: #(#{Core.Point} 450 330 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 700 525 1300 945 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 10 0 0 0.38 -45 1 ) 					#name: #TreeView 					#flags: 15 					#model: #pageListHolder 					#menu: #pageTreeMenu 					#useModifierKeys: true 					#selectionType: #highlight 					#displayStringSelector: #label 					#useIcons: #other 					#iconSelectors: #(#listIcon ) 					#rootExpander: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.38 5 0 8 0.38 -45 1 ) 					#name: #ResizingSplitter1 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'TreeView' 					#belowWidgets: 'Subcanvas GroupBox' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0.38 10 0 -10 1 -45 1 ) 					#name: #GroupBox ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -330 1 -35 1 -250 1 -10 1 ) 					#name: #okButton 					#model: #okPressed 					#label: 					#(#{Kernel.UserMessage} 						#key: #OK 						#defaultString: 'OK' 						#catalogID: #labels ) 					#isDefault: true 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -245 1 -35 1 -165 1 -10 1 ) 					#name: #cancelButton 					#model: #cancelPressed 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #labels ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -160 1 -35 1 -90 1 -10 1 ) 					#name: #applyButton 					#model: #applyPressed 					#helpText: 					#(#{Kernel.UserMessage} 						#key: #SettingsManagerApplyButton 						#defaultString: 'Apply the yet unapplied settings without closing this window.' 						#catalogID: #labels ) 					#label: 					#(#{Kernel.UserMessage} 						#key: #_Apply 						#defaultString: '&amp;Apply' 						#catalogID: #labels ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -80 1 -35 1 -10 1 -10 1 ) 					#name: #helpButton 					#model: #helpPressed 					#helpText: '' 					#label: 					#(#{Kernel.UserMessage} 						#key: #AmpHelp 						#defaultString: '&amp;Help' 						#catalogID: #labels ) 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0.38 35 0 -20 1 -55 1 ) 					#name: #Subcanvas 					#flags: 1 ) ) ) )</body></methods><methods><class-id>JNIPort.JNIPortSettingsManager class</class-id> <category>resources</category><body package="JNIPort Tools-Settings">pageTreeMenu	"Tools.MenuEditor new openOnClass: self andSelector: #pageTreeMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Start_JavaVM 					#defaultString: 'Start &amp;Java VM' 					#catalogID: #jniport ) 				#nameKey: #startJavaVM 				#value: #startJavaVM 				#enablementSelector: #isJVMSettingSelected 				#labelImage: #(#{UI.ResourceRetriever} #{ListIconLibrary} #jvm ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #StartJVMHelpText 					#defaultString: 'Starts a Java VM using the selected settings.' 					#catalogID: #jniport ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Shut_downJavaVMs 					#defaultString: 'Shut&amp;down Java VMs' 					#catalogID: #jniport ) 				#nameKey: #shutdownJavaVMs 				#value: #shutdownJavaVMs 				#enablementSelector: #isRunningJVMSelected 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #abort ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #ShutdownJVMsHelpText 					#defaultString: 'Shuts down all Java VMs which have been started with the selected settings.' 					#catalogID: #jniport ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #InspectRunningJavaVMs 					#defaultString: 'Inspect running Java VMs' 					#catalogID: #jniport ) 				#nameKey: #inspectRunningJavaVMs 				#value: #inspectRunningJavaVMs 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #inspect ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #InspectRunningJVMsHelpText 					#defaultString: 'Opens an inspector on the running Java VMs.' 					#catalogID: #jniport ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_LoadFromRegistry 					#defaultString: '&amp;Load from Registry' 					#catalogID: #jniport ) 				#nameKey: #importAllSettings 				#value: #importAllSettings 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileOpen ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #LoadSettingsFromRegistryHelpText 					#defaultString: 'Loads the JNIPort settings from the Windows registry or from a file based registry if not on Windows.' 					#catalogID: #jniport ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_SaveToRegistry 					#defaultString: '&amp;Save to Registry' 					#catalogID: #jniport ) 				#nameKey: #exportSettings 				#value: #exportSettings 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} #fileSave ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #SaveSettingsToRegistryHelpText 					#defaultString: 'Saves the JNIPort settings to the Windows registry or to a file based registry if not on Windows.' 					#catalogID: #jniport ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_AddSettingsDot 					#defaultString: '&amp;Add Settings...' 					#catalogID: #jniport ) 				#nameKey: #addSettings 				#value: #addSettings 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #AddSettingsHelpText 					#defaultString: 'Add new JVM settings.' 					#catalogID: #jniport ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #RemoveSettingsDot 					#defaultString: 'Remove Settings...' 					#catalogID: #jniport ) 				#enabled: false 				#nameKey: #removeSettings 				#value: #removeSettings 				#enablementSelector: #isInactiveJVMSelected 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #delete ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #RemoveSettingsHelpText 					#defaultString: 'Remove the selected JVM settings.' 					#catalogID: #jniport ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #_ResetAllToDefaultDots 					#defaultString: '&amp;Reset All to Default...' 					#catalogID: #menus ) 				#nameKey: #resetAllToDefault 				#value: #resetAllToDefault 				#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #undo ) 				#helpText: 				#(#{Kernel.UserMessage} 					#key: #ResetToDefaultsHelpText 					#defaultString: 'Resets all settings to their defaults. Use with care: This will remove all predefined settings.' 					#catalogID: #jniport ) ) ) #(3 2 3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>JNIPort.JavaWrapperClassCreationDialog class</class-id> <category>interface specs</category><body package="JNIPort VW Tool Extensions">advancedSpec	"Tools.UIPainter new openOnClass: self andSelector: #advancedSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #NewJavaWrapperClass 				#defaultString: 'New Java Wrapper Class' 				#catalogID: #jniport ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 700 525 1160 815 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.CheckBoxSpec} 					#layout: #(#{Core.Point} 160 15 ) 					#name: #privateCheckBox 					#model: #privateHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #Private 						#defaultString: 'Private' 						#catalogID: #labels ) ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 40 0 -10 1 -10 1 ) 					#name: #importsEditor 					#model: #importsHolder 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 65 0 0 1 ) 					#name: #importsLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #ImportsC 						#defaultString: 'Imports:' 						#catalogID: #labels ) ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 138 0 43 0 18 18 ) 					#name: #indexedTypeErrorLabel 					#flags: 16 					#label: #errorIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 138 0 73 0 18 18 ) 					#name: #classInstanceVariablesErrorLabel 					#flags: 16 					#label: #errorIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 138 0 103 0 18 18 ) 					#name: #importsErrorLabel 					#flags: 16 					#label: #errorIcon 					#hasCharacterOrientedLabel: false ) ) ) )</body><body package="JNIPort VW Tool Extensions">detailsSpec	"Tools.UIPainter new openOnClass: self andSelector: #detailsSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #NewJavaWrapperClass 				#defaultString: 'New Java Wrapper Class' 				#catalogID: #jniport ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 700 525 1160 875 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 84 0 -10 1 109 0 ) 					#name: #javaClassNameField 					#model: #javaClassNameHolder ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 109 0 0 1 ) 					#name: #javaClassLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #JavaClassC 						#defaultString: 'Java class:' 						#catalogID: #jniport ) ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 124 0 -10 1 149 0 ) 					#name: #nameField 					#model: #nameHolder ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 149 0 0 1 ) 					#name: #nameLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #NameC 						#defaultString: 'Name:' 						#catalogID: #labels ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 160 0 154 0 -10 1 179 0 ) 					#name: #superclassModule 					#flags: 0 					#majorKey: #{EntryWithPasteButtonModule} 					#minorKey: #windowSpec 					#clientKey: #superclassModule ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 179 0 0 1 ) 					#name: #superclassLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #SuperclassC 						#defaultString: 'Superclass:' 						#catalogID: #labels ) ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 160 0 209 0 0 1 ) 					#name: #instanceWrapperSwitch 					#model: #wrapperTypeHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #GenerateInstanceWrapperClass 						#defaultString: 'Generate instance wrapper class' 						#catalogID: #jniport ) 					#select: #instanceWrapperClass ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{UI.AlignmentOrigin} 160 0 229 0 0 1 ) 					#name: #staticWrapperSwitch 					#model: #wrapperTypeHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #GenerateStaticWrapperClass 						#defaultString: 'Generate static wrapper class' 						#catalogID: #jniport ) 					#select: #staticWrapperClass ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{UI.AlignmentOrigin} 160 0 259 0 0 1 ) 					#name: #createInitializeBox 					#model: #createInitializeHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #InitializationAndNew 						#defaultString: 'Initializer' 						#catalogID: #labels ) ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{UI.AlignmentOrigin} 160 0 279 0 0 1 ) 					#name: #subclassResponsibilitiesBox 					#model: #defineSubclassResponsibilitiesHolder 					#label: 					#(#{Kernel.UserMessage} 						#key: #SubclassResponsibilities 						#defaultString: 'Subclass responsibilities' 						#catalogID: #labels ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 10 0 259 0 0 1 ) 					#name: #createMethodsLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #CreateMethodsC 						#defaultString: 'Create methods:' 						#catalogID: #labels ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 10 0 -10 1 70 0 ) 					#name: #locationSubcanvas 					#flags: 0 					#majorKey: #{Tools.DefinitionCreationDialog} 					#minorKey: #locationSpecWithPackage ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 74 0 -10 1 76 0 ) 					#name: #divider ) 				#(#{UI.DividerSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 116 0 -10 1 118 0 ) 					#name: #divider2 ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 138 0 87 0 18 18 ) 					#name: #javaClassErrorLabel 					#flags: 16 					#label: #errorIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 138 0 127 0 18 18 ) 					#name: #nameErrorLabel 					#flags: 16 					#label: #errorIcon 					#hasCharacterOrientedLabel: false ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Graphics.LayoutSizedOrigin} 138 0 157 0 18 18 ) 					#name: #superclassErrorLabel 					#flags: 16 					#label: #errorIcon 					#hasCharacterOrientedLabel: false ) ) ) )</body><body package="JNIPort VW Tool Extensions">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #NewJavaWrapperClass 				#defaultString: 'New Java Wrapper Class' 				#catalogID: #jniport ) 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1024 768 ) 			#bounds: #(#{Graphics.Rectangle} 700 525 1160 895 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0 10 0 -10 1 -45 1 ) 					#name: #tabControl 					#model: #tabHolder 					#labels: #() ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -90 1 -35 1 -10 1 -10 1 ) 					#name: #cancelButton 					#model: #cancel 					#label: 					#(#{Kernel.UserMessage} 						#key: #Cancel 						#defaultString: 'Cancel' 						#catalogID: #labels ) 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -180 1 -35 1 -100 1 -10 1 ) 					#name: #okButton 					#model: #accept 					#label: 					#(#{Kernel.UserMessage} 						#key: #OK 						#defaultString: 'OK' 						#catalogID: #labels ) 					#isDefault: true 					#defaultable: true ) ) ) )</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>actions</category><body package="JNIPort VW Tool Extensions">createNewJavaWrapperClass	"Creates a new wrapper class for a Java class. The attributes of the new class will be requested in a dialog. Creates a wrapper either for the 'instance side' of the Java class or for the static fields and methods, depending on a setting in the dialog. If both wrapper classes are needed, they have to be created separately."		&lt;menuItem: 'New Java Wrapper Class...' 		nameKey: nil 		enablement: #hasRunningJVM 		indication: nil 		menu: #(#classMenu) 		position: 10.03&gt;	| javaLangObjectWrapperClass dialog |	self changeRequest ifFalse: [^self].	javaLangObjectWrapperClass := JNIPort.JavaLangObject.	dialog := JNIPort.JavaWrapperClassCreationDialog new.	dialog		superclass: javaLangObjectWrapperClass;		package: self package.	(self mostPopularNameSpaceIn: self package) ifNotNil: [:nameSpace | dialog nameSpace: nameSpace].	javaLangObjectWrapperClass ifNotNil: [dialog nameSpace: javaLangObjectWrapperClass environment].	self selectedNameSpace ifNotNil: [:namespace | dialog nameSpace: namespace].	dialog open ifFalse: [^self].	(self createJavaWrapperClassFromDialog: dialog)		ifNotNil:			[:wrapperClass | 			self				selectClass: wrapperClass;				refreshLists]</body></methods><methods><class-id>Tools.ListIconLibrary class</class-id> <category>resources</category><body package="JNIPort VW Tool Extensions">javaInstance16x16	"UIMaskEditor new openOnClass: self andSelector: #javaInstance16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8159 8159)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[0 0 0 0 7 192 0 0 31 240 0 0 60 56 0 0 62 120 0 0 126 124 0 0 126 124 0 0 126 124 0 0 126 124 0 0 126 124 0 0 62 120 0 0 62 120 0 0 28 240 0 0 7 192 0 0 0 0 0 0 0 0 0 0])</body><body package="JNIPort VW Tool Extensions">javaInstance16x16mask	"UIMaskEditor new openOnClass: self andSelector: #javaInstance16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[7 192 255 255 31 240 255 255 63 248 255 255 127 252 255 255 127 252 255 255 255 254 255 255 255 254 255 255 255 254 255 255 255 254 255 255 255 254 255 255 127 252 255 255 127 252 255 255 63 248 255 255 31 240 255 255 7 192 255 255 0 0 255 255])</body><body package="JNIPort VW Tool Extensions">javaInstanceGhost16x16	"UIMaskEditor new openOnClass: self andSelector: #javaInstanceGhost16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 8159 8159)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6143 6143 6143)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[0 0 0 0 0 42 160 0 2 170 170 0 10 165 90 128 10 169 106 128 42 169 106 160 42 169 106 160 42 169 106 160 42 169 106 160 42 169 106 160 10 169 106 128 10 169 106 128 2 165 170 0 0 42 160 0 0 0 0 0 0 0 0 0])</body><body package="JNIPort VW Tool Extensions">javaInstanceGhost16x16mask	"UIMaskEditor new openOnClass: self andSelector: #javaInstanceGhost16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[7 192 255 255 31 240 255 255 63 248 255 255 127 252 255 255 127 252 255 255 255 254 255 255 255 254 255 255 255 254 255 255 255 254 255 255 255 254 255 255 127 252 255 255 127 252 255 255 63 248 255 255 31 240 255 255 7 192 255 255 0 0 255 255])</body><body package="JNIPort VW Tool Extensions">javaObject16x16	"UIMaskEditor new openOnClass: self andSelector: #javaObject16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8159 8159 8159)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[0 0 0 0 7 192 0 0 31 240 0 0 60 56 0 0 62 120 0 0 126 124 0 0 126 124 0 0 126 124 0 0 126 124 0 0 126 124 0 0 62 120 0 0 62 120 0 0 28 240 0 0 7 192 0 0 0 0 0 0 0 0 0 0])</body><body package="JNIPort VW Tool Extensions">javaObject16x16mask	"UIMaskEditor new openOnClass: self andSelector: #javaObject16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[7 192 255 255 31 240 255 255 63 248 255 255 127 252 255 255 127 252 255 255 255 254 255 255 255 254 255 255 255 254 255 255 255 254 255 255 255 254 255 255 127 252 255 255 127 252 255 255 63 248 255 255 31 240 255 255 7 192 255 255 0 0 255 255])</body><body package="JNIPort VW Tool Extensions">javaStatic16x16	"UIMaskEditor new openOnClass: self andSelector: #javaStatic16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8159 8159 0)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[0 0 0 0 7 192 0 0 31 240 0 0 60 56 0 0 62 120 0 0 126 124 0 0 126 124 0 0 126 124 0 0 126 124 0 0 126 124 0 0 62 120 0 0 62 120 0 0 28 240 0 0 7 192 0 0 0 0 0 0 0 0 0 0])</body><body package="JNIPort VW Tool Extensions">javaStatic16x16mask	"UIMaskEditor new openOnClass: self andSelector: #javaStatic16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[7 192 255 255 31 240 255 255 63 248 255 255 127 252 255 255 127 252 255 255 255 254 255 255 255 254 255 255 255 254 255 255 255 254 255 255 255 254 255 255 127 252 255 255 127 252 255 255 63 248 255 255 31 240 255 255 7 192 255 255 0 0 255 255])</body><body package="JNIPort VW Tool Extensions">javaStaticGhost16x16	"UIMaskEditor new openOnClass: self andSelector: #javaStaticGhost16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8159 8159 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6143 6143 6143)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[0 0 0 0 0 42 160 0 2 170 170 0 10 165 90 128 10 169 106 128 42 169 106 160 42 169 106 160 42 169 106 160 42 169 106 160 42 169 106 160 10 169 106 128 10 169 106 128 2 165 170 0 0 42 160 0 0 0 0 0 0 0 0 0])</body><body package="JNIPort VW Tool Extensions">javaStaticGhost16x16mask	"UIMaskEditor new openOnClass: self andSelector: #javaStaticGhost16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[7 192 255 255 31 240 255 255 63 248 255 255 127 252 255 255 127 252 255 255 255 254 255 255 255 254 255 255 255 254 255 255 255 254 255 255 255 254 255 255 127 252 255 255 127 252 255 255 63 248 255 255 31 240 255 255 7 192 255 255 0 0 255 255])</body><body package="JNIPort VW Tool Extensions">javaStaticGhostInstanceClass16x16	"UIMaskEditor new openOnClass: self andSelector: #javaStaticGhostInstanceClass16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8159 8159 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6143 6143 6143)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[0 0 0 0 0 21 80 0 1 85 85 0 5 80 5 64 5 84 21 64 21 84 21 80 21 84 21 80 42 169 106 160 42 169 106 160 42 169 106 160 10 169 106 128 10 169 106 128 2 165 170 0 0 42 160 0 0 0 0 0 0 0 0 0])</body><body package="JNIPort VW Tool Extensions">javaStaticGhostInstanceClass16x16mask	"UIMaskEditor new openOnClass: self andSelector: #javaStaticGhostInstanceClass16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[7 192 255 255 31 240 255 255 63 248 255 255 127 252 255 255 127 252 255 255 255 254 255 255 255 254 255 255 255 254 255 255 255 254 255 255 255 254 255 255 127 252 255 255 127 252 255 255 63 248 255 255 31 240 255 255 7 192 255 255 0 0 255 255])</body><body package="JNIPort VW Tool Extensions">javaStaticGhostStatic16x16	"UIMaskEditor new openOnClass: self andSelector: #javaStaticGhostStatic16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8159 8159 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6143 6143 6143)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[0 0 0 0 0 42 160 0 2 170 170 0 10 165 90 128 10 169 106 128 42 169 106 160 42 169 106 160 21 84 21 80 21 84 21 80 21 84 21 80 5 84 21 64 5 84 21 64 1 80 85 0 0 21 80 0 0 0 0 0 0 0 0 0])</body><body package="JNIPort VW Tool Extensions">javaStaticGhostStatic16x16mask	"UIMaskEditor new openOnClass: self andSelector: #javaStaticGhostStatic16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[7 192 255 255 31 240 255 255 63 248 255 255 127 252 255 255 127 252 255 255 255 254 255 255 255 254 255 255 255 254 255 255 255 254 255 255 255 254 255 255 127 252 255 255 127 252 255 255 63 248 255 255 31 240 255 255 7 192 255 255 0 0 255 255])</body><body package="JNIPort VW Tool Extensions">jvm16x16	"UIMaskEditor new openOnClass: self andSelector: #jvm16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8159 8159 0)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 254 0 0 7 254 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="JNIPort VW Tool Extensions">jvm16x16mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #jvm16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 60 0 0 0 24 0 0 0 24 0 0 0 30 247 0 0 26 190 0 0 25 42 0 0 25 34 0 0 31 254 0 0 31 254 0 0 24 0 0 0 24 0 0 0 24 0 0 0 80 0 0 0 96 0 0 0 0 0 0 0])</body><body package="JNIPort VW Tool Extensions">runningJvm16x16	"Tools.UIMaskEditor new openOnClass: self andSelector: #runningJvm16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: #[95 245 85 85 112 13 85 85 92 53 85 85 92 63 255 255 92 3 0 192 92 51 48 3 92 60 243 51 92 60 243 243 92 42 170 170 92 42 170 170 92 53 85 85 92 53 85 85 124 53 85 85 204 213 85 85 195 85 85 85 125 85 85 85])</body><body package="JNIPort VW Tool Extensions">runningJvm16x16mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #runningJvm16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0])</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="JNIPort VW Tool Extensions">jniPortJavaClassBrowser	"Open a new JNIPort Java class browser."	&lt;menuItem: #(#jniPortSettings #jniport 'Java &amp;Class Browser')		icon: #jniPortClassBrowserIcon		nameKey: #jniPortJavaClassBrowser		enablement: #jvmIsRunning		indication: nil		menu: #(#menuBar tools JNIPort)		position: 10.03&gt;	JNIPort.JavaClassBrowser open</body><body package="JNIPort VW Tool Extensions">jniPortSubmenu	"Define a sub-menu for each of the JNIPort tools."	&lt;submenu: 'JNIPort for VisualWorks'		nameKey: #JNIPort		menu: #(#menuBar #tools)		position: 40.01&gt;</body></methods><methods><class-id>JNIPort.JavaObject</class-id> <category>user interface</category><body package="JNIPort VW Tool Extensions">inspectorExtraAttributes	&lt;inspectorFields&gt;	^self isDead 		ifTrue: [#()]		ifFalse: 			[self allRealFields collect: 					[:field | 					Tools.Trippy.DerivedAttribute label: field name						valueBlock: [field getValueFrom: self]]]</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="JNIPort Tools-Settings">jniPortHelp	"Show help information for JNIPort."	&lt;menuItem: #(#Help #jniport '&amp;Help')		icon: #helpIcon		nameKey: #jniPortHelp		menu: #(#menuBar tools JNIPort)		position: 10.01&gt;	SimpleHelp openOn: (SimpleHelp 				helpString: JNIPort.JNIPortSettingsDomain jniPortHelpText)</body><body package="JNIPort Tools-Settings">jniPortSettings	"Open a new JNIPort Settings control panel."	&lt;menuItem: #(#jniPortSettings #jniport '&amp;JNIPort Settings')		icon: #jniPortIcon		nameKey: #jniPortSettings		menu: #(#menuBar tools JNIPort)		position: 10.02&gt;	JNIPort.JNIPortSettingsManager 		openOrRaise: JNIPort.JNIPortSettingsDomain		selectPage: #(jniPortSettings)</body></methods><initialize><class-id>JNIPort.JavaWrapperClassCreationDialog</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>JVMSettings</name><environment>JNIPort</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name categories </inst-vars><class-inst-vars>template predefined </class-inst-vars><imports></imports><category>JNIPort-Java-Base</category><attributes><package>JNIPort-Java-Base</package></attributes></class><class><name>LiteralNode</name><environment>Kernel</environment><super>Kernel.LeafNode</super><private>false</private><indexed-type>none</indexed-type><inst-vars>value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Compiler-Program Objects</category><attributes><package>System-Compiler-Program Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>DefinitionCreationDialog</name><environment>Tools</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>packageModule namespaceModule nameHolder privateHolder importsHolder </inst-vars><class-inst-vars></class-inst-vars><imports>			private Refactory.Browser.Navigator			</imports><category>Tools-Programming</category><attributes><package>Tools-Programming</package></attributes></class><class><name>JavaObject</name><environment>JNIPort</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>eventHandlers </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Java-Base</category><attributes><package>JNIPort-Java-Base</package></attributes></class><class><name>JVMSubSettings</name><environment>JNIPort</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>flags </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Java-Base</category><attributes><package>JNIPort-Java-Base</package></attributes></class><class><name>JavaWrapperGeneratorSettings</name><environment>JNIPort</environment><super>JNIPort.JVMSubSettings</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Java-WrapperGeneration</category><attributes><package>JNIPort-Java-WrapperGeneration</package></attributes></class><class><name>JavaGhostClassGeneratorSettings</name><environment>JNIPort</environment><super>JNIPort.JavaWrapperGeneratorSettings</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Java-GhostClasses</category><attributes><package>JNIPort-Java-GhostClasses</package></attributes></class><class><name>Metaclass</name><environment>Core</environment><super>Core.ClassDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>thisClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>SettingsManager</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>triggerChannel pageListHolder domainHolder rootPage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-UI</category><attributes><package>Tools-Settings</package></attributes></class><class><name>SettingsDomain</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cachedSettings cachedPages unappliedSnapshots </inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>Tools-Settings</category><attributes><package>Tools-Settings</package></attributes></class><class><name>ProgramNodeBuilder</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Compiler-Program Objects</category><attributes><package>System-Compiler-Program Objects</package></attributes></class><class><name>JavaPrimitiveArray</name><environment>JNIPort</environment><super>JNIPort.JavaAggregate</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Java-Base</category><attributes><package>JNIPort-Java-Base</package></attributes></class><class><name>JavaStatic</name><environment>JNIPort</environment><super>JNIPort.JavaObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jvm classObject javaSuperclass instanceClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Java-Base</category><attributes><package>JNIPort-Java-Base</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>JavaObjectArray</name><environment>JNIPort</environment><super>JNIPort.JavaAggregate</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Java-Base</category><attributes><package>JNIPort-Java-Base</package></attributes></class><class><name>JNIPortSettings</name><environment>JNIPort</environment><super>JNIPort.JVMSubSettings</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jvmClass jniLibraryFilename watcherClasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Java-Base</category><attributes><package>JNIPort-Java-Base</package></attributes></class><class><name>JavaRuntimeSettings</name><environment>JNIPort</environment><super>JNIPort.JVMSubSettings</super><private>false</private><indexed-type>none</indexed-type><inst-vars>options </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Java-Base</category><attributes><package>JNIPort-Java-Base</package></attributes></class><class><name>SettingsPageDecoration</name><environment>Tools</environment><super>Tools.GenericSettingDescriptor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-UI</category><attributes><package>Tools-Settings</package></attributes></class><class><name>StaticJavaLangObject</name><environment>JNIPort</environment><super>JNIPort.JavaClassStatic</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Java-Base</category><attributes><package>JNIPort-Java-Base</package></attributes></class><class><name>ModularSettingsPageModule</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent setting valueHolder spec </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-UI</category><attributes><package>Tools-Settings</package></attributes></class><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>Subsystem</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>state canActivate prerequisites </inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>System-Subsystems</category><attributes><package>System-Subsystems</package></attributes></class><class><name>Decompiler</name><environment>Kernel</environment><super>Kernel.InstructionStream</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder instVars allParameters localVars copiedVars tempCount stack statements limit primitive primErrorCode lastPc exit lastJumpPc hasValue loopDepth lastAssignment lastAssignVar lastAssignPc </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>System-Compiler-Public Access</category><attributes><package>System-Compiler-Public Access</package></attributes></class><class><name>SupplementaryClassloadersSettings</name><environment>JNIPort</environment><super>JNIPort.JVMSubSettings</super><private>false</private><indexed-type>none</indexed-type><inst-vars>entries </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Java-Base</category><attributes><package>JNIPort-Java-Base</package></attributes></class></st-source>