<?xml version="1.0"?><st-source><!-- Name: JNIPort TestsNotice: Copyright © 2006-2014 Joachim GeidelPortions of this software created by Chris Uppal are © Chris Uppal, 2001-2007.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.- - Portions of this software which were created by Chris Uppal are covered by Chris Uppal's  license:"The terms under which you may use this software are:	You must not claim that you wrote it.	You must not claim that you own it.	You use it at your own risk.I'd appreciate it if you didn't distribute modified versions without at least trying to tell me about the changes you thought worthwhile.	-  chris"BundleName: JNIPort TestsBundleStructure: a Store.BundleForParcelComment: This bundle contains tests for the bundles JNIPort and JNIPort Prerequisites. JNIPort is an interface to the Java Virtual Machine. It is based in the Java Native Interface (JNI). The original implementation was done by Chris Uppal in Dolphin Smalltalk. - - Prerequisites- SUnitTooThe tests in the bundle JNIPort Tests are written using the SUnitToo test framework. SUnitToo is a variant of SUnit, and it is included in the VisualWorks distribution as a parcel in the directory $(VISUALWORKS)/Contributed. For documentation of SUnitToo, please read the parcel's comment after loading it. SUnitToo is a prerequisite of the bundle JNIPort Tests, so it will be loaded automatically when you load JNIPort Tests.You should also load the package SUnitToo(ls), which can be found in $(VISUALWORKS)/Contributed. It is a prerequisite of the JNIPort Tools bundle and will be loaded when you load the tools. If you don't want the JNIPort tools, you will have to load SUnitToo(ls) manually. SUnitToo(ls) adds buttons at the bottom of the Refactoring Browser which let you run and debug the tests. You can select one or more bundles or packages to run all test in all subclasses of TestCase in those bundles or packages. Select one or more classes to run all tests in them. You can also select one or more test methods to run specific tests. For more details on how to use SUnitToo, see the package comments of SUnitToo and SUnitToo(ls).- JAR filesTo run the tests, you need the bundle JNIPort and the files JNIPort30.jar and JNIPort30-Tests.jar from the archive JNIPort_Extras.zip which is part of the JNIPort bundle (version 3.0 or later). Both jar files must be on the Java classpath. One way to ensure this is to add the files to the classpath in the JVM settings. If you have loaded the bundle "JNIPort Tools", you can define the classpath in the JNIPort settings tool. In this case, where the classpath is defined as a runtime parameter for the Java virtual machine, the path separator is the semicolon (;) on MS Windows, but a colon (:) on Linux and MacOS-X. It may be easier to use absolute paths on Linux.MS Windows with jar files in the working directory:	.;JNIPort30.jar;JNIPort30-Tests.jarLinux, MacOS-X with jar files somewhere else:	.:/insert_path_here/JNIPort30.jar:/insert_path_here/JNIPort30-Tests.jarAnother option is to set the CLASSPATH environment variable. In this case, the path separator is always the semicolon (;). If you have copied the two jar files to the working directory, you may set the CLASSPATH like this:	CLASSPATH=.;JNIPort30.jar;JNIPort30-Tests.jarThe source code for the classes in JNIPort30-Tests.jar is located in the directory src/JNIPort in the zip file "JNIPort-Extras.zip". You don't need the source code for running the tests.- - Running the testsTo run the tests in the bundle "JNIPort Tests" using SUnitToo(ls), execute	JVM defaultin a workspace, which initializes a running Java VM, or start a JVM from the JNIPort Settings tool. When the JVM is running, select the bundle "JNIPort Tests" in the Refactoring Browser and execute all tests in the bundle by clicking on the "run" button at the bottom of the browser window.The tests for wrapper generation and for callbacks from Java will report errors when the default JVM configuration is used. You have to use a JVM configured for wrapper generation and callbacks to run them. DevelopmentPrerequisites: #(#(#any 'SUnitToo' '') #(#any 'WeakCollections' '') #(#any 'JNIPort' ''))DisregardedPrerequisites: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'JNIPort-VW-Extensions' #componentType #package) #(#name 'JNIPort-StringEncoding' #componentType #package) #(#name 'JNIPort-StandardLibInterface' #componentType #package) #(#name 'JNIPort-Namespace' #componentType #package) #(#name 'JNIPort-GhostClasses' #componentType #package) #(#name 'JNIPort-External' #componentType #package))Parcel: nilParcelName: JNIPort TestsPrerequisiteDescriptions: #(#(#name 'SUnitToo' #componentType #package) #(#name 'WeakCollections' #componentType #package) #(#name 'JNIPort' #componentType #bundle))PrerequisiteParcels: #(#('SUnitToo' '') #('WeakCollections' '') #('JNIPort' '') #('SUnitToo' '') #('WeakCollections' '') #('JNIPort Prerequisites' '') #('JNIPort' ''))Version: 3.0a2Date: 5:10:14 PM August 22, 2014 --><time-stamp>From VisualWorks®, Pre-Release 8.0 (aug14.2) of 8 August 2014 on 22 August 2014 at 17:10:14</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>GenericJNIPortRegressionTest</name><environment>JNIPort.Tests</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jvm </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.GenericJNIPortRegressionTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortBasicFieldsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subject </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicFieldsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortBasicInstanceFieldsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortBasicFieldsTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicInstanceFieldsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedMethodAccessTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedMethodAccessTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortTestCallbacks</name><environment>JNIPort.Tests</environment><super>JNIPort.JavaLangObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Callbacks</category><attributes><package>JNIPort-Tests-Java-Callbacks</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortTestCallbacks</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortArrayTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortArrayTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortArrayOfBooleansTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortArrayTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortArrayOfBooleansTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedInheritedFieldsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedInheritedFieldsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGhostClassTest</name><environment>JNIPort.Tests</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>ghostClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Prerequisites</category><attributes><package>JNIPort-Tests-Prerequisites</package></attributes></class><class><name>JNIPortArrayOfIntegerTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortArrayTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortArrayOfIntegerTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortArrayOfIntsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortArrayOfIntegerTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortArrayOfIntsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortBasicMethodReturnsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subject </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicMethodReturnsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortBasicInstanceMethodReturnsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortBasicMethodReturnsTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicInstanceMethodReturnsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortBasicInterfaceFieldsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicInterfaceFieldsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>StaticJNIPortTestStaticMethods</name><environment>JNIPort.Tests</environment><super>JNIPort.StaticJavaLangObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.StaticJNIPortTestStaticMethods</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortArrayOfFloatsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortArrayTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortArrayOfFloatsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortBasicInheritedMethodsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicInheritedMethodsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>StaticJNIPortTestEvents</name><environment>JNIPort.Tests</environment><super>JNIPort.StaticJavaLangObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Callbacks</category><attributes><package>JNIPort-Tests-Java-Callbacks</package></attributes></class><comment><class-id>JNIPort.Tests.StaticJNIPortTestEvents</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedMethodReturnsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subject </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedMethodReturnsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedInstanceMethodReturnsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortGeneratedMethodReturnsTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedInstanceMethodReturnsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedHiddenFieldsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedHiddenFieldsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortComparisonTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>string1 string2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortComparisonTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortCollectionExtensionsTest</name><environment>JNIPort.Tests</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Prerequisites</category><attributes><package>JNIPort-Tests-Prerequisites</package></attributes></class><class><name>JNIPortBasicConstructorsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicConstructorsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortBasicMethodArgumentsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subject </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicMethodArgumentsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortBasicInstanceMethodArgumentsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortBasicMethodArgumentsTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicInstanceMethodArgumentsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIInterfaceTest</name><environment>JNIPort.Tests</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-JNI</category><attributes><package>JNIPort-Tests-JNI</package></attributes></class><class><name>JNIPortBasicStaticMethodReturnsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortBasicMethodReturnsTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicStaticMethodReturnsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedFieldsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subject </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedFieldsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortBasicHiddenMethodsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicHiddenMethodsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortByteArrayCreationTest</name><environment>JNIPort.Tests</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Prerequisites</category><attributes><package>JNIPort-Tests-Prerequisites</package></attributes></class><class><name>JNIPortArrayOfLongsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortArrayOfIntegerTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortArrayOfLongsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortCallbackRequestsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic callbacksStatus </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Callbacks</category><attributes><package>JNIPort-Tests-Java-Callbacks</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortCallbackRequestsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortJVMTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><class><name>JNIPortArrayOfObjectsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortArrayTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortArrayOfObjectsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortClassLookupTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortClassLookupTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortTestEventSource</name><environment>JNIPort.Tests</environment><super>JNIPort.JavaLangObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Callbacks</category><attributes><package>JNIPort-Tests-Java-Callbacks</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortTestEventSource</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedMethodArgumentsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>subject </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedMethodArgumentsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedInstanceMethodArgumentsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortGeneratedMethodArgumentsTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedInstanceMethodArgumentsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedInhertedInterfaceFieldsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedInhertedInterfaceFieldsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedInstanceFieldsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortGeneratedFieldsTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedInstanceFieldsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JavaModifiedUTF8StreamEncoderTest</name><environment>JNIPort.Tests</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Prerequisites</category><attributes><package>JNIPort-Tests-Prerequisites</package></attributes></class><class><name>JNIPortCallbackEventsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classStatic eventSource eventForwarder eventMethod eventsReceived </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Callbacks</category><attributes><package>JNIPort-Tests-Java-Callbacks</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortCallbackEventsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortBasicInhertedInterfaceFieldsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicInhertedInterfaceFieldsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIVTableClientTest</name><environment>JNIPort.Tests</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-JNI</category><attributes><package>JNIPort-Tests-JNI</package></attributes></class><class><name>JNIPortArrayOfStringsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortArrayTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortArrayOfStringsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedStaticMethodReturnsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortGeneratedMethodReturnsTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedStaticMethodReturnsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortCallbackNotificationsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic notificationsStatus </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Callbacks</category><attributes><package>JNIPort-Tests-Java-Callbacks</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortCallbackNotificationsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>VaListTest</name><environment>JNIPort.Tests</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Prerequisites</category><attributes><package>JNIPort-Tests-Prerequisites</package></attributes></class><class><name>JNIPortArrayOfShortsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortArrayOfIntegerTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortArrayOfShortsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortArrayOfCharsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortArrayTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortArrayOfCharsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortBasicMethodAccessTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicMethodAccessTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>StaticJNIPortTestNotifications</name><environment>JNIPort.Tests</environment><super>JNIPort.StaticJavaLangObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Callbacks</category><attributes><package>JNIPort-Tests-Java-Callbacks</package></attributes></class><comment><class-id>JNIPort.Tests.StaticJNIPortTestNotifications</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortBasicStaticMethodArgumentsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortBasicMethodArgumentsTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicStaticMethodArgumentsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedHiddenMethodsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedHiddenMethodsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortBasicHiddenFieldsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicHiddenFieldsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedStaticMethodArgumentsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortGeneratedMethodArgumentsTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedStaticMethodArgumentsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>EncodedStringCopyingTest</name><environment>JNIPort.Tests</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Prerequisites</category><attributes><package>JNIPort-Tests-Prerequisites</package></attributes></class><class><name>JNIPortGeneratedInheritedMethodsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedInheritedMethodsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortBasicInheritedFieldsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicInheritedFieldsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIJavaVMInitArgsTest</name><environment>JNIPort.Tests</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-JNI</category><attributes><package>JNIPort-Tests-JNI</package></attributes></class><class><name>JNIPortBasicStaticFieldsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortBasicFieldsTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicStaticFieldsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedConstructorsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedConstructorsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortTestEventObject</name><environment>JNIPort.Tests</environment><super>JNIPort.JavaLangObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Callbacks</category><attributes><package>JNIPort-Tests-Java-Callbacks</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortTestEventObject</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortArrayOfDoublesTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortArrayTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortArrayOfDoublesTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedFieldAccessTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedFieldAccessTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.orgNote, we don't test writing of "final" fields, 'cos it works in every case (i.e. JNI lets us do it) but it means nothing, so there'sno point in testing it.</body></comment><class><name>JNIPortBasicFieldAccessTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortBasicFieldAccessTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.orgNote, we don't test writing of "final" fields, 'cos it works in every case (i.e. JNI lets us do it) but it means nothing, so there'sno point in testing it.</body></comment><class><name>ExternalTestObject</name><environment>JNIPort.Tests</environment><super>JNIPort.JNIPortExternalStructure</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Prerequisites</category><attributes><package>JNIPort-Tests-Prerequisites</package></attributes></class><class><name>JNIPortArrayOfBytesTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortArrayOfIntegerTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortArrayOfBytesTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortStringTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortStringTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>StaticJNIPortTestCallbacks</name><environment>JNIPort.Tests</environment><super>JNIPort.StaticJavaLangObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Callbacks</category><attributes><package>JNIPort-Tests-Java-Callbacks</package></attributes></class><comment><class-id>JNIPort.Tests.StaticJNIPortTestCallbacks</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortArrayOfPointsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortArrayTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>elements </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortArrayOfPointsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortTestNotifications</name><environment>JNIPort.Tests</environment><super>JNIPort.JavaLangObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Callbacks</category><attributes><package>JNIPort-Tests-Java-Callbacks</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortTestNotifications</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedInterfaceFieldsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedInterfaceFieldsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedStaticFieldsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.JNIPortGeneratedFieldsTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedStaticFieldsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortGeneratedAmbiguousSelectorsTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instance classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-WrapperGeneration</category><attributes><package>JNIPort-Tests-Java-WrapperGeneration</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortGeneratedAmbiguousSelectorsTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortExceptionTest</name><environment>JNIPort.Tests</environment><super>JNIPort.Tests.GenericJNIPortRegressionTest</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classStatic </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Java-Base</category><attributes><package>JNIPort-Tests-Java-Base</package></attributes></class><comment><class-id>JNIPort.Tests.JNIPortExceptionTest</class-id><body>Copyright © Chris Uppal, 2002, 2003.chris.uppal@metagnostic.org</body></comment><class><name>JNIPortStandardLibInterfaceTest</name><environment>JNIPort.Tests</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Tests-Prerequisites</category><attributes><package>JNIPort-Tests-Prerequisites</package></attributes></class><methods><class-id>JNIPort.Tests.GenericJNIPortRegressionTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	jvm := JVM current.</body></methods><methods><class-id>JNIPort.Tests.GenericJNIPortRegressionTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">arrayStoreExceptionClass	^ jvm findClass: #'java.lang.ArrayStoreException'.</body><body package="JNIPort-Tests-Java-Base">instantiationExceptionClass	^ jvm findClass: #'java.lang.InstantiationException'.</body><body package="JNIPort-Tests-Java-Base">javaTestClassName	self subclassResponsibility.</body><body package="JNIPort-Tests-Java-Base">javaTestClassRoot	^ 'jniport.test'.</body><body package="JNIPort-Tests-Java-Base">noSuchClassExceptionClass	^ jvm findClass: #'java.lang.NoClassDefFoundError'.</body><body package="JNIPort-Tests-Java-Base">noSuchFieldExceptionClass	^ jvm findClass: #'java.lang.NoSuchFieldError'.</body><body package="JNIPort-Tests-Java-Base">noSuchMethodExceptionClass	^ jvm findClass: #'java.lang.NoSuchMethodError'.</body><body package="JNIPort-Tests-Java-Base">nullPointerExceptionClass	^ jvm findClass: #'java.lang.NullPointerException'.</body></methods><methods><class-id>JNIPort.Tests.GenericJNIPortRegressionTest</class-id> <category>private</category><body package="JNIPort-Tests-Java-Base">assertBlock: aBlock raises: anExceptionalEvent 	^	[[aBlock value.	false] 			on: anExceptionalEvent			do: [:ex | ex return: true]]			on: JavaException			do: [:ex | ex return: ex parameter static = anExceptionalEvent]</body></methods><methods><class-id>JNIPort.Tests.GenericJNIPortRegressionTest</class-id> <category>helpers</category><body package="JNIPort-Tests-Java-Base">javaTestClass	^ self javaTestClass: self javaTestClassName.</body><body package="JNIPort-Tests-Java-Base">javaTestClass: aString	^ jvm findClass: (self javaTestClassName: aString).</body><body package="JNIPort-Tests-Java-Base">javaTestClassName: aString	^ self javaTestClassRoot , '.' , aString.</body></methods><methods><class-id>JNIPort.Tests.GenericJNIPortRegressionTest</class-id> <category>initialize-release</category><body package="JNIPort-Tests-Java-Base">tearDown	super tearDown.	jvm := nil</body></methods><methods><class-id>JNIPort.Tests.GenericJNIPortRegressionTest class</class-id> <category>Testing</category><body package="JNIPort-Tests-Java-Base">isAbstract	^self = GenericJNIPortRegressionTest.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicFieldsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">dontTestTypeErrors	"unfortunately we can't use this test since the JVM doesn't actually check the types	for fields written via JNI"	| jap |	jap := jvm findClass: #'java.awt.Point'.	self		should: [subject setObjectField: 'stringField' signature: 'Ljava/lang/String;' to: jap new]		raise: Error.	self should: [(subject getStringField: 'stringField') asString = 'Hi there'].</body><body package="JNIPort-Tests-Java-Base">testAccessBooleanField	self should: [(subject getBooleanField: 'booleanField') = true].	subject setBooleanField: 'booleanField' to: false.	self should: [(subject getBooleanField: 'booleanField') = false].	self should: [subject callBooleanMethod: 'isBooleanFalse'].	subject setBooleanField: 'booleanField' to: true.	self should: [(subject getBooleanField: 'booleanField') = true].	self should: [subject callBooleanMethod: 'isBooleanTrue'].</body><body package="JNIPort-Tests-Java-Base">testAccessByteField	self should: [(subject getByteField: 'byteField') = 22].	subject setByteField: 'byteField' to: 0.	self should: [(subject getByteField: 'byteField') = 0].	self should: [subject callBooleanMethod: 'isByteZero'].	subject setByteField: 'byteField' to: 33.	self should: [(subject getByteField: 'byteField') = 33].	self should: [subject callBooleanMethod: 'isByte33'].	subject setByteField: 'byteField' to: -33.	self should: [(subject getByteField: 'byteField') = -33].	self should: [subject callBooleanMethod: 'isByteMinus33'].	subject setByteField: 'byteField' to: 22.	self should: [(subject getByteField: 'byteField') = 22].</body><body package="JNIPort-Tests-Java-Base">testAccessCharField	self should: [(subject getCharField: 'charField') = $!].	subject setCharField: 'charField' to: $M.	self should: [(subject getCharField: 'charField') = $M].	self should: [subject callBooleanMethod: 'isCharM'].	subject setCharField: 'charField' to: 0.	self should: [(subject getCharField: 'charField') = (Character codePoint: 0)].	self should: [subject callBooleanMethod: 'isCharZero'].	subject setCharField: 'charField' to: 16rA.	self should: [(subject getCharField: 'charField') = (Character codePoint: 16rA)].	self should: [subject callBooleanMethod: 'isChar0xA'].	subject setCharField: 'charField' to: 16rAA.	self should: [(subject getCharField: 'charField') = (Character codePoint: 16rAA)].	self should: [subject callBooleanMethod: 'isChar0xAA'].	subject setCharField: 'charField' to: 16rAAA.	self should: [(subject getCharField: 'charField') = (Character codePoint: 16rAAA)].	self should: [subject callBooleanMethod: 'isChar0xAAA'].	subject setCharField: 'charField' to: 16rAAAA.	self should: [(subject getCharField: 'charField') = (Character codePoint: 16rAAAA)].	self should: [subject callBooleanMethod: 'isChar0xAAAA'].	subject setCharField: 'charField' to: $!.	self should: [(subject getCharField: 'charField') = $!].</body><body package="JNIPort-Tests-Java-Base">testAccessDoubleField	self should: [(subject getDoubleField: 'doubleField') = 22.0 asDouble].	subject setDoubleField: 'doubleField' to: 0.0 asDouble.	self should: [(subject getDoubleField: 'doubleField') = 0.0 asDouble].	self should: [subject callBooleanMethod: 'isDoubleZero'].	subject setDoubleField: 'doubleField' to: 33.0 asDouble.	self should: [(subject getDoubleField: 'doubleField') = 33.0 asDouble].	self should: [subject callBooleanMethod: 'isDouble33'].	subject setDoubleField: 'doubleField' to: -33.0 asDouble.	self should: [(subject getDoubleField: 'doubleField') = -33.0 asDouble].	self should: [subject callBooleanMethod: 'isDoubleMinus33'].	subject setDoubleField: 'doubleField' to: 33.		"NB: passing an Integer, expecting coercion to double"	self should: [(subject getDoubleField: 'doubleField') = 33.0 asDouble].	self should: [subject callBooleanMethod: 'isDouble33'].	subject setDoubleField: 'doubleField' to: 33.0 asFloat.	"NB: passing an Float, expecting coercion to double"	self should: [(subject getDoubleField: 'doubleField') = 33.0 asDouble].	self should: [subject callBooleanMethod: 'isDouble33'].	subject setDoubleField: 'doubleField' to: 22.0 asDouble.	self should: [(subject getDoubleField: 'doubleField') = 22.0 asDouble].</body><body package="JNIPort-Tests-Java-Base">testAccessFloatField	self should: [(subject getFloatField: 'floatField') = 22.0].	subject setFloatField: 'floatField' to: 0.0 asFloat.	self should: [(subject getFloatField: 'floatField') = 0.0].	self should: [subject callBooleanMethod: 'isFloatZero'].	subject setFloatField: 'floatField' to: 33.0 asFloat.	self should: [(subject getFloatField: 'floatField') = 33.0 asFloat].	self should: [subject callBooleanMethod: 'isFloat33'].	subject setFloatField: 'floatField' to: -33.0 asFloat.	self should: [(subject getFloatField: 'floatField') = -33.0 asFloat].	self should: [subject callBooleanMethod: 'isFloatMinus33'].	subject setFloatField: 'floatField' to: 33.		"NB: passing an Integer, expecting coercion to float"	self should: [(subject getFloatField: 'floatField') = 33.0 asFloat].	self should: [subject callBooleanMethod: 'isFloat33'].	subject setFloatField: 'floatField' to: 22.0 asFloat.	self should: [(subject getFloatField: 'floatField') = 22.0 asFloat].</body><body package="JNIPort-Tests-Java-Base">testAccessIntField	self should: [(subject getIntField: 'intField') = 22].	subject setIntField: 'intField' to: 0.	self should: [(subject getIntField: 'intField') = 0].	self should: [subject callBooleanMethod: 'isIntZero'].	subject setIntField: 'intField' to: 33.	self should: [(subject getIntField: 'intField') = 33].	self should: [subject callBooleanMethod: 'isInt33'].	subject setIntField: 'intField' to: -33.	self should: [(subject getIntField: 'intField') = -33].	self should: [subject callBooleanMethod: 'isIntMinus33'].	subject setIntField: 'intField' to: 22.	self should: [(subject getIntField: 'intField') = 22].</body><body package="JNIPort-Tests-Java-Base">testAccessLongField	self should: [(subject getLongField: 'longField') = 22].	subject setLongField: 'longField' to: 0.	self should: [(subject getLongField: 'longField') = 0].	self should: [subject callBooleanMethod: 'isLongZero'].	subject setLongField: 'longField' to: 33.	self should: [(subject getLongField: 'longField') = 33].	self should: [subject callBooleanMethod: 'isLong33'].	subject setLongField: 'longField' to: -33.	self should: [(subject getLongField: 'longField') = -33].	self should: [subject callBooleanMethod: 'isLongMinus33'].	subject setLongField: 'longField' to: 22.	self should: [(subject getLongField: 'longField') = 22].</body><body package="JNIPort-Tests-Java-Base">testAccessNonExistantField	| exceptionClass |	"I'd have thought that NoSuchFieldException would make more sense, but..."	exceptionClass := jvm findClass: #'java.lang.NoSuchFieldError'.	self		should: [subject getStringField: 'nonExistantField']		raise: exceptionClass.	self		should: [subject setStringField: 'nonExistantField' to: nil]		raise: exceptionClass.</body><body package="JNIPort-Tests-Java-Base">testAccessPointField	| jap p3x4 p33x45 sig point |	jap := jvm findClass: #'java.awt.Point'.	p3x4 := jap new.	p3x4 setIntField: 'x' to: 3.	p3x4 setIntField: 'y' to: 4.	sig := jap jniSignature.	point := subject getObjectField: 'pointField' signature: sig.	self should: [point equals: p3x4].	subject setObjectField: 'pointField' signature: sig to: nil.	self should: [(subject getObjectField: 'pointField' signature: sig) = nil].	self should: [subject callBooleanMethod: 'isPointNull'].	subject setObjectField: 'pointField' signature: sig to: jap new.	self should: [subject callBooleanMethod: 'isPointZero'].	p33x45 := jap new.	p33x45 setIntField: 'x' to: 33.	p33x45 setIntField: 'y' to: 45.	subject setObjectField: 'pointField' signature: sig to: p33x45.	self should: [(subject getObjectField: 'pointField' signature: sig) = p33x45].	self should: [subject callBooleanMethod: 'isPoint33x45'].	subject setObjectField: 'pointField' signature: sig to: point.	self should: [(subject getObjectField: 'pointField' signature: sig) = point].</body><body package="JNIPort-Tests-Java-Base">testAccessShortField	self should: [(subject getShortField: 'shortField') = 22].	subject setShortField: 'shortField' to: 0.	self should: [(subject getShortField: 'shortField') = 0].	self should: [subject callBooleanMethod: 'isShortZero'].	subject setShortField: 'shortField' to: 33.	self should: [(subject getShortField: 'shortField') = 33].	self should: [subject callBooleanMethod: 'isShort33'].	subject setShortField: 'shortField' to: -33.	self should: [(subject getShortField: 'shortField') = -33].	self should: [subject callBooleanMethod: 'isShortMinus33'].	subject setShortField: 'shortField' to: 22.	self should: [(subject getShortField: 'shortField') = 22].</body><body package="JNIPort-Tests-Java-Base">testAccessStringField	self should: [(subject getStringField: 'stringField') asString = 'Hi there'].	subject setStringField: 'stringField' to: nil.	self should: [(subject getStringField: 'stringField') = nil].	self should: [subject callBooleanMethod: 'isStringNull'].	subject setStringField: 'stringField' to: '33'.	self should: [(subject getStringField: 'stringField') asString = '33'].	self should: [subject callBooleanMethod: 'isString33'].	subject setStringField: 'stringField' to: ''.	self should: [(subject getStringField: 'stringField') isEmpty].	self should: [subject callBooleanMethod: 'isStringEmpty'].	subject setStringField: 'stringField' to: 'Hi there'.	self should: [(subject getStringField: 'stringField') asString = 'Hi there'].</body><body package="JNIPort-Tests-Java-Base">testOutOfRangeValues	self		should: [subject setByteField: 'byteField' to: 200]		raise: Error.	self should: [(subject getByteField: 'byteField') = 22].	self		should: [subject setByteField: 'byteField' to: 1000]		raise: Error.	self should: [(subject getByteField: 'byteField') = 22].	self		should: [subject setShortField: 'shortField' to: 1000000]		raise: Error.	self should: [(subject getShortField: 'shortField') = 22].	self		should: [subject setIntField: 'intField' to: 6000000000]		raise: Error.	self should: [(subject getIntField: 'intField') = 22].	self		should: [subject setLongField: 'longField' to: 100 factorial]		raise: Error.	self should: [(subject getLongField: 'longField') = 22].</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicFieldsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	subject := self subject.</body><body package="JNIPort-Tests-Java-Base">tearDown	subject := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicFieldsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">subject	self subclassResponsibility.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicFieldsTest class</class-id> <category>Testing</category><body package="JNIPort-Tests-Java-Base">isAbstract	^self = JNIPortBasicFieldsTest.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInstanceFieldsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">subject	^ self javaTestClass new.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInstanceFieldsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'InstanceFields'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedMethodAccessTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'MethodAccess'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedMethodAccessTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-WrapperGeneration">testCallPublicClassMethod	self should: [classStatic publicStaticIntMethod = 101].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testCallPublicFinalClassMethod	self should: [classStatic publicStaticFinalIntMethod = 111].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testCallPublicFinalInstanceMethod	self should: [instance publicFinalIntMethod = 11].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testCallPublicInstanceMethod	self should: [instance publicIntMethod = 1].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testNoWrappersGeneratedForNonpublicMethods	| generatorSettings includeProtectedMethods includeDefaultAccessMethods includePrivateMethods |	generatorSettings := jvm usesGhostClasses 				ifTrue: [jvm settings ghostClassSettings]				ifFalse: [jvm settings wrapperGeneratorSettings].	includeProtectedMethods := generatorSettings includeProtectedMethods.	includeDefaultAccessMethods := generatorSettings includeDefaultAccessMethods.	includePrivateMethods := generatorSettings includePrivateMethods.	self assert: (includeProtectedMethods not xor: (instance class includesSelector: #protectedIntMethod)).	self assert: (includeDefaultAccessMethods not xor: (instance class includesSelector: #defaultIntMethod)).	self assert: (includePrivateMethods not xor: (instance class includesSelector: #privateIntMethod)).	self assert: (includeProtectedMethods not xor: (instance class includesSelector: #protectedFinalIntMethod)).	self assert: (includeDefaultAccessMethods not xor: (instance class includesSelector: #defaultFinalIntMethod)).	self assert: (includePrivateMethods not xor: (instance class includesSelector: #privateFinalIntMethod)).	self assert: (includeProtectedMethods not xor: (classStatic class includesSelector: #protectedStaticIntMethod)).	self assert: (includeDefaultAccessMethods not xor: (classStatic class includesSelector: #defaultStaticIntMethod)).	self assert: (includePrivateMethods not xor: (classStatic class includesSelector: #privateStaticIntMethod)).	self assert: (includeProtectedMethods not xor: (classStatic class includesSelector: #protectedStaticFinalIntMethod)).	self assert: (includeDefaultAccessMethods not xor: (classStatic class includesSelector: #defaultStaticFinalIntMethod)).	self assert: (includePrivateMethods not xor: (classStatic class includesSelector: #privateStaticFinalIntMethod))</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedMethodAccessTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-WrapperGeneration">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.</body><body package="JNIPort-Tests-Java-WrapperGeneration">tearDown	classStatic := instance := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestCallbacks</class-id> <category>Java-methods</category><body package="JNIPort-Tests-Java-Callbacks">callback0	"invoke the receiver's public callback0() Java method"	self callVoidMethod: 'callback0'.</body><body package="JNIPort-Tests-Java-Callbacks">callback1	"invoke the receiver's public callback1() Java method"	self callVoidMethod: 'callback1'.</body><body package="JNIPort-Tests-Java-Callbacks">callback2	"invoke the receiver's public callback2() Java method"	self callVoidMethod: 'callback2'.</body><body package="JNIPort-Tests-Java-Callbacks">callbackAndReturn_int: int1	"answer the result of calling the receiver's public callbackAndReturn(int) Java method"	^JNIValueArray new: 1		freeAfter: 			[:args |			args intAt: 1 put: int1.			self				callIntMethod: 'callbackAndReturn'				signature: '(I)I'				withArguments: args]</body><body package="JNIPort-Tests-Java-Callbacks">callbackAndThrowNPE	"answer the result of calling the receiver's public callbackAndThrowNPE() Java method"	^ self callBooleanMethod: 'callbackAndThrowNPE'.</body><body package="JNIPort-Tests-Java-Callbacks">callbackAndThrowOther	"answer the result of calling the receiver's public callbackAndThrowOther() Java method"	^ self callBooleanMethod: 'callbackAndThrowOther'.</body><body package="JNIPort-Tests-Java-Callbacks">callbackInBackground_int: int1 int: int2	"invoke the receiver's public callbackInBackground(int, int) Java method"	JNIValueArray new: 2		freeAfter: 			[:args |			args				intAt: 1 put: int1;				intAt: 2 put: int2.			self				callVoidMethod: 'callbackInBackground'				signature: '(II)V'				withArguments: args]</body><body package="JNIPort-Tests-Java-Callbacks">callbackInLine	"invoke the receiver's public callbackInLine() Java method"	self callVoidMethod: 'callbackInLine'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestCallbacks class</class-id> <category>listing wrapper methods</category><body package="JNIPort-Tests-Java-Callbacks">generatedConstructorSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedGetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedSetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedWrapperSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(		#callback0		#callback1		#callback2		#callbackAndReturn_int:		#callbackAndThrowNPE		#callbackAndThrowOther		#callbackInBackground_int:int:		#callbackInLine	).</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestCallbacks class</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Callbacks">hasCanonicalInstancesByDefault	"answer whether we should have canonical instances at startup.	(if not then it can always be turned on later).	Override in subclasses, to force this"	"we'll have canonical instances; it isn't *necessary* in order to use	callbacks, but it's probably the typical case, so we may as do be	typical in this test class"	^ true.</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestCallbacks class</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Callbacks">javaClassName	"answer the Symbol name of the Java class we stand for"	^ #'jniport.test.Callbacks'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testArrayBoundsCheck	| array slice count subscriptOutOfBoundsError |	count := self elementCount.	array := self elementClass newArray: count.	"just in case"	self should: [count &gt;= 2].	subscriptOutOfBoundsError := JNIPortUtility subscriptOutOfBoundsError.	self should: [array at: -1] raise: subscriptOutOfBoundsError.	self should: [array at: 0] raise: subscriptOutOfBoundsError.	self shouldnt: [array at: 1] raise: subscriptOutOfBoundsError.	self shouldnt: [array at: count] raise: subscriptOutOfBoundsError.	self should: [array at: count + 1] raise: subscriptOutOfBoundsError.	slice := OrderedCollection new.	self shouldnt: 			[array				from: 2				to: count - 1				keysAndValuesDo: [:i :each | slice addLast: each]]		raise: subscriptOutOfBoundsError.	self should: [slice size + 2 = count].	slice := OrderedCollection new.	self should: 			[array				from: 2				to: count + 2				keysAndValuesDo: [:i :each | slice addLast: each]]		raise: subscriptOutOfBoundsError.	self should: [slice size + 1 = count].	"should have looped over the valid indices before throwing"	slice := OrderedCollection new.	self should: 			[array				from: -2				to: 2				keysAndValuesDo: [:i :each | slice addLast: each]]		raise: subscriptOutOfBoundsError.	self should: [slice size = 0]</body><body package="JNIPort-Tests-Java-Base">testCreateArray	| array |	array := self elementClass newArray: self elementCount.	self shouldnt: [array isNil].	self should: [array static == self arrayClass].	self should: [array size = self elementCount].	self should: [array at: 0] raise: JNIPortUtility subscriptOutOfBoundsError.	self should: [array at: self elementCount + 1] raise: JNIPortUtility subscriptOutOfBoundsError.</body><body package="JNIPort-Tests-Java-Base">testFillArray	| array |	array := self elementClass newArray: self elementCount.	1 to: self elementCount do: [:i | array at: i put: (self elementAt: i)].	1 to: self elementCount do: [:i | self should: [(array at: i) = (self elementAt: i)]].</body><body package="JNIPort-Tests-Java-Base">testIterateArray	| array |	array := self elementClass newArray: self elementCount.	array		replaceFrom: 1		to: self elementCount		with: self elements.	array asCollection keysAndValuesDo: [:i :each | self should: [each = (self elementAt: i)]].</body><body package="JNIPort-Tests-Java-Base">testIterateFromToArray	| array |	array := self elementClass newArray: self elementCount.	array		replaceFrom: 1		to: self elementCount		with: self elements.	array		from: 2		to: self elementCount - 1		keysAndValuesDo: [:i :each | self should: [each = (self elementAt: i)]]</body><body package="JNIPort-Tests-Java-Base">testZeroSizedArray1	| array |	array := self elementClass newArray: 0.	self shouldnt: [array isNil].	self should: [array static == self arrayClass].	self should: [array size = 0].</body><body package="JNIPort-Tests-Java-Base">testZeroSizedArray2	| array |	array := self arrayClass new: 0.	self shouldnt: [array isNil].	self should: [array static == self arrayClass].	self should: [array size = 0].</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">arrayClass	^ jvm findClass: self arrayClassName.</body><body package="JNIPort-Tests-Java-Base">arrayClassName	^ (self elementClassName , '[]') asSymbol.</body><body package="JNIPort-Tests-Java-Base">elementAt: anInteger	^ self elements at: anInteger.</body><body package="JNIPort-Tests-Java-Base">elementClass	^ jvm findClass: self elementClassName.</body><body package="JNIPort-Tests-Java-Base">elementClassName	self subclassResponsibility.</body><body package="JNIPort-Tests-Java-Base">elementCount	^ self elements size.</body><body package="JNIPort-Tests-Java-Base">elements	self subclassResponsibility.</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayTest class</class-id> <category>Testing</category><body package="JNIPort-Tests-Java-Base">isAbstract	^self = JNIPortArrayTest.</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfBooleansTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">elementClassName	^ #boolean.</body><body package="JNIPort-Tests-Java-Base">elements	^ #(true false false true true)</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInheritedFieldsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-WrapperGeneration">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.</body><body package="JNIPort-Tests-Java-WrapperGeneration">tearDown	classStatic := instance := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInheritedFieldsTest</class-id> <category>writing</category><body package="JNIPort-Tests-Java-WrapperGeneration">testWriteClassField	classStatic set_staticIntField: 0.	self should: [classStatic get_staticIntField = 0].	classStatic set_staticIntField: 222.	self should: [classStatic get_staticIntField = 222].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testWriteInstanceField	self should: [instance get_intField = 2].	instance set_intField: 0.	self should: [instance get_intField = 0].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInheritedFieldsTest</class-id> <category>reading</category><body package="JNIPort-Tests-Java-WrapperGeneration">testReadClassField	self should: [classStatic get_staticIntField = 222].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testReadInstanceField	self should: [instance get_intField = 2].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInheritedFieldsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'InheritedFields'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGhostClassTest</class-id> <category>initialize-release</category><body package="JNIPort-Tests-Prerequisites">tearDown	ghostClass ifNotNil: [JNIPortUtility removeGhostClassIfNeeded: ghostClass].	super tearDown</body></methods><methods><class-id>JNIPort.Tests.JNIPortGhostClassTest</class-id> <category>testing</category><body package="JNIPort-Tests-Prerequisites">testCompileGhostMethod	| map method |	ghostClass := JNIPortUtility makeGhostClass: 'MyJNIObject'.	map := Dictionary new.	map at: #TEST put: 3.	method := ghostClass 				compileGhostMethod: 'testGhost 	^(#TEST + 2) printString'				map: map.	ghostClass addSelector: #testGhost withMethod: method.	self assert: (ghostClass canUnderstand: #testGhost).	self deny: (JNIPortUtility canUnderstand: #testGhost).	self assert: (ghostClass methodDictionary at: #testGhost) = method</body><body package="JNIPort-Tests-Prerequisites">testCompileGhostMethodKeepSource	| map method |	ghostClass := JNIPortUtility makeGhostClass: 'MyJNIObject'.	map := Dictionary new.	map at: #TEST put: 3.	method := ghostClass 				compileGhostMethod: 'testGhost 	^(#TEST + 2) printString'				map: map.	ghostClass addSelector: #testGhost withMethod: method.	"self assert: method getSource isNil."	method sourceDescriptor: 'testGhost 	^(#TEST + 2) printString'.	"self assert: method getSource = 'testGhost 	^(#TEST + 2) printString'"	self assert: ('testGhost*^*(* + 2) printString*' match: method getSource)</body><body package="JNIPort-Tests-Prerequisites">testGhostMethodExecution	| instance method |	ghostClass := JNIPortUtility makeGhostClass: 'MyJNIObject'.	instance := ghostClass new.	method := ghostClass compileGhostMethod: 'testGhost 	^#TEST isSymbol' map: nil.	ghostClass addSelector: #testGhost withMethod: method.	self assert: instance testGhost</body><body package="JNIPort-Tests-Prerequisites">testGhostMethodLiteralMapping	| instance map method |	ghostClass := JNIPortUtility makeGhostClass: 'MyJNIObject'.	instance := ghostClass new.	map := Dictionary new.	map at: #TEST put: 3.	method := ghostClass compileGhostMethod: 'testGhost 	^(#TEST + 2)'		map: map.	ghostClass addSelector: #testGhost withMethod: method.	self assert: instance testGhost = 5.	map at: #TEST put: 4.	method := ghostClass compileGhostMethod: 'testGhost 	^(#TEST + 2)'		map: map.	ghostClass addSelector: #testGhost withMethod: method.	self assert: instance testGhost = 6</body><body package="JNIPort-Tests-Prerequisites">testInstanceCreation	| instance |	ghostClass := Rectangle makeGhostClass: 'MyRectangle'.	instance := ghostClass origin: 0@0 extent: 2@3.	self assert: ( instance isKindOf: Rectangle).	self assert: (instance class == ghostClass).	self assert: instance width = 2</body><body package="JNIPort-Tests-Prerequisites">testNewGhostClass	ghostClass := JNIPortUtility makeGhostClass: 'MyJNIObject'.	self assert: ghostClass name = #MyJNIObject.	self assert: ghostClass isGhostClass.	self assert: ghostClass superclass == JNIPortUtility.	"self deny: (JNIPortUtility subclasses includes: ghostClass)."	self assert: ghostClass class isGhostClass.	self assert: ghostClass class superclass == JNIPortUtility class.	"self deny: (JNIPortUtility class subclasses includes: ghostClass class)."</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfIntegerTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">elements	^ #( 0 1 2 3 5)</body><body package="JNIPort-Tests-Java-Base">outOfRangeValues	self subclassResponsibility.</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfIntegerTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testOutOfRangeValues	| array |	array := self elementClass newArray: 1.	self outOfRangeValues do: [:each | self should: [array at: 1 put: each] raise: Error].</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfIntegerTest class</class-id> <category>Testing</category><body package="JNIPort-Tests-Java-Base">isAbstract	^self = JNIPortArrayOfIntegerTest.</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfIntsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">elementClassName	^ #int.</body><body package="JNIPort-Tests-Java-Base">outOfRangeValues	^ #(-6000000000 6000000000).</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicMethodReturnsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testBooleanMethodReturn	self should: [(subject callBooleanMethod: 'booleanMethod') = true].</body><body package="JNIPort-Tests-Java-Base">testByteMethodReturn	self should: [(subject callByteMethod: 'byteMethod') = 20].</body><body package="JNIPort-Tests-Java-Base">testCallNonExistantMethod	| exceptionClass |	"I'd have thought that NoSuchFieldException would make more sense, but..."	exceptionClass := jvm findClass: #'java.lang.NoSuchMethodError'.	self		should: [subject callStringMethod: 'nonExistantMethod']		raise: exceptionClass.</body><body package="JNIPort-Tests-Java-Base">testCharMethodReturn	self should: [(subject callCharMethod: 'charMethod') = $!].</body><body package="JNIPort-Tests-Java-Base">testDoubleMethodReturn	self should: [(subject callDoubleMethod: 'doubleMethod') = 25.0 asDouble].</body><body package="JNIPort-Tests-Java-Base">testFloatMethodReturn	self should: [(subject callFloatMethod: 'floatMethod') = 24.0 asFloat].</body><body package="JNIPort-Tests-Java-Base">testIntMethodReturn	self should: [(subject callIntMethod: 'intMethod') = 22].</body><body package="JNIPort-Tests-Java-Base">testLongMethodReturn	self should: [(subject callLongMethod: 'longMethod') = 23].</body><body package="JNIPort-Tests-Java-Base">testNullMethodReturn	| object |	object := subject callObjectMethod: 'nullMethod' signature: '()Ljava/lang/Object;'.	self should: [object isNil].</body><body package="JNIPort-Tests-Java-Base">testPointMethodReturn	| point |	point := subject callObjectMethod: 'pointMethod' signature: '()Ljava/awt/Point;'.	self should: [(point getIntField: 'x') = 3].	self should: [(point getIntField: 'y') = 4].</body><body package="JNIPort-Tests-Java-Base">testShortMethodReturn	self should: [(subject callShortMethod: 'shortMethod') = 21].</body><body package="JNIPort-Tests-Java-Base">testStringMethodReturn	self should: [(subject callStringMethod: 'stringMethod') asString = 'Hi there'].</body><body package="JNIPort-Tests-Java-Base">testVoidMethodReturn	self should: [(subject callVoidMethod: 'voidMethod') == subject].</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicMethodReturnsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	subject := self subject.</body><body package="JNIPort-Tests-Java-Base">tearDown	subject := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicMethodReturnsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">subject	self subclassResponsibility.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicMethodReturnsTest class</class-id> <category>Testing</category><body package="JNIPort-Tests-Java-Base">isAbstract	^self = JNIPortBasicMethodReturnsTest.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInstanceMethodReturnsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">subject	^ self javaTestClass new.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInstanceMethodReturnsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'InstanceMethods'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInterfaceFieldsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'InterfaceFields'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInterfaceFieldsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	classStatic := self javaTestClass.</body><body package="JNIPort-Tests-Java-Base">tearDown	classStatic := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInterfaceFieldsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testReadFields	self should: [(classStatic getIntField: 'publicIntField') = 1].	self should: [(classStatic getIntField: 'publicFinalIntField') = 2].	self should: [(classStatic getIntField: 'publicStaticIntField') = 3].	self should: [(classStatic getIntField: 'publicStaticFinalIntField') = 4].	self should: [(classStatic getIntField: 'defaultIntField') = 5].	self should: [(classStatic getIntField: 'defaultFinalIntField') = 6].	self should: [(classStatic getIntField: 'defaultStaticIntField') = 7].	self should: [(classStatic getIntField: 'defaultStaticFinalIntField') = 8].</body></methods><methods><class-id>JNIPort.Tests.StaticJNIPortTestStaticMethods</class-id> <category>Java-methods</category><body package="JNIPort-Tests-Java-Base">booleanMethod	"answer the result of calling the receiver's public static booleanMethod() Java method"	^ self callBooleanMethod: 'booleanMethod'.</body><body package="JNIPort-Tests-Java-Base">byteMethod	"answer the result of calling the receiver's public static byteMethod() Java method"	^ self callByteMethod: 'byteMethod'.</body><body package="JNIPort-Tests-Java-Base">charMethod	"answer the result of calling the receiver's public static charMethod() Java method"	^ self callCharMethod: 'charMethod'.</body><body package="JNIPort-Tests-Java-Base">doubleMethod	"answer the result of calling the receiver's public static doubleMethod() Java method"	^ self callDoubleMethod: 'doubleMethod'.</body><body package="JNIPort-Tests-Java-Base">floatMethod	"answer the result of calling the receiver's public static floatMethod() Java method"	^ self callFloatMethod: 'floatMethod'.</body><body package="JNIPort-Tests-Java-Base">intMethod	"answer the result of calling the receiver's public static intMethod() Java method"	^ self callIntMethod: 'intMethod'.</body><body package="JNIPort-Tests-Java-Base">longMethod	"answer the result of calling the receiver's public static longMethod() Java method"	^ self callLongMethod: 'longMethod'.</body><body package="JNIPort-Tests-Java-Base">nullMethod	"answer the result of calling the receiver's public static nullMethod() Java method"	^ self callObjectMethod: 'nullMethod' signature: '()Ljava/lang/Object;'.</body><body package="JNIPort-Tests-Java-Base">pointMethod	"answer the result of calling the receiver's public static pointMethod() Java method"	^ self callObjectMethod: 'pointMethod' signature: '()Ljava/awt/Point;'.</body><body package="JNIPort-Tests-Java-Base">shortMethod	"answer the result of calling the receiver's public static shortMethod() Java method"	^ self callShortMethod: 'shortMethod'.</body><body package="JNIPort-Tests-Java-Base">stringMethod	"answer the result of calling the receiver's public static stringMethod() Java method"	^ self callObjectMethod: 'stringMethod' signature: '()Ljava/lang/String;'.</body><body package="JNIPort-Tests-Java-Base">voidMethod	"invoke the receiver's public static voidMethod() Java method"	self callVoidMethod: 'voidMethod'.</body></methods><methods><class-id>JNIPort.Tests.StaticJNIPortTestStaticMethods class</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">javaClassName	"answer the Symbol name of the Java class we stand for"	^ #'jniport.test.StaticMethods'.</body></methods><methods><class-id>JNIPort.Tests.StaticJNIPortTestStaticMethods class</class-id> <category>listing wrapper methods</category><body package="JNIPort-Tests-Java-Base">generatedConstructorSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(		#new	).</body><body package="JNIPort-Tests-Java-Base">generatedGetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Base">generatedSetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Base">generatedWrapperSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(		#booleanMethod		#byteMethod		#charMethod		#doubleMethod		#floatMethod		#intMethod		#longMethod		#nullMethod		#pointMethod		#shortMethod		#stringMethod		#voidMethod	).</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfFloatsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">elementClassName	^ #float.</body><body package="JNIPort-Tests-Java-Base">elements	^ #( 0.0 1.0 2.5 3.3 0.2 ) collect: [:each | each asFloat].</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfFloatsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testFillArray	| array |	array := self elementClass newArray: self elementCount.	1 to: self elementCount do: [:i | array at: i put: (self elementAt: i)].	1 to: self elementCount		do: [:i | self should: [(array at: i) asIEEE32BitWord = (self elementAt: i) asIEEE32BitWord]]</body><body package="JNIPort-Tests-Java-Base">testIterateArray	| array |	array := self elementClass newArray: self elementCount.	array		replaceFrom: 1		to: self elementCount		with: self elements.	array asCollection		keysAndValuesDo: [:i :each | self should: [each asIEEE32BitWord = (self elementAt: i) asIEEE32BitWord]]</body><body package="JNIPort-Tests-Java-Base">testIterateFromToArray	| array |	array := self elementClass newArray: self elementCount.	array		replaceFrom: 1		to: self elementCount		with: self elements.	array		from: 2		to: self elementCount - 1		keysAndValuesDo: [:i :each | self should: [each asIEEE32BitWord = (self elementAt: i) asIEEE32BitWord]]</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInheritedMethodsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testCallAbstractMethod	self should: [(instance callIntMethod: 'abstractIntMethod') = 22].</body><body package="JNIPort-Tests-Java-Base">testCallClassMethod	self should: [(classStatic callIntMethod: 'staticIntMethod') = 222].</body><body package="JNIPort-Tests-Java-Base">testCallInstanceMethod	self should: [(instance callIntMethod: 'intMethod') = 2].</body><body package="JNIPort-Tests-Java-Base">testCallInterfaceMethod	self should: [(instance callIntMethod: 'interfaceIntMethod') = 2222].</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInheritedMethodsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.</body><body package="JNIPort-Tests-Java-Base">tearDown	classStatic := instance := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInheritedMethodsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'InheritedMethods'.</body></methods><methods><class-id>JNIPort.Tests.StaticJNIPortTestEvents</class-id> <category>Java-methods</category><body package="JNIPort-Tests-Java-Callbacks">getEventMethod	"answer the result of calling the receiver's public static getEventMethod() Java method"	^ self callObjectMethod: 'getEventMethod' signature: '()Ljava/lang/reflect/Method;'.</body><body package="JNIPort-Tests-Java-Callbacks">getEventSource	"answer the result of calling the receiver's public static getEventSource() Java method"	^ self callObjectMethod: 'getEventSource' signature: '()Ljniport/test/TestEventSource;'.</body><body package="JNIPort-Tests-Java-Callbacks">main_StringArray: aStrings1	"invoke the receiver's public static main(java.lang.String[]) Java method"	JNIValueArray new: 1		freeAfter: 			[:args |			args objectAt: 1 put: aStrings1.			self				callVoidMethod: 'main'				signature: '([Ljava/lang/String;)V'				withArguments: args]</body><body package="JNIPort-Tests-Java-Callbacks">triggerInBackground_int: int1 int: int2	"invoke the receiver's public static triggerInBackground(int, int) Java method"	JNIValueArray new: 2		freeAfter: 			[:args |			args				intAt: 1 put: int1;				intAt: 2 put: int2.			self				callVoidMethod: 'triggerInBackground'				signature: '(II)V'				withArguments: args]</body><body package="JNIPort-Tests-Java-Callbacks">triggerInLine	"invoke the receiver's public static triggerInLine() Java method"	self callVoidMethod: 'triggerInLine'.</body></methods><methods><class-id>JNIPort.Tests.StaticJNIPortTestEvents class</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Callbacks">javaClassName	"answer the Symbol name of the Java class we stand for"	^ #'jniport.test.Events'.</body></methods><methods><class-id>JNIPort.Tests.StaticJNIPortTestEvents class</class-id> <category>listing wrapper methods</category><body package="JNIPort-Tests-Java-Callbacks">generatedConstructorSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(		#new	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedGetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedSetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedWrapperSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(		#getEventMethod		#getEventSource		#main_StringArray:		#triggerInBackground_int:int:		#triggerInLine	).</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedMethodReturnsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-WrapperGeneration">testBooleanMethodReturn	self should: [subject booleanMethod = true].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testByteMethodReturn	self should: [subject byteMethod = 20].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testCallNonExistantMethod	self		should: [subject nonExistantMethod]		raise: MessageNotUnderstood.</body><body package="JNIPort-Tests-Java-WrapperGeneration">testCharMethodReturn	self should: [subject charMethod = $!].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testDoubleMethodReturn	self should: [subject doubleMethod = 25.0].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testFloatMethodReturn	self should: [subject floatMethod = 24.0].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testIntMethodReturn	self should: [subject intMethod = 22].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testLongMethodReturn	self should: [subject longMethod = 23].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testNullMethodReturn	self should: [subject nullMethod isNil].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testPointMethodReturn	| point |	point := subject pointMethod.	self should: [point get_x = 3].	self should: [point get_y = 4].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testShortMethodReturn	self should: [subject shortMethod = 21].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testStringMethodReturn	self should: [subject stringMethod asString = 'Hi there'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testVoidMethodReturn	self should: [subject voidMethod == subject].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedMethodReturnsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-WrapperGeneration">setUp	super setUp.	subject := self subject.</body><body package="JNIPort-Tests-Java-WrapperGeneration">tearDown	subject := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedMethodReturnsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-WrapperGeneration">subject	self subclassResponsibility.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedMethodReturnsTest class</class-id> <category>Testing</category><body package="JNIPort-Tests-Java-WrapperGeneration">isAbstract	^self = JNIPortGeneratedMethodReturnsTest.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInstanceMethodReturnsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'InstanceMethods'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInstanceMethodReturnsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-WrapperGeneration">subject	^ self javaTestClass new.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedHiddenFieldsTest</class-id> <category>reading</category><body package="JNIPort-Tests-Java-WrapperGeneration">testReadAmbiguousField	"NB: we should be reading the field in the *interface* "	"JRockit wrongly picks up the class field"	self should: [classStatic get_ambiguousIntField = -100].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testReadClassField	self should: [classStatic get_staticIntField = 666].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testReadInstanceField	self should: [instance get_intField = 6].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testReadInterfaceField	self should: [classStatic get_interfaceIntField = 66].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedHiddenFieldsTest</class-id> <category>writing</category><body package="JNIPort-Tests-Java-WrapperGeneration">testNoSettersGenerated	self shouldnt: [classStatic class includesSelector: #set_interfaceIntField:].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testWriteAmbiguousField	"NB: we would be writing the field in the *interface* "	self		should: [classStatic set_ambiguousIntField: 0]		raise: Error.</body><body package="JNIPort-Tests-Java-WrapperGeneration">testWriteClassField	classStatic set_staticIntField: 0.	self should: [classStatic get_staticIntField = 0].	classStatic set_staticIntField: 666.	self should: [classStatic get_staticIntField = 666].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testWriteInstanceField	self should: [instance get_intField = 6].	instance set_intField: 0.	self should: [instance get_intField = 0].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedHiddenFieldsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'HidingFields'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedHiddenFieldsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-WrapperGeneration">testClassFieldIsInherited	self should: [classStatic get_staticBooleanField = true].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedHiddenFieldsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-WrapperGeneration">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.</body><body package="JNIPort-Tests-Java-WrapperGeneration">tearDown	classStatic := instance := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortComparisonTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testEquality	self should: [string1 = string2].</body><body package="JNIPort-Tests-Java-Base">testHash	self should: [string1 hash = string2 hash].</body><body package="JNIPort-Tests-Java-Base">testIdentity	self shouldnt: [string1 == string2].		"unless we've made String canonical -- NOT a good idea"</body><body package="JNIPort-Tests-Java-Base">testJavaEquality	self should: [string1 equals: ('a string' asJavaString: jvm)].</body><body package="JNIPort-Tests-Java-Base">testJavaIdentity	self should: [string1 isSameAs: string2].</body></methods><methods><class-id>JNIPort.Tests.JNIPortComparisonTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	string1 := 'a string' asJavaString: jvm.	"assume that java.lang.String.toString() will return itself"	string2 := string1 callStringMethod: 'toString'.</body><body package="JNIPort-Tests-Java-Base">tearDown	string1 := string2 := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortCollectionExtensionsTest</class-id> <category>tests</category><body package="JNIPort-Tests-Prerequisites">testBeginsWith	"self assert: ('abc' asArray beginsWith: '').	This is true in VisualWorks, but not in Pharo."	self assert: ('abc' asArray beginsWith: 'a').	self assert: ('abc' asArray beginsWith: 'ab').	self assert: ('abc' asArray beginsWith: 'abc').	self deny: ('abc' asArray beginsWith: 'b').	self deny: ('abc' asArray beginsWith: 'bc').	self deny: ('abc' asArray beginsWith: 'abcd').	self deny: (Array new beginsWith: 'a').	"self assert: (Array new beginsWith: Array new)	This is true in VisualWorks, but not in Pharo."</body><body package="JNIPort-Tests-Prerequisites">testCopyReplacingWithObject	self assert: (Array new copyReplacing: 1 withObject: 2) isEmpty.	self assert: (#(1) copyReplacing: 1 withObject: 2) = #(2).	self assert: (#(3) copyReplacing: 1 withObject: 2) = #(3).	self assert: (#(3 1 3 1) copyReplacing: 1 withObject: 2) = #(3 2 3 2).</body><body package="JNIPort-Tests-Prerequisites">testEndsWith	"self assert: ('abc' asArray endsWith: '').	This is true in VisualWorks, but not in Pharo."	self assert: ('abc' asArray endsWith: 'c').	self assert: ('abc' asArray endsWith: 'bc').	self assert: ('abc' asArray endsWith: 'abc').	self deny: ('abc' asArray endsWith: 'b').	self deny: ('abc' asArray endsWith: 'ab').	self deny: ('abc' asArray endsWith: 'aabc').	self deny: (Array new endsWith: 'a').	"self assert: (Array new endsWith: Array new)	This is true in VisualWorks, but not in Pharo."</body><body package="JNIPort-Tests-Prerequisites">testFromToKeysAndValuesDo	| indexes values |	indexes := OrderedCollection new.	values := OrderedCollection new.	(11 to: 20) 		from: 4		to: 6		keysAndValuesDo: 			[:index :value | 			indexes add: index.			values add: value].	self assert: indexes asArray = #(4 5 6).	self assert: values asArray = #(14 15 16)</body><body package="JNIPort-Tests-Prerequisites">testIdentityIncludes	| string1 |	self deny: (Array new identityIncludes: #a).	self assert: (#(#a) identityIncludes: #a).	self deny: (#(#b) identityIncludes: #a).	self assert: (#(#b #a) identityIncludes: #a).	string1 := 'a' copy.	self assert: ((Array with: string1) identityIncludes: string1).	self deny: ((Array with: string1 copy) identityIncludes: string1)</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicConstructorsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	classStatic := self javaTestClass.</body><body package="JNIPort-Tests-Java-Base">tearDown	classStatic := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicConstructorsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testBooleanArgument	| sig new |	JNIValueArray new: 1		freeAfter: 			[:args |			sig := '(Z)V'.			args booleanAt: 1 put: true.			new := classStatic callConstructorSignature: sig withArguments: args.			self should: [(new callStringMethod: 'getText') asString = 'boolean: true'].			args booleanAt: 1 put: false.			new := classStatic callConstructorSignature: sig withArguments: args.			self should: [(new callStringMethod: 'getText') asString = 'boolean: false']]</body><body package="JNIPort-Tests-Java-Base">testByteArgument	| sig new |	JNIValueArray new: 1		freeAfter: 			[:args |			sig := '(B)V'.			args byteAt: 1 put: 0.			new := classStatic callConstructorSignature: sig withArguments: args.			self should: [(new callStringMethod: 'getText') asString = 'byte: 0'].			args byteAt: 1 put: 100.			new := classStatic callConstructorSignature: sig withArguments: args.			self should: [(new callStringMethod: 'getText') asString = 'byte: 100'].			args byteAt: 1 put: -100.			new := classStatic callConstructorSignature: sig withArguments: args.			self should: [(new callStringMethod: 'getText') asString = 'byte: -100']]</body><body package="JNIPort-Tests-Java-Base">testCharArgument	| sig new |	JNIValueArray new: 1		freeAfter: 			[:args |			sig := '(C)V'.			args charAt: 1 put: $!.			new := classStatic callConstructorSignature: sig withArguments: args.			self should: [(new callStringMethod: 'getText') asString = 'char: !'].			args charAt: 1 put: $A.			new := classStatic callConstructorSignature: sig withArguments: args.			self should: [(new callStringMethod: 'getText') asString = 'char: A']]</body><body package="JNIPort-Tests-Java-Base">testDerivedClassConstructor	| new |	new := self derivedClass callConstructor.	self should: [(new callStringMethod: 'getText') asString = 'String: derived'].</body><body package="JNIPort-Tests-Java-Base">testDoubleArgument	| sig new |	JNIValueArray new: 1 freeAfter: [:args |	sig := '(D)V'.	args doubleAt: 1 put: 0.0 asDouble.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'double: 0.0'].	args doubleAt: 1 put: 100.0 asDouble.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'double: 100.0'].	args doubleAt: 1 put: -100.0 asDouble.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'double: -100.0'].	args doubleAt: 1 put: 1000.0 asDouble.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'double: 1000.0'].	args doubleAt: 1 put: -1000.0 asDouble.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'double: -1000.0'].	args doubleAt: 1 put: 1000000.0 asDouble.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'double: 1000000.0'].	args doubleAt: 1 put: -1000000.0 asDouble.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'double: -1000000.0'].	args doubleAt: 1 put: (Number readFromString: '1000000000000.0d').	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'double: 1.0E12'].		"JVM specific ??"	args doubleAt: 1 put: (Number readFromString: '-1000000000000.0d').	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'double: -1.0E12']].		"JVM specific ??"</body><body package="JNIPort-Tests-Java-Base">testFloatArgument	| sig new |	JNIValueArray new: 1 freeAfter: [:args |	sig := '(F)V'.	args floatAt: 1 put: 0.0 asFloat.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'float: 0.0'].	args floatAt: 1 put: 100.0 asFloat.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'float: 100.0'].	args floatAt: 1 put: -100.0 asFloat.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'float: -100.0'].	args floatAt: 1 put: 1000.0 asFloat.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'float: 1000.0'].	args floatAt: 1 put: -1000.0 asFloat.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'float: -1000.0'].	args floatAt: 1 put: 1000000.0 asFloat.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'float: 1000000.0'].	args floatAt: 1 put: -1000000.0 asFloat.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'float: -1000000.0']].</body><body package="JNIPort-Tests-Java-Base">testInheritedConstructor	"JRockit wrongly calls the superclass constructor"	| sig |	JNIValueArray new: 1		freeAfter: 			[:args |			sig := '(Z)V'.			self should: [self derivedClass callConstructorSignature: sig withArguments: args]				raise: self noSuchMethodExceptionClass]</body><body package="JNIPort-Tests-Java-Base">testInstantiateAbstractClass	| sig |	JNIValueArray new: 1		freeAfter: 			[:args |			sig := '(I)V'.			args intAt: 1 put: 1.			self should: [self abstractClass callConstructorSignature: sig withArguments: args]				raise: self instantiationExceptionClass]</body><body package="JNIPort-Tests-Java-Base">testInstantiateAbstractClassDirectly	self should: [self abstractClass new]		raise: (jvm usesGhostClasses ifTrue: [Error] ifFalse: [self instantiationExceptionClass])</body><body package="JNIPort-Tests-Java-Base">testInstantiateAbstractClassWithDefaultConstructor	self		should: [self abstractClass callConstructor]		raise: self instantiationExceptionClass.</body><body package="JNIPort-Tests-Java-Base">testInstantiateConcreteClass	| new |	self		shouldnt: [new := classStatic callConstructor]		raise: self instantiationExceptionClass.	self should: [new static == classStatic].	self should: [new isInstanceOf: classStatic].	self should: [(new callStringMethod: 'getText') asString = 'default'].</body><body package="JNIPort-Tests-Java-Base">testInstantiateConcreteClassDirectly	| new |	self		shouldnt: [new := classStatic new]		raise: self instantiationExceptionClass.	self should: [new static == classStatic].	self should: [new isInstanceOf: classStatic].	self should: [(new callStringMethod: 'getText') asString = 'default'].</body><body package="JNIPort-Tests-Java-Base">testInstantiateInterface	self		should: [self interface callConstructor]		raise: MessageNotUnderstood.</body><body package="JNIPort-Tests-Java-Base">testInstantiateInterfaceDirectly	self		should: [self interface new]		raise: MessageNotUnderstood.</body><body package="JNIPort-Tests-Java-Base">testIntArgument	| sig new |	JNIValueArray new: 1 freeAfter: [:args |	sig := '(I)V'.	args intAt: 1 put: 0.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'int: 0'].	args intAt: 1 put: 100.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'int: 100'].	args intAt: 1 put: -100.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'int: -100'].	args intAt: 1 put: 1000.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'int: 1000'].	args intAt: 1 put: -1000.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'int: -1000'].	args intAt: 1 put: 1000000.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'int: 1000000'].	args intAt: 1 put: -1000000.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'int: -1000000']].</body><body package="JNIPort-Tests-Java-Base">testLongArgument	| sig new |	JNIValueArray new: 1 freeAfter: [:args |	sig := '(J)V'.	args longAt: 1 put: 0.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'long: 0'].	args longAt: 1 put: 100.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'long: 100'].	args longAt: 1 put: -100.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'long: -100'].	args longAt: 1 put: 1000.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'long: 1000'].	args longAt: 1 put: -1000.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'long: -1000'].	args longAt: 1 put: 1000000.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'long: 1000000'].	args longAt: 1 put: -1000000.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'long: -1000000'].	args longAt: 1 put: 1000000000000.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'long: 1000000000000'].	args longAt: 1 put: -1000000000000.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'long: -1000000000000']].</body><body package="JNIPort-Tests-Java-Base">testNoArguments	| new |	new := classStatic callConstructor.	self should: [(new callStringMethod: 'getText') asString = 'default'].</body><body package="JNIPort-Tests-Java-Base">testNullArgument	| sig new |	sig := '(Ljava/lang/String;)V'.	JNIValueArray new: 1		freeAfter: 			[:args |			args objectAt: 1 put: nil.			new := classStatic callConstructorSignature: sig withArguments: args.			self should: [(new callStringMethod: 'getText') asString = 'String: null']]</body><body package="JNIPort-Tests-Java-Base">testOutOfRangeValues	"we only test the JNIValueArray, since that'll fail before it reaches the JVM (and the	JVM won't fail it, so there's no point in testing that)"	JNIValueArray new: 1 freeAfter: [:args |	self should: [args byteAt: 1 put: 200] raise: Error.	self should: [args byteAt: 1 put: 1000] raise: Error.	self should: [args shortAt: 1 put: 1000000] raise: Error.	self should: [args intAt: 1 put: 6000000000] raise: Error.	self should: [args longAt: 1 put: 100 factorial] raise: Error].</body><body package="JNIPort-Tests-Java-Base">testPointArgument	| jap p3x4 sig new |	jap := jvm findClass: #'java.awt.Point'.	p3x4 := jap new.	p3x4 setIntField: 'x' to: 3.	p3x4 setIntField: 'y' to: 4.	sig := '(Ljava/awt/Point;)V'.	JNIValueArray new: 1 freeAfter: [:args |	args objectAt: 1 put: p3x4.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'Point: java.awt.Point[x=3,y=4]'].		"JVM specific ??"]</body><body package="JNIPort-Tests-Java-Base">testShortArgument	| sig new |	JNIValueArray new: 1 freeAfter: [:args |	sig := '(S)V'.	args shortAt: 1 put: 0.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'short: 0'].	args shortAt: 1 put: 100.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'short: 100'].	args shortAt: 1 put: -100.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'short: -100'].	args shortAt: 1 put: 1000.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'short: 1000'].	args shortAt: 1 put: -1000.	new := classStatic callConstructorSignature: sig withArguments: args.	self should: [(new callStringMethod: 'getText') asString = 'short: -1000']].</body><body package="JNIPort-Tests-Java-Base">testStringArgument	| new hiThere |	hiThere := 'Hi there!' asJavaString: jvm.	new := JNIValueArray withJavaObject: hiThere				freeAfter: 					[:args |					classStatic callConstructorSignature: '(Ljava/lang/String;)V'						withArguments: args].	self		should: [(new callStringMethod: 'getText') asString = 'String: Hi there!']</body><body package="JNIPort-Tests-Java-Base">testTwoArguments	| sig new |	JNIValueArray new: 2		freeAfter: 			[:args |			sig := '(IF)V'.			args intAt: 1 put: 7.			args floatAt: 2 put: 1.5 asFloat.			new := classStatic callConstructorSignature: sig withArguments: args.			self should: [(new callStringMethod: 'getText') asString = 'int: 7 float: 1.5']]</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicConstructorsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">abstractClass	^ self javaTestClass: 'AbstractClass'.</body><body package="JNIPort-Tests-Java-Base">derivedClass	^ self javaTestClass: 'DerivedConstructors'.</body><body package="JNIPort-Tests-Java-Base">interface	^ self javaTestClass: 'InheritedMethodsInterface'.</body><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'Constructors'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicMethodArgumentsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">subject	self subclassResponsibility.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicMethodArgumentsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">dontTestTypeErrors	"unfortunately we can't use this test since the JVM doesn't actually check the types	and therefore tends to crash..."	| string sig  |	string := 'Hi there' asJavaString: jvm.	"need to hold this in an instvar"	sig := '(Ljava/awt/Point;)Ljava/lang/String;'.	JNIValueArray withJavaObject: string		freeAfter: 			[:args | self should: [subject callObjectMethod: 'method' signature: sig withArguments: args]				raise: JavaException]</body><body package="JNIPort-Tests-Java-Base">testBooleanArgument	| sig answer |	JNIValueArray new: 1 freeAfter: [:args |	sig := '(Z)Ljava/lang/String;'.	args booleanAt: 1 put: true.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'boolean: true'].	args booleanAt: 1 put: false.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'boolean: false']].</body><body package="JNIPort-Tests-Java-Base">testByteArgument	| sig answer |	JNIValueArray new: 1 freeAfter: [:args |	sig := '(B)Ljava/lang/String;'.	args byteAt: 1 put: 0.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'byte: 0'].	args byteAt: 1 put: 100.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'byte: 100'].	args byteAt: 1 put: -100.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'byte: -100']].</body><body package="JNIPort-Tests-Java-Base">testCharArgument	| sig answer |	JNIValueArray new: 1 freeAfter: [:args |	sig := '(C)Ljava/lang/String;'.	args charAt: 1 put: $!.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'char: !'].	args charAt: 1 put: $A.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'char: A']].</body><body package="JNIPort-Tests-Java-Base">testDoubleArgument	| sig answer |	JNIValueArray new: 1 freeAfter: [:args |	sig := '(D)Ljava/lang/String;'.	args doubleAt: 1 put: 0.0 asDouble.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'double: 0.0'].	args doubleAt: 1 put: 100.0 asDouble.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'double: 100.0'].	args doubleAt: 1 put: -100.0 asDouble.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'double: -100.0'].	args doubleAt: 1 put: 1000.0 asDouble.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'double: 1000.0'].	args doubleAt: 1 put: -1000.0 asDouble.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'double: -1000.0'].	args doubleAt: 1 put: 1000000.0 asDouble.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'double: 1000000.0'].	args doubleAt: 1 put: -1000000.0 asDouble.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'double: -1000000.0'].	args doubleAt: 1 put: (Number readFromString: '1000000000000.0d').	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'double: 1.0E12'].		"JVM specific ??"	args doubleAt: 1 put: (Number readFromString: '-1000000000000.0d').	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'double: -1.0E12'].		"JVM specific ??"]</body><body package="JNIPort-Tests-Java-Base">testFloatArgument	| sig answer |	JNIValueArray new: 1 freeAfter: [:args |	sig := '(F)Ljava/lang/String;'.	args floatAt: 1 put: 0.0 asFloat.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'float: 0.0'].	args floatAt: 1 put: 100.0 asFloat.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'float: 100.0'].	args floatAt: 1 put: -100.0 asFloat.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'float: -100.0'].	args floatAt: 1 put: 1000.0 asFloat.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'float: 1000.0'].	args floatAt: 1 put: -1000.0 asFloat.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'float: -1000.0'].	args floatAt: 1 put: 1000000.0 asFloat.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'float: 1000000.0'].	args floatAt: 1 put: -1000000.0 asFloat.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'float: -1000000.0']].</body><body package="JNIPort-Tests-Java-Base">testIntArgument	| sig answer |	JNIValueArray new: 1 freeAfter: [:args |	sig := '(I)Ljava/lang/String;'.	args intAt: 1 put: 0.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'int: 0'].	args intAt: 1 put: 100.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'int: 100'].	args intAt: 1 put: -100.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'int: -100'].	args intAt: 1 put: 1000.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'int: 1000'].	args intAt: 1 put: -1000.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'int: -1000'].	args intAt: 1 put: 1000000.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'int: 1000000'].	args intAt: 1 put: -1000000.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'int: -1000000']].</body><body package="JNIPort-Tests-Java-Base">testLongArgument	| sig answer |	JNIValueArray new: 1 freeAfter: [:args |	sig := '(J)Ljava/lang/String;'.	args longAt: 1 put: 0.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'long: 0'].	args longAt: 1 put: 100.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'long: 100'].	args longAt: 1 put: -100.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'long: -100'].	args longAt: 1 put: 1000.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'long: 1000'].	args longAt: 1 put: -1000.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'long: -1000'].	args longAt: 1 put: 1000000.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'long: 1000000'].	args longAt: 1 put: -1000000.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'long: -1000000'].	args longAt: 1 put: 1000000000000.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'long: 1000000000000'].	args longAt: 1 put: -1000000000000.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'long: -1000000000000']].</body><body package="JNIPort-Tests-Java-Base">testNoArguments	| sig answer |	sig := '()Ljava/lang/String;'.	answer := subject callObjectMethod: 'method' signature: sig.	self should: [answer asString = '&lt;nothing&gt;'].</body><body package="JNIPort-Tests-Java-Base">testNullArgument	| sig answer |	sig := '(Ljava/lang/String;)Ljava/lang/String;'.	JNIValueArray new: 1		freeAfter: 			[:args |			args objectAt: 1 put: nil.			answer := subject callObjectMethod: 'method' signature: sig withArguments: args.			self should: [answer asString = 'String: null']]</body><body package="JNIPort-Tests-Java-Base">testOutOfRangeValues	"we only test the JNIValueArray, since that'll fail before it reaches the JVM (and the	JVM won't fail it, so there's no point in testing that)"	JNIValueArray new: 1 freeAfter: [:args |	self should: [args byteAt: 1 put: 200] raise: Error.	self should: [args byteAt: 1 put: 1000] raise: Error.	self should: [args shortAt: 1 put: 1000000] raise: Error.	self should: [args intAt: 1 put: 6000000000] raise: Error.	self should: [args longAt: 1 put: 100 factorial] raise: Error].</body><body package="JNIPort-Tests-Java-Base">testPointArgument	| jap p3x4 sig answer |	jap := jvm findClass: #'java.awt.Point'.	p3x4 := jap new.	p3x4 setIntField: 'x' to: 3.	p3x4 setIntField: 'y' to: 4.	sig := '(Ljava/awt/Point;)Ljava/lang/String;'.	JNIValueArray new: 1		freeAfter: 			[:args |			args objectAt: 1 put: p3x4.			answer := subject callObjectMethod: 'method' signature: sig withArguments: args.			self should: [answer asString = 'Point: java.awt.Point[x=3,y=4]']	"JVM specific ??"]</body><body package="JNIPort-Tests-Java-Base">testShortArgument	| sig answer |	JNIValueArray new: 1 freeAfter: [:args |	sig := '(S)Ljava/lang/String;'.	args shortAt: 1 put: 0.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'short: 0'].	args shortAt: 1 put: 100.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'short: 100'].	args shortAt: 1 put: -100.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'short: -100'].	args shortAt: 1 put: 1000.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'short: 1000'].	args shortAt: 1 put: -1000.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'short: -1000']].</body><body package="JNIPort-Tests-Java-Base">testStringArgument	| sig string answer |	string := 'Hi there!' asJavaString: jvm.	"need to hold this in an instvar"	sig := '(Ljava/lang/String;)Ljava/lang/String;'.	answer := JNIValueArray withJavaObject: string				freeAfter: [:args | subject callObjectMethod: 'method' signature: sig withArguments: args].	self should: [answer asString = 'String: Hi there!']</body><body package="JNIPort-Tests-Java-Base">testTwoArguments	| sig answer |	JNIValueArray new: 2 freeAfter: [:args |	sig := '(IF)Ljava/lang/String;'.	args intAt: 1 put: 7.	args floatAt: 2 put: 1.5.	answer := subject callObjectMethod: 'method' signature: sig withArguments: args.	self should: [answer asString = 'int: 7 float: 1.5']].</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicMethodArgumentsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	subject := self subject.</body><body package="JNIPort-Tests-Java-Base">tearDown	subject := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicMethodArgumentsTest class</class-id> <category>Testing</category><body package="JNIPort-Tests-Java-Base">isAbstract	^self = JNIPortBasicMethodArgumentsTest.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInstanceMethodArgumentsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'InstanceMethodArguments'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInstanceMethodArgumentsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">subject	^ self javaTestClass new.</body></methods><methods><class-id>JNIPort.Tests.JNIInterfaceTest</class-id> <category>tests</category><body package="JNIPort-Tests-JNI">testJNIInterfaceForAIX	self assert: (JNIPortJNIInterface supportsPlatform: #aix).	self deny: (JNIPortJNIInterfaceForMacOSX supportsPlatform: #aix).	self assert: (JNIPortJNIInterface concreteClassForPlatform: #aix) = JNIPortJNIInterface</body><body package="JNIPort-Tests-JNI">testJNIInterfaceForHPUX	self assert: (JNIPortJNIInterface supportsPlatform: #hpux).	self deny: (JNIPortJNIInterfaceForMacOSX supportsPlatform: #hpux).	self assert: (JNIPortJNIInterface concreteClassForPlatform: #hpux) = JNIPortJNIInterface</body><body package="JNIPort-Tests-JNI">testJNIInterfaceForLinux	self assert: (JNIPortJNIInterface supportsPlatform: #linux).	self deny: (JNIPortJNIInterfaceForMacOSX supportsPlatform: #linux).	self assert: (JNIPortJNIInterface concreteClassForPlatform: #linux) = JNIPortJNIInterface</body><body package="JNIPort-Tests-JNI">testJNIInterfaceForMacOSX	self deny: (JNIPortJNIInterface supportsPlatform: #osx).	self assert: (JNIPortJNIInterfaceForMacOSX supportsPlatform: #osx).	self assert: (JNIPortJNIInterface concreteClassForPlatform: #osx) = JNIPortJNIInterfaceForMacOSX</body><body package="JNIPort-Tests-JNI">testJNIInterfaceForSolaris	self assert: (JNIPortJNIInterface supportsPlatform: #solaris).	self deny: (JNIPortJNIInterfaceForMacOSX supportsPlatform: #solaris).	self assert: (JNIPortJNIInterface concreteClassForPlatform: #solaris) = JNIPortJNIInterface</body><body package="JNIPort-Tests-JNI">testJNIInterfaceForWindows	self assert: (JNIPortJNIInterface supportsPlatform: #win).	self deny: (JNIPortJNIInterfaceForMacOSX supportsPlatform: #win).	self assert: (JNIPortJNIInterface concreteClassForPlatform: #win) = JNIPortJNIInterface</body><body package="JNIPort-Tests-JNI">testJNIInterfaceForWindowsCE	self assert: (JNIPortJNIInterface supportsPlatform: #ce).	self deny: (JNIPortJNIInterfaceForMacOSX supportsPlatform: #ce).	self assert: (JNIPortJNIInterface concreteClassForPlatform: #ce) = JNIPortJNIInterface</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicStaticMethodReturnsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'StaticMethods'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicStaticMethodReturnsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">subject	^ self javaTestClass.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedFieldsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-WrapperGeneration">dontTestTypeErrors	"unfortunately we can't use this test since the JVM doesn't actually check the types	for fields written via JNI"	| jap |	jap := jvm findClass: #'java.awt.Point'.	self		should: [subject set_stringField: jap new]		raise: Error.	self should: [(subject get_stringField) asString = 'Hi there'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testAccessBooleanField	self should: [subject get_booleanField = true].	subject set_booleanField: false.	self should: [subject get_booleanField = false].	self should: [subject callBooleanMethod: 'isBooleanFalse'].	subject set_booleanField: true.	self should: [subject get_booleanField = true].	self should: [subject callBooleanMethod: 'isBooleanTrue'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testAccessByteField	self should: [subject get_byteField = 22].	subject set_byteField: 0.	self should: [(subject getByteField: 'byteField') = 0].	self should: [subject callBooleanMethod: 'isByteZero'].	subject set_byteField: 33.	self should: [subject get_byteField = 33].	self should: [subject callBooleanMethod: 'isByte33'].	subject set_byteField: -33.	self should: [subject get_byteField = -33].	self should: [subject callBooleanMethod: 'isByteMinus33'].	subject set_byteField: 22.	self should: [subject get_byteField = 22].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testAccessCharField	self should: [subject get_charField = $!].	subject set_charField: $M.	self should: [subject get_charField = $M].	self should: [subject callBooleanMethod: 'isCharM'].	subject set_charField: 0.	self should: [subject get_charField = (Character codePoint: 0)].	self should: [subject callBooleanMethod: 'isCharZero'].	subject set_charField: 16rA.	self should: [subject get_charField = (Character codePoint: 16rA)].	self should: [subject callBooleanMethod: 'isChar0xA'].	subject set_charField: 16rAA.	self should: [subject get_charField = (Character codePoint: 16rAA)].	self should: [subject callBooleanMethod: 'isChar0xAA'].	subject set_charField: 16rAAA.	self should: [subject get_charField = (Character codePoint: 16rAAA)].	self should: [subject callBooleanMethod: 'isChar0xAAA'].	subject set_charField: 16rAAAA.	self should: [subject get_charField = (Character codePoint: 16rAAAA)].	self should: [subject callBooleanMethod: 'isChar0xAAAA'].	subject set_charField: $!.	self should: [subject get_charField = $!].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testAccessDoubleField	self should: [subject get_doubleField = 22.0].	subject set_doubleField: 0.0.	self should: [subject get_doubleField = 0.0].	self should: [subject callBooleanMethod: 'isDoubleZero'].	subject set_doubleField: 33.0.	self should: [subject get_doubleField = 33.0].	self should: [subject callBooleanMethod: 'isDouble33'].	subject set_doubleField: -33.0.	self should: [subject get_doubleField = -33.0].	self should: [subject callBooleanMethod: 'isDoubleMinus33'].	subject set_doubleField: 33.		"NB: passing an Integer, expecting coercion to double"	self should: [subject get_doubleField = 33.0].	self should: [subject callBooleanMethod: 'isDouble33'].	subject set_doubleField: 22.0.	self should: [subject get_doubleField = 22.0].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testAccessFloatField	self should: [subject get_floatField = 22.0].	subject set_floatField: 0.0.	self should: [subject get_floatField = 0.0].	self should: [subject callBooleanMethod: 'isFloatZero'].	subject set_floatField: 33.0.	self should: [subject get_floatField = 33.0].	self should: [subject callBooleanMethod: 'isFloat33'].	subject set_floatField: -33.0.	self should: [subject get_floatField = -33.0].	self should: [subject callBooleanMethod: 'isFloatMinus33'].	subject set_floatField: 33.		"NB: passing an Integer, expecting coercion to float"	self should: [subject get_floatField = 33.0].	self should: [subject callBooleanMethod: 'isFloat33'].	subject set_floatField: 22.0.	self should: [subject get_floatField = 22.0].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testAccessIntField	self should: [subject get_intField = 22].	subject set_intField: 0.	self should: [(subject getIntField: 'intField') = 0].	self should: [subject callBooleanMethod: 'isIntZero'].	subject set_intField: 33.	self should: [subject get_intField = 33].	self should: [subject callBooleanMethod: 'isInt33'].	subject set_intField: -33.	self should: [subject get_intField = -33].	self should: [subject callBooleanMethod: 'isIntMinus33'].	subject set_intField: 22.	self should: [subject get_intField = 22].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testAccessLongField	self should: [subject get_longField = 22].	subject set_longField: 0.	self should: [(subject getLongField: 'longField') = 0].	self should: [subject callBooleanMethod: 'isLongZero'].	subject set_longField: 33.	self should: [subject get_longField = 33].	self should: [subject callBooleanMethod: 'isLong33'].	subject set_longField: -33.	self should: [subject get_longField = -33].	self should: [subject callBooleanMethod: 'isLongMinus33'].	subject set_longField: 22.	self should: [subject get_longField = 22].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testAccessNonExistantField	| exceptionClass |	exceptionClass := MessageNotUnderstood.	self		should: [subject get_nonExistantField]		raise: exceptionClass.	self		should: [subject set_nonExistantField: nil]		raise: exceptionClass.</body><body package="JNIPort-Tests-Java-WrapperGeneration">testAccessPointField	| jap p3x4 p33x45 point |	jap := jvm findClass: #'java.awt.Point'.	p3x4 := jap new_int: 3 int: 4.	point := subject get_pointField.	self should: [point equals: p3x4].	subject set_pointField: nil.	self should: [subject get_pointField = nil].	self should: [subject callBooleanMethod: 'isPointNull'].	subject set_pointField: jap new.	self should: [subject callBooleanMethod: 'isPointZero'].	p33x45 := jap new_int: 33 int: 45.	subject set_pointField: p33x45.	self should: [subject get_pointField = p33x45].	self should: [subject callBooleanMethod: 'isPoint33x45'].	subject set_pointField: point.	self should: [subject get_pointField = point].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testAccessShortField	self should: [subject get_shortField = 22].	subject set_shortField: 0.	self should: [(subject getShortField: 'shortField') = 0].	self should: [subject callBooleanMethod: 'isShortZero'].	subject set_shortField: 33.	self should: [subject get_shortField = 33].	self should: [subject callBooleanMethod: 'isShort33'].	subject set_shortField: -33.	self should: [subject get_shortField = -33].	self should: [subject callBooleanMethod: 'isShortMinus33'].	subject set_shortField: 22.	self should: [subject get_shortField = 22].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testAccessStringField	self should: [subject get_stringField asString = 'Hi there'].	subject set_stringField: nil.	self should: [subject get_stringField = nil].	self should: [subject callBooleanMethod: 'isStringNull'].	subject set_stringField: '33'.	self should: [subject get_stringField asString = '33'].	self should: [subject callBooleanMethod: 'isString33'].	subject set_stringField: ''.	self should: [subject get_stringField isEmpty].	self should: [subject callBooleanMethod: 'isStringEmpty'].	subject set_stringField: 'Hi there'.	self should: [subject get_stringField asString = 'Hi there'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testOutOfRangeValues	self		should: [subject set_byteField: 200]		raise: Error.	self should: [subject get_byteField = 22].	self		should: [subject set_byteField: 1000]		raise: Error.	self should: [subject get_byteField = 22].	self		should: [subject set_shortField: 1000000]		raise: Error.	self should: [subject get_shortField = 22].	self		should: [subject set_intField: 6000000000]		raise: Error.	self should: [subject get_intField = 22].	self		should: [subject set_longField: 100 factorial]		raise: Error.	self should: [subject get_longField = 22].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedFieldsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-WrapperGeneration">setUp	super setUp.	subject := self subject.</body><body package="JNIPort-Tests-Java-WrapperGeneration">tearDown	subject := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedFieldsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-WrapperGeneration">subject	self subclassResponsibility.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedFieldsTest class</class-id> <category>Testing</category><body package="JNIPort-Tests-Java-WrapperGeneration">isAbstract	^self = JNIPortGeneratedFieldsTest.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicHiddenMethodsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testCallClassMethod	self should: [(classStatic callIntMethod: 'staticIntMethod') = 666].</body><body package="JNIPort-Tests-Java-Base">testCallInstanceMethod	self should: [(instance callIntMethod: 'intMethod') = 6].</body><body package="JNIPort-Tests-Java-Base">testCallMethodAsAnInterface	| asA |	asA := instance asInstanceOf: self interface.	self should: [(asA callIntMethod: 'interfaceIntMethod') = 6666].</body><body package="JNIPort-Tests-Java-Base">testCallSuperClassMethod	self should: [(classStatic super callIntMethod: 'staticIntMethod') = 222].</body><body package="JNIPort-Tests-Java-Base">testCallSuperInstanceMethod	self should: [(instance super callIntMethod: 'intMethod') = 2].</body><body package="JNIPort-Tests-Java-Base">testClassMethodIsInherited	self should: [(classStatic callBooleanMethod: 'staticBooleanMethod') = true].</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicHiddenMethodsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.</body><body package="JNIPort-Tests-Java-Base">tearDown	classStatic := instance := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicHiddenMethodsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">interface	^ self javaTestClass: 'InheritedMethodsInterface'.</body><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'HidingMethods'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortByteArrayCreationTest</class-id> <category>testing</category><body package="JNIPort-Tests-Prerequisites">testFromAddress	| pointer bytes |	pointer := #[1 2 3] copyToHeap.		[bytes := ByteArray fromAddress: pointer length: 0.	self assert: bytes = #[].	bytes := ByteArray fromAddress: pointer length: 1.	self assert: bytes = #[1].	bytes := ByteArray fromAddress: pointer length: 2.	self assert: bytes = #[1 2].	bytes := ByteArray fromAddress: pointer length: 3.	self assert: bytes = #[1 2 3]] 			ensure: [pointer free]</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfLongsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">elementClassName	^ #long.</body><body package="JNIPort-Tests-Java-Base">outOfRangeValues	^ Array with: 100 factorial.</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackRequestsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Callbacks">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.	jvm callbackRegistry		setCallback: classStatic callback0Tag handler: [:this :param | self handleCallbackFor: this];		setCallback: classStatic callback1Tag handler: [:this :param | self handleCallbackFor: this with: param];		setCallback: classStatic callback2Tag handler: [:this :params | self handleCallbackFor: this withArguments: params asArray];		setCallback: classStatic errorCallbackTag handler: [:this :param | self handleErrorCallbackFor: this];		setCallback: classStatic failingCallbackTag handler: [:this :param | self handleFailingCallbackFor: this].	callbacksStatus := OrderedCollection new.</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackRequestsTest</class-id> <category>running</category><body package="JNIPort-Tests-Java-Callbacks">handleCallbackFor: aJavaObject	callbacksStatus addLast: (aJavaObject = instance).	"identity test on the Java object"	"we*MUST* answer a Java object or nil"	^ nil.</body><body package="JNIPort-Tests-Java-Callbacks">handleCallbackFor: aJavaObject with: anotherJavaObject	| jliClass |	jliClass := jvm findClass: #'java.lang.Integer'.	callbacksStatus addLast: (aJavaObject = instance).	"identity test on the Java object"	callbacksStatus addLast: ((anotherJavaObject static = jliClass) and: [anotherJavaObject intValue = 1]).	^ jliClass new_int: 15.</body><body package="JNIPort-Tests-Java-Callbacks">handleCallbackFor: aJavaObject withArguments: anArray	| jliClass jldClass |	jliClass := jvm findClass: #'java.lang.Integer'.	jldClass := jvm findClass: #'java.lang.Double'.	callbacksStatus addLast: aJavaObject = instance.	"identity test on the Java object"	callbacksStatus addLast: anArray size = 2.	callbacksStatus addLast: (anArray first static = jliClass				and: [anArray first intValue = 1]).	callbacksStatus addLast: ((anArray at: 2) static = jldClass				and: [(anArray at: 2) floatValue = 2.0]).	"we*MUST* answer a Java object or nil"	^nil</body><body package="JNIPort-Tests-Java-Callbacks">handleErrorCallbackFor: aJavaObject	Error raiseSignal: 'Test Exception thrown from Smalltalk'.</body><body package="JNIPort-Tests-Java-Callbacks">handleFailingCallbackFor: aJavaObject	(jvm findClass: 'java.lang.NullPointerException') signal: 'Test Exception thrown from Smalltalk'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackRequestsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Callbacks">testCallbackInBackground	self assert: JNIPortUtility supportsForeignCallbacksFromJava.	instance callbackInBackground_int: 3 int: 50.	JNIPortUtility waitForMilliseconds: 200.	self should: [callbacksStatus size = 3].	self should: [callbacksStatus allSatisfy: [:each | each = true]]</body><body package="JNIPort-Tests-Java-Callbacks">testCallbackInLine	instance callbackInLine.	self should: [callbacksStatus size = 1].	self should: [callbacksStatus allSatisfy: [:each | each = true]].</body><body package="JNIPort-Tests-Java-Callbacks">testCallbackThrowingJavaException	self should: [instance callbackAndThrowNPE].</body><body package="JNIPort-Tests-Java-Callbacks">testCallbackWithError	self should: [instance callbackAndThrowOther].</body><body package="JNIPort-Tests-Java-Callbacks">testCallbackWithNoParameters	instance callback0.	self should: [callbacksStatus size = 1].	self should: [callbacksStatus allSatisfy: [:each | each = true]].</body><body package="JNIPort-Tests-Java-Callbacks">testCallbackWithOneParameter	instance callback1.	self should: [callbacksStatus size = 2].	self should: [callbacksStatus allSatisfy: [:each | each = true]].</body><body package="JNIPort-Tests-Java-Callbacks">testCallbackWithOneParameterAndReturn	| answer |	answer := instance callbackAndReturn_int: 1.	self should: [callbacksStatus size = 2].	self should: [callbacksStatus allSatisfy: [:each | each = true]].	self should: [answer = 15].</body><body package="JNIPort-Tests-Java-Callbacks">testCallbackWithTwoParameters	instance callback2.	self should: [callbacksStatus size = 4].	self should: [callbacksStatus allSatisfy: [:each | each = true]].</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackRequestsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Callbacks">javaTestClassName	^ 'Callbacks'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackRequestsTest</class-id> <category>initialize-release</category><body package="JNIPort-Tests-Java-Callbacks">tearDown	(jvm isNil or: [jvm isDead])		ifFalse: 			[(jvm callbackRegistry)				clearCallback: classStatic callback0Tag;				clearCallback: classStatic callback1Tag;				clearCallback: classStatic callback2Tag;				clearCallback: classStatic errorCallbackTag;				clearCallback: classStatic failingCallbackTag].	classStatic := instance := nil.	super tearDown</body></methods><methods><class-id>JNIPort.Tests.JNIPortJVMTest</class-id> <category>tests</category><body package="JNIPort-Tests-Java-Base">testNewJNIEnv	| newJniEnv |	newJniEnv := jvm javaVM newJNIEnvVersion: jvm jniEnv jniVersion.	self assert: newJniEnv jniVersion = jvm jniEnv jniVersion</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfObjectsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">elementClassName	^ #'java.lang.Object'.</body><body package="JNIPort-Tests-Java-Base">elements	^ elements.</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfObjectsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	elements := #( 'This' 'may' 'be' '' 'a' 'test' ) collect: [:each | each asJavaString: jvm].</body><body package="JNIPort-Tests-Java-Base">tearDown	elements := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortClassLookupTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testFindArrayClass	#(#'java.lang.Object' #'java.lang.StringBuffer' #boolean #char #byte #short #int #long #float #double) do:		[:each || elementClass arrayClass |		elementClass := jvm findClass: each.		arrayClass := jvm findClass: (each , '[]').		self should: [arrayClass isArrayClass].		self should: [arrayClass elementClass == elementClass]].</body><body package="JNIPort-Tests-Java-Base">testFindClass	| class1 class2 |	class1 := jvm findClass: #'java.lang.StringBuffer'.	class2 := jvm findClass: #'java.lang.StringBuffer'.	self should: [class1 == class2].	class2 := jvm findClass: 'java.lang.StringBuffer'.	self should: [class1 == class2].	class2 := jvm findClass: 'java/lang/StringBuffer'.	self should: [class1 == class2].</body><body package="JNIPort-Tests-Java-Base">testFindNonExistantClass	self		should: [jvm findClass: 'org.metagnostic.NEVER_NEVER']		raise: self noSuchClassExceptionClass.</body><body package="JNIPort-Tests-Java-Base">testFindPrimitiveClass	#(#void #boolean #char #byte #short #int #long #float #double) do:		[:each || class |		class := jvm findClass: each.		self should: [class isAPrimitive].		self should: [class name = each]].</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestEventSource</class-id> <category>Java-methods</category><body package="JNIPort-Tests-Java-Callbacks">addListener_TestEventListener: aTestEventListener1	"invoke the receiver's public addListener(jniport.test.TestEventListener) Java method"	JNIValueArray new: 1		freeAfter: 			[:args |			args objectAt: 1 put: aTestEventListener1.			self				callVoidMethod: 'addListener'				signature: '(Ljniport/test/TestEventListener;)V'				withArguments: args]</body><body package="JNIPort-Tests-Java-Callbacks">removeListener_TestEventListener: aTestEventListener1	"invoke the receiver's public removeListener(jniport.test.TestEventListener) Java method"	JNIValueArray new: 1		freeAfter: 			[:args |			args objectAt: 1 put: aTestEventListener1.			self				callVoidMethod: 'removeListener'				signature: '(Ljniport/test/TestEventListener;)V'				withArguments: args]</body><body package="JNIPort-Tests-Java-Callbacks">triggerTestEvent_String: aString1	"invoke the receiver's public triggerTestEvent(java.lang.String) Java method"	| javaString1 |	javaString1 := aString1 asJavaString: self jvm.	JNIValueArray withJavaObject: javaString1		freeAfter: 			[:args |			self				callVoidMethod: 'triggerTestEvent'				signature: '(Ljava/lang/String;)V'				withArguments: args]</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestEventSource class</class-id> <category>listing wrapper methods</category><body package="JNIPort-Tests-Java-Callbacks">generatedConstructorSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedGetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedSetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedWrapperSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(		#addListener_TestEventListener:		#removeListener_TestEventListener:		#triggerTestEvent_String:	).</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestEventSource class</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Callbacks">javaClassName	"answer the Symbol name of the Java class we stand for"	^ #'jniport.test.TestEventSource'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedMethodArgumentsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-WrapperGeneration">dontTestTypeErrors	"unfortunately we can't use this test since the JVM doesn't actually check the types	and therefore tends to crash..."	| string |	string := 'Hi there' asJavaString: jvm.	self		should: [subject halt method_Point: string]		raise: JavaException.</body><body package="JNIPort-Tests-Java-WrapperGeneration">testBooleanArgument	self should: [(subject method_boolean: true) asString = 'boolean: true'].	self should: [(subject method_boolean: false) asString = 'boolean: false'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testByteArgument	self should: [(subject method_byte: 0) asString = 'byte: 0'].	self should: [(subject method_byte: 100) asString = 'byte: 100'].	self should: [(subject method_byte: -100) asString = 'byte: -100'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testCharArgument	self should: [(subject method_char: $!) asString = 'char: !'].	self should: [(subject method_char: $A) asString = 'char: A'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testDoubleArgument	self should: [(subject method_double: 0.0 asDouble) asString = 'double: 0.0'].	self should: [(subject method_double: 100.0 asDouble) asString = 'double: 100.0'].	self should: [(subject method_double: -100.0 asDouble) asString = 'double: -100.0'].	self should: [(subject method_double: 1000.0 asDouble) asString = 'double: 1000.0'].	self should: [(subject method_double: -1000.0 asDouble) asString = 'double: -1000.0'].	self should: [(subject method_double: 1000000.0 asDouble) asString = 'double: 1000000.0'].	self should: [(subject method_double: -1000000.0 asDouble) asString = 'double: -1000000.0'].	self should: [(subject method_double: (Number readFromString: '1000000000000.0d')) asString = 'double: 1.0E12'].		"JVM specific ??"	self should: [(subject method_double: (Number readFromString: '-1000000000000.0d')) asString = 'double: -1.0E12'].		"JVM specific ??"</body><body package="JNIPort-Tests-Java-WrapperGeneration">testFloatArgument	self should: [(subject method_float: 0.0 asFloat) asString = 'float: 0.0'].	self should: [(subject method_float: 100.0 asFloat) asString = 'float: 100.0'].	self should: [(subject method_float: -100.0 asFloat) asString = 'float: -100.0'].	self should: [(subject method_float: 1000.0 asFloat) asString = 'float: 1000.0'].	self should: [(subject method_float: -1000.0 asFloat) asString = 'float: -1000.0'].	self should: [(subject method_float: 1000000.0 asFloat) asString = 'float: 1000000.0'].	self should: [(subject method_float: -1000000.0 asFloat) asString = 'float: -1000000.0'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testIntArgument	self should: [(subject method_int: 0) asString = 'int: 0'].	self should: [(subject method_int: 100) asString = 'int: 100'].	self should: [(subject method_int: -100) asString = 'int: -100'].	self should: [(subject method_int: 1000) asString = 'int: 1000'].	self should: [(subject method_int: -1000) asString = 'int: -1000'].	self should: [(subject method_int: 1000000) asString = 'int: 1000000'].	self should: [(subject method_int: -1000000) asString = 'int: -1000000'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testLongArgument	self should: [(subject method_long: 0) asString = 'long: 0'].	self should: [(subject method_long: 100) asString = 'long: 100'].	self should: [(subject method_long: -100) asString = 'long: -100'].	self should: [(subject method_long: 1000) asString = 'long: 1000'].	self should: [(subject method_long: -1000) asString = 'long: -1000'].	self should: [(subject method_long: 1000000) asString = 'long: 1000000'].	self should: [(subject method_long: -1000000) asString = 'long: -1000000'].	self should: [(subject method_long: 1000000000000) asString = 'long: 1000000000000'].	self should: [(subject method_long: -1000000000000) asString = 'long: -1000000000000'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testNoArguments	self should: [(subject method) asString = '&lt;nothing&gt;'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testNullArgument	self should: [(subject method_String: nil) asString = 'String: null'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testOutOfRangeValues	self should: [subject method_byte: 200] raise: Error.	self should: [subject method_byte: 1000] raise: Error.	self should: [subject method_short: 1000000] raise: Error.	self should: [subject method_int: 6000000000] raise: Error.	self should: [subject method_long: 100 factorial] raise: Error.</body><body package="JNIPort-Tests-Java-WrapperGeneration">testPointArgument	| jap p3x4 |	jap := jvm findClass: #'java.awt.Point'.	p3x4 := jap new_int: 3 int: 4.	self should: [(subject method_Point: p3x4) asString = 'Point: java.awt.Point[x=3,y=4]'].		"JVM specific ??"</body><body package="JNIPort-Tests-Java-WrapperGeneration">testShortArgument	self should: [(subject method_short: 0) asString = 'short: 0'].	self should: [(subject method_short: 100) asString = 'short: 100'].	self should: [(subject method_short: -100) asString = 'short: -100'].	self should: [(subject method_short: 1000) asString = 'short: 1000'].	self should: [(subject method_short: -1000) asString = 'short: -1000'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testStringArgument	self should: [(subject method_String: 'Hi there!') asString = 'String: Hi there!'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testTwoArguments	self should: [(subject method_int: 1 float: 1.5) asString = 'int: 1 float: 1.5'].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedMethodArgumentsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-WrapperGeneration">setUp	super setUp.	subject := self subject.</body><body package="JNIPort-Tests-Java-WrapperGeneration">tearDown	subject := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedMethodArgumentsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-WrapperGeneration">subject	self subclassResponsibility.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedMethodArgumentsTest class</class-id> <category>Testing</category><body package="JNIPort-Tests-Java-WrapperGeneration">isAbstract	^self = JNIPortGeneratedMethodArgumentsTest.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInstanceMethodArgumentsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-WrapperGeneration">subject	^ self javaTestClass new.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInstanceMethodArgumentsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'InstanceMethodArguments'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInhertedInterfaceFieldsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-WrapperGeneration">setUp	super setUp.	classStatic := self javaTestClass.</body><body package="JNIPort-Tests-Java-WrapperGeneration">tearDown	classStatic := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInhertedInterfaceFieldsTest</class-id> <category>reading</category><body package="JNIPort-Tests-Java-WrapperGeneration">testReadField	self should: [classStatic get_interfaceIntField = 33].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInhertedInterfaceFieldsTest</class-id> <category>writing</category><body package="JNIPort-Tests-Java-WrapperGeneration">testNoSettersGenerated	self shouldnt: [classStatic class includesSelector: #set_interfaceIntField:].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInhertedInterfaceFieldsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'InheritedInterfaceFields'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInstanceFieldsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'InstanceFields'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInstanceFieldsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-WrapperGeneration">subject	^ self javaTestClass new.</body></methods><methods><class-id>JNIPort.Tests.JavaModifiedUTF8StreamEncoderTest</class-id> <category>testing</category><body package="JNIPort-Tests-Prerequisites">testCombineSurrogates	"Test data taken from the first and last rows of the table at http://www.i18nguy.com/unicode/surrogatetable.html"	#(16rDC00 16rDCFF 16rDD00 16rDDFF 16rDE00 16rDEFF 16rDF00 16rDFFF) 		with: #(16r10000 16r100FF 16r10100 16r101FF 16r10200 16r102FF 16r10300 16r103FF)		do: 			[:trailingCodePoint :resultingCodePoint | 			self 				assert: (Character combineSurrogate: 16rD800 asCharacter						with: trailingCodePoint asCharacter) = resultingCodePoint asCharacter].	#(16rDC00 16rDCFF 16rDD00 16rDDFF 16rDE00 16rDEFF 16rDF00 16rDFFF) 		with: #(16r10FC00 16r10FCFF 16r10FD00 16r10FDFF 16r10FE00 16r10FEFF 16r10FF00 16r10FFFF)		do: 			[:trailingCodePoint :resultingCodePoint | 			self 				assert: (Character combineSurrogate: 16rDBFF asCharacter						with: trailingCodePoint asCharacter) = resultingCodePoint asCharacter]</body><body package="JNIPort-Tests-Prerequisites">testIllegalCharacter	self		assert: (String with: (16r10FFFF + 1) asCharacter)				asJavaModifiedUTF8EncodedByteArray = #[239 191 191].	self		assert: (String with: "Character illegalCode" 16rFFFF asCharacter)				asJavaModifiedUTF8EncodedByteArray = #[239 191 191].	self assert: (String fromJavaModifiedUTF8EncodedByteArray: #[239 191 191])				= (String with: "Character illegalCode" 16rFFFF asCharacter)</body><body package="JNIPort-Tests-Prerequisites">testNullCharacter	"Test null character encoding in isolation."	self		assert: (String with: 0 asCharacter) asJavaModifiedUTF8EncodedByteArray				= #[192 128].	self assert: (String fromJavaModifiedUTF8EncodedByteArray: #[192 128])				= (String with: 0 asCharacter).	"Test null character encoding in the middle of a string."	self		assert: (String				with: $a				with: 0 asCharacter				with: $b) asJavaModifiedUTF8EncodedByteArray				= #[97 192 128 98].	self		assert: (String fromJavaModifiedUTF8EncodedByteArray: #[97 192 128 98])				= (String						with: $a						with: 0 asCharacter						with: $b)</body><body package="JNIPort-Tests-Prerequisites">testSingleByteCharacters	| singleByteChars byteArray |	self assert: 'abcd' asJavaModifiedUTF8EncodedByteArray = #[97 98 99 100].	self		assert: (String fromJavaModifiedUTF8EncodedByteArray: #[97 98 99 100])				= 'abcd'.	singleByteChars := String				withAll: ((1 to: 127) collect: [:each | each asCharacter]).	byteArray := ByteArray withAll: (1 to: 127).	self		assert: singleByteChars asJavaModifiedUTF8EncodedByteArray = byteArray.	self assert: (String fromJavaModifiedUTF8EncodedByteArray: byteArray)				= singleByteChars</body><body package="JNIPort-Tests-Prerequisites">testSupplementaryCharacters	"Test the smallest code points encoded with two times three bytes"	| supplementaryChars byteArray |	supplementaryChars := String				withAll: ((16r10000 to: 16r1000F) collect: [:each | each asCharacter]).	byteArray := supplementaryChars asJavaModifiedUTF8EncodedByteArray.	self assert: byteArray size = (supplementaryChars size * 6).	self assert: supplementaryChars				= (String fromJavaModifiedUTF8EncodedByteArray: byteArray).	"Test the largest code points encoded with three bytes"	supplementaryChars := String				withAll: ((16r10FF00 to: 16r10FFFF) collect: [:each | each asCharacter]).	byteArray := supplementaryChars asJavaModifiedUTF8EncodedByteArray.	self assert: byteArray size = (supplementaryChars size * 6).	self assert: supplementaryChars				= (String fromJavaModifiedUTF8EncodedByteArray: byteArray)</body><body package="JNIPort-Tests-Prerequisites">testThreeByteCharacters	"Test the smallest code points encoded with three bytes"	| threeByteChars byteArray |	threeByteChars := String				withAll: ((2048 to: 2500) collect: [:each | each asCharacter]).	byteArray := threeByteChars asJavaModifiedUTF8EncodedByteArray.	self assert: byteArray size = (threeByteChars size * 3).	self assert: threeByteChars				= (String fromJavaModifiedUTF8EncodedByteArray: byteArray).	"Test the largest code points encoded with three bytes"	threeByteChars := String				withAll: ((16rFFF0 to: 16rFFFF) collect: [:each | each asCharacter]).	byteArray := threeByteChars asJavaModifiedUTF8EncodedByteArray.	self assert: byteArray size = (threeByteChars size * 3).	self assert: threeByteChars				= (String fromJavaModifiedUTF8EncodedByteArray: byteArray)</body><body package="JNIPort-Tests-Prerequisites">testTwoByteCharacters	| twoByteChars byteArray |	self assert: 'ÄÖÜ' asJavaModifiedUTF8EncodedByteArray				= #[195 132 195 150 195 156].	self		assert: (String				fromJavaModifiedUTF8EncodedByteArray: #[195 132 195 150 195 156]) = 'ÄÖÜ'.	twoByteChars := String				withAll: ((128 to: 2047) collect: [:each | each asCharacter]).	byteArray := twoByteChars asJavaModifiedUTF8EncodedByteArray.	self assert: byteArray size = (twoByteChars size * 2).	self assert: twoByteChars				= (String fromJavaModifiedUTF8EncodedByteArray: byteArray)</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackEventsTest</class-id> <category>event handling</category><body package="JNIPort-Tests-Java-Callbacks">onEventReceived: anOMJTRTestEventObject	eventsReceived addLast: anOMJTRTestEventObject.	"answer nil in case the test is using Requests rather than Notifications"	^ nil.</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackEventsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Callbacks">testEventsSentInBackground	self assert: JNIPortUtility supportsForeignCallbacksFromJava.	eventsReceived := OrderedCollection new.	eventSource 		when: #onTestEvent:		send: #onEventReceived:		to: self.	classStatic triggerInBackground_int: 3 int: 50.	JNIPortUtility waitForMilliseconds: 200.	eventSource removeAllActionsWithReceiver: self.	self should: [eventsReceived size = 3].	self should: 			[eventsReceived 				allSatisfy: [:each | each getText asString = 'background']]</body><body package="JNIPort-Tests-Java-Callbacks">testEventsSentInline	eventsReceived := OrderedCollection new.	eventSource 		when: #onTestEvent:		send: #onEventReceived:		to: self.	5 timesRepeat: [classStatic triggerInLine].	eventSource removeAllActionsWithReceiver: self.	self should: [eventsReceived size = 5].	self should: 			[eventsReceived allSatisfy: [:each | each getText asString = 'inline']]</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackEventsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Callbacks">javaTestClassName	^ 'Events'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackEventsTest</class-id> <category>initialize-release</category><body package="JNIPort-Tests-Java-Callbacks">tearDown	(jvm isNil or: [jvm isDead]) 		ifFalse: 			[eventSource removeListener_TestEventListener: eventForwarder.			jvm callbackRegistry clearCallback: eventMethod].	classStatic := eventSource := eventMethod := eventForwarder := nil.	super tearDown</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackEventsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Callbacks">setUp	super setUp.	classStatic := self javaTestClass.	eventMethod := classStatic getEventMethod."	eventForwarder := eventMethod asynchronousEventForwarder: #onTestEvent:.	"	eventForwarder := eventMethod eventForwarder: #onTestEvent:.	eventSource := classStatic getEventSource.	eventSource		beCanonical;		addListener_TestEventListener: eventForwarder.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInhertedInterfaceFieldsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	classStatic := self javaTestClass.</body><body package="JNIPort-Tests-Java-Base">tearDown	classStatic := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInhertedInterfaceFieldsTest</class-id> <category>reading</category><body package="JNIPort-Tests-Java-Base">testReadField	self should: [(classStatic getIntField: 'interfaceIntField') = 33].</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInhertedInterfaceFieldsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'InheritedInterfaceFields'.</body></methods><methods><class-id>JNIPort.Tests.JNIVTableClientTest</class-id> <category>testing</category><body package="JNIPort-Tests-JNI">testClassForCType	JNIPortVTableClient basicNew typeMapping 		do: [:class | self assert: (class class canUnderstand: #newFromJNIDatum:)]</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfStringsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">elementClassName	^ #'java.lang.String'.</body><body package="JNIPort-Tests-Java-Base">elements	^ elements.</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfStringsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	elements := #( 'This' 'may' 'be' '' 'a' 'test' ) collect: [:each | each asJavaString: jvm].</body><body package="JNIPort-Tests-Java-Base">tearDown	elements := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfStringsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testTypeErrors	| array |	array := self elementClass newArray: 1.	self		should: [array at: 1 put: (jvm findClass: #'java.awt.Point') new]		raise: self arrayStoreExceptionClass.	self		should: [array at: 1 put: (jvm findClass: #'java.lang.Object') new]		raise: self arrayStoreExceptionClass.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedStaticMethodReturnsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-WrapperGeneration">subject	^ self javaTestClass.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedStaticMethodReturnsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'StaticMethods'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackNotificationsTest</class-id> <category>running</category><body package="JNIPort-Tests-Java-Callbacks">handleErrorNotificationFor: aJavaObject	Error signal: 'Test Exception thrown from Smalltalk'.</body><body package="JNIPort-Tests-Java-Callbacks">handleFailingNotificationFor: aJavaObject	(jvm findClass: 'java.lang.NullPointerException') signal: 'Test Exception thrown from Smalltalk'.</body><body package="JNIPort-Tests-Java-Callbacks">handleNotificationFor: aJavaObject	notificationsStatus addLast: (aJavaObject = instance).	"identity test on the Java object"</body><body package="JNIPort-Tests-Java-Callbacks">handleNotificationFor: aJavaObject with: anotherJavaObject	| jliClass |	jliClass := jvm findClass: #'java.lang.Integer'.	notificationsStatus addLast: (aJavaObject = instance).	"identity test on the Java object"	notificationsStatus addLast: ((anotherJavaObject static = jliClass) and: [anotherJavaObject intValue = 1]).</body><body package="JNIPort-Tests-Java-Callbacks">handleNotificationFor: aJavaObject withArguments: anArray	| jliClass jldClass |	jliClass := jvm findClass: #'java.lang.Integer'.	jldClass := jvm findClass: #'java.lang.Double'.	notificationsStatus addLast: aJavaObject = instance.	"identity test on the Java object"	notificationsStatus addLast: anArray size = 2.	notificationsStatus addLast: (anArray first static = jliClass				and: [anArray first intValue = 1]).	notificationsStatus addLast: ((anArray at: 2) static = jldClass				and: [(anArray at: 2) floatValue = 2.0])</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackNotificationsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Callbacks">testNotificationInBackground	self assert: JNIPortUtility supportsForeignCallbacksFromJava.	instance notifyInBackground_int: 3 int: 50.	JNIPortUtility waitForMilliseconds: 200.	self should: [notificationsStatus size = 3].	self should: [notificationsStatus allSatisfy: [:each | each = true]]</body><body package="JNIPort-Tests-Java-Callbacks">testNotificationInLine	instance notifyInLine.	self should: [notificationsStatus size = 1].	self should: [notificationsStatus allSatisfy: [:each | each = true]].</body><body package="JNIPort-Tests-Java-Callbacks">testNotificationThrowingJavaException	"the thrown error should be absorbed silently"	instance notifyAndThrowNPE.</body><body package="JNIPort-Tests-Java-Callbacks">testNotificationWithError	"the thrown error should be absorbed silently"	instance notifyAndThrowOther.</body><body package="JNIPort-Tests-Java-Callbacks">testNotificationWithNoParameters	instance notify0.	self should: [notificationsStatus size = 1].	self should: [notificationsStatus allSatisfy: [:each | each = true]].</body><body package="JNIPort-Tests-Java-Callbacks">testNotificationWithOneParameter	instance notify1.	self should: [notificationsStatus size = 2].	self should: [notificationsStatus allSatisfy: [:each | each = true]].</body><body package="JNIPort-Tests-Java-Callbacks">testNotificationWithTwoParameters	instance notify2.	self should: [notificationsStatus size = 4].	self should: [notificationsStatus allSatisfy: [:each | each = true]].</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackNotificationsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Callbacks">javaTestClassName	^ 'Notifications'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackNotificationsTest</class-id> <category>initialize-release</category><body package="JNIPort-Tests-Java-Callbacks">tearDown	(jvm isNil or: [jvm isDead]) 		ifFalse: 			[(jvm callbackRegistry)				clearCallback: classStatic notify0Tag;				clearCallback: classStatic notify1Tag;				clearCallback: classStatic notify2Tag;				clearCallback: classStatic errorNotifyTag;				clearCallback: classStatic failingNotifyTag].	classStatic := instance := nil.	super tearDown</body></methods><methods><class-id>JNIPort.Tests.JNIPortCallbackNotificationsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Callbacks">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.	jvm callbackRegistry		setCallback: classStatic notify0Tag handler: [:this :param | self handleNotificationFor: this];		setCallback: classStatic notify1Tag handler: [:this :param | self handleNotificationFor: this with: param];		setCallback: classStatic notify2Tag handler: [:this :params | self handleNotificationFor: this withArguments: params asArray];		setCallback: classStatic errorNotifyTag handler: [:this :param | self handleErrorNotificationFor: this];		setCallback: classStatic failingNotifyTag handler: [:this :param | self handleFailingNotificationFor: this].	notificationsStatus := OrderedCollection new.</body></methods><methods><class-id>JNIPort.Tests.VaListTest</class-id> <category>testing</category><body package="JNIPort-Tests-Prerequisites">testAddAddressOfString	| vaList |	vaList := VaList new: 2.	'abc' addToVaList: vaList.	'xyz' addToVaList: vaList.	vaList position: 1.	self 		assert: (vaList nextInstanceOfClass: ExternalTestObject) string = 'abc'.	self 		assert: (vaList nextInstanceOfClass: ExternalTestObject) string = 'xyz'</body><body package="JNIPort-Tests-Prerequisites">testAddBoolean	| vaList |	vaList := VaList new: 2.	vaList		addBoolean: false;		addBoolean: true.	vaList position: 1.	self deny: vaList nextBoolean.	self assert: vaList nextBoolean</body><body package="JNIPort-Tests-Prerequisites">testAddChar	| vaList |	vaList := VaList new: 2.	vaList		addChar: $x;		addChar: $_.	vaList position: 1.	self assert: vaList nextChar = $x.	self assert: vaList nextChar = $_</body><body package="JNIPort-Tests-Prerequisites">testAddDouble	| vaList |	vaList := VaList new: 4.	vaList		addDouble: 100.2 asDouble;		addDouble: 200.4 asDouble.	vaList position: 1.	self assert: vaList nextDouble = 100.2 asDouble.	self assert: vaList nextDouble = 200.4 asDouble</body><body package="JNIPort-Tests-Prerequisites">testAddFloat	| vaList |	vaList := VaList new: 4.	vaList		addFloat: 100.2;		addFloat: 200.4.	vaList position: 1.	self assert: vaList nextFloat = 100.2.	self assert: vaList nextFloat = 200.4</body><body package="JNIPort-Tests-Prerequisites">testAddInteger	| vaList |	vaList := VaList new: 2.	vaList		addInt: 1;		addInt: 2.	vaList position: 1.	self assert: vaList nextInt = 1.	self assert: vaList nextInt = 2</body><body package="JNIPort-Tests-Prerequisites">testAddLong	| vaList |	vaList := VaList new: 4.	vaList		addLong: 1;		addLong: 2.	vaList position: 1.	self assert: vaList nextLong = 1.	self assert: vaList nextLong = 2</body><body package="JNIPort-Tests-Prerequisites">testFinalization	| vaList pointerHolder |	vaList := VaList new: 1.	'abc' addToVaList: vaList.	pointerHolder := WeakSet withAll: vaList pointers.	vaList := nil.	JNIPortUtility garbageCollect.	"The following test my look as if it could be simplified by asking pointerHolder isEmpty, 	or checking pointerHolder size, but both don't actually work in Pharo."	self assert: (Set withAll: pointerHolder) isEmpty</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfShortsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">elementClassName	^ #short.</body><body package="JNIPort-Tests-Java-Base">outOfRangeValues	^ #(-100000 100000).</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfCharsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">elementClassName	^ #char.</body><body package="JNIPort-Tests-Java-Base">elements	^ #( $a $b $C $E $f ).</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicMethodAccessTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.</body><body package="JNIPort-Tests-Java-Base">tearDown	classStatic := instance := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicMethodAccessTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testCallDefaultClassMethod	self should: [(classStatic callIntMethod: 'defaultStaticIntMethod') = 103].</body><body package="JNIPort-Tests-Java-Base">testCallDefaultFinalClassMethod	self should: [(classStatic callIntMethod: 'defaultStaticFinalIntMethod') = 113].</body><body package="JNIPort-Tests-Java-Base">testCallDefaultFinalInstanceMethod	self should: [(instance callIntMethod: 'defaultFinalIntMethod') = 13].</body><body package="JNIPort-Tests-Java-Base">testCallDefaultInstanceMethod	self should: [(instance callIntMethod: 'defaultIntMethod') = 3].</body><body package="JNIPort-Tests-Java-Base">testCallPrivateClassMethod	self should: [(classStatic callIntMethod: 'privateStaticIntMethod') = 104].</body><body package="JNIPort-Tests-Java-Base">testCallPrivateFinalClassMethod	self should: [(classStatic callIntMethod: 'privateStaticFinalIntMethod') = 114].</body><body package="JNIPort-Tests-Java-Base">testCallPrivateFinalInstanceMethod	self should: [(instance callIntMethod: 'privateFinalIntMethod') = 14].</body><body package="JNIPort-Tests-Java-Base">testCallPrivateInstanceMethod	self should: [(instance callIntMethod: 'privateIntMethod') = 4].</body><body package="JNIPort-Tests-Java-Base">testCallProtectedClassMethod	self should: [(classStatic callIntMethod: 'protectedStaticIntMethod') = 102].</body><body package="JNIPort-Tests-Java-Base">testCallProtectedFinalClassMethod	self should: [(classStatic callIntMethod: 'protectedStaticFinalIntMethod') = 112].</body><body package="JNIPort-Tests-Java-Base">testCallProtectedFinalInstanceMethod	self should: [(instance callIntMethod: 'protectedFinalIntMethod') = 12].</body><body package="JNIPort-Tests-Java-Base">testCallProtectedInstanceMethod	self should: [(instance callIntMethod: 'protectedIntMethod') = 2].</body><body package="JNIPort-Tests-Java-Base">testCallPublicClassMethod	self should: [(classStatic callIntMethod: 'publicStaticIntMethod') = 101].</body><body package="JNIPort-Tests-Java-Base">testCallPublicFinalClassMethod	self should: [(classStatic callIntMethod: 'publicStaticFinalIntMethod') = 111].</body><body package="JNIPort-Tests-Java-Base">testCallPublicFinalInstanceMethod	self should: [(instance callIntMethod: 'publicFinalIntMethod') = 11].</body><body package="JNIPort-Tests-Java-Base">testCallPublicInstanceMethod	self should: [(instance callIntMethod: 'publicIntMethod') = 1].</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicMethodAccessTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'MethodAccess'.</body></methods><methods><class-id>JNIPort.Tests.StaticJNIPortTestNotifications</class-id> <category>Java-methods</category><body package="JNIPort-Tests-Java-Callbacks">errorNotifyTag	"answer the result of calling the receiver's public static errorNotifyTag() Java method"	^ self callObjectMethod: 'errorNotifyTag' signature: '()Ljava/lang/Object;'.</body><body package="JNIPort-Tests-Java-Callbacks">failingNotifyTag	"answer the result of calling the receiver's public static failingNotifyTag() Java method"	^ self callObjectMethod: 'failingNotifyTag' signature: '()Ljava/lang/Object;'.</body><body package="JNIPort-Tests-Java-Callbacks">notify0Tag	"answer the result of calling the receiver's public static notify0Tag() Java method"	^ self callObjectMethod: 'notify0Tag' signature: '()Ljava/lang/Object;'.</body><body package="JNIPort-Tests-Java-Callbacks">notify1Tag	"answer the result of calling the receiver's public static notify1Tag() Java method"	^ self callObjectMethod: 'notify1Tag' signature: '()Ljava/lang/Object;'.</body><body package="JNIPort-Tests-Java-Callbacks">notify2Tag	"answer the result of calling the receiver's public static notify2Tag() Java method"	^ self callObjectMethod: 'notify2Tag' signature: '()Ljava/lang/Object;'.</body></methods><methods><class-id>JNIPort.Tests.StaticJNIPortTestNotifications class</class-id> <category>listing wrapper methods</category><body package="JNIPort-Tests-Java-Callbacks">generatedConstructorSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(		#new	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedGetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedSetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedWrapperSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(		#errorNotifyTag		#failingNotifyTag		#notify0Tag		#notify1Tag		#notify2Tag	).</body></methods><methods><class-id>JNIPort.Tests.StaticJNIPortTestNotifications class</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Callbacks">javaClassName	"answer the Symbol name of the Java class we stand for"	^ #'jniport.test.Notifications'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicStaticMethodArgumentsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'StaticMethodArguments'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicStaticMethodArgumentsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">subject	^ self javaTestClass.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedHiddenMethodsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-WrapperGeneration">testCallClassMethod	self should: [classStatic staticIntMethod = 666].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testCallInstanceMethod	self should: [instance intMethod = 6].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testCallMethodAsAnInterface	| asA |	asA := instance asInstanceOf: self interface.	"different behaviour between ghost classes and statically generated wrappers in this case"	(jvm usesGhostClasses and: [jvm settings ghostClassSettings useGhostInstancesForInterfaces not])		ifTrue:			["since #as: doesn't fit with ghost clases, this is supposed to DNU,			unless a static wrapper for the interface has also been generated			or ghost 'instance' wrappers are enabled for interfaces"			self				should: [asA interfaceIntMethod = 6666]				raise: MessageNotUnderstood]		ifFalse:			[self should: [asA interfaceIntMethod = 6666]].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testCallSuperClassMethod	self should: [classStatic super staticIntMethod = 222].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testCallSuperInstanceMethod	"since #super doesn't fit with ghost clases, this is supposed to DNU"	self		should: [instance super intMethod = 2]		raise: MessageNotUnderstood.</body><body package="JNIPort-Tests-Java-WrapperGeneration">testClassMethodIsInherited	self should: [classStatic staticBooleanMethod = true].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedHiddenMethodsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">interface	^ self javaTestClass: 'InheritedMethodsInterface'.</body><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'HidingMethods'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedHiddenMethodsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-WrapperGeneration">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.</body><body package="JNIPort-Tests-Java-WrapperGeneration">tearDown	classStatic := instance := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicHiddenFieldsTest</class-id> <category>writing</category><body package="JNIPort-Tests-Java-Base">testWriteClassField	classStatic setIntField: 'staticIntField' to: 0.	self should: [(classStatic getIntField: 'staticIntField') = 0].	classStatic setIntField: 'staticIntField' to: 666.	self should: [(classStatic getIntField: 'staticIntField') = 666].</body><body package="JNIPort-Tests-Java-Base">testWriteInstanceField	self should: [(instance getIntField: 'intField') = 6].	instance setIntField: 'intField' to: 0.	self should: [(instance getIntField: 'intField') = 0].</body><body package="JNIPort-Tests-Java-Base">testWriteSuperClassField	| sup |	sup := classStatic super.	sup setIntField: 'staticIntField' to: 0.	self should: [(sup getIntField: 'staticIntField') = 0].	sup setIntField: 'staticIntField' to: 222.	self should: [(sup getIntField: 'staticIntField') = 222].	"check that we really have changed the superclass field"	self should: [(classStatic getIntField: 'staticIntField') = 666].</body><body package="JNIPort-Tests-Java-Base">testWriteSuperInstanceField	| sup |	sup := instance super.	self should: [(sup getIntField: 'intField') = 2].	sup setIntField: 'intField' to: 0.	self should: [(sup getIntField: 'intField') = 0].	"check that we really have changed the superclass field"	self should: [(instance getIntField: 'intField') = 6].</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicHiddenFieldsTest</class-id> <category>reading</category><body package="JNIPort-Tests-Java-Base">testReadAmbiguousField	"NB: we should be reading the field in the *interface* "	"IBM and JRockit wrongly pick up the class field"	self should: [(classStatic getIntField: 'ambiguousIntField') = -100].</body><body package="JNIPort-Tests-Java-Base">testReadClassField	self should: [(classStatic getIntField: 'staticIntField') = 666].</body><body package="JNIPort-Tests-Java-Base">testReadInstanceField	self should: [(instance getIntField: 'intField') = 6].</body><body package="JNIPort-Tests-Java-Base">testReadInterfaceField	self should: [(classStatic getIntField: 'interfaceIntField') = 66].</body><body package="JNIPort-Tests-Java-Base">testReadSuperClassField	self should: [(classStatic super getIntField: 'staticIntField') = 222].</body><body package="JNIPort-Tests-Java-Base">testReadSuperInstanceField	self should: [(instance super getIntField: 'intField') = 2].</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicHiddenFieldsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.</body><body package="JNIPort-Tests-Java-Base">tearDown	classStatic := instance := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicHiddenFieldsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testClassFieldIsInherited	self should: [(classStatic getBooleanField: 'staticBooleanField') = true].</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicHiddenFieldsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'HidingFields'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedStaticMethodArgumentsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-WrapperGeneration">subject	^ self javaTestClass.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedStaticMethodArgumentsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'StaticMethodArguments'.</body></methods><methods><class-id>JNIPort.Tests.EncodedStringCopyingTest</class-id> <category>testing</category><body package="JNIPort-Tests-Prerequisites">testJavaLangStringEncoding	| byteArray supplementaryCharacters |	byteArray := 'test' asJavaLangStringEncodedByteArray.	self assert: (String fromJavaLangStringEncodedByteArray: byteArray) = 'test'.	byteArray := 'ÄÖÜß' asJavaLangStringEncodedByteArray.	self assert: (String fromJavaLangStringEncodedByteArray: byteArray) = 'ÄÖÜß'.	supplementaryCharacters := String		with: 16r10000 asCharacter		with: 16rAFBCD asCharacter		with: 16r10FFFF asCharacter.	byteArray := supplementaryCharacters asJavaLangStringEncodedByteArray.	self assert: (String fromJavaLangStringEncodedByteArray: byteArray) = supplementaryCharacters</body></methods><methods><class-id>JNIPort.Tests.EncodedStringCopyingTest</class-id> <category>*JNIPort-Tests-JNI</category><body package="JNIPort-Tests-JNI">testStringAsJNIParameter	| pointer supplementaryCharacters |	pointer := 'test' asJNIParameter.		self assert: pointer isValid.	self assert: pointer copyJavaModifiedUTF8StringFromHeap = 'test'.	pointer := 'ÄÖÜß' asJNIParameter.		self assert: pointer isValid.	self assert: pointer copyJavaModifiedUTF8StringFromHeap = 'ÄÖÜß'.	supplementaryCharacters := String with: 16r10000 asCharacter with: 16rAFBCD asCharacter with: 16r10FFFF asCharacter.	pointer := supplementaryCharacters asJNIParameter.		self assert: pointer isValid.	self assert: pointer copyJavaModifiedUTF8StringFromHeap = supplementaryCharacters</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInheritedMethodsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-WrapperGeneration">testCallAbstractMethod	self should: [instance abstractIntMethod = 22].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testCallClassMethod	self should: [classStatic staticIntMethod = 222].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testCallInstanceMethod	self should: [instance intMethod = 2].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testCallInterfaceMethod	self should: [instance interfaceIntMethod = 2222].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInheritedMethodsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'InheritedMethods'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInheritedMethodsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-WrapperGeneration">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.</body><body package="JNIPort-Tests-Java-WrapperGeneration">tearDown	classStatic := instance := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInheritedFieldsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.</body><body package="JNIPort-Tests-Java-Base">tearDown	classStatic := instance := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInheritedFieldsTest</class-id> <category>reading</category><body package="JNIPort-Tests-Java-Base">testReadClassField	self should: [(classStatic getIntField: 'staticIntField') = 222].</body><body package="JNIPort-Tests-Java-Base">testReadInstanceField	self should: [(instance getIntField: 'intField') = 2].</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInheritedFieldsTest</class-id> <category>writing</category><body package="JNIPort-Tests-Java-Base">testWriteClassField	classStatic setIntField: 'staticIntField' to: 0.	self should: [(classStatic getIntField: 'staticIntField') = 0].	classStatic setIntField: 'staticIntField' to: 222.	self should: [(classStatic getIntField: 'staticIntField') = 222].</body><body package="JNIPort-Tests-Java-Base">testWriteInstanceField	self should: [(instance getIntField: 'intField') = 2].	instance setIntField: 'intField' to: 0.	self should: [(instance getIntField: 'intField') = 0].</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicInheritedFieldsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'InheritedFields'.</body></methods><methods><class-id>JNIPort.Tests.JNIJavaVMInitArgsTest</class-id> <category>Running</category><body package="JNIPort-Tests-JNI">testAddOptions	| instance |	instance := JNIPortJavaVMInitArgs new.	self assert: instance options isEmpty.	instance addOption: 'option'.	self assert: instance options size = 1.	self assert: (instance options includesKey: 'option').	instance addOption: 'option2'.	self assert: instance options size = 2.	self assert: (instance options includesKey: 'option2').	self assert: (instance options includesKey: 'option')</body><body package="JNIPort-Tests-JNI">testNewJavaVMInitArgs	| instance |	instance := JNIPortJavaVMInitArgs new.	self assert: instance version isInteger.	self assert: instance ignoreUnrecognized == true.	self assert: instance options isEmpty</body><body package="JNIPort-Tests-JNI">testSetIgnoreUnrecognized	| instance |	instance := JNIPortJavaVMInitArgs new.	self assert: instance ignoreUnrecognized.	instance ignoreUnrecognized: false.	self deny: instance ignoreUnrecognized.	instance ignoreUnrecognized: true.	self assert: instance ignoreUnrecognized</body><body package="JNIPort-Tests-JNI">testSetVersion	| instance |	instance := JNIPortJavaVMInitArgs new.	self assert: instance version ~= 2.	instance version: 2.	self assert: instance version = 2</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicStaticFieldsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">subject	^ self javaTestClass.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicStaticFieldsTest</class-id> <category>initialize-release</category><body package="JNIPort-Tests-Java-Base">tearDown	"testOutOfRangeValues may leave modified values in the StaticFields static fields if the out of range values can actually be stored, instead of leading to an Exception. Reset them such that other tests relying on the initial values if the static fields don't fail."	jvm isDead 		ifFalse: 			[subject setByteField: 'byteField' to: 22.			subject setShortField: 'shortField' to: 22.			subject setIntField: 'intField' to: 22.			subject setLongField: 'longField' to: 22].	super tearDown</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicStaticFieldsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'StaticFields'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedConstructorsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">abstractClass	^ self javaTestClass: 'AbstractClass'.</body><body package="JNIPort-Tests-Java-WrapperGeneration">derivedClass	^ self javaTestClass: 'DerivedConstructors'.</body><body package="JNIPort-Tests-Java-WrapperGeneration">interface	^ self javaTestClass: 'InheritedMethodsInterface'.</body><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'Constructors'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedConstructorsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-WrapperGeneration">testBooleanArgument	self should: [(classStatic new_boolean: true) getText asString = 'boolean: true'].	self should: [(classStatic new_boolean: false) getText asString = 'boolean: false'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testByteArgument	self should: [(classStatic new_byte: 0) getText asString = 'byte: 0'].	self should: [(classStatic new_byte: 100) getText asString = 'byte: 100'].	self should: [(classStatic new_byte: -100) getText asString = 'byte: -100'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testCharArgument	self should: [(classStatic new_char: $!) getText asString = 'char: !'].	self should: [(classStatic new_char: $A) getText asString = 'char: A'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testDerivedClassConstructor	| new |	new := self derivedClass new.	self should: [new static = self derivedClass].	self should: [new getText asString = 'String: derived'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testDoubleArgument	self should: [(classStatic new_double: 0.0 asDouble) getText asString = 'double: 0.0'].	self should: [(classStatic new_double: 100.0 asDouble) getText asString = 'double: 100.0'].	self should: [(classStatic new_double: -100.0 asDouble) getText asString = 'double: -100.0'].	self should: [(classStatic new_double: 1000.0 asDouble) getText asString = 'double: 1000.0'].	self should: [(classStatic new_double: -1000.0 asDouble) getText asString = 'double: -1000.0'].	self should: [(classStatic new_double: 1000000.0 asDouble) getText asString = 'double: 1000000.0'].	self should: [(classStatic new_double: -1000000.0 asDouble) getText asString = 'double: -1000000.0'].	self should: [(classStatic new_double: (Number readFromString: '1000000000000.0d')) getText asString = 'double: 1.0E12'].		"JVM specific ??"	self should: [(classStatic new_double: (Number readFromString: '-1000000000000.0d')) getText asString = 'double: -1.0E12'].		"JVM specific ??"</body><body package="JNIPort-Tests-Java-WrapperGeneration">testFloatArgument	self should: [(classStatic new_float: 0.0 asFloat) getText asString = 'float: 0.0'].	self should: [(classStatic new_float: 100.0 asFloat) getText asString = 'float: 100.0'].	self should: [(classStatic new_float: -100.0 asFloat) getText asString = 'float: -100.0'].	self should: [(classStatic new_float: 1000.0 asFloat) getText asString = 'float: 1000.0'].	self should: [(classStatic new_float: -1000.0 asFloat) getText asString = 'float: -1000.0'].	self should: [(classStatic new_float: 1000000.0 asFloat) getText asString = 'float: 1000000.0'].	self should: [(classStatic new_float: -1000000.0 asFloat) getText asString = 'float: -1000000.0'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testInheritedConstructor	| new exception |	"different behaviour between ghost classes and statically generated wrappers in this case"	exception := jvm usesGhostClasses				ifTrue: [Error "i.e. ShouldNotImplement"]				ifFalse: [self noSuchMethodExceptionClass].	"JRockit wrongly answers an instance of the superclass"	self		should: [new := self derivedClass new_int: 1]		raise: exception.</body><body package="JNIPort-Tests-Java-WrapperGeneration">testInstantiateAbstractClass	self		should: [self abstractClass new_int: 1]		raise: MessageNotUnderstood.</body><body package="JNIPort-Tests-Java-WrapperGeneration">testInstantiateAbstractClassWithDefaultConstructor	| new exception |	"different behaviour between ghost classes and statically generated wrappers in this case"	exception := jvm usesGhostClasses				ifTrue: [Error "i.e. ShouldNotImplement"]				ifFalse: [self instantiationExceptionClass].	self		should: [new := self abstractClass new]		raise: exception.</body><body package="JNIPort-Tests-Java-WrapperGeneration">testInstantiateConcreteClass	| new |	self		shouldnt: [new := classStatic new]		raise: MessageNotUnderstood.	self should: [new static == classStatic].	self should: [new isInstanceOf: classStatic].	self should: [new getText asString = 'default'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testInstantiateInterface	self		should: [self interface new]		raise: MessageNotUnderstood.</body><body package="JNIPort-Tests-Java-WrapperGeneration">testIntArgument	self should: [(classStatic new_int: 0) getText asString = 'int: 0'].	self should: [(classStatic new_int: 100) getText asString = 'int: 100'].	self should: [(classStatic new_int: -100) getText asString = 'int: -100'].	self should: [(classStatic new_int: 1000) getText asString = 'int: 1000'].	self should: [(classStatic new_int: -1000) getText asString = 'int: -1000'].	self should: [(classStatic new_int: 1000000) getText asString = 'int: 1000000'].	self should: [(classStatic new_int: -1000000) getText asString = 'int: -1000000'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testLongArgument	self should: [(classStatic new_long: 0) getText asString = 'long: 0'].	self should: [(classStatic new_long: 100) getText asString = 'long: 100'].	self should: [(classStatic new_long: -100) getText asString = 'long: -100'].	self should: [(classStatic new_long: 1000) getText asString = 'long: 1000'].	self should: [(classStatic new_long: -1000) getText asString = 'long: -1000'].	self should: [(classStatic new_long: 1000000) getText asString = 'long: 1000000'].	self should: [(classStatic new_long: -1000000) getText asString = 'long: -1000000'].	self should: [(classStatic new_long: 1000000000000) getText asString = 'long: 1000000000000'].	self should: [(classStatic new_long: -1000000000000) getText asString = 'long: -1000000000000'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testNoArguments	self should: [(classStatic new) getText asString = 'default'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testNullArgument	self should: [(classStatic new_String: nil) getText asString = 'String: null'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testOutOfRangeValues	self should: [classStatic new_byte: 200] raise: Error.	self should: [classStatic new_byte: 1000] raise: Error.	self should: [classStatic new_short: 1000000] raise: Error.	self should: [classStatic new_int: 6000000000] raise: Error.	self should: [classStatic new_long: 100 factorial] raise: Error.</body><body package="JNIPort-Tests-Java-WrapperGeneration">testPointArgument	| jap p3x4 |	jap := jvm findClass: #'java.awt.Point'.	p3x4 := jap new_int: 3 int: 4.	self should: [(classStatic new_Point: p3x4) getText asString = 'Point: java.awt.Point[x=3,y=4]'].		"JVM specific ??"</body><body package="JNIPort-Tests-Java-WrapperGeneration">testShortArgument	self should: [(classStatic new_short: 0) getText asString = 'short: 0'].	self should: [(classStatic new_short: 100) getText asString = 'short: 100'].	self should: [(classStatic new_short: -100) getText asString = 'short: -100'].	self should: [(classStatic new_short: 1000) getText asString = 'short: 1000'].	self should: [(classStatic new_short: -1000) getText asString = 'short: -1000'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testStringArgument	self should: [(classStatic new_String: 'Hi there!') getText asString = 'String: Hi there!'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testTwoArguments	self should: [(classStatic new_int: 1 float: 1.5) getText asString = 'int: 1 float: 1.5'].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedConstructorsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-WrapperGeneration">setUp	super setUp.	classStatic := self javaTestClass.</body><body package="JNIPort-Tests-Java-WrapperGeneration">tearDown	classStatic := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestEventObject</class-id> <category>converting</category><body package="JNIPort-Tests-Java-Callbacks">toString	"answer the result of calling the receiver's public toString() Java method"	^ self callObjectMethod: 'toString' signature: '()Ljava/lang/String;'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestEventObject</class-id> <category>Java-methods</category><body package="JNIPort-Tests-Java-Callbacks">getText	"answer the result of calling the receiver's public getText() Java method"	^ self callObjectMethod: 'getText' signature: '()Ljava/lang/String;'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestEventObject class</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Callbacks">javaClassName	"answer the Symbol name of the Java class we stand for"	^ #'jniport.test.TestEventObject'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestEventObject class</class-id> <category>listing wrapper methods</category><body package="JNIPort-Tests-Java-Callbacks">generatedConstructorSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedGetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedSetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedWrapperSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(		#getText		#toString	).</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfDoublesTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">elementClassName	^ #double.</body><body package="JNIPort-Tests-Java-Base">elements	^ #( 0.0 1.0 2.5 3.3 0.2 ) collect: [:each | each asDouble]</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedFieldAccessTest</class-id> <category>writing</category><body package="JNIPort-Tests-Java-WrapperGeneration">testNoSettersGeneratedForFinalFields	self shouldnt: [instance class includesSelector: #set_publicFinalIntField:].	self shouldnt: [instance class includesSelector: #set_protectedFinalIntField:].	self shouldnt: [instance class includesSelector: #set_defaultFinalIntField:].	self shouldnt: [instance class includesSelector: #set_privateFinalIntField:].	self shouldnt: [classStatic class includesSelector: #set_publicStaticFinalIntField:].	self shouldnt: [classStatic class includesSelector: #set_protectedStaticFinalIntField:].	self shouldnt: [classStatic class includesSelector: #set_defaultStaticFinalIntField:].	self shouldnt: [classStatic class includesSelector: #set_privateStaticFinalIntField:].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testNoSettersGeneratedForNonpublicFields	| generatorSettings includeProtectedFields includeDefaultAccessFields includePrivateFields |	generatorSettings := jvm usesGhostClasses ifTrue: [jvm settings ghostClassSettings] ifFalse: [jvm settings wrapperGeneratorSettings].	includeProtectedFields := generatorSettings includeProtectedFields.	includeDefaultAccessFields := generatorSettings includeDefaultAccessFields.	includePrivateFields := generatorSettings includePrivateFields.	self assert: (includeProtectedFields not xor: (instance class includesSelector: #set_protectedIntField:)).	self assert: (includeDefaultAccessFields not xor: (instance class includesSelector: #set_defaultIntField:)).	self assert: (includePrivateFields not xor: (instance class includesSelector: #set_privateIntField:)).	self assert: (includeProtectedFields not xor: (classStatic class includesSelector: #set_protectedStaticIntField:)).	self assert: (includeDefaultAccessFields not xor: (classStatic class includesSelector: #set_defaultStaticIntField:)).	self assert: (includePrivateFields not xor: (classStatic class includesSelector: #set_privateStaticIntField:)).</body><body package="JNIPort-Tests-Java-WrapperGeneration">testWritePublicClassField	classStatic set_publicStaticIntField: 0.	self should: [classStatic get_publicStaticIntField = 0].	classStatic set_publicStaticIntField: 101.	self should: [classStatic get_publicStaticIntField = 101].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testWritePublicInstanceField	self should: [instance get_publicIntField = 1].	instance set_publicIntField: 0.	self should: [instance get_publicIntField = 0].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedFieldAccessTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-WrapperGeneration">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.</body><body package="JNIPort-Tests-Java-WrapperGeneration">tearDown	classStatic := instance := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedFieldAccessTest</class-id> <category>reading</category><body package="JNIPort-Tests-Java-WrapperGeneration">testNoGettersGeneratedForNonpublicFields	| generatorSettings includeProtectedFields includeDefaultAccessFields includePrivateFields |	generatorSettings := jvm usesGhostClasses ifTrue: [jvm settings ghostClassSettings] ifFalse: [jvm settings wrapperGeneratorSettings].	includeProtectedFields := generatorSettings includeProtectedFields.	includeDefaultAccessFields := generatorSettings includeDefaultAccessFields.	includePrivateFields := generatorSettings includePrivateFields.		self assert: (includeProtectedFields not xor: (instance class includesSelector: #get_protectedIntField)).	self assert: (includeDefaultAccessFields not xor: (instance class includesSelector: #get_defaultIntField)).	self assert: (includePrivateFields not xor: (instance class includesSelector: #get_privateIntField)).	self assert: (includeProtectedFields not xor: (instance class includesSelector: #get_protectedFinalIntField)).	self assert: (includeDefaultAccessFields not xor: (instance class includesSelector: #get_defaultFinalIntField)).	self assert: (includePrivateFields not xor: (instance class includesSelector: #get_privateFinalIntField)).	self assert: (includeProtectedFields not xor: (classStatic class includesSelector: #get_protectedStaticIntField)).	self assert: (includeDefaultAccessFields not xor: (classStatic class includesSelector: #get_defaultStaticIntField)).	self assert: (includePrivateFields not xor: (classStatic class includesSelector: #get_privateStaticIntField)).	self assert: (includeProtectedFields not xor: (classStatic class includesSelector: #get_protectedStaticFinalIntField)).	self assert: (includeDefaultAccessFields not xor: (classStatic class includesSelector: #get_defaultStaticFinalIntField)).	self assert: (includePrivateFields not xor: (classStatic class includesSelector: #get_privateStaticFinalIntField)).</body><body package="JNIPort-Tests-Java-WrapperGeneration">testReadPublicClassField	self should: [classStatic get_publicStaticIntField = 101].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testReadPublicFinalClassField	self should: [classStatic get_publicStaticFinalIntField = 111].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testReadPublicFinalInstanceField	self should: [instance get_publicFinalIntField = 11].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testReadPublicInstanceField	self should: [instance get_publicIntField = 1].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedFieldAccessTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'FieldAccess'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicFieldAccessTest</class-id> <category>reading</category><body package="JNIPort-Tests-Java-Base">testReadDefaultClassField	self should: [(classStatic getIntField: 'defaultStaticIntField') = 103].</body><body package="JNIPort-Tests-Java-Base">testReadDefaultFinalClassField	self should: [(classStatic getIntField: 'defaultStaticFinalIntField') = 113].</body><body package="JNIPort-Tests-Java-Base">testReadDefaultFinalInstanceField	self should: [(instance getIntField: 'defaultFinalIntField') = 13].</body><body package="JNIPort-Tests-Java-Base">testReadDefaultInstanceField	self should: [(instance getIntField: 'defaultIntField') = 3].</body><body package="JNIPort-Tests-Java-Base">testReadPrivateClassField	self should: [(classStatic getIntField: 'privateStaticIntField') = 104].</body><body package="JNIPort-Tests-Java-Base">testReadPrivateFinalClassField	self should: [(classStatic getIntField: 'privateStaticFinalIntField') = 114].</body><body package="JNIPort-Tests-Java-Base">testReadPrivateFinalInstanceField	self should: [(instance getIntField: 'privateFinalIntField') = 14].</body><body package="JNIPort-Tests-Java-Base">testReadPrivateInstanceField	self should: [(instance getIntField: 'privateIntField') = 4].</body><body package="JNIPort-Tests-Java-Base">testReadProtectedClassField	self should: [(classStatic getIntField: 'protectedStaticIntField') = 102].</body><body package="JNIPort-Tests-Java-Base">testReadProtectedFinalClassField	self should: [(classStatic getIntField: 'protectedStaticFinalIntField') = 112].</body><body package="JNIPort-Tests-Java-Base">testReadProtectedFinalInstanceField	self should: [(instance getIntField: 'protectedFinalIntField') = 12].</body><body package="JNIPort-Tests-Java-Base">testReadProtectedInstanceField	self should: [(instance getIntField: 'protectedIntField') = 2].</body><body package="JNIPort-Tests-Java-Base">testReadPublicClassField	self should: [(classStatic getIntField: 'publicStaticIntField') = 101].</body><body package="JNIPort-Tests-Java-Base">testReadPublicFinalClassField	self should: [(classStatic getIntField: 'publicStaticFinalIntField') = 111].</body><body package="JNIPort-Tests-Java-Base">testReadPublicFinalInstanceField	self should: [(instance getIntField: 'publicFinalIntField') = 11].</body><body package="JNIPort-Tests-Java-Base">testReadPublicInstanceField	self should: [(instance getIntField: 'publicIntField') = 1].</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicFieldAccessTest</class-id> <category>writing</category><body package="JNIPort-Tests-Java-Base">testWriteDefaultClassField	classStatic setIntField: 'defaultStaticIntField' to: 0.	self should: [(classStatic getIntField: 'defaultStaticIntField') = 0].	classStatic setIntField: 'defaultStaticIntField' to: 103.	self should: [(classStatic getIntField: 'defaultStaticIntField') = 103].</body><body package="JNIPort-Tests-Java-Base">testWriteDefaultInstanceField	self should: [(instance getIntField: 'defaultIntField') = 3].	instance setIntField: 'defaultIntField' to: 0.	self should: [(instance getIntField: 'defaultIntField') = 0].</body><body package="JNIPort-Tests-Java-Base">testWritePrivateClassField	classStatic setIntField: 'privateStaticIntField' to: 0.	self should: [(classStatic getIntField: 'privateStaticIntField') = 0].	classStatic setIntField: 'privateStaticIntField' to: 104.	self should: [(classStatic getIntField: 'privateStaticIntField') = 104].</body><body package="JNIPort-Tests-Java-Base">testWritePrivateInstanceField	self should: [(instance getIntField: 'privateIntField') = 4].	instance setIntField: 'privateIntField' to: 0.	self should: [(instance getIntField: 'privateIntField') = 0].</body><body package="JNIPort-Tests-Java-Base">testWriteProtectedClassField	classStatic setIntField: 'protectedStaticIntField' to: 0.	self should: [(classStatic getIntField: 'protectedStaticIntField') = 0].	classStatic setIntField: 'protectedStaticIntField' to: 102.	self should: [(classStatic getIntField: 'protectedStaticIntField') = 102].</body><body package="JNIPort-Tests-Java-Base">testWriteProtectedInstanceField	self should: [(instance getIntField: 'protectedIntField') = 2].	instance setIntField: 'protectedIntField' to: 0.	self should: [(instance getIntField: 'protectedIntField') = 0].</body><body package="JNIPort-Tests-Java-Base">testWritePublicClassField	classStatic setIntField: 'publicStaticIntField' to: 0.	self should: [(classStatic getIntField: 'publicStaticIntField') = 0].	classStatic setIntField: 'publicStaticIntField' to: 101.	self should: [(classStatic getIntField: 'publicStaticIntField') = 101].</body><body package="JNIPort-Tests-Java-Base">testWritePublicInstanceField	self should: [(instance getIntField: 'publicIntField') = 1].	instance setIntField: 'publicIntField' to: 0.	self should: [(instance getIntField: 'publicIntField') = 0].</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicFieldAccessTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'FieldAccess'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortBasicFieldAccessTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.</body><body package="JNIPort-Tests-Java-Base">tearDown	classStatic := instance := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.ExternalTestObject</class-id> <category>accessing</category><body package="JNIPort-Tests-Prerequisites">string	^self externalData copyCStringFromHeap</body></methods><methods><class-id>JNIPort.Tests.ExternalTestObject class</class-id> <category>external accessing</category><body package="JNIPort-Tests-Prerequisites">baseCType	^StandardLibInterface default char</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfBytesTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">elementClassName	^ #byte.</body><body package="JNIPort-Tests-Java-Base">outOfRangeValues	^ #(-200 200 1000).</body></methods><methods><class-id>JNIPort.Tests.JNIPortStringTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testAsByteArray8Bit	| javaString bytes i |	javaString := self javaStringFrom: 0 to: 255.	bytes := javaString asByteArray.	i := 0.	bytes do: 			[:each |			self should: [each = i].			i := i + 1]</body><body package="JNIPort-Tests-Java-Base">testAsString16Bit	| javaString stString |	javaString := self javaStringFrom: 256 to: 16rD800 - 1.	"16rD800 is the low end of the surrogate character range"	stString := String withAll: ((256 to: 16rD800 - 1) 						collect: [:codePoint | Character value: codePoint]).	self assert: javaString asString = stString.	javaString := self javaStringFrom: 16rDFFF + 1 to: 65535.	"16rDFFF is the high end of the surrogate character range"	stString := String withAll: ((16rDFFF + 1 to: 65535) 						collect: [:codePoint | Character value: codePoint]).	self assert: javaString asString = stString</body><body package="JNIPort-Tests-Java-Base">testAsString8Bit	| javaString stString |	javaString := self javaStringFrom: 0 to: 255.	stString := String 				withAll: ((0 to: 255) collect: [:codePoint | Character value: codePoint]).	self assert: javaString asString = stString</body><body package="JNIPort-Tests-Java-Base">testCharAtFor16BitCharacters	| javaString |	javaString := self javaStringFrom: 256 to: 65535.		"The following test consumes a bit too much time:	0 to: (65535 - 256) do: [:i | self assert: (javaString charAt_int: i) = (Character codePoint: i + 256)].	Therefore, just take some probes."	0 to: (65535 - 256)  by: 97 do: [:i | self assert: (javaString charAt_int: i) = (Character codePoint: i + 256)].</body><body package="JNIPort-Tests-Java-Base">testConvertEmptyString	| javaString |	javaString := '' asJavaString: jvm.	self should: [javaString asString = ''].</body><body package="JNIPort-Tests-Java-Base">testConvertString	| string javaString |	string := 'a test string'.	javaString := string asJavaString: jvm.	self should: [javaString asString = string].</body><body package="JNIPort-Tests-Java-Base">testConvertString16Bit	| string javaString |	string := String withAll: ((256 to: 16rD800 - 1) 						collect: [:codePoint | Character value: codePoint]).	javaString := string asJavaString: jvm.	self should: [javaString asString = string].	string := String withAll: ((16rDFFF + 1 to: 65535) 						collect: [:codePoint | Character value: codePoint]).	javaString := string asJavaString: jvm.	self should: [javaString asString = string].</body><body package="JNIPort-Tests-Java-Base">testConvertStringSupplementaryCharacters	| string javaString stringLength |	string := String withAll: ((16r10000 to: 16r10FFFA by: 97)						collect: [:codePoint | Character value: codePoint]).	javaString := string asJavaString: jvm.	self should: [javaString asString = string].	"The supplementary characters are stored as pairs of two surrogate code units."	self assert: (javaString charAt_int: 0) isLeadingSurrogate.	self assert: (javaString charAt_int: 1) isTrailingSurrogate.	self assert: (javaString charAt_int: 100) isLeadingSurrogate.	self assert: (javaString charAt_int: 101) isTrailingSurrogate.	stringLength := javaString length.	self assert: (javaString charAt_int: stringLength - 2) isLeadingSurrogate.	self assert: (javaString charAt_int: stringLength - 1) isTrailingSurrogate.	"Check some code points in the Java string."	self assert: (javaString codePointAt_int: 0) = 16r10000.	self assert: (javaString codePointAt_int: 100) = (16r10000 + ((100/2) * 97)).	stringLength := javaString length.	self assert: (javaString codePointAt_int: stringLength - 2) = 16r10FFFA.</body><body package="JNIPort-Tests-Java-Base">testConvertWhenHasNulls	| string javaString |	string := 'a test String' copy.	string at: 2 put: (Character codePoint: 0).	string at: 7 put: (Character codePoint: 0).	javaString := string asJavaString: jvm.	self should: [javaString size = 13].	self should: [javaString asString = string].</body><body package="JNIPort-Tests-Java-Base">testConvertWhenHibitSet	| string javaString |	string := ByteArray withAll: (0 to: 255).	string := string , string reverse.	string := string asString.	javaString := string asJavaString: jvm.	self should: [javaString size = 512].	self should: [javaString asString = string].</body><body package="JNIPort-Tests-Java-Base">testDoLoop1	| javaString i |	javaString := self javaStringFrom: 0 to: 255.	i := 0.	javaString do: [:each | self should: [each codePoint = i]. i := i + 1].</body><body package="JNIPort-Tests-Java-Base">testDoLoop2	| javaString i |	javaString := self javaStringFrom: 256 to: 65535 .	i := 256.	javaString do: [:each | self should: [each = (Character value: i)]. i := i + 1].</body><body package="JNIPort-Tests-Java-Base">testFromByteArray	| bytes javaString |	bytes := #[97 32 116 101 115 116 32 83 116 114 105 110 103].	javaString := JavaLangString			fromByteArray: bytes			jvm: jvm.	self should: [javaString asByteArray = bytes].</body><body package="JNIPort-Tests-Java-Base">testFromString	| string javaString |	string := 'a test String'.	javaString := JavaLangString			fromString: string			jvm: jvm.	self should: [javaString asString = string].</body><body package="JNIPort-Tests-Java-Base">testFromToKeysAndValuesDo	| string javaString indexes stream |	string := 'a test String'.	javaString := JavaLangString fromString: string jvm: jvm.	indexes := OrderedCollection new.	stream := String new writeStream.	javaString		from: 3		to: 6		keysAndValuesDo: 			[:index :value |			indexes add: index.			stream nextPut: value].	self should: [indexes asArray = #(3 4 5 6)].	self should: [stream contents = 'test']</body><body package="JNIPort-Tests-Java-Base">testFromToKeysAndValuesDo16bit	| string javaString indexes codePoints |	string := String withAll: ((256 to: 270) 						collect: [:codePoint | Character value: codePoint]).	javaString := JavaLangString fromString: string jvm: jvm.	indexes := OrderedCollection new.	codePoints := OrderedCollection new.	javaString		from: 3		to: 6		keysAndValuesDo: 			[:index :value |			indexes add: index.			codePoints add: value codePoint].	self should: [indexes asArray = #(3 4 5 6)].	self should: [codePoints asArray = #(258 259 260 261)]</body><body package="JNIPort-Tests-Java-Base">testNilAsString	| javaString |	javaString := nil asJavaString: jvm.	self should: [javaString isNil].</body></methods><methods><class-id>JNIPort.Tests.JNIPortStringTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	classStatic := self javaTestClass.</body><body package="JNIPort-Tests-Java-Base">tearDown	classStatic := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortStringTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'Strings'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortStringTest</class-id> <category>helpers</category><body package="JNIPort-Tests-Java-Base">javaStringFrom: anInteger to: anotherInteger	| sig |	JNIValueArray new: 2		freeAfter: 			[:args |			sig := '(II)Ljava/lang/String;'.			args intAt: 1 put: anInteger.			args intAt: 2 put: anotherInteger + 1.			^classStatic callObjectMethod: 'make' signature: sig withArguments: args]</body></methods><methods><class-id>JNIPort.Tests.StaticJNIPortTestCallbacks</class-id> <category>Java-methods</category><body package="JNIPort-Tests-Java-Callbacks">callback0Tag	"answer the result of calling the receiver's public static callback0Tag() Java method"	^ self callObjectMethod: 'callback0Tag' signature: '()Ljava/lang/Object;'.</body><body package="JNIPort-Tests-Java-Callbacks">callback1Tag	"answer the result of calling the receiver's public static callback1Tag() Java method"	^ self callObjectMethod: 'callback1Tag' signature: '()Ljava/lang/Object;'.</body><body package="JNIPort-Tests-Java-Callbacks">callback2Tag	"answer the result of calling the receiver's public static callback2Tag() Java method"	^ self callObjectMethod: 'callback2Tag' signature: '()Ljava/lang/Object;'.</body><body package="JNIPort-Tests-Java-Callbacks">errorCallbackTag	"answer the result of calling the receiver's public static errorCallbackTag() Java method"	^ self callObjectMethod: 'errorCallbackTag' signature: '()Ljava/lang/Object;'.</body><body package="JNIPort-Tests-Java-Callbacks">failingCallbackTag	"answer the result of calling the receiver's public static failingCallbackTag() Java method"	^ self callObjectMethod: 'failingCallbackTag' signature: '()Ljava/lang/Object;'.</body></methods><methods><class-id>JNIPort.Tests.StaticJNIPortTestCallbacks class</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Callbacks">javaClassName	"answer the Symbol name of the Java class we stand for"	^ #'jniport.test.Callbacks'.</body></methods><methods><class-id>JNIPort.Tests.StaticJNIPortTestCallbacks class</class-id> <category>listing wrapper methods</category><body package="JNIPort-Tests-Java-Callbacks">generatedConstructorSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(		#new	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedGetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedSetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedWrapperSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(		#callback0Tag		#callback1Tag		#callback2Tag		#errorCallbackTag		#failingCallbackTag	).</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfPointsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	| jap |	super setUp.	jap := jvm findClass: #'java.awt.Point'.	elements := #(#(3 4) #(9 -2)) collect: 					[:each |					(jap new)						setIntField: 'x' to: each first;						setIntField: 'y' to: (each at: 2);						yourself]</body><body package="JNIPort-Tests-Java-Base">tearDown	elements := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfPointsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Base">elementClassName	^ #'java.awt.Point'.</body><body package="JNIPort-Tests-Java-Base">elements	^ elements.</body></methods><methods><class-id>JNIPort.Tests.JNIPortArrayOfPointsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testTypeErrors	| array |	array := self elementClass newArray: 1.	self		should: [array at: 1 put: ('just testing' asJavaString: jvm)]		raise: self arrayStoreExceptionClass.	self		should: [array at: 1 put: (jvm findClass: #'java.lang.Object') new]		raise: self arrayStoreExceptionClass.</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestNotifications</class-id> <category>Java-methods</category><body package="JNIPort-Tests-Java-Callbacks">notify0	"invoke the receiver's public notify0() Java method"	self callVoidMethod: 'notify0'.</body><body package="JNIPort-Tests-Java-Callbacks">notify1	"invoke the receiver's public notify1() Java method"	self callVoidMethod: 'notify1'.</body><body package="JNIPort-Tests-Java-Callbacks">notify2	"invoke the receiver's public notify2() Java method"	self callVoidMethod: 'notify2'.</body><body package="JNIPort-Tests-Java-Callbacks">notifyAndThrowNPE	"invoke the receiver's public notifyAndThrowNPE() Java method"	self callVoidMethod: 'notifyAndThrowNPE'.</body><body package="JNIPort-Tests-Java-Callbacks">notifyAndThrowOther	"invoke the receiver's public notifyAndThrowOther() Java method"	self callVoidMethod: 'notifyAndThrowOther'.</body><body package="JNIPort-Tests-Java-Callbacks">notifyInBackground_int: int1 int: int2	"invoke the receiver's public notifyInBackground(int, int) Java method"	JNIValueArray new: 2		freeAfter: 			[:args |			args				intAt: 1 put: int1;				intAt: 2 put: int2.			self				callVoidMethod: 'notifyInBackground'				signature: '(II)V'				withArguments: args]</body><body package="JNIPort-Tests-Java-Callbacks">notifyInLine	"invoke the receiver's public notifyInLine() Java method"	self callVoidMethod: 'notifyInLine'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestNotifications class</class-id> <category>listing wrapper methods</category><body package="JNIPort-Tests-Java-Callbacks">generatedConstructorSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedGetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedSetterSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(	).</body><body package="JNIPort-Tests-Java-Callbacks">generatedWrapperSelectors	"answer an Array of the selectors of automatically generated methods.	Note that this does not include inherited selectors"	^ #(		#notify0		#notify1		#notify2		#notifyAndThrowNPE		#notifyAndThrowOther		#notifyInBackground_int:int:		#notifyInLine	).</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestNotifications class</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Callbacks">hasCanonicalInstancesByDefault	"answer whether we should have canonical instances at startup.	(if not then it can always be turned on later).	Override in subclasses, to force this"	"we'll have canonical instances; it isn't *necessary* in order to use	callbacks, but it's probably the typical case, so we may as do be	typical in this test class"	^ true.</body></methods><methods><class-id>JNIPort.Tests.JNIPortTestNotifications class</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-Callbacks">javaClassName	"answer the Symbol name of the Java class we stand for"	^ #'jniport.test.Notifications'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInterfaceFieldsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-WrapperGeneration">setUp	super setUp.	classStatic := self javaTestClass.</body><body package="JNIPort-Tests-Java-WrapperGeneration">tearDown	classStatic := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInterfaceFieldsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-WrapperGeneration">testReadFields	self should: [classStatic get_publicIntField = 1].	self should: [classStatic get_publicFinalIntField = 2].	self should: [classStatic get_publicStaticIntField = 3].	self should: [classStatic get_publicStaticFinalIntField = 4].	self should: [classStatic get_defaultIntField = 5].	self should: [classStatic get_defaultFinalIntField = 6].	self should: [classStatic get_defaultStaticIntField = 7].	self should: [classStatic get_defaultStaticFinalIntField = 8].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInterfaceFieldsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'InterfaceFields'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedInterfaceFieldsTest</class-id> <category>writing</category><body package="JNIPort-Tests-Java-WrapperGeneration">testNoSettersGenerated	self shouldnt: [classStatic class includesSelector: #set_publicIntField:].	self shouldnt: [classStatic class includesSelector: #set_publicFinalIntField:].	self shouldnt: [classStatic class includesSelector: #set_publicStaticIntField:].	self shouldnt: [classStatic class includesSelector: #set_publicStaticFinalIntField:].	self shouldnt: [classStatic class includesSelector: #set_defaultIntField:].	self shouldnt: [classStatic class includesSelector: #set_defaultFinalIntField:].	self shouldnt: [classStatic class includesSelector: #set_defaultStaticIntField:].	self shouldnt: [classStatic class includesSelector: #set_defaultStaticFinalIntField:].</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedStaticFieldsTest</class-id> <category>accessing</category><body package="JNIPort-Tests-Java-WrapperGeneration">subject	^ self javaTestClass.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedStaticFieldsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'StaticFields'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedStaticFieldsTest</class-id> <category>initialize-release</category><body package="JNIPort-Tests-Java-WrapperGeneration">tearDown	"testOutOfRangeValues may leave modified values in the StaticFields static fields if the out of range values can actually be stored, instead of leading to an Exception. Reset them such that other tests relying on the initial values if the static fields don't fail."	jvm isDead 		ifFalse: 			[subject setByteField: 'byteField' to: 22.			subject setShortField: 'shortField' to: 22.			subject setIntField: 'intField' to: 22.			subject setLongField: 'longField' to: 22.			subject setFloatField: 'floatField' to: 22.0.			subject setDoubleField: 'doubleField' to: 22.0.].	super tearDown</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedAmbiguousSelectorsTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-WrapperGeneration">setUp	super setUp.	classStatic := self javaTestClass.	instance := classStatic new.</body><body package="JNIPort-Tests-Java-WrapperGeneration">tearDown	classStatic := instance := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedAmbiguousSelectorsTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-WrapperGeneration">testFallbackToLongForm	self should: [instance longForm_Array: nil] raise: AmbiguousJavaMethodError.	self should: [(instance longForm_javalangreflectArray: nil) asString = 'java.lang.reflect.Array'].	self should: [(instance longForm_javasqlArray: nil) asString = 'java.sql.Array'].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testFallbackToLongFormAndReturnType	self should: [instance returnType_TestArray: nil] raise: AmbiguousJavaMethodError.	self should: [(instance returnType_int_jniporttestTestArray: nil)  = 2].	self should: [(instance returnType_double_jniporttestTestArray: nil)  = (Number readFromString: '3.14159d')].</body><body package="JNIPort-Tests-Java-WrapperGeneration">testIncurableAmbiguity	self should: [instance incurable_TestArray: nil] raise: AmbiguousJavaMethodError.	"we have no idea which of the two methods is called here"	#CUtodo.  "this should probably throw a MNU exception"	instance incurable_void_jniporttestTestArray: nil.</body></methods><methods><class-id>JNIPort.Tests.JNIPortGeneratedAmbiguousSelectorsTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-WrapperGeneration">javaTestClassName	^ 'AmbiguousSelectors'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortExceptionTest</class-id> <category>Running</category><body package="JNIPort-Tests-Java-Base">setUp	super setUp.	classStatic := self javaTestClass.</body><body package="JNIPort-Tests-Java-Base">tearDown	classStatic := nil.	super tearDown.</body></methods><methods><class-id>JNIPort.Tests.JNIPortExceptionTest</class-id> <category>unit tests</category><body package="JNIPort-Tests-Java-Base">testCatchExceptionByClassStatic	| caught |	[classStatic callVoidMethod: 'thrower']		on: self nullPointerExceptionClass		do: [:ex | caught := ex].	self should: [caught isKindOf: JavaException].	self should: [caught tag isInstanceOf: self nullPointerExceptionClass].</body><body package="JNIPort-Tests-Java-Base">testCatchExceptionBySmalltalkClass	| caught |	[classStatic callVoidMethod: 'thrower']		on: JavaException		do: [:ex | caught := ex].	self should: [caught isKindOf: JavaException].	self should: [caught tag isInstanceOf: self nullPointerExceptionClass].</body><body package="JNIPort-Tests-Java-Base">testCatchExceptionByWrapperClass	| caught |	[classStatic callVoidMethod: 'thrower']		on: JavaLangException		do: [:ex | caught := ex].	self should: [caught isKindOf: JavaException].	self should: [caught tag isInstanceOf: self nullPointerExceptionClass].</body></methods><methods><class-id>JNIPort.Tests.JNIPortExceptionTest</class-id> <category>constants</category><body package="JNIPort-Tests-Java-Base">javaTestClassName	^ 'Exceptions'.</body></methods><methods><class-id>JNIPort.Tests.JNIPortStandardLibInterfaceTest</class-id> <category>testing</category><body package="JNIPort-Tests-Prerequisites">testStrcmp	self assert: ('a' strcmp: 'a') = 0.	self assert: ('b' strcmp: 'a') &gt; 0.	self assert: ('a' strcmp: 'b') &lt; 0.	self assert: ('' strcmp: '') = 0.	self assert: ('a' strcmp: '') &gt; 0.	self assert: ('' strcmp: 'a') &lt; 0.</body><body package="JNIPort-Tests-Prerequisites">testVsnprintfExamples	"This test method checks the examples given in String&gt;&gt;vsnprintfWithArguments:"	"Calling C functions which have a VaList argument is not yet supported on 64 bit systems."	StandardLibInterface is64Bit ifTrue: [^self].		"format two Floats right-justfied in a field of width 12, with 2 places of precision, and		forcing the use/non-use of scientific notation. The result is locale dependent, because		snprintf will use the operating system's decimal character. Also, the number of characters		for the exponent is implementation dependent. We have to test using pattern		matching instead of using a simple equality check."		self assert: ('[        3#14][*   3#14e+00*]' match: ('[%*.*f][%*.*e]' vsnprintfWithArguments: #(12 2 3.141592653 12 2 3.141592653))).		"format an integer right-justfied in a field of width 12, 0-padded to 5 digits."		self assert: ('[%*.*d]' vsnprintfWithArguments: #(12 5 33)) = '[       00033]'.		"format a string left-justfied in a field of width 30."		self assert: ('[%*s]' vsnprintfWithArguments: #(-30 'Hi there')) = '[Hi there                      ]'.		"format a string left-justfied in a field of width 10 and truncated to 3 letters."		self assert: ('[%-*.*s]' vsnprintfWithArguments: #(10 3 'Hi there')) = '[Hi        ]'.		"format 3 characters in fields of width 5."		self assert: ('[%5c][%5c][%5c]' vsnprintfWithArguments: #($A $B $C)) = '[    A][    B][    C]'.		"format an integer as hex, 0-padded to 8 digits."		self assert: ('0x%.*X' vsnprintfWithArguments: #(8 47789)) = '0x0000BAAD'.</body><body package="JNIPort-Tests-Prerequisites">testVsnprintfExamplesWithVaLists	"This test method checks the examples given in String&gt;&gt;vsnprintfWithArguments:"	"Calling C functions which have a VaList argument is not yet supported on 64 bit systems."	StandardLibInterface is64Bit ifTrue: [^self].		"format two Floats right-justfied in a field of width 12, with 2 places of precision, and		forcing the use/non-use of scientific notation. The result is locale dependent, because		snprintf will use the operating system's decimal character. Also, the number of characters		for the exponent is implementation dependent. We have to test using pattern		matching instead of using a simple equality check."		self assert: ('[        3#14][*   3#14e+00*]' match: ('[%*.*f][%*.*e]' vsnprintfWithArguments: #(12 2 3.141592653 12 2 3.141592653) asVaList)).		"format an integer right-justfied in a field of width 12, 0-padded to 5 digits."		self assert: ('[%*.*d]' vsnprintfWithArguments: #(12 5 33) asVaList) = '[       00033]'.		"format a string left-justfied in a field of width 30."		self assert: ('[%*s]' vsnprintfWithArguments: #(-30 'Hi there') asVaList) = '[Hi there                      ]'.		"format a string left-justfied in a field of width 10 and truncated to 3 letters."		self assert: ('[%-*.*s]' vsnprintfWithArguments: #(10 3 'Hi there') asVaList) = '[Hi        ]'.		"format 3 characters in fields of width 5."		self assert: ('[%5c][%5c][%5c]' vsnprintfWithArguments: #($A $B $C) asVaList) = '[    A][    B][    C]'.		"format an integer as hex, 0-padded to 8 digits."		self assert: ('0x%.*X' vsnprintfWithArguments: #(8 47789) asVaList) = '0x0000BAAD'.</body><body package="JNIPort-Tests-Prerequisites">testVsnprintfWithVaListPointer	"This test method checks the examples given in String&gt;&gt;vsnprintfWithArguments:"	| length string arguments vaListPointer |	"Calling C functions which have a VaList argument is not yet supported on 64 bit systems."	StandardLibInterface is64Bit ifTrue: [^self].	length := -30.	string := 'Hi there'.	arguments := Array with: length with: string.	vaListPointer := arguments asVaList asPointer gcCopyToHeap.	"format a string left-justfied in a field of width 30."	self assert: ('[%*s]' vsnprintfWithArguments: vaListPointer) 				= '[Hi there                      ]'</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>StaticJavaLangObject</name><environment>JNIPort</environment><super>JNIPort.JavaClassStatic</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Java-Base</category><attributes><package>JNIPort-Java-Base</package></attributes></class><class><name>JavaLangObject</name><environment>JNIPort</environment><super>JNIPort.JavaClassInstance</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-Java-Base</category><attributes><package>JNIPort-Java-Base</package></attributes></class><class><name>JNIPortExternalStructure</name><environment>JNIPort</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>externalData </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>JNIPort-External</category><attributes><package>JNIPort-External</package></attributes></class></st-source>