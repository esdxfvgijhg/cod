<?xml version="1.0"?><st-source><!-- Name: JNIPort VW75 ExtensionsComment: This package contains additions to the VisualWorks base which are necessary to make JNIPort work in VisualWorks 7.5 or earlier, but not in 7.6 or later.DbIdentifier: JGStoreDbTrace: 6439PackageName: JNIPort VW75 ExtensionsParcel: #('JNIPort VW75 Extensions')PrintStringCache: (2.0,JoachimGeidel)Version: 2.0Date: 9:11:35 pm March 3, 2011 --><time-stamp>From VisualWorksÂ® NonCommercial, 7.5 of April 16, 2007 on March 3, 2011 at 9:11:35 pm</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Core.Dictionary</class-id> <category>accessing</category><body package="JNIPort VW75 Extensions" selector="findElementLike:ifAbsent:">findElementLike: anObject ifAbsent: aBlock	"Answer the object found in the receiver which is equivalent to anObject, according to the receiver's notion of equivalence. This is primarily intended for use in symbol internment. Note that for dictionaries, it expects a key as input, and the result will be an association. If the element is not found, return the result of evaluating aBlock.	Examples: 		((Set with: 0.5) findElementLike: 1/2) 		((IdentitySet with: 4) findElementLike: 4)		((Dictionary new at: 0.5 put: 42; yourself) findElementLike: (1/2)) 		((IdentityDictionary new at: 7 put: 42; yourself) findElementLike: 7)		((Set with: 0.5) findElementLike: 1/2 ifAbsent: [42])  "	| index element |	index := self findKeyOrNil: anObject.	element := self basicAt: index.	^element isNil ifTrue: [aBlock value] ifFalse: [element].</body></methods><methods><class-id>Core.SequenceableCollection</class-id> <category>testing</category><body package="JNIPort VW75 Extensions" selector="beginsWith:">beginsWith: aPrefix	"Answer whether the receiver is prefixed by the given sequenceable prefix"	self size &lt; aPrefix size ifTrue: [^false].	1 to: aPrefix size do:		[:eachIndex |			(self at: eachIndex) = (aPrefix at: eachIndex)				ifFalse: [^false]		].	^true</body><body package="JNIPort VW75 Extensions" selector="endsWith:">endsWith: aSuffix	"Answer whether the receiver is suffixed by the given sequenceable suffix"	| indexOffset |	self size &lt; aSuffix size ifTrue: [^false].	indexOffset := self size - aSuffix size.	1 to: aSuffix size do:		[:eachIndex |			(self at: indexOffset + eachIndex) = (aSuffix at: eachIndex)				ifFalse: [^false]		].	^true</body></methods><methods><class-id>External.ExternalInterface class</class-id> <category>public runtime</category><body package="JNIPort VW75 Extensions" selector="currentPlatformID">currentPlatformID	"Return a symbol that might be used to tune/filter/select specific library specifications. This is simplification of the possible platform Monikers found in platform.h."	(OSHandle platformMoniker beginsWith: #win) ifTrue: [^#win].	(OSHandle platformMoniker beginsWith: #macx) ifTrue: [^#osx].	(OSHandle platformMoniker beginsWith: #linux) ifTrue: [^#linux].	(OSHandle platformMoniker beginsWith: #solaris) ifTrue: [^#solaris].	(OSHandle platformMoniker beginsWith: #aix) ifTrue: [^#aix].	(OSHandle platformMoniker beginsWith: #hpux) ifTrue: [^#hpux].	(OSHandle platformMoniker beginsWith: #ce) ifTrue: [^#ce].	^self error: 'No known mapping for this platform moniker'</body></methods><methods><class-id>Core.IdentityDictionary</class-id> <category>accessing</category><body package="JNIPort VW75 Extensions" selector="findElementLike:ifAbsent:">findElementLike: anObject ifAbsent: aBlock	"Answer the object found in the receiver which is equivalent to anObject, according to the receiver's notion of equivalence. This is primarily intended for use in symbol internment. Note that for dictionaries, it expects a key as input, and the result will be an association. If the element is not found, return the result of evaluating aBlock.	Examples: 		((Set with: 0.5) findElementLike: 1/2) 		((IdentitySet with: 4) findElementLike: 4)		((Dictionary new at: 0.5 put: 42; yourself) findElementLike: (1/2)) 		((IdentityDictionary new at: 7 put: 42; yourself) findElementLike: 7)		((Set with: 0.5) findElementLike: 1/2 ifAbsent: [42])  "	| index element |	index := self findKeyOrNil: anObject.	element := self basicAt: index.	^element isNil		ifTrue: [aBlock value]		ifFalse: [Association key: element value: (valueArray basicAt: index)].</body></methods><methods><class-id>Kernel.ObjectMemory class</class-id> <category>testing</category><body package="JNIPort VW75 Extensions" selector="is64Bit">is64Bit	^SmallInteger maxVal ~= 536870911</body></methods><methods><class-id>Core.Character class</class-id> <category>instance creation</category><body package="JNIPort VW75 Extensions" selector="codePoint:">codePoint: anInteger	"Dolphin Smalltalk compatibility"	^self value: anInteger</body></methods><methods><class-id>Core.Character</class-id> <category>accessing</category><body package="JNIPort VW75 Extensions" selector="codePoint">codePoint	"Dolphin Smalltalk compatibility - VisualWorks uses Unicode characters already (at least up to 16rFFFF = 65535), so asInteger is the Unicode code point."	^self asInteger</body></methods><methods><class-id>Core.Set</class-id> <category>accessing</category><body package="JNIPort VW75 Extensions" selector="findElementLike:ifAbsent:">findElementLike: anObject ifAbsent: aBlock	"Answer the object found in the receiver which is equivalent to anObject, according to the receiver's notion of equivalence. This is primarily intended for use in symbol internment. Note that for dictionaries, it expects a key as input, and the result will be an association. If the element is not found, return the result of evaluating aBlock.	Examples: 		((Set with: 0.5) findElementLike: 1/2) 		((IdentitySet with: 4) findElementLike: 4)		((Dictionary new at: 0.5 put: 42; yourself) findElementLike: (1/2)) 		((IdentityDictionary new at: 7 put: 42; yourself) findElementLike: 7)		((Set with: 0.5) findElementLike: 1/2 ifAbsent: [42])  "	| index element |	index := self findElementOrNil: anObject.	element := self basicAt: index.	^element isNil ifTrue: [aBlock value] ifFalse: [element].</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Set</name><environment>Core</environment><super>Core.Collection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>tally </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>Dictionary</name><environment>Core</environment><super>Core.Set</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>IdentityDictionary</name><environment>Core</environment><super>Core.Dictionary</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>valueArray </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>Character</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>immediate</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>SequenceableCollection</name><environment>Core</environment><super>Core.Collection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class></st-source>