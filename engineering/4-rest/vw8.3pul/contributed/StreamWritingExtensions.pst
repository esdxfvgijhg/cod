<?xml version="1.0"?><st-source><!-- Name: StreamWritingExtensionsComment: A few convenience methods on Stream used by the installer that are used in several packages.DbIdentifier: bear73DbTrace: 54832PackageName: StreamWritingExtensionsParcel: #('StreamWritingExtensions')ParcelName: StreamWritingExtensionsPrintStringCache: (7.4.0.1,daves)Version: 7.4.0.1Date: 7:51:25 AM August 5, 2009 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.7 (aug09.0) of August 5, 2009 on August 5, 2009 at 7:51:25 AM </time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Core.Stream</class-id> <category>accessing</category><body package="StreamWritingExtensions" selector="writeAllOn:using:">writeAllOn: writeStream using: buffer 	"Write my contents to writeStream, starting from my current position.  Do not notify dependents of progress increments."	self 		writeAllOn: writeStream		using: buffer		notificationIncrement: 0</body><body package="StreamWritingExtensions" selector="writeAllOn:using:notificationIncrement:">writeAllOn: writeStream using: buffer notificationIncrement: anInteger 	"Write my contents to writeStream, starting from my current position.  Notify dependents each time at least anInteger elements are read.  If anInteger is zero, do not notify dependents."	| bufferSize numReadSinceLastIncrement numElements |	bufferSize := buffer size.	numReadSinceLastIncrement := 0.		[[self atEnd] whileFalse: 			[numElements := self 						nextAvailable: bufferSize						into: buffer						startingAt: 1.			writeStream 				next: numElements				putAll: buffer				startingAt: 1.			anInteger isZero 				ifFalse: 					[numReadSinceLastIncrement := numReadSinceLastIncrement + numElements.					numReadSinceLastIncrement &lt; anInteger 						ifFalse: 							[self changed: #increment with: numReadSinceLastIncrement.							numReadSinceLastIncrement := 0]]]] 			ensure: 				[(anInteger isZero not and: [0 &lt; numReadSinceLastIncrement]) 					ifTrue: [self changed: #increment with: numReadSinceLastIncrement]]</body><body package="StreamWritingExtensions" selector="writeNext:on:using:">writeNext: numberOfElements on: writeStream using: buffer 	"Write my next numberOfElements elements to writeStream.  Do not notify dependents of progress increments."	self 		writeNext: numberOfElements		on: writeStream		using: buffer		notificationIncrement: 0</body><body package="StreamWritingExtensions" selector="writeNext:on:using:notificationIncrement:">writeNext: numberOfElements on: writeStream using: buffer notificationIncrement: anInteger 	"Write my next numberOfElements elements to writeStream.  Notify dependents each time at least anInteger elements are read.  If anInteger is zero, do not notify dependents."	| bufferSize numElementsToWrite numElementsToRead numReadSinceLastIncrement |	bufferSize := buffer size.	numElementsToWrite := numberOfElements.	numReadSinceLastIncrement := 0.		[[0 &lt; numElementsToWrite] whileTrue: 			[numElementsToRead := bufferSize min: numElementsToWrite.			self 				next: numElementsToRead				into: buffer				startingAt: 1.			writeStream 				next: numElementsToRead				putAll: buffer				startingAt: 1.			numElementsToWrite := numElementsToWrite - numElementsToRead.			anInteger isZero 				ifFalse: 					[numReadSinceLastIncrement := numReadSinceLastIncrement + numElementsToRead.					numReadSinceLastIncrement &lt; anInteger 						ifFalse: 							[self changed: #increment with: numReadSinceLastIncrement.							numReadSinceLastIncrement := 0]]]] 			ensure: 				[(anInteger isZero not and: [0 &lt; numReadSinceLastIncrement]) 					ifTrue: [self changed: #increment with: numReadSinceLastIncrement]]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Stream</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private IOConstants.*			</imports><category>Collections-Streams</category><attributes><package>Collections-Streams</package></attributes></class></st-source>