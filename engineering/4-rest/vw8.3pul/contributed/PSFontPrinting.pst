<?xml version="1.0"?><st-source><!-- Name: PSFontPrintingComment: Select and test installation of additional PostScript fonts for use with a PostScript printer.DbIdentifier: bear73DbTrace: 476492DbUsername: kgreekDbVersion: 8.2 - 1HideSource: falsePackageName: PSFontPrintingParcel: #('PSFontPrinting')ParcelName: PSFontPrintingPrerequisiteParcels: #(#('PSFontDeply' ''))PrintStringCache: (8.2 - 1,kgreek)SaveSource: trueVersion: 8.2 - 1Post-Load Block: 	[ :pkg | UISettings.UserPreferences at: #fontListModel ifAbsentPut: [(List with: PostScriptFontBody findFontDirectory) asValue] ]Pre-Unload Block: 	[ :pkg |  	UISettings.UserPreferences removeKey: #fontListModel ]Date: 1:09:13 PM November 6, 2015 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (nov15.1) of November 6, 2015 on November 6, 2015 at 1:09:13 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>PostScriptFontPrintingPage</name><environment>Tools</environment><super>Tools.SettingsManagerPage</super><private>false</private><indexed-type>none</indexed-type><inst-vars>availableFonts installedFonts fontBackupDictionary fontPathList fontBackupPathList disturbed fontBackupWithheld </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-VW</category><attributes><package>PSFontPrinting</package></attributes></class><comment><class-id>Tools.PostScriptFontPrintingPage</class-id><body>Settings page to install, remove, and print a sample page of PostScript printer fonts in VW. To install a font its Adobe AFM file is required. To print as a PostScript soft font a matching PFA font file is needs to be read.  My list of fontsAvailable shows the fonts available by file for installation from the directories specified in fontPathList for the AFM or PFA files.  Fonts that have been installed in VW appear in my fontsInstalled list.Instance Variables:	availableFonts	&lt;MultiSelectionInList&gt;	List of font names available for installation to PostScriptFontBody.  This list is parsed from AFM files located in the fontPathList or fonts that have been removed from the install list.	disturbed	&lt;Boolean&gt;	True if lists are altered and not applied.	fontBackupDictionary	&lt;Dictionary&gt;	Copy of PostScriptFontBody installed fonts dictionary to restore on reset.	fontBackupPathList	&lt;List&gt;	Paths for AFM/PFA file locations removed and available to restore.	fontBodiesRemoved	&lt;Set&gt;	Set of PostScriptFontBodies removed and available to restore.	fontPathList	&lt;SettingModel on:List&gt;	Paths for AFM/PFA file location for fontPathModel.	installedFonts	&lt;MultiSelectionInList&gt;	List of font names installed</body></comment><class><name>FontInstaller</name><environment>Smalltalk</environment><super>UI.UISettings</super><private>false</private><indexed-type>none</indexed-type><inst-vars>availableFonts installedFonts fontBackupDictionary fontBodiesRemoved fontPathList fontBackupPathList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Font installation</category><attributes><package>PSFontPrinting</package></attributes></class><comment><class-id>FontInstaller</class-id><body>FontInstaller offers a way to install, remove, and print a sample page of PostScript printer fonts in VW. To install a font its Adobe AFM file is required. To print as a PostScript soft font a matching PFA font file is needed to be read.  My list of fontsAvailable shows the fonts availableby file for installation from the directories specified in fontPathList for the AFM or PFA files.  Fonts that have been installed in VW appear in my fontsInstalled list.Instance Variables:	availableFonts	&lt;SelectionInList&gt;	 List of font names available for installation to PostScriptFontBody.  This list is parsed from AFM fileslocated in the fontPathList or fonts that have been removed from the install list.	fontBackupDictionary	 &lt;Dictionary&gt; Copy of PostScriptFontBody installed fonts dictionary to restore on reset.	fontBackupPathList	&lt;List&gt;	Copy of fontPathList to restore on reset.	fontBodiesRemoved	&lt;Set&gt;	Set of PostScriptFontBodies removed and available to restore.	fontPathList		&lt;ValueHolder on:List&gt;  Paths for AFM/PFA file location for fontPathModel.	installedFonts	&lt;SelectionInList&gt;  List of font names installed in PostScriptFontBody class variable PostScriptFonts. </body></comment><class><name>PostScriptFontSource</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>familyName body pfaFile afmFile </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Font installation</category><attributes><package>PSFontPrinting</package></attributes></class><comment><class-id>PostScriptFontSource</class-id><body>I hold a PostScript font definition and location of its AFM or PFA files.  I display my font family name according to the following attributes:	Black	--	My pfaFile has not been specified so my font cannot be printed as a soft font.  I do however include the required AFM specification either as a afmFile or body so VW can specify this PostScript font to a PostScript printer that has it already loaded.	Green --	My pfaFile has been specified.  VW can install this soft font to a PostScript printer.	Red  --	My pfaFile has been specified but cannot currently be found on the platform.	Instance Variables:familyName	&lt;String&gt;	Font family name.body	&lt;PostScriptFontBody | nil&gt;	PostScriptFontBody of the font if previously installed.pfaFile	&lt;Filename | nil&gt;		Filename for font PFA file if present.afmFile	&lt;Filename | nil&gt;		Filename for font AFM file if present.</body></comment><shared-variable><name>FontsWithheld</name><environment>Graphics.PostScriptFontBody</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><initializer>Set new</initializer><attributes><package>PSFontPrinting</package></attributes></shared-variable><methods><class-id>Tools.PostScriptFontPrintingPage</class-id> <category>actions</category><body package="PSFontPrinting">accept	"Keep the changes to the font path and dictionary"	fontBackupDictionary := PostScriptFontBody fontDictionary copy.	fontBackupPathList := self fontPathList value copy.	fontBackupWithheld := PostScriptFontBody fontsWithheld copy.	disturbed := false.	self tickle.</body><body package="PSFontPrinting">importSnapshots: aCollection 	aCollection do: 			[:each | 			fontPathList id = each id 				ifTrue: 					[(self fontPathList)						restoreFrom: each;						changed: #value.					self updateAvailableList.					self updateInstalledList]]</body><body package="PSFontPrinting">installFont	"Install the selected font descriptions in the availableFonts list to the PostScriptFontBody"	self fontsAvailable 		selectionDo: [:selection | self installSource: selection].	PostScriptPrinter initialize.	self fontsAvailable listHolder changed: #value.	self fontsInstalled listHolder changed: #value.	self updateInstallButton.	disturbed := true.	self tickle</body><body package="PSFontPrinting">printSamplePage	"Print a sample page of all postscript fonts available"	| ps newStyle title document fontsAvailable |	ps := Printer startPrintJobNamed: 'PrintJob'.	title := ('VisualWorks ' , ps graphicsDevice class printString , ' Fonts') 				asText.	fontsAvailable := ps graphicsDevice defaultFontPolicy availableFonts 				asSortedCollection: [:a :b | a name &lt; b name].	ps close.	Cursor wait showWhile: 			[document := Document new.			document				doFooter: true					footerString: title					doPageNumbers: true;				startParagraph;				setTopMargin: 1.5;				addText: (title emphasizeAllWith: #large);				startParagraph;				setTopMargin: 1.			fontsAvailable do: 					[:font | 					font pixelSize: 12.					newStyle := TextAttributes 								characterAttributes: (CharacterAttributes defaultQuery: font).					document						addText: font name under: newStyle;						startParagraph].			document toPrinter]</body><body package="PSFontPrinting">removeFont	"Remove the selected fonts from PostScriptFontBody"	self fontsInstalled selectionDo: 			[:selection | 			self fontsInstalled list remove: selection.			self fontsAvailable list add: selection.			selection body firstFamilyWithheld ifNotNil: 					[:body | 					self fontsInstalled list add: (PostScriptFontSource body: body								installationPaths: self fontPathList value)].			selection remove].	PostScriptPrinter initialize.	self fontsInstalled listHolder changed: #value.	self fontsAvailable listHolder changed: #value.	self updateRemoveButton.	disturbed := true.	self tickle</body><body package="PSFontPrinting">reset	"Reset font dictionary and restore lists"	self resetFonts.	self updateInstalledList.	self updateAvailableList.	disturbed := false.	self tickle</body></methods><methods><class-id>Tools.PostScriptFontPrintingPage</class-id> <category>updating</category><body package="PSFontPrinting">applyCancel	disturbed ifTrue:[self reset].</body><body package="PSFontPrinting">triggered	manager triggerChannel value		ifTrue: [self accept]		ifFalse: [self reset]</body><body package="PSFontPrinting">updateAvailableList	self fontsAvailable list: self availableFontsList</body><body package="PSFontPrinting">updateInstallButton	(self builder componentAt: #installButton) isEnabled: self fontsAvailable selectionIndexes notEmpty</body><body package="PSFontPrinting">updateInstalledList	self fontsInstalled list: self installedFontsList</body><body package="PSFontPrinting">updateRemoveButton	(self builder componentAt: #removeButton) isEnabled: self fontsInstalled selectionIndexes notEmpty</body></methods><methods><class-id>Tools.PostScriptFontPrintingPage</class-id> <category>accessing</category><body package="PSFontPrinting">availableFontsList	"Answer the collection of fonts available from searching the fontPathList to install to PostScriptFontBody"	| availableFontsList |	availableFontsList := SortedCollection 				sortBlock: [:a :b | a familyName &lt;= b familyName].	PostScriptFontBody fontsWithheld do: 			[:body | 			availableFontsList add: (PostScriptFontSource body: body						installationPaths: self fontPathList value)].	Cursor wait showWhile: 			[ | existingSources |			existingSources := self fontsInstalled list , availableFontsList.			(PostScriptFontSource allAvailableInPaths: self fontPathList value) do: 					[:fontFileSource | 					(existingSources						contains: [:each | each equalBySource: fontFileSource]) 							ifFalse: [availableFontsList add: fontFileSource]]].	^availableFontsList</body><body package="PSFontPrinting">helpText	^'PostScript Printer Font InstallInstall, remove, and print a sample page of PostScript printer fonts in VW.   To install a new font the Adobe AFM file is required and a matching PFA font file is needed to load it as a soft font to a PostScript printer.Available font list 	The fonts available by file in the font directory path list specified above.  The list popup menu includes options to update the list or install a selection.  Fonts may appear in the list that have been withdrawn from the installed list.  Installed font list	Fonts that have been installed in VW.  The list popup menu includes options to print a sample page of installed fonts or withdraw a selection.Font colors indicate the availability of the font and files:	Black	--	No PFA file has been specified for the font.  It cannot be printed as a soft font. 	Green 	--	A PFA file has been specified.  VW can load this soft font to a PostScript printer.	Red 	--	A PFA file has been specified but cannot currently be found on the platform.'</body><body package="PSFontPrinting">installedFontsList	"Answer the collection of fonts installed to the PostScriptFontBody as PostScriptFontSource instances"	| fonts |	fonts := SortedCollection new 				sortBlock: [:a :b | a familyName &lt;= b familyName].	PostScriptFontBody fontDictionary do: 			[:font | 			fonts add: (PostScriptFontSource body: font						installationPaths: self fontPathList value)].	^fonts</body><body package="PSFontPrinting">settings	^Array with: fontPathList</body></methods><methods><class-id>Tools.PostScriptFontPrintingPage</class-id> <category>aspects</category><body package="PSFontPrinting">fontPathList	^fontPathList isNil 		ifTrue: 			[fontBackupPathList := List with: PostScriptFontBody findFontDirectory. 			 fontPathList := fontBackupPathList copy asValue]		ifFalse: [fontPathList]</body><body package="PSFontPrinting">fontPathList: aSettingModel	fontPathList := aSettingModel copy.    "Use a copy to avoid adding dependents to aSettingModel" 	fontBackupPathList := aSettingModel value copy.</body><body package="PSFontPrinting">fontPathModel	^(SimpleListEditor new)		listHolder: self fontPathList;		validationBlock: 				[:str | 				Object errorSignal handle: [:ex | ex returnWith: false]					do: 						[| fn |						fn := SystemUtils makeFilenamePortable: str.						fn asFilename isDirectory]];		changedBlock: 				[self updateAvailableList tickle.				self fontPathList changed: #value]</body><body package="PSFontPrinting">fontsAvailable	^availableFonts ifNil:[availableFonts := MultiSelectionInList with: self availableFontsList].</body><body package="PSFontPrinting">fontsInstalled	^installedFonts</body></methods><methods><class-id>Tools.PostScriptFontPrintingPage</class-id> <category>initialize-release</category><body package="PSFontPrinting">initialize	super initialize.	fontBackupDictionary := PostScriptFontBody fontDictionary copy.	fontBackupWithheld := PostScriptFontBody fontsWithheld copy.	installedFonts := MultiSelectionInList with: self installedFontsList.	disturbed := false.</body><body package="PSFontPrinting">manager: aSettingsManager	super manager: aSettingsManager.	manager triggerChannel		onChangeSend: #triggered		to: self.</body></methods><methods><class-id>Tools.PostScriptFontPrintingPage</class-id> <category>private-font installation</category><body package="PSFontPrinting">installSource: aPostScriptFontSource 	(PostScriptFontBody fontNames includes: aPostScriptFontSource familyName)		ifTrue: 			[(Dialog 				confirm: (#replaceExistingFont &lt;&lt; #dialogs &gt;&gt; 'Replace existing font &lt;1s&gt;?' 						expandMacrosWith: aPostScriptFontSource familyName)) 					ifTrue: 						[self fontsInstalled list 							removeAllSuchThat: [:source | source familyName = aPostScriptFontSource familyName]]					ifFalse: [^self]].	aPostScriptFontSource installBody.	self fontsAvailable list remove: aPostScriptFontSource.	self fontsInstalled list add: aPostScriptFontSource</body></methods><methods><class-id>Tools.PostScriptFontPrintingPage</class-id> <category>interface opening</category><body package="PSFontPrinting">postBuildWith: aBuilder	(aBuilder window) 		removeActionsWithReceiver: self forEvent: #closing;		when:#closing send:#applyCancel to: self.</body></methods><methods><class-id>Tools.PostScriptFontPrintingPage</class-id> <category>private</category><body package="PSFontPrinting">resetFonts	"Restore the font dictionary from backup"	PostScriptFontBody fontDictionary: fontBackupDictionary copy.  	PostScriptFontBody fontsWithheld: fontBackupWithheld copy.	self fontPathList value: fontBackupPathList.	PostScriptPrinter initialize.</body></methods><methods><class-id>FontInstaller</class-id> <category>actions</category><body package="PSFontPrinting">acceptAction	"Keep the changes to the font path and dictionary"	fontBackupDictionary := PostScriptFontBody fontDictionary copy.	fontBackupPathList := self fontPathList value copy.	fontBodiesRemoved := Set new.	self undisturb.</body><body package="PSFontPrinting">installFont	"Install the selected font description in the availableFonts list to the 	PostScriptFontBody"	| selection |	selection := self fontsAvailable selection.	selection isNil ifTrue: [^self].	selection body isNil		ifTrue: 			["Install selection to PostScriptFontBody"			[PostScriptFontBody processAdobeFiles: (Array with: selection afmFile asString)]				on: OSErrorHolder nonexistentSignal				do:[:ex | 					| newPath |					(newPath := Dialog requestFileName: selection familyName , ' font file not found. Please revise file path' default: selection afmFile asString) isEmpty						ifFalse: 							[selection afmFile: newPath asFilename.							ex restart].					^self].			selection 				body: ((PostScriptFontBody named: selection familyName) fontSource: selection pfaFile)				installationPaths: self fontPathList value]		ifFalse: 			[self restoreFont: selection body.			fontBodiesRemoved remove: selection body ifAbsent: []].	PostScriptPrinter initialize.	self fontsAvailable list remove: selection.	self fontsAvailable listHolder changed: #value.	self fontsInstalled list add: selection.	self fontsInstalled listHolder changed: #value.	self updateInstallButton.	self disturb</body><body package="PSFontPrinting">printSamplePage	"Print a sample page of all postscript fonts available"	| ps newStyle title document |	ps := Printer startPrintJobNamed: 'temp'.	title := ('VisualWorks ' , ps graphicsDevice class printString , ' Fonts') 				asText.	Cursor wait showWhile: 			[document := Document new.			document				doFooter: true					footerString: title					doPageNumbers: true;				startParagraph;				setTopMargin: 1.5;				addText: (title emphasizeAllWith: #large);				startParagraph;				setTopMargin: 1.			ps graphicsDevice defaultFontPolicy availableFonts do: 					[:font | 					font pixelSize: 12.					newStyle := TextAttributes defaultFontQuery: font.					document						addText: font name under: newStyle;						startParagraph].			document toPrinter].	ps close</body><body package="PSFontPrinting">removeFont	"Remove the selected font from PostScriptFontBody"	| selection |	selection := self fontsInstalled selection.  	selection isNil ifTrue: [^self].	self withholdFont: selection body.	self fontsInstalled list remove: selection.	self fontsInstalled listHolder changed: #value.	self fontsAvailable list add: selection.	self fontsAvailable listHolder changed: #value.	self updateRemoveButton.	self disturb</body><body package="PSFontPrinting">resetAction	"Reset font dictionary and restore lists"	self reset.	self updateInstalledList.	self updateAvailableList.	self undisturb</body></methods><methods><class-id>FontInstaller</class-id> <category>accessing</category><body package="PSFontPrinting">availableFontsList	"Answer the collection of fonts available from searching the fontPathList to install to PostScriptFontBody"	| availableFontsList afmFileStrings fontPath |	availableFontsList := SortedCollection new sortBlock: [:a :b | a familyName &lt;= b familyName].	PostScriptFontBody fontsWithheld 		do: [:body | availableFontsList add: (PostScriptFontSource body: body installationPaths: self fontPathList value)].	Cursor wait showWhile: [self fontPathList value			do: 				[:pathString | 				fontPath := pathString asLogicalFileSpecification.	 				afmFileStrings := fontPath filesMatching: '*.afm'.				afmFileStrings					do: 						[:afmFileString | 						| fontFileSource |						fontFileSource := PostScriptFontSource afmFile: afmFileString asFilename installationPaths: self fontPathList value.   						((self fontsInstalled list includes: fontFileSource)							or: [availableFontsList includes: fontFileSource])							ifFalse: [availableFontsList add: fontFileSource]]]].	^availableFontsList</body><body package="PSFontPrinting">installedFontsList	"Answer the collection of fonts installed to the PostScriptFontBody as PostScriptFontSource instances"	| fonts |	fonts := SortedCollection new 				sortBlock: [:a :b | a familyName &lt;= b familyName].	PostScriptFontBody fontDictionary do: 			[:font | 			fonts add: (PostScriptFontSource body: font						installationPaths: self fontPathList value)].	^fonts</body></methods><methods><class-id>FontInstaller</class-id> <category>private</category><body package="PSFontPrinting">disturbed: aValueHolder	disturbed := aValueHolder.</body><body package="PSFontPrinting">reset	"Restore the font dictionary from backup"	PostScriptFontBody fontDictionary: fontBackupDictionary copy.  	self fontPathList value removeAllSuchThat:[:i|true].	self fontPathList value addAll: fontBackupPathList.	fontBodiesRemoved		do: 			[:body | 			PostScriptFontBody fontsWithheld remove: body ifAbsent: []].	fontBodiesRemoved := Set new.   	PostScriptPrinter initialize.</body></methods><methods><class-id>FontInstaller</class-id> <category>aspects</category><body package="PSFontPrinting">fontPathList	^fontPathList isNil 		ifTrue: 			[fontBackupPathList := List with: PostScriptFontBody findFontDirectory. 			 fontPathList := fontBackupPathList copy asValue]		ifFalse: [fontPathList]</body><body package="PSFontPrinting">fontPathList: aValueHolder	fontPathList := aValueHolder copy.   "Use a copy to avoid adding dependents to aValueHolder" 	fontBackupPathList := aValueHolder value copy.</body><body package="PSFontPrinting">fontPathModel	^SimpleListEditor new  		listHolder: self fontPathList; 		validationBlock: [:str | Object errorSignal handle: [:ex | ex returnWith: false]			do: 				[| fn |				fn := SystemUtils makeFilenamePortable: str.				fn asFilename isDirectory]]; 		changedBlock: [self updateAvailableList disturb]</body><body package="PSFontPrinting">fontsAvailable	^availableFonts isNil 		ifTrue: [availableFonts := SelectionInList with: self availableFontsList]		ifFalse: [availableFonts]</body><body package="PSFontPrinting">fontsInstalled	^installedFonts isNil 		ifTrue: [installedFonts := SelectionInList with: self installedFontsList]		ifFalse: [installedFonts]</body></methods><methods><class-id>FontInstaller</class-id> <category>initialize-release</category><body package="PSFontPrinting">initialize	super initialize.	fontBackupDictionary := PostScriptFontBody fontDictionary copy.	fontBodiesRemoved := Set new.</body></methods><methods><class-id>FontInstaller</class-id> <category>private-font installation</category><body package="PSFontPrinting">restoreFont: aPostScriptFontBody	"Move a aPostScriptFontBody from withheld to the active font dictionary"  	PostScriptFontBody fontDictionary at: aPostScriptFontBody name put: aPostScriptFontBody.	PostScriptFontBody fontsWithheld  remove: aPostScriptFontBody ifAbsent:[].     fontBodiesRemoved remove: aPostScriptFontBody ifAbsent: [].	PostScriptPrinter initialize</body><body package="PSFontPrinting">withholdFont: aPostScriptFontBody	"Move a aPostScriptFontBody from the active font dictionary to the withheld set"  	PostScriptFontBody fontDictionary removeKey: aPostScriptFontBody name ifAbsent:[^self].	PostScriptFontBody fontsWithheld add: aPostScriptFontBody.	fontBodiesRemoved add: aPostScriptFontBody.	PostScriptPrinter initialize</body></methods><methods><class-id>FontInstaller</class-id> <category>updating</category><body package="PSFontPrinting">disturb	super disturb.	(self builder componentAt: #acceptButton) enable.	(self builder componentAt: #resetButton) enable.</body><body package="PSFontPrinting">undisturb	super undisturb.	(self builder componentAt:#acceptButton) disable.	(self builder componentAt:#resetButton) disable.</body><body package="PSFontPrinting">updateAvailableList	self fontsAvailable list: self availableFontsList</body><body package="PSFontPrinting">updateInstallButton	self fontsAvailable selection isNil 		ifTrue: [(self builder componentAt: #installButton) disable]		ifFalse: [(self builder componentAt: #installButton) enable]</body><body package="PSFontPrinting">updateInstalledList	self fontsInstalled list: self installedFontsList</body><body package="PSFontPrinting">updateRemoveButton	self fontsInstalled selection isNil 		ifTrue: [(self builder componentAt: #removeButton) disable]		ifFalse: [(self builder componentAt: #removeButton) enable]</body></methods><methods><class-id>FontInstaller class</class-id> <category>help</category><body package="PSFontPrinting">helpString	^'PostScript Printer Font InstallInstall, remove, and print a sample page of PostScript printer fonts in VW.   To install a new font the Adobe AFM file is required and a matching PFA font file is needed to load it as a soft font to a PostScript printer.Available font list 	The fonts available by file in the font directory path list specified above.  The list popup menu includes options to update the list or install a selection.  Fonts may appear in the list that have been withdrawn from the installed list.  Installed font list	Fonts that have been installed in VW.  The list popup menu includes options to print a sample page of installed fonts or withdraw a selection.Font colors indicate the availability of the font and files:	Black	--	No PFA file has been specified for the font.  It cannot be printed as a soft font. 	Green --	A PFA file has been specified.  VW can load this soft font to a PostScript printer.	Red  --	A PFA file has been specified but cannot currently be found on the platform.'</body></methods><methods><class-id>PostScriptFontSource</class-id> <category>comparing</category><body package="PSFontPrinting">= aPostScriptFontSource 	^self familyName = aPostScriptFontSource familyName</body><body package="PSFontPrinting">equalBySource: aPostScriptFontSource 	^self = aPostScriptFontSource and: 			[afmFile = aPostScriptFontSource afmFile 				and: [pfaFile = aPostScriptFontSource pfaFile]]</body><body package="PSFontPrinting">hash	^self familyName hash</body></methods><methods><class-id>PostScriptFontSource</class-id> <category>aspects</category><body package="PSFontPrinting">afmFile	^afmFile</body><body package="PSFontPrinting">afmFile: aFilename	afmFile := aFilename</body><body package="PSFontPrinting">body	body ifNil:[self installBody].	^body</body><body package="PSFontPrinting">body: aPostScriptFontBody installationPaths: aCollection 	| pfaSource |	body := aPostScriptFontBody.	familyName := aPostScriptFontBody name.	pfaSource := aPostScriptFontBody fontSource.	pfaSource isNil ifTrue: [^self].	pfaFile := pfaSource exists 				ifTrue: [pfaSource]				ifFalse: [self pathFor: pfaSource in: aCollection].	self findAFMFrom: aCollection</body><body package="PSFontPrinting">familyName	^familyName</body><body package="PSFontPrinting">familyName: aString	 familyName := aString</body><body package="PSFontPrinting">pfaFile	^pfaFile</body><body package="PSFontPrinting">pfaFile: aFilename	pfaFile := aFilename</body></methods><methods><class-id>PostScriptFontSource</class-id> <category>displaying</category><body package="PSFontPrinting">displayString	^self pfaFile isNil 		ifTrue: [self familyName asText	"No font file named"]		ifFalse: 			[Text string: self familyName				emphasis: (self pfaFile exists 						ifTrue: [#color -&gt; ColorValue darkGreen	"Font file found"]						ifFalse: [#color -&gt; ColorValue red	"Font file not on system"])]</body></methods><methods><class-id>PostScriptFontSource</class-id> <category>private</category><body package="PSFontPrinting">fileMatching: aFilename withExtension: anExtensionString searchPaths: aCollection 	| matchString matchFile |	aFilename isNil ifTrue: [^nil].	matchString := (aFilename tail copyUpTo: $.) , '.' , anExtensionString.	matchFile := aFilename directory construct: matchString.	matchFile exists ifTrue: [^matchFile].	^self pathFor: matchFile in: aCollection</body><body package="PSFontPrinting">findAFMFrom: aPathCollection 	"Given the PFA file search for the matching AFM file first from the origin of the PFA file then from the directories of aPathCollection"	afmFile := self 				fileMatching: pfaFile				withExtension: 'afm'				searchPaths: aPathCollection</body><body package="PSFontPrinting">findPFAFrom: aPathCollection 	"Given the AFM file search for the matching PFA file first from the origin of the AFM file then from the directories of aPathCollection"	pfaFile := self 				fileMatching: afmFile				withExtension: 'pfa'				searchPaths: aPathCollection</body><body package="PSFontPrinting">pathFor: aFilename in: aCollection 	"If the file named aFilename exists in any of the path strings in aCollection answer its full path string.  Otherwise answer nil"	| matchString |	matchString := aFilename tail asString.	aCollection do: 			[:path | 			| matchFile |			matchFile := path asFilename construct: matchString.			matchFile exists ifTrue: [^matchFile]].	^nil</body><body package="PSFontPrinting">readNameFromAFM	"Answer the font name identified by the .AFM file afmFilename"	| stream |	afmFile ifNil: [^self].	stream := afmFile readStream.	stream skipThroughAll: 'FontName '.	stream skipSeparators.	self familyName: stream upToSeparator.	stream close</body></methods><methods><class-id>PostScriptFontSource</class-id> <category>installation</category><body package="PSFontPrinting">install	"Install or move a PostScriptFontBody from withheld to the active font dictionary"	self body install</body><body package="PSFontPrinting">installBody	"Create and install the PostScriptFontBody based on the AFM and PFA font sources.  If a font body for the family is already installed to the PostScriptFontBody fontDictionary then send it to withdrawn."	afmFile ifNil: [^self].	PostScriptFontBody fontDictionary at: self familyName		ifPresent: [:former | former withhold].	[PostScriptFontBody processAdobeFiles: (Array with: afmFile asString)] 		on: OSErrorHolder nonexistentSignal		do: 			[:ex | 			| newPath |			(newPath := Dialog 						requestFileName: (#requestAFMPath &lt;&lt; #dialogs 								&gt;&gt; '&lt;1s&gt; font file not found. &lt;n&gt;Please revise file path' 									expandMacrosWith: self familyName)						default: afmFile asString) isEmpty 				ifFalse: 					[self afmFile: newPath asFilename.					ex restart].			^self].	body := PostScriptFontBody named: self familyName.	body fontSource: self pfaFile</body><body package="PSFontPrinting">remove	"Remove the body from the active font dictionary and restore any like font family body withheld"	self body remove</body><body package="PSFontPrinting">restore	"Move a aPostScriptFontBody from withheld to the active font dictionary"	self body restore</body><body package="PSFontPrinting">withhold	"Move a PostScriptFontBody from the active font dictionary to the withheld set"	self body withhold</body></methods><methods><class-id>PostScriptFontSource class</class-id> <category>instance creation</category><body package="PSFontPrinting">afmFile: aFilename 	^(self new)		afmFile: aFilename;		readNameFromAFM;		findPFAFrom: #()</body><body package="PSFontPrinting">afmFile: aFilename installationPaths: aPathCollection 	^(self new)		afmFile: aFilename;		readNameFromAFM;		findPFAFrom: aPathCollection</body><body package="PSFontPrinting">afmFile: afmFilename pfaFile: pfaFilename 	^(self new)		afmFile: afmFilename;		pfaFile: pfaFilename;		readNameFromAFM</body><body package="PSFontPrinting">allAvailableInPaths: aPathCollection 	"Answer all instances that can be constructed from AFM files in aPathCollection"	^aPathCollection inject: Array new		into: 			[:sofar :pathString | 			sofar 				, ((pathString asLogicalFileSpecification filesMatching: '*.afm') collect: 							[:afmFileString | 							self afmFile: afmFileString asFilename installationPaths: aPathCollection])]</body><body package="PSFontPrinting">body: aPostScriptFontBody installationPaths: aPathCollection 	 	^self new body: aPostScriptFontBody installationPaths: aPathCollection</body></methods><methods><class-id>Graphics.PostScriptFontBody class</class-id> <category>private</category><body package="PSFontPrinting">fontDictionary 	"Private -- access the PostScriptFont dictionary"	 ^PostScriptFonts</body><body package="PSFontPrinting">fontDictionary: aPoolDictionary	"Private -- set the PostScriptFont dictionary"	 PostScriptFonts := aPoolDictionary</body><body package="PSFontPrinting">fontsWithheld	"Private--Answer the fonts withheld dictionary"	^FontsWithheld</body><body package="PSFontPrinting">fontsWithheld: aSet	"Private--Set the fonts withheld dictionary"	FontsWithheld := aSet</body></methods><methods><class-id>Graphics.PostScriptFontBody</class-id> <category>accessing</category><body package="PSFontPrinting">firstFamilyWithheld	^FontsWithheld detect:[:body| body name = fullName] ifNone:[nil]</body></methods><methods><class-id>Graphics.PostScriptFontBody</class-id> <category>installation</category><body package="PSFontPrinting">install	"Install the receiver to the active font dictionary.  Move any existing body installation to withheld"	PostScriptFonts at: fullName ifPresent:[:body| FontsWithheld add: body].	PostScriptFonts at: fullName put: self</body></methods><methods><class-id>Graphics.PostScriptFontBody</class-id> <category>testing</category><body package="PSFontPrinting">isFamilyInstalled	^PostScriptFonts includesKey: fullName</body><body package="PSFontPrinting">isFamilyWithheld	^FontsWithheld contains:[:any| any family = fullName]</body><body package="PSFontPrinting">isInstalled	^(PostScriptFonts at: fullName ifAbsent:[]) = self</body><body package="PSFontPrinting">isWithheld	^FontsWithheld includes: self</body></methods><methods><class-id>Graphics.PostScriptFontBody</class-id> <category>installation</category><body package="PSFontPrinting">remove	"Remove the receiver from the active font dictionary.  Replace with any similar family font body in withheld"	self firstFamilyWithheld ifNil: [PostScriptFonts removeKey: fullName]		ifNotNil: 			[:body | 			PostScriptFonts at: fullName put: body.			FontsWithheld remove: body]</body><body package="PSFontPrinting">restore	"Install or move the receiver from withheld to the active font dictionary"	FontsWithheld remove: self ifAbsent: [^self].	PostScriptFonts at: fullName put: self.</body><body package="PSFontPrinting">withhold	"Move the receiver from the active font dictionary to withheld"	PostScriptFonts removeKey: fullName ifAbsent: [^self].	FontsWithheld add: self</body></methods><methods><class-id>Tools.PostScriptFontPrintingPage class</class-id> <category>resources</category><body package="PSFontPrinting">fontsAvailableMenu	"MenuEditor new openOnClass: self andSelector: #fontsAvailableMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: 'update' 				#value: #updateAvailableList ) 			#(#MenuItem 				#rawLabel: 'install' 				#value: #installFont ) ) #(1 1 ) nil ) decodeAsLiteralArray</body><body package="PSFontPrinting">fontsInstalledMenu	"MenuEditor new openOnClass: self andSelector: #fontsInstalledMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: 'remove' 				#value: #removeFont ) 			#(#MenuItem 				#rawLabel: 'print all' 				#value: #printSamplePage ) ) #(1 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Tools.PostScriptFontPrintingPage class</class-id> <category>interface specs</category><body package="PSFontPrinting">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Postscript Font Installer' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 640 512 1072 824 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 19 4 ) 					#label: 'PostScript Printer Fonts' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.25 0 0.5 0.5 0 ) 					#label: 'Available' ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.75 0 0.5 0.5 0 ) 					#label: 'Installed' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -18 0.5 28 0.5 18 0.5 55 0.5 ) 					#name: #installButton 					#flags: 40 					#model: #installFont 					#label: '&gt;&gt;' 					#defaultable: true ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 32 0 -20 1 0 0.5 ) 					#flags: 0 					#majorKey: #{UI.SimpleListEditor} 					#minorKey: #windowSpec 					#clientKey: #fontPathModel ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -18 0.5 -56 1 18 0.5 -31 1 ) 					#name: #removeButton 					#flags: 40 					#model: #removeFont 					#label: '&lt;&lt;' 					#defaultable: true ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 20 0 25 0.5 -25 0.5 -25 1 ) 					#model: #fontsAvailable 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateInstallButton ) 					#menu: #fontsAvailableMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 25 0.5 25 0.5 -20 1 -25 1 ) 					#model: #fontsInstalled 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #updateRemoveButton ) 					#menu: #fontsInstalledMenu 					#multipleSelections: true 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>FontInstaller class</class-id> <category>resources</category><body package="PSFontPrinting">fontsAvailableMenu	"MenuEditor new openOnClass: self andSelector: #fontsAvailableMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: 'update' 				#value: #updateAvailableList ) 			#(#MenuItem 				#rawLabel: 'install' 				#value: #install ) ) #(1 1 ) nil ) decodeAsLiteralArray</body><body package="PSFontPrinting">fontsInstalledMenu	"MenuEditor new openOnClass: self andSelector: #fontsInstalledMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#rawLabel: 'remove' 				#value: #removeFont ) 			#(#MenuItem 				#rawLabel: 'print all' 				#value: #printSamplePage ) ) #(1 1 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>FontInstaller class</class-id> <category>interface specs</category><body package="PSFontPrinting">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Postscript Font Installer' 			#min: #(#Point 40 20 ) 			#bounds: #(#Rectangle 247 165 679 477 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#Point 19 4 ) 					#label: 'PostScript Printer Fonts' ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 20 0 25 0.5 -25 0.5 -44 1 ) 					#model: #fontsAvailable 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #updateInstallButton ) 					#menu: #fontsAvailableMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 25 0.5 25 0.5 -20 1 -44 1 ) 					#model: #fontsInstalled 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #updateRemoveButton ) 					#menu: #fontsInstalledMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin -60 0.5 0 0.5 1 0 ) 					#label: 'Available' ) 				#(#LabelSpec 					#layout: #(#LayoutOrigin 60 0.5 0 0.5 ) 					#label: 'Installed' ) 				#(#ActionButtonSpec 					#layout: #(#AlignmentOrigin -60 0.5 -5 1 1 1 ) 					#name: #acceptButton 					#flags: 40 					#model: #acceptAction					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #undisturb ) 					#tabable: true 					#label: 'Accept' 					#isDefault: true 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#AlignmentOrigin 0 0.5 -5 1 0.5 1 ) 					#name: #resetButton 					#flags: 40 					#model: #resetAction					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#valueChangeSelector: #undisturb ) 					#tabable: true 					#label: 'Reset' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#AlignmentOrigin 60 0.5 -5 1 0 1 ) 					#model: #helpAction 					#tabable: true 					#label: 'Help' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -18 0.5 -75 1 18 0.5 -50 1 ) 					#name: #removeButton 					#flags: 40 					#model: #removeFont 					#label: '&lt;&lt;' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame -18 0.5 28 0.5 18 0.5 55 0.5 ) 					#name: #installButton 					#flags: 40 					#model: #installFont 					#label: '&gt;&gt;' 					#defaultable: true ) 				#(#SubCanvasSpec 					#layout: #(#LayoutFrame 20 0 32 0 -20 1 -5 0.5 ) 					#flags: 0 					#majorKey: #SimpleListEditor 					#minorKey: #windowSpec 					#clientKey: #fontPathModel ) ) ) )</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>pages</category><body package="PSFontPrinting">printingPSFontsPage	&lt;settingsPage: #(system printing psFonts)&gt;	^PostScriptFontPrintingPage new		label: #PrintingPSFonts &lt;&lt; #labels &gt;&gt; 'PostScript Fonts';		icon: (ListIconLibrary visualFor: #psPrinter);		fontPathList: (self settingWithId: #(psFonts fontDirectories))</body></methods><methods><class-id>Tools.VisualWorksSettings class</class-id> <category>settings-PS printing</category><body package="PSFontPrinting">psPrintingFontDirectories	&lt;setting: #(psFonts fontDirectories)&gt;	^((SequenceSetting of: StringSetting forNameOfFile) onUISetting: #fontListModel)		default: (List with: PostScriptFontBody findFontDirectory)</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>SettingsManagerPage</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>manager id position label icon children definingMethod </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Settings-UI</category><attributes><package>Tools-Settings</package></attributes></class><class><name>PostScriptFontBody</name><environment>Graphics</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fullName family boldness italic serif fixedWidth setWidth widths simpleWidths defaultWidth encoder ascent descent underlinePosition underlineThickness fontSource </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Printing-PostScript</category><attributes><package>Graphics-Printing-PostScript</package></attributes></class><class><name>UISettings</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>list disturbed subBuilder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Support</category><attributes><package>Interface-Support</package></attributes></class></st-source>