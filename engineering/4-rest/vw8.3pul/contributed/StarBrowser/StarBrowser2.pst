<?xml version="1.0"?><st-source><!-- Name: StarBrowser2Notice: Copyright 2004-2013 Roel Wuyts.  All rights reserved.This utility is free to use under the Simplified BSD license, as detailed below.Redistribution and use in source and binary forms, with or withoutmodification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this   list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice,   this list of conditions and the following disclaimer in the documentation   and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" ANDANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIEDWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AREDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FORANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED ANDON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THISSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.BundleName: StarBrowser2BundleStructure: a Store.BundleForParcelComment: The star browser knows about Items (classes, methods, etc.) and Classifications: nested groups of items.  It can incorporate existing editors such as the Refactoring Browser, Trippy, CodeCrawler and SOUL.  Select an Item/Classification and the default editor for that item is shown.  Classifications are extensional (user chooses their contents) or intensional (user defines rule which selects items).  Non-first-class items like protocols can also be treated as items (silent generation of classification containing that protocol's methods).  One useful extensional classification for a singleton class is the one that has the singleton instance along with the class and its methods.  A useful intensional one contains the most recently visited 20 methods.It is easy to add editors and open them on classifications.  Multiple views stay in sync.  You can swap between current editor on viewed item being the whole screen and being inside the browser.Operating on Classifications:  you can convert extensional to intensional.  You can take intersections, differences, etc., of classifications to e.g. browse senders of #add that also send #initialize.  A classification showing all methods in current work containing ‘self halt’ is useful: check it is empty before packaging.You can add services to the browser.  You can show slides and code in the same browser.  You can use the visitor pattern with a #doUndefinedObject: method as well as #doClass:, #doImage: and all the other visitor pattern calls for specific types.  These calls have access to the subcanvas and browser so can use this information in displaying (e.g. choose display type based on what this classification contains).  There is an export facility.StarBrowser2 has tabs and allows switching between Trippy and class browsers.  It reuses the same Refactoring Browser window if available (faster).  A vertical toolbar manages the various looks available.  You can move the toolbars and etc., to horizontal, vertical etc., to exploit your screen shape to best effect.  StarBrowser wraps the tools it displays and you collapse it to see just those tools whenever you wish.  It has browsing tools to let you work on things in the Refactoring Browser, in Advance, etc.  It also tracks what you are doing, so provides recent methods, popular classes, etc.  It is in the Cincom Public Repository (and in Squeak) and has tests.DevelopmentPrerequisites: #(#(#any 'SUnit' '') #(#any 'Browser-BrowserUI' '') #(#any 'VRCommonDialogs' '') #(#any 'BOSS' '') #(#any 'Tools-Trippy' ''))Parcel: nilParcelName: StarBrowser2PrerequisiteDescriptions: #(#(#name 'SUnit') #(#name 'Browser-BrowserUI' #componentType #package) #(#name 'VRCommonDialogs' #componentType #package) #(#name 'BOSS' #componentType #package) #(#name 'Tools-Trippy' #componentType #package #applicability #store))PrerequisiteParcels: #(#('SUnit' '') #('Browser-BrowserUI' '') #('VRCommonDialogs' '') #('BOSS' ''))Version: 7.10 - 0.103Date: 3:21:38 PM May 10, 2013 --><time-stamp>From VisualWorks®, Pre-Release 7.10 (may13.1) of 3 May 2013 on 10 May 2013 at 15:21:38</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Classifications2</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			XProgramming.SUnit.*			</imports><category>Classifications2</category><attributes><package>Classifications2</package></attributes></name-space><class><name>Win98VerticalToolBar</name><environment>UI</environment><super>UI.Win98ToolBar</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowserUI2</category><attributes><package>StarBrowser2VerticalToolbar</package></attributes></class><class><name>BOSSExceptionThrowingReader</name><environment>Kernel</environment><super>Kernel.BOSSReader</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Binary Storage</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>AbstractAction</name><environment>Classifications2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>starbrowser item </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowser2Actions</category><attributes><package>StarBrowser2Actions</package></attributes></class><class><name>ClearClassificationAction</name><environment>Classifications2</environment><super>Classifications2.AbstractAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>items </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowser2Actions</category><attributes><package>StarBrowser2Actions</package></attributes></class><class><name>SB2ToolbarApp</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isToolbarVisible toolbar toolbarMenuHolder toolbarLayout </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>ItemEditor</name><environment>Classifications2</environment><super>UI.SB2ToolbarApp</super><private>false</private><indexed-type>none</indexed-type><inst-vars>item editorTabs editorApplications editorShellMemory configuration starBrowser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowserUI2</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>EditorShell</name><environment>Classifications2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>editor toolbar item starBrowser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowserUI2</category><attributes><package>StarBrowserUI2</package></attributes></class><comment><class-id>Classifications2.EditorShell</class-id><body>I represent the model behind a tab in a StarBrowser2. I keep an editor, and am able to install or reinstall myself in a subcanvas.Instance Variables:	editor	&lt;ApplicationModel&gt;	Application behind the tab	starbrowser	&lt;StarBrowser2&gt;	The StarBrowser I am installed in	toolbar	&lt;Object&gt; The toolbar of the editor I am keeping</body></comment><class><name>TrippyShell</name><environment>Classifications2</environment><super>Classifications2.EditorShell</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowserUI2</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>Service</name><environment>Classifications2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications</category><attributes><package>Classifications2</package></attributes></class><comment><class-id>Classifications2.Service</class-id><body>Items only implement a basic protocol. The rest of the behaviour is implemented using services (my subclasses). Technically speaking, I am a visitor that visits items. Every item therefore implements #itemActionFor:, in which it calls the appropriate doXXX: method implemented by me.Services are normally not used directly. Every service has to be registered in the current ServicesConfiguration under a certain key. Whoever wants to use the service asks for the current registered service for that key, and uses that service. This protocol allows to dynamically swap operations on items. See the StarBrowser of examples of this.Subclasses must implement the following messages:	operations		doObject:On the class side:		actionName	Returns the name with which I am registered. This name is used when retrieving the service from the ServicesConfiguration.</body></comment><class><name>SB2Service</name><environment>Classifications2</environment><super>Classifications2.Service</super><private>false</private><indexed-type>none</indexed-type><inst-vars>starBrowser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications</category><attributes><package>StarBrowserUI2</package></attributes></class><comment><class-id>Classifications2.SB2Service</class-id><body>I am a service used by the StarBrowser.Instance Variables:	starBrowser	&lt;StarBrowser2&gt;	I am the instance of the StarBrowser that created me.</body></comment><class><name>AbstractClassification</name><environment>Classifications2</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name comment parent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications2</category><attributes><package>Classifications2</package></attributes></class><class><name>Classification</name><environment>Classifications2</environment><super>Classifications2.AbstractClassification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>items </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications2</category><attributes><package>Classifications2</package></attributes></class><class><name>RBShell</name><environment>Classifications2</environment><super>Classifications2.EditorShell</super><private>false</private><indexed-type>none</indexed-type><inst-vars>navigatorState findWidget </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowserUI2</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>StarBrowser2About</name><environment>Classifications2</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>RenameClassificationAction</name><environment>Classifications2</environment><super>Classifications2.AbstractAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>oldname newName </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowser2Actions</category><attributes><package>StarBrowser2Actions</package></attributes></class><class><name>SmartClassificationEditor</name><environment>Classifications2</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>descriptionText name commentText smartClassification </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>StarBrowserUI2</package></attributes></class><comment><class-id>Classifications2.SmartClassificationEditor</class-id><body>I allow to edit the label and description of an intentional classification. Note: At this moment, I do not yet listen to changes of the intentional classification I am editing. This feature would not fall well with the internals of the classification browser, where only the components of the current subcanvas are released (but my release would not be called, hence I would remain dependent on the classification I am editing...). I have to look into a solution; one possibility is to send #release to the editor first (but have to check whether this is the good way to do this).</body></comment><class><name>ConfigurationTests</name><environment>Classifications2</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testConfiguration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>ClassificationsTesting</category><attributes><package>ClassificationsTests2</package></attributes></class><class><name>IconService</name><environment>Classifications2</environment><super>Classifications2.SB2Service</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowserUI2</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>TestService</name><environment>Classifications2</environment><super>Classifications2.Service</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications2</category><attributes><package>ClassificationsTests2</package></attributes></class><class><name>PragmaBasedService</name><environment>Classifications2</environment><super>Classifications2.SB2Service</super><private>false</private><indexed-type>none</indexed-type><inst-vars>currentIdentifier </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>MenuService</name><environment>Classifications2</environment><super>Classifications2.PragmaBasedService</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menu toolbar overrides </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowserUI2</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>SmartClassification</name><environment>Classifications2</environment><super>Classifications2.AbstractClassification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>descriptionSource descriptionBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications2</category><attributes><package>Classifications2</package></attributes></class><class><name>UpdatingClassification</name><environment>Classifications2</environment><super>Classifications2.SmartClassification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>notifier </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications2</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>TestOtherService</name><environment>Classifications2</environment><super>Classifications2.Service</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications2</category><attributes><package>ClassificationsTests2</package></attributes></class><class><name>TestAnotherService</name><environment>Classifications2</environment><super>Classifications2.TestOtherService</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications2</category><attributes><package>ClassificationsTests2</package></attributes></class><class><name>AbstractAddAction</name><environment>Classifications2</environment><super>Classifications2.AbstractAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object parentclassification </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowser2Actions</category><attributes><package>StarBrowser2Actions</package></attributes></class><class><name>AddClassificationAction</name><environment>Classifications2</environment><super>Classifications2.AbstractAddAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowser2Actions</category><attributes><package>StarBrowser2Actions</package></attributes></class><class><name>LabelService</name><environment>Classifications2</environment><super>Classifications2.SB2Service</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications2</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>AddSmartClassificationAction</name><environment>Classifications2</environment><super>Classifications2.AddClassificationAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowser2Actions</category><attributes><package>StarBrowser2Actions</package></attributes></class><class><name>AddObjectAction</name><environment>Classifications2</environment><super>Classifications2.AbstractAddAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowser2Actions</category><attributes><package>StarBrowser2Actions</package></attributes></class><class><name>StarBrowser2</name><environment>Classifications2</environment><super>UI.SB2ToolbarApp</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar classificationsTreeEditor itemEditor </inst-vars><class-inst-vars>actionStack </class-inst-vars><imports></imports><category>StarBrowserUI2</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>RemoveAction</name><environment>Classifications2</environment><super>Classifications2.AbstractAction</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parentclassification </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowser2Actions</category><attributes><package>StarBrowser2Actions</package></attributes></class><class><name>EditorService</name><environment>Classifications2</environment><super>Classifications2.PragmaBasedService</super><private>false</private><indexed-type>none</indexed-type><inst-vars>editorClass editorToolbarMenu editorCreationBlock editorReuserBlock toolbar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications2</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>ActionStack</name><environment>Classifications2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actions lastundo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowser2Actions</category><attributes><package>StarBrowser2Actions</package></attributes></class><class><name>MovingLayoutFrame</name><environment>Graphics</environment><super>Graphics.LayoutFrame</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Support</category><attributes><package>StarBrowser2VerticalToolbar</package></attributes></class><comment><class-id>Graphics.MovingLayoutFrame</class-id><body>I am a LayoutFrame to be used for putting items on a canvas that need to move completely when a splitter bar moves them. To that end I override the method leftOffset: to not only move the left, but also the right offset, and topOffset: to also move the bottom.</body></comment><class><name>WinXPVerticalToolBar</name><environment>UI</environment><super>UI.WinXPToolBar</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowserUI2</category><attributes><package>StarBrowser2VerticalToolbar</package></attributes></class><class><name>ImportExportTests</name><environment>Classifications2</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowser2Tests</category><attributes><package>StarBrowser2Tests</package></attributes></class><class><name>ClassificationsImportError</name><environment>Core</environment><super>Core.Error</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>ServicesConfiguration</name><environment>Classifications2</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>configuration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications</category><attributes><package>Classifications2</package></attributes></class><comment><class-id>Classifications2.ServicesConfiguration</class-id><body>Items have services defined (see ItemService) that define actions that can be done with items (getting a label, an icon, editing the item, etc.). These actions are registered dynamically by me. Every service has a method (#itemActionName) that is used as the key for that service. Different services can be registered with the same key, but only one is active at any given time.Instance Variables:	configuration	&lt;(Dictionary of: (aSymbol -&gt; (Association key: ItemService class value: (Collection of: ItemService class))))&gt;	the dictionary that holds the registered keys, and for every key the services registered for that key. This is done with an Association. The key holds the active service (it will be returned when asked for the service registered under that key) and a collection with the registered but currently unactive services.</body></comment><class><name>ClassificationTests</name><environment>Classifications2</environment><super>XProgramming.SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>emptyClassification exampleClassification </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications2</category><attributes><package>ClassificationsTests2</package></attributes></class><class><name>DropHelper</name><environment>Classifications2</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dragDropContext </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications</category><attributes><package>StarBrowserUI2</package></attributes></class><comment><class-id>Classifications2.DropHelper</class-id><body>Fixes the mess that is introduced with dropping... the clientData is comletely unstructured, and this class helps to unpack the necessary information from it.</body></comment><class><name>MethodFilterClassification</name><environment>Tools</environment><super>Tools.MethodFilter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>targetClassification </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>ClassificationTreeEditor</name><environment>Classifications2</environment><super>UI.SB2ToolbarApp</super><private>false</private><indexed-type>none</indexed-type><inst-vars>root classificationsTree classificationsTreeMenuHolder starBrowser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>StarBrowserUI2</category><attributes><package>StarBrowserUI2</package></attributes></class><class><name>RootClassification</name><environment>Classifications2</environment><super>Classifications2.Classification</super><private>false</private><indexed-type>none</indexed-type><inst-vars>configuration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications2</category><attributes><package>Classifications2</package></attributes></class><class><name>VerticalToolBar</name><environment>UI</environment><super>UI.ToolBar</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category><attributes><package>StarBrowser2VerticalToolbar</package></attributes></class><class><name>ChildrenService</name><environment>Classifications2</environment><super>Classifications2.SB2Service</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Classifications2</category><attributes><package>StarBrowserUI2</package></attributes></class><shared-variable><name>DefaultClassification</name><environment>Classifications2.StarBrowser2</environment><private>false</private><constant>false</constant><category>classification</category><initializer>nil</initializer><attributes><package>StarBrowserUI2</package></attributes></shared-variable><shared-variable><name>InsertDragCursor</name><environment>Classifications2.StarBrowser2</environment><private>false</private><constant>false</constant><category>cursors</category><initializer>nil</initializer><attributes><package>StarBrowserUI2</package></attributes></shared-variable><shared-variable><name>InsertDragCursor</name><environment>Classifications2.ClassificationTreeEditor</environment><private>false</private><constant>false</constant><category>cursors</category><initializer>nil</initializer><attributes><package>StarBrowserUI2</package></attributes></shared-variable><shared-variable><name>ExceptionRootClass</name><environment>Classifications2.SmartClassification</environment><private>false</private><constant>false</constant><category>exception</category><initializer>nil</initializer><attributes><package>Classifications2</package></attributes></shared-variable><methods><class-id>UI.Win98VerticalToolBar</class-id> <category>private</category><body package="StarBrowser2VerticalToolbar">layoutComponentsForBounds: newBounds	"The receiver has been sized to the given parameters.  	Re-layout all of the receiver's components."	self layoutComponentsVerticallyForBounds: newBounds</body></methods><methods><class-id>Kernel.BOSSExceptionThrowingReader</class-id> <category>private-reading</category><body package="StarBrowserUI2">errorItemFor: anException	"There was an error recreating an item that was previously exported. The argument has the exception that occured. Return an item that will be placed in the classification intead of the original one that cannot be recreated."	^'Error during import: ', anException messageText</body><body package="StarBrowserUI2">readObjects: first topIndex: topIndex	" Read in and fix up all the objects. "	| count buf deferredBodies |	count := headers size // 4.	deferredBodies := OrderedCollection new: (count // 10 max: 5).  "estimate"	compiledCode := nil.	buf := BOSSBytes new: 4.	1 to: count do: [:i | | objx class size flags shortClass special inst short forward |		objx := i - 1 bitShift: 2.		self resolveCyclesUpTo: objx in: deferredBodies.		flags := self flagsOf: objx.		short := flags anyMask: BinaryObjectStorage flagHasShortOops.		shortClass := flags bitAnd: BinaryObjectStorage flagRecentClassMask.		forward := flags anyMask: BinaryObjectStorage flagHasForwardReferences.		shortClass = 0			ifTrue:				[class := short					ifTrue:						[stream next: 2 into: buf startingAt: 1.						swapBytes ifTrue: [buf swap: 1 with: 2].						buf shortObjectAt: 1 from: objects baseIndex: baseIndex]					ifFalse:						[stream next: 4 into: buf startingAt: 1.						swapBytes ifTrue: [buf swap: 1 with: 4.  buf swap: 2 with: 3].						buf objectAt: 1 from: objects baseIndex: baseIndex].				forward ifFalse:					[recentClasses removeLast; addFirst: class]]			ifFalse:				[class := recentClasses at: shortClass].		size := self sizeOf: objx.		size = 16rff ifTrue:			[stream next: 4 into: buf startingAt: 1.			swapBytes ifTrue: [buf swapBytesWidth: 4].			size := buf longAt: 1].		special := class isImmediate.		(flags anyMask: BinaryObjectStorage flagIsBits)			ifTrue:				[inst := stream next: size.				forward					ifTrue:  "can only happen if object has dependents"						[deferredBodies add: (Array with: i - 1 with: class)]					ifFalse:						[special							ifTrue: [inst changeClassToThatOf: ''.								storage mapXeroxToUnicode ifTrue: [self class mapStringToUnicode: inst]]							ifFalse:								[self change: inst toInstanceOf: class.								(swapBytes and: [(ByteClasses at: class ifAbsent: [nil]) == nil])									ifTrue: [inst reverseByteOrder]]]]			ifFalse:				[inst := Array new: size // (short ifTrue: [2] ifFalse: [4]).				forward					ifFalse:  "can resolve now"						[size &gt; buf size ifTrue: [buf := BOSSBytes new: size].						stream next: size into: buf startingAt: 1.						self resolveArray: inst from: buf short: short.						(special or: [class isKindOf: Error]) ifFalse: [self change: inst toInstanceOf: class].						(class isKindOf: Error) ifTrue: [inst := self errorItemFor: class]]					ifTrue:  "must resolve later"						[| bits |						bits := BOSSBytes new: size.						stream next: size into: bits startingAt: 1.						self cyclicBody: (Array with: i - 1 with: class with: bits) to: deferredBodies using: short]].		(special and: [forward not])			ifTrue:				[" Handle import "				| sel |				sel := BinaryObjectStorage importSelectors at: class.				inst :=[self perform: sel with: inst] on: Error do:[:ex | ex returnWith: ex copy]].		objects at: (i  - 1 bitShift: 2) + baseIndex put: inst.		(flags anyMask: BinaryObjectStorage flagIsImmutable) ifTrue:			[self deferSend: (MessageSend receiver: inst selector: #isImmutable: argument: true)]].	" Now fill in the remaining objects "	[deferredBodies isEmpty]		whileFalse:			[| index inst hx class body |			body := deferredBodies removeFirst.			index := body first.			hx := index bitShift: 2.			inst := objects at: hx + baseIndex.			class := body at: 2.			inst class isBits				ifFalse:					[self resolveArray: inst from: (body at: 3) short: ((self flagsOf: hx) anyMask: BinaryObjectStorage flagHasShortOops)].			class isImmediate				ifTrue: [inst become: (self perform: (BinaryObjectStorage importSelectors at: class) with: inst)]				ifFalse:					[self change: inst toInstanceOf: class.					(swapBytes and: [class isBits and: [(ByteClasses at: class ifAbsent: [nil]) isNil]])						ifTrue: [inst reverseByteOrder]]].	headers := stream := nil.  "release references"	self commitSources.  "update source"	self evaluateSends.  "evaluate any message sends that were just for effect"	^objects at: topIndex</body></methods><methods><class-id>Classifications2.AbstractAction</class-id> <category>operations</category><body package="StarBrowser2Actions">isUndoable	^false</body><body package="StarBrowser2Actions">performAction	^self subclassResponsibility</body><body package="StarBrowser2Actions">redoAction	^self performAction</body><body package="StarBrowser2Actions">undoAction	^self subclassResponsibility</body></methods><methods><class-id>Classifications2.AbstractAction</class-id> <category>accessing</category><body package="StarBrowser2Actions">item	^item</body><body package="StarBrowser2Actions">item: anObject	item := anObject</body><body package="StarBrowser2Actions">name	^self subclassResponsibility</body><body package="StarBrowser2Actions">starbrowser	^starbrowser</body><body package="StarBrowser2Actions">starbrowser: anObject	starbrowser := anObject</body></methods><methods><class-id>Classifications2.AbstractAction class</class-id> <category>instance creation</category><body package="StarBrowser2Actions">forStarBrowser: aBrowser 	^ super new starbrowser: aBrowser; item: nil</body><body package="StarBrowser2Actions">forStarBrowser: aBrowser forItem: anItem	^ super new starbrowser: aBrowser; item: anItem</body></methods><methods><class-id>Classifications2.ClearClassificationAction</class-id> <category>operations</category><body package="StarBrowser2Actions">isUndoable	^true</body><body package="StarBrowser2Actions">performAction	items := self item items asArray copy.	self item clear.</body><body package="StarBrowser2Actions">undoAction	self item addAll:  items</body></methods><methods><class-id>Classifications2.ClearClassificationAction</class-id> <category>accessing</category><body package="StarBrowser2Actions">items1	^items</body><body package="StarBrowser2Actions">items: anObject	items := anObject</body><body package="StarBrowser2Actions">name	^'Clear Classification'</body></methods><methods><class-id>UI.SB2ToolbarApp</class-id> <category>private accessing</category><body package="StarBrowserUI2">defaultToolbarLayout	^LayoutFrame 		leftFraction: 0 offset: 0		topFraction: 0 offset: 0		rightFraction: 1 offset: 0		bottomFraction: 0 offset: self toolbarHeight</body><body package="StarBrowserUI2">defaultToolbarMenu	^self subclassResponsibility</body><body package="StarBrowserUI2">toolbar	^toolbar ifNil: 			[toolbar := self toolbarClass new setMenuChannel: self toolbarMenuHolder						performer: self]		ifNotNil: [toolbar]</body><body package="StarBrowserUI2">toolbarClass	^LookPreferences widgetPolicy lookPolicyClass new toolBarClass</body><body package="StarBrowserUI2">toolbarHeight	^30</body><body package="StarBrowserUI2">toolbarID	^#toolbar</body><body package="StarBrowserUI2">toolbarLayout	^toolbarLayout ifNil: [toolbarLayout := self defaultToolbarLayout]		ifNotNil: [toolbarLayout]</body><body package="StarBrowserUI2">toolbarMenu: aMenu	self toolbarMenuHolder value: aMenu</body><body package="StarBrowserUI2">toolbarMenuHolder	^toolbarMenuHolder 		ifNil: [toolbarMenuHolder := self defaultToolbarMenu asValue]		ifNotNil: [toolbarMenuHolder]</body><body package="StarBrowserUI2">toolbarMenuHolder: aMenuHolder	toolbarMenuHolder := aMenuHolder</body><body package="StarBrowserUI2">toolbarSpec	| spec |	spec := ArbitraryComponentSpec named: self toolbarID layout: self toolbarLayout.	spec		component: self toolbar;		hasBorder: false.	^spec</body><body package="StarBrowserUI2">widgetsToAdjust	"Return the identifiers of the widgets that need their top adjusted when the toolbar is toggled."	^self subclassResponsibility</body></methods><methods><class-id>UI.SB2ToolbarApp</class-id> <category>initialize-release</category><body package="StarBrowserUI2">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	isToolbarVisible := true</body></methods><methods><class-id>UI.SB2ToolbarApp</class-id> <category>actions</category><body package="StarBrowserUI2">toggleToolbar	isToolbarVisible ifTrue: [self hideToolbar] ifFalse: [self showToolbar]</body></methods><methods><class-id>UI.SB2ToolbarApp</class-id> <category>private</category><body package="StarBrowserUI2">addToolbar	toolbar := nil.	toolbarLayout := nil.	self builder add: self toolbarSpec</body><body package="StarBrowserUI2">adjustTopOf: id by: heightAdjustment 	"Adjust the top offset of the widget with the given identifier by the adjustment argument."	| layout currentOffset |	layout := (self builder namedComponents at: id) component layout.	currentOffset := layout topOffset.	^layout topFraction: 0 offset: currentOffset + heightAdjustment</body><body package="StarBrowserUI2">adjustWidgets	| heightAdjustment |	heightAdjustment := self isToolbarVisible 				ifTrue: [self toolbarHeight negated]				ifFalse: [self toolbarHeight].	self widgetsToAdjust do: [:id | self adjustTopOf: id by: heightAdjustment].	self builder window refresh</body><body package="StarBrowserUI2">hide: id	(self builder componentAt: id) beInvisible</body><body package="StarBrowserUI2">hideAll: idCollection	idCollection do: [:eachID | self hide: eachID]</body><body package="StarBrowserUI2">hideToolbar	self hide: self toolbarID.	self adjustWidgets.	isToolbarVisible := false.</body><body package="StarBrowserUI2">show: id	(self builder componentAt: id) beVisible</body><body package="StarBrowserUI2">showAll: idCollection	idCollection do: [:eachID | self show: eachID]</body><body package="StarBrowserUI2">showToolbar	self show: self toolbarID.	self adjustWidgets.	isToolbarVisible := true</body><body package="StarBrowserUI2">toolbarComponent	^self builder componentAt: self toolbarID</body></methods><methods><class-id>UI.SB2ToolbarApp</class-id> <category>interface opening</category><body package="StarBrowserUI2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self addToolbar</body></methods><methods><class-id>UI.SB2ToolbarApp</class-id> <category>testing</category><body package="StarBrowserUI2">isToolbarVisible	^isToolbarVisible</body></methods><methods><class-id>Classifications2.ItemEditor</class-id> <category>actions</category><body package="StarBrowserUI2">actionFor: aSymbol 	| shell index |	index := self editorTabs selectionIndex.	shell := self shellFor: self item nameKey: aSymbol.	shell := shell installIn: self editorSubcanvas				orReuse: self currentEditorShell.	self editorTabs list at: index put: (self labelForItem: shell item).	self editorApplications at: index put: shell.	self editorSubcanvas ifNotNil: [:tabs | tabs invalidateNow].	^self item asValue</body><body package="StarBrowserUI2">inNewTab	"Create a new tab with the current selection and select it as the new current one"	self inNewTab: self item</body><body package="StarBrowserUI2">inNewTab: anObject	"Create a new tab for editing anObject and select it as the new current one"	| shell |	(self editorTabs selectionIndex ~= 0) ifTrue: [self currentEditorShell loseTab].	shell := self shellFor: anObject.	shell installNewIn: self editorSubcanvas.	self editorTabs list add: (self labelForItem: anObject).	self editorApplications add: shell.		self selectLastTabSilently.	self editorShellMemory: self editorTabs selectionIndex.	self editorSubcanvas invalidateNow.	self triggerEvent: #tabAdded</body><body package="StarBrowserUI2">removeTab	| oldShell oldLabel newIndex |	oldShell := self currentEditorShell.	oldLabel := self editorTabs selection.	newIndex := self editorTabs selectionIndex.	oldShell release.	self doSilentlyWithTabs: [self editorTabs list remove: oldLabel].	self editorApplications remove: oldShell.	self editorTabs selectionIndex: (newIndex min: self editorTabs list size).	self editorShellMemory: self editorTabs selectionIndex.	(self widgetAt: #editorTabs) invalidateNow.	self triggerEvent: #tabRemoved</body><body package="StarBrowserUI2">selectLastTabSilently	self doSilentlyWithTabs: [self editorTabs selectionIndex: self editorTabs list size]</body><body package="StarBrowserUI2">toggleToolbar	"Do nothing (don't want it to be switchable because of the Find... entry added by the RBEditor)"</body></methods><methods><class-id>Classifications2.ItemEditor</class-id> <category>private accessing</category><body package="StarBrowserUI2">configuration	^configuration 		ifNil: [configuration := ServicesConfiguration fromServiceRoot: SB2Service]		ifNotNil: [configuration]</body><body package="StarBrowserUI2">configuration: aServicesConfiguration	configuration := aServicesConfiguration</body><body package="StarBrowserUI2">currentEditorShell	^self editorApplications at: self editorTabs selectionIndex</body><body package="StarBrowserUI2">defaultToolbarMenu	^Menu new</body><body package="StarBrowserUI2">editorApplications	^editorApplications</body><body package="StarBrowserUI2">editorShellMemory	"I remember the index of the current shell used. That way, when changing editor tabs, the previous tab can be told to close before I am updated."	^editorShellMemory ifNil: [editorShellMemory := 1] ifNotNil: [editorShellMemory]</body><body package="StarBrowserUI2">editorShellMemory: integer	"I remember the index of the current shell used. That way, when changing editor tabs, the previous tab can be told to close before I am updated."	editorShellMemory := integer</body><body package="StarBrowserUI2">editorSubcanvas	^self widgetAt: #editorTabs</body><body package="StarBrowserUI2">item	| index |	index := self editorTabs selectionIndex.	^(self editorApplications at: index) item</body><body package="StarBrowserUI2">item: anObject 	"Set the item being edited."	| shell index |	index := self editorTabs selectionIndex.	shell := self shellFor: anObject.	shell := shell installIn: self editorSubcanvas				orReuse: self currentEditorShell.	self editorTabs list at: index put: (self labelForItem: anObject).	self editorApplications at: index put: shell.	self editorSubcanvas ifNotNil: [:tabs | tabs invalidateNow]</body><body package="StarBrowserUI2">labelForItem: anItem	^anItem acceptService: ((self configuration currentServiceFor: #label) forStarBrowser: self starBrowser)</body><body package="StarBrowserUI2">shellFor: anObject "	^anObject acceptService: ((self configuration currentServiceFor: #editor) 				forStarBrowser: self starBrowser)"	| editorService menu menuItem |	editorService := EditorService forStarBrowser: self starBrowser.	menu := anObject acceptService: editorService.	self starBrowser toolbarMenu: menu.	menuItem := menu menuItems first."	menuItem := menu atNameKey: #defaultEditors."	^editorService perform: (menu valueForMenuItem: menuItem)</body><body package="StarBrowserUI2">shellFor: anObject nameKey: aNameKey 	| editorService menu menuItem |	editorService := EditorService forStarBrowser: self starBrowser.	menu := anObject acceptService: editorService.	self starBrowser toolbarMenu: menu.	menuItem := menu atNameKey: aNameKey.	^editorService perform: aNameKey</body><body package="StarBrowserUI2">starBrowser	^starBrowser</body><body package="StarBrowserUI2">starBrowser: aStarBrowser	starBrowser := aStarBrowser</body><body package="StarBrowserUI2">widgetsToAdjust	^Set with: #editorTabs</body></methods><methods><class-id>Classifications2.ItemEditor</class-id> <category>interface opening</category><body package="StarBrowserUI2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self editorTabs selectionIndexHolder 		onChangeSend: #editorTabChanged to: self</body></methods><methods><class-id>Classifications2.ItemEditor</class-id> <category>changing</category><body package="StarBrowserUI2">editorTabChanged	(self editorApplications at: self editorShellMemory) loseTab.	self currentEditorShell redisplayIn: self editorSubcanvas.	self editorShellMemory: self editorTabs selectionIndex.	self editorSubcanvas invalidateNow</body><body package="StarBrowserUI2">requestChange	^(self editorApplications at:(self editorTabs selectionIndex)) requestChange</body></methods><methods><class-id>Classifications2.ItemEditor</class-id> <category>events</category><body package="StarBrowserUI2">noticeOfWindowClose: aWindow 	"Make sure that the itemEditorApp has completely released everything it should release."	super noticeOfWindowClose: aWindow.	self release.	self editorApplications do: [:shell | shell editor noticeOfWindowClose: aWindow. shell release].</body></methods><methods><class-id>Classifications2.ItemEditor</class-id> <category>aspects</category><body package="StarBrowserUI2">editorTabs	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^editorTabs isNil		ifTrue:			[editorTabs := SelectionInList new]		ifFalse:			[editorTabs]</body></methods><methods><class-id>Classifications2.ItemEditor</class-id> <category>initialize-release</category><body package="StarBrowserUI2">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	editorApplications := OrderedCollection new.</body><body package="StarBrowserUI2">release	super release.	self editorTabs selectionIndexHolder retractInterestsFor: self.	starBrowser := nil.</body></methods><methods><class-id>Classifications2.ItemEditor</class-id> <category>private</category><body package="StarBrowserUI2">doSilentlyWithTabs: aBlock	self editorTabs selectionIndexHolder retractInterestsFor: self.	aBlock value.	self editorTabs selectionIndexHolder onChangeSend: #editorTabChanged		to: self</body><body package="StarBrowserUI2">updateToolbarFor: app menu: menu 	"Need to set the performer to app!"	self toolbarMenu: menu.	self toolbar performer: app.</body></methods><methods><class-id>Classifications2.ItemEditor class</class-id> <category>instance creation</category><body package="StarBrowserUI2">new	^self shouldNotImplement</body><body package="StarBrowserUI2">starBrowser: aStarBrowser	^self basicNew initialize starBrowser: aStarBrowser</body></methods><methods><class-id>Classifications2.EditorShell</class-id> <category>accessing</category><body package="StarBrowserUI2">actionStack	^self</body><body package="StarBrowserUI2">editor	^editor</body><body package="StarBrowserUI2">editor: anObject	editor := anObject</body><body package="StarBrowserUI2">editorSpec	"Return a FullSpec instance or a symbol with the spec name to use."	^#windowSpec</body><body package="StarBrowserUI2">itemEditor	"The editor part of the StarBrowser this service is used in."	^starBrowser itemEditor</body><body package="StarBrowserUI2">starBrowser: anObject	starBrowser := anObject</body><body package="StarBrowserUI2">toolbar	^toolbar ifNil: [toolbar := Menu new] ifNotNil: [toolbar]</body><body package="StarBrowserUI2">toolbar: anObject	toolbar := anObject</body><body package="StarBrowserUI2">treeEditor	"The tree of the StarBrowser in which this service is used."	^starBrowser classificationsTreeEditor</body></methods><methods><class-id>Classifications2.EditorShell</class-id> <category>protocol</category><body package="StarBrowserUI2">installIn: subcanvas orReuse: existingShell 	"Install the editor for this shell in the subcanvas passed as argument. Try to reuse an existing one if possible."	^self class = existingShell class 		ifTrue: 			[existingShell reuse: self in: subcanvas]		ifFalse: 			[existingShell release.			self installNewIn: subcanvas.			self]</body><body package="StarBrowserUI2">isAllowedToChange: anItem	^true</body><body package="StarBrowserUI2">loseTab	"Tabs are being switched, and the current shell will loose control. Allow the shell to take some precautions."	"By default, nothing is done"</body><body package="StarBrowserUI2">redisplayIn: subcanvas	"Put the editor back in the subcanvas"	self updateSubcanvas: subcanvas.	self itemEditor updateToolbarFor: self editor menu: self toolbar</body><body package="StarBrowserUI2">release	"Try to do all kinds of things. Haven't really checked whether all of this is really needed."	super release.	item := nil.	self editor isNil 		ifFalse: 			[self editor release.			self editor builder ifNotNil: [:b | b source: nil].			self editor builder: nil.			self editor: nil].	self starBrowser: nil.	self toolbar: nil</body></methods><methods><class-id>Classifications2.EditorShell</class-id> <category>private</category><body package="StarBrowserUI2">installNewIn: subcanvas 	"Install a new editor for this shell in the subcanvas passed as argument."	self updateSubcanvas: subcanvas.	self itemEditor updateToolbarFor: self editor menu: self toolbar.	self editor postOpenWith: self editor builder</body><body package="StarBrowserUI2">item	^item</body><body package="StarBrowserUI2">item: anItem	item := anItem</body><body package="StarBrowserUI2">reuse: shell in: subcanvas	"The current subcanvas has an editor of the same kind as the editor in this shell. Give the possibility to just use this existing editor instead of installing a new one."	"By default, I install a new one. But subclasses can do something more efficient."	"Subclasses probably need to do a:			self editor: self starbrowser currentEditorShell editor."	self release.	shell installNewIn: subcanvas.	^shell</body><body package="StarBrowserUI2">updateSubcanvas: subcanvas	self editor builder isNil 		ifTrue: [subcanvas client: self editor]		ifFalse: 			[subcanvas 				client: self editor				spec: self editorSpec				builder: self editor builder]</body></methods><methods><class-id>Classifications2.EditorShell</class-id> <category>action stack</category><body package="StarBrowserUI2">performAction: anAction	anAction starbrowser: starBrowser.	starBrowser class actionStack performAction: anAction.	starBrowser updateUndoAction.</body></methods><methods><class-id>Classifications2.EditorShell class</class-id> <category>instance creation</category><body package="StarBrowserUI2">forItem: anObject starBrowser: aStarBrowser 	^(self basicNew)		starBrowser: aStarBrowser;		item: anObject;		yourself</body><body package="StarBrowserUI2">new	^self shouldNotImplement</body></methods><methods><class-id>Classifications2.TrippyShell</class-id> <category>private</category><body package="StarBrowserUI2">installNewIn: subcanvas	"Install the editor for this shell in the subcanvas passed as argument."	super installNewIn: subcanvas.	self editor builder componentAt: #toolbar				put: (self itemEditor builder componentAt: #toolbar). "trick to get Trippy to open"	self editor inspect: self item</body></methods><methods><class-id>Classifications2.TrippyShell</class-id> <category>protocol</category><body package="StarBrowserUI2">item: anObject	super item: anObject.	self editor: Tools.Trippy.InspectorShell new.	self toolbar: Tools.Trippy.InspectorShell toolbar.</body></methods><methods><class-id>Classifications2.Service</class-id> <category>operations</category><body package="StarBrowserUI2">doBundle: aBundle	^self doPundle: aBundle</body><body package="StarBrowserUI2">doBundleModel: aBundle	^self doPundle: aBundle</body><body package="StarBrowserUI2">doClass: aClass	^self doObject: aClass</body><body package="Classifications2">doClassification: aClassification	^self doObject: aClassification</body><body package="StarBrowserUI2">doMethod: aMethodDefinition	^self doObject: aMethodDefinition</body><body package="StarBrowserUI2">doNameSpace: aNameSpace	^self doObject: aNameSpace</body><body package="Classifications2">doObject: anObject	"Perform the service defined by the receiver on the object passed as argument."	^self subclassResponsibility</body><body package="StarBrowserUI2">doPackage: aPackage	^self doPundle: aPackage</body><body package="StarBrowserUI2">doPackageModel: aPackageModel	^self doPundle: aPackageModel</body><body package="StarBrowserUI2">doParcel: aParcel	^self doPundle: aParcel</body><body package="StarBrowserUI2">doPundle: aPundle	^self doObject: aPundle</body><body package="Classifications2">doRootClassification: aRootClassification	^self doClassification: aRootClassification</body><body package="Classifications2">doSmartClassification: aSmartClassification	^self doClassification: aSmartClassification</body><body package="Classifications2">doUndefinedObject: undefinedObject	"Perform the service defined by the receiver on the UndefinedObject passed as argument. This eliminates nil-checks on users of the service."	"By default I treat it as an object."	^self doObject: undefinedObject</body></methods><methods><class-id>Classifications2.Service class</class-id> <category>registering</category><body package="Classifications2">actionName	"return the name to be used to get the current visitor from the visitor configuration."	^self subclassResponsibility</body><body package="Classifications2">registerIn: aServicesConfiguration	aServicesConfiguration useSilently: self as: self actionName</body><body package="Classifications2">unRegister	ServicesConfiguration allInstances 		do: [:configuration | configuration remove: self as: self actionName]</body><body package="Classifications2">unRegisterFrom: serviceConfiguration	serviceConfiguration remove: self as: self actionName</body></methods><methods><class-id>Classifications2.SB2Service</class-id> <category>accessing</category><body package="StarBrowserUI2">starBrowser	"The StarBrowser this service is being used in."	^starBrowser</body><body package="StarBrowserUI2">starBrowser: anObject	"Rememeber the StarBrowser in which the receiver is being used."	starBrowser := anObject</body></methods><methods><class-id>Classifications2.SB2Service</class-id> <category>private</category><body package="StarBrowserUI2">itemEditor	"The editor part of the StarBrowser this service is used in."	^self starBrowser itemEditor</body><body package="StarBrowserUI2">treeEditor	"The tree of the StarBrowser in which this service is used."	^self starBrowser classificationsTreeEditor</body></methods><methods><class-id>Classifications2.SB2Service class</class-id> <category>instance creation</category><body package="StarBrowserUI2">forStarBrowser: aStarBrowser	^self new starBrowser: aStarBrowser</body></methods><methods><class-id>Classifications2.AbstractClassification</class-id> <category>accessing</category><body package="Classifications2">comment	^comment</body><body package="Classifications2">comment: anObject 	self 		whileTriggering: #changing		do: [self silentComment: anObject]		thenTrigger: #changed</body><body package="Classifications2">configuration	^self parent configuration</body><body package="Classifications2">name	^name</body><body package="Classifications2">name: aNameString	self 		whileTriggering: #changing		do: [self silentName: aNameString]		thenTrigger: #changed</body><body package="Classifications2">parent	^parent</body><body package="Classifications2">parent: anObject	parent := anObject</body><body package="Classifications2">root	^self parent root</body><body package="Classifications2">size	"Return the number of items in the classification."	^self items size</body></methods><methods><class-id>Classifications2.AbstractClassification</class-id> <category>initialize-release</category><body package="Classifications2">initialize	"Initialize a newly created instance. This method must answer the receiver."	name := 'Unnamed classification'.	comment := 'Uncommented classification'</body></methods><methods><class-id>Classifications2.AbstractClassification</class-id> <category>testing</category><body package="Classifications2">includes: anItem	^self items includes: anItem</body><body package="Classifications2">isClassification	"Return whether the receiver is a classification or not. Added this check because there is no explicit item reification (every object is an item). But this means that a minimum protocol has to be placed on Object."	^true</body><body package="Classifications2">isClosedForAdding	^self isOpenToAdding not</body><body package="Classifications2">isEmpty	^self items isEmpty</body><body package="Classifications2">isOpenToAdding	^self isSmart not and: [self parent isOpenToAdding]</body><body package="Classifications2">isRootClassification	^false</body><body package="Classifications2">isSmart	"Returns true when the receiver is a Smart Classification (one that calculates its items instead of listing them explicitly)"	^false</body></methods><methods><class-id>Classifications2.AbstractClassification</class-id> <category>enumerating</category><body package="Classifications2">deepClassificationsDo: aBlock	"Evaluate a block with all my classification children, and their classification children, and their classification children, etc. Takes care of possible cycles."	| stack el processed |	processed := IdentitySet new.	stack := OrderedCollection with: self.	[stack isEmpty] whileFalse: [		el := stack removeFirst.		(processed includes: el) ifFalse: [			processed add: el.			aBlock value: el.			stack addAll: (el items select: [:each | each isClassification])	]]</body><body package="Classifications2">deepDo: aBlock	"Evaluate a block with all my children, and their children, and their children, etc. Takes care of possible cycles."	| stack el processed |	processed := IdentitySet new.	stack := OrderedCollection with: self.	[stack isEmpty] whileFalse: [		el := stack removeFirst.		(processed includes: el) ifFalse: [			processed add: el.			aBlock value: el.			el isClassification ifTrue: [stack addAll: el items]]	]</body><body package="Classifications2">do: aBlock	self items do: aBlock</body></methods><methods><class-id>Classifications2.AbstractClassification</class-id> <category>converting</category><body package="Classifications2">asClassification	"Return a new classification from the receiver."	^(Classification name: self name comment: self comment) silentAddAll: self items</body><body package="Classifications2">asClassificationWithParent: aParent 	" create a copy for cycle prevention"	^self copy parent: aParent</body><body package="Classifications2">asRootClassification	| root |	root := RootClassification name: self name comment: self comment.	root silentAddAll: self items.	^root</body></methods><methods><class-id>Classifications2.AbstractClassification</class-id> <category>printing</category><body package="Classifications2">displayString	^self name</body></methods><methods><class-id>Classifications2.AbstractClassification</class-id> <category>set operations</category><body package="Classifications2">* aClassification	"Return the intersection of the receiver with aClassification (e.g. return a classification containing those items that exist both in the receiver and aClassification)."	^(Classification name: self name , ' * ' , aClassification name		comment: 'Result of the intersection of ' , self name , ' with ' 				, aClassification name) 			silentAddAll: (self items select: [:item | aClassification includes: item]) asSet</body><body package="Classifications2">+ aClassification	"Return the union of the receiver with aClassification (e.g. return a classification containing all items in the receiver and those in a aClassification."	^(Classification name: self name , ' + ' , aClassification name		comment: 'Result of the union of ' , self name , ' with ' 				, aClassification name) 			silentAddAll: (self items copy addAll: aClassification items; yourself)</body><body package="Classifications2">- aClassification 	"Return the difference of the receiver with aClassification (e.g. return a classification with the items in the receiver that are not contained in aClassification."	^(Classification name: self name , ' - ' , aClassification name		comment: 'Result of the difference of ' , self name , ' with ' 				, aClassification name) 			silentAddAll: (self items copy reject: [:item | aClassification includes: item])</body></methods><methods><class-id>Classifications2.AbstractClassification</class-id> <category>private</category><body package="Classifications2">items	"Return a collection of items contained in the receiver"	"Note: If I choose to wrap objects to become items, this should return the unwrapped objects! This is for end-users, not internal."	^self subclassResponsibility</body><body package="StarBrowserUI2">nilParent	"Used to set the parent to nil. Needed for operations such as bossing out classifications."	self parent: nil</body><body package="Classifications2">silentComment: aCommentString	comment := aCommentString</body><body package="Classifications2">silentName: aNameString	name := aNameString</body><body package="Classifications2">whileTriggering: whileTriggerSymbol do: aBlock thenTrigger: endTriggerSymbol	self triggerEvent: whileTriggerSymbol.	aBlock value.	self triggerEvent: endTriggerSymbol.	self root triggerEvent: endTriggerSymbol</body></methods><methods><class-id>Classifications2.AbstractClassification</class-id> <category>copying</category><body package="Classifications2">postCopy	"Don't copy the parent"	super postCopy.	name := name copy.	comment := comment copy</body></methods><methods><class-id>Classifications2.AbstractClassification</class-id> <category>exporting-importing</category><body package="StarBrowserUI2">outputOnName: aString	^self outputOnStream: aString asFilename writeStream</body><body package="StarBrowserUI2">outputOnStream: aStream 	| bos |	bos := BinaryObjectStorage onNew: aStream.	[bos nextPut: self copy nilParent] 			ensure: [bos close]</body></methods><methods><class-id>Classifications2.AbstractClassification class</class-id> <category>instance creation</category><body package="StarBrowserUI2">inputFromName: aString	"Input a classification from a file named aString."	^self inputFromStream: aString asFilename readStream</body><body package="StarBrowserUI2">inputFromStream: aStream	"Import a classification from a Stream."	| bos importedClassification |		bos := self bossReaderOn: aStream.	[importedClassification := bos contents first] 			on: Error			do: 				[:exc | 				bos close.				ClassificationsImportError raise].	bos close.	^importedClassification</body><body package="Classifications2">name: nameString	^self new silentName: nameString</body><body package="Classifications2">name: nameString comment: commentString	^(self name: nameString) silentComment: commentString</body><body package="Classifications2">new	^super new initialize</body></methods><methods><class-id>Classifications2.AbstractClassification class</class-id> <category>private</category><body package="StarBrowserUI2">bossReaderOn: aStream 	"Returns the reader used to import classification exports. We used our own one that can throw exceptions around."	^(BinaryObjectStorage onOld: aStream) 		readerClass: BOSSExceptionThrowingReader</body></methods><methods><class-id>Classifications2.Classification</class-id> <category>accessing</category><body package="Classifications2">at: index	^self items at: index</body></methods><methods><class-id>Classifications2.Classification</class-id> <category>initialize-release</category><body package="Classifications2">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	items := self newItemsCollection</body></methods><methods><class-id>Classifications2.Classification</class-id> <category>private</category><body package="Classifications2">items	^items</body><body package="Classifications2">items: aCollection	"Private: Clients should use addAll:"	items := aCollection do: [:each | each isClassification ifTrue: [each parent: self]]</body><body package="Classifications2">newItemsCollection	^OrderedCollection new</body><body package="Classifications2">silentAdd: anItem	| toAdd |	toAdd := anItem.	anItem isClassification ifTrue: [toAdd := anItem asClassificationWithParent: self].	self items add: toAdd</body><body package="Classifications2">silentAddAll: aCollectionOrClassification	aCollectionOrClassification do: [:each | 		self silentAdd: each]</body><body package="Classifications2">silentAt: anIndex put: anItem 	| toAdd |	toAdd := anItem.	anItem isClassification 		ifTrue: [toAdd := anItem asClassificationWithParent: self].	self items add: toAdd beforeIndex: anIndex</body><body package="Classifications2">silentAt: anIndex putAll: aCollection	aCollection with: (anIndex to: anIndex + aCollection size - 1) do: [:item :index |		self silentAt: index put: item]</body><body package="Classifications2">silentClear	self items do: [:each | each isClassification ifTrue: [each parent: nil]].	items := self newItemsCollection</body><body package="Classifications2">silentRemove: anItem	self items remove: anItem</body></methods><methods><class-id>Classifications2.Classification</class-id> <category>operations</category><body package="Classifications2">acceptService: aService	^aService doClassification: self</body></methods><methods><class-id>Classifications2.Classification</class-id> <category>adding/removing</category><body package="Classifications2">add: anItem	"Trigger a changed event on me and on the root."	self 		whileTriggering: #changing		do: [self silentAdd: anItem]		thenTrigger: #changed</body><body package="Classifications2">addAll: classificationOrCollection	self 		whileTriggering: #changing		do: [self silentAddAll: classificationOrCollection]		thenTrigger: #changed</body><body package="Classifications2">at: anIndex put: anItem	self 		whileTriggering: #changing		do: [self silentAt: anIndex put: anItem]		thenTrigger: #changed</body><body package="Classifications2">at: anIndex putAll: aCollection	self 		whileTriggering: #changing		do: [self silentAt: anIndex putAll: aCollection]		thenTrigger: #changed</body><body package="Classifications2">clear	"Remove all items in the receiver"	self 		whileTriggering: #changing		do: [self silentClear]		thenTrigger: #changed</body><body package="Classifications2">remove: anItem	self 		whileTriggering: #removing		do: [self silentRemove: anItem]		thenTrigger: #removed</body></methods><methods><class-id>Classifications2.Classification</class-id> <category>copying</category><body package="Classifications2">postCopy	super postCopy.	items := items copy.	1 to: items capacity do:		[:i| | value |		nil == (value := items basicAt: i)			ifFalse:				[items basicAt: i put: (value isClassification ifTrue: [value copy parent: self] ifFalse: [value copy])]]</body></methods><methods><class-id>Classifications2.Classification class</class-id> <category>instance creation</category><body package="Classifications2">name: nameString comment: commentString items: aCollection	^(self name: nameString comment: commentString) items: aCollection</body><body package="Classifications2">name: nameString items: aCollection	^(self name: nameString) items: aCollection</body></methods><methods><class-id>Classifications2.RBShell</class-id> <category>accessing</category><body package="StarBrowserUI2">editor	editor ifNil: 			[| anEnvironment |			anEnvironment := self emptyEnvironment.			self 				editor: (Refactory.Browser.RefactoringBrowser onEnvironment: anEnvironment).			self editor navigator updateWithState: (self navigatorState)].	^editor</body><body package="StarBrowserUI2">navigatorState	^navigatorState</body><body package="StarBrowserUI2">navigatorState: anObject	navigatorState := anObject</body><body package="StarBrowserUI2">toolbar	toolbar ifNil: [self toolbar: self buildToolbar].	^toolbar</body></methods><methods><class-id>Classifications2.RBShell</class-id> <category>initialize-release</category><body package="StarBrowserUI2">empty	self navigatorState: self emptyState</body><body package="StarBrowserUI2">forClass: aClass	self navigatorState: (self stateForClass: aClass)</body><body package="StarBrowserUI2">forMethod: aMethodDefinition	self navigatorState: (self stateForMethodDefinition: aMethodDefinition)</body><body package="StarBrowserUI2">forPundle: aPundle	self navigatorState: (self stateForPundle: aPundle)</body></methods><methods><class-id>Classifications2.RBShell</class-id> <category>printing</category><body package="StarBrowserUI2">printOn: aStream	aStream		nextPutAll: self class name;		nextPutAll: ' on: ';		print: self editor currentTool printString</body></methods><methods><class-id>Classifications2.RBShell</class-id> <category>private-environments</category><body package="StarBrowserUI2">emptyEnvironment 	^Refactory.Browser.BrowserEnvironment new</body><body package="StarBrowserUI2">environmentForClass: aClass 	^self emptyEnvironment 		forClasses: (OrderedCollection with: aClass instanceBehavior				with: aClass classBehavior)</body><body package="StarBrowserUI2">environmentForMethodDefinition: aMethodDefinition 	^self emptyEnvironment forClass: aMethodDefinition implementingClass		selectors: (OrderedCollection with: aMethodDefinition selector)</body><body package="StarBrowserUI2">environmentForParcel: aParcel 	^self emptyEnvironment forParcels: (OrderedCollection with: aParcel)</body><body package="StarBrowserUI2">environmentForPundle: aPundle 	^self emptyEnvironment forPundles: (OrderedCollection with: aPundle)</body></methods><methods><class-id>Classifications2.RBShell</class-id> <category>private-navigatorStates</category><body package="StarBrowserUI2">emptyState	"Return an empty navigator state."	^Refactory.Browser.NavigatorState new</body><body package="StarBrowserUI2">stateForCategory: aCategory	"Return a navigator state for a category."	^self emptyState categories: (Array with: aCategory)</body><body package="StarBrowserUI2">stateForClass: aClass 	"Return a navigator state for a class. Add the pundles for the class and the definitions for all of its methods. Select it, as well."	"Has to be refactored to get the check out whether Store is there or not (has to be in the Store extensions then)."	| hierarchyState |	hierarchyState := 'Store.Registry' asQualifiedReference 				ifDefinedDo: [:registry | self stateForPundle: (registry packageForClass: aClass instanceBehavior)]				elseDo: [self stateForCategory: aClass category].	hierarchyState		selectedClass: aClass;		allDefinitions: (aClass selectors 					collect: [:sel | Refactory.Browser.RBMethodDefinition class: aClass selector: sel]);		inheritToClass: aClass;		inheritToType: #class.	^hierarchyState</body><body package="StarBrowserUI2">stateForMethodDefinition: aMethodDefinition	"Return a navigator state for a method definition. Use the one for a class, but set the definition so that the method gets selected."	^(self stateForClass: aMethodDefinition implementingClass) definition: aMethodDefinition</body><body package="StarBrowserUI2">stateForPundle: aPundle	"Return a navigator state for a punlde."	^self emptyState pundles: (Array with: aPundle)</body></methods><methods><class-id>Classifications2.RBShell</class-id> <category>private</category><body package="StarBrowserUI2">addFind	"Adapted from the same method in the RB. As John put it:		This isn't a pretty method, but I want an input field in the toolbar.	 Well, it fits nicely with the rest of my toolbar hacks :-) "	| oldComposite toolbarWidget sbBuilder |	toolbarWidget := self itemEditor widgetAt: #toolbar.	sbBuilder := self itemEditor builder.	oldComposite := sbBuilder composite.	sbBuilder composite: (findWidget := CompositePart new).	self hookFindInBuilder.	Refactory.Browser.RefactoringBrowser findWindowSpec decodeAsLiteralArray component collection 		do: [:each | sbBuilder add: each].	findWidget := WidgetWrapper on: (BoundedWrapper on: findWidget						in: ((LayoutFrame new)								leftOffset: [sbBuilder window width - oldComposite bounds width + toolbarWidget components last bounds right + 10];								leftFraction: 0;								rightOffset: -3;								rightFraction: 1;								topOffset: ["(components at: 2) bounds top + 1" 23];								topFraction: 0;								bottomOffset: ["(components at: 2) bounds bottom - 4" 46];								bottomFraction: 0)).	sbBuilder window component addWrapper: findWidget.	sbBuilder composite: oldComposite</body><body package="StarBrowserUI2">buildToolbar	| newMenu createBufferItem |	newMenu := self editor toolbarMenu copy.	createBufferItem := newMenu atNameKey: #'Create Buffer'.	createBufferItem isNil ifFalse: [newMenu removeItem: createBufferItem].	newMenu menuItems do: 			[:item | 				| adaptor |				adaptor := item value.				item enablementSelector ifNotNil: [:sel | item enablementSelector: nil].				item value: ((PluggableAdaptor on: ValueHolder new) 						getBlock: [:m | false]						putBlock: [:m :v | adaptor value: v]						updateBlock: [:m :a :p | false])].	^newMenu</body><body package="StarBrowserUI2">hookFindInBuilder	self itemEditor builder		aspectAt: #findHolder put: self editor findHolder;		aspectAt: #findList put: self editor findList</body><body package="StarBrowserUI2">installNewIn: subcanvas	"Install a new editor for this shell in the subcanvas passed as argument."	super installNewIn: subcanvas.	self addFind.	editor navigator updateWithState: self navigatorState.	editor codeTool updateDisplay</body><body package="StarBrowserUI2">isUnhooked	^findWidget isNil</body><body package="StarBrowserUI2">rbType	| type |	type := Refactory.Browser.NavigatorState new protocols isEmpty 				ifTrue: [Refactory.Browser.NavigatorState new pundles isEmpty 								ifTrue: [#Class]								ifFalse: [#Package]]				ifFalse: [#Category].	^type</body><body package="StarBrowserUI2">removeFind	| builder |	self isUnhooked ifTrue: [^self].	builder := self itemEditor builder.	(builder window component components includes: findWidget) ifTrue: [builder window component components remove: findWidget].	self unhookFindFromBuilder</body><body package="StarBrowserUI2">reuse: shell in: subcanvas	"The current subcanvas has an editor of the same kind as the editor in this shell. Give the possibility to just use this existing editor instead of installing a new one."	self navigatorState: shell navigatorState.	self editor navigator updateWithState: self navigatorState.	editor codeTool updateDisplay</body><body package="StarBrowserUI2">unhookFindFromBuilder	self itemEditor builder		aspectAt: #findHolder put: nil;		aspectAt: #findList put: nil</body><body package="StarBrowserUI2">updateSubcanvas: subcanvas	self editor builder isNil		ifTrue: [subcanvas client: editor]		ifFalse: [self editor resetBuilder.				subcanvas client: self editor spec: #windowSpec.				self editor navigator updateNavigator.				self editor codeTool updateDisplay].	starBrowser builder window application:  starBrowser</body></methods><methods><class-id>Classifications2.RBShell</class-id> <category>protocol</category><body package="StarBrowserUI2">loseTab	"Tabs are being switched, and the current shell will loose control. Allow the shell to take some precautions."	self removeFind</body><body package="StarBrowserUI2">redisplayIn: subcanvas	"Put the editor back in the subcanvas"	"Note: I remove and re-add the find bar to make sure it is hooked up. Should be better to find something clever to just hook it up again."	super redisplayIn: subcanvas.	self addFind</body><body package="StarBrowserUI2">release	self removeFind.	navigatorState := nil.	findWidget := nil.	super release</body></methods><methods><class-id>Classifications2.StarBrowser2About class</class-id> <category>resources</category><body package="StarBrowserUI2">image	^OpaqueImage		figure: self starbrowser160x160		shape: self starbrowser160x160mask</body></methods><methods><class-id>Classifications2.RenameClassificationAction</class-id> <category>operations</category><body package="StarBrowser2Actions">isUndoable	^oldname ~~ (self item name)</body><body package="StarBrowser2Actions">performAction	oldname := self item name.	newName := Dialog request: 'New name for the classification?'				initialAnswer: oldname.	newName isEmpty ifFalse: [self item name: newName]</body><body package="StarBrowser2Actions">redoAction	newName isEmpty ifFalse: [self item name: newName]</body><body package="StarBrowser2Actions">undoAction	self item name: oldname</body></methods><methods><class-id>Classifications2.RenameClassificationAction</class-id> <category>accessing</category><body package="StarBrowser2Actions">name	^'Rename Classification'</body></methods><methods><class-id>Classifications2.SmartClassificationEditor</class-id> <category>actions</category><body package="StarBrowserUI2">accept	self acceptName.	self acceptDescription.	self acceptComment</body><body package="StarBrowserUI2">acceptComment	"The user accepted the new comment"	| oldComment newComment |	oldComment := self smartClassification comment.	newComment := self commentText value.	oldComment = newComment ifTrue: [^self].	self smartClassification comment: newComment</body><body package="StarBrowserUI2">acceptDescription	"The user accepted the new description"	| oldSource newSource |	oldSource := self smartClassification descriptionSource.	newSource := self descriptionText value.	oldSource = newSource ifTrue: [^self].	self smartClassification descriptionSource: newSource ifInvalidNotifying: (self widgetAt: #descriptionText) controller</body><body package="StarBrowserUI2">acceptName	"The user accepted the name"	| newName oldName |	newName := self name value.	oldName := self smartClassification name.	newName ~= oldName ifTrue: [self smartClassification name: newName]</body></methods><methods><class-id>Classifications2.SmartClassificationEditor</class-id> <category>private</category><body package="StarBrowserUI2">defaultSmartClassification	^SmartClassification name: 'Unnamed' source: '[Array with: 0 with: Set]'</body><body package="StarBrowserUI2">smartClassification	smartClassification isNil ifTrue: [smartClassification := self defaultSmartClassification].	^smartClassification</body><body package="StarBrowserUI2">smartClassification: aSmarClassification	smartClassification := aSmarClassification</body></methods><methods><class-id>Classifications2.SmartClassificationEditor</class-id> <category>aspects</category><body package="StarBrowserUI2">commentText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^commentText isNil		ifTrue:			[commentText := String new asValue]		ifFalse:			[commentText]</body><body package="StarBrowserUI2">descriptionText	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^descriptionText isNil		ifTrue:			[descriptionText := String new asValue]		ifFalse:			[descriptionText]</body><body package="StarBrowserUI2">name	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^name isNil		ifTrue:			[name := String new asValue]		ifFalse:			[name]</body></methods><methods><class-id>Classifications2.SmartClassificationEditor</class-id> <category>events</category><body package="StarBrowserUI2">noticeOfWindowClose: aWindow 	self release.	super noticeOfWindowClose: aWindow</body></methods><methods><class-id>Classifications2.SmartClassificationEditor</class-id> <category>initialize-release</category><body package="StarBrowserUI2">initialize	super initialize.	name := self smartClassification name asValue.	descriptionText := self smartClassification descriptionSource asValue.	commentText := self smartClassification comment asValue.</body></methods><methods><class-id>Classifications2.SmartClassificationEditor class</class-id> <category>instance creation</category><body package="StarBrowserUI2">on: anIntentionalClassification	^(self basicNew smartClassification: anIntentionalClassification) initialize</body></methods><methods><class-id>Classifications2.ConfigurationTests</class-id> <category>tests</category><body package="ClassificationsTests2">testAllServicesFor	| services |	services := testConfiguration allServicesFor: #labeler.	self assert: (services size = 1).	self assert: (services includes: TestService).	services := testConfiguration allServicesFor: #editor.	self assert: (services size = 2).	self assert: (services includes: TestService).	self assert: (services includes: TestOtherService)</body><body package="ClassificationsTests2">testDefinedActions	| definedActions |	definedActions := testConfiguration definedActions.	self assert: (definedActions includes: #editor).	self assert: (definedActions includes: #labeler).</body><body package="ClassificationsTests2">testDoubleUseAs	| configuration services |	configuration := ServicesConfiguration new.	configuration use: TestService as: #labeler.	configuration use: TestService as: #labeler.	services := configuration allServicesFor: #labeler.	self assert: services size = 1</body><body package="ClassificationsTests2">testEmptyServiceAccess	| configuration |	configuration := ServicesConfiguration new.	self should: [configuration currentServiceFor: #label] raise: Error.</body><body package="ClassificationsTests2">testOtherServicesFor	| otherEditorServices |	self assert: (testConfiguration otherServicesFor: #labeler) isEmpty.	otherEditorServices := testConfiguration otherServicesFor: #editor.	self assert: (otherEditorServices size = 1).	self assert: (otherEditorServices first = TestService)</body><body package="ClassificationsTests2">testRemoveAll	testConfiguration removeAll.	self assert: testConfiguration definedActions isEmpty</body><body package="ClassificationsTests2">testRemoving	testConfiguration remove: TestOtherService as: #editor.	self assert: (testConfiguration currentServiceFor: #editor) = TestService.	self assert: (testConfiguration otherServicesFor: #editor) isEmpty.	testConfiguration remove: TestService as: #labeler.	self assert: (testConfiguration definedActions size = 1)</body><body package="ClassificationsTests2">testServiceUsage	| testService |	testService := (testConfiguration currentServiceFor: #editor) new.	self assert: (1 acceptService: testService) = 1.	self assert: (nil acceptService: testService) = 2.	testConfiguration use: TestService as: #editor.	testService := (testConfiguration currentServiceFor: #editor) new.	self assert: (1 acceptService: testService) = #object.	self assert: (nil acceptService: testService) = #nil.</body><body package="ClassificationsTests2">testSimpleUseSilentlyAs	| configuration |	configuration := ServicesConfiguration new.	configuration useSilently: TestService as: #label.	self 		assert: (configuration currentServiceFor: #label) = TestService.</body><body package="ClassificationsTests2">testUseSilentlyAs	| configuration otherServices |	configuration := ServicesConfiguration new.	configuration use: TestService as: #label.	configuration useSilently: TestOtherService as: #label.	self 		assert: (configuration currentServiceFor: #label) = TestService.	otherServices := configuration otherServicesFor: #label.	self assert: otherServices size = 1.	self assert: (otherServices first = TestOtherService)</body></methods><methods><class-id>Classifications2.ConfigurationTests</class-id> <category>private</category><body package="ClassificationsTests2">performActionNameMethodFor: visitor starting: originalVisitor 	"Look recursively through the inheritance hierarchy of the argument (visitor), and perform the first occurence of the method called #actionName on the class where we started the search (originalVisitor)""	^(visitor includesSelector: #actionName) 		ifTrue: [originalVisitor perform: #actionName]		ifFalse: 			[self shouldnt: [self performActionNameMethodFor: visitor superclass starting: originalVisitor] raise: Error]"	^(visitor includesSelector: #actionName) 		ifTrue: [originalVisitor perform: #actionName]		ifFalse: 			[self performActionNameMethodFor: visitor superclass starting: originalVisitor]</body></methods><methods><class-id>Classifications2.ConfigurationTests</class-id> <category>Running</category><body package="ClassificationsTests2">setUp	testConfiguration := ServicesConfiguration new.	testConfiguration		use: TestService as: #labeler;		use: TestService as: #editor;		use: TestOtherService as: #editor</body></methods><methods><class-id>Classifications2.ConfigurationTests</class-id> <category>registration tests</category><body package="ClassificationsTests2">testUseAsExistNew	"pre: config has TestService as current service for #label, and TestOtherService as other service.	 post: config has TestAnotherService as current service, and TestService and TestOtherService as other services"	| configuration otherServices |	configuration := ServicesConfiguration new.	configuration use: TestOtherService as: #label.	configuration use: TestService as: #label.	configuration use: TestAnotherService as: #label.	self 		assert: (configuration currentServiceFor: #label) = TestAnotherService.	otherServices := configuration otherServicesFor: #label.	self assert: otherServices size = 2.	self assert: (otherServices includes: TestService).	self assert: (otherServices includes: TestOtherService)</body><body package="ClassificationsTests2">testUseAsExistOneNew	"pre: config has TestService as current service for #label, and no other services.	 post: config has TestOtherService as current service, and TestService as other service"	| configuration otherServices |	configuration := ServicesConfiguration new.	configuration use: TestService as: #label.	configuration use: TestOtherService as: #label.	self 		assert: (configuration currentServiceFor: #label) = TestOtherService.	otherServices := configuration otherServicesFor: #label.	self assert: otherServices size = 1.	self assert: (otherServices first = TestService)</body><body package="ClassificationsTests2">testUseAsExistOneSame	"pre: config has TestService as current service for #label, and no other services.	 post: config has TestService as current service, and no other services"	| configuration |	configuration := ServicesConfiguration new.	configuration use: TestService as: #label.	configuration use: TestService as: #label.	self 		assert: (configuration currentServiceFor: #label) = TestService.	self assert: (configuration otherServicesFor: #label) isEmpty</body><body package="ClassificationsTests2">testUseAsExistSame1	"pre: config has TestService as current service for #label, and TestOtherService as other service.	 post: config has TestOtherService as current service, and TestService as other service"	| configuration otherServices |	configuration := ServicesConfiguration new.	configuration use: TestOtherService as: #label.	configuration use: TestService as: #label.	configuration use: TestOtherService as: #label.	self 		assert: (configuration currentServiceFor: #label) = TestOtherService.	otherServices := configuration otherServicesFor: #label.	self assert: otherServices size = 1.	self assert: (otherServices includes: TestService).</body><body package="ClassificationsTests2">testUseAsExistSame2	"pre: config has TestService as current service for #label, and TestOtherService as other service.	 post: config has TestOtherService as current service, and TestService as other service"	| configuration otherServices |	configuration := ServicesConfiguration new.	configuration use: TestOtherService as: #label.	configuration use: TestService as: #label.	configuration use: TestService as: #label.	self 		assert: (configuration currentServiceFor: #label) = TestService.	otherServices := configuration otherServicesFor: #label.	self assert: otherServices size = 1.	self assert: (otherServices includes: TestOtherService).</body><body package="ClassificationsTests2">testUseAsNew	"pre: config has no entry for a service #label yet	 post: config has entry for #label as current service, no other services"	| configuration |	configuration := ServicesConfiguration new.	configuration use: TestService as: #label.	self 		assert: (configuration currentServiceFor: #label) = TestService.	self assert: (configuration otherServicesFor: #label) isEmpty</body></methods><methods><class-id>Classifications2.ConfigurationTests</class-id> <category>silent registration tests</category><body package="ClassificationsTests2">testUseSilentlyAsExistNew	"pre: config has TestService as current service for #label, and TestOtherService as other service.	 post: config has TestService as current service, and TestOtherService and TestAnotherService as other services"	| configuration otherServices |	configuration := ServicesConfiguration new.	configuration useSilently: TestService as: #label.	configuration useSilently: TestOtherService as: #label.	configuration useSilently: TestAnotherService as: #label.	self 		assert: (configuration currentServiceFor: #label) = TestService.	otherServices := configuration otherServicesFor: #label.	self assert: otherServices size = 2.	self assert: (otherServices includes: TestAnotherService).	self assert: (otherServices includes: TestOtherService)</body><body package="ClassificationsTests2">testUseSilentlyAsExistOneNew	"pre: config has TestService as current service for #label, and no other services.	 post: config has TestService as current service, and TestOtherService as other service"	| configuration otherServices |	configuration := ServicesConfiguration new.	configuration useSilently: TestService as: #label.	configuration useSilently: TestOtherService as: #label.	self 		assert: (configuration currentServiceFor: #label) = TestService.	otherServices := configuration otherServicesFor: #label.	self assert: otherServices size = 1.	self assert: (otherServices first = TestOtherService)</body><body package="ClassificationsTests2">testUseSilentlyAsExistOneSame	"pre: config has TestService as current service for #label, and no other services.	 post: config has TestService as current service, and no other services"	| configuration |	configuration := ServicesConfiguration new.	configuration useSilently: TestService as: #label.	configuration useSilently: TestService as: #label.	self 		assert: (configuration currentServiceFor: #label) = TestService.	self assert: (configuration otherServicesFor: #label) isEmpty</body><body package="ClassificationsTests2">testUseSilentlyAsExistSame1	"pre: config has TestService as current service for #label, and TestOtherService as other service.	 post: config has TestService as current service, and TestOtherService as other service"	| configuration otherServices |	configuration := ServicesConfiguration new.	configuration useSilently: TestService as: #label.	configuration useSilently: TestOtherService as: #label.	configuration useSilently: TestOtherService as: #label.	self 		assert: (configuration currentServiceFor: #label) = TestService.	otherServices := configuration otherServicesFor: #label.	self assert: otherServices size = 1.	self assert: (otherServices includes: TestOtherService).</body><body package="ClassificationsTests2">testUseSilentlyAsExistSame2	"pre: config has TestService as current service for #label, and TestOtherService as other service.	 post: config has TestService as current service, and TestOtherService as other service"	| configuration otherServices |	configuration := ServicesConfiguration new.	configuration useSilently: TestService as: #label.	configuration useSilently: TestOtherService as: #label.	configuration useSilently: TestService as: #label.	self 		assert: (configuration currentServiceFor: #label) = TestService.	otherServices := configuration otherServicesFor: #label.	self assert: otherServices size = 1.	self assert: (otherServices includes: TestOtherService).</body><body package="ClassificationsTests2">testUseSilentlyAsNew	"pre: config has no entry for a service #label yet	 post: config has entry for #label as current service, no other services"	| configuration |	configuration := ServicesConfiguration new.	configuration useSilently: TestService as: #label.	self 		assert: (configuration currentServiceFor: #label) = TestService.	self assert: (configuration otherServicesFor: #label) isEmpty</body></methods><methods><class-id>Classifications2.IconService</class-id> <category>private</category><body package="StarBrowserUI2">iconFor: iconNameSymbol	^ListIconLibrary visualFor: iconNameSymbol</body></methods><methods><class-id>Classifications2.IconService</class-id> <category>operations</category><body package="StarBrowserUI2">doBundle: aBundle	"Perform the service defined by the receiver on the bundle passed as argument."	^self iconFor: #bundle</body><body package="StarBrowserUI2">doBundleModel: aBundleModel	"Perform the service defined by the receiver on the bundle passed as argument."	| key |	key := (aBundleModel respondsTo: #browserListIconKey) 				ifTrue: [aBundleModel browserListIconKey]				ifFalse: [#bundle].	^self iconFor: key</body><body package="StarBrowserUI2">doClass: aClass	"Perform the service defined by the receiver on the class passed as argument."		^aClass browserIcon isNil ifTrue: [self iconFor: #greenClassC] ifFalse: [aClass browserIcon ]</body><body package="StarBrowserUI2">doClassification: aClassification	"Perform the service defined by the receiver on the extentional classification passed as argument."	^self iconFor: #orangeDiamond</body><body package="StarBrowserUI2">doMethod: aMethodDefinition	^self iconFor: #greenMethodHash</body><body package="StarBrowserUI2">doNameSpace: aNamepace	"Perform the service defined by the receiver on the namespace passed as argument."	^self iconFor: #namespace</body><body package="StarBrowserUI2">doObject: anObject	"Perform the service defined by the receiver on the object passed as argument."	^self iconFor: #blueCircle</body><body package="StarBrowserUI2">doPackage: aPackage	"Perform the service defined by the receiver on the object passed as argument."	^self iconFor: #package</body><body package="StarBrowserUI2">doPackageModel: aPackageModel 	"Perform the service defined by the receiver on the packagemodel passed as argument."	| key |	key := (aPackageModel respondsTo: #browserListIconKey) 				ifTrue: [aPackageModel browserListIconKey]				ifFalse: [#package].	^self iconFor: key</body><body package="StarBrowserUI2">doRootClassification: aRootClassification	^self iconFor: #yellowStar</body><body package="StarBrowserUI2">doSmartClassification: aClassification	"Perform the service defined by the receiver on the classification passed as argument."	^self iconFor: #redDiamond</body></methods><methods><class-id>Classifications2.IconService class</class-id> <category>registering</category><body package="StarBrowserUI2">actionName	^#icon</body></methods><methods><class-id>Classifications2.TestService</class-id> <category>operations</category><body package="ClassificationsTests2">doObject: anObject	"Perform the service defined by the receiver on the object passed as argument."	^#object</body><body package="ClassificationsTests2">doUndefinedObject: undefinedObject	"Perform the service defined by the receiver on the UndefinedObject passed as argument. This eliminates nil-checks on users of the service."	"By default I treat it as an object."	^#nil</body></methods><methods><class-id>Classifications2.TestService class</class-id> <category>registering</category><body package="ClassificationsTests2">actionName	"return the name to be used to get the current visitor from the visitor configuration."	^#testing</body></methods><methods><class-id>Classifications2.PragmaBasedService</class-id> <category>accessing</category><body package="StarBrowserUI2">item	^self treeEditor selectedItem</body></methods><methods><class-id>Classifications2.PragmaBasedService</class-id> <category>private</category><body package="StarBrowserUI2">constructMenuIn: menuName		| aMenu |	aMenu := Menu new.	aMenu		augmentFrom: self class		to: self class		menuName: menuName		for: self.	^aMenu</body></methods><methods><class-id>Classifications2.PragmaBasedService class</class-id> <category>accessing</category><body package="StarBrowserUI2">pragmas		^self subclassResponsibility</body></methods><methods><class-id>Classifications2.PragmaBasedService class</class-id> <category>registering</category><body package="StarBrowserUI2">actionName	"Pragma-based services are no longer registered since they use pragma's to be extended. In time all services will be moved to the pragma system and the services configuration will be moved. Raising an error here means that the service is simply not added when a service configuration is being constructed."	self shouldNotImplement</body><body package="StarBrowserUI2">registerIn: aServicesConfiguration	"Do nothing - these classes are no longer registered since they use pragma's to be extended. In time all services will be moved to the pragma system and the services configuration will be moved."</body></methods><methods><class-id>Classifications2.MenuService</class-id> <category>operations</category><body package="StarBrowserUI2">doClass: aClass	^self menuWithDisablementFor: #class</body><body package="StarBrowserUI2">doClassification: aClassification	^self menuWithDisablementFor: #classification</body><body package="StarBrowserUI2">doMethod: aMethodDefinition	^self menuWithDisablementFor: #method</body><body package="StarBrowserUI2">doObject: anObject	^self menuWithDisablementFor: #object</body><body package="StarBrowserUI2">doRootClassification: aRootClassification	^self menuWithDisablementFor: #rootClassification</body><body package="StarBrowserUI2">doSmartClassification: aSmartClassification	^self menuWithDisablementFor: #smartClassification</body><body package="StarBrowserUI2">doUndefinedObject: undefinedObject	^self menuWithDisablementFor: #undefinedObject</body></methods><methods><class-id>Classifications2.MenuService</class-id> <category>private</category><body package="StarBrowserUI2">constructMenu	^self constructMenuIn: #menu</body><body package="StarBrowserUI2">constructMenuIn: menuName		| aMenu |	overrides := OrderedCollection new.	aMenu := super constructMenuIn: menuName.	^self processOverridesFor: aMenu</body><body package="StarBrowserUI2">constructToolbar	^self constructMenuIn: #toolbar</body><body package="StarBrowserUI2">menuWithDisablementFor: identifier	"Remember the identifier, which is being used by the pragma's during menu building!"	currentIdentifier := identifier.	toolbar := self constructToolbar.	^menu := self constructMenu</body><body package="StarBrowserUI2">processOverridesFor: aMenu	self overrides		do:			[:override | 			| tooverride label item |			label := override key.			item := override value.			tooverride := aMenu menuItems select: [:menuitem | menuitem label = label].			tooverride				do:					[:overridden | 					overridden enabled: item isEnabled.					overridden value: item value]].	^aMenu</body><body package="StarBrowserUI2">promptForClassification	| sortedClassifications classification |	sortedClassifications := SortedCollection sortBlock: [:x :y | x name &lt; y name].	self item root deepClassificationsDo: [:eachClassification | sortedClassifications add: eachClassification].	sortedClassifications remove: self item.	classification := Dialog		choose: 'Choose a classification:'		fromList: sortedClassifications		values: sortedClassifications		lines: 10		cancel: [nil].	^classification</body><body package="StarBrowserUI2">toolBarComponents: aDictionary	"The client has a tool bar, which has been updated. The named	components are presented here in case the client wants to	access them."	^self starBrowser setToolbarEnablements: aDictionary</body><body package="StarBrowserUI2">visualFor: selector	"Needed for the toolbar icons"	^self treeEditor visualFor: selector</body></methods><methods><class-id>Classifications2.MenuService</class-id> <category>accessing</category><body package="StarBrowserUI2">menu	^menu</body><body package="StarBrowserUI2">overrides		overrides ifNil: [overrides := OrderedCollection new].	^overrides</body><body package="StarBrowserUI2">toolbar	^toolbar</body></methods><methods><class-id>Classifications2.MenuService</class-id> <category>binding</category><body package="StarBrowserUI2">actionFor: aKey 	"Return a block that will be sent the message value when the 	button is pressed. Implemented this so that the receiver can	act as an ApplicationModel, which is needed for the toolbar support."	^[self perform: aKey]</body></methods><methods><class-id>Classifications2.MenuService</class-id> <category>private-pragma</category><body package="StarBrowserUI2">isItemEnabled: nameKey desiresDisablementFor: identifierCollection 	"The item with nameKey would like to be disabled if the current type identifier is in identifierCollection."	^(identifierCollection includes: currentIdentifier) not</body><body package="StarBrowserUI2">isItemEnabled: nameKey desiresEnablementFor: identifierCollection	"The item with nameKey would like to be enabled of the current type identifier is in identifierCollection."	^identifierCollection includes: currentIdentifier</body></methods><methods><class-id>Classifications2.MenuService</class-id> <category>menu overriding</category><body package="StarBrowserUI2">override: aMenuString with: anItem	self halt.	self overrides add: aMenuString-&gt;anItem</body><body package="StarBrowserUI2">override: aMenuString with: anItem enablement: aList		(aList		includes: currentIdentifier)		ifTrue: [self overrides add: aMenuString -&gt; anItem]</body></methods><methods><class-id>Classifications2.MenuService class</class-id> <category>resources</category><body package="StarBrowserUI2">hideClassificationsTree	^ToolbarIconLibrary visualFor: #hideClassificationsTree</body></methods><methods><class-id>Classifications2.SmartClassification</class-id> <category>accessing</category><body package="Classifications2">descriptionBlock	^descriptionBlock</body><body package="Classifications2">descriptionSource	^descriptionSource 		ifNil: [self descriptionSource: self defaultDescriptionSource]		ifNotNil: [descriptionSource]</body><body package="Classifications2">descriptionSource: aString 	self 		whileTriggering: #changing		do: [self silentDescriptionSource: aString]		thenTrigger: #changed</body><body package="Classifications2">descriptionSource: aString ifInvalidNotifying: aController 	self 		whileTriggering: #changing		do: [self silentDescriptionSource: aString ifInvalidNotifying: aController]		thenTrigger: #changed</body><body package="Classifications2">itemCalculationErrorBlock	^[:exc | OrderedCollection with: self errorMessage with: exc]</body></methods><methods><class-id>Classifications2.SmartClassification</class-id> <category>private</category><body package="Classifications2">calculateItems	^self descriptionBlock value asOrderedCollection do: [:each | each isClassification ifTrue: [each parent: self]]</body><body package="Classifications2">createBlockFromSource: sourceString ifInvalidNotifying: aController	^Compiler evaluate: ('[', sourceString, ']') notifying: aController logged: false</body><body package="Classifications2">defaultDescriptionSource	^'OrderedCollection with: ''No source given.'' with: ''So used this default.'''</body><body package="Classifications2">errorMessage	^'Error calculating the items of this smart classification. Check your source code.'</body><body package="Classifications2">items	^[self calculateItems] on: self class exceptionRootClass		do: self itemCalculationErrorBlock</body><body package="Classifications2">silentDescriptionSource: aString 	descriptionSource := aString.	descriptionBlock := self createBlockFromSource: aString				ifInvalidNotifying: nil</body><body package="Classifications2">silentDescriptionSource: aString ifInvalidNotifying: aController 	descriptionSource := aString.	^descriptionBlock := self createBlockFromSource: aString				ifInvalidNotifying: aController</body></methods><methods><class-id>Classifications2.SmartClassification</class-id> <category>operations</category><body package="Classifications2">acceptService: aService	^aService doSmartClassification: self</body></methods><methods><class-id>Classifications2.SmartClassification</class-id> <category>testing</category><body package="Classifications2">isSmart	"Returns true when the receiver is a Smart Classification (one that calculates its items instead of listing them explicitly)"	^true</body></methods><methods><class-id>Classifications2.SmartClassification</class-id> <category>copying</category><body package="Classifications2">postCopy	super postCopy.	descriptionSource := descriptionSource copy.	descriptionBlock := descriptionBlock copy</body></methods><methods><class-id>Classifications2.SmartClassification class</class-id> <category>initialize</category><body package="Classifications2">exceptionRootClass	^ExceptionRootClass ifNil: [ExceptionRootClass := self getExceptionRootClass]		ifNotNil: [ExceptionRootClass]</body></methods><methods><class-id>Classifications2.SmartClassification class</class-id> <category>private</category><body package="Classifications2">getExceptionRootClass	"Return the root class of the exception hierarchy for this dialect."	"If this does not work, then we can also go for using 'Smalltalk version' and interpreting the version string for returning the apppropriate root class."	| exceptionRoot |	exceptionRoot := Exception.	[exceptionRoot superclass ~= Object] whileTrue: [exceptionRoot := exceptionRoot superclass].	^exceptionRoot</body></methods><methods><class-id>Classifications2.SmartClassification class</class-id> <category>instance creation</category><body package="Classifications2">name: nameString comment: commentString source: sourceString	^(self name: nameString comment: commentString)		silentDescriptionSource: sourceString</body><body package="Classifications2">name: nameString source: sourceString	^(self name: nameString)		silentDescriptionSource: sourceString</body><body package="Classifications2">name: nameString source: sourceString ifInvalidNotifying: aController	^(self name: nameString)		silentDescriptionSource: sourceString ifInvalidNotifying: aController</body><body package="Classifications2">source: sourceString	^self new		silentDescriptionSource: sourceString</body></methods><methods><class-id>Classifications2.UpdatingClassification</class-id> <category>accessing</category><body package="StarBrowserUI2">notifier	^notifier</body><body package="StarBrowserUI2">notifier: anObject	self unhook.	notifier := anObject.	self hookUp</body></methods><methods><class-id>Classifications2.UpdatingClassification</class-id> <category>converting</category><body package="StarBrowserUI2">asClassificationWithParent: aParent	"Take a copy for cycle protection."	^self parent: aParent</body></methods><methods><class-id>Classifications2.UpdatingClassification</class-id> <category>updating</category><body package="StarBrowserUI2">update: anAspect with: arg 	arg = self notifier		ifTrue: [	self triggerEvent: #changed. self root triggerEvent: #changed]		ifFalse: [super update: anAspect with: arg]</body></methods><methods><class-id>Classifications2.UpdatingClassification</class-id> <category>hooking</category><body package="StarBrowserUI2">hookUp	"Register with the MethodHistory to receive update notifications"	(self notifier isNil or: [self notifier dependents includes: self]) 		ifFalse: [self notifier addDependent: self]</body><body package="StarBrowserUI2">unhook	"Unregister from the MethodHistory"	self notifier isNil ifFalse: [self notifier removeDependent: self]</body></methods><methods><class-id>Classifications2.UpdatingClassification</class-id> <category>copying</category><body package="StarBrowserUI2">postCopy	"Hook up the copy."	super postCopy.	self hookUp</body></methods><methods><class-id>Classifications2.TestOtherService</class-id> <category>operations</category><body package="ClassificationsTests2">doObject: anObject	"Perform the service defined by the receiver on the object passed as argument."	^1</body><body package="ClassificationsTests2">doUndefinedObject: undefinedObject	"Perform the service defined by the receiver on the UndefinedObject passed as argument. This eliminates nil-checks on users of the service."	"By default I treat it as an object."	^2</body></methods><methods><class-id>Classifications2.TestOtherService class</class-id> <category>registering</category><body package="ClassificationsTests2">actionName	"return the name to be used to get the current visitor from the visitor configuration."	^#otherTesting</body></methods><methods><class-id>Classifications2.AbstractAddAction</class-id> <category>operations</category><body package="StarBrowser2Actions">isUndoable	^true</body><body package="StarBrowser2Actions">performAction	self setObjectToAdd.	parentclassification := self starbrowser classificationsTreeEditor 				closestClassificationForSelection.	self starbrowser classificationsTreeEditor 		addToCurrentClassification: object</body><body package="StarBrowser2Actions">undoAction	parentclassification remove: object</body></methods><methods><class-id>Classifications2.AbstractAddAction</class-id> <category>accessing</category><body package="StarBrowser2Actions">object	^object</body><body package="StarBrowser2Actions">object: anObject	object := anObject</body><body package="StarBrowser2Actions">parentclassification	^parentclassification</body><body package="StarBrowser2Actions">parentclassification: anObject	parentclassification := anObject</body></methods><methods><class-id>Classifications2.AbstractAddAction</class-id> <category>private</category><body package="StarBrowser2Actions">setObjectToAdd	^self subclassResponsibility</body></methods><methods><class-id>Classifications2.AddClassificationAction</class-id> <category>private</category><body package="StarBrowser2Actions">createNewClassification	^Classification new</body></methods><methods><class-id>Classifications2.AddClassificationAction</class-id> <category>accessing</category><body package="StarBrowser2Actions">name	^'Add Classification'</body></methods><methods><class-id>Classifications2.AddClassificationAction</class-id> <category>operations</category><body package="StarBrowser2Actions">performAction	" We have to apply a little trick here in order to store the actual classification that is getting added.      When adding a classification to another classification, StarBrowser requires to make a copy in order to prevent cycles.  	As a result, the added classification is not the same as the result of #createNewClassification.	Therefore, we need to compare the items belonging to the parentclassification before the addition with the items after the addition in order to know which classification object actually got added."	| parentitems |	parentclassification := self starbrowser classificationsTreeEditor 				closestClassificationForSelection.	parentitems := parentclassification items copy.	self starbrowser classificationsTreeEditor 		addToCurrentClassification: self createNewClassification.	object := (parentclassification items copy 				select: [:it | (parentitems includes: it) not]) first</body></methods><methods><class-id>Classifications2.LabelService</class-id> <category>operations</category><body package="StarBrowserUI2">doClass: aClass	^aClass name asString</body><body package="StarBrowserUI2">doClassification: aClassification	^aClassification name</body><body package="StarBrowserUI2">doMethod: aMethodDefinition	| aStream |	aStream := WriteStream on: String new.	aStream		nextPutAll: aMethodDefinition selector;		nextPutAll: ' ('.	aMethodDefinition implementingClass == aMethodDefinition inheritingClass		ifTrue: [aStream nextPutAll: aMethodDefinition implementingClass name asString]		ifFalse:			[aStream				nextPutAll: aMethodDefinition inheritingClass name asString;				nextPut: $(;				nextPutAll: aMethodDefinition implementingClass name asString;				nextPut: $)].	aStream nextPut: $).	^aStream contents</body><body package="StarBrowserUI2">doObject: anObject	^anObject printString</body><body package="StarBrowserUI2">doPundle: aPundle	^aPundle name</body><body package="StarBrowserUI2">doSmartClassification: aSmartClassification	^aSmartClassification name</body></methods><methods><class-id>Classifications2.LabelService class</class-id> <category>registering</category><body package="StarBrowserUI2">actionName	^#label</body></methods><methods><class-id>Classifications2.AddSmartClassificationAction</class-id> <category>private</category><body package="StarBrowser2Actions">createNewClassification	^SmartClassification source: 'OrderedCollection new'</body></methods><methods><class-id>Classifications2.AddSmartClassificationAction</class-id> <category>accessing</category><body package="StarBrowser2Actions">name	^'Add Smart Classification'</body></methods><methods><class-id>Classifications2.AddObjectAction</class-id> <category>accessing</category><body package="StarBrowser2Actions">name	^'Add Object'</body></methods><methods><class-id>Classifications2.AddObjectAction</class-id> <category>operations</category><body package="StarBrowser2Actions">redoAction	parentclassification := self starbrowser classificationsTreeEditor 				closestClassificationForSelection.	self starbrowser classificationsTreeEditor 		addToCurrentClassification: object</body></methods><methods><class-id>Classifications2.AddObjectAction</class-id> <category>private</category><body package="StarBrowser2Actions">setObjectToAdd	| expressionString |	expressionString := Dialog 				request: 'Enter a Smalltalk expression (the resulting object will be added):'				initialAnswer: 'Array with: 1 with: 2'.	expressionString isEmpty ifTrue: [^self].	object := Compiler evaluate: expressionString</body></methods><methods><class-id>Classifications2.StarBrowser2</class-id> <category>actions</category><body package="StarBrowserUI2">about	StarBrowser2About open</body><body package="StarBrowserUI2">exportClassification	| filename classification |	filename := CommonFileSelectionDialog saveFile.	filename ifNil: [^self].	classification := self selectedItem.	classification outputOnName: filename.	Dialog warn: 'Classification "', classification name ,'" successfully saved.'</body><body package="StarBrowserUI2">hierarchyBrowser	Dialog warn: 'To do : switch to the hierarchical RB'</body><body package="StarBrowserUI2">importClassification	| filename classification |	filename := CommonFileSelectionDialog openFile.	filename ifNil: [^self].	classification := AbstractClassification inputFromName: filename.	self class openOnClassification: classification</body><body package="StarBrowserUI2">inspectConfiguration	self configuration inspect</body><body package="StarBrowserUI2">paste	"Add the contents of the pasteBuffer to the currently selected classification"	| item |	item := ParagraphEditor currentSelection.	item 		ifNil: [Dialog warn: 'The paste buffer is empty. Copy something first.']		ifNotNil: [self classificationsTreeEditor addToCurrentClassification: item]</body><body package="StarBrowserUI2">performAction: anAction	self class actionStack performAction:(anAction forStarBrowser: self).	self updateUndoAction</body><body package="StarBrowserUI2">performAction: anAction forItem: anItem	self class actionStack performAction:(anAction forStarBrowser: self forItem: anItem).	self updateUndoAction</body><body package="StarBrowserUI2">redoAction	self class actionStack redoTop.	self updateUndoAction</body><body package="StarBrowserUI2">undoAction	self class actionStack undoTop.	self updateUndoAction</body></methods><methods><class-id>Classifications2.StarBrowser2</class-id> <category>drag and drop</category><body package="StarBrowserUI2">dragoverEffect: effect dropSource: aDragDropSource 	^self indexForCursor isInteger		ifTrue: [true]		ifFalse: [self class insertDragCursor show. false]</body><body package="StarBrowserUI2">drop: aDragDropContext 	"A drop has occurred on the change list of a change browser. If the 	 drop is a change then insert it into the list. If the drop is from a 	 browser add a corresponding change."	| items list realTarget |	((aDragDropContext dropTarget clientData at: #effect) = #dropEffectNone) ifTrue: [^self].	items := (DropHelper dragDropContext: aDragDropContext) droppedElements.	list := aDragDropContext dropTarget clientData at: #widget.	realTarget := self indexForCursor.	(realTarget isInteger or: [realTarget &gt; list sequence size])		ifTrue: [(list sequence at: list targetIndex) addAll: items]		ifFalse: [(list sequence at: list targetIndex) at: (realTarget ceiling - list targetIndex) putAll: items]</body><body package="StarBrowserUI2">wantToDrag: aController 	"Answer true if the receiver wants to initiate a drag."	^true</body></methods><methods><class-id>Classifications2.StarBrowser2</class-id> <category>private</category><body package="StarBrowserUI2">adjustLeftOf: id by: adjustment 	"Adjust the left offset of the widget with the given identifier by the adjustment argument."	| layout currentOffset |	layout := (self builder namedComponents at: id) component layout.	currentOffset := layout leftOffset.	^layout leftFraction: layout leftFraction offset: currentOffset + adjustment</body><body package="StarBrowserUI2">buildServicesMenu	| menuBuilder serviceNames services activeService |	menuBuilder := MenuBuilder new.	serviceNames := self configuration definedActions asSortedCollection.	serviceNames do: [:actionName |		menuBuilder beginSubMenuLabeled: actionName.		services := self configuration allServicesFor: actionName.		activeService := self configuration currentServiceFor: actionName.		(services asSortedCollection: [:service1 :service2 | service1 name &lt; service2 name]) do: [:service | 				| item |				item := MenuItem labeled: service name.				item					nameKey: service name;					indication: (service = activeService);					value: [self configuration use: service as: actionName].				menuBuilder addItem: item].		menuBuilder endSubMenu].	^menuBuilder menu</body><body package="StarBrowserUI2">doInitialSelection	self unhookEditor.	self classificationsTreeEditor setInitialSelection.	self itemEditor inNewTab: self classificationsTreeEditor selection.	self hookupToEditor</body><body package="StarBrowserUI2">hookupToEditor	self unhookEditor.	self classificationsTreeEditor 		when: #classificationSelectionChanged		send: #classificationSelectionChanged:		to: self.	self classificationsTreeEditor 		when: #isAllowedToChange		send: #isAllowedToChange:with:		to: self</body><body package="StarBrowserUI2">hookupToRoot	self configuration 		whenAny: #(#handlerAdded #handlerChanged #handlerRemoved)		send: #serviceConfigurationChanged:		to: self.	self configuration 		whenAny: #(#removeAll)		send: #updateToolbar		to: self</body><body package="StarBrowserUI2">invalidateTabs	"Do nothing; sent when the RBTabs goodie is loaded. Implemented here to prevent a MSU"</body><body package="StarBrowserUI2">layoutClassificationsTreeSection	| topOffset |	topOffset := (self isToolbarVisible and: [self isToolbarHorizontal]) 				ifTrue: [self toolbarHeight]				ifFalse: [0].	(self builder componentAt: #classificationsTreeEditor) layout 		topOffset: topOffset</body><body package="StarBrowserUI2">layoutEditingSection	| classificationsTreeLayout |	classificationsTreeLayout := (self builder 				componentAt: #classificationsTreeEditor) layout.	self isClassificationsTreeEditorVisible 		ifTrue: 			[self moveEditingSectionToFraction: classificationsTreeLayout rightFraction				offset: classificationsTreeLayout rightOffset]		ifFalse: [self moveEditingSectionToFraction: 0 offset: 0]</body><body package="StarBrowserUI2">moveEditingSectionToFraction: newFraction offset: offset 	| leftOffset |	(self toolbarLayout)		leftFraction: newFraction offset: offset;		rightFraction: newFraction offset: offset + self toolbarHeight.	leftOffset := (self isToolbarVisible and: [self isToolbarVertical])				ifTrue: [self toolbarHeight]				ifFalse: [0].	(self builder componentAt: #itemEditor) layout leftFraction: newFraction		offset: offset + leftOffset.</body><body package="StarBrowserUI2">setRootClassification: aRootClassification 	self unhookRoot.	self classificationsTreeEditor setRootClassification: aRootClassification.	self itemEditor configuration: aRootClassification configuration.	self builder notNil 		ifTrue: 			[self updateServicesMenu.			self toolbarComponent ifNotNil: [self updateToolbar]].	self hookupToRoot</body><body package="StarBrowserUI2">setToolbarEnablements: aDictionary	"Message sent by the classificationsTreeEditor to set the enablement of toolbar items. Use this to enable/disable the tab related toolbar buttons."	(aDictionary at: #removeTab) isEnabled: (self itemEditor editorApplications size &gt; 1)</body><body package="StarBrowserUI2">unhookEditor	self classificationsTreeEditor removeAllActionsWithReceiver: self</body><body package="StarBrowserUI2">unhookRoot	self root ifNotNil: 			[:myRoot |  myRoot configuration removeAllActionsWithReceiver: self]</body><body package="StarBrowserUI2">updateMenu	"Update the StarBrowser application menu."	| fileMenu |	fileMenu := (self menuBar atNameKey: #File) submenu.	(fileMenu atNameKey: #exportClassification) enabled: self selectedItem isClassification</body><body package="StarBrowserUI2">updateServicesMenu	"Update the View submenu in the application main menu to reflect a change in the services menu"	| servicesMenu |	servicesMenu := (self builder aspectAt: #menuBar) atNameKey: #services.	servicesMenu submenu: self buildServicesMenu.	self builder window menuBar updateMenu</body><body package="StarBrowserUI2">updateToolbar	"Update the menu in an existing configuration bar"	"CHECK - SHOULD BE REMOVED BUT USED WHEN SERVICECONFIG CHANGES"	self toolbarMenu: Menu new</body><body package="StarBrowserUI2">updateUndoAction	| submenu menuitem redoitem |	submenu := ((self builder menuAt: #menuBar) atNameKey: #edit) submenu.	menuitem := submenu atNameKey: #undoAction.	self class actionStack topUndoable = nil 		ifTrue: 			[menuitem enabled: false.			menuitem label: 'Undo']		ifFalse: 			[menuitem enabled: true.			menuitem label: 'Undo ' , self class actionStack topUndoable name].	redoitem := submenu atNameKey: #redoAction.	self class actionStack topRedoable = nil 		ifTrue: 			[redoitem enabled: false.			redoitem label: 'Redo']		ifFalse: 			[redoitem enabled: true.			redoitem label: 'Redo ' , self class actionStack topRedoable name]</body><body package="StarBrowserUI2">wrapperForView: view index: index 	| item wrappee rw configuration |	configuration := self configuration.	item := view sequence at: index.	wrappee := (view sequence wrapperAt: index)					asString: (item acceptService: ((configuration currentServiceFor: #label) forStarBrowser: self starBrowser))					withIcon: (item acceptService: ((configuration currentServiceFor: #icon) forStarBrowser: self starBrowser)).	wrappee textStyle: view textStyle.	wrappee setProps: view.	rw := TreeNodeVisualWrapper on: wrappee.	rw offset: wrappee left.	^BoundedWrapper on: rw</body></methods><methods><class-id>Classifications2.StarBrowser2</class-id> <category>private accessing</category><body package="StarBrowserUI2">configuration	^self root configuration</body><body package="StarBrowserUI2">defaultClassification	^self class defaultClassification</body><body package="StarBrowserUI2">defaultToolbarLayout	| splitterLayout fraction |	splitterLayout := (self widgetAt: #splitter) container layout.	fraction := splitterLayout leftFraction.	^self isToolbarHorizontal 		ifTrue: 			[LayoutFrame 				leftFraction: 0 offset: 0				topFraction: 0 offset: 0				rightFraction: fraction offset: splitterLayout leftOffset				bottomFraction: 0 offset: self toolbarHeight]		ifFalse: 			[MovingLayoutFrame 				leftFraction: fraction offset: splitterLayout rightOffset				topFraction: 0 offset: 0				rightFraction: fraction offset: splitterLayout rightOffset + self toolbarHeight				bottomFraction: 1 offset: 0]</body><body package="StarBrowserUI2">defaultToolbarMenu	^Menu new</body><body package="StarBrowserUI2">editorToolbarMenu	^(self viewMenu atNameKey: #editorToolbar) submenu</body><body package="StarBrowserUI2">indexForCursor	"Get the index in the classifications view for where our mouse currently is."	| view targetIndex |	view := self widgetAt: #classificationsTreeEditor.	targetIndex := view 				insertionOrReplacementIndexFor: view controller sensor cursorPoint.	^targetIndex</body><body package="StarBrowserUI2">itemEditor: anItemEditor	itemEditor := anItemEditor.	self itemEditor 		whenAny: #(#tabAdded tabRemoved)		send: #tabAddedOrRemoved		to: self.</body><body package="StarBrowserUI2">menuBar	^menuBar ifNil: [menuBar := self class menuBar] ifNotNil: [menuBar]</body><body package="StarBrowserUI2">root	^self classificationsTreeEditor root</body><body package="StarBrowserUI2">selectedItem	^self classificationsTreeEditor selection</body><body package="StarBrowserUI2">toolbarClass	| policy |	policy := LookPreferences widgetPolicy lookPolicyClass new.	^self isToolbarHorizontal			ifTrue: [policy toolBarClass]			ifFalse: [policy verticalToolBarClass].</body><body package="StarBrowserUI2">viewMenu	^((self builder aspectAt: #menuBar) atNameKey: #view) submenu</body><body package="StarBrowserUI2">widgetsToAdjust	"Return the identifiers of the widgets that need their top adjusted when the toolbar is toggled."	^OrderedCollection new</body></methods><methods><class-id>Classifications2.StarBrowser2</class-id> <category>accessing</category><body package="StarBrowserUI2">classificationsTreeEditor	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^classificationsTreeEditor isNil		ifTrue:			[classificationsTreeEditor := Classifications2.ClassificationTreeEditor new]		ifFalse:			[classificationsTreeEditor]</body><body package="StarBrowserUI2">itemEditor	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^itemEditor isNil		ifTrue:			[itemEditor := Classifications2.ItemEditor new]		ifFalse:			[itemEditor]</body><body package="StarBrowserUI2">toolbar	| toolbar |	toolbar := super toolbar.	toolbar performer: self itemEditor.	^toolbar</body></methods><methods><class-id>Classifications2.StarBrowser2</class-id> <category>events</category><body package="StarBrowserUI2">isAllowedToChange: anItem with: callback 	^callback 		value: (self itemEditor currentEditorShell isAllowedToChange: anItem)</body><body package="StarBrowserUI2">noticeOfWindowClose: aWindow 	"Make sure that the itemEditorApp has completely released everything it should release."	super noticeOfWindowClose: aWindow.	self itemEditor noticeOfWindowClose: aWindow.	self release.</body></methods><methods><class-id>Classifications2.StarBrowser2</class-id> <category>changing</category><body package="StarBrowserUI2">classificationSelectionChanged: selection 	self itemEditor item: selection.	self updateMenu</body><body package="StarBrowserUI2">serviceConfigurationChanged: serviceIdentifier	"The services configuration has changed. React to this."	(#editor == serviceIdentifier) ifTrue: [self updateToolbar].	self updateServicesMenu</body><body package="StarBrowserUI2">tabAddedOrRemoved	"An editor tab has been added or been removed. Update the toolbar of the classifications tree editor accordingly."	self classificationsTreeEditor updateClassificationsTreeMenu</body></methods><methods><class-id>Classifications2.StarBrowser2</class-id> <category>actions-view</category><body package="StarBrowserUI2">makeEditorConfigurationBarHorizontal	"To be refactored!"	| editorToolbarMenu horizontalItem verticalItem currentEditorBarSpec splitter |	editorToolbarMenu := (self viewMenu atNameKey: #editorToolbar) submenu.	horizontalItem := editorToolbarMenu 				atNameKey: #editorConfigurationBarHorizontal.	verticalItem := editorToolbarMenu 				atNameKey: #editorConfigurationBarVertical.	horizontalItem indication: true.	verticalItem indication: false.	currentEditorBarSpec := self toolbarComponent.	self builder composite removeComponent: currentEditorBarSpec.	self addToolbar.	self adjustTopOf: #classificationsTreeEditor by: self toolbarHeight.	self adjustLeftOf: #itemEditor by: self toolbarHeight negated.	splitter := self widgetAt: #splitter.	splitter belowWidgets remove: self toolbarID.	splitter aboveWidgets add: self toolbarID.	self builder window refresh</body><body package="StarBrowserUI2">makeEditorConfigurationBarVertical	"To be refactored!"	| editorToolbarMenu horizontalItem verticalItem currentEditorBarSpec splitter |	editorToolbarMenu := (self viewMenu atNameKey: #editorToolbar) submenu.	horizontalItem := editorToolbarMenu 				atNameKey: #editorConfigurationBarHorizontal.	verticalItem := editorToolbarMenu 				atNameKey: #editorConfigurationBarVertical.	horizontalItem indication: false.	verticalItem indication: true.	currentEditorBarSpec := self toolbarComponent.	self builder composite removeComponent: currentEditorBarSpec.	toolbarLayout := nil.	self addToolbar.	self adjustTopOf: #classificationsTreeEditor by: self toolbarHeight negated.	self adjustLeftOf: #itemEditor by: self toolbarHeight.	splitter := self widgetAt: #splitter.	splitter aboveWidgets remove: self toolbarID.	splitter belowWidgets add: self toolbarID.	self builder window refresh</body><body package="StarBrowserUI2">toggleClassificationsTree	| menuItem |	(self isToolbarHorizontal and: [self isToolbarVisible]) 		ifTrue: [self makeEditorConfigurationBarVertical].	self isClassificationsTreeEditorVisible 		ifTrue: 			[self hideAll: #(#classificationsTreeEditor #splitter).			self layoutEditingSection]		ifFalse: 			[self showAll: #(#classificationsTreeEditor #splitter).			 self layoutEditingSection].		menuItem := self viewMenu atNameKey: #classificationsTree.	menuItem indication: menuItem indication not.	self builder window refresh</body><body package="StarBrowserUI2">toggleEditorBar	| horizontalItem verticalItem hideItem editorToolbar |	editorToolbar := self editorToolbarMenu.	horizontalItem := editorToolbar atNameKey: #editorConfigurationBarHorizontal.	verticalItem := editorToolbar atNameKey: #editorConfigurationBarVertical.	hideItem := editorToolbar atNameKey: #editorConfigurationBarVisible.	hideItem indication 		ifTrue: [horizontalItem disable. verticalItem disable]		ifFalse: [horizontalItem enable. verticalItem enable].	hideItem indication: hideItem indication not.	isToolbarVisible ifTrue: [self hide: self toolbarID] ifFalse: [self show: self toolbarID].	isToolbarVisible := isToolbarVisible not.	self isToolbarHorizontal ifTrue: [self layoutClassificationsTreeSection] ifFalse: [		self layoutEditingSection	].	self builder window refresh.</body></methods><methods><class-id>Classifications2.StarBrowser2</class-id> <category>testing</category><body package="StarBrowserUI2">isClassificationsTreeEditorVisible	^(self builder componentAt: #classificationsTreeEditor) isVisible</body><body package="StarBrowserUI2">isToolbarHorizontal	| editorToolbarMenu |	editorToolbarMenu := ((self menuBar atNameKey: #view) submenu atNameKey: #editorToolbar) submenu.	^(editorToolbarMenu atNameKey: #editorConfigurationBarHorizontal) indication.</body><body package="StarBrowserUI2">isToolbarVertical	^self isToolbarHorizontal not</body></methods><methods><class-id>Classifications2.StarBrowser2</class-id> <category>interface opening</category><body package="StarBrowserUI2">postBuildWith: aBuilder 	super postBuildWith: aBuilder.	self hookupToEditor</body><body package="StarBrowserUI2">postOpenWith: aBuilder 	super postOpenWith: aBuilder.	self updateServicesMenu.	self doInitialSelection.	self updateUndoAction</body></methods><methods><class-id>Classifications2.StarBrowser2</class-id> <category>initialize-release</category><body package="StarBrowserUI2">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	classificationsTreeEditor := ClassificationTreeEditor onClassification: self defaultClassification starBrowser: self.	self itemEditor: (ItemEditor starBrowser: self)</body><body package="StarBrowserUI2">release	super release.	self unhookRoot.	self unhookEditor.	self itemEditor removeAllActionsWithReceiver: self.	self classificationsTreeEditor release.</body></methods><methods><class-id>Classifications2.StarBrowser2</class-id> <category>interface closing</category><body package="StarBrowserUI2">requestForWindowClose	^self itemEditor currentEditorShell isAllowedToChange: nil</body></methods><methods><class-id>Classifications2.StarBrowser2 class</class-id> <category>interface opening</category><body package="StarBrowserUI2">openOnClassification: aClassification	| sb |	sb := self new setRootClassification: aClassification asRootClassification.	^self openOn: sb</body></methods><methods><class-id>Classifications2.StarBrowser2 class</class-id> <category>private</category><body package="StarBrowserUI2">createInsertDragCursor	| standard newImage newMask |	standard := Cursor standardDrag.	newImage := standard image copy.	newImage rowAt: 1 putAll: #[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1];		rowAt: 2 putAll: #[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1].	newMask := standard mask copy.	newMask rowAt: 1 putAll: #[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1];		rowAt: 2 putAll: #[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1].	^Cursor image: newImage mask: newMask hotSpot: standard hotSpot copy name: 'Inserting drag cursor'.</body></methods><methods><class-id>Classifications2.StarBrowser2 class</class-id> <category>resources</category><body package="StarBrowserUI2">insertDragCursor	^InsertDragCursor ifNil: [InsertDragCursor := self createInsertDragCursor]		ifNotNil: [InsertDragCursor]</body></methods><methods><class-id>Classifications2.StarBrowser2 class</class-id> <category>default</category><body package="StarBrowserUI2">defaultClassification	^DefaultClassification 		ifNil: [DefaultClassification := self makeDefaultClassification]		ifNotNil: [DefaultClassification]</body><body package="StarBrowserUI2">makeDefaultClassification	| classification developmentClassification |	classification := RootClassification name: 'Root' comment: 'Root Classification for this StarBrowser'.	classification configuration: (ServicesConfiguration fromServiceRoot: SB2Service).	developmentClassification := RootClassification name: '(beta) Development'.	developmentClassification		add: self todoListItem;		add: (OrderedCollection with: 1 with: 2 with: 3);		add: ((RootClassification name: 'StarBrowser2 thingies') add:StarBrowser2; add: Service"; add: self; add: classification configuration");		add: (SmartClassification name: 'Collection classes' source: 'Collection withAllSubclasses').	classification		add: developmentClassification;		add: (RootClassification name: 'My Favourites').	^classification</body><body package="StarBrowserUI2">resetDefaultClassification	DefaultClassification := nil</body><body package="StarBrowserUI2">todoListItem	| classification |	classification := RootClassification name: 'TO DO' comment: 'List of items to do for StarBrowser2'.	classification		add: 'Move toolbar buttons for vertical toolbar down a bit';		add: 'MacOS-X vertical toolbar for VW 7.2.1 and up (conditional loading!)';		add: 'Optimize service usage (cache and reuse label and icon services)';		add: 'Add user suggestions (see e-mails)';		add: 'Smart classification definer';		add: 'Multiple selection in classifications tree';		add: 'Optimize the Advance service'.	^classification</body></methods><methods><class-id>Classifications2.StarBrowser2 class</class-id> <category>temporary</category><body package="StarBrowserUI2">fixDependencies	| sb owners |	sb := self allInstances.	sb isEmpty ifTrue: [^self].	sb := sb first.	owners := sb allOwnersWeakly: true.	(owners select: [:each | each isKindOf: MethodContext])		do: [:each | each receiver: nil].	(owners select: [:each | each isKindOf: MenuBar])		do: [:each | each performer: nil].	(owners select: [:each | each isKindOf: ToolBar])		do: [:each | each performer: nil].	(owners select: [:each | each isKindOf: DependencyTransformer])		do: [:each | each setReceiver: nil aspect: #'i' selector: #'i'].	(owners select: [:each | each isKindOf: UIBuilder])		do: [:each | each source: nil].	(owners select: [:each | each isKindOf: ApplicationWindow])		do: [:each | each controller: nil; model: nil].	(owners select: [:each | each isKindOf: Array])		do: [:array | 1 to: array size do: [:i | ((array at: i) =  sb) ifTrue: [array at: 1 put: nil]]].	(owners select: [:each | each isKindOf: Tools.Trippy.NamedVariable])		do: [:each | each object: nil].	(owners select: [:each | each isKindOf: ComboBoxInputBoxController])		do: [:each | each performer: nil].</body></methods><methods><class-id>Classifications2.StarBrowser2 class</class-id> <category>accessing</category><body package="StarBrowserUI2">actionStack	actionStack isNil ifTrue:[actionStack := ActionStack new].	^actionStack</body><body package="StarBrowserUI2">actionStack: anObject	actionStack := anObject</body></methods><methods><class-id>Classifications2.RemoveAction</class-id> <category>operations</category><body package="StarBrowser2Actions">isUndoable	^true</body><body package="StarBrowser2Actions">performAction		parentclassification := self starbrowser classificationsTreeEditor		parentForSelection.	parentclassification ifNotNil: [parentclassification remove: self item]</body><body package="StarBrowser2Actions">redoAction	parentclassification remove: self item</body><body package="StarBrowser2Actions">undoAction	parentclassification items addFirst: self item.	parentclassification root triggerEvent: #changed</body></methods><methods><class-id>Classifications2.RemoveAction</class-id> <category>accessing</category><body package="StarBrowser2Actions">name	^'Remove Item'</body></methods><methods><class-id>Classifications2.EditorService</class-id> <category>operations</category><body package="StarBrowserUI2">doBundleModel: aBundleModel 	"Perform the service defined by the receiver on thebundlemodel passed as argument."	currentIdentifier := #bundle.	^self constructMenuIn: #toolbar</body><body package="StarBrowserUI2">doClass: aClass 	currentIdentifier := #class.	^self constructMenuIn: #toolbar</body><body package="StarBrowserUI2">doClassification: aSmartClassification	currentIdentifier := #classification.	^self constructMenuIn: #toolbar</body><body package="StarBrowserUI2">doMethod: aMethodDefinition	currentIdentifier := #method.	^self constructMenuIn: #toolbar</body><body package="StarBrowserUI2">doNameSpace: aNameSpace	currentIdentifier := #nameSpace.	^self constructMenuIn: #toolbar</body><body package="StarBrowserUI2">doObject: anObject	currentIdentifier := #object.	^self constructMenuIn: #toolbar"	^TrippyShell forItem: anObject starBrowser: self starBrowser"</body><body package="StarBrowserUI2">doPackageModel: aPackageModel 	"Perform the service defined by the receiver on the packagemodel passed as argument."	currentIdentifier := #package.	^self constructMenuIn: #toolbar</body><body package="StarBrowserUI2">doParcel: aParcel	"Perform the service defined by the receiver on the parcel passed as argument."	currentIdentifier := #parcel.	^self constructMenuIn: #toolbar</body><body package="StarBrowserUI2">doRootClassification: aSmartClassification	currentIdentifier := #rootClassification.	^self constructMenuIn: #toolbar</body><body package="StarBrowserUI2">doSmartClassification: aSmartClassification	currentIdentifier := #smartClassification.	^self constructMenuIn: #toolbar</body><body package="StarBrowserUI2">doUndefinedObject: undefinedObject	"Perform the service defined by the receiver on the UndefinedObject passed as argument. This eliminates nil-checks on users of the service."	currentIdentifier := #undefinedObject.	^self constructMenuIn: #toolbar</body></methods><methods><class-id>Classifications2.EditorService</class-id> <category>private-pragma</category><body package="StarBrowserUI2">highlight: anIcon ifCurrentIs: key 	^"self starBrowser currentEditorKey"  #defaultEditors == key 		ifTrue: [self warpedIcon: anIcon]		ifFalse: [anIcon]</body><body package="StarBrowserUI2">showItemWhenIn: identifierCollection	"The item with nameKey would like to be shown if the current type identifier is in identifierCollection."	^identifierCollection includes: currentIdentifier</body><body package="StarBrowserUI2">warpedIcon: anIcon	"Return a 'warped' icon to indicate that it is the current one."	"Just return something completely different for the moment to see if this works..."	| newFigure newShape |	newFigure := anIcon figure image rotatedByDegrees: 45.	newShape := anIcon shape.	anIcon figure: newFigure shape: newShape.	^anIcon</body></methods><methods><class-id>Classifications2.EditorService</class-id> <category>accessing</category><body package="StarBrowserUI2">toolbar	^toolbar</body></methods><methods><class-id>Classifications2.EditorService class</class-id> <category>resources</category><body package="StarBrowserUI2">buildImageWithEnablement: baseString	^OpaqueImageWithEnablement		figure: (ToolbarIconLibrary perform: (baseString, '20x20') asSymbol)		shape: (ToolbarIconLibrary perform: (baseString, '20x20mask') asSymbol)		inactiveMask: (ToolbarIconLibrary perform: (baseString, '20x20bw') asSymbol)</body><body package="StarBrowserUI2">icon	^self buildImageWithEnablement: #fullBrowser</body></methods><methods><class-id>Classifications2.ActionStack</class-id> <category>accessing</category><body package="StarBrowser2Actions">actions	^actions</body><body package="StarBrowser2Actions">actions: anObject	actions := anObject</body><body package="StarBrowser2Actions">lastundo	^lastundo</body><body package="StarBrowser2Actions">lastundo: anObject	lastundo := anObject</body></methods><methods><class-id>Classifications2.ActionStack</class-id> <category>initialize-release</category><body package="StarBrowser2Actions">initialize	actions := List new.	lastundo := List new</body></methods><methods><class-id>Classifications2.ActionStack</class-id> <category>stack operations</category><body package="StarBrowser2Actions">pop	^self actions removeFirst</body><body package="StarBrowser2Actions">popRedo	^self lastundo removeFirst</body><body package="StarBrowser2Actions">push: anAction	self actions addFirst: anAction</body><body package="StarBrowser2Actions">pushRedo: anAction	self lastundo addFirst: anAction</body><body package="StarBrowser2Actions">top	^self actions first</body><body package="StarBrowser2Actions">topRedo	^self lastundo first</body></methods><methods><class-id>Classifications2.ActionStack</class-id> <category>action operations</category><body package="StarBrowser2Actions">containsRedoable	^self lastundo size &gt; 0</body><body package="StarBrowser2Actions">isEmpty	^self actions isEmpty</body><body package="StarBrowser2Actions">performAction: anAction	self push: anAction.	anAction performAction</body><body package="StarBrowser2Actions">redoAction: anAction	self pushRedo: anAction.	anAction redoAction</body><body package="StarBrowser2Actions">redoTop	 self push: self popRedo redoAction.</body><body package="StarBrowser2Actions">topRedoable	^self containsRedoable ifTrue: [self lastundo first] ifFalse: [nil]</body><body package="StarBrowser2Actions">topUndoable	self actions do: [:el | el isUndoable ifTrue: [^el]].	^nil</body><body package="StarBrowser2Actions">undoTop	self pushRedo: self pop undoAction.</body></methods><methods><class-id>Classifications2.ActionStack class</class-id> <category>instance creation</category><body package="StarBrowser2Actions">new	^ super new initialize</body></methods><methods><class-id>Graphics.MovingLayoutFrame</class-id> <category>accessing</category><body package="StarBrowser2VerticalToolbar">leftOffset: theLeftOffset	"Set the receiver's left offset to be theLeftOffset."	| difference |	left ifNil: [left := 0].	difference := theLeftOffset - left.	left := theLeftOffset.	self rightOffset: self rightOffset + difference</body><body package="StarBrowser2VerticalToolbar">topOffset: theTopOffset	| difference |	top ifNil: [top := 0].	difference := theTopOffset - top.	top := theTopOffset.	self bottomOffset: self bottomOffset + difference</body></methods><methods><class-id>UI.WinXPVerticalToolBar</class-id> <category>private</category><body package="StarBrowser2VerticalToolbar">layoutComponentsForBounds: newBounds	"The receiver has been sized to the given parameters.  	Re-layout all of the receiver's components."	self layoutComponentsVerticallyForBounds: newBounds</body></methods><methods><class-id>Classifications2.ImportExportTests</class-id> <category>private</category><body package="StarBrowser2Tests">createNewClass	"self new createNewClass"	| previousPackage createdClass |	previousPackage := Store.Registry currentPackage.		[Store.Registry 		currentPackage: (Store.Registry packageNamed: 'StarBrowser2Tests').	createdClass := Root.Smalltalk 				defineClass: self newClassName				superclass: #{Object} asQualifiedReference				indexedType: #none				private: false				instanceVariableNames: ''				classInstanceVariableNames: ''				imports: ''				category: 'StarBrowser2Tests'] 			ensure: [Store.Registry currentPackage: previousPackage].	^createdClass</body><body package="StarBrowser2Tests">cyclicExampleClassification	| classification |	classification := RootClassification name: 'Cyclic classification'.	classification add: 1.	classification add: (Array with: 1).	(classification at: 2) at: 1 put: (classification at: 2).	self assert: ((classification items at: 2) == ((classification items at: 2) at: 1)).	^classification</body><body package="StarBrowser2Tests">newClassName	^#'FooClassGeneratedForTests'</body><body package="StarBrowser2Tests">removeClass: aClass	aClass removeFromSystem</body><body package="StarBrowser2Tests">smallExampleClassification 	| classification |	classification := RootClassification name: 'Tests Example' comment: 'Classification used in the Unit Tests for the Classification framework.'.	classification		add: (OrderedCollection with: 1 with: 2 with: 3);		add: #aSymbolItem;		add: ((RootClassification name: 'Sub Classification') add: (Set with: 'one' with: 'two'));		add: (SmartClassification source: 'OrderedCollection with: Array with: 2').	^classification</body></methods><methods><class-id>Classifications2.ImportExportTests</class-id> <category>testing</category><body package="StarBrowser2Tests">testErrorHandling	| newClass newObject classification stream newClassification |	newClass := self createNewClass.	newObject := newClass new.	classification := RootClassification name: 'Testing'.	classification add: 1; add: newObject; add: $z.	stream := ReadWriteStream on: BinaryStorageBytes new.	[classification outputOnStream: stream] 			ensure: [stream close].	newObject := nil.	self removeClass: newClass.	newClass := nil.	ObjectMemory globalCompactingGC.	stream reset.	self shouldnt: [[newClassification := AbstractClassification inputFromStream: stream] 			ensure: [stream close]] raise: Error.	self assert: newClassification name = 'Testing'.	self assert: newClassification size = 3.	self assert: (newClassification items at: 1) = 1.	self assert: (newClassification items at: 2) = 'Error during import: The identifier FooClassGeneratedForTests has no binding'.	self assert: (newClassification items at: 3) = $z.</body><body package="StarBrowser2Tests">testExportCyclicClassification	| classification stream |	classification := self cyclicExampleClassification.	stream := WriteStream on: BinaryStorageBytes new.	self 		shouldnt: [[classification outputOnStream: stream] ensure: [stream close]]		raise: Error.	self assert: stream contents notEmpty</body><body package="StarBrowser2Tests">testExportEmptyRootClassification	| classification stream |	classification := RootClassification name: 'Root'.	stream := WriteStream on: BinaryStorageBytes new.	self 		shouldnt: [[classification outputOnStream: stream] ensure: [stream close]]		raise: Error.	self assert: stream contents notEmpty</body><body package="StarBrowser2Tests">testExportImportCyclicClassification	| classification stream readClassification |	classification := self cyclicExampleClassification.	stream := ReadWriteStream on: BinaryStorageBytes new.		[classification outputOnStream: stream.	stream reset.	readClassification := AbstractClassification inputFromStream: stream] 			ensure: [stream close].	self assert: readClassification isClassification.	self deny: ((readClassification items at: 2) == ((readClassification items at: 2) at: 1)).	self assert: (((readClassification items at: 2) at: 1) == (((readClassification items at: 2) at: 1) at: 1)).</body><body package="StarBrowser2Tests">testExportImportEmptyRootClassification	| classification stream readClassification |	classification := RootClassification name: 'test'.	stream := ReadWriteStream on: BinaryStorageBytes new.		[classification outputOnStream: stream.	stream reset.	readClassification := AbstractClassification inputFromStream: stream] 			ensure: [stream close].	self assert: readClassification isClassification.	self assert: readClassification name = 'test'</body><body package="StarBrowser2Tests">testExportImportSmallClassification	| classification stream readClassification originalFingerPrint newFingerPrint |	classification := self smallExampleClassification.	originalFingerPrint := WriteStream on: String new.	classification deepDo: [:each | originalFingerPrint nextPutAll: each printString].	stream := ReadWriteStream on: BinaryStorageBytes new.		[classification outputOnStream: stream.	stream reset.	readClassification := AbstractClassification inputFromStream: stream] 			ensure: [stream close].	self assert: readClassification isClassification.	self assert: readClassification name = 'Tests Example'.	self assert: readClassification comment = 'Classification used in the Unit Tests for the Classification framework.'.	newFingerPrint := WriteStream on: String new.	readClassification deepDo: [:each | newFingerPrint nextPutAll: each printString].	self assert: originalFingerPrint contents = newFingerPrint contents</body><body package="StarBrowser2Tests">testExportSmallClassification	| classification stream |	classification := self smallExampleClassification.	stream := WriteStream on: BinaryStorageBytes new.	self 		shouldnt: [[classification outputOnStream: stream] ensure: [stream close]]		raise: Error.	self assert: stream contents notEmpty</body></methods><methods><class-id>Classifications2.ServicesConfiguration</class-id> <category>public</category><body package="Classifications2">allServicesFor: aSymbol 	^(self otherServicesFor: aSymbol) copy		addFirst: (self currentServiceFor: aSymbol); yourself</body><body package="Classifications2">currentServiceFor: aSymbol 	^self basicServiceInformationFor: aSymbol do: [:handlerInfo | handlerInfo key]</body><body package="Classifications2">definedActions	^self configuration keys</body><body package="Classifications2">otherServicesFor: aSymbol 	^self basicServiceInformationFor: aSymbol do: [:handlerInfo | handlerInfo value]</body><body package="Classifications2">remove: aClass as: aSymbol 	"Remove aClass as possible handler for an action defined by aSymbol. If it is the current action: set one of the other handlers to take over and remove it anyway. Of there are no other handlers, then remove the action alltogether."	(self definedActions includes: aSymbol) ifFalse: [^self].	(self currentServiceFor: aSymbol) = aClass 		ifTrue: [self basicRemove: aClass asCurrentServiceFor: aSymbol]		ifFalse: [self basicRemove: aClass asOtherServiceFor: aSymbol].	self triggerEvent: #handlerRemoved with: aSymbol with: aClass.</body><body package="Classifications2">removeAll	"Remove all the actions and labels, effectively emptying the configuration."	self definedActions copy do: [:action | self configuration removeKey: action].	self triggerEvent: #removeAll</body><body package="Classifications2">use: aClass as: aSymbol 	"aClass is now the handler for an action defined by aSymbol. Use the newly added handler for aSymbol. Users that do not want this behaviour should have a look at #useSilently:as:"	self 		use: aClass		as: aSymbol		addBlock: 			[:currentHandlerInfo :currentHandler :otherHandlers | 			otherHandlers add: currentHandler.			(otherHandlers includes: aClass) ifTrue: [otherHandlers remove: aClass].			currentHandlerInfo key: aClass].	self triggerEvent: #handlerChanged with: aSymbol with: aClass</body><body package="Classifications2">useSilently: aClass as: aSymbol 	"aClass is now the handler for an action defined by aSymbol. Keep the currently installed handler for aSymbol if one exists. Users that do not want this behaviour should have a look at #use:as:"	self 		use: aClass		as: aSymbol		addBlock: 			[:currentHandlerInfo :currentHandler :otherHandlers | 			(otherHandlers includes: aClass) ifFalse: [otherHandlers add: aClass]].	self triggerEvent: #handlerAdded with: aSymbol with: aClass</body></methods><methods><class-id>Classifications2.ServicesConfiguration</class-id> <category>private</category><body package="Classifications2">basicRemove: aClass asCurrentServiceFor: aSymbol 	"Remove the current handler for aSymbol. If there are other handlers: set one of the other handlers. Iff there are no other handlers, then remove the action alltogether. Do not send a #changed message."	| otherHandlers |	otherHandlers := self otherServicesFor: aSymbol.	otherHandlers isEmpty 		ifTrue: [self configuration removeKey: aSymbol]		ifFalse: 			[self use: otherHandlers first as: aSymbol.			self basicRemove: aClass asOtherServiceFor: aSymbol]</body><body package="Classifications2">basicRemove: aClass asOtherServiceFor: aSymbol 	"Remove aClass as other handler for an action defined by aSymbol. Do not perform any checks or send a #changed message."	(self configuration at: aSymbol) value remove: aClass</body><body package="Classifications2">basicServiceInformationFor: aSymbol do: actionBlock 	^self 		basicServiceInformationFor: aSymbol		do: actionBlock		ifAbsent: 			[self 				error: 'There is no handler defined for this action (' , aSymbol asString 						, ')!']</body><body package="Classifications2">basicServiceInformationFor: aSymbol do: actionBlock ifAbsent: absentBlock	| handlerInfo |	handlerInfo := self configuration at: aSymbol		ifAbsent: 			[^absentBlock value].	^actionBlock value: handlerInfo</body><body package="Classifications2">configuration	configuration isNil ifTrue: [configuration := IdentityDictionary new].	^configuration</body><body package="Classifications2">use: aClass as: aSymbol addBlock: block	| currentHandlerInfo currentHandler |	currentHandlerInfo := self configuration at: aSymbol				ifAbsentPut: 					[self configuration at: aSymbol put: (aClass -&gt;OrderedCollection new). ^self].	currentHandler := currentHandlerInfo key.	(currentHandler = aClass) ifTrue: [^self].	block value: currentHandlerInfo value: currentHandler value: currentHandlerInfo value.	self triggerEvent: #handlerChanged with: aSymbol with: aClass.</body></methods><methods><class-id>Classifications2.ServicesConfiguration</class-id> <category>initialize-release</category><body package="Classifications2">reBuildFromClasses: serviceClasses	self removeAll.	serviceClasses do: [:handler | self use: handler as: handler actionName]</body></methods><methods><class-id>Classifications2.ServicesConfiguration class</class-id> <category>loading-unloading actions</category><body package="Classifications2">classesInPackageOrParcel: aPackageOrParcel 	"return the classes defined in the given Package, Packagemodel or Parcel"	^aPackageOrParcel isParcel 		ifTrue: [aPackageOrParcel definedClasses]		ifFalse: [aPackageOrParcel getImagePundle definedClasses]</body><body package="Classifications2">postLoad: aPackageOrParcel 	"Set this action in the postLoad: field of your package/parcel, and the visitors in your package/parcel will automatically add themselves to the current configuration after your package/parcel is loaded. See also #preUnload for the inverse operation."	| services allConfigurations |	services := self serviceClassesInPackageOrParcel: aPackageOrParcel.	allConfigurations := ServicesConfiguration allInstances.	services do: 			[:service | 			allConfigurations do: [:configuration | service registerIn: configuration]]</body><body package="Classifications2">preUnLoad: aPackageOrParcel 	"Set this action in the preUnload: field of your package/parcel, and the visitors in your package/parcel will automatically remove themselves from the current configuration before your package/parcel is unloaded. See also #postLoad: for the inverse operation."	(self serviceClassesInPackageOrParcel: aPackageOrParcel) 		do: [:service | service unRegister]</body><body package="Classifications2">serviceClassesInPackageOrParcel: aPackageOrParcel 	"self visitorsInPackageOrParcel: (Store.Registry packageNamed: 'Classifications2')"	"self visitorsInPackageOrParcel: (Parcel parcelNamed: 'StarBrowser2')"	| allVisitors |	allVisitors := Service allSubclasses.	^(self classesInPackageOrParcel: aPackageOrParcel) 		select: [:each | allVisitors includes: each]</body></methods><methods><class-id>Classifications2.ServicesConfiguration class</class-id> <category>instance creation</category><body package="Classifications2">fromPackageNamed: aString	^self fromPackageOrParcel: (Store.Registry packageNamed: aString)</body><body package="Classifications2">fromPackageOrParcel: aPundle	^self fromServiceClasses: (self serviceClassesInPackageOrParcel: aPundle)</body><body package="Classifications2">fromServiceClasses: serviceClassCollection	^self new reBuildFromClasses: serviceClassCollection</body><body package="Classifications2">fromServiceRoot: aServiceRootClass 	"Select all the subclasses that concretized the #actionName method."	^self fromServiceClasses: (aServiceRootClass withAllSubclasses 				select: [:serviceClass | ([serviceClass actionName] on: Error do: [:exc | false]) ~= false])</body><body package="Classifications2">withAllServices	^self fromServiceRoot: Service</body></methods><methods><class-id>Classifications2.ClassificationTests</class-id> <category>Running</category><body package="ClassificationsTests2">setUp	emptyClassification := self getEmptyClassification.	exampleClassification := self getExampleClassification</body><body package="ClassificationsTests2">tearDown	emptyClassification := nil.	exampleClassification := nil</body></methods><methods><class-id>Classifications2.ClassificationTests</class-id> <category>tests</category><body package="ClassificationsTests2">testAdd	emptyClassification add: 1.	self assert: (emptyClassification size = 1).	self assert: (emptyClassification includes: 1).</body><body package="ClassificationsTests2">testAddAll	emptyClassification addAll: #(a b c).	self assert: (emptyClassification size = 3).	self assert: (emptyClassification includes: #a).	self assert: (emptyClassification includes: #b).	self assert: (emptyClassification includes: #c).</body><body package="ClassificationsTests2">testAtPut	| items |	items := exampleClassification items.	self assert: items size = 4.	exampleClassification at: 3 put: #At3.	self assert: items size = 5.	self assert: (items at: 3) == #At3.	exampleClassification at: 0 put: #At0.	self assert: items size = 6.	self assert: items first == #At0.	exampleClassification at: 1 put: #At1.	self assert: items size = 7.	self assert: items first == #At1.	exampleClassification at: items size put: #At7.	self assert: items size = 8.	self assert: (items at: items size - 1) == #At7.	exampleClassification at: items size + 1 put: #Last.	self assert: items size = 9.	self assert: (items at: items size) == #Last.	self should: [exampleClassification at: items size + 5 put: #Error] raise: SubscriptOutOfBoundsError</body><body package="ClassificationsTests2">testAtPutAll	| items |	items := exampleClassification items.	self assert: items size = 4.	exampleClassification at: 2 putAll: #().	self assert: items size = 4.	exampleClassification at: 3 putAll: #(#At3 #At4 #At5).	self assert: items size = 7.	self assert: (items at: 3) == #At3.	self assert: (items at: 4) == #At4.	self assert: (items at: 5) == #At5.	exampleClassification at: 0 putAll: #(#At0).	self assert: items size = 8.	self assert: items first == #At0.	exampleClassification at: 1 putAll: #(#At1a #At1b).	self assert: items size = 10.	self assert: items first == #At1a.	self assert: (items at: 2) == #At1b.	exampleClassification at: items size putAll: #(At10a At10b At10c).	self assert: items size = 13.	self assert: (items at: 10) == #At10a.	self assert: (items at: 11) == #At10b.	self assert: (items at: 12) == #At10c.	exampleClassification at: items size + 1 putAll: #(Lasta Lastb).	self assert: items size = 15.	self assert: (items at: items size - 1) == #Lasta.	self assert: (items at: items size) == #Lastb.	self should: [exampleClassification at: items size + 5 putAll: #(Error)] raise: SubscriptOutOfBoundsError</body><body package="ClassificationsTests2">testClassificationAsRoot	| subClassification newRoot |	subClassification := exampleClassification at: 3.	newRoot := subClassification asRootClassification.	self assert: newRoot isRootClassification.	self shouldnt: 			[1 to: newRoot size				do: 					[:index | 					self 						assert: (subClassification at: index) == (newRoot at: index)]]		raise: Error</body><body package="ClassificationsTests2">testClassificationTesting	self assert: exampleClassification isClassification.	self deny: (exampleClassification items first isClassification).	self assert: (exampleClassification items at: 3) isClassification.	self assert: (exampleClassification items at: 4) isClassification.</body><body package="ClassificationsTests2">testClear	exampleClassification clear.	self assert: exampleClassification isEmpty</body><body package="ClassificationsTests2">testConfiguration	| subClassification usedConfiguration |	usedConfiguration := exampleClassification configuration.	subClassification := exampleClassification at: 3.	self assert: (subClassification configuration == usedConfiguration)</body><body package="ClassificationsTests2">testDeepClassificationsDo	| str |	str := WriteStream on: String new.	exampleClassification deepClassificationsDo: [:item |		str print: item; cr].	self assert: str contents = 'a Classifications2.RootClassificationa Classifications2.Classificationa Classifications2.SmartClassification'</body><body package="ClassificationsTests2">testDeepClassificationsDoCyclic1	| cyclicClassification cycle str |	cyclicClassification := RootClassification name: 'Cyclic Root classification'.	cyclicClassification		add: 1;		add: (Classification name: 'Classification containing itself');		add: 2.	(cycle := cyclicClassification items at: 2) add: cycle.	str := WriteStream on: String new.	cyclicClassification deepClassificationsDo: [:item |		str print: item; cr].	self assert: str contents = 'a Classifications2.RootClassificationa Classifications2.Classificationa Classifications2.Classification'</body><body package="ClassificationsTests2">testDeepClassificationsDoCyclic2	| cyclicClassification cycle str |	cyclicClassification := RootClassification name: 'Cyclic Root classification'.	cycle := RootClassification name: 'Classification containing itself'.	cycle add: cycle.	cyclicClassification		add: 1;		add: cycle;		add: 2.	str := WriteStream on: String new.	cyclicClassification deepClassificationsDo: [:item |		str print: item; cr].	self assert: str contents = 'a Classifications2.RootClassificationa Classifications2.Classificationa Classifications2.Classification'</body><body package="ClassificationsTests2">testDeepDo	| str |	str := WriteStream on: String new.	exampleClassification deepDo: [:item |		str print: item; cr].	self assert: str contents = 'a Classifications2.RootClassificationOrderedCollection (1 2 3)#aSymbolItema Classifications2.Classificationa Classifications2.SmartClassificationSet (''one'' ''two'')Array2'</body><body package="ClassificationsTests2">testDeepDoCyclic1	| cyclicClassification cycle str |	cyclicClassification := RootClassification name: 'Cyclic Root classification'.	cyclicClassification		add: 1;		add: (Classification name: 'Classification containing itself');		add: 2.	(cycle := cyclicClassification items at: 2) add: cycle.	str := WriteStream on: String new.	cyclicClassification deepDo: [:item |		str print: item; cr].	self assert: str contents = 'a Classifications2.RootClassification1a Classifications2.Classification2a Classifications2.Classification'</body><body package="ClassificationsTests2">testDeepDoCyclic2	| cyclicClassification cycle str |	cyclicClassification := RootClassification name: 'Cyclic Root classification'.	cycle := RootClassification name: 'Classification containing itself'.	cycle add: cycle.	cyclicClassification		add: 1;		add: cycle;		add: 2.	str := WriteStream on: String new.	cyclicClassification deepDo: [:item |		str print: item; cr].	self assert: str contents = 'a Classifications2.RootClassification1a Classifications2.Classification2a Classifications2.Classification'</body><body package="ClassificationsTests2">testDifference	| classification1 classification2 union |	classification1 := (RootClassification name: '1') addAll: (OrderedCollection with: 1 with: 2 with: 1 with: 3).	classification2 := (RootClassification name: '2') addAll: (OrderedCollection with: 1 with: 2 with: 4 with: 2).	union := classification1 - classification2.	self assert: union size = 1.	self assert: (union items includes: 3).	self assert: (union name = '1 - 2')</body><body package="ClassificationsTests2">testIncludes	| secondItem |	secondItem := exampleClassification at: 2.	self assert: (exampleClassification includes: secondItem).	self deny: (exampleClassification includes: 42).</body><body package="ClassificationsTests2">testIntersectionWithDoubles	| classification1 classification2 intersection |	classification1 := (RootClassification name: '1') addAll: (OrderedCollection with: 1 with: 2 with: 1 with: 4).	classification2 := (RootClassification name: '2') addAll: (OrderedCollection with: 1 with: 4 with: 4 with: 0).	intersection := classification1 * classification2.	self assert: intersection size = 2.	self assert: (intersection items includes: 1).	self assert: (intersection items includes: 4).	self assert: (intersection name = '1 * 2')</body><body package="ClassificationsTests2">testIsOpenToAdding	| items newSmartClassification |	self assert: exampleClassification isOpenToAdding.	items := exampleClassification items.	self assert: (items at: 3) isOpenToAdding.	self deny: (items at: 4) isOpenToAdding.	newSmartClassification := SmartClassification name: 'sub smart'				source: 'OrderedCollection with: (Classifications2.Classification name: ''sub sub'' items: #(1 2))'.	exampleClassification add: newSmartClassification.	self deny: newSmartClassification isOpenToAdding.	self deny: newSmartClassification items first isOpenToAdding</body><body package="ClassificationsTests2">testIsRootClassification	| subClassification |	self assert: exampleClassification isRootClassification.	subClassification := exampleClassification at: 3.	self deny: subClassification isRootClassification</body><body package="ClassificationsTests2">testParent	| subClassification |	self should: [exampleClassification parent isNil] raise: Error.	subClassification := exampleClassification at: 3.	self assert: (subClassification parent == exampleClassification)</body><body package="ClassificationsTests2">testRemoving	| firstItem |	firstItem := exampleClassification at: 1.	self assert: (exampleClassification includes: firstItem).	self assert: (exampleClassification size = 4).	exampleClassification remove: firstItem.	self assert: (exampleClassification size = 3).	self deny: (exampleClassification includes: 1).</body><body package="ClassificationsTests2">testRoot	| subClassification |	self assert: exampleClassification root == exampleClassification.	subClassification := exampleClassification at: 3.	self assert: (subClassification root == exampleClassification)</body><body package="ClassificationsTests2">testRootAsClassification	| newClassification |	newClassification := exampleClassification 				asClassificationWithParent: emptyClassification.	self shouldnt: 			[1 to: newClassification size				do: 					[:index | 					self 						assert: (exampleClassification at: index) == (newClassification at: index)]]		raise: Error</body><body package="ClassificationsTests2">testSimpleIntersection	| classification1 classification2 intersection |	classification1 := (RootClassification name: '1') addAll: (OrderedCollection with: 1 with: 2 with: 3 with: 4).	classification2 := (RootClassification name: '2') addAll: (OrderedCollection with: 1 with: 9 with: 4 with: 0).	intersection := classification1 * classification2.	self assert: intersection size = 2.	self assert: (intersection items includes: 1).	self assert: (intersection items includes: 4).	self assert: (intersection name = '1 * 2')</body><body package="ClassificationsTests2">testSmartClassificationCreation	| smartClassification items |	smartClassification := SmartClassification name: 'Test' source: 'OrderedCollection with: 1 with: 2'.	self assert: (smartClassification descriptionSource =  'OrderedCollection with: 1 with: 2').	items := smartClassification items.	self assert: (items class == OrderedCollection).	self assert: (items size = 2).	self assert: (items includes: 1).	self assert: (items includes: 2)</body><body package="ClassificationsTests2">testSmartClassificationCreationWithEvaluationError	| smartClassification items |	smartClassification := SmartClassification source: 'Set with: 1 with: 2 with: 3 zork'.	self assert: (smartClassification descriptionSource =  'Set with: 1 with: 2 with: 3 zork').	self shouldnt: [items := smartClassification items] raise: Error.	self assert: (items class == OrderedCollection).	self assert: (items size = 2).	self assert: items first isString.	self assert: ((items at: 2) isKindOf: MessageNotUnderstood)</body><body package="ClassificationsTests2">testSmartClassificationCreationWithSyntaxError	"Note: by checking the messageText this test works in both VW and Squeak. Using #should:raise: would not work, because the exception classes are different between both dialects."	| rootClassification |	rootClassification := RootClassification 				name: 'Root for intentional classification tests'.		[SmartClassification parent: rootClassification		source: 'OrderedCollection;  ;  ;  ;'] 			on: Exception			do: [:exc | exc messageText = 'Compiler Nothing more expected -&gt;; ; ; ;']</body><body package="ClassificationsTests2">testSmartClassificationTesting	self deny: exampleClassification isSmart.	self should: [exampleClassification items first isSmart] raise: MessageNotUnderstood.	self deny: (exampleClassification items at: 3) isSmart.	self assert: (exampleClassification items at: 4) isSmart.</body><body package="ClassificationsTests2">testUnion	| classification1 classification2 union |	classification1 := (RootClassification name: '1') addAll: (OrderedCollection with: 1 with: 2 with: 3).	classification2 := (RootClassification name: '2') addAll: (OrderedCollection with: 1 with: 2 with: 4).	union := classification1 + classification2.	self assert: union size = 6.	self assert: (union items select: [:item | item = 1]) size = 2.	self assert: (union items select: [:item | item = 2]) size = 2.	self assert: (union items select: [:item | item = 3]) size = 1.	self assert: (union items select: [:item | item = 4]) size = 1.	self assert: (union name = '1 + 2')</body></methods><methods><class-id>Classifications2.ClassificationTests</class-id> <category>Private</category><body package="ClassificationsTests2">getConfiguration	^ServicesConfiguration fromPackageNamed: 'ClassificationsTests2'</body><body package="ClassificationsTests2">getEmptyClassification	^(RootClassification name: 'Tests') configuration: self getConfiguration</body><body package="ClassificationsTests2">getExampleClassification 	| classification |	classification := RootClassification name: 'Tests Example' comment: 'Classification used in the Unit Tests for the Classification framework.'.	classification configuration: self getConfiguration.	classification		add: (OrderedCollection with: 1 with: 2 with: 3);		add: #aSymbolItem;		add: ((RootClassification name: 'Sub Classification') add: (Set with: 'one' with: 'two'));		add: (SmartClassification source: 'OrderedCollection with: Array with: 2').	^classification</body></methods><methods><class-id>Classifications2.DropHelper</class-id> <category>processing</category><body package="StarBrowserUI2">dropContextClass	^Array with: (self clientData at: #navigatorState) classOrNameSpace</body><body package="StarBrowserUI2">dropContextClassifications2Item	^Array with: (self clientData at: #item)</body><body package="StarBrowserUI2">dropContextInspectorObject	^self clientData collect: [:trippyElement | trippyElement value]</body><body package="StarBrowserUI2">dropContextItem	^Array with: (self clientData at: #item)</body><body package="StarBrowserUI2">dropContextParcel	^(self clientData at: #navigatorState) parcels</body><body package="StarBrowserUI2">dropContextProtocol	| theClass protocol classificationName |	theClass := self clientData at: #class.	protocol := self clientData at: #protocol.	classificationName := theClass name asString , ' - ' , protocol asString.	^Array with: (SmartClassification name: classificationName				source: '(', theClass printString, ' organization listAtCategoryNamed: #''', protocol, ''') collect: [:sel | MethodDefinition class: ', theClass printString, ' selector: sel]')</body><body package="StarBrowserUI2">dropContextPundle	^(self clientData at: #navigatorState) pundles</body><body package="StarBrowserUI2">dropContextSelector	| selectors toAdd |	selectors := self clientData at: #selector.	toAdd := selectors 				collect: [:sel | MethodDefinition class: (self clientData at: #class) selector: sel].	^toAdd</body></methods><methods><class-id>Classifications2.DropHelper</class-id> <category>private</category><body package="StarBrowserUI2">clientData	^self dragDropContext sourceData clientData</body><body package="StarBrowserUI2">dragDropContext	^dragDropContext</body><body package="StarBrowserUI2">dragDropContext: anObject	dragDropContext := anObject</body><body package="StarBrowserUI2">droppedSomethingUnknown	"Do nothing"	^nil</body></methods><methods><class-id>Classifications2.DropHelper</class-id> <category>error handling</category><body package="StarBrowserUI2">doesNotUnderstand: aMessage	^('dropContext*' match: aMessage selector)		ifTrue: [self droppedSomethingUnknown]		ifFalse: [super doesNotUnderstand: aMessage]</body></methods><methods><class-id>Classifications2.DropHelper</class-id> <category>public</category><body package="StarBrowserUI2">droppedElements	^self process: self dragDropContext sourceData key</body><body package="StarBrowserUI2">process: aDropContextKey	| keyString |	keyString := aDropContextKey asString.	^self perform: ('dropContext', (keyString at: 1 put: (keyString first asUppercase); yourself)) asSymbol</body></methods><methods><class-id>Classifications2.DropHelper class</class-id> <category>instance creation</category><body package="StarBrowserUI2">dragDropContext: aDragDropContext	^self new dragDropContext: aDragDropContext</body></methods><methods><class-id>Tools.MethodFilterClassification</class-id> <category>private</category><body package="StarBrowserUI2">privateSelectClass: aClass	"Return true if this class is worth searching, false if it definitely	is not worth searching. Filters such as MethodFilterReference	will want to search all classes, unless combined with another	filter that restricts them using &amp;."	^targetClassification items includes: aClass</body><body package="StarBrowserUI2">privateSelectClass: aClass selector: sel method: method	"Return true if the receiver matches the specified method,	or false if not."	| toCheck |	toCheck := targetClassification items.	^(toCheck includes: aClass) or: [toCheck includes: (MethodDefinition class: aClass selector: sel)]</body><body package="StarBrowserUI2">selectNameSpace: nameSpace key: name binding: binding	"Return true if the receiver matches the specified method,	or false if not."	^targetClassification items includes: nameSpace</body></methods><methods><class-id>Tools.MethodFilterClassification</class-id> <category>accessing</category><body package="StarBrowserUI2">targetClassification: aClassification	targetClassification := aClassification</body></methods><methods><class-id>Tools.MethodFilterClassification</class-id> <category>printing</category><body package="StarBrowserUI2">auxiliaryDisplayString	^(#in1p &lt;&lt; #dialogs &gt;&gt; 'in &lt;1p&gt;') expandMacrosWith: targetClassification</body><body package="StarBrowserUI2">displayString	^(#In1p &lt;&lt; #dialogs &gt;&gt; 'In &lt;1p&gt;') expandMacrosWith: targetClassification</body></methods><methods><class-id>Tools.MethodFilterClassification</class-id> <category>ordering</category><body package="StarBrowserUI2">priority	^5</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor</class-id> <category>private accessing</category><body package="StarBrowserUI2">configuration	^self root configuration</body><body package="StarBrowserUI2">defaultClassification	^self class defaultClassification</body><body package="StarBrowserUI2">defaultToolbarMenu	^self class toolbar</body><body package="StarBrowserUI2">indexForCursor	"Get the index in the classifications view for where our mouse currently is."	| view targetIndex |	view := self widgetAt: #classificationsTree.	targetIndex := view 				insertionOrReplacementIndexFor: view controller sensor cursorPoint.	^targetIndex</body><body package="StarBrowserUI2">parentForSelection	"Return the closes classification for the currently selected element in the classifications tree. If the selection is a classification, the closes classification is that classification. It it is not a classification, the closest one is the classification that item blongs to."	| index treeModel node neededLevel |	treeModel := (self widgetAt: #classificationsTree) sequence.	index := self classificationsTree selectionIndex.	node := treeModel wrapperAt: index.	node value isClassification		ifTrue: [^node value isRootClassification ifTrue: [node value] ifFalse: [node value parent]].	neededLevel := node levelDescription size - 1.	[node levelDescription size &lt;= neededLevel and: [node value isClassification]] whileFalse: [		index := index - 1.		node := treeModel wrapperAt: index.		].	^node value</body><body package="StarBrowserUI2">root	^root</body><body package="StarBrowserUI2">selectedItem	^self classificationsTree selection</body><body package="StarBrowserUI2">starBrowser	^starBrowser</body><body package="StarBrowserUI2">starBrowser: aStarBrowser	starBrowser := aStarBrowser</body><body package="StarBrowserUI2">widgetsToAdjust	"Return the identifiers of the widgets that need their top adjusted when the toolbar is toggled."	^OrderedCollection with: #classificationsTree</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor</class-id> <category>drag and drop</category><body package="StarBrowserUI2">doDrag: aController 	"Drag the currently selected change. Include all available information so that the 	drop target can use whatever it needs."	| dm |	dm := DragDropManager withDropSource: (ConfigurableDropSource new giveFeedbackSelector: #dragoverEffect:dropSource:; receiver: self)				withData: (self dragClientData: aController).	dm doDragDrop</body><body package="StarBrowserUI2">dragEnter: aDragDropContext 	"A drag has entered the classifications tree.	 If the receiver is happy to accept a drag from the target then	 fill-in the appropriate data and answer that dragging should continue."	| existingDropSource newDropSource |	(self widgetAt: #classificationsTree) takeFocus.	existingDropSource := aDragDropContext dropSource.	newDropSource := ConfigurableDropSource new		 giveFeedbackSelector: #dragoverEffect:dropSource:;		receiver: self.	existingDropSource oneWayBecome: newDropSource.	aDragDropContext dropTarget clientData: self dropClientData.	^self copyKeyPressed ifTrue: [#dropEffectCopy] ifFalse: [#dropEffectMove]</body><body package="StarBrowserUI2">dragLeave: aDragContext 	"A drag has left the change list of a change browser. If the drag contains a 	change, we must restore the state of the list."	self restoreListStateFrom: aDragContext dropTarget clientData.	aDragContext dropTarget clientData: nil.	^#dropEffectNone</body><body package="StarBrowserUI2">dragOver: aDragDropContext 	"A drag is over the classifications list."	| list target effect |	list := aDragDropContext dropTarget clientData at: #widget.	list showClassificationDropFeedbackIn: aDragDropContext		allowScrolling: true.	target := list sequence at: list targetIndex.	effect := (target isClassification and: [target isOpenToAdding]) 		ifFalse: [#dropEffectNone]		ifTrue: 			[self copyKeyPressed ifTrue: [#dropEffectCopy] ifFalse: [#dropEffectMove]].	aDragDropContext dropTarget clientData at: #effect put: effect.	^effect</body><body package="StarBrowserUI2">dragoverEffect: effect dropSource: aDragDropSource 	^self indexForCursor isInteger		ifTrue: [true]		ifFalse: [self class insertDragCursor show. false]</body><body package="StarBrowserUI2">drop: aDragDropContext 	"A drop has occurred on the change list of a change browser. If the 	 drop is a change then insert it into the list. If the drop is from a 	 browser add a corresponding change."	| items list realTarget |	((aDragDropContext dropTarget clientData at: #effect) = #dropEffectNone) ifTrue: [^self].	items := (DropHelper dragDropContext: aDragDropContext) droppedElements.	list := aDragDropContext dropTarget clientData at: #widget.	realTarget := self indexForCursor.	(realTarget isInteger or: [realTarget &gt; list sequence size])		ifTrue: [(list sequence at: list targetIndex) addAll: items]		ifFalse: [(list sequence at: list targetIndex) at: (realTarget ceiling - list targetIndex) putAll: items]</body><body package="StarBrowserUI2">wantToDrag: aController 	"Answer true if the receiver wants to initiate a drag."	^true</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor</class-id> <category>aspects</category><body package="StarBrowserUI2">classificationsTree	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^classificationsTree isNil		ifTrue:			[classificationsTree := SelectionInTree new]		ifFalse:			[classificationsTree]</body><body package="StarBrowserUI2">classificationsTreeMenu	classificationsTreeMenuHolder ifNil: 			[classificationsTreeMenuHolder := Menu new asValue.			self updateClassificationsTreeMenu].	^classificationsTreeMenuHolder</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor</class-id> <category>events</category><body package="StarBrowserUI2">noticeOfWindowClose: aWindow 	"Make sure that the itemEditorApp has completely released everything it should release."	super noticeOfWindowClose: aWindow.	self release</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor</class-id> <category>initialize-release</category><body package="StarBrowserUI2">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	self setRootClassification: self defaultClassification.</body><body package="StarBrowserUI2">release	super release.	self unhookRoot.		self classificationsTree selectionIndexHolder retractInterestsFor: self.	self setTreeAndToolbarPerformer: nil.	starBrowser := nil.</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor</class-id> <category>private</category><body package="StarBrowserUI2">addToCurrentClassification: object	"Add object to the classification selected in the receiver."	^self closestClassificationForSelection add: object</body><body package="StarBrowserUI2">addToParentClassification: anObject	"Add object to the parent of the item selected in the receiver."	self parentForSelection add: anObject</body><body package="StarBrowserUI2">closestClassificationForIndex: anIndex	"Return the closes classification for a given index in the classifications tree. If the selection is a classification, the closes classification is that classification. It it is not a classification, the closest one is the classification that item blongs to."	| index treeModel node neededLevel |	index := anIndex.	treeModel := (self widgetAt: #classificationsTree) sequence.	node := treeModel wrapperAt: index.	node value isClassification ifTrue: [^node value].	neededLevel := node levelDescription size - 1.	[node levelDescription size &lt;= neededLevel and: [node value isClassification]] whileFalse: [		index := index - 1.		node := treeModel wrapperAt: index.		].	^node value</body><body package="StarBrowserUI2">closestClassificationForSelection	"Return the closes classification for the currently selected element in the classifications tree. If the selection is a classification, the closes classification is that classification. It it is not a classification, the closest one is the classification that item blongs to."	^self closestClassificationForIndex: self classificationsTree selectionIndex</body><body package="StarBrowserUI2">hookupToRoot	self root 		whenAny: #(#changed #removed)		send: #refreshRoot		to: self classificationsTree tree.	self configuration 		whenAny: #(#handlerAdded #handlerChanged #handlerRemoved)		send: #serviceConfigurationChanged:		to: self</body><body package="StarBrowserUI2">installVisualBlockForClassificationsTree	| treeView |	treeView := self widgetAt: #classificationsTree.	treeView 		visualBlock: [:view :index | self wrapperForView: view index: index];		selectedVisualBlock: [:view :index | | wrapper |			wrapper := self wrapperForView: view index: index.			wrapper component selected setValue: true.			wrapper]</body><body package="StarBrowserUI2">menuServiceForSelection	| item menuService |	item := self classificationsTree selection.	menuService := MenuService forStarBrowser: self starBrowser.	item acceptService: menuService.	^menuService</body><body package="StarBrowserUI2">setInitialSelection	self classificationsTree selectionIndex: 1</body><body package="StarBrowserUI2">setRootClassification: aRootClassification 	self unhookRoot.	root := aRootClassification.	self classificationsTree 		list: (self treeModelForRoot: root).	self classificationsTree tree expand: 1.	self hookupToRoot</body><body package="StarBrowserUI2">setTreeAndToolbarPerformer: anObject 	"Set the receiver for messages sent in the context-sensitive menu to be anObject"	| toSet |	self builder ifNil: [^self].	toSet := Set new: 2.	(self widgetAt: #classificationsTree) ifNotNil: [:widget | toSet add: widget controller].	toSet add: (self widgetAt: self toolbarID).	toSet do: [:controller | controller performer: anObject]</body><body package="StarBrowserUI2">treeModelForRoot: aRootClassification 	"Return a tree model to be used with the argument root classification."	^TreeModel 		on: aRootClassification		displayRoot: true		childrenWith: [:each | each acceptService: ((self configuration currentServiceFor: #children) forStarBrowser: self)]</body><body package="StarBrowserUI2">unhookRoot	self root ifNotNil: 			[:myRoot | 			myRoot configuration removeAllActionsWithReceiver: self.			myRoot removeAllActionsWithReceiver: self classificationsTree tree]</body><body package="StarBrowserUI2">updateClassificationsTreeMenu	| menuService newMenu newToolbar |	menuService := self menuServiceForSelection.	newMenu := menuService menu.	newToolbar := menuService toolbar.	classificationsTreeMenuHolder value: newMenu.	self toolbarMenuHolder value: newToolbar.	self setTreeAndToolbarPerformer: menuService.</body><body package="StarBrowserUI2">wrapperForView: view index: index 	| item wrappee rw configuration |	configuration := self configuration.	item := view sequence at: index.	wrappee := (view sequence wrapperAt: index)					asString: (item acceptService: ((configuration currentServiceFor: #label) forStarBrowser: self starBrowser))					withIcon: (item acceptService: ((configuration currentServiceFor: #icon) forStarBrowser: self starBrowser)).	wrappee textStyle: view textStyle.	wrappee setProps: view.	rw := TreeNodeVisualWrapper on: wrappee.	rw offset: wrappee left.	^BoundedWrapper on: rw</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor</class-id> <category>accessing</category><body package="StarBrowserUI2">selection	^self classificationsTree selection</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor</class-id> <category>private-drag and drop</category><body package="StarBrowserUI2">copyKeyPressed	^InputState default shiftDown</body><body package="StarBrowserUI2">dragClientData: aController	"Return the data kept when initiating a drag."	| data |	data := DragDropData new.	data key: #classifications2Item.	data contextWindow: self builder window.	data contextWidget: aController view.	data contextApplication: self.	data clientData: IdentityDictionary new.	data clientData at: #item put: self selectedItem.	data clientData at: #closestClassification put: self closestClassificationForSelection.	data clientData at: #effect put: #dropEffectNone.	^data</body><body package="StarBrowserUI2">dropClientData	| widget dict |	widget := self widgetAt: #classificationsTree.	dict := IdentityDictionary new.	dict at: #widget put: widget.	dict at: #targetIndex put: widget targetIndex.	dict at: #hasFocus put: widget hasFocus.	^dict</body><body package="StarBrowserUI2">restoreListStateFrom: dict	| widget |	widget := dict at: #widget.	widget targetIndex: (dict at: #targetIndex).	widget hasFocus: (dict at: #hasFocus)</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor</class-id> <category>changing</category><body package="StarBrowserUI2">classificationSelectionChanged	self updateClassificationsTreeMenu.	self triggerEvent: #classificationSelectionChanged with: self classificationsTree selection</body><body package="StarBrowserUI2">requestForChange: anItem 	| callback |	callback := true asValue.	self 		triggerEvent: #isAllowedToChange		with: anItem		with: callback.	^callback value</body><body package="StarBrowserUI2">serviceConfigurationChanged: serviceIdentifier	"The services configuration has changed. React to this."	(#children == serviceIdentifier) ifTrue: [self classificationsTree tree contractFully: 1; expand: 1]</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor</class-id> <category>interface opening</category><body package="StarBrowserUI2">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self installVisualBlockForClassificationsTree.	self classificationsTree selectionIndexHolder		onChangeSend: #classificationSelectionChanged to: self.</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor</class-id> <category>updating</category><body package="StarBrowserUI2">update: anAspect with: parameter from: sender	"Refresh complete tree if classification changes. Can optimize this in time (using #refresh:, passing the thing changed)"	sender == self root		ifTrue: [self classificationsTree tree refreshRoot]		ifFalse: [super update: anAspect with: parameter from: sender]</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor</class-id> <category>actions</category><body package="StarBrowserUI2">addClassification	self starBrowser performAction: AddClassificationAction</body><body package="StarBrowserUI2">addSmartClassification	self starBrowser performAction: AddSmartClassificationAction</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor class</class-id> <category>private</category><body package="StarBrowserUI2">createInsertDragCursor	| standard newImage newMask |	standard := Cursor standardDrag.	newImage := standard image copy.	newImage rowAt: 1 putAll: #[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1];		rowAt: 2 putAll: #[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1].	newMask := standard mask copy.	newMask rowAt: 1 putAll: #[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1];		rowAt: 2 putAll: #[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1].	^Cursor image: newImage mask: newMask hotSpot: standard hotSpot copy name: 'Inserting drag cursor'.</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor class</class-id> <category>resources</category><body package="StarBrowserUI2">hideClassificationsTree	^ToolbarIconLibrary visualFor: #hideClassificationsTree</body><body package="StarBrowserUI2">insertDragCursor	^InsertDragCursor ifNil: [InsertDragCursor := self createInsertDragCursor]		ifNotNil: [InsertDragCursor]</body><body package="StarBrowserUI2">newEditorTab	^ToolbarIconLibrary visualFor: #newEditorTab</body><body package="StarBrowserUI2">orangeDiamondPlus	^ToolbarIconLibrary visualFor: #orangeDiamondPlus</body><body package="StarBrowserUI2">redDiamondPlus	^ToolbarIconLibrary visualFor: #redDiamondPlus</body><body package="StarBrowserUI2">removeEditorTab	^ToolbarIconLibrary visualFor: #removeEditorTab</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor class</class-id> <category>default</category><body package="StarBrowserUI2">defaultClassification	^self makeDefaultClassification</body><body package="StarBrowserUI2">makeDefaultClassification	| classification |	classification := RootClassification name: 'Root' comment: 'Root Classification for this StarBrowser'.	^classification</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor class</class-id> <category>instance creation</category><body package="StarBrowserUI2">onClassification: aClassification starBrowser: aStarBrowser	^self new		starBrowser: aStarBrowser;		setRootClassification: aClassification asRootClassification;		yourself</body></methods><methods><class-id>Classifications2.RootClassification</class-id> <category>accessing</category><body package="Classifications2">configuration	^configuration ifNil: [configuration := self defaultConfiguration] ifNotNil: [configuration]</body><body package="Classifications2">configuration: aConfiguration	self 		whileTriggering: #changing		do: [self silentConfiguration: aConfiguration]		thenTrigger: #changed</body><body package="Classifications2">parent	"The root classification does not have a parent."	self shouldNotImplement</body><body package="Classifications2">parent: anObject	"The root classification does not have a parent."	self shouldNotImplement</body><body package="Classifications2">root	^self</body></methods><methods><class-id>Classifications2.RootClassification</class-id> <category>testing</category><body package="Classifications2">isOpenToAdding	^true</body><body package="Classifications2">isRootClassification	^true</body></methods><methods><class-id>Classifications2.RootClassification</class-id> <category>initialize-release</category><body package="Classifications2">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	name := 'Root'</body></methods><methods><class-id>Classifications2.RootClassification</class-id> <category>converting</category><body package="Classifications2">asClassificationWithParent: aParent	| classification |	classification := Classification name: self name comment: self comment items: self items copy.	classification parent: aParent.	^classification</body><body package="Classifications2">asRootClassification	^self</body></methods><methods><class-id>Classifications2.RootClassification</class-id> <category>operations</category><body package="Classifications2">acceptService: aService	^aService doRootClassification: self</body></methods><methods><class-id>Classifications2.RootClassification</class-id> <category>private</category><body package="Classifications2">defaultConfiguration	^ServicesConfiguration withAllServices</body><body package="StarBrowserUI2">nilParent	"Used to set the parent to nil. Needed for operations such as bossing out classifications."	"Parent is already nil."</body><body package="Classifications2">silentConfiguration: aConfiguration	configuration := aConfiguration</body></methods><methods><class-id>Classifications2.RootClassification</class-id> <category>copying</category><body package="Classifications2">postCopy	super postCopy.	configuration := configuration copy</body></methods><methods><class-id>UI.VerticalToolBar</class-id> <category>private</category><body package="StarBrowser2VerticalToolbar">layoutComponentsForBounds: newBounds	"The receiver has been sized to the given parameters.  	Re-layout all of the receiver's components."	self layoutComponentsVerticallyForBounds: newBounds</body></methods><methods><class-id>Classifications2.ChildrenService</class-id> <category>operations</category><body package="StarBrowserUI2">doClass: aClass	^aClass selectors asSortedCollection collect: [:sel | MethodDefinition class: aClass selector: sel]</body><body package="StarBrowserUI2">doClassification: aClassification	^aClassification items</body><body package="StarBrowserUI2">doObject: anObject	"By default objects have no children"	^OrderedCollection new</body></methods><methods><class-id>Classifications2.ChildrenService class</class-id> <category>registering</category><body package="StarBrowserUI2">actionName		^#children</body></methods><methods><class-id>Core.Object</class-id> <category>classifications</category><body package="Classifications2">acceptService: aService	^aService doObject: self</body><body package="Classifications2">isClassification	"Return whether the receiver is a classification or not. Added this check because there is no explicit item reification (every object is an item). But this means that a minimum protocol has to be placed on Object."	^false</body></methods><methods><class-id>Core.UndefinedObject</class-id> <category>classifications</category><body package="Classifications2">acceptService: aService	^aService doUndefinedObject: self</body></methods><methods><class-id>Tools.ListIconLibrary class</class-id> <category>resources</category><body package="StarBrowserIcons2">objectItem16x16mask	"UIMaskEditor new openOnClass: self andSelector: #objectItem16x16mask"	^self sphereGreen16x16mask</body></methods><methods><class-id>UI.Win98LookPolicy</class-id> <category>implementation classes</category><body package="StarBrowser2VerticalToolbar">verticalToolBarClass	^Win98VerticalToolBar</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>implementation classes</category><body package="StarBrowser2VerticalToolbar">verticalToolBarClass	^VerticalToolBar</body></methods><methods><class-id>UI.WinXPLookPolicy</class-id> <category>implementation classes</category><body package="StarBrowser2VerticalToolbar">verticalToolBarClass	^WinXPVerticalToolBar</body></methods><methods><class-id>UI.ToolBar</class-id> <category>private</category><body package="StarBrowser2VerticalToolbar">layoutComponentsVerticallyForBounds: newBounds	"Same as the horizontal version, but lays out the buttons vertically instead of horizontally. This method is pulled up here and used in the 'Vertical' subclasses. The decision of using these subclasses is to avoid overrides"	| offset y left w |	offset := self leftSpace.	offset &gt; newBounds height ifTrue: [offset := 0].	y := extraSpaceTop + offset.	left := self leftSpace.	w := 0.	1 to: components size do:		[:i |		| box component cw itemBox|		component := components at: i.		itemBox := component widget label preferredBounds expandedBy: 3.		cw := itemBox width.		w := w max: cw.		box := left @ y extent: (cw @ ((itemBox height max: self minimumItemWidth) min: self maximumItemWidth)).		w := w max: cw.		y := y + self spaceBetweenItems + box height.		(spaceIndices includes: i)			ifTrue: [y := y + 10].		component bounds: box].	components size = 0		ifTrue:			[preferredBounds := 0@0 extent: 0@0]		ifFalse:			[self computePreferredBounds.			preferredBounds top: preferredBounds top - extraSpaceTop.			preferredBounds bottom: preferredBounds bottom + extraSpaceBottom].</body></methods><methods><class-id>Core.Object</class-id> <category>classifications</category><body package="StarBrowserUI2">items	"Temporarily to create the StarBrowser2 mock-up. Once there is a proper children service this will go away"	^OrderedCollection new</body></methods><methods><class-id>UI.SelectionView</class-id> <category>element accessing</category><body package="StarBrowserUI2">indexOfParentClassificationFor: index 	"Use the level information from the item at index to determine its closest classification parent."	"Note: the recursive call at the end is for handling children services, where non-classifications can have children in the view."	| neededLevel node parentIndex |	parentIndex := index.	neededLevel := (sequence wrapperAt: index) levelDescription size - 1.	node := sequence wrapperAt: parentIndex - 1.	[node levelDescription size = neededLevel] whileFalse: 			[parentIndex := parentIndex - 1.			node := sequence wrapperAt: parentIndex].	^node value isClassification 		ifTrue: [parentIndex]		ifFalse: [0]</body></methods><methods><class-id>UI.SelectionView</class-id> <category>drag and drop</category><body package="StarBrowserUI2">showClassificationDropFeedbackIn: aDragContext allowScrolling: scrollBoolean	"Show a default form of drop feedback by moving the target index indication.	If scrollBoolean is true, allow the receiver to be scrolled so that a target can	be chosen from those elements not currently visible. If scrollBoolean is false,	track the mouse with the target index but do not scroll the receiver. 	aDragContext contains the data for the drag. This implementation does not	use the drag context because it assumes that the drop target application has	verified that a drop can occur in the receiver.		This particular implementation is specific for the StarBrowser classifications tree, as it assumes that the tree contains StarBrowser2.AbstractClassification objects. It shows feedback on where the drop will happen taking the classification nesting into account. "	| ctrl index pt topY bottomY fullBounds maxY |	"Determine where the target index should end up"	ctrl := self controller.	pt := ctrl sensor cursorPoint.	index := ctrl findClassificationElementFor: pt.	index = 0 ifTrue: [index := ctrl view numberOfElements].	"Compute the bounds of the widget for (possible) scrolling"	topY := self bounds top.	bottomY := self bounds bottom.	fullBounds := super bounds. "these bounds include possibly clipped last line"	maxY := bottomY max: fullBounds height + topY.	"While the mouse is pressed and the cursor is within a narrow region 	at the bottom of the list, scroll the target index down (if scrollBoolean is true)."	[scrollBoolean and: [ctrl sensor anyButtonPressed and: [(bottomY - 5 to: maxY)				includes: ctrl sensor cursorPoint y]]]		whileTrue: 			[index := index + 1 min: self numberOfElements.			self useTargetIndex: index.			topY := self bounds top.			bottomY := self bounds bottom.			maxY := bottomY max: fullBounds height + topY.			(Delay forMilliseconds: 25) wait].	"While the mouse is pressed and the cursor is within a narrow region 	at the top of the list, scroll the target index up (if scrollBoolean is true)."	[scrollBoolean and: [ctrl sensor anyButtonPressed and: [(topY to: topY + 5)				includes: ctrl sensor cursorPoint y]]]		whileTrue: 			[index := index - 1 max: 1.			self useTargetIndex: index.			topY := self bounds top.			bottomY := self bounds bottom.			(Delay forMilliseconds: 25) wait].	"Target the final index"	(self isIndexVisible: index) ifTrue: [self useTargetIndex: index] ifFalse: [self targetIndex: index. 	self topComponent displayPendingInvalidation.]</body></methods><methods><class-id>UI.SelectionView</class-id> <category>element accessing</category><body package="StarBrowserUI2">targetClassificationIndexFor: aPoint 	"Answer the index of the element positioned relative to aPoint, counting from zero."	| index foo |	index := (aPoint y - self topOffsetForDisplay) // self lineGrid + 1.	(index &lt;= 1 or: [index &gt; sequence size]) ifTrue: [^1].	foo := aPoint y - self topOffsetForDisplay rem: self lineGrid.	^foo &gt; 4 		ifTrue: [index]		ifFalse: [self indexOfParentClassificationFor: index]</body></methods><methods><class-id>UI.SequenceController</class-id> <category>private</category><body package="StarBrowserUI2">findClassificationElementFor: aPoint 	"Answer the element displayed relative to aPoint."	^view targetClassificationIndexFor: aPoint</body></methods><methods><class-id>Store.Glorp.StorePackage</class-id> <category>classifications</category><body package="StarBrowserUI2">acceptService: aService	^aService doPackage: self</body></methods><methods><class-id>Core.Behavior</class-id> <category>operations</category><body package="StarBrowserUI2">acceptService: aService	^aService doClass: self</body></methods><methods><class-id>Refactory.Browser.HierarchyPundleNavigatorPart</class-id> <category>drag and drop</category><body package="StarBrowserUI2">doDrag: aController 	self doDragAndDrop: #pundle for: aController</body><body package="StarBrowserUI2">wantToDrag: aController 	^true</body></methods><methods><class-id>Tools.Trippy.InspectorShell</class-id> <category>initialize-release</category><body package="StarBrowserUI2">inspectWithoutRefresh: anObject	| navigator |	origin := Visit object: anObject.	navigator := NullNavigator visit: origin shell: self.	trail := OrderedCollection with: navigator.	current := 1</body></methods><methods><class-id>Tools.Trippy.InspectorShell</class-id> <category>private</category><body package="StarBrowserUI2">refreshToolbar	| toolbar |	toolbar := builder componentAt: #toolbar.	(toolbar respondsTo: #widget) ifTrue: [toolbar := toolbar widget].	(toolbar componentAt: #back) isEnabled: self canGoBack.	(toolbar componentAt: #forward) isEnabled: self canGoForward.	(toolbar componentAt: #focus) isEnabled: self canFocus.	(toolbar componentAt: #exploreSiblings) isEnabled: self canExploreSiblings.	(toolbar componentAt: #exploreVisited) isEnabled: self notExploringVisited</body></methods><methods><class-id>UI.Cursor</class-id> <category>starbrowser-accessing</category><body package="StarBrowserUI2">hotSpot	^hotSpot</body><body package="StarBrowserUI2">image	^image</body><body package="StarBrowserUI2">mask	^mask</body></methods><methods><class-id>UI.TreeNodeWrapper</class-id> <category>printing</category><body package="StarBrowserUI2">asString: aString withIcon: anIcon 	"Create an IndentedLabelAndIcon for displaying the receiver's value"	^lastLabel := TreeViewIndentedLabelAndIcon		with: aString		icon: anIcon		indented: self levelDescription		hasChildren: (children isNil ifTrue: [true] ifFalse: [children isEmpty not])		openedChildren: self openedChildren</body></methods><methods><class-id>Kernel.NameSpace</class-id> <category>classifications</category><body package="StarBrowserUI2">acceptService: aService	^aService doNameSpace: self</body></methods><methods><class-id>Store.BundleModel</class-id> <category>classifications</category><body package="StarBrowserUI2">acceptService: aService	^aService doBundleModel: self</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>resources</category><body package="StarBrowserUI2">starBrowser2Icon	^ToolbarIconLibrary visualFor: #starBrowser2</body></methods><methods><class-id>Store.Glorp.StoreBundle</class-id> <category>classifications</category><body package="StarBrowserUI2">acceptService: aService	^aService doBundle: self</body></methods><methods><class-id>UI.MenuAutomaticGenerator</class-id> <category>generating</category><body package="StarBrowserUI2">menuItem: label icon: resourceSelector nameKey: key menu: menuIDs position: position disabledFor: disabledCollection	"If the method is to be inserted into our menu, create a MenuItem,	otherwise answer nil."	| realLabel |	menuIDs first = menuName ifFalse: [^nil].	realLabel := self decodeLabel: label.	^Array		with: ((MenuItem labeled: realLabel)				nameKey: key;				enablement: (self menuDefiner isItemEnabled: key desiresDisablementFor: disabledCollection);				labelImage: (ResourceRetriever new selector: resourceSelector);				yourself)		with: (menuIDs copyFrom: 2 to: menuIDs size)		with: position</body><body package="StarBrowserUI2">menuItem: label icon: resourceSelector nameKey: key menu: menuIDs position: position enabledFor: enabledCollection	"If the method is to be inserted into our menu, create a MenuItem,	otherwise answer nil."	| realLabel |	menuIDs first = menuName ifFalse: [^nil].	realLabel := self decodeLabel: label.	^Array		with: ((MenuItem labeled: realLabel)				nameKey: key;				enablement: (self menuDefiner isItemEnabled: key desiresEnablementFor: enabledCollection);				labelImage: (ResourceRetriever new selector: resourceSelector);				yourself)		with: (menuIDs copyFrom: 2 to: menuIDs size)		with: position</body><body package="StarBrowserUI2">menuItem: label icon: resourceSelector nameKey: key menu: menuIDs position: position notShownFor: notShownCollection	"If the method is to be inserted into our menu, create a MenuItem,	otherwise answer nil."	| realLabel |	menuIDs first = menuName ifFalse: [^nil].	(self menuDefiner showItemWhenIn: notShownCollection) ifTrue: [^nil].	realLabel := self decodeLabel: label.	^Array		with: ((MenuItem labeled: realLabel)				nameKey: key;				enablement: true;				labelImage: (self menuDefiner highlight: (self menuDefiner class perform: resourceSelector) ifCurrentIs: key);				yourself)		with: (menuIDs copyFrom: 2 to: menuIDs size)		with: position</body><body package="StarBrowserUI2">menuItem: label icon: resourceSelector nameKey: key menu: menuIDs position: position shownFor: shownCollection	"If the method is to be inserted into our menu, create a MenuItem,	otherwise answer nil."	| realLabel |	menuIDs first = menuName ifFalse: [^nil].	(self menuDefiner showItemWhenIn: shownCollection) ifFalse: [^nil].	realLabel := self decodeLabel: label.	^Array		with: ((MenuItem labeled: realLabel)				nameKey: key;				enablement: true;				labelImage: (self menuDefiner highlight: (self menuDefiner class perform: resourceSelector) ifCurrentIs: key);				yourself)		with: (menuIDs copyFrom: 2 to: menuIDs size)		with: position</body><body package="StarBrowserUI2">menuItem: label nameKey: key menu: menuIDs position: position disabledFor: disabledCollection	"If the method is to be inserted into our menu, create a MenuItem,	otherwise answer nil."	| realLabel |	menuIDs first = menuName ifFalse: [^nil].	realLabel := self decodeLabel: label.	^Array		with: ((MenuItem labeled: realLabel)				nameKey: key;				enablement: (self menuDefiner isItemEnabled: key desiresDisablementFor: disabledCollection);				yourself)		with: (menuIDs copyFrom: 2 to: menuIDs size)		with: position</body><body package="StarBrowserUI2">menuItem: label nameKey: key menu: menuIDs position: position enabledFor: enabledCollection	"If the method is to be inserted into our menu, create a MenuItem,	otherwise answer nil."	| realLabel |	menuIDs first = menuName ifFalse: [^nil].	realLabel := self decodeLabel: label.	^Array		with: ((MenuItem labeled: realLabel)				nameKey: key;				enablement: (self menuDefiner isItemEnabled: key desiresEnablementFor: enabledCollection);				yourself)		with: (menuIDs copyFrom: 2 to: menuIDs size)		with: position</body><body package="StarBrowserUI2">override: label  nameKey: key disabledFor: disabledCollection		| realLabel |	realLabel := self decodeLabel: label.	menuDefiner		override: label		with:			((MenuItem labeled: realLabel)				nameKey: key;				enablement:						(self menuDefiner isItemEnabled: key desiresDisablementFor:									disabledCollection);				value: key;				yourself)		enablement: disabledCollection.	^nil</body><body package="StarBrowserUI2">override: label nameKey: key enabledFor: enabledCollection		| realLabel |	realLabel := self decodeLabel: label.	menuDefiner		override: label		with:			((MenuItem labeled: realLabel)				nameKey: key;				enablement:						(self menuDefiner isItemEnabled: key desiresEnablementFor:									enabledCollection);				value: key;				yourself)		enablement: enabledCollection.	^nil</body><body package="StarBrowserUI2">submenu: label nameKey: key menu: menuIDs position: position disabledFor: disabledCollection	"If the method is to be inserted into our menu, create a MenuItem,	otherwise answer nil."	| realLabel |	menuIDs first = menuName ifFalse: [^nil].	realLabel := self decodeLabel: label.	^Array		with: ((MenuItem labeled: realLabel)				nameKey: key;				submenu: Menu new;				enablement: (self menuDefiner isItemEnabled: key desiresDisablementFor: disabledCollection);				yourself)		with: (menuIDs copyFrom: 2 to: menuIDs size)		with: position</body><body package="StarBrowserUI2">submenu: label nameKey: key menu: menuIDs position: position enabledFor: enabledCollection	"If the method is to be inserted into our menu, create a MenuItem,	otherwise answer nil."	| realLabel |	menuIDs first = menuName ifFalse: [^nil].	realLabel := self decodeLabel: label.	^Array		with: ((MenuItem labeled: realLabel)				nameKey: key;				submenu: Menu new;				enablement: (self menuDefiner isItemEnabled: key desiresEnablementFor: enabledCollection);				yourself)		with: (menuIDs copyFrom: 2 to: menuIDs size)		with: position</body></methods><methods><class-id>Store.PackageModel</class-id> <category>classifications</category><body package="StarBrowserUI2">acceptService: aService	^aService doPackageModel: self</body></methods><methods><class-id>Tools.MethodDefinition</class-id> <category>classifications</category><body package="StarBrowserUI2">acceptService: aService	^aService doMethod: self</body></methods><methods><class-id>Tools.MethodCollector</class-id> <category>searching</category><body package="StarBrowserUI2">getResults	^self class new select: self</body></methods><methods><class-id>Tools.MethodCollector</class-id> <category>building queries</category><body package="StarBrowserUI2">searchClassification: aClassification	"Answer a filter that answers all items in a classification. This	is useful when trying to restrict searches for implementors	or references to a message in the StarBrowser or otherwise.	| mc |	mc := MethodCollector new.	mc browseSelect: (mc implementorsOf: #at:put:).	mc browseSelect: (mc implementorsOf: #at:put:)			&amp; (mc searchClassification: (Classifications2.RootClassification name: 'Root' items: OrderedCollection withAllSubclasses )).	"	^MethodFilterClassification new		targetClassification: aClassification</body></methods><methods><class-id>Classifications2.ItemEditor class</class-id> <category>interface specs</category><body package="StarBrowserUI2">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Item Editor' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 4000 4000 ) 			#bounds: #(#{Graphics.Rectangle} 453 420 1153 860 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TabControlSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 30 0 0 1 0 1 ) 					#name: #editorTabs 					#model: #editorTabs 					#labels: #() ) ) ) )</body></methods><methods><class-id>Classifications2.StarBrowser2About class</class-id> <category>resources</category><body package="StarBrowserUI2">starbrowser160x160	"UIMaskEditor new openOnClass: self andSelector: #starbrowser160x160"	&lt;resource: #image&gt;	^(Image extent: 160@160 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 128) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 7773 scaledGreen: 5236 scaledBlue: 1445); at: 3 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4915 scaledBlue: 4915); at: 4 put: (Graphics.ColorValue scaledRed: 4979 scaledGreen: 2987 scaledBlue: 0); at: 5 put: (Graphics.ColorValue scaledRed: 4915 scaledGreen: 4915 scaledBlue: 4915); at: 6 put: (Graphics.ColorValue scaledRed: 289 scaledGreen: 3084 scaledBlue: 3084); at: 7 put: Graphics.ColorValue white; at: 8 put: (Graphics.ColorValue scaledRed: 3694 scaledGreen: 2216 scaledBlue: 0); at: 9 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7163 scaledBlue: 5589); at: 10 put: (Graphics.ColorValue scaledRed: 3276 scaledGreen: 3276 scaledBlue: 3276); at: 11 put: (Graphics.ColorValue scaledRed: 2281 scaledGreen: 6521 scaledBlue: 6521); at: 12 put: (Graphics.ColorValue scaledRed: 5075 scaledGreen: 3758 scaledBlue: 1799); at: 13 put: (Graphics.ColorValue scaledRed: 2923 scaledGreen: 1767 scaledBlue: 0); at: 14 put: (Graphics.ColorValue scaledRed: 6874 scaledGreen: 6874 scaledBlue: 6874); at: 15 put: (Graphics.ColorValue scaledRed: 2891 scaledGreen: 2891 scaledBlue: 2891); at: 16 put: (Graphics.ColorValue scaledRed: 964 scaledGreen: 1670 scaledBlue: 1670); at: 17 put: (Graphics.ColorValue scaledRed: 6103 scaledGreen: 3662 scaledBlue: 0); at: 18 put: (Graphics.ColorValue scaledRed: 289 scaledGreen: 5782 scaledBlue: 5782); at: 19 put: (Graphics.ColorValue scaledRed: 8030 scaledGreen: 6585 scaledBlue: 4401); at: 20 put: (Graphics.ColorValue scaledRed: 2088 scaledGreen: 1253 scaledBlue: 0); at: 21 put: (Graphics.ColorValue scaledRed: 6071 scaledGreen: 6071 scaledBlue: 6071); at: 22 put: (Graphics.ColorValue scaledRed: 7259 scaledGreen: 5332 scaledBlue: 2441); at: 23 put: (Graphics.ColorValue scaledRed: 3887 scaledGreen: 2859 scaledBlue: 1317); at: 24 put: (Graphics.ColorValue scaledRed: 3019 scaledGreen: 2570 scaledBlue: 1831); at: 25 put: (Graphics.ColorValue scaledRed: 3244 scaledGreen: 6874 scaledBlue: 6874); at: 26 put: (Graphics.ColorValue scaledRed: 5621 scaledGreen: 3373 scaledBlue: 0); at: 27 put: (Graphics.ColorValue scaledRed: 1060 scaledGreen: 1060 scaledBlue: 1060); at: 28 put: (Graphics.ColorValue scaledRed: 7388 scaledGreen: 7388 scaledBlue: 7388); at: 29 put: (Graphics.ColorValue scaledRed: 1156 scaledGreen: 6039 scaledBlue: 6039); at: 30 put: (Graphics.ColorValue scaledRed: 2216 scaledGreen: 2120 scaledBlue: 1992); at: 31 put: (Graphics.ColorValue scaledRed: 7934 scaledGreen: 7934 scaledBlue: 7934); at: 32 put: (Graphics.ColorValue scaledRed: 6681 scaledGreen: 4754 scaledBlue: 1927); at: 33 put: (Graphics.ColorValue scaledRed: 6970 scaledGreen: 4304 scaledBlue: 289); at: 34 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 6392 scaledBlue: 3694); at: 35 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4497 scaledBlue: 4497); at: 36 put: (Graphics.ColorValue scaledRed: 4208 scaledGreen: 4208 scaledBlue: 4208); at: 37 put: (Graphics.ColorValue scaledRed: 5268 scaledGreen: 7388 scaledBlue: 7388); at: 38 put: (Graphics.ColorValue scaledRed: 4754 scaledGreen: 2859 scaledBlue: 0); at: 39 put: (Graphics.ColorValue scaledRed: 7677 scaledGreen: 7677 scaledBlue: 7677); at: 40 put: (Graphics.ColorValue scaledRed: 6135 scaledGreen: 5364 scaledBlue: 4208); at: 41 put: (Graphics.ColorValue scaledRed: 803 scaledGreen: 803 scaledBlue: 803); at: 42 put: (Graphics.ColorValue scaledRed: 2987 scaledGreen: 2120 scaledBlue: 835); at: 43 put: (Graphics.ColorValue scaledRed: 5557 scaledGreen: 5557 scaledBlue: 5557); at: 44 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 5300 scaledBlue: 5300); at: 45 put: (Graphics.ColorValue scaledRed: 4754 scaledGreen: 5396 scaledBlue: 5396); at: 46 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4240 scaledBlue: 4240); at: 47 put: (Graphics.ColorValue scaledRed: 7581 scaledGreen: 5814 scaledBlue: 3180); at: 48 put: (Graphics.ColorValue scaledRed: 4240 scaledGreen: 2538 scaledBlue: 0); at: 49 put: (Graphics.ColorValue scaledRed: 5718 scaledGreen: 4850 scaledBlue: 3533); at: 50 put: (Graphics.ColorValue scaledRed: 4079 scaledGreen: 7099 scaledBlue: 7099); at: 51 put: (Graphics.ColorValue scaledRed: 1638 scaledGreen: 1638 scaledBlue: 1638); at: 52 put: (Graphics.ColorValue scaledRed: 1156 scaledGreen: 739 scaledBlue: 64); at: 53 put: (Graphics.ColorValue scaledRed: 5621 scaledGreen: 3822 scaledBlue: 1124); at: 54 put: (Graphics.ColorValue scaledRed: 5075 scaledGreen: 3437 scaledBlue: 1028); at: 55 put: (Graphics.ColorValue scaledRed: 32 scaledGreen: 3951 scaledBlue: 3951); at: 56 put: (Graphics.ColorValue scaledRed: 5750 scaledGreen: 4336 scaledBlue: 2216); at: 57 put: (Graphics.ColorValue scaledRed: 3758 scaledGreen: 3276 scaledBlue: 2570); at: 58 put: (Graphics.ColorValue scaledRed: 6553 scaledGreen: 4433 scaledBlue: 1317); at: 59 put: (Graphics.ColorValue scaledRed: 3405 scaledGreen: 2088 scaledBlue: 96); at: 60 put: (Graphics.ColorValue scaledRed: 2120 scaledGreen: 1638 scaledBlue: 867); at: 61 put: (Graphics.ColorValue scaledRed: 6553 scaledGreen: 6553 scaledBlue: 6553); at: 62 put: (Graphics.ColorValue scaledRed: 1542 scaledGreen: 6328 scaledBlue: 6328); at: 63 put: (Graphics.ColorValue scaledRed: 739 scaledGreen: 6039 scaledBlue: 6039); at: 64 put: (Graphics.ColorValue scaledRed: 3276 scaledGreen: 3276 scaledBlue: 3276); at: 65 put: (Graphics.ColorValue scaledRed: 4079 scaledGreen: 3951 scaledBlue: 3758); at: 66 put: (Graphics.ColorValue scaledRed: 64 scaledGreen: 5525 scaledBlue: 5525); at: 67 put: (Graphics.ColorValue scaledRed: 8095 scaledGreen: 5846 scaledBlue: 2441); at: 68 put: (Graphics.ColorValue scaledRed: 5268 scaledGreen: 4593 scaledBlue: 3630); at: 69 put: (Graphics.ColorValue scaledRed: 6199 scaledGreen: 7677 scaledBlue: 7677); at: 70 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 6906 scaledBlue: 4979); at: 71 put: (Graphics.ColorValue scaledRed: 3052 scaledGreen: 6167 scaledBlue: 6167); at: 72 put: (Graphics.ColorValue scaledRed: 5139 scaledGreen: 4433 scaledBlue: 3373); at: 73 put: (Graphics.ColorValue scaledRed: 4561 scaledGreen: 3276 scaledBlue: 1381); at: 74 put: (Graphics.ColorValue scaledRed: 4497 scaledGreen: 4497 scaledBlue: 4497); at: 75 put: (Graphics.ColorValue scaledRed: 835 scaledGreen: 2120 scaledBlue: 2120); at: 76 put: (Graphics.ColorValue scaledRed: 2345 scaledGreen: 2313 scaledBlue: 2281); at: 77 put: (Graphics.ColorValue scaledRed: 7195 scaledGreen: 6039 scaledBlue: 4304); at: 78 put: (Graphics.ColorValue scaledRed: 6424 scaledGreen: 4208 scaledBlue: 899); at: 79 put: (Graphics.ColorValue scaledRed: 1317 scaledGreen: 3437 scaledBlue: 3437); at: 80 put: (Graphics.ColorValue scaledRed: 2602 scaledGreen: 1574 scaledBlue: 0); at: 81 put: (Graphics.ColorValue scaledRed: 2859 scaledGreen: 3951 scaledBlue: 3951); at: 82 put: (Graphics.ColorValue scaledRed: 932 scaledGreen: 1349 scaledBlue: 1349); at: 83 put: (Graphics.ColorValue scaledRed: 6553 scaledGreen: 3983 scaledBlue: 128); at: 84 put: (Graphics.ColorValue scaledRed: 5300 scaledGreen: 3180 scaledBlue: 0); at: 85 put: (Graphics.ColorValue scaledRed: 7227 scaledGreen: 5589 scaledBlue: 3148); at: 86 put: (Graphics.ColorValue scaledRed: 4304 scaledGreen: 2859 scaledBlue: 642); at: 87 put: (Graphics.ColorValue scaledRed: 3276 scaledGreen: 2987 scaledBlue: 2505); at: 88 put: (Graphics.ColorValue scaledRed: 835 scaledGreen: 675 scaledBlue: 418); at: 89 put: (Graphics.ColorValue scaledRed: 3726 scaledGreen: 2505 scaledBlue: 739); at: 90 put: (Graphics.ColorValue scaledRed: 3694 scaledGreen: 3694 scaledBlue: 3694); at: 91 put: (Graphics.ColorValue scaledRed: 8159 scaledGreen: 6842 scaledBlue: 4850); at: 92 put: (Graphics.ColorValue scaledRed: 257 scaledGreen: 3630 scaledBlue: 3630); at: 93 put: (Graphics.ColorValue scaledRed: 6553 scaledGreen: 4947 scaledBlue: 2505); at: 94 put: (Graphics.ColorValue scaledRed: 4561 scaledGreen: 7163 scaledBlue: 7163); at: 95 put: (Graphics.ColorValue scaledRed: 514 scaledGreen: 5814 scaledBlue: 5814); at: 96 put: (Graphics.ColorValue scaledRed: 2827 scaledGreen: 6713 scaledBlue: 6713); at: 97 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 4915 scaledBlue: 4915); at: 98 put: (Graphics.ColorValue scaledRed: 7131 scaledGreen: 7131 scaledBlue: 7131); at: 99 put: (Graphics.ColorValue scaledRed: 5814 scaledGreen: 5814 scaledBlue: 5814); at: 100 put: (Graphics.ColorValue scaledRed: 1317 scaledGreen: 1124 scaledBlue: 835); at: 101 put: (Graphics.ColorValue scaledRed: 3276 scaledGreen: 1638 scaledBlue: 0); at: 102 put: (Graphics.ColorValue scaledRed: 6328 scaledGreen: 6328 scaledBlue: 6328); at: 103 put: (Graphics.ColorValue scaledRed: 5300 scaledGreen: 5300 scaledBlue: 5300); at: 104 put: (Graphics.ColorValue scaledRed: 1895 scaledGreen: 1959 scaledBlue: 1927); at: 105 put: (Graphics.ColorValue scaledRed: 4336 scaledGreen: 6489 scaledBlue: 6489); at: 106 put: (Graphics.ColorValue scaledRed: 3790 scaledGreen: 6874 scaledBlue: 6874); at: 107 put: (Graphics.ColorValue scaledRed: 6232 scaledGreen: 4433 scaledBlue: 1735); at: 108 put: (Graphics.ColorValue scaledRed: 7292 scaledGreen: 4818 scaledBlue: 1092); at: 109 put: (Graphics.ColorValue scaledRed: 7966 scaledGreen: 5942 scaledBlue: 2891); at: 110 put: (Graphics.ColorValue scaledRed: 8159 scaledGreen: 7356 scaledBlue: 6167); at: 111 put: (Graphics.ColorValue scaledRed: 1735 scaledGreen: 5364 scaledBlue: 5364); at: 112 put: (Graphics.ColorValue scaledRed: 4465 scaledGreen: 2666 scaledBlue: 0); at: 113 put: (Graphics.ColorValue scaledRed: 2634 scaledGreen: 2634 scaledBlue: 2634); at: 114 put: (Graphics.ColorValue scaledRed: 7934 scaledGreen: 6103 scaledBlue: 3373); at: 115 put: (Graphics.ColorValue scaledRed: 3309 scaledGreen: 2377 scaledBlue: 996); at: 116 put: (Graphics.ColorValue scaledRed: 4079 scaledGreen: 3726 scaledBlue: 3180); at: 117 put: (Graphics.ColorValue scaledRed: 1638 scaledGreen: 6553 scaledBlue: 6553); at: 118 put: (Graphics.ColorValue scaledRed: 7806 scaledGreen: 5589 scaledBlue: 2281); at: 119 put: (Graphics.ColorValue scaledRed: 7067 scaledGreen: 4561 scaledBlue: 803); at: 120 put: (Graphics.ColorValue scaledRed: 4497 scaledGreen: 3630 scaledBlue: 2313); at: 121 put: (Graphics.ColorValue scaledRed: 5653 scaledGreen: 5011 scaledBlue: 4047); at: 122 put: (Graphics.ColorValue scaledRed: 1542 scaledGreen: 964 scaledBlue: 32); at: 123 put: (Graphics.ColorValue scaledRed: 4915 scaledGreen: 4915 scaledBlue: 4915); at: 124 put: (Graphics.ColorValue scaledRed: 1317 scaledGreen: 1317 scaledBlue: 1285); at: 125 put: (Graphics.ColorValue scaledRed: 3951 scaledGreen: 2377 scaledBlue: 0); at: 126 put: (Graphics.ColorValue scaledRed: 5782 scaledGreen: 3469 scaledBlue: 0); at: 127 put: (Graphics.ColorValue scaledRed: 289 scaledGreen: 5557 scaledBlue: 5557); at: 128 put: (Graphics.ColorValue scaledRed: 675 scaledGreen: 2505 scaledBlue: 2505); yourself)) usingBits: (ByteArray fromPackedStringamp;A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA  RD!8^G!8^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XHD$I-I"X&amp;I!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XHBAHUEQ-!XQ,&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFQTTRZ5I"OC1!F18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFBDUEK''XPZ!PTOFD&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG%)ZD!UM_W5CJ!P&lt;F2XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA !EQTT.SW5=M@P*YP4&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!9ZQTUE\S%=_W53AFH&lt;F2XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XHQTUEQWD9_W5=MD%&amp;YP4&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^V$UEQTT.SW5=_W53AFH&lt;F2XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFBDUEQTTRET5=_W5=MT%&amp;YP4&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG%)EQTUEQR9M_W5=_W53AFH&lt;F2XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA !EQTUEQTU1NW5=_W5=MT%&amp;YP4&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!9ZQTUEQTUE\S%=_W5=_W53AFH&lt;F2XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XHQTUZV%)ZV"9M_W5=_W5=MT%&amp;YP4&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFV%)ZV%)ZV!HUSW5=_W5=_W5@AFH&lt;F18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XF[TUEV%)ZV%)ZK$5=_W5=_W5=RD%&amp;YP4&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA%)ZV%)ZV$UEQWD9_W5=_W5=_W5@AFH&lt;F18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA&amp;5EQU)ZV%)EQTU1NW5=_W5=_W5=RD%&amp;YVD&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA YZV%)ZV%)ZV%)ZK$5=_W5=_W5=_W5@AFH&lt;F18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA Y-QTUZV%)ZV%)ZD!UM_W5=_W5=_W5=RD$*YVD&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFV%)ZV%)ZV%)ZV%(.SW5=_W5=_W5=_W5@AFHMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XF[TUEV%)ZV%)ZQTUE\S%=_W5=_W5=_W5=B4$*YVD&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA%)ZV%)ZV%)ZV$UEQWD9_W5=_W5=_W5=_W5@AFHMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA&amp;5EQU)ZV%)ZV$UEQTT.SW5=_W5=_W5=_W5=B4$*YVD&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA YZV%)ZV%)ZV%)EQTTRET5=_W5=_W5=_W5=_W5@AFHMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA Y-QTUZV%)ZV%)EQTUEQR9M_W5=_W5=_W5=_W5=B4$*YVD&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFV%)ZV%)ZV%)ZQTUEQTU1NW5=_W5=_W5=_W5=_W5@AFHMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XF[TUEV%)ZV%)ZQTUEQTUE\S%=_W5=_W5=_W5=_W5=B4$*YVD&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA%)ZV%)ZV%)ZV$UEQTUEQR9M_W5=_W5=_W5=_W5=_W5@AFHMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA&amp;5EQU)ZV%)ZV$UEQTUEQQHUSW5=_W5=_W5=_W5=_W5=B4$*YVD&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA YZV%)ZV%)ZV%)EQTUEQTUEK$5=_W5=_W5=_W5=_W5=_W5@AFHMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA Y-QTUZV%)ZV%)EQTUEQTUEQWD9_W5=_W5=_W5=_W5=_W5=B4$*YVD&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFV%)ZV%)ZV%)ZQTUEQTUEQTU1NW5=_W5=_W5=_W5=_W5=_W5@AFHMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XF[TUEV%)ZV%)ZQTUEQTUEQTUEK$5=_W5=_W5=_W5=_W5=_W5=B4$*YVD&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA%)ZV%)ZV%)ZV$UEQTUEQTUED!UM_W5=_W5=_W5=_W5=_W5=_W5@AFHMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA&amp;5EQU)ZV%)ZV$UEQTUEQTUEQTT.SW5=_W5=_W5=_W5=_W5=_W5=B4$*YVD&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA YZV%)ZV%)ZV%)EQTUEQTUEQTUE\S%=_W5=_W5=_W5=_W5=_W5=_W5@AFHMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA Y-QTUZV%)ZV%)EQTUEQTUEQTUEQWD9_W5=_W5=_W5=_W5=_W5=_W5=B4$*YVD&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFV%)ZV%)ZV%)ZQTUEQTUEQTUEQTT.SW5=_W5=_W5=_W5=_W5=_W5=_W5@AFHMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X&amp;CQP*A@Q&amp;X 4^A XF[U)ZV%)ZV%)ZQTUEQTUEQTUEQTTRET5=_W5=_W5=_W5=_W5=_W5=_W5=B4$*YVD&amp;G!8&amp;CQP*A@Q&amp;X 4^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^CVHDRRM@VP$NC''AKR09ICQIZV%)ZV%)ZV$UEQTUEQTUEQTUEQR9M_W5=_W5=_W5=_W5=_W5=_W5=_QA@AFHMOFHDRRM@VP$NC''AKR09ICQ8^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA"Y%J&amp;XDRRL#H5APT@8NR15''Y6]KP40RV%)ZV$UEQTUEQTUEQTUEQTU1NW5=_W5=_W5=_W5=_W5=_W5=_W4PB2)"J&amp;XDRRL#H5APT@8NR15''Y6]0J!,^G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG&amp;T*Y PDKF XFE&lt;JB#4\GA0BS&amp;\2L#HWLD0RV%)ZV$UEQTUEQTUEQTUE\S%=_W5=_W5=_W5=_W5=_W5=_W4PG2\*Y PDKF XFE&lt;JB#4\GA0BS&amp;\2L#I0X!,^G!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFCR)&amp;Y"1(LV%)ZQ!_W0(=OQ0\W%9&gt;H''&lt;2L#H8SD0RV%)ZV$UEQTUEQTUEQWD9_W5=_W5=_W5=_W5=_W5=_W5MI6Y&amp;Y"1(LV%)ZQ!_W0(=OQ0\W%9&gt;H''&lt;2L#IYCRX&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^X&amp;XDKF 1LSD1LSE)ZU=_B#4=GE9^_''9&gt;H$);^140SD0RV%)ZQTUEQTUEQTU1NW5=_W5=_W5=_W5=_W5=_W49Y&amp;XDKF 1LSD1LSE)ZU=_B#4=GE9^_''9&gt;H$);^14TF2X&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X&amp;J PDZCD1WU5]WU5]WSE)FE&lt;JOQ0\W%9&gt;_''8+AW-;GT]LSAIZV%)EQTUESD\8E3-9D1MOA0M=_W5=_W5=_QA*^@PDZCD1WU5]WU5]WSE)FE&lt;JOQ0\W%9&gt;_''8+AW-;Y6Y!F2X^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^[P RAD%IZF%)WU4$IBP$IBQ]LV$XB (=GC9^_''8+J2,6C7-;Q41LD!IZSD]VGSI;F" (U0@@@@@@@CLLIW5=_QA*RT%IZF%)WU4$IBP$IBQ]LV$XB (=GC9^_''8+J2,6C7-;RS1!I"X^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^[P RHV0!HRD!RRL#Q!!)LU4$QDQDQDP$IE41FE&lt;JOS4&gt;O!E&gt;_",+J24O^3IGI418PE$I\A5''L'',ZF" (U0@@@@@@@@@3CEL4H2L#Q!!)LU4$QDQDQDP$IE41FE&lt;JOS4&gt;O!E&gt;_",+J24O^7,KG1T.V  &amp;I XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^[V4RHV0!HRD!HRD!HRD!P5%YQ%&lt;XLU4$QDQDQDQDIBQ]LQ XB (=GC9^_''9&gt;J2,+KP=;GT%IRT%@VP$NC$,]Y3I;^7,ZF!((U0@@@@AW\5%YQ%&lt;XLU4$QDQDQDQDIBQ]LQ XB (=GC9^_''9&gt;J2,+KP=;N3\_EQUBP$IBP"DHBBX&amp;A XFA XFA XFA XFA XFA XFA XFA XF[V4RD''D!HRD!HRD!HRD!HRD!HRD!^E%YQ%=_ZSE]IDQDQDQDIBQ]LV$XW0(JOQ0\W%9&gt;_",+J0H6^7-0A@PDRRMYBWAKY3H2^7-;F!(ZF!(ZJE\@\E%YQ%=_ZSE]IDQDQDQDIBQ]LV$XW0(JOQ0\W%9&gt;_",+J0H6^7,)Z!&lt;UEWUBP$IBP$IBP$I,HP!-[RXFA XFA XFA XFA XFA$T!HV1,\RD!HRD!HRD!HRD!HRD!HRD!S@$IT@(JW6%]IDQDQDQDIE5]ZQ XW5&lt;JB#4=O#8QDTD+J2,B@ U;^5$DRRMYBWAKY3H2^7-;F!(ZF!(ZF!(ZGP$IT@(JW6%]IDQDQDQDIE5]ZQ XW5&lt;JB#4=O#8QDTD+J2,B@ U;^1X7G1U5P$IBP$IBP$IBP$HUEQ=6K!8^G!8FA XFA XFA XFV''TA@WU,HRD!HRD!HRD!HRD!HRD!HWLNTC4=B%=)WRQDQDP$ICD1FE=_B (JB#4=OS8&gt;W!EAPR,+J0HBC1(2VU$IC$-''L#I;^7,ZF!(ZF!(ZF!(ZF 8NTC4=B%=)WRQDQDP$ICD1FE=_B (JB#4=OS8&gt;W!EAPR,+J0HBC1);B3\_EWUBP&amp;1,P$IB]PD9MUTCLFD[F2X&amp;G XFA XFA XFA XR@WY+@TI,[F11HRD!HRD!HRD!HR]0\F8=OP)_ZU4$IBP$WV$XW0(JB#4=OS4=OQ0\O%8QPTD+J0HB@#Y;^6]KY3H2^7,ZF!(ZF!(ZF!(ZF" (JF]0\F8=OP)_ZU4$IBP$WV$XW0(JB#4=OS4=OQ0\O%8QPTD+J0HB@#Y;^7HKZ!&lt;U]TI,[AT_G3$5VC(:]6T&lt;OFE!I"X^A XFA XFA XFG !+HGY+Z6,A]V11HRD!HRD!HRD8R48\GC4JW6$1WU5]LQ!_B (=OS4\GA0\GA0\GC9^DQEAPR,B@ HBR!(Z^7-;F!(ZF!(ZF!(ZF!((JB (JB!KR48\GC4JW6$1WU5]LQ!_B (=OS4\GA0\GA0\GC9^DQEAPR,B@ HBR!);R@-*EWU5EQ&lt;5UUUXCD&lt;:\6Y&amp;J!P&lt;CQ,&amp;G XFA XFA XFA!8&amp;SGX HB@ HGY+]V1,HRD!HRETR4-.GA0=B%&lt;XLSD1ZU&lt;JB#4=GA0\O#8&gt;O#8&gt;O#8&gt;W!DQPR,+J0HB@#XZF!(ZF!(ZF" (JB (JB (JB (JB!;R4-.GA0=B%&lt;XLSD1ZU&lt;JB#4=GA0\O#8&gt;O#8&gt;O#8&gt;W!DQPR,+J0HB@#XZF!XKMF)*Z#UXCD=OS4&lt;LNBMIRPP*EC1!I!8FA XFA XFA X^I&amp;EL]"@ HB@ HGY6Z7U,[F11]15KW%8\OS5_FA XFE&lt;J]C4\GC8&gt;O#8&gt;O#8&gt;O#8&gt;O%8QDTD+J2,B@ HBC1(ZF" (JB (JB (JB (JB (JB (L!5KW%8\OS5_FA XFE&lt;J]C4\GC8&gt;O#8&gt;O#8&gt;O#8&gt;O%8QDTD+J2,B@ HBC1(;E%UXVC)OS4=OS4&lt;LE5%YVRMIY&amp;H&lt;XRX^A XFA XFA XFG"X[OB\ HB@ HEIRT"A6]''Y+]Q]''S%9^GA14B%=_W5&lt;JOS4\O#8&gt;O#8&gt;O#8&gt;O#8&gt;W%9^DQEAJ2,+@ HBH''&lt;ZF" (JB (JB (JB (JB (JB (JF]''S%9^GA14B%=_W5&lt;JOS4\O#8&gt;O#8&gt;O#8&gt;O#8&gt;W%9^DQEAJ2,+@ HBH''&lt;ZF!LSD1LSD1MOS4&lt;LE0$IBU$#RVXTOA,&amp;G XFA XFA XFA X^F05%^B@ HB@ HEIRT%IRT''Y''Y0I^W#8\OP(JB (JOS4\O#8&gt;O#9^W%9^W%9^W%9^W!DQPR,+J0HB@"I[F!((JB (JB (JB (JB (JB (JB 2L I^W#8\OP(JB (JOS4\O#8&gt;O#9^W%9^W%9^W%9^W!DQPR,+J0HB@"I[F!(3L7%9D1LSS4&lt;LE08NBP%YH0P*YP4[G!8FA XFA XFA XFG"X[CVU8HB@ HBART%IRT%HYL#I&gt;_%9^GC4=OP(JOS4\O#8&gt;O%9^W%9^W%9^W%9^W%8QDTD+J2,B@ H"KUDZU5\@@@@@@@@@@@@@@@@@@E\ZL#I&gt;_%9^GC4=OP(JOS4\O#8&gt;O%9^W%9^W%9^W%9^W%8QDTD+J2,B@ H"KUDZL3L3^QLSD4&lt;LE08NBP%YH0P*YP4[I!8FA XFA XFA XFA X^G!,MYW  HB@ HEIRT%IRUSIJ_''9&gt;W#8\OS4=OS4\O#8&gt;O%9^W%9^W%9^W%9^W%9^DQEAPR,B@ H"H"IQF @@@@@@@@@@@@@@@@@@@@@@JCIJ_''9&gt;W#8\OS4=OS4\O#8&gt;O%9^W%9^W%9^W%9^W%9^DQEAPR,B@ H"H"IQF%\3L7%9D1LLE08NBP%YH0P*YP4[I!8FA XFA XFA XFA XFA!8^F05%^B@ HB@ T%IRT''H2_79&gt;_%9^O!0=OS4\GC8&gt;O%9^W%9^W%9^W%9^W%8QDQEAPTD+@ HBH"H"C1)WU5]#^3H]GS,SD1M9^SL3@A(2_79&gt;_%9^O!0=OS4\GC8&gt;O%9^W%9^W%9^W%9^W%8QDQEAPTD+@ HBH"H"C1)WL3M9D1MOE08NBP%YH0P*YP4[G!8FA XFA XFA XFA XFA XFA!8[CVU&amp;]"@ HBART%H)^4(+J79&gt;W%8&gt;GA0\GC8&gt;O#9^W%9^W%9^W%9^W%9^W!DQPTD+J0HB@"H"H$(Z^1\WE5YVU!\)C@0LC@0LC@1;^4(+J79&gt;W%8&gt;GA0\GC8&gt;O#9^W%9^W%9^W%9^W%9^W!DQPTD+J0HB@"H"H$(ZU3L3^W%OR08NBP%YH0P*YP4[G!8FA XFA XFA XFA XFA XFA XFG!,MYVY6HB@ HEIRN7-JJ2-APQE^O#8&gt;O#8&gt;O#9^W%9^W%9^W%9^W%9^DQDQDTEAJ2,B@ H"H"IJF'',WE5YVU# 8VC(:N#(:N#(:^7-JJ2-APQE^O#8&gt;O#8&gt;O#9^W%9^W%9^W%9^W%9^DQDQDTEAJ2,B@ H"H"IJF" 3L7$SGW@NBP%YH0P*YP4[G!8FA XFA XFA XFA XFA XFA XFA X^F05%Y''X HB@ HB%;R",+J4EADU8&gt;O#8&gt;O#9^W%9^W%9^W%9^W%9^W!DQDQEAJ2,+@ H"H"H-C1);E5YVNC!3]4!UK2&lt;/K2&lt;/K3-;R",+J4EADU8&gt;O#8&gt;O#9^W%9^W%9^W%9^W%9^W!DQDQEAJ2,+@ H"H"H-C1)WL3M9L$-0C %YRPP*YP4[G!8FA XFA XFA XFA XFA XFA XFA XFA!8[CVU&amp;]"@ HBA2^4(+J2-APQDQDU8&gt;O#9^W%9^W%9^W%9^W%9^W!DQDQEAPR,+@ HBH"H"KP&lt;ZL!]VNGM3Q4\KMCTC@0LC@0L)^4(+J2-APQDQDU8&gt;O#9^W%9^W%9^W%9^W%9^W!DQDQEAPR,+@ HBH"H"KP&lt;ZU3L3^6]KC %YRPQ"YP4[G!8FA XFA XFA XFA XFA XFA XFA XFA XFG!,MYVY6HB@ VG,O@",+J4EADQE^W%9^W%9^W%9^W%9^W%9^W%8QDQDQPR,+J0HBH"H"KR5QF#IVU#!3P3@0G3%M_W5=_W5=\'',O@",+J4EADQE^W%9^W%9^W%9^W%9^W%9^W%8QDQDQPR,+J0HBH"H"KR5QF%\3^3H]\@9YRPQ"YP4[G!8FA XFA XFA XFA XFA XFA XFA XFA XFA X^F6D&lt;Y''X HEM;^0HBJ2,+PTDQDQE^W%9^W%9^W%9^W%9^W%8QDQDQPTD+J0HB@"H"H"46F!(]U#!3Q7 ''UAU+]%IRT$5MSSU;^0HBJ2,+PTDQDQE^W%9^W%9^W%9^W%9^W%8QDQDQPTD+J0HB@"H"H"46F!(3F'',2GP8IH0Q"OFD[G!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8[XS1&amp;]"AR^7,6@ H+J2-APTDQDQDQW%9^W%9^W%9^W%8QDQDQPTD+J2,B@"H"H"4-AQ(ZE5X8\4L''SB8.@V, HBA6]''YM^7,6@ H+J2-APTDQDQDQW%9^W%9^W%9^W%8QDQDQPTD+J2,B@"H"H"4-AQ(ZF!);Y4,IP@Q"OFD[G!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG"Y!OFY6HC-;APHB@",+J4EAPQDQDQDQDQDQW%9^DQDQDQDQPTEAJ2,B@ H"H"4-KT(ZF!]VNGM8I411[GU+]''Y6]''Y6]#-;APHB@",+J4EAPQDQDQDQDQDQW%9^DQDQDQDQPTEAJ2,B@ H"H"4-KT(ZF!);L&amp;]0VT$*OFD&amp;G!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^I&amp;D&lt;J#%2^0&lt;B@ HBJ2,+PTEAPQDQDQDQDQDQDQDQDQDQPTEAJ2,B@ H"H"4-KR5QF#HWU''MG^D1LHV15Z7X HB@ HBA2^0&lt;B@ HBJ2,+PTEAPQDQDQDQDQDQDQDQDQDQPTEAJ2,B@ H"H"4-KR5QF!(Z^3IKBRM&amp;YVD&amp;G!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8&amp;XS0*MW-;KPHB@ H+J2-APTEAPTDQDQDQDQDQDQEAPTEAJ2,B@ H"H"H-KR4EF!(]E5Y3Q2]LSBE,@V, T%IRT%IRUW-;KPHB@ H+J2-APTEAPTDQDQDQDQDQDQEAPTEAJ2,B@ H"H"H-KR4EF!(ZF#I''\E$DE@4[G!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG"Y!OFX;^7&lt;B@ HB@",+J2-APTEAPTE&gt;_''9&gt;PTEAPTD+J2,B@ H"H"H-KR46C1(ZE1\8]4\''SE(R[@E6T!@PDA$Y@2=#X7&lt;B@ HB@",+J2-APTEAPTE&gt;_''9&gt;PTEAPTD+J2,B@ H"H"H-KR46C1(ZF'',2R0%IJ#0[G!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^I&amp;E%BW-;M HB@ HB@",+J2,+PTEAPTEAPTEAPR,+J2,B@ H"H"H-KR46AQ(ZN7I2E'']GI41ZD$I6T''4YT5L%IR&lt;GD1);M HB@ HB@",+J2,+PTEAPTEAPTEAPR,+J2,B@ H"H"H-KR46AQ(ZF'',2GP9@AAQ!I!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8&amp;XVI''F &lt;"@ HB@ HB@",+J2,+J2,+J2,+J2,+J0HB@ H"H"H-KR46M%DZX2$)\!XKM50.D''D__PLC@2U/K71&lt;N 1#X0&lt;"@ HB@ HB@",+J2,+J2,+J2,+J2,+J0HB@ H"H"H-KR46M%DZF''-;Y7@IRVHMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG"XMRW-;_2H"@ HB@ HB@",+J2,+J2,+J2,+@ HB@ H"H"H-KSX6M$(ZF#,)JU VB3\_EQT9@71&lt;_G1&lt;A0\GN#(:D1(Z_2H"@ HB@ HB@",+J2,+J2,+J2,+@ HB@ H"H"H-KSX6M$(ZF!(2L$,IH6Y%XRXFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^F04NF%E[H"H"@ HB@ HB@ HB@ HB@ HB@ HB@"H"H"4-KSX6M TZF&amp;L)JR%XRCQ*NV-M@0\LCC(GA0\:N#(:N 1#X5E[H"H"@ HB@ HB@ HB@ HB@ HB@ HB@"H"H"4-KSX6M TZF!);L!4NVPQ"CQ,^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8[EF\ZTU,"H"H"H HB@ HB@ HB@ HB@ HBH"H"H"4-KSX6M TZF&amp;L)JR%XUST4ST5RFRTGCD&lt;LCC(:N#(:N#(:CFLZTU,"H"H"H HB@ HB@ HB@ HB@ HBH"H"H"4-KSX6M TZF!);L!50BT$*OFD&amp;A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFI&amp;DDL!)QV2H"H"H"H"H"@ HB@ HBH"H"H"H"KR4-M#X6M UQF!(;JR%2VD 5MD5RDEM/A01OS00:N \GA0\:N#)OX1)QV2H"H"H"H"H"@ HB@ HBH"H"H"H"KR4-M#X6M UQF!);L&amp;]0BT@DE@4&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8[CT%;F%DEKRH"H"H"H"H"H"H"H"H"H"H-KR46M#X6M''&lt;ZF!(;JR$)VET5MD5MDA$C[70:CD=OCC(GA0\GA0\:N!LZF%DEKRH"H"H"H"H"H"H"H"H"H"H-KR46M#X6M''&lt;ZF!);L&amp;]KC%$DX#0[G!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG!,&lt;RSHZF''&lt;-KR4-H"H"H"H"H"H-KR4-KSX6M#X6M''&lt;ZF!(;JR$)VAYHMCQMDA$CIV&lt;/_C(LS4&lt;:A0\GA0\GA3(LD6LZF''&lt;-KR4-H"H"H"H"H"H-KR4-KSX6M#X6M''&lt;ZF!(ZL&amp;]KC%%IJ&amp;U!I!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X&amp;XVUIL!(ZC5,-KR4-KR4-KR4-KR4-M#X6M#X6AUDZF&amp;L)JR$)\!YHMCQMDA$CIV=/K2&lt;GN 1OCC(G_G1&lt;A0\GN 1OX1(ZC5,-KR4-KR4-KR4-KR4-M#X6M#X6AUDZF!);L&amp;]KC%$#Y!PMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG"Y!YPQKF!(ZC0T6KR4-KR46M#X6M#X6M#XEC1(ZF&amp;L)JR%2\!YHB6(9SW5SIV&lt;/K2&lt;/K0\:C@0G_G1&lt;_G1&lt;_@\:CD=#F!(ZC0T6KR4-KR46M#X6M#X6M#XEC1(ZF!);L&amp;]KC%$#AAPMF2X^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^I 4TY $2F!(ZTT(EM#X6M#X6M#X6AT)QF!(ZX3,)JR%2\!YHB6)*NQ$CIV&lt;/K2&lt;/K2&lt;/_@\G_G1&lt;_G1&lt;_G1&lt;A0\LCAM#F!(ZTT(EM#X6M#X6M#X6AT)QF!(ZF!(2L!50C%$#AFH&lt;XRX^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8[CQQ&amp;RWA#F!(ZF!)QC0&lt;OC5DZF!(ZF!(ZN2$)JWI2E!YHB3\_Z#U/K2&lt;/K2&lt;/[6=/[6=/[2&lt;/K2&lt;/K2=&lt;_G1&lt;A3(LS7%#F!(ZF!)QC0&lt;OC5DZF!(ZF!(ZF''-;Y150BU%IAFH&lt;XRX^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG!,MYVYIVQ\;X1(ZF!(ZF!(ZF!(ZF&amp;L;JR$)\''I2E$!HB3]\G3U&lt;_G0/K2&lt;/K6=/[6&lt;%IRT%K2&lt;/K2&lt;/K2&lt;/K70GN 0LS7%9F!(ZF!(ZF!(ZF!(ZF" (^7,2Y4-0BTAIY!P&lt;XRX^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^F6E%J$%YNEUXJS,;X6M#X3,)JR$)JWI2\!XVE$ KM3]\EV)UA71&lt;_B&lt;/K2=/[6&lt;%IRT%IRT/K2&lt;/K2&lt;/K2&lt;/_G0:N 1OS1LS^SL3JB (U5]WF!(Z^7,2Y4,NBRLDJ!PMXRX^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8&amp;XS1"AGL5RAXVE!Y2\''I2\''I2\''HVE!XVR@,KM51\EQ&lt;5_@\G_G1&lt;K2&lt;/[6=/IRT%IRT%[6=/[6=/[6=/[2&lt;/_@\:C@1OS1LSD1M9^W%9X7-;^3I''GW@IVT$DX&amp;TMF2X^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG"X[CQQ8M0,KB4!HE!XVE!XVE!XVRD KB0,7M50UEQ&lt;5_@\GA71&lt;_B&lt;/K6=/[6&lt;%@0LC@0L%[6=/[6=/[6&lt;/K2=&lt;_@\:C@1OS4&lt;SD1LSD6M;^3H]\@9YH0P*EC1!F2X^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^I!,MUE1\M3\7B0,KRD!HRD KB0,KM3]\WATUK!T4A0\GA0]&lt;_G0/K2=/[6&lt;%IPLC@0LC@6=/[6=/[6=/[6&lt;/K2=&lt;_@\:N 0LCD=OS4=OL&amp;]K\@%@RVXTO@4[I"X^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^I"8.UE1\WE07M3\7M3\7M3\7WE1\EQT.K"8_US(:N \GA71&lt;K2&lt;/[6=/IRTC@0MST5L%[6=/[6=/[6=/[6=/K2&lt;/_G0GA3(:N#(:N!5KC%$#AFI%CVD&amp;I!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!91\WD.UEQTWE1\WE1\WE1\EUQTUB9,[F0_MP\:N#(GA0]&lt;_B&lt;/K6=/[2T%IPMST5MST2U/[6=/[6&lt;%IRT%IV=/[6&lt;/K2=&lt;_G1&lt;_G1KC%$#Y!P&lt;XRX&amp;G!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^HRE1\WE1K"9TUEQTUEQTK"8.K''E1\WDUMC(:N#(:N \G_G0/K2=/[6&lt;%IRTCT5MST5MSIRT%IRT%IRT%IRT%IRT%IRU/[6=/[6=/E0%@AFH&lt;F2X^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XF[RD!HRD!HWE1\WE1\WE1\WE1\WE1\WE1G5TLC@0:N#(GA71&lt;K2&lt;/K6&lt;%IRTC@5MSFQ$YFPL%IRT%IRT%IRT%@0LC@0LC@0L%IRT%IQ]YH0PTCRX^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA  !HRD!HRD!HRD!HRD!HRD!HRD!HRE1EST:C@0LN#(:N \G_B&lt;/K2=/[2T%@5MST1$YFQ$Y@2T%IRTC@0LC@0LC@0LC@0LC@0LC@0LVVRLDE@4&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XRHRD!HRD!HRD!HRD!HRD!HRD!HRD!K#P:C@0LCC(:N#(GA70/K2&lt;/[6&lt;%IPMST5LYFQ$YFQ$C@0LC@0LC@0LC@0LC@0LC@0LC@0LCUU$#AAPMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFHRD!HRD!HRD!HRD!HRD!HRD!HRD!\U1UC@0LC@0LN#(:A0]&lt;K2&lt;/K6=/IRTCT5LYFQ%=_W4YT0LC@0LC@0LC@0LC@0LCIRT%IRT%IULIH0Q"CQ,^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA"D!HRD!HRD!HRD!HRD!HRD!HRD!\QT5N 0LC@0LCC(:N \G_G0/K6=/IRTC@5MSFQ$Y_W5=_Q%S@0LC@0LC@0LC@0LCIRT%@0LC@0MSBTAIJ#0[G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8!HRD!HRD!HRD!HRD!HRD!HRD!\QT5N 0LC@0LC@0LN#(:A71&lt;K2=/[2T%@0MSFQ$Y_W5=_W5=FULC@2T%IRT%IPLC@0LC@0LC@0LC@5YYRR(&lt;XRXFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA Y-HRD!HRD!HRD!HRD!HRD!HRD!HR84N 0LC@0LC@0LCC(:N ]&lt;_B&lt;/[6&lt;%IPMST1$YFW5=_W5=_W4Y@2T%IRTC@0LC@0LC@0LC@0LC@0LVVT%&amp;YVD&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFBBD!HRD!HRD!HRD!HRD!HRD!HWE\UP0LC@0LC@0LC@0:N#(GA70/K6=/IRTCT5LYFQ%=_W5=_W5=_ULC@0LC@0LC@0LC@0LC@0LC@0LCE%$#AAPMI!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!H!HRD!HRD!HRD!HRD!HRD!HWDUMS(LC@0LC@0LC@0LCC(:A0]&lt;K2=/[2T%@5LYFQ%=_W5=_W5=_W4YT0LC@0LC@0LC@0LC@0LC@0LC@5UYH0PTCQ,^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA Y,HRD!HRD!HRD!HRD!HRD!HRD.MC)OS00LC@0LC@0LC@0LN#(G_G0/[6&lt;%@0MSFQ$Y_W5=_W5=_W5=_Q$C@0LC@0LC@0LC@2T%IRT%IRTYBT@DX#0[G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFHRD!HRD!HRD!HRD!HRD!HRE1WETLS4=OC@0LC@0LC@0LN#(:A71&lt;K6=/IPMST1$Y_W5=_W5=_W4PDAA=T0LC@0LC@0LC@2T%IPLC@0LCT0%@RR(&lt;F18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFI"D!HRD!HRD!HRD!HRD!HRE1EST:C@0LC@0LC@0LC@0LC@0:N \GK2=/IRTCT1$YFW5=_W5=_W5=DA@P_Q%S@2T%IRTC@0LC@0LC@0LC@0MVVT$*YVD&amp;A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA&amp;4!HRD!HRD!HRD!HRD!HRD!K#P:C@0LS4=OC@0LC@0LC@0LCC(GA70/[2T%@5LYFQ%=_W5=_W5=DA@P_W5=T0LC@0LC@0LC@0LC@0LC@0LCE%%IY&amp;U!I!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA YEHRD!HRD!HRD!HRD!HRD!\U1UC@0LC@1OS4&lt;LC@0LC@0LC@0:N ]&lt;K6&lt;%IUMSFQ%=_W5=_W5=DA@P_W5=_Q%S@0LC@0LC@0LC@0LC@0LC@5UYH0PTCRX^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFD"D!HRD!HRD!HRD!HRD!\QT5N 0LC@0LC@0LC@0LC@0LC@0LN#(G_B=/IPMSFQ$Y_W5=_W5=_W5=_W5=_W5=FULC@0LC@0LC@0LC@0LC@0LCVRLDX 4[G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA&amp;0!HRD!HRD!HRD!HRD!\QT5N 0LC@0LC@1OS4&lt;LC@0LC@0LC@0:A70/[2TCT5LY_W5=_W5=_Q@PDG5=_W5=_W4YT0LC@0LC@0L%IRT%IRT%FP%@AFH&lt;F18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X!HRD!HRD!HRD!HRD!HR84N 0LC@0LC@0LC@0LC@0LC@0LC@0LN ]&lt;K6&lt;C@5LYFW5=_W5=_Q@PDG5=_W5=_W5=_Q$C@0LC@0L%IRTC@0LC@5MVPD$*OA,^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA Y-HRD!HRD!HRD!HRD!HWE\UP0LC@0LC@0LC@1OS4&lt;LC@0LC@0LCC(:_B=/@5MSFW5=_W5=_W4PDAA=_W5=_W5=_W4YT0LC@0LC@0LC@0LC@0LCU%%IY&amp;U!I XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XF[RD!HRD!HRD!HRD!HWDUMS(LC@0LC@0LC@0LC@0LC@0LC@0LC@0:N \/IPMST1%=_W5=_W4PDAA=_W5=_W5=_W5=_Q$C@0LC@0LC@0LC@0LC@1YYH6Y%XRX^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!H!HRD!HRD!HRD!HWDUMS(LC@0LC@0LC@0LC@0LC@0LC@0LC@0LCC(GK2TCT1%=_W5=_W4PDAA=_W5=_W5=_W5=_W5=FULC@0LC@0LC@0LC@0MUVRLDE@4&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X!HRD!HRD!HRD!HWDUMS(LC@0LC@0LC@0LC@0LCD=OS00LC@0LC@0GVA]UT5LY_W5=_W4PDA@P_W5=_W5=_W5=_W5=_W4Y@0LC@0LC@0LC@0LCT0$#AFHMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XF[BD!HRD!HRD!HRD.MC(LC@0LC@0LC@0LC@0LC@0LS4=OC@0LCC(GE08NC%XY_W5=_W4PDA@P_W5=_W5=_W5=_W5=_W5=_ULC@0L%IRT%IRT%IQ$IP@P*OA,^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG"D!HRD!HRD!HRE1WETLC@0LC@0LC@0LC@0LC@0LCD=OS4=OCC(WC 8NBP$IBW]=_W4PDA@PDG5=_W5=_W5=_W5=_W5=_W4YT0L%IRT%@0LC@0MSU$AIJ#1!I XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA&amp;4!HRD!HRD!HRE1EST:C@0LC@0LC@0LC@0LC@0LC@1OS4&lt;LN!\NC 8IBP%YPBL#H7\PDA@PDG5=_W5=_W5=_W5=_W5=_W5=_Q$C@0LC@0LC@0LC@5YYRVY%XRX^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XHHRD!HRD!HRD!K#P:C@0LC@0LC@0LC@0LC@0LC@0LCD&lt;LE08NC 8IBU$#RT$DA@PDRW\PDAA=_W5=_W5=_W5=_W5=_W5=_W5=T0LC@0LC@0LC@0LVVRM&amp;E@4&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFV"D!HRD!HRD!HU1UC@0LC@0LC@0LC@0LC@0LC@0LC@0WC 8NBP$IVRMIAFX*X&amp;I"J&amp;XDH7\P_W5=_W5=_W5=_W5=_W5=_W5=_Q%S@0LC@0LC@0LCMU$#AAPMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA"D!HRD!HRD!HQT5N 0LC@0LC@0LC@0LC@0LC@0LCA\NC 8IBP%YPD$DY"(TO@4MCS0TJ&amp;XDH7]=_W5=_W5=_W5=_W5=_W5=_W5=FULC@0LC@0LC@5LIH0Q"CQ,^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X!HRD!HRD!HR84N 0LC@0LC@0LC@0LC@0LC@0LJP8NC $IBU%@H0Q&amp;J!P&lt;CVD[F1-!CS0TJ&amp;XDH0,P_W5=_W5=_W5=_W5=_W5=_W5=T0LC@0LC@0MSBTAIJ#0[G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^HRD!HRD!HWE\UP0LC@0LC@0LC@0LC@0LC@0)\@8NBP$IVT@#AFX*EC0MXQ,&amp;G!8^I"Y!CS0TJ&amp;XDPD P_W5=_W5=_W5=_W5=_W5=_Q$C@0LC@0LC@5YYRR(&lt;XRXFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XF[RD!HRD!HWDUMS(LC@0LC@0LC@0LC@0LCB%0C 8IBP%YPBMIAB(TO@5!F2X^G XFA X^I"Y!CS0TJ PDPD P_W5=_W5=_W5=_W5=_W5=T0LC@0LC@0LVVT%&amp;YVD&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA  !HRD!HWDUMS)OS00LC@0LC@0LC@0LJW@NC 8IBU%YH4$DJ!Q%CVD[I!8^A XFA XFA X^I!-!CVTTJ QIPCTP_W5=_W5=_W5=_Q@PDA%S@0LC@0LCE%$#Y!PMI!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XRHRD!HRD.MC(LS4=OC@0LC@0LC@0)E08NC $IVU$#RPP*EFTMXQ,&amp;G!8FA XFA XFA XFA X^I!-!CVTTJ QI\3TP_W5=_W5=_Q@PDA@PFPLC@0LC@5UYH0PTCQ,^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XF[BD!HRE1WETLC@1OS4&lt;LC@0LCB$WC 8NBP%YVRMIAB)"YP5!F2X^G XFA XFA XFA XFA XFA!8^I!-!CVU"J QI\3TP_W5=_Q@PDA@PDA%S@2T%IRTYBRLDX 4[G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA"D!HRE1EST:C@0LS4=OS4&lt;LN!\NC 8IBU%YH4$DJ&amp;I%CVD[I!8^A XFA XFA XFA XFA XFA XFA!8^I!-!CVU"J QI]75=_Q@PDA@P_W5=T0LC@0LCT0%@RR(&lt;F18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8!HRE1EST:C@0LCD=OS00:E08NC $IBU$#RPQ&amp;X&amp;T&lt;XQ,&amp;I!8FA XFA XFA XFA XFA XFA XFA XFA!8^I!-!OFU"Y QI]1@PDA@PDG5=_W5S@0LC@0MVVT$*YVD&amp;A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA Y-HRD!EST:C@0LC@0LS4&lt;WC 8NBP$IVRMIAFY"YS1!F2X&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA!8^I!-!OFU"Y QI]74PDG5=_W5=_Q%S@0LCE%%IY&amp;U!I!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFBBD!K#P:C@0LC@0LCA\NC 8IBP%YH4$DY&amp;I%O@4[I"X^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8^I!,MOFU"Y P#]1A=_W5=_W5=FULC@1YYH0PTCRX^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!H!\U1UC@0LC@0LE08NC $IBU$#RPQ&amp;X!P&lt;CQ,&amp;I!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8^I!,MOAQ"Y P#]75=_W5=_W5S@0MUVRLDE@4[G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA Y,HR84N 0LC@0WC 8NBP$IVTAIAFX*EC0MF2X&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8^I!,MOAP*Y P#]1A=_W5=T0L%T0%@AFH&lt;F18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XF\WD_UP0LN''I0C 8IBP%YPBLDY"(TO@4[F2X^G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8&amp;I!,MOAP*Y Q@B75=_ULC@0MVPD$*OA,^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFI''DUMG0GE $IBP$IBU%@H4%&amp;J!P&lt;CVD[I!8^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8&amp;I&amp;DMOAP*Y$%@RG5ST0L%U%%IJ&amp;U!I XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA  UMB=7AD%YBP$IVT@#RPP*EC0MXQ,&amp;G!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8&amp;F6DMOAP*AD%@MQ$%IQYYRVY%XRX^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA YLM@,*EFYIPE%YVRMIAB(TYP5!F2X^G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8&amp;F6DMYQP*AD%3MPMHPD%&amp;E@4&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFSC0[CQQ&amp;RRL#H4$DJ&amp;I%CVD[I!8^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG!8&amp;F6DMYVH*AD%3RBMIY!PMF18FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^F04TY QIRPP*X&amp;TMXQ,&amp;G!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG!8&amp;F6DMYVH*A@QIAFXTCQ,^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG!,MYVH*Y")"YP5!F2X^G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG!8&amp;F6DMYVH*Y&amp;Y"YP4[G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8&amp;XS1%EAQ%OFD[I"X^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG!8&amp;F6D&lt;YQPTYS1!I!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA X^I!-!CP4MXQ,&amp;I!8FA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG!8&amp;F6DMCP5!F2X^A XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA!8&amp;F1,[F2X&amp;G XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFA XFG!8&ampa'))</body><body package="StarBrowserUI2">starbrowser160x160mask	"UIMaskEditor new openOnClass: self andSelector: #starbrowser160x160mask"	&lt;resource: #image&gt;	^(Image extent: 160@160 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@G@@@@@@@@@@@@@@@@@@@@@@@@@@_8@@@@@@@@@@@@@@@@@@@@@@@@A?0@@@@@@@@@@@@@@@@@@@@@@@@O? @@@@@@@@@@@@@@@@@@@@@@@@?&gt;@@@@@@@@@@@@@@@@@@@@@@@@G?&lt;@@@@@@@@@@@@@@@@@@@@@@@@??0@@@@@@@@@@@@@@@@@@@@@@@C?? @@@@@@@@@@@@@@@@@@@@@@@_?&gt;@@@@@@@@@@@@@@@@@@@@@@@A??&lt;@@@@@@@@@@@@@@@@@@@@@@@O??0@@@@@@@@@@@@@@@@@@@@@@@??? @@@@@@@@@@@@@@@@@@@@@@G??&gt;@@@@@@@@@@@@@@@@@@@@@@@_??&lt;@@@@@@@@@@@@@@@@@@@@@@C???0@@@@@@@@@@@@@@@@@@@@@@O??? @@@@@@@@@@@@@@@@@@@@@@???&gt;@@@@@@@@@@@@@@@@@@@@@@G???&lt;@@@@@@@@@@@@@@@@@@@@@@_???0@@@@@@@@@@@@@@@@@@@@@C???? @@@@@@@@@@@@@@@@@@@@@O???&gt;@@@@@@@@@@@@@@@@@@@@@A????&lt;@@@@@@@@@@@@@@@@@@@@@G????0@@@@@@@@@@@@@@@@@@@@@????? @@@@@@@@@@@@@@@@@@@@C????&gt;@@@@@@@@@@@@@@@@@@@@@_????&lt;@@@@@@@@@@@@@@@@@@@@A?????0@@@@@@@@@@@@@@@@@@@@O????? @@@@@@@@@@@@@@@@@@@@?????&gt;@@@@@@@@@@@@@@@@@@@@G?????&lt;@@@@@@@@@@@@@@@@@@@@_?????0@@@@@@@@@@@@@@@@@@@C?????? @@@@@@@@@@@@@@@@@@@O?????&gt;@@@@@@@@@@@@@@@@@@@A??????&lt;@@@@@@@@@@@@@@@@@@@G??????0@@@@@@@@@@@@@@@@@@@??????? @@@@@@@@@@@@@@@@@@C??????&gt;@@@@@@@@@@@@@@@@@@@_??????&lt;@@@@@@@@@@@@@@@@@@A???????0@@@@@@@@@@@@@@@@@@O??????? @@@@@@@@@@@@@@@@@@???????&gt;@@@@@@@@@@@@@@@@O?G?????????8@@@@@@@@@@@@@O?????????????@@@@@@@@@@@@C?????????????? @@@@@@@@@@@???????????????0@@@@@@@@@@G??????????????? @@@@@@@@@A???????????????? @@@@@@@@@O????????????????@@@@@@@@@O?????????????????@@@@@@@A??????????????????? @@@@@O?????????????????????@@@@???????????????????????&gt;@@_????????????????????????0@????????????????????????? A?????????????????????????@G????????????????????????&lt;@_????????????????????????0A?????????????????????????@G????????????????????????&lt;@O????????????????????????0@????????????????????????&gt;@A????????????????????????0@C???????????????????????&gt;@@C???????????????????????0@@G??????????????????????&gt;@@@O??????????????????????0@@@_?????????????????????&gt;@@@@??????????????????????0@@@A?????????????????????&gt;@@@@C?????????????????????0@@@@G????????????????????&gt;@@@@@O????????????????????0@@@@@_???????????????????&gt;@@@@@@????????????????????0@@@@@A???????????????????&gt;@@@@@@C???????????????????0@@@@@@G??????????????????&gt;@@@@@@@O??????????????????8@@@@@@@_??????????????????@@@@@@@@??????????????????&lt;@@@@@@@C??????????????????0@@@@@@@G?????????????????&gt;@@@@@@@@O?????????????????0@@@@@@@@??????????????????@@@@@@@@A?????????????????8@@@@@@@@C?????????????????@@@@@@@@@G????????????????8@@@@@@@@@O????????????????@@@@@@@@@@_???????????????8@@@@@@@@@@????????????????@@@@@@@@@@A???????????????8@@@@@@@@@@A??????????????&gt;@@@@@@@@@@@C??????????????0@@@@@@@@@@@O?????????????8@@@@@@@@@@@@??????????????@@@@@@@@@@@@C?????????????&lt;@@@@@@@@@@@@O?????????????0@@@@@@@@@@@@??????????????@@@@@@@@@@@@C?????????????&lt;@@@@@@@@@@@@_?????????????0@@@@@@@@@@@A?????????????? @@@@@@@@@@@G?????????????&gt;@@@@@@@@@@@@_?????????????8@@@@@@@@@@@A?????????????? @@@@@@@@@@@G?????????????&gt;@@@@@@@@@@@@??????????????8@@@@@@@@@@@C??????????????0@@@@@@@@@@@O??????????????@@@@@@@@@@@@??????????????&lt;@@@@@@@@@@@C??????????????0@@@@@@@@@@@O??????????????@@@@@@@@@@@A??????????????&lt;@@@@@@@@@@@G??????????????8@@@@@@@@@@@_?????????????? @@@@@@@@@@A??????????????&gt;@@@@@@@@@@@G??????????????8@@@@@@@@@@@??????????????? @@@@@@@@@@C???????????????@@@@@@@@@@@O??????????????&lt;@@@@@@@@@@@???????????????0@@@@@@@@@@C???????????????@@@@@@@@@@@O??????????????&lt;@@@@@@@@@@A???????????????0@@@@@@@@@@G???????!??????? @@@@@@@@@@_??????8A??????&gt;@@@@@@@@@@A??????&gt;@A??????8@@@@@@@@@@G?????? @C?????? @@@@@@@@@@_?????8@@C?????&gt;@@@@@@@@@@C?????&gt;@@@C?????8@@@@@@@@@@O????? @@@C?????0@@@@@@@@@@?????8@@@@C?????@@@@@@@@@@C????&gt;@@@@@C????&lt;@@@@@@@@@@O???? @@@@@C????0@@@@@@@@@@????&lt;@@@@@@C????@@@@@@@@@@G????@@@@@@@C???&lt;@@@@@@@@@@_???0@@@@@@@C???8@@@@@@@@@A???&lt;@@@@@@@@C??? @@@@@@@@@G???@@@@@@@@@G??&gt;@@@@@@@@@@O??0@@@@@@@@@G??8@@@@@@@@@@??&lt;@@@@@@@@@@G?? @@@@@@@@@C??@@@@@@@@@@@G?&gt;@@@@@@@@@@O?0@@@@@@@@@@@G?8@@@@@@@@@@_&lt;@@@@@@@@@@@@G? @@@@@@@@@A?@@@@@@@@@@@@@G&lt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body></methods><methods><class-id>Classifications2.StarBrowser2About class</class-id> <category>interface specs</category><body package="StarBrowserUI2">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'About...' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 1152 864 ) 			#bounds: #(#{Graphics.Rectangle} 576 384 916 614 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 170 0 0.5 0 ) 					#name: #StarBrowser2Label 					#label: 'StarBrowser2' 					#style: #large ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 210 0 0.5 0 ) 					#name: #HomepageLabel 					#label: 'http://homepages.vub.ac.be/~rowuyts/StarBrowser/' ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication true ) 					#layout: #(#{Core.Point} 90 0 ) 					#name: #image 					#label: #image 					#hasCharacterOrientedLabel: false ) ) ) )</body></methods><methods><class-id>Classifications2.SmartClassificationEditor class</class-id> <category>interface specs</category><body package="StarBrowserUI2">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Smart Classification Editor' 			#bounds: #(#{Graphics.Rectangle} 577 428 1022 735 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 80 0 130 0 -5 1 -30 1 ) 					#name: #descriptionText 					#model: #descriptionText 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 0 125 ) 					#name: #descriptionLabel 					#label: 'Description:' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -25 1 120 0 -1 1 ) 					#name: #accept 					#model: #accept 					#label: 'accept' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 80 0 5 0 -5 1 30 0 ) 					#name: #name 					#model: #name ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 0 1 ) 					#name: #nameLabel 					#label: 'Name:' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 0 35 ) 					#name: #commentLabel 					#label: 'Comment:' ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 80 0 40 0 -5 1 120 0 ) 					#name: #commentText 					#model: #commentText 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>Classifications2.MenuService</class-id> <category>menu items</category><body package="StarBrowserUI2">addSubmenu	&lt;submenu: 'Add'		nameKey: #add		menu: #(#menu)		position: 25.15		disabledFor:#()&gt;</body><body package="StarBrowserUI2">asClassification	&lt;menuItem: 'As Classification'		nameKey: #asClassification		menu: #(#menu)		position: 25.5		disabledFor:#(undefinedObject)&gt;	| classification |	classification := self item isClassification 				ifTrue: [self item asClassification]				ifFalse: 					[(Classification name: self item printString						comment: 'Classification constructed by the StarBrowser as result of a ''As classification'' menu operation.') 							silentAdd: self item].	self treeEditor addToParentClassification: classification</body><body package="StarBrowserUI2">clearClassification	&lt;menuItem: 'Clear Classification'		nameKey: #clearClassification		menu: #(#menu)		position: 25.10		enabledFor:#(classification rootClassification)&gt;	self starBrowser performAction: ClearClassificationAction		forItem: self item</body><body package="StarBrowserUI2">collapseCurrent	&lt;menuItem: 'Collapse fully'		nameKey: #collapseCurrent		menu: #(#menu)		position: 5.7		disabledFor:#(undefinedObject)&gt;		| treemodel |	treemodel := self starBrowser classificationsTreeEditor 				classificationsTree listHolder 				value.	treemodel contractFully: (treemodel indexOf: self item)</body><body package="StarBrowserUI2">differenceClassifications	&lt;menuItem: 'Difference'		nameKey: #differenceClassifications		menu: #(#menu)		position: 15.20		enabledFor:#(classification smartClassification rootClassification)&gt;	| classification1 classification2 |	classification1 := self item.	classification2 := self promptForClassification.	self treeEditor addToParentClassification: classification1 - classification2</body><body package="StarBrowserUI2">expandCurrent	&lt;menuItem: 'Expand fully'		nameKey: #expandCurrent		menu: #(#menu)		position: 5.6		disabledFor:#(undefinedObject)&gt;	| treemodel |	treemodel := self starBrowser classificationsTreeEditor 				classificationsTree listHolder 				value.	treemodel expandFully: (treemodel indexOf: self item)</body><body package="StarBrowserUI2">export	&lt;menuItem: 'Export'		nameKey: #export		menu: #(#menu)		position: 20.5		enabledFor:#()&gt;	"not yet. so disable for everybody"</body><body package="StarBrowserUI2">implementorsSubmenu	&lt;submenu: 'Implementors'		nameKey: #implementors		menu: #(#menu)		position: 10.10		disabledFor:#()&gt;</body><body package="StarBrowserUI2">import	&lt;menuItem: 'Import'		nameKey: #export		menu: #(#menu)		position: 20.10		enabledFor:#()&gt;	"not yet. so disable for everybody"</body><body package="StarBrowserUI2">inspectItem	&lt;menuItem: 'Inspect'		nameKey: #inspectItem		menu: #(#menu)		position: 5.5		disabledFor:#(undefinedObject)&gt;	self item inspect</body><body package="StarBrowserUI2">intersectClassifications	&lt;menuItem: 'Intersect'		nameKey: #intersectClassifications		menu: #(#menu)		position: 15.10		enabledFor:#(classification smartClassification rootClassification)&gt;	| classification1 classification2 |	classification1 := self item.	classification2 := self promptForClassification.	self treeEditor addToParentClassification: classification1 * classification2</body><body package="StarBrowserUI2">removeItem	&lt;menuItem: 'Remove'		nameKey: #removeItem		menu: #(#menu)		position: 5.15		disabledFor:#(undefinedObject rootClassification)&gt;	self starBrowser performAction: RemoveAction forItem: self item</body><body package="StarBrowserUI2">renameClassification	&lt;menuItem: 'Rename'		nameKey: #renameClassification		menu: #(#menu)		position: 15.5		enabledFor:#(classification smartClassification rootClassification)&gt;	self starBrowser performAction: RenameClassificationAction forItem: self item</body><body package="StarBrowserUI2">sendersSubmenu	&lt;submenu: 'Senders'		nameKey: #senders		menu: #(#menu)		position: 10.5		disabledFor:#()&gt;</body><body package="StarBrowserUI2">spawnStarBrowser	&lt;menuItem: 'Spawn'		nameKey: #spawnStarBrowser		menu: #(#menu)		position: 5.5		disabledFor:#(undefinedObject)&gt;	StarBrowser2 openOnClassification: self item</body><body package="StarBrowserUI2">toggleToolbar	&lt;menuItem: 'Toggle toolbar'		nameKey: #toggleToolbar		menu: #(#menu)		position: 95.5		disabledFor:#()&gt;	self treeEditor toggleToolbar</body><body package="StarBrowserUI2">unionClassifications	&lt;menuItem: 'Union'		nameKey: #unionClassifications		menu: #(#menu)		position: 15.15		enabledFor:#(classification smartClassification rootClassification)&gt;	| classification1 classification2 |	classification1 := self item.	classification2 := self promptForClassification.	self treeEditor addToParentClassification: classification1 + classification2</body></methods><methods><class-id>Classifications2.MenuService</class-id> <category>toolbar operations</category><body package="StarBrowserUI2">newEditorTab	&lt;menuItem: 'In New Tab'		icon: #newEditorTab		nameKey: #inNewTab		menu: #(toolbar)		position: 3.9		disabledFor:#(undefinedObject)&gt;	self starBrowser itemEditor inNewTab</body><body package="StarBrowserUI2">removeEditorTab	&lt;menuItem: 'Remove Tab'		icon: #removeEditorTab		nameKey: #removeTab		menu: #(toolbar)		position: 3.13		disabledFor:#()&gt;	self starBrowser itemEditor removeTab</body><body package="StarBrowserUI2">toggleClassificationsTree	&lt;menuItem: 'Toggle Classifications Tree'		icon: #hideClassificationsTree		nameKey: #toggleClassificationsTree		menu: #(toolbar)		position: 1.11		disabledFor:#()&gt;	self starBrowser toggleClassificationsTree</body></methods><methods><class-id>Classifications2.MenuService</class-id> <category>submenu-senders</category><body package="StarBrowserUI2">classificationSenders	&lt;menuItem: 'Classification'		nameKey: #classificationSenders		menu: #(#menu senders)		position: 5.10		enabledFor:#(method)&gt;	| aSymbol result mc senders parent |	aSymbol := self item selector.	mc := MethodCollector new.	parent := self treeEditor parentForSelection.	senders := ((mc referencesTo: aSymbol)			&amp; (mc searchClassification: parent)) select.	result := Classification 				name: 'Senders of ' , aSymbol, ' In ', parent name				comment: 'Senders of ' , aSymbol, ' in the classification ', parent name				items: senders.	self treeEditor addToCurrentClassification: result</body><body package="StarBrowserUI2">globalSenders	&lt;menuItem: 'Global'		nameKey: #globalSenders		menu: #(#menu senders)		position: 5.5		enabledFor:#(method)&gt;	| aSymbol result |	aSymbol := self item selector.	result := Classification 				name: 'All Senders of ' , aSymbol				comment: 'All senders of ', aSymbol				items: (MethodCollector new referencesTo: aSymbol) select.	self treeEditor addToCurrentClassification: result</body></methods><methods><class-id>Classifications2.MenuService</class-id> <category>submenu-implementors</category><body package="StarBrowserUI2">classificationImplementors	&lt;menuItem: 'Classification'		nameKey: #classificationImplementors		menu: #(#menu implementors)		position: 5.10		enabledFor:#(method)&gt;	| aSymbol result mc implementors parent |	aSymbol := self item selector.	mc := MethodCollector new.	parent := self treeEditor parentForSelection.	implementors := ((mc implementorsOf: aSymbol)			&amp; (mc searchClassification: parent)) select.	result := Classification 				name: 'Implementors of ' , aSymbol, ' In ', parent name				comment: 'Implementors of ' , aSymbol, ' in the classification ', parent name				items: implementors.	self treeEditor addToCurrentClassification: result</body><body package="StarBrowserUI2">globalImplementors	&lt;menuItem: 'Global'		nameKey: #globalImplementors		menu: #(#menu implementors)		position: 5.5		enabledFor:#(method)&gt;	| aSymbol result |	aSymbol := self item selector.	result := Classification 				name: 'All Implementors of ' , aSymbol				comment: 'All implementors of ', aSymbol				items: (MethodCollector new implementorsOf: aSymbol) select.	self treeEditor addToCurrentClassification: result</body></methods><methods><class-id>Classifications2.MenuService</class-id> <category>submenu-add</category><body package="StarBrowserUI2">addClassification	&lt;menuItem: 'Classification'		nameKey: #addClassification		menu: #(#menu add)		position: 5.10		enabledFor:#(object classification class method rootClassification)&gt;	&lt;menuItem: 'Classification'		icon: #orangeDiamondPlus		nameKey: #addClassification		menu: #(#toolbar)		position: 5.10		enabledFor:#(object classification class method rootClassification)&gt;	self starBrowser performAction: AddClassificationAction</body><body package="StarBrowserUI2">addObject	&lt;menuItem: 'Object'		nameKey: #addObject		menu: #(#menu add)		position: 5.5		disabledFor:#(undefinedObject smartClassification)&gt;	self starBrowser performAction: AddObjectAction</body><body package="StarBrowserUI2">addSmartClassification	&lt;menuItem: 'Smart Classification'		nameKey: #addSmartClassification		menu: #(#menu add)		position: 5.15		enabledFor:#(object classification class method rootClassification)&gt;	&lt;menuItem: 'Smart Classification'		icon: #redDiamondPlus		nameKey: #addSmartClassification		menu: #(toolbar)		position: 5.19		enabledFor:#(object classification class method rootClassification)&gt;	self starBrowser performAction: AddSmartClassificationAction</body></methods><methods><class-id>Classifications2.MenuService class</class-id> <category>resources</category><body package="StarBrowserUI2">itemMenu	"Tools.MenuEditor new openOnClass: self andSelector: #itemMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Inspect It' 				#nameKey: #inspectIt 				#value: #inspectIt 				#helpText: 'Inspect the selected item' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Remove' 				#nameKey: #remove 				#value: #remove 				#helpText: 'Remove the selected item' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Senders' 				#nameKey: #senders 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Global' 							#nameKey: #sendersGlobal 							#value: #sendersGlobal 							#helpText: 'Systemwide senders' ) 						#(#{UI.MenuItem} 							#rawLabel: 'In Classification' 							#nameKey: #sendersInClassification 							#value: #sendersInClassification 							#helpText: 'Senders in the classification' ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Implementors' 				#nameKey: #implementors 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Global' 							#nameKey: #implementorsGlobal 							#value: #implementorsGlobal 							#helpText: 'Global senders' ) 						#(#{UI.MenuItem} 							#rawLabel: 'In Classification' 							#nameKey: #implementorsInClassification 							#value: #implementorsInClassification 							#helpText: 'Senders in the classification' ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Rename...' 				#nameKey: #rename 				#value: #rename 				#helpText: 'Rename the selected classification' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Intersect...' 				#nameKey: #intersect 				#value: #intersect 				#helpText: 'Intersect the selection with another classification' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Union...' 				#nameKey: #union 				#value: #union 				#helpText: 'Make the union of the selection with another classification' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Difference...' 				#nameKey: #difference 				#value: #difference 				#helpText: 'Make the difference of the selection with another classification' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Export...' 				#nameKey: #export 				#value: #export 				#helpText: 'Export the selected classification to a file' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Import...' 				#nameKey: #import 				#value: #import 				#helpText: 'Import a classification from a file' ) 			#(#{UI.MenuItem} 				#rawLabel: 'As Extentional' 				#nameKey: #asExtentional 				#value: #asExtentional 				#helpText: 'Convert the selection to an extentional classification' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Clear' 				#nameKey: #clear 				#value: #clear 				#helpText: 'Remove all the elements in the selected classification' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Add' 				#nameKey: #add 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Object...' 							#nameKey: #addObject 							#value: #addObject 							#helpText: 'Prompt for an object to add' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Extentional' 							#nameKey: #addExtentional 							#value: #addExtentional 							#helpText: 'Add an empty extensional (enumerated) classification' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Intentional' 							#nameKey: #addSmalltalkIntentional 							#value: #addSmalltalkIntentional 							#helpText: 'Add an empty intentional (calculated) classification' ) ) #(3 ) nil ) ) ) #(2 2 4 2 3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Classifications2.MenuService class</class-id> <category>accessing</category><body package="StarBrowserUI2">pragmas	&lt;pragmas: #instance&gt;	^#(		#menuItem:nameKey:menu:position:disabledFor:		#menuItem:icon:nameKey:menu:position:disabledFor:		#submenu:nameKey:menu:position:disabledFor:		#menuItem:nameKey:menu:position:enabledFor:		#menuItem:icon:nameKey:menu:position:enabledFor:		#submenu:nameKey:menu:position:enabledFor:		#override:nameKey:enabledFor:		#override:nameKey:disabledFor:	)</body></methods><methods><class-id>Classifications2.StarBrowser2 class</class-id> <category>resources</category><body package="StarBrowserUI2">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'File' 				#nameKey: #File 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Open...' 							#nameKey: #importClassification 							#value: #importClassification 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileOpen ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Save...' 							#nameKey: #exportClassification 							#value: #exportClassification 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #fileSave ) ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Edit' 				#nameKey: #edit 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Paste' 							#nameKey: #paste 							#value: #paste 							#labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #paste ) ) 						#(#{UI.MenuItem} 							#rawLabel: 'Undo' 							#enabled: false 							#nameKey: #undoAction 							#value: #undoAction ) 						#(#{UI.MenuItem} 							#rawLabel: 'Redo' 							#enabled: false 							#nameKey: #redoAction 							#value: #redoAction ) ) #(3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'View' 				#nameKey: #view 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'Classifications Tree' 							#nameKey: #classificationsTree 							#value: #toggleClassificationsTree 							#indication: true ) 						#(#{UI.MenuItem} 							#rawLabel: 'Editor toolbar' 							#nameKey: #editorToolbar 							#value: #toggleEditorBar 							#submenu: #(#{UI.Menu} #(									#(#{UI.MenuItem} 										#rawLabel: 'Visible' 										#nameKey: #editorConfigurationBarVisible 										#value: #toggleEditorBar 										#indication: true ) 									#(#{UI.MenuItem} 										#rawLabel: 'Horizontal' 										#nameKey: #editorConfigurationBarHorizontal 										#value: #makeEditorConfigurationBarHorizontal 										#indication: false ) 									#(#{UI.MenuItem} 										#rawLabel: 'Vertical' 										#nameKey: #editorConfigurationBarVertical 										#value: #makeEditorConfigurationBarVertical 										#indication: true ) ) #(1 2 ) nil ) ) ) #(2 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Services' 				#nameKey: #services 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'inspect configuration...' 							#nameKey: #inspectConfiguration 							#value: #inspectConfiguration ) ) #(1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 'Help' 				#nameKey: #help 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 'inspect...' 							#nameKey: #inspect 							#value: #inspect ) 						#(#{UI.MenuItem} 							#rawLabel: 'About' 							#nameKey: #about 							#value: #about ) ) #(2 ) nil ) ) ) #(5 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Classifications2.StarBrowser2 class</class-id> <category>interface specs</category><body package="StarBrowserUI2">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'StarBrowser' 			#min: #(#{Core.Point} 970 543 ) 			#max: #(#{Core.Point} 4000 4000 ) 			#bounds: #(#{Graphics.Rectangle} 754 438 1724 981 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -3 0.27 0 1 ) 					#name: #classificationsTreeEditor 					#majorKey: #{Classifications2.ClassificationTreeEditor} 					#minorKey: #windowSpec 					#clientKey: #classificationsTreeEditor ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 34 0.27 0 0 0 1 0 1 ) 					#name: #itemEditor 					#majorKey: #{Classifications2.ItemEditor} 					#minorKey: #windowSpec 					#clientKey: #itemEditor ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -3 0.27 0 0 4 0.27 0 1 ) 					#name: #splitter 					#horizontal: false 					#minAboveSize: 25 					#minBelowSize: 25 					#aboveWidgets: 'classificationsTreeEditor' 					#belowWidgets: 'toolbar itemEditor' ) ) ) )</body></methods><methods><class-id>Classifications2.EditorService</class-id> <category>default edit actions</category><body package="StarBrowserUI2">defaultAnythingEditor	&lt;menuItem: 'Default Anything Editor'		icon: #icon		nameKey: #defaultEditors		menu: #(toolbar)		position: 5		notShownFor: #(class method package bundle parcel smartClassification undefinedObject)&gt;	^TrippyShell forItem: self item starBrowser: self starBrowser</body><body package="StarBrowserUI2">defaultClassEditor	&lt;menuItem: 'Default Class Editor'		icon: #icon		nameKey: #defaultEditors		menu: #(toolbar)		position: 3		shownFor: #(class)&gt;	| shell |	shell := RBShell forItem: self  item starBrowser: self starBrowser.	shell forClass: self item.	^shell</body><body package="StarBrowserUI2">defaultMethodEditor	&lt;menuItem: 'Default Menu Editor'		icon: #icon		nameKey: #defaultEditors		menu: #(toolbar)		position: 3		shownFor: #(method)&gt;	| shell |	shell := RBShell forItem: self  item starBrowser: self starBrowser.	shell forMethod: self item.	^shell</body><body package="StarBrowserUI2">defaultPundleEditor	&lt;menuItem: 'Default Pundle Editor'		icon: #icon		nameKey: #defaultEditors		menu: #(toolbar)		position: 3		shownFor: #(bundle package)&gt;	| shell |	shell := RBShell forItem: self item starBrowser: self starBrowser.	shell forPundle: self item.	^shell</body><body package="StarBrowserUI2">defaultSmartClassificationEditor	&lt;menuItem: 'Default Smart Classification Editor'		icon: #icon		nameKey: #defaultEditors		menu: #(toolbar)		position: 3		shownFor: #(smartClassification)&gt;	| shell |	shell := EditorShell forItem: self item starBrowser: self starBrowser.	shell editor: (SmartClassificationEditor on: self item).	^shell</body><body package="StarBrowserUI2">defaultUndefinedObjectEditor	&lt;menuItem: 'Default UndefinedObject Editor'		icon: #icon		nameKey: #defaultEditors		menu: #(toolbar)		position: 3		shownFor: #(undefinedObject)&gt;	| shell |	shell := RBShell forItem: self item starBrowser: self starBrowser.	shell empty.	^shell</body></methods><methods><class-id>Classifications2.EditorService class</class-id> <category>accessing</category><body package="StarBrowserUI2">pragmas	&lt;pragmas: #instance&gt;	^#(		#menuItem:icon:nameKey:menu:position:notShownFor:		#menuItem:icon:nameKey:menu:position:shownFor:	)</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor class</class-id> <category>resources</category><body package="StarBrowserUI2">toolbar	"Tools.MenuEditor new openOnClass: self andSelector: #toolbar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(#(#{UI.MenuItem} #rawLabel: 'Add Classification' #nameKey: #addClassification #value: #addClassification #labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #orangeDiamondPlus) #helpText: 'Add a classification') #(#{UI.MenuItem} #rawLabel: 'Add Smart Classification' #nameKey: #addSmartClassification #value: #addSmartClassification #labelImage: #(#{UI.ResourceRetriever} #{ToolbarIconLibrary} #redDiamondPlus))) #(2) nil) 		decodeAsLiteralArray</body></methods><methods><class-id>Classifications2.ClassificationTreeEditor class</class-id> <category>interface specs</category><body package="StarBrowserUI2">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Classifications Tree Editor' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 4000 4000 ) 			#bounds: #(#{Graphics.Rectangle} 960 600 1660 1040 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.TreeViewSpec} 					#properties: 					#(#{UI.PropertyListDictionary} #dragEnterSelector 						#dragEnter: #fullLineSelect false #dragOverSelector 						#dragOver: #dragStartSelector 						#doDrag: #dragExitSelector 						#dragLeave: #dropSelector 						#drop: #dragOkSelector 						#wantToDrag: ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 30 0 0 1 0 1 ) 					#name: #classificationsTree 					#model: #classificationsTree 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#requestValueChangeSelector: 						#requestForChange: ) 					#menu: #classificationsTreeMenu 					#useModifierKeys: true 					#selectionType: #highlight 					#displayStringSelector: #label 					#useIcons: #other 					#iconSelectors: #(#icon ) 					#rootExpander: false ) ) ) )</body></methods><methods><class-id>Tools.ToolbarIconLibrary class</class-id> <category>resources</category><body package="StarBrowserIcons2">advanceEditor20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #advanceEditor20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 3) at: 1 put: Graphics.ColorValue black; at: 2 put: Graphics.ColorValue yellow; at: 3 put: Graphics.ColorValue white; yourself)) usingBits: #[170 170 170 170 170 0 0 0 170 170 170 170 170 0 0 0 170 0 10 170 170 0 0 0 170 21 74 0 10 0 0 0 170 21 66 21 74 0 0 0 170 0 8 21 74 0 0 0 170 162 170 0 10 0 0 0 170 162 170 170 170 0 0 0 170 0 0 170 170 0 0 0 170 42 168 170 170 0 0 0 170 42 168 170 170 0 0 0 160 0 128 2 170 0 0 0 161 84 133 82 170 0 0 0 161 84 133 82 170 0 0 0 160 0 128 2 170 0 0 0 170 170 170 170 170 0 0 0 170 170 170 170 170 0 0 0 170 170 170 170 170 0 0 0 170 170 170 170 170 0 0 0 170 170 170 170 170 0 0 0])</body><body package="StarBrowserIcons2">advanceEditor20x20bw	"Tools.UIMaskEditor new openOnClass: self andSelector: #advanceEditor20x20bw"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 15 192 0 0 8 79 192 0 8 104 64 0 15 216 64 0 2 15 192 0 2 0 0 0 15 240 0 0 8 16 0 0 8 16 0 0 63 126 0 0 33 66 0 0 33 66 0 0 63 126 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">advanceEditor20x20mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #advanceEditor20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 15 192 0 0 15 207 192 0 15 239 192 0 15 223 192 0 2 15 192 0 2 0 0 0 15 240 0 0 8 16 0 0 8 16 0 0 63 126 0 0 63 126 0 0 63 126 0 0 63 126 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">fullBrowser20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #fullBrowser20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: MonoMappedPalette blackWhite usingBits: #[255 255 240 0 255 255 240 0 255 255 240 0 255 255 240 0 192 0 48 0 221 221 176 0 221 221 176 0 221 221 176 0 221 221 176 0 192 0 48 0 223 255 176 0 223 255 176 0 223 255 176 0 223 255 176 0 223 255 176 0 192 0 48 0 255 255 240 0 255 255 240 0 255 255 240 0 255 255 240 0])</body><body package="StarBrowserIcons2">fullBrowser20x20bw	"Tools.UIMaskEditor new openOnClass: self andSelector: #fullBrowser20x20bw"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 255 192 0 34 34 64 0 34 34 64 0 34 34 64 0 34 34 64 0 63 255 192 0 32 0 64 0 32 0 64 0 32 0 64 0 32 0 64 0 32 0 64 0 63 255 192 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">fullBrowser20x20mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #fullBrowser20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 63 255 192 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">greenDiamondPlus20x20	"UIMaskEditor new openOnClass: self andSelector: #greenDiamondPlus20x20"	&lt;resource: #image&gt;	^(Image extent: 20@20 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 7324 scaledGreen: 7741 scaledBlue: 7516); at: 3 put: (Graphics.ColorValue scaledRed: 2409 scaledGreen: 5139 scaledBlue: 3758); at: 4 put: (Graphics.ColorValue scaledRed: 1445 scaledGreen: 3855 scaledBlue: 2666); at: 5 put: (Graphics.ColorValue scaledRed: 771 scaledGreen: 2281 scaledBlue: 1542); at: 6 put: (Graphics.ColorValue scaledRed: 4401 scaledGreen: 6296 scaledBlue: 5364); at: 7 put: (Graphics.ColorValue scaledRed: 4079 scaledGreen: 4079 scaledBlue: 4079); at: 8 put: (Graphics.ColorValue scaledRed: 899 scaledGreen: 1638 scaledBlue: 1253); at: 9 put: (Graphics.ColorValue scaledRed: 3694 scaledGreen: 5878 scaledBlue: 4786); at: 10 put: (Graphics.ColorValue scaledRed: 5846 scaledGreen: 6746 scaledBlue: 6264); at: 11 put: Graphics.ColorValue white; at: 12 put: (Graphics.ColorValue scaledRed: 1028 scaledGreen: 3116 scaledBlue: 2056); at: 13 put: (Graphics.ColorValue scaledRed: 1735 scaledGreen: 4561 scaledBlue: 3148); at: 14 put: (Graphics.ColorValue scaledRed: 514 scaledGreen: 899 scaledBlue: 707); at: 15 put: (Graphics.ColorValue scaledRed: 5172 scaledGreen: 6681 scaledBlue: 5942); at: 16 put: (Graphics.ColorValue scaledRed: 3019 scaledGreen: 5589 scaledBlue: 4304); yourself)) usingBits: (ByteArray fromPackedString: 'B (JB (JB (JB (J@P(JB (JB (JB (JB (JB (JB X@A (JB (JB (JB (JB (JB (JA @FB (JB (JB (JB (JB (JB (F@@XJB (JB (JB (JB (J@P8JB X@A (JB (JB (JB (JB DHB@8JA @FB (JB (JB (JB (ACP@@@@@@@@@@@@@@A0(JB (J@P8KCP4MCP@@@@\GA0\FB (JB DNC THC0&lt;BA@@FB (JB (JB (AC 8NAP O@ 0D@@,JB (JB (JBP8NAPTEB@&lt;LC@P@A0 JB (JB $EAP HB@ O@ 0CA0@GB0 JB (JBP OC0&lt;O@ HL@0LG@@\KB@(JB (JC &lt;O@ HBC@LKB0,KB0XJB (JB (JBPHB@ 0CB0,DA@PFB (JB (JB (JBP0LC@LKA@PDA (JB (JB (JB (JBP0L@0,DA@XJB (JB (JB (JB (JBP0CB0PFB (JB (JB (JB (JB (JBPLKA (JB (JB (JB (JB (JB (JBP JB (JB (JB (JB @a'))</body><body package="StarBrowserIcons2">greenDiamondPlus20x20mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #greenDiamondPlus20x20mask"	&lt;resource: #image&gt;	^(Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 28 0 0 0 28 0 0 0 28 0 0 1 156 0 0 1 220 0 0 3 255 224 0 7 255 224 0 15 252 0 0 31 252 0 0 127 254 0 0 255 255 0 0 255 255 0 0 127 254 0 0 63 252 0 0 31 248 0 0 15 240 0 0 7 224 0 0 3 192 0 0 1 128 0 0])</body><body package="StarBrowserIcons2">hideClassificationsTree20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #toggleClassificationsTree20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 5) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 5460 scaledGreen: 5460 scaledBlue: 5460); at: 3 put: Graphics.ColorValue blue; at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: (ByteArray fromPackedString: 'L3L3L3L3L3L3L0@@L3L3L3L3L3L3L0@@L@@@@@@@@@@@@@@@LCL3L3@QEADTL@@@LADQDS@QEADTL@@@LCL3L3@@@@@@@@@@LCDQL3@3L3L3L@@@LCL3L3@3L3L3L@@@LCL#DS@0@@@3L@@@LCH#L3@3L3L3L@@@LBH"H"@0@CL3L@@@LBH"H"@3L3L3L@@@LCH#L3@3L@@0L@@@LCL#DS@3L3L3L@@@LCL3L3@3L@L@L@@@LCL1DS@3L3L3L@@@LCL3L3@3L3@@L@@@LCL1DS@3L3L3L@@@L@@@@@@@@@@@@@@@L3L3L3L3L3L3L0@@'))</body><body package="StarBrowserIcons2">hideClassificationsTree20x20mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #hideClassificationsTree20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 0 0 0 0])</body><body package="StarBrowserIcons2">newEditorTab20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #newEditorTab20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 4) at: 1 put: Graphics.ColorValue black; at: 2 put: Graphics.ColorValue blue; at: 3 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4111); at: 4 put: Graphics.ColorValue white; yourself)) usingBits: #[255 255 255 255 255 0 0 0 255 255 255 255 255 0 0 0 255 223 255 255 255 0 0 0 255 223 247 255 255 0 0 0 127 223 223 255 255 0 0 0 223 223 127 255 255 0 0 0 247 221 255 255 255 0 0 0 253 255 255 255 255 0 0 0 255 124 0 0 3 0 0 0 87 243 255 255 252 0 0 0 255 207 187 174 236 0 0 0 253 207 171 190 236 0 0 0 247 207 187 174 236 0 0 0 223 207 187 190 172 0 0 0 127 207 187 174 236 0 0 0 255 207 255 255 252 0 0 0 0 0 0 0 0 0 0 0 255 255 255 255 255 0 0 0 255 255 255 255 255 0 0 0 255 255 255 255 255 0 0 0])</body><body package="StarBrowserIcons2">newEditorTab20x20mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #newEditorTab20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 4 0 0 0 4 32 0 0 132 64 0 0 68 128 0 0 37 0 0 0 16 0 0 0 9 255 224 0 227 255 240 0 7 255 240 0 23 255 240 0 39 255 240 0 71 255 240 0 135 255 240 0 7 255 240 0 255 255 240 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">orangeDiamondPlus20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #orangeDiamondPlus20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 3886 scaledGreen: 3886 scaledBlue: 3886); at: 3 put: (Graphics.ColorValue scaledRed: 7259 scaledGreen: 3180 scaledBlue: 481); at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 7934 scaledGreen: 3918 scaledBlue: 1252); at: 6 put: (Graphics.ColorValue scaledRed: 5364 scaledGreen: 2152 scaledBlue: 0); at: 7 put: (Graphics.ColorValue scaledRed: 6263 scaledGreen: 4400 scaledBlue: 3147); at: 8 put: (Graphics.ColorValue scaledRed: 3372 scaledGreen: 2280 scaledBlue: 1573); at: 9 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 5717 scaledBlue: 4047); at: 10 put: (Graphics.ColorValue scaledRed: 6295 scaledGreen: 2569 scaledBlue: 64); at: 11 put: (Graphics.ColorValue scaledRed: 5492 scaledGreen: 4047 scaledBlue: 3083); at: 12 put: (Graphics.ColorValue scaledRed: 1252 scaledGreen: 1252 scaledBlue: 1252); at: 13 put: (Graphics.ColorValue scaledRed: 7998 scaledGreen: 4497 scaledBlue: 2184); at: 14 put: (Graphics.ColorValue scaledRed: 4207 scaledGreen: 1670 scaledBlue: 0); at: 15 put: (Graphics.ColorValue scaledRed: 7773 scaledGreen: 6456 scaledBlue: 5524); at: 16 put: (Graphics.ColorValue scaledRed: 3147 scaledGreen: 1252 scaledBlue: 0); yourself)) usingBits: (ByteArray fromPackedString: 'L3L3L3L3L3L3L0@@L3L3L3L1@SL3L0@@L3L3L3L1@SL3L0@@L3L3L3L1@SL3L0@@L3L3O(L1@SL3L0@@L3L3OL 1@SL3L0@@L3L3,@@@@@@@,0@@L3L8^;.0@K.;D0@@L3NH#LQO@SL3L0@@L3"H#LP/A3L3L0@@O("H#DH/C6L3L0@@:H3L3DJ_C5X3L0@@;L1DQB&amp;_C5X3L0@@NLQDP)UUUVL3L0@@L&gt;QBJU7]5#L3L0@@L38"JU7](3L3L0@@L3O"J]7ZL3L3L0@@L3L&gt;J]6#L3L3L0@@L3L3:](3L3L3L0@@L3L3O&amp;L3L3L3L0@@'))</body><body package="StarBrowserIcons2">orangeDiamondPlus20x20mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #orangeDiamondPlus20x20mask"	&lt;resource: #image&gt;	^(Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 28 0 0 0 28 0 0 0 28 0 0 1 156 0 0 1 220 0 0 3 255 224 0 7 255 224 0 15 252 0 0 31 252 0 0 127 254 0 0 255 255 0 0 255 255 0 0 127 254 0 0 63 252 0 0 31 248 0 0 15 240 0 0 7 224 0 0 3 192 0 0 1 128 0 0])</body><body package="StarBrowserIcons2">redDiamondPlus20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #redDiamondPlus20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 4 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 3276 scaledGreen: 1638 scaledBlue: 1638); at: 3 put: (Graphics.ColorValue scaledRed: 3886 scaledGreen: 3886 scaledBlue: 3886); at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 6552 scaledGreen: 0 scaledBlue: 0); at: 6 put: (Graphics.ColorValue scaledRed: 7259 scaledGreen: 481 scaledBlue: 481); at: 7 put: (Graphics.ColorValue scaledRed: 7869 scaledGreen: 6617 scaledBlue: 6617); at: 8 put: (Graphics.ColorValue scaledRed: 5910 scaledGreen: 3083 scaledBlue: 3083); at: 9 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 3276 scaledBlue: 3276); at: 10 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 4497 scaledBlue: 4497); at: 11 put: (Graphics.ColorValue scaledRed: 3276 scaledGreen: 0 scaledBlue: 0); at: 12 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7163 scaledBlue: 7163); at: 13 put: (Graphics.ColorValue scaledRed: 7644 scaledGreen: 5332 scaledBlue: 5332); at: 14 put: (Graphics.ColorValue scaledRed: 1284 scaledGreen: 835 scaledBlue: 835); at: 15 put: (Graphics.ColorValue scaledRed: 4914 scaledGreen: 0 scaledBlue: 0); at: 16 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 1638 scaledBlue: 1638); yourself)) usingBits: (ByteArray fromPackedString: 'L3L3L3L3L3L3L0@@L3L3L3L2@#L3L0@@L3L3L3L2@#L3L0@@L3L3L3L2@#L3L0@@L3L3M)L2@#L3L0@@L3L3ZH$2@#L3L0@@L3L;4@@@@@@@40@@L3N9G]7P@M7]H0@@L3.Y"O=Z@#L3L0@@L;&amp;Y"O=Z@SL3L0@@OI&amp;X"OUZB''L3L0@@2H"H#5UJB$\3L0@@&amp;O??=UQJB.\3L0@@N_??UT;.;''L3L0@@L6?5UN;.93L3L0@@L31UUN:*\3L3L0@@L3OEUN*''L3L3L0@@L3L&lt;UN)3L3L3L0@@L3L31N\3L3L3L0@@L3L3OGL3L3L3L0@@'))</body><body package="StarBrowserIcons2">redDiamondPlus20x20mask	"UIMaskEditor new openOnClass: self andSelector: #redDiamondPlus20x20mask"	&lt;resource: #image&gt;	^(Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 28 0 0 0 28 0 0 0 28 0 0 1 156 0 0 1 220 0 0 3 255 224 0 7 255 224 0 15 252 0 0 31 252 0 0 127 254 0 0 255 255 0 0 255 255 0 0 127 254 0 0 63 252 0 0 31 248 0 0 15 240 0 0 7 224 0 0 3 192 0 0 1 128 0 0])</body><body package="StarBrowserIcons2">removeEditorTab20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #removeEditorTab20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 5) at: 1 put: Graphics.ColorValue black; at: 2 put: Graphics.ColorValue red; at: 3 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 0 scaledBlue: 0); at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4111); yourself)) usingBits: (ByteArray fromPackedString: 'L3L3L3L3L3L3L0@@L3L3L3L3L3L3L0@@L3L3L3L3L3L3L0@@L2D3L3L3L3L!L0@@L3HSL3L3L3HRL0@@L3L!L3L3L2D#L0@@L3L2D3L3L!H3L0@@L3L3HSL3HRL3L0@@L3L@@!@BD @3L0@@L3@3L2D!H3LCL0@@L0L4P3HRQCLCL0@@L0MCMBD!P4LCL0@@L0MCL!H2D4LCL0@@L0MCHRP3HTLCL0@@L0L2D#QCP!LCL0@@L0L!H3L3L2DCL0@@L@HR@@@@@@HP@0@@L3D#L3L3L3L!L0@@L3L3L3L3L3L3L0@@L3L3L3L3L3L3L0@@'))</body><body package="StarBrowserIcons2">removeEditorTab20x20mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #removeEditorTab20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 48 0 192 0 24 1 192 0 12 3 128 0 6 7 0 0 3 14 0 0 15 255 0 0 31 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 63 255 128 0 127 255 224 0 24 0 192 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">showClassificationsTree20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #showClassificationsTree20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 3 bitsPerPixel: 4 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 5) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 5460 scaledGreen: 5460 scaledBlue: 5460); at: 3 put: Graphics.ColorValue blue; at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 4111 scaledGreen: 4111 scaledBlue: 4111); yourself)) usingBits: (ByteArray fromPackedString: 'L3L3L3L3L3L3L0@@L3L3L3L3L3L3L0@@L@@@@@@@@@@@@@@@LCL3L3@QEADTL@@@LADQDS@QEADTL@@@LCL3L3@@@@@@@@@@LCDQL3@3L3L3L@@@LCL3L3@3L3L3L@@@LCDSHS@0@@@3L@@@LCL3H#@3L3L3L@@@LBH"H"@0@CL3L@@@LBH"H"@3L3L3L@@@LCL3H#@3L@@0L@@@LCDSHS@3L3L3L@@@LCL3L3@3L@L@L@@@LCDSL3@3L3L3L@@@LCL3L3@3L3@@L@@@LCDQL3@3L3L3L@@@L@@@@@@@@@@@@@@@L3L3L3L3L3L3L0@@'))</body><body package="StarBrowserIcons2">showClassificationsTree20x20mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #showClassificationsTree20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 0 0 0 0])</body><body package="StarBrowserIcons2">simpleBrowser20x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #simpleBrowser20x20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 4) at: 1 put: Graphics.ColorValue black; at: 2 put: Graphics.ColorValue blue; at: 3 put: (Graphics.ColorValue scaledRed: 5460 scaledGreen: 5460 scaledBlue: 5460); at: 4 put: Graphics.ColorValue white; yourself)) usingBits: #[255 255 255 255 255 0 0 0 255 255 255 255 255 0 0 0 192 0 0 0 0 0 0 0 197 85 85 85 84 0 0 0 202 170 170 170 168 0 0 0 202 170 170 170 168 0 0 0 192 0 0 0 0 0 0 0 207 255 252 255 252 0 0 0 207 255 252 255 252 0 0 0 207 255 252 255 252 0 0 0 207 255 252 255 252 0 0 0 207 255 252 255 252 0 0 0 192 0 0 0 0 0 0 0 207 255 255 255 252 0 0 0 207 255 255 255 252 0 0 0 207 255 255 255 252 0 0 0 207 255 255 255 252 0 0 0 207 255 255 255 252 0 0 0 192 0 0 0 0 0 0 0 255 255 255 255 255 0 0 0])</body><body package="StarBrowserIcons2">simpleBrowser20x20bw	"Tools.UIMaskEditor new openOnClass: self andSelector: #simpleBrowser20x20bw"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 127 255 240 0 64 0 16 0 64 0 16 0 64 0 16 0 127 255 240 0 64 16 16 0 64 16 16 0 64 16 16 0 64 16 16 0 64 16 16 0 127 255 240 0 64 0 16 0 64 0 16 0 64 0 16 0 64 0 16 0 64 0 16 0 127 255 240 0 0 0 0 0])</body><body package="StarBrowserIcons2">simpleBrowser20x20mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #simpleBrowser20x20mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 127 255 240 0 0 0 0 0])</body><body package="StarBrowserIcons2">starBrowser220x20	"Tools.UIMaskEditor new openOnClass: self andSelector: #starBrowser220x20"	&lt;resource: #image&gt;	^(Image extent: 20@20 depth: 5 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 17) at: 1 put: Graphics.ColorValue black; at: 2 put: Graphics.ColorValue white; at: 3 put: (Graphics.ColorValue scaledRed: 6617 scaledGreen: 4207 scaledBlue: 578); at: 4 put: (Graphics.ColorValue scaledRed: 8030 scaledGreen: 5524 scaledBlue: 1734); at: 5 put: (Graphics.ColorValue scaledRed: 8158 scaledGreen: 5814 scaledBlue: 2280); at: 6 put: (Graphics.ColorValue scaledRed: 5428 scaledGreen: 3244 scaledBlue: 32); at: 7 put: (Graphics.ColorValue scaledRed: 4818 scaledGreen: 2890 scaledBlue: 0); at: 8 put: (Graphics.ColorValue scaledRed: 7677 scaledGreen: 7548 scaledBlue: 7323); at: 9 put: (Graphics.ColorValue scaledRed: 8158 scaledGreen: 6199 scaledBlue: 3308); at: 10 put: (Graphics.ColorValue scaledRed: 7966 scaledGreen: 7516 scaledBlue: 6809); at: 11 put: (Graphics.ColorValue scaledRed: 7709 scaledGreen: 5235 scaledBlue: 1541); at: 12 put: (Graphics.ColorValue scaledRed: 7580 scaledGreen: 6488 scaledBlue: 4818); at: 13 put: (Graphics.ColorValue scaledRed: 6135 scaledGreen: 3758 scaledBlue: 224); at: 14 put: (Graphics.ColorValue scaledRed: 6552 scaledGreen: 4914 scaledBlue: 3276); at: 15 put: (Graphics.ColorValue scaledRed: 7355 scaledGreen: 4753 scaledBlue: 835); at: 16 put: (Graphics.ColorValue scaledRed: 7580 scaledGreen: 7066 scaledBlue: 6327); at: 17 put: (Graphics.ColorValue scaledRed: 8158 scaledGreen: 7002 scaledBlue: 5300); yourself)) usingBits: (ByteArray fromPackedString: '@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDIBPDA@PDA@PDA@PDA@PDA@PDA@P H@PDA@PDA@PDA@PDA@PDA@PDGA@LI@PDA@PDA@PDA@PDA@PDA@P D@0LA@PDA@PDA@PDA@PDA@PDIB@ CC!@A@PDA@PDA@PDA@PDA@P,HB@(NB DA@PDA@PDIBQ@PB@ HB@ H@08NC LDB0,OC0&lt;CA@PD@@@HB@ CB 8@@@8B@ HK@P$DA@@A@P@HA@LN@@DA@@0LC0DA@P\@@PDA@P@@@@@A@PDA@@&lt;A@PDA@P@A@PDA@@(N@@DA@PD@@PDA@PDA@P@A@P@JC HL@@DA@@DA@PDA@PDA@P@@C 8BC@TF@@@O@PDA@PDA@PDOB 8BC@0EA XFA ,A@PDA@PDA@Q@N@ 0LAPTFA XFCPDA@PDA@PDAB@8BC@4GA04EA XM@PDA@PDA@PDN@ 4G@PDA@P\MAP0A@PDA@PDA@P G@PDA@PDA@PDGCP\A@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@a'))</body><body package="StarBrowserIcons2">starBrowser220x20mask	"UIMaskEditor new openOnClass: self andSelector: #starBrowser220x20mask"	&lt;resource: #image&gt;	^(Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 96 0 0 0 96 0 0 0 240 0 0 0 240 0 0 1 248 0 0 1 248 0 0 255 255 240 0 255 255 240 0 127 255 224 0 63 255 192 0 31 255 128 0 15 255 0 0 15 255 0 0 15 255 0 0 15 255 0 0 15 255 0 0 15 15 0 0 28 3 128 0 0 0 0 0])</body><body package="StarBrowserIcons2">yellowStar20x20	"UIMaskEditor new openOnClass: self andSelector: #yellowStar20x20"	&lt;resource: #image&gt;	^(Image extent: 20@20 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 4818 scaledGreen: 2891 scaledBlue: 0); at: 2 put: (Graphics.ColorValue scaledRed: 7677 scaledGreen: 7549 scaledBlue: 7324); at: 3 put: (Graphics.ColorValue scaledRed: 8030 scaledGreen: 5525 scaledBlue: 1735); at: 4 put: (Graphics.ColorValue scaledRed: 7581 scaledGreen: 6489 scaledBlue: 4818); at: 5 put: (Graphics.ColorValue scaledRed: 7356 scaledGreen: 4754 scaledBlue: 835); at: 6 put: (Graphics.ColorValue scaledRed: 6553 scaledGreen: 4915 scaledBlue: 3276); at: 7 put: (Graphics.ColorValue scaledRed: 6135 scaledGreen: 3758 scaledBlue: 225); at: 8 put: (Graphics.ColorValue scaledRed: 7966 scaledGreen: 7516 scaledBlue: 6810); at: 9 put: (Graphics.ColorValue scaledRed: 8159 scaledGreen: 6199 scaledBlue: 3309); at: 10 put: Graphics.ColorValue white; at: 11 put: (Graphics.ColorValue scaledRed: 7581 scaledGreen: 7067 scaledBlue: 6328); at: 12 put: (Graphics.ColorValue scaledRed: 7709 scaledGreen: 5236 scaledBlue: 1542); at: 13 put: (Graphics.ColorValue scaledRed: 6617 scaledGreen: 4208 scaledBlue: 578); at: 14 put: (Graphics.ColorValue scaledRed: 8159 scaledGreen: 7003 scaledBlue: 5300); at: 15 put: (Graphics.ColorValue scaledRed: 8159 scaledGreen: 5814 scaledBlue: 2281); at: 16 put: (Graphics.ColorValue scaledRed: 5429 scaledGreen: 3244 scaledBlue: 32); yourself)) usingBits: (ByteArray fromPackedString: 'BP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$GA0$IBP$IBP$IBP$IBP$IBP$IBP HBP$IBP$IBP$IBP$IBP$IBP$AC HGBP$IBP$IBP$IBP$IBP$IBP N@ HIBP$IBP$IBP$IBP$IBP$GB@ BA@4IBP$IBP$IBP$IBP$IBPLHB@,DB0$IBP$IBP$GA04MB@ HB@ H@ PDA@HN@0LJB (BC 8NB@ HB@ BB0PDA@PLC@0CBP\NC 8HB@ HC HDA@PLA XFB $IBPDNC 8NC 8NB0PLC@XOA (IBP$IBP$NC 8N@ ,DC@XOC0&lt;JBP$IBP$IBP$B@ HKA@0FC0@@@P$IBP$IBP$IBPHBA@PLA &lt;@@@@JBP$IBP$IBP$JB0PLA XO@@@@@@LIBP$IBP$IBP4DC@XFC0&lt;@@@@@AP$IBP$IBP$IB@PLA TA@PTO@@@EBP$IBP$IBP$DC@TABP$IBPDEC0XIBP$IBP$IBP ABP$IBP$IBP$AAPDIBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP@a'))</body><body package="StarBrowserIcons2">yellowStar20x20mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #yellowStar20x20mask"	&lt;resource: #image&gt;	^(Image extent: 20@20 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 96 0 0 0 96 0 0 0 240 0 0 0 240 0 0 1 248 0 0 1 248 0 0 255 255 240 0 255 255 240 0 127 255 224 0 63 255 192 0 15 255 128 0 7 255 0 0 7 255 0 0 15 255 0 0 15 255 0 0 15 255 0 0 15 15 0 0 28 3 128 0 0 0 0 0])</body></methods><methods><class-id>Tools.ListIconLibrary class</class-id> <category>resources</category><body package="StarBrowserIcons2">blueCircle16x16	"UIMaskEditor new openOnClass: self andSelector: #blueCircle16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 2024 scaledGreen: 3180 scaledBlue: 4915); at: 2 put: (Graphics.ColorValue scaledRed: 7292 scaledGreen: 7516 scaledBlue: 7838); at: 3 put: (Graphics.ColorValue scaledRed: 3276 scaledGreen: 5236 scaledBlue: 8159); at: 4 put: (Graphics.ColorValue scaledRed: 2088 scaledGreen: 4144 scaledBlue: 7195); at: 5 put: (Graphics.ColorValue scaledRed: 4818 scaledGreen: 5557 scaledBlue: 6617); at: 6 put: (Graphics.ColorValue scaledRed: 5396 scaledGreen: 6489 scaledBlue: 8191); at: 7 put: (Graphics.ColorValue scaledRed: 2024 scaledGreen: 3726 scaledBlue: 6296); at: 8 put: (Graphics.ColorValue scaledRed: 2795 scaledGreen: 4915 scaledBlue: 8030); at: 9 put: (Graphics.ColorValue scaledRed: 4818 scaledGreen: 6167 scaledBlue: 8191); at: 10 put: (Graphics.ColorValue scaledRed: 4144 scaledGreen: 5782 scaledBlue: 8191); at: 11 put: Graphics.ColorValue white; at: 12 put: (Graphics.ColorValue scaledRed: 6553 scaledGreen: 7195 scaledBlue: 8191); at: 13 put: (Graphics.ColorValue scaledRed: 2088 scaledGreen: 3951 scaledBlue: 6810); at: 14 put: (Graphics.ColorValue scaledRed: 2409 scaledGreen: 4529 scaledBlue: 7709); at: 15 put: (Graphics.ColorValue scaledRed: 2024 scaledGreen: 3437 scaledBlue: 5525); at: 16 put: (Graphics.ColorValue scaledRed: 3758 scaledGreen: 5557 scaledBlue: 8191); yourself)) usingBits: (ByteArray fromPackedString: 'B (JB (JB (JB (JB (JB (JB (JB0$OC0TAB (JB (JB (KB@ HBP&lt;BA0 JB (JB (KAPTHBP&lt;B@ \MB@(JB (JB@TEB@$O@ \M@0LAB (JB0 HB@$I@ \MCPLLA@(JB $IBP$IC0HGCPLLC@0JB (OC0&lt;O@ HGCPLLA XFB (JC0&lt;B@ \MCP0FA XNA (JB TB@ \MCP0FC 8NC PJB (JA0\MCPLLA 8N@@@AB (JB TM@0LLA 8N@@@DB (JB (JB@LLA XN@@@DB (JB (JB (AA@0FA PAB (JB (JB (JB (JB (JB (JB (JB (JB (JB (JB (JB (JB @a'))</body><body package="StarBrowserIcons2">blueCircle16x16mask	"UIMaskEditor new openOnClass: self andSelector: #blueCircle16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 7 224 0 0 31 240 0 0 63 248 0 0 63 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 63 252 0 0 63 248 0 0 31 240 0 0 15 224 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">blueDiamond16x16	"UIMaskEditor new openOnClass: self andSelector: #blueDiamond16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 2666 scaledGreen: 3276 scaledBlue: 5204); at: 2 put: Graphics.ColorValue white; at: 3 put: (Graphics.ColorValue scaledRed: 5139 scaledGreen: 5493 scaledBlue: 6521); at: 4 put: (Graphics.ColorValue scaledRed: 3212 scaledGreen: 4240 scaledBlue: 7420); at: 5 put: (Graphics.ColorValue scaledRed: 5557 scaledGreen: 6103 scaledBlue: 7741); at: 6 put: (Graphics.ColorValue scaledRed: 2891 scaledGreen: 3790 scaledBlue: 6424); at: 7 put: (Graphics.ColorValue scaledRed: 4722 scaledGreen: 5589 scaledBlue: 8191); at: 8 put: (Graphics.ColorValue scaledRed: 6360 scaledGreen: 6842 scaledBlue: 8191); at: 9 put: (Graphics.ColorValue scaledRed: 4240 scaledGreen: 5204 scaledBlue: 8030); at: 10 put: (Graphics.ColorValue scaledRed: 2795 scaledGreen: 3565 scaledBlue: 5878); at: 11 put: (Graphics.ColorValue scaledRed: 3052 scaledGreen: 4015 scaledBlue: 7035); at: 12 put: (Graphics.ColorValue scaledRed: 3630 scaledGreen: 4658 scaledBlue: 7838); at: 13 put: (Graphics.ColorValue scaledRed: 5718 scaledGreen: 6328 scaledBlue: 8191); at: 14 put: (Graphics.ColorValue scaledRed: 5300 scaledGreen: 5782 scaledBlue: 7195); at: 15 put: (Graphics.ColorValue scaledRed: 6810 scaledGreen: 7163 scaledBlue: 8191); at: 16 put: (Graphics.ColorValue scaledRed: 5075 scaledGreen: 5846 scaledBlue: 8191); yourself)) usingBits: (ByteArray fromPackedString: '@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDGA0DA@PDA@PDA@PDA@PDNC0XG@PDA@PDA@PDA@PDNC@&lt;FB@0A@PDA@PDA@PDNC@0OA  KA@DA@PDA@PDNC@0LA  HB0LM@PDA@PDNC@0LC@XHB0LJB 4A@PDGC0&lt;OC0XHB0LJAPTECPDAA0XHB@ HB0(EAPTIBP4A@PDGB@ HB0LEBP$IBP4A@PDA@P\HB0,JBP@@@@HA@PDA@PDAA@LCB $@@@HA@PDA@PDA@PDD@0(@@@HA@PDA@PDA@PDA@PPJBPHA@PDA@PDA@PDA@PDACP4A@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@a'))</body><body package="StarBrowserIcons2">blueDiamond16x16mask	"UIMaskEditor new openOnClass: self andSelector: #blueDiamond16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 1 128 0 0 3 192 0 0 7 224 0 0 15 240 0 0 31 248 0 0 63 252 0 0 127 254 0 0 127 254 0 0 63 252 0 0 31 248 0 0 15 240 0 0 7 224 0 0 3 192 0 0 1 128 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">blueStar16x16	"UIMaskEditor new openOnClass: self andSelector: #blueStar16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 1060 scaledGreen: 1060 scaledBlue: 4240); at: 2 put: (Graphics.ColorValue scaledRed: 7420 scaledGreen: 7420 scaledBlue: 7741); at: 3 put: (Graphics.ColorValue scaledRed: 4433 scaledGreen: 4433 scaledBlue: 6264); at: 4 put: (Graphics.ColorValue scaledRed: 3276 scaledGreen: 3276 scaledBlue: 6553); at: 5 put: (Graphics.ColorValue scaledRed: 1895 scaledGreen: 1895 scaledBlue: 5718); at: 6 put: (Graphics.ColorValue scaledRed: 5621 scaledGreen: 5621 scaledBlue: 7324); at: 7 put: Graphics.ColorValue white; at: 8 put: (Graphics.ColorValue scaledRed: 2827 scaledGreen: 2827 scaledBlue: 6521); at: 9 put: (Graphics.ColorValue scaledRed: 6617 scaledGreen: 6617 scaledBlue: 7292); at: 10 put: (Graphics.ColorValue scaledRed: 3855 scaledGreen: 3855 scaledBlue: 6103); at: 11 put: (Graphics.ColorValue scaledRed: 1285 scaledGreen: 1285 scaledBlue: 4754); at: 12 put: (Graphics.ColorValue scaledRed: 4336 scaledGreen: 4336 scaledBlue: 7099); at: 13 put: (Graphics.ColorValue scaledRed: 3919 scaledGreen: 3919 scaledBlue: 7099); at: 14 put: (Graphics.ColorValue scaledRed: 2441 scaledGreen: 2441 scaledBlue: 6039); at: 15 put: (Graphics.ColorValue scaledRed: 4979 scaledGreen: 4979 scaledBlue: 7227); at: 16 put: (Graphics.ColorValue scaledRed: 1638 scaledGreen: 1638 scaledBlue: 4915); yourself)) usingBits: (ByteArray fromPackedString: 'A XFA XFA DAA XFA XFA XFA XFA XNB0XFA XFA XFA XFA XFC@LAA XFA XFA XFA XFAP0CC XFA XFA XFA XFA ,L@0\AA XFA XFA DHB@8KB0LG@08EB@DFC LLC@,KB00CA04MA@PDB0XE@00LC@0CA04DC0&lt;OBPXFA 8C@00C@04OB (JBPXFA XFC LC@04DB @@BPXFA XFA XC@0\MC0@@@@XFA XFA XAA0\MA@(@@@@HA XFA XFB@\MA@&lt;@@@@@APXFA XFA TMA@&lt;B@ @@@@HFA XFA XLA@$AA XABP@MA XFA XFB0 FA XFA XHBPXFA @a'))</body><body package="StarBrowserIcons2">blueStar16x16mask	"UIMaskEditor new openOnClass: self andSelector: #blueStar16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[1 128 0 0 1 128 0 0 1 192 0 0 3 192 0 0 3 224 0 0 63 254 0 0 255 255 0 0 127 254 0 0 63 252 0 0 31 248 0 0 15 240 0 0 31 248 0 0 31 248 0 0 31 248 0 0 30 120 0 0 24 24 0 0])</body><body package="StarBrowserIcons2">classItem16x16	"Tools.UIMaskEditor new openOnClass: self andSelector: #classItem16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 5 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 18) at: 1 put: (Graphics.ColorValue scaledRed: 2023 scaledGreen: 4753 scaledBlue: 2955); at: 2 put: (Graphics.ColorValue scaledRed: 5653 scaledGreen: 7163 scaledBlue: 6167); at: 3 put: (Graphics.ColorValue scaledRed: 2666 scaledGreen: 5781 scaledBlue: 3693); at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4111); at: 6 put: (Graphics.ColorValue scaledRed: 3758 scaledGreen: 6424 scaledBlue: 4625); at: 7 put: (Graphics.ColorValue scaledRed: 4753 scaledGreen: 6809 scaledBlue: 5428); at: 8 put: (Graphics.ColorValue scaledRed: 4304 scaledGreen: 6617 scaledBlue: 5075); at: 9 put: (Graphics.ColorValue scaledRed: 2023 scaledGreen: 4529 scaledBlue: 2858); at: 10 put: Graphics.ColorValue blue; at: 11 put: (Graphics.ColorValue scaledRed: 2023 scaledGreen: 3950 scaledBlue: 2666); at: 12 put: (Graphics.ColorValue scaledRed: 5235 scaledGreen: 6874 scaledBlue: 5781); at: 13 put: (Graphics.ColorValue scaledRed: 2087 scaledGreen: 5139 scaledBlue: 3083); at: 14 put: (Graphics.ColorValue scaledRed: 4818 scaledGreen: 6263 scaledBlue: 5300); at: 15 put: (Graphics.ColorValue scaledRed: 3147 scaledGreen: 6135 scaledBlue: 4143); at: 16 put: (Graphics.ColorValue scaledRed: 6552 scaledGreen: 7548 scaledBlue: 6874); at: 17 put: (Graphics.ColorValue scaledRed: 2344 scaledGreen: 5492 scaledBlue: 3372); at: 18 put: (Graphics.ColorValue scaledRed: 7323 scaledGreen: 7644 scaledBlue: 7452); yourself)) usingBits: (ByteArray fromPackedString: '@0LC@0LC@0LC@0LC@0LC@0LC@0LCC0\EAPDQ@0LC@0LC@0LOB0XGA0TN@ ,C@0LC@0LOB0,FA0TEC HPCPLC@0LCB0,KA \EC HPC@0Q@0LCC0XFA $IBP$DD@0@CPLC@0\GA0\IAP8BA@0L@A@C@0LEAPTEBP8BD@P@@@ H@0LCAPTEC $BD@@DB@ H@@LC@0DNC HDA@PDA@(JB 4C@0LQC HPD@0@B@(JB (Q@0LC@0,PD@0@@@ JB (M@0LC@0LCA 0@@@ JB (M@0LC@0LC@0LQCQ@@@@4Q@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0@a'))</body><body package="StarBrowserIcons2">classItem16x16mask	"UIMaskEditor new openOnClass: self andSelector: #classItem16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 7 224 0 0 31 240 0 0 63 248 0 0 63 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 63 252 0 0 63 248 0 0 31 240 0 0 15 224 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">extentionalClassification16x16	"Tools.UIMaskEditor new openOnClass: self andSelector: #extentionalClassification16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 5 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 19) at: 1 put: Graphics.ColorValue black; at: 2 put: (Graphics.ColorValue scaledRed: 6327 scaledGreen: 6327 scaledBlue: 0); at: 3 put: (Graphics.ColorValue scaledRed: 2120 scaledGreen: 2120 scaledBlue: 4753); at: 4 put: Graphics.ColorValue white; at: 5 put: (Graphics.ColorValue scaledRed: 2890 scaledGreen: 2890 scaledBlue: 0); at: 6 put: (Graphics.ColorValue scaledRed: 4753 scaledGreen: 256 scaledBlue: 256); at: 7 put: (Graphics.ColorValue scaledRed: 6070 scaledGreen: 1060 scaledBlue: 1060); at: 8 put: (Graphics.ColorValue scaledRed: 6327 scaledGreen: 6327 scaledBlue: 8191); at: 9 put: (Graphics.ColorValue scaledRed: 2633 scaledGreen: 2633 scaledBlue: 5814); at: 10 put: (Graphics.ColorValue scaledRed: 7677 scaledGreen: 1573 scaledBlue: 1573); at: 11 put: (Graphics.ColorValue scaledRed: 3950 scaledGreen: 3950 scaledBlue: 0); at: 12 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 4240 scaledBlue: 4240); at: 13 put: (Graphics.ColorValue scaledRed: 1316 scaledGreen: 1316 scaledBlue: 4497); at: 14 put: (Graphics.ColorValue scaledRed: 1863 scaledGreen: 1863 scaledBlue: 0); at: 15 put: Graphics.ColorValue yellow; at: 16 put: (Graphics.ColorValue scaledRed: 3693 scaledGreen: 0 scaledBlue: 0); at: 17 put: (Graphics.ColorValue scaledRed: 4240 scaledGreen: 4240 scaledBlue: 7387); at: 18 put: (Graphics.ColorValue scaledRed: 3180 scaledGreen: 3180 scaledBlue: 0); at: 19 put: (Graphics.ColorValue scaledRed: 4753 scaledGreen: 4753 scaledBlue: 0); yourself)) usingBits: (ByteArray fromPackedString: '@0LC@0LC@0LC@0LC@0LC@0LC@0@@@@@@@@@@@@@@@@LC@@@@@0LC@0LC@0LC@0@@@0@C@0LC@0LC@0TEAPLC@@@C@0HB@ LC@0TCB0$E@0@@@0HCA1@B@0LEB0,IAPL@@@LBA0\P@ LCAP$IA &lt;C@@@C@!@PB@0C@0LEAP&lt;C@@@@@0LB@ 0CDQDR@0LC@0@C@@@C@0LCDPLN@P(C@0L@@0L@@@@C@1DNC DD@0L@@@LC@0LC@@LR@PDRCPLC@@LC@0LC@0@C@0(DCPLC@@@C@0LC@0LC@@@@@@@@@@@C@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0@a'))</body><body package="StarBrowserIcons2">extentionalClassification16x16mask	"Tools.UIMaskEditor new openOnClass: self andSelector: #extentionalClassification16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 31 254 0 0 127 255 0 0 127 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 254 0 0 255 254 0 0 127 254 0 0 15 252 0 0 15 252 0 0 7 248 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">greenCategoryHashes16x16	"UIMaskEditor new openOnClass: self andSelector: #greenCategoryHashes16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 1317 scaledGreen: 3469 scaledBlue: 2409); at: 2 put: Graphics.ColorValue white; at: 3 put: (Graphics.ColorValue scaledRed: 2377 scaledGreen: 5172 scaledBlue: 3790); at: 4 put: (Graphics.ColorValue scaledRed: 1992 scaledGreen: 4304 scaledBlue: 3148); at: 5 put: (Graphics.ColorValue scaledRed: 3084 scaledGreen: 5621 scaledBlue: 4336); at: 6 put: (Graphics.ColorValue scaledRed: 1670 scaledGreen: 4015 scaledBlue: 2827); at: 7 put: (Graphics.ColorValue scaledRed: 2859 scaledGreen: 5107 scaledBlue: 3983); at: 8 put: (Graphics.ColorValue scaledRed: 3726 scaledGreen: 5782 scaledBlue: 4754); at: 9 put: (Graphics.ColorValue scaledRed: 2184 scaledGreen: 4529 scaledBlue: 3373); at: 10 put: (Graphics.ColorValue scaledRed: 2730 scaledGreen: 5011 scaledBlue: 3887); at: 11 put: (Graphics.ColorValue scaledRed: 1349 scaledGreen: 3855 scaledBlue: 2602); at: 12 put: (Graphics.ColorValue scaledRed: 2987 scaledGreen: 5396 scaledBlue: 4176); at: 13 put: (Graphics.ColorValue scaledRed: 2281 scaledGreen: 4658 scaledBlue: 3469); at: 14 put: (Graphics.ColorValue scaledRed: 2698 scaledGreen: 5332 scaledBlue: 4015); at: 15 put: (Graphics.ColorValue scaledRed: 3276 scaledGreen: 5621 scaledBlue: 4465); at: 16 put: (Graphics.ColorValue scaledRed: 1574 scaledGreen: 4240 scaledBlue: 2891); yourself)) usingBits: (ByteArray fromPackedString: '@PDA@PDA@PDA@PDA@PDA@PDA@PPM@P4B@PDA@PDA@PDA@PDGB0DNBPDA@PDA@PDA@PPGA0XFB00CC0DA@PDA@PDMB0XC@0 EB (A@PDA@PDA@PDF@0DI@0DA@PDA@PDA@P4NA  IB0LDCPDM@ DA@PDB@ 0E@0L@A0,AC $A@PDA@PDC@@DDA0\FA ,L@0&lt;A@PDAC0(ACP,F@0LHAP(J@PDA@PDA@PDAA LABPLA@PDA@PDA@PDMC XHBP,CAPTA@PDA@PDA@ HLAPLC@@@J@PDA@PDA@PDA@0@AAP@A@PDA@PDA@PDA@P&lt;J@P&lt;J@PDA@PDA@PDA@PDA@PDA@PDA@P@a'))</body><body package="StarBrowserIcons2">greenCategoryHashes16x16mask	"UIMaskEditor new openOnClass: self andSelector: #greenCategoryHashes16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 27 0 0 0 27 0 0 0 127 192 0 0 127 192 0 0 27 0 0 0 127 216 0 0 127 216 0 0 27 254 0 0 27 254 0 0 0 216 0 0 3 254 0 0 3 254 0 0 0 216 0 0 0 216 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">greenCircle16x16	"UIMaskEditor new openOnClass: self andSelector: #greenCircle16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 2024 scaledGreen: 3951 scaledBlue: 2666); at: 2 put: (Graphics.ColorValue scaledRed: 7324 scaledGreen: 7645 scaledBlue: 7452); at: 3 put: (Graphics.ColorValue scaledRed: 3758 scaledGreen: 6424 scaledBlue: 4626); at: 4 put: (Graphics.ColorValue scaledRed: 2345 scaledGreen: 5493 scaledBlue: 3373); at: 5 put: (Graphics.ColorValue scaledRed: 4754 scaledGreen: 6810 scaledBlue: 5429); at: 6 put: (Graphics.ColorValue scaledRed: 5653 scaledGreen: 7163 scaledBlue: 6167); at: 7 put: (Graphics.ColorValue scaledRed: 2024 scaledGreen: 4754 scaledBlue: 2955); at: 8 put: (Graphics.ColorValue scaledRed: 4304 scaledGreen: 6617 scaledBlue: 5075); at: 9 put: (Graphics.ColorValue scaledRed: 3148 scaledGreen: 6135 scaledBlue: 4144); at: 10 put: Graphics.ColorValue white; at: 11 put: (Graphics.ColorValue scaledRed: 4818 scaledGreen: 6264 scaledBlue: 5300); at: 12 put: (Graphics.ColorValue scaledRed: 6553 scaledGreen: 7549 scaledBlue: 6874); at: 13 put: (Graphics.ColorValue scaledRed: 2024 scaledGreen: 4529 scaledBlue: 2859); at: 14 put: (Graphics.ColorValue scaledRed: 2666 scaledGreen: 5782 scaledBlue: 3694); at: 15 put: (Graphics.ColorValue scaledRed: 2088 scaledGreen: 5139 scaledBlue: 3084); at: 16 put: (Graphics.ColorValue scaledRed: 5236 scaledGreen: 6874 scaledBlue: 5782); yourself)) usingBits: (ByteArray fromPackedString: 'BP$IBP$IBP$IBP$IBP$IBP$IBP$IB0\B@ TABP$IBP$IBP$KC0PGA0HHCP&lt;IBP$IBP$KC0&lt;DA0HBB@4CB $IBP$IC0&lt;OA@\BB@4CC 8ABP$IB0PDA@\B@  M@08FB $IBP\GA0\G@  M@08NA LIBP$B@ HB@  M@08FA 0LBP$I@ HBB@4M@0XFC@0LA $IBPTHB@4C@0XFC@@@@@(IBP$AB@4C@08FC@@@@@@ABP$IBP&lt;C@08FA 0@@@@JBP$IBP$IA@8FA 0@@@@JBP$IBP$IBP$AB LFA (ABP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP$IBP@a'))</body><body package="StarBrowserIcons2">greenCircle16x16mask	"UIMaskEditor new openOnClass: self andSelector: #greenCircle16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 7 224 0 0 31 240 0 0 63 248 0 0 63 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 63 248 0 0 31 240 0 0 15 224 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">greenClassC16x16	"UIMaskEditor new openOnClass: self andSelector: #greenClassC16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 1638 scaledGreen: 4915 scaledBlue: 3276); at: 2 put: Graphics.ColorValue white; at: 3 put: (Graphics.ColorValue scaledRed: 4079 scaledGreen: 6135 scaledBlue: 5107); at: 4 put: (Graphics.ColorValue scaledRed: 6970 scaledGreen: 7581 scaledBlue: 7259); at: 5 put: (Graphics.ColorValue scaledRed: 6585 scaledGreen: 7388 scaledBlue: 6970); at: 6 put: (Graphics.ColorValue scaledRed: 2056 scaledGreen: 5107 scaledBlue: 3598); at: 7 put: (Graphics.ColorValue scaledRed: 7356 scaledGreen: 7773 scaledBlue: 7581); at: 8 put: (Graphics.ColorValue scaledRed: 2473 scaledGreen: 5332 scaledBlue: 3887); at: 9 put: (Graphics.ColorValue scaledRed: 7388 scaledGreen: 7934 scaledBlue: 7677); at: 10 put: (Graphics.ColorValue scaledRed: 4112 scaledGreen: 6135 scaledBlue: 5139); at: 11 put: (Graphics.ColorValue scaledRed: 6970 scaledGreen: 7581 scaledBlue: 7292); at: 12 put: Graphics.ColorValue black; at: 13 put: Graphics.ColorValue black; at: 14 put: Graphics.ColorValue black; at: 15 put: Graphics.ColorValue black; at: 16 put: Graphics.ColorValue black; yourself)) usingBits: (ByteArray fromPackedString: '@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PXBAP@G@ XA@PDA@PDA@PPE@@@@@@@E@0DA@PDA@PXE@@@@@PD@@@DA@PDA@PDI@@@@@PDA@PDA@PDA@PDAAP@@@PDA@PDA@PDA@PDA@P@@@@DA@PDA@PDA@PDA@PDE@@@A@PDA@PDA@PDA@PDABP@@@@DA@PDA@PDA@PDA@PXE@@@@@PD@@@DA@PDA@PDAA@T@@@@@@@TJ@PDA@PDA@PDFBPT@A0$F@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@a'))</body><body package="StarBrowserIcons2">greenClassC16x16mask	"UIMaskEditor new openOnClass: self andSelector: #greenClassC16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 7 240 0 0 15 248 0 0 31 48 0 0 30 0 0 0 28 0 0 0 28 0 0 0 28 0 0 0 30 0 0 0 31 48 0 0 15 248 0 0 7 240 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">greenDiamond16x16	"UIMaskEditor new openOnClass: self andSelector: #greenDiamond16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 2024 scaledGreen: 3758 scaledBlue: 3180); at: 2 put: Graphics.ColorValue white; at: 3 put: (Graphics.ColorValue scaledRed: 3919 scaledGreen: 6456 scaledBlue: 5589); at: 4 put: (Graphics.ColorValue scaledRed: 2570 scaledGreen: 5718 scaledBlue: 4658); at: 5 put: (Graphics.ColorValue scaledRed: 4850 scaledGreen: 6874 scaledBlue: 6199); at: 6 put: (Graphics.ColorValue scaledRed: 5942 scaledGreen: 7292 scaledBlue: 6842); at: 7 put: (Graphics.ColorValue scaledRed: 2088 scaledGreen: 4882 scaledBlue: 3951); at: 8 put: (Graphics.ColorValue scaledRed: 4818 scaledGreen: 5942 scaledBlue: 5589); at: 9 put: (Graphics.ColorValue scaledRed: 3148 scaledGreen: 6071 scaledBlue: 5107); at: 10 put: (Graphics.ColorValue scaledRed: 4979 scaledGreen: 6456 scaledBlue: 5942); at: 11 put: (Graphics.ColorValue scaledRed: 2120 scaledGreen: 5204 scaledBlue: 4176); at: 12 put: (Graphics.ColorValue scaledRed: 2056 scaledGreen: 4369 scaledBlue: 3598); at: 13 put: (Graphics.ColorValue scaledRed: 6456 scaledGreen: 7516 scaledBlue: 7163); at: 14 put: (Graphics.ColorValue scaledRed: 5364 scaledGreen: 7067 scaledBlue: 6489); at: 15 put: (Graphics.ColorValue scaledRed: 4304 scaledGreen: 6649 scaledBlue: 5846); at: 16 put: (Graphics.ColorValue scaledRed: 3437 scaledGreen: 6199 scaledBlue: 5300); yourself)) usingBits: (ByteArray fromPackedString: '@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDEAPDA@PDA@PDA@PDA@PDLC HE@PDA@PDA@PDA@PDLA@8BC04A@PDA@PDA@PDLCPPNC0&lt;CBPDA@PDA@PDLCP4D@ &lt;H@0(I@PDA@PDLA@PDA@HH@0(JA $A@PDEC 8NC HO@0(FA XFBPDAAPHOC0&lt;H@0(FA ,KB0\A@PDEC0&lt;H@0(FB0,KB0\A@PDA@P4H@0LJB0@@@@\A@PDA@PDAA@LJA ,@@@\A@PDA@PDA@PDIB XK@@\A@PDA@PDA@PDA@P$FB0\A@PDA@PDA@PDA@PDABP\A@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@a'))</body><body package="StarBrowserIcons2">greenDiamond16x16mask	"UIMaskEditor new openOnClass: self andSelector: #greenDiamond16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 1 128 0 0 3 192 0 0 7 224 0 0 15 240 0 0 31 248 0 0 63 252 0 0 127 254 0 0 127 254 0 0 63 252 0 0 31 248 0 0 15 240 0 0 7 224 0 0 3 192 0 0 1 128 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">greenMethodDual16x16	"UIMaskEditor new openOnClass: self andSelector: #greenMethodDual16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 2891 scaledGreen: 4754 scaledBlue: 4304); at: 2 put: Graphics.ColorValue white; at: 3 put: (Graphics.ColorValue scaledRed: 5846 scaledGreen: 7003 scaledBlue: 6424); at: 4 put: (Graphics.ColorValue scaledRed: 4433 scaledGreen: 6232 scaledBlue: 5332); at: 5 put: (Graphics.ColorValue scaledRed: 6778 scaledGreen: 7099 scaledBlue: 6938); at: 6 put: (Graphics.ColorValue scaledRed: 3501 scaledGreen: 5236 scaledBlue: 5236); at: 7 put: (Graphics.ColorValue scaledRed: 4433 scaledGreen: 6232 scaledBlue: 6232); at: 8 put: (Graphics.ColorValue scaledRed: 3405 scaledGreen: 5332 scaledBlue: 4369); at: 9 put: (Graphics.ColorValue scaledRed: 4915 scaledGreen: 6553 scaledBlue: 6553); at: 10 put: (Graphics.ColorValue scaledRed: 4947 scaledGreen: 6199 scaledBlue: 5589); at: 11 put: (Graphics.ColorValue scaledRed: 6970 scaledGreen: 7452 scaledBlue: 7452); at: 12 put: (Graphics.ColorValue scaledRed: 3630 scaledGreen: 5718 scaledBlue: 5718); at: 13 put: (Graphics.ColorValue scaledRed: 3565 scaledGreen: 4947 scaledBlue: 4272); at: 14 put: (Graphics.ColorValue scaledRed: 5846 scaledGreen: 7003 scaledBlue: 7003); at: 15 put: (Graphics.ColorValue scaledRed: 4658 scaledGreen: 6103 scaledBlue: 6103); at: 16 put: (Graphics.ColorValue scaledRed: 3726 scaledGreen: 5782 scaledBlue: 4754); yourself)) usingBits: (ByteArray fromPackedString: '@PDA@PDA@PDA@PDA@PDA@PDA@PHJ@PDACP(A@PDA@PDA@PHC@0(ACPXFB DA@PDA@PDABP&lt;OB DHA ,J@PDA@PDA@PDCC0\D@PXKB0(A@PDA@PDA@PLOA0PAA ,EB DA@PDA@PDA@0\@A@DFAP@D@PDA@PDA@P$G@@PAB@T@A@DA@PDA@PHCC@PACP8EA@DA@PDA@PHIC@PACP EA@DA@PDA@PHIC@PACP8EA@DA@PDA@PHCC@PACP8EA@DA@PDA@PDABPPA@PDNA@DA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@a'))</body><body package="StarBrowserIcons2">greenMethodDual16x16mask	"UIMaskEditor new openOnClass: self andSelector: #greenMethodDual16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 24 192 0 0 61 224 0 0 30 240 0 0 15 120 0 0 7 188 0 0 3 222 0 0 3 222 0 0 7 188 0 0 15 120 0 0 30 240 0 0 61 224 0 0 24 192 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">greenMethodHash16x16	"UIMaskEditor new openOnClass: self andSelector: #greenMethodHash16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 1413 scaledGreen: 3630 scaledBlue: 2505); at: 2 put: Graphics.ColorValue white; at: 3 put: (Graphics.ColorValue scaledRed: 2409 scaledGreen: 5139 scaledBlue: 3790); at: 4 put: (Graphics.ColorValue scaledRed: 1863 scaledGreen: 4272 scaledBlue: 3084); at: 5 put: (Graphics.ColorValue scaledRed: 2955 scaledGreen: 5364 scaledBlue: 4176); at: 6 put: (Graphics.ColorValue scaledRed: 1767 scaledGreen: 3951 scaledBlue: 2859); at: 7 put: (Graphics.ColorValue scaledRed: 3405 scaledGreen: 5686 scaledBlue: 4529); at: 8 put: (Graphics.ColorValue scaledRed: 2377 scaledGreen: 4690 scaledBlue: 3533); at: 9 put: (Graphics.ColorValue scaledRed: 2698 scaledGreen: 5075 scaledBlue: 3887); at: 10 put: (Graphics.ColorValue scaledRed: 1606 scaledGreen: 4336 scaledBlue: 2987); at: 11 put: (Graphics.ColorValue scaledRed: 1317 scaledGreen: 3758 scaledBlue: 2538); at: 12 put: (Graphics.ColorValue scaledRed: 2698 scaledGreen: 5332 scaledBlue: 4015); at: 13 put: (Graphics.ColorValue scaledRed: 2056 scaledGreen: 4272 scaledBlue: 3148); at: 14 put: (Graphics.ColorValue scaledRed: 3116 scaledGreen: 5589 scaledBlue: 4336); at: 15 put: (Graphics.ColorValue scaledRed: 2602 scaledGreen: 4979 scaledBlue: 3790); at: 16 put: (Graphics.ColorValue scaledRed: 3726 scaledGreen: 5782 scaledBlue: 4754); yourself)) usingBits: (ByteArray fromPackedString: '@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P4K@PDAA@HA@PDA@PDA@PDOA@DA@PXH@PDA@PDA@P4OC0PNC  DA0LI@PDA@PDKA@PL@0LLA0T@@@DA@PDA@PDN@0DA@P\E@PDA@PDA@PDAC LA@PDN@0DA@PDA@PDA@P L@PDAB@0A@PDA@PDAA@XDA0\HB@ LAPTA@PDA@PHBA0TE@0LL@@@J@PDA@PDA@PL@@PDAAP@A@PDA@PDA@PDIB DA@P$J@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@a'))</body><body package="StarBrowserIcons2">greenMethodHash16x16mask	"UIMaskEditor new openOnClass: self andSelector: #greenMethodHash16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 6 48 0 0 6 48 0 0 31 252 0 0 31 252 0 0 6 48 0 0 6 48 0 0 6 48 0 0 31 252 0 0 31 252 0 0 6 48 0 0 6 48 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">intentionalClassification16x16	"Tools.UIMaskEditor new openOnClass: self andSelector: #intentionalClassification16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 3) at: 1 put: Graphics.ColorValue black; at: 2 put: Graphics.ColorValue red; at: 3 put: Graphics.ColorValue white; yourself)) usingBits: #[170 170 170 170 168 0 0 2 128 170 170 160 138 85 101 104 42 170 170 168 42 85 106 168 42 170 170 168 42 85 85 96 42 170 170 162 10 86 149 162 128 170 170 130 170 21 170 138 170 42 170 10 170 128 0 42 170 170 170 170 170 170 170 170])</body><body package="StarBrowserIcons2">intentionalClassification16x16mask	"UIMaskEditor new openOnClass: self andSelector: #intentionalClassification16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 31 254 0 0 127 255 0 0 127 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 255 0 0 255 254 0 0 255 254 0 0 127 254 0 0 15 252 0 0 15 252 0 0 7 248 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">methodItem16x16	"UIMaskEditor new openOnClass: self andSelector: #methodItem16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 2 bitsPerPixel: 2 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 4) at: 1 put: Graphics.ColorValue red; at: 2 put: (Graphics.ColorValue scaledRed: 3950 scaledGreen: 0 scaledBlue: 0); at: 3 put: Graphics.ColorValue white; at: 4 put: (Graphics.ColorValue scaledRed: 4240 scaledGreen: 0 scaledBlue: 0); yourself)) usingBits: #[170 170 170 170 170 170 170 170 170 170 170 170 168 40 42 170 168 8 10 170 170 2 2 170 170 128 128 170 170 160 32 234 170 160 227 234 170 131 143 170 170 30 62 170 168 120 250 170 169 227 234 170 170 170 170 170 170 170 170 170 170 170 170 170])</body><body package="StarBrowserIcons2">methodItem16x16mask	"UIMaskEditor new openOnClass: self andSelector: #methodItem16x16mask"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 25 128 0 0 29 192 0 0 14 224 0 0 7 112 0 0 3 184 0 0 3 184 0 0 7 112 0 0 14 224 0 0 29 192 0 0 27 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">objectItem16x16	"Tools.UIMaskEditor new openOnClass: self andSelector: #objectItem16x16"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 16@16 depth: 7 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 70) at: 1 put: (Graphics.ColorValue scaledRed: 4047 scaledGreen: 6874 scaledBlue: 0); at: 2 put: (Graphics.ColorValue scaledRed: 3918 scaledGreen: 6841 scaledBlue: 0); at: 3 put: (Graphics.ColorValue scaledRed: 2473 scaledGreen: 5557 scaledBlue: 449); at: 4 put: (Graphics.ColorValue scaledRed: 4015 scaledGreen: 6424 scaledBlue: 0); at: 5 put: (Graphics.ColorValue scaledRed: 6103 scaledGreen: 7934 scaledBlue: 2762); at: 6 put: (Graphics.ColorValue scaledRed: 1413 scaledGreen: 3565 scaledBlue: 738); at: 7 put: (Graphics.ColorValue scaledRed: 4497 scaledGreen: 6649 scaledBlue: 3212); at: 8 put: (Graphics.ColorValue scaledRed: 3918 scaledGreen: 6456 scaledBlue: 1702); at: 9 put: (Graphics.ColorValue scaledRed: 7612 scaledGreen: 7612 scaledBlue: 7612); at: 10 put: (Graphics.ColorValue scaledRed: 6906 scaledGreen: 6906 scaledBlue: 6906); at: 11 put: (Graphics.ColorValue scaledRed: 8158 scaledGreen: 8158 scaledBlue: 8158); at: 12 put: (Graphics.ColorValue scaledRed: 4625 scaledGreen: 5814 scaledBlue: 3115); at: 13 put: (Graphics.ColorValue scaledRed: 4432 scaledGreen: 7227 scaledBlue: 1895); at: 14 put: (Graphics.ColorValue scaledRed: 7452 scaledGreen: 7452 scaledBlue: 7452); at: 15 put: (Graphics.ColorValue scaledRed: 4015 scaledGreen: 5749 scaledBlue: 3308); at: 16 put: (Graphics.ColorValue scaledRed: 7998 scaledGreen: 7998 scaledBlue: 7998); at: 17 put: (Graphics.ColorValue scaledRed: 7163 scaledGreen: 8191 scaledBlue: 4240); at: 18 put: (Graphics.ColorValue scaledRed: 0 scaledGreen: 0 scaledBlue: 4111); at: 19 put: (Graphics.ColorValue scaledRed: 6199 scaledGreen: 7484 scaledBlue: 5589); at: 20 put: (Graphics.ColorValue scaledRed: 7837 scaledGreen: 7837 scaledBlue: 7837); at: 21 put: (Graphics.ColorValue scaledRed: 6424 scaledGreen: 6424 scaledBlue: 6424); at: 22 put: (Graphics.ColorValue scaledRed: 4753 scaledGreen: 7355 scaledBlue: 0); at: 23 put: (Graphics.ColorValue scaledRed: 7677 scaledGreen: 7677 scaledBlue: 7677); at: 24 put: (Graphics.ColorValue scaledRed: 4368 scaledGreen: 6584 scaledBlue: 3115); at: 25 put: (Graphics.ColorValue scaledRed: 2698 scaledGreen: 4272 scaledBlue: 2698); at: 26 put: (Graphics.ColorValue scaledRed: 1895 scaledGreen: 5492 scaledBlue: 0); at: 27 put: (Graphics.ColorValue scaledRed: 5878 scaledGreen: 7837 scaledBlue: 2312); at: 28 put: (Graphics.ColorValue scaledRed: 4015 scaledGreen: 6649 scaledBlue: 642); at: 29 put: (Graphics.ColorValue scaledRed: 1027 scaledGreen: 3533 scaledBlue: 64); at: 30 put: (Graphics.ColorValue scaledRed: 5332 scaledGreen: 6327 scaledBlue: 3886); at: 31 put: (Graphics.ColorValue scaledRed: 8062 scaledGreen: 8062 scaledBlue: 8062); at: 32 put: (Graphics.ColorValue scaledRed: 803 scaledGreen: 2858 scaledBlue: 803); at: 33 put: (Graphics.ColorValue scaledRed: 2569 scaledGreen: 5010 scaledBlue: 1124); at: 34 put: (Graphics.ColorValue scaledRed: 5043 scaledGreen: 6006 scaledBlue: 4336); at: 35 put: (Graphics.ColorValue scaledRed: 4529 scaledGreen: 6488 scaledBlue: 1927); at: 36 put: (Graphics.ColorValue scaledRed: 4432 scaledGreen: 6424 scaledBlue: 1927); at: 37 put: (Graphics.ColorValue scaledRed: 4304 scaledGreen: 7034 scaledBlue: 1445); at: 38 put: (Graphics.ColorValue scaledRed: 1638 scaledGreen: 3758 scaledBlue: 706); at: 39 put: (Graphics.ColorValue scaledRed: 3372 scaledGreen: 6392 scaledBlue: 578); at: 40 put: (Graphics.ColorValue scaledRed: 2826 scaledGreen: 5235 scaledBlue: 0); at: 41 put: (Graphics.ColorValue scaledRed: 3115 scaledGreen: 6038 scaledBlue: 1027); at: 42 put: (Graphics.ColorValue scaledRed: 2376 scaledGreen: 5524 scaledBlue: 0); at: 43 put: (Graphics.ColorValue scaledRed: 3147 scaledGreen: 4786 scaledBlue: 2248); at: 44 put: (Graphics.ColorValue scaledRed: 6167 scaledGreen: 6167 scaledBlue: 6167); at: 45 put: (Graphics.ColorValue scaledRed: 7580 scaledGreen: 7580 scaledBlue: 7580); at: 46 put: (Graphics.ColorValue scaledRed: 4464 scaledGreen: 7034 scaledBlue: 0); at: 47 put: (Graphics.ColorValue scaledRed: 4657 scaledGreen: 5846 scaledBlue: 3115); at: 48 put: (Graphics.ColorValue scaledRed: 8126 scaledGreen: 8126 scaledBlue: 8126); at: 49 put: (Graphics.ColorValue scaledRed: 3404 scaledGreen: 6392 scaledBlue: 578); at: 50 put: (Graphics.ColorValue scaledRed: 6938 scaledGreen: 8191 scaledBlue: 3726); at: 51 put: (Graphics.ColorValue scaledRed: 4786 scaledGreen: 7387 scaledBlue: 0); at: 52 put: (Graphics.ColorValue scaledRed: 5235 scaledGreen: 6231 scaledBlue: 5107); at: 53 put: (Graphics.ColorValue scaledRed: 4946 scaledGreen: 6617 scaledBlue: 4368); at: 54 put: (Graphics.ColorValue scaledRed: 4143 scaledGreen: 6745 scaledBlue: 642); at: 55 put: Graphics.ColorValue white; at: 56 put: (Graphics.ColorValue scaledRed: 4079 scaledGreen: 5364 scaledBlue: 4047); at: 57 put: (Graphics.ColorValue scaledRed: 8030 scaledGreen: 8030 scaledBlue: 8030); at: 58 put: (Graphics.ColorValue scaledRed: 5300 scaledGreen: 7548 scaledBlue: 0); at: 59 put: (Graphics.ColorValue scaledRed: 4497 scaledGreen: 6552 scaledBlue: 3597); at: 60 put: (Graphics.ColorValue scaledRed: 5043 scaledGreen: 7484 scaledBlue: 0); at: 61 put: (Graphics.ColorValue scaledRed: 3019 scaledGreen: 6038 scaledBlue: 1027); at: 62 put: (Graphics.ColorValue scaledRed: 5203 scaledGreen: 6199 scaledBlue: 5203); at: 63 put: (Graphics.ColorValue scaledRed: 3918 scaledGreen: 6327 scaledBlue: 0); at: 64 put: (Graphics.ColorValue scaledRed: 2890 scaledGreen: 4497 scaledBlue: 2537); at: 65 put: (Graphics.ColorValue scaledRed: 3886 scaledGreen: 6456 scaledBlue: 1702); at: 66 put: (Graphics.ColorValue scaledRed: 2312 scaledGreen: 5492 scaledBlue: 0); at: 67 put: (Graphics.ColorValue scaledRed: 4625 scaledGreen: 7098 scaledBlue: 0); at: 68 put: (Graphics.ColorValue scaledRed: 7548 scaledGreen: 7548 scaledBlue: 7548); at: 69 put: (Graphics.ColorValue scaledRed: 1156 scaledGreen: 3693 scaledBlue: 32); at: 70 put: (Graphics.ColorValue scaledRed: 6681 scaledGreen: 6681 scaledBlue: 6681); yourself)) usingBits: (ByteArray fromPackedString: 'M#X6M#X6M#X6M#X6M#X6M#X6M#X6M#X6M#X6M#X6M#X6M#XJOQ _G1 =B#X6M#X6M#X/M10NMCPNGC\/M#X6M#X6L4P:D!DQD#)DL2&lt;6M#X6M#&lt; E1DFA!DWHC&lt;OM#X6M#XE@" QP@\QO@HED3X6M#X6IQ$&amp;DQ,5DS@YIQX6M#X6M"()@QD-P!D@PR(HM#X6M#X!I1T;DQD9L"\!E#X6M#X6BP,&gt;F#DPA@L.BQL6M#X6M"1EGRL$CBH]QR0^M#X6M#X8P0$TJ2,TBTL8B#X6M#X6B# VK@4MKAX8B#X6M#X6M#X6M#X6M#X6M#X6M#X6M#X6M#X6M#X6M#X6M#X6M @a'))</body><body package="StarBrowserIcons2">orangeCircle16x16	"UIMaskEditor new openOnClass: self andSelector: #orangeCircle16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 4915 scaledGreen: 3180 scaledBlue: 2024); at: 2 put: (Graphics.ColorValue scaledRed: 7838 scaledGreen: 7516 scaledBlue: 7292); at: 3 put: (Graphics.ColorValue scaledRed: 8159 scaledGreen: 5236 scaledBlue: 3276); at: 4 put: (Graphics.ColorValue scaledRed: 7195 scaledGreen: 4144 scaledBlue: 2088); at: 5 put: (Graphics.ColorValue scaledRed: 6617 scaledGreen: 5557 scaledBlue: 4818); at: 6 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 6489 scaledBlue: 5396); at: 7 put: (Graphics.ColorValue scaledRed: 6296 scaledGreen: 3726 scaledBlue: 2024); at: 8 put: (Graphics.ColorValue scaledRed: 8030 scaledGreen: 4915 scaledBlue: 2795); at: 9 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 6167 scaledBlue: 4818); at: 10 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 5782 scaledBlue: 4144); at: 11 put: Graphics.ColorValue white; at: 12 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7195 scaledBlue: 6553); at: 13 put: (Graphics.ColorValue scaledRed: 6810 scaledGreen: 3951 scaledBlue: 2088); at: 14 put: (Graphics.ColorValue scaledRed: 7709 scaledGreen: 4529 scaledBlue: 2409); at: 15 put: (Graphics.ColorValue scaledRed: 5525 scaledGreen: 3437 scaledBlue: 2024); at: 16 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 5557 scaledBlue: 3758); yourself)) usingBits: (ByteArray fromPackedString: 'B (JB (JB (JB (JB (JB (JB (JB0$OC0TAB (JB (JB (KB@ HBP&lt;BA0 JB (JB (KAPTHBP&lt;B@ \MB@(JB (JB@TEB@$O@ \M@0LAB (JB0 HB@$I@ \MCPLLA@(JB $IBP$IC0HGCPLLC@0JB (OC0&lt;O@ HGCPLLA XFB (JC0&lt;B@ \MCP0FA XNA (JB TB@ \MCP0FC 8NC PJB (JA0\MCPLLA 8N@@@AB (JB TM@0LLA 8N@@@DB (JB (JB@LLA XN@@@DB (JB (JB (AA@0FA PAB (JB (JB (JB (JB (JB (JB (JB (JB (JB (JB (JB (JB @a'))</body><body package="StarBrowserIcons2">orangeCircle16x16mask	"UIMaskEditor new openOnClass: self andSelector: #orangeCircle16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 7 224 0 0 31 240 0 0 63 248 0 0 63 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 63 252 0 0 63 248 0 0 31 240 0 0 15 224 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">orangeDiamond16x16	"UIMaskEditor new openOnClass: self andSelector: #orangeDiamond16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 5204 scaledGreen: 3276 scaledBlue: 2024); at: 2 put: Graphics.ColorValue white; at: 3 put: (Graphics.ColorValue scaledRed: 6521 scaledGreen: 5493 scaledBlue: 4818); at: 4 put: (Graphics.ColorValue scaledRed: 7420 scaledGreen: 4240 scaledBlue: 2152); at: 5 put: (Graphics.ColorValue scaledRed: 7741 scaledGreen: 6071 scaledBlue: 4979); at: 6 put: (Graphics.ColorValue scaledRed: 6360 scaledGreen: 3790 scaledBlue: 2088); at: 7 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 5686 scaledBlue: 4047); at: 8 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 4915 scaledBlue: 3276); at: 9 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7003 scaledBlue: 6232); at: 10 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 6071 scaledBlue: 4626); at: 11 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 6489 scaledBlue: 5300); at: 12 put: (Graphics.ColorValue scaledRed: 5878 scaledGreen: 3565 scaledBlue: 2024); at: 13 put: (Graphics.ColorValue scaledRed: 7838 scaledGreen: 4658 scaledBlue: 2570); at: 14 put: (Graphics.ColorValue scaledRed: 7035 scaledGreen: 4015 scaledBlue: 2056); at: 15 put: (Graphics.ColorValue scaledRed: 7195 scaledGreen: 5782 scaledBlue: 4818); at: 16 put: (Graphics.ColorValue scaledRed: 8030 scaledGreen: 5300 scaledBlue: 3437); yourself)) usingBits: (ByteArray fromPackedString: '@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDHB@DA@PDA@PDA@PDA@PDHA XJ@PDA@PDA@PDA@PDHBP$FC0(A@PDA@PDA@PDHB $FA &lt;LA@DA@PDA@PDHB (IA &lt;GC@LN@PDA@PDHB (JBPXGC@LMCP8A@PDHBP$FA XOC@LMAPTEC DAB@XOC0&lt;OC@4EAPTKB08A@PDHC0&lt;OC@LEB0,KB08A@PDA@P(GC@0MB0@@@@HA@PDA@PDAA@LCCP,@@@HA@PDA@PDA@PDD@04@@@HA@PDA@PDA@PDA@PPMB0HA@PDA@PDA@PDA@PDAC 8A@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@a'))</body><body package="StarBrowserIcons2">orangeDiamond16x16mask	"UIMaskEditor new openOnClass: self andSelector: #orangeDiamond16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 1 128 0 0 3 192 0 0 7 224 0 0 15 240 0 0 31 248 0 0 63 252 0 0 127 254 0 0 127 254 0 0 63 252 0 0 31 248 0 0 15 240 0 0 7 224 0 0 3 192 0 0 1 128 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">redCircle16x16	"UIMaskEditor new openOnClass: self andSelector: #redCircle16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 5075 scaledGreen: 2024 scaledBlue: 2024); at: 2 put: (Graphics.ColorValue scaledRed: 8159 scaledGreen: 7581 scaledBlue: 7581); at: 3 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 3758 scaledBlue: 3758); at: 4 put: (Graphics.ColorValue scaledRed: 7549 scaledGreen: 2281 scaledBlue: 2281); at: 5 put: (Graphics.ColorValue scaledRed: 7003 scaledGreen: 5011 scaledBlue: 5011); at: 6 put: (Graphics.ColorValue scaledRed: 6810 scaledGreen: 2088 scaledBlue: 2088); at: 7 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 5396 scaledBlue: 5396); at: 8 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 3276 scaledBlue: 3276); at: 9 put: (Graphics.ColorValue scaledRed: 7259 scaledGreen: 4818 scaledBlue: 4818); at: 10 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 6553 scaledBlue: 6553); at: 11 put: (Graphics.ColorValue scaledRed: 6296 scaledGreen: 2024 scaledBlue: 2024); at: 12 put: Graphics.ColorValue white; at: 13 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 4915 scaledBlue: 4915); at: 14 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 4433 scaledBlue: 4433); at: 15 put: (Graphics.ColorValue scaledRed: 7966 scaledGreen: 2570 scaledBlue: 2570); at: 16 put: (Graphics.ColorValue scaledRed: 5750 scaledGreen: 2024 scaledBlue: 2024); yourself)) usingBits: (ByteArray fromPackedString: 'B0,KB0,KB0,KB0,KB0,KB0,KB0,KBP4B@ XAB0,KB0,KB0,IC@0MCPHGC 0KB0,KB0,IA XLCPHGA08CB@,KB0,KC@XLC@HBA08N@0TAB0,KBP0LC@4BA0\N@0TEB@,KB04MCP4B@ \N@0TEB TKB0,B@ HB@ \N@0TEB (JB0,K@ HGA08N@0TJB (OB ,KB0XGA08N@0TJC0&lt;OC0PKB0,AA08N@0TEC0&lt;@@@@AB0,KB0XC@0TEB &lt;@@@@DB0,KB0,KB@TEB (O@@@DB0,KB0,KB0,AB@TJB PAB0,KB0,KB0,KB0,KB0,KB0,KB0,KB0,KB0,KB0,KB0,KB0,KB0@a'))</body><body package="StarBrowserIcons2">redCircle16x16mask	"UIMaskEditor new openOnClass: self andSelector: #redCircle16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 7 224 0 0 31 240 0 0 63 248 0 0 63 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 63 248 0 0 31 240 0 0 15 224 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">redDiamond16x16	"UIMaskEditor new openOnClass: self andSelector: #redDiamond16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 5204 scaledGreen: 2024 scaledBlue: 2024); at: 2 put: Graphics.ColorValue white; at: 3 put: (Graphics.ColorValue scaledRed: 6553 scaledGreen: 4915 scaledBlue: 4915); at: 4 put: (Graphics.ColorValue scaledRed: 7741 scaledGreen: 2666 scaledBlue: 2666); at: 5 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 5364 scaledBlue: 5364); at: 6 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 3855 scaledBlue: 3855); at: 7 put: (Graphics.ColorValue scaledRed: 6778 scaledGreen: 2088 scaledBlue: 2088); at: 8 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 4626 scaledBlue: 4626); at: 9 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 6553 scaledBlue: 6553); at: 10 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 3276 scaledBlue: 3276); at: 11 put: (Graphics.ColorValue scaledRed: 5942 scaledGreen: 2056 scaledBlue: 2056); at: 12 put: (Graphics.ColorValue scaledRed: 7420 scaledGreen: 4979 scaledBlue: 4979); at: 13 put: (Graphics.ColorValue scaledRed: 7259 scaledGreen: 2120 scaledBlue: 2120); at: 14 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 4208 scaledBlue: 4208); at: 15 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 5814 scaledBlue: 5814); at: 16 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 4915 scaledBlue: 4915); yourself)) usingBits: (ByteArray fromPackedString: '@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDNC DA@PDA@PDA@PDA@PDHCPTN@PDA@PDA@PDA@PDHA04EBPPA@PDA@PDA@PDHA@&lt;MAP$CB0DA@PDA@PDHA@PGCP$I@00K@PDA@PDHC0&lt;OA0TI@00LA ,A@PDNA04MCP4I@00LA XFB0DAC TEBP$I@00FA (JB ,A@PDNBP$I@00FB (JB HA@PDA@PPC@0LFB @@@@HA@PDA@PDAC00LA (@@@HA@PDA@PDA@PDKC@X@@@HA@PDA@PDA@PDA@P,FB HA@PDA@PDA@PDA@PDAB0,A@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@a'))</body><body package="StarBrowserIcons2">redDiamond16x16mask	"UIMaskEditor new openOnClass: self andSelector: #redDiamond16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 1 128 0 0 3 192 0 0 7 224 0 0 15 240 0 0 31 248 0 0 63 252 0 0 127 254 0 0 127 254 0 0 63 252 0 0 31 248 0 0 15 240 0 0 7 224 0 0 3 192 0 0 1 128 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">yellowCircle16x16	"UIMaskEditor new openOnClass: self andSelector: #yellowCircle16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 4915 scaledGreen: 4336 scaledBlue: 2024); at: 2 put: (Graphics.ColorValue scaledRed: 7870 scaledGreen: 7741 scaledBlue: 7324); at: 3 put: (Graphics.ColorValue scaledRed: 8159 scaledGreen: 7163 scaledBlue: 3212); at: 4 put: (Graphics.ColorValue scaledRed: 7195 scaledGreen: 6167 scaledBlue: 2088); at: 5 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7452 scaledBlue: 4626); at: 6 put: (Graphics.ColorValue scaledRed: 7934 scaledGreen: 6906 scaledBlue: 2795); at: 7 put: (Graphics.ColorValue scaledRed: 6392 scaledGreen: 5525 scaledBlue: 2024); at: 8 put: (Graphics.ColorValue scaledRed: 6553 scaledGreen: 6553 scaledBlue: 4915); at: 9 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7870 scaledBlue: 6553); at: 10 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7356 scaledBlue: 3919); at: 11 put: (Graphics.ColorValue scaledRed: 7838 scaledGreen: 6746 scaledBlue: 2377); at: 12 put: (Graphics.ColorValue scaledRed: 5910 scaledGreen: 5139 scaledBlue: 2024); at: 13 put: Graphics.ColorValue white; at: 14 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7613 scaledBlue: 5268); at: 15 put: (Graphics.ColorValue scaledRed: 6810 scaledGreen: 5878 scaledBlue: 2088); at: 16 put: (Graphics.ColorValue scaledRed: 5429 scaledGreen: 4754 scaledBlue: 2024); yourself)) usingBits: (ByteArray fromPackedString: 'C@0LC@0LC@0LC@0LC@0LC@0LC@0LB@PIBP4AC@0LC@0LC@0HCPPDBP$BAP4LC@0LC@0HCP4DA@$B@ TJA@0LC@0LCP4MA@$I@ TJ@0LAC@0LB@PDA@PI@ HJB LNA00LC@PDA@$IBPHEB LNA 8LC@0IBP$I@ HEB LNA XFC@0LBP$B@ TJ@08FA ,KA 0LC@4B@ TJB 8FB0,OC0\LC@0LAPTJB LFB0&lt;OC0&lt;AC@0LC@4J@0LNA ,O@@@GC@0LC@0LA@LNA ,O@@@GC@0LC@0LC@0AA08FA \AC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@0LC@@a'))</body><body package="StarBrowserIcons2">yellowCircle16x16mask	"UIMaskEditor new openOnClass: self andSelector: #yellowCircle16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 7 224 0 0 31 240 0 0 63 248 0 0 63 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 127 252 0 0 63 252 0 0 63 248 0 0 31 240 0 0 15 224 0 0 0 0 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">yellowDiamond16x16	"UIMaskEditor new openOnClass: self andSelector: #yellowDiamond16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 5204 scaledGreen: 4561 scaledBlue: 2024); at: 2 put: Graphics.ColorValue white; at: 3 put: (Graphics.ColorValue scaledRed: 8127 scaledGreen: 7163 scaledBlue: 3405); at: 4 put: (Graphics.ColorValue scaledRed: 6521 scaledGreen: 6167 scaledBlue: 4818); at: 5 put: (Graphics.ColorValue scaledRed: 7259 scaledGreen: 6232 scaledBlue: 2120); at: 6 put: (Graphics.ColorValue scaledRed: 7741 scaledGreen: 7195 scaledBlue: 4979); at: 7 put: (Graphics.ColorValue scaledRed: 6232 scaledGreen: 5396 scaledBlue: 2024); at: 8 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7356 scaledBlue: 4047); at: 9 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7838 scaledBlue: 6456); at: 10 put: (Graphics.ColorValue scaledRed: 7838 scaledGreen: 6778 scaledBlue: 2570); at: 11 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7709 scaledBlue: 5814); at: 12 put: (Graphics.ColorValue scaledRed: 5782 scaledGreen: 5043 scaledBlue: 2024); at: 13 put: (Graphics.ColorValue scaledRed: 7195 scaledGreen: 6746 scaledBlue: 4818); at: 14 put: (Graphics.ColorValue scaledRed: 6746 scaledGreen: 5814 scaledBlue: 2088); at: 15 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7484 scaledBlue: 4626); at: 16 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 7613 scaledBlue: 5236); yourself)) usingBits: (ByteArray fromPackedString: '@PDA@PDA@PDA@PDA@PDA@PDA@PDA@PDJB DA@PDA@PDA@PDA@PDHA0\J@PDA@PDA@PDA@PDHC 8G@ &lt;A@PDA@PDA@PDHC0&lt;GA0HIAPDA@PDA@PDHC0&lt;NA0HBBPPL@PDA@PDHC0&lt;OC \BBPPDCP0A@PDJC 8GA0\BBPPDCP4FC@DAB \B@ HBBPPMA XFA 0A@PDJ@ HBBPPFB0,KB00A@PDA@P(IBP$DB0@@@@LA@PDA@PDAAP$DCP,@@@LA@PDA@PDA@PDEA@4@@@LA@PDA@PDA@PDA@PTMB0LA@PDA@PDA@PDA@PDAC@0A@PDA@PDA@PDA@PDA@PDA@PDA@PDA@P@a'))</body><body package="StarBrowserIcons2">yellowDiamond16x16mask	"UIMaskEditor new openOnClass: self andSelector: #yellowDiamond16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 1 128 0 0 3 192 0 0 7 224 0 0 15 240 0 0 31 248 0 0 63 252 0 0 127 254 0 0 127 254 0 0 63 252 0 0 31 248 0 0 15 240 0 0 7 224 0 0 3 192 0 0 1 128 0 0 0 0 0 0])</body><body package="StarBrowserIcons2">yellowStar16x16	"UIMaskEditor new openOnClass: self andSelector: #yellowStar16x16"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: ((Core.Array new: 16) at: 1 put: (Graphics.ColorValue scaledRed: 4754 scaledGreen: 2859 scaledBlue: 0); at: 2 put: (Graphics.ColorValue scaledRed: 8159 scaledGreen: 7773 scaledBlue: 7227); at: 3 put: (Graphics.ColorValue scaledRed: 8030 scaledGreen: 5910 scaledBlue: 2698); at: 4 put: (Graphics.ColorValue scaledRed: 7484 scaledGreen: 4850 scaledBlue: 899); at: 5 put: (Graphics.ColorValue scaledRed: 7035 scaledGreen: 6713 scaledBlue: 6232); at: 6 put: (Graphics.ColorValue scaledRed: 5878 scaledGreen: 3630 scaledBlue: 289); at: 7 put: (Graphics.ColorValue scaledRed: 8030 scaledGreen: 5557 scaledBlue: 1863); at: 8 put: (Graphics.ColorValue scaledRed: 5846 scaledGreen: 4304 scaledBlue: 2056); at: 9 put: (Graphics.ColorValue scaledRed: 8191 scaledGreen: 6424 scaledBlue: 3758); at: 10 put: (Graphics.ColorValue scaledRed: 7998 scaledGreen: 6906 scaledBlue: 5236); at: 11 put: Graphics.ColorValue white; at: 12 put: (Graphics.ColorValue scaledRed: 6521 scaledGreen: 5300 scaledBlue: 3533); at: 13 put: (Graphics.ColorValue scaledRed: 7003 scaledGreen: 4401 scaledBlue: 482); at: 14 put: (Graphics.ColorValue scaledRed: 7966 scaledGreen: 7452 scaledBlue: 6713); at: 15 put: (Graphics.ColorValue scaledRed: 7998 scaledGreen: 5236 scaledBlue: 1124); at: 16 put: (Graphics.ColorValue scaledRed: 5364 scaledGreen: 3212 scaledBlue: 32); yourself)) usingBits: (ByteArray fromPackedString: 'B (JB (JB DAB (JB (JB (JB (JB (HB@(JB (JB (JB (JB (A@ XMB (JB (JB (JB (JBP F@ (JB (JB (JB (J@P HA 8MB (JB (ABP$IB@ H@ XNC 8BB@$D@PHB@  HB@HFC LC@00EA@(A@ XB@ HBC LLAPTEA@(JB DFA HBA LLAP&lt;OA@(JB (J@PXFC 0LAP&lt;OA@(JB (JB DF@00EC0&lt;O@@PJB (JB (MC 0OC0&lt;OC0@DB (JB (JBPLEC0\GC0@@B0(JB (JB HEA0PJB PGC0\JB (JB (KA@(JB (JB PKB (JB (JB (JB (JB (JB (JB @a'))</body><body package="StarBrowserIcons2">yellowStar16x16mask	"UIMaskEditor new openOnClass: self andSelector: #yellowStar16x16mask"	&lt;resource: #image&gt;	^(Image extent: 16@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[1 128 0 0 1 128 0 0 3 192 0 0 3 192 0 0 7 224 0 0 255 255 0 0 255 255 0 0 127 254 0 0 63 252 0 0 31 248 0 0 31 248 0 0 31 248 0 0 31 248 0 0 30 120 0 0 24 24 0 0 0 0 0 0])</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>star browser</category><body package="StarBrowserUI2">openStarBrowser2	&lt;menuItem: 'StarBrowser2'		icon: #starBrowser2Icon		nameKey: nil		menu: #(#menuBar #tools)		position: 10.031&gt;	&lt;menuItem: 'StarBrowser2'		icon: #starBrowser2Icon		nameKey: nil		menu: #(#launcherToolBar)		position: 21.8&gt;	Classifications2.StarBrowser2 openOnClassification: Classifications2.StarBrowser2 defaultClassification</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Cursor</name><environment>UI</environment><super>OS.OSHandle</super><private>false</private><indexed-type>none</indexed-type><inst-vars>image mask hotSpot name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>OS-Window System</category><attributes><package>OS-Window System</package></attributes></class><class><name>BundleModel</name><environment>Store</environment><super>Store.PundleModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>PackageCategories</category><attributes><package>PackageCategories</package></attributes></class><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>StoreBundle</name><environment>Store.Glorp</environment><super>Store.Glorp.StorePundle</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bundles packages files </inst-vars><class-inst-vars></class-inst-vars><imports>			private Store.*			private Store.Glorp.*			</imports><category>StoreForGlorp</category><attributes><package>Store-Database Model</package></attributes></class><class><name>MethodDefinition</name><environment>Tools</environment><super>Tools.GeneralMethodDefinition</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inheritingClass implementingClass selector extraText </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category><attributes><package>Tools-Programming</package></attributes></class><class><name>NameSpace</name><environment>Kernel</environment><super>Kernel.GeneralNameSpace</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Name Spaces</category><attributes><package>System-Name Spaces</package></attributes></class><class><name>MethodFilter</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category><attributes><package>Tools-Programming</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>UILookPolicy</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>systemAttributes systemWidgetAttributes useSystemFontOnWidgets systemMenuAttributes </class-inst-vars><imports></imports><category>UIBuilder-Support</category><attributes><package>UIBuilder-Support</package></attributes></class><class><name>WinXPLookPolicy</name><environment>UI</environment><super>UI.Win95LookPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UILooks-WinXP</category><attributes><package>UILooks-WinXP</package></attributes></class><class><name>MenuAutomaticGenerator</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuName menuDefiner messageSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Menus</category><attributes><package>Interface-Menus</package></attributes></class><class><name>SequenceController</name><environment>UI</environment><super>UI.ControllerWithMenu</super><private>false</private><indexed-type>none</indexed-type><inst-vars>outside searchString keyboardHook doStringSearching dispatcher dragDropCallbacks selectOnDownWithDrag autoSelect useModifierKeys </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>UIBasics-Controllers</category><attributes><package>UIBasics-Controllers</package></attributes></class><class><name>InspectorShell</name><environment>Tools.Trippy</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>origin trail current installedNavigator menuBarHolder evaluationPaneVisible textHolder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Trippy</category><attributes><package>Tools-Trippy</package></attributes></class><class><name>SelectionView</name><environment>UI</environment><super>UI.ScrollingView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sequence selectionChannel selectionIndex targetIndex grid textStyle displayStringSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Support</category><attributes><package>UIBasics-Support</package></attributes></class><class><name>UndefinedObject</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ToolBar</name><environment>UI</environment><super>UI.ComposingComposite</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuChannel performer spaceIndices namedComponents releaseAction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category><attributes><package>UIBasics-Components</package></attributes></class><class><name>Win98ToolBar</name><environment>UI</environment><super>UI.ToolBar</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UILooks-MSWin</category><attributes><package>UILooks-MSWin</package></attributes></class><class><name>StorePackage</name><environment>Store.Glorp</environment><super>Store.Glorp.StorePundle</super><private>false</private><indexed-type>none</indexed-type><inst-vars>methods classDefinitions nameSpaces sharedVariables parcel binFile </inst-vars><class-inst-vars></class-inst-vars><imports>			private Store.*			</imports><category>StoreForGlorp</category><attributes><package>Store-Database Model</package></attributes></class><class><name>MethodCollector</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>browser interfaceWindow filter </inst-vars><class-inst-vars></class-inst-vars><imports>			private Refactory.Browser.RefactoringBrowser			</imports><category>Tools-Programming</category><attributes><package>Tools-Programming</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>WinXPToolBar</name><environment>UI</environment><super>UI.Win98ToolBar</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UILooks-WinXP</category><attributes><package>UILooks-WinXP</package></attributes></class><class><name>Error</name><environment>Core</environment><super>Core.Exception</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class><class><name>PackageModel</name><environment>Store</environment><super>Store.PundleModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>models </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>PackageCategories</category><attributes><package>PackageCategories</package></attributes></class><class><name>HierarchyPundleNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.ListNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>definingPackage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>LayoutFrame</name><environment>Graphics</environment><super>Graphics.LayoutOrigin</super><private>false</private><indexed-type>none</indexed-type><inst-vars>right rightFraction bottom bottomFraction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Support</category><attributes><package>Interface-Support</package></attributes></class><class><name>TreeNodeWrapper</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object children levelDescription openedChildren lastLabel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Support</category><attributes><package>UIBasics-Support</package></attributes></class><class><name>TestCase</name><environment>XProgramming.SUnit</environment><super>XProgramming.SUnit.TestAsserter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnit</package></attributes></class><class><name>Behavior</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>superclass methodDict format subclasses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><class><name>Win98LookPolicy</name><environment>UI</environment><super>UI.Win95LookPolicy</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UILooks-MSWin</category><attributes><package>UILooks-MSWin</package></attributes></class><class><name>BOSSReader</name><environment>Kernel</environment><super>Kernel.BOSSAbstractReader</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Binary Storage</category><attributes><package>BOSS</package></attributes></class></st-source>