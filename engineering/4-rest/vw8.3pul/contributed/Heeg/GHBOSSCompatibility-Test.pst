<?xml version="1.0"?><st-source><!-- Name: GHBOSSCompatibility-TestNotice: © Copyright 2010-2013 Georg Heeg e.K.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.(MIT License)Comment: This package provides SUnit testing for GHBOSSCompatibility.DbIdentifier: magdi.heeg.de.postgresDbTrace: 42088DbUsername: georgDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'SUnit' '') #(#any 'GHNamespaces' '') #(#any 'GHBOSSCompatibility' ''))PackageName: GHBOSSCompatibility-TestParcel: #('GHBOSSCompatibility-Test')ParcelDirectory: c:\visworks\vw8.0 sep14.2\image\HeegContributions-vw8.0-2014-09-25-2\GHBOSSCompatibility-TestParcelName: GHBOSSCompatibility-TestPrerequisiteParcels: #(#('SUnit' '') #('GHNamespaces' '') #('GHBOSSCompatibility' ''))PrintStringCache: (7.10 - 1,georg)Version: 7.10 - 1Date: 3:30:44 PM September 25, 2014 --><time-stamp>From VisualWorks®, 8.0 of 15. September 2014 on 25. September 2014 at 15:30:44</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Address</name><environment>Heeg</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zipCode city street </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GHBOSSCompatibility-Test</category><attributes><package>GHBOSSCompatibility-Test</package></attributes></class><comment><class-id>Heeg.Address</class-id><body>Just a simple class for testing BOSS compatibility which solves the problem of importing BOSS files which have been created from an old VisualWorks version (pre 5i4) which does not yet support namespaces. Desired class properties:- Class is not trivial (has inst.vars.)- Class is in deep namespace different from Smalltalk root/base namespacesInstance Variables:	city	&lt;String&gt;	name of city	street	&lt;String&gt;	name of street	zipCode	&lt;String&gt;	unique postal identification code</body></comment><class><name>GHBOSSCompatibilityTest</name><environment>Heeg</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>backup bossFile </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GHBOSSCompatibility-Test</category><attributes><package>GHBOSSCompatibility-Test</package></attributes></class><comment><class-id>Heeg.GHBOSSCompatibilityTest</class-id><body>SUnit testing for GHBOSSCompatibility.</body></comment><methods><class-id>Heeg.Address</class-id> <category>accessing</category><body package="GHBOSSCompatibility-Test">city	^city</body><body package="GHBOSSCompatibility-Test">city: aString	city := aString</body><body package="GHBOSSCompatibility-Test">street	^street</body><body package="GHBOSSCompatibility-Test">street: aString	street := aString</body><body package="GHBOSSCompatibility-Test">zipCode	^zipCode</body><body package="GHBOSSCompatibility-Test">zipCode: aString	zipCode := aString</body></methods><methods><class-id>Heeg.Address class</class-id> <category>testing</category><body package="GHBOSSCompatibility-Test">createTestObjects	"Answer a small collection of sample instances for testing.	(Address createTestObjects)	Return: Array of: Address"	^#(#('44227' 'Dortmund' 'Baroper Str. 337')) collect: 			[:anArray | 			(self new)				zipCode: anArray first;				city: (anArray at: 2);				street: anArray last]</body></methods><methods><class-id>Heeg.GHBOSSCompatibilityTest</class-id> <category>testing</category><body package="GHBOSSCompatibility-Test">testExport	"Create a BOSS file storing Address test instances."	| boss |	bossFile := 'GHBOSSCompatibilityTest.bos' asFilename writeStream binary.		[boss := BinaryObjectStorage onNew: bossFile.	boss beBackwardCompatible.	boss nextPut: Address createTestObjects] 			ensure: [boss close]</body><body package="GHBOSSCompatibility-Test">testExportImport	"Create a BOSS file storing Address test instances in backward compatible mode,	i.e. export has no namespace info. Then import contents of this BOSS file. 	With backward compatibility everything should be fine, 	without it import must fail with Error in GeneralBindingReference&gt;&gt;binding."	| boss export import expected |	export := Address createTestObjects.	bossFile := 'GHBOSSCompatibilityTest.bos' asFilename writeStream binary.		[(BinaryObjectStorage onNew: bossFile)		beBackwardCompatible;		nextPut: export] 			ensure: [bossFile close].	"import data without backward compatibility mode; make sure that it does not work"	bossFile := bossFile name asFilename readStream binary.	boss := BinaryObjectStorage onOld: bossFile.	import := [boss next] on: Error do: [:ex | ex return: ex].	expected := (#errNoBinding &lt;&lt; #dialogs &gt;&gt; 'The identifier &lt;1s&gt; has no binding')				expandMacrosWith: Address name.	self assert: import isSignalledException.	self assert: import messageText = expected.	"retry import with backward compatibility mode; make sure that it works"	bossFile reset.	import := (BinaryObjectStorage onOld: bossFile)				beBackwardCompatible;				next.	self assert: import isSequenceable.	self assert: import size = export size</body></methods><methods><class-id>Heeg.GHBOSSCompatibilityTest</class-id> <category>Running</category><body package="GHBOSSCompatibility-Test">setUp	"Configure backward compatibility for this test."	backup := BOSSCompatReader registeredNamespaces.	BOSSCompatReader registerNamespace: Heeg</body><body package="GHBOSSCompatibility-Test">tearDown	"Ensure removal of BOSS files created during testing.	Restore previous backward compatibility settings."	bossFile notNil 		ifTrue: 			[bossFile close.			[bossFile name asFilename delete] on: OsError do: [:ex | ex return].			bossFile := nil].	(backup includes: Heeg) 		ifFalse: [BOSSCompatReader unregisterNamespace: Heeg]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>