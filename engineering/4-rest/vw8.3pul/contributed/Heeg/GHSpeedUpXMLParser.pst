<?xml version="1.0"?><st-source><!-- Name: GHSpeedUpXMLParserNotice: © Copyright 2000-2013 Georg Heeg e.K.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.(MIT License)Comment: This parcel speeds up parsing of XML-Files by caching content of DTD. The cache is twofold, it caches the content of the DTD-file and it also caches the parsed DTD object. That way DTD is only parsed once and it is possible to avoid downloading the DTD at all.To prefill the cache with a DTD-file, cache it using #cacheFileContent:underPublicKey:systemID:To prefill the xhtml-special entities dtd call:	SAXDriver new 			cacheFileContent: aString 			underPublicKey: '-//W3C//ENTITIES Special for XHTML//EN' 			systemID: 'http://www.w3.org/TR/xhtml1/DTD/xhtml-special.ent'.Author: Georg HeegDbIdentifier: magdi.heeg.de.postgresDbTrace: 42232DbUsername: georgDbVersion: 7.10 - 3DevelopmentPrerequisites: #(#(#any 'URISupport' '') #(#any 'Base VisualWorks' ''))PackageName: GHSpeedUpXMLParserParcel: #('GHSpeedUpXMLParser')ParcelDirectory: c:\visworks\vw8.0 sep14.2\image\HeegContributions-vw8.0-2014-09-25-2\GHSpeedUpXMLParserParcelName: GHSpeedUpXMLParserPrerequisiteDescriptions: #(#(#name 'URISupport' #componentType #package) #(#name 'Base VisualWorks' #componentType #bundle))PrerequisiteParcels: #(#('URISupport' '') #('Base VisualWorks' ''))PrintStringCache: (7.10 - 3,georg)Version: 7.10 - 3Datum:3:30:50 PM September 25, 2014 --><time-stamp>Von VisualWorks®, 8.0 von 15. September 2014 am 25. September 2014 um 15:30:50</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><shared-variable><name>Cache</name><environment>XML.SAXDriver</environment><private>false</private><constant>false</constant><category>caches</category><initializer>Dictionary new</initializer><attributes><package>GHSpeedUpXMLParser</package></attributes></shared-variable><methods><class-id>XML.XMLParser</class-id> <category>DTD processing</category><body package="GHSpeedUpXMLParser">dtdFile: uriList	| str input publicKey systemId |	self noteExternalDTD.	currentSource skip: -1.	"So we don't lose hereChar."	publicKey := uriList at: 1.	systemId := uriList at: 2.	"overridden to first try to load the cached DTD"	input := sax resolveDtdEntity: publicKey systemID: systemId.	input notNil		ifTrue: 			[sourceStack next.			dtd := input.			^self]		ifFalse: 			["if the DTD was not cached, see if the InputSource was at least cached"			input := sax resolveEntity: publicKey systemID: systemId.			input isNil ifTrue: [input := (uriList at: 2) asURI resource]].	self pushSource: (str := StreamWrapper						resource: input						entity: ((GeneralEntity new)								name: (#dtd &lt;&lt; #xml &gt;&gt; '[dtd]') asString;								externalFrom: uriList)						from: self).	str usedAsExternal: true.	str textDecl.	self getNextChar.	[self fullSourceStack includes: str] whileTrue: [self dtdEntry].	"overridden to cache the DTD"	input == nil		ifFalse: 			[sax				cache: input				dtd: dtd				under: (uriList at: 1).			sax				cache: input				dtd: dtd				under: (uriList at: 2)]</body></methods><methods><class-id>XML.Entity</class-id> <category>accessing</category><body package="GHSpeedUpXMLParser">streamFor: aParser 	(aParser hasExpanded: self) 		ifTrue: 			[aParser malformed: #recursiveDefinitions &lt;&lt; #xml 						&gt;&gt; 'Can''t expand this entity; it is defined recursively'].	text == nil 		ifTrue: 			[| str input |			input := aParser saxDriver resolveEntity: self publicID						systemID: self systemID.			input == nil ifTrue: [input := systemID asURI resource].			input == nil 				ifFalse: 					[aParser saxDriver cache: input under: self publicID.					aParser saxDriver cache: input under: self systemID].			aParser pushSource: (str := StreamWrapper 								resource: input								entity: self								from: aParser).			str textDecl.			aParser getNextChar]		ifFalse: 			[aParser pushSource: (StreamWrapper 						resource: (InputSource 								uri: nil								encoding: nil								stream: text readStream)						entity: self						from: aParser).			aParser getNextChar]</body><body package="GHSpeedUpXMLParser">text	^text</body></methods><methods><class-id>XML.SAXDriver</class-id> <category>entity resolver</category><body package="GHSpeedUpXMLParser">cache: input dtd: dtd under: key 	key notNil 		ifTrue: 			[Cache at: key				put: (Array with: input with: dtd with: self document elements copy)]</body><body package="GHSpeedUpXMLParser">cache: input under: key 	key notNil 		ifTrue: 			[Cache at: key				put: (Array with: input with: nil with: nil)]</body><body package="GHSpeedUpXMLParser">cacheFileContent: aString underPublicKey: publicKey systemID: systemID	| input |	(Array with: publicKey with: systemID) do: 			[:key |			input := XML.InputSource						uri: (URI fromString: systemID)						encoding: #utf8						stream: ((aString asByteArrayEncoding: #utf8) withEncoding: #utf8)								readStream.			self cache: input under: key]</body><body package="GHSpeedUpXMLParser">resolveDtdEntity: publicKey systemID: systemKey	"Caching works in 2 Steps. First the input source is cached, then the DTD and elements are cached.	In case the DTD is not cached, the cachedArray only has an object in slot 1"	| cachedArray elements |	cachedArray := Cache at: systemKey ifAbsent: [^nil].	elements := cachedArray last.	elements isNil ifTrue: [^nil].	elements do: [:node | self document addNode: node copy].	^(cachedArray at: 2) copy</body><body package="GHSpeedUpXMLParser">resolveEntity: publicKey systemID: systemKey 	| result |	result := Cache at: systemKey ifAbsent: [^nil].	result first stream reset.	^result first</body></methods><methods><class-id>XML.ParameterEntity</class-id> <category>accessing</category><body package="GHSpeedUpXMLParser">streamFor: aParser addSpaces: spaces	| myText textStr input |	(aParser hasExpanded: self)		ifTrue: 			[aParser malformed: #recursiveDefinitions &lt;&lt; #xml						&gt;&gt; 'Can''t expand this entity; it is defined recursively'].	text == nil		ifTrue: 			[| str |			input := aParser saxDriver resolveEntity: self publicID						systemID: self systemID.			input == nil ifTrue: [input := systemID asURI resource].			input == nil				ifFalse: 					[aParser saxDriver cache: input under: self publicID.					aParser saxDriver cache: input under: self systemID].			resolvedURI := input uri.			str := StreamWrapper resource: input entity: self from: aParser.						[str textDecl.			textStr := (String new: 32) writeStream.			[str atEnd] whileFalse: [textStr nextPut: str next].			text := textStr contents]					ensure: [str close]].	myText := text.	spaces ifTrue: [myText := ' ' , text , ' '].	aParser pushSource: (StreamWrapper				resource: (InputSource						uri: resolvedURI						encoding: nil						stream: myText readStream)				entity: self				from: aParser).	aParser getNextChar</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>XMLParser</name><environment>XML</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sourceStack hereChar hereCharNumBytes lastSource currentSource dtd unresolvedIDREFs definedIDs latestID sax elementStack validating flags eol buffer nameBuffer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>XML-Parsing</category><attributes><package>XML</package></attributes></class><class><name>Entity</name><environment>XML</environment><super>XML.Node</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name text systemID publicID </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>XML-Nodes</category><attributes><package>XML</package></attributes></class><class><name>ParameterEntity</name><environment>XML</environment><super>XML.Entity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>resolvedURI </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>XML-Nodes</category><attributes><package>XML</package></attributes></class><class><name>SAXDriver</name><environment>XML</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>locator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>XML-SAX</category><attributes><package>XML</package></attributes></class></st-source>