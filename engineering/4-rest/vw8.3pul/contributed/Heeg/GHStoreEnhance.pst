<?xml version="1.0"?><st-source><!-- Name: GHStoreEnhanceNotice: © Copyright 1999-2015 Georg Heeg e.K.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.(MIT License)Comment: Display enhancements to Store Browsers and Tools:- Display bundles and packages with version string (in red color if modified)- add a special 'Loaded Items' tool, which is opened by the normal VisualLaunchers 'Store->Loaded Items' menu.  The following functionality is provided by this tool in addtion to the existing tool:	+ the list of items in the tool can be filtered using an additional filter menu located below the list,	+ the default filter is 'show modified'	+ the pundles in the list also show the version information,	+ the list also provides a 'Publish ...' and a 'Changed Methods...' menu item, if the conditions apply.Authors: Georg Heeg, Roland Wagener========Version History8.0 - 2	fix changeCount calculation8.0 - 1	adaptations for VW8.0:			+ add package property to resolve variables automaticaly, 				namespace -> 'Smalltalk.Store'			+ remove old-style menu pragma in override of #openLoadedItems7.10 - 3	merge changes from 7.9	 - 10 into this branch7.10 - 2	roughly updated the LoadedPundleTool to use its filters, the window titel now says 'GHLoadedPundleTool'7.9 - 10	- opening the LoadedPundleTool will show the modified list,		- changed bundles will be marked red, and show the accumulated change count 7.9 - 8	integrated Michael Prasses version of the modified LoadedPundleTool, removed overrides of the superclass, added		class comment, moved class into namespace Heeg, added GHNamespace as a prerequisite,7.9 - 3	added menu item to 'Store' menu in the VisualLauncher to open a 'Loaded Items with Changes' list, which		provides a menu to publish a selection from that list directly.7.8 - 1	removed obsolete extension to replaced LoadedItems tool, and the AbstractTool extension, because the menus were changed.		Functionality of the filtering in LoadedItems are partially available in the new Spawn-> submenu of the pundle list.7.10 	fixed package/parcel version7.9 		fixed prerequisites (replace 'Store UI' with bundle 'Store Base'); reverse version history order (most recent first)7.8		fixed comments7.7		review and corrections for new browser framework in 7.77.5		adapted to new browser framework in 7.7 (based on apr9.3)7.4		changes for 7.5: fix for PundlesTool class definition overwrite7.3		version adapted7.2		added back filter stuff for LoadedItems interface3.0		removed filter stuff from LoadedItems interface, thus remaining leaving only the enhanced version display in all 		areas where a pundle is displayed in a browser2.0		removed all code for method hierarchy icons, because they are available in the RefactoringBrowser of VW 7.0,1.59 	fixed wrong icon placement on Windows,	1.58 	fixed inherited-icon calculation for 5i.3, somebody changed the return value of 'implementingClass',	1.57 	added BrowserHelper visualBlocks with platform specific offsets.	1.56 	test if some visualBlocks can be removed from the package,	1.55 	another fix for the PublishedPundlesTool, only needed by GHStoreEnhance,	1.54 	fixed release behaviour of PundlesTool and PublishedPundlesTool,	1.52 	fixed selectedVisualBlock in SelectorBrowserHelper,	1.51 	added class static GHIcons to package,	1.5 		preparation for 5i.3,1.21 	fixes for VW 5i.2	1.20 	fixed SelectorBrowserHelper>selectorName: aName visual: view index: index to do the magic only for		FullNotebook- and TabApplication-SystemBrowsers	1.19 	fixed missing class static SelectorBrowserHelper>GHIcons	1.18 	first public version for 5i.1	DbIdentifier: magdi.heeg.de.postgresDbTrace: 52859DbUsername: danielDbVersion: 8.0 - 3DevelopmentPrerequisites: #(#(#any 'StoreBase' '') #(#any 'GHNamespaces' ''))DialectVersion: VisualWorks 7.9HideSource: falseNamespace: Smalltalk.StorePackageName: GHStoreEnhanceParcel: #('GHStoreEnhance')ParcelDirectory: c:\visworks\vw8.1 may15.3\image\Contributions\HeegContributions-vw8.1-2015-06-04\GHStoreEnhanceParcelName: GHStoreEnhancePrerequisiteDescriptions: #(#(#name 'StoreBase' #componentType #bundle) #(#name 'GHNamespaces' #componentType #package))PrerequisiteParcels: #(#('StoreBase' '') #('GHNamespaces' ''))PrintStringCache: (8.0 - 3,daniel)SaveSource: trueVersion: 8.0 - 3Date: 9:29:57 AM June 5, 2015 --><time-stamp>From VisualWorks®, Pre-Release 8.1 (may15.3) of 15. Mai 2015 on 5. Juni 2015 at 09:29:57</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>LoadedPundleTool</name><environment>Heeg</environment><super>Store.Glorp.PublishedPundleVersionsTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>filter </inst-vars><class-inst-vars></class-inst-vars><imports>			private Store.*			private Store.Glorp.*			</imports><category></category><attributes><package>GHStoreEnhance</package></attributes></class><comment><class-id>Heeg.LoadedPundleTool</class-id><body>LoadedPundleTool specializes the PublishedPundleVersionsTool by adding a filter menu for the pundle list. The LoadedPundleTool is used as the standard LoadedItems tool replacing the superclass.The following predefined constraints are provided on the menu to filter the visible pundles list:	'show all' 	'show modified'	'Packages only' 	'modified Packages' 	'once published Packages' 	'never published Packages'	'Bundles only' 	'modified Bundles' 	'once published Bundles' 	'never published Bundles' Thanks to Michael Prasse for providing this migration to the 7.9 tool framework!The tool is opened by the normal menu 'Store-&gt;Loaded Items' in the VisualLauncher.</body></comment><methods><class-id>Heeg.LoadedPundleTool</class-id> <category>menu action</category><body package="GHStoreEnhance">browseChangedMethods	"We have pundles selected, so browse the ones with pending changes."	| pundles env |	(pundles := self searchModule selections) isEmpty ifTrue: [^self].	pundles := pundles				select: [:pndl | pndl isImageModel and: [pndl hasItselfBeenModified]].	pundles do: 			[:pndl |			env := Refactory.Browser.SelectorEnvironment new.			env label: pndl name, ': ' , (#ChangedMethods1 &lt;&lt; #browser &gt;&gt; 'Changed methods') asString.			(pndl changedMessageListFor: pndl anyDatabaseId)				do: [:meth | env addClass: meth implementingClass selector: meth selector].			env openEditor]</body><body package="GHStoreEnhance">publishSelection	"If we have pundles selected, publish the ones with pending changes."	self searchModule selections do: 			[:pundle |			(pundle isImageModel and: [pundle hasItselfBeenModified])				ifTrue: [pundle storeInDB]]</body></methods><methods><class-id>Heeg.LoadedPundleTool</class-id> <category>interface opening</category><body package="GHStoreEnhance">postOpenWith: aBuilder		super postOpenWith: aBuilder.	self performAction</body><body package="GHStoreEnhance">setupSearcher	"Modify the displayString for BundleModel/PackageModel in the list."	super setupSearcher.	searchModule displayStringSelector: #toolListText</body></methods><methods><class-id>Heeg.LoadedPundleTool</class-id> <category>menu item adornment</category><body package="GHStoreEnhance">selectionHasChanges	"The 'Publish ...' and the 'ChangedMethods...' menu should only be enabled for Pundles with pending changes."	^self searchModule selections		anySatisfy: [:p | p isImageModel and: [p hasItselfBeenModified]]</body></methods><methods><class-id>Heeg.LoadedPundleTool</class-id> <category>actions</category><body package="GHStoreEnhance">modifiedBundles	self listBlock: 			[ :pf | (Registry allPundlesSorted				select: [:each | each isBundle and: [each hasItselfBeenModified]]) asList]</body><body package="GHStoreEnhance">modifiedPack	self listBlock: 			[ :pf | (Registry allPundlesSorted				select: [:each | each isPackage and: [each hasItselfBeenModified]]) asList]</body><body package="GHStoreEnhance">neverPublishedBund	self listBlock: 			[ :pf | (Registry allPundlesSorted select: 					[:each |					| str |					each isBundle						and: [(str := each traceVersionString) isEmpty or: [str = '(???)']]])				asList]</body><body package="GHStoreEnhance">neverPublishedPack	self listBlock: 			[ :pf | (Registry allPundlesSorted select: 					[:each |					| str |					each isPackage						and: [(str := each traceVersionString) isEmpty or: [str = '(???)']]])				asList]</body><body package="GHStoreEnhance">oncePublishedBund	self listBlock: 			[ :pf | (Registry allPundlesSorted select: 					[:each |					| str |					each isBundle						and: [(str := each traceVersionString) isEmpty not and: [str ~= '(???)']]])				asList]</body><body package="GHStoreEnhance">oncePublishedPack	self listBlock: 			[ :pf | (Registry allPundlesSorted select: 					[:each |					| str |					each isPackage						and: [(str := each traceVersionString) isEmpty not and: [str ~= '(???)']]])				asList]</body><body package="GHStoreEnhance">onlyBundles	self listBlock: 			[ :pf | (Registry allPundlesSorted select: [:each | each isBundle]) asList]</body><body package="GHStoreEnhance">onlyPackages	self listBlock: 			[ :pf | (Registry allPundlesSorted select: [:each | each isPackage]) asList]</body><body package="GHStoreEnhance">performAction	"Delegate the menu selection to perform the selected action."	self perform: self filter value</body><body package="GHStoreEnhance">showAll	self listBlock: [ :pf | Registry allPundlesSorted asList]</body><body package="GHStoreEnhance">showModified	self listBlock: 			[ :pf | (Registry allPundlesSorted select: [:each | each hasItselfBeenModified])				asList]</body></methods><methods><class-id>Heeg.LoadedPundleTool</class-id> <category>accessing</category><body package="GHStoreEnhance">listBlock: aBlock	"Assign another listBlock, and evaluate it to get a new list."	listBlock := aBlock.	self refreshList</body></methods><methods><class-id>Heeg.LoadedPundleTool</class-id> <category>aspects</category><body package="GHStoreEnhance">filter	"Aspect for the filter menu."	filter isNil 		ifTrue: 			[filter := #showModified asValue.			filter onChangeSend: #performAction to: self].	^filter</body></methods><methods><class-id>Store.PundleModel</class-id> <category>printing</category><body package="GHStoreEnhance">completeChangeCount	"Use this method onl if the databaseInformation is not already availabel."	^self completeChangeCountFor: nil</body><body package="GHStoreEnhance">completeChangeCountFor: info	"Retrieve the databaseInformation only of not already passed in."	^(info ifNil: [self databaseInformation ifNil: [^0]]) changeSet		changeCount</body><body package="GHStoreEnhance">toolListText	"Answer the Text to display a bundle or package in lists of developer tools.	Override to insert the pundle version string (in red color if modified), and	to show the accumulated changeCount."	^self databaseInformation		ifNil: [self name asText]		ifNotNil: 			[:info |			| stream vs |			vs := self traceVersionString.			stream := TextStream on: (String new: self name size + vs size + 10).						[| coverText |			coverText := self displayCoverageText.	"&lt;= this will break if SUnitToo(lsoverage) is not installed."			stream emphasize: (coverText emphasisAt: 1)				while: [stream nextPutAll: coverText]]					on: MessageNotUnderstood					do: [:ex | ex return].			stream				nextPutAll: name;				space.			self hasBeenModified				ifFalse: [stream nextPutAll: vs]				ifTrue: 					[stream emphasis: (Array with: #bold with: #color -&gt; ColorValue red).					stream nextPutAll: vs.					stream emphasis: (Array with: #bold								with: #color -&gt; (ColorValue												hue: 1 / 12												saturation: 1												brightness: 0.75)).					stream nextPutAll: (#changeCountNumberOnly &lt;&lt; #IDE &gt;&gt; ' (+&lt;1p&gt;)'								expandMacrosWith: (self completeChangeCountFor: info))].			stream contents]</body></methods><methods><class-id>Store.PackageModel</class-id> <category>printing</category><body package="GHStoreEnhance">displayString	"Answer the string to be displayed for a package in a Package list.	Override to answer a Text with package version string (in red color if modified).	Georg Heeg 1999, RW"	| stream vs mod |	vs := self traceVersionString.	stream := TextStream on: (String new: self name size + vs size + 10).	stream		nextPutAll: self name;		space.	(mod := self hasBeenModified)		ifTrue: [stream emphasis: (Array with: #bold with: #color -&gt; ColorValue red)].	stream nextPutAll: vs.	mod ifTrue: [stream nextPut: $*].	self hasCodeOverridden ifTrue: [stream nextPutAll: ' -'].	self hasExtensions ifTrue: [stream nextPut: $+].	^stream contents</body></methods><methods><class-id>Store.BundleModel</class-id> <category>printing</category><body package="GHStoreEnhance">completeChangeCountFor: info	"Add all changes for all contained pundles."	^(super completeChangeCountFor: info)		+ (self contentDescriptions inject: 0				into: [:subTotal :next | subTotal + (next component completeChangeCount)])</body><body package="GHStoreEnhance">displayString	"Answer the string to be displayed for a bundle in a Bundle list.	Override to answer a Text with bundle version string (in red color if modified).	Georg Heeg 1999, RW"	| stream tvs mod |	tvs := self traceVersionString.	stream := TextStream on: (String new: self name size + tvs size + 10).	stream		emphasis: #bold;		nextPutAll: self name;		space.	(mod := self hasBeenModified)		ifTrue: [stream emphasis: (Array with: #bold with: #color -&gt; ColorValue red)]		ifFalse: [stream emphasis: nil].	stream nextPutAll: tvs.	mod ifTrue: [stream nextPut: $*].	self hasExtensions ifTrue: [stream nextPut: $+].	^stream contents</body></methods><methods><class-id>Heeg.LoadedPundleTool class</class-id> <category>resources</category><body package="GHStoreEnhance">filterMenu	"MenuEditor new openOnClass: self andSelector: #filterMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'show all' 				#value: #showAll ) 			#(#{UI.MenuItem} 				#rawLabel: 'show modified' 				#value: #showModified ) 			#(#{UI.MenuItem} 				#rawLabel: 'Packages only' 				#value: #onlyPackages ) 			#(#{UI.MenuItem} 				#rawLabel: 'modified Packages' 				#value: #modifiedPack ) 			#(#{UI.MenuItem} 				#rawLabel: 'once published Packages' 				#value: #oncePublishedPack ) 			#(#{UI.MenuItem} 				#rawLabel: 'never published Packages' 				#value: #neverPublishedPack ) 			#(#{UI.MenuItem} 				#rawLabel: 'Bundles only' 				#value: #onlyBundles ) 			#(#{UI.MenuItem} 				#rawLabel: 'modified Bundles' 				#value: #modifiedBundles ) 			#(#{UI.MenuItem} 				#rawLabel: 'once published Bundles' 				#value: #oncePublishedBund ) 			#(#{UI.MenuItem} 				#rawLabel: 'never published Bundles' 				#value: #neverPublishedBund ) ) #(2 4 4 ) nil ) decodeAsLiteralArray</body><body package="GHStoreEnhance">packagesMenu	"Tools.MenuEditor new openOnClass: self andSelector: #packagesMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 'Publish ...' 				#enabled: false 				#value: #publishSelection 				#enablementSelector: #selectionHasChanges ) 			#(#{UI.MenuItem} 				#rawLabel: 'Changed Methods...' 				#enabled: false 				#value: #browseChangedMethods 				#enablementSelector: #selectionHasChanges ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Refresh 					#defaultString: 'Refresh' 					#catalogID: #store ) 				#nameKey: #UpdatePundleItems 				#value: #refreshList ) ) #(3 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Heeg.LoadedPundleTool class</class-id> <category>interface specs</category><body package="GHStoreEnhance">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 			#label: 'GHLoadedPundleTool' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 585 350 1335 850 ) 			#flags: 4 			#menu: #mainMenu ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.4 25 0 -1 1 -1 0.37 ) 					#name: #ListOfThings 					#flags: 0 					#minorKey: #listSpec 					#clientKey: #listOfThings ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.4 26 0.37 -1 1 0 1 ) 					#name: #DefinitionText 					#model: #definition 					#menu: #textMenu 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0.4 -1 0.37 -1 1 1 0.37 ) 					#name: #ResizingSplitter1 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'ListOfThings' 					#belowWidgets: 'commentLabel DefinitionText' ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 1 0.4 2 0 ) 					#name: #versionsLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #VersionsC 						#defaultString: 'Versions:' 						#catalogID: #labels ) ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 1 0.4 3 0.37 ) 					#name: #commentLabel 					#label: 					#(#{Kernel.UserMessage} 						#key: #CommentC 						#defaultString: 'Comment:' 						#catalogID: #labels ) ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 25 0 -1 0.4 -27 1 ) 					#name: #selectionTool 					#clientKey: #searchModule ) 				#(#{UI.LabelSpec} 					#layout: #(#{Core.Point} 1 2 ) 					#name: #Label2 					#label: 					#(#{Kernel.UserMessage} 						#key: #BundlesAndPackagesC 						#defaultString: 'Bundles and Packages:' 						#catalogID: #labels ) ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -1 0.4 25 0 1 0.4 -1 1 ) 					#name: #ResizingSplitter2 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'selectionTool' 					#belowWidgets: 'versionsLabel ListOfThings commentLabel ResizingSplitter1 DefinitionText' ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 -25 1 -1 0.4 -1 1 ) 					#name: #filterMenu 					#model: #filter 					#menu: #filterMenu ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>store menus</category><body package="GHStoreEnhance">openLoadedItems	DbRegistry		doIfOnlineImage: [Heeg.LoadedPundleTool openOnAllLoadedPundlesUnfiltered]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>PundleModel</name><environment>Store</environment><super>Kernel.CodeComponent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dbInfo readonly </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>PackageCategories</category><attributes><package>PackageCategories</package></attributes></class><class><name>PackageModel</name><environment>Store</environment><super>Store.PundleModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>models </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>PackageCategories</category><attributes><package>PackageCategories</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>BundleModel</name><environment>Store</environment><super>Store.PundleModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>PackageCategories</category><attributes><package>PackageCategories</package></attributes></class><class><name>PublishedPundleVersionsTool</name><environment>Store.Glorp</environment><super>Store.Glorp.DefinitionForListTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>listBlock searchModule cachedPundles titleBlock pundleFilter </inst-vars><class-inst-vars></class-inst-vars><imports>			private Store.*			</imports><category></category><attributes><package>Store-UI</package></attributes></class></st-source>