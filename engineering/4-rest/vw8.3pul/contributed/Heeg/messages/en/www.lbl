encoding: #UTF_8catalog: www_AddDot = '&Add...'AddDot = 'Add..'AddDuplicateSiteError = 'Adding duplicate site "<1s>".<n>Please remove existing site first.'AddHTTP = 'Add HTTP...'AddHTTPS = 'Add HTTPS...'AddPreconfiguredResponder = 'Add preconfigured Responder'AddPreconfiguredServerDot = 'Add preconfigured Server...'AddResponder = 'Add Responder'AddResponder1s2s = 'Add ''<1s>'' to <2s> server'AddressDot = 'Address:'Addresses = 'Addresses'AddToServer = 'Add to the Server'AddToTheServer = 'Add to the Server          'AppeXRootDirectory = 'Root Directory'AppeXRootDirectoryHelp = 'The web development root directory'AppeXScriptDirectory = 'Script Directory'AppeXScriptDirectoryHelp = 'The directory includes Javascript files.'ApplicationName = 'Application name:'ApplicationSettings = 'Application Settings'Apply = 'Apply'AutoRestartHelpText = 'This setting controls how the server reacts to image startup, whether it should automatically start or not'AutoRestartWWW = 'Auto Restart'BaseURLPath = 'Base URL:'BasicConfigurationHelpText = 'Reuse Address - the setting controls the SO_REUSEADDR option on the listening socket of the server. It is only needed when you expect to restart your server frequently. The option has to be set when the server starts in order to have any effect. If the option is not set, you may have to wait up to 8 minutes after stopping the server until the OS allows you to start the server again on the same port. If that is not an issue though, it is better to turn this option off.Address - this is the IP address of the interface to which the server should be bound. If unspecified the server will be bound to all available interfaces. Binding the server to localhost/127.0.0.1 will make it accessible only from the same host. Changing the address while the server is running will shut down the server and restart it on the new address.Port - this setting controls the server port number. Changing the port while the server is running will shut down the server and restart it on the new port number.HTTPS listeners require additional configuration:Certificate - this setting must provide a file name containing a "server certificate chain" that the listener can use to authenticate the server to connecting clients. Two certificate formats are supported:A textual PEM format containing a single chain of certificates sorted with the subject certificates after their issuer certificates (starting with a self-signed well-known CA certificate, and ending with the actual server certificate). The textual format is indicated with .PEM or .CRT file extension. We recommend using this certificate format. Most CAs provide two separate files - one containing the certificate chain up to the root CA, and one with the subject certificate itself. The complete certificate chain for the "Certificate" setting can be obtained by concatenating the certificate chain and the subject certificate into a single file.Alternatively the file can contain a binary dump of a single certificate in its standard DER encoding. This format does not support multiple certificates, so it is only suitable for the cases where the server certificate was issued directly by a well known CA. Typical file extensions used for the binary format are .DER or .CER, but any filename other than one with the .PEM or .CRT extension will be assumed to be binary. The certificate(s) will be extracted from the file immediately when this setting is applied.Private Key - this setting must provide a file name pointing to a PEM-formatted file containing a private key corresponding to the certificate from the Certificate setting above. Before submitting a Certificate Signing Request (CSR) to a Certification Authority (CA), the server owner must generate a private key, usually by an openssl command similar to this:openssl genrsa -out server.key 1024The server.key file would then be provided to the "Private Key" setting. At this time, we do not support encrypted private key files, therefore server.key must be unencrypted.'BrowseResponderPath = 'Browse ''<1s>'''C_hangeDot = 'C&hange...'Cancel = 'Cancel'CanntInitializeLoggerStream = 'Can''t initialize the logger stream'CanntProcessChunkedBody = 'Cannot process chunked body with a trailer!'CanntSetContentsMultipartResp = 'Cannot set simple content on a multipart response!'CantRedirectMissingUrl = 'Cannot redirect, no url provided.'CanUpgrade11Requests = 'Can upgrade only requests with HTTP/1.1 version'CanUpgradeRequestsWithGET = 'Can upgrade only requests with GET methods'Certificate = 'Certificate:'ChangeDot = 'Change...'ChunkedRequestExceededSizeLimit = 'Chunked request exceeded the body size limit: <1p> bytes'ChunkResponsesLarger = 'Chunk responses larger than (size in bytes)'Class = 'Class'ClassDefinition = 'Class Definition'ClassIsNotRequestFilter = 'The filter class is not inherited from RequestFilter'ClientName = 'Client name:'ClientResponderUIHelp = 'Provide Settings for Responder and Client classes.Client Name - The name to create ApplicationClient sublclass.Responder name - The name to create an Application subclass.Base URL - The path is used as a base URL to all requestsServer id - The name of the existing SiouX.Server or a new onePort - The port to start the server'CommonLogDir = 'Common Log Directory'CommonLogDirHelp = 'CommonLog default directory.'CommonLogFilename = 'Common Log File Prefix'CommonLogFilenameHelp = 'CommonLog default file prefix. The full file name is composed from the root directory, file prefix and server id'CommonLogHelp = 'This logger implements the ''Common Log Format'', also known as the ''NCSA Common log format'', which is a popular text file log format used by a number of web servers. The common log file format logs one line for each completed request, where the line has following structure:	    remotehost ident authuser [date] "request" status bytes'ConfigDirectory = 'Config Directory'ConfigDirectoryHelp = 'The directory is used to write server xml configuration files'ConfigurationFile = 'Configuration File Name'ConfigureWebServers = 'Configure Web Servers'Connection1sFailedClosing = '<1p> connection failed closing!'ConnectionPriority = 'Connection Priority'connectionPriorityHelp = 'There is a connection process created for each established connection. The connection process reads incoming requests from the connection socket, builds a Http Request from it (further parsing form some header fields and such). Finally it spawns a worker process that will "execute" the incoming Http Request.Tuning this priority (relative to worker process and listener process priorities) allows to put emphasis on different aspects of the request processing. If it is more important to accept new connections than serve the existing ones, then the listener priority should be higher. If you want requests being processed faster than new ones being received, then worker priority needs to go up, etc. Note however that it is very easy to starve other activities if you give too much priority to something that takes a lot of effort. You need to tune the priorities to the particular needs of your specific application, the load patterns that you expect, the amount of effort it takes to complete each request, etc. It may take several attempts to get it right.When this setting is changed, the new value applies only to new connections established after that point.'ConnectionTimeout = 'Connection Timeout (ms)'connectionTimeoutHelp = 'How long should we wait before terminating an idle connection. The value is in milliseconds.'ContentHandlingHelpText = 'Save attachments as files - This setting specifies whether to save incoming attachments directly into external files. Saving into files allows to process large attachments more efficiently. If not saved into files, file attachments will be reconstructed entirely in memory.Save attachments in - This setting specifies the directory that will be used to save file attachments from incoming requests.Use chunked format for large responses (HTTP) - This setting specifies whether to use chunked format for large messages (HTTP transports only).Chunk Size (HTTP) - This setting specifies the default chunk size (HTTP transports only).'Create1sServer = 'Create <1s> server'CreateClassesIn = 'Create classess in'Created = 'created'CreateDot = '&Create...'CreateNewDescriptor = 'Create descriptor system:'CreateNewServerDot = 'Create a new Server...'CreateResponder = 'Create Responder'CreateServer = 'Create Server'CreateServerResponder = 'Create Server Responder'CreatingWebApplication = 'Creating Web Application'Debugging = 'Debugging'Delete = 'Delete'DELETE = 'DELETE'Description = 'Description'DescriptorSystemUI = 'Application Settings'DescriptorSystemUIHelp = 'The page provides options to create a Web Application from existing database tables. The tool requires to have a Glorp  descriptor system which is the domain model of your application. For more information see GlorpGuide.pdf  chapter: Creating a Descriptor System. Application Name - The name that is used for web application HTML title. Also by default this string is used to create the application client and responder class names.Create descriptor system - If there is no a descriptor system use this option to create a subclass of ActiveRecordDescriptorSystem. The behavior of the descriptor system will model the classes in the domain model,and specify the database tables to which they should be mapped.Use exising descriptor system - Use this option is there is already a subclass of ActiveRecordDescriptorSystem. Select the class from the list.Package - The package in which the descripttor system, domain classes, client and responder classes are placed. If the package name does not exist in the system, it will be created. Namespace - The name space in which new classes that are placed. 'Destroy1sServer = 'Destroy <1s> server'EditResponder = 'Edit Responder'EnterCertificateFileName = 'Enter Certificate file name: 'EnterPrivateKeyFileName = 'Enter Private Key file name: 'errNoLinkNamed = '#linkNamed: not available from HttpServlet. Send to the request or response, or use a SingleThreadModelServlet instead.'errNoWebsiteForRequest = 'No WebSite available to serve request.'ErrorLogDir = 'Error Log Directory'ErrorLogDirHelp = 'ErrorLog default directory.'ErrorLogFilename = 'Error Log File Prefix'ErrorLogFilenameHelp = 'ErrorLog default file prefix. The full file name is composed from the root directory, file prefix and server id'ErrorLogHelp = 'ErrorLog logs server errors. The error log includes error description and the error stack.'ExceededPathDepth = 'Exceeded supported file path depth!'ExpirationTime = 'Expiration Time (seconds)'FileAlreadyExists = 'The file already exists: <1s>'FileDirectory = 'File Directory'Filename = 'File name'FilesDirectoryHelp = 'The directory is used to upload files by FileResponder'FindResponderClass = 'Find responder class'Fortification = 'Fortification'Frequency = 'Frequency'GenerateTemporaryTestingCertificate = 'HTTPS listener requires a certificate and key.<n>Would you like to generate a temporary testing certificate?'GET = 'GET'GlorpSessionNotInitialized = 'Glorp Session is not initialized'Help = 'Help'Help_ = '&Help'htmlBuiltWithCincomSmalltalk = 'Built with Cincom Smalltalk.'htmlConfigSiteDescription = 'A tiny site for configuring other sites.'htmlDefaultSiteDescription = 'Use this to get started.%<br%>Configure this site and set the directory where you have your script files.'HtmlForbiddenAccessError = 'Access to the requested page "<1p>" was forbidden.'htmlGenericSiteDescription = 'A site named <1s>.'HttpSessionData = 'Session Data'HttpSessionID = 'Session ID = <1s>'HTTPSListenersMustBeConfiguredWithTLS = 'Https listener must be configured with valid server TLSContext!'in = 'in'Inspect_ = '&Inspect'InspectSelectedServer = 'Inspect selected Server'InspectServer = 'Inspect Server'InvalidChunkSizeEncoding = 'Invalid chunk size encoding!'LastAccessed = 'last accessed'Listener = 'Listener'Listener1sFailedToStop = 'Listener at [<1s>] failed to stop!'ListenerBacklog = 'Listener Backlog'listenerBacklogHelp = 'The size of the TCP listening backlog. What should the listener backlog be? This determines (depending on how the operating system treats it) the maximum number of incoming socket connections waiting for an accept'ListenerPriority = 'Listener Priority'listenerPriorityHelp = 'The server runs a single listener process. The listener process waits for incoming connection requests, and accepts them establishing a new connection. It then creates a new Transport object with a dedicated server process which will manage the newly established connection. Tuning this priority (relative to server process and worker process priorities) allows to put emphasis on different aspects of request processing.'Listeners = 'Listeners'Listeners1sFailedStop = '<1p> listeners failed to stop!'ListenerSettings = 'Listener Settings'Lo_gs = 'Lo&gs'LoadDot = '&Load...'LoadServerSettings = 'Load Server Settings'LogDialogHelp = 'Add to the Server - will create a log, adds it to the selected server and starts it.Remove from the Server - will stop the log and removes it from the selected server logsStart - starts the logStop - Stops the logFile name - allows to change the default directory and log file name 'LogDirectory = 'Log Directory'LogDirectoryHelp = 'The directory is used to write log files'Logging = 'Logging'Logs = 'Logs'LowerConnectionLimit = 'Lower Connection Limit'lowerConnectionLimitHelp = 'This setting specifies the lower threshold on the number of concurrent connections. When the number reaches this value, the server starts considering itself to be getting overloaded. Above this value it will start slowing down the rate at which new connections are accepted by delaying the listener after each accept, ultimately reaching the maximum delay listed in the settings. If the server reaches the maximum number of connections, it will shut off the listener entirely and not resume it until the number of connections drops below this setting. For example if the maximum limit was 100 and we set this to 90, then when we reach 100 simultaneous connections, all new connections would be held until we had closed 10 of the active connections, reaching the lower connection limit of 90.'mainPath = 'Main path:'maximumAcceptanceDelayHelp = 'As the load on the server (the number of concurrent connections) increases above the lower connection limit we start delaying acceptance of new connections. This delay increases linearly as we approach the maximum number of connections. Note that the resolution of the timers available on the server operating system may affect the actual delays. The value is in milliseconds.'MaximumDelayMS = 'Maximum Delay (ms)'minutes = 'minutes'MissingContentDispOnMultipart = 'Missing content-disposition on multipart/form-data part!'MissingInputArg = 'The request is missing #input arguments in query parameters'msgReloadEnd = 'Finished reloading parcels from command line.'msgReloadStart = 'Preparing to reload parcels from command line.'MultipleContentLength = 'Request includes multiple Content-Length fields with different field values'NotExistingRequestFilterClass = 'Not existing Request Filter class'OpenBrowser = '&Open Browser'OpenBrowser_ = '&Open Browser'OpenClassBrowser = 'Open &Class Browser'OpenHelp = 'Open Help'OpenSettings = 'Open Settings'OpenWebBrowserForSelResponder = 'Open Web Browser for selected Responder'Path = 'Path'PathMustNotBeEmpty = 'Path must not be empty!'PathMustNotContainDots = 'Path must not contain .. !'PathMustNotContainEmptyComp = 'Path must not contain empty components!'PathNotStringImplementXMLNode = 'If path is not a string you should implement #asXmlNode for the responder'PeriodOfTimeToExpireSession = 'Period of time after which sessions should expire if not active'Port = 'Port:'POST = 'POST'POSTRequestRequiresIDInput = 'The POST service requires #id value in  #input aguments'PrivateKey = 'Private Key:'PUT = 'PUT'PUTDoesNotAcceptInputId = 'The PUT service does not accept #input arguments with any specified #id. Use POST service instead'ReadSettingsFromFile = 'Read server settings from file named:'Remove = 'Remove'RemoveAllLogs = 'Remove all Logs'RemoveFromTheServer = 'Remove from the Server'RemoveResponder = 'Remove Responder'RemoveResponder1s2s = 'Remove ''<1s>'' from <2s> server'RemoveServer = 'Remove Server'RequestBodyLimit = 'Request Body Size Limit'RequestBodySizeLimit = 'Request Body Size Limit'RequestBodySizeLimitHelp = 'This is the maximum number of bytes that the request body can have. If it is not defined or 0 there is no size limitation. 'RequestContentLengthExceededSizeLimit = 'The request Content Length exceeded the body size limit: <1p> bytes'RequestExecutionFailed = 'Responder error 'RequestFilters = 'Request Filters'RequestFiltersDots = 'Request Filters...'RequestHeaderExceededSizeLimit = 'The request header size exceeded the limit: <1p> bytes'RequestHeaderLimit = 'Request Header Size Limit'RequestHeaderLimitHelp = 'This is the maximum number of bytes that the request header can have.'RequestInputRequireID = 'The request #input aguments require #id value to find an active record'RequestStatusLineLimit = 'Request Status Line Limit'RequestStatusLineLimitHelp = 'This is the maximum number of bytes that the request status line can have.'RequestStatusLineTooLarge = 'Request Status Line too large'ResponderClientClassesSettings = 'Responder and Client Classes Settings'ResponderError = 'Responder error 'ResponderName = 'Responder name:'ResponderOptions = '&Responder Options'ResponderOptions_ = '&Responder Options'Responders = 'Responders'Responders_ = '&Responders'ResponderServices = 'Responder Services'ResponderServicesHelp = 'The page maps class models to database tables and defines application services. Main path - This path with base URL defines the URL to open a first application page. For example the URL: /genealogy/personage opens the first page with the path corresponding a class model with #personage pathActive Record Class table - The table allows selecting Active Record classes and change a class path. The tool will generate Application responder services for selected classes.Create Classes - The button creates client and responder classes. 'ReuseAddress = 'Reuse Address'Running = 'Running'SaveAllDot = 'Sa&ve All...'SaveAllServersSettings = 'Save All Servers Settings'SaveAttachmentsAsFiles = 'Save attachments as files (specify directory)'SaveDot = '&Save...'SaveSelectedServerSettings = 'Save Selected Server Settings'SaveServersSettings = 'Save Servers Settings'SchemaDescriptorDoesnotIncludeClass = 'The schema descriptor does not include the class model description: <1s>'seconds = 'seconds'Select = 'Active Record Class'SelectClassesCreateMethods = 'Select classes to create responder service methods'Ser_vers = 'Ser&vers'Server = 'Server'ServerConfigAttempt = 'Attempting to configure web application server from: <1s>.'ServerConfigurationFileHelp = 'The Server configuration default file name. The name is used to create a configuration file for all servers.'ServerHeader = 'Server Header Value'ServerHeaderHelp = 'The Server header field with the specified value will be added to each response. Set the value to empty if don''t want to add Server header to responses 'ServerId = 'Server id:'ServerId1sAlreadyExists = 'The Server id: <1s> already exists. The old server is released and new one created from the configuration file'ServerIsRunningStopIt = 'The server is currently running. Stop the server to change the order of responders.'ServerListeners = 'Server Listeners'ServerLogs = 'Server Logs'ServerManagerHelpText = 'The server table shows all (registered) servers in the image. It also allows managing the run-time state of servers as well as creation or destruction of servers. The server table columns have the following meaning:Servers - the registered server idAddresses - lists the address:port of each listener of the serverRunning - shows the running state of the server, the check box allows starting or stopping the serverDebugging - shows the debugging mode of the server, the check box allows turning debugging on or offLogging - shows the logging status of the server, the check box allows turning logging on or off. The default logging strategy writes logging records in the "common log format" into a file named after the server id.The server and listener menu options provide access to following actions:Create... - creates a new unconfigured server registering it under a provided idAdd... - creates and registers a server configured from a predefined server pragma declaration; only a single instance of a server can be added for each pragma declaration found in the systemSave... - saves the configuration of a selected server into an XML formatted file. If there isn''t any server selected it saves the configuration of all registered serversLoad... - creates and registers server(s) configured from an XML formatted configuration file. If a server with the same ID is already present in the system, that configuration will be skipped. If an existing server should be reconfigured from a configuration file, it must be deleted first.Following options are only enabled when a server is selected and their actions apply to the selected server:Listeners - create and change options open a configuration window that allows creating and removing server''s listeners and changing listener settingsDelete -  stops the selected server if it is running and releases it from the global registry'ServerNotConfigured = 'The Application Server is not yet configured.'ServerOptions = '&Server Options'ServerOptions_ = '&Server Options'Servers = 'Servers'ServerSettingNoIdIncluded = 'The server settings do not include #id attribute'ServerStatusHelp = 'ServerStatusLog provides information on server activity and performance. It allows a server administrator to find out how well their server is performing. The log uses ServerStatusCollector to monitor a server for a specified time period and collect statistics and then prints the collected data as a table.Frequency - entry field allows to set the number of munites to collect the server data'ServletNotFound = 'Servlet <1s> not found.'Session = 'Session'SessionAlreadyExpired = 'Session Already Expired'SessionDescription = 'Session Description'Set_Listeners = 'Set &Listeners'SetListeners = 'Set Listeners'SetServerListeners = 'Set Server Listeners'SetServerLogs = 'Set Server Logs'Settings = 'Settings'Shutdown = 'Shutdown'ShutdownDialogHelp = 'The dialog allows specifying graceful and hard shutdown. If you set the shutdown duration to 0 seconds it will initiate immediate stop.Graceful shutdown may provide time to broadcast  the server shutdown notification to the server clients 'ShutdownServer = 'Shutdown Server'ShutdownTheServer = 'Shutdown the server'SiouXListenersHelpText = 'This table shows the list of all listeners (open ports) of the server. A listener can support either plain (HTTP) or secure (HTTPS) connections. The Running checkbox indicates the state of each listener. The checkbox can be used to start/stop individual listeners. Listeners have a rather complex configuration managed via separate dialog that is open either when a listener is first created or on a selected listener via the Change... button.'SiouXRespondersHelpText = 'The responder table shows all responders registered with the selected server. The columns of the table have the following meaning:Path - the path under which the responder is registered, it controls which requests will be handled by the responderClass - shows the implementation class of the responderDescription - provides customized description of the responder, responders control what it showsThe responder collection can be controlled with the responder menu options. They allow following actions:Create... - Creates and registers new responder from a selected class and provided path. Only subclasses of Responder are offered for selection.Add... - Creates and registers a new responder configured from a pre-defined responder definition pragma. Only definitions with server id matching that of the selected server will be offered. Also only a single instance of a responder can be added for each pragma declaration, since the path is a required part of the declaration.Change... - This button is enabled if the selected responder exposes any configurable parameters. Currently this only applies to subclasses of NetHttpResponder, allowing configuration of message reading and writing options.Delete - Releases the selected responder from the server.There are up and down arrow buttons to changes the order of responders. The arrows are enabled only when the server is not running'SiouXRootDirectory = 'Root Directory'SiouXRootDirectoryHelp = 'The directory is the root for all web development files'SiouXServerSecure = 'SiouX-Server-Secure parcel is not loaded'Start = 'Start'Start1sServer = 'Start <1s> server'StatusLogDir = 'Status Log Directory'StatusLogDirHelp = 'StatusLog default directory.'StatusLogFilename = 'Status Log File Prefix'StatusLogFilenameHelp = 'StatusLog default file prefix. The full file name is composed from the root directory, file prefix and server id'Stop = 'Stop 'Stop1sServer = 'Stop <1s> server'tagDefault = '~default~'tagNoname = '~no-name~'tagNone = '~none~'tagSiteConfigurationError = '~~ SITE CONFIGURATION ERROR ~~'tagUnknown = '~unknown~'TestApplication = 'Test Application'TestApplicationHelp = 'The page allows testing the application. Test Application - The button starts a server and opens a default Web Browser on a new responder'ThereIsAlreadyListener = 'There is already a listener with this address. You may want to remove it first'ThereIsNoDirectory = 'There is no such directory: <1s>'ThereIsNoFile = 'There is no such file: <1s>'ToAddHTTPSLoadServerSecure = 'To add a listener for HTTPS connection you need to load SiouX-Server-Secure parcel'UndefinedBindingReference = 'Undefined BindingReference: <1s> in services: <2s>'UndefinedClassRef = 'Undefined class reference: <1s> 'UndefinedReqFilterClassRef = 'Undefined request filter class reference:<1s> 'UndefinedServerClassRef = 'Undefined Server class reference: <1s>'UndefinedStatusCollectorRef = 'Undefined StatusCollector class reference: <1s>'UnsupportedMediaType = 'Unsupported Media Type!'UnsupportedTransferEncodings = 'Unsupported transfer encodings'UpgradeKeywordMustBeSupplied = 'The upgrade keyword MUST be supplied within a Connection header field 'UpperConnectionLimit = 'Upper Connection Limit'upperConnectionLimitHelp = 'This is the maximum number of connections we will allow simultaneously. Note that some operating systems may limit us to a maximum of 1024, regardless of this setting. The more work your processes are likely to do for each incoming request, the lower you''re likely to want this setting'UseExistingDescriptor = 'Use existing descriptor system:'WebDevelopment = 'Web Development'WebServer = 'Web Server'WebServers = 'Web Servers'WriteServerSettingsToFileNamedC = 'Write server settings to file named:'WrongSignHashData = 'Can not create <1s> instance. Wrong hash <2s> or signature <3s>'