encoding: #UTF_8catalog: advancedadd31Plus4120Times = 'add 3.1 plus 4.1, 20 times'add3410Times = 'add 3 + 4, 10 times'AddAll = 'Add all'All = '    *** All ***'AllInstancesHistogram = 'All instances histogram'AllocationProfiler = 'Allocation Profiler'AllocationProfilerTotals = '<1p> samples, <2p> average bytes/sample, <4p> scavenges, <5p> incGCs, <n><6p> stack spills, <7p> mark stack overflows, <8p> weak list overflows, <9p> JIT cache spills<n><3p> bytes'AllocationSummary = '  Allocation summary:'AllProcesses = 'All processes'And1s = ' and <1s>'applyCutoff = 'apply cutoff'arithmeticMean = 'arithmetic mean'asterisks1s = '** <1s> **'Backwardcompatibilityclassceferences = 'Backward compatibility class references'BackwardCompatibilityClassReferences = 'Backward Compatibility Class References'BackwardCompatibilityMessageSends = 'Backward compatibility message sends'BackwardCompatibilitySends = 'Backward Compatibility Sends'BasicText = '"Profilers rely on a statistical sampling heuristic to estimate, rather than on instrumentation to directly measure, the resources consumed by a process.  A profiling run is adequate if it takes enough samples to produce estimates accurate enough to justify decision.  (The number of samples actually taken is the first item reported after a standard profiling run, in the upper left hand corner of the spawned ProfilerOutlineBrowser.)  The required number of samples required increases with the extent of the resources consumed by the profiled process, and with an increase in the degree of discrimination required.  You may increase the number of samples by either raising the number of repetitions or lowering the sampling interval.  If you wish to compare several alternative implementations, use the same number of repetitions and the same sampling interval in the profiling run of each.  You may increase the relative precision of sequentially executed, comparative runs by evaluating ''ObjectMemory globalGarbageCollect'' before each."'Benchmark = 'Benchmark'BenchmarkResults = 'Benchmark results'BenchmarkRunnerHelpText = 'BenchmarkRunner is a specialized type of SystemBenchmark that allows one to run any of the various system profilers (if they are in the system) over the selected benchmarks.'Benchmarks = 'Benchmarks'BenchmarksC = 'Benchmarks:'BenchmarkScratchpad = 'Benchmark Scratchpad'BenchmarkSuiteResults1sIterations = 'Benchmark suite results (<1p> iterations):'BenchmarkTranscript = 'Benchmark Transcript'BenchmarkTranscriptC = 'Benchmark Transcript:'Browse = 'Browse'browseClass = 'Browse Class'bytes = 'bytes'BytesClass = '   Bytes    Class'BytesCountBytesBlocksBytes = 'Bytes  Count    Bytes    Blocks  Bytes'calls = 'calls 'CannotAddInfinitesimalsOfDifferingSign = 'Can''t add Infinitesimals of differing signs'CannotAddInfinitiesOfDifferingSign = 'Can''t add Infinities of differing signs'CannotCoerceMetaNumericToDouble = 'Can''t coerce a MetaNumeric to a Double'CannotCoerceMetaNumericToFloat = 'Can''t coerce a MetaNumeric to a Float'CannotCoerceMetaNumericToInteger = 'Can''t coerce a MetaNumeric to an Integer'CannotCoerceMetaNumericToRational = 'Can''t coerce a MetaNumeric to a Rational'CannotCompareInfinitesimalsOfLikeSign = 'Can''t compare Infinitesimals of like sign'CannotCompareInfinitiesOfLikeSign = 'Can''t compare Infinities of like signs'CannotComputeDifferenceOfInfinitesimalsOfLikeSign = 'Can''t compute the difference of Infinitesimals of like sign'CannotDivideANumberByZero = 'Can''t divide a number by zero'CannotDivideInfinitesimalByInfinitesimal = 'Can''t divide an Infinitesimal by an Infinitesimal'CannotDivideInfinityByInfinity = 'Can''t divide Infinity by Infinity'CannotDoComparisonsOnNaNs = 'Can''t do comparisons on NaN'CannotPerformArithmeticFunctionsOnNaNs = 'Can''t perform arithmetic functions on NaN'CannotSubtractInfinitiesOfLikeSign = 'Can''t subtract Infinities with like signs'CannotTruncateInfinity = 'Can''t truncate infinity'CheckComment = 'Check comment'Checking = 'Checking...'Class = 'Class'classCanNotBeAnalyzed = 'class can not be analyzed'ClassComment = 'Class comment'ClassCostsEstimatedBytes = 'Class costs (estimated bytes)'ClassDefinition = 'Class definition'ClassDependencies = 'Class dependencies'ClassHasNoVariablesButHasACommentDescribingThem = '<1p> has no <2s> variables, but it has a comment describing them.'ClassHasVariableButNoCommentDescribingIt = '<1p> has <2p> <3s> variable, but no comment describing it.'ClassHasVariableButNoCommentDescribingThem = '<1p> has <2p> <3s> variables, but no comment describing them.'ClassList = 'Class list'ClassPatterns = 'Class patterns'ClassReports = 'Class Reports'classSize = 'class size'ClassSize = 'Class size'ClearAll = 'Clear all'clearSelections = 'clear selections'CodeGenerationFailed = 'Code generation failed!'CodeLiteralLiteralFullTotalSelector = 'Code   Literal  Literal  Full    Total        Selector'CommentTemplateString = 'This class has not yet been commented.  The comment should state the purpose of the class, what messages are subclassResponsibility, and the type and purpose of each instance and class variable.<n>The comment should also explain any unobvious aspects of the implementation.<n><n>'compileDummyMethod = 'compile dummy method'ComplexNumbersNotWellOrdered = 'Complex numbers are not well ordered'contractFully = 'contract fully'Correctness = 'Correctness'create3410Times = 'create 3@4, 10 times'createAnInspectorView = 'create an inspector view'CutoffPercentage = 'Cutoff Percentage'DemonstrationText = '"The three runs below profile alternative approaches to String construction.  Evaluate each test separately and compare the results."	"mere concatenation"	"((( self				samplingInterval: 3;			profile:	[ <1p> timesRepeat:						[ | str |  str := ''''. 256 timesRepeat: [ str := str, ''~'' ] ] ] )))"	"conventionally allocated WriteStream"	"((( self				samplingInterval: 3;			profile:	[ <1p> timesRepeat:						[ | str |  str := WriteStream on: ( String new ).								256 timesRepeat: [ str nextPut: $~ ] ] ] )))"	"WriteStream allocated with a decent estimate of the expected size"	"((( self				samplingInterval: 3;			profile:	[ <1p> timesRepeat:						[ | str |  str := WriteStream on: ( String new: 192 ).								256 timesRepeat: [ str nextPut: $~ ] ] ] )))"'displayText = 'display text'divide3By410Times = 'divide 3 by 4, 10 times'doesNotReferenceTheFollowingInstanceVariable = '<n><1p> does not reference the following instance variable<2s><n><n>'DuplicateMethods = 'Duplicate methods'Duplicates1p = ' duplicates <1p>'EndOfMethodExpected = 'End of method expected'executeAPointX10Times = 'execute aPoint x, 10 times'ExecutionTime = 'Execution Time'expand = 'expand'expandFully = 'expand fully'FileC = 'File:'FindAllImplementorsOf = 'Find all implementors of...'FindInHierarchy = 'Find In Hierarchy...'FindMethod = 'Find method:'findNext = 'find next'formatABunchOfText = 'format a bunch of text'FullBrowser = 'Full Browser'GenKey10 = 'find all calls on #printStringRadix:'GenKey11 = 'find all implementors of #next'GenKey12 = 'send #at: 20 times (to an array)'GenKey13 = 'send #at:put: 20 times (to an array)'GenKey14 = 'convert 1 to floating point, 20 times'GenKey15 = 'send #basicAt: 20 times (to a set)'GenKey16 = 'send #basicAtPut: 20 times (to a set)'GenKey17 = 'send #class 20 times (to a point)'GenKey18 = 'read and write class organization'GenKey20 = 'create 20 uninitialized associations'GenKey21 = 'decompile class BenchDecompilerTestClass'GenKey22 = 'load an instance variable, 20 times'GenKey23 = 'load immediate literal, 20 times'GenKey24 = 'load literal indirect, 20 times'GenKey25 = 'load 1, 40 times; send ==, 20 times'GenKey26 = '3 perform: #+ with: 4, 20 times'GenKey27 = 'store into an instance variable, 20 times'GenKey28 = 'send #size 20 times (to a string)'GenKey29 = 'execute ReadStream next, 20 times'GenKey30 = 'execute ReadWriteStream nextPut:, 20 times'GenKey31 = 'send #at: 20 times (to a string)'GenKey32 = 'send #at:put: 20 times (to a string)'GenKey33 = 'replace characters in a string'GenKey34 = 'text replacement and redisplay'GenKey36 = 'evaluate the block: (3+4), 20 times'GenKey37 = 'simple whileLoop, 10000 times through'GenKey9 = 'activate and return, 32K times'harmonicMean = 'harmonic mean'hasTheFollowingCommentProblems = '<n><1p> has the following comment problem<2s><n><n>'hasTheFollowingCurrentProblems = '<n><1p> has questionable messages sent by the following method<2s><n><n>'hasTheFollowingProblems = '<1s> has the following problems:<n><n>'hasUndeclaredReference = '<n><1p> has undeclared reference<2s><n><n>'implementors = 'implementors'Implementors = 'Implementors'implementsTheFollowingUnsentMessage = '<n><1p> implements the following unsent message<2s><n><n>'IncludeInReport = 'Include in report'IncludeMetaclass = 'Include metaclass'IncludePrivateProtocols = 'Include private protocols'InconsistentMessageSends = 'Inconsistent Message Sends'incorrectNumberOfRowElements = 'incorrect number of row elements'IndefiniteBackwardCompatibilityMessageSends = 'Indefinite backward compatibility<n>message sends'IndefiniteBackwardCompatibilitySends = 'Indefinite Backward Compatibility Sends'IndividualBenchmarkResults1pIterations = 'Individual benchmark results (<1p> iterations):'infinity = 'infinity'instances = 'instances'instanceSize = 'instance size'InstanceSize = 'Instance size'InstancesTotBytesAveBytesClass = 'Instances    TotBytes    AvgBytes    Class'InstVarsNotReferenced = 'Inst vars not referenced'InvalidSizeForCombiningStack = 'Invalid size for combining stack'IterationsC = 'Iterations:'IterationsPerRun = 'Iterations per run:'load0020Times = 'load 0@0, 20 times'load1AsATemp20Times = 'load 1 as a temp, 20 times'loadThisContext20Times = 'load thisContext, 20 times'Manual = 'Manual'ManualWriter = 'Manual Writer'MatchingMethods = 'Matching methods'maximum = 'maximum'Measure = 'Measure'median = 'median'messages = 'messages...'MessageShouldBeDescribedAsSubclassResponsibility = 'The <1s> message <2p> should be described as subclassResponsibility, but is not.'MessageShouldNotBeDescribedAsSubclassResponsibility = 'The <1s> message <2p> is described as subclassResponsibility, but should not be.'MessagesImplementedButNotSent = 'Messages implemented but not sent'MessagesSentButNotImplemented = 'Messages sent but not implemented'MessagesShouldBeDescribedAsSubclassResponsibility = 'The following <1s> messages should be described as subclassResponsibility, but are not: <2p>'MessagesShouldNotBeDescribedAsSubclassResponsibility = 'The following <1s> messages are described as subclassResponsibility, but should not be: <2p>'MethodBodiesIncludingComments = 'Method bodies (including comments)'MethodCommentsOnly = 'Method comments only'MethodConsistency = 'Method consistency'Methods = 'Methods'methodsInMultipleProtocols = 'methods in multiple protocols'methodSize = 'method size'MethodSize = 'Method size'MicrosecondsPerRepetition = '<t><1p> microseconds per repetition<n>'milliseconds = 'milliseconds'minimum = 'minimum'multiply3410Times = 'multiply 3 * 4, 10 times'MultiProcessExecutionTime = 'Multi-Process Execution Time'MultiProcessObjectAllocation = 'Multi-Process Object Allocation'MultiText = '"Profilers rely on a statistical sampling heuristic to estimate, rather than on instrumentation to directly measure, the resources consumed by a process.  In multi-profilers, the samples are distributed over several processes rather than one.  This fact should be kept in view when setting up multi-profiling runs or evaluating the reliability of their reports.  To exercise the <1p>, select and evaluate the following expressions, separately, and in order.  More than one test expression may be executed between the ''start'' and ''stop'' lines.  Alternatively, you may execute the "start" line to begin profiling processes already initiated, or the system in general.  Be sure always to execute a ''stopProfiling'' after a ''startProfiling*''.  Multi-profilers may generate vary large tally trees, with few processes consuming more than a fraction of a percent of the total resource usage, that it may take several minutes to display after you have lowered the cutoff percentage."'MultiTimeProfilerTotals = '<1p> samples, <2p> average ms/sample, <7p> scavenges, <8p> incGCs, <n><9p> stack spills, <10p> mark stack overflows, <11p> weak list overflows, <12p> JIT cache spills<n><4p>s active, <5p>s semaphore waits,<n><3p>s real time, <6p>s profiling overhead'NaN = 'NaN'nl1pRefersToTheFollowingBackwardCompatibilityClasses = '<n><1p> refers to the following backward compatibility Classes:<n><n>'NlTotalBytesIsNl = '<n><n>Total Bytes = <1p><n>'noChildren = '<no children>'NoMatchingMessages = 'No matching messages'noneOf1p = 'none of <1p>'NoProfiler = 'No Profiler'noSamples = 'no samples'nothingToBrowse = 'nothing to browse'nothingToReport = 'nothing to report'ObjectAllocation = 'Object Allocation'OverallSuiteStatistics = 'Overall suite statistics'Overwrite1s = 'Overwrite <1s>?'PleaseCheckAutomaticInsertions = 'Also, please check the automatically inserted descriptions of <1s>'PleaseNoteTheFollowingProblems = 'Please note the following possible problems:<n>'primitives = 'primitives'Print = 'Print'printAClassDefinition = 'print a class definition'printAClassHierarchy = 'print a class hierarchy'priority = 'Priority'priorityTree = 'Priority Tree'ProcessesAtPriority1p = 'Processes at priority <1p>'ProductOfInfinityAndInfinitesimalIsUndefined = 'The product of Infinity and Infinitesimal is undefined'Profile = 'Profile'Profile1s = 'Profile <1s>'ProfilerCoreIsAnAbstractClassUseAConcreteSubclass = 'ProfilerCore is an abstract class.  Use a concrete subclass.'ProfilerIsAnAbstractClassUseAConcreteSubclass = 'Profiler is an abstract class.  Use a concrete subclass.'ProfilerToUseC = 'Profiler to use:'ProfileSomething = 'Profile something'ProtocolNames = 'Protocol names'rates = 'rates'Rates = ' (Rates)'RatingType = 'Rating Type'RawMeasurements = 'Raw measurements'references = 'references -- 'ReferencesToObsoleteClasses = 'References to Obsolete Classes'refersTo = 'refers to 'RepetitionsIn = '<t><1p> repetition(s) in<t><2p> seconds<n>'Report = 'Report'resetToDefault = 'reset to default'resetToNonioMacro = 'reset to non-io macro'run = 'run'Run = 'Run's = 's'SamplingInterval = 'Sampling Interval:'scanCharactersPrimitiveTextDisplay = 'scan characters (primitive text display)'selectAll = 'select all'selectedMessages = 'selected messages'SelectMethod = 'Select method'sendEQ20Times = 'send ==, 20 times'senders = 'senders'Senders = 'Senders'sends = 'sends 'sendsTheFollowingBackwardCompatibilityMessage = '<n><1p> sends the following backward compatibility message<2s><n><n>'sendsTheFollowingPossiblyBackwardCompatibilityMessage = '<n><1p> sends the following (possibly backward compatibility) message<2s><n><n>'sendsTheFollowingUnimplementedMessage = '<n><1p> sends the following unimplemented message<2s><n><n>'SendsTo = ' sends to: 'Settings = 'Settings'sizeBytes = 'size (bytes)'Smalltalktiming = 'Smalltalk.timing'SomeMessagesNotUnderstoodByCommentedClass = 'Some messages are not understood by the commented class of the receiving variable:'Space = 'Space'spaceUsage = 'Space Usage'spawn = 'spawn'Spawn = 'Spawn'spawnText = 'spawn text'StackSizeErrorCompilerBug = 'Stack size error, compiler bug!'storeIntoATemp20Times = 'store into a temp, 20 times'SubclassResponsibilitiesNotImplemented = 'Subclass responsibilities not implemented'SubclassResponsibilitiesWithoutImplementations = '<n><1p>  has the following subclassResponsibility<n>messages without subclass implementations:<n><n>'SuperfluousMethods = 'Superfluous methods'syntaxError = 'syntax error'SystemBenchmarks = 'System Benchmarks'Tab1sInPossiblyAbstractTabs = '<t><1s> in possibly abstract<n><t><t>'Tab1sInTabs = '<t><1s> in<n><t><t>'Tabx1sRefersTo = '<t><1s> refers to:<n>'test3less410Times = 'test 3 < 4, 10 times'The1sMethod2s = 'The <1s> method <2s>'TheDescriptionOf1s2sIsNotAClassName = 'In the description of <1s>, <2s> is not a class name.'TheDescriptionOf1sHasASyntaxError = 'The description of <1s> has a syntax error.'TheMethodSendsTheMessageButNeitherUnderstands = 'The <1s> method <2s> sends the message <3s> to self, but neither <4p> nor any superclass understands this message.'ThereAreDescriptionsOfNonExistent1sVariables2p = 'There are descriptions of non-existent <1s> variables <2p>.'ThereAreNoDescriptions1sVariables2p = 'There are no descriptions of the <1s> variables <2p>.'ThereIsADescriptionOfANonExistent1sVariable2p = 'There is a description of a non-existent <1s> variable <2p>.'ThereIsNoDescriptionOf1sVariable2p = 'There is no description of the <1s> variable <2p>.'TheValueOfTheThingIsThatWhichDoesNotMatch = 'The value of the <1s> variable <2s> is <3s>, which does not match the declared type(s) 'ThisMethodWillBeAcceptedIntoClass1p = 'This method will be accepted into class <1p>. Are you sure this is what you want?'TimeProfiler = 'Time Profiler'TimeProfilerTotals = '<1p> samples, <2p> average ms/sample, <7p> scavenges, <8p> incGCs, <n><9p> stack spills, <10p> mark stack overflows, <11p> weak list overflows, <12p> JIT cache spills<n><4p>s active, <5p>s other processes,<n><3p>s real time, <6p>s profiling overhead'Times = 'Times'tiny = 'tiny'totals = 'Totals'Totals = '** Totals **'tree = 'Tree'Tree = '** Tree **'Undeclaredreferences = 'Undeclared references'UndeclaredReferences = 'Undeclared References'UNDERDEVELOPMENT = 'UNDER DEVELOPMENT'UnimplementedCalls = 'Unimplemented calls'UnimplementedSends = 'Unimplemented Sends'UnimplementedSubclassResponsibilities = 'Unimplemented Subclass Responsibilities'Unknown = 'Unknown'UnlabeledCanvas = 'Unlabeled Canvas'UnsentImplementations = 'Unsent Implementations'UnsentMessages = 'Unsent Messages'Update = 'Update'WhichOnesDoYouWant = 'Which ones do you want?'WriteReportTo = 'Write report to'x1pByteObjectsAverageSize2pBytes = '<1p> byte objects, average size <2p> bytes.'x1pDoesNot = '<1p> does not'x1pHasNotBeenCommentedYet = '<1p> has not been commented yet.'x1pPointerObjectsAverageSize2pBytes = '<1p> pointer objects, average size <2p> bytes.'x1pTotalObjectsAverageSize2pBytes = '<1p> total objects, average size <2p> bytes.'x1pTotalVariableElements = ', <1p>  total variable elements'x1s = ' (<1s>)'x1sExpected = '%<- <1s> expected 'x1sIsMarkedAsUNDERDEVELOPMENT = '<1s> is marked as UNDER DEVELOPMENT'x1sProfile = '<1s> profile'x1sSends = '<1s> sends: 'x1sSendsTheMessage2sTo3sBut4sUnderstands = '<1s> sends the message <2s> to <3s>, but <4s> understand this message.'x3psInstances = '<1p>(<2p> -- <3p> instances<4s>)'