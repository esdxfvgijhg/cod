<?xml version="1.0"?><st-source><!-- Name: Isam ToolboxTestsNotice: © Copyright 2008-2013 Georg Heeg e.K.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.(MIT License)Comment: Tests of Isam ToolBoxDbIdentifier: magdi.heeg.de.postgresDbTrace: 50118DbUsername: georgDbVersion: 8.0 - 1DevelopmentPrerequisites: #(#(#any 'Isam Toolbox' '') #(#any 'SUnitToo(ls)' ''))DialectVersion: VisualWorks 7.9PackageName: Isam ToolboxTestsParcel: #('Isam ToolboxTests')ParcelDirectory: c:\visworks\vw8.0 sep14.2\image\HeegContributions-vw8.0-2014-09-25-2\Isam ToolboxTestsPrerequisiteDescriptions: #(#(#name 'Isam Toolbox' #componentType #package) #(#name 'SUnitToo(ls)' #componentType #package))PrerequisiteParcels: #(#('Isam Toolbox' '') #('SUnitToo(ls)' ''))PrintStringCache: (8.0 - 1,georg)Version: 8.0 - 1Datum:3:31:06 PM September 25, 2014 --><time-stamp>Von VisualWorks®, 8.0 von 15. September 2014 am 25. September 2014 um 15:31:06</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>IsamTimestampFieldTest</name><environment>Heeg.Isam</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isam timestamp rStream wStream </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>AutocreatedTestclasses</category><attributes><package>Isam ToolboxTests</package></attributes></class><class><name>IsamFieldTest</name><environment>Heeg.Isam</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>AutocreatedTestclasses</category><attributes><package>Isam ToolboxTests</package></attributes></class><class><name>CoreTimestampTestExtIn_IsamToolbox</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>AutocreatedTestclasses</category><attributes><package>Isam ToolboxTests</package></attributes></class><class><name>IsamTwoByteStringFieldTest</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isam string wStream </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>AutocreatedTestclasses</category><attributes><package>Isam ToolboxTests</package></attributes></class><methods><class-id>Heeg.Isam.IsamTimestampFieldTest</class-id> <category>testing</category><body package="Isam ToolboxTests">testCheckColon		self assert: (isam check: timestamp)</body><body package="Isam ToolboxTests">testReadWriteTo	| testValue |	isam write: timestamp to: wStream.	rStream := wStream contents readStream.	testValue := isam readFrom: rStream.	self should: [timestamp = testValue]</body><body package="Isam ToolboxTests">testSizeColon		self should: [(isam byteSizeOf: timestamp) = 8]</body><body package="Isam ToolboxTests">testType		self should: ['Timestamp' = isam type]</body></methods><methods><class-id>Heeg.Isam.IsamTimestampFieldTest</class-id> <category>helper</category><body package="Isam ToolboxTests">setUp		isam := IsamTimestampField new.	timestamp := Timestamp now.	timestamp partialNanosecond: 0.	wStream := (ByteArray new: 8) writeStream.</body></methods><methods><class-id>Heeg.Isam.IsamFieldTest</class-id> <category>testing</category><body package="Isam ToolboxTests">testCanBeSearchedByPattern		self assert: IsamField new canBeSearchedByPattern not</body><body package="Isam ToolboxTests">testCheckColon		self should: [IsamField new check: 'aValue']		raise: SubclassResponsibilityError</body><body package="Isam ToolboxTests">testIntegerSizeColon	| isam |	isam := IsamField new.	self should: [ 2 = (isam integerSizeOf: 0)].	self should: [ 2 = (isam integerSizeOf: 16rff)].	self should: [ 3 = (isam integerSizeOf: 16rffff)].	self should: [ 4 = (isam integerSizeOf: 16rffffff)].	self should: [ 5 = (isam integerSizeOf: 16rffffffff)].</body><body package="Isam ToolboxTests">testReadFromColon	self should: [IsamField new readFrom: 'aValue']		raise: SubclassResponsibilityError</body><body package="Isam ToolboxTests">testReadIntegerFromColon	| stream |	stream := (ByteArray with: 3 with: 255 with: 255 with: 255) readStream.	self should: [ 16rffffff = (IsamField new readIntegerFrom: stream) ].</body><body package="Isam ToolboxTests">testReadStringFromColon		| stream |	stream := ((ByteArray with: 1 with: 2) asByteString , 'ok')		asByteArray readStream.	self should: [(IsamStringField new readFrom: stream) = 'ok']</body><body package="Isam ToolboxTests">testSizeColon	self should: [IsamField new byteSizeOf: 'aValue']		raise: SubclassResponsibilityError</body><body package="Isam ToolboxTests">testStringSizeColon		| isam string |	isam := IsamField new.	string := 'okdokey'.	self should: [9 = (isam byteArraySizeOf: string)]</body><body package="Isam ToolboxTests">testType		self should: [nil = IsamField new type]</body><body package="Isam ToolboxTests">testWriteIntegerTo		| isam stream |	isam := IsamField new.	stream := (ByteArray new) writeStream.	isam writeInteger: 16rFFFFFFFF to: stream.	self should: [stream contents = #[4 255 255 255 255]]</body><body package="Isam ToolboxTests">testWriteStringTo		| isam stream |	isam := IsamStringField new.	stream := (ByteArray new: 4) writeStream.	isam write: 'ok' to: stream.	self should:			[stream contents =					((ByteArray with: 1 with: 2) asByteString , 'ok') asByteArray]</body><body package="Isam ToolboxTests">testWriteTo	self should: [IsamField new write: 'aValue' to: 'aValue']		raise: SubclassResponsibilityError</body></methods><methods><class-id>CoreTimestampTestExtIn_IsamToolbox</class-id> <category>testing</category><body package="Isam ToolboxTests">testAsMicroseconds		| timestamp |	timestamp := (Timestamp new) year: 1901.	self should: [ timestamp asMicroseconds = 0]</body><body package="Isam ToolboxTests">testAsMicrosecondsGMT	| timestamp sFromGMT testValue referenceValue |	timestamp := (Timestamp new)				year: 1901;				day: 1;				month: 7;				hour: 0.	sFromGMT := (TimeZone default secondsFromGMTAtLocal: timestamp).	testValue := timestamp asMicrosecondsGMT / 1000000 +  sFromGMT.	referenceValue := (31 + 28 + 31 + 30 + 31 + 30) * 24 * 60 * 60.	self assert: testValue = referenceValue</body></methods><methods><class-id>IsamTwoByteStringFieldTest</class-id> <category>testing</category><body package="Isam ToolboxTests">testReadWriteStringTo	"enter your testMethod here, and accept it with ctrl-s or the 'accept' menu item"		| result |	isam write: string to: wStream.	result := isam readFrom: wStream contents readStream.	self should: [result = string]</body></methods><methods><class-id>IsamTwoByteStringFieldTest</class-id> <category>helper</category><body package="Isam ToolboxTests">setUp	isam := Heeg.Isam.IsamUTF8StringField new.	wStream := (ByteArray new) writeStream.	string := (String with: (Character value: 16rE565)),				(String with: (Character value: 16r2C67)),				(String with: (Character value: 16r9E8A))</body></methods><methods><class-id>Core.TimeZone</class-id> <category>accessing</category><body package="Isam ToolboxTests">secondsForDST	^secondsForDST</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>TimeZone</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>secondsFromGMT dayStartDST dayEndDST timeStartDST timeEndDST secondsForDST weekDayStartDST </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class></st-source>