<?xml version="1.0"?><st-source><!-- Name: GHWindowsPrinterSettings TestsNotice: © Copyright 2007-2013 Georg Heeg e.K.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.(MIT License)Comment: contains tests for the GHWindowsPrinterSettings packageDbIdentifier: magdi.heeg.de.postgresDbTrace: 42087DbUsername: georgDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'GHWindowsPrinterSettings' '') #(#any 'SUnitToo(ls)' ''))DialectVersion: VisualWorks 7.9PackageName: GHWindowsPrinterSettings TestsParcel: #('GHWindowsPrinterSettings Tests')ParcelDirectory: c:\visworks\vw8.0 sep14.2\image\HeegContributions-vw8.0-2014-09-25-2\GHWindowsPrinterSettings TestsPrerequisiteDescriptions: #(#(#name 'GHWindowsPrinterSettings' #componentType #package) #(#name 'SUnitToo(ls)' #componentType #package))PrerequisiteParcels: #(#('GHWindowsPrinterSettings' '') #('SUnitToo(ls)' ''))PrintStringCache: (7.10 - 1,georg)Version: 7.10 - 1Datum:3:30:59 PM September 25, 2014 --><time-stamp>Von VisualWorks®, 8.0 von 15. September 2014 am 25. September 2014 um 15:30:59</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>PrinterSettingsTests</name><environment>Smalltalk</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>generatedSettings </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GHWindowsPrinterSettings Tests</package></attributes></class><methods><class-id>PrinterSettingsTests</class-id> <category>initialize-release</category><body package="GHWindowsPrinterSettings Tests">checkStringAt: lockedGlobal offset: offset withSize: stringSize matches: reference	| correctedString stringBytes string devNamesSize |	stringBytes := ByteArray new: stringSize.	devNamesSize := Win32PrinterInterface new DEVNAMES sizeof.	lockedGlobal		copyAt: devNamesSize + offset		to: stringBytes		size: stringBytes size		startingAt: 1.	string := stringBytes asStringEncoding: #utf16.	correctedString := (string allButLast: 1).	^self assert: correctedString = reference</body><body package="GHWindowsPrinterSettings Tests">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body><body package="GHWindowsPrinterSettings Tests">setUp	super setUp.	generatedSettings := Win32PrinterSettings randomSettings</body><body package="GHWindowsPrinterSettings Tests">testDevModeWriteRead	"test a thousand times if the random printer information are properly read and written in a DEVMODE structure.	The generated settings are only generated at the end of the loop or before the loop, so that restarting the block doesn't change the current generated setting"	| interface printDlg printDlgPtr extractedPrinterSettings refValue newValue aGeneratedSettings |	interface := Win32PrinterInterface new.	printDlg := interface PRINTDLGW new.	aGeneratedSettings := Win32PrinterSettings randomSettings.	(1 to: 1000) do: 			[:i |			interface initPrintDlg: printDlg withSettingsFrom: aGeneratedSettings.			printDlgPtr := printDlg gcCopyToHeap.			extractedPrinterSettings := Win32PrinterSettings new.			interface extractUserSettingsFromDialog: printDlgPtr				intoSettings: extractedPrinterSettings.			#(#colorMode #hasCustomSize #numberOfCopies #orientation #pageHeight #pageWidth #paperSizeSymbol #selectedPrinter #sorted)				do: 					[:each |					refValue := aGeneratedSettings perform: each.					newValue := extractedPrinterSettings perform: each.					self assert: refValue = newValue].			aGeneratedSettings := Win32PrinterSettings randomSettings]</body><body package="GHWindowsPrinterSettings Tests">testDevNamesWriteRead	| interface devNamesPtr stringSize devNamesSize allBytes name characterSize |	interface := Win32PrinterInterface new.	devNamesPtr := interface				devNamesPtrWithName: generatedSettings selectedPrinter.	stringSize := interface sizeOfCString: generatedSettings selectedPrinter.	devNamesSize := interface DEVNAMES sizeof / interface TCHAR sizeof.	characterSize := stringSize / interface TCHAR sizeof.	interface lockGlobal: devNamesPtr		while: 			[:lockedGlobal |			allBytes := UninterpretedBytes new: interface DEVNAMES sizeof.			lockedGlobal				copyAt: 0				to: allBytes				size: allBytes basicSize				startingAt: 1.			self assert: (allBytes shortAt: 1) = devNamesSize.			self assert: (allBytes shortAt: 3) = (devNamesSize + characterSize).			self assert: (allBytes shortAt: 5) = 0.			self assert: (allBytes shortAt: 7) = 0.			self				checkStringAt: lockedGlobal				offset: 0				withSize: stringSize				matches: generatedSettings selectedPrinter.			self				checkStringAt: lockedGlobal				offset: stringSize				withSize: stringSize				matches: generatedSettings selectedPrinter].	name := interface printerNameFromDevNamesPtr: devNamesPtr.	self assert: name = generatedSettings selectedPrinter</body></methods><methods><class-id>PrinterSettingsTests class</class-id> <category>instance creation</category><body package="GHWindowsPrinterSettings Tests">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>OS.Win32PrinterSettings class</class-id> <category>instance creation</category><body package="GHWindowsPrinterSettings Tests">randomSettings	^(self new)		applyRandomSettings;		yourself</body></methods><methods><class-id>OS.Win32PrinterSettings</class-id> <category>accessing</category><body package="GHWindowsPrinterSettings Tests">applyRandomSettings	self setValueOf: #colorMode toOneOf: #(#monochrome #color).	self setValueOf: #orientation toOneOf: #(#portrait #landscape).	self setValueOf: #numberOfCopies toOneOf: (1 to: 20).	self setValueOf: #hasCustomSize toOneOf: #(true false).	self hasCustomSize		ifTrue: 			[self setValueOf: #pageHeight toOneOf: (100 to: 300).			self setValueOf: #pageWidth toOneOf: (10 to: 99)]		ifFalse: [self setValueOf: #paperSizeSymbol toOneOf: self sortedPaperSizes].	self setValueOf: #sorted toOneOf: #(true false).	self setValueOf: #selectedPrinter toStringWithLengthIn: (50 to: 200)</body><body package="GHWindowsPrinterSettings Tests">randomValueOf: aCollection	| index |	index := (Random standard next * aCollection size) ceiling.	^aCollection at: index</body><body package="GHWindowsPrinterSettings Tests">setValueOf: aspect toOneOf: aCollection	| value |	value := self randomValueOf: aCollection.	self perform: (aspect , ':') asSymbol with: value</body><body package="GHWindowsPrinterSettings Tests">setValueOf: aspect toStringWithLengthIn: collection	| size characters randomString |	size := self randomValueOf: collection.	characters := ((1 to: 255) collect: #asCharacter)				select: [:each | each isAlphaNumeric or: [each isComposed]].	randomString := String				withAll: ((1 to: size) collect: [:each | self randomValueOf: characters]).	self setValueOf: aspect toOneOf: (Array with: randomString)</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>Win32PrinterSettings</name><environment>OS</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>colorMode hasCustomSize numberOfCopies orientation pageHeight pageWidth paperSizeSymbol selectedPrinter sorted </inst-vars><class-inst-vars>default </class-inst-vars><imports></imports><category></category><attributes><package>GHWindowsPrinterSettings</package></attributes></class></st-source>