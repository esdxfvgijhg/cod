<?xml version="1.0"?><st-source><!-- Name: GHSpecialListMenuNotice: © Copyright 2004-2015 Georg Heeg e.K.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.(MIT License)Author: Holger Guhl (holger.guhl@heeg.de)Comment: This parcel implements a general utiliies menu for SequenceController. Holding <shift> while opening the operate menu (yellow button menu, context menu) a local menu will come up instead of the menu defined by the application. This means that EVERY list pane can perform the following clipboard and inspection functions:- Copy Selection : Copy display text of selected list element(s) into Clipboard- Copy List : Copy display text of all list elements into Clipboard- Find... : Find and select a list element matching string requested from the user (requires parcel GHFindDialog)- Inspect Model / Inspect View / Inspect Controller / Inspect Window : Open an Inspector on model/view/controller/window- Remove from list : Remove selected element(s) from list (not from the model)Author: Holger Guhl (mailto: holger@heeg.de)Copyright © 2010 Georg Heeg eK.  All Rights Reserved.Version history:===========================================================1.6 	(2010-JUN-08) Updated Copyright notice===========================================================1.5	(2009-AUG-21) Rename parcel as GHSpecialListMenu===========================================================1.4	(2009-JUL-17) Adapt to package GHFindDialog 1.9, Enhance local menu- SequenceController>>findInList (adapt to new interface of GHFindDialog 1.9, determine best in-list finder class)- SequenceController>>localMenu,  class>>localMenu (reorder inspect items, add window inspect item)===========================================================1.3	(2008-MAR-26)Add menu item "Find..." to find list element matching string requested from the user- SequenceController class>>localMenu (extend menu skeleton)- SequenceController localMenu (add menu item block for finding, reuse Heeg.FindInListDialog to request search parameters)===========================================================1.2	(2007-OCT-31)- Optimized #removeFromList for real List models (remove coherent interval fast, avoid intermediate update)- Added enablement to #localMenu (selection/list to Clipboard and remove from list only if selection/list not empty)- Enhance UI.SequenceController>>selectedIndices to support table interface views which use Point as selection index===========================================================1.1	(2004-MAY-29)First published versionDbIdentifier: magdi.heeg.de.postgresDbTrace: 52745DbUsername: holgerDbVersion: 7.7.1 - 2.4HideSource: falsePackageName: GHSpecialListMenuParcel: #('GHSpecialListMenu')ParcelDirectory: c:\visworks\vw8.1 may15.3\image\Contributions\HeegContributions-vw8.1-2015-06-04\GHSpecialListMenuParcelName: GHSpecialListMenuPrintStringCache: (7.7.1 - 2.4,holger)SaveSource: trueVersion: 7.7.1 - 2.4Date: 9:29:55 AM June 5, 2015 --><time-stamp>From VisualWorks®, Pre-Release 8.1 (may15.3) of 15. Mai 2015 on 5. Juni 2015 at 09:29:55</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SpecialListAccessor</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GHSpecialListMenu</package></attributes></class><comment><class-id>UI.SpecialListAccessor</class-id><body>SpecialListAccessor defines a Menu on a Controller. The Controller is assumed to operate on a SelectionView (i.e. a view that shows a list). The SpecialListAccessor will return a special Menu, if both the Shift and Ctrl keys are pressed when the Menu is requested. This Menu provides means to interact with the list in various ways from inspecting objects to copying text to the clipboard.Usage	SpecialListAccessor menuForController: aController.Instance Variables	controller	&lt;ControllerWithMenu&gt;	the controller that's hijacked.</body></comment><methods><class-id>UI.SpecialListAccessor</class-id> <category>testing</category><body package="GHSpecialListMenu">isSomethingSelected	"Answer true if one or more list elements are selected, false otherwise"	^self selectedIndices isEmpty not</body></methods><methods><class-id>UI.SpecialListAccessor</class-id> <category>accessing</category><body package="GHSpecialListMenu">menu	^InputState default shiftDown		ifTrue: [self localMenu]		ifFalse: [self menuHolder value]</body><body package="GHSpecialListMenu">menuHolder	^controller menuHolder</body><body package="GHSpecialListMenu">model	^controller model</body><body package="GHSpecialListMenu">selectedIndices	"answer the currently selected indices; 	Return: Collection of: Integer (Set if multi-selection, Array otherwise; empty if nothing selected)"	| selectedIndices |	^(selectedIndices := self view selectionChannel value) isInteger		ifTrue: [selectedIndices = 0				ifTrue: [Array new]				ifFalse: [Array with: selectedIndices]]		ifFalse: [(selectedIndices isKindOf: Point)			ifTrue: ["table interface"				Array with: selectedIndices y]			ifFalse: [selectedIndices]]</body><body package="GHSpecialListMenu">selectedIndices: aCollection 	"Set selection(s) via indices given in &lt;aCollection&gt;; works for multi- or single-selection"	| channel newSelection |	newSelection := (channel := self view selectionChannel) value isInteger				ifTrue: [aCollection isEmpty						ifTrue: [0]						ifFalse: [aCollection asArray first]]				ifFalse: [aCollection asSet].	channel value: newSelection</body><body package="GHSpecialListMenu">view	^controller view</body></methods><methods><class-id>UI.SpecialListAccessor</class-id> <category>local menu</category><body package="GHSpecialListMenu">findInList	"Find list elements matching a string requested from the user."	| concreteClass |	concreteClass := self view findDialogClass.	concreteClass commonDialog openForController: controller find: ''</body><body package="GHSpecialListMenu">forController: aController	controller := aController</body><body package="GHSpecialListMenu">inspectSelection	| view |	view := controller view.	view selectionToInspect inspect</body><body package="GHSpecialListMenu">listToClipboard	"Copy display text of all list elements into Clipboard"	self listToClipboard: (1 to: self view numberOfElements)</body><body package="GHSpecialListMenu">listToClipboard: collectionOfNumber 	"Copy text for list elements with index in &lt;collectionOfNumber&gt; into Clipboard"	| sz stream |	(sz := collectionOfNumber size) = 0 ifTrue: [^self].	stream := WriteStream on: (String new: sz * 20).	collectionOfNumber asSortedCollection		do: [:idx | stream nextPutAll: (self view displayStringAt: idx)]		separatedBy: [stream cr].	ParagraphEditor currentSelection: stream contents asText</body><body package="GHSpecialListMenu">localMenu	"Return a special menu of operations, executed by the controller itself."	| theMenu localActions enablements |	theMenu := self class localMenu.	(localActions := OrderedCollection new: 10)		add: [:ctrl | self selectionToClipboard];		add: [:ctrl | self listToClipboard];		add: [:ctrl | self findInList];		add: [:ctrl | ctrl model inspect];		add: [:ctrl | ctrl view inspect];		add: [:ctrl | ctrl inspect];		add: [:ctrl | ctrl view topComponent inspect];		add: [:ctrl | self removeFromList];		add: [:ctrl | self inspectSelection].	#(#miSelectionToClipboard #miListToClipboard #miFindInList #miInspectModel #miInspectView #miInspect #miInspectWindow #miRemoveFromList #miInspectSelection)		with: localActions		do: [:menuKey :actionBlock | (theMenu atNameKey: menuKey) value: actionBlock].	(enablements := OrderedCollection new)		add: [self isSomethingSelected];		add: [self model value notEmpty];		add: [self model value notEmpty];		add: [self isSomethingSelected];		add: [self isSomethingSelected].	#(#miSelectionToClipboard #miListToClipboard #miFindInList #miRemoveFromList #miInspectSelection)		with: enablements		do: [:menuKey :testBlock | (theMenu atNameKey: menuKey) enablement: testBlock].	#{Heeg.FindInListDialog} isDefined		ifFalse: [theMenu removeItem: (theMenu atNameKey: #miFindInList)].	^theMenu</body><body package="GHSpecialListMenu">removeFromList	"Remove currently selected element(s) from list.	NOTE: This operation modifies the list, not the underlying model. List updates will most likely rebuild the full list."	| aList indices sz sorted |	aList := self model value.	(sz := (indices := self selectedIndices) size) &lt;= 1 ifTrue: ["empty/single selection"		^indices do: [:idx | aList removeAtIndex: idx]].	sorted := indices asSortedCollection.	(aList isKindOf: List)		ifTrue: 			[| min max |			(max := sorted last) - (min := sorted first) + 1 = sz				ifTrue:					["optimized: remove coherent interval fast, avoid intermediate update"					^aList removeFrom: min to: max returnElements: false]].	sorted reverseDo: [:idx | aList removeAtIndex: idx]</body><body package="GHSpecialListMenu">selectionToClipboard	"Copy display text of selected list element(s) into Clipboard"	self listToClipboard: self selectedIndices</body></methods><methods><class-id>UI.SpecialListAccessor class</class-id> <category>instance creation</category><body package="GHSpecialListMenu">forController: aController	^self new forController: aController</body><body package="GHSpecialListMenu">menuForController: aController	^(self forController: aController) menu</body></methods><methods><class-id>UI.SelectionView</class-id> <category>private</category><body package="GHSpecialListMenu">selectionToInspect	^self selection</body></methods><methods><class-id>UI.SequenceController</class-id> <category>accessing</category><body package="GHSpecialListMenu">menu	^SpecialListAccessor menuForController: self</body></methods><methods><class-id>UI.MultiSelectionSequenceView</class-id> <category>private</category><body package="GHSpecialListMenu">selectionToInspect	^self selections collect:[:each | self sequence at: each]</body></methods><methods><class-id>UI.MultiSelectionTreeView</class-id> <category>private</category><body package="GHSpecialListMenu">selectionToInspect	^self selections collect:[:each | self sequence at: each]</body></methods><methods><class-id>UI.DataSetController</class-id> <category>accessing</category><body package="GHSpecialListMenu">menu	^SpecialListAccessor menuForController: self</body></methods><methods><class-id>UI.GeneralSelectionTableView</class-id> <category>accessing</category><body package="GHSpecialListMenu">selectionToInspect	^self selection</body></methods><methods><class-id>UI.MultiSelectionDataSetView</class-id> <category>private</category><body package="GHSpecialListMenu">selectionToInspect	^self selections collect:[:each | self sequence at: each]</body></methods><methods><class-id>UI.SpecialListAccessor class</class-id> <category>resources</category><body package="GHSpecialListMenu">localMenu	"Tools.MenuEditor new openOnClass: self andSelector: #localMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;Copy Selection' 				#enabled: false 				#nameKey: #miSelectionToClipboard 				#value: #selectionToClipboard 				#labelImage: #(#{UI.ResourceRetriever} #{Tools.ToolbarIconLibrary} nil ) 				#helpText: 'Copy display text of selected list element(s) into Clipboard' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Copy &amp;List' 				#nameKey: #miListToClipboard 				#value: #listToClipboard 				#helpText: 'Copy display text of all list elements into Clipboard' ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Find...' 				#nameKey: #miFindInList 				#value: #findInList 				#helpText: 'Find list element matching string requested from the user' ) 			#(#{UI.MenuItem} 				#rawLabel: 'Inspect &amp;Selection' 				#nameKey: #miInspectSelection ) 			#(#{UI.MenuItem} 				#rawLabel: 'Inspect &amp;Model' 				#nameKey: #miInspectModel ) 			#(#{UI.MenuItem} 				#rawLabel: 'Inspect &amp;View' 				#nameKey: #miInspectView ) 			#(#{UI.MenuItem} 				#rawLabel: 'Inspect C&amp;ontroller' 				#nameKey: #miInspect 				#value: #inspect ) 			#(#{UI.MenuItem} 				#rawLabel: 'Inspect &amp;Window' 				#nameKey: #miInspectWindow ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Remove from list' 				#enabled: false 				#nameKey: #miRemoveFromList 				#value: #removeFromList 				#helpText: 'Remove selected element(s) from list' ) ) #(2 1 5 1 ) nil ) decodeAsLiteralArray</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>GeneralSelectionTableView</name><environment>UI</environment><super>UI.TableView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectionStyle zOrder </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category><attributes><package>UIBasics-Components</package></attributes></class><class><name>SelectionView</name><environment>UI</environment><super>UI.ScrollingView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sequence selectionChannel selectionIndex targetIndex grid textStyle displayStringSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Support</category><attributes><package>UIBasics-Support</package></attributes></class><class><name>SequenceController</name><environment>UI</environment><super>UI.ControllerWithMenu</super><private>false</private><indexed-type>none</indexed-type><inst-vars>outside searchString keyboardHook doStringSearching dispatcher dragDropCallbacks selectOnDownWithDrag autoSelect useModifierKeys </inst-vars><class-inst-vars></class-inst-vars><imports>			private Graphics.TextConstants.*			</imports><category>UIBasics-Controllers</category><attributes><package>UIBasics-Controllers</package></attributes></class><class><name>MultiSelectionDataSetView</name><environment>UI</environment><super>UI.DataSetView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selections lastSelectionIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Datasets</category><attributes><package>UIBasics-Datasets</package></attributes></class><class><name>MultiSelectionSequenceView</name><environment>UI</environment><super>UI.SequenceView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selections lastSelectionIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category><attributes><package>UIBasics-Components</package></attributes></class><class><name>MultiSelectionTreeView</name><environment>UI</environment><super>UI.TreeView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selections lastSelectionIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category><attributes><package>UIBasics-Components</package></attributes></class><class><name>DataSetController</name><environment>UI</environment><super>UI.ControllerWithMenu</super><private>false</private><indexed-type>none</indexed-type><inst-vars>outside dispatcher callbackLock rowSelect clicked oldCursor tabLock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Datasets</category><attributes><package>UIBasics-Datasets</package></attributes></class></st-source>