<?xml version="1.0"?><st-source><!-- Name: GHToolsNotice: Â© Copyright 1997-2015 Georg Heeg e.K.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.(MIT License)BundleName: GHToolsBundleStructure: a Store.BundleForParcel 3506Comment: This bundle contains 1 programmer tool for VisualWorks 8.2:	GHUndeclaredBrowser	- is a tool to view and handle the Undeclared namespace.	The tool can be launched via the 'Tools' menu in the VisualLauncher, and has online help available through their menu bar 'Help -> Open Help...'.Author: Roland Wagener et. al.===================Version History1.4	first public version1.5	broken parcel!1.6	fixed porting bugs1.7	fixed containing NameSpace and VisualLauncher menu actions1.71 fixed ChangeList>windowEvent:from: for master/slave behaviour1.72 code pane of GHUndeclaredBrowser can show decompiled code now1.73 fixed the NameSpace menus to be properly sorted1.74 added <No NameSpace> choice to NameSpace menu, 	fixed pooldictionary handling for ExternalInterface subclasses	fixed handling of static declarations1.75 fixed pooldictionary handling for ExternalInterface subclasses better1.76 fixed loading of static declarations and their includment into parcels1.77 added Encoding menu to GH Extras menu, fixed help text1.78 added missing FileEncodings static to class SourceFileManager1.79 fixed handling of statics when added to a parcel1.80 fixed filing in of comments1.81 modified fix of 1.80, for it needs special handling in case its a 2.5/3.0 comment1.82 class definition changes to of 2.5/3.0 type are now accepted	fixed problems with method list in GHUndeclaredBrowser /JH1.82.1	fixed Joergs code to be compatible with 5i class and static declarations1.82.2	fixed menuBar building and initialization1.82.3	integrated Joerg Hamels changes from 1.85, hopefully :-)1.86	tested code, fixed GHChangeList documentation1.87	creation of class hierarchies in a target namespace should work now1.88	fixed some shortcoming of 1.871.88.2 	poolDictionaries are now created in the targetNameSpace (if created in a method with 'Smalltalk at:')		and are also imported with namespace-prefix in the class definitions, instead of without; 		also fixed subclassing deep in new namespace /JH1.88.3   removed namespace-prefix again as it does hinder the export of the statics /JH1.88.4	added GHSuspicionsHolder for methods that might need further inspections,		globals are created in Smalltalk again, but their placement there is (hopefully) detected and		stored in a GHSuspicionsHolder, to be processed later by the user /JH1.88.5	cleaned up strange method formatting in GHSuspicionHolder /JH1.90 	replaced targetNameSpace-mechanism by GHSubstitutor, a class that holds a 		dictionary of potential substitutions /JH1.90.1	fixed various bugs included in 1.90 /JH1.90.2 	updated help, targetNameSpace selection is now in sync with substitutions /JH1.90.4	added lost changes from JH /RW1.91	added BOSS as prerequisite /RW1.92	fixed some bugs, cleaned up the GHSubstitutionInterface, enhanced the help text1.93	fixed helpt text, and a small bug1.94	renamed GHSubstitutionInterface to GHSubstitutionBrowser, added an 'edit' menu pick to the list of substitutions,		made GHChangeList adapt itself to the source code version of the first loaded file, changed the help text,1.95	made GHSubstitutionBrowser menus more consistent1.96	added NameSpace menu to GHSubstitutionBrowser, fixed bugs, updated help texts1.97	removed obsolete breakpoints1.98 	added ParcelPropertiesChange which might need more work1.98.5	corrected behaviour of GHChangelist: conflicts are now based on comparision		between substituted version of change and system1.98.6 	added two buttons for replay and remove of selected change1.98.7	post-load action: load patch parcels for 5i.1 and 5i.2 respectively 		(AbstractChangeList-changes)  1.98.8 	minor fixes1.98.9	OtherClassChange now handles 'inst var ref'1.99	added button for replaying a comment as parcel comment		the other two buttons now step over the replayed change		menus for targetParcel and NameSpace now divide into submenus 			for more than 20 entries	1.99.01 added wiki style fileout for UndeclaredBrowser1.99.03 'recover last changes' bug removed1.99.04 minor fixes1.99.05 added 'adaptive' setting to encoding menu - GHChangeList guesses encoding, fixed bug in GHReferenceFinder 2.0	preparation for 5i.3,2.1	reimplemented ParcelPropertyChange, fixed ParcelUpdateMode to replay to the corresponding Package, if in StORE, fixed GUI button layout, started fixing help texts,2.2	removed old postLoadAction, fixed parcelUpdateMode, moved 'GHChangeList' menu pick from 'Tools' to 'Changes' menu in the MenuBar of the Launcher,2.3	fixed bug in code used by 'show substitutions' , fixed help for GHUndeclaredBrowser and GHChangeList2.4	added 'selectionText' to GHChangeList for 5i.2 compatibility,2.5	fixed preveious 5i.2 compatibility check, now it has been tested on both 5i.3 and 5i.2,2.7	fixed wrong logic for replaying a change with absent parcel,2.8  fixed publishing binary to StORE,2.9  fixed GHUndeclaredBrowser when cleaning up again while an undeclared variable is selected2.10-2.14	fixed the following problems:		- update mode and meta classes,		- Methods with capital starting letter are tried to be substituted as LiteralBindings,		- missing default parcel in Parcel Update mode,		- wrong TargetParcel in ParcelUpdateMode used if filters are used,		- Wiki-style fileout of Undeclareds enhanced,2.20 - open GHUndeclaredBrowser only if there are Undeclareds,2.21 - added fixes from RH, fixed GHChangeLists interface layout,2.22 - simplyfied overideMenu handling,2.23 - added flyBy-help to overideMenu button and other buttons,2.24 - removed menus calculated inside blocks, and replaced them with AspectAdaptors on menu messages, fixed help text to include hints about overrides,2.25 - rearranged GHChangeList labels to be properly positioned on all platforms, fixed help text,2.26 - added Progress window when cleaning up Undeclareds, if none are left, a Dialog tells you, and no GHUndeclaredBrowser will open,2.27 - added support for VSE style class declarations, moved menu item for GHChangeList to Tools-menu,2.28 - fixed help text for GHChangeList for 7.02.29 - added enhancements by Clemens Hoffmann. Now, working with a set of 2.5/3.0 fileIns in the GHChangeList allows conflict checking against classes organized in Namespaces other than 'Smalltalk'.2.30 - added fixes to Substitution editor from Holger Guhl,2.31 - fixed 'Target Parcel:' label to switch to 'Target Package:' if running in Store, made interface resizable2.32 - fixed prerequisite for GHNamespace to be version independent2.33 - started work on a UISettings page, currently only a prefered Namespace and the default file encoding can be selected, later, an override setting and a conflict setting should follow2.34 - UISettings now include: default Namespace choice, default for file encodings for files to be read in, default for handling overrides, furthermore, in initialize a setting enables emphasis for changes display, in postOpenWith:, the showConflicts is enabled and analyzing differences in source is the default, fixed settings help text2.35 - fixed browser opening in GHUndeclaredBrowser, now uses RefactoringBrowser for all these tasks2.36 - fixed bug in encoding menu when operated from GHChangeList menu bar2.37 - added support for new Settings tool in feb03.1, now propably not loadable in pre 7.1 images without loading errors2.38 - updated GHChangeList help text2.39 - fixed namespace expansion in do-its, when switching from conflicts view to substitution view, conflicts view is switched off, 2.40 - added menu pick to undeclared list to be able to inspect all found method references. This is usefull in case the reference is a block and not a method,2.41 - prepared for 7.2 shipment2.42 - fixed targetNamespace initialization, creating a GHChangeList with "GHChangeList openOnParcel: t1 nameSpace: TEST file: 'xyz'" will now work, while the UISettings namespace is used in all other cases2.43 - fixed <GHChangeList openOnParcel:nameSpace:file:>. Usage of <scanFilname:> instead of <scanFile:>.2.44 - package comment adapted to 7.2.17.2.1 - make ComponentChanges work in GHChangeList7.2.2 - fixed many errors related to changes in the *Change hierarchy7.2.3 - merged fix for target parcel menu 7.2.4/5 - clean up towards 7.3, refactored the settings implementation7.2.6 - fixed issue with ParcelPropertyChange7.3 - fixed last issue with MethodSourceCollection, updated comment7.3.1 - improved lineEndConvention and Character Encoding Support, get it into Bundle structure7.4 	- fix problem with stream in GHChangeList>>guessEncodingFor: (opened stream must be closed), this fixes the problem with blocked files (added by Joerg Belger, 2005/11/28)	- refactored change-replay mechanism, now the replay of a change can create an overwrite correctly7.5 - fixed settings page preparation for VW 7.48.0 Replace GHUndeclaredBrowser with new implementation in RB technology8.1 uses a subclass of RefactoringBrowser to allow GHUndeclaredBrowser to survive snapshots8.4 	- tested with VW7.5	- added menu pick and fixed help text for GHChangeList8.5 	- fix menu for opening GHUndeclaredBrowser from GHChangeList8.6 - fix window event handling in AbstractChangeList, without his, a slave window is never closed when the master window is	- add and overwrite for AbstractChangeList>>windowEvent:from: to GH ChangeList package	- the change is to call super for standard window event handeling8.7 - fixes to GHChangeList>>doThis: for the 'Ask on replay' setting8.8 - remove override for BrowserNavigator (I18N patch), it is already integrated in Base Image8.9 - fix getting of methods by DeferredBinding references (this is a fix from ObjectStudio8)8.10 - GHChangeList is removed from this Bundle, so we can deploy the GHTools as supported contribution8.11 - move GHNamespaces and RefactoringBrowserInSubcanvas to bundle	- change menu string FileOutUndeclared to Write Report and change file output to english	- remove prerequisites8.12 - fix for 7.7 dec08.2. GHUndeclaredBrowser did not open anymore8.13 - moved GHChangeList back into bundle	- corrected comments for packages and bundle8.14 - fixed parcel version string property8.15 - fixed prerequisites and set packages in bundle to not-individually-functional8.16 - corrected parcel version property8.17 - fixed properties as in distribution (parcel and bundle name)8.18 - new RefactoringBrowserInSubcanvas version8.19 - added an additional search for undeclared BindingReferences to the GHUndeclaredBrowser, incl. documentation8.20 - GHTools is now compatible with ObjectStudio 8.x7.9 - 2	- add extra display of variables referenced by overridden methods to GHUndeclaredBrowser, incl. updated help7.9 - 1.1 - fix the search for undeclared BindingReferences to the GHUndeclaredBrowser, incl. comments7.9 - 3	- remove package RefactoringBrowserInSubcanvas from bundle structure7.9 - 4	- fixed user message conflicts7.10 - 1	- fix to replay overrides in GHChangeList7.10 - 2	- merge changes8.0 - 1	- adaptions to 8.0 GUI changes8.0 - 2	- merge with changes from version 7.10 -2 8.0 - 3	- updated comment for 8.08.2 - 1	- removed the GHChangeList because the functionality that it relied on was removed from Base VisualWorksDevelopmentPrerequisites: #(#(#any 'GHNamespaces' '') #(#any 'Browser-BrowserUI' '') #(#any 'Browser-Environments' '') #(#any 'Browser-Parser' '') #(#any 'Browser-Smalllint' '') #(#any 'Browser-SmalllintUI' '') #(#any 'RefactoringBrowserInSubcanvas' '') #(#any 'StoreBase' ''))DialectVersion: VisualWorks 7.9Parcel: nilParcelName: GHToolsPrerequisiteDescriptions: #(#(#name 'GHNamespaces' #componentType #package) #(#name 'Browser-BrowserUI' #componentType #package) #(#name 'Browser-Environments' #componentType #package) #(#name 'Browser-Parser' #componentType #package) #(#name 'Browser-Smalllint' #componentType #package) #(#name 'Browser-SmalllintUI' #componentType #package) #(#name 'RefactoringBrowserInSubcanvas' #componentType #package) #(#name 'StoreBase' #componentType #bundle))PrerequisiteParcels: #(#('GHNamespaces' '') #('Browser-BrowserUI' '') #('Browser-Environments' '') #('Browser-Parser' '') #('Browser-Smalllint' '') #('Browser-SmalllintUI' '') #('RefactoringBrowserInSubcanvas' '') #('StoreBase' ''))Version: 8.2.1 - 1Date: 3:15:06 PM January 16, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2.1 (dec16.1) of 22. Dezember 2016 on 16. Januar 2017 at 15:15:06</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>GHUndeclaredBrowserEntry</name><environment>Heeg</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>key status </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Heeg-Tools</category><attributes><package>GH Undeclared Browser</package></attributes></class><comment><class-id>Heeg.GHUndeclaredBrowserEntry</class-id><body>Instances of this class serve as wrappers to entrys in the UndeclaredBrowsers list of undeclared variable bindings. This class provides some fomatting/emphasis support for those entries. If you dare, you can change instance method 'displayString' to meet your own needs.Georg Heeg 1999, RWInstance Variables:key		&lt;Symbol&gt;		key of an undeclaredstatus	&lt;Boolean&gt;		used to prepare a propper display string of the key</body></comment><class><name>GHUndeclaredBindingEntry</name><environment>Heeg</environment><super>Heeg.GHUndeclaredBrowserEntry</super><private>false</private><indexed-type>none</indexed-type><inst-vars>undeclaredBinding references </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GH Undeclared Browser</package></attributes></class><comment><class-id>Heeg.GHUndeclaredBindingEntry</class-id><body>GHUndeclaredBindingEntry is an object that is shown in the left panel of the GHUndeclaredBrowser. It is used for BindingReferences instead of object that are found in the Undeclared Namespace.Instance Variables	references			&lt;Collection of: MethodDefinition&gt;			the methods where this reference is used	undeclaredBinding	&lt;BindingReference&gt;						binding reference the this object represents</body></comment><class><name>GHUndeclaredBrowser</name><environment>Heeg</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>undeclaredList targetNameSpace hideAbsent dependentRB </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIApplications-New</category><attributes><package>GH Undeclared Browser</package></attributes></class><comment><class-id>Heeg.GHUndeclaredBrowser</class-id><body>This Browser can be usefull for cleaning up the Undeclared namespace. Use 'Tools -&gt; UndeclaredBrowser' to open the interface. More help is available at 'Help -&gt; Open Help...' from the menu bar.Georg Heeg 1999, RWInstance VariablesundeclaredList	&lt;SelectionInList&gt;	list of UndeclaredBrowserEntrystargetNameSpace	&lt;ValueHolder&gt;	namespace to be used to hopefully resolve some undeclaredshideAbsent		&lt;ValueHolder&gt;	on a Boolean about showing Undeclared in inactive code dependentRB	&lt;RefactoringBrowser&gt;	editor of the methods</body></comment><class><name>GHUndeclaredBindingsLintRule</name><environment>Heeg</environment><super>Refactory.Browser.BlockLintRule</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GH Undeclared Browser</package></attributes></class><comment><class-id>Heeg.GHUndeclaredBindingsLintRule</class-id><body>GHUndeclaredBindingsLintRule is a custom lint rule that opens an undeclared browser when it needs to open its editor</body></comment><methods><class-id>Heeg.GHUndeclaredBrowserEntry</class-id> <category>accessing</category><body package="GH Undeclared Browser">key	^key</body><body package="GH Undeclared Browser">key: aSymbol	key := aSymbol</body><body package="GH Undeclared Browser">referencedMethodsUsing: browser	"ask the browser for the methods, i don't know how to find them"	^browser referencedMethodsBy: self undeclaredBinding</body><body package="GH Undeclared Browser">status	^status</body><body package="GH Undeclared Browser">status: aSymbol	status := aSymbol</body><body package="GH Undeclared Browser">undeclaredBinding	^Undeclared bindingFor: self key</body></methods><methods><class-id>Heeg.GHUndeclaredBrowserEntry</class-id> <category>comparing</category><body package="GH Undeclared Browser">&lt; anEntry	^self key &lt; anEntry key</body><body package="GH Undeclared Browser">= anEntry	^self key = anEntry key</body><body package="GH Undeclared Browser">hash	^self key hash</body></methods><methods><class-id>Heeg.GHUndeclaredBrowserEntry</class-id> <category>printing</category><body package="GH Undeclared Browser">displayString	"Prepare a better string for the list. If status is 			nospace, it will be normal.			somespace, it will get bold			myspace (in the target namespace), it will get italic and bold,			overwrite, it will be red and bold.	Alternative emphasis choices are included in comments.	Georg Heeg 1999/2011, RW"	^status == #nospace		ifTrue: [key asString]		ifFalse: 			[status == #myspace				ifTrue: 					[key asString asText						addEmphasis: (Array with: #italic with: #bold)						removeEmphasis: #()						allowDuplicates: false	"(#color -&gt; ColorValue green)"]				ifFalse: 					[status == #somespace						ifTrue: [key asString asText allBold]						ifFalse: 							[status == #overwrite								ifTrue: 									[key asString asText										addEmphasis: (Array with: #bold with: #color -&gt; ColorValue red)										removeEmphasis: #()										allowDuplicates: false]								ifFalse: [key asString asText]]]]</body><body package="GH Undeclared Browser">printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' ', key printString.</body></methods><methods><class-id>Heeg.GHUndeclaredBrowserEntry</class-id> <category>converting</category><body package="GH Undeclared Browser">asString	^self key</body></methods><methods><class-id>Heeg.GHUndeclaredBrowserEntry</class-id> <category>aspects</category><body package="GH Undeclared Browser">searchStrings	"returns a list of strings for the current binding so that the refactoring browser can highlight these strings in the selected method"	| binding name |	binding := self undeclaredBinding.	binding isNil ifTrue: [^Array new].	name := binding isVariableBinding ifTrue: [binding key] ifFalse: [binding simpleName].	^Array with: name asString</body></methods><methods><class-id>Heeg.GHUndeclaredBindingEntry</class-id> <category>accessing</category><body package="GH Undeclared Browser">referencedMethodsUsing: browser	"we don't need the browser, we know our references already, we only need to make sure we return CompiledMethods"	^self references collect: #method</body><body package="GH Undeclared Browser">references	^references</body><body package="GH Undeclared Browser">references: anObject	references := anObject</body><body package="GH Undeclared Browser">undeclaredBinding	^undeclaredBinding</body><body package="GH Undeclared Browser">undeclaredBinding: anObject	undeclaredBinding := anObject</body></methods><methods><class-id>Heeg.GHUndeclaredBrowser</class-id> <category>menus</category><body package="GH Undeclared Browser">isMenuItemEnabled: aMenuItem	^true</body><body package="GH Undeclared Browser">menuBar	^self class menuBar</body><body package="GH Undeclared Browser">nameSpaceMenu	"Get all nameSpaces currently available into a single list and 	create a Menu from it."	^NameSpace nameSpaceMenu</body></methods><methods><class-id>Heeg.GHUndeclaredBrowser</class-id> <category>aspects</category><body package="GH Undeclared Browser">hideAbsent	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^hideAbsent isNil		ifTrue:			[hideAbsent := false asValue]		ifFalse:			[hideAbsent]</body><body package="GH Undeclared Browser">targetNameSpace	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^targetNameSpace isNil		ifTrue:			[targetNameSpace := nil asValue]		ifFalse:			[targetNameSpace]</body><body package="GH Undeclared Browser">undeclaredList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^undeclaredList isNil		ifTrue:			[undeclaredList := SelectionInList new]		ifFalse:			[undeclaredList]</body><body package="GH Undeclared Browser">undeclaredSelectionChanged	"The selection in the list of undeclareds has changed, so recalculate 	its references and show them in the methodsList."	"Old style collection was done using a MethodCollector:		mc := MethodCollector new.		l := mc select: (mc referencesTo: (Undeclared bindingFor: sel))	But new researches have shown, a different way."	| methods selection |	(selection := self undeclaredList selection) isNil		ifFalse: [Cursor wait showWhile: 					[methods := selection referencedMethodsUsing: self.					self dependentRB environment searchStrings: selection searchStrings.					self methodsList: methods]]		ifTrue: [self methodsList: #()]</body></methods><methods><class-id>Heeg.GHUndeclaredBrowser</class-id> <category>actions</category><body package="GH Undeclared Browser">fileOutUndeclaredList	"File out a wiki style presentation of the list of undeclareds"	| namespaces nsize cc filename stream count |	filename := Dialog requestFileName: 'Name a file' default: 'undeclared.txt'.	filename isEmpty ifTrue: [^self].	stream := filename asFilename writeStream.	stream nextPutAll: '&lt;style type="text/css"&gt;&lt;!C-input {background-color:#FFFFFF;font-family:helvetica,arial;font-size:8pt; }td { background-color:#FFFFFF;font-family:helvetica,arial;font-size:9pt;  }&lt;/style&gt; |}Nr|{ Class/Variable |{ Notices |{ Method (Package)'; cr.	namespaces := Root allNameSpaces.	namespaces remove: Kernel.Undeclared.	namespaces := namespaces asArray.	nsize := namespaces size.	count := 1.	Cursor wait showWhile: [Undeclared keys asSortedCollection			do: 				[:k | 				| s i |				s := ''.				i := 1.				[i &lt; nsize]					whileTrue: 						[((namespaces at: i)							includesKey: k)							ifTrue: [s := s , ' ' , (namespaces at: i) fullName printString].						i := i + 1].				(self hideAbsent value and: [(self referencedMethodsBy: (Undeclared bindingFor: k))						contains: 							[:cm | 							(cm isKindOf: CompiledBlock)								ifTrue: [cc := cm outerMethod]								ifFalse: [cc := cm].							(cm mclass isKindOf: AbsentClassImport) or:[cm mclass isObsolete]]])					ifFalse: 						[stream nextPutAll: '|}' , count printString; nextPutAll: '|{' , k printString; nextPutAll: '|{' , s; nextPutAll: '|{'.						(self referencedMethodsBy: (Undeclared bindingFor: k))							do: [:mb | |m str|									m:= mb homeMethod. "get the compiledMethod from method or block"									str:= m homeMethod printString.									str:= str copyFrom: 16 to: str size. "get rid of 'CompiledMethod'"									stream nextPutAll: str; 										nextPut: $(; 										nextPutAll: (Store.Registry containingPackageForSelector: (m mclass selectorAtMethod: m ifAbsent: nil) class: m mclass) name , ')&lt;br&gt; '								].						stream cr.						count := count + 1]]].	stream close</body><body package="GH Undeclared Browser">fillListWithRule: aUndeclaredBindingsLintRule	"take the lint rule and filter all the binding references that it found so that it can be shown in the undeclaredList"	| mapping method bindings missingBindings undeclareds |	mapping := Dictionary new.	aUndeclaredBindingsLintRule result classesAndSelectorsDo: 			[:class :selector |			method := class compiledMethodAt: selector.			bindings := method allLiterals select: #isBindingReference.			missingBindings := bindings reject: #isDefined.			missingBindings do: [:each | (mapping at: each ifAbsentPut: [Set new]) add: method definition]].	undeclareds := OrderedCollection new.	mapping keysAndValuesDo: 			[:binding :references |			undeclareds add: ((GHUndeclaredBindingEntry new)						undeclaredBinding: binding;						key: binding longNameFromSmalltalk;						references: references;						yourself)].	self undeclaredList list: (undeclareds sorted: [:a :b | a key &lt; b key])</body><body package="GH Undeclared Browser">findMoreUndeclareds	"Use SmallLint aka CodeCritics to find undeclared Bindingreferences of the kind 'Test.Help.Class'.	For more information of how to find them, look at Heeg.GHUndeclaredBindingsLintRule&gt;&gt;undeclaredBindingReference."	| all basicAll |	basicAll := Root allClasses.	all := OrderedCollection new: basicAll size * 2.	basicAll do: 			[:cl |			all add: cl.			all add: cl class].	 Refactory.Browser.Smalllint ghRunRule: Heeg.GHUndeclaredBindingsLintRule undeclaredBindingReference		onEnvironment: (Refactory.Browser.BrowserEnvironment new forClasses: all).</body><body package="GH Undeclared Browser">inspectValue	"Inspect the value of the selected undeclared"	| sel |	undeclaredList list isEmpty 		ifFalse: 			[(sel := undeclaredList selection) isNil 				ifFalse: [(Undeclared at: sel key) inspect]]</body><body package="GH Undeclared Browser">openHelpText	| aView topView aModel |	aModel := self class undeclaredBrowserHelp asValue.	topView := ApplicationWindow				model: aModel				label: 'Help for GHUndeclaredBrowser'				minimumSize: 200@100.	topView insideColor: ColorValue white.	topView icon: (Icon constantNamed: #workspace).	aView := ComposedTextView new model: aModel.	topView component: (LookPreferences edgeDecorator on: aView).	topView openWithExtent: 600@250.	self builder window application: self; beMaster.	topView application: self; beSlave</body><body package="GH Undeclared Browser">showNamespace	"find out if the selected undeclared entry is defined in any namespace. show all candidates you find"	| sel candidates namespaces res |	((sel := self undeclaredList selection) notNil 		and: [sel status ~~ #nospace]) 			ifTrue: 				[namespaces := Root allNameSpaces.				namespaces remove: Kernel.Undeclared.				candidates := namespaces select: [:e | e includesKey: sel key].				candidates isEmpty not 					ifTrue: 						["rs := WriteStream on: (String new: 20).						rs nextPutAll: 'This undelared may be found in NameSpace:' ; cr.						candidates do: [:c | rs nextPutAll: '	' , c fullName ; cr].						Dialog warn: rs contents"						res := Dialog 									choose: (#ThisUndelaredMayBeFoundInNameSpaceEs &lt;&lt; #Heeg &gt;&gt; 'This undelared may be found in NameSpace(es):') asString									fromList: (candidates collect: [:c | c fullName])									values: candidates									lines: 5									cancel: [#noChoice].						res == #noChoice 							ifFalse: 								[self targetNameSpace value: res.								self undeclaredList selection: sel]]]</body></methods><methods><class-id>Heeg.GHUndeclaredBrowser</class-id> <category>change update</category><body package="GH Undeclared Browser">updateUndeclareds	| oldSelection uns |	oldSelection := self undeclaredList selection.	self undeclaredList selection: nil.	Cursor wait showWhile: [Undeclared purgeUnusedBindings].	self fillUndeclaredList.	uns := self undeclaredList list.	(uns includes: oldSelection) 		ifTrue: [self undeclaredList selection: oldSelection]</body></methods><methods><class-id>Heeg.GHUndeclaredBrowser</class-id> <category>accessing</category><body package="GH Undeclared Browser">dependentRB	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^dependentRB</body></methods><methods><class-id>Heeg.GHUndeclaredBrowser</class-id> <category>dependent browser</category><body package="GH Undeclared Browser">createBrowser	| browserEnvironment |	browserEnvironment := Refactory.Browser.SelectorEnvironmentInSubcanvas 				onMethods: Array new.	browserEnvironment 		label: #UndeclaredReferences &lt;&lt; #Heeg &gt;&gt; 'Undeclared References'.	dependentRB := Refactory.Browser.RefactoringBrowserInSubcanvas 				onEnvironment: browserEnvironment</body><body package="GH Undeclared Browser">methodsList: aList 	| entries |	entries := (MethodCollector new methodsSelect: [:m | aList includes: m]) 				select.	aList do: 			[:each | 			(each isMemberOf: CompiledInitializer) 				ifTrue: [entries add: each definition]].	entries isEmpty 		ifTrue: 			[dependentRB 				environment: (Refactory.Browser.SelectorEnvironmentInSubcanvas onMethods: entries)]		ifFalse: 			[dependentRB 				environment: ((Refactory.Browser.SelectorEnvironmentInSubcanvas onMethods: entries)						addSearchString: self undeclaredList selection key;						yourself)].	dependentRB navigator refreshLists</body></methods><methods><class-id>Heeg.GHUndeclaredBrowser</class-id> <category>initialize release</category><body package="GH Undeclared Browser">initialize	"First clean up Undeclared, then initialize the rest."	super initialize.	InputState default shiftDown 		ifFalse: [Cursor wait showWhile: [Undeclared purgeUnusedBindings]].	"self targetNameSpace onChangeSend: #displayMethodSource to: self."	self targetNameSpace onChangeSend: #fillUndeclaredList to: self.	self fillUndeclaredList.</body></methods><methods><class-id>Heeg.GHUndeclaredBrowser</class-id> <category>interface closing</category><body package="GH Undeclared Browser">noticeOfWindowClose: aWindow	super noticeOfWindowClose: aWindow.	aWindow release.	self dependentRB builder setWindow: nil.	self dependentRB release.	dependentRB := nil</body></methods><methods><class-id>Heeg.GHUndeclaredBrowser</class-id> <category>interface opening</category><body package="GH Undeclared Browser">invalidateTabs	^self</body><body package="GH Undeclared Browser">preBuildWith: aBuilder	"doing these initializations here instead of #initialize as the GHUndeclaredBrowser can be opened without #initialize, too"	super preBuildWith: aBuilder.	self undeclaredList selectionIndexHolder onChangeSend: #undeclaredSelectionChanged to: self.	self hideAbsent onChangeSend: #fillUndeclaredList to: self.	self createBrowser</body></methods><methods><class-id>Heeg.GHUndeclaredBrowser</class-id> <category>private</category><body package="GH Undeclared Browser">fillUndeclaredList	"Prepare for neat formatting in the browser list.	If the undeclared symbol is defined			nowhere, it will be normal.			somewhere, it will get bold			in the target namespace, it will get italic and bold,			overwrite, it will be red and bold.	Emphasis calculations are done in the GHUndeclaredBrowserEntrys displayString method.	Overwrites and absent references can be filtered using the 'Hide Absent Reference' checkbox."	| namespaces nsize mynspace newList cc mthds isOver |	namespaces := Root allNameSpaces.	namespaces remove: Kernel.Undeclared.	namespaces := namespaces asArray.	nsize := namespaces size.	mynspace := self targetNameSpace value.	newList := OrderedCollection new: 10.	Cursor wait showWhile: 			[Undeclared keys asSortedCollection do: 					[:k |					| s i |					s := #nospace.					i := 1.					[s == #nospace &amp; (i &lt; nsize)] whileTrue: 							[((namespaces at: i) includesKey: k)								ifTrue: [(namespaces at: i) == mynspace ifTrue: [s := #myspace] ifFalse: [s := #somespace]].							i := i + 1].					mthds := self referencedMethodsBy: (Undeclared bindingFor: k).					"Detect references caused by Overrides."					isOver := (MethodCollector new methodsSelect: [:m | mthds includes: m]) select isEmpty.					(self hideAbsent value and: 							[(mthds contains: 									[:cm |									cc := (cm isKindOf: CompiledBlock) ifTrue: [cm outerMethod] ifFalse: [cm].									cm mclass isKindOf: AbsentClassImport])								| isOver])						ifFalse: 							[isOver ifTrue: [s := #overwrite].							newList add: ((GHUndeclaredBrowserEntry new)										key: k;										status: s;										yourself)]]].	self undeclaredList list: newList</body><body package="GH Undeclared Browser">referencedMethodsBy: aReference 	"This seaches for CompiledMethods refering to a binding in 	Undeclared, rather then searching MethodDefinitions refering 	to a key in Undeclared."	| methods |	methods := Set new.	DeferredBinding 		allSubclassesDo: [:cl | cl allInstances 								do: [:db | db binding key == aReference key											ifTrue: [methods add: db method homeMethod]]].	^methods asOrderedCollection</body></methods><methods><class-id>Heeg.GHUndeclaredBrowser class</class-id> <category>private</category><body package="GH Undeclared Browser">cleanupUndeclared	InputState default shiftDown ifTrue: [^Undeclared size = 0].	Undeclared purgeUnusedBindings.	^Undeclared size = 0</body></methods><methods><class-id>Heeg.GHUndeclaredBrowser class</class-id> <category>help texts</category><body package="GH Undeclared Browser">undeclaredBrowserHelp	"Heeg.ComposedTextEditor on: self undeclaredBrowserHelp for: self"	"Heeg.RtfWriter write: self undeclaredBrowserHelp into: 'undeclaredBrowserHelp.rtf'" 	"Heeg.HtmlWriter write: self undeclaredBrowserHelp into: 'undeclaredBrowserHelp.html'" 	^ (Text string: 'The GHUndeclaredBrowser(8th October 1999, Roland Wagener)(1st February 2010: added undeclared binding reference finder)(October 2011: added display of variables referenced by overridden methods)This tool provides all you need to find and clean up undeclared definitions in your image. The first location for those unwanted definitions is the Undeclared namespace in VisualWorks. Please read the ''VisualWorks Application Developer''s Guide'' for explanations about the Undeclared dictionary/namespace, its usage, and its significance for you, the developer. Second, methods may refer to variables not defined by denoting their name using a dot-notation, like in ''Test.Help.Class''. While this reference indicates a variable named ''Class'' in a namespace called ''Help'', which is inside a namspace called ''Test'', it does not define this variable. Therefore, if one of the objects mentioned above is not defined, there will be no entry into the Undeclared namespace, so we provide a special finder for the erroneous methods, look further down for instructions. Starting up the tool will first clean up Undeclared programmatically, so the browser will only display ''real'' undeclareds. Due to this clean up, it takes a while to open the browser. If you want to skip the cleaning, hold down the shift key while opening the tool.The User InterfaceThe browser displays all variable bindings of the Undeclared namespace in a list in the upper left corner. Below the list is a Checkbox allowing you to filter those entries from the list, which are only there because of a method belonging to an absent class. This is perfectly normal, as Parcels can contain methods for classes belonging to other parcels not currently loaded.Selecting one of the entries will calculate all methods refering to this variable, and display them in a second list to the right. The selection will also display the current content of the selected variable in a text field below the two lists. If you select one of the methods, its source code is displayed in a text view at the bottom of the window. For special purposes explained below, a menu button at the top of the window gives you the opportunity to select a target namespace. Some menu items may be disabled, if StORE is not available in the image.A little help for code integrators has been added to the File menu. If you encounter undeclared variables in code you are not responsible for, you can choose ''File-&gt;FileOutList...'' to save a text file containing a table of undeclareds with their corrsponding references in Wiki-Webpage format. Pasting the contents of the text file on your Wiki server gives your team members immediate access to your findings, and can help to resolve these issues.Intended way of UsageCleaning up Undeclared really means fixing bugs in your software. Because Parcels can contain code for classes currently not in the image, Undeclared may contain variable bindings, which are NOT there because of a bug, but for serving as a forward reference until the class gets loaded. Therefor the following guide is only valid for those entries shown with ''Hide Absent References'' checked. The list may be significantly longer when this option is unchecked, and the result shown when selecting a variable of an absent class'' method is misleading because its mostly not showing buggy code.Each method refering to a variable listed in this browser needs further editing, because it really should refer to:	-	a static variable in the classes namespace (previously known as class variables),	-	a static variable of a name space, previously known as a global variable,	-	a class in another name space, which is not imported to the namespace of 		the class of  the method, and therefore cannot be found, 	-	a class instance variable,	-	an instance variable.The browser will let you select a variable from the Undeclared namespace, which in turn will display all methods refering to this variable. The entries in the list of Undeclareds give some hints using emphasis attributes about their origin regarding NameSpaces:	MyVariable			this name is not defined in any namespace,	MyVariable			this name is defined in one or more namespaces,	MyVariable			this name is defined at least in the selected target namespace.	MyVariable			this name is referenced by an overridden method, the current implementation does not use it, and						it is no longer defined anywhere. Menu pick ''Show Defining NameSpace...'' on the undeclared list menu allows you to search for all namespaces a selected variable might be defined in. Selecting a namespace from the resulting MultipleChoiceDialog will select this namespace to be the target namespace.	If you select a method refering to a variable, its source code can be edited, just as in other browsers. However, the undeclareds created by overridden methods cannot be released that easily, the tool currently does not show the sources of the inactive method, which is still available in the system, but not ready for editing anyway.If you successfully fixed all methods refering to an undeclared variable, you can manually remove this variable name from the undeclareds list using its popUp menu. Or, if you have worked on many methods of many undeclared variables in a row, you can clean up Undeclared programmatically using ''Undeclared-&gt;Update List...'' from the menu bar.Finding more undeclaredsAs described in the introduction, there is another opportunity to introduce undeclared definitions into Smalltalk code. We call it ''Undeclared BindingReferences'', and they can be introduced as follows:1. the programmer accepts a method, and the compiler compains about a     reference, like ''Test.Help.Class refers to a variable which has not been defined''.    The programmer may choose to proceed, and if he does, an undefined binding    has been introduced into the method he accepted.2. code is loaded into the image via Pacel, FileIn, etc., which refers to a variable    using the dot-notation as described above, which is not defined in the image.     The load will not reject the code or indicate the undeclared reference.The GHUndeclaredBrowser provides a menu to find such erroneous references by executing a special CodeCritic-rule for the code of the whole image. Use menu ''Undeclared-&gt; Find Undeclared BindingRefrences ...'' to scan for methods having this error. A progress indicator window will show the scan through the image, the scan may be interrupted. At the end it will open a method list browser with the candidate methods, or, If nothing could be found (which is normal!), a dialog will tell you so. The CodeCritic-Rule ''Undeclared BindingReferences'' is added to the system, and shows up as an additional rule in the ''bugs'' category of the CodeCritic-Tool in the SystemBrowser.Georg Heeg eK Dortmund - KÃ¶then - ZÃ¼richwww.heeg.de' runs: (Core.RunArray runs: #(23 271 5 261 6 760 18 994 4 98 20 271 21 1353 3 12 3 13 10 27 11 14 10 68 10 152 26 861 26 22 24 893 52 518) values: ((Core.Array new: 34) at: 1 put: #(#bold #large #serif #underline); at: 3 put: #underline; at: 5 put: #underline; at: 7 put: #bold; at: 9 put: #bold; at: 11 put: #bold; at: 13 put: #bold; at: 15 put: #underline; at: 17 put: #underline; at: 19 put: #bold; at: 21 put: #underline; at: 23 put: #(#bold #italic); at: 25 put: ((Core.Array new: 2) at: 1 put: #bold; at: 2 put: (#color -&gt; Graphics.ColorValue red); yourself); at: 27 put: #bold; at: 29 put: #bold; at: 31 put: #bold; at: 33 put: #bold; yourself)))</body></methods><methods><class-id>Heeg.GHUndeclaredBindingsLintRule</class-id> <category>accessing</category><body package="GH Undeclared Browser">openEditor		| browser |	browser := (GHUndeclaredBrowser basicNew)				fillListWithRule: self;				yourself.	browser open</body></methods><methods><class-id>Heeg.GHUndeclaredBindingsLintRule class</class-id> <category>bugs</category><body package="GH Undeclared Browser">undeclaredBindingReference	"Rule to find undeclared BindingReferences in method sources.	This matches bindings of the type 'Test.Help.Class', which are undefined, but do not show up in the Undeclared namespace.	Some technical comments:		We want to find undefined binding references, which are not of the kind #{Test.Error}, but more like Test.Error.		The rule first determins if the method has an undefined binding using the BlockLintRule approach.		If so, we call #undeclaredBindingReferenceMatchFor:initialAnswer: to detect non-curly-brackets bindings and add them		to the answer set."	| detector |	detector := self new.	detector		name: (#UndeclaredBindingreference &lt;&lt; #browser				&gt;&gt; 'Undeclared BindingReference') asString.	detector methodBlock: 			[:context :result |			| missingBindings bindings |			bindings := context compiledMethod allLiterals select: #isBindingReference.			missingBindings := bindings reject: #isDefined.			missingBindings notEmpty				ifTrue: 					[self undeclaredBindingReferenceMatchFor: context initialAnswer: result]].	^detector</body></methods><methods><class-id>Heeg.GHUndeclaredBindingsLintRule class</class-id> <category>private</category><body package="GH Undeclared Browser">undeclaredBindingReferenceMatchFor: aContext initialAnswer: answerCollection	"We use a ParseTreeSearcher, we only get the source code of the used variable	to analyze the situation. The test for isLocalVariable skips all 'self' and 'super' candidates.	After that, the source code contains the global shared variable name, so an indication of an undefinded binding	is only available through the error raised during the compilation of the sourcecode."	| matcher |	matcher := (Refactory.Browser.ParseTreeSearcher new)				matchesAnyOf: #('`bindingCandidate')					do: 						[:aNode :answer |						aNode isLocalVariable not							ifTrue: 								[								[Compiler									evaluate: aNode name									for: nil									in: aContext selectedClass environment									notifying: nil									logged: false]										on: Error										do: 											[:ex |											('*has no binding' match: ex messageText)												ifTrue: 													[answer														addSearchString: aNode name														forClass: aContext selectedClass														selector: aContext selector.													answer addClass: aContext selectedClass selector: aContext selector]]].						answer];				yourself.	matcher executeTree: aContext parseTree initialAnswer: answerCollection.	^matcher</body></methods><methods><class-id>Kernel.NameSpace class</class-id> <category>gh-utilities</category><body package="GH Tools Base">allNameSpaces	"Get the ghFullNames of all NameSpaces currently available into an Array.	Used in GHSubstitutionInterface"	|  spaces |	spaces := Root withAllNameSpaces.	spaces  remove: Root.	spaces sortWith: [:a :b | a ghFullName &lt;= b ghFullName].	^ ((spaces := spaces asArray) collect: [:ns | ns ghFullName]) asArray.</body><body package="GH Tools Base">createNameSpaceMenu	"Get all nameSpaces currently available into a single list and 	create a Menu from it. 	Used in GHChangeList, GHUndeclaredBrowser, and 	GHNameSpaceCreator"	| maxMenuSize names spaces m |	maxMenuSize := 20.	spaces := Root withAllNameSpaces.	spaces remove: Root.	spaces sortWith: [:a :b | a ghFullName &lt;= b ghFullName].	names := ((spaces := spaces asArray) collect: [:ns | ns ghFullName]) 				asArray.	^names size &lt; (maxMenuSize + 1) 		ifTrue: 			[m := Menu new.			m addItemLabel: #NoNameSpace &lt;&lt; #Heeg &gt;&gt; '&lt;No NameSpace&gt;' value: #none.			m addItemGroupLabels: names values: spaces.			m]		ifFalse: 			["if there are a lot of namespaces in the system, we need a 			submenus"			| theSubmenus index |			theSubmenus := OrderedCollection new.			index := 1.			[index &lt;= spaces size] whileTrue: 					[| aSubmenu subColl |					subColl := spaces copyFrom: index								to: (index + maxMenuSize - 1 min: spaces size).					aSubmenu := Menu labelArray: (subColl collect: [:each | each ghFullName])								values: subColl.					theSubmenus 						add: ((MenuItem 								labeled: subColl first ghFullName , ' - ' , subColl last ghFullName) 									submenu: aSubmenu).					index := index + maxMenuSize].			m := Menu new.			m addItemLabel: #NoNameSpace &lt;&lt; #Heeg &gt;&gt; '&lt;No NameSpace&gt;' value: #none.			m addItemGroup: theSubmenus.			m]</body><body package="GH Tools Base">nameSpaceMenu	"Return an AspectAdaptor on myself that will create the parcel 	menu each time its asked 'value'."	^(AspectAdaptor subject: self)		accessWith: #createNameSpaceMenu assignWith: nil; yourself</body></methods><methods><class-id>Kernel.NameSpace</class-id> <category>printing</category><body package="GH Tools Base">ghFullName	"Return the full name of a NameSpace 	containing all parents except Root."	"IOConstants ghFullName"	| start localParent |	start := self name asString.	localParent := self environment.	[(localParent ~~ Root) &amp; (localParent notNil )]		whileTrue: 			[start := localParent name asString , '.' , start.			localParent := localParent environment].	^start</body></methods><methods><class-id>Refactory.Browser.Smalllint class</class-id> <category>accessing</category><body package="GH Undeclared Browser">ghRunRule: rule onEnvironment: browserEnvironment 	| lint |	lint := self new.	lint openInterface: #ghAbortWindowSpec.	lint environmentEditor selectedEnvironment: browserEnvironment.	lint ruleHolder value: rule.	lint runAbortInterface</body></methods><methods><class-id>Heeg.GHUndeclaredBrowser class</class-id> <category>resources</category><body package="GH Undeclared Browser">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #File 					#defaultString: 'File' 					#catalogID: #Heeg ) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #FileOutList 								#defaultString: 'Write Report' 								#catalogID: #Heeg ) 							#value: #fileOutUndeclaredList ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #Quit 								#defaultString: 'Quit' 								#catalogID: #Heeg ) 							#value: #closeRequest ) ) #(1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Undeclared 					#defaultString: 'Undeclared' 					#catalogID: #Heeg ) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #InspectValue 								#defaultString: 'Inspect Value...' 								#catalogID: #Heeg ) 							#value: #inspectValue ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #ShowDefiningNameSpaces 								#defaultString: 'Show Defining NameSpaces...' 								#catalogID: #Heeg ) 							#nameKey: #namespacePick 							#value: #showNamespace ) 						#(#{UI.MenuItem} 							#rawLabel: 'Find Undeclared BindingReferences ...' 							#value: #findMoreUndeclareds ) 						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #UpdateList 								#defaultString: 'Update List...' 								#catalogID: #Heeg ) 							#value: #updateUndeclareds ) ) #(2 1 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #Help 					#defaultString: 'Help' 					#catalogID: #Heeg ) 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: 							#(#{Kernel.UserMessage} 								#key: #OpenHelp 								#defaultString: 'Open Help...' 								#catalogID: #Heeg ) 							#value: #openHelpText ) ) #(1 ) nil ) ) ) #(3 ) nil ) decodeAsLiteralArray</body><body package="GH Undeclared Browser">undeclaredMenu	"Tools.MenuEditor new openOnClass: self andSelector: #undeclaredMenu"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #InspectValue 					#defaultString: 'Inspect Value...' 					#catalogID: #Heeg ) 				#value: #inspectValue ) 			#(#{UI.MenuItem} 				#rawLabel: 				#(#{Kernel.UserMessage} 					#key: #ShowDefiningNameSpaces 					#defaultString: 'Show Defining NameSpaces...' 					#catalogID: #Heeg ) 				#nameKey: #namespacePick 				#value: #showNamespace ) ) #(2 ) nil ) decodeAsLiteralArray</body></methods><methods><class-id>Heeg.GHUndeclaredBrowser class</class-id> <category>interface specs</category><body package="GH Undeclared Browser">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 			#(#{Kernel.UserMessage} 				#key: #GH_Undeclared_Browser 				#defaultString: 'GH Undeclared Navigator' 				#catalogID: #Heeg ) 			#bounds: #(#{Graphics.Rectangle} 731 378 1286 858 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0 28 0 0 0.227027 -22 1 ) 					#name: #undeclaredList 					#model: #undeclaredList 					#menu: #undeclaredMenu 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.5 2 0 -2 1 25 0 ) 					#name: #nameSpaceMenuButton 					#model: #targetNameSpace 					#menu: #nameSpaceMenu ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} -200 0.5 3 0 ) 					#label: #(#{UserMessage} #key: #SelectTargetNamespace #catalogID: #Heeg #defaultString: 'Select Target Namespace:') ) 				#(#{UI.CheckBoxSpec} 					#layout: #(#{Graphics.LayoutOrigin} 5 0 -18 1 ) 					#model: #hideAbsent 					#label: #(#{UserMessage} #key: #HideAbsentReferences #catalogID: #Heeg #defaultString: 'Hide Absent References') ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.227027 28 0 8 0.227027 -22 1 ) 					#name: #Splitter1 					#flags: 8 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: '#undeclaredList' 					#belowWidgets: '#RBHolder' ) 				#(#{UI.SubCanvasSpec} 					#layout: #(#{Graphics.LayoutFrame} 10 0.227027 28 0 0 1 0 1 ) 					#name: #RBHolder 					#majorKey: #{Refactory.Browser.RefactoringBrowser} 					#minorKey: #windowSpec 					#clientKey: #dependentRB ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="GH Undeclared Browser">openGHUndeclaredBrowser	"Open the GHUndeclaredBrowser for cleaning up.	Georg Heeg 1999, RW"	&lt;menuItem: #(#GHUndeclaredBrowser #Heeg 'GHUndeclaredBrowser')		nameKey: nil		menu: #(#menuBar tools)		position: 28.4&gt;	Heeg.GHUndeclaredBrowser open</body></methods><methods><class-id>Refactory.Browser.Smalllint class</class-id> <category>interface specs</category><body package="GH Undeclared Browser">ghAbortWindowSpec	"Tools.UIPainter new openOnClass: self andSelector: #ghAbortWindowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 			#label: 'Finding More Undeclareds' 			#min: #(#{Core.Point} 40 20 ) 			#bounds: #(#{Graphics.Rectangle} 720 450 1002 553 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ProgressWidgetSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 30 0 -5 1 -35 1 ) 					#isOpaque: true 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#{Graphics.ColorValue} #blue ) 						#setBackgroundColor: #(#{Graphics.ColorValue} #white ) ) 					#model: #percentDone 					#direction: #horizontal 					#position: #topLeft 					#area: true 					#reverse: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -30 0.5 -30 1 30 0.5 -2 1 ) 					#name: #abort 					#flags: 40 					#model: #abort 					#label: 					#(#{Kernel.UserMessage} 						#key: #Stop 						#defaultString: 'Stop' 						#catalogID: #IDE ) ) 				#(#{UI.LabelSpec} 					#properties: #(#{UI.PropertyListDictionary} #labelFromApplication false ) 					#layout: #(#{Core.Point} 5 9 ) 					#name: #ruleLabel 					#label: 'Running rule:' ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 88 0 7 0 -5 1 29 0 ) 					#name: #ruleNameField 					#flags: 0 					#model: #'ruleHolder name' 					#tabable: false 					#isReadOnly: true ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>NameSpace</name><environment>Kernel</environment><super>Kernel.GeneralNameSpace</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parent name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>System-Name Spaces</category><attributes><package>System-Name Spaces</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>BlockLintRule</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BasicLintRule</super><private>false</private><indexed-type>none</indexed-type><inst-vars>classBlock methodBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Lint</category><attributes><package>Browser-Smalllint</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>