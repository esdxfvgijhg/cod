<?xml version="1.0"?><st-source><!-- Name: VerboseProcessDumpNotice: © Copyright 2008-2013 Georg Heeg e.K.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.(MIT License)Comment: This little package enables writing full stacks e.g. in exception handlers or in other situations where debugging is very difficult.Developed in the context of ObjectStudio8 by Georg Heeg, but can be useful elsewhere, specifically in support.Usage examples:Just before something critical happens, execute in a workspace:[(Core.Delay forSeconds: 10) wait.Kernel.Processor verbosePrintAllOnFile] forkAt: 100or when you know that debugging is impossible and the notifier even does not work: put in UnhandledException>defaultActionthisContext verbosePrintOnFile.ObjectMemory quit.or you could hold down <shift> and <alt> when an error orccurs then the process dump is written and the image quits.DbIdentifier: magdi.heeg.de.postgresDbTrace: 65129DbUsername: georgDbVersion: 8.2 - 1PackageName: VerboseProcessDumpParcel: #('VerboseProcessDump')ParcelDirectory: c:\visworks\vw8.2.1 dec16.1\image\HeegContributions-vw8.2.1-2017-01-16\VerboseProcessDumpParcelName: VerboseProcessDumpPrintStringCache: (8.2 - 1,georg)Version: 8.2 - 1Date: 3:15:17 PM January 16, 2017 --><time-stamp>From VisualWorks®, Pre-Release 8.2.1 (dec16.1) of 22. Dezember 2016 on 16. Januar 2017 at 15:15:17</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>VerboseFileAccess</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>VerboseProcessDump</package></attributes></class><comment><class-id>Kernel.VerboseFileAccess</class-id><body>VerboseFileAccess is a class that takes care of opening a writestream on a file. Its purpose is to take care not to crash during the writeStream creation, so that the logging can take place.</body></comment><methods><class-id>Kernel.VerboseFileAccess</class-id> <category>initialize-release</category><body package="VerboseProcessDump">secureCreateStreamOn: aFilename	^[(aFilename withEncoding: #utf8) writeStream] on: Error				do: 					[:ex |					"if encoding lookup didn't work, hand-shape a writestream.					It's basically an inlined version of the above code but with a fixed encoder"					| unencodedWriteStream encoder |					unencodedWriteStream := ExternalWriteStream on: (FileConnection										openFileNamed: aFilename										mode: #writeOnly										creationRule: #truncateOrCreate).					encoder := UTF8StreamEncoder asEncoder.					ex return: (EncodedStream on: unencodedWriteStream binary								encodedBy: encoder initializeForFiles)]</body><body package="VerboseProcessDump">writeToFile: aFilename using: aBlock	| stream |	stream := self secureCreateStreamOn: aFilename.	[aBlock value: stream] ensure: [stream close]</body></methods><methods><class-id>Kernel.VerboseFileAccess class</class-id> <category>instance creation</category><body package="VerboseProcessDump">writeToFile: aFilename using: aBlock	^self new writeToFile: aFilename asFilename using: aBlock</body></methods><methods><class-id>Kernel.Context</class-id> <category>printing</category><body package="VerboseProcessDump">verbosePrintOn: aStream		| dumper |	dumper := ContextDumpPolicy new.	dumper stack: (self sendersTo: nil).	dumper stream: aStream.	dumper printVerbose</body><body package="VerboseProcessDump">verbosePrintOnFile	VerboseFileAccess writeToFile: 'context.txt'		using: [:stream | self verbosePrintOn: stream]</body><body package="VerboseProcessDump">verbosePrintString		| stream |	stream := (String new: 500) writeStream.	self verbosePrintOn: stream.	^stream contents</body></methods><methods><class-id>Core.UnhandledException</class-id> <category>private - actions</category><body package="VerboseProcessDump">defaultAction	"What to do when the exception is unhandled."	| emergencyHandler |	(InputState default shiftDown and: [InputState default altDown]) ifTrue:			[Processor verbosePrintAllOnFile.			ObjectMemory quit].	(emergencyHandler := self class emergencyHandler) == nil ifFalse:			[^emergencyHandler value: parameter value: initialContext].	parameter aboutToDebug.	^parameter parameterIsTopOfStack ifTrue:			[Notifier openException: parameter]		ifFalse:			[Notifier openContext: initialContext				label: self description				proceedable: self isResumable]</body></methods><methods><class-id>CraftedSmalltalk.ContextDumpPolicy</class-id> <category>private printing</category><body package="VerboseProcessDump">basicPrintIdentityHashOf: anObject	| identityHash |	identityHash := self identityHashOfObject: anObject.	"ignore immediates (hash is returned as 0) and other primitive objects, like nil or true &amp; false"	identityHash &gt; 10		ifTrue: 			[stream space.			identityHash printOn: stream base: 16]</body><body package="VerboseProcessDump">basicPrintObject: anObject	stream nextPutAll: (((self _objectClass: anObject) name at: 1) isVowel				ifTrue: ['an ']				ifFalse: ['a ']).	stream print: (self _objectClass: anObject).	"overridden here to include the identityHash of the receiver, if available."	self basicPrintIdentityHashOf: anObject</body><body package="VerboseProcessDump">basicPrintVarName: aString value: anObject	stream nextPutAll: aString.	stream nextPutAll: ' = '.	[anObject forStackDumpPrintUsing: self]		on: Error		do: [:ex1 | 			[self basicPrintObject: anObject]				on: Error				do: [:ex2 | stream nextPutAll: (#ErrorInPrintingObject &lt;&lt; #pdp &gt;&gt; 'Error in printing object') asString]].	self basicPrintIdentityHashOf: anObject.</body><body package="VerboseProcessDump">identityHashOfObject: anObject	"	self new identityHashOfObject: Object new. 	self new identityHashOfObject: 5. 	self new identityHashOfObject: self new.  	"	| class |	class := self _objectClass: anObject.	class hasImmediateInstances ifTrue: [^0].	^((self class compiledMethodAt: #privateIdentityHash) copy)		mclass: class;		valueWithReceiver: anObject arguments: #()</body><body package="VerboseProcessDump">privateIdentityHash	"this method returns the identityHash of the receiver. It is used by #identityHashOfObject: to be evaluated 	with some other receiver, because there is no primitive for #identityHashOf: anObject, like there is to get 	the class of an object."	&lt;primitive: 75&gt;	^self primitiveFailed</body></methods><methods><class-id>Kernel.ProcessorScheduler</class-id> <category>printing</category><body package="VerboseProcessDump">verbosePrintAllOnFile	VerboseFileAccess writeToFile: 'stack.txt'		using: 			[:stream |						(Process allInstances				asSortedCollection: [:a :b | a priority &gt; b priority]) do: 						[:proc |						| context |						context := proc == activeProcess									ifTrue: [thisContext]									ifFalse: [proc suspendedContext].						context							ifNotNil: 								[stream									next: 80 put: $*;									cr;									nextPutAll: ('Process &lt;1p&gt; priority: &lt;2p&gt;' expandMacrosWith: proc name												with: proc priority).								context verbosePrintOn: stream]]]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Context</name><environment>Kernel</environment><super>Kernel.InstructionStream</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sender receiver stackp stack </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>UnhandledException</name><environment>Core</environment><super>Core.GenericException</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Exception Handling</category><attributes><package>Kernel-Exception Handling</package></attributes></class><class><name>ProcessorScheduler</name><environment>Kernel</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>quiescentProcessLists activeProcess pausedProcesses </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Processes</category><attributes><package>Kernel-Processes</package></attributes></class><class><name>ContextDumpPolicy</name><environment>CraftedSmalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stack stream numberToDump errorMessage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category><attributes><package>Debugger-UI</package></attributes></class></st-source>