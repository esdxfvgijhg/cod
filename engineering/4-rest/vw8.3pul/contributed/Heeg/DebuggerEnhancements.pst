<?xml version="1.0"?><st-source><!-- Name: DebuggerEnhancementsBinarySave: falseBundleName: DebuggerEnhancementsBundleStructure: a Store.BundleForParcel 3BEEComment: This Bundle is a collection of enhancements to ease debugging in VisualWorks.It includes: 		DebuggerColors - color the stack frames in the debugger to see overrides and the selected context	RBRecursionJumpBack - jump back to the start of a recursion	DebuggerAdditions - disable breakpoints and halts while shift is pressed 						and provide #printTopOfStackToTranscript: to print the stack to the Transcript.						shift-option-bluebutton click to see a list of the widgets to inspect them	DebuggerRefactorings - adds a refactoring menu to the debugger	GraphicsContextInspector - send #inspectContext to a graphics context to see where the clipping area is and in which area the context is currently drawing	Inquisitor - send #inquisition to any object to inspect changes to the object's instance variables	ProbeEnabler - adds a tool to the Launcher at Debug->Probe Enabler that can re-arm one shot probes in a simple window.DialectVersion: VisualWorks 7.9Parcel: nilParcelName: DebuggerEnhancementsPrerequisiteParcels: #(#('Base VisualWorks' '') #('Debugger-Support' ''))Version: 8.2 - 4Date: 3:14:59 PM January 16, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2.1 (dec16.1) of 22. Dezember 2016 on 16. Januar 2017 at 15:14:59</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>InquisitorIcons</name><environment>Tools</environment><super>Tools.IconLibrary</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Inquisitor</package></attributes></class><comment><class-id>Tools.InquisitorIcons</class-id><body>InquisitorIcons contains the icons that are shown in the Refactoring Browser for object breakpoints</body></comment><class><name>InspectableRectangle</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stringValue enabled inspector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GraphicsContextInspector</package></attributes></class><comment><class-id>InspectableRectangle</class-id><body>InspectableRectangle represents a rectangle that will be displayed by the ContextPreviewView, if it is enabled. It is shown in the inspector in the rectangle list. It works on a string that can be converted into a rectangle by executing it as smalltalk code.When the stringValue or the enabled variable changes, the inspector is notified and it will update the preview.Instance Variables	enabled		&lt;Boolean&gt;						if enabled, the rectangle will be shown, otherwise not	inspector	&lt;GraphicsContextInspector&gt;			stringValue	&lt;String&gt;						the string of the rectangle. It is evaluated to get the actual rectangle.</body></comment><class><name>ColoredDebuggerClient</name><environment>CraftedSmalltalk</environment><super>CraftedSmalltalk.DebuggerClient2</super><private>false</private><indexed-type>none</indexed-type><inst-vars>namespaceColors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>DebuggerColors</package></attributes></class><comment><class-id>CraftedSmalltalk.ColoredDebuggerClient</class-id><body>ColoredDebuggerClient is a subclass of DebuggerClient2. It provides a colored stack-view, allowing for instant identification of Overrides. It also renders the current context bold and all other contexts that originate in the same method. That allows for easy navigation to the home method of the current context.</body></comment><class><name>InquisitorProbe</name><environment>CraftedSmalltalk</environment><super>CraftedSmalltalk.CodeProbe</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Inquisitor</package></attributes></class><comment><class-id>CraftedSmalltalk.InquisitorProbe</class-id><body>InquisitorProbe is a probe that only halts if the receiver is a certain objectInstance Variables	object	&lt;Object&gt;	the object for which the probe should halt.</body></comment><class><name>InstanceVariable</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name object variableIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GraphicsContextInspector</package></attributes></class><comment><class-id>InstanceVariable</class-id><body>InstanceVariable is an instance variable of a graphics context. It has a name, the object on which it works and the index of the instance variable. Its stringValue is already read from the living object.Instance Variables	name			&lt;String&gt;		object			&lt;Object&gt;		variableIndex	&lt;Integer&gt;	</body></comment><class><name>RecursionDetector</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>RBRecursionJumpBack</package></attributes></class><comment><class-id>RecursionDetector</class-id><body>RecursionDetector is a class that can be used to detect recursions in a sequencable collection.Usage / Tests	(self new recursionSizeOfCollection:#() ) = 0	(self new recursionSizeOfCollection:#(a a a a a a b) ) = 1	(self new recursionSizeOfCollection:#(a b a b a b a b a b a d) ) = 2	(self new recursionSizeOfCollection:#(a b c a b c a b c d) ) = 3	(self new recursionSizeOfCollection: #(a b c d e f) ) = 0</body></comment><class><name>InquisitorOneShotProbe</name><environment>CraftedSmalltalk</environment><super>CraftedSmalltalk.OneshotProbe</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Inquisitor</package></attributes></class><comment><class-id>CraftedSmalltalk.InquisitorOneShotProbe</class-id><body>InquisitorOneShotProbe is a one-shot probe that only halts if the receiver is a certain objectInstance Variables	object	&lt;Object&gt;	the object for which the probe should halt.</body></comment><class><name>GraphicsContextWrapper</name><environment>UI</environment><super>Graphics.GraphicsContext</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actualContext inspector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GraphicsContextInspector</package></attributes></class><comment><class-id>UI.GraphicsContextWrapper</class-id><body>GraphicsContextWrapper is a wrapper around a normal graphicsContext. Whenever a prim-Method is called, it is passed to the actual context, so that the drawing is performed. When that happens, a notification is sent to the inspector so that it can refresh the preview.When the wrapper is put into an inspector, it is made immutable. The GraphicsContextModificationTracker handles the immutability violations and also executes them on the actualContext instanceVariable.Instance Variables	actualContext	&lt;GraphicsContext&gt;					my graphicsContext.	inspector		&lt;GraphicsContextInspector&gt;	 		the inspector that is notified when things change or are done in the graphicsContext</body></comment><class><name>ContextPreviewView</name><environment>UI</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>context highlightRect inspectableRectangles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GraphicsContextInspector</package></attributes></class><comment><class-id>UI.ContextPreviewView</class-id><body>ContextPreviewView can display a GraphicsContext together with some debugging information like clipping rectangle and a highlighting rectangle. The highlighting rectangle is set by the inspector that contains this view. It displays for example the area where a rectangle is displayed.Instance Variables	context					&lt;GraphicsContext&gt;		highlightRect			&lt;Rectangle&gt;		inspectableRectangles 	&lt;Array of: Rectangle&gt;</body></comment><class><name>ProbeInMethod</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>enabled method probe </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProbeEnabler</package></attributes></class><comment><class-id>ProbeInMethod</class-id><body>ProbeInMethod represents a probe in a methodInstance Variables	method	&lt;ProbedCompiledMethod&gt;		probe	&lt;OneshotProbe&gt;			</body></comment><class><name>InterrogatedObject</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>identityString inquisitor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Inquisitor</package></attributes></class><comment><class-id>InterrogatedObject</class-id><body>InterrogatedObject is an object shown in the list of interrogated objects in the Inquisitor. It knows the object's identifying string and the inquisitor. all information regarding the object is retrieved from the inquisitor.Instance Variables	identityString	&lt;String&gt;		String identifying the object in the inquisitor	inquisitor		&lt;Inquisitor&gt;		the inquisitor</body></comment><class><name>GraphicsContextModificationTracker</name><environment>Core</environment><super>Core.ModificationTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>inspector trackedContexts </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GraphicsContextInspector</package></attributes></class><comment><class-id>Core.GraphicsContextModificationTracker</class-id><body>GraphicsContextModificationTracker tracks immutability violations in the GraphicsContextWrapper. When that happens, the instanceVariables are modified in both the wrapperContext and its actualContext. then the inspector is notified that the instance variables changed.Instance Variables	inspector			&lt;GraphicsContextInspector&gt;						trackedContexts		&lt;IdentitySet of: GraphicsContextWrapper&gt;	</body></comment><class><name>ProbeEnabler</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectedMethod probedMethods refreshProcess </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>ProbeEnabler</package></attributes></class><comment><class-id>ProbeEnabler</class-id><body>ProbeEnabler lists all one-shot probes and allows for quick rearming of those.Usage	ProbeEnabler openInstance Variables	probedMethods	&lt;SelectionInList&gt;	the ProbeInMethod objects displayed in the list	refreshProcess	&lt;Process&gt;			the process that runs in the background and refreshes the list	selectedMethod	&lt;ValueModel&gt;		the object that's currently selected in the list</body></comment><class><name>Inquisitor</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectedObject trackedObjects updateProcess tracker mutationStacks mutations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Inquisitor</package></attributes></class><comment><class-id>Inquisitor</class-id><body>Inquisitor is the application model that displays a list of tracked objects and for each object is can have a list of mutation stacks.The idea of the inquisitor is that it has objects that it observes and when an instance variable of that object changes, it makes a stackdump of that moment. Then you can inspect when a certain value was set. That can be useful when you cannot set breakpoints and when you only want to observe certain objects.Usage	"open the inquisitor on an object by sending #inquisition to it"	anObject inquisition	"check firstIndex and lastIndex in the dialog that appears, when you add something to the OrderedCollection here. 	Then you will see that there're mutations and when you select the tracked object it'll list the different mutations"	OrderedCollection new inquisition; inspect	Instance Variables	mutationStacks	&lt;SelectionInList&gt;	stack of the mutations. Doubleclick to open the stack	selectedObject	&lt;ValueModel&gt;		selection of the tracked objects	trackedObjects	&lt;SelectionInList&gt;	list of objects that are tracked	tracker			&lt;InquisitorTracker&gt;	the tracker that observes the objects	updateProcess	&lt;Process&gt;			a process that redraws the list and updates it</body></comment><class><name>ContextRecursionDetector</name><environment>Smalltalk</environment><super>RecursionDetector</super><private>false</private><indexed-type>none</indexed-type><inst-vars>maxRecursionDepth </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>RBRecursionJumpBack</package></attributes></class><comment><class-id>ContextRecursionDetector</class-id><body>ContextRecursionDetector is a recursion detector on Context Objects, finding recursion on the stack.Usage / Tests:	(self recursionSizeOfContext: thisContext) = 0.	(self singleRecursionSizeOf: 10) = 1	(self doubleRecursionSizeOf: 10) = 2 	(self trippleRecursionSizeOf: 10) = 3</body></comment><class><name>InquisitorTracker</name><environment>Smalltalk</environment><super>Core.ModificationTracker</super><private>false</private><indexed-type>none</indexed-type><inst-vars>trackedObjects inquisitor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Inquisitor</package></attributes></class><comment><class-id>InquisitorTracker</class-id><body>InquisitorTracker is a ModificationTracker subclass that works together with the Inquisitor.It keeps track of the objects. When an object is changed, it identifies the instance variable that changed and sees if it has to track that change. If so, it creates an MutationStack object from that moment for the instance variable and its new value. The MutationStack is then passed to the Inquisitor.Instance Variables	inquisitor		&lt;Inquisitor&gt;						trackedObjects	&lt;EphemeronDictionary&gt;		this dictionary stores Object -&gt; Set of Symbols. 												The objects are the object that are tracked.												the symbols are the instance variables of that object that are tracked.</body></comment><class><name>MutationStack</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>instVarName valueString stack </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Inquisitor</package></attributes></class><comment><class-id>MutationStack</class-id><body>MutationStack is a snapshot created for an object, when an instance variable receives a new value.Usage	self createWithVariable: 'age' value: 5Instance Variables	instVarName	&lt;String&gt;	name of the instance variable	stack			&lt;String&gt;	printString of the value that was assigned to the instance variable	valueString		&lt;String&gt;	stack-dump string that has one frame per line from the moment where the value was changed</body></comment><class><name>GraphicsContextInspector</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>selectedVariable instanceVariables graphicsContext modificationTracker variableDictionary contextPreview selectedRectangleToInspect inspectRectangles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GraphicsContextInspector</package></attributes></class><comment><class-id>GraphicsContextInspector</class-id><body>GraphicsContextInspector shows a graphics context as object with instance variables. It also shows its graphics in a view, highlighting the clipping rect etc. It also has a list of rectangles that can additionally be highlighted in the inspector.Instance Variables	contextPreview					&lt;ContextPreviewView&gt;					the view where the preview of the context is displayed	graphicsContext					&lt;GraphicsContextWrapper&gt;				the wrapped graphicsContext that is inspected	inspectRectangles				&lt;SelectionInList&gt;						the dataset that displays the rectangles	instanceVariables				&lt;SelectionInList&gt;						the dataset that displays the instance variables	modificationTracker				&lt;GraphicsContextModificationTracker&gt;	the modificationTracker that receives notifications, when the context changes its instvars	selectedRectangleToInspect		&lt;ValueModel&gt;							selection of the rectangle-dataset	selectedVariable				&lt;ValueModel&gt;							selection of the variables-dataset	variableDictionary				&lt;Dictionary of: InstanceVariable&gt;		the instance variables of the context that are displayed in the dataset</body></comment><class><name>NewInspectableRectangle</name><environment>Smalltalk</environment><super>InspectableRectangle</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GraphicsContextInspector</package></attributes></class><comment><class-id>NewInspectableRectangle</class-id><body>NewInspectableRectangle is always the last item in the list of rectangles. When its string value changes, an InspectableRectangle object is created and replaces the NewInspectableRectangle. Then a new NewInspectableRectangle is appended to the list. That's all done in the inspector.</body></comment><shared-variable><name>LastHalt</name><environment>Core.Object</environment><private>false</private><constant>false</constant><category>DebugTimer</category><initializer>nil</initializer><attributes><package>DebuggerAdditions</package></attributes></shared-variable><methods><class-id>Tools.InquisitorIcons</class-id> <category>initialize-release</category><body package="Inquisitor">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Tools.InquisitorIcons</class-id> <category>accessing</category><body package="Inquisitor">defaultIconSize	^self class iconSize</body></methods><methods><class-id>Tools.InquisitorIcons class</class-id> <category>accessing</category><body package="Inquisitor">iconSize	^'24x24'</body></methods><methods><class-id>InspectableRectangle</class-id> <category>accessing</category><body package="GraphicsContextInspector">enabled	^enabled</body><body package="GraphicsContextInspector">enabled: anObject	enabled := anObject.	self refreshPreview.</body><body package="GraphicsContextInspector">inspector	^inspector</body><body package="GraphicsContextInspector">inspector: anObject	inspector := anObject</body><body package="GraphicsContextInspector">rectangleValue	| res |	res := [Compiler evaluate: self stringValue] on: Error				do: [:ex | ex return: nil].	(res isKindOf: Rectangle) ifTrue: [^res].	^0 @ 0 extent: 0 @ 0</body><body package="GraphicsContextInspector">refreshPreview	self inspector refreshPreview</body><body package="GraphicsContextInspector">stringValue	^stringValue</body><body package="GraphicsContextInspector">stringValue: anObject	stringValue := anObject.	self refreshPreview.</body></methods><methods><class-id>InspectableRectangle</class-id> <category>initialize-release</category><body package="GraphicsContextInspector">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	stringValue := '0 @ 0 extent: 10@10'.	enabled := true.	inspector := nil.	^self</body></methods><methods><class-id>InspectableRectangle class</class-id> <category>instance creation</category><body package="GraphicsContextInspector">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>InspectableRectangle class</class-id> <category>As yet unclassified</category><body package="GraphicsContextInspector">withString: aByteString	^(self new)		stringValue: aByteString;		yourself</body></methods><methods><class-id>CraftedSmalltalk.ColoredDebuggerClient</class-id> <category>stack list colors</category><body package="DebuggerColors">colorOfNamespace: namespace	^namespaceColors at: namespace fullName ifAbsent: [ColorValue black]</body><body package="DebuggerColors">createSelectedVisualBlockFrom: aBlock 	^	[:v :index | 	| rw |	rw := ReversingWrapper on: (aBlock value: v value: index).	rw reverse setValue: true.	BoundedWrapper on: rw]</body><body package="DebuggerColors">createVisualBlockFrom: block 	^[:view :index | BoundingWrapper on: (block value: view value: index)]</body><body package="DebuggerColors">displayTextFor: aContext	"make overridden contexts appear in red and selected contexts be bold"	| displayText |	displayText := aContext displayString asText.	(self isOverride: aContext)		ifTrue: [displayText emphasizeAllWith: (Array with: #color -&gt; ColorValue red)].	(self isSelected: aContext)		ifTrue: 			[displayText				addEmphasis: #(#bold)				removeEmphasis: #()				allowDuplicates: false].	^displayText , '	' , (self nameSpaceTextFor: aContext)</body><body package="DebuggerColors">iconFor: aContext	"contexts of overridden methods are shown with a warning sign so that this is also 	visible when the context is selected and the color is not shown."	| icons |	icons := Array new writeStream.	(self isOverride: aContext)		ifTrue: [icons nextPut: ToolListIcons warningOverlay].	icons position = 0 ifTrue: [^nil].	^VisualStack withAll: icons contents</body><body package="DebuggerColors">isOverride: aContext	^[(self methodOfContext: aContext) isOverridden] on: Error		do: [:ex | ex return: false]</body><body package="DebuggerColors">isSelected: aContext	^[(self methodOfContext: aContext) = (self methodOfContext: service context)]		on: Error		do: [:ex | ex return: false]</body><body package="DebuggerColors">listLabelForContext: context	"the label has an optional icon and a display text"	| displayText label icon |	displayText := self displayTextFor: context.	icon := self iconFor: context.	label := (icon notNil ifTrue: [LabelAndIcon] ifFalse: [Label])				with: displayText.	label icon: icon.	label offset: (self offsetFor: context andIcon: icon).	^label</body><body package="DebuggerColors">methodOfContext: aContext	"return the method definition of the context, no matter if it is a block context or whatever"	^aContext method homeMethod definition</body><body package="DebuggerColors">nameSpaceTextFor: aContext	| namespace |	namespace := (self methodOfContext: aContext) ifNotNil:[:method | method implementingClass				environment] ifNil:[Smalltalk].	^(' ( &lt;1s&gt; )' expandMacrosWith: namespace name) asText		emphasizeAllWith: (Array with: #italic				with: #color -&gt; (self colorOfNamespace: namespace))</body><body package="DebuggerColors">offsetFor: aContext andIcon: anIcon	"return the offset for the label that is used in the list of contexts. An offset is only needed if the icon is nil."	^anIcon isNil ifTrue: [21 @ 0] ifFalse: [0 @ 0]</body><body package="DebuggerColors">setVisualBlocks	| aBlock |	aBlock := self visualBlockForStackView.	self stackView 		visualBlock: (self createVisualBlockFrom: aBlock);		selectedVisualBlock: (self createSelectedVisualBlockFrom: aBlock).</body><body package="DebuggerColors">visualBlockForStackView	^	[:view :index |	| definition label |	label := 			[definition := service contextList at: index.			self listLabelForContext: definition]					on: Error					do: 						[:ex |						"sometimes the contextList at: will fail because the list is shorter. 						Restarting the block solves the problem. In any case it's save to 						just return an empt label and not display much in that line"						Label with: ''].	label attributes: view textStyle.	label]</body></methods><methods><class-id>CraftedSmalltalk.ColoredDebuggerClient</class-id> <category>menus</category><body package="DebuggerColors">stackMenu	^super stackMenu		augment: #(stackMenu)		from: self class		to: DebuggerClient2		for: self.</body></methods><methods><class-id>CraftedSmalltalk.ColoredDebuggerClient</class-id> <category>interface opening</category><body package="DebuggerColors">postBuildWith: aBuilder	super postBuildWith: aBuilder.	self setVisualBlocks</body></methods><methods><class-id>CraftedSmalltalk.ColoredDebuggerClient</class-id> <category>accessing</category><body package="DebuggerColors">toolbarMenu	^self class toolbarMenu		augment: #(#toolbar)		from: self class		to: DebuggerClient2		for: self</body></methods><methods><class-id>CraftedSmalltalk.ColoredDebuggerClient</class-id> <category>initialize - release</category><body package="DebuggerColors">computeNamespaceColors	^(Dictionary new)		at: #{Smalltalk.Core} fullName put: ColorValue lightGray;		at: #{Smalltalk.Kernel} fullName put: ColorValue darkGray;		at: #{Smalltalk.UI} fullName put: ColorValue pink;		at: #{Smalltalk.Glorp} fullName put: ColorValue olive;		at: #{Smalltalk.SeaBreeze} fullName put: ColorValue orange;		at: #{Smalltalk.Eurydike} fullName put: ColorValue paleGreen;		at: #{Smalltalk.SeaMS2} fullName put: ColorValue purple;		at: #{Smalltalk.Seaside} fullName put: ColorValue salmon;		yourself</body><body package="DebuggerColors">initialize	super initialize.	namespaceColors := self computeNamespaceColors.</body></methods><methods><class-id>CraftedSmalltalk.ColoredDebuggerClient</class-id> <category>updating</category><body package="DebuggerColors">contextChanged	super contextChanged.	self stackView topComponent send: #value		to: 			["using a DeferrableAction seems to be the only way of really having the stackView redraw immediately"			self stackView invalidateNow]</body></methods><methods><class-id>CraftedSmalltalk.ColoredDebuggerClient</class-id> <category>actions</category><body package="RBRecursionJumpBack">jumpBeforeRecursion	"find out the recursion and allow us to jump back to its root.	First find out how deep the recursion is, then jump back the contexts one recursion sequence at a time.	at the end ask the user if he wants to jump back and then tell the debugger to jump to the last context that was found"	| detector size currentContext recursionPattern currentCollection jumpSize result |	detector := ContextRecursionDetector new.	InputState default optionDown		ifTrue: 			[result := Dialog request: 'Maximum Recursion Depth' initialAnswer: '15'.			result notEmpty ifTrue: [detector maxRecursionDepth: result asNumber]].	size := detector recursionSizeOfContext: service context.	size = 0 ifTrue: [^Dialog warn: 'No recursion found'].	currentContext := service context.	recursionPattern := detector first: size				contextsStartingAt: service context.	jumpSize := 0.		[currentCollection := detector first: size				contextsStartingAt: currentContext.	detector		isSubcollection: recursionPattern		inCollection: currentCollection		startingAt: 0]			whileTrue: 				[currentCollection size timesRepeat: 						[currentContext := currentContext sender.						jumpSize := jumpSize + 1]].	(Dialog confirm: ('You are about to jump back &lt;1p&gt; frames'				expandMacrosWith: jumpSize))		ifTrue: 			[service				context: currentContext;				reenter]</body></methods><methods><class-id>CraftedSmalltalk.ColoredDebuggerClient class</class-id> <category>instance creation</category><body package="DebuggerColors">disable	DebuggerService.ClientClass := DebuggerClient2.</body><body package="DebuggerColors">enable	DebuggerService.ClientClass := self.</body></methods><methods><class-id>CraftedSmalltalk.ColoredDebuggerClient class</class-id> <category>initialize-release</category><body package="DebuggerColors">obsolete	self disable.	super obsolete.</body></methods><methods><class-id>CraftedSmalltalk.ColoredDebuggerClient class</class-id> <category>class initialization</category><body package="DebuggerColors">initialize	self enable.</body></methods><methods><class-id>CraftedSmalltalk.InquisitorProbe</class-id> <category>initialize-release</category><body package="Inquisitor">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	object := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>CraftedSmalltalk.InquisitorProbe</class-id> <category>responses</category><body package="Inquisitor">actOn: aContext	aContext home receiver == self object		ifTrue: [super actOn: aContext]</body></methods><methods><class-id>CraftedSmalltalk.InquisitorProbe</class-id> <category>accessing</category><body package="Inquisitor">object	^object</body><body package="Inquisitor">object: anObject	object := anObject</body></methods><methods><class-id>InstanceVariable</class-id> <category>accessing</category><body package="GraphicsContextInspector">name	^name</body><body package="GraphicsContextInspector">name: anObject	name := anObject</body><body package="GraphicsContextInspector">object	^object</body><body package="GraphicsContextInspector">object: anObject	object := anObject</body><body package="GraphicsContextInspector">stringValue	| value |	value := self object instVarAt: self variableIndex.	value isString ifTrue: [^value].	^value printString</body><body package="GraphicsContextInspector">variableIndex	^variableIndex</body><body package="GraphicsContextInspector">variableIndex: anObject	variableIndex := anObject</body></methods><methods><class-id>InstanceVariable</class-id> <category>initialize-release</category><body package="GraphicsContextInspector">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	name := nil.	^self</body></methods><methods><class-id>InstanceVariable class</class-id> <category>instance creation</category><body package="GraphicsContextInspector">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>RecursionDetector</class-id> <category>accessing</category><body package="RBRecursionJumpBack">isEqual: obj1 with: obj2	^obj1 = obj2</body><body package="RBRecursionJumpBack">isSubcollection: anArray inCollection: anArray2 startingAt: start	^anArray2 size &gt;= (start + anArray size) and: 			[(start + 1 to: start + anArray size)				allSatisfy: [:i | self isEqual: (anArray at: i - start) with: (anArray2 at: i)]]</body><body package="RBRecursionJumpBack">maxRecursionDepth	"we stop at a depth of 5"	^5</body><body package="RBRecursionJumpBack">maxRecursionFromCollection: aSequencableCollection	"return the maximum recursion-depth that is possible with this sequencable collection"	^aSequencableCollection size // 2 + 1 min: self maxRecursionDepth</body></methods><methods><class-id>RecursionDetector</class-id> <category>public</category><body package="RBRecursionJumpBack">recursionSizeOfCollection: aSequencableCollection	"returns the size of recursion in the given collection"	| size subCollection i max lastValid |	aSequencableCollection isEmpty ifTrue: [^0].	max := self maxRecursionFromCollection: aSequencableCollection.	lastValid := max.	size := 1.	[size &lt; max] whileTrue: 			[subCollection := aSequencableCollection copyFrom: 1 to: size.			i := 0.						[i := i + size.			self				isSubcollection: subCollection				inCollection: aSequencableCollection				startingAt: i]					whileTrue.			(i &gt; size and: [size \\ lastValid ~= 0]) ifTrue: [lastValid := size].			size := size + 1].	lastValid = max ifTrue: [^0].	^lastValid</body></methods><methods><class-id>RecursionDetector class</class-id> <category>instance creation</category><body package="RBRecursionJumpBack">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>CraftedSmalltalk.InquisitorOneShotProbe</class-id> <category>accessing</category><body package="Inquisitor">object	^object</body><body package="Inquisitor">object: anObject	object := anObject</body></methods><methods><class-id>CraftedSmalltalk.InquisitorOneShotProbe</class-id> <category>responses</category><body package="Inquisitor">actOn: aContext	aContext home receiver == self object		ifTrue: [super actOn: aContext]</body></methods><methods><class-id>CraftedSmalltalk.InquisitorOneShotProbe</class-id> <category>initialize-release</category><body package="Inquisitor">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	object := nil.	^self</body></methods><methods><class-id>UI.GraphicsContextWrapper</class-id> <category>private</category><body package="GraphicsContextInspector">primCopyMaskedArea: aMask from: aGraphicsContext sourceOffset: srcOffsetPoint destinationOffset: destOffsetPoint 	self handlePrimCall</body><body package="GraphicsContextInspector">primCopyRectangularAreaExtent: extentPoint from: aGraphicsContext sourceOffset: srcOriginPoint destinationOffset: destOriginPoint 	self handlePrimCall</body><body package="GraphicsContextInspector">primDisplayArcBBoxOrigin: originPoint extent: extentPoint startAngle: startAngle sweepAngle: sweepAngle 	self handlePrimCall</body><body package="GraphicsContextInspector">primDisplayCharacterOfIndex: characterIndex at: aPoint	self handlePrimCall</body><body package="GraphicsContextInspector">primDisplayLineFrom: startPoint to: endPoint	self handlePrimCall</body><body package="GraphicsContextInspector">primDisplayMappedString: aString from: startIndex to: endIndex at: aPoint withMap: map	"Display the substring of aString from startIndex to endIndex. Place 	the left end of the text baseline at aPoint. Use the default font and 	paint.	Answer the receiver on success, nil on failure."	^self handlePrimCall</body><body package="GraphicsContextInspector">primDisplayMask: aMask at: aPoint 	self handlePrimCall</body><body package="GraphicsContextInspector">primDisplayPolygon: bpoly at: aPoint	self handlePrimCall</body><body package="GraphicsContextInspector">primDisplayPolyline: pointCollection at: aPoint	self handlePrimCall</body><body package="GraphicsContextInspector">primDisplayRectangleOrigin: aPoint extent: extentPoint	self handlePrimCall</body><body package="GraphicsContextInspector">primDisplayRectangularBorderOrigin: aPoint extent: aPoint2	self handlePrimCall</body><body package="GraphicsContextInspector">primDisplayTwoByteString: aString from: startIndex to: endIndex at: aPoint	"Display the substring of aString from startIndex to endIndex. Place 	the left end of the text baseline at aPoint. Use the default font and 	paint."	self handlePrimCall</body><body package="GraphicsContextInspector">primDisplayUninterpretedImageBits: anImage at: aPoint	self handlePrimCall</body><body package="GraphicsContextInspector">primDisplayUninterpretedMonoImageBits: anImage		foreground: foregroundPixel		background: backgroundPixel		at: aPoint	self handlePrimCall</body><body package="GraphicsContextInspector">primDisplayWedgeBBoxOrigin: aPoint		extent: aPoint2		startAngle: startAngle		sweepAngle: sweepAngle	self handlePrimCall</body></methods><methods><class-id>UI.GraphicsContextWrapper</class-id> <category>accessing</category><body package="GraphicsContextInspector">actualContext	^actualContext</body><body package="GraphicsContextInspector">actualContext: anObject	actualContext := anObject</body><body package="GraphicsContextInspector">inspector	^inspector</body><body package="GraphicsContextInspector">inspector: anObject	inspector := anObject</body><body package="GraphicsContextInspector">inspectorForUpdates		self inspector prepareFromGraphicsContext: self.	^self inspector</body><body package="GraphicsContextInspector">makeInspectable	^self</body><body package="GraphicsContextInspector">revertInspectable	self beMutable.	self become: self actualContext</body></methods><methods><class-id>UI.GraphicsContextWrapper</class-id> <category>initialize-release</category><body package="GraphicsContextInspector">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	actualContext := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>UI.GraphicsContextWrapper</class-id> <category>copying</category><body package="GraphicsContextInspector">copy	| copy |	copy := self actualContext copy makeInspectable.	self inspector ifNotNil:[self inspector trackContext: copy].	^copy</body></methods><methods><class-id>UI.GraphicsContextWrapper</class-id> <category>very private</category><body package="GraphicsContextInspector">handlePrimCall	"being totally lazy here. Instead of implementing each #primBlah: method to send it to the actualContext, 	we use some thisContext hacking to get the selector and the arguments from the stack and just pass 	it on to the actualContext.	The positive side-effect is that we only have one place where we report our inspector that the context is displaying something"	| senderContext selector arguments res |	senderContext := thisContext sender.	selector := senderContext selector.	arguments := senderContext stack first: senderContext selector numArgs.	res := self actualContext perform: selector withArguments: arguments.	self inspectorForUpdates contextIsExecuting: selector withArguments: arguments.	^res</body></methods><methods><class-id>UI.GraphicsContextWrapper</class-id> <category>tracing</category><body package="GraphicsContextInspector">inspectContext	self actualContext inspectContext</body></methods><methods><class-id>UI.GraphicsContextWrapper</class-id> <category>displaying</category><body package="GraphicsContextInspector">copyMaskedArea: aMaskOrImage fromPixelArray: anImageOrPixmap sourceOffset: srcOffsetPoint destinationOffset: destOffsetPoint 	^self handlePrimCall</body><body package="GraphicsContextInspector">displayCharacterOfIndex: characterIndex at: aPoint	self inspectorForUpdates goingToDrawRectangle: (aPoint extent: 1@1).	^super displayCharacterOfIndex: characterIndex at: aPoint</body><body package="GraphicsContextInspector">displayRectangle: aRectangle	self inspectorForUpdates goingToDrawRectangle: aRectangle.	^super displayRectangle: aRectangle</body><body package="GraphicsContextInspector">displayRectangularBorder: aRectangle	self inspectorForUpdates goingToDrawRectangle: aRectangle.	^super displayRectangularBorder: aRectangle</body></methods><methods><class-id>UI.GraphicsContextWrapper</class-id> <category>clipping</category><body package="GraphicsContextInspector">clippingRectangleOrNil	"Create and answer the clipping rectangle, or nil if not clipping."	(clipOriginX isNil or:[clipOriginY isNil]) ifTrue:[^nil].	(clipWidth isNil or:[clipHeight isNil]) ifTrue:[^nil].	^super clippingRectangleOrNil.</body></methods><methods><class-id>UI.GraphicsContextWrapper class</class-id> <category>instance creation</category><body package="GraphicsContextInspector">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>UI.ContextPreviewView</class-id> <category>accessing</category><body package="GraphicsContextInspector">context	^context</body><body package="GraphicsContextInspector">context: anObject	context := anObject</body><body package="GraphicsContextInspector">highlightRect	^highlightRect</body><body package="GraphicsContextInspector">highlightRect: anObject	highlightRect := anObject</body><body package="GraphicsContextInspector">inspectableRectangles	^inspectableRectangles</body><body package="GraphicsContextInspector">inspectableRectangles: anObject	inspectableRectangles := anObject</body></methods><methods><class-id>UI.ContextPreviewView</class-id> <category>initialize-release</category><body package="GraphicsContextInspector">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	context := nil. 	highlightRect := 0 @ 0 extent: 0 @ 0.	inspectableRectangles := #().	^self</body></methods><methods><class-id>UI.ContextPreviewView</class-id> <category>displaying</category><body package="GraphicsContextInspector">displayOn: aGraphicsContext	| medium image colors rectangles lineWidth |	(self context notNil and: [self context medium notNil])		ifTrue: 			[medium := self context medium.			image := self snapshotOfMedium: medium.			image displayOn: aGraphicsContext.			colors := (Array with: ColorValue blue with: ColorValue green)						, (Array new: self inspectableRectangles size withAll: ColorValue cyan).			rectangles := (Array with: self highlightRect						with: self context clippingBounds) , self inspectableRectangles.			lineWidth := 3.			aGraphicsContext lineWidth: lineWidth.			colors with: rectangles				do: 					[:color :rect |					rect area &gt; 0						ifTrue: 							[aGraphicsContext paint: color.							aGraphicsContext								displayRectangularBorder: ((rect translatedBy: self context translation)										insetBy: lineWidth / -2)]]]</body><body package="GraphicsContextInspector">snapshotOfMedium: medium	| image imageAndDamage |		[imageAndDamage := medium				contentsOfArea: (self bounds intersect: medium bounds).	image := imageAndDamage at: 1]			on: Error			do: 				[:ex |				image := Image cincomSmalltalkLogo.				ex return: nil].	^image</body></methods><methods><class-id>ProbeInMethod</class-id> <category>accessing</category><body package="ProbeEnabler">definitionString	^'&lt;1s&gt;--&lt;2s&gt;' expandMacrosWith: self method selector with: self method mclass name</body><body package="ProbeEnabler">enabled	^self probe isArmed</body><body package="ProbeEnabler">enabled: trueOrFalse	trueOrFalse ifTrue: [self probe rearm] ifFalse: [self probe disarm]</body><body package="ProbeEnabler">method	^method</body><body package="ProbeEnabler">method: anObject	method := anObject</body><body package="ProbeEnabler">probe	^probe</body><body package="ProbeEnabler">probe: anObject	probe := anObject</body></methods><methods><class-id>ProbeInMethod</class-id> <category>initialize-release</category><body package="ProbeEnabler">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	method := nil.	probe := nil.	^self</body></methods><methods><class-id>ProbeInMethod</class-id> <category>comparing</category><body package="ProbeEnabler">= aProbeInMethod	^self class = aProbeInMethod class		and: [self method = aProbeInMethod method]</body><body package="ProbeEnabler">hash	^self method hash</body></methods><methods><class-id>ProbeInMethod class</class-id> <category>instance creation</category><body package="ProbeEnabler">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>InterrogatedObject</class-id> <category>initialize-release</category><body package="Inquisitor">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	identityString := nil.	inquisitor := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>InterrogatedObject</class-id> <category>accessing</category><body package="Inquisitor">editAspects	^false</body><body package="Inquisitor">editAspects: aBoolean	^self inquisitor editAspectsForObjectWithIdentifier: self identityString</body><body package="Inquisitor">identityString	^identityString</body><body package="Inquisitor">identityString: anObject	identityString := anObject</body><body package="Inquisitor">inquisitor	^inquisitor</body><body package="Inquisitor">inquisitor: anObject	inquisitor := anObject</body><body package="Inquisitor">isTracked	^self inquisitor tracksObjectWithIdentifier: self identityString.</body><body package="Inquisitor">isTracked: aBoolean	"used to untrack an object"	aBoolean		ifFalse: [self inquisitor untrackObjectWithIdentifier: self identityString]</body><body package="Inquisitor">mutationCount	^self inquisitor mutationCountsWithIdentifier: self identityString.</body></methods><methods><class-id>InterrogatedObject</class-id> <category>comparing</category><body package="Inquisitor">= anInterrogatedObject	^self class = anInterrogatedObject class		and: [self identityString = anInterrogatedObject identityString]</body><body package="Inquisitor">hash	^self identityString hash</body></methods><methods><class-id>InterrogatedObject class</class-id> <category>instance creation</category><body package="Inquisitor">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Core.GraphicsContextModificationTracker</class-id> <category>accessing</category><body package="GraphicsContextInspector">inspector	^inspector</body><body package="GraphicsContextInspector">inspector: anObject	inspector := anObject</body></methods><methods><class-id>Core.GraphicsContextModificationTracker</class-id> <category>private</category><body package="GraphicsContextInspector">applyModificationTo: anObject selector: selector index: index value: value	super applyModificationTo: anObject selector: selector index: index value: value.	super applyModificationTo: anObject actualContext selector: selector index: index value: value.	self inspector ifNotNil:[		self inspector prepareFromGraphicsContext: anObject.			self inspector instanceVariable: (anObject class allInstVarNames at: index) changedTo: value.	]</body><body package="GraphicsContextInspector">privateTrack: anObject	trackedContexts add: anObject</body><body package="GraphicsContextInspector">privateUntrack: anObject	trackedContexts remove: anObject.</body></methods><methods><class-id>Core.GraphicsContextModificationTracker</class-id> <category>initialize-release</category><body package="GraphicsContextInspector">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	trackedContexts := IdentitySet new.	^self</body></methods><methods><class-id>Core.GraphicsContextModificationTracker</class-id> <category>api - tracking</category><body package="GraphicsContextInspector">isTracking: anObject	^trackedContexts includes: anObject</body></methods><methods><class-id>ProbeEnabler</class-id> <category>accessing</category><body package="ProbeEnabler">oneShotProbes	| methods |	methods := OrderedCollection new.	ProbedCompiledMethod allInstalledProbedMethods do: 			[:method |			method allProbesDo: 					[:probe |					probe isOneshot						ifTrue: 							[methods add: ((ProbeInMethod new)										method: method;										probe: probe;										yourself)]]].	^methods</body><body package="ProbeEnabler">refreshProcess	^refreshProcess</body><body package="ProbeEnabler">refreshProcess: anObject	refreshProcess := anObject</body><body package="ProbeEnabler">updateProbes	| newList |	newList := self oneShotProbes sorted: #definitionString ascending.	newList = self probedMethods list ifTrue: [^self].	self probedMethods refreshList: newList</body></methods><methods><class-id>ProbeEnabler</class-id> <category>initialize-release</category><body package="ProbeEnabler">initialize	super initialize.	self updateProbes.	self refreshProcess: ([self refreshListLoop]				forkAt: Processor userBackgroundPriority)</body><body package="ProbeEnabler">refreshDataSetView	| widget |	widget := self widgetAt: #probedMethods.	widget isNil ifTrue:[^false].	widget invalidateRectangle: widget bounds repairNow: true.	^true.</body><body package="ProbeEnabler">refreshListLoop		[1 seconds wait.	self updateProbes.	self refreshDataSetView] whileTrue</body></methods><methods><class-id>ProbeEnabler</class-id> <category>aspects</category><body package="ProbeEnabler">probedMethods	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^probedMethods isNil		ifTrue:			[probedMethods :=  SelectionInList new.			probedMethods selectionIndexHolder compute:				[:v |				self selectedMethod value: probedMethods selection].			probedMethods]		ifFalse:			[probedMethods]</body><body package="ProbeEnabler">selectedMethod	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^selectedMethod isNil		ifTrue:			[selectedMethod := nil asValue]		ifFalse:			[selectedMethod]</body></methods><methods><class-id>ProbeEnabler</class-id> <category>interface closing</category><body package="ProbeEnabler">noticeOfWindowClose: aWindow 	self refreshProcess terminate.</body></methods><methods><class-id>ProbeEnabler</class-id> <category>actions</category><body package="ProbeEnabler">browseProbes	PDPManager browseAllProbedMethods</body></methods><methods><class-id>Inquisitor</class-id> <category>accessing</category><body package="Inquisitor">editAspectsForObjectWithIdentifier: aString	| object |	object := self tracker trackedObjectWithIdentityString: aString.	self selectTrackedAspectsOfObject: object</body><body package="Inquisitor">mutationCountsWithIdentifier: aString	| mutations |	mutations := self mutationsWithIdentifier: aString.	^mutations size.</body><body package="Inquisitor">mutations	^mutations</body><body package="Inquisitor">mutations: anObject	mutations := anObject</body><body package="Inquisitor">mutationsWithIdentifier: aString	^self mutations at: aString ifAbsent: [#()]</body><body package="Inquisitor">openSelectedMutationStack	| stack |	stack := self mutationStacks selection ifNil: [^self] ifNotNil: #stack.	Dialog confirmReport: stack</body><body package="Inquisitor">selectTrackedAspectsOfObject: anObject	| names trackedNames |	names := anObject class allInstVarNames sorted.	trackedNames := SimpleDialog new				chooseMultiple: 'Which instance variable changes do you want to observe?'				fromList: names				values: names				initialSelections: ((self tracker trackedAspectsForObject: anObject) collect:#asString)				buttons: #()				values: #()				lines: 8				cancel: [^#()]				for: Dialog defaultParentWindow.	^trackedNames</body><body package="Inquisitor">startTrackingObject: anObject	| trackedNames |	trackedNames := self selectTrackedAspectsOfObject: anObject.	self startTrackingObject: anObject forChangingAspects: trackedNames</body><body package="Inquisitor">startTrackingObject: anObject forChangingAspects: trackedNames	self tracker track: anObject.	self tracker trackAspects: trackedNames ofObject: anObject</body><body package="Inquisitor">tracker	^tracker</body><body package="Inquisitor">tracker: anObject	tracker := anObject</body><body package="Inquisitor">tracksObjectWithIdentifier: aByteString	^(self tracker trackedObjectWithIdentityString: aByteString) notNil</body><body package="Inquisitor">untrackObjectWithIdentifier: aString	| object |	object := self tracker trackedObjectWithIdentityString: aString.	self tracker untrack: object.</body></methods><methods><class-id>Inquisitor</class-id> <category>initialize-release</category><body package="Inquisitor">addMutationStack: aMutationStack forObjectWithIdentifier: aString	(mutations at: aString ifAbsentPut: [OrderedCollection new])		add: aMutationStack.	self selectedObjectChanged.</body><body package="Inquisitor">checkIfObjectListNeedsNewObjects	| interrogatedObjects |	interrogatedObjects := ((self tracker ifNotNil:#identityStrings ifNil:[#()]) collect: 					[:each |					(InterrogatedObject new)						identityString: each;						inquisitor: self;						yourself])				sorted: #identityString ascending.	self trackedObjects list = interrogatedObjects ifTrue: [^self].	self trackedObjects list: interrogatedObjects</body><body package="Inquisitor">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	mutations := Dictionary new.	tracker := (InquisitorTracker new)				inquisitor: self;				yourself.	updateProcess := [self updateProcessLoop]				forkAt: Processor userBackgroundPriority.	self selectedObject onChangeSend: #selectedObjectChanged to: self.	^self</body><body package="Inquisitor">redrawObjectList	| widget |	widget := self widgetAt: #trackedObjects.	widget isNil ifTrue: [^false].	widget invalidateRectangle: widget bounds repairNow: true.	^true</body><body package="Inquisitor">selectedObjectChanged	| currentMutations |	currentMutations := self				mutationsWithIdentifier: (self selectedObject value						ifNotNil: #identityString).	self mutationStacks list: currentMutations</body><body package="Inquisitor">updateProcessLoop		[1 seconds wait.	self checkIfObjectListNeedsNewObjects.	self redrawObjectList]			whileTrue</body></methods><methods><class-id>Inquisitor</class-id> <category>aspects</category><body package="Inquisitor">mutationStacks	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^mutationStacks isNil		ifTrue:			[mutationStacks := SelectionInList new]		ifFalse:			[mutationStacks]</body><body package="Inquisitor">selectedObject	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^selectedObject isNil		ifTrue:			[selectedObject := nil asValue]		ifFalse:			[selectedObject]</body><body package="Inquisitor">trackedObjects	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^trackedObjects isNil		ifTrue:			[trackedObjects :=  SelectionInList new.			trackedObjects selectionIndexHolder compute:				[:v |				self selectedObject value: trackedObjects selection].			trackedObjects]		ifFalse:			[trackedObjects]</body></methods><methods><class-id>Inquisitor</class-id> <category>interface closing</category><body package="Inquisitor">noticeOfWindowClose: aWindow	super noticeOfWindowClose: aWindow.	self tracker release.	self tracker: nil.	updateProcess ifNotNil:#terminate.	updateProcess := nil.</body></methods><methods><class-id>Inquisitor class</class-id> <category>interface opening</category><body package="Inquisitor">open	self openWindow</body><body package="Inquisitor">openInquisitor	"open or activate the inquisitor window and return the application mode"	^self openWindow model</body><body package="Inquisitor">openWindow	"use #noRaiseSingleInstance because when the inquisitor is used, fragile stuff is debugged 	and raising a window, which changes focus and all that stuff, can be less helpfull than just ensure that a window is open"	^self noRaiseSingleInstance ifNil: [super open window]</body></methods><methods><class-id>ContextRecursionDetector</class-id> <category>accessing</category><body package="RBRecursionJumpBack">isEqual: aContext1 with: aContext2	"lets say two contexts are equal, when the contexts' printStrings are equal"	^aContext1 printString = aContext2 printString</body><body package="RBRecursionJumpBack">maxRecursionDepth	"we stop at a depth of 5"	^maxRecursionDepth ifNil: [15]</body><body package="RBRecursionJumpBack">maxRecursionDepth: aNumber		maxRecursionDepth := aNumber.</body></methods><methods><class-id>ContextRecursionDetector</class-id> <category>private</category><body package="RBRecursionJumpBack">first: maxContextSize contextsStartingAt: startContext	"return the first x contexts on the stack starting at the given startContext."	| context contextCollection |	contextCollection := OrderedCollection new: maxContextSize.	context := startContext.		[contextCollection add: context.	context := context sender.	context notNil and: [contextCollection size &lt; maxContextSize]]			whileTrue.	^contextCollection</body></methods><methods><class-id>ContextRecursionDetector</class-id> <category>public</category><body package="RBRecursionJumpBack">recursionSizeOfContext: startContext	"return the recursion size of the first 20 stacks starting at the current context"	^self		recursionSizeOfCollection: (self first: self maxRecursionDepth * 4 contextsStartingAt: startContext)</body></methods><methods><class-id>ContextRecursionDetector class</class-id> <category>tests</category><body package="RBRecursionJumpBack">__trippleRecursionSizeOf: aNumber	"just passing back to trippleRecursionSizeOf:, so that the recursion has two method inbetween"	aNumber = 0 ifTrue: [^self recursionSizeOfContext: thisContext].	^self trippleRecursionSizeOf: aNumber</body><body package="RBRecursionJumpBack">_doubleRecursionSizeOf: aNumber	"just passing back to doubleRecursionSizeOf:, so that the recursion has one method inbetween"	aNumber = 0 ifTrue: [^self recursionSizeOfContext: thisContext].	^self doubleRecursionSizeOf: aNumber</body><body package="RBRecursionJumpBack">_trippleRecursionSizeOf: aNumber	"just passing back to trippleRecursionSizeOf:, so that the recursion has two method inbetween"	aNumber = 0 ifTrue: [^self recursionSizeOfContext: thisContext].	^self __trippleRecursionSizeOf: aNumber</body><body package="RBRecursionJumpBack">doubleRecursionSizeOf: aNumber	aNumber = 0 ifTrue: [^self recursionSizeOfContext: thisContext].	^self _doubleRecursionSizeOf: aNumber - 1</body><body package="RBRecursionJumpBack">singleRecursionSizeOf: aNumber	aNumber = 0 ifTrue: [^self recursionSizeOfContext: thisContext].	^self singleRecursionSizeOf: aNumber - 1</body><body package="RBRecursionJumpBack">trippleRecursionSizeOf: aNumber	"just passing back to trippleRecursionSizeOf:, so that the recursion has two method inbetween"	aNumber = 0 ifTrue: [^self recursionSizeOfContext: thisContext].	^self _trippleRecursionSizeOf: aNumber - 1</body></methods><methods><class-id>ContextRecursionDetector class</class-id> <category>accessing</category><body package="RBRecursionJumpBack">recursionSizeOfContext: startContext	^self new recursionSizeOfContext: startContext</body></methods><methods><class-id>InquisitorTracker</class-id> <category>initialize-release</category><body package="Inquisitor">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	trackedObjects := (EphemeronDictionary new)				manager: self;				yourself.	^self</body><body package="Inquisitor">mournKeyOf: ephemeron	"not sure if its needed"</body><body package="Inquisitor">release	self trackedObjects keys do: [:each | self untrack: each]</body></methods><methods><class-id>InquisitorTracker</class-id> <category>As yet unclassified</category><body package="Inquisitor">identityStrings	^self trackedObjects keys		collect: [:each | self identityStringForObject: each]</body></methods><methods><class-id>InquisitorTracker</class-id> <category>accessing</category><body package="Inquisitor">identityStringForObject: anObject	^'&lt;1s&gt; [&lt;2p&gt;]' expandMacrosWith: anObject class name		with: anObject identityHash</body><body package="Inquisitor">inquisitor	^inquisitor</body><body package="Inquisitor">inquisitor: anObject	inquisitor := anObject</body><body package="Inquisitor">trackAspects: trackedNames ofObject: anObject	(trackedObjects at: anObject ifAbsent: [IdentityDictionary new])		removeAll;		addAll: (trackedNames collect: #asSymbol).</body><body package="Inquisitor">trackedObjectWithIdentityString: aString	^self trackedObjects keys		detect: [:each | (self identityStringForObject: each) = aString]		ifNone: [^nil]</body><body package="Inquisitor">trackedObjects	^trackedObjects</body><body package="Inquisitor">trackedObjects: anObject	trackedObjects := anObject</body></methods><methods><class-id>InquisitorTracker</class-id> <category>private</category><body package="Inquisitor">applyModificationTo: anObject selector: selector index: index value: value	| trackedAspects instVarName |	super		applyModificationTo: anObject		selector: selector		index: index		value: value.	selector ~= #instVarAt:put: ifTrue:[^self].	trackedAspects := self trackedAspectsForObject: anObject.	instVarName := anObject class instVarNameForIndex: index.	(trackedAspects includes: instVarName asSymbol)		ifTrue: 			[inquisitor				addMutationStack: (MutationStack createWithVariable: instVarName						value: value)				forObjectWithIdentifier: (self identityStringForObject: anObject)]</body><body package="Inquisitor">privateTrack: anObject	trackedObjects at: anObject put: IdentitySet new</body><body package="Inquisitor">privateUntrack: anObject	trackedObjects removeKey: anObject ifAbsent:[]</body><body package="Inquisitor">trackedAspectsForObject: anObject	^trackedObjects at: anObject ifAbsent: [Set new]</body></methods><methods><class-id>InquisitorTracker</class-id> <category>api - tracking</category><body package="Inquisitor">isTracking: anObject	^trackedObjects includesKey: anObject</body></methods><methods><class-id>MutationStack</class-id> <category>accessing</category><body package="Inquisitor">displayString	^'&lt;1s&gt; - &lt;2s&gt;' expandMacrosWith: self instVarName with: self valueString</body><body package="Inquisitor">instVarName	^instVarName</body><body package="Inquisitor">instVarName: anObject	instVarName := anObject</body><body package="Inquisitor">stack	^stack</body><body package="Inquisitor">stack: anObject	stack := anObject</body><body package="Inquisitor">valueString	^valueString</body><body package="Inquisitor">valueString: anObject	valueString := anObject</body></methods><methods><class-id>MutationStack</class-id> <category>initialize-release</category><body package="Inquisitor">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	instVarName := ''.	valueString := nil printString.	stack := ''.	^self</body></methods><methods><class-id>MutationStack class</class-id> <category>instance creation</category><body package="Inquisitor">createStackFrom: aContext	| stack context startContext |	stack := String new writeStream.	"first ignore all that crap regarding immutability."	startContext := aContext.	[startContext isNil or: 			[startContext isBlockContext not and: 					[startContext method mclass = Object						and: [startContext method selector = #attemptToAssign:withIndex:]]]]			whileFalse: [startContext := startContext sender].	context := startContext ifNil: [aContext] ifNotNil:#sender.	"now create the actual context"	[context notNil] whileTrue: 			[stack				nextPutAll: context printString;				cr.			context := context sender].	^stack contents</body><body package="Inquisitor">createWithVariable: aVariableName value: aValue	^(self new)		instVarName: aVariableName;		valueString: aValue printString;		stack: (self createStackFrom: thisContext sender);		yourself</body><body package="Inquisitor">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>GraphicsContextInspector</class-id> <category>aspects</category><body package="GraphicsContextInspector">inspectRectangles	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^inspectRectangles isNil		ifTrue:			[inspectRectangles :=  SelectionInList new.			inspectRectangles selectionIndexHolder compute:				[:v |				self selectedRectangleToInspect value: inspectRectangles selection].			inspectRectangles]		ifFalse:			[inspectRectangles]</body><body package="GraphicsContextInspector">instanceVariables	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^instanceVariables isNil		ifTrue:			[instanceVariables :=  SelectionInList new.			instanceVariables selectionIndexHolder compute:				[:v |				self selectedVariable value: instanceVariables selection].			instanceVariables]		ifFalse:			[instanceVariables]</body><body package="GraphicsContextInspector">selectedRectangleToInspect	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^selectedRectangleToInspect isNil		ifTrue:			[selectedRectangleToInspect := nil asValue]		ifFalse:			[selectedRectangleToInspect]</body><body package="GraphicsContextInspector">selectedVariable	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^selectedVariable isNil		ifTrue:			[selectedVariable := nil asValue]		ifFalse:			[selectedVariable]</body></methods><methods><class-id>GraphicsContextInspector</class-id> <category>initialize-release</category><body package="GraphicsContextInspector">addInspectableRectangleWithString: aString	(self inspectRectangles list)		removeLast;		add: ((InspectableRectangle new)					inspector: self;					stringValue: aString;					yourself).	self addNewInspectableRectangle</body><body package="GraphicsContextInspector">addNewInspectableRectangle	self inspectRectangles list add: ((NewInspectableRectangle new)				inspector: self;				yourself).	self refreshPreview</body><body package="GraphicsContextInspector">contextPreview	contextPreview isNil ifTrue: [contextPreview := ContextPreviewView new].	^contextPreview</body><body package="GraphicsContextInspector">initialize	super initialize.	modificationTracker := GraphicsContextModificationTracker new.	modificationTracker inspector: self.	self addNewInspectableRectangle</body></methods><methods><class-id>GraphicsContextInspector</class-id> <category>accessing</category><body package="GraphicsContextInspector">contextIsExecuting: aSelector withArguments: arguments	self refreshPreview</body><body package="GraphicsContextInspector">goingToDrawRectangle: aRectangle	self contextPreview highlightRect: (aRectangle translatedBy: self graphicsContext translation).</body><body package="GraphicsContextInspector">graphicsContext	^graphicsContext</body><body package="GraphicsContextInspector">graphicsContext: anObject	graphicsContext := anObject</body><body package="GraphicsContextInspector">instanceVariable: aName changedTo: aValue	self refreshInstanceVariableView.	self refreshPreview</body><body package="GraphicsContextInspector">modificationTracker	^modificationTracker</body><body package="GraphicsContextInspector">modificationTracker: anObject	modificationTracker := anObject</body><body package="GraphicsContextInspector">prepareFromGraphicsContext: aContext	self graphicsContext: aContext.	self refreshUIForContext: aContext.</body><body package="GraphicsContextInspector">refreshInstanceVariableView	| widget |	widget := self widgetAt: #instanceVariables.	widget invalidateRectangle: widget bounds repairNow: true</body><body package="GraphicsContextInspector">refreshPreview	| widget |	widget := self contextPreview.	widget inspectableRectangles: ((self inspectRectangles list select:#enabled) collect:#rectangleValue).	widget invalidateRectangle: widget bounds repairNow: true</body><body package="GraphicsContextInspector">refreshUIForContext: anObject	| variables |	variables := anObject class allInstVarNames collect: 					[:each |					(InstanceVariable new)						name: each;						object: anObject;						variableIndex: (anObject class instVarIndexFor: each);						yourself].	variableDictionary := Dictionary				withAll: (variables collect: [:each | each name -&gt; each]).	self instanceVariables list: (variableDictionary sorted: #name ascending).	self contextPreview context: anObject</body><body package="GraphicsContextInspector">trackContext: anObject	self graphicsContext: anObject.	graphicsContext inspector: self.	self modificationTracker track: anObject.	self refreshUIForContext: anObject</body></methods><methods><class-id>GraphicsContextInspector</class-id> <category>interface closing</category><body package="GraphicsContextInspector">noticeOfWindowClose: aWindow	ModificationTracker untrack: self graphicsContext.	self modificationTracker release.	self modificationTracker: nil.	^self graphicsContext revertInspectable</body></methods><methods><class-id>GraphicsContextInspector class</class-id> <category>interface specs</category><body package="GraphicsContextInspector">inspectContext: aGraphicsContext	(self new)		trackContext: aGraphicsContext makeInspectable;		open</body></methods><methods><class-id>NewInspectableRectangle</class-id> <category>accessing</category><body package="GraphicsContextInspector">enabled	^false</body><body package="GraphicsContextInspector">stringValue: aString	super stringValue: aString.	self inspector addInspectableRectangleWithString: aString</body></methods><methods><class-id>NewInspectableRectangle</class-id> <category>initialize-release</category><body package="GraphicsContextInspector">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.		stringValue := 'Edit to create rectangle'.	^self</body></methods><methods><class-id>Kernel.Context</class-id> <category>printing</category><body package="DebuggerAdditions">printTopOfStackUpTo: num on: aStream	| ctx totalDepth topCnt |	totalDepth := self contextStackDepth.	totalDepth &lt;= num ifTrue: [topCnt := totalDepth] ifFalse: [topCnt := num].	ctx := self.	1 to: topCnt		do: 			[:i |			aStream				print: ctx receiver identityHash;				space.			ctx printOn: aStream.			aStream space;nextPut:$#;print: ctx identityHash.			aStream cr.			ctx := ctx sender].	topCnt = totalDepth ifFalse: [aStream nextPutAll: '	*	*	*']</body><body package="DebuggerAdditions">printTopStackUpTo: num	"print the top num entries of the stack"	| aStream |	aStream := String new writeStream.	self printTopOfStackUpTo: num on: aStream.	^aStream contents</body></methods><methods><class-id>Core.Object class</class-id> <category>instance creation</category><body package="DebuggerAdditions">lastHalt	^LastHalt ifNil: [LastHalt := Timestamp now]</body></methods><methods><class-id>Core.Object</class-id> <category>printing</category><body package="DebuggerAdditions">basicPrintOn: aStream 	"overridden to append the identityhash as Hex-String"	| title |	title := self class name.	aStream nextPut: $a.	(title at: 1) isVowel ifTrue: [aStream nextPut: $n].	aStream nextPut: $ .	aStream print: self class.	aStream space.	self identityHash printOn: aStream base: 16</body></methods><methods><class-id>Core.Object</class-id> <category>error handling</category><body package="DebuggerAdditions">breakOn: aContext label: aString 	"This is a simple message to use for inserting breakpoints during debugging.	The debugger is opened by raising a signal."	InputState default shiftDown ifTrue: [^nil].	BreakInterrupt raiseRequestWith: aContext errorString: aString</body><body package="DebuggerAdditions">delayedHalt	"do a halt every 60 seconds. usefull if halts pop up like crazy"	Timestamp now asSeconds - Object lastHalt asSeconds &gt; 60 		ifTrue: 			[LastHalt := Timestamp now.			Object haltSignal raiseRequestWith: thisContext				errorString: #errHalt &lt;&lt; #dialogs &gt;&gt; 'Halt encountered.']</body><body package="DebuggerAdditions">halt	"This is a simple message to use for inserting breakpoints during debugging.	The debugger is opened by raising a signal. This gives a chance to restore	invariants related to multiple processes."	InputState default shiftDown ifTrue: [^nil].	Object haltSignal 				raiseRequestWith: thisContext				errorString: (#errHalt &lt;&lt; #dialogs &gt;&gt; 'Halt encountered.')	"nil halt."</body><body package="DebuggerAdditions">halt: aString 	"This message can be used for inserting breakpoints during debugging.	It creates and schedules a Debugger with the argument, aString, as 	the label. The debugger is opened by raising a signal. This gives a chance	to restore invariants related to multiple processes."	InputState default shiftDown ifTrue: [^nil].	Object haltSignal 				raiseRequestWith: thisContext				errorString: aString	"nil halt: 'Test of halt:.'."</body></methods><methods><class-id>Core.Object</class-id> <category>printing</category><body package="DebuggerAdditions">printOn: aStream	"overridden to append the identityhash as Hex-String"	| title |	title := self class printString.	aStream		nextPutAll: ((title at: 1) isVowel ifTrue: ['an '] ifFalse: ['a ']).	aStream nextPutAll: title.	aStream space.	self identityHash printOn: aStream base: 16</body><body package="DebuggerAdditions">printTopOfStackToTranscript	Transcript show: (thisContext sender printTopStackUpTo: 10);cr</body><body package="DebuggerAdditions">printTopOfStackToTranscript: aNumber	Transcript show: (thisContext sender printTopStackUpTo: aNumber);cr</body></methods><methods><class-id>UI.Controller</class-id> <category>events</category><body package="DebuggerAdditions">blueButtonPressedEvent: event	(InputState default shiftDown and: [InputState default optionDown])		ifTrue: 			["overridden to display a menu with all the parent views"			| currentView views menu res |			currentView := self view.			views := OrderedCollection new.						[views add: currentView.			currentView := currentView container.			currentView = currentView topComponent]					whileFalse.			menu := Menu labelArray: (views collect: #printString) values: views.			res := menu startUp.			res = 0 ifFalse: [res inspect]].	^nil</body></methods><methods><class-id>UI.ApplicationStandardSystemController</class-id> <category>event driven</category><body package="DebuggerAdditions">blueButtonPressedEvent: event	"We are about to bring up a menu, unlock the event queue so that my window can process	exposed and other window events."	| choice |	self queueLocked: false.	(InputState default shiftDown and: [InputState default optionDown])		ifTrue: 			["overridden to dispatch the event to the correct controller, It'll arrive there as #blueButtonPressedEvent:"			^self dispatcher dispatchEvent: event].	choice := self				trackMenu: self scheduledBlueButtonMenu				event: event.	(choice = 0 or: [choice isNil]) ifTrue: [^self].	self perform: choice value</body></methods><methods><class-id>Core.Object</class-id> <category>accessing</category><body package="Inquisitor">inquisition	"open the inquisitor and make it track my changes"	Inquisitor openInquisitor startTrackingObject: self</body><body package="Inquisitor">inquisitionOn: instVarNames	"open the inquisitor and make it track changes to the provided instance variables"	Inquisitor openInquisitor startTrackingObject: self		forChangingAspects: instVarNames</body></methods><methods><class-id>UI.ApplicationModel class</class-id> <category>interface opening</category><body package="Inquisitor">noRaiseSingleInstance	"find the single instance that's already open, but don't raise it"	Screen default		allScheduledWindowsDo: [:each | (each model isKindOf: self) ifTrue: [^each]].	^nil</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>probes</category><body package="Inquisitor">addObjectBreakpoint	| object |	object := self objectForInquisitionBreakpointOrDo: [^self].	self addBreakpoint: ((InquisitorProbe new)				object: object;				yourself)</body><body package="Inquisitor">addObjectOneshotBreakpoint	| object |	object := self objectForInquisitionBreakpointOrDo: [^self].	self addBreakpoint: ((InquisitorOneShotProbe new)				object: object;				yourself)</body><body package="Inquisitor">objectForInquisitionBreakpointOrDo: aBlock	| availableLabels availableObjects |	availableObjects := (Inquisitor openInquisitor tracker trackedObjects keys				select: 					[:each |					each class instanceBehavior						includesBehavior: self selectedClass instanceBehavior])					sorted: #printString ascending.	availableLabels := availableObjects collect: #printString.	^Dialog		choose: 'Select your object'		fromList: availableLabels		values: availableObjects		lines: 10		cancel: aBlock</body></methods><methods><class-id>Graphics.GraphicsContext</class-id> <category>tracing</category><body package="GraphicsContextInspector">inspectContext	GraphicsContextInspector inspectContext: self.</body></methods><methods><class-id>Graphics.GraphicsContext</class-id> <category>accessing</category><body package="GraphicsContextInspector">makeInspectable	| wrapper |	wrapper := GraphicsContextWrapper new.	wrapper actualContext: wrapper.	1 to: self class instSize do:[:i | 	wrapper instVarAt: i	put: (self instVarAt: i).	].	self become: wrapper.	^self</body><body package="GraphicsContextInspector">revertInspectable	^self</body></methods><methods><class-id>CraftedSmalltalk.DebuggerService</class-id> <category>spelling correction</category><body package="DebuggerProtocolPrompt">defineMethodForDoesNotUnderstand	"Override to prompt for a protocol when defining a new method in the Debugger."	| message newContext protocol |	message := self context localAt: 1.	protocol := self selectProtocolFor: message.	protocol isEmpty ifTrue: [^self].	(self context homeReceiverClass)		compile: message methodStubSource;		classifySymbol: message selector under: protocol.	newContext := MethodContext				sender: self context				receiver: self context receiver				method: (self context homeReceiverClass compiledMethodAt: message selector)				arguments: message arguments.	newContext stepUntilVisibleEffect.	processHandle topContext: newContext.	self selectContext: newContext.	self updateContextList</body><body package="DebuggerProtocolPrompt">existingProtocolsFor: aMessageSelector	"Answer a dictionary mapping protocols to collections of implementors"	| existingImplementors |	existingImplementors := (MethodCollector new				implementorsOf: aMessageSelector) select.	^(existingImplementors groupedBy: #protocol)		removeKey: ClassOrganizer defaultProtocol ifAbsent: [];		yourself</body><body package="DebuggerProtocolPrompt">mostPopularProtocol: aDictionary	aDictionary isEmpty ifTrue: [^String new].	^(aDictionary associations sorted: [:a :b | a value size &gt;= b value size])		first key</body><body package="DebuggerProtocolPrompt">promptForProtocolInitial: aString	^(IncrementalSearchDialog		requestProtocol: 'Specify a protocol for the new method:'		initialAnswer: aString		inClass: self context homeReceiverClass		ifClassNameProvided: [:ignored | ]) ifNil: [String new]</body><body package="DebuggerProtocolPrompt">selectProtocolFor: message	| existingProtocols |	existingProtocols := self existingProtocolsFor: message selector.	existingProtocols size = 1 ifTrue: [^existingProtocols keys any].	^self		promptForProtocolInitial: (self mostPopularProtocol: existingProtocols)</body></methods><methods><class-id>Graphics.Paint</class-id> <category>user interface</category><body package="ColorInspector">displayOn: aGraphicsContext	aGraphicsContext paint: self.	aGraphicsContext displayRectangle: aGraphicsContext clippingBounds</body><body package="ColorInspector">inspectorClasses	"For VisualComponents, the preferred page is not the first one.	 See the redefined #preferredInspectorPageClass."	^Array		with: Tools.Trippy.PreviewingInspector		with: Tools.Trippy.BasicInspector</body></methods><methods><class-id>Tools.InquisitorIcons class</class-id> <category>resources</category><body package="Inquisitor">ObjectBreakIcon24x24	"UIMaskEditor new openOnClass: self andSelector: #ObjectBreakIcon24x24"	&lt;resource: #image&gt;	^(Image extent: 24@24 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5203 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1991 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1927 1027 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7612 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 3180 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 995 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1027 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 321 321)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 3019 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2248 385 385)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1702 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 256 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1895 899 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 3404 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 867 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2248 738 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1991 867 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 2441 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1413 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7644 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 256 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1092 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 3083 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 1124 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 2023 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 2730 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 738 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 1927 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 96 96)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2441 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 1445 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 3854 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 2505 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 32 32)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 1284 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1606 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 1252 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 2248 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 2441 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 674 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 1766 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 481 481)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 1670 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1830 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 289 289)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 2473 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1188 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 803 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 1349 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 3308 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 417 417)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 417 417)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 160 160)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 2152 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 1156 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 674 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 1349 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 2280 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 321 321)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 1670 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 3597 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 1027 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 1863 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 2569 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 2537 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1927 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 513 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 513 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 2666 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2376 610 610)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1349 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 481 481)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 256 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 160 160)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 3308 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 642 642)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 738 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 96 96)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 449 449)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'HB@ HB@ H@A=GF--[V,\_P@ HB@ HB@ HB@ HB@@H$4$_''98_''9&gt;ID4"@B@ HB@ HB@ HFLMPTUE XFA XFA TUACVL HB@ HB@ _3!*Z&amp;*A XFA XFA R5*Z#!?HB@ HB@POQ4] P,K XFA XFA XD]GQ4=DB@ H@BJO#8&gt;VU=_]8FA XFA XD*O#8&gt;" @ HAH? XFAVU=_]8FA XFA XFA S&gt;AO1H @D\TEAPTH5=_]8FA XFA XFA XDTED\@YX1XVE!XH5=_]0,K XFA XFA XEXVH1%!W1&lt; 4)&lt;H2@ E0  ^3E\WE"A XE&lt;_G2EL(P,NS,VH2\ ATL FEH HGU\VHD(JB 2V8,+HE&lt;QH3\ YF&lt; UF$ HGP WE!(ZF![K \0N"@ FU@ HB@ HB@ HB@ HF\GA0\.F4YF["@ HB@ HB@ HB@ HB@ HG)FQ$X[MXJBT4P HB@ HB@ HB@ HB@ HB&gt;B (H5IQ(_G8\JHB@ HB@ HB@ HB@ HGX_G1(%@DI]WREIUB@ HB@ HB@ HB@ @X9]WTH@HG%HA Y"UUD HB@ HB@ HBBHK@XFRG$ H@@3PDA@I 0CBB@ HB@ HD-OPDA@L0@ HB@)M''I2\''H&lt;\8%0THALU&amp;A2\''H6JR@ HB@ S H^G!8^G!:M[GDO!!8^G INHB@ HB@ H@9!MFY&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;X4XP8 HB@ HB@ HB@@D58IY&amp;Y&amp;Y&amp;Y&amp;BU8S@B@ HB@ HB@ HB@ H@AWAAUZV!TDU0@ HB@ HB@ '))</body><body package="Inquisitor">ObjectBreakIcon24x24mask	"UIMaskEditor new openOnClass: self andSelector: #ObjectBreakIcon24x24mask"	&lt;resource: #image&gt;	^(Image extent: 24@24 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[1 255 128 0 7 255 224 0 15 255 240 0 31 255 248 0 63 255 252 0 127 255 254 0 127 255 254 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 127 255 254 0 127 255 254 0 63 255 252 0 31 255 248 0 15 255 240 0 7 255 224 0 1 255 128 0])</body><body package="Inquisitor">ObjectOneBreakIcon24x24	"UIMaskEditor new openOnClass: self andSelector: #ObjectOneBreakIcon24x24"	&lt;resource: #image&gt;	^(Image extent: 24@24 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5203 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1991 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1927 1027 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7612 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 3180 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 995 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1027 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 321 321)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 3019 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2248 385 385)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1702 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 256 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1895 899 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 3404 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 867 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2248 738 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1991 867 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 2441 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1413 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7644 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 256 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1092 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 3083 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 1124 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 2023 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 2730 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 738 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 1927 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 96 96)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2441 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 1445 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 3854 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 2505 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 32 32)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 1284 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1606 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 1252 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 2248 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 2441 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 674 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 1766 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 481 481)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 1670 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1830 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 289 289)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 2473 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1188 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 803 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 1349 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 3308 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 417 417)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 417 417)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 160 160)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 2152 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 1156 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 674 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 1349 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 2280 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 321 321)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 1670 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 3597 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 1027 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 1863 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 2569 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 2537 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1927 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 513 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 513 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 2666 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2376 610 610)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1349 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 481 481)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 256 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 160 160)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 3308 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 642 642)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 738 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 96 96)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 449 449)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'HB@ HB@ H@A=GF--[V,\_P@ HB@ HB@ HB@ HB@@H$4$_''98_''9&gt;ID4"@B@ HB@ HB@ HFLMPTUE XFA XFA TUACVL HB@ HB@ _3!*Z&amp;*A XFA XFA R5*Z#!?HB@ HB@POQ4] P,K XFA XFA XD]GQ4=DB@ H@BJO#8&gt;VU=_]8FA XFA XD*O#8&gt;" @ HAH? XFAVU=_]8FA XFA XFA S&gt;AO1H @D\TEAPTH5=_]8FA XFA XFA XDTED\@YX1XVE!XH5=_]0,K XFA XFA XEXVH1%!W1&lt; 4)&lt;H2@ E0  ^3E\WE"A XE&lt;_G2EL(P,NS,VH2\ ATL FEH HGU\VHD(JB 2V8,+HE&lt;QH3\ YF&lt; UF$ HGP WE!(ZF![K \0N"@ FU@ HB@ HB@ HB@ HF\GA0\.F4YF["@ HB@ HB@ @B@ HB@ HG)FQ$X[MXJBT4P HB@ HB@@@B@ HB@ HB&gt;B (H5IQ(_G8\JHB@ HB@ @B@ HB@ HGX_G1(%@DI]WREIUB@ HB@ @B@ HB@ @X9]WTH@HG%HA Y"UUD HB@@@@@ HBBHK@XFRG$ H@@3PDA@I 0CBB@ HB@ HD-OPDA@L0@ HB@)M''I2\''H&lt;\8%0THALU&amp;A2\''H6JR@ HB@ S H^G!8^G!:M[GDO!!8^G INHB@ HB@ H@9!MFY&amp;Y&amp;Y&amp;Y&amp;Y&amp;Y&amp;X4XP8 HB@ HB@ HB@@D58IY&amp;Y&amp;Y&amp;Y&amp;BU8S@B@ HB@ HB@ HB@ H@AWAAUZV!TDU0@ HB@ HB@ '))</body><body package="Inquisitor">ObjectOneBreakIcon24x24mask	"UIMaskEditor new openOnClass: self andSelector: #ObjectBreakIcon24x24mask"	&lt;resource: #image&gt;	^(Image extent: 24@24 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[1 255 128 0 7 255 224 0 15 255 240 0 31 255 248 0 63 255 252 0 127 255 254 0 127 255 254 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 127 255 254 0 127 255 254 0 63 255 252 0 31 255 248 0 15 255 240 0 7 255 224 0 1 255 128 0])</body></methods><methods><class-id>CraftedSmalltalk.ColoredDebuggerClient</class-id> <category>menus</category><body package="DebuggerColors">selectHomeItem	"the nameKey has to be #selectHome because there used to be a toolbar item with the same name and it is still correctly updated (if it's there)"	&lt;itemInMenu: #(#toolbar) position: 100&gt;	^(MenuItem labeled: 'Select Home Context')		nameKey: #selectHome;		value: [self selectHomeContext];		labelImage: DebuggerIcons homeContext;		yourself</body></methods><methods><class-id>CraftedSmalltalk.ColoredDebuggerClient</class-id> <category>actions</category><body package="RBRecursionJumpBack">jumpBeforeRecursionItem	"find out the recursion and allow us to jump back to its root.	First find out how deep the recursion is, then jump back the contexts one recursion sequence at a time.	at the end ask the user if he wants to jump back and then tell the debugger to jump to the last context that was found"	&lt;itemInMenu: #(#stackMenu) position: 14&gt;	&lt;itemInMenu: #(#toolbar) position: 140&gt;	^(MenuItem		labeled: #Jump_Before_Recursion &lt;&lt; #pdp &gt;&gt; 'Jump Before Recursion')		helpText: #Jump_Before_Recursion_Help &lt;&lt; #pdb &gt;&gt; 'Detects Recursion and jumps to the beginning. Press Option to customize the search';		value: [self jumpBeforeRecursion];		labelImage: Tools.DebuggerIcons restart;		yourself</body></methods><methods><class-id>ProbeEnabler class</class-id> <category>interface specs</category><body package="ProbeEnabler">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Probe Enabler' 			#bounds: #(#{Graphics.Rectangle} 740 405 940 605 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 2 2 105 26 ) 					#name: #browseProbes 					#model: #browseProbes 					#label: 'Browse Probes' 					#defaultable: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #allowColumnReordering false ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 30 0 0 1 0 1 ) 					#name: #probedMethods 					#model: #probedMethods 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedMethod enabled' 							#labelIsImage: false 							#width: 23 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedMethod definitionString' 							#label: '' 							#labelIsImage: false 							#width: 145 							#editorType: #InputField 							#noScroll: false ) ) ) ) ) )</body></methods><methods><class-id>Inquisitor class</class-id> <category>interface specs</category><body package="Inquisitor">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Inquisitor' 			#min: #(#{Core.Point} 297 500 ) 			#max: #(#{Core.Point} 297 1200 ) 			#bounds: #(#{Graphics.Rectangle} 812 410 1109 910 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #allowColumnReordering false ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 0 1 185 0 ) 					#name: #trackedObjects 					#model: #trackedObjects 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedObject isTracked' 							#labelIsImage: false 							#width: 21 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedObject identityString' 							#labelIsImage: false 							#width: 205 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedObject mutationCount' 							#labelIsImage: false 							#width: 25 							#rendererType: #Text 							#editorType: #None 							#type: #number 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedObject editAspects' 							#labelIsImage: false 							#width: 25 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false ) ) ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 186 0 0 1 189 0 ) 					#name: #splitter 					#horizontal: true 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'trackedObjects' 					#belowWidgets: 'mutationStacks' ) 				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 190 0 0 1 0 1 ) 					#name: #mutationStacks 					#model: #mutationStacks 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#doubleClickSelector: #openSelectedMutationStack ) 					#useModifierKeys: true 					#selectionType: #highlight ) ) ) )</body></methods><methods><class-id>Inquisitor class</class-id> <category>resources</category><body package="Inquisitor">ObjectBreakIcon	"UIMaskEditor new openOnClass: self andSelector: #ObjectBreakIcon"	&lt;resource: #image&gt;	^(Image extent: 24@24 depth: 8 bitsPerPixel: 8 palette: (Graphics.MappedPalette withColors: (#(#(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(0 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5814 5203 5203)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4946 3983 3983)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1991 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1927 1027 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7901 2344 2344)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7966 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 8062 8062)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4143 2409 2409)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5653 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7612 7612)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 3180 3180)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 995 995)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1027 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 321 321)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4593 3019 3019)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2248 385 385)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3083 963 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1702 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2698 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7484 256 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7741 7741 7741)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1895 899 899)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4882 2055 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6970 6970 6970)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 610 610)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 3404 3404)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6681 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3372 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 867 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6392 1638 1638)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6360 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7355 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 8191 8191)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7034 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 2280 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2248 738 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1991 867 867)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 2441 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1413 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 7644 7644)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6584 6520 6520)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 256 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3147 1124 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1092 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 3083 3083)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3469 1959 1959)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5139 1124 1124)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4079 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7644 2023 2023)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 2730 2730)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 738 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3212 1927 1927)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 96 96)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2762 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5749 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2441 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 1060 1060)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6617 2055 2055)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7548 7548 7548)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 1445 1445)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 3854 3854)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 2248 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 2505 2505)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6906 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 4336 4336)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 32 32)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5524 1284 1284)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1606 1606)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 1252 1252)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6777 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 2248 2248)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 963 963)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7998 7998 7998)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4464 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 2441 2441)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5846 5267 5267)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 674 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7805 481 481)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3918 1766 1766)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6456 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6070 5653 5653)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5107 1670 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 6070 6070)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1830 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6167 5942 5942)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4111 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 7452 7452)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5589 5075 5075)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7387 7323 7323)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3019 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6231 289 289)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7677 7677 7677)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4015 1895 1895)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 2473 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1188 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 803 803)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3790 1349 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5043 4368 4368)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5332 4721 4721)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 3308 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3854 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8126 8126 8126)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 2473 2473)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5010 417 417)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2537 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6841 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4432 1702 1702)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1381 417 417)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4721 4047 4047)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 160 160)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6199 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5942 5428 5428)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 2152 2152)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3565 1156 1156)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4529 674 674)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 1349 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3693 2087 2087)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4304 2280 2280)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8030 8030 8030)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6038 5717 5717)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4914 321 321)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6552 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4207 1670 1670)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4657 3597 3597)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3180 1027 1027)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4818 1863 1863)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4400 2569 2569)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7195 7130 7130)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7773 2537 2537)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1927 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4850 3340 3340)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6424 6360 6360)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6713 6713 6713)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 513 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(1573 513 513)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 2666 2666)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2376 610 610)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6938 6938 6938)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8191 1349 1349)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7580 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7612 481 481)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(8062 256 256)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(2633 160 160)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(6263 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4240 1509 1509)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5878 5492 5492)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7163 7002 7002)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4625 3308 3308)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(3340 642 642)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7934 0 0)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(4175 2376 2376)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(7452 738 738)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5428 96 96)) #(#{Graphics.ColorValue} #scaledRed:scaledGreen:scaledBlue: #(5717 449 449)) ) collect: [:each | (each at: 1) value perform: (each at: 2) withArguments: (each at: 3)])) usingBits: (ByteArray fromPackedString: 'I2\''I2\''I0BVH(FC 8D"% @''I2\''I2\''I2\''I2\@J%0,%9^P%9^WKE0*@B\''I2\''I2\''I7$OTEQTJP5.)$LFUEQPC7$''I2\''I2\''&amp;DV@ HBZGB\''R''RZ&amp;#&amp;@ DVXI2\''I2\RSBL#&amp;)*Z^B\''[8:Z&amp;"P#H2MLD"\''I0B$ST5M&amp;)*ZZ2\''X *Z&amp;)(4ST5M)@@''I1QN&amp;)*Z&amp;)*ZL"\''(T^Z&amp;)*Z&amp;$:ZS!P''@EXWE1\W&amp;)*ZTR\''W8RZ&amp;)*Z&amp;)(WE5X@^:]*Z&amp;)*&amp;''A0J7L''$3Y0\I*Z&amp;))*Z*];'')VU''E^UG"\''F0$''%C0''I1U0\I*U%YV^OY47Q$ YG"8''AUH''GVP''I800I7@1LSD=[ZT5I7LSG$P''^(X''Y''&lt;''I8."I9I&gt;_''9-N@ ;RR\''G6D''I2\''I2\''I2\''I74HB@ 8HU!X!R\''I2\''I2\''I2\''I2\''I9IXVE !PI.[YUT''I2\''I2\''I2\''I2\''I3*[&amp;9-@KR@&amp;I*@LI2\''I2\''I2\''I2\''I84&amp;I"@-@EM1\R!YY"\''I2\''I2\''I2\''@Z%1\UL@I9EZA0]7Y6L''I2\''I2\''I2^"M0\GV)D''I0@&gt;S4=OK08CBR\''I2\''I5- S4=OO @''I2\3P(&amp;I"X%K"*NGXY%]ZGVI"X%BL2\''I2\''W H%IRT%IRV( ( Q''2T%IPI^I2\''I2\''I1A6O71&lt;_G1&lt;_G1&lt;_G0?]!@''I2\''I2\''I2\@E''HK_G1&lt;_G1&lt;B7HV@B\''I2\''I2\''I2\''I0A)AA!,[A DZP@''I2\''I2\'''))</body></methods><methods><class-id>GraphicsContextInspector class</class-id> <category>interface specs</category><body package="GraphicsContextInspector">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'ContextInspector' 			#bounds: #(#{Graphics.Rectangle} 578 268 1084 638 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #allowColumnReordering false ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0 -2 0.33 0 1 ) 					#name: #instanceVariables 					#model: #instanceVariables 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedVariable name' 							#label: 'InstVar' 							#labelIsImage: false 							#width: 80 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedVariable stringValue' 							#label: 'Value' 							#labelIsImage: false 							#width: 121 							#rendererType: #Text 							#editorType: #None 							#noScroll: false ) ) ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.33 0 0 2 0.33 0 1 ) 					#name: #splitter 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'instanceVariables' 					#belowWidgets: 'contextPreview' ) 				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} 2 0.33 0 0 -2 0.66 0 1 ) 					#name: #contextPreview 					#flags: 3 					#component: #contextPreview ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} -2 0.66 0 0 2 0.66 0 1 ) 					#name: #splitter2 					#horizontal: false 					#minAboveSize: 30 					#minBelowSize: 30 					#aboveWidgets: 'contextPreview' 					#belowWidgets: 'inspectRectangles' ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #allowColumnReordering false ) 					#layout: #(#{Graphics.LayoutFrame} 2 0.66 0 0 0 1 0 1 ) 					#name: #inspectRectangles 					#model: #inspectRectangles 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRectangleToInspect enabled' 							#labelIsImage: false 							#width: 23 							#rendererType: #CheckBox 							#editorType: #CheckBox 							#noScroll: false ) 						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRectangleToInspect stringValue' 							#label: 'Rectangles to inspect' 							#labelIsImage: false 							#width: 307 							#editorType: #InputField 							#noScroll: false ) ) ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus</category><body package="ProbeEnabler">probeEnabler	&lt;itemInMenu: #(#menuBar #probes) position: 15.1&gt;	^(MenuItem labeled: 'Probe Enabler')		value: [self openApplicationForClassNamed: #ProbeEnabler]</body></methods><methods><class-id>Refactory.Browser.BrowserCodeTool</class-id> <category>probes</category><body package="Inquisitor">addInquisitorBreakpointItem		&lt;itemInMenu: #(#mainMenu) position: 25.21&gt;	^(MenuItem labeled: #InsertObjectBreakpoint &lt;&lt; #pdp &gt;&gt; 'Insert Object Breakpoint')		enablement: #areProbeCommandsLegal;		value: [self addObjectBreakpoint];		labelImage: (InquisitorIcons visualFor: #ObjectBreakIcon)</body><body package="Inquisitor">addInquisitorOneBreakpointItem	&lt;itemInMenu: #(#mainMenu) position: 25.22&gt;	^(MenuItem labeled: #InsertObjectOneBreakpoint &lt;&lt; #pdp				&gt;&gt; 'Insert Object Oneshot Breakpoint')		enablement: #areProbeCommandsLegal;		value: [self addObjectOneshotBreakpoint];		labelImage: (InquisitorIcons visualFor: #ObjectOneBreakIcon)</body></methods><initialize><class-id>CraftedSmalltalk.ColoredDebuggerClient</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>DebuggerClient2</name><environment>CraftedSmalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>service contextIndex busy document stackList stackEmphases enableStackFiltering closeAction terminated probes </inst-vars><class-inst-vars>menuHolder </class-inst-vars><imports>			Refactory.Browser.*			</imports><category>Tools-Programming</category><attributes><package>Debugger-UI</package></attributes></class><class><name>Controller</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>model view </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>ApplicationStandardSystemController</name><environment>UI</environment><super>UI.StandardSystemController</super><private>false</private><indexed-type>none</indexed-type><inst-vars>eventDispatcher </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Controllers</category><attributes><package>UIBasics-Controllers</package></attributes></class><class><name>IconLibrary</name><environment>Tools</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>icons iconSize lastColorDepth </inst-vars><class-inst-vars>default </class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Resources</package></attributes></class><class><name>View</name><environment>UI</environment><super>Graphics.DependentPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars>controller </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Framework</category><attributes><package>Interface-Framework</package></attributes></class><class><name>Paint</name><environment>Graphics</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Support</category><attributes><package>Graphics-Support</package></attributes></class><class><name>BrowserCodeTool</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserTextTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>modified initialLookPrefs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Code Tools</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>CodeProbe</name><environment>CraftedSmalltalk</environment><super>CraftedSmalltalk.AbstractCodeProbe</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testMethod testSource variables labelString permanent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CraftedSt-Probes</category><attributes><package>Debugger-Probes</package></attributes></class><class><name>OneshotProbe</name><environment>CraftedSmalltalk</environment><super>CraftedSmalltalk.CodeProbe</super><private>false</private><indexed-type>none</indexed-type><inst-vars>armed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Debugger-Probes</package></attributes></class><class><name>DebuggerService</name><environment>CraftedSmalltalk</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>processHandle oldCursor receiverInspector contextInspector stackInspector sourceMap currentContext pendingEvents continueInDebuggerCtx finishBlock selector tags stepProbes label serviceProcess selectionRange contextStackPolicy dontUpdateInspectors doSend doSendLoop doStepIntoBlock debugOperationIsActive doItProcess </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category><attributes><package>Debugger-Support</package></attributes></class><class><name>GraphicsContext</name><environment>Graphics</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>medium clipOriginX clipOriginY clipWidth clipHeight lineWidth capStyle joinStyle deviceFont devicePaint offsetX offsetY phaseX phaseY scaleX scaleY font paint paintPolicy fontPolicy clientData paintPreferences </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Graphics-Support</category><attributes><package>Graphics-Support</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>Context</name><environment>Kernel</environment><super>Kernel.InstructionStream</super><private>false</private><indexed-type>none</indexed-type><inst-vars>sender receiver stackp stack </inst-vars><class-inst-vars></class-inst-vars><imports>			private Kernel.OpcodePool.*			</imports><category>Kernel-Methods</category><attributes><package>Kernel-Methods</package></attributes></class><class><name>ModificationTracker</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class></st-source>