<?xml version="1.0"?><st-source><!-- Name: GHAdHocQueryToolNotice: © Copyright 2002-2014 Georg Heeg e.K.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.(MIT License)Comment: This parcel adds class GHAdHocQueryTool, and extension of the standard AdHocQueryTool. 'VisualLauncher->Tools->Database->AdHoc SQL' will open this tool instead of the old one.Features:1. SQL command history: 	- Scroll through the list of successfully executed commands	- Save and load command history as text file2. Error reporting: 	Insert error message text at the proper position into the command text (similar to Compiler error messages in code views)3. Clipboard: 	Copy text contents of cell, row, column or table in a format that allows easy import into tables of MS Word or Excel4. Save text for table contents as text file	(separated by semicolon when specifying extension '.csv'; separated by tab, otherwise)5. Inspect:	Inspectors on ApplicationModel, TableAdaptor6. Convenient GUI:	Use a single button for Connect/Disconnect 	Display username and connection string in the window label if connected	Result dimension: A new text field displays the number of columns/rows of a result tableAuthor: Holger Guhl (Holger.Guhl@heeg.de)Version History===========================================================8.0 - 1 (September 15, 2014)- override VisualLauncher>>menuItemOpenAdHocSQLQueryTool (this is the new entry point to start the Adhoc Query Tool)- remove VisualLauncher>>openAdHocQuery (old entry point, no longer appropriate for VW 8.0)- GHAdHocQueryTool>>parseErrorOffsetFrom: (add handling for new PostgresError class)===========================================================7.10 - 2 (February 21, 2013) Fix GHAdHocQueryTool: Drop history entry left invalid tracker string- add #updateHistoryIndex: (extract from #preBuildWith: and reuse there)- #forgetQuery (reuse #updateHistoryIndex:)Fix #updateTable:columns: column widths and text alignment- slightly increased column widths for better column label readability- left aligned is better than centered for wide columns===========================================================7.9 - 9 (August 22, 2012) - Fix GHAdHocQueryTool>>updateTable:columns: (exception if query result has less than 10 or no rows)===========================================================7.9 - 6 (March 16, 2012)- discard window maximum size to allow full screen size- use soft link for PostgreSQLEXDIError to avoid Undeclared entry if the class is not loaded===========================================================7.9 - 5 (Febuar 16, 2012)- enlarge table size field in the upper right corner of the window - add history size display- column widths based on data===========================================================7.8 - 1 (Januar 13, 2011) Refactor/improve SQL and query error reprorting for PostgreSQLEXDI- add #parseErrorOffsetFromPostgreSQLError: (scan error position from error message)- add #parseErrorOffsetFrom: (extract from #reportException:, extended with #parseErrorOffsetFromPostgreSQLError: )- #reportException: (used enhanced #parseErrorOffsetFrom:, make sure to highlight inserted error text)===========================================================7.7.1 - 1 (June 08, 2010) Update Copyright notice, add license statement===========================================================1.8 - June 08, 2010 - Version for VisualWorks 7.7.1+ Continue to use TableInterface instead of DataSetView approach of superclass which disables lots of our utilities- add previously inherited inst.var. #tableModel and its accessor method- add #updateTable:columns: (copy of previously inherited TableInterface-oriented table filler method)- add #updateDataset:columns: (reimplement to use #updateTable:columns:)+ Improve GUI- discard inherited query spin button; we have our own with most-recently-used logic- add a ResizingSplitter between query editor and table (as proposed by inherited UI)- change table selection mode to #cell, not #row (better selection feedback)+ Adapt to new inherited implementation- #execute (rewrite with #on:do: and integrate #updateQueryChoices- class #menuBar (add the new 'Display' menu because it's referred in inherited code, but hide it)- class #windowSpec (add the new dataset widget because it's referred in inherited code, but hide it)+ Minimize Code Critics results+ REMOVED- whichDriverModel (no longer applicable nor used)===========================================================1.7 - December 19, 2006 - Review for VisualWorks 7.5; Refined utilities+ Fix GHAdHocQueryTool>>copyColumn, #copyRow:separatedBy: (string values were printed with quotes)===========================================================1.6 - November 15, 2005 - Review for VisualWorks 7.2/7.3; Refined utilities+ Fix GHAdHocQueryTool>>reportException:   Handle incompatibilities with ##parseErrorOffset between VW 5i4, 7.2 and 7.3+ Add enablement to history and utility menu items and history navigation buttons+ Export column labels during 'Save table as...'+ New history menu item 'Forget all'+ New utility menu item 'Copy column labels'+ Shortcut character ctrl-e for menu item 'Execute'===========================================================1.5 - May 23, 2002 - First public version for 7.0DbIdentifier: magdi.heeg.de.postgresDbTrace: 50204DbUsername: holgerDbVersion: 8.0 - 1DevelopmentPrerequisites: #(#(#parcel 'Database' ''))DialectVersion: VisualWorks 8.0PackageName: GHAdHocQueryToolParcel: #('GHAdHocQueryTool')ParcelDirectory: c:\visworks\vw8.0 sep14.2\image\HeegContributions-vw8.0-2014-09-25\GHAdHocQueryToolParcelName: GHAdHocQueryToolPrerequisiteParcels: #(#('Database' ''))PrintStringCache: (8.0 - 1,holger)Version: 8.0 - 1Date: 4:06:04 PM September 25, 2014 --><time-stamp>From VisualWorks®, 8.0 of 15. September 2014 on 25. September 2014 at 16:06:04</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>GHAdHocQueryTool</name><environment>Database</environment><super>Database.AdHocQueryTool</super><private>false</private><indexed-type>none</indexed-type><inst-vars>tableModel historyIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Tools</category><attributes><package>GHAdHocQueryTool</package></attributes></class><comment><class-id>Database.GHAdHocQueryTool</class-id><body>GHAdHocQueryTool extends the superclass implementation with utilities for evaluation of query results. Another important addition is a history buffer which remembers successfully executed queries and allows easy navigation and repeating of commands. 'VisualLauncher-&gt;Tools-&gt;Database-&gt;AdHoc SQL' will open this tool instead of the old one.Feature summary:1. SQL command history: 	- Scroll through the list of successfully executed commands	- Save and load command history as text file2. Error reporting: 	Insert error message text at the proper position into the command text 	(similar to Compiler error messages in code views)3. Clipboard: 	Copy text contents of cell, row, column, or table contents in a format that allows easy integration with text tools such as MS Word4. Save text for table contents as text file	(separated by semicolon when specifying extension '.csv'; separated by tab, otherwise)5. Inspect:	Inspectors on ApplicationModel, TableAdaptor6. Convenient GUI:	Use a single button for Connect/Disconnect 	Select the database interface class automatically if it is unique.	Display username and connection string in the window label if connected	Result dimension: A new text field displays the number of columns/rows of a result table</body></comment><methods><class-id>Database.GHAdHocQueryTool</class-id> <category>actions-utility</category><body package="GHAdHocQueryTool">columns: indices do: aBlock 	"execute aBlock with each column of the current table"	| tab |	tab := self tableModel table.	indices do: [:col | tab elements do: [:row | aBlock value: (row at: col)]]</body><body package="GHAdHocQueryTool">copyCell	"Copy text in selected cell to the System Clipboard."	| string |	(string := self tableModel selectionInTable selection) isNil ifTrue: [^self].	string isString ifFalse: [string := string printString].	self toClipboard: string</body><body package="GHAdHocQueryTool">copyColumn	"copy all value texts in selected column to the text clipboard"	| idx stream columnValues |	(idx := self tableModel selectionInTable selectionIndex x) = 0 ifTrue: [^self].	stream := (String new: 1024) writeStream.	columnValues := self tableModel table elements collect: [:row | row at: idx].	self exportRow: columnValues on: stream separator: Character cr.	self toClipboard: stream contents</body><body package="GHAdHocQueryTool">copyColumnLabels	"Copy all column label strings to the Clipboard, separated by tab.	Assume: Column label availability has been checked with #hasColumnLabels"	| stream |	stream := (String new: 512) writeStream.	self exportTableHeaderOn: stream separator: Character tab.	self toClipboard: stream contents</body><body package="GHAdHocQueryTool">copyRow	"copy all cell value texts in selected row to the text clipboard, each separated by &lt;tab&gt;"	| idx row |	(idx := self tableModel selectionInTable selectionIndex y) = 0 ifTrue: [^self].	(row := self tableModel table elements at: idx) isEmpty ifTrue: [^self].	self copyRow: row separatedBy: Character tab</body><body package="GHAdHocQueryTool">copyRow: aCollection separatedBy: aCharacter 	"copy all cell value texts in given row to the text clipboard, each separated by &lt;aCharacter&gt;"	| stream |	stream := (String new: 1024) writeStream.	self exportRow: aCollection on: stream separator: aCharacter.	self toClipboard: stream contents</body><body package="GHAdHocQueryTool">copyTable	"write the table data in tab-separated-value format to the clipboard"	| stream |	stream := (String new: 1024) writeStream.	self exportTableOn: stream separator: Character tab.	self toClipboard: stream contents</body><body package="GHAdHocQueryTool">exportRow: aCollection on: aStream separator: aCharacter 	"write row data onto aStream, each cell separated by &lt;aCharacter&gt; (tab or semicolon)"	aCollection do: [:val | val isNil ifFalse: [val isString				ifTrue: [aStream nextPutAll: val]				ifFalse: [aStream print: val]]]		separatedBy: [aStream nextPut: aCharacter]</body><body package="GHAdHocQueryTool">exportTable	"write the table data in comma-separated-value format to a file requested from user;	use separator dependent from extension: semicolon for CSV, tab for TXT"	| defaultExtension filename ext file separator |	defaultExtension := '.csv'.	filename := Dialog 				requestFileName: 'Name of table output file?'				default: '*', defaultExtension				version: #new				ifFail: [^self].	filename := filename asFilename.	(ext := filename extension) isNil		ifTrue:			["File selection dialog does not automatically add the extension if omitted"			filename := (filename asString, (ext := defaultExtension)) asFilename].	separator := ('.csv' match: ext) ifTrue: [$;] ifFalse: [Character tab].	file := filename writeStream.	Cursor write showWhile: 			[			[self exportTableHeaderOn: file separator: separator.			self exportTableOn: file separator: separator] 					valueNowOrOnUnwindDo: [file close]]</body><body package="GHAdHocQueryTool">exportTableHeaderOn: aStream separator: aCharacter 	"Write all table column labels onto &lt;aStream&gt;, separated by &lt;aCharacter&gt; (tab or semicolon)"	| row |	row := self tableColumnLabels.	self exportRow: row on: aStream separator: aCharacter.	aStream cr</body><body package="GHAdHocQueryTool">exportTableOn: aStream separator: aCharacter 	"write all table data onto &lt;aStream&gt;, 	rows followed by &lt;cr&gt;, cells by &lt;aCharacter&gt; (tab or semicolon)"	self rowsDo: 		[:row | 		self exportRow: row on: aStream separator: aCharacter.		aStream cr]</body><body package="GHAdHocQueryTool">rowsDo: aBlock 	"execute aBlock with each row array of the current table"	self tableModel table elements do: [:row | aBlock value: row]</body><body package="GHAdHocQueryTool">toClipboard: aString 	"copy text in &lt;aString&gt; to the text clipboard"	aString isEmpty ifTrue: [^self].	ParagraphEditor currentSelection: aString</body></methods><methods><class-id>Database.GHAdHocQueryTool</class-id> <category>private</category><body package="GHAdHocQueryTool">connectedStatusChanged	"we have only one button for connect/disconnect, toggle button label appropriately; 	show the connection in the window label"	| connected label |	connected := self connectedStatusHolder value.	label := connected				ifTrue: 					[self query isEmpty ifFalse: [self executeStatusHolder value: true].					'Disconnect']				ifFalse: 					[self executeStatusHolder value: false.					self moreAnswersStatusHolder value: false.					'Connect'].	((builder componentAt: #connect) widget) setLabelString: label; invalidate.	label := 'Ad Hoc SQL'.	connected ifTrue: [label := label , ' for ' , self username , '@' , self environment].	self builder window label: label</body><body package="GHAdHocQueryTool">parseErrorOffsetFrom: anExternalDatabaseError	"Try to find the position where the external SQL parser found the error.	Return: Integer (0 if position not available)"	(anExternalDatabaseError respondsTo: #parseErrorOffset)		ifTrue: [^anExternalDatabaseError parseErrorOffset	"VW 5i4 and below"].	(session respondsTo: #parseErrorOffset)		ifTrue: [^session parseErrorOffset	"VW7.3 and higher"].	#{PostgreSQLEXDIError} ifDefinedDo: 			[:errorClass | "vw7.x, Postgres 8 interface"			(anExternalDatabaseError isKindOf: errorClass)				ifTrue: [^self parseErrorOffsetFromPostgreSQLError: anExternalDatabaseError]].	#{PostgresError} ifDefinedDo: 			[:errorClass | "vw8.0, Postgres 9 interface"			(anExternalDatabaseError isKindOf: errorClass)				ifTrue: [^self parseErrorOffsetFromPostgresError: anExternalDatabaseError]].	^0	"usually not available for Informix, etc"</body><body package="GHAdHocQueryTool">parseErrorOffsetFromPostgreSQLError: aPostgreSQLEXDIError	"Try to find the position where the external SQL parser found the error.	The position can be read from the error message, e.g. 'ERROR:  Relation »all_tables« does not exist at character 31\'.	(The \ means that the message always ends with a CR.)	Return: Integer (0 if position not available)"	| aStream offset |	aStream := aPostgreSQLEXDIError dbmsErrorString readStream.	(aStream skipThroughAll: ' at character ') isNil		ifTrue: 			["Retry German pattern, e.g. 'FEHLER:  Relation »all_tables« existiert nicht bei Zeichen 31\' "			aStream reset; skipThroughAll: ' bei Zeichen '].	(offset := Integer readFrom: aStream) &gt; 0		ifTrue: [offset := offset - 1	"normalize to Oracle's 0-relative offset, which is used as standard in this implementation"].	^offset</body><body package="GHAdHocQueryTool">parseErrorOffsetFromPostgresError: aPostgresError	"Try to find the position where the external SQL parser found the error.	Not yet tested.	Return: Integer (0 if position not available)"	| aStream offset |	aStream := aPostgresError dbmsErrorString readStream.	(aStream skipThroughAll: ' at character ') isNil		ifTrue: 			["Retry German pattern, e.g. 'FEHLER:  Relation »all_tables« existiert nicht bei Zeichen 31\' "			aStream reset; skipThroughAll: ' bei Zeichen '].	(offset := Integer readFrom: aStream) &gt; 0		ifTrue: [offset := offset - 1	"normalize to Oracle's 0-relative offset, which is used as standard in this implementation"].	^offset</body><body package="GHAdHocQueryTool">reportException: exception	| param |	exception signal == connection class authenticationFailureSignal		ifTrue: [^self reportError: exception errorString].	((param := exception parameter) notNil and: [param notEmpty])		ifTrue: 			["Like Smalltalk text editors on failed accept: Insert error message at proper position"			| dbError ofs msg view |			dbError := param first.			ofs := self parseErrorOffsetFrom: dbError.			msg := '"&lt;1s&gt;-&gt;"' expandMacrosWith: dbError dbmsErrorString.			(view := self widgetAt: #queryTextEditor) displaySelection: true.			view controller insertAndSelect: msg at: ofs + 1]		ifFalse: [self reportError: exception errorString]</body><body package="GHAdHocQueryTool">tableColumnLabels	"Answer the column labels above the table.	Return: Array of: String (empty if no table retrieved)"	| aTableAdaptor |	aTableAdaptor := self tableModel columnLabels value.	^aTableAdaptor rowAt: 1</body><body package="GHAdHocQueryTool">updateDataset: list columns: descrs	"see super implementor.	The superclass has renamed the method, we continue with the old name."	self updateTable: list columns: descrs</body><body package="GHAdHocQueryTool">updateResultSize	(self builder aspectAt: #resultSize)		value: self tableModel table dimensions</body><body package="GHAdHocQueryTool">updateTable: list columns: descrs	"This is the TableInterface-oriented method for filling the results table. The code was copied from VW 7.7. 	The new results table is a DataSetView filled with #updateDataset:columns: but we found it not convincing."	| table colAdaptors tableAdaptor colNames colWidths mwidth dataWidths |	table := self tableModel.	colAdaptors := RowAdaptor adaptForIndexes: (1 to: descrs size).	tableAdaptor := TableAdaptor on: list adaptors: colAdaptors.	colNames := List new.	colWidths := List new.	mwidth := 'm' asComposedText width.	"I.e. width of representative character"	dataWidths := list isEmpty		ifTrue: [Array new: descrs size withAll: 0]		ifFalse: [self columnWidthsFromData: (list first: 10)].	descrs with: dataWidths		do: 			[:aColumnDescription :widthOfData |			| width widthOfLabel widthOfTableColumn |			colNames add: aColumnDescription name.			widthOfLabel := aColumnDescription name asComposedText width + 5.			widthOfTableColumn := mwidth						* aColumnDescription maxColumnConstraint asInteger min: 3 * 72.			width := widthOfTableColumn &gt; widthOfData						ifTrue: [widthOfData + ((widthOfTableColumn - widthOfData) // 2)]						ifFalse: [widthOfData].			width := width max: widthOfLabel.			colWidths add: width].	descrs notEmpty		ifTrue: 			[table columnWidths: colWidths.			table columnLabelsArray: colNames].	table columnLabelsFormats: #left.	table selectionInTable table: tableAdaptor</body></methods><methods><class-id>Database.GHAdHocQueryTool</class-id> <category>actions-history</category><body package="GHAdHocQueryTool">checkHistoryEnablement	"Enables/Disables history navigation buttons according to availability of query history entries."	| bld |	bld := self builder.	(bld componentAt: #nextQuery) isEnabled: self hasNextQuery.	(bld componentAt: #prevQuery) isEnabled: self hasPreviousQuery</body><body package="GHAdHocQueryTool">forgetAllQueries	"Remove all queries from history."	self history list: List new</body><body package="GHAdHocQueryTool">forgetQuery	"Remove current query from history."	| hist list idx nextQuery |	list := (hist := self history) list.	idx := list indexOf: self query asString ifAbsent: [^self].	list removeAtIndex: idx.	hist selectionIndex: (idx := idx min: list size).	(nextQuery := hist selection) isNil ifTrue: [nextQuery := ''].	self queryModel value: nextQuery.	self updateHistoryIndex: idx</body><body package="GHAdHocQueryTool">history	^self builder aspectAt: #history</body><body package="GHAdHocQueryTool">loadHistory	"load remembered queries from file named as requested from user"	| file loaded msg sz |	file := Dialog requestFileName: 'Name of history file?' default: '*.sql' version: #mustBeOld ifFail: [^self].	file := file asFilename readStream.	loaded := List new.	Cursor read showWhile: [		[| next |		[(next := file skipSeparators; nextChunk) isEmpty]			whileFalse: [loaded add: next]]			valueNowOrOnUnwindDo: [file close]].	msg := (sz := loaded size) = 0				ifTrue: ['No history entries found']				ifFalse: 					[(self history) list: loaded; selectionIndex: sz.					self queryModel value: (loaded at: sz).					'&lt;1p&gt; entries loaded' expandMacrosWith: sz].	Dialog warn: msg</body><body package="GHAdHocQueryTool">nextQuery	"selects the previously executed statement from history"	| hist idx |	hist := self history.	(idx := hist selectionIndex) &lt; hist list size ifFalse: [^self].	hist selectionIndex: idx + 1.	self queryModel value: hist selection</body><body package="GHAdHocQueryTool">prevQuery	"selects the previously executed statement from history"	| hist idx |	hist := self history.	(idx := hist selectionIndex) &lt;= 1 ifTrue: [^self].	hist selectionIndex: idx - 1.	self queryModel value: hist selection</body><body package="GHAdHocQueryTool">rememberQuery	"stores the current query in history"	| qString hist list idx |	qString := self query asString.	idx := (list := (hist := self history) list) indexOf: qString.	idx = 0 ifFalse: ["move query to end of history"		list removeAtIndex: idx].	list add: qString.	hist selectionIndex: list size</body><body package="GHAdHocQueryTool">saveHistory	"save remembered queries on file named as requested from user"	| hist file |	(hist := self history list) isEmpty ifTrue: [^Dialog warn: 'Nothing to save'].	file := Dialog requestFileName: 'Name of history file?' default: '*.sql' version: #new ifFail: [^self].	file := file asFilename writeStream.	Cursor write showWhile: [[hist do: [:string | file nextChunkPut: string]			separatedBy: [file cr; cr]]			valueNowOrOnUnwindDo: [file close]]</body><body package="GHAdHocQueryTool">updateHistoryIndex: anInteger	"The new selection index of the history SelectionInList is &lt;anInteger&gt;.	Update the string which keeps track of that."	| sz string |	string := (sz := self history list size) isZero				ifTrue: ['']				ifFalse: ['&lt;1p&gt; / &lt;2p&gt;' expandMacrosWith: anInteger with: sz].	self historyIndex value: string</body></methods><methods><class-id>Database.GHAdHocQueryTool</class-id> <category>actions</category><body package="GHAdHocQueryTool">connectDisconnect	"toggle connection state: disconnect if connected, connect if not connected"	self connectedStatusHolder value		ifTrue: [self disconnect]		ifFalse: [self connect]</body><body package="GHAdHocQueryTool">execute	"like inherited #execute; remembers the query in history and shows result size"	| discardSession |	self updateQueryChoices.	discardSession := false.	Cursor database showWhile: 			[			[session isNil ifTrue: [session := connection getSession connect].			session				prepare: self query asString;				blockFactor: self blockFactor;				execute.			answerStream := session answer.			self nextAnswer.			self rememberQuery; updateResultSize]					on: connection class externalDatabaseErrorSignal					do: 						[:exception |						self reportException: exception.						discardSession := true.						exception return]].	discardSession ifTrue: [session notNil ifTrue: [session disconnect]]</body></methods><methods><class-id>Database.GHAdHocQueryTool</class-id> <category>actions-inspect</category><body package="GHAdHocQueryTool">inspectColumnSet	"collect values of selected column to a Set and inspect it"	| idx set |	idx := self tableModel selectionInTable selectionIndex x.	idx = 0 ifTrue: [^self].	set := Set new.	self columns: (Array with: idx)		do: [:val | set add: val].	set inspect</body><body package="GHAdHocQueryTool">inspectTable	self tableModel table inspect</body></methods><methods><class-id>Database.GHAdHocQueryTool</class-id> <category>testing</category><body package="GHAdHocQueryTool">hasColumnLabels	"Answer true, if column labels are available, false otherwise."	^self tableColumnLabels notEmpty</body><body package="GHAdHocQueryTool">hasHistory	"Answer true if the query history is not empty, false otherwise."	^self history list notEmpty</body><body package="GHAdHocQueryTool">hasNextQuery	"Answer true if the selected query is not the last one in history, false otherwise."	| hist |	^(hist := self history) selectionIndex &lt; hist list size</body><body package="GHAdHocQueryTool">hasPreviousQuery	"Answer true if the selected query is not the first one in history, false otherwise."	^self history selectionIndex &gt; 1</body><body package="GHAdHocQueryTool">hasTable	"Answer true, if the table is not empty, false otherwise"	^self tableModel table notEmpty</body><body package="GHAdHocQueryTool">isCellSelected	"return true, if a cell is selected, false otherwise"	^self tableModel selectionInTable selectionIndex isZero not</body><body package="GHAdHocQueryTool">isColumnSelected	"return true, if a column is selected, false otherwise"	^self tableModel selectionInTable selectionIndex x isZero not</body><body package="GHAdHocQueryTool">isRowSelected	"return true, if a row is selected, false otherwise"	^self tableModel selectionInTable selectionIndex y isZero not</body></methods><methods><class-id>Database.GHAdHocQueryTool</class-id> <category>aspects</category><body package="GHAdHocQueryTool">historyIndex	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^historyIndex isNil		ifTrue:			[historyIndex := String new asValue]		ifFalse:			[historyIndex]</body><body package="GHAdHocQueryTool">tableModel	"Answer a TableInterface that will hold future query results."	^tableModel isNil		ifTrue: 			[(tableModel := TableInterface new)				selectionInTable: SelectionInTable new;				columnLabelsArray: #()]		ifFalse: [tableModel]</body></methods><methods><class-id>Database.GHAdHocQueryTool</class-id> <category>interface opening</category><body package="GHAdHocQueryTool">preBuildWith: aBuilder	"provide for query string history and result size output"	| hist |	super preBuildWith: aBuilder.	aBuilder aspectAt: #history put: (hist := SelectionInList new).	aBuilder aspectAt: #resultSize put: 0 asPoint asValue.	hist selectionIndexHolder compute: [:v | self checkHistoryEnablement].	hist selectionIndexHolder compute: [:v | self updateHistoryIndex: v]</body></methods><methods><class-id>Database.GHAdHocQueryTool class</class-id> <category>resources</category><body package="GHAdHocQueryTool">menuBar	"Tools.MenuEditor new openOnClass: self andSelector: #menuBar"	&lt;resource: #menu&gt;	^#(#{UI.Menu} #(			#(#{UI.MenuItem} 				#rawLabel: '&amp;Connection' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Connect...' 							#nameKey: #connect 							#value: #connect ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Disconnect' 							#enabled: false 							#nameKey: #disconnect 							#value: #disconnect ) 						#(#{UI.MenuItem} 							#rawLabel: 'E&amp;xit' 							#value: #closeRequest ) ) #(2 1 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Execution' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Execute' 							#enabled: false 							#nameKey: #execute 							#value: #execute 							#shortcutKeyCharacter: $e 							#shortcutModifiers: 2 ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Next Answer' 							#enabled: false 							#nameKey: #nextAnswer 							#value: #nextAnswer ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Buffers...' 							#nameKey: #fetchBuffers 							#value: #fetchBuffers ) ) #(3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Display' 				#hidden: true 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Fast Truncation' 							#nameKey: #shouldTruncateColumns 							#value: #shouldTruncateColumns 							#indication: true 							#helpText: 'Enable column truncation.' ) ) #(1 ) nil ) 				#helpText: 'Enable/disable column truncation.' ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;Utility' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Copy cell' 							#value: #copyCell 							#enablementSelector: #isCellSelected 							#helpText: 'Copy text for the currently selected cell into the clipboard' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Copy &amp;row' 							#value: #copyRow 							#enablementSelector: #isRowSelected 							#helpText: 'Copy text for currently selected row into the clipboard' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Copy c&amp;olumn' 							#value: #copyColumn 							#enablementSelector: #isColumnSelected 							#helpText: 'Copy text for currently selected column into the clipboard' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Copy column &amp;labels' 							#value: #copyColumnLabels 							#enablementSelector: #hasColumnLabels ) 						#(#{UI.MenuItem} 							#rawLabel: 'Copy &amp;table' 							#value: #copyTable 							#enablementSelector: #hasTable 							#helpText: 'Copy text for table values into the clipboard' ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Save table as...' 							#value: #exportTable 							#enablementSelector: #hasTable 							#helpText: 'Save TAB-separated text for table values to a file' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Inspect &amp;model' 							#value: #inspect 							#helpText: 'Open an Inspector on the ApplicationModel' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Inspect t&amp;able' 							#value: #inspectTable 							#enablementSelector: #hasTable 							#helpText: 'Open an Inspector on the TableAdaptor' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Inspect column s&amp;et' 							#value: #inspectColumnSet 							#enablementSelector: #isColumnSelected 							#helpText: 'Open an Inspector on the set of values in currently selected column' ) ) #(5 1 3 ) nil ) ) 			#(#{UI.MenuItem} 				#rawLabel: '&amp;History' 				#submenu: #(#{UI.Menu} #(						#(#{UI.MenuItem} 							#rawLabel: '&amp;Previous' 							#value: #prevQuery 							#enablementSelector: #hasPreviousQuery 							#helpText: 'Get the previous command' ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Next' 							#value: #nextQuery 							#enablementSelector: #hasNextQuery 							#helpText: 'Get the next command' ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Forget' 							#value: #forgetQuery 							#enablementSelector: #hasHistory 							#helpText: 'Discard currently selected command from history' ) 						#(#{UI.MenuItem} 							#rawLabel: 'Forget all' 							#value: #forgetAllQueries 							#enablementSelector: #hasHistory 							#helpText: 'Discard all commands from history' ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Load file...' 							#value: #loadHistory 							#helpText: 'Load command history from a text file' ) 						#(#{UI.MenuItem} 							#rawLabel: '&amp;Save as...' 							#value: #saveHistory 							#enablementSelector: #hasHistory 							#helpText: 'Save command history to a text file' ) ) #(2 2 2 ) nil ) ) ) #(5 ) nil ) decodeAsLiteralArray</body><body package="GHAdHocQueryTool">nextImage	"UIMaskEditor new openOnClass: self andSelector: #nextImage"	&lt;resource: #image&gt;	^(Image extent: 7@4 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[254 0 0 0 124 0 0 0 56 0 0 0 16 0 0 0])</body><body package="GHAdHocQueryTool">prevImage	"UIMaskEditor new openOnClass: self andSelector: #prevImage"	&lt;resource: #image&gt;	^(Image extent: 7@4 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[16 0 0 0 56 0 0 0 124 0 0 0 254 0 0 0])</body></methods><methods><class-id>Database.GHAdHocQueryTool class</class-id> <category>interface specs</category><body package="GHAdHocQueryTool">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Ad Hoc SQL' 			#min: #(#{Core.Point} 458 317 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 393 340 888 657 ) 			#flags: 4 			#menu: #menuBar ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 10 5 90 35 ) 					#name: #connect 					#model: #connectDisconnect 					#label: 'Connect' 					#isDefault: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 100 5 190 35 ) 					#name: #execute 					#flags: 40 					#model: #execute 					#label: 'Execute' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 200 5 310 35 ) 					#name: #nextAnswer 					#flags: 40 					#model: #nextAnswer 					#label: 'Next Answer' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 320 5 335 20 ) 					#name: #prevQuery 					#model: #prevQuery 					#tabable: false 					#label: #prevImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.Rectangle} 320 20 335 35 ) 					#name: #nextQuery 					#model: #nextQuery 					#tabable: false 					#label: #nextImage 					#hasCharacterOrientedLabel: false ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.75 8 0 -2 1 33 0 ) 					#flags: 0 					#model: #resultSize 					#alignment: #right 					#type: #object ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 40 0 0 1 -7 0.33 ) 					#name: #queryTextEditor 					#model: #queryModel 					#tabRequiresControl: true ) 				#(#{UI.ResizingSplitterSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 -6 0.33 0 1 -1 0.33 ) 					#name: #ResizingSplitter 					#flags: 8 					#horizontal: true 					#minAboveSize: 40 					#minBelowSize: 80 					#aboveWidgets: '#queryTextEditor' 					#belowWidgets: '#tableModel' ) 				#(#{UI.TableViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.33 0 1 0 1 ) 					#name: #tableModel 					#model: #tableModel 					#showHGrid: true 					#showVGrid: true ) 				#(#{UI.DataSetSpec} 					#properties: #(#{UI.PropertyListDictionary} #showHorizontalLines true #allowColumnResizing true #showVerticalLines true #allowColumnReordering false #rowSize 26 ) 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.33 0 1 0 1 ) 					#name: #dataset1 					#flags: 63 					#model: #dsvList 					#columns: #(						#(#{UI.DataSetColumnSpec} 							#properties: #(#{UI.PropertyListDictionary} #allowSorting true #labelFromApplication false ) 							#model: #'selectedRow 1' 							#label: '.' 							#labelFont: #default 							#labelIsImage: false 							#width: 80 							#rendererType: #Text 							#editorType: #None 							#font: #default 							#type: #object 							#noScroll: false 							#formatString: '' ) ) 					#horizontalPolicy: #noWrap ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.Rectangle} 338 10 372 33 ) 					#name: #historyIndexField 					#flags: 0 					#model: #historyIndex 					#tabable: false 					#alignment: #right 					#isReadOnly: true 					#type: #string ) ) ) )</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - tools - database</category><body package="GHAdHocQueryTool">menuItemOpenAdHocSQLQueryTool	&lt;menuItemForCommand: #openAdHocSQLQueryTool		nameKey: nil		menu: #(#menuBar #tools #database)		position: 10.1&gt;	self openApplicationForClassNamed: #{GHAdHocQueryTool}</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class><class><name>AdHocQueryTool</name><environment>Database</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>connection session answerStream queryModel dsvList whichDriverModel connectedStatusHolder executeStatusHolder moreAnswersStatusHolder profile blockFactorModel truncateColumnsStatusHolder selectedRow queryChoices spinButtonModel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Database-Tools</category><attributes><package>Database</package></attributes></class></st-source>