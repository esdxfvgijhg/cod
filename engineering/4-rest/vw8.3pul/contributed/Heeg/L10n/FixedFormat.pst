<?xml version="1.0"?><st-source><!-- Name: FixedFormatNotice: © Copyright 2005-2015 Georg Heeg e.K.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.(MIT License)Comment: FixedFormat contains class FixedLine that represents a line of text and subclasses only need to implement accessor methods that return substrings from a given position in the string to another position.See implementation in the ExampleLine class for more details.DbIdentifier: magdi.heeg.de.postgresDbTrace: 52861DbUsername: danielDbVersion: 7.7.1 - 5DevelopmentPrerequisites: #(#(#any 'GHNamespaces' ''))PackageName: FixedFormatParcel: #('FixedFormat')ParcelDirectory: c:\visworks\vw8.1 may15.3\image\Contributions\HeegContributions-vw8.1-2015-06-04\L10n\FixedFormatParcelName: FixedFormatPrerequisiteDescriptions: #(#(#name 'GHNamespaces' #componentType #package))PrerequisiteParcels: #(#('GHNamespaces' ''))PrintStringCache: (7.7.1 - 5,daniel)Version: 7.7.1 - 5Date: 9:31:54 AM June 5, 2015 --><time-stamp>From VisualWorks®, Pre-Release 8.1 (may15.3) of 15. Mai 2015 on 5. Juni 2015 at 09:31:54</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>FixedLine</name><environment>Heeg</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>line </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GLDV</category><attributes><package>FixedFormat</package></attributes></class><comment><class-id>Heeg.FixedLine</class-id><body>FixedLine is a Class that represents a line of text and subclasses only need to implement accessor methods that return substrings from a given position in the string to another position.see the example below and it's implementation in the ExampleLine class for more details.use #fromStream: to create an OrderedCollection of FixedLines.Instance Variables:	line	&lt;String&gt;	stores the line where it takes the characters from.examle:ExampleLine fromStream: (ReadStream on:'Adam 24 maleEva  23 female')</body></comment><class><name>ExampleLine</name><environment>Heeg</environment><super>Heeg.FixedLine</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>FixedFormat</category><attributes><package>FixedFormat</package></attributes></class><comment><class-id>Heeg.ExampleLine</class-id><body>ExampleLine provides an example how to use FixedLineUsage:ExampleLine fromStream: (ReadStream on:'Adam 24 maleEva  23 female')</body></comment><methods><class-id>Heeg.FixedLine</class-id> <category>private</category><body package="FixedFormat">elements	^(self class organization listAtCategoryNamed: #accessing) 		select: [:each | each asString last ~= $:]</body><body package="FixedFormat">line	^line</body><body package="FixedFormat">line: anObject 	line := anObject</body><body package="FixedFormat">primFrom: from to: to 	^line		copyFrom: from		to: to</body><body package="FixedFormat">primPut: aString from: from to: to 	line		replaceFrom: from		to: (to min: from + aString size - 1)		with: (aString size &gt; (to - from + 1)				ifTrue: [aString copyFrom: 1 to: to - from + 1]				ifFalse: [aString])</body></methods><methods><class-id>Heeg.FixedLine</class-id> <category>read and write</category><body package="FixedFormat">from: from to: to 	| erg |	erg := self primFrom: from to: to.	erg size		to: 1		by: -1		do: [:i | (erg at: i)				== $  ifFalse: [^erg copyFrom: 1 to: i]].	^String new</body><body package="FixedFormat">integerFrom: from to: to 	^Integer readFromString: (self		primFrom: from		to: to)</body><body package="FixedFormat">integerPut: anInteger from: from to: to 	| erg s |	anInteger &lt; 0 ifTrue: [self error: anInteger printString , ' ist negativ.'].	erg := String new: to - from + 1 withAll: $0.	s := anInteger printString.	s size &gt; erg size ifTrue: [self error: anInteger printString , ' ist zu lang.'].	s size		to: 1		by: -1		do: [:i | erg at: i + erg size - s size put: (s at: i)].	self		primPut: erg		from: from		to: to</body><body package="FixedFormat">put: aString from: from to: to 	self		primPut: aString		from: from		to: to</body></methods><methods><class-id>Heeg.FixedLine</class-id> <category>printing</category><body package="FixedFormat">printOn: aStream 	self elements do: [:e | aStream nextPutAll: e; nextPutAll: ': '; print: (self perform: e asSymbol); cr]</body></methods><methods><class-id>Heeg.FixedLine</class-id> <category>initialization</category><body package="FixedFormat">initialize	line := String new: self size withAll: Character space</body></methods><methods><class-id>Heeg.FixedLine class</class-id> <category>generation</category><body package="FixedFormat">fromStream: aStream 	"ExampleLine fromStream: (ReadStream on:'Adam 24 maleEva  23 female')"	| saetze line |	saetze := OrderedCollection new.	[aStream atEnd] whileFalse: 			[line := aStream upTo: Character cr.			line isEmpty ifFalse: [saetze add: (self line: line)]].	aStream close.	^saetze</body></methods><methods><class-id>Heeg.FixedLine class</class-id> <category>instance creation</category><body package="FixedFormat">line: anObject 	^self new line: anObject</body></methods><methods><class-id>Heeg.ExampleLine</class-id> <category>accessing</category><body package="FixedFormat">age	"the 6th to 8th character contains the age"	^self integerFrom: 6 to: 8</body><body package="FixedFormat">gender	"the last characters starting at the 9th character contain the gender"	^self from: 9 to: line size</body><body package="FixedFormat">name	"the first 4 characters of the line contain the name"	^self from: 1 to: 4</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class></st-source>