<?xml version="1.0"?><st-source><!-- Name: GremlinComment: A neat thing to load into your unsuspecting friend's image on April 1st: afunny face (run by a background process) that appears at the bottom of thecurrent window and waves at you every once in a while.Author: Vassili BykovDate:   December 15, 1994Updated for immutability: March 26, 2002Imagine a long and boring legalistic passage here, to the effect that youmay redistribute and use this program for any purpose provided this commentremains intact and I am not held responsible for any problem directly orindirectly related or caused by the use of this program.DbIdentifier: bear73DbTrace: 499202DbUsername: jkottDbVersion: 1.2HideSource: falsePackageName: GremlinParcel: #('Gremlin')ParcelName: GremlinPrintStringCache: (1.2,jkott)SaveSource: trueVersion: 1.2Post-Load Block: 	[:pkg| Gremlin postLoadActionFor: pkg ]Date: 1:46:52 PM March 17, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (mar17.3) of March 17, 2017 on March 17, 2017 at 1:46:52 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Gremlin</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>process verbose min max </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VB-Gremlin</category><attributes><package>Gremlin</package></attributes></class><comment><class-id>Gremlin</class-id><body>(C) Vassili Bykov, 15 December 1994Imagine a long and boring legalistic passage here, to the effect that you may redistribute and use this program for any purpose provided this comment remains intact and I am not held responsible for any problem directly or indirectly related to the use of the program, and you may use any portion of this program in your programs provided you acknowledge the origin of the borrowed portion.-----This is an example for ImagePlayer and TapeBuilder and a generally neat thing to put into an unsuspecting friend's image on April 1st's eve. A funny face popping at random intervals at the bottom of the active window. Evaluate	Gremlin controlPanelto open a window where you can turn the gremlin on and off, set verbosity (in verbose mode the gremlin reports the time when it will pop up next time to the Transcript), and minimum and maximum popup intervals: the gremlin will appear with delays randomly chosen from this range.You can also evaluate	Gremlin popupNowto make the gremlin appear at the bottom of the current window.Instance variables:	process		&lt;Process&gt; The UserInterruptPriority process executing this gremlin.	verbose		&lt;Boolean&gt; If true, the gremlin reports to the Transcript the time of the next pop-up.	min			&lt;Number&gt;	max 		&lt;Number&gt; This gremlin pops up with the random delay picked from (min, max) interval.Class variables	Default		&lt;Gremlin|nil&gt; Normally, there's the only gremlin in the system living in the background. This class variable is used to hold onto it. If nil, no gremlins are scheduled.</body></comment><class><name>GrmImageBuilder</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>source tape cache </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VB-Gremlin</category><attributes><package>Gremlin</package></attributes></class><comment><class-id>GrmImageBuilder</class-id><body>This is a class simplifying the process of building an array of frames supplied to an ImagePlayer. An instance of a class is created by sending message #on: to the class. The argument is a class where the images of the individual frames are defined (as resource methods). Then the instance is sent messages defined in 'accessing' protocol (see method #tape on class side of Gremlin as an example). Then the tape is retrieved from the builder by sending message #tape to it.Instance variables:	source	&lt;Class&gt; The class where the resource methods with images of the individual frames of the tape are defined.	tape	&lt;OrderedCollection&gt; The tape being built.	cache	&lt;Dictionary&gt; caching the already built images, do that they are reused.-------Vassili Bykov, 15 December 1994</body></comment><class><name>GrmImagePlayer</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>frames offset saved work bounds </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VB-Gremlin</category><attributes><package>Gremlin</package></attributes></class><comment><class-id>GrmImagePlayer</class-id><body>This is the tool for playing a sequence of images to produce an animation. An instance is created by sending a message #withTape: to the class. The argument of the message is a "tape", most probably built with TapeBuilder class. Later the instance can be sent a message 	playOn: aGraphicsContext at: aPointto play the sequence (once) on the specified graphics context. aPoint is the location of the top-left corner of the sprite sequence.Instance variables:	frames		&lt;Array&gt; of frames the player plays.	offset 		&lt;Point&gt; Origin of the frames in the graphics context when played.	saved 		&lt;Pixmap|nil&gt; Before playing, the player saves the original background of the window area the frames occupy here.	work		&lt;Pixmap|nil&gt; A current frame to be drawn on the destination graphics context is formed here.	bounds		&lt;Rectangle&gt; Bounds of a frame.-------Vassili Bykov, 15 December 1994</body></comment><shared-variable><name>Default</name><environment>Gremlin</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>Gremlin</package></attributes></shared-variable><methods><class-id>Gremlin</class-id> <category>initialize-release</category><body package="Gremlin">release	"I should terminate the process I am being executed with."	process terminate.	super release</body><body package="Gremlin">verbose: aBoolean min: anInt1 max: anInt2	"Initialize myself so that I will appear at intervals picked randomly from the range (anInt1, anInt2). Set verbosity to aBoolean. A background process responsible for popping up is scheduled here. It is terminated in the #release method of myself."	| random tape |	verbose := aBoolean.	min := anInt1.	max := anInt2.	random := Random new.	tape := self class tape.	process :=  [		[ | delay |		delay := min * 60 + (random next * (max - min * 60)) rounded.		self report: 'Next popup is scheduled at: ',			(Time fromSeconds: (Time now asSeconds + delay \\ 86400)) printString.		(Delay forSeconds: delay) wait.		Object errorSignal	"suppress and ignore all errors while playing"			handle: [:ex |				self report: 'Unable to popup at ', Time now printString.				ex return]			do: [self playInCurrentWindow: tape] ] repeat	] forkAt: Processor userInterruptPriority</body></methods><methods><class-id>Gremlin</class-id> <category>accessing</category><body package="Gremlin">beVerbose: aBoolean	verbose := aBoolean</body><body package="Gremlin">max	^max</body><body package="Gremlin">min	^min</body><body package="Gremlin">verbose	^verbose</body></methods><methods><class-id>Gremlin</class-id> <category>private</category><body package="Gremlin">playInCurrentWindow: aTape	"Play the specified tape at the bottom of the current window. Don't care about any possible errors, because normally this method is called with errorSignal being handled by the caller."	| p view ext |	p := GrmImagePlayer withTape: aTape.	view := Window activeController view component.	ext := (aTape first at: 1) preferredBounds extent.	p 		playOn: view graphicsContext		at: (view bounds bottomCenter - (ext x // 2 @ ext y))</body><body package="Gremlin">report: aString	"Print stuff on the Transcript if in verbose mode, do nothing otherwise."	verbose ifTrue:		[Transcript show: 'Gremlin: ', aString; cr]</body></methods><methods><class-id>Gremlin class</class-id> <category>accessing</category><body package="Gremlin">beVerbose: aBoolean	"Modify the verbosity status of the currently scheduled gremlin."	Default isNil		ifTrue:			[Transcript show: 'No gremlin scheduled now.'; cr]		ifFalse:			[Default beVerbose: aBoolean]</body><body package="Gremlin">default	"Answer the currently scheduled gremlin (nil if no gremlin is scheduled)."	^Default</body><body package="Gremlin">scheduleInterval: anInteger1 to: anInteger2 verbose: aBoolean	"Make a new default gremlin, unscheduling the old one first, with the attributes specified."	anInteger1 &lt; anInteger2		ifFalse: [self error: 'Bad arguments'].	self unschedule.	Default := self new		verbose: aBoolean		min: anInteger1		max: anInteger2</body><body package="Gremlin">unschedule	"Unschedule the currently scheduled gremlin, if there is one."	Default notNil ifTrue:		[Default release.		Default := nil]</body></methods><methods><class-id>Gremlin class</class-id> <category>class initialization</category><body package="Gremlin">initialize	"Schedule the Gremlin automatically as soon as the code is loaded."	self scheduleInterval: 10 to: 30 verbose: false</body><body package="Gremlin">obsolete	self unschedule.	super obsolete</body></methods><methods><class-id>Gremlin class</class-id> <category>private</category><body package="Gremlin">commitChangesFrom: anArray	"Helper method for the control panel. Commit values from the control panel's aspects."	(anArray at: 1) value		ifFalse: [Gremlin unschedule]		ifTrue:			[| min max |			min := (anArray at: 3) value.			max := (anArray at: 4) value.			(min &gt;= max or: [max &lt;= 0]) ifTrue:				[Dialog warn: 'Max should be greater than min and greater than zero.'.				^false].			Gremlin				scheduleInterval: min to: max verbose: (anArray at: 2) value].	^true</body><body package="Gremlin">createOptionsArray	"Create and answer an array of aspects for the control panel, with the proper values (either default or those from the scheduled gremlin)."	| options |	options := Array new: 4.	Default isNil		ifTrue:			[options				at: 1 put: false asValue;				at: 2 put: true asValue;				at: 3 put: 5 asValue;				at: 4 put: 10 asValue;				yourself]		ifFalse:			[options				at: 1 put: true asValue;					at: 2 put: Default verbose asValue;				at: 3 put: Default min asValue;				at: 4 put: Default max asValue].	^options</body><body package="Gremlin">enableAccept: aBoolean inBuilder: aBuilder	"Helper method to enable or disable Accept and Restore buttons in the control panel."	#(accept cancel) do:		[:each |		(aBuilder componentAt: each) isEnabled: aBoolean]</body><body package="Gremlin">enableOptions: aBoolean inBuilder: aBuilder	"Helper method to enable or disable options widgets in the control panel (disabled if the gremlin is off)."	#(verbose min max) do:		[:each |		(aBuilder componentAt: each) isEnabled: aBoolean]</body><body package="Gremlin">tape	"Create and answer the tape with my animated picture."	|  b b1 b2 b3 |	b := GrmImageBuilder on: self.	b1 := GrmImageBuilder on: self.	b2 := GrmImageBuilder on: self.	b3 := GrmImageBuilder on: self.	b1 show: #(imAppear10 mAppear10) forMilliseconds: 80.	b1 show: #(imAppear20 mAppear20) forMilliseconds: 80.	b1 show: #(imAppear30 mAppear30) forMilliseconds: 80.	b1 show: #(imAppear20 mAppear20) forMilliseconds: 80.	b1 show: #(imAppear50 mAppear50) forMilliseconds: 80.	b1 show: #(imAppear60 mAppear60) forMilliseconds: 80.	b1 show: #(imAppear70 mAppear70) forMilliseconds: 80.	b1 show: #(imAppear80 mAppear80) forMilliseconds: 80.	b1 show: #(imAppear70 mAppear70) forMilliseconds: 80.	b1 show: #(imAppear100 mAppear100) forMilliseconds: 80.	b1 show: #(imAppear110 mAppear110) forMilliseconds: 50.	b1 show: #(imAppear115 mAppear115) forMilliseconds: 50.	b1 show: #(imAppear120 mAppear120) forMilliseconds: 50.	b1 show: #(imAppear125 mAppear125) forMilliseconds: 50.	b1 show: #(imAppear130 mAppear130) forMilliseconds: 50.	b1 show: #(imAppear135 mAppear135) forMilliseconds: 50.	b1 show: #(imAppear140 mAppear140) forMilliseconds: 50.	b1 show: #(imAppear145 mAppear145) forMilliseconds: 50.	b1 show: #(imAppear150 mAppear150) forMilliseconds: 50.	b1 show: #(imAppear145 mAppear145) forMilliseconds: 50.	b show: #(imFacey mFacey) forMilliseconds: 800.	b show: #(imFacey3 mFacey) forMilliseconds: 50.	b show: #(imFacey2 mFacey) forMilliseconds: 50.	b show: #(imFacey3 mFacey) forMilliseconds: 50.	b repeat: 1.	b show: #(imFacey mFacey) forMilliseconds: 50.	b show: #(imSmiling1 mSmiling1) forMilliseconds: 100.	b show: #(imSmiling2 mSmiling2) forMilliseconds: 100.	b show: #(imHalfSmile mHalfSmile) forMilliseconds: 200.	b2 show: #(imHalfSmileL mHalfSmileL) forMilliseconds: 100.	b2 show: #(imHalfSmile mHalfSmile) forMilliseconds: 100.	b2 show: #(imHalfSmileR mHalfSmileR) forMilliseconds: 100.	b2 show: #(imHalfSmile mHalfSmile) forMilliseconds: 100.	b2 repeat: 3.	b3 show: #(imSmiling2a mSmiling2) forMilliseconds: 100.	b3 show: #(imSmiling1a mSmiling1) forMilliseconds: 100.	b3 show: #(imAfterSmile mFacey) forMilliseconds: 200.	^ b1 tape, b tape, b2 tape, b3 tape, b1 tape reverse</body></methods><methods><class-id>Gremlin class</class-id> <category>utilities</category><body package="Gremlin">controlPanel	"Open a control panel for the gremlin. Gremlin is not a subclass of ApplicationModel, and I don't care to make separate application for the control panel. Hence, the model for the interface is built on the fly from bits, pieces and chewing gum." 	"Gremlin controlPanel"	| options builder updater |	options := self createOptionsArray.	builder := UIBuilder new.	builder 		aspectAt: #isOn put: (options at: 1);		aspectAt: #verbose put: (options at: 2);		aspectAt: #min put: (options at: 3);		aspectAt: #max put: (options at: 4);		actionAt: #accept put: ((PluggableAdaptor on: nil asValue)			getBlock: [:m | false]			putBlock: [:m :v | 				(self commitChangesFrom: options)					ifTrue: [self enableAccept: false inBuilder: builder] ]			updateBlock: [:m :a :p | true] );		actionAt: #cancel put: ((PluggableAdaptor on: nil asValue)			getBlock: [:m | false]			putBlock: [:m :v | | o |				o := self createOptionsArray.				1 to: 4 do: [:i | (options at: i) value: (o at: i) value].				self enableAccept: false inBuilder: builder]			updateBlock: [:m :a :p | true] ).	(options at: 1) addDependent: ((PluggableAdaptor on: (options at: 1))		getBlock: [:m | ]		putBlock: [:m :v | ]		updateBlock: 			[:m :a :p | self enableOptions: (options at: 1) value inBuilder: builder. 			false]).	updater := ((PluggableAdaptor on: nil asValue)		getBlock: [:m | ]		putBlock: [:m :v | ]		updateBlock: [:m :a :p |			self enableAccept: true inBuilder: builder.			false] ).	options do: [:each | each addDependent: updater].	builder addSpec: (UISpecification from: self windowSpec).	builder open.	#(min max) do: 		[:s | (builder componentAt: s) widget controller				continuousAccept: true].	(options at: 1) value: (options at: 1) value.	self enableAccept: false inBuilder: builder.	"Just for the fun of it, pop up the gremlin in the dialog immediately."	[(Delay forMilliseconds: 200) wait.	self popupNow] fork</body><body package="Gremlin">popupNow	"Make the gremlin popup right now."	"Gremlin popupNow"	Object errorSignal	"suppress and ignore all errors while playing"		handle: [:ex | ex return]		do: [GrmImagePlayer playInCurrentWindow: self tape]</body></methods><methods><class-id>Gremlin class</class-id> <category>parcel load/unload/save</category><body package="Gremlin">postLoadActionFor: aParcel	| stream window |	stream := TextStream on: String new.	stream		nextPutAll: 'Gremlin is installed and will pop up at random intervals between 10 and 30 minutes. Evaluate:'; cr;		tab; nextPutAll: 'Gremlin controlPanel'; cr;		nextPutAll: 'to adjust parameters,'; cr;		tab; nextPutAll: 'Gremlin popupNow'; cr;		nextPutAll: 'to make it appear immediately.'.	(window := ComposedTextView			createOn: (TextCollector with: stream contents)			label: 'Gremlin'			icon: (Icon constantNamed: #workspace))		openIn: (30@250 extent: 350@250).	Processor activeProcess windowManager ifNotNil: [:wm | wm setActiveController: window controller].	self popupNow</body></methods><methods><class-id>GrmImageBuilder</class-id> <category>initialize-release</category><body package="Gremlin">initialize: aClass	source := aClass.	tape := OrderedCollection new.	cache := Dictionary new</body></methods><methods><class-id>GrmImageBuilder</class-id> <category>accessing</category><body package="Gremlin">frameExtent	"Answer the extent of the first frame or nil."	^tape isEmpty		ifTrue: [nil]		ifFalse:[(tape first at: 1) preferredBounds extent]</body><body package="Gremlin">loopBack	"Make the current tape twice as long by adding all the existing frames to it in the reversed order."	tape addAll: tape reverse</body><body package="Gremlin">repeat: anInteger	"Repeat the current sequence of frames the specified number of times."	| frames |	frames := tape copy.	anInteger timesRepeat: [tape addAll: frames]</body><body package="Gremlin">show: anArray forMilliseconds: anInteger	"This is *the* frame-adding method. An array is a two-element Array of Symbols. The first element is the selector of the resource method with the figure (XOR-mask) of the frame, and the second is the selector of the method with the shape (AND-mask) of the frame. (The methods are supposed to be defined in the 'source' class specified when creating the builder with #on: method). The frame will be displayed, while playing, for anInteger milliseconds."	tape add: (Array		with: (OpaqueImage				figure: (self retrieve: (anArray at: 1))				shape: (self retrieve: (anArray at: 2)))		with: anInteger)</body><body package="Gremlin">tape	"Use this method to retrieve the built frame from the builder."	^tape</body></methods><methods><class-id>GrmImageBuilder</class-id> <category>private</category><body package="Gremlin">retrieve: aSelector	"Retrieve the Image (or Mask) from the resource method aSelector of the source class. The image is placed into the builder's cache keyed by selector (which is enough since there's the only source class) , thus avoiding a duplication if the tape uses the same image more than once."	^cache 		at: aSelector		ifAbsent: 			[ | image |			image := source perform: aSelector.			cache at: aSelector put: image.			image ]</body></methods><methods><class-id>GrmImageBuilder class</class-id> <category>instance creation</category><body package="Gremlin">on: aClass	"Create a new builder. The builder will use aClass as the source."	^self new initialize: aClass</body></methods><methods><class-id>GrmImagePlayer</class-id> <category>accessing</category><body package="Gremlin">playOn: aGraphicsContext at: aPoint	"Play the frame on the graphics context specified, positioning the top left corner of each frame at aPoint."	offset := aPoint.	self saveBackgroundOf: aGraphicsContext.	frames do: 		[:each | 		self displayFrame: (each at: 1) on: aGraphicsContext.		(Delay forMilliseconds: (each at: 2)) wait].	self restoreBackgroundOf: aGraphicsContext</body></methods><methods><class-id>GrmImagePlayer</class-id> <category>playing</category><body package="Gremlin">displayFrame: anImage on: aGraphicsContext	"Display an individual frame on a GraphicsContext. Actually, the saved background of the graphics context is displayed first at the work pixmap, then the frame is applied to the pixmap, and then the prepared picture is placed on the graphics context."	| wgc |	wgc := work graphicsContext.	saved displayOn: wgc.	anImage displayOn: wgc.	work displayOn: aGraphicsContext at: offset</body><body package="Gremlin">restoreBackgroundOf: aGraphicsContext	"Restore the background of aGraphicsContext where the tape was played."	aGraphicsContext		copyArea: (0@0 extent: bounds extent)		from: saved graphicsContext		sourceOffset: 0@0		destinationOffset: offset.	saved := nil</body><body package="Gremlin">saveBackgroundOf: aGraphicsContext	"Save the background of the area of aGraphicsContext where the tape will be played."	bounds := (frames first at: 1) preferredBounds.	bounds := offset extent: bounds extent.	saved := Pixmap extent: bounds extent.	saved graphicsContext		copyArea: (0@0 extent: bounds extent)		from: aGraphicsContext		sourceOffset: offset		destinationOffset: 0@0.	work := Pixmap extent: bounds extent</body></methods><methods><class-id>GrmImagePlayer</class-id> <category>initialize-release</category><body package="Gremlin">initialize: anArray	frames := anArray.	offset := 0@0</body></methods><methods><class-id>GrmImagePlayer class</class-id> <category>utilities</category><body package="Gremlin">playInCurrentWindow: aTape	"Play the provided tape (an OrderedCollection of Images) at the bottom of the current window."	| p view ext |	p := self withTape: aTape.	view := Window activeController view component.	ext := (aTape first at: 1) preferredBounds extent.	p 		playOn: view graphicsContext		at: (view bounds bottomCenter - (ext x // 2 @ ext y))</body></methods><methods><class-id>GrmImagePlayer class</class-id> <category>instance creation</category><body package="Gremlin">withTape: anOrderedCollection	"This is the instantiation method to use. anOrderedCollection is an ordered collection of frames, most probably built with TapeBuilder."	^super new initialize: anOrderedCollection asArray</body></methods><methods><class-id>Gremlin class</class-id> <category>resources</category><body package="Gremlin">imAfterSmile	"UIMaskEditor new openOnClass: self andSelector: #imAfterSmile"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????O?????&lt;@@??????&lt;??????&lt;@@?????&lt;&lt;??????&lt;@@?????&lt;&lt;?C????&lt;@@?????&lt;&lt;&lt;?????&lt;@@??????L3?????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@????0B&gt;*@O???&lt;@@???&lt;N(:(* ???&lt;@@???3:(:(**O??&lt;@@???3*(*(**O??&lt;@@???3"*@B*JO??&lt;@@???3"****JO??&lt;@@0003(***(*LLLL@@NNN@*@@@B(C## @@JJJOB****C2"" @@@@@O&lt;@@@@?0@@@@@'))</body><body package="Gremlin">imAppear10	"UIMaskEditor new openOnClass: self andSelector: #imAppear10"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedStringbody><body package="Gremlin">imAppear100	"UIMaskEditor new openOnClass: self andSelector: #imAppear100"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedStringbody><body package="Gremlin">imAppear110	"UIMaskEditor new openOnClass: self andSelector: #imAppear110"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedStringbody><body package="Gremlin">imAppear115	"UIMaskEditor new openOnClass: self andSelector: #imAppear115"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????3?????&lt;@@???????O?????&lt;@@??????&lt;??????&lt;@@??????L??????&lt;@@?????&lt;&lt;?O????&lt;@@??????L03????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@000??&lt;&gt;(??&lt;LLL@@JJJO0C:*@O2"" @@JJJOET*(US2"" @@@@@L]UJ!5T0@@@@@'))</body><body package="Gremlin">imAppear120	"UIMaskEditor new openOnClass: self andSelector: #imAppear120"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????3?????&lt;@@???????O?????&lt;@@??????&lt;??????&lt;@@??????L??????&lt;@@?????&lt;&lt;?O????&lt;@@??????L03????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@0001=URG5ULLLL@@JJJATEREPUB"" @@JJJATEREPUB"" @@@@@AUUREUU@@@@@@'))</body><body package="Gremlin">imAppear125	"UIMaskEditor new openOnClass: self andSelector: #imAppear125"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????3?????&lt;@@???????O?????&lt;@@??????&lt;??????&lt;@@??????L??????&lt;@@?????&lt;&lt;?O????&lt;@@??????L03????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@000&lt;UUN!UT&lt;LLL@@JJJOET&gt;(US2"" @@JJJO0B&gt;*@O2"" @@@@@LN(:(* 0@@@@@'))</body><body package="Gremlin">imAppear130	"UIMaskEditor new openOnClass: self andSelector: #imAppear130"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????3?????&lt;@@???????O?????&lt;@@??????&lt;??????&lt;@@??????L??????&lt;@@?????&lt;&lt;?O????&lt;@@??????L03????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@????0B&gt;*@O???&lt;@@000&lt;N(:(* &lt;LLL@@JJJC:(:(**B"" @@JJJC*(*(**B"" @@@@@C**@B**@@@@@@'))</body><body package="Gremlin">imAppear135	"UIMaskEditor new openOnClass: self andSelector: #imAppear135"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????O?????&lt;@@??????&lt;??????&lt;@@??????L??????&lt;@@?????&lt;&lt;?O????&lt;@@??????L03????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@????0B&gt;*@O???&lt;@@???&lt;N(:(* ???&lt;@@???3:(:(**O??&lt;@@???3*(*(**O??&lt;@@0003**@B**LLLL@@JJJC******B"" @@JJJC(@@@@*B"" @@@@@@*****(@@@@@@'))</body><body package="Gremlin">imAppear140	"UIMaskEditor new openOnClass: self andSelector: #imAppear140"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????3?????&lt;@@???????O?????&lt;@@??????&lt;??????&lt;@@??????L??????&lt;@@?????&lt;&lt;?O????&lt;@@??????L03????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@????0B&gt;*@O???&lt;@@???&lt;N(:(* ???&lt;@@???3:(:(**O??&lt;@@???3*(*(**O??&lt;@@???3**@B**O??&lt;@@???3******O??&lt;@@0003(@@@@*LLLL@@JJJ@*****(B"" @@JJJOB****C2"" @@@@@O&lt;@@@@?0@@@@@'))</body><body package="Gremlin">imAppear145	"UIMaskEditor new openOnClass: self andSelector: #imAppear145"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@??????&lt;??????&lt;@@??????&lt;??????&lt;@@?????3&lt;?O????&lt;@@?????3&lt;&lt;?????&lt;@@?????&lt;&lt;&lt;?????&lt;@@??????L3?????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@????0B&gt;*@O???&lt;@@???&lt;N(:(* ???&lt;@@???3:(:(**O??&lt;@@???3*(*(**O??&lt;@@???3**@B**O??&lt;@@???3******O??&lt;@@???3(@@@@*O??&lt;@@0000*****(LLLL@@JJJOB****C2"" @@JJJO&lt;@@@@?2"" @@@@@O??????0@@@@@'))</body><body package="Gremlin">imAppear150	"UIMaskEditor new openOnClass: self andSelector: #imAppear150"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@??????&lt;??????&lt;@@??????&lt;??????&lt;@@?????3&lt;?O????&lt;@@?????3&lt;&lt;?????&lt;@@?????&lt;&lt;&lt;?????&lt;@@??????L3?????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@????0B&gt;*@O???&lt;@@???&lt;N(:(* ???&lt;@@???3:(:(**O??&lt;@@???3*(*(**O??&lt;@@???3**@B**O??&lt;@@???3******O??&lt;@@???3(@@@@*O??&lt;@@???0*****(O??&lt;@@000?B****C&lt;LLL@@JJJO&lt;@@@@?2"" @@JJJO??????2"" @@@@@O??????0@@@@@'))</body><body package="Gremlin">imAppear20	"UIMaskEditor new openOnClass: self andSelector: #imAppear20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedStringbody><body package="Gremlin">imAppear30	"UIMaskEditor new openOnClass: self andSelector: #imAppear30"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedStringbody><body package="Gremlin">imAppear50	"UIMaskEditor new openOnClass: self andSelector: #imAppear50"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedStringbody><body package="Gremlin">imAppear60	"UIMaskEditor new openOnClass: self andSelector: #imAppear60"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedStringbody><body package="Gremlin">imAppear70	"UIMaskEditor new openOnClass: self andSelector: #imAppear70"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedStringbody><body package="Gremlin">imAppear80	"UIMaskEditor new openOnClass: self andSelector: #imAppear80"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedStringbody><body package="Gremlin">imFacey	"UIMaskEditor new openOnClass: self andSelector: #imFacey"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????O?????&lt;@@??????&lt;??????&lt;@@?????&lt;&lt;??????&lt;@@?????&lt;&lt;?C????&lt;@@?????&lt;&lt;&lt;?????&lt;@@??????L3?????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@????0B&gt;*@O???&lt;@@???&lt;N(:(* ???&lt;@@???3:(:(**O??&lt;@@???3*(*(**O??&lt;@@???3**@B**O??&lt;@@???3******O??&lt;@@0003(@@@@*LLLL@@NNN@*****(C## @@JJJOB****C2"" @@@@@O&lt;@@@@?0@@@@@'))</body><body package="Gremlin">imFacey2	"UIMaskEditor new openOnClass: self andSelector: #imFacey2"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '*************(@@*************(@@*************(@@*************(@@*************(@@*******J*****(@@******(******(@@*****((******(@@*****((*B****(@@*****(((*****(@@******H"*****(@@****** J*****(@@******HB*****(@@*****()T*****(@@**** B%U@J***(@@****J$UT*R***(@@***()UER%T***(@@***"%UQJUUJ**(@@***"UUQIUUJ**(@@***"UUQIUUJ**(@@***!UUQEUUJ**(@@***(UUIQUT***(@@****ET)TUR***(@@**** A)U@J***(@@***(IT%TUP***(@@***"%T%TUUJ**(@@***"UTUTUUJ**(@@***"UU@AUUJ**(@@***"UUUUUUJ**(@@   "T@@@@UHHHH@@III@UUUUUTBRRP@@EEEJAUUUUB!QQP@@@@@J(@@@@* @@@@@'))</body><body package="Gremlin">imFacey3	"UIMaskEditor new openOnClass: self andSelector: #imFacey3"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????O?????&lt;@@??????&lt;??????&lt;@@?????&lt;&lt;??????&lt;@@?????&lt;&lt;?C????&lt;@@?????&lt;&lt;&lt;?????&lt;@@??????L3?????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????J(*(*#???&lt;@@???&lt;**J"*(???&lt;@@???2**"J**O??&lt;@@???2**"J**O??&lt;@@???0@@B@@@O??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@????0B&gt;*@O???&lt;@@???&lt;N(:(* ???&lt;@@???3:(:(**O??&lt;@@???3*(*(**O??&lt;@@???3**@B**O??&lt;@@???3******O??&lt;@@0003(@@@@*LLLL@@NNN@*****(C## @@JJJOB****C2"" @@@@@O&lt;@@@@?0@@@@@'))</body><body package="Gremlin">imHalfSmile	"UIMaskEditor new openOnClass: self andSelector: #imHalfSmile"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????O?????&lt;@@??????&lt;??????&lt;@@?????&lt;&lt;??????&lt;@@?????&lt;&lt;?C????&lt;@@?????&lt;&lt;&lt;?????&lt;@@??????L3?????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@?&lt;O?0B&gt;*@O???&lt;@@&lt;B LN(:(* ???&lt;@@2""#:(:(**O??&lt;@@2""#*(*(**O??&lt;@@2""#"*@B*JO??&lt;@@2""#"****JO??&lt;@@2""#(***(*LLLL@@2"" *@@@B(C## @@2""#B****C2"" @@0@@C&lt;@@@@?0@@@@@'))</body><body package="Gremlin">imHalfSmileL	"UIMaskEditor new openOnClass: self andSelector: #imHalfSmileL"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????3?????&lt;@@???????O?????&lt;@@??????OO?????&lt;@@??????L?0????&lt;@@??????L&lt;O????&lt;@@??????L3?????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@????0B&gt;*@O???&lt;@@?00&lt;N(:(* ???&lt;@@0JJC:(:(**O??&lt;@@JJJC*(*(**O??&lt;@@JJJC"*@B*JO??&lt;@@JJ"#"****JO??&lt;@@2""#(***(*LLLL@@2"" *@@@B(B"" @@2""#B****C2"" @@0@@C&lt;@@@@?0@@@@@'))</body><body package="Gremlin">imHalfSmileR	"UIMaskEditor new openOnClass: self andSelector: #imHalfSmileR"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@??????&lt;??????&lt;@@??????3??????&lt;@@?????33?O????&lt;@@?????&lt;3&lt;?????&lt;@@?????&lt;&lt;&lt;?????&lt;@@??????L3?????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@????0B&gt;*@O???&lt;@@?CC?N(:(* ???&lt;@@&lt;((@:(:(**O??&lt;@@&lt;(((*(*(**O??&lt;@@&lt;((("*@B*JO??&lt;@@&lt;((("****JO??&lt;@@2"""(***(*LLLL@@2"" *@@@B(B"" @@2""#B****C2"" @@0@@C&lt;@@@@?0@@@@@'))</body><body package="Gremlin">imSmiling1	"UIMaskEditor new openOnClass: self andSelector: #imSmiling1"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????O?????&lt;@@??????&lt;??????&lt;@@?????&lt;&lt;??????&lt;@@?????&lt;&lt;?C????&lt;@@?????&lt;&lt;&lt;?????&lt;@@??????L3?????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@????0B&gt;*@O???&lt;@@???&lt;N(:(* ???&lt;@@???3:(:(**O??&lt;@@?&lt;O3*(*(**O??&lt;@@&lt;B C**@B**O??&lt;@@2""#******O??&lt;@@2""#(***(*LLLL@@2"" *@@@B(B"" @@2""#B****C2"" @@0@@C&lt;@@@@?0@@@@@'))</body><body package="Gremlin">imSmiling1a	"UIMaskEditor new openOnClass: self andSelector: #imSmiling1a"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????O?????&lt;@@??????&lt;??????&lt;@@?????&lt;&lt;??????&lt;@@?????&lt;&lt;?C????&lt;@@?????&lt;&lt;&lt;?????&lt;@@??????L3?????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@????0B&gt;*@O???&lt;@@???&lt;N(:(* ???&lt;@@???3:(:(**O??&lt;@@?&lt;O3*(*(**O??&lt;@@&lt;B C"*@B*JO??&lt;@@2""#"****JO??&lt;@@2""#(***(*LLLL@@2"" *@@@B(B"" @@2""#B****C2"" @@0@@C&lt;@@@@?0@@@@@'))</body><body package="Gremlin">imSmiling2	"UIMaskEditor new openOnClass: self andSelector: #imSmiling2"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????O?????&lt;@@??????&lt;??????&lt;@@?????&lt;&lt;??????&lt;@@?????&lt;&lt;?C????&lt;@@?????&lt;&lt;&lt;?????&lt;@@??????L3?????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@????0B&gt;*@O???&lt;@@?&lt;O&lt;N(:(* ???&lt;@@&lt;B C:(:(**O??&lt;@@2""#*(*(**O??&lt;@@2""#**@B**O??&lt;@@2""#"****JO??&lt;@@2""#(***(*LLLL@@2"" *@@@B(B"" @@2""#B****C2"" @@0@@C&lt;@@@@?0@@@@@'))</body><body package="Gremlin">imSmiling2a	"UIMaskEditor new openOnClass: self andSelector: #imSmiling2a"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 4) at: 1 put: ColorValue black; at: 2 put: ColorValue blue; at: 3 put: ColorValue yellow; at: 4 put: ColorValue white; yourself)) usingBits: (ByteArray fromPackedString: '?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@?????????????&lt;@@???????O?????&lt;@@??????&lt;??????&lt;@@?????&lt;&lt;??????&lt;@@?????&lt;&lt;?C????&lt;@@?????&lt;&lt;&lt;?????&lt;@@??????L3?????&lt;@@??????0O?????&lt;@@??????LC?????&lt;@@?????&lt;&gt;(?????&lt;@@????0C:*@O???&lt;@@????ET*(US???&lt;@@???&lt;]UJ!5T???&lt;@@???1=URG5UO??&lt;@@???1TEREPUO??&lt;@@???1TEREPUO??&lt;@@???1UUREUUO??&lt;@@???&lt;UUN!UT???&lt;@@????ET&gt;(US???&lt;@@????0B&gt;*@O???&lt;@@?&lt;O&lt;N(:(* ???&lt;@@&lt;B C:(:(**O??&lt;@@2""#*(*(**O??&lt;@@2""#"*@B*JO??&lt;@@2""#"****JO??&lt;@@2""#(***(*LLLL@@2"" *@@@B(B"" @@2""#B****C2"" @@0@@C&lt;@@@@?0@@@@@'))</body><body package="Gremlin">mAppear10	"UIMaskEditor new openOnClass: self andSelector: #mAppear10"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@C@@@@@@@@@A? @@@@@@@@O?@@@@@@@@@'))</body><body package="Gremlin">mAppear100	"UIMaskEditor new openOnClass: self andSelector: #mAppear100"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@F6@@@C[@@@@?&lt;@@@_&gt;@@@C?0@@A?8@@@O?@@@G? @@@'))</body><body package="Gremlin">mAppear110	"UIMaskEditor new openOnClass: self andSelector: #mAppear110"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@D@@@@@@@@@@ @@@@@@F6@J@C[@@@@?&lt;AH _&gt;@@@C?0B-A?8@@@O?@G@G? @@@'))</body><body package="Gremlin">mAppear115	"UIMaskEditor new openOnClass: self andSelector: #mAppear115"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B@@@@@@@@@@P@@@@@@@@@B@@@@@@@@@@(@@@@@@@@@D"@@@@@@@@@J4@@@@@@@@@\@@@@@@@@@C8@@@@@@F6@_0C[@@@@?&lt;_?&lt;_&gt;@@@C?3??9?8@@@O?_??7? @@@'))</body><body package="Gremlin">mAppear120	"UIMaskEditor new openOnClass: self andSelector: #mAppear120"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@D@@@@@@@@@@ @@@@@@@@@J@@@@@@@@@AH @@@@@@@@B-@@@@@@@@@G@@@@@@@@@@&gt;@@@@@@@@@G&lt;@@@@@@@@G??@@@@@@@@??&gt;@@@@@@@G??&lt;@@@@@F6???;[@@@@??????&gt;@@@C??????8@@@O?????? @@@'))</body><body package="Gremlin">mAppear125	"UIMaskEditor new openOnClass: self andSelector: #mAppear125"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@H@@@@@@@@@A@@@@@@@@@@H@@@@@@@@@B @@@@@@@@@RH@@@@@@@@@+P@@@@@@@@A0@@@@@@@@@O @@@@@@@@A?@@@@@@@@A??0@@@@@@@O?? @@@@@@A???@@@@@@@O??&gt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@F6_??3[@@@@?&lt;??&gt;_&gt;@@@C?1??1?8@@@O?[??7? @@@'))</body><body package="Gremlin">mAppear130	"UIMaskEditor new openOnClass: self andSelector: #mAppear130"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@H@@@@@@@@@A@@@@@@@@@@H@@@@@@@@@B @@@@@@@@@RH@@@@@@@@@+P@@@@@@@@A0@@@@@@@@@O @@@@@@@@A?@@@@@@@@A??0@@@@@@@O?? @@@@@@A???@@@@@@@O??&gt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@@@_??0@@@@@@@??&gt;@@@@@@@A??0@@@@@F6[??3[@@@@?&gt;_???&gt;@@@C?;????8@@@O?/???? @@@'))</body><body package="Gremlin">mAppear135	"UIMaskEditor new openOnClass: self andSelector: #mAppear135"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A@@@@@@@@@@H@@@@@@@@@B @@@@@@@@@RH@@@@@@@@@+P@@@@@@@@A0@@@@@@@@@O @@@@@@@@A?@@@@@@@@A??0@@@@@@@O?? @@@@@@A???@@@@@@@O??&gt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@@@_??0@@@@@@@??&gt;@@@@@@@A??0@@@@@@@_??0@@@@@@C??? @@@@@@O??&gt;@@@@@F6???;[@@@@??????&gt;@@@C??????8@@@O?????? @@@'))</body><body package="Gremlin">mAppear140	"UIMaskEditor new openOnClass: self andSelector: #mAppear140"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@D@@@@@@@@@@ @@@@@@@@@J@@@@@@@@@AH @@@@@@@@B-@@@@@@@@@G@@@@@@@@@@&gt;@@@@@@@@@G&lt;@@@@@@@@G??@@@@@@@@??&gt;@@@@@@@G??&lt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@@@???8@@@@@@A???@@@@@@@C??8@@@@@@@G??@@@@@@@A???@@@@@@@O??&gt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@F6???;[@@@@??????&gt;@@@C?3??9?8@@@O?C?&gt;G? @@@'))</body><body package="Gremlin">mAppear145	"UIMaskEditor new openOnClass: self andSelector: #mAppear145"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@B@@@@@@@@@BH @@@@@@@@H$@@@@@@@@@RP@@@@@@@@@*@@@@@@@@@A0@@@@@@@@@O @@@@@@@@A?@@@@@@@@A??0@@@@@@@O?? @@@@@@A???@@@@@@@O??&gt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@@@_??0@@@@@@@??&gt;@@@@@@@A??0@@@@@@@_??0@@@@@@C??? @@@@@@O??&gt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@F6???;[@@@@?&lt;??&gt;_&gt;@@@C?0??!?8@@@O?@@@G? @@@'))</body><body package="Gremlin">mAppear150	"UIMaskEditor new openOnClass: self andSelector: #mAppear150"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@H@@@@@@@@@@ @@@@@@@@@"H@@@@@@@@BI@@@@@@@@@D$@@@@@@@@@J @@@@@@@@@\@@@@@@@@@C8@@@@@@@@@_0@@@@@@@@_?&lt;@@@@@@@C??8@@@@@@@_??0@@@@@@C??? @@@@@@O??&gt;@@@@@@@???8@@@@@@C??? @@@@@@G??&lt;@@@@@@@O?? @@@@@@@_?&lt;@@@@@@@G??&lt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@F6O??#[@@@@?&lt;O?8_&gt;@@@C?0@@A?8@@@O?@@@G? @@@'))</body><body package="Gremlin">mAppear20	"UIMaskEditor new openOnClass: self andSelector: #mAppear20"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@C@@@@@@@@@A? @@@@@@@@O?@@@@@@@@@?&lt;@@@@@@@@C?0@@@@@@@@O?@@@@@@@@@'))</body><body package="Gremlin">mAppear30	"UIMaskEditor new openOnClass: self andSelector: #mAppear30"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@L@@@@@@@@@G&gt;@@@@@@@@@?&lt;@@@@@@@@C?0@@@@@@@@O?@@@@@@@@@?&lt;@@@@@@@@C?0@@@@@@@@O?@@@@@@@@@'))</body><body package="Gremlin">mAppear50	"UIMaskEditor new openOnClass: self andSelector: #mAppear50"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@F6@@@@@@@@@?&lt;@@@@@@@@C?0@@@@@@@@O?@@@@@@@@@'))</body><body package="Gremlin">mAppear60	"UIMaskEditor new openOnClass: self andSelector: #mAppear60"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@F6@@@@@@@@@?&lt;@@@A @@@C?0@@@?0@@@O?@@@G? @@@'))</body><body package="Gremlin">mAppear70	"UIMaskEditor new openOnClass: self andSelector: #mAppear70"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A @@@@@@@@@?0@@@F6@@@G? @@@?&lt;@@@_&gt;@@@C?0@@A?8@@@O?@@@G? @@@'))</body><body package="Gremlin">mAppear80	"UIMaskEditor new openOnClass: self andSelector: #mAppear80"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@F@@@@@@@@@C?@@@@@@@@@_&gt;@@@@@@@@A?8@@@F6@@@G? @@@?&lt;@@@_&gt;@@@C?0@@A?8@@@O?@@@G? @@@'))</body><body package="Gremlin">mFacey	"UIMaskEditor new openOnClass: self andSelector: #mFacey"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A@@@@@@@@@@H@@@@@@@@@D @@@@@@@@@RL@@@@@@@@AI@@@@@@@@@B(@@@@@@@@@G@@@@@@@@@@&gt;@@@@@@@@@G&lt;@@@@@@@@G??@@@@@@@@??&gt;@@@@@@@G??&lt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@@@???8@@@@@@A???@@@@@@@C??8@@@@@@@G??@@@@@@@A???@@@@@@@O??&gt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@F6???;[@@@@??????&gt;@@@C?3??9?8@@@O?C?&gt;G? @@@'))</body><body package="Gremlin">mHalfSmile	"UIMaskEditor new openOnClass: self andSelector: #mHalfSmile"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A@@@@@@@@@@H@@@@@@@@@D @@@@@@@@@RL@@@@@@@@AI@@@@@@@@@B(@@@@@@@@@G@@@@@@@@@@&gt;@@@@@@@@@G&lt;@@@@@@@@G??@@@@@@@@??&gt;@@@@@@@G??&lt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@@@???8@@@@@@A???@@@@@@@C??8@@@@@@XG??@@@@@@O=???@@@@@A????&gt;@@@@@G????8@@@@@_???? @@@@A????&gt;@@@@@G????;[@@@@_?????&gt;@@@A?;??9?8@@@G?#?&gt;G? @@@'))</body><body package="Gremlin">mHalfSmileL	"UIMaskEditor new openOnClass: self andSelector: #mHalfSmileL"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@D@@@@@@@@@BP@@@@@@@@@JF@@@@@@@@@) @@@@@@@@B(@@@@@@@@@G@@@@@@@@@@&gt;@@@@@@@@@G&lt;@@@@@@@@G??@@@@@@@@??&gt;@@@@@@@G??&lt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@@@???8@@@@@@A???@@@@@@@C??8@@@@@@@G??@@@@@@CY/??@@@@@A?9??&gt;@@@@@O?/??8@@@@@?&gt;??? @@@@C?;??&gt;@@@@@G?/??;[@@@@_?????&gt;@@@A?;??9?8@@@G?#?&gt;G? @@@'))</body><body package="Gremlin">mHalfSmileR	"UIMaskEditor new openOnClass: self andSelector: #mHalfSmileR"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B@@@@@@@@@@P@@@@@@@@@IB@@@@@@@@@TP@@@@@@@@AI@@@@@@@@@B(@@@@@@@@@G@@@@@@@@@@&gt;@@@@@@@@@G&lt;@@@@@@@@G??@@@@@@@@??&gt;@@@@@@@G??&lt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@@@???8@@@@@@A???@@@@@@@C??8@@@@@@@G??@@@@@@F0???@@@@@@????&gt;@@@@@C????8@@@@@O???? @@@@@????&gt;@@@@@G????;[@@@@_?????&gt;@@@A?;??9?8@@@G?#?&gt;G? @@@'))</body><body package="Gremlin">mSmiling1	"UIMaskEditor new openOnClass: self andSelector: #mSmiling1"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A@@@@@@@@@@H@@@@@@@@@D @@@@@@@@@RL@@@@@@@@AI@@@@@@@@@B(@@@@@@@@@G@@@@@@@@@@&gt;@@@@@@@@@G&lt;@@@@@@@@G??@@@@@@@@??&gt;@@@@@@@G??&lt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@@@???8@@@@@@A???@@@@@@@C??8@@@@@@@G??@@@@@@@A???@@@@@@@O??&gt;@@@@@@X???8@@@@@O???? @@@@A????&gt;@@@@@G????;[@@@@_?????&gt;@@@A?;??9?8@@@G?#?&gt;G? @@@'))</body><body package="Gremlin">mSmiling2	"UIMaskEditor new openOnClass: self andSelector: #mSmiling2"	&lt;resource: #image&gt;	^CachedImage on: (Image extent: 41@33 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A@@@@@@@@@@H@@@@@@@@@D @@@@@@@@@RL@@@@@@@@AI@@@@@@@@@B(@@@@@@@@@G@@@@@@@@@@&gt;@@@@@@@@@G&lt;@@@@@@@@G??@@@@@@@@??&gt;@@@@@@@G??&lt;@@@@@@@???8@@@@@@C??? @@@@@@O??&gt;@@@@@@@???8@@@@@@A???@@@@@@@C??8@@@@@@@G??@@@@@@A!/??@@@@@@????&gt;@@@@@G????8@@@@@_???? @@@@A????&gt;@@@@@G????;[@@@@_?????&gt;@@@A?;??9?8@@@G?#?&gt;G? @@@'))</body></methods><methods><class-id>Gremlin class</class-id> <category>interface specs</category><body package="Gremlin">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Gremlin Control Panel' 			#min: #(#Point 366 175 ) 			#max: #(#Point 366 175 ) 			#bounds: #(#Rectangle 271 255 637 430 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#Point 149 33 ) 					#label: 'Minimum:' ) 				#(#LabelSpec 					#layout: #(#Point 146 66 ) 					#label: 'Maximum:' ) 				#(#GroupBoxSpec 					#layout: #(#Rectangle 132 10 344 102 ) 					#label: 'Popup intervals' ) 				#(#LabelSpec 					#layout: #(#Point 300 33 ) 					#label: 'min' ) 				#(#LabelSpec 					#layout: #(#Point 300 66 ) 					#label: 'min' ) 				#(#CheckBoxSpec 					#layout: #(#Point 26 26 ) 					#name: #isOn 					#model: #isOn 					#label: 'On' ) 				#(#CheckBoxSpec 					#layout: #(#Point 25 64 ) 					#name: #verbose 					#model: #verbose 					#label: 'Verbose' ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 228 32 288 56 ) 					#name: #min 					#model: #min 					#type: #number ) 				#(#InputFieldSpec 					#layout: #(#Rectangle 228 65 288 89 ) 					#name: #max 					#model: #max 					#type: #number ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 71 125 161 155 ) 					#name: #accept 					#model: #accept 					#label: 'Accept' 					#isDefault: true 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 203 125 293 155 ) 					#name: #cancel 					#model: #cancel 					#label: 'Reset' 					#defaultable: true ) ) ) )</body></methods><initialize><class-id>Gremlin</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class></st-source>