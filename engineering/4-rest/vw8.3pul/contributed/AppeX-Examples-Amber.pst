<?xml version="1.0"?><st-source><!-- Name: AppeX-Examples-AmberNotice: Copyright 1999-2017 Cincom Systems, Inc.  All rights reserved.Comment: How to set up and use this example.Option 1: Use "Configure Web Server" tool to create a preconfigured AmberCount server. When the AmberCounter server is first started (or if the downloaded Amber support directory 'amber-appex-counter' been deleted), the user will be prompted to download the support files from 'http://ftp.cincomsmalltalk.com/pub/appex/amber-appex-counter'.zip'.Open in a web browser url: http://localhost:8890//appex/amber-appex-counterOption 2:Create a server and responder by executing the following code in a workspace:counterServer := (SiouX.Server id: 'amberAppexCounterServer')	listenOn: 8890 for: SiouX.HttpConnection;	start;	yourself.counterResponder := AmberAppeXCounter new	path: '/appex/amber-appex-counter';	yourself.counterServer addResponder: counterResponder.You should now be able to access the application at:servername:8890/appex/amber-appex-counterMisc Implementation Notes:The following modifications to the Counter class within the Amber environment were made to add AppeX funtionality:decrease	self decrementCount.	count := count - 1.	header contents: [ :html | html with: count asString ]!decrementCount	<if ($t.application) {$t.application.decreaseCounter();}>!increase	self incrementCount.	count := count + 1.	header contents: [ :html | html with: count asString ]!incrementCount	<if ($t.application) {$t.application.increaseCounter();}>! !DbIdentifier: bear73DbTrace: 497863DbUsername: vdegenDbVersion: 8.3 - 7DevelopmentPrerequisites: #(#(#any 'Compression-Zip' '') #(#any 'AppeX-ThirdPartyLibraries' '') #(#any 'AppeX-Tools' '') #(#any 'AppeX-Client' ''))PackageName: AppeX-Examples-AmberParcel: #('AppeX-Examples-Amber')PrerequisiteDescriptions: #(#(#name 'Compression-Zip' #componentType #package) #(#name 'AppeX-ThirdPartyLibraries' #componentType #package) #(#name 'AppeX-Tools' #componentType #bundle) #(#name 'AppeX-Client' #componentType #package))PrerequisiteParcels: #(#('Compression-Zip' '') #('AppeX-ThirdPartyLibraries' '') #('AppeX-Tools' '') #('AppeX-Client' ''))PrintStringCache: (8.3 - 7,vdegen)Version: 8.3 - 7Date: 3:30:55 PM June 30, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.5) of June 30, 2017 on June 30, 2017 at 3:30:55 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Counter</name><environment>AppeX</environment><super>AppeX.Application</super><private>false</private><indexed-type>none</indexed-type><inst-vars>counter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Amber</package></attributes></class><comment><class-id>AppeX.Counter</class-id><body>Common superclass of AmberAppeXCounter (which embeds amber) and AppeXCounter.Component that displays a number. Additionally it has two links that allow the user to increase or decrease this number by 1. Instance Variables:	counter	&lt;ArithmeticValue&gt; </body></comment><class><name>AppeXCounter</name><environment>AppeX</environment><super>AppeX.Counter</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Amber</package></attributes></class><comment><class-id>AppeX.AppeXCounter</class-id><body>Component that displays a number. Additionally it has two links that allow the user to increase or decrease this number by 1.   Most functionality in superclass, so that it can be shared by AmberAppeXCounter.</body></comment><class><name>AmberAppeXCounter</name><environment>AppeX</environment><super>AppeX.Counter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>fileResponder </inst-vars><class-inst-vars>amberDirectory serverPath </class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Amber</package></attributes></class><comment><class-id>AppeX.AmberAppeXCounter</class-id><body>Component that embeds the Amber Counter example in Appex.The Amber Helios IDE can also be opened from this example.Like the AppeXCounter, the component  displays a number. Additionally it has two links that allow the user to increase or decrease this number by 1.   Some of this functionality is in the superclass, so that it can be shared by AppeXCounter.Instance Variables	fileResponder &lt;FileResponder&gt;  Enables the application to retrieve the files that support Amber.Class Instance Variables	rootDirectory &lt;String&gt;    The first level subdirectory at which this application is accessed on the Example server.  Used as the root directory of the fileResponder.	serverPath &lt;String&gt;       The path at which this application is accessed on the AmberCounter server.  Used as the path for the fileResponder.When the AmberCounter server is first started (or if the downloaded amber support directory amber-appex-counter been deleted), the user will be prompted to download the support files from 'http://ftp.cincomsmalltalk.com/pub/appex/amber-appex-counter.zip' </body></comment><class><name>CounterClient</name><environment>AppeX</environment><super>AppeX.ApplicationClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>AppeX-Examples-Amber</package></attributes></class><comment><class-id>AppeX.CounterClient</class-id><body>Javascript counterpart to Counter class</body></comment><methods><class-id>AppeX.Counter</class-id> <category>initialize-release</category><body package="AppeX-Examples-Amber">initialize	super initialize.	counter := 0</body></methods><methods><class-id>AppeX.Counter class</class-id> <category>accessing</category><body package="AppeX-Examples-Amber">applicationClientClass	^CounterClient</body></methods><methods><class-id>AppeX.AmberAppeXCounter</class-id> <category>initialize-release</category><body package="AppeX-Examples-Amber">initialize		super initialize. 	fileResponder := FileResponder new.	fileResponder rootDirectory: self class amberDirectory. 	fileResponder path: self path.</body></methods><methods><class-id>AppeX.AmberAppeXCounter</class-id> <category>session - services</category><body package="AppeX-Examples-Amber">executeRequestFor: aRequestContext	(aRequestContext request url decodedPath includes: 'bower_components') 		ifTrue: [			fileResponder executeRequestFor: aRequestContext.			aRequestContext  response contentDisposition:  'inline'.			]		ifFalse: [ super executeRequestFor: aRequestContext]</body></methods><methods><class-id>AppeX.AmberAppeXCounter class</class-id> <category>configuration</category><body package="AppeX-Examples-Amber">ensureAmberDirectoryExists "self ensureAmberDirectoryExists"	| zipStream |	self amberDirectory exists ifTrue: [^true].		(Dialog		choose: 'To run Amber Counter Demo you need to download filesftp.cincomsmalltalk.com/pub/appex/amber-appex-counter.zip. Click on Download to download and unzip files in /appex/amber-appex-counter directory'		labels: (Array with: #Download &lt;&lt; #www &gt;&gt; 'Download' with: #Cancel &lt;&lt; #www &gt;&gt; 'Cancel')		values: #(true false)		default: true)			 ifFalse: [^false].		Cursor execute showWhile: [				'http://ftp.cincomsmalltalk.com/pub/appex/amber-appex-counter.zip' asURI 			readStreamDo: [ :socketStream :type |				zipStream := OS.Zip.Archive on: socketStream.				zipStream extractTo: Application rootDirectory ]		].	^true</body><body package="AppeX-Examples-Amber">registerAnnouncementsFrom: aServer	aServer		when: ListenerStarted		do: [ :announcement | self ensureAmberDirectoryExists ifFalse: [announcement listener stop] ]		for: self.			Server		when: ServerRemoved		do: [ :ann | Server unsubscribe: self.  aServer unsubscribe: self ]		for: self.</body></methods><methods><class-id>AppeX.AmberAppeXCounter class</class-id> <category>accessing</category><body package="AppeX-Examples-Amber">amberDirectory	"amberDirectory := nil"	amberDirectory ifNil: [amberDirectory := (Application rootDirectory / 'amber-appex-counter')].	^amberDirectory</body></methods><methods><class-id>AppeX.AmberAppeXCounter class</class-id> <category>services</category><body package="AppeX-Examples-Amber">faviconIcoBytes"	The base64 encoded contents of a 16x16 image of the visualworks molecule with the color adjusted toward amber.	| file contents |	filename := 'amber.ico' asFilename.	contents := filename contentsOfEntireBinaryFile.	contents asBase64String"	^ ByteArray fromBase64String: 'AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAc4woALDVgQCTs4YAcYRRAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAIqndACkzKUAsNWBAJ7GrQBzjCgAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgCKp3QApdBxAKXQcQCexq0AlbRSAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgBzjCgAf5pqAIqndACl0HEAk7OGAHOMKAAAAAIAAAACAAAAAgAAAAIAdo42AI6xaACVtFIAAAACAAAAAgB2jjYAk7OGABMTUgB2jjYACwsuABMTUgALCy4AAAACAAAAAgAAAAIAlbRSAJ7GrQCexq0AnsatAJOzhgBzjCgAjrFoALDVgQCw1YEAAAACAAAAAgATE1IAExNSABMTUgALCy4ACwsuAJ7GrQCkzKUAsNWBAJOzhgCexq0AlbRSAHOMKACVtFIAdo42AAAAAgALCy4AExNSAAsLLgATE1IAHyRkAB8kZACexq0ApdBxAKXQcQCw1YEAnsatAIqndAAAAAIAAAACAAAAAgAAAAIAc4woABMTUgBzjCgACwsuAB8kZAALCy4Ak7OGAJW0UgCVtFIAsNWBAJ7GrQCVtFIAAAACAAAAAgAAAAIAAAACAHOMKAATE1IACwsuABMTUgCTs4YAjrFoAJW0UgCKp3QApdBxAJOzhgBxhFEAAAACAAAAAgAAAAIAAAACAHaONgBxhFEAExNSAAsLLgB/mmoApdBxAJOzhgAAAAIAAAACAHOMKABzjCgAAAACAAAAAgAAAAIAAAACAJOzhgCexq0AnsatAIqndAAAAAIAc4woAJW0UgCVtFIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAHOMKACkzKUAsNWBAIqndACkzKUAc4woAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgBzjCgAiqd0AJW0UgCw1YEAk7OGAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAHaONgCOsWgAjrFoAHOMKAAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAAC//8AAOf/AADj/wAA+/8AAPv/AAC/4QAAn8EAAP/ZAAD/2QAA/3sAAP+/AADH/wAAy/8AAPP/AAD//wAA//8AAA=='</body></methods><methods><class-id>AppeX.Counter</class-id> <category>services</category><body package="AppeX-Examples-Amber">decreaseCounter	&lt;json: 'decreaseCounter'&gt;	^ counter := counter - 1</body><body package="AppeX-Examples-Amber">getCount	&lt;json: 'getCount'&gt;	^ counter</body><body package="AppeX-Examples-Amber">increaseCounter	&lt;json: 'increaseCounter'&gt;		^ counter := counter + 1</body></methods><methods><class-id>AppeX.Counter class</class-id> <category>html</category><body package="AppeX-Examples-Amber">bodyCounterValue	&lt;body: 25&gt;	^'	&lt;p id="counterValue" &gt;	&lt;/p&gt;'</body><body package="AppeX-Examples-Amber">bodyToolbar	&lt;body: 45&gt;	^'	&lt;div id="tools" class="ui-corner-all"&gt;	&lt;/div&gt;'</body><body package="AppeX-Examples-Amber">headExternalLibraries	&lt;head: 200&gt;	^self jqueryMinTags</body><body package="AppeX-Examples-Amber">htmlTitle	&lt;htmlToken: #title&gt;	^'Counter'</body></methods><methods><class-id>AppeX.Counter class</class-id> <category>css</category><body package="AppeX-Examples-Amber">defaultStyle	&lt;css: 'defaultStyle.css'&gt;	^'body {	font-family: Arial, Helvetica, sans-serif;}header {	text-align: center;	font-weight: bold;}.content {	margin: 1em;}footer {	text-align: center;	font-size: smaller;	color: DarkGray;}'</body></methods><methods><class-id>AppeX.AppeXCounter class</class-id> <category>configuration</category><body package="AppeX-Examples-Amber">serverConfiguration	&lt;server: 'AppeXExamples' path: '/appex-counter'&gt;</body></methods><methods><class-id>AppeX.AmberAppeXCounter class</class-id> <category>html</category><body package="AppeX-Examples-Amber">coreCodeJS	&lt;js: 'AppeX.CoreCode.js'&gt;	^self coreLibrary</body><body package="AppeX-Examples-Amber">counterClientJS	&lt;js: 'AppeX.CounterClient.js'&gt;	^self applicationLibrary</body><body package="AppeX-Examples-Amber">htmlDocument	&lt;html: ''&gt;		"^Filename urlString: (self serverPath, '/index.html'  allButFirst: 1)"^'&lt;!DOCTYPE html&gt;&lt;html&gt;	&lt;head&gt;		&lt;title&gt;Amber Smalltalk&lt;/title&gt;		&lt;meta http-equiv="content-type" content="text/html; charset=utf-8" /&gt;		&lt;link rel="icon" href="/amber-appex-counter/favicon.ico"&gt;			&lt;style&gt;				body { margin: 20px auto; width: 500px; font-size: 13px; font-family: sans }				h1 { font-size: 55px; color: #FF3333; font-weight: normal; }			&lt;/style&gt;			&lt;script type="text/javascript" src="amber-appex-counter/bower_components/amber/support/requirejs/require.min.js"&gt;&lt;/script&gt;			&lt;script type="text/javascript" src="amber-appex-counter/bower_components/amber/support/amber.js"&gt;&lt;/script&gt;			&lt;script type="text/javascript" src="amber-appex-counter/AppeX.CoreCode.js"&gt;&lt;/script&gt;			&lt;script type="text/javascript" src="amber-appex-counter/AppeX.CounterClient.js"&gt;&lt;/script&gt;	&lt;/head&gt;	&lt;body&gt;		&lt;script type="text/javascript"&gt;			require([				"amber/devel"			], function (smalltalk) {				smalltalk.initialize({				});				smalltalk.globals.Counter._tryExample();				(new $t.AppeX.CounterClient()).installSession({"sessionKey": "sessionId","url": "amber-appex-counter/"});			});		&lt;/script&gt;		&lt;button onclick="require(''amber/helpers'').popupHelios()"&gt;Helios IDE&lt;/button&gt;	&lt;/body&gt;&lt;/html&gt;'</body><body package="AppeX-Examples-Amber">indexHtml	&lt;file: 'index.html'&gt;</body></methods><methods><class-id>AppeX.AmberAppeXCounter class</class-id> <category>configuration</category><body package="AppeX-Examples-Amber">serverConfiguration	&lt;server: 'AmberCounter' path: '/amber-appex-counter'&gt;</body></methods><methods><class-id>AppeX.CounterClient</class-id> <category>js -html</category><body package="AppeX-Examples-Amber">buildHtml() {	this.getCount();			this.buildToolbar();}</body><body package="AppeX-Examples-Amber">buildToolbar() {	var self = this,		toolbar,		left,		counterValue,		incrementButton,		decrementButton;			toolbar = $("#tools");  //from Counter class&gt;&gt;bodyToolbar	left = $("&lt;div&gt;")		.addClass("float-left")		.appendTo(toolbar);	incrementButton = $("&lt;button&gt;")		.button({label: "Increment", disabled: false})		.click(function () {			self.increaseCounter();		})		.appendTo(left);	decrementButton = $("&lt;button&gt;")		.button({label: "Decrement"})		.click(function () {			self.decreaseCounter();		})		.appendTo(left);	return this;}</body><body package="AppeX-Examples-Amber">setCounterValue(aString) {	var counterValue;			counterValue = $("#counterValue");  	counterValue.text(aString);	 $("h1:first").text(aString); //this element will be found on the amber generated page, and set}</body></methods><methods><class-id>AppeX.CounterClient</class-id> <category>auto-generated</category><body package="AppeX-Examples-Amber">decreaseCounter(){/** This method was generated from pragma &lt;json: 'decreaseCounter'&gt; in method AppeX.Counter&gt;&gt;decreaseCounter.* You can modify the code according to your application needs, or regenerate it as follows:*	- Navigate to AppeX.Counter&gt;&gt;decreaseCounter.*	- Click on the item labeled "Generate CounterClient.decreaseCounter" in the method menu.*/	var	self = this,		response = this.asyncMessageToServer("decreaseCounter", arguments);	response.onSuccess(		function(object) {			self.setCounterValue(object);		}	);	return response;}</body><body package="AppeX-Examples-Amber">getCount(){/** This method was generated from pragma &lt;json: 'getCount'&gt; in method AppeX.Counter&gt;&gt;getCount.* You can modify the code according to your application needs, or regenerate it as follows:*	- Navigate to AppeX.Counter&gt;&gt;getCount.*	- Click on the item labeled "Generate CounterClient.getCount" in the method menu.*/	var 	self = this,		response = this.asyncMessageToServer("getCount", arguments);		response.onSuccess(		function(object) {			self.setCounterValue(object)				}	);	return response;}</body><body package="AppeX-Examples-Amber">increaseCounter(){/** This method was generated from pragma &lt;json: 'increaseCounter'&gt; in method AppeX.Counter&gt;&gt;increaseCounter.* You can modify the code according to your application needs, or regenerate it as follows:*	- Navigate to AppeX.Counter&gt;&gt;increaseCounter.*	- Click on the item labeled "Generate CounterClient.increaseCounter" in the method menu.*/	var	self = this, 		response = this.asyncMessageToServer("increaseCounter", arguments);	response.onSuccess(		function(object) {			self.setCounterValue(object)				}	);		return response;}</body></methods><methods><class-id>SiouX.Server class</class-id> <category>configuration</category><body package="AppeX-Examples-Amber">configureAmberCounter: aServer	&lt;server: 'AmberCounter'&gt;	aServer listenOn: 8890 for: HttpConnection.	AppeX.AmberAppeXCounter registerAnnouncementsFrom: aServer.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ApplicationClient</name><environment>AppeX</environment><super>AppeX.JavascriptObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>javascriptLibrary </class-inst-vars><imports></imports><category>bootstrap</category><attributes><package>AppeX-Client</package></attributes></class><class><name>Application</name><environment>AppeX</environment><super>SiouX.HttpResponder</super><private>false</private><indexed-type>none</indexed-type><inst-vars>clientSubscriptions session eventStream </inst-vars><class-inst-vars>settings requestActions subscriptionRegistry codeComposer combinedJavascriptLibrary </class-inst-vars><imports>			private Tools.Pragma			private Xtreams.*			private SiouX.*			private Protocols.*			</imports><category></category><attributes><package>AppeX-Server</package></attributes></class></st-source>