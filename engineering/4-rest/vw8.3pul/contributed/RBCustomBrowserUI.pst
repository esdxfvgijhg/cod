<?xml version="1.0"?><st-source><!-- Name: RBCustomBrowserUINotice: Copyright 2007 - 2015 Niall RossThis utility is made available to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: I add a menu item to the RB's 'Browser' menu: 'View <selected pundle(s)>'.  Choosing this restricts the browser's environment to the selected pundle;  it also changes the menu item to 'View Whole System', which allows you to revert to viewing the entire image.  The resulting view is the same as that which would be obtained by invoking 'Spawn' in the Package menu to open a fresh RB on the pundles, but lets you swap between specific and whole-system views in the same window while preserving your class and method selections.  The environment of the restricted browser is likewise the same:  using the 'Local ...' menu items to search for classes and methods will find only those in the selected pundle(s).  If a single bundle is selected, it is expanded on first opening in the restricted browser.DbIdentifier: bear73DbTrace: 454542DbUsername: nrossDbVersion: 8.1 - 1DevelopmentPrerequisites: #(#(#any 'Browser-BrowserUI' ''))Namespace: Refactory.BrowserPackageName: RBCustomBrowserUIParcel: #('RBCustomBrowserUI')ParcelName: RBCustomBrowserUIPrerequisiteDescriptions: #(#(#name 'Browser-BrowserUI'))PrerequisiteParcels: #(#('Browser-BrowserUI' ''))PrintStringCache: (8.1 - 1,nross)Version: 8.1 - 1Date: 7:20:50 AM January 9, 2015 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.1 (jan15.1) of January 9, 2015 on January 9, 2015 at 7:20:50 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>SystemNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>RBCustomBrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.SystemNavigator</class-id><body>SystemNavigator is a navigator that supports in-place changing of the environment viewed by a 4-pane browser. (The navigator is the part of the Refactoring Browser that is displayed in the upper half of its window, the part that lets the user select pundles, classes, protocols and methods.)Why is this class named SystemNavigator?  One of the many uses of this utility is to assist porting from other dialects by offering restricted views of the system.  To help that use, this class has been deliberately given the same name as a class in the original Refactoring Browser that was eliminated when the RB was ported forward from VW3 to VW7.  In VW3 and VA, the SystemNavigator offers a 4-pane browser on the whole system;  here its purpose is to offer a 4-pane browser that can be restricted to a subset of pundles, for example, to the base system and all else relevant to a ported application.</body></comment><class><name>BundleEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.PundleEnvironment</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>RBCustomBrowserUI</package></attributes></class><comment><class-id>Refactory.Browser.BundleEnvironment</class-id><body>BundleEnvironment uses SystemNavigator instead of BrowserNavigator to present a subset of all pundles in the 4-pane (system) view instead of the spawnable 3-pane browser.  BundleEnvironment can show a selection of packages as well as or instead of one or more bundles, so its name is debatable.  Like a Bundle, it shows a group of pundles and that is why it is so called.</body></comment><methods><class-id>Refactory.Browser.SystemNavigator</class-id> <category>testing</category><body package="RBCustomBrowserUI">isPundleOrPartialRootSelected	"I display a bundle or collection of pundles or their associated parcels;  always enable return to viewing the whole system."	^true</body></methods><methods><class-id>Refactory.Browser.SystemNavigator</class-id> <category>accessing-browser</category><body package="RBCustomBrowserUI">onBundleEnvironment	"We already are a specific system-displayable environment;  if this is called, the user wants to switch back to viewing the whole system in the superclass."	self onBaseEnvironment: BrowserEnvironment new.</body><body package="RBCustomBrowserUI">selectedEnvironmentLabel	^'View Whole System'</body></methods><methods><class-id>Refactory.Browser.BundleEnvironment</class-id> <category>conversion</category><body package="RBCustomBrowserUI">onBaseEnvironment: anEnvironment	"Although I am an environment wrapper, I act as base environment to anyone wrapping me.  If I receive this message, the intent is that I be discarded and the parameter made the new wrapper;  make it so."	^anEnvironment</body></methods><methods><class-id>Refactory.Browser.BundleEnvironment</class-id> <category>accessing-classes</category><body package="RBCustomBrowserUI">navigatorClass	^SystemNavigator</body></methods><methods><class-id>Refactory.Browser.PundleNavigatorPart</class-id> <category>updating widgets</category><body package="RBCustomBrowserUI">selectState: aNavigatorState	"If my list's root is not that of my navigator (probably indicates navigator changed via changeClassTo: or similar underhand tweaks), reset it to refresh the root.  If a single bundle is now the root and is not already expanded, expand it (no effect when going back to system or on single package)."	self navigator packageListRoot environment == self list root environment ifFalse:		[self list root: self navigator packageListRoot displayIt: true.		aNavigatorState pundles size = 1 ifTrue: [self expand: 1]].	super selectState: aNavigatorState.</body></methods><methods><class-id>Refactory.Browser.MultiEnvironment</class-id> <category>conversion</category><body package="RBCustomBrowserUI">onBaseEnvironment: anEnvironment	"The inherited environment variable will contain one of the dictionary values at any given time, so need not be handled separately.  (This implementation must return its receiver.)"	environmentDictionaries keysAndValuesDo:		[:eachEnv :eachExtensionsEnv |		eachEnv onBaseEnvironment: anEnvironment.		eachExtensionsEnv onBaseEnvironment: anEnvironment].</body></methods><methods><class-id>Refactory.Browser.BrowserEnvironmentWrapper</class-id> <category>conversion</category><body package="RBCustomBrowserUI">onBaseEnvironment: anEnvironment	"Change the base environment that all others ultimately wrap.  (This implementation must return its receiver;  only the super implementation actually changes anything.)"	environment := environment onBaseEnvironment: anEnvironment</body></methods><methods><class-id>Refactory.Browser.BrowserEnvironment</class-id> <category>environments</category><body package="RBCustomBrowserUI">forInPlaceCodeComponents: pundleList	"Add a BundleEnvironment-returning method the standard for... methods in this protocol.  As the point of BundleEnvironment and SystemNavigator is to support changing the environment being browsed by a window, we use 'InPlace' as the modifier to the method name."	^BundleEnvironment onEnvironment: self codeComponents: pundleList</body></methods><methods><class-id>Refactory.Browser.BrowserEnvironment</class-id> <category>conversion</category><body package="RBCustomBrowserUI">onBaseEnvironment: anEnvironment	"Change the base environment that all others ultimately wrap.  I am a base environment, so return my replacement.  (This is used by a range of add-ons and scripts, so is added to the base environments package for configuration convenience.)"	^anEnvironment</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>testing</category><body package="RBCustomBrowserUI">isPundleOrPartialRootSelected	"I do not display partial roots;  if I display a root, it is the whole system."	^self isPundleSelected and: [self environment isSystem]</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>accessing-browser</category><body package="RBCustomBrowserUI">onBaseEnvironment: anEnvironment	"This simplest-thing-that-could-possibly-work implementation assumes that the relevant BrowserNavigator subclasses have no new instance variables.  Upgrade to one that substitutes and initializes as, if and when(ever) needed."	| priorEnvironment |	priorEnvironment := self environment.	self environment: (priorEnvironment onBaseEnvironment: anEnvironment).	priorEnvironment class == self environment class		ifFalse: [self changeClassTo: self environment navigatorClass].	self updateWithState: (self getState pundles: state pundles; yourself).</body><body package="RBCustomBrowserUI">onBundleEnvironment	self onBaseEnvironment:		(BundleEnvironment			onEnvironment: BrowserEnvironment new			codeComponents: self pundles).</body></methods><methods><class-id>Refactory.Browser.BrowserNavigator</class-id> <category>aspects</category><body package="RBCustomBrowserUI">selectedEnvironmentLabel	"My implementation of menuNameFor: demands a selector-like string so, unusually, we grab the super implementation which suits the string we get and has the common length-shortening behaviour for the menu we are in, which is defined on refactoringBrowser."	| stream |	stream := WriteStream on: String new.	stream nextPutAll: 'View '.	self pundles		do: [:each | stream nextPutAll: each name]		separatedBy: [stream nextPutAll: ', '].	^super menuNameFor: stream contents</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>actions</category><body package="RBCustomBrowserUI">onBundleEnvironmentMenuItem	"Ideally, this would be a method on BrowserNavigator and have symbols instead of [self navigator ...] blocks, but it is RefactoringBrowser, not BrowserNavigator that has the #browse menu;  one last area where John's indirection is not yet duplicated in pragmas." 	&lt;itemInMenu: #(#browserMenu) position: 45.02&gt;	^(MenuItem labeled: [self navigator selectedEnvironmentLabel])		enablement: [self navigator isPundleOrPartialRootSelected];		value: [self navigator onBundleEnvironment];		yourself</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>BrowserEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserEnvironment</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>RefactoringBrowser</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractRefactoringBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>policyClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>BrowserEnvironmentWrapper</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironment</super><private>false</private><indexed-type>none</indexed-type><inst-vars>environment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>MultiEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>environmentDictionaries </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Smalllint</package></attributes></class><class><name>BrowserNavigator</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserNavigator</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator</category><attributes><package>Browser-BrowserUI</package></attributes></class><class><name>PundleNavigatorPart</name><environment>Refactory.Browser</environment><super>Refactory.Browser.HierarchyPundleNavigatorPart</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Navigator Parts</category><attributes><package>Browser-BaseUI</package></attributes></class><class><name>PundleEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.BrowserEnvironmentWrapper</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bundleNames packageNames </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class></st-source>