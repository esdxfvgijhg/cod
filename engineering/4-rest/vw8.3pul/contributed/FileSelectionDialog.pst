"Name: FileSelectionDialogHideSource: falsePadded: trueParcel: FileSelectionDialogSaveSource: trueDate: 4:02:56 am March 9, 1999"!'From VisualWorksÂ®, Release 5i.0 pre-release of March 3, 1999 on March 9, 1999 at 4:02:56 am'!(Dialog confirm: 'You are filing-in a Parcel source file!!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']!Smalltalk.Tools defineClass: #FileSelectionDialog	superclass: #{UI.SimpleDialog}	indexedType: #none	private: false	instanceVariableNames: 'os allowDirectoryResult allowFileResult directoryStrings directoryString parentDirectories currentParent currentDirectoryString currentDirectory directoryContents tail masks mask result numberOfSubdirectories folderIcon labelOffset skipUpdates '	classInstanceVariableNames: ''	imports: ''	category: 'Tools-Miscellaneous'!Tools.FileSelectionDialog comment:'This class provides a dialog that allows the user to browse the filesystem to select a file or directory.Instance Variables:  os	<Symbol>	current operating system  allowDirectoryResult	<Boolean>	true if a directory may be selected as the result of the dialog  directories	<List of: Filename>	list of directories available for browsing.  A string may represent a valid filename, or a filename concatenated with some label describing the filename.  The label must be trimmed before using the filename.  directory	<Filename>	closest match from directories list to the current directory being browsed  currentDirectory	<Filename>	the current directory being browsed  directoryContents	<List of: Strings>	list of directories / files in directory  tail	<String>	filename or mask  masks	<List of: String>	list of file masks to filter directoryContents  mask	<String>	selected mask  result	<String>	return value'!Tools.FileSelectionDialog class	instanceVariableNames: ''!Tools.FileSelectionDialog defineStatic: #NewDirectory	private: false	constant: false	category: 'icons'	initializer: nil!Tools.FileSelectionDialog defineStatic: #Folder	private: false	constant: false	category: 'icons'	initializer: nil!Tools.FileSelectionDialog defineStatic: #UpDirectory	private: false	constant: false	category: 'icons'	initializer: nil!!Tools.FileSelectionDialog methods!newDirectory	| answer newDir |	answer := Dialog request: 'Please enter the name of the new directory:' initialAnswer: ''.	answer isEmpty ifTrue: [^self].	newDir := currentDirectory construct: answer.	newDir exists		ifTrue:			[^(Dialog confirm: 'A file or directory already exists by that name.  Try again?')				ifTrue: [self newDirectory]				ifFalse: [self]]		ifFalse:			[newDir makeDirectory.			self getDirectoryContents.]! !!Tools.FileSelectionDialog methods!upDirectory	| up |	(up := currentDirectory directory) = currentDirectory		ifFalse:			[currentDirectory := up.			currentDirectoryString value: up asString]! !!Tools.FileSelectionDialog methods!currentDirectoryString	^currentDirectoryString! !!Tools.FileSelectionDialog methods!directoryContents	^directoryContents! !!Tools.FileSelectionDialog methods!directoryString	^directoryString! !!Tools.FileSelectionDialog methods!directoryStrings	^directoryStrings! !!Tools.FileSelectionDialog methods!mask	^mask! !!Tools.FileSelectionDialog methods!masks	^masks! !!Tools.FileSelectionDialog methods!parentDirectories	^parentDirectories! !!Tools.FileSelectionDialog methods!result	^result! !!Tools.FileSelectionDialog methods!tail	^tail! !!Tools.FileSelectionDialog methods!allowDirectoryResult: dirBoolean allowFileResult: fileBoolean directory: dirStr masks: maskList result: resultHolder	skipUpdates := false.	os := OSHandle currentOS.	(os == #win32 or: [os == #os2])		ifTrue:			[folderIcon := OpaqueImage				figure: self class folderImagePC				shape: self class folderMaskPC.			labelOffset := -4]		ifFalse:			[folderIcon := self class folder.			labelOffset := -2].	directoryStrings := List new asValue.	parentDirectories := List new.	self setDirectories.	masks := maskList asValue.	allowDirectoryResult := dirBoolean.	allowFileResult := fileBoolean.	directoryString := String new asValue.	directoryString onChangeSend: #changedDirectory to: self.	result := resultHolder.	mask := maskList first asValue.	mask onChangeSend: #changedMask to: self.	currentDirectoryString := String new asValue.	currentDirectoryString onChangeSend: #changedCurrentDirectory to: self.	directoryContents := SelectionInList new.	directoryContents addDependent: self.	tail := String new asValue.	tail onChangeSend: #changedTail to: self.	accept onChangeSend: #acceptResult to: self.	currentDirectoryString value:		(dirStr isNil			ifTrue: [(currentDirectory := Filename defaultDirectory) asString]			ifFalse: [(currentDirectory := dirStr asFilename). dirStr])! !!Tools.FileSelectionDialog methods!getValidDriveLetters	| drive |	#('A:\' 'B:\' 'C:\' 'D:\' 'E:\' 'F:\' 'G:\' 'H:\' 'I:\' 'J:\' 'K:\' 'L:\' 'M:\' 'N:\' 'O:\' 'P:\' 'Q:\' 'R:\' 'S:\' 'T:\' 'U:\' 'V:\' 'W:\' 'X:\' 'Y:\' 'Z:\')		do: [:driveString |  (drive := self validFilename: driveString) notNil ifTrue: [directoryStrings value add: drive asString. parentDirectories add: drive]]! !!Tools.FileSelectionDialog methods!setDirectories	| label vols drive |	(os == #win32 or: [os == #os2])		ifTrue:			[self getValidDriveLetters.			vols := Filename volumes.			1 to: vols size do: [:index |				drive := directoryStrings value at: index.				label := vols at: index.				(label sameAs: drive)					ifFalse:						[drive := drive, self class labelPrefix, label, self class labelSuffix.						directoryStrings value at: index put: drive]]].	(os == #unix)		ifTrue:			[directoryStrings value add: ('/', self class labelPrefix, 'ROOT', self class labelSuffix) asFilename.			self registerSystemVariable: 'HOME'].	self registerSystemVariable: 'VISUALWORKS'.	parentDirectories add: Filename defaultDirectory.	directoryStrings value add:		Filename defaultDirectoryName,		self class labelPrefix,		Filename currentDirectory asString,		self class labelSuffix! !!Tools.FileSelectionDialog methods!postBuildWith: aBuilder	| widget label |	super postBuildWith: aBuilder.	widget := (builder componentAt: #directoryContents) widget.	widget		measureWidth: true;		selectedVisualBlock:			[:view :index |			| reversingWrapper |			label := LabelAndIcon with: (view sequence at: index) offset: 4@labelOffset.			numberOfSubdirectories < index				ifFalse: [label icon: folderIcon].			reversingWrapper := ReversingWrapper on: label.			reversingWrapper reverse setValue: true.			BoundedWrapper on: reversingWrapper];		visualBlock:			[:view :index |			label := LabelAndIcon with: (view sequence at: index) offset: 4@labelOffset.			numberOfSubdirectories < index				ifFalse: [label icon: folderIcon].			BoundedWrapper on: label].	builder window label: 'Please select a ',		(allowDirectoryResult			ifTrue:				[allowFileResult					ifTrue: ['file or directory...']					ifFalse: ['directory...']]			ifFalse:				['file...'])! !!Tools.FileSelectionDialog methods!directoryContentsDoubleClick	| filename |	filename := currentDirectory construct: tail value.	filename isDirectory		ifTrue:			[currentDirectory := filename.			currentDirectoryString value: filename asString]		ifFalse:			[^self accept value: true]! !!Tools.FileSelectionDialog methods!acceptResult	| selection isDirectory trigger |	trigger := (builder componentAt: #accept) widget model.	trigger value == true		ifTrue:			[self tailIsPattern ifTrue: [tail value: ''.  ^trigger value: false].			selection := currentDirectory construct: tail value.			selection exists				ifTrue:					[isDirectory := selection isDirectory.					((isDirectory and: [allowDirectoryResult not]) or: [isDirectory not and: [allowFileResult not]])						ifTrue:							[Dialog warn: builder window label.							^trigger value: false]].			result value: selection asString]! !!Tools.FileSelectionDialog methods!getDirectoryContents	| tailString pattern list dirList fileList filename tailIsPattern |	tailString := tail value.	pattern := (tailIsPattern := self tailIsPattern)		ifTrue: [tail value]		ifFalse: [mask value].	dirList := List new.	fileList := List new.	list := currentDirectory filesMatching: pattern.	list do:		[:fileString |		(filename := self validFilename: fileString) isNil			ifFalse: [filename exists				ifTrue: [filename isDirectory					ifTrue: [dirList add: filename tail]					ifFalse: [fileList add: filename tail]]]].	numberOfSubdirectories := dirList size.	list := dirList asSortedStrings asList.	allowFileResult ifTrue: [list := list, fileList asSortedStrings asList].	directoryContents list: list.	directoryContents selection: tailString.	tailIsPattern		ifFalse: [directoryContents selectionIndex = 0 ifTrue: [tail value: String new]]! !!Tools.FileSelectionDialog methods!isDirectory: aString	| filename |	(filename := self validFilename: aString) isNil ifTrue: [^false].	^[filename isDirectory]		on: OSErrorHolder inappropriateOperationSignal, OSErrorHolder noPermissionsSignal		do: [ :ex |  false]! !!Tools.FileSelectionDialog methods!nearestParentDirectoryOf: aDirectory"Return the filename from parentDirectories represented by dirString, or the nearest parent thereof."	| filename parent parentDir |	(filename := aDirectory) = currentParent ifTrue: [^currentParent].	[parent := parentDirectories			detect: [:dir |  dir = filename]			ifNone: [nil].		parent isNil and: [(filename = (parentDir := filename directory)) not]]		whileTrue: [filename := parentDir].	^parent! !!Tools.FileSelectionDialog methods!registerSystemVariable: varString	| value |	(value := SystemUtils getEnvironmentVariable: varString) isEmpty		ifTrue: [^self].	parentDirectories add: value asFilename.	directoryStrings value add: value, self class labelPrefix, varString, self class labelSuffix! !!Tools.FileSelectionDialog methods!tailIsPattern	| tailString |	tailString := tail value.	^(tailString includes: $*) or: [tailString includes: $# ]! !!Tools.FileSelectionDialog methods!topComponentFor: filenameString	| filename |	filename := filenameString asFilename.	filename isRelative		ifTrue: [^self topComponentFor: Filename defaultDirectoryName].	[filename = filename directory]		whileFalse: [filename := filename directory].	^filename asString! !!Tools.FileSelectionDialog methods!validFilename: aString	^[aString asFilename]		on: Filename errorReporter badArgumentsSignal		do: [ :ex |  nil]! !!Tools.FileSelectionDialog methods!volumeFor: aString	^[aString asFilename]		on: Filename errorReporter badArgumentsSignal		do: [ :ex |  nil]! !!Tools.FileSelectionDialog methods!changedCurrentDirectory	| parent |	parent := self nearestParentDirectoryOf: currentDirectory.	parent = currentParent		ifFalse:			[currentParent := parent.			skipUpdates := true.			directoryString value: (directoryStrings value at: (parentDirectories indexOf: parent)).			skipUpdates := false].	self getDirectoryContents! !!Tools.FileSelectionDialog methods!changedDirectory	| dir dirString |	skipUpdates ifTrue: [^self].	dirString := directoryString value.	currentDirectory = (dir := parentDirectories at: (directoryStrings value indexOf: dirString))		ifFalse:			[currentDirectory := dir.			currentDirectoryString value: currentDirectory asString]! !!Tools.FileSelectionDialog methods!changedFileListSelection	| selection |	(selection := directoryContents selection) isNil		ifFalse: [tail value = selection			ifFalse: [tail value: selection]]! !!Tools.FileSelectionDialog methods!changedMask	(masks value includes: mask value)		ifFalse: [masks value add: mask value].	self getDirectoryContents! !!Tools.FileSelectionDialog methods!changedTail	| tailString |	tailString := tail value.	self tailIsPattern		ifTrue:			[(masks value includes: tailString) ifFalse: [masks value add: tailString].			mask value = tailString ifFalse: [mask value: tailString].			self getDirectoryContents]		ifFalse:			[directoryContents selection = tailString				ifFalse: [directoryContents selection: tailString]]! !!Tools.FileSelectionDialog methods!update: anAspectSymbol with: aValue from: anObject	super update: anAspectSymbol with: aValue from: anObject.	anObject == directoryContents		ifTrue:			["anAspectSymbol == #list				ifTrue: [self changedFileList]."			anAspectSymbol == #selectionIndex				ifTrue: [self changedFileListSelection]]! !!Tools.FileSelectionDialog methods!validateCurrentDirectory: anInputBoxController	| topComponent dirString |	anInputBoxController hasEditValue		ifFalse: [^false].	dirString := anInputBoxController editValue.	topComponent :=		[self topComponentFor: dirString]			on: Filename errorReporter badArgumentsSignal, Filename errorReporter invalidArgumentsSignal			do: [ :ex |				Dialog warn: 'Invalid file name, ', anInputBoxController editValue, '.  Try again.'.				ex returnWith: nil].	topComponent isNil ifTrue: [^false].	directoryStrings value		detect:			[:dir | (self topComponentFor: dir) = topComponent]		ifNone:			[dirString asFilename exists				ifTrue:					[directoryStrings add: dirString.					^true]				ifFalse:					[topComponent asFilename exists						ifTrue:							[directoryStrings add: dirString.							^true]						ifFalse: [^false]]].	^true! !!Tools.FileSelectionDialog methods!validateCurrentDirectoryExit: anInputBoxController	| topComponent dirString newDir |	anInputBoxController hasEditValue		ifFalse: [^false].	dirString := anInputBoxController editValue.	topComponent :=		[self topComponentFor: dirString]			on: Filename errorReporter badArgumentsSignal, Filename errorReporter invalidArgumentsSignal			do: [ :ex |				newDir := Dialog					request: 'Invalid file name, ', anInputBoxController editValue, '.  Try again:'					initialAnswer: dirString.				newDir isEmpty					ifTrue: 						[anInputBoxController cancel; notAccepted.						ex returnWith: nil]					ifFalse:						[ex retryUsing: [self topComponentFor: newDir]]].	topComponent isNil ifTrue: [^false].	directoryStrings value		detect:			[:dir | (self topComponentFor: dir) = topComponent]		ifNone:			[dirString asFilename exists				ifTrue:					[directoryStrings add: dirString.					^true]				ifFalse:					[topComponent asFilename exists						ifTrue:							[directoryStrings add: dirString.							^true]						ifFalse: [^false]]].	^true! !!Tools.FileSelectionDialog methods!validateFileListSelection: aSequenceController	^(directoryContents selectionIndex = aSequenceController view targetIndex) not! !!Tools.FileSelectionDialog methods!volumeExists: aComboBoxButtonController	| view selection filename |	(builder componentAt: #cancel) widget controller isControlWanted		ifTrue:			[^true].	view := aComboBoxButtonController view.	selection := view displayContents asString.	filename := (selection readStream upToAll: self class labelPrefix) asFilename.	filename exists		ifFalse:			[Dialog warn: 'The selection is not accessible.  Perhaps the directory does not exist or a disk must be inserted.'.			filename exists		"Check to see if the problem was fixed while the warning was displayed."				ifFalse: [aComboBoxButtonController cancel; notAccepted.  ^false]].	^true! !!Tools.FileSelectionDialog class methods!initialize"FileSelectionDialog initialize"	Folder := OpaqueImage		figure: self folderImage		shape: self folderMask.	UpDirectory := OpaqueImage		figure: self upDirectoryImage		shape: self upDirectoryMask.	NewDirectory := OpaqueImage		figure: self newDirectoryImage		shape: self newDirectoryMask! !!Tools.FileSelectionDialog class methods!defaultMaskList	^#('*') asList! !!Tools.FileSelectionDialog class methods!labelPrefix	^'  < '! !!Tools.FileSelectionDialog class methods!labelSuffix	^' >'! !!Tools.FileSelectionDialog class methods!allowDirectoryResult: dirBoolean allowFileResult: fileBoolean	^self allowDirectoryResult: dirBoolean		allowFileResult: fileBoolean		initialDirectory: Filename defaultDirectoryName! !!Tools.FileSelectionDialog class methods!allowDirectoryResult: dirBoolean allowFileResult: fileBoolean initialDirectory: dirString	^self allowDirectoryResult: dirBoolean		allowFileResult: fileBoolean		initialDirectory: dirString		masks: self defaultMaskList! !!Tools.FileSelectionDialog class methods!allowDirectoryResult: dirBoolean allowFileResult: fileBoolean initialDirectory: dirString masks: maskList	| result |	result := ValueHolder new.	(self new		allowDirectoryResult: dirBoolean		allowFileResult: fileBoolean		directory: dirString		masks: maskList		result: result) open.	^result value! !!Tools.FileSelectionDialog class methods!allowDirectoryResult: dirBoolean allowFileResult: fileBoolean masks: maskList	^self allowDirectoryResult: dirBoolean		allowFileResult: fileBoolean		initialDirectory: Filename defaultDirectoryName		masks: maskList! !!Tools.FileSelectionDialog class methods!folder	^Folder! !!Tools.FileSelectionDialog class methods!newDirectory	^NewDirectory! !!Tools.FileSelectionDialog class methods!upDirectory	^UpDirectory! !!UI.Dialog class methods!selectFileOrDirectory	^FileSelectionDialog allowDirectoryResult: true allowFileResult: true! !!UI.Dialog class methods!selectDirectoryFrom: directoryString masks: maskList	^FileSelectionDialog allowDirectoryResult: true		allowFileResult: false		initialDirectory: directoryString		masks: maskList! !!UI.Dialog class methods!selectFileFrom: directoryString	^FileSelectionDialog allowDirectoryResult: false		allowFileResult: true		initialDirectory: directoryString! !!UI.Dialog class methods!selectFileOrDirectoryWithMasks: maskList	^FileSelectionDialog allowDirectoryResult: true		allowFileResult: true		masks: maskList! !!UI.Dialog class methods!selectFileOrDirectoryFrom: directoryString masks: maskList	^FileSelectionDialog allowDirectoryResult: true		allowFileResult: true		initialDirectory: directoryString		masks: maskList! !!UI.Dialog class methods!selectFileWithMasks: maskList	^FileSelectionDialog allowDirectoryResult: false		allowFileResult: true		masks: maskList! !!UI.Dialog class methods!selectDirectoryFrom: directoryString	^FileSelectionDialog allowDirectoryResult: true		allowFileResult: false		initialDirectory: directoryString! !!UI.Dialog class methods!selectFileOrDirectoryFrom: directoryString	^FileSelectionDialog allowDirectoryResult: true		allowFileResult: true		initialDirectory: directoryString! !!UI.Dialog class methods!selectFile	^FileSelectionDialog allowDirectoryResult: false allowFileResult: true! !!UI.Dialog class methods!selectDirectoryWithMasks: maskList	^FileSelectionDialog allowDirectoryResult: true		allowFileResult: false		masks: maskList! !!UI.Dialog class methods!selectFileFrom: directoryString masks: maskList	^FileSelectionDialog allowDirectoryResult: false		allowFileResult: true		initialDirectory: directoryString		masks: maskList! !!UI.Dialog class methods!selectDirectory	^FileSelectionDialog allowDirectoryResult: true allowFileResult: false! !!Tools.FileSelectionDialog class methods!windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	<resource: #canvas>	^#(#FullSpec 		#window: 		#(#WindowSpec 			#min: #(#Point 575 360 ) 			#bounds: #(#Rectangle 0 0 575 360 ) 			#isEventDriven: true ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#LabelSpec 					#layout: #(#AlignmentOrigin -10 0.166667 0 0.0625 1 0.5 ) 					#label: 'Look in:' ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.85 10 0 -10 0.925 0 0.1 ) 					#name: #upDirectory 					#model: #upDirectory 					#label: #upDirectory 					#hasCharacterOrientedLabel: false ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.925 10 0 -10 1 0 0.1 ) 					#name: #newDirectory 					#model: #newDirectory 					#label: #newDirectory 					#hasCharacterOrientedLabel: false ) 				#(#SequenceViewSpec 					#layout: #(#LayoutFrame 10 0 0 0.225 -10 1 0 0.775 ) 					#name: #directoryContents 					#model: #directoryContents 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#doubleClickSelector: #directoryContentsDoubleClick 						#requestValueChangeSelector: 						#validateFileListSelection: ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin -10 0.25 0 0.8375 1 0.5 ) 					#label: 'File name:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin -10 0.25 0 0.9375 1 0.5 ) 					#label: 'File mask:' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 0 0.25 0 0.8 0 0.75 0 0.875 ) 					#name: #tail 					#model: #tail ) 				#(#ComboBoxSpec 					#layout: #(#LayoutFrame 0 0.25 0 0.9 0 0.75 0 0.975 ) 					#name: #mask 					#model: #mask 					#comboList: #masks ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 20 0.75 0 0.8 -10 1 0 0.875 ) 					#name: #accept 					#model: #accept 					#label: 'OK' 					#isDefault: true 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 20 0.75 0 0.9 -10 1 0 0.975 ) 					#name: #cancel 					#model: #cancel 					#label: 'Cancel' 					#defaultable: true ) 				#(#ComboBoxSpec 					#layout: #(#LayoutFrame 0 0.166667 10 0 -10 0.85 0 0.1 ) 					#name: #directoryString 					#model: #directoryString 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#requestValueChangeSelector: 						#volumeExists: ) 					#type: #string 					#comboList: #directoryStrings ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 10 0 0 0.125 -10 1 0 0.2 ) 					#name: #currentDirectoryString 					#model: #currentDirectoryString 					#callbacksSpec: 					#(#UIEventCallbackSubSpec 						#requestFocusOutSelector: 						#validateCurrentDirectoryExit: 						#requestValueChangeSelector: 						#validateCurrentDirectory: ) ) ) ) )! !!Tools.FileSelectionDialog class methods!folderImage	"UIMaskEditor new openOnClass: self andSelector: #folderImage"	<resource: #image>	^CachedImage on: (Image extent: 15@14 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: #[170 170 170 168 170 170 170 168 160 2 170 168 134 100 170 168 0 0 0 8 38 102 102 96 25 153 153 144 38 102 102 96 25 153 153 144 38 102 102 96 25 153 153 144 38 102 102 96 25 153 153 144 0 0 0 0])! !!Tools.FileSelectionDialog class methods!folderImagePC	"UIMaskEditor new openOnClass: self andSelector: #folderImagePC"	<resource: #image>	^CachedImage on: (Image extent: 15@16 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: #[170 170 170 168 170 170 170 168 170 170 170 168 170 170 170 168 160 2 170 168 134 100 170 168 0 0 0 8 38 102 102 96 25 153 153 144 38 102 102 96 25 153 153 144 38 102 102 96 25 153 153 144 38 102 102 96 25 153 153 144 0 0 0 0])! !!Tools.FileSelectionDialog class methods!folderMask	"UIMaskEditor new openOnClass: self andSelector: #folderMask"	<resource: #image>	^CachedImage on: (Image extent: 15@14 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 62 0 0 0 127 0 0 0 255 252 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0])! !!Tools.FileSelectionDialog class methods!folderMaskPC	"UIMaskEditor new openOnClass: self andSelector: #folderMaskPC"	<resource: #image>	^CachedImage on: (Image extent: 15@16 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 62 0 0 0 127 0 0 0 255 252 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0])! !!Tools.FileSelectionDialog class methods!newDirectoryImage	"UIMaskEditor new openOnClass: self andSelector: #newDirectoryImage"	<resource: #image>	^CachedImage on: (Image extent: 15@12 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: #[170 170 162 168 170 168 170 136 160 10 34 40 134 98 136 168 0 0 10 32 38 102 96 168 25 153 146 40 38 102 98 136 25 153 146 168 38 102 98 168 25 153 146 168 0 0 2 168])! !!Tools.FileSelectionDialog class methods!newDirectoryMask	"UIMaskEditor new openOnClass: self andSelector: #newDirectoryMask"	<resource: #image>	^CachedImage on: (Image extent: 15@12 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[0 32 0 0 1 4 0 0 60 168 0 0 126 80 0 0 255 202 0 0 255 240 0 0 255 232 0 0 255 228 0 0 255 224 0 0 255 224 0 0 255 224 0 0 255 224 0 0])! !!Tools.FileSelectionDialog class methods!upDirectoryImage	"UIMaskEditor new openOnClass: self andSelector: #upDirectoryImage"	<resource: #image>	^CachedImage on: (Image extent: 15@13 depth: 2 bitsPerPixel: 2 palette: (MappedPalette withColors: ((Array new: 3) at: 1 put: ColorValue black; at: 2 put: ColorValue yellow; at: 3 put: ColorValue white; yourself)) usingBits: #[160 2 170 168 134 100 170 168 0 0 0 8 38 102 102 96 25 137 153 144 38 2 102 96 24 0 153 144 38 70 102 96 25 137 153 144 38 64 2 96 25 153 153 144 38 102 102 96 0 0 0 0])! !!Tools.FileSelectionDialog class methods!upDirectoryMask	"UIMaskEditor new openOnClass: self andSelector: #upDirectoryMask"	<resource: #image>	^CachedImage on: (Image extent: 15@13 depth: 1 bitsPerPixel: 1 palette: CoveragePalette monoMaskPalette usingBits: #[62 0 0 0 127 0 0 0 255 252 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0 255 254 0 0])! !Tools.FileSelectionDialog initialize!"Imported Classes:"!self error: 'Attempting to file-in parcel imports.  Choose terminate or close'!UI.Dialog class	instanceVariableNames: ''!Smalltalk.UI defineClass: #SimpleDialog	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView '	classInstanceVariableNames: ''	imports: ''	category: 'Interface-Dialogs'!