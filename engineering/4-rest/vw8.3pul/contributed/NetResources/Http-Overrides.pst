<?xml version="1.0"?><st-source><!-- Name: Http-OverridesComment: This package is needed by NetResources.  This particular version is for VW 7.5 - if you are using any earlier version, DON'T USE THIS :)DbIdentifier: psql_public_cst_2007DbTrace: 92375DbUsername: niallrDbVersion: 2.13DevelopmentPrerequisites: #(#(#any 'HTTP' '') #(#any 'URISupport' ''))PackageName: Http-OverridesParcel: #('Http-Overrides')ParcelName: Http-OverridesPrerequisiteDescriptions: #(#(#name 'HTTP' #componentType #package) #(#name 'URISupport' #componentType #package))PrerequisiteParcels: #(#('HTTP' '') #('URISupport' ''))PrintStringCache: (2.13,niallr)Version: 2.13Date: 4:46:57 PM January 27, 2016 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.2 (aug15.1) of August 7, 2015 on January 27, 2016 at 4:46:57 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>HttpClient</name><environment>Net</environment><super>Net.NetClient</super><private>false</private><indexed-type>none</indexed-type><inst-vars>request keepAlive protocol originalResponse </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-HTTP-Support</category><attributes><package>Http-Overrides</package></attributes></class><comment><class-id>Net.HttpClient</class-id><body>This client makes http/https connections to servers in order to request resources via HTTP protocol, which is a superset of MIME. The HttpClient creates connection based on URL protocol which can be http or https.  Supports cookie state management.If the Http client receives the https URL protocol and detects that the HTTPS support is not loaded, the client does the following:1. if the URL Settings allows to auto load the HTTPS parcel, the parcel will be loaded and and created SSL connection2. if the URL Settings Https auto load is turned off (default behavior), the HttpClient raises the ComponentNotLoaded exception. The exception is resumable and resuming the exception by default loads the HTTPS parcel.How to send authorized messages see samples in the AuthenticationPolicy class.Instance Variables:	request	&lt;HttpRequest&gt;	the HttpRequest object	keepAlive	&lt;aBoolean&gt;	 the variable allows to set persistent connection.	protocol &lt;String&gt; 'http' or 'https' based on the protocol will be created an instance of HttpStreamHandlerShared Variables:	Protocol &lt;String&gt; 'http' or 'https'	Connectionconnection stream  is persistent		if  #keepAlive method for the HttpClient instance or request returns  trueconnection stream  is closed after each request		if  #keepAlive method for the HttpClient instance and request returns  falseIf server sends a response with closed connection the HttpClient closes the connection stream but doesn't change the #keepAlive variable.	Error handlingIf user application doesn't provide error handling for HttpClient the HttpClient is going to try handle some exceptions by itself. The exceptions that client can handle are located in the HttpProtocolInterpreter processing category.	Sending chunked request:client := HttpClient new.request := HttpRequest post: 'http://uddi.microsoft.com/inquire'.request transferEncoding:  'chunked'.client 	connectRequest: request 	do:  [ :connection | 		request writeChunkedOn: connection		do: [ request 				writeChunk: stream encodedContents asString  				on: connection ]].Sample how to create cookie fields see in CookieAgent comments	</body></comment><class><name>HttpBadHostname</name><environment>Net</environment><super>Net.HttpException</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>RSSExtensions</category><attributes><package>Http-Overrides</package></attributes></class><methods><class-id>Net.HttpClient</class-id> <category>accessing</category><body package="Http-Overrides">originalResponse	^originalResponse</body><body package="Http-Overrides">originalResponse: anObject	originalResponse := anObject</body></methods><methods><class-id>Net.HttpResponse</class-id> <category>accessing</category><body package="Http-Overrides">code	self statusLine ifNil: [^'400'].	^self statusLine code</body></methods><methods><class-id>Net.HttpResponse</class-id> <category>testing</category><body package="Http-Overrides">isFailure	^self failed</body><body package="Http-Overrides">isMoved	self statusLine ifNil: [^false].	^self statusLine isMoved</body><body package="Http-Overrides">isSuccess	self statusLine ifNil: [^false].	^self statusLine isSuccess</body></methods><methods><class-id>Net.HttpResponseStatusLine</class-id> <category>testing</category><body package="Http-Overrides">isMoved	"Moved permanently/temporarily"		^((self responseEquals: '301') or: [ self responseEquals: '302']) or: [self responseEquals: '307']</body></methods><methods><class-id>Net.SetCookieField</class-id> <category>parsing</category><body package="Http-Overrides">parse: rfc822Stream"Override to handle errors"	self source: rfc822Stream asStream.	value := [self doParse: rfc822Stream]		on: Error		do: [:ex | nil].</body></methods><methods><class-id>Net.HttpProtocolInterpreter</class-id> <category>exception processing</category><body package="Http-Overrides">process301: ex	| newUrl |	self redirectRequest ifFalse: [^nil].	ex parameter setCookie ifNotNil: [self registerCookiesFromResponse: ex parameter].	(#('GET' 'HEAD') includes: self request method )		ifFalse: [^nil].	newUrl := self request url resolvePath: ex location.	^self request url = newUrl 		ifTrue: [ ex parameter ]		ifFalse: 			[( self hostName ~= newUrl host 				or: [self portNumber ~= newUrl port ])				ifTrue: 					[ self hostName: newUrl host.					self portNumber: newUrl port.					self disconnect].			self request url: newUrl.			"fix for redirects to different hosts"			self request url host = newUrl host				ifTrue: [self request url: newUrl]				ifFalse: [request := HttpRequest get: newUrl].			self authPolicy setNotAuthorizedState.			self executeAndGetResponse]</body></methods><methods><class-id>Core.CharacterArray</class-id> <category>converting</category><body package="Http-Overrides">asURI	"Answer a URI named the receiver. The string should not include any percent-encoded characters. All special characters will be percent-encoded after parsing the string"	^[Net.URI fromString: self string]		on: Net.HttpBadHostname		do: [:ex | nil]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>HttpException</name><environment>Net</environment><super>Net.NetError</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-HTTP-Support</category><attributes><package>HTTP</package></attributes></class><class><name>HttpProtocolInterpreter</name><environment>Net</environment><super>Net.NetProtocolInterpreter</super><private>false</private><indexed-type>none</indexed-type><inst-vars>authPolicy proxyAuthPolicy cookieAgent request hostName portNumber readingOptions writingOptions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HTTP</category><attributes><package>HTTP</package></attributes></class><class><name>SetCookieField</name><environment>Net</environment><super>Net.ValueWithParametersField</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>HTTP</category><attributes><package>HTTP</package></attributes></class><class><name>HttpResponse</name><environment>Net</environment><super>Net.HttpEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>statusLine </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-HTTP-Support</category><attributes><package>HTTP</package></attributes></class><class><name>NetClient</name><environment>Net</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>user hostName portNumber clientPI retries timeout delaySeconds state </inst-vars><class-inst-vars>defaultProtocolInterpreterClass defaultDelaySeconds defaultRetries defaultTimeout </class-inst-vars><imports></imports><category>Net-Clients</category><attributes><package>NetClientBase</package></attributes></class><class><name>HttpResponseStatusLine</name><environment>Net</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>code message protocol version </inst-vars><class-inst-vars>messages </class-inst-vars><imports></imports><category>Net-HTTP-Support</category><attributes><package>HTTP</package></attributes></class><class><name>CharacterArray</name><environment>Core</environment><super>Core.ArrayedCollection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class></st-source>