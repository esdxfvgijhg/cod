<?xml version="1.0"?><st-source><!-- Name: ProportionalTabsNotice: Copyright 2002 - 2013 Travis GriggsThis utility is free to use under the MIT license, as detailed below.Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.Comment: Simple hack to make it so those don't arrow buttons in tab bars don't ever show up.DbIdentifier: bear73DbTrace: 401656DbUsername: nrossDbVersion: 7.10 - 1DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' ''))PackageName: ProportionalTabsParcel: #('ProportionalTabs')ParcelName: ProportionalTabsPrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle))PrerequisiteParcels: #(#('Base VisualWorks' ''))PrintStringCache: (7.10 - 1,nross)Version: 7.10 - 1Date: 10:18:37 AM April 10, 2013 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.10 (apr13.1) of April 10, 2013 on April 10, 2013 at 10:18:37 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>UI.TabControlBarView</class-id> <category>element accessing</category><body package="ProportionalTabs">boundsOfElementIndex: anElementIndex inBounds: aRectangle 	| left width vsAndBs |	vsAndBs := self computeVisualsAndBoxesIn: aRectangle.	left := (1 to: anElementIndex - 1) inject: 0				into: [:accum :index | accum + (vsAndBs at: index) value width].	anElementIndex = 0 ifTrue: [^Rectangle origin: 0 @ aRectangle top extent: 0 @ aRectangle height].	width := (vsAndBs at: anElementIndex) value width.	^anElementIndex = self selectionIndex 		ifTrue: [Rectangle origin: left @ 0 extent: width @ (self lineGrid + 11)]		ifFalse: [Rectangle origin: left @ 2 extent: width @ (self lineGrid + 7)]</body></methods><methods><class-id>UI.TabControlBarView</class-id> <category>private</category><body package="ProportionalTabs">computeVisualsAndBoxesIn: aBounds 	| lineGrid visuals lastBox boxes ratio |	lineGrid := self lineGrid.	visuals := (1 to: self numberOfElements) 				collect: [:n | self visualBlock value: self value: n].	lastBox := Rectangle origin: 2 @ aBounds top extent: 0 @ aBounds height.	boxes := (1 to: visuals size) collect: 					[:n | 					| width |					width := (visuals at: n) preferredBounds width + 8.					lastBox := n = self selectionIndex 								ifTrue: [Rectangle origin: lastBox right @ 0 extent: width @ (lineGrid + 12)]								ifFalse: [Rectangle origin: lastBox right @ 1 extent: width @ (lineGrid + 8)]].	(ratio := aBounds right / lastBox right) &lt; 1 		ifTrue: 			[lastBox := Rectangle origin: 2 @ aBounds top extent: 0 @ aBounds height.			boxes := boxes collect: 							[:each | 							lastBox := lastBox right @ each top 										extent: (each width * ratio) rounded @ each height]].	^(1 to: visuals size) collect: [:n | (visuals at: n) -&gt; (boxes at: n)]</body></methods><methods><class-id>UI.TabControlBarView</class-id> <category>displaying</category><body package="ProportionalTabs">displayOn: aGraphicsContext 	| clippingBox vsAndBs |	clippingBox := aGraphicsContext clippingBounds.	vsAndBs := self computeVisualsAndBoxesIn: self bounds.	tabWidths := vsAndBs collect: [:each | each value width].	"to keep some of the old methods happy"	vsAndBs keysAndValuesDo: 			[:i :vAndB | 			| visual box |			visual := vAndB key.			box := vAndB value.			((clippingBox intersects: box) and: [box width &gt; 0]) 				ifTrue: 					[| innerBox |					innerBox := i = selectionIndex 								ifTrue: [box origin - (2 @ -1) extent: (box width + 4) @ box height]								ifFalse: [box].					self 						displayBackground: i						on: aGraphicsContext						forBounds: (innerBox insetBy: 2).					self 						displayVisual: visual						index: i						on: aGraphicsContext						forBounds: (box insetBy: 2).					self 						displayBorderOn: aGraphicsContext						bounds: innerBox						index: i]]</body></methods><methods><class-id>UI.MacOSXTabControlBarView</class-id> <category>private</category><body package="ProportionalTabs">computeVisualsAndBoxesIn: aBounds 	| lineGrid visuals lastBox boxes ratio |	lineGrid := self lineGrid.	visuals := (1 to: self numberOfElements) 				collect: [:n | self visualBlock value: self value: n].	lastBox := Rectangle origin: 2 @ aBounds top				extent: 0 @ (aBounds height - 3).	boxes := (1 to: visuals size) collect: 					[:n | 					| width |					width := (visuals at: n) preferredBounds width + 8.					lastBox := Rectangle origin: lastBox right @ 0								extent: width @ (lineGrid + 9)].	(ratio := aBounds right / lastBox right) &lt; 1 		ifTrue: 			[lastBox := Rectangle origin: 2 @ aBounds top						extent: 0 @ (aBounds height - 3).			boxes := boxes collect: 							[:each | 							lastBox := lastBox right @ each top 										extent: (each width * ratio) rounded @ each height]].	^(1 to: visuals size) collect: [:n | (visuals at: n) -&gt; (boxes at: n)]</body></methods><methods><class-id>UI.MacOSXTabControlBarView</class-id> <category>displaying</category><body package="ProportionalTabs">displayOn: aGraphicsContext 	| clippingBox vsAndBs |	clippingBox := aGraphicsContext clippingBounds.	vsAndBs := self computeVisualsAndBoxesIn: self bounds.	tabWidths := vsAndBs collect: [:each | each value width].	"to keep some of the old methods happy"	vsAndBs keysAndValuesDo: 			[:i :vAndB | 			| visual box |			visual := vAndB key.			box := vAndB value.			((clippingBox intersects: box) and: [box width &gt; 0]) 				ifTrue: 					[self 						displayBackground: i						on: aGraphicsContext						forBounds: box.					self 						displayVisual: visual						index: i						on: aGraphicsContext						forBounds: (box insetBy: 2)]]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TabControlBarView</name><environment>UI</environment><super>UI.SelectionView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>visualBlock tabOffset tabWidths leftScrollButton rightScrollButton exceedsWidth pairedScrollTabs scrollTabBlock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category><attributes><package>UIBasics-Components</package></attributes></class><class><name>MacOSXTabControlBarView</name><environment>UI</environment><super>UI.TabControlBarView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UILooks-MacOSX</category><attributes><package>UILooks-MacOSX</package></attributes></class></st-source>