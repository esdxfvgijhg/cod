<?xml version="1.0"?><st-source><!-- Name: Xtreams-Parsing-TestsNotice: The MIT LicenseCopyright 2010-2013 Cincom Systems, Martin Kobetic and Michael Lucas-SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.DbIdentifier: bear73DbTrace: 468776DbUsername: tkoganDbVersion: 8.2 - 0DevelopmentPrerequisites: #(#(#any 'SUnitToo' '') #(#any 'Xtreams-Core' '') #(#any 'Xtreams-Parsing' ''))DialectVersion: VisualWorks 7.9PackageName: Xtreams-Parsing-TestsParcel: #('Xtreams-Parsing-Tests')PrerequisiteDescriptions: #(#(#name 'SUnitToo' #componentType #package) #(#name 'Xtreams-Core' #componentType #package) #(#name 'Xtreams-Parsing' #componentType #package))PrerequisiteParcels: #(#('SUnitToo' '') #('Xtreams-Core' '') #('Xtreams-Parsing' ''))PrintStringCache: (8.2 - 0,tkogan)Version: 8.2 - 0Date: 11:27:50 AM June 16, 2017 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.3 (jun17.3) of June 16, 2017 on June 16, 2017 at 11:27:50 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ParserBootstrapTest</name><environment>Xtreams</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars>parser result rule </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Xtreams-Parsing-Tests</package></attributes></class><class><name>WikiGenerator</name><environment>PEG</environment><super>PEG.Actor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports>			private XML.*			</imports><category></category><attributes><package>Xtreams-Parsing-Tests</package></attributes></class><comment><class-id>PEG.WikiGenerator</class-id><body>This actor is used to convert text with wiki mark-up into an XML document with xhtml tags.Shared Variables	Anchor	&lt;NodeTag&gt;	Break	&lt;NodeTag&gt;	Division	&lt;NodeTag&gt;	Heading1	&lt;NodeTag&gt;	Heading2	&lt;NodeTag&gt;	Heading3	&lt;NodeTag&gt;	Heading4	&lt;NodeTag&gt;	Href	&lt;NodeTag&gt;	ListItem	&lt;NodeTag&gt;	OrderedList	&lt;NodeTag&gt;	Paragraph	&lt;NodeTag&gt;	Preformatted	&lt;NodeTag&gt;	Span	&lt;NodeTag&gt;	Style	&lt;NodeTag&gt;	Table	&lt;NodeTag&gt;	TableBody	&lt;NodeTag&gt;	TableData	&lt;NodeTag&gt;	TableHead	&lt;NodeTag&gt;	TableHeading	&lt;NodeTag&gt;	TableRow	&lt;NodeTag&gt;	UnorderedList	&lt;NodeTag&gt;</body></comment><class><name>ArithmeticEvaluatorTest</name><environment>PEG</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Parsing-Tests</package></attributes></class><class><name>ParserPEGTest</name><environment>Xtreams</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars>parser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>My Classes</category><attributes><package>Xtreams-Parsing-Tests</package></attributes></class><class><name>ParserSmalltalkTest</name><environment>PEG</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars>parser </inst-vars><class-inst-vars></class-inst-vars><imports>			private PEG.*			</imports><category></category><attributes><package>Xtreams-Parsing-Tests</package></attributes></class><class><name>ArithmeticEvaluator</name><environment>PEG</environment><super>PEG.Actor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>parser </class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Parsing-Tests</package></attributes></class><comment><class-id>PEG.ArithmeticEvaluator</class-id><body>This is a simple actor for the example grammar from wikipedia (http://en.wikipedia.org/wiki/Parsing_expression_grammar). It also shows one possible way to package a grammar/parser/actor for convenience. This one can be used simply as	ArithmeticEvaluator new parse: '(3+4)*5'</body></comment><class><name>ParserWikiTest</name><environment>Xtreams</environment><super>SUnit.TestCase</super><private>true</private><indexed-type>none</indexed-type><inst-vars>parser </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Parsing-Tests</package></attributes></class><class><name>NodeBuilder</name><environment>PEG</environment><super>PEG.Actor</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Parsing-Tests</package></attributes></class><shared-variable><name>TableBody</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'tableBody'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>Table</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'table'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>Break</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'br'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>TableHeading</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'th'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>TableHead</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'tableHead'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>Heading1</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'h1'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>TableData</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'td'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>Href</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'href'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>Heading2</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'h2'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>Heading4</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'h4'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>TableRow</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'tr'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>Paragraph</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'p'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>Heading3</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'h3'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>UnorderedList</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'ul'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>Span</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'span'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>Style</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'style'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>ListItem</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'li'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>Division</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'div'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>OrderedList</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'ol'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>Preformatted</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'pre'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><shared-variable><name>Anchor</name><environment>PEG.WikiGenerator</environment><private>false</private><constant>false</constant><category>xhtml tags</category><initializer>XML.NodeTag new qualifier: '' ns: 'http://www.w3.org/1999/xhtml' type: 'a'</initializer><attributes><package>Xtreams-Parsing-Tests</package></attributes></shared-variable><methods><class-id>Xtreams.ParserBootstrapTest</class-id> <category>initialize-release</category><body package="Xtreams-Parsing-Tests">setUp	parser := PEG.Parser parserBootstrap</body></methods><methods><class-id>Xtreams.ParserBootstrapTest</class-id> <category>tests</category><body package="Xtreams-Parsing-Tests">testParsePEG	self assert: (parser parse: 'Grammar' stream: PEG.Parser grammarPEG reading positioning actor: nil) notEmpty.	self assert: (parser parse: 'Grammar' stream: PEG.Parser grammarPEG reading positioning actor: PEG.ParserParser new) grammar size = 52</body><body package="Xtreams-Parsing-Tests">testParsePEGwithPEG	parser := parser parse: 'Grammar' stream: PEG.Parser grammarPEG reading positioning actor: PEG.ParserParser new.	self testParsePEG</body><body package="Xtreams-Parsing-Tests">testValidatePEG	self assert: (parser validate: 'Grammar' stream: PEG.Parser grammarPEG reading positioning)</body></methods><methods><class-id>PEG.WikiGenerator class</class-id> <category>utilities</category><body package="Xtreams-Parsing-Tests">docsCSS	^'&lt;style type="text/css"&gt;		table {border-collapse: separate;}		th {border: 1px solid black; padding: 3px; text-align: center;}		td {border: 1px solid black; padding: 3px; text-align: left;}	&lt;/style&gt;'</body><body package="Xtreams-Parsing-Tests">generateHtmlDocsInto: directory	"Convert package comments into a set of web pages and put the files into @directory.	""		self generateHtmlDocsInto: Kernel.ObjectMemory imageDirectory	"	((Store.Registry bundleNamed: 'XtreamsDevelopment') leafItems		reject: [ :p | '*-Tests' match: p name ]	) collect: [ :p || body file |		body := self process: p comment reading.		file := directory / (p name, '.html').		file exists ifTrue: [ file delete ].		(file writing encoding: #ascii)			write: '&lt;html&gt;'; cr;			write: '&lt;head&gt;'; cr;			write: '&lt;title&gt;'; write: p name; write: '&lt;/title&gt;'; cr;			write: self docsCSS; cr;			write: '&lt;/head&gt;'; cr;			write: '&lt;body&gt;'; cr;			write: body printString; cr;			write: '&lt;/body&gt;'; cr;			write: '&lt;/html&gt;';			close ]</body><body package="Xtreams-Parsing-Tests">generateWikiDocsInto: directory	"Save package comments into a set of wiki pages for the project site wiki. Put the files into @directory.	""		self generateWikiDocsInto: Kernel.ObjectMemory imageDirectory	""		self generateWikiDocsInto: (OS.Filename fromComponents: ('$(HOME)/st/xtreams/wiki' tokensBasedOn: $/)) asFilename	"	((Store.Registry bundleNamed: 'XtreamsDevelopment') leafItems		reject: [ :p | #('*-Tests' '*-Xperiments' '*-Support' 'Xpressly*') anySatisfy: [ :pattern | pattern match: p name ] ]	) collect: [ :p || file |		file := p name copyFrom: 'Xtreams-' size + 1 to: p name size.		file := directory / (file, '.wiki').		file exists ifTrue: [ file delete ].		(file writing encoding: #ascii) write: p comment; close ]</body><body package="Xtreams-Parsing-Tests">process: input	"Convert input into an xhtml XML document.	""	input	&lt;ReadStream&gt;	text with wiki markup		^		&lt;XML.Element&gt;	""		self process: 'Single paragraph with *bold* and _italic_ text and a [link]' reading	""		| package div file |		package := Store.Registry packageNamed: 'Xtreams-Core'.		div := self process: package comment reading.		file := '/dev/shm/', package name, '.html'.		file asFilename writing write: '&lt;html&gt;&lt;body&gt;'; write: div printString; write: '&lt;/body&gt;&lt;/html&gt;'; close.		ExternalWebBrowser open: 'file://', file	"	^self parser parse: 'Page' stream: input actor: self new</body></methods><methods><class-id>PEG.WikiGenerator class</class-id> <category>accessing</category><body package="Xtreams-Parsing-Tests">parser	^Parser parserPEG		parse: 'Grammar'		stream: Parser grammarWiki reading		actor: ParserParser new</body></methods><methods><class-id>PEG.ArithmeticEvaluatorTest</class-id> <category>tests</category><body package="Xtreams-Parsing-Tests">testNumber	self assert: (ArithmeticEvaluator new parse: '1234567890') = 1234567890</body><body package="Xtreams-Parsing-Tests">testParentheses	self assert: (ArithmeticEvaluator new parse: '(3+4)*3+4') = 25</body><body package="Xtreams-Parsing-Tests">testProduct	self assert: (ArithmeticEvaluator new parse: '3*4') = 12</body><body package="Xtreams-Parsing-Tests">testSum	self assert: (ArithmeticEvaluator new parse: '3+4') = 7</body><body package="Xtreams-Parsing-Tests">testSumOfProducts	self assert: (ArithmeticEvaluator new parse: '3+4*3+4') = 19</body></methods><methods><class-id>Xtreams.ParserPEGTest</class-id> <category>initialize-release</category><body package="Xtreams-Parsing-Tests">setUp	parser := PEG.Parser parserPEG</body></methods><methods><class-id>Xtreams.ParserPEGTest</class-id> <category>tests</category><body package="Xtreams-Parsing-Tests">testParsePEG	self assert: (parser parse: 'Grammar' stream: PEG.Parser grammarPEG reading positioning actor: nil) notEmpty.	self assert: (parser parse: 'Grammar' stream: PEG.Parser grammarPEG reading positioning actor: PEG.ParserParser new) grammar size = 52</body><body package="Xtreams-Parsing-Tests">testParsePEGwithPEG	parser := parser parse: 'Grammar' stream: PEG.Parser grammarPEG reading positioning actor: PEG.ParserParser new.	self testParsePEG</body><body package="Xtreams-Parsing-Tests">testValidatePEG	self assert: (parser validate: 'Grammar' stream: PEG.Parser grammarPEG reading positioning)</body></methods><methods><class-id>PEG.ParserSmalltalkTest</class-id> <category>initialize-release</category><body package="Xtreams-Parsing-Tests">setUp	parser := Parser parserPEG parse: 'Grammar' stream: Parser grammarSmalltalk actor: ParserParser new.</body><body package="Xtreams-Parsing-Tests">testBlockExpression	| expression tree |	expression := '[super ++ (anInteger - skipped)] on: Incomplete do: [ :ex | ex pass ]'.	tree := parser parse: 'Expression' stream: expression reading actor: NodeBuilder new.	(tree at: 2) size = expression size</body><body package="Xtreams-Parsing-Tests">testExpressionKeywordMessageWithComplexArguments	| expression tree |	expression := 'aSequenceableCollection replaceFrom: startIndex to: startIndex + tail - 1 with: cache startingAt: read + 1'.	tree := parser parse: 'Method' stream: expression reading actor: NodeBuilder new.	(tree at: 2) size = expression size</body><body package="Xtreams-Parsing-Tests">testMethodDoubleDashSelector	| expression tree |	expression := '-- count	^count'.	tree := parser parse: 'Method' stream: expression reading actor: NodeBuilder new.	(tree at: 2) size = expression size</body></methods><methods><class-id>PEG.ArithmeticEvaluator</class-id> <category>services</category><body package="Xtreams-Parsing-Tests">parse: input	^self class parser parse: self class start stream: input actor: self</body></methods><methods><class-id>PEG.ArithmeticEvaluator class</class-id> <category>accessing</category><body package="Xtreams-Parsing-Tests">flushParser"You'll want to flush the cached parser when the grammar definition changes."	parser := nil</body><body package="Xtreams-Parsing-Tests">grammar	^'	Number &lt;- [0-9]+	Parenthesised &lt;- "(" Expr ")"	Value &lt;- Number / Parenthesised	Product	&lt;- Value (("*" / "/") Value)*	Sum &lt;- Product (("+" / "-") Product)*	Expr &lt;- Sum	'</body><body package="Xtreams-Parsing-Tests">parser	^parser ifNil: [ parser := Parser parserPEG parse: 'Grammar' stream: self grammar actor: ParserParser new ]</body><body package="Xtreams-Parsing-Tests">start	^'Expr'</body></methods><methods><class-id>Xtreams.ParserWikiTest</class-id> <category>initialize-release</category><body package="Xtreams-Parsing-Tests">setUp	parser := PEG.Parser parserWiki</body><body package="Xtreams-Parsing-Tests">testHeading	| input output |	input :='	= Hello _World_ =Good _Bye_ *[World&gt;http://www.google.com]*[Short-Link]* Bullet1 &lt; Bullet2* Bullet2# Numbered## Nested---	preformatted	text---{{{	code}}}and again	|| Heading1	|| Heading2	|| Data 1		|| Data2	|| Data 3		|| Data4After table'.	output := parser parse: 'Page' stream: input reading actor: PEG.WikiGenerator new.	self assert: output printString = '&lt;div&gt;	&lt;h1&gt;		Hello 		&lt;span style="font-style: italic"&gt;World&lt;/span&gt;	&lt;/h1&gt;	&lt;p&gt;		Good 		&lt;span style="font-style: italic"&gt;Bye&lt;/span&gt;		 		&lt;span style="font-weight: bold"&gt;			&lt;a href="http://www.google.com"&gt;World&lt;/a&gt;		&lt;/span&gt;	&lt;/p&gt;		&lt;p&gt;		&lt;a href="Short-Link.html"&gt;Short-Link&lt;/a&gt;	&lt;/p&gt;	&lt;ul&gt;		&lt;li&gt; Bullet1 &amp;lt; Bullet2&lt;/li&gt;		&lt;li&gt; Bullet2&lt;/li&gt;	&lt;/ul&gt;	&lt;ol&gt;		&lt;li&gt; Numbered&lt;/li&gt;		&lt;li&gt;			&lt;ol&gt;				&lt;li&gt; Nested&lt;/li&gt;			&lt;/ol&gt;		&lt;/li&gt;	&lt;/ol&gt;	&lt;pre&gt;	preformatted	text&lt;/pre&gt;	&lt;pre&gt;	code&lt;/pre&gt;	&lt;p&gt;and again&lt;/p&gt;	&lt;table&gt;		&lt;tableHead&gt;			&lt;tr&gt;				&lt;th&gt; Heading1	&lt;/th&gt;				&lt;th&gt; Heading2&lt;/th&gt;			&lt;/tr&gt;		&lt;/tableHead&gt;		&lt;tableBody&gt;			&lt;tr&gt;				&lt;td&gt; Data 1		&lt;/td&gt;				&lt;td&gt; Data2&lt;/td&gt;			&lt;/tr&gt;			&lt;tr&gt;				&lt;td&gt; Data 3		&lt;/td&gt;				&lt;td&gt; Data4&lt;/td&gt;			&lt;/tr&gt;		&lt;/tableBody&gt;	&lt;/table&gt;	&lt;p&gt;After table&lt;/p&gt;&lt;/div&gt;'</body></methods><methods><class-id>PEG.NodeBuilder</class-id> <category>initialize-release</category><body package="Xtreams-Parsing-Tests">process: name object: object start: start stop: stop	^Array with: name with: (start + 1 to: stop) with: object</body></methods><methods><class-id>PEG.Parser class</class-id> <category>parsers</category><body package="Xtreams-Parsing-Tests">parserWiki	^self parserPEG parse: 'Grammar' stream: self grammarWiki reading positioning actor: ParserParser new</body></methods><methods><class-id>PEG.WikiGenerator</class-id> <category>Structural</category><body package="Xtreams-Parsing-Tests">Empty	&lt;action: 'Empty' arguments: #()&gt;	^XML.Text text: ''	"^Element tag: break"</body><body package="Xtreams-Parsing-Tests">Heading1: flow	&lt;action: 'Heading1' arguments: #(3)&gt;	^Element tag: Heading1 elements: flow</body><body package="Xtreams-Parsing-Tests">Heading2: flow	&lt;action: 'Heading2' arguments: #(3)&gt;	^Element tag: Heading2 elements: flow</body><body package="Xtreams-Parsing-Tests">Heading3: flow	&lt;action: 'Heading3' arguments: #(3)&gt;	^Element tag: Heading3 elements: flow</body><body package="Xtreams-Parsing-Tests">Heading4: flow	&lt;action: 'Heading4' arguments: #(3)&gt;	^Element tag: Heading4 elements: flow</body><body package="Xtreams-Parsing-Tests">ListItem: bullets flow: flow	&lt;action: 'Bullet1' arguments: #(2 3)&gt;	&lt;action: 'Bullet2' arguments: #(2 3)&gt;	&lt;action: 'Bullet3' arguments: #(2 3)&gt;	&lt;action: 'Hash1' arguments: #(2 3)&gt;	&lt;action: 'Hash2' arguments: #(2 3)&gt;	&lt;action: 'Hash3' arguments: #(2 3)&gt;	^Element tag: ListItem elements: flow</body><body package="Xtreams-Parsing-Tests">OrderedList: bullets	&lt;action: 'OrderedList'&gt;	^Element tag: OrderedList elements: bullets</body><body package="Xtreams-Parsing-Tests">OrderedListN: bullets	&lt;action: 'OrderedList2'&gt;	&lt;action: 'OrderedList3'&gt;	^Element tag: ListItem elements: (Array with: (Element tag: OrderedList elements: bullets))</body><body package="Xtreams-Parsing-Tests">Page: lines	&lt;action: 'Page'&gt;	^Element tag: Division elements: lines</body><body package="Xtreams-Parsing-Tests">Paragraph: flow	&lt;action: 'Paragraph'&gt;	^Element tag: Paragraph elements: flow</body><body package="Xtreams-Parsing-Tests">Preformatted: text	&lt;action: 'Preformatted' arguments: #( 2 )&gt;	&lt;action: 'Code' arguments: #( 2 )&gt;	^Element tag: Preformatted elements: (Array with: (XML.Text text: text))</body><body package="Xtreams-Parsing-Tests">Table: header rows: rows	&lt;action: 'Table' arguments: #(1 2)&gt;	^Element tag: Table elements:		(Array			with: (Element tag: TableHead elements: (Array with: header))			with: (Element tag: TableBody elements: rows))</body><body package="Xtreams-Parsing-Tests">TableCell: flow	&lt;action: 'Cell'&gt;	^Element tag: TableData elements: flow</body><body package="Xtreams-Parsing-Tests">TableHeadingCell: flow	&lt;action: 'HeadingCell'&gt;	^Element tag: TableHeading elements: flow</body><body package="Xtreams-Parsing-Tests">TableRow: cells	&lt;action: 'TableRow' arguments: #(3)&gt;	&lt;action: 'HeadingRow' arguments: #(3)&gt;	^Element tag: TableRow elements: cells</body><body package="Xtreams-Parsing-Tests">UnorderedList: bullets	&lt;action: 'UnorderedList'&gt;	^Element tag: UnorderedList elements: bullets</body><body package="Xtreams-Parsing-Tests">UnorderedListN: bullets	&lt;action: 'UnorderedList2'&gt;	&lt;action: 'UnorderedList3'&gt;	^Element tag: ListItem elements: (Array with: (Element tag: UnorderedList elements: bullets))</body></methods><methods><class-id>PEG.WikiGenerator</class-id> <category>Lexical</category><body package="Xtreams-Parsing-Tests">Bold: flow	&lt;action: 'Bold' arguments: #( 2 )&gt;	^Element tag: Span attributes: (Array with: (Attribute name: Style value: 'font-weight: bold')) elements: flow</body><body package="Xtreams-Parsing-Tests">Character: character	&lt;action: 'Character'&gt;	^XML.Text text: (String with: character)</body><body package="Xtreams-Parsing-Tests">Escape: escape	&lt;action: 'Escape'&gt;	^escape first</body><body package="Xtreams-Parsing-Tests">Italic: flow	&lt;action: 'Italic' arguments: #( 2 )&gt;	^Element tag: Span attributes: (Array with: (Attribute name: Style value: 'font-style: italic')) elements: flow</body><body package="Xtreams-Parsing-Tests">LineCharacter: character	&lt;action: 'LineCharacter'&gt;	^XML.Text text: (String with: character)</body><body package="Xtreams-Parsing-Tests">Link: address	&lt;action: 'LinkShort' arguments: #( 2 )&gt;	^Element tag: Anchor attributes: (Array with: (Attribute name: Href value: address, '.html')) elements: (Array with: (XML.Text text: address))</body><body package="Xtreams-Parsing-Tests">Link: flow address: address	&lt;action: 'LinkFull' arguments: #( 2 3 )&gt;	^Element tag: Anchor attributes: (Array with: (Attribute name: Href value: address)) elements: flow</body><body package="Xtreams-Parsing-Tests">Underline: flow	&lt;action: 'Underline' arguments: #( 2 )&gt;	^Element tag: Span attributes: (Array with: (Attribute name: Style value: 'text-decoration: underline')) elements: flow</body></methods><methods><class-id>PEG.ArithmeticEvaluator</class-id> <category>rules</category><body package="Xtreams-Parsing-Tests">Number: digits	&lt;action: 'Number'&gt;		^digits inject: 0 into: [ :total :digit | total * 10 + ('0123456789' indexOf: digit) - 1 ]</body><body package="Xtreams-Parsing-Tests">Parenthesised: expression	&lt;action: 'Parenthesised' arguments: #(2)&gt;	^expression</body><body package="Xtreams-Parsing-Tests">Product: first rest: rest	&lt;action: 'Product' arguments: #(1 2)&gt;	^rest inject: first into: [ :total :next |		(next first = '*') ifTrue: [ total * next last ] ifFalse: [ total / next last ] ]</body><body package="Xtreams-Parsing-Tests">Sum: first rest: rest	&lt;action: 'Sum' arguments: #(1 2)&gt;	^rest inject: first into: [ :total :next |		(next first = '+') ifTrue: [ total + next last ] ifFalse: [ total - next last ] ]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>Actor</name><environment>PEG</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actions </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Xtreams-Parsing</package></attributes></class></st-source>