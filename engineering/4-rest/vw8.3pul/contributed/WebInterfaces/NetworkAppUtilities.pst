<?xml version="1.0"?><st-source><!-- Name: NetworkAppUtilitiesComment: Small package that contains some code that is useful for various network interfaces (Twitter, Tumblr, and Facebook for now)DbIdentifier: psql_public_cst_2007DbTrace: 76698PackageName: NetworkAppUtilitiesParcel: #('NetworkAppUtilities')ParcelDirectory: dev/NetworkAppUtilitiesPrintStringCache: (1.8,jamesr)Version: (1.6,jamesr)Date: 12:41:39 PM February 18, 2011 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.8 (jan11.4) of January 28, 2011 on February 18, 2011 at 12:41:39 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Core.Timestamp class</class-id> <category>instance creation</category><body package="NetworkAppUtilities" selector="fromISO8601:">fromISO8601: aString 	"Timestamp fromISO8601: '1998-07-17T14:08:55' "	"Timestamp fromISO8601: '19980717T14:08:55' "	| year month day date time stream |	stream := aString readStream.	(aString includes: $-) 		ifTrue: 			[year := (stream upTo: $-) asInteger.			month := (stream upTo: $-) asInteger.			day := (stream next: 2) asInteger]		ifFalse: 			[year := (stream next: 4) asInteger.			month := (stream next: 2) asInteger.			day := (stream next: 2) asInteger].	stream skip: 1.	time := Time readFrom: stream upToEnd readStream.	date := Date 				newDay: day				monthNumber: month				year: year.	^self fromDate: date andTime: time</body><body package="NetworkAppUtilities" selector="fromUnixSeconds:">fromUnixSeconds: seconds	"like fromSeconds: , but we add the time diff"	| vwBase |	vwBase := (Timestamp readFrom: 'January 1, 1970' readStream) asSeconds.	^self fromSeconds: (seconds + vwBase)</body></methods><methods><class-id>Core.Timestamp</class-id> <category>conversion</category><body package="NetworkAppUtilities" selector="asGoogleISO8601">asGoogleISO8601	"Google needs a variation"	| aStream |	aStream := WriteStream on: String new.	TimestampPrintPolicy 		print: self		on: aStream		using: 'yyyy-mm-ddThh:mm:ss'.	^aStream contents</body><body package="NetworkAppUtilities" selector="asISO8601">asISO8601	| aStream |	aStream := WriteStream on: String new.	TimestampPrintPolicy 		print: self		on: aStream		using: 'yyyymmddThh:mm:ss'.	^aStream contents</body><body package="NetworkAppUtilities" selector="asUnixSeconds">asUnixSeconds	"answer in Unix time"	| vwBase seconds |	vwBase := (Timestamp readFrom: 'January 1, 1970' readStream) asSeconds.	seconds := self asSeconds.	^seconds - vwBase</body></methods><methods><class-id>Core.Collection</class-id> <category>converting</category><body package="NetworkAppUtilities" selector="asCommaDelimitedString">asCommaDelimitedString	| stream |	stream := WriteStream on: (String new: 100).	self do: [:each |		each isString			ifTrue: [stream nextPutAll: each]			ifFalse: [stream nextPutAll: each printString].		stream nextPut: $,].	stream skip: -1.	stream nextPut: Character space.	^stream contents</body></methods><methods><class-id>Core.String</class-id> <category>converting</category><body package="NetworkAppUtilities" selector="arrayFromCommaDelimitedString">arrayFromCommaDelimitedString	"convert cds into array"	| stream collection |	stream := self readStream.	collection := OrderedCollection new.	[stream atEnd]		whileFalse: [| chunk |					chunk := stream upTo: $,.					chunk notEmpty						ifTrue: [collection add: chunk]].	^collection.</body></methods><methods><class-id>Core.Object</class-id> <category>converting</category><body package="NetworkAppUtilities" selector="asURLArgList">asURLArgList	"convenience method for creating url arguments from inst vars"	| stream vars started |	stream := WriteStream on: String new.	vars := self class instVarNames.	started := false.	vars do: [:each |		| msg val |		msg := each asSymbol.		val := self perform: msg.		(val notNil and: [val isString not])			ifTrue: [val := val printString].		val ifNotNil: [started						ifTrue: [stream nextPutAll: '&amp;', each, '=', (OS.URI encode: val)]						ifFalse: [started := true.								stream nextPutAll: '?', each, '=', (OS.URI encode: val)]]].	^stream contents</body></methods><methods><class-id>Core.Integer</class-id> <category>converting</category><body package="NetworkAppUtilities" selector="asBoolean">asBoolean	^self isZero not</body></methods><methods><class-id>Core.String</class-id> <category>converting</category><body package="NetworkAppUtilities">asBoolean	^self first asLowercase = $t</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Collection</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Abstract</category><attributes><package>Collections-Abstract</package></attributes></class><class><name>String</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>Timestamp</name><environment>Core</environment><super>Core.Magnitude</super><private>false</private><indexed-type>none</indexed-type><inst-vars>year month day hour minute second millisecond </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-General</category><attributes><package>Magnitude-General</package></attributes></class><class><name>Integer</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class></st-source>