<?xml version="1.0"?><st-source><!-- Name: ExternalInterfaceBashingNotice: The MIT LicenseCopyright (c) 2013 intelligent views GmbHPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.Comment: Adds an utitlity method to ExternalInterface, #bashInterface, that can be called in the post-load action of a package. It will try to fix some known bugs related to external interface definitions. Handle with care!DevelopmentPrerequisites: #(#(#any 'DLLCC' ''))PackageName: ExternalInterfaceBashingParcel: #('ExternalInterfaceBashing')ParcelDirectory: ExternalInterfaceBashingPrerequisiteParcels: #(#('DLLCC' ''))Version: (7.8).2Date: 11:17:16 AM July 18, 2014 --><time-stamp>From VisualWorksÂ®, 7.10.1 of 6. Februar 2014 on 18. Juli 2014 at 11:17:16</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>External.ExternalInterface class</class-id> <category>bashing</category><body package="ExternalInterfaceBashing">bashedExternalMethodSelectors	" Assume that all methods in protocol 'procedures' are C functions "	^ self organization listAtCategoryNamed: #procedures</body><body package="ExternalInterfaceBashing">bashInterface	" Handle with care! 	Make sure that #bashedExternalMethodSelectors only returns selectors of C functions"	ObjectMemory globalCompactingGC.	" VW bug workaround: loading from parcel results in a library named 'linkedIn', not #linkedIn "	self bashLibraries.	" recompile methods, to fix load order problems "	self safeRecompileMethods.	" check that the external methods are really external methods "	self checkBashedExternalMethodSelectors.</body><body package="ExternalInterfaceBashing">bashLibraries	" VW bug workaround: loading from parcel results in a library named 'linkedIn', not #linkedIn "	self libraryFiles ifNotNil: [ : libs | libs do: 		[: lib |			lib name = 'linkedIn' 				ifTrue: [ lib name: #linkedIn ]		]].</body><body package="ExternalInterfaceBashing">checkBashedExternalMethodSelectors	" check that the external methods are really external methods "	| array extMethod |	self bashedExternalMethodSelectors do: 		[: sel | (( array := self findSelector: sel ) isNil or: [(( extMethod := array at: 2 ) isKindOf: ExternalMethod ) not ]) 				ifTrue: [ self error: 'Bashing ' , self fullName , ' failed: external method for ', sel printString, ' expected, found ' , extMethod printString ]		].</body><body package="ExternalInterfaceBashing">safeRecompileMethods	" can only recompile with sources "	((self class findSelector: #safeRecompileMethods) at: 2) hasSource		ifFalse: [ ^ self ].	self selectors do: [: aSelector | self recompile: aSelector ].	self class selectors do: [: aSelector | self class recompile: aSelector ].	self externals ownDo: 		[: ext |			" fix: ext may be 0 (tombstone marker) "			( ext == nil or: [ ext == 0 ]) 				ifFalse: [ self externals weakenAt: ext name ]		].</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it></st-source>