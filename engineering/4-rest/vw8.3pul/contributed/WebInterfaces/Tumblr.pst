<?xml version="1.0"?><st-source><!-- Name: TumblrBundleName: TumblrComment: The domain models and interface to the Tumblr API.  Here are example usages:| emailAddress password username |emailAddress := 'username@someAddress.com'.password := 'yourPasswordHere'.username := 'yourTumblrUserNameHere'."regular post"post := RegularPost new.post email: emailAddress.post password: password.post tags: (Array with: 'smalltalk' with: 'tumblr').post title: 'First Tumblr Post'.post body: 'This should be posted to Tumblr'.post post."edit a post - note that the post object should have the postId filled in now"post email: emailAddress.post password: password.post title: 'First Tumblr Post'.post body: 'We just edited the post'.post post"photo post"post := PhotoPost new.post email: emailAddress.post password: password.post tags: (Array with: 'smalltalk' with: 'tumblr' with: 'photo').post caption: 'This is me presenting in Cologne, Germany'.post clickThroughUrl: 'http://www.cincomsmalltalk.com/blog/blogView'.post data: 'PathAndFilenameForPhoto.jpg'.post post."quote post"post := QuotePost new.post email: emailAddress.post password: password.post tags: (Array with: 'smalltalk' with: 'tumblr' with: 'quote').post quote: 'A fanatic is one who can''t change his mind and won''t change the subject.'.post source: 'http://www.quotationspage.com/quotes/Sir_Winston_Churchill/'.post post."link post"post := LinkPost new.post email: emailAddress.post password: password.post tags: (Array with: 'smalltalk' with: 'tumblr' with: 'link').post url: 'http://www.cincomsmalltalk.com/scripts/CommunityDownloadPage.ssp'.post name: 'Cincom Smalltalk NC Download'.post description: 'Here''s the free Cincom Smalltalk Non-Commercial download - grab ObjectStudio 8.1 and/or VisualWorks 7.6'.post post."authenticate - a misnomer, as it answers info on your permissions, does not authenticate you"post := RegularPost new.post email: emailAddress.post password: password.post authenticate."get the JSON read results"post := RegularPost new.post read: usernameParcel: nilParcelName: TumblrDate: 1:21:09 PM November 15, 2009 --><time-stamp>From VisualWorksÂ®, 7.7 of November 5, 2009 on November 15, 2009 at 1:21:09 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Tumblr</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			private Net.*			private JSON.*			</imports><category></category><attributes><package>TumblrDomain</package></attributes></name-space><comment><name-space-id>Tumblr</name-space-id><body></body></comment><class><name>UploadObject</name><environment>Tumblr</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>baseFilename stream </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrInterface</package></attributes></class><comment><class-id>Tumblr.UploadObject</class-id><body>UploadObject is used to upload data to Tumblr.Instance Variables	baseFilename	&lt;String&gt; filename to post from	stream	&lt;ReadStream&gt;	a stream over the data</body></comment><class><name>Post</name><environment>Tumblr</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>api email password type generator date private tags format group postId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrInterface</package></attributes></class><comment><class-id>Tumblr.Post</class-id><body>Post is an abstract class for all Tumblr postsInstance Variables:	date	&lt;Timestamp&gt;	ISO8601	email	&lt;String&gt;	description of email	format	&lt;String&gt;	either html or markdown	generator	&lt;String&gt;	source of the post (tool used)	group	&lt;String&gt;	used for posting to groups	password	&lt;String&gt;	description of password	private	&lt;Boolean&gt;	1 or 0 to Tumblr	tags	&lt;Collection&gt;	tags for the post.  Becomes comma delimited string	type	&lt;String&gt;	Type of post (see subclasses)</body></comment><class><name>MediaPost</name><environment>Tumblr</environment><super>Tumblr.Post</super><private>false</private><indexed-type>none</indexed-type><inst-vars>data </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrInterface</package></attributes></class><comment><class-id>Tumblr.MediaPost</class-id><body>MediaPost is an abstract class for the post types that do media uploads (photo, video, audio)Instance Variables	data	&lt;UploadObject&gt;	the thing to be uploaded</body></comment><class><name>AudioPost</name><environment>Tumblr</environment><super>Tumblr.MediaPost</super><private>false</private><indexed-type>none</indexed-type><inst-vars>caption </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrInterface</package></attributes></class><comment><class-id>Tumblr.AudioPost</class-id><body></body></comment><class><name>TumblrModel</name><environment>Tumblr</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrDomain</package></attributes></class><comment><class-id>Tumblr.TumblrModel</class-id><body>TumblrModel is an abstract superclass for the domain objects returned by the JsonReader</body></comment><class><name>TumblrStatus</name><environment>Tumblr</environment><super>Tumblr.TumblrModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>posts postsStart postsTotal postsType tumblelog </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrDomain</package></attributes></class><comment><class-id>Tumblr.TumblrStatus</class-id><body>TumblrStatus is the result object for the /api/read interfaceInstance Variables	posts	&lt;Collection | Post&gt;	description of posts	postsStart	&lt;Integer&gt;	description of postsStart	postsTotal	&lt;Integer&gt;	description of postsTotal	postsType	&lt;Boolean&gt;	description of postsType	tumblelog	&lt;TumblrInfo&gt;	description of tumblelog</body></comment><class><name>Constructor</name><environment>Tumblr</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>xmlDoc allUsers allTumblogs </inst-vars><class-inst-vars></class-inst-vars><imports>			XML.*			</imports><category></category><attributes><package>TumblrInterface</package></attributes></class><comment><class-id>Tumblr.Constructor</class-id><body>Constructor parses the xml from an authenticate requestInstance Variables	allTumblogs	&lt;Collection&gt;	description of allTumblogs	allUsers	&lt;Collection&gt;	description of allUsers	xmlDoc &lt;XML.Document&gt;</body></comment><class><name>QuotePost</name><environment>Tumblr</environment><super>Tumblr.Post</super><private>false</private><indexed-type>none</indexed-type><inst-vars>quote source </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrInterface</package></attributes></class><comment><class-id>Tumblr.QuotePost</class-id><body></body></comment><class><name>TumblrPost</name><environment>Tumblr</environment><super>Tumblr.TumblrModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>bookmarklet date dateGmt feedItem format fromFeedId id mobile regularBody regularTitle tags type unixTimestamp url urlWithSlug linkDescription linkText </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrDomain</package></attributes></class><comment><class-id>Tumblr.TumblrPost</class-id><body>TumblrPost holds domain information from the read apiInstance Variables	bookmarklet	&lt;String&gt;	description of bookmarklet	date	&lt;String&gt;	description of date	dateGmt	&lt;String&gt;	description of dateGmt	feedItem	&lt;String&gt;	description of feedItem	format	&lt;String&gt;	description of format	fromFeedId	&lt;String&gt;	description of fromFeedId	id	&lt;Integer&gt;	description of id	linkDescription	&lt;String&gt;	description of linkDescription	linkText	&lt;String&gt;	description of linkText	linkUrl	&lt;String&gt;	description of linkUrl	mobile	&lt;String&gt;	description of mobile	type	&lt;String&gt;	description of type	unixTimestamp	&lt;Timestamp&gt;	description of unixTimestamp	url	&lt;String&gt;	description of url	urlWithSlug	&lt;String&gt;	description of urlWithSlug</body></comment><class><name>TumblrInfo</name><environment>Tumblr</environment><super>Tumblr.TumblrModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name timezone title feeds description cname </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrDomain</package></attributes></class><comment><class-id>Tumblr.TumblrInfo</class-id><body>TumblrInfo holds information from a read requestInstance Variables	cname	&lt;String&gt;	description of cname	description	&lt;String&gt;	description of description	feeds	&lt;Collection | Feed&gt;	description of feeds	name	&lt;String&gt;	description of name	timezone	&lt;String&gt;	description of timezone	title	&lt;String&gt;	description of title</body></comment><class><name>LinkPost</name><environment>Tumblr</environment><super>Tumblr.Post</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name url description </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrInterface</package></attributes></class><comment><class-id>Tumblr.LinkPost</class-id><body></body></comment><class><name>RegularPost</name><environment>Tumblr</environment><super>Tumblr.Post</super><private>false</private><indexed-type>none</indexed-type><inst-vars>title body </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrInterface</package></attributes></class><comment><class-id>Tumblr.RegularPost</class-id><body>RegularPost is a simple post to TumblrInstance Variables:	body	&lt;String&gt;	text of post	title	&lt;String&gt;	Title of post</body></comment><class><name>Model</name><environment>Tumblr</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrDomain</package></attributes></class><comment><class-id>Tumblr.Model</class-id><body>Model knows how to deal with the basics of Tumblr xml</body></comment><class><name>TumbleLog</name><environment>Tumblr</environment><super>Tumblr.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>title name url type avatarUrl isPrimary privateId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrDomain</package></attributes></class><comment><class-id>Tumblr.TumbleLog</class-id><body>TumbleLog holds info about a user's TumblogInstance Variables	avatarUrl	&lt;String&gt;	description of avatarUrl	isPrimary	&lt;Boolean&gt;	description of isPrimary	name	&lt;String&gt;	description of name	title	&lt;String&gt;	description of title	type	&lt;String&gt;	description of type	url	&lt;String&gt;	description of url	privateId &lt;String&gt;</body></comment><class><name>PhotoPost</name><environment>Tumblr</environment><super>Tumblr.MediaPost</super><private>false</private><indexed-type>none</indexed-type><inst-vars>source caption clickThroughUrl </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrInterface</package></attributes></class><comment><class-id>Tumblr.PhotoPost</class-id><body></body></comment><class><name>TumblrFeed</name><environment>Tumblr</environment><super>Tumblr.TumblrModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>title errorText url attribution error id nextUpdateInSeconds importType </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrDomain</package></attributes></class><comment><class-id>Tumblr.TumblrFeed</class-id><body>TumblrFeed holds info on imported feedsInstance Variables	attribution	&lt;String&gt;	description of attribution	error	&lt;String&gt;	description of error	errorText	&lt;String&gt;	description of errorText	id	&lt;Imteger&gt;	description of id	importType	&lt;String&gt;	description of importType	nextUpdateInSeconds	&lt;Imteger&gt;	description of nextUpdateInSeconds	title	&lt;String&gt;	description of title	url	&lt;String&gt;	description of url</body></comment><class><name>ConversationPost</name><environment>Tumblr</environment><super>Tumblr.Post</super><private>false</private><indexed-type>none</indexed-type><inst-vars>title conversation </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrInterface</package></attributes></class><comment><class-id>Tumblr.ConversationPost</class-id><body></body></comment><class><name>VideoPost</name><environment>Tumblr</environment><super>Tumblr.MediaPost</super><private>false</private><indexed-type>none</indexed-type><inst-vars>embed title caption </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrInterface</package></attributes></class><comment><class-id>Tumblr.VideoPost</class-id><body></body></comment><class><name>User</name><environment>Tumblr</environment><super>Tumblr.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>defaultPostFormat canUploadAudio canUploadAiff canUploadVideo vimeoLoginUrl maxVideoBytesUploaded </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrDomain</package></attributes></class><comment><class-id>Tumblr.User</class-id><body>a Tumblog userInstance Variables	canUploadAiff	&lt;Boolean&gt;	description of canUploadAiff	canUploadAudio	&lt;Boolean&gt;	description of canUploadAudio	canUploadVideo	&lt;Boolean&gt;	description of canUploadVideo	defaultPostFormat	&lt;String&gt;	description of defaultPostFormat	vimeoLoginUrl	&lt;String&gt;	description of vimeoLoginUrl	maxVideoBytesUploaded &lt;String&gt;</body></comment><class><name>TumblrInterface</name><environment>Tumblr</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>response parameters postData </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>TumblrInterface</package></attributes></class><comment><class-id>Tumblr.TumblrInterface</class-id><body>TumblrInterface is a simple interface to Tumblr.  Handles postingInstance Variables:	parameters	&lt;Dictionary&gt;	post parameters	response	&lt;HttpResponse&gt;	response to the post</body></comment><methods><class-id>Tumblr.UploadObject</class-id> <category>api</category><body package="TumblrInterface" selector="closeStream">closeStream	stream ifNotNil: [stream close]</body><body package="TumblrInterface" selector="getStream">getStream	stream := baseFilename asFilename readStream.	^stream</body></methods><methods><class-id>Tumblr.UploadObject</class-id> <category>accessing</category><body package="TumblrInterface" selector="baseFilename">baseFilename	^baseFilename</body><body package="TumblrInterface" selector="baseFilename:">baseFilename: anObject	baseFilename := anObject</body></methods><methods><class-id>Tumblr.UploadObject</class-id> <category>initialize-release</category><body package="TumblrInterface" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.</body></methods><methods><class-id>Tumblr.UploadObject class</class-id> <category>instance creation</category><body package="TumblrInterface" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Tumblr.Post</class-id> <category>accessing</category><body package="TumblrInterface" selector="api">api	^api</body><body package="TumblrInterface" selector="api:">api: anObject	api := anObject</body><body package="TumblrInterface" selector="authenticateUrl">authenticateUrl	^'http://www.tumblr.com/api/authenticate'</body><body package="TumblrInterface" selector="date">date	^date</body><body package="TumblrInterface" selector="date:">date: anObject	date := anObject</body><body package="TumblrInterface" selector="deleteUrl">deleteUrl	^'http://www.tumblr.com/api/delete'</body><body package="TumblrInterface" selector="email">email	^email</body><body package="TumblrInterface" selector="email:">email: anObject	email := anObject</body><body package="TumblrInterface" selector="format">format	^format</body><body package="TumblrInterface" selector="format:">format: anObject	format := anObject</body><body package="TumblrInterface" selector="generator">generator	^generator</body><body package="TumblrInterface" selector="generator:">generator: anObject	generator := anObject</body><body package="TumblrInterface" selector="group">group	^group</body><body package="TumblrInterface" selector="group:">group: anObject	group := anObject</body><body package="TumblrInterface" selector="password">password	^password</body><body package="TumblrInterface" selector="password:">password: anObject	password := anObject</body><body package="TumblrInterface" selector="postId">postId	^postId</body><body package="TumblrInterface" selector="postId:">postId: anObject	postId := anObject</body><body package="TumblrInterface" selector="private">private	^private</body><body package="TumblrInterface" selector="private:">private: anObject	private := anObject</body><body package="TumblrInterface" selector="readUrlFor:">readUrlFor: username	^'http://', username, '.tumblr.com/api/read/json'</body><body package="TumblrInterface" selector="tags">tags	^tags</body><body package="TumblrInterface" selector="tags:">tags: anObject	tags := anObject</body><body package="TumblrInterface" selector="type">type	^type</body><body package="TumblrInterface" selector="type:">type: anObject	type := anObject</body><body package="TumblrInterface" selector="writeUrl">writeUrl	^'http://www.tumblr.com/api/write'</body></methods><methods><class-id>Tumblr.Post</class-id> <category>private</category><body package="TumblrInterface" selector="addParameters">addParameters	"add parameters to the interface"	self postId 		ifNil: [api addParameter: 'type' -&gt; type.			api addParameter: 'private' -&gt; private printString.			api addParameter: 'format' -&gt; format]		ifNotNil: [api addParameter: 'post-id' -&gt; postId].	date ifNotNil: [api addParameter: 'date' -&gt; (date asISO8601)].	api addParameter: 'email' -&gt; email.	api addParameter: 'password' -&gt; password.	generator ifNotNil: [api addParameter: 'generator' -&gt; generator].	tags ifNotNil: [api addParameter: 'tags' -&gt; tags asCommaDelimitedString].</body><body package="TumblrInterface" selector="createPostObjectWith:">createPostObjectWith: thePostData	"create the upload object"	| upload |	upload := UploadObject new.	upload baseFilename: thePostData.	^upload</body><body package="TumblrInterface" selector="processResult:">processResult: jsonDict	"get domain objects from this"	^TumblrStatus from: jsonDict</body></methods><methods><class-id>Tumblr.Post</class-id> <category>initialize-release</category><body package="TumblrInterface" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	type := 'regular'.	generator := 'Smalltalk Tumblr API/0.1'.	date := Timestamp now.	private := 0.	format := 'html'.	api := TumblrInterface new.</body></methods><methods><class-id>Tumblr.Post</class-id> <category>api</category><body package="TumblrInterface" selector="authenticate">authenticate	"call the auth interface"	| xml |	api addParameter: 'email' -&gt; email.	api addParameter: 'password' -&gt; password.	xml := api doPostTo: self authenticateUrl.	^Constructor for: xml</body><body package="TumblrInterface" selector="delete">delete	"delete this one"	api addParameter: 'post-id' -&gt; postId.	^api doPostTo: self deleteUrl.</body><body package="TumblrInterface" selector="post">post	"actually execute the POST"	self addParameters.	postId := api doPostTo: self writeUrl.</body><body package="TumblrInterface" selector="read:">read: username	| url results |	url := self readUrlFor: username.	results := api doPostTo: url.	^results		ifNil: [nil]		ifNotNil: [| toRead |				toRead := results readStream.				toRead upTo: ${.				toRead skip: -1.				self processResult: (JsonReader readFrom: toRead upToEnd readStream)]</body></methods><methods><class-id>Tumblr.Post class</class-id> <category>instance creation</category><body package="TumblrInterface" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Tumblr.MediaPost</class-id> <category>initialize-release</category><body package="TumblrInterface" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.</body></methods><methods><class-id>Tumblr.MediaPost</class-id> <category>accessing</category><body package="TumblrInterface" selector="data">data	^data</body><body package="TumblrInterface" selector="data:">data: anObject	data := anObject</body></methods><methods><class-id>Tumblr.MediaPost</class-id> <category>private</category><body package="TumblrInterface" selector="createPostObject">createPostObject	"create the upload object"	| upload |	upload := UploadObject new.	upload baseFilename: data.	^upload</body></methods><methods><class-id>Tumblr.MediaPost</class-id> <category>api</category><body package="TumblrInterface" selector="post">post	self addParameters.	postId := [api doPostTo: self writeUrl]		on: Error, HttpException		do: [:ex | api postData closeStream. nil].	api postData closeStream.	api postData: nil.</body></methods><methods><class-id>Tumblr.AudioPost</class-id> <category>accessing</category><body package="TumblrInterface" selector="caption">caption	^caption</body><body package="TumblrInterface" selector="caption:">caption: anObject	caption := anObject</body></methods><methods><class-id>Tumblr.AudioPost</class-id> <category>initialize-release</category><body package="TumblrInterface" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	type := 'audio'.</body></methods><methods><class-id>Tumblr.AudioPost</class-id> <category>private</category><body package="TumblrInterface" selector="addParameters">addParameters	"create an upload object and attach it, unless we have an url"	super addParameters.	caption ifNotNil: [api addParameter: 'caption' -&gt; caption].	data ifNotNil: [api postData: self createPostObject].</body></methods><methods><class-id>Tumblr.TumblrModel</class-id> <category>initialize-release</category><body package="TumblrDomain" selector="from:">from: dictionary	dictionary keysAndValuesDo: [:key :value |		|  msg |		msg := (key, ':') asSymbol.		(self respondsTo: msg)			ifTrue: [self perform: msg with: value]].</body><body package="TumblrDomain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Tumblr.TumblrModel class</class-id> <category>instance creation</category><body package="TumblrDomain" selector="from:">from: dictionary	^self new from: dictionary</body><body package="TumblrDomain" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Tumblr.TumblrStatus</class-id> <category>printing</category><body package="TumblrDomain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [ with ', postsTotal printString, ']'</body></methods><methods><class-id>Tumblr.TumblrStatus</class-id> <category>accessing</category><body package="TumblrDomain" selector="posts">posts	^posts</body><body package="TumblrDomain" selector="posts:">posts: anObject	posts := anObject</body><body package="TumblrDomain" selector="postsStart">postsStart	^postsStart</body><body package="TumblrDomain" selector="postsStart:">postsStart: anObject	postsStart := anObject</body><body package="TumblrDomain" selector="postsTotal">postsTotal	^postsTotal</body><body package="TumblrDomain" selector="postsTotal:">postsTotal: anObject	postsTotal := anObject</body><body package="TumblrDomain" selector="postsType">postsType	^postsType</body><body package="TumblrDomain" selector="postsType:">postsType: anObject	postsType := anObject</body><body package="TumblrDomain" selector="tumblelog">tumblelog	^tumblelog</body><body package="TumblrDomain" selector="tumblelog:">tumblelog: anObject	tumblelog := anObject</body></methods><methods><class-id>Tumblr.TumblrStatus</class-id> <category>initialize-release</category><body package="TumblrDomain" selector="from:">from: dictionary	| collection |	collection := dictionary at: 'posts'.	posts := collection collect: [:each | TumblrPost from: each].	postsStart := dictionary at: 'posts-start' ifAbsent: [nil].	postsTotal := dictionary at: 'posts-total' ifAbsent: [nil].	postsType := dictionary at: 'posts-type' ifAbsent: [nil].	tumblelog := TumblrInfo from: (dictionary at: 'tumblelog')</body><body package="TumblrDomain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	posts := #().	postsStart := 0.	postsTotal := 0.	postsType := false.	tumblelog := nil.</body></methods><methods><class-id>Tumblr.TumblrStatus class</class-id> <category>instance creation</category><body package="TumblrDomain" selector="from:">from: dictionary	^self new from: dictionary</body><body package="TumblrDomain" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Tumblr.Constructor</class-id> <category>initialize-release</category><body package="TumblrInterface" selector="for:">for: xml	| parser |	parser := XMLParser new.	parser validate: false.	xmlDoc := parser parse: xml readStream.	^self getUsersAndTumblogs</body><body package="TumblrInterface" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	allUsers := OrderedCollection new.	allTumblogs := OrderedCollection new</body></methods><methods><class-id>Tumblr.Constructor</class-id> <category>accessing</category><body package="TumblrInterface" selector="allTumblogs">allTumblogs	^allTumblogs</body><body package="TumblrInterface" selector="allTumblogs:">allTumblogs: anObject	allTumblogs := anObject</body><body package="TumblrInterface" selector="allUsers">allUsers	^allUsers</body><body package="TumblrInterface" selector="allUsers:">allUsers: anObject	allUsers := anObject</body></methods><methods><class-id>Tumblr.Constructor</class-id> <category>processing</category><body package="TumblrInterface" selector="getUsersAndTumblogs">getUsersAndTumblogs	"actually walk through the XML"	| elements userNodes tumbleNodes |	xmlDoc ifNil: [^self].	elements := xmlDoc root elements select: [:each | each isElement].	userNodes := elements select: [:each | each tag type = 'user'].	tumbleNodes := elements select: [:each | each tag type = 'tumblelog'].	allUsers := userNodes collect: [:each |		User from: each].	allTumblogs := tumbleNodes collect: [:each |		TumbleLog from: each].	^self</body></methods><methods><class-id>Tumblr.Constructor class</class-id> <category>instance creation</category><body package="TumblrInterface" selector="for:">for: xml	^self new for: xml</body><body package="TumblrInterface" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Tumblr.QuotePost</class-id> <category>accessing</category><body package="TumblrInterface" selector="quote">quote	^quote</body><body package="TumblrInterface" selector="quote:">quote: anObject	quote := anObject</body><body package="TumblrInterface" selector="source">source	^source</body><body package="TumblrInterface" selector="source:">source: anObject	source := anObject</body></methods><methods><class-id>Tumblr.QuotePost</class-id> <category>private</category><body package="TumblrInterface" selector="addParameters">addParameters	super addParameters.	api addParameter: 'quote' -&gt; quote.	source ifNotNil: [api addParameter: 'source' -&gt; source]</body></methods><methods><class-id>Tumblr.QuotePost</class-id> <category>initialize-release</category><body package="TumblrInterface" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	type := 'quote'.</body></methods><methods><class-id>Tumblr.TumblrPost</class-id> <category>accessing</category><body package="TumblrDomain" selector="bookmarklet">bookmarklet	^bookmarklet</body><body package="TumblrDomain" selector="bookmarklet:">bookmarklet: anObject	bookmarklet := anObject</body><body package="TumblrDomain" selector="date">date	^date</body><body package="TumblrDomain" selector="date:">date: anObject	date := anObject</body><body package="TumblrDomain" selector="dateGmt">dateGmt	^dateGmt</body><body package="TumblrDomain" selector="dateGmt:">dateGmt: anObject	dateGmt := anObject</body><body package="TumblrDomain" selector="feedItem">feedItem	^feedItem</body><body package="TumblrDomain" selector="feedItem:">feedItem: anObject	feedItem := anObject</body><body package="TumblrDomain" selector="format">format	^format</body><body package="TumblrDomain" selector="format:">format: anObject	format := anObject</body><body package="TumblrDomain" selector="fromFeedId">fromFeedId	^fromFeedId</body><body package="TumblrDomain" selector="fromFeedId:">fromFeedId: anObject	fromFeedId := anObject</body><body package="TumblrDomain" selector="id">id	^id</body><body package="TumblrDomain" selector="id:">id: anObject	id := anObject</body><body package="TumblrDomain" selector="linkDescription">linkDescription	^linkDescription</body><body package="TumblrDomain" selector="linkDescription:">linkDescription: anObject	linkDescription := anObject</body><body package="TumblrDomain" selector="linkText">linkText	^linkText</body><body package="TumblrDomain" selector="linkText:">linkText: anObject	linkText := anObject</body><body package="TumblrDomain" selector="mobile">mobile	^mobile</body><body package="TumblrDomain" selector="mobile:">mobile: anObject	mobile := anObject</body><body package="TumblrDomain" selector="regularBody">regularBody	^regularBody</body><body package="TumblrDomain" selector="regularBody:">regularBody: anObject	regularBody := anObject</body><body package="TumblrDomain" selector="regularTitle">regularTitle	^regularTitle</body><body package="TumblrDomain" selector="regularTitle:">regularTitle: anObject	regularTitle := anObject</body><body package="TumblrDomain" selector="tags">tags	^tags</body><body package="TumblrDomain" selector="tags:">tags: anObject	tags := anObject</body><body package="TumblrDomain" selector="type">type	^type</body><body package="TumblrDomain" selector="type:">type: anObject	type := anObject</body><body package="TumblrDomain" selector="unixTimestamp">unixTimestamp	^unixTimestamp</body><body package="TumblrDomain" selector="unixTimestamp:">unixTimestamp: anObject	unixTimestamp := anObject</body><body package="TumblrDomain" selector="url">url	^url</body><body package="TumblrDomain" selector="url:">url: anObject	url := anObject</body><body package="TumblrDomain" selector="urlWithSlug">urlWithSlug	^urlWithSlug</body><body package="TumblrDomain" selector="urlWithSlug:">urlWithSlug: anObject	urlWithSlug := anObject</body></methods><methods><class-id>Tumblr.TumblrPost</class-id> <category>initialize-release</category><body package="TumblrDomain" selector="from:">from: dictionary	bookmarklet := dictionary at: 'bookmarklet' ifAbsent: [nil].	date := dictionary at: 'date' ifAbsent: [nil].	dateGmt := dictionary at: 'date-gmt' ifAbsent: [nil].	feedItem := dictionary at: 'feed-item' ifAbsent: [nil].	format := dictionary at: 'format' ifAbsent: [nil].	fromFeedId := dictionary at: 'from-feed-id' ifAbsent: [nil].	id := dictionary at: 'id' ifAbsent: [nil].	mobile := dictionary at: 'mobile' ifAbsent: [nil].	regularBody := dictionary at: 'regular-body' ifAbsent: [nil].	regularTitle := dictionary at: 'regular-title' ifAbsent: [nil].	linkDescription := dictionary at: 'link-description' ifAbsent: [nil].	linkText := dictionary at: 'link-text' ifAbsent: [nil].	tags := dictionary at: 'tags' ifAbsent: [nil].	type := dictionary at: 'type' ifAbsent: [nil].	unixTimestamp := dictionary at: 'unix-timestamp' ifAbsent: [nil].	unixTimestamp ifNotNil: [unixTimestamp := Timestamp fromUnixSeconds: unixTimestamp].	url := dictionary at: 'url' ifAbsent: [nil].	urlWithSlug := dictionary at: 'url-with-slug' ifAbsent: [nil]</body><body package="TumblrDomain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.</body></methods><methods><class-id>Tumblr.TumblrPost</class-id> <category>printing</category><body package="TumblrDomain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', url, ']'</body></methods><methods><class-id>Tumblr.TumblrPost class</class-id> <category>instance creation</category><body package="TumblrDomain" selector="from:">from: dictionary	^self new from: dictionary</body><body package="TumblrDomain" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Tumblr.TumblrInfo</class-id> <category>accessing</category><body package="TumblrDomain" selector="cname">cname	^cname</body><body package="TumblrDomain" selector="cname:">cname: anObject	cname := anObject</body><body package="TumblrDomain" selector="description">description	^description</body><body package="TumblrDomain" selector="description:">description: anObject	description := anObject</body><body package="TumblrDomain" selector="feeds">feeds	^feeds</body><body package="TumblrDomain" selector="feeds:">feeds: anObject	feeds := anObject</body><body package="TumblrDomain" selector="name">name	^name</body><body package="TumblrDomain" selector="name:">name: anObject	name := anObject</body><body package="TumblrDomain" selector="timezone">timezone	^timezone</body><body package="TumblrDomain" selector="timezone:">timezone: anObject	timezone := anObject</body><body package="TumblrDomain" selector="title">title	^title</body><body package="TumblrDomain" selector="title:">title: anObject	title := anObject</body></methods><methods><class-id>Tumblr.TumblrInfo</class-id> <category>printing</category><body package="TumblrDomain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', name, ']'</body></methods><methods><class-id>Tumblr.TumblrInfo</class-id> <category>initialize-release</category><body package="TumblrDomain" selector="from:">from: dictionary	super from: dictionary.	feeds := feeds collect: [:each | TumblrFeed from: each]</body><body package="TumblrDomain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	name := nil.	timezone := nil.	title := nil.	feeds := nil.	description := nil.	cname := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Tumblr.TumblrInfo class</class-id> <category>instance creation</category><body package="TumblrDomain" selector="from:">from: dictionary	^self new from: dictionary</body><body package="TumblrDomain" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Tumblr.LinkPost</class-id> <category>accessing</category><body package="TumblrInterface" selector="description">description	^description</body><body package="TumblrInterface" selector="description:">description: anObject	description := anObject</body><body package="TumblrInterface" selector="name">name	^name</body><body package="TumblrInterface" selector="name:">name: anObject	name := anObject</body><body package="TumblrInterface" selector="url">url	^url</body><body package="TumblrInterface" selector="url:">url: anObject	url := anObject</body></methods><methods><class-id>Tumblr.LinkPost</class-id> <category>initialize-release</category><body package="TumblrInterface" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	type := 'link'</body></methods><methods><class-id>Tumblr.LinkPost</class-id> <category>private</category><body package="TumblrInterface" selector="addParameters">addParameters	super addParameters.	api addParameter: 'url' -&gt; url.	name ifNotNil: [api addParameter: 'name' -&gt; name].	description ifNotNil: [api addParameter: 'description' -&gt; description]</body></methods><methods><class-id>Tumblr.RegularPost</class-id> <category>accessing</category><body package="TumblrInterface" selector="body">body	^body</body><body package="TumblrInterface" selector="body:">body: anObject	body := anObject</body><body package="TumblrInterface" selector="title">title	^title</body><body package="TumblrInterface" selector="title:">title: anObject	title := anObject</body></methods><methods><class-id>Tumblr.RegularPost</class-id> <category>initialize-release</category><body package="TumblrInterface" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	type := 'regular'</body></methods><methods><class-id>Tumblr.RegularPost</class-id> <category>private</category><body package="TumblrInterface" selector="addParameters">addParameters	super addParameters.	api addParameter: 'title' -&gt; self title.	api addParameter: 'body' -&gt; self body.</body></methods><methods><class-id>Tumblr.Model</class-id> <category>xml</category><body package="TumblrDomain" selector="mappings">mappings	^#()</body><body package="TumblrDomain" selector="postProcess:">postProcess: xml	"do any object specific handling"</body></methods><methods><class-id>Tumblr.Model</class-id> <category>initialize-release</category><body package="TumblrDomain" selector="from:">from: xml	"create domain object"	self mappings do: [:each | | match |		match := xml attributes detect: [:eachAttr | eachAttr tag type= each key] ifNone: [nil].		match ifNotNil: [self perform: each value with: match value]].	self postProcess: xml</body><body package="TumblrDomain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Tumblr.Model class</class-id> <category>instance creation</category><body package="TumblrDomain" selector="from:">from: xml	^self new from: xml</body><body package="TumblrDomain" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Tumblr.TumbleLog</class-id> <category>accessing</category><body package="TumblrDomain" selector="avatarUrl">avatarUrl	^avatarUrl</body><body package="TumblrDomain" selector="avatarUrl:">avatarUrl: anObject	avatarUrl := anObject</body><body package="TumblrDomain" selector="isPrimary">isPrimary	^isPrimary</body><body package="TumblrDomain" selector="isPrimary:">isPrimary: anObject	isPrimary := anObject</body><body package="TumblrDomain" selector="name">name	^name</body><body package="TumblrDomain" selector="name:">name: anObject	name := anObject</body><body package="TumblrDomain" selector="title">title	^title</body><body package="TumblrDomain" selector="title:">title: anObject	title := anObject</body><body package="TumblrDomain" selector="type">type	^type</body><body package="TumblrDomain" selector="type:">type: anObject	type := anObject</body><body package="TumblrDomain" selector="url">url	^url</body><body package="TumblrDomain" selector="url:">url: anObject	url := anObject</body></methods><methods><class-id>Tumblr.TumbleLog</class-id> <category>xml</category><body package="TumblrDomain" selector="mappings">mappings	| collection |	collection := OrderedCollection new.	collection 		add: 'title' -&gt; #title:;		add: 'name' -&gt; #name:;		add: 'url' -&gt; #url:;		add: 'type' -&gt; #type:;		add: 'avatar-url' -&gt; #avatarUrl:;		add: 'is-primary' -&gt; #isPrimary:;		add: 'private-id' -&gt; #privateId:.	^collection</body><body package="TumblrDomain" selector="postProcess:">postProcess: xml	"convert the boolean fields"	#(#isPrimary) do: [:each |		| val setter|		setter := (each asString, ':') asSymbol.		val := self perform: each.		val = 'yes'			ifTrue: [self perform: setter with: true]			ifFalse: [self perform: setter with: false]]</body></methods><methods><class-id>Tumblr.TumbleLog</class-id> <category>initialize-release</category><body package="TumblrDomain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	title := nil.	name := nil.	url := nil.	type := nil.	avatarUrl := nil.	isPrimary := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Tumblr.TumbleLog</class-id> <category>printing</category><body package="TumblrDomain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', self name, '-- ', self title, ']'</body></methods><methods><class-id>Tumblr.TumbleLog class</class-id> <category>instance creation</category><body package="TumblrDomain" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Tumblr.PhotoPost</class-id> <category>accessing</category><body package="TumblrInterface" selector="caption">caption	^caption</body><body package="TumblrInterface" selector="caption:">caption: anObject	caption := anObject</body><body package="TumblrInterface" selector="clickThroughUrl">clickThroughUrl	^clickThroughUrl</body><body package="TumblrInterface" selector="clickThroughUrl:">clickThroughUrl: anObject	clickThroughUrl := anObject</body><body package="TumblrInterface" selector="source">source	^source</body><body package="TumblrInterface" selector="source:">source: anObject	source := anObject</body></methods><methods><class-id>Tumblr.PhotoPost</class-id> <category>initialize-release</category><body package="TumblrInterface" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	type := 'photo'</body></methods><methods><class-id>Tumblr.PhotoPost</class-id> <category>private</category><body package="TumblrInterface" selector="addParameters">addParameters	"create an upload object and attach it, unless we have an url"	super addParameters.	caption ifNotNil: [api addParameter: 'caption' -&gt; caption].	clickThroughUrl ifNotNil: [api addParameter: 'click-through-url' -&gt; clickThroughUrl].	source ifNotNil: [api addParameter: 'source' -&gt; source].	data ifNotNil: [api postData: self createPostObject].</body></methods><methods><class-id>Tumblr.TumblrFeed</class-id> <category>accessing</category><body package="TumblrDomain" selector="attribution">attribution	^attribution</body><body package="TumblrDomain" selector="attribution:">attribution: anObject	attribution := anObject</body><body package="TumblrDomain" selector="error">error	^error</body><body package="TumblrDomain" selector="error1:">error1: anObject	error := anObject</body><body package="TumblrDomain" selector="errorText">errorText	^errorText</body><body package="TumblrDomain" selector="errorText:">errorText: anObject	errorText := anObject</body><body package="TumblrDomain" selector="id">id	^id</body><body package="TumblrDomain" selector="id:">id: anObject	id := anObject</body><body package="TumblrDomain" selector="importType">importType	^importType</body><body package="TumblrDomain" selector="importType:">importType: anObject	importType := anObject</body><body package="TumblrDomain" selector="nextUpdateInSeconds">nextUpdateInSeconds	^nextUpdateInSeconds</body><body package="TumblrDomain" selector="nextUpdateInSeconds:">nextUpdateInSeconds: anObject	nextUpdateInSeconds := anObject</body><body package="TumblrDomain" selector="title">title	^title</body><body package="TumblrDomain" selector="title:">title: anObject	title := anObject</body><body package="TumblrDomain" selector="url">url	^url</body><body package="TumblrDomain" selector="url:">url: anObject	url := anObject</body></methods><methods><class-id>Tumblr.TumblrFeed</class-id> <category>initialize-release</category><body package="TumblrDomain" selector="from:">from: dictionary	title := dictionary at: 'title'.	errorText := dictionary at: 'error_text'.	url := dictionary at: 'url'.	attribution := dictionary at: 'attribution'.	error := dictionary at: 'error'.	id := dictionary at: 'id'.	nextUpdateInSeconds := dictionary at: 'next-update-in-seconds'.	importType := dictionary at: 'import-type'</body><body package="TumblrDomain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	title := nil.	errorText := nil.	url := nil.	attribution := nil.	error := nil.	id := nil.	nextUpdateInSeconds := nil.	importType := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Tumblr.TumblrFeed class</class-id> <category>instance creation</category><body package="TumblrDomain" selector="from:">from: dictionary	^self new from: dictionary</body><body package="TumblrDomain" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Tumblr.ConversationPost</class-id> <category>accessing</category><body package="TumblrInterface" selector="conversation">conversation	^conversation</body><body package="TumblrInterface" selector="conversation:">conversation: anObject	conversation := anObject</body><body package="TumblrInterface" selector="title">title	^title</body><body package="TumblrInterface" selector="title:">title: anObject	title := anObject</body></methods><methods><class-id>Tumblr.ConversationPost</class-id> <category>private</category><body package="TumblrInterface" selector="addParameters">addParameters	super addParameters.	api addParameter: 'conversation' -&gt; conversation.	title ifNotNil: [api addParameter: 'title' -&gt; title].</body></methods><methods><class-id>Tumblr.ConversationPost</class-id> <category>initialize-release</category><body package="TumblrInterface" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	type := 'conversation'.</body></methods><methods><class-id>Tumblr.VideoPost</class-id> <category>accessing</category><body package="TumblrInterface" selector="caption">caption	^caption</body><body package="TumblrInterface" selector="caption:">caption: anObject	caption := anObject</body><body package="TumblrInterface" selector="embed">embed	^embed</body><body package="TumblrInterface" selector="embed:">embed: anObject	embed := anObject</body><body package="TumblrInterface" selector="title">title	^title</body><body package="TumblrInterface" selector="title:">title: anObject	title := anObject</body></methods><methods><class-id>Tumblr.VideoPost</class-id> <category>private</category><body package="TumblrInterface" selector="addParameters">addParameters	"create an upload object and attach it, unless we have an url"	super addParameters.	embed ifNotNil: [api addParameter: 'embed' -&gt; embed].	title ifNotNil: [api addParameter: 'title' -&gt; title].	caption ifNotNil: [api addParameter: 'caption' -&gt; caption].	data ifNotNil: [api postData: self createPostObject].</body></methods><methods><class-id>Tumblr.VideoPost</class-id> <category>initialize-release</category><body package="TumblrInterface" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	type := 'video'</body></methods><methods><class-id>Tumblr.User</class-id> <category>accessing</category><body package="TumblrDomain" selector="canUploadAiff">canUploadAiff	^canUploadAiff</body><body package="TumblrDomain" selector="canUploadAiff:">canUploadAiff: anObject	canUploadAiff := anObject</body><body package="TumblrDomain" selector="canUploadAudio">canUploadAudio	^canUploadAudio</body><body package="TumblrDomain" selector="canUploadAudio:">canUploadAudio: anObject	canUploadAudio := anObject</body><body package="TumblrDomain" selector="canUploadVideo">canUploadVideo	^canUploadVideo</body><body package="TumblrDomain" selector="canUploadVideo:">canUploadVideo: anObject	canUploadVideo := anObject</body><body package="TumblrDomain" selector="defaultPostFormat">defaultPostFormat	^defaultPostFormat</body><body package="TumblrDomain" selector="defaultPostFormat:">defaultPostFormat: anObject	defaultPostFormat := anObject</body><body package="TumblrDomain" selector="maxVideoBytesUploaded">maxVideoBytesUploaded	^maxVideoBytesUploaded</body><body package="TumblrDomain" selector="maxVideoBytesUploaded:">maxVideoBytesUploaded: anObject	maxVideoBytesUploaded := anObject</body><body package="TumblrDomain" selector="vimeoLoginUrl">vimeoLoginUrl	^vimeoLoginUrl</body><body package="TumblrDomain" selector="vimeoLoginUrl:">vimeoLoginUrl: anObject	vimeoLoginUrl := anObject</body></methods><methods><class-id>Tumblr.User</class-id> <category>xml</category><body package="TumblrDomain" selector="mappings">mappings	| collection |	collection := OrderedCollection new.	collection		add: 'default-post-format' -&gt; #defaultPostFormat:;		add: 'can-upload-audio' -&gt; #canUploadAudio:;		add: 'can-upload-aiff' -&gt; #canUploadAiff:;		add: 'can-upload-video' -&gt; #canUploadVideo:;		add: 'vimeo-login-url' -&gt; #vimeoLoginUrl:;		add: 'max-video-bytes-uploaded' -&gt; #maxVideoBytesUploaded:.	^collection</body><body package="TumblrDomain" selector="postProcess:">postProcess: xml	"convert the boolean fields"	#(#canUploadAiff #canUploadAudio #canUploadVideo) do: [:each |		| val setter|		setter := (each asString, ':') asSymbol.		val := self perform: each.		val = '1'			ifTrue: [self perform: setter with: true]			ifFalse: [self perform: setter with: false]]</body></methods><methods><class-id>Tumblr.User</class-id> <category>initialize-release</category><body package="TumblrDomain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	defaultPostFormat := nil.	canUploadAudio := nil.	canUploadAiff := nil.	canUploadVideo := nil.	vimeoLoginUrl := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Tumblr.User</class-id> <category>printing</category><body package="TumblrDomain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', defaultPostFormat, ']'</body></methods><methods><class-id>Tumblr.User class</class-id> <category>instance creation</category><body package="TumblrDomain" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Tumblr.TumblrInterface</class-id> <category>api</category><body package="TumblrInterface" selector="addParameter:">addParameter: association	"add to our dictionary"	parameters add: association</body><body package="TumblrInterface" selector="doPostTo:">doPostTo: url	"actually do the post"	| client  request |	client := HttpClient new.	request := client requestClass method: 'POST' url: url.	postData ifNotNil: [request beMultipart].	self parameters do: [:each |		request addFormKey: each key value: each value].	postData ifNotNil: [self addPostDataTo: request].	response := [client executeRequest: request]				on: HttpException, OSErrorHolder peerFaultSignal				do: [:ex | nil].	^response		ifNil: [nil]		ifNotNil: [response contents]</body></methods><methods><class-id>Tumblr.TumblrInterface</class-id> <category>initialize-release</category><body package="TumblrInterface" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	parameters := OrderedCollection new</body></methods><methods><class-id>Tumblr.TumblrInterface</class-id> <category>accessing</category><body package="TumblrInterface" selector="parameters">parameters	^parameters</body><body package="TumblrInterface" selector="parameters:">parameters: anObject	parameters := anObject</body><body package="TumblrInterface" selector="postData">postData	^postData</body><body package="TumblrInterface" selector="postData:">postData: anObject	postData := anObject</body><body package="TumblrInterface" selector="response">response	^response</body><body package="TumblrInterface" selector="response:">response: anObject	response := anObject</body></methods><methods><class-id>Tumblr.TumblrInterface</class-id> <category>private-post</category><body package="TumblrInterface" selector="addPostDataTo:">addPostDataTo: request	"add the post data to the request.  We have to add the stream here, and then close it outside this method"	request 		addFormKey: 'data' 		filename: postData baseFilename 		source: postData getStream</body></methods><methods><class-id>Tumblr.TumblrInterface class</class-id> <category>instance creation</category><body package="TumblrInterface" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class></st-source>