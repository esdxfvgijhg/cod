<?xml version="1.0"?><st-source><!-- Name: FacebookBundleBundleName: FacebookBundleBundleStructure: a Store.BundleForParcelComment: Interface to Facebook.  To use this, you'll need to create a Facebook application:http://developers.facebook.com/One you've done that, have a look at FacebookConnection and FacebookSecretHolder.  To learn about an example Facebook (desktop) application using this code, see:http://wiki.developers.facebook.com/index.php/User:SmalltalkDevelopmentPrerequisites: #(#(#any 'NetworkAppUtilities' '') #(#any 'HTTP' '') #(#any 'WebSupport' '') #(#any 'ExternalWebBrowser' '') #(#any 'MD5' ''))Parcel: nilParcelName: FacebookBundlePrerequisiteParcels: #(#('NetworkAppUtilities' '') #('HTTP' '') #('WebSupport' '') #('ExternalWebBrowser' '') #('MD5' '') #('JSONReader' '') #('ExternalWebBrowser' '') #('HTTP' '') #('HTTPS' '') #('WebSupport' ''))Date: 1:12:06 PM November 15, 2009 --><time-stamp>From VisualWorksÂ®, 7.7 of November 5, 2009 on November 15, 2009 at 1:12:06 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Facebook</name><environment>Smalltalk</environment><private>false</private><imports>			private Smalltalk.*			private Net.*			private Security.*			private JSON.*			</imports><category></category><attributes><package>Facebook-Domain</package></attributes></name-space><comment><name-space-id>Facebook</name-space-id><body></body></comment><class><name>AbstractFacebookObject</name><environment>Facebook</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.AbstractFacebookObject</class-id><body>AbstractFacebookObject is the abstract class for domain objects in the Facebook interface.  </body></comment><class><name>Comment</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text time id fromid </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Comment</class-id><body>Comment is the object that comes back from a news feed comment fetch (Stream.getComments)Instance Variables:	fromid	&lt;Number&gt;	id of user who posted this	id	&lt;Number&gt;	id of this message	text	&lt;String&gt;	 the comment text	time	&lt;Timestamp&gt;	the time it was posted</body></comment><class><name>StreamLike</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>can_like count friends href sample user_likes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.StreamLike</class-id><body>Like is a domain object that comes back from the Tream.get apiInstance Variables	can_like	&lt;Boolean&gt;	description of can_like	count	&lt;Integer&gt;	description of count	friends	&lt;Dictionary&gt;	description of friends	href	&lt;String&gt;	description of href	sample	&lt;Dictionary&gt;	description of sample	user_likes	&lt;Boolean&gt;	description of user_likes</body></comment><class><name>Application</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>api_key app_id canvas_name company_name daily_active_users description developers display_name icon_url logo_url monthly_active_users weekly_active_users </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Application</class-id><body>Application holds application information that is publicInstance Variables:	api_key	&lt;String&gt;	description of api_key	app_id	&lt;String&gt;	description of app_id	canvas_name	&lt;Boolean&gt;	description of canvas_name	company_name	&lt;String&gt;	description of company_name	daily_active_users	&lt;Number&gt;	description of daily_active_users	description	&lt;String&gt;	description of description	developers	&lt;String&gt;	description of developers	display_name	&lt;String&gt;	description of display_name	icon_url	&lt;String&gt;	description of icon_url	logo_url	&lt;String&gt;	description of logo_url	monthly_active_users	&lt;Number&gt;	description of monthly_active_users	weekly_active_users	&lt;Number&gt;	description of weekly_active_users</body></comment><class><name>Event</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>creator description eid end_time event_subtype event_type hide_guest_list host location name nid pic pic_big pic_small privacy start_time tagline update_time venue </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Event</class-id><body>Event is a Facebook event.Instance Variables:	creator	&lt;Number&gt;	user id of creator	description	&lt;String&gt;	description of description	eid	&lt;Number&gt;	description of eid	end_time	&lt;Timestamp&gt;	description of end_time	event_subtype	&lt;String&gt;	description of event_subtype	event_type	&lt;String&gt;	description of event_type	hide_guest_list	&lt;Boolean&gt;	description of hide_guest_list	host	&lt;Number&gt;	user id of host	location	&lt;String&gt;	description of location	name	&lt;String&gt;	description of name	nid	&lt;Number&gt;	description of nid	pic	&lt;String&gt;	description of pic	pic_big	&lt;String&gt;	description of pic_big	pic_small	&lt;String&gt;	description of pic_small	privacy	&lt;String&gt;	description of privacy	start_time	&lt;Timestamp&gt;	description of start_time	tagline	&lt;String&gt;	description of tagline	update_time	&lt;Timestamp&gt;	description of update_time	venue	&lt;String&gt;	description of venue</body></comment><class><name>StreamComment</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>can_post can_remove comment_list count posts </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.StreamComment</class-id><body>StreamComment is a domain object from the Stream.get apiInstance Variables	can_post	&lt;Boolean&gt;	description of can_post	can_remove	&lt;Boolean&gt;	description of can_remove	comment_list	&lt;Dictionary&gt;	description of comment_list	count	&lt;Integer&gt;	description of count	posts	&lt;Dictionary&gt;	description of posts</body></comment><class><name>PhotoFilter</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>aid pids subj_id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.PhotoFilter</class-id><body>PhotoFilter is used to do photo queriesInstance Variables	aid	&lt;String&gt;	Album ID	pid	&lt;String&gt;	Photo ID	subj_id	&lt;Number&gt;	user id of someone tagged ina  photo</body></comment><class><name>StreamResponse</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>albums posts profiles </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.StreamResponse</class-id><body>StreamResponse is a domain object that comes back from the Stream.get APIInstance Variables	albums	&lt;Collection | StreamMessage&gt;	description of albums	posts	&lt;Collection | StreamMessage&gt;	description of posts	profiles	&lt;Collection | StreamProfile&gt;	description of profiles</body></comment><class><name>Filter</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name is_visible filter_key type value rank uid icon_url </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Filter</class-id><body>Filter holds a Facebook filter object.  Received from Stream.getFiltersInstance Variables:	filter_key	&lt;String&gt;	key for this filter	icon_url	&lt;String&gt;	url for the icon being used	is_visible	&lt;Boolean&gt;	whether this is visible on the stream or not	name	&lt;String&gt;	name of this filter	rank	&lt;Number&gt;	rank for the filter	type	&lt;String&gt;	typically 'application'	uid	&lt;Number&gt;	user id	value	&lt;Number&gt;	Value for this filter</body></comment><class><name>TemplateAction</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>title_template title_data body_template body_data body_general page_actor_id image_1 image_1_link image_2 image_2_link image_3 image_3_link image_4 image_4_link target_ids </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.TemplateAction</class-id><body>TemplateAction is used in the feed templating interface.  To set the template objects, see: http://wiki.developers.facebook.com/index.php/Template_DataInstance Variables	body_data	&lt;String&gt;	description of body_data	body_general	&lt;String&gt;	description of body_general	body_template	&lt;String&gt;	description of body_template	image_1	&lt;String&gt;	description of image_1	image_1_link	&lt;String&gt;	description of image_1_link	image_2	&lt;String&gt;	description of image_2	image_2_link	&lt;String&gt;	description of image_2_link	image_3	&lt;String&gt;	description of image_3	image_3_link	&lt;String&gt;	description of image_3_link	image_4	&lt;String&gt;	description of image_4	image_4_link	&lt;String&gt;	description of image_4_link	page_actor_id	&lt;String&gt;	description of page_actor_id	target_ids	&lt;Collection&gt;	description of target_ids	title_data	&lt;String&gt;	description of title_data	title_template	&lt;String&gt;	description of title_template</body></comment><class><name>ShortStoryTemplate</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>template_title template_body </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.ShortStoryTemplate</class-id><body>ShortStoryTemplate is used in the feed templating interfaceInstance Variables	template_body	&lt;String&gt; fbml template	template_title	&lt;String&gt; fbml template</body></comment><class><name>Friend</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>uid first_name last_name name locale affiliations pic_square profile_url meeting_for meeting_sex religion significant_other_id </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Friend</class-id><body>Friend is a minimal Facebook friend class.  Instance Variables	first_name	&lt;String&gt;	first name	last_name	&lt;String&gt;	 last name	uid	&lt;Number&gt;	 user id	name &lt;String&gt;	locale &lt;String&gt;	affiliations &lt;OrderedCollection | Affiliation&gt;	pic_square &lt;String&gt;	profile_url &lt;String&gt;	meeting_for &lt;String&gt;	meeting_sex &lt;String&gt;	religion &lt;String&gt;	significant_other_id &lt;Number&gt;</body></comment><class><name>Session</name><environment>Facebook</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>key secret expires uid </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>FacebookConnect</package></attributes></class><comment><class-id>Facebook.Session</class-id><body>Session holds the session information for an application level sessionInstance Variables:	expires	&lt;String&gt;	when the session expires	key	&lt;String&gt;	 the session key	secret	&lt;secretKey&gt;	application level secret key	uid &lt;String&gt; User id from Facebook</body></comment><class><name>Photo</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>src_small aid src caption link owner pid src_big created modified </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Photo</class-id><body>Photo comes back from photo queriesInstance Variables	aid	&lt;String&gt;	description of aid	caption	&lt;String&gt;	description of caption	created	&lt;Timestamp&gt;	description of created	link	&lt;String&gt;	description of link	modified	&lt;Timestamp&gt;	description of modified	owner	&lt;String&gt;	description of owner	pid	&lt;String&gt;	description of pid	src	&lt;String&gt;	description of src	src_big	&lt;String&gt;	description of src_big	src_small	&lt;String&gt;	description of src_small</body></comment><class><name>ProfileFBML</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>profile mobile_profile profile_main </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.ProfileFBML</class-id><body>ProfileFBML is used to define FBML for a user's profileInstance Variables	mobile_profile	&lt;String&gt;	FBML for mobiles	profile	&lt;String&gt;	FBML for the application profile	profile_main	&lt;String&gt;	FBML for the narrow profile box on the wall</body></comment><class><name>Link</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>created_time image_urls link_id owner owner_comment summary title url </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Link</class-id><body>Link holds links posted to the user's profileInstance Variables	created_time	&lt;Timestamp&gt;	description of created_time	image_urls	&lt;Array | String&gt;	description of image_urls	link_id	&lt;Number&gt;	description of link_id	owner	&lt;Number&gt;	description of owner	owner_comment	&lt;String&gt;	description of owner_comment	summary	&lt;String&gt;	description of summary	title	&lt;String&gt;	description of title	url	&lt;String&gt;	description of url</body></comment><class><name>PhotoTag</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>created pid subject text xcoord ycoord </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.PhotoTag</class-id><body>PhotoTag holds a tag associated with the photo specified by the pidInstance Variables	created	&lt;Timestamp&gt;	description of created	pid	&lt;String&gt;	description of pid	subject	&lt;String&gt;	description of subject	text	&lt;String&gt;	description of text	xcoord	&lt;Float&gt;	description of xcoord	ycoord	&lt;Float&gt;	description of ycoord</body></comment><class><name>Note</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>created_time note_id title uid updated_time </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Note</class-id><body>Note is a Facebook noteInstance Variables	created_time	&lt;Timestamp&gt;	description of created_time	note_id	&lt;Number&gt;	description of note_id	title	&lt;String&gt;	description of title	uid	&lt;Number&gt;	description of uid	updated_time	&lt;Timestamp&gt;	description of updated_time</body></comment><class><name>VideoLimitInfo</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>length size </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.VideoLimitInfo</class-id><body>printOn: stream	super printOn: stream.	stream nextPutAll: ' [ max length: ', (length/60) printString, ' minutes, max size: ', size printString, ' bytes]'</body></comment><class><name>FacebookSecretHolder</name><environment>Facebook</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>apiKey secretKey applicationId </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>FacebookConnect</package></attributes></class><comment><class-id>Facebook.FacebookSecretHolder</class-id><body>FacebookSecretHolder holds the API key and Secret Key for the application.  It's up to the application to decide how to store that data safely; this simply needs to be createdInstance Variables:	apiKey	&lt;String&gt;	 API key from Facebook	secretKey	&lt;String&gt; secret key from Facebook	applicationId &lt;String&gt; App ID from Facebook</body></comment><class><name>ErrorReturn</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>error_code error_msg request_args </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>FacebookConnect</package></attributes></class><comment><class-id>Facebook.ErrorReturn</class-id><body>ErrorReturn is a Facebook error objectInstance Variables:	error_code	&lt;Number&gt;	description of error_code	error_msg	&lt;String&gt;	description of error_msg	request_args	&lt;Dictionary&gt;	description of request_args</body></comment><class><name>MediaUploadObject</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stream filename </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.MediaUploadObject</class-id><body>MediaUploadObject is an abstract superclass for anything that needs to push lareg data up to FacebookInstance Variables	stream	&lt;ExternalReadStream&gt;	a stream on the media file	filename	&lt;String&gt; file to get media from</body></comment><class><name>Template</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>one_line_story_templates short_story_templates full_story_templates action_links </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Template</class-id><body>Template is used in the feeds template interfaceInstance Variables	action_links	&lt;Array | ActionLink&gt;	description of action_links	full_story_templates	&lt;nil&gt;	always nil (deprecated part of API)	one_line_story_template	&lt;String&gt;	template for one line	short_story_templates	&lt;Array | ShortStoryTemplate&gt;	collection of templates</body></comment><class><name>StreamMessage</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>actor_id app_data app_id attachment comments created_time filter_key likes message permalink post_id privacy source_id type updated_time viewer_id profile </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.StreamMessage</class-id><body>StreamMessage is one of the domain objects that comes back from Stream.getInstance Variables	actor_id	&lt;Integer&gt;	description of actor_id	app_data	&lt;Dictionary&gt;	description of app_data	app_id	&lt;Integer&gt;	description of app_id	attachment	&lt;Dictionary&gt;	description of attachment	comments	&lt;StreamComment&gt;	description of comments	created_time	&lt;Timestamp&gt;	description of created_time	filter_key	&lt;String&gt;	description of filter_key	likes	&lt;Like&gt;	description of likes	message	&lt;String&gt;	description of message	permalink	&lt;String&gt;	description of permalink	post_id	&lt;String&gt;	description of post_id	privacy	&lt;Dictionary&gt;	description of privacy	source_id	&lt;String&gt;	description of source_id	type	&lt;Integer&gt;	description of type	updated_time	&lt;Timestamp&gt;	description of updated_time	viewer_id	&lt;Integer&gt;	description of viewer_id	profile &lt;StreamProfile&gt; profile of user who created this message</body></comment><class><name>EventInfo</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name category subcategory host location city start_time end_time street phone email page_id description privacy_type tagline </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.EventInfo</class-id><body>EventInfo is used to create eventsInstance Variables:	category	&lt;String&gt;	description of category	city	&lt;String&gt;	description of city	description	&lt;String&gt;	description of description	email	&lt;String&gt;	description of email	end_time	&lt;Number&gt;	asUnixSeconds	host	&lt;String&gt;	description of host	location	&lt;String&gt;	description of location	name	&lt;String&gt;	description of name	page_id	&lt;Number&gt;	description of page_id	phone	&lt;String&gt;	description of phone	privacy_type	&lt;String&gt;	description of privacy_type	start_time	&lt;Number&gt;	asUnixSeconds	street	&lt;String&gt;	description of street	subcategory	&lt;String&gt;	description of subcategory	tagline	&lt;String&gt;	description of tagline</body></comment><class><name>Affiliation</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name nid status type year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Affiliation</class-id><body>Afiliations holds whatever affiliation data is available for a userInstance Variables:	name	&lt;String&gt;	description of name	nid	&lt;Number&gt;	description of nid	status	&lt;String&gt;	description of status	type	&lt;String&gt;	description of type	year	&lt;Number&gt;	description of year</body></comment><class><name>FacebookInterface</name><environment>Facebook</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>parameters results simulateCalls cachedParameters postData </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>FacebookConnect</package></attributes></class><comment><class-id>Facebook.FacebookInterface</class-id><body>FacebookAPI implements the basic RESTful interface to the Facebook system.  Instance Variables	parameters	&lt;SortedCollection&gt;	holds a collection of key/value pair parameters, sorted by key	results	&lt;Response&gt;	 the response from FB	simulateCalls &lt;Boolean&gt;	If true, just cache the parameters	cachedParameters &lt;Dictionary&gt; dictionary of cached parameters for batch calls	postData &lt;Object&gt; an object that holds the relevant information to upload from.  It must respond to			#filename			#getStream			#closeStream</body></comment><class><name>FBMLAttribute</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name description default_value </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.FBMLAttribute</class-id><body>FBMLAttribute is an attribute for an FBML custom tagInstance Variables	default_value	&lt;String&gt;	description of default_value	description	&lt;String&gt;	description of description	name	&lt;String&gt;	description of name</body></comment><class><name>VideoUpload</name><environment>Facebook</environment><super>Facebook.MediaUploadObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>title description vid </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.VideoUpload</class-id><body>VideoUpload holds data to upload a videoInstance Variables	description	&lt;String&gt;	description of the video	title	&lt;String&gt;	title of the video	vid &lt;Number&gt; video id (added only when upload works in the return)</body></comment><class><name>PageInfo</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>page_id name pic_small pic_square pic_big pic pic_large type website location street hours band_members bio hometown genre record_label influences has_added_app founded company_overview mission products release_date starring written_by directed_by produced_by studio awards plot_outline network season schedule </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.PageInfo</class-id><body>PageInfo is used in the Pages interface.  For doc on how to fill in the fields, see: http://wiki.developers.facebook.com/index.php/Pages.getInfoInstance Variables	awards	&lt;Number&gt;	description of awards	band_members	&lt;String&gt;	description of band_members	bio	&lt;String&gt;	description of bio	company_overview	&lt;String&gt;	description of company_overview	directed_by	&lt;String&gt;	description of directed_by	founded	&lt;String&gt;	description of founded	genre	&lt;String&gt;	description of genre	has_added_app	&lt;String&gt;	description of has_added_app	hometown	&lt;String&gt;	description of hometown	hours	&lt;String&gt;	description of hours	influences	&lt;String&gt;	description of influences	location	&lt;String&gt;	description of location	mission	&lt;String&gt;	description of mission	name	&lt;String&gt;	description of name	network	&lt;String&gt;	description of network	page_id	&lt;String&gt;	description of page_id	pic	&lt;String&gt;	description of pic	pic_big	&lt;String&gt;	description of pic_big	pic_large	&lt;String&gt;	description of pic_large	pic_small	&lt;String&gt;	description of pic_small	pic_square	&lt;String&gt;	description of pic_square	plot_outline	&lt;String&gt;	description of plot_outline	produced_by	&lt;String&gt;	description of produced_by	products	&lt;String&gt;	description of products	record_label	&lt;String&gt;	description of record_label	release_date	&lt;String&gt;	description of release_date	schedule	&lt;String&gt;	description of schedule	season	&lt;String&gt;	description of season	starring	&lt;String&gt;	description of starring	street	&lt;String&gt;	description of street	studio	&lt;String&gt;	description of studio	type	&lt;String&gt;	description of type	website	&lt;String&gt;	description of website	written_by	&lt;String&gt;	description of written_by</body></comment><class><name>FriendComparisonResult</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>uid1 are_friends uid2 </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.FriendComparisonResult</class-id><body>FriendComparisonResult is the result of checking whether pairs of your friends are themselves friendsInstance Variables:	are_friends	&lt;Boolean&gt;	description of are_friends	uid1	&lt;Number&gt;	description of uid1	uid2	&lt;Number&gt;	description of uid2</body></comment><class><name>Venue</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>street latitude country state city longitude </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Venue</class-id><body>Venue holds venue information for an eventInstance Variables:	city	&lt;String&gt;	city	country	&lt;String&gt;	country	latitude	&lt;String&gt;	latitude	longitude	&lt;String&gt;longitude	state	&lt;String&gt;	state	street	&lt;String&gt;	street</body></comment><class><name>CustomTag</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type description is_public attributes fbml open_tag_fbml close_tag_fbml header_fbml footer_fbml </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.CustomTag</class-id><body>CustomTag for FBML.  See http://wiki.developers.facebook.com/index.php/Fbml.registerCustomTags for specifics on what's belowInstance Variables	attributes	&lt;Array | FBMLAttribute&gt;	description of attributes	close_tag_fbml	&lt;String&gt;	description of close_tag_fbml	description	&lt;String&gt;	description of description	fbml	&lt;String&gt;	description of fbml	footer_fbml	&lt;String&gt;	description of footer_fbml	header_fbml	&lt;String&gt;	description of header_fbml	is_public	&lt;Boolean&gt;	description of is_public	name	&lt;String&gt;	description of name	open_tag_fbml	&lt;String&gt;	description of open_tag_fbml	type	&lt;String&gt;	must be 'leaf' or 'container'</body></comment><class><name>StreamProfile</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pic_square name id url </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.StreamProfile</class-id><body>StreamProfile is one of the domain objects that comes back from the Stream.get APIInstance Variables	id	&lt;Integer&gt;	uid	name	&lt;String&gt;	user name	pic_square	&lt;String&gt;	url to profile pic	url	&lt;String&gt;	url to profile page</body></comment><class><name>Connection</name><environment>Facebook</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>authToken session secretHolder api </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>FacebookConnect</package></attributes></class><comment><class-id>Facebook.Connection</class-id><body>Connection is intended to hold the auth token and session information for a persistent connection to Facebook.  Note that this interface has been created largey with desktop applications in mind; there are APIs that have not been tested (in the data storage apis) Instance Variables	authToken	&lt;String&gt;	 the token that comes back from the API	secretHolder &lt;FacebookSecretHolder&gt; The holder of the API and secret keys.  Apps determine how to save/restore those	session	&lt;String&gt;	 the session that we retrieve from the API	api	&lt;FacebookAPI&gt; Usageholder : FacebookSecretHolder new	apiKey: 'YourAPIKeyHere';	secretKey: 'YourSecretKeyHere'.connection := Connection withSecretHolder: holder.connection login.connection getSession.You need to call #getSession after the user has logged in (or received verification that they have logged in) through the web page that comes up.In general, methods will return the results specified by the Facebook API (in object form), or an ErrorReturn object  if the message send fails.   However, some of the initial setup will respond with booleans:authCreateTokenauthGetSessionIf those work, you'll get true.  If not, you'll get false.In general, other API messages will return the documented object from the Facebook API (reified into a Smalltalk object).  If there is an error, an ErrorReturn object will be passed back.  If that has an error_code of 999, then Facebook did not respond, and a default error code came back</body></comment><class><name>UserInfo</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>uid first_name last_name name timezone birthday sex affiliations locale profile_url proxied_email </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.UserInfo</class-id><body>UserInfo is part of the older Users API.  This object is filled in by Users.getStandardInfoInstance Variables	affiliations	&lt;OrderedCollection | Affiliation&gt;	description of affiliations	birthday	&lt;String&gt;	description of birthday	first_name	&lt;String&gt;	description of first_name	last_name	&lt;String&gt;	description of last_name	locale	&lt;String&gt;	description of locale	name	&lt;String&gt;	description of name	profile_url	&lt;String&gt;	description of profile_url	proxied_email	&lt;String&gt;	description of proxied_email	sex	&lt;String&gt;	description of sex	timezone	&lt;String&gt;	description of timezone	uid	&lt;Number&gt;	description of uid</body></comment><class><name>StreamCommentPost</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text time id fromid </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.StreamCommentPost</class-id><body>StreamCommentPost is a domain object that comes back from Stream.getInstance Variables:	fromid	&lt;Integer&gt;	description of fromid	id	&lt;Integer&gt;	description of id	text	&lt;String&gt;	description of text	time	&lt;Timestamp&gt;	description of time</body></comment><class><name>TemplateActionUpdate</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>template_bundle_id template_data target_ids body_general story_size user_message </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.TemplateActionUpdate</class-id><body>TemplateActionUpdate is for updating templates.  To set template_data, see: http://wiki.developers.facebook.com/index.php/Template_DataInstance Variables	body_general	&lt;String&gt;	description of body_general	story_size	&lt;Number&gt;	description of story_size	target_ids	&lt;Collection | Number&gt;	description of target_ids	template_bundle_id	&lt;Number&gt;	description of template_bundle_id	template_data	&lt;String&gt;	description of template_data	user_message	&lt;String&gt;	description of user_message</body></comment><class><name>ProfileInfo</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label link image description sublabel </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.ProfileInfo</class-id><body>ProfileInfo is use to set profile informationInstance Variables	description	&lt;String&gt;	optional	image	&lt;String&gt;	optional	label	&lt;String&gt;	description of label	link	&lt;String&gt;	description of link	sublabel	&lt;String&gt;	optional</body></comment><class><name>Notification</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>event_invites friend_requests group_invites messages pokes shares </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Notification</class-id><body>Notification has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.Instance Variables	event_invites	&lt;Dictionary&gt;	description of event_invites	friend_requests	&lt;Dictionary&gt;	description of friend_requests	group_invites	&lt;Array&gt;	description of group_invites	messages	&lt;Message&gt;	description of messages	pokes	&lt;Poke&gt;	description of pokes	shares	&lt;Share&gt;	description of shares</body></comment><class><name>Message</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>unread most_recent </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Message</class-id><body>Message is a Facebook MessageInstance Variables	most_recent	&lt;Number&gt;	description of most_recent	unread	&lt;Number&gt;	description of unread</body></comment><class><name>Share</name><environment>Facebook</environment><super>Facebook.Message</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Share</class-id><body>Share from facebook</body></comment><class><name>ProfileInfoField</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>field info_item </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.ProfileInfoField</class-id><body>ProfileInfoField is used to specify app profile infoInstance Variables	field	&lt;String&gt;	name of field	info_item	&lt;OrderedCollection | ProfileInfo&gt;	collection of ProfileInfo objects</body></comment><class><name>ActionLink</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>text href </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.ActionLink</class-id><body>ActionLink is used in the feed templating interfaceInstance Variables	href	&lt;String&gt;	description of href	text	&lt;String&gt;	description of text</body></comment><class><name>PhotoUpload</name><environment>Facebook</environment><super>Facebook.MediaUploadObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>aid caption uid </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.PhotoUpload</class-id><body>PhotoUpload stores data for a pending photo uploadInstance Variables	aid	&lt;String&gt;	Album ID	caption	&lt;String&gt;	caption for photo	uid	&lt;Number&gt;	user id</body></comment><class><name>Group</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>creator description gid group_subtype group_type name nid office pic pic_big pic_small privacy recent_news update_time venue website </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Group</class-id><body>A Facebook groupInstance Variables:	creator	&lt;Number&gt;	description of creator	description	&lt;String&gt;	description of description	gid	&lt;Number&gt;	description of gid	group_subtype	&lt;String&gt;	description of group_subtype	group_type	&lt;String&gt;	description of group_type	name	&lt;String&gt;	description of name	nid	&lt;Number&gt;	description of nid	office	&lt;String&gt;	description of office	pic	&lt;String&gt;	description of pic	pic_big	&lt;String&gt;	description of pic_big	pic_small	&lt;String&gt;	description of pic_small	privacy	&lt;String&gt;	description of privacy	recent_news	&lt;String&gt;	description of recent_news	update_time	&lt;Timestamp&gt;	description of update_time	venue	&lt;String&gt;	description of venue	website	&lt;String&gt;	description of website</body></comment><class><name>Status</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>source time uid message status_id friend </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Status</class-id><body>Status holds Facebook Status infoInstance Variables:	message	&lt;String&gt;	fb status	source	&lt;Number&gt;	internal fb info	status_id	&lt;Number&gt;	id of message	time	&lt;Number&gt;	timestamp	uid	&lt;Number&gt;	uid of this update</body></comment><class><name>StreamAppData</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>attachment_data images tbid </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.StreamAppData</class-id><body>StreamAppData is part of the domain object that returns from Stream.getInstance Variables:	attachment_data	&lt;Dictionary&gt;	description of attachment_data	images	&lt;Dictionary&gt;	description of images	tbid	&lt;String&gt;	description of tbid</body></comment><class><name>GroupSubscription</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>members not_replied </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.GroupSubscription</class-id><body>GroupSubscription holds a collection of members (uids) in the group, and another of uids who have not repliedInstance Variables:	members	&lt;Array&gt;	description of members	not_replied	&lt;Dictionary&gt;	description of not_replied</body></comment><class><name>Poke</name><environment>Facebook</environment><super>Facebook.Message</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.Poke</class-id><body>Poke from Facebook</body></comment><class><name>PhotoAlbum</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>aid cover_pid created description link location modified modified_major type name owner size visible </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.PhotoAlbum</class-id><body>PhotoAlbum comes back from photo album queriesInstance Variables	aid &lt;String&gt; Album id	cover_pid	&lt;String&gt;	description of cover_pid	created	&lt;Timestamp&gt;	description of created	description	&lt;String&gt;	description of description	link	&lt;String&gt;	description of link	location	&lt;String&gt;	description of location	modified	&lt;Timestamp&gt;	description of modified	name	&lt;String&gt;	description of name	owner	&lt;Number&gt;	description of owner	size	&lt;Number&gt;	description of size	visible	&lt;String&gt;	description of visible</body></comment><class><name>EventMemberDetail</name><environment>Facebook</environment><super>Facebook.AbstractFacebookObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>attending declined not_replied unsure </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>Facebook-Domain</package></attributes></class><comment><class-id>Facebook.EventMemberDetail</class-id><body>EventMemberDetail holds collections of user ids for the categories below, for an eventInstance Variables:	attending	&lt;Collection&gt;	description of attending	declined	&lt;Collection&gt;	description of declined	not_replied	&lt;Collection&gt;	description of not_replied	unsure	&lt;Collection&gt;	description of unsure</body></comment><methods><class-id>Facebook.AbstractFacebookObject</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: aDictionary	aDictionary keysAndValuesDo: [:key :value |		| msg |		msg := (key, ':') asSymbol.		[self perform: msg with: value]			on: MessageNotUnderstood			do: [:ex | nil]]</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."</body></methods><methods><class-id>Facebook.AbstractFacebookObject</class-id> <category>convenience</category><body package="Facebook-Domain" selector="addParametersTo:">addParametersTo: api	"subclasses can customize to add themselves"</body></methods><methods><class-id>Facebook.AbstractFacebookObject class</class-id> <category>instance creation</category><body package="Facebook-Domain" selector="from:">from: aDictionary	^self new from: aDictionary</body><body package="Facebook-Domain" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Facebook.Comment</class-id> <category>accessing</category><body package="Facebook-Domain" selector="fromid">fromid	^fromid</body><body package="Facebook-Domain" selector="fromid:">fromid: anObject	fromid := anObject</body><body package="Facebook-Domain" selector="id">id	^id</body><body package="Facebook-Domain" selector="id:">id: anObject	id := anObject</body><body package="Facebook-Domain" selector="text">text	^text</body><body package="Facebook-Domain" selector="text:">text: anObject	text := anObject</body><body package="Facebook-Domain" selector="time">time	^time</body><body package="Facebook-Domain" selector="time:">time: anObject	time := anObject</body></methods><methods><class-id>Facebook.Comment</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: aDictionary	super from: aDictionary.	time := Timestamp fromUnixSeconds: time</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	text := nil.	time := nil.	id := nil.	fromid := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Facebook.Comment</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: '[ ', self text, ']'</body></methods><methods><class-id>Facebook.StreamLike</class-id> <category>accessing</category><body package="Facebook-Domain" selector="can_like">can_like	^can_like</body><body package="Facebook-Domain" selector="can_like:">can_like: anObject	can_like := anObject</body><body package="Facebook-Domain" selector="count">count	^count</body><body package="Facebook-Domain" selector="count:">count: anObject	count := anObject</body><body package="Facebook-Domain" selector="friends">friends	^friends</body><body package="Facebook-Domain" selector="friends:">friends: anObject	friends := anObject</body><body package="Facebook-Domain" selector="href">href	^href</body><body package="Facebook-Domain" selector="href:">href: anObject	href := anObject</body><body package="Facebook-Domain" selector="sample">sample	^sample</body><body package="Facebook-Domain" selector="sample:">sample: anObject	sample := anObject</body><body package="Facebook-Domain" selector="user_likes">user_likes	^user_likes</body><body package="Facebook-Domain" selector="user_likes:">user_likes: anObject	user_likes := anObject</body></methods><methods><class-id>Facebook.StreamLike</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	can_like := nil.	count := nil.	friends := nil.	href := nil.	sample := nil.	user_likes := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Facebook.Application</class-id> <category>accessing</category><body package="Facebook-Domain" selector="api_key">api_key	^api_key</body><body package="Facebook-Domain" selector="api_key:">api_key: anObject	api_key := anObject</body><body package="Facebook-Domain" selector="app_id">app_id	^app_id</body><body package="Facebook-Domain" selector="app_id:">app_id: anObject	app_id := anObject</body><body package="Facebook-Domain" selector="canvas_name">canvas_name	^canvas_name</body><body package="Facebook-Domain" selector="canvas_name:">canvas_name: anObject	canvas_name := anObject</body><body package="Facebook-Domain" selector="company_name">company_name	^company_name</body><body package="Facebook-Domain" selector="company_name:">company_name: anObject	company_name := anObject</body><body package="Facebook-Domain" selector="daily_active_users">daily_active_users	^daily_active_users</body><body package="Facebook-Domain" selector="daily_active_users:">daily_active_users: anObject	daily_active_users := anObject</body><body package="Facebook-Domain" selector="description">description	^description</body><body package="Facebook-Domain" selector="description:">description: anObject	description := anObject</body><body package="Facebook-Domain" selector="developers">developers	^developers</body><body package="Facebook-Domain" selector="developers:">developers: anObject	developers := anObject</body><body package="Facebook-Domain" selector="display_name">display_name	^display_name</body><body package="Facebook-Domain" selector="display_name:">display_name: anObject	display_name := anObject</body><body package="Facebook-Domain" selector="icon_url">icon_url	^icon_url</body><body package="Facebook-Domain" selector="icon_url:">icon_url: anObject	icon_url := anObject</body><body package="Facebook-Domain" selector="logo_url">logo_url	^logo_url</body><body package="Facebook-Domain" selector="logo_url:">logo_url: anObject	logo_url := anObject</body><body package="Facebook-Domain" selector="monthly_active_users">monthly_active_users	^monthly_active_users</body><body package="Facebook-Domain" selector="monthly_active_users:">monthly_active_users: anObject	monthly_active_users := anObject</body><body package="Facebook-Domain" selector="weekly_active_users">weekly_active_users	^weekly_active_users</body><body package="Facebook-Domain" selector="weekly_active_users:">weekly_active_users: anObject	weekly_active_users := anObject</body></methods><methods><class-id>Facebook.Application</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	api_key := nil.	app_id := nil.	canvas_name := nil.	company_name := nil.	daily_active_users := nil.	description := nil.	developers := nil.	display_name := nil.	icon_url := nil.	logoUrl := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Facebook.Event</class-id> <category>accessing</category><body package="Facebook-Domain" selector="creator">creator	^creator</body><body package="Facebook-Domain" selector="creator:">creator: anObject	creator := anObject</body><body package="Facebook-Domain" selector="description">description	^description</body><body package="Facebook-Domain" selector="description:">description: anObject	description := anObject</body><body package="Facebook-Domain" selector="eid">eid	^eid</body><body package="Facebook-Domain" selector="eid:">eid: anObject	eid := anObject</body><body package="Facebook-Domain" selector="end_time">end_time	^end_time</body><body package="Facebook-Domain" selector="end_time:">end_time: anObject	end_time := anObject</body><body package="Facebook-Domain" selector="event_subtype">event_subtype	^event_subtype</body><body package="Facebook-Domain" selector="event_subtype:">event_subtype: anObject	event_subtype := anObject</body><body package="Facebook-Domain" selector="event_type">event_type	^event_type</body><body package="Facebook-Domain" selector="event_type:">event_type: anObject	event_type := anObject</body><body package="Facebook-Domain" selector="hide_guest_list">hide_guest_list	^hide_guest_list</body><body package="Facebook-Domain" selector="hide_guest_list:">hide_guest_list: anObject	hide_guest_list := anObject</body><body package="Facebook-Domain" selector="host">host	^host</body><body package="Facebook-Domain" selector="host:">host: anObject	host := anObject</body><body package="Facebook-Domain" selector="location">location	^location</body><body package="Facebook-Domain" selector="location:">location: anObject	location := anObject</body><body package="Facebook-Domain" selector="name">name	^name</body><body package="Facebook-Domain" selector="name:">name: anObject	name := anObject</body><body package="Facebook-Domain" selector="nid">nid	^nid</body><body package="Facebook-Domain" selector="nid:">nid: anObject	nid := anObject</body><body package="Facebook-Domain" selector="pic">pic	^pic</body><body package="Facebook-Domain" selector="pic:">pic: anObject	pic := anObject</body><body package="Facebook-Domain" selector="pic_big">pic_big	^pic_big</body><body package="Facebook-Domain" selector="pic_big:">pic_big: anObject	pic_big := anObject</body><body package="Facebook-Domain" selector="pic_small">pic_small	^pic_small</body><body package="Facebook-Domain" selector="pic_small:">pic_small: anObject	pic_small := anObject</body><body package="Facebook-Domain" selector="privacy">privacy	^privacy</body><body package="Facebook-Domain" selector="privacy:">privacy: anObject	privacy := anObject</body><body package="Facebook-Domain" selector="start_time">start_time	^start_time</body><body package="Facebook-Domain" selector="start_time:">start_time: anObject	start_time := anObject</body><body package="Facebook-Domain" selector="tagline">tagline	^tagline</body><body package="Facebook-Domain" selector="tagline:">tagline: anObject	tagline := anObject</body><body package="Facebook-Domain" selector="update_time">update_time	^update_time</body><body package="Facebook-Domain" selector="update_time:">update_time: anObject	update_time := anObject</body><body package="Facebook-Domain" selector="venue">venue	^venue</body><body package="Facebook-Domain" selector="venue:">venue: anObject		venue := Venue from: anObject</body></methods><methods><class-id>Facebook.Event</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: aDictionary	super from: aDictionary.	end_time := Timestamp fromUnixSeconds:  end_time asNumber.	start_time := Timestamp fromUnixSeconds:  start_time asNumber.	update_time := Timestamp fromUnixSeconds:  update_time asNumber</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	name := 'unknown'</body></methods><methods><class-id>Facebook.Event</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', self name, ']'</body></methods><methods><class-id>Facebook.StreamComment</class-id> <category>accessing</category><body package="Facebook-Domain" selector="can_post">can_post	^can_post</body><body package="Facebook-Domain" selector="can_post:">can_post: anObject	can_post := anObject</body><body package="Facebook-Domain" selector="can_remove">can_remove	^can_remove</body><body package="Facebook-Domain" selector="can_remove:">can_remove: anObject	can_remove := anObject</body><body package="Facebook-Domain" selector="comment_list">comment_list	^comment_list</body><body package="Facebook-Domain" selector="comment_list:">comment_list: anObject	comment_list := anObject</body><body package="Facebook-Domain" selector="count">count	^count</body><body package="Facebook-Domain" selector="count:">count: anObject	count := anObject</body><body package="Facebook-Domain" selector="posts">posts	^posts</body><body package="Facebook-Domain" selector="posts:">posts: anObject	posts := anObject</body></methods><methods><class-id>Facebook.StreamComment</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [ with: ', count printString, ']'</body></methods><methods><class-id>Facebook.StreamComment</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	super from: dictionary.	comment_list := comment_list collect: [:each | 		StreamCommentPost from: each].	posts ifNil: [posts := OrderedCollection new].	posts := posts collect: [:each |		StreamCommentPost from: each]</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	can_post := nil.	can_remove := nil.	comment_list := Dictionary new.	count := nil.	posts := Dictionary new.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Facebook.PhotoFilter</class-id> <category>accessing</category><body package="Facebook-Domain" selector="aid">aid	^aid</body><body package="Facebook-Domain" selector="aid:">aid: anObject	aid := anObject</body><body package="Facebook-Domain" selector="pids">pids	^pids</body><body package="Facebook-Domain" selector="pids:">pids: anObject	pids := anObject</body><body package="Facebook-Domain" selector="subj_id">subj_id	^subj_id</body><body package="Facebook-Domain" selector="subj_id:">subj_id: anObject	subj_id := anObject</body></methods><methods><class-id>Facebook.PhotoFilter</class-id> <category>convenience</category><body package="Facebook-Domain" selector="addParametersTo:">addParametersTo: api	"any non-nil fields will go into the query.  Note that the values are not relevant; this is for QBE purposes.  Thus, stuffing any	object into a field is ok here"	subj_id ifNotNil: [api addParameter: 'subj_id' -&gt; subj_id printString].	aid ifNotNil: [api addParameter: 'aid' -&gt; aid].	pids notEmpty		ifTrue: [api addParameter: 'pids' -&gt; (pids asCommaDelimitedString)]</body></methods><methods><class-id>Facebook.PhotoFilter</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	pids := OrderedCollection new</body></methods><methods><class-id>Facebook.StreamResponse</class-id> <category>accessing</category><body package="Facebook-Domain" selector="albums">albums	^albums</body><body package="Facebook-Domain" selector="albums:">albums: anObject	albums := anObject</body><body package="Facebook-Domain" selector="posts">posts	^posts</body><body package="Facebook-Domain" selector="posts:">posts: anObject	posts := anObject</body><body package="Facebook-Domain" selector="profiles">profiles	^profiles</body><body package="Facebook-Domain" selector="profiles:">profiles: anObject	profiles := anObject</body></methods><methods><class-id>Facebook.StreamResponse</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	albums := (dictionary at: 'albums') collect: [:each |		PhotoAlbum from: each].	posts := (dictionary at: 'posts') collect: [:each | 		StreamMessage from: each].	profiles := (dictionary at: 'profiles') collect: [:each |		StreamProfile from: each].	self postProcess</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	albums := OrderedCollection new.	posts := OrderedCollection new.	profiles := OrderedCollection new.</body></methods><methods><class-id>Facebook.StreamResponse</class-id> <category>private</category><body package="Facebook-Domain" selector="postProcess">postProcess	"get profile for each message object" 	posts do: [:each |		| profile |		profile := profiles detect: [:eachProfile | each actor_id = eachProfile id] ifNone: [nil].		profile ifNil: [profile := StreamProfile new].		each profile: profile]</body></methods><methods><class-id>Facebook.Filter</class-id> <category>accessing</category><body package="Facebook-Domain" selector="filter_key">filter_key	^filter_key</body><body package="Facebook-Domain" selector="filter_key:">filter_key: anObject	filter_key := anObject</body><body package="Facebook-Domain" selector="icon_url">icon_url	^icon_url</body><body package="Facebook-Domain" selector="icon_url:">icon_url: anObject	icon_url := anObject</body><body package="Facebook-Domain" selector="is_visible">is_visible	^is_visible</body><body package="Facebook-Domain" selector="is_visible:">is_visible: anObject	is_visible := anObject</body><body package="Facebook-Domain" selector="name">name	^name</body><body package="Facebook-Domain" selector="name:">name: anObject	name := anObject</body><body package="Facebook-Domain" selector="rank">rank	^rank</body><body package="Facebook-Domain" selector="rank:">rank: anObject	rank := anObject</body><body package="Facebook-Domain" selector="type">type	^type</body><body package="Facebook-Domain" selector="type:">type: anObject	type := anObject</body><body package="Facebook-Domain" selector="uid">uid	^uid</body><body package="Facebook-Domain" selector="uid:">uid: anObject	uid := anObject</body><body package="Facebook-Domain" selector="value">value	^value</body><body package="Facebook-Domain" selector="value:">value: anObject	value := anObject</body></methods><methods><class-id>Facebook.Filter</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	name := 'unknown'</body></methods><methods><class-id>Facebook.Filter</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', name, ']'</body></methods><methods><class-id>Facebook.TemplateAction</class-id> <category>accessing</category><body package="Facebook-Domain" selector="body_data">body_data	^body_data</body><body package="Facebook-Domain" selector="body_data:">body_data: anObject	body_data := anObject</body><body package="Facebook-Domain" selector="body_general">body_general	^body_general</body><body package="Facebook-Domain" selector="body_general:">body_general: anObject	body_general := anObject</body><body package="Facebook-Domain" selector="body_template">body_template	^body_template</body><body package="Facebook-Domain" selector="body_template:">body_template: anObject	body_template := anObject</body><body package="Facebook-Domain" selector="image_1">image_1	^image_1</body><body package="Facebook-Domain" selector="image_1:">image_1: anObject	image_1 := anObject</body><body package="Facebook-Domain" selector="image_1_link">image_1_link	^image_1_link</body><body package="Facebook-Domain" selector="image_1_link:">image_1_link: anObject	image_1_link := anObject</body><body package="Facebook-Domain" selector="image_2">image_2	^image_2</body><body package="Facebook-Domain" selector="image_2:">image_2: anObject	image_2 := anObject</body><body package="Facebook-Domain" selector="image_2_link">image_2_link	^image_2_link</body><body package="Facebook-Domain" selector="image_2_link:">image_2_link: anObject	image_2_link := anObject</body><body package="Facebook-Domain" selector="image_3">image_3	^image_3</body><body package="Facebook-Domain" selector="image_3:">image_3: anObject	image_3 := anObject</body><body package="Facebook-Domain" selector="image_3_link">image_3_link	^image_3_link</body><body package="Facebook-Domain" selector="image_3_link:">image_3_link: anObject	image_3_link := anObject</body><body package="Facebook-Domain" selector="image_4">image_4	^image_4</body><body package="Facebook-Domain" selector="image_4:">image_4: anObject	image_4 := anObject</body><body package="Facebook-Domain" selector="image_4_link">image_4_link	^image_4_link</body><body package="Facebook-Domain" selector="image_4_link:">image_4_link: anObject	image_4_link := anObject</body><body package="Facebook-Domain" selector="page_actor_id">page_actor_id	^page_actor_id</body><body package="Facebook-Domain" selector="page_actor_id:">page_actor_id: anObject	page_actor_id := anObject</body><body package="Facebook-Domain" selector="target_ids">target_ids	^target_ids</body><body package="Facebook-Domain" selector="target_ids:">target_ids: anObject	target_ids := anObject</body><body package="Facebook-Domain" selector="title_data">title_data	^title_data</body><body package="Facebook-Domain" selector="title_data:">title_data: anObject	title_data := anObject</body><body package="Facebook-Domain" selector="title_template">title_template	^title_template</body><body package="Facebook-Domain" selector="title_template:">title_template: anObject	title_template := anObject</body></methods><methods><class-id>Facebook.TemplateAction</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	target_ids := OrderedCollection new.</body></methods><methods><class-id>Facebook.TemplateAction</class-id> <category>convenience</category><body package="Facebook-Domain" selector="addParametersTo:">addParametersTo: api	api addParameter: 'title_template' -&gt; title_template.	title_data ifNotNil: [api addParameter: 'title_data' -&gt; title_data asJson].	body_template ifNotNil: [api addParameter: 'body_template' -&gt; body_template].	body_data ifNotNil: [api addParameter: 'body_data' -&gt; body_data asJson].	body_general ifNotNil: [api addParameter: 'body_general' -&gt; body_general].	page_actor_id ifNotNil: [api addParameter: 'page_actor_id' -&gt; page_actor_id printString].	image_1 ifNotNil: [api addParameter: 'image_1' -&gt; image_1].	image_1_link ifNotNil: [api addParameter: 'image_1_link' -&gt; image_1_link].	image_2 ifNotNil: [api addParameter: 'image_2' -&gt; image_2].	image_2_link ifNotNil: [api addParameter: 'image_2_link' -&gt; image_2_link].	image_3 ifNotNil: [api addParameter: 'image_3' -&gt; image_3].	image_3_link ifNotNil: [api addParameter: 'image_3_link' -&gt; image_3_link].	image_4 ifNotNil: [api addParameter: 'image_4' -&gt; image_4].	image_4_link ifNotNil: [api addParameter: 'image_4_link' -&gt; image_4_link].	target_ids notEmpty ifTrue: [api addParameter: 'target_ids' -&gt; (target_ids asCommaDelimitedString)]</body></methods><methods><class-id>Facebook.ShortStoryTemplate</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	template_title := ''.	template_body := ''.</body></methods><methods><class-id>Facebook.ShortStoryTemplate</class-id> <category>accessing</category><body package="Facebook-Domain" selector="template_body">template_body	^template_body</body><body package="Facebook-Domain" selector="template_body:">template_body: anObject	template_body := anObject</body><body package="Facebook-Domain" selector="template_title">template_title	^template_title</body><body package="Facebook-Domain" selector="template_title:">template_title: anObject	template_title := anObject</body></methods><methods><class-id>Facebook.Friend</class-id> <category>accessing</category><body package="Facebook-Domain" selector="affiliations">affiliations	^affiliations</body><body package="Facebook-Domain" selector="affiliations:">affiliations: arrayOrNil	arrayOrNil ifNil: [^self].	affiliations := arrayOrNil collect: [:each |					Affiliation from: each]</body><body package="Facebook-Domain" selector="first_name">first_name	^first_name</body><body package="Facebook-Domain" selector="first_name:">first_name: anObject	first_name := anObject</body><body package="Facebook-Domain" selector="last_name">last_name	^last_name</body><body package="Facebook-Domain" selector="last_name:">last_name: anObject	last_name := anObject</body><body package="Facebook-Domain" selector="locale">locale	^locale</body><body package="Facebook-Domain" selector="locale:">locale: anObject	locale := anObject</body><body package="Facebook-Domain" selector="meeting_for">meeting_for	^meeting_for</body><body package="Facebook-Domain" selector="meeting_for:">meeting_for: anObject	meeting_for := anObject</body><body package="Facebook-Domain" selector="meeting_sex">meeting_sex	^meeting_sex</body><body package="Facebook-Domain" selector="meeting_sex:">meeting_sex: anObject	meeting_sex := anObject</body><body package="Facebook-Domain" selector="name">name	^name</body><body package="Facebook-Domain" selector="name:">name: anObject	name := anObject</body><body package="Facebook-Domain" selector="pic_square">pic_square	^pic_square</body><body package="Facebook-Domain" selector="pic_square:">pic_square: anObject	pic_square := anObject</body><body package="Facebook-Domain" selector="profile_url">profile_url	^profile_url</body><body package="Facebook-Domain" selector="profile_url:">profile_url: anObject	profile_url := anObject</body><body package="Facebook-Domain" selector="religion">religion	^religion</body><body package="Facebook-Domain" selector="religion:">religion: anObject	religion := anObject</body><body package="Facebook-Domain" selector="significant_other_id">significant_other_id	^significant_other_id</body><body package="Facebook-Domain" selector="significant_other_id:">significant_other_id: anObject	significant_other_id := anObject</body><body package="Facebook-Domain" selector="uid">uid	^uid</body><body package="Facebook-Domain" selector="uid:">uid: anObject	uid := anObject</body></methods><methods><class-id>Facebook.Friend</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	first_name := ''.	last_name := ''.	name := ''</body></methods><methods><class-id>Facebook.Friend</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', name, ']'</body></methods><methods><class-id>Facebook.Friend class</class-id> <category>instance creation</category><body package="Facebook-Domain" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Facebook.Session</class-id> <category>accessing</category><body package="FacebookConnect" selector="expires">expires	^expires</body><body package="FacebookConnect" selector="expires:">expires: anObject	expires := anObject</body><body package="FacebookConnect" selector="key">key	^key</body><body package="FacebookConnect" selector="key:">key: anObject	key := anObject</body><body package="FacebookConnect" selector="secret">secret	^secret</body><body package="FacebookConnect" selector="secret:">secret: anObject	secret := anObject</body><body package="FacebookConnect" selector="uid">uid	^uid</body><body package="FacebookConnect" selector="uid:">uid: anObject	uid := anObject</body></methods><methods><class-id>Facebook.Session</class-id> <category>initialize-release</category><body package="FacebookConnect" selector="from:">from: dictionary	secret := dictionary at: 'secret'.	key := dictionary at: 'session_key'.	expires := Timestamp fromUnixSeconds: (dictionary at: 'expires').	uid := dictionary at: 'uid'</body><body package="FacebookConnect" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	" *** Edit the following to properly initialize instance variables ***"	key := nil.	secret := nil.	expires := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Facebook.Session</class-id> <category>printing</category><body package="FacebookConnect" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' ', expires printString</body></methods><methods><class-id>Facebook.Session class</class-id> <category>instance creation</category><body package="FacebookConnect" selector="from:">from: dictionary	^self new from: dictionary</body><body package="FacebookConnect" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Facebook.Photo</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	super from: dictionary.	created := Timestamp fromUnixSeconds: created asNumber.	modified := Timestamp fromUnixSeconds: modified asNumber.</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	caption := 'None'</body></methods><methods><class-id>Facebook.Photo</class-id> <category>accessing</category><body package="Facebook-Domain" selector="aid">aid	^aid</body><body package="Facebook-Domain" selector="aid:">aid: anObject	aid := anObject</body><body package="Facebook-Domain" selector="caption">caption	^caption</body><body package="Facebook-Domain" selector="caption:">caption: anObject	caption := anObject</body><body package="Facebook-Domain" selector="created">created	^created</body><body package="Facebook-Domain" selector="created:">created: anObject	created := anObject</body><body package="Facebook-Domain" selector="link">link	^link</body><body package="Facebook-Domain" selector="link:">link: anObject	link := anObject</body><body package="Facebook-Domain" selector="modified">modified	^modified</body><body package="Facebook-Domain" selector="modified:">modified: anObject	modified := anObject</body><body package="Facebook-Domain" selector="owner">owner	^owner</body><body package="Facebook-Domain" selector="owner:">owner: anObject	owner := anObject</body><body package="Facebook-Domain" selector="pid">pid	^pid</body><body package="Facebook-Domain" selector="pid:">pid: anObject	pid := anObject</body><body package="Facebook-Domain" selector="src">src	^src</body><body package="Facebook-Domain" selector="src:">src: anObject	src := anObject</body><body package="Facebook-Domain" selector="src_big">src_big	^src_big</body><body package="Facebook-Domain" selector="src_big:">src_big: anObject	src_big := anObject</body><body package="Facebook-Domain" selector="src_small">src_small	^src_small</body><body package="Facebook-Domain" selector="src_small:">src_small: anObject	src_small := anObject</body></methods><methods><class-id>Facebook.Photo</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', caption, ']'</body></methods><methods><class-id>Facebook.ProfileFBML</class-id> <category>accessing</category><body package="Facebook-Domain" selector="mobile_profile">mobile_profile	^mobile_profile</body><body package="Facebook-Domain" selector="mobile_profile:">mobile_profile: anObject	mobile_profile := anObject</body><body package="Facebook-Domain" selector="profile">profile	^profile</body><body package="Facebook-Domain" selector="profile:">profile: anObject	profile := anObject</body><body package="Facebook-Domain" selector="profile_main">profile_main	^profile_main</body><body package="Facebook-Domain" selector="profile_main:">profile_main: anObject	profile_main := anObject</body></methods><methods><class-id>Facebook.ProfileFBML</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.</body></methods><methods><class-id>Facebook.ProfileFBML</class-id> <category>convenience</category><body package="Facebook-Domain" selector="addParametersTo:">addParametersTo: api	profile ifNotNil: [api addParameter: 'profile' -&gt; profile].	mobile_profile ifNotNil: [api addParameter: 'mobile_profile' -&gt; mobile_profile].	profile_main ifNotNil: [api addParameter: 'profile_main' -&gt; profile_main].	"added in as per doc: http://wiki.developers.facebook.com/index.php/Profile.setFBML"	api addParameter: 'profile_action' -&gt; nil</body></methods><methods><class-id>Facebook.Link</class-id> <category>accessing</category><body package="Facebook-Domain" selector="created_time">created_time	^created_time</body><body package="Facebook-Domain" selector="created_time:">created_time: anObject	created_time := anObject</body><body package="Facebook-Domain" selector="image_urls">image_urls	^image_urls</body><body package="Facebook-Domain" selector="image_urls:">image_urls: anObject	image_urls := anObject</body><body package="Facebook-Domain" selector="link_id">link_id	^link_id</body><body package="Facebook-Domain" selector="link_id:">link_id: anObject	link_id := anObject</body><body package="Facebook-Domain" selector="owner">owner	^owner</body><body package="Facebook-Domain" selector="owner:">owner: anObject	owner := anObject</body><body package="Facebook-Domain" selector="owner_comment">owner_comment	^owner_comment</body><body package="Facebook-Domain" selector="owner_comment:">owner_comment: anObject	owner_comment := anObject</body><body package="Facebook-Domain" selector="summary">summary	^summary</body><body package="Facebook-Domain" selector="summary:">summary: anObject	summary := anObject</body><body package="Facebook-Domain" selector="title">title	^title</body><body package="Facebook-Domain" selector="title:">title: anObject	title := anObject</body><body package="Facebook-Domain" selector="url">url	^url</body><body package="Facebook-Domain" selector="url:">url: anObject	url := anObject</body></methods><methods><class-id>Facebook.Link</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	super from: dictionary.	created_time := Timestamp fromUnixSeconds: created_time asNumber</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	title := ''</body></methods><methods><class-id>Facebook.Link</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', self title, ']'</body></methods><methods><class-id>Facebook.PhotoTag</class-id> <category>accessing</category><body package="Facebook-Domain" selector="created">created	^created</body><body package="Facebook-Domain" selector="created:">created: anObject	created := anObject</body><body package="Facebook-Domain" selector="pid">pid	^pid</body><body package="Facebook-Domain" selector="pid:">pid: anObject	pid := anObject</body><body package="Facebook-Domain" selector="subject">subject	^subject</body><body package="Facebook-Domain" selector="subject:">subject: anObject	subject := anObject</body><body package="Facebook-Domain" selector="text">text	^text</body><body package="Facebook-Domain" selector="text:">text: anObject	text := anObject</body><body package="Facebook-Domain" selector="xcoord">xcoord	^xcoord</body><body package="Facebook-Domain" selector="xcoord:">xcoord: anObject	xcoord := anObject</body><body package="Facebook-Domain" selector="ycoord">ycoord	^ycoord</body><body package="Facebook-Domain" selector="ycoord:">ycoord: anObject	ycoord := anObject</body></methods><methods><class-id>Facebook.PhotoTag</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	super from: dictionary.	created := Timestamp fromUnixSeconds: created asNumber</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	text := ''</body></methods><methods><class-id>Facebook.PhotoTag</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', text, ']'</body></methods><methods><class-id>Facebook.Note</class-id> <category>accessing</category><body package="Facebook-Domain" selector="created_time">created_time	^created_time</body><body package="Facebook-Domain" selector="created_time:">created_time: anObject	created_time := anObject</body><body package="Facebook-Domain" selector="note_id">note_id	^note_id</body><body package="Facebook-Domain" selector="note_id:">note_id: anObject	note_id := anObject</body><body package="Facebook-Domain" selector="title">title	^title</body><body package="Facebook-Domain" selector="title:">title: anObject	title := anObject</body><body package="Facebook-Domain" selector="uid">uid	^uid</body><body package="Facebook-Domain" selector="uid:">uid: anObject	uid := anObject</body><body package="Facebook-Domain" selector="updated_time">updated_time	^updated_time</body><body package="Facebook-Domain" selector="updated_time:">updated_time: anObject	updated_time := anObject</body></methods><methods><class-id>Facebook.Note</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	super from: dictionary.	created_time := Timestamp fromUnixSeconds: created_time asNumber.	updated_time := Timestamp fromUnixSeconds: updated_time asNumber</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	title := ''</body></methods><methods><class-id>Facebook.Note</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [ ', self title, ']'.</body></methods><methods><class-id>Facebook.VideoLimitInfo</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	length := nil.	size := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Facebook.VideoLimitInfo</class-id> <category>accessing</category><body package="Facebook-Domain" selector="length">length	^length</body><body package="Facebook-Domain" selector="length:">length: anObject	length := anObject</body><body package="Facebook-Domain" selector="size1">size1	^size</body><body package="Facebook-Domain" selector="size:">size: anObject	size := anObject</body></methods><methods><class-id>Facebook.VideoLimitInfo</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [ max length: ', (length/60) printString, ' minutes, max size: ', (size/1024) printString, ' kbytes]'</body></methods><methods><class-id>Facebook.FacebookSecretHolder</class-id> <category>initialize-release</category><body package="FacebookConnect" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	" *** Edit the following to properly initialize instance variables ***"	apiKey := nil.	secretKey := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Facebook.FacebookSecretHolder</class-id> <category>accessing</category><body package="FacebookConnect" selector="apiKey">apiKey	^apiKey</body><body package="FacebookConnect" selector="apiKey:">apiKey: anObject	apiKey := anObject</body><body package="FacebookConnect" selector="applicationId">applicationId	^applicationId</body><body package="FacebookConnect" selector="applicationId:">applicationId: anObject	applicationId := anObject</body><body package="FacebookConnect" selector="secretKey">secretKey	^secretKey</body><body package="FacebookConnect" selector="secretKey:">secretKey: anObject	secretKey := anObject</body></methods><methods><class-id>Facebook.FacebookSecretHolder class</class-id> <category>instance creation</category><body package="FacebookConnect" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Facebook.ErrorReturn</class-id> <category>accessing</category><body package="FacebookConnect" selector="error_code">error_code	^error_code</body><body package="FacebookConnect" selector="error_code:">error_code: anObject	error_code := anObject</body><body package="FacebookConnect" selector="error_msg">error_msg	^error_msg</body><body package="FacebookConnect" selector="error_msg:">error_msg: anObject	error_msg := anObject</body><body package="FacebookConnect" selector="request_args">request_args	^request_args</body><body package="FacebookConnect" selector="request_args:">request_args: anObject	request_args := anObject</body></methods><methods><class-id>Facebook.ErrorReturn</class-id> <category>initialize-release</category><body package="FacebookConnect" selector="initialize">initialize	"set with defaults that would not come from Facebook"	super initialize.	error_code := 999.	error_msg := 'An Unknown Error Occured'.	request_args := nil.</body></methods><methods><class-id>Facebook.ErrorReturn</class-id> <category>printing</category><body package="FacebookConnect" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', self error_msg, ']'</body></methods><methods><class-id>Facebook.ErrorReturn</class-id> <category>testing</category><body package="FacebookConnect" selector="isFacebookError">isFacebookError	^true</body></methods><methods><class-id>Facebook.MediaUploadObject</class-id> <category>api</category><body package="Facebook-Domain" selector="baseFilename">baseFilename	^filename asFilename tail</body><body package="Facebook-Domain" selector="closeStream">closeStream	stream 		ifNotNil: [stream close.				stream := nil]</body><body package="Facebook-Domain" selector="getStream">getStream	stream := filename asFilename readStream.	stream binary.	^stream</body></methods><methods><class-id>Facebook.MediaUploadObject</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.</body></methods><methods><class-id>Facebook.MediaUploadObject</class-id> <category>accessing</category><body package="Facebook-Domain" selector="stream">stream	^stream</body><body package="Facebook-Domain" selector="stream:">stream: anObject	stream := anObject</body></methods><methods><class-id>Facebook.Template</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	super from: dictionary.	short_story_templates := short_story_templates collect: [:each | ShortStoryTemplate from: each].	action_links := action_links collect: [:each | ActionLink from: each].</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	one_line_story_templates := OrderedCollection new.	short_story_templates := OrderedCollection new.	full_story_templates := nil.	action_links := OrderedCollection new.</body></methods><methods><class-id>Facebook.Template</class-id> <category>accessing</category><body package="Facebook-Domain" selector="action_links">action_links	^action_links</body><body package="Facebook-Domain" selector="action_links:">action_links: anObject	action_links := anObject</body><body package="Facebook-Domain" selector="full_story_templates">full_story_templates	^full_story_templates</body><body package="Facebook-Domain" selector="full_story_templates:">full_story_templates: anObject	full_story_templates := anObject</body><body package="Facebook-Domain" selector="one_line_story_template:">one_line_story_template: anObject	one_line_story_template := anObject</body><body package="Facebook-Domain" selector="one_line_story_templates">one_line_story_templates	^one_line_story_templates</body><body package="Facebook-Domain" selector="one_line_story_templates:">one_line_story_templates: anObject	one_line_story_templates := anObject</body><body package="Facebook-Domain" selector="short_story_templates">short_story_templates	^short_story_templates</body><body package="Facebook-Domain" selector="short_story_templates:">short_story_templates: anObject	short_story_templates := anObject</body></methods><methods><class-id>Facebook.StreamMessage</class-id> <category>accessing</category><body package="Facebook-Domain" selector="actor_id">actor_id	^actor_id</body><body package="Facebook-Domain" selector="actor_id:">actor_id: anObject	actor_id := anObject</body><body package="Facebook-Domain" selector="app_data">app_data	^app_data</body><body package="Facebook-Domain" selector="app_data:">app_data: anObject	app_data := anObject</body><body package="Facebook-Domain" selector="app_id">app_id	^app_id</body><body package="Facebook-Domain" selector="app_id:">app_id: anObject	app_id := anObject</body><body package="Facebook-Domain" selector="attachment">attachment	^attachment</body><body package="Facebook-Domain" selector="attachment:">attachment: anObject	attachment := anObject</body><body package="Facebook-Domain" selector="comments">comments	^comments</body><body package="Facebook-Domain" selector="comments:">comments: anObject	comments := anObject</body><body package="Facebook-Domain" selector="created_time">created_time	^created_time</body><body package="Facebook-Domain" selector="created_time:">created_time: anObject	created_time := anObject</body><body package="Facebook-Domain" selector="filter_key">filter_key	^filter_key</body><body package="Facebook-Domain" selector="filter_key:">filter_key: anObject	filter_key := anObject</body><body package="Facebook-Domain" selector="likes">likes	^likes</body><body package="Facebook-Domain" selector="likes:">likes: anObject	likes := anObject</body><body package="Facebook-Domain" selector="message">message	^message		ifNil: [message := '']		ifNotNil: [message]</body><body package="Facebook-Domain" selector="message:">message: anObject	message := anObject</body><body package="Facebook-Domain" selector="permalink">permalink	^permalink</body><body package="Facebook-Domain" selector="permalink:">permalink: anObject	permalink := anObject</body><body package="Facebook-Domain" selector="post_id">post_id	^post_id</body><body package="Facebook-Domain" selector="post_id:">post_id: anObject	post_id := anObject</body><body package="Facebook-Domain" selector="privacy">privacy	^privacy</body><body package="Facebook-Domain" selector="privacy:">privacy: anObject	privacy := anObject</body><body package="Facebook-Domain" selector="profile">profile	^profile</body><body package="Facebook-Domain" selector="profile:">profile: anObject	profile := anObject</body><body package="Facebook-Domain" selector="source_id">source_id	^source_id</body><body package="Facebook-Domain" selector="source_id:">source_id: anObject	source_id := anObject</body><body package="Facebook-Domain" selector="type">type	^type</body><body package="Facebook-Domain" selector="type:">type: anObject	type := anObject</body><body package="Facebook-Domain" selector="updated_time">updated_time	^updated_time</body><body package="Facebook-Domain" selector="updated_time:">updated_time: anObject	updated_time := anObject</body><body package="Facebook-Domain" selector="viewer_id">viewer_id	^viewer_id</body><body package="Facebook-Domain" selector="viewer_id:">viewer_id: anObject	viewer_id := anObject</body></methods><methods><class-id>Facebook.StreamMessage</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	super from: dictionary.	created_time := Timestamp fromUnixSeconds: created_time.	updated_time := Timestamp fromUnixSeconds: updated_time.	comments := StreamComment from: comments</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	actor_id := nil.	app_data := nil.	app_id := nil.	attachment := nil.	comments := nil.	created_time := nil.	filter_key := nil.	likes := nil.	message := nil.	permalink := nil.	post_id := nil.	privacy := nil.	source_id := nil.	type := nil.	updated_time := nil.	viewer_id := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Facebook.StreamMessage</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', self message, ']'</body></methods><methods><class-id>Facebook.EventInfo</class-id> <category>accessing</category><body package="Facebook-Domain" selector="category">category	^category</body><body package="Facebook-Domain" selector="category:">category: anObject	category := anObject</body><body package="Facebook-Domain" selector="city">city	^city</body><body package="Facebook-Domain" selector="city:">city: anObject	city := anObject</body><body package="Facebook-Domain" selector="description">description	^description</body><body package="Facebook-Domain" selector="description:">description: anObject	description := anObject</body><body package="Facebook-Domain" selector="email">email	^email</body><body package="Facebook-Domain" selector="email:">email: anObject	email := anObject</body><body package="Facebook-Domain" selector="end_time">end_time	^end_time</body><body package="Facebook-Domain" selector="end_time:">end_time: anObject	end_time := anObject</body><body package="Facebook-Domain" selector="host">host	^host</body><body package="Facebook-Domain" selector="host:">host: anObject	host := anObject</body><body package="Facebook-Domain" selector="location">location	^location</body><body package="Facebook-Domain" selector="location:">location: anObject	location := anObject</body><body package="Facebook-Domain" selector="name">name	^name</body><body package="Facebook-Domain" selector="name:">name: anObject	name := anObject</body><body package="Facebook-Domain" selector="page_id">page_id	^page_id</body><body package="Facebook-Domain" selector="page_id:">page_id: anObject	page_id := anObject</body><body package="Facebook-Domain" selector="phone">phone	^phone</body><body package="Facebook-Domain" selector="phone:">phone: anObject	phone := anObject</body><body package="Facebook-Domain" selector="privacy_type">privacy_type	^privacy_type</body><body package="Facebook-Domain" selector="privacy_type:">privacy_type: anObject	privacy_type := anObject</body><body package="Facebook-Domain" selector="start_time">start_time	^start_time</body><body package="Facebook-Domain" selector="start_time:">start_time: anObject	start_time := anObject</body><body package="Facebook-Domain" selector="street">street	^street</body><body package="Facebook-Domain" selector="street:">street: anObject	street := anObject</body><body package="Facebook-Domain" selector="subcategory">subcategory	^subcategory</body><body package="Facebook-Domain" selector="subcategory:">subcategory: anObject	subcategory := anObject</body><body package="Facebook-Domain" selector="tagline">tagline	^tagline</body><body package="Facebook-Domain" selector="tagline:">tagline: anObject	tagline := anObject</body></methods><methods><class-id>Facebook.EventInfo</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	super from: dictionary.	start_time := Timestamp fromUnixSeconds: start_time asNumber.	end_time := Timestamp fromUnixSeconds: end_time asUnixSeconds.</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.</body></methods><methods><class-id>Facebook.EventInfo</class-id> <category>testing</category><body package="Facebook-Domain" selector="isValid">isValid	"answer true if all the required parameters are set"	| required |	required := #(name category subcategory host location city start_time end_time).	^(required detect: [:each | (self perform: each) isNil] ifNone: [nil]) isNil.</body><body package="Facebook-Domain" selector="isValidForEdit">isValidForEdit	"answer true if all the required parameters are set"	| required |	required := #( category subcategory host location city start_time end_time).	^(required detect: [:each | (self perform: each) isNil] ifNone: [nil]) isNil.</body></methods><methods><class-id>Facebook.EventInfo</class-id> <category>converting</category><body package="Facebook-Domain" selector="jsonInstVarNames">jsonInstVarNames	"remove ones that have nil in them"	| all |	all := self class jsonInstVarNames.	^all select: [:each |		| msg |		msg := each asSymbol.		(self perform: msg) notNil]</body></methods><methods><class-id>Facebook.Affiliation</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	name := 'unknown'</body></methods><methods><class-id>Facebook.Affiliation</class-id> <category>accessing</category><body package="Facebook-Domain" selector="name">name	^name</body><body package="Facebook-Domain" selector="name:">name: anObject	name := anObject</body><body package="Facebook-Domain" selector="nid">nid	^nid</body><body package="Facebook-Domain" selector="nid:">nid: anObject	nid := anObject</body><body package="Facebook-Domain" selector="status">status	^status</body><body package="Facebook-Domain" selector="status:">status: anObject	status := anObject</body><body package="Facebook-Domain" selector="type">type	^type</body><body package="Facebook-Domain" selector="type:">type: anObject	type := anObject</body><body package="Facebook-Domain" selector="year">year	^year</body><body package="Facebook-Domain" selector="year:">year: anObject	year := anObject</body></methods><methods><class-id>Facebook.Affiliation</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', self name, ']'</body></methods><methods><class-id>Facebook.FacebookInterface</class-id> <category>initialize-release</category><body package="FacebookConnect" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	parameters := SortedCollection sortBlock:  [:a :b | a key &lt;= b key].	simulateCalls := false.	cachedParameters := Dictionary new</body></methods><methods><class-id>Facebook.FacebookInterface</class-id> <category>accessing</category><body package="FacebookConnect" selector="parameters">parameters	^parameters</body><body package="FacebookConnect" selector="parameters:">parameters: anObject	parameters := anObject</body><body package="FacebookConnect" selector="parametersAsDictionary">parametersAsDictionary	"answer a dictionary of the parameters"	| dictionary |	dictionary := Dictionary new.	parameters do: [:each |		dictionary at: each key put: each value].	^dictionary</body><body package="FacebookConnect" selector="postData">postData	^postData</body><body package="FacebookConnect" selector="postData:">postData: anObject	postData := anObject</body><body package="FacebookConnect" selector="results">results	^results</body><body package="FacebookConnect" selector="results:">results: anObject	results := anObject</body><body package="FacebookConnect" selector="simulateCalls">simulateCalls	^simulateCalls</body><body package="FacebookConnect" selector="simulateCalls:">simulateCalls: anObject	simulateCalls := anObject</body></methods><methods><class-id>Facebook.FacebookInterface</class-id> <category>private</category><body package="FacebookConnect" selector="cacheParameters:">cacheParameters: methodName	cachedParameters at: methodName put: self parametersAsDictionary</body><body package="FacebookConnect" selector="clearParameters">clearParameters	parameters := SortedCollection sortBlock:  [:a :b | a key &lt;= b key].</body><body package="FacebookConnect" selector="createFetchSignatureFor:inSession:">createFetchSignatureFor: secretHolder inSession: session	"create the signature argument"	| stream |	stream := WriteStream on: String new.	stream nextPutAll: 'app_id=', secretHolder applicationId.	stream nextPutAll: 'session_key=', session key.	stream nextPutAll: 'source_id=', session uid printString.	stream nextPutAll: session secret.	^(MD5 hash: stream contents) asHexString asLowercase</body><body package="FacebookConnect" selector="getUrlWithSecret:url:session:">getUrlWithSecret: secretHolder url: activityStreamUrl session: session	| stream sigString |	stream := WriteStream on: String new.	stream nextPutAll: activityStreamUrl.	sigString := self 			createFetchSignatureFor: secretHolder 			inSession: session.	stream nextPut: $?.	stream nextPutAll: 'source_id=' , session uid printString.	stream nextPutAll: '&amp;app_id=' , secretHolder applicationId.	stream nextPutAll: '&amp;session_key=' , session key.	stream nextPutAll: '&amp;sig=' , sigString."	stream nextPutAll: '&amp;v=0.7'.	stream nextPutAll: '&amp;read'."	^stream contents</body><body package="FacebookConnect" selector="restAPIEndpoint">restAPIEndpoint	^self restAPIEndpointFor: nil</body><body package="FacebookConnect" selector="restAPIEndpointFor:">restAPIEndpointFor: method	"Video uploads use a different endpoint.  This might need better factoring in the future"	^method = 'Video.upload'		ifTrue: ['http://api-video.facebook.com/']		ifFalse: ['http://api.facebook.com/restserver.php']</body><body package="FacebookConnect" selector="setAgentFor:">setAgentFor: request	"This is hardcoded here; it really needs to be some kind of setting"	(request getFieldAt: 'User-Agent')		value: 'BottomFeeder/4.6 unix bsd apple I386 MacOSX; en_US.UTF-8; NetResources/1'.</body></methods><methods><class-id>Facebook.FacebookInterface</class-id> <category>api</category><body package="FacebookConnect" selector="addParameter:">addParameter: parameter	"add a key/value pair"	self parameters add: parameter</body><body package="FacebookConnect" selector="clearCachedParameters">clearCachedParameters	cachedParameters := Dictionary new</body><body package="FacebookConnect" selector="executeMethod:withKey:withSecret:">executeMethod: methodName withKey: key withSecret: secret	"execute the named API"	^self		executeMethod: methodName		withKey: key		withSecret: secret		secure: false</body><body package="FacebookConnect" selector="executeMethod:withKey:withSecret:secure:">executeMethod: methodName withKey: key withSecret: secret secure: shouldUseHttps	"execute the named API"	| sig |	self parameters add: 'method' -&gt; methodName.	self parameters add: 'api_key' -&gt; key.	self parameters add: 'v' -&gt; '1.0'.	self parameters add: 'format' -&gt; 'json'.	sig := self createSignatureWith: secret.	self parameters add: 'sig' -&gt; sig.	simulateCalls		ifTrue: [self cacheParameters: methodName.				parameters := SortedCollection sortBlock:  [:a :b | a key &lt;= b key].				^nil].	results := [self doPost: shouldUseHttps]				ensure: [self cleanupPostData].	parameters := SortedCollection sortBlock:  [:a :b | a key &lt;= b key].	^results		ifNil: [nil]		ifNotNil: [results contents isEmpty 					ifTrue: [nil]					ifFalse: [JsonReader readFrom: results contents readStream]]</body><body package="FacebookConnect" selector="fetchUrl:withHolder:forSession:">fetchUrl: activityStreamUrl withHolder: secretHolder forSession: session	"simply execute the request and send back the content"	| url client response request |	url := self getUrlWithSecret: secretHolder  url: activityStreamUrl session: session.	client := HttpClient new.	request := HttpRequest get: url.	self setAgentFor: request.	response := [client executeRequest: request]				on: HttpException , OSErrorHolder peerFaultSignal				do: [:ex | nil].	response ifNil: [^nil].	^response contents</body></methods><methods><class-id>Facebook.FacebookInterface</class-id> <category>private-post</category><body package="FacebookConnect" selector="addPostDataTo:">addPostDataTo: request	"add the post data to the request.  We have to add the stream here, and then close it outside this method"	request 		addFormKey: 'filename' 		filename: postData baseFilename 		source: postData getStream</body><body package="FacebookConnect" selector="cleanupPostData">cleanupPostData	postData		ifNotNil: [postData closeStream.				postData := nil].</body><body package="FacebookConnect" selector="createSignatureWith:">createSignatureWith: secret	"create the signature argument"	| stream |	stream := WriteStream on: String new.	self parameters do: [:each |		stream nextPutAll: each key.		stream nextPut: $=.		stream nextPutAll: each value].	stream nextPutAll: secret.	^(MD5 hash: stream contents) asHexString asLowercase</body><body package="FacebookConnect" selector="doPost:">doPost: shouldUseHttps	"we create a request and execute it.  right now, most http level errors are captured and ignored; it's probably the	case that they should be reported better"	| client  request |	client := HttpClient new.	request := client requestClass method: 'POST' url: self restAPIEndpoint.	self postData ifNotNil: [request beMultipart].	self parameters do: [:each |		request addFormKey: each key value: each value].	self postData ifNotNil: [self addPostDataTo: request].	^[client executeRequest: request]				on: HttpException, OSErrorHolder peerFaultSignal				do: [:ex | nil].</body><body package="FacebookConnect" selector="urlEncodedArrayOfCachedParameters">urlEncodedArrayOfCachedParameters	| collection |	collection := OrderedCollection new.	cachedParameters keysAndValuesDo: [:key :value |		| stream |		stream := WriteStream on: (String new: 1000).		stream nextPutAll: 'method='.		stream nextPutAll: key.		stream nextPut: $&amp;.		value removeKey: 'method' ifAbsent: [nil].		value keysAndValuesDo: [:key1 :value1 |			stream nextPutAll: key1.			stream nextPut: $=.			stream nextPutAll: value1].		collection add: stream contents].	^collection</body></methods><methods><class-id>Facebook.FacebookInterface class</class-id> <category>instance creation</category><body package="FacebookConnect" selector="new">new	^super new initialize</body></methods><methods><class-id>Facebook.FBMLAttribute</class-id> <category>accessing</category><body package="Facebook-Domain" selector="default_value">default_value	^default_value</body><body package="Facebook-Domain" selector="default_value:">default_value: anObject	default_value := anObject</body><body package="Facebook-Domain" selector="description">description	^description</body><body package="Facebook-Domain" selector="description:">description: anObject	description := anObject</body><body package="Facebook-Domain" selector="name">name	^name</body><body package="Facebook-Domain" selector="name:">name: anObject	name := anObject</body></methods><methods><class-id>Facebook.FBMLAttribute</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	name := ''.	description := ''.	default_value := ''.</body></methods><methods><class-id>Facebook.FBMLAttribute</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', name, ']'</body></methods><methods><class-id>Facebook.VideoUpload</class-id> <category>accessing</category><body package="Facebook-Domain" selector="description">description	^description</body><body package="Facebook-Domain" selector="description:">description: anObject	description := anObject</body><body package="Facebook-Domain" selector="title">title	^title</body><body package="Facebook-Domain" selector="title:">title: anObject	title := anObject</body><body package="Facebook-Domain" selector="vid">vid	^vid</body><body package="Facebook-Domain" selector="vid:">vid: anObject	vid := anObject</body></methods><methods><class-id>Facebook.VideoUpload</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	title := ''</body></methods><methods><class-id>Facebook.VideoUpload</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', title, ']'</body></methods><methods><class-id>Facebook.VideoUpload</class-id> <category>convenience</category><body package="Facebook-Domain" selector="addParametersTo:">addParametersTo: api	"add the post parameters"	api postData: self.	title ifNotNil: [api addParameter: 'title' -&gt; title].	description ifNotNil: [api addParameter: 'description' -&gt; description].</body></methods><methods><class-id>Facebook.PageInfo</class-id> <category>accessing</category><body package="Facebook-Domain" selector="awards">awards	^awards</body><body package="Facebook-Domain" selector="awards:">awards: anObject	awards := anObject</body><body package="Facebook-Domain" selector="band_members">band_members	^band_members</body><body package="Facebook-Domain" selector="band_members:">band_members: anObject	band_members := anObject</body><body package="Facebook-Domain" selector="bio">bio	^bio</body><body package="Facebook-Domain" selector="bio:">bio: anObject	bio := anObject</body><body package="Facebook-Domain" selector="company_overview">company_overview	^company_overview</body><body package="Facebook-Domain" selector="company_overview:">company_overview: anObject	company_overview := anObject</body><body package="Facebook-Domain" selector="directed_by">directed_by	^directed_by</body><body package="Facebook-Domain" selector="directed_by:">directed_by: anObject	directed_by := anObject</body><body package="Facebook-Domain" selector="founded">founded	^founded</body><body package="Facebook-Domain" selector="founded:">founded: anObject	founded := anObject</body><body package="Facebook-Domain" selector="genre">genre	^genre</body><body package="Facebook-Domain" selector="genre:">genre: anObject	genre := anObject</body><body package="Facebook-Domain" selector="has_added_app">has_added_app	^has_added_app</body><body package="Facebook-Domain" selector="has_added_app:">has_added_app: anObject	has_added_app := anObject</body><body package="Facebook-Domain" selector="hometown">hometown	^hometown</body><body package="Facebook-Domain" selector="hometown:">hometown: anObject	hometown := anObject</body><body package="Facebook-Domain" selector="hours">hours	^hours</body><body package="Facebook-Domain" selector="hours:">hours: anObject	hours := anObject</body><body package="Facebook-Domain" selector="influences">influences	^influences</body><body package="Facebook-Domain" selector="influences:">influences: anObject	influences := anObject</body><body package="Facebook-Domain" selector="location">location	^location</body><body package="Facebook-Domain" selector="location:">location: anObject	location := anObject</body><body package="Facebook-Domain" selector="mission">mission	^mission</body><body package="Facebook-Domain" selector="mission:">mission: anObject	mission := anObject</body><body package="Facebook-Domain" selector="name">name	^name</body><body package="Facebook-Domain" selector="name:">name: anObject	name := anObject</body><body package="Facebook-Domain" selector="network">network	^network</body><body package="Facebook-Domain" selector="network:">network: anObject	network := anObject</body><body package="Facebook-Domain" selector="page_id">page_id	^page_id</body><body package="Facebook-Domain" selector="page_id:">page_id: anObject	page_id := anObject</body><body package="Facebook-Domain" selector="pic">pic	^pic</body><body package="Facebook-Domain" selector="pic:">pic: anObject	pic := anObject</body><body package="Facebook-Domain" selector="pic_big">pic_big	^pic_big</body><body package="Facebook-Domain" selector="pic_big:">pic_big: anObject	pic_big := anObject</body><body package="Facebook-Domain" selector="pic_large">pic_large	^pic_large</body><body package="Facebook-Domain" selector="pic_large:">pic_large: anObject	pic_large := anObject</body><body package="Facebook-Domain" selector="pic_small">pic_small	^pic_small</body><body package="Facebook-Domain" selector="pic_small:">pic_small: anObject	pic_small := anObject</body><body package="Facebook-Domain" selector="pic_square">pic_square	^pic_square</body><body package="Facebook-Domain" selector="pic_square:">pic_square: anObject	pic_square := anObject</body><body package="Facebook-Domain" selector="plot_outline">plot_outline	^plot_outline</body><body package="Facebook-Domain" selector="plot_outline:">plot_outline: anObject	plot_outline := anObject</body><body package="Facebook-Domain" selector="produced_by">produced_by	^produced_by</body><body package="Facebook-Domain" selector="produced_by:">produced_by: anObject	produced_by := anObject</body><body package="Facebook-Domain" selector="products">products	^products</body><body package="Facebook-Domain" selector="products:">products: anObject	products := anObject</body><body package="Facebook-Domain" selector="record_label">record_label	^record_label</body><body package="Facebook-Domain" selector="record_label:">record_label: anObject	record_label := anObject</body><body package="Facebook-Domain" selector="release_date">release_date	^release_date</body><body package="Facebook-Domain" selector="release_date:">release_date: anObject	release_date := anObject</body><body package="Facebook-Domain" selector="schedule">schedule	^schedule</body><body package="Facebook-Domain" selector="schedule:">schedule: anObject	schedule := anObject</body><body package="Facebook-Domain" selector="season">season	^season</body><body package="Facebook-Domain" selector="season:">season: anObject	season := anObject</body><body package="Facebook-Domain" selector="starring">starring	^starring</body><body package="Facebook-Domain" selector="starring:">starring: anObject	starring := anObject</body><body package="Facebook-Domain" selector="street">street	^street</body><body package="Facebook-Domain" selector="street:">street: anObject	street := anObject</body><body package="Facebook-Domain" selector="studio">studio	^studio</body><body package="Facebook-Domain" selector="studio:">studio: anObject	studio := anObject</body><body package="Facebook-Domain" selector="type">type	^type</body><body package="Facebook-Domain" selector="type:">type: anObject	type := anObject</body><body package="Facebook-Domain" selector="website">website	^website</body><body package="Facebook-Domain" selector="website:">website: anObject	website := anObject</body><body package="Facebook-Domain" selector="written_by">written_by	^written_by</body><body package="Facebook-Domain" selector="written_by:">written_by: anObject	written_by := anObject</body></methods><methods><class-id>Facebook.PageInfo</class-id> <category>convenience</category><body package="Facebook-Domain" selector="addParametersTo:">addParametersTo: api	"any non-nil fields will go into the query.  Note that the values are not relevant; this is for QBE purposes.  Thus, stuffing any	object into a field is ok here"	| instVarsAsArray notNils |	instVarsAsArray := self class allInstVarNames.	notNils := instVarsAsArray select: [:each |		| msg val |		msg := each asSymbol.		val := self perform: msg.		val notNil].	api addParameter: 'fields' -&gt; notNils asCommaDelimitedString</body><body package="Facebook-Domain" selector="getFullQBE">getFullQBE	"Stuff something into all fields for the QBE"	| instVarsAsArray |	instVarsAsArray := self class allInstVarNames.	instVarsAsArray do: [:each |		| msg  |		msg := (each, ':')  asSymbol.		self perform: msg with: Object new].</body></methods><methods><class-id>Facebook.PageInfo</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	name		ifNil: [stream nextPutAll: ' [', page_id printString, ']']		ifNotNil: [stream nextPutAll: ' [', name, ' - ', page_id printString, ']']</body></methods><methods><class-id>Facebook.PageInfo</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.</body></methods><methods><class-id>Facebook.FriendComparisonResult</class-id> <category>accessing</category><body package="Facebook-Domain" selector="are_friends">are_friends	^are_friends</body><body package="Facebook-Domain" selector="are_friends:">are_friends: anObject	are_friends := anObject</body><body package="Facebook-Domain" selector="uid1">uid1	^uid1</body><body package="Facebook-Domain" selector="uid1:">uid1: anObject	uid1 := anObject</body><body package="Facebook-Domain" selector="uid2">uid2	^uid2</body><body package="Facebook-Domain" selector="uid2:">uid2: anObject	uid2 := anObject</body></methods><methods><class-id>Facebook.FriendComparisonResult</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	uid1 := nil.	are_friends := nil.	uid2 := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Facebook.FriendComparisonResult</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: '[ ', self are_friends printString, ']'</body></methods><methods><class-id>Facebook.FriendComparisonResult</class-id> <category>api</category><body package="Facebook-Domain" selector="reifyFrom:">reifyFrom: arrayOfFriends	| friend |	friend := arrayOfFriends detect: [:each | each uid = uid1] ifNone: [nil].	friend notNil ifTrue: [uid1 := friend].	friend := arrayOfFriends detect: [:each | each uid = uid2] ifNone: [nil].	friend notNil ifTrue: [uid2 := friend].</body></methods><methods><class-id>Facebook.Venue</class-id> <category>accessing</category><body package="Facebook-Domain" selector="city">city	^city</body><body package="Facebook-Domain" selector="city:">city: anObject	city := anObject</body><body package="Facebook-Domain" selector="country">country	^country</body><body package="Facebook-Domain" selector="country:">country: anObject	country := anObject</body><body package="Facebook-Domain" selector="latitude">latitude	^latitude</body><body package="Facebook-Domain" selector="latitude:">latitude: anObject	latitude := anObject</body><body package="Facebook-Domain" selector="longitude">longitude	^longitude</body><body package="Facebook-Domain" selector="longitude:">longitude: anObject	longitude := anObject</body><body package="Facebook-Domain" selector="state">state	^state</body><body package="Facebook-Domain" selector="state:">state: anObject	state := anObject</body><body package="Facebook-Domain" selector="street">street	^street</body><body package="Facebook-Domain" selector="street:">street: anObject	street := anObject</body></methods><methods><class-id>Facebook.Venue</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	city := 'unknown'.	country := 'unknown'</body></methods><methods><class-id>Facebook.Venue</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', self city, ', ', self country, ']'</body></methods><methods><class-id>Facebook.CustomTag</class-id> <category>accessing</category><body package="Facebook-Domain" selector="attributes">attributes	^attributes</body><body package="Facebook-Domain" selector="attributes:">attributes: anObject	attributes := anObject</body><body package="Facebook-Domain" selector="close_tag_fbml">close_tag_fbml	^close_tag_fbml</body><body package="Facebook-Domain" selector="close_tag_fbml:">close_tag_fbml: anObject	close_tag_fbml := anObject</body><body package="Facebook-Domain" selector="description">description	^description</body><body package="Facebook-Domain" selector="description:">description: anObject	description := anObject</body><body package="Facebook-Domain" selector="fbml">fbml	^fbml</body><body package="Facebook-Domain" selector="fbml:">fbml: anObject	fbml := anObject</body><body package="Facebook-Domain" selector="footer_fbml">footer_fbml	^footer_fbml</body><body package="Facebook-Domain" selector="footer_fbml:">footer_fbml: anObject	footer_fbml := anObject</body><body package="Facebook-Domain" selector="header_fbml">header_fbml	^header_fbml</body><body package="Facebook-Domain" selector="header_fbml:">header_fbml: anObject	header_fbml := anObject</body><body package="Facebook-Domain" selector="is_public">is_public	^is_public</body><body package="Facebook-Domain" selector="is_public:">is_public: anObject	is_public := anObject</body><body package="Facebook-Domain" selector="name">name	^name</body><body package="Facebook-Domain" selector="name:">name: anObject	name := anObject</body><body package="Facebook-Domain" selector="open_tag_fbml">open_tag_fbml	^open_tag_fbml</body><body package="Facebook-Domain" selector="open_tag_fbml:">open_tag_fbml: anObject	open_tag_fbml := anObject</body><body package="Facebook-Domain" selector="type">type	^type</body><body package="Facebook-Domain" selector="type:">type: anObject	type := anObject</body></methods><methods><class-id>Facebook.CustomTag</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	name := ''.	type := ''.	description := ''.	is_public := false.	attributes := OrderedCollection new.	fbml := ''.	open_tag_fbml := ''.	close_tag_fbml := ''.	header_fbml := ''.	footer_fbml := ''.</body></methods><methods><class-id>Facebook.CustomTag</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', name, ']'</body></methods><methods><class-id>Facebook.StreamProfile</class-id> <category>accessing</category><body package="Facebook-Domain" selector="id">id	^id</body><body package="Facebook-Domain" selector="id:">id: anObject	id := anObject</body><body package="Facebook-Domain" selector="name">name	^name</body><body package="Facebook-Domain" selector="name:">name: anObject	name := anObject</body><body package="Facebook-Domain" selector="pic_square">pic_square	^pic_square</body><body package="Facebook-Domain" selector="pic_square:">pic_square: anObject	pic_square := anObject</body><body package="Facebook-Domain" selector="url">url	^url</body><body package="Facebook-Domain" selector="url:">url: anObject	url := anObject</body></methods><methods><class-id>Facebook.StreamProfile</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', name, ']'</body></methods><methods><class-id>Facebook.StreamProfile</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	pic_square := 'http://www.cincomsmalltalk.com/images/CSClogo60x60-000onDDA.gif'.	name := 'Unknown'.	id := nil.	url := nil.</body></methods><methods><class-id>Facebook.Connection</class-id> <category>accessing</category><body package="FacebookConnect" selector="api">api	^api</body><body package="FacebookConnect" selector="api:">api: anObject	api := anObject</body><body package="FacebookConnect" selector="applicationId">applicationId	^self secretHolder applicationId</body><body package="FacebookConnect" selector="authToken">authToken	^authToken</body><body package="FacebookConnect" selector="authToken:">authToken: anObject	authToken := anObject</body><body package="FacebookConnect" selector="cachedParameters">cachedParameters	^cachedParameters</body><body package="FacebookConnect" selector="cachedParameters:">cachedParameters: anObject	cachedParameters := anObject</body><body package="FacebookConnect" selector="secretHolder">secretHolder	^secretHolder</body><body package="FacebookConnect" selector="secretHolder:">secretHolder: anObject	secretHolder := anObject</body><body package="FacebookConnect" selector="session">session	^session</body><body package="FacebookConnect" selector="session:">session: anObject	session := anObject</body></methods><methods><class-id>Facebook.Connection</class-id> <category>private</category><body package="FacebookConnect" selector="addArgumentsFromDictionary:">addArgumentsFromDictionary: dict	"add parameters from the dictionary"	dict keysAndValuesDo: [:key :value |		api addParameter: key -&gt; value]</body><body package="FacebookConnect" selector="addBasicParametersTo:">addBasicParametersTo: api	"these always get added, or nearly always"	api addParameter: 'auth_token' -&gt; self authToken.	api addParameter: 'session_key' -&gt; session key.</body><body package="FacebookConnect" selector="addStandardParameters">addStandardParameters	"these always get added, or nearly always"	api addParameter: 'auth_token' -&gt; self authToken.	api addParameter: 'call_id' -&gt; self getCallID.	api addParameter: 'session_key' -&gt; session key.</body><body package="FacebookConnect" selector="getCallID">getCallID	"answer the call ID - basically, timestamp asSeconds"	^Timestamp now asSeconds printString</body><body package="FacebookConnect" selector="getUrlForLogin">getUrlForLogin	| stream |	stream := WriteStream on: String new.	stream nextPutAll: 'http://www.facebook.com/login.php?api_key='.	stream nextPutAll: self secretHolder apiKey.	stream nextPutAll: '&amp;v=1.0&amp;auth_token='.	stream nextPutAll: self authToken.	^stream contents</body><body package="FacebookConnect" selector="getUrlForPermission:">getUrlForPermission: permissionString	| stream |	stream := WriteStream on: String new.	stream nextPutAll: 'http://www.facebook.com/authorize.php?api_key='.	stream nextPutAll: self secretHolder apiKey.	stream nextPutAll: '&amp;v=1.0&amp;ext_perm=', permissionString.	^stream contents</body><body package="FacebookConnect" selector="objectsFrom:into:">objectsFrom: results into: aClass	"get the object of this type objects"	^results  collect: [:each | | obj |					obj := aClass from: each.					obj]</body><body package="FacebookConnect" selector="possiblyPatchStatusId:">possiblyPatchStatusId: statusId	"an id you get from Facebook needs to be prefixed with 'uid_' to work with the various post/comment lookups"	^(statusId includes: $_)		ifTrue: [statusId]		ifFalse: [session uid printString, '_', statusId]</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-sessions</category><body package="FacebookConnect" selector="clearSession">clearSession	"use this instead of #authExpireSession directly"	self authExpireSession.	self authToken: nil.	self session: nil.</body><body package="FacebookConnect" selector="grantExtendedPermissionFor:">grantExtendedPermissionFor: permissionString	"to do this, must pop up a web page.  Permission types listed here:	http://wiki.developers.facebook.com/index.php/Extended_permissions"	| url |	url := self getUrlForPermission: permissionString.	ExternalWebBrowser open: url</body><body package="FacebookConnect" selector="login">login	"execute login to Facebook.  Use this instead of #authCreateToken directly"	| url |	self authCreateToken.	self authToken ifNil: [^nil].	url := self getUrlForLogin.	ExternalWebBrowser open: url</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-batch</category><body package="FacebookConnect" selector="batchRun:">batchRun: methodFeed	^self		batchRun: methodFeed		runSerially: false</body><body package="FacebookConnect" selector="batchRun:runSerially:">batchRun: methodFeed runSerially: shouldRunSerially	"The input argument should be a JSON encoded array of strings. Each element in the array should contain the full parameters for a method, including method name, sig, etc.  maximum of 15, not checked by this method.  Lines up with the doc, but FB reports 'unknown method'.  "	| results |	self addStandardParameters.	api addParameter: 'method_feed' -&gt; methodFeed.	api addParameter: 'serial_only' -&gt; shouldRunSerially printString.	results := api		executeMethod: 'Batch.run' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="runBatchedCalls">runBatchedCalls	"turn batch mode off, and actually execute them"	| methodFeed jsonArray |	self api simulateCalls: false.	methodFeed := self api urlEncodedArrayOfCachedParameters.	jsonArray := OS.URI encode: methodFeed asJson.	jsonArray := jsonArray copyReplaceAll: '&amp;' with: '%26'.	jsonArray := jsonArray copyReplaceAll: '=' with: '%3D'.	self api clearCachedParameters.	^self batchRun: jsonArray</body><body package="FacebookConnect" selector="startBatchingCalls">startBatchingCalls	"turn batch support on in API"	self api simulateCalls: true</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-auth</category><body package="FacebookConnect" selector="authCreateToken">authCreateToken	"call the create Auth Token API"	| tokenOrNil |	tokenOrNil := self api		executeMethod: 'Auth.createToken'		withKey: secretHolder apiKey		withSecret: secretHolder secretKey.	tokenOrNil ifNotNil: [self authToken: tokenOrNil].	^tokenOrNil notNil</body><body package="FacebookConnect" selector="authExpireSession">authExpireSession	"kill the session we have"	| results |	self session ifNil: [^self].	self addBasicParametersTo: api.	results := api		executeMethod: 'Auth.expireSession' 		withKey: secretHolder apiKey 		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="authGetSession">authGetSession	"call the session creation method"	| results |	api addParameter: 'auth_token' -&gt; self authToken.	results := api		executeMethod: 'Auth.getSession' 		withKey: secretHolder apiKey 		withSecret: secretHolder secretKey		secure: true.	(results includesKey: 'session_key')		ifTrue: [self session: (Session from: results).				^true]		ifFalse: [self clearSession.				^false].</body><body package="FacebookConnect" selector="authPromoteSession">authPromoteSession	"creates or answers a session for client side usage - see http://wiki.developers.facebook.com/index.php/Auth.promoteSession	for details"	| results |	self addStandardParameters.	results := api		executeMethod: 'Auth.promoteSession' 		withKey: secretHolder apiKey 		withSecret: secretHolder secretKey		secure: true.	^self checkForErrors: results</body><body package="FacebookConnect" selector="authRevokeAuthorizationFor:">authRevokeAuthorizationFor: uidOrNil	"revokes session for the named user, or the user of this session"	| results |	self addStandardParameters.	uidOrNil ifNotNil: [api addParameter: 'uid' -&gt; uidOrNil].	results := api		executeMethod: 'Auth.revokeAuthorization' 		withKey: secretHolder apiKey 		withSecret: secretHolder secretKey		secure: true.	^self checkForErrors: results</body><body package="FacebookConnect" selector="authRevokeExtendedPermssionsFor:permission:">authRevokeExtendedPermssionsFor: uid permission: permissionToRevoke	"revokes session for the named user, or the user of this session"	| results |	self addStandardParameters.	api addParameter: 'uid' -&gt; uid.	api addParameter: 'perm' -&gt; permissionToRevoke.	results := api		executeMethod: 'Auth.revokeExtendedPermission' 		withKey: secretHolder apiKey 		withSecret: secretHolder secretKey		secure: true.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>initialize-release</category><body package="FacebookConnect" selector="doRealCalls">doRealCalls	"set up the API to make calls"	api simulateCalls: false</body><body package="FacebookConnect" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	api := FacebookInterface new.</body><body package="FacebookConnect" selector="simulateCalls">simulateCalls	"set up the API to return parameter dictionaries.  This would normally precede a batched call"	api simulateCalls: true</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-admin</category><body package="FacebookConnect" selector="adminBanUsers:">adminBanUsers: usersToBan	"ban the specified users from the app"	| results jsonArray |	jsonArray := usersToBan asJson.	self addStandardParameters.	api addParameter: 'uids' -&gt; jsonArray.	results := api		executeMethod: 'admin.banUsers' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="adminGetAllocation:">adminGetAllocation: allocationName	"get the named allocation information.  For details, see: http://wiki.developers.facebook.com/index.php/Admin.getAllocation"	| results |	self addStandardParameters.	api addParameter: 'integration_point_name' -&gt; allocationName.	results := api		executeMethod: 'admin.getAllocation' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="adminGetAppProperties:">adminGetAppProperties: anArrayOfProperties	"get the application properties.  For details, see: http://wiki.developers.facebook.com/index.php/ApplicationProperties"	| results jsonArray |	jsonArray := anArrayOfProperties asJson.	self addStandardParameters.	api addParameter: 'properties' -&gt; jsonArray.	results := api		executeMethod: 'admin.getAppProperties' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="adminGetBannedUsers:">adminGetBannedUsers: usersToIgnore	"unban the specified users from the app"	| results jsonArray |	usersToIgnore notEmpty		ifTrue: [jsonArray := usersToIgnore asJson].	self addStandardParameters.	jsonArray ifNotNil: [api addParameter: 'uids' -&gt; jsonArray].	results := api		executeMethod: 'admin.getBannedUsers' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="adminGetMetricsStarting:endTime:period:metrics:">adminGetMetricsStarting: startTime endTime: endTime period: days metrics: metrics	"get the named metrics information.  For details, see: http://wiki.developers.facebook.com/index.php/Admin.getMetrics"	| results period metricsArray |	metricsArray := metrics asJson.	period := days * 24 * 60 * 60.	self addStandardParameters.	api addParameter: 'start_time' -&gt; startTime asUnixSeconds printString.	api addParameter: 'end_time' -&gt; endTime asUnixSeconds printString.	api addParameter: 'period' -&gt; period printString.	api addParameter: 'metrics' -&gt; metricsArray.	results := api		executeMethod: 'admin.getMetrics' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="adminGetRestrictionInfo">adminGetRestrictionInfo	"get any demographic restrictions for the app"	| results |	self addStandardParameters.	results := api		executeMethod: 'admin.getRestrictionInfo' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="adminSetAppProperties:">adminSetAppProperties: anArrayOfProperties	"set the application properties.  For details, see: http://wiki.developers.facebook.com/index.php/ApplicationProperties"	| results jsonArray |	jsonArray := anArrayOfProperties asJson.	self addStandardParameters.	api addParameter: 'properties' -&gt; jsonArray.	results := api		executeMethod: 'admin.setAppProperties' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="adminSetRestrictionInfo:">adminSetRestrictionInfo: dictionaryOfRestrictions	"set any demographic restrictions for the app.  See http://wiki.developers.facebook.com/index.php/Admin.setRestrictionInfo	for details on what you can set"	| results jsonArray |	jsonArray := dictionaryOfRestrictions asJson.	self addStandardParameters.	api addParameter: 'restriction_str' -&gt; jsonArray.	results := api		executeMethod: 'admin.setRestrictionInfo' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="adminUnbanUsers:">adminUnbanUsers: usersToUnban	"unban the specified users from the app"	| results jsonArray |	jsonArray := usersToUnban asJson.	self addStandardParameters.	api addParameter: 'uids' -&gt; jsonArray.	results := api		executeMethod: 'admin.unbanUsers' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-friends</category><body package="FacebookConnect" selector="friendsAreFriends:with:">friendsAreFriends: friends1 with: friends2	"check the two against each other for friend matches"	| results uids1 uids2 errorOrNil |	self addStandardParameters.	uids1 := friends1 asCommaDelimitedString.	uids2 := friends2 asCommaDelimitedString.	api addParameter: 'uids1' -&gt; uids1.	api addParameter: 'uids2' -&gt; uids2.	results := api		executeMethod: 'Friends.areFriends' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^results collect: [:each | FriendComparisonResult from: each]</body><body package="FacebookConnect" selector="friendsGet">friendsGet	"get friends from Facebook"	| results |	self addStandardParameters.	results := api		executeMethod: 'Friends.get' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="friendsGetAppUsers">friendsGetAppUsers	"get users of the app in question"	| results |	self addStandardParameters.	results := api		executeMethod: 'Friends.getAppUsers' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="friendsGetFullDetails">friendsGetFullDetails	"get friends from Facebook"	| ids |	ids := self friendsGet.	ids isFacebookError		ifFalse: [^self getFullFriendDetailsFor: ids].	^ids</body><body package="FacebookConnect" selector="friendsGetLists">friendsGetLists	"Returns the names and identifiers of any friend lists that the user has created"	| results |	self addStandardParameters.	results := api		executeMethod: 'Friends.getLists' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="getFullFriendDetailsFor:">getFullFriendDetailsFor: idArray	"get names of friends"	| uids  fields  results  errorOrNil |	uids := idArray asCommaDelimitedString.	fields := 'first_name,last_name,name,locale,affiliations,pic_square,profile_url,meeting_for,meeting_sex,religion,significant_other_id'.	self addStandardParameters.	api addParameter: 'uids' -&gt; uids.	api addParameter: 'fields' -&gt; fields.	results := api		executeMethod: 'Users.getinfo' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^results collect: [:each | Friend from: each]</body></methods><methods><class-id>Facebook.Connection</class-id> <category>private-answers</category><body package="FacebookConnect" selector="answerErrorOrNilFor:">answerErrorOrNilFor: results	"the caller expects to do processing on the results.  In that case, we answer nil for no problems, or	an Error object for a failed call"	results ifNil: [^ErrorReturn new].		results isFacebookError ifTrue: [^ErrorReturn from: results].	^nil</body><body package="FacebookConnect" selector="checkForErrors:">checkForErrors: results	"the caller expects to take the results directly.  In that case, we check for errors, and pass the results back"	| errorCodeOrNil |	results ifNil: [^ErrorReturn new].	(results isKindOf: Dictionary)		ifFalse: [^results].	errorCodeOrNil := results at: 'error_code' ifAbsent: [nil].	^errorCodeOrNil		ifNil: [results]		ifNotNil: [ErrorReturn from: results]</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-events</category><body package="FacebookConnect" selector="eventsCancel:">eventsCancel: eventId	"cancel the event"	^self eventsCancel: eventId reason: 'Cancelled'</body><body package="FacebookConnect" selector="eventsCancel:reason:">eventsCancel: eventId reason: reasonOrNil	"cancel the event"	| results reason |	reason := reasonOrNil		ifNil: ['Cancelled']		ifNotNil: [reasonOrNil].	self addStandardParameters.	api addParameter: 'eid' -&gt; eventId printString.	api addParameter: 'cancel_message' -&gt; reason.	results := api		executeMethod: 'events.cancel' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="eventsCreate:">eventsCreate: eventInfo	"Create the event.  See http://wiki.developers.facebook.com/index.php/Events.create	for details on the event_info requirements"	| results |	eventInfo isValid ifFalse: [^nil].	self addStandardParameters.	api addParameter: 'event_info' -&gt; eventInfo asJson.	results := api		executeMethod: 'events.create' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="eventsEdit:eventInfo:">eventsEdit: eventId eventInfo: eventInfo	"Edit the event.  See http://wiki.developers.facebook.com/index.php/Events.create	for details on the event_info requirements"	| results |	self isValidForEdit ifFalse: [^nil].	self addStandardParameters.	self addParameter: 'eid' -&gt; eventId printString.	self addParameter: 'event_info' -&gt; eventInfo asJson.	results := api		executeMethod: 'events.edit' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="eventsGet:">eventsGet: filterDictionary	"the input argument is a dictionary of filters to be added.  See: http://wiki.developers.facebook.com/index.php/Events.get	for the list of filters possible.  The names should be the keys, with the filter values as values"	| results errorOrNil |	self addStandardParameters.	self addArgumentsFromDictionary: filterDictionary.	results := api		executeMethod: 'events.get' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^results collect: [:each |		Event from: each]</body><body package="FacebookConnect" selector="eventsGetMembersFor:">eventsGetMembersFor: eventId	"get members for the named event"	| results errorOrNil |	self addStandardParameters.	api addParameter: 'eid' -&gt; eventId printString.	results := api		executeMethod: 'events.getMembers' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^EventMemberDetail from: results</body><body package="FacebookConnect" selector="eventsRsvp:status:">eventsRsvp: eventId status: rsvpStatus	"cancel the event"	| results |	self addStandardParameters.	self addParameter: 'eid' -&gt; eventId printString.	self addParameter: 'esvp_status' -&gt; rsvpStatus.	results := api		executeMethod: 'events.rsvp' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-data</category><body package="FacebookConnect" selector="dataGetCookiesFor:cookie:">dataGetCookiesFor: uid cookie: cookieToGet	"This is a web only api; cannot be used in desktop apps"	| results |	self addStandardParameters.	api addParameter: 'uid' -&gt; uid.	cookieToGet ifNil: [api addParameter: 'name' -&gt; cookieToGet].	results := api		executeMethod: 'data.getCookies' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="dataGetUserPreference:">dataGetUserPreference: prefId	"get user pref.  disabled on the Facebook side as of 5/14/09"	| results |	self addStandardParameters.	api addParameter: 'pref_id' -&gt; prefId printString.	results := api		executeMethod: 'Data.getUserPreference' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="dataGetUserPreferences">dataGetUserPreferences	"get user prefs.  disabled on the Facebook side as of 5/14/09"	| results |	self addStandardParameters.	results := api		executeMethod: 'Data.getUserPreferences' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="dataSetCookieFor:cookie:expires:">dataSetCookieFor: uid cookie: cookieAssociation expires: timestampOrNil	"This is a web only api; cannot be used in desktop apps"	| results |	self addStandardParameters.	api addParameter: 'uid' -&gt; uid.	api addParameter: 'name'  -&gt; cookieAssociation key.	api addParameter: 'value' -&gt; cookieAssociation value.	timestampOrNil ifNotNil: [api addParameter: timestampOrNil asUnixSeconds printString].	results := api		executeMethod: 'data.setCookie' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="dataSetUserPreference:value:">dataSetUserPreference: prefId value: value	"set user pref.  disabled on the Facebook side as of 5/14/09"	| results |	self addStandardParameters.	api addParameter: 'pref_id' -&gt; prefId printString.	api addParameter: 'value' -&gt; value.	results := api		executeMethod: 'Data.SetUserPreference' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="dataSetUserPreferences:shouldReplace:">dataSetUserPreferences: prefDictionary shouldReplace: shouldReplace	"set user prefs.  for shouldReplace: True to replace all existing preferences of this user; false to merge into existing preferences	disabled on the Facebook side as of 5/14/09"	| results |	self addStandardParameters.	api addParameter: 'map' -&gt; prefDictionary associations asCommaDelimitedString.	api addParameter: 'shouldReplace' -&gt; shouldReplace printString.	results := api		executeMethod: 'Data.SetUserPreferences' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-status</category><body package="FacebookConnect" selector="statusGet">statusGet	"get the current status"	| results errorOrNil |	self addStandardParameters.	api addParameter: 'uid' -&gt; session uid printString.	results := api		executeMethod: 'Status.get' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^self objectsFrom: results into: Status</body><body package="FacebookConnect" selector="statusSet:">statusSet: message	"set the current status.  answers a boolean on success/fail"	| results |	self addStandardParameters.	api addParameter: 'status' -&gt;message.	results := api		executeMethod: 'Status.set' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-groups</category><body package="FacebookConnect" selector="groupsGetByGroups:andUID:">groupsGetByGroups: gids andUID: uidOrNil	"get the groups according to the specified (if any) filters"	| results gidString errorOrNil |	gids notEmpty ifTrue: [gidString := gids asCommaDelimitedString].	self addStandardParameters.	gidString ifNotNil: [api addParameter: 'gids' -&gt; gidString].	uidOrNil ifNotNil: [api addParameter: 'uid' -&gt; uidOrNil].	results := api		executeMethod: 'Groups.get' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^results collect: [:each | Group from: each]</body><body package="FacebookConnect" selector="groupsGetMembers:">groupsGetMembers: groupId	"get the members of the group"	| results errorOrNil |	self addStandardParameters.	api addParameter: 'gid' -&gt; groupId printString.	results := api		executeMethod: 'Groups.getMembers' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^GroupSubscription from: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-application</category><body package="FacebookConnect" selector="applicationGetPublicInfo:">applicationGetPublicInfo: appId	"get all public info about the application in question"	| results errorOrNil |	self addStandardParameters.	api addParameter: 'application_id' -&gt; appId.		results := api		executeMethod: 'application.getPublicInfo' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^Application from: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-notes</category><body package="FacebookConnect" selector="notesCreate:content:">notesCreate: title content: content	"create a Facebook note (requires authorization) answers the note id"	| results |	self addStandardParameters.	api addParameter: 'uid' -&gt; session uid printString.	api addParameter: 'title' -&gt; title.	api addParameter: 'content' -&gt; content.	results := api		executeMethod: 'Notes.create' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="notesDelete:">notesDelete:  noteId	"delete a Facebook note (requires authorization) answers a boolean.  Note that the Doc here: http://wiki.developers.facebook.com/index.php/Notes.delete is completely incorrect, at least as of the time I wrote this code :)"	| results |	self addStandardParameters.	api addParameter: 'note_id' -&gt; noteId printString.	api addParameter: 'uid' -&gt; session uid printString.	results := api		executeMethod: 'Notes.delete' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="notesEdit:title:content:">notesEdit: noteId title:  title content: content	"edit a Facebook note (requires authorization) answers a boolean"	| results |	self addStandardParameters.	api addParameter: 'note_id' -&gt; noteId printString.	api addParameter: 'title' -&gt; title.	api addParameter: 'content' -&gt; content.	results := api		executeMethod: 'Notes.edit' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="notesGet">notesGet	"answers all notes created by this user"	| results errorOrNil |	self addStandardParameters.	api addParameter: 'uid' -&gt; session uid printString.	results := api		executeMethod: 'Notes.get' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^results collect: [:each | Note from: each]</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-links</category><body package="FacebookConnect" selector="linksGet">linksGet	"get all links posted on the profile via this app"	| results errorOrNil |	self addStandardParameters.	results := api		executeMethod: 'links.get' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^results collect: [:each | Link from: each]</body><body package="FacebookConnect" selector="linksPost:withComment:">linksPost: url withComment: comment	"Post a link.  Should return the id of the post"	| results |	self addStandardParameters.	api addParameter: 'url' -&gt; url.	api addParameter: 'comment' -&gt; comment.	api addParameter: 'uid' -&gt; session uid printString.	results := api		executeMethod: 'links.post' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-notifications</category><body package="FacebookConnect" selector="notificationsGet">notificationsGet	"answers all notifications for this user"	| results errorOrNil |	self addStandardParameters.	api addParameter: 'uid' -&gt; session uid printString.	results := api		executeMethod: 'Notifications.get' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^Notification from: results</body><body package="FacebookConnect" selector="notificationsSend:message:">notificationsSend: uids message: message	"message can be fbml.  Should answer the id of the notification"	| results uidString |	self addStandardParameters.	uidString := uids asCommaDelimitedString.	api addParameter: 'to_ids' -&gt; uidString.	api addParameter: 'notification' -&gt; message.	api addParameter: 'uid' -&gt; session uid printString.	results := api		executeMethod: 'Notifications.send' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="notificationsSendEmailTo:subject:plainText:message:">notificationsSendEmailTo: uids subject: subject plainText: plainText message: fbml	"message can be fbml.  Should answer the id of the notification send either plainText or fbml, but not both.  By default, fbml will be	sent if present.  Will answer the message id"	| results uidString |	self addStandardParameters.	uidString := uids asCommaDelimitedString.	api addParameter: 'recipients' -&gt; uidString.	api addParameter: 'subject' -&gt; subject.	fbml		ifNil: [api addParameter: 'text' -&gt; plainText]		ifNotNil: [api addParameter: 'fbml' -&gt; fbml].	results := api		executeMethod: 'Notifications.sendEmail' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-liveMessage</category><body package="FacebookConnect" selector="liveMessageSend:to:forEventNamed:">liveMessageSend: message to: uid forEventNamed: eventName	"send a message that will be handled in the browser - see http://wiki.developers.facebook.com/index.php/LiveMessage.send	for usage details"	| results |	self addStandardParameters.	api addParameter: 'recipient' -&gt; uid printString.	api addParameter: 'event_name' -&gt; eventName.	api addParameter: 'message' -&gt; message asJson.	results := api		executeMethod: 'LiveMessage.send' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-feeds</category><body package="FacebookConnect" selector="feedDeactivateTemplateBundleById:">feedDeactivateTemplateBundleById: templateBundleId	"deactivate the registered bundle.  returns a boolean"	| results  |	self addStandardParameters.	api addParameter: 'template_bundle_id' -&gt; templateBundleId printString.	results := api		executeMethod: 'feed.deactivateTemplateBundleById' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="feedGetRegisteredTemplateBundleByID:">feedGetRegisteredTemplateBundleByID: templateBundleId	"get the registered bundle.  returns the bundle"	| results  |	self addStandardParameters.	api addParameter: 'template_bundle_id' -&gt; templateBundleId printString.	results := api		executeMethod: 'feed.getRegisteredTemplateBundleById' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="feedGetRegisteredTemplateBundles">feedGetRegisteredTemplateBundles	"get all registered bundle (for this app).  answers a collection of bundles"	| results  errorOrNil |	self addStandardParameters.	results := api		executeMethod: 'feed.getRegisteredTemplateBundles' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^results collect: [:each | Template from: each]</body><body package="FacebookConnect" selector="feedPublishTemplatizedAction:">feedPublishTemplatizedAction: templateAction	"publish a template action"	| results  |	self addStandardParameters.	templateAction addParametersTo: api.	results := api		executeMethod: 'feed.publishTemplatizedAction' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="feedPublishUserAction:">feedPublishUserAction: templateUpdate	"publish a template update action"	| results  |	self addStandardParameters.	templateUpdate addParametersTo: api.	results := api		executeMethod: 'feed.publishUserAction' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="feedRegisterTemplateBundle:">feedRegisterTemplateBundle: bundle	"register a template bundle.  returns the bundle id"	| results  |	self addStandardParameters.	api addParameter: 'one_line_story_templates' -&gt; bundle one_line_story_template asJson.	bundle short_story_templates notEmpty		ifTrue: [api addParameter: 'short_story_templates' -&gt; bundle short_story_templates asJson].	api addParameter: 'full_story_template' -&gt; nil asJson.	bundle action_links notEmpty		ifTrue: [api addParameter: 'action_links' -&gt; bundle action_links asJson].	results := api		executeMethod: 'feed.registeredTemplateBundle' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-fbml</category><body package="FacebookConnect" selector="fbmlDeleteCustomTags:">fbmlDeleteCustomTags: tagNames	"tagNames should be a collection of names of tags.  If it's empty, all custom tags will be deleted"	| results  |	self addStandardParameters.	tagNames notEmpty		ifTrue: [| json |				json := tagNames asJson.				api addParameter: 'names' -&gt; json].	results := api		executeMethod: 'Fbml.deleteCustomTags' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="fbmlRefreshImgSrc:">fbmlRefreshImgSrc: url	"Fetches and re-caches the image stored at the given URL.  returns a boolean"	| results  |	self addStandardParameters.	api addParameter: 'url' -&gt; url.	results := api		executeMethod: 'Fbml.refreshImgSrc' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="fbmlRefreshRefUrl:">fbmlRefreshRefUrl: url	"Fetches and re-caches the content stored at the given URL.  answers a boolean"	| results  |	self addStandardParameters.	api addParameter: 'url' -&gt; url.	results := api		executeMethod: 'Fbml.refreshRefUrl' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="fbmlRegisterCustomTags:">fbmlRegisterCustomTags: tags	"tags should be a collection of CustomTag objects"	| results json |	self addStandardParameters.	json := tags asJson.	api addParameter: 'tags' -&gt; json.	results := api		executeMethod: 'Fbml.registerCustomTags' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="fbmlSetRefHandle:fbml:">fbmlSetRefHandle: handle fbml: fbml	"Associates a given 'handle' with FBML markup so that the handle can be used within the fb:ref FBML tag. A handle is unique within an application and allows an application to publish identical FBML to many user profiles and do subsequent updates without having to republish FBML on behalf of each user.  Answers a boolean"	| results  |	self addStandardParameters.	api addParameter: 'handle' -&gt; handle.	api addParameter: 'fbml' -&gt; fbml.	results := api		executeMethod: 'Fbml.setRefHandle' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="fbmlUploadNativeStrings:">fbmlUploadNativeStrings: collectionOfStrings	"Lets you insert text strings in their native language into the Facebook Translations database so they can be translated.  Returns number of translated strings done"	| results  json |	self addStandardParameters.	json := collectionOfStrings asJson.	api addParameter: 'native_strings' -&gt; json.	results := api		executeMethod: 'Fbml.uploadNativeStrings' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-fql</category><body package="FacebookConnect" selector="fqlQuery:">fqlQuery: fql 	"execute an fql query.  The response depends on the query.    For FQL doc, see: http://wiki.developers.facebook.com/index.php/FQL_documentation"	^self fqlQuery: fql into: nil</body><body package="FacebookConnect" selector="fqlQuery:into:">fqlQuery: fql into: aClassOrNil	"execute an fql query.  The response depends on the query.  If the second argument is not nil, the interface	will try to create it from the results.  For FQL doc, see: http://wiki.developers.facebook.com/index.php/FQL_documentation"	| results  errorOrNil |	self addStandardParameters.	api addParameter: 'query' -&gt; fql.	results := api		executeMethod: 'Fql.query' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^aClassOrNil 		ifNil: [results]		ifNotNil: [results collect: [:each | aClassOrNil from: each]]</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-comments</category><body package="FacebookConnect" selector="commentsGetFor:">commentsGetFor: xid	"get comments from Facebook for an item.  Note: The xid is not something that you get with any API call, and this method seems	to be mostly deprecated in favor of the stream equivalent.  provided for completeness only"	| results |	self addStandardParameters.	api addParameter: 'xid' -&gt; xid.	results := api		executeMethod: 'Friends.get' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-pages</category><body package="FacebookConnect" selector="pagesGetFullInfo">pagesGetFullInfo	"using the argument as a QBE entity, send the message, answer a collection of PageInfo objects"	| pageInfo |	pageInfo := PageInfo new getFullQBE.	^self pagesGetInfo: pageInfo</body><body package="FacebookConnect" selector="pagesGetInfo:">pagesGetInfo: pageInfo	"using the argument as a QBE entity, send the message, answer a collection of PageInfo objects"	| results errorOrNil |	self addStandardParameters.	pageInfo addParametersTo: api.	api addParameter: 'uid' -&gt; session uid printString.	results := api		executeMethod: 'Pages.getInfo' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^results collect: [:each | PageInfo from: each]</body><body package="FacebookConnect" selector="pagesIsAdmin:">pagesIsAdmin: pageId	"answers a boolean for the user and page"	| results |	self addStandardParameters.	api addParameter: 'page_id' -&gt; pageId printString.	api addParameter: 'uid' -&gt; session uid printString.	results := api		executeMethod: 'Pages.isAdmin' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="pagesIsAppAdded:">pagesIsAppAdded: pageId	"answers a boolean for the  page and this app"	| results |	self addStandardParameters.	api addParameter: 'page_id' -&gt; pageId printString.	results := api		executeMethod: 'Pages.isAppAdded' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="pagesIsFan:">pagesIsFan: pageId	"answers a boolean for the  page and this user"	| results |	self addStandardParameters.	api addParameter: 'page_id' -&gt; pageId printString.	api addParameter: 'uid' -&gt; session uid printString.	results := api		executeMethod: 'Pages.isFan' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-photos</category><body package="FacebookConnect" selector="photosCreateAlbum:">photosCreateAlbum: photoAlbum	"create a new album with the object passed in"	| results  |	self addStandardParameters.	photoAlbum addParametersTo: api.	api addParameter: 'uid' -&gt; session uid printString.	results := api		executeMethod: 'Photos.createAlbum' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="photosGet:">photosGet: filter	"the filter is a PhotoFilter object."	| results errorOrNil |	self addStandardParameters.	filter addParametersTo: api.	results := api		executeMethod: 'Photos.get' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^results collect: [:each | Photo from: each]</body><body package="FacebookConnect" selector="photosGetAlbums:byAlbums:">photosGetAlbums: uid byAlbums: aids	"use one or the other; we pick aids if it's not nil"	| results errorOrNil |	self addStandardParameters.	aids		ifNil: [api addParameter: 'uid' -&gt; uid printString] 		ifNotNil: [api addParameter: 'aids' -&gt; (aids asCommaDelimitedString)].	results := api		executeMethod: 'Photos.getAlbums' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^results collect: [:each | PhotoAlbum from: each]</body><body package="FacebookConnect" selector="photosGetTags:">photosGetTags: pids	"get tags for all photo ids passed"	| results  errorOrNil |	self addStandardParameters.	api addParameter: 'pids' -&gt; (pids asCommaDelimitedString).	results := api		executeMethod: 'Photos.getTags' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^results collect: [:each | PhotoTag from: each]</body><body package="FacebookConnect" selector="photosUpload:">photosUpload: photoUpload	"upload the photo.  it works but seems to answer with timeouts..."	| results  errorOrNil |	self addStandardParameters.	photoUpload addParametersTo: api.	results := api		executeMethod: 'Photos.upload' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^Photo from: results</body><body package="FacebookConnect" selector="photosUploadMultiple:">photosUploadMultiple: photoUploadCollection	"upload the collection of photos.  Which means, call the API method iteratively.  Answers a collection of the results"	^photoUploadCollection collect: [:each | | val |		val := self photosUpload: each.		Transcript show: 'Uploaded: ', each filename; cr.		val].</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-profile</category><body package="FacebookConnect" selector="profileGetFBML">profileGetFBML	"let the call default"	^self profileGetFBML: nil</body><body package="FacebookConnect" selector="profileGetFBML:">profileGetFBML: type	"the type should be 1 or 2.  If nil, we let it default on the FB side"	| results |	self addStandardParameters.	type		ifNotNil: [api addParameter: 'type' -&gt; type printString].	results := api		executeMethod: 'Profile.getFBML' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="profileGetInfo">profileGetInfo	"get profile info"	| results |	self addStandardParameters.	results := api		executeMethod: 'Profile.getInfo' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="profileGetInfoOptions:">profileGetInfoOptions: field	"get profile info by name"	| results |	self addStandardParameters.	api addParameter: 'field' -&gt; field.	results := api		executeMethod: 'Profile.getInfoOptions' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="profileSetInfo:">profileSetInfo: infoFields	"set profile information from the collection"	| results |	self addStandardParameters.	api addParameter: 'info_fields' -&gt; infoFields asJson.	results := api		executeMethod: 'Profile.SetInfo' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="profileSetInfoOptions:">profileSetInfoOptions: infoFields	"set profile information from the collection of ProfileInfo objects"	| results |	self addStandardParameters.	api addParameter: 'options' -&gt; infoFields asJson.	results := api		executeMethod: 'Profile.SetInfoOptions' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-streams</category><body package="FacebookConnect" selector="activityStreamUrl">activityStreamUrl	"basic FB url for activity stream"	^'http://www.facebook.com/activitystreams/feed.php'</body><body package="FacebookConnect" selector="getActivityStream">getActivityStream	"This actually returns an Atom feed"	^api		fetchUrl: self activityStreamUrl		withHolder: secretHolder		forSession: session</body><body package="FacebookConnect" selector="streamAddCommentFor:comment:">streamAddCommentFor: statusId comment: commentText	"add a comment to the post in question"	| results idToUse |	idToUse := self possiblyPatchStatusId: statusId.	self addStandardParameters.	api addParameter: 'post_id' -&gt; idToUse.	api addParameter: 'comment' -&gt; commentText.	results := api		executeMethod: 'Stream.addComment' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="streamAddLikeFor:">streamAddLikeFor: postId	"set the like property"	| results |	self addStandardParameters.	api addParameter: 'post_id' -&gt; postId.	results := api		executeMethod: 'Stream.addLike' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="streamGet">streamGet	"this is the general API; we need to be able to pass filters"	| results errorOrNil |	self addStandardParameters.	api addParameter: 'viewer_id' -&gt; session uid printString.	results := api		executeMethod: 'Stream.get' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^StreamResponse from: results</body><body package="FacebookConnect" selector="streamGetCommentsFor:">streamGetCommentsFor: statusId	"get comments for a status object"	| results idToUse errorOrNil |	idToUse := self possiblyPatchStatusId: statusId.	self addStandardParameters.	api addParameter: 'post_id' -&gt; idToUse.	results := api		executeMethod: 'Stream.getComments' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^self objectsFrom: results into: Comment</body><body package="FacebookConnect" selector="streamGetFilters">streamGetFilters	"answer all current filters"	| results errorOrNil |	self addStandardParameters.	results := api		executeMethod: 'Stream.getFilters' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^self objectsFrom: results into: Filter</body><body package="FacebookConnect" selector="streamGetFor:">streamGetFor: filterDictionary	"The dictionary must include at least viewer_id.  See http://wiki.developers.facebook.com/index.php/Stream.get	for other parameters that may be passed  should really use Filter objects"	| results errorOrNil |	(filterDictionary includesKey: 'viewer_id')		ifFalse: [^#()].	self addStandardParameters.	filterDictionary keysAndValuesDo: [:key :value |		api addParameter: key -&gt; value].	results := api		executeMethod: 'Stream.get' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^StreamResponse from: results</body><body package="FacebookConnect" selector="streamPublish:">streamPublish: message	"uses the stream API to push a news item.  answers the new post id"	| results |	self addStandardParameters.	api addParameter: 'message' -&gt; message.	results := api		executeMethod: 'Stream.publish' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="streamRemoveCommentFor:">streamRemoveCommentFor: commentId	"remove the comment in question"	| results |	self addStandardParameters.	api addParameter: 'comment_id' -&gt; commentId.	results := api		executeMethod: 'Stream.removeComment' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="streamRemoveFor:">streamRemoveFor: postId	"remove the post in question"	| results |	self addStandardParameters.	api addParameter: 'post_id' -&gt; postId.	results := api		executeMethod: 'Stream.remove' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="streamRemoveLikeFor:">streamRemoveLikeFor: postId	"unset the like property"	| results |	self addStandardParameters.	api addParameter: 'post_id' -&gt; postId.	results := api		executeMethod: 'Stream.removeLike' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-users</category><body package="FacebookConnect" selector="usersGetInfo:fields:">usersGetInfo:  uids fields: fields	"get the user info for the ids based on the fields filter"	| results errorOrNil |	self addStandardParameters.	api addParameter: 'uids' -&gt; uids asCommaDelimitedString.	api addParameter: 'fields' -&gt; fields asCommaDelimitedString.	results := api		executeMethod: 'Users.getInfo' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^self objectsFrom: results into: Friend</body><body package="FacebookConnect" selector="usersGetLoggedInUser">usersGetLoggedInUser	"get the uid of the logged in user"	| results |	self addStandardParameters.	results := api		executeMethod: 'Users.getLoggedInUser' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="usersGetStandardInfo:fields:">usersGetStandardInfo:  uids fields: fields	"get the user info for the ids based on the fields filter.  Note: Not usable by desktop applications"	| results errorOrNil |	self addStandardParameters.	api addParameter: 'uids' -&gt; uids asCommaDelimitedString.	api addParameter: 'fields' -&gt; fields asCommaDelimitedString.	results := api		executeMethod: 'Users.getStandardInfo' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^self objectsFrom: results into: UserInfo</body><body package="FacebookConnect" selector="usersHasAppPermission:">usersHasAppPermission: permission	"String identifier for the extended permission that is being checked for. Must be one of email, read_stream, publish_stream, offline_access, status_update, photo_upload, {create_event, rsvp_event, sms, video_upload, create_note, share_item"	| results   |	self addStandardParameters.	api addParameter: 'ext_perm' -&gt;permission.	results := api		executeMethod: 'Users.hasAppPermission' 		withKey:  secretHolder apiKey		withSecret: session secret.	results = 1		ifTrue: [^true].	results = 0		ifTrue: [^false].	^self checkForErrors: results</body><body package="FacebookConnect" selector="usersIsVerified">usersIsVerified	"is user on facebook"	| results   |	self addStandardParameters.	results := api		executeMethod: 'Users.isVerified' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body><body package="FacebookConnect" selector="usersSetStatus:">usersSetStatus: statusString	^self usersSetStatus: statusString clear: false statusIncludesVerb: false</body><body package="FacebookConnect" selector="usersSetStatus:clear:statusIncludesVerb:">usersSetStatus: statusString clear: shouldClear statusIncludesVerb: statusIncludesVerb	"is user on facebook"	| results   |	self addStandardParameters.	api addParameter: 'status' -&gt; statusString.	api addParameter: 'clear' -&gt; shouldClear printString.	api addParameter: 'status_includes_verb' -&gt; statusIncludesVerb printString.	results := api		executeMethod: 'Users.setStatus' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-video</category><body package="FacebookConnect" selector="videoGetUploadLimits">videoGetUploadLimits	"get app level upload limits on video"	| results   errorOrNil |	self addStandardParameters.	results := api		executeMethod: 'Video.getUploadLimits' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^VideoLimitInfo from: results</body><body package="FacebookConnect" selector="videoUpload:">videoUpload: videoUpload	"upload the video. "	| results  errorOrNil |	self addStandardParameters.	videoUpload addParametersTo: api.	results := api		executeMethod: 'Video.upload' 		withKey:  secretHolder apiKey		withSecret: session secret.	errorOrNil := self answerErrorOrNilFor: results.	errorOrNil ifNotNil:  [^errorOrNil].	^VideoUpload from: results</body></methods><methods><class-id>Facebook.Connection</class-id> <category>printing</category><body package="FacebookConnect" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' with [',  session printString, ']'</body></methods><methods><class-id>Facebook.Connection</class-id> <category>api-connect</category><body package="FacebookConnect" selector="connectGetUnconnectedFriendsCount">connectGetUnconnectedFriendsCount	"how many friends are not on FB right now"	| results |	self addStandardParameters.	results := api		executeMethod: 'Connect.getUnconnectedFriendsCount' 		withKey:  secretHolder apiKey		withSecret: session secret.	^self checkForErrors: results</body></methods><methods><class-id>Facebook.Connection class</class-id> <category>instance creation</category><body package="FacebookConnect" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body><body package="FacebookConnect" selector="withSecretHolder:">withSecretHolder: secretHolder	^self new secretHolder: secretHolder</body></methods><methods><class-id>Facebook.UserInfo</class-id> <category>accessing</category><body package="Facebook-Domain" selector="affiliations">affiliations	^affiliations</body><body package="Facebook-Domain" selector="affiliations:">affiliations: anObject	affiliations := anObject</body><body package="Facebook-Domain" selector="birthday">birthday	^birthday</body><body package="Facebook-Domain" selector="birthday:">birthday: anObject	birthday := anObject</body><body package="Facebook-Domain" selector="first_name">first_name	^first_name</body><body package="Facebook-Domain" selector="first_name:">first_name: anObject	first_name := anObject</body><body package="Facebook-Domain" selector="last_name">last_name	^last_name</body><body package="Facebook-Domain" selector="last_name:">last_name: anObject	last_name := anObject</body><body package="Facebook-Domain" selector="locale">locale	^locale</body><body package="Facebook-Domain" selector="locale:">locale: anObject	locale := anObject</body><body package="Facebook-Domain" selector="name">name	^name</body><body package="Facebook-Domain" selector="name:">name: anObject	name := anObject</body><body package="Facebook-Domain" selector="profile_url">profile_url	^profile_url</body><body package="Facebook-Domain" selector="profile_url:">profile_url: anObject	profile_url := anObject</body><body package="Facebook-Domain" selector="proxied_email">proxied_email	^proxied_email</body><body package="Facebook-Domain" selector="proxied_email:">proxied_email: anObject	proxied_email := anObject</body><body package="Facebook-Domain" selector="sex">sex	^sex</body><body package="Facebook-Domain" selector="sex:">sex: anObject	sex := anObject</body><body package="Facebook-Domain" selector="timezone">timezone	^timezone</body><body package="Facebook-Domain" selector="timezone:">timezone: anObject	timezone := anObject</body><body package="Facebook-Domain" selector="uid">uid	^uid</body><body package="Facebook-Domain" selector="uid:">uid: anObject	uid := anObject</body></methods><methods><class-id>Facebook.UserInfo</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	super from: dictionary.	affiliations := affiliations collect: [:each | Affiliation from: each].</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	uid := nil.	first_name := nil.	last_name := nil.	name := nil.	timezone := nil.	birthday := nil.	sex := nil.	affiliations := nil.	locale := nil.	profile_url := nil.	proxied_email := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Facebook.StreamCommentPost</class-id> <category>accessing</category><body package="Facebook-Domain" selector="fromid">fromid	^fromid</body><body package="Facebook-Domain" selector="fromid:">fromid: anObject	fromid := anObject</body><body package="Facebook-Domain" selector="id">id	^id</body><body package="Facebook-Domain" selector="id:">id: anObject	id := anObject</body><body package="Facebook-Domain" selector="text">text	^text</body><body package="Facebook-Domain" selector="text:">text: anObject	text := anObject</body><body package="Facebook-Domain" selector="time">time	^time</body><body package="Facebook-Domain" selector="time:">time: anObject	time := anObject</body></methods><methods><class-id>Facebook.StreamCommentPost</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', text, ']'</body></methods><methods><class-id>Facebook.StreamCommentPost</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	super from: dictionary.	self time: (Timestamp fromUnixSeconds: time)</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	time := Timestamp now</body></methods><methods><class-id>Facebook.TemplateActionUpdate</class-id> <category>accessing</category><body package="Facebook-Domain" selector="body_general">body_general	^body_general</body><body package="Facebook-Domain" selector="body_general:">body_general: anObject	body_general := anObject</body><body package="Facebook-Domain" selector="story_size">story_size	^story_size</body><body package="Facebook-Domain" selector="story_size:">story_size: anObject	story_size := anObject</body><body package="Facebook-Domain" selector="target_ids">target_ids	^target_ids</body><body package="Facebook-Domain" selector="target_ids:">target_ids: anObject	target_ids := anObject</body><body package="Facebook-Domain" selector="template_bundle_id">template_bundle_id	^template_bundle_id</body><body package="Facebook-Domain" selector="template_bundle_id:">template_bundle_id: anObject	template_bundle_id := anObject</body><body package="Facebook-Domain" selector="template_data">template_data	^template_data</body><body package="Facebook-Domain" selector="template_data:">template_data: anObject	template_data := anObject</body><body package="Facebook-Domain" selector="user_message">user_message	^user_message</body><body package="Facebook-Domain" selector="user_message:">user_message: anObject	user_message := anObject</body></methods><methods><class-id>Facebook.TemplateActionUpdate</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	template_bundle_id := nil.	template_data := nil.	target_ids := OrderedCollection new.	body_general := nil.	story_size := nil.	user_message := nil.</body></methods><methods><class-id>Facebook.TemplateActionUpdate</class-id> <category>convenience</category><body package="Facebook-Domain" selector="addParametersTo:">addParametersTo: api	api addParameter: 'template_bundle_id' -&gt; template_bundle_id.	api addParameter: 'template_data' -&gt; template_data asJson.	target_ids notEmpty		ifTrue: [api addParameter: 'target_ids' -&gt; (target_ids asCommaDelimitedString)].	body_general ifNotNil: [api addParameter: 'body_general' -&gt; body_general].	story_size ifNotNil: [api addParameter: 'story_size' -&gt; story_size printString].	user_message ifNotNil: [api addParameter: 'user_message' -&gt; user_message].</body></methods><methods><class-id>Facebook.ProfileInfo</class-id> <category>accessing</category><body package="Facebook-Domain" selector="description">description	^description</body><body package="Facebook-Domain" selector="description:">description: anObject	description := anObject</body><body package="Facebook-Domain" selector="image">image	^image</body><body package="Facebook-Domain" selector="image:">image: anObject	image := anObject</body><body package="Facebook-Domain" selector="label">label	^label</body><body package="Facebook-Domain" selector="label:">label: anObject	label := anObject</body><body package="Facebook-Domain" selector="link">link	^link</body><body package="Facebook-Domain" selector="link:">link: anObject	link := anObject</body><body package="Facebook-Domain" selector="sublabel">sublabel	^sublabel</body><body package="Facebook-Domain" selector="sublabel:">sublabel: anObject	sublabel := anObject</body></methods><methods><class-id>Facebook.ProfileInfo</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.</body></methods><methods><class-id>Facebook.Notification</class-id> <category>accessing</category><body package="Facebook-Domain" selector="event_invites">event_invites	^event_invites</body><body package="Facebook-Domain" selector="event_invites:">event_invites: anObject	event_invites := anObject</body><body package="Facebook-Domain" selector="friend_requests">friend_requests	^friend_requests</body><body package="Facebook-Domain" selector="friend_requests:">friend_requests: anObject	friend_requests := anObject</body><body package="Facebook-Domain" selector="group_invites">group_invites	^group_invites</body><body package="Facebook-Domain" selector="group_invites:">group_invites: anObject	group_invites := anObject</body><body package="Facebook-Domain" selector="messages">messages	^messages</body><body package="Facebook-Domain" selector="messages:">messages: anObject	messages := anObject</body><body package="Facebook-Domain" selector="pokes">pokes	^pokes</body><body package="Facebook-Domain" selector="pokes:">pokes: anObject	pokes := anObject</body><body package="Facebook-Domain" selector="shares">shares	^shares</body><body package="Facebook-Domain" selector="shares:">shares: anObject	shares := anObject</body></methods><methods><class-id>Facebook.Notification</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: aDictionary	super from: aDictionary.	messages :=  (Message from: messages).	pokes := (Poke from: pokes).	shares := (Share from: shares)</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	event_invites := nil.	friend_requests := nil.	group_invites := nil.	messages := nil.	pokes := nil.	shares := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Facebook.Message</class-id> <category>accessing</category><body package="Facebook-Domain" selector="most_recent">most_recent	^most_recent</body><body package="Facebook-Domain" selector="most_recent:">most_recent: anObject	most_recent := anObject</body><body package="Facebook-Domain" selector="unread">unread	^unread</body><body package="Facebook-Domain" selector="unread:">unread: anObject	unread := anObject</body></methods><methods><class-id>Facebook.Message</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	unread := nil.	most_recent := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Facebook.Share</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Facebook.ProfileInfoField</class-id> <category>accessing</category><body package="Facebook-Domain" selector="field">field	^field</body><body package="Facebook-Domain" selector="field:">field: anObject	field := anObject</body><body package="Facebook-Domain" selector="info_item">info_item	^info_item</body><body package="Facebook-Domain" selector="info_item:">info_item: anObject	info_item := anObject</body></methods><methods><class-id>Facebook.ProfileInfoField</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	info_item := OrderedCollection new</body></methods><methods><class-id>Facebook.ActionLink</class-id> <category>accessing</category><body package="Facebook-Domain" selector="href">href	^href</body><body package="Facebook-Domain" selector="href:">href: anObject	href := anObject</body><body package="Facebook-Domain" selector="text">text	^text</body><body package="Facebook-Domain" selector="text:">text: anObject	text := anObject</body></methods><methods><class-id>Facebook.ActionLink</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	text := ''.	href := ''.</body></methods><methods><class-id>Facebook.PhotoUpload</class-id> <category>accessing</category><body package="Facebook-Domain" selector="aid">aid	^aid</body><body package="Facebook-Domain" selector="aid:">aid: anObject	aid := anObject</body><body package="Facebook-Domain" selector="caption">caption	^caption</body><body package="Facebook-Domain" selector="caption:">caption: anObject	caption := anObject</body><body package="Facebook-Domain" selector="filename">filename	^filename</body><body package="Facebook-Domain" selector="filename:">filename: anObject	filename := anObject</body><body package="Facebook-Domain" selector="uid">uid	^uid</body><body package="Facebook-Domain" selector="uid:">uid: anObject	uid := anObject</body></methods><methods><class-id>Facebook.PhotoUpload</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	caption := 'none'</body></methods><methods><class-id>Facebook.PhotoUpload</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: '[ ', caption, ']'</body></methods><methods><class-id>Facebook.PhotoUpload</class-id> <category>convenience</category><body package="Facebook-Domain" selector="addParametersTo:">addParametersTo: api	"add the post parameters"	api postData: self.	aid ifNotNil: [api addParameter: 'aid' -&gt; aid].	caption ifNotNil: [api addParameter: 'caption' -&gt; caption].	uid ifNotNil: [api addParameter: 'uid' -&gt; uid printString].</body></methods><methods><class-id>Facebook.Group</class-id> <category>accessing</category><body package="Facebook-Domain" selector="creator">creator	^creator</body><body package="Facebook-Domain" selector="creator:">creator: anObject	creator := anObject</body><body package="Facebook-Domain" selector="description">description	^description</body><body package="Facebook-Domain" selector="description:">description: anObject	description := anObject</body><body package="Facebook-Domain" selector="gid">gid	^gid</body><body package="Facebook-Domain" selector="gid:">gid: anObject	gid := anObject</body><body package="Facebook-Domain" selector="group_subtype">group_subtype	^group_subtype</body><body package="Facebook-Domain" selector="group_subtype:">group_subtype: anObject	group_subtype := anObject</body><body package="Facebook-Domain" selector="group_type">group_type	^group_type</body><body package="Facebook-Domain" selector="group_type:">group_type: anObject	group_type := anObject</body><body package="Facebook-Domain" selector="name">name	^name</body><body package="Facebook-Domain" selector="name:">name: anObject	name := anObject</body><body package="Facebook-Domain" selector="nid">nid	^nid</body><body package="Facebook-Domain" selector="nid:">nid: anObject	nid := anObject</body><body package="Facebook-Domain" selector="office">office	^office</body><body package="Facebook-Domain" selector="office:">office: anObject	office := anObject</body><body package="Facebook-Domain" selector="pic">pic	^pic</body><body package="Facebook-Domain" selector="pic:">pic: anObject	pic := anObject</body><body package="Facebook-Domain" selector="pic_big">pic_big	^pic_big</body><body package="Facebook-Domain" selector="pic_big:">pic_big: anObject	pic_big := anObject</body><body package="Facebook-Domain" selector="pic_small">pic_small	^pic_small</body><body package="Facebook-Domain" selector="pic_small:">pic_small: anObject	pic_small := anObject</body><body package="Facebook-Domain" selector="privacy">privacy	^privacy</body><body package="Facebook-Domain" selector="privacy:">privacy: anObject	privacy := anObject</body><body package="Facebook-Domain" selector="recent_news">recent_news	^recent_news</body><body package="Facebook-Domain" selector="recent_news:">recent_news: anObject	recent_news := anObject</body><body package="Facebook-Domain" selector="update_time">update_time	^update_time</body><body package="Facebook-Domain" selector="update_time:">update_time: anObject	update_time := anObject</body><body package="Facebook-Domain" selector="venue">venue	^venue</body><body package="Facebook-Domain" selector="venue:">venue: anObject	venue := anObject</body><body package="Facebook-Domain" selector="website">website	^website</body><body package="Facebook-Domain" selector="website:">website: anObject	website := anObject</body></methods><methods><class-id>Facebook.Group</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	super from: dictionary.	update_time := Timestamp fromUnixSeconds: update_time asNumber</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	creator := nil.	description := nil.	gid := nil.	group_subtype := nil.	group_type := nil.	name := nil.	nid := nil.	office := nil.	pic := nil.	pic_big := nil.	pic_small := nil.	privacy := nil.	recent_news := nil.	update_time := nil.	venue := nil.	website := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Facebook.Group</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', self name, ']'</body></methods><methods><class-id>Facebook.Status</class-id> <category>accessing</category><body package="Facebook-Domain" selector="friend">friend	^friend</body><body package="Facebook-Domain" selector="friend:">friend: anObject	friend := anObject</body><body package="Facebook-Domain" selector="message">message	^message</body><body package="Facebook-Domain" selector="message:">message: anObject	message := anObject</body><body package="Facebook-Domain" selector="source">source	^source</body><body package="Facebook-Domain" selector="source:">source: anObject	source := anObject</body><body package="Facebook-Domain" selector="status_id">status_id	^status_id</body><body package="Facebook-Domain" selector="status_id:">status_id: anObject	status_id := anObject</body><body package="Facebook-Domain" selector="time">time	^time</body><body package="Facebook-Domain" selector="time:">time: anObject	time := anObject</body><body package="Facebook-Domain" selector="uid">uid	^uid</body><body package="Facebook-Domain" selector="uid:">uid: anObject	uid := anObject</body></methods><methods><class-id>Facebook.Status</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	super from: dictionary.	time := Timestamp fromUnixSeconds: time asNumber</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."</body></methods><methods><class-id>Facebook.Status</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', message, ']'</body></methods><methods><class-id>Facebook.Status class</class-id> <category>instance creation</category><body package="Facebook-Domain" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>Facebook.StreamAppData</class-id> <category>accessing</category><body package="Facebook-Domain" selector="attachment_data">attachment_data	^attachment_data</body><body package="Facebook-Domain" selector="attachment_data:">attachment_data: anObject	attachment_data := anObject</body><body package="Facebook-Domain" selector="images">images	^images</body><body package="Facebook-Domain" selector="images:">images: anObject	images := anObject</body><body package="Facebook-Domain" selector="tbid">tbid	^tbid</body><body package="Facebook-Domain" selector="tbid:">tbid: anObject	tbid := anObject</body></methods><methods><class-id>Facebook.StreamAppData</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	super from: dictionary.	attachment_data := JsonReader readFrom: attachment_data readStream.	images := JsonReader readFrom: images readStream</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.</body></methods><methods><class-id>Facebook.GroupSubscription</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	members := nil.	not_replied := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Facebook.GroupSubscription</class-id> <category>accessing</category><body package="Facebook-Domain" selector="members">members	^members</body><body package="Facebook-Domain" selector="members:">members: anObject	members := anObject</body><body package="Facebook-Domain" selector="not_replied">not_replied	^not_replied</body><body package="Facebook-Domain" selector="not_replied:">not_replied: anObject	not_replied := anObject</body></methods><methods><class-id>Facebook.GroupSubscription</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [ with ', members size printString, ' members]'</body></methods><methods><class-id>Facebook.Poke</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>Facebook.PhotoAlbum</class-id> <category>accessing</category><body package="Facebook-Domain" selector="aid">aid	^aid</body><body package="Facebook-Domain" selector="aid:">aid: anObject	aid := anObject</body><body package="Facebook-Domain" selector="cover_pid">cover_pid	^cover_pid</body><body package="Facebook-Domain" selector="cover_pid:">cover_pid: anObject	cover_pid := anObject</body><body package="Facebook-Domain" selector="created">created	^created</body><body package="Facebook-Domain" selector="created:">created: anObject	created := anObject</body><body package="Facebook-Domain" selector="description">description	^description</body><body package="Facebook-Domain" selector="description:">description: anObject	description := anObject</body><body package="Facebook-Domain" selector="link">link	^link</body><body package="Facebook-Domain" selector="link:">link: anObject	link := anObject</body><body package="Facebook-Domain" selector="location">location	^location</body><body package="Facebook-Domain" selector="location:">location: anObject	location := anObject</body><body package="Facebook-Domain" selector="modified">modified	^modified</body><body package="Facebook-Domain" selector="modified:">modified: anObject	modified := anObject</body><body package="Facebook-Domain" selector="modified_major">modified_major	^modified_major</body><body package="Facebook-Domain" selector="modified_major:">modified_major: anObject	modified_major := anObject</body><body package="Facebook-Domain" selector="name">name	^name</body><body package="Facebook-Domain" selector="name:">name: anObject	name := anObject</body><body package="Facebook-Domain" selector="owner">owner	^owner</body><body package="Facebook-Domain" selector="owner:">owner: anObject	owner := anObject</body><body package="Facebook-Domain" selector="size1">size1	^size</body><body package="Facebook-Domain" selector="size:">size: anObject	size := anObject</body><body package="Facebook-Domain" selector="type">type	^type</body><body package="Facebook-Domain" selector="type:">type: anObject	type := anObject</body><body package="Facebook-Domain" selector="visible">visible	^visible</body><body package="Facebook-Domain" selector="visible:">visible: anObject	visible := anObject</body></methods><methods><class-id>Facebook.PhotoAlbum</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="from:">from: dictionary	super from: dictionary.	created := Timestamp fromUnixSeconds: created.	modified := Timestamp fromUnixSeconds: modified.	modified_major ifNotNil: [modified_major := Timestamp fromUnixSeconds: modified_major]</body><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	name := 'none'</body></methods><methods><class-id>Facebook.PhotoAlbum</class-id> <category>convenience</category><body package="Facebook-Domain" selector="addParametersTo:">addParametersTo: api	"when used to create a new album, pull the non-nil arguments"	api addParameter: 'name' -&gt; name.	#(location description visible) do: [:each | | val |		val := self perform: each.		val ifNotNil: [api addParameter: each asString -&gt; val]].</body></methods><methods><class-id>Facebook.PhotoAlbum</class-id> <category>printing</category><body package="Facebook-Domain" selector="printOn:">printOn: stream	super printOn: stream.	stream nextPutAll: ' [', name, ']'</body></methods><methods><class-id>Facebook.EventMemberDetail</class-id> <category>accessing</category><body package="Facebook-Domain" selector="attending">attending	^attending</body><body package="Facebook-Domain" selector="attending:">attending: anObject	attending := anObject</body><body package="Facebook-Domain" selector="declined">declined	^declined</body><body package="Facebook-Domain" selector="declined:">declined: anObject	declined := anObject</body><body package="Facebook-Domain" selector="not_replied">not_replied	^not_replied</body><body package="Facebook-Domain" selector="not_replied:">not_replied: anObject	not_replied := anObject</body><body package="Facebook-Domain" selector="unsure">unsure	^unsure</body><body package="Facebook-Domain" selector="unsure:">unsure: anObject	unsure := anObject</body></methods><methods><class-id>Facebook.EventMemberDetail</class-id> <category>initialize-release</category><body package="Facebook-Domain" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	attending := nil.	declined := nil.	not_replied := nil.	unsure := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Core.Object</class-id> <category>testing</category><body package="FacebookConnect" selector="isFacebookError">isFacebookError	^false</body></methods><methods><class-id>Core.Dictionary</class-id> <category>testing</category><body package="FacebookConnect" selector="isFacebookError">isFacebookError	^(self at: 'error_code' ifAbsent: [nil]) notNil</body></methods><methods><class-id>Net.HeaderField</class-id> <category>parsing</category><body package="FacebookConnect" selector="parse:">parse: rfc822Stream"Override to handle errors.  Note: This override may be removed in VW 7.7"	self source: rfc822Stream asStream.	value := [self doParse: rfc822Stream]		on: Error		do: [:ex | nil].</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Dictionary</name><environment>Core</environment><super>Core.Set</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>HeaderField</name><environment>Net</environment><super>Net.MessageElement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Net-MIME-Support</category><attributes><package>MIME</package></attributes></class></st-source>