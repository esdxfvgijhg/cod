<?xml version="1.0"?><st-source><!-- Name: Parcel Load DialogComment: Displays parcel comment and version and allows selection of multiple parcels.Developed in May 2000 at Acadia University by Darrell Rhodenizer (masamune@ns.sympatico.ca) and Ivan Tomek (ivan.tomek@acadiau.ca).HideSource: falseParcel: ParcelLoadDialogSaveSource: trueVersion: 1.0Date: 10:23:37 am May 24, 2000 --><time-stamp>From VisualWorksÂ®, Release 5i.2 apr00.2 of May 23, 2000 on May 24, 2000 at 10:23:37 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>ParcelLoaderDialog</name><environment>UI</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>allParcels defaultParcels parcelList parcelProperties propertiesDisplay filenameDisplay loadList showing </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Parcel Load Dialog</category></class><comment><class-id>UI.ParcelLoaderDialog</class-id><body>This class implements a parcel-loading dialog. It allows a choice between the default parcel path and user-specified path, displays version and comment of selected parcel, and allows the user to select any number of parcels for loading. Used by class Parcel during loading.Instance Variables:allParcels			&lt;Dictionary&gt;		filename asText -&gt; parcelname asTextdefaultParcels		&lt;Dictionary&gt;		parcels in default pathparcelList			&lt;SelectionInList&gt;	display of parcel/filename namesparcelProperties		&lt;ValueHolder&gt;		text editor displaying parcel version or commentpropertiesDisplay	&lt;ValueHolder&gt;		holds #comment or #version depending on desired displayfilenameDisplay		&lt;ValueHolder&gt;		holds true if displaying filename, false if displaying parcel nameshowing				&lt;ValueHolder&gt;		holds #nameOnly or #fullPath, determines what is displayed in listloadList 			&lt;OrderedCollection&gt;	holds parcels to be loaded</body></comment><methods><class-id>UI.ParcelLoaderDialog</class-id> <category>accessing</category><body><B>allParcels	</B>^allParcels isNil		ifTrue: 			[parcelProperties value: ('\\\\\Please wait while loading parcel information.' withCRs asText emphasizeAllWith: (Array with: #bold with: #color -&gt; ColorValue red)).			Cursor wait showWhile: [defaultParcels := allParcels := self getAllParcels]]		ifFalse: [allParcels]</body><body><B>loadList: anOrderedCollection 	</B>loadList := anOrderedCollection</body></methods><methods><class-id>UI.ParcelLoaderDialog</class-id> <category>actions</category><body><B>addAction	</B>"Add selected item to load list and display it in red."	| parcelFilename selection key value |	selection := parcelList selection.	key := filenameDisplay				ifTrue: [selection]				ifFalse: [self allParcels keyAtValue: selection].	value := allParcels at: key.	(Array with: key with: value)		do: [:el | el				addEmphasis: (Array with: #color -&gt; ColorValue red)				removeEmphasis: #()				allowDuplicates: false].	(self builder componentAt: #parcelList) widget updateAt: parcelList selectionIndex.	parcelFilename := self getFilenameForSelection.	(loadList includes: parcelFilename)		ifFalse: [loadList addLast: parcelFilename].	self changePropertyAndButtons</body><body><B>cancelAction	</B>"Cancel button - close dialog without returning a load collection."	^self close</body><body><B>customPathAction	</B>"Ask user for custom path, attempt to retrive and display 	parcels."	| directoryName parcelsInDirectory |	parcelsInDirectory := self getAllParcelsIn: (directoryName := Dialog							request: 'Please enter a path:'							initialAnswer: (SystemUtils getEnvironmentVariable: 'VISUALWORKS' ifAbsent: [Filename defaultDirectoryName])							onCancel: [^self]).	parcelsInDirectory isNil		ifTrue: [Dialog warn: 'No parcels found in ' , directoryName]		ifFalse: 			[allParcels := parcelsInDirectory.			self changeListAndKeepSelection: false]</body><body><B>defaultPathAction	</B>"Get parcels in default path and display them."	allParcels := defaultParcels.	self changeListAndKeepSelection: false.	self changePropertyAndButtons</body><body><B>getAllParcels	</B>"Answer Dictionary of filename asText -&gt; parcel name asText."	^self allParcels: self possibleFiles</body><body><B>getAllParcelsIn: aString 	</B>"Answer filenames with correct parcel extension found in 	dictionary aString, or nil."	| possibles dir |	possibles := OrderedCollection new.	((dir := aString asFilename) exists and: [dir isDirectory])		ifTrue: [possibles addAll: (dir filenamesMatching: '*' , Parcel fileExtension)]		ifFalse: [^nil].	possibles isEmpty ifTrue: [^nil].	^self allParcels: possibles</body><body><B>getComment: aFilename 	</B>"Answer comment of parcel in aFilename."	| cReader |	cReader := CodeReader new.	^((cReader readInfoFromFileNamed: aFilename asString)		at: #comment ifAbsent: [Array with: 'No comment available.'])		at: 1</body><body><B>getFilenameForSelection	</B>"Answer complete filename asString of selected item."	^parcelList selection notNil ifTrue: [filenameDisplay			ifTrue: [parcelList selection]			ifFalse: [self allParcels keyAtValue: parcelList selection]]</body><body><B>getVersion: aFilename 	</B>"Answers version of parcel in aFilename."	| cReader |	cReader := CodeReader new.	^(cReader readInfoFromFileNamed: aFilename asString)		at: #version ifAbsent: ['No version.']</body><body><B>helpAction	</B>"Display help window explaining the dialog window."	(SimpleHelp helpString: self class helpText) open</body><body><B>listOfParcels: aDictionaryOfParcels 	</B>"Answer sorted collection of parcel names or filenames depending 	on setting."	^(filenameDisplay		ifTrue: [aDictionaryOfParcels keys]		ifFalse: [aDictionaryOfParcels values]) asSortedCollection</body><body><B>loadAction	</B>"Close dialog window after checking for no load."	loadList isEmpty ifTrue: [(Dialog confirm: 'Exit without loading any parcels?')			ifFalse: [^self]].	^self close</body><body><B>loadingOrder	</B>"Display order in which parcels will be loaded."	| text |	text := loadList inject: 'Parcel loading order:\\' withCRs into: [:newText :parcelName | newText , parcelName, '\' withCRs ].	Dialog warn: text</body><body><B>removeAction	</B>"Remove selected item from loading set and change emphasis 	back to black."	| key value |	key := self getFilenameForSelection.	value := allParcels at: key.	(Array with: key with: value)		do: [:el | el				addEmphasis: (Array with: #color -&gt; ColorValue black)				removeEmphasis: (Array with: #color -&gt; ColorValue red)				allowDuplicates: false].	(self builder componentAt: #parcelList) widget updateAt: parcelList selectionIndex.	loadList remove: key.	self changePropertyAndButtons</body></methods><methods><class-id>UI.ParcelLoaderDialog</class-id> <category>aspects</category><body>parcelList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^parcelList isNil		ifTrue:			[parcelList := SelectionInList new]		ifFalse:			[parcelList]</body><body>parcelProperties	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^parcelProperties isNil		ifTrue:			[parcelProperties := String new asValue]		ifFalse:			[parcelProperties]</body><body>propertiesDisplay	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^propertiesDisplay isNil		ifTrue:			[propertiesDisplay := nil asValue]		ifFalse:			[propertiesDisplay]</body><body>showing	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^showing isNil		ifTrue:			[showing := nil asValue]		ifFalse:			[showing]</body></methods><methods><class-id>UI.ParcelLoaderDialog</class-id> <category>buttons</category><body><B>addButtonDisable	</B>(self builder componentAt: #addButton) disable	</body><body><B>addButtonEnable	</B>(self builder componentAt: #addButton) enable</body><body><B>enableOrDisableAllButtons	</B>| selection |	loadList isEmpty		ifTrue: [self loadButtonDisable. self loadingOrderButtonDisable]		ifFalse: [self loadButtonEnable. self loadingOrderButtonEnable].	(selection := parcelList selection) isNil		ifTrue: [self buttonsForNoSelection]		ifFalse: [self buttonsForSelection: selection]</body><body><B>loadButtonDisable	</B>(self builder componentAt: #loadButton) disable</body><body><B>loadButtonEnable	</B>(self builder componentAt: #loadButton) enable</body><body><B>loadingOrderButtonDisable	</B>(self builder componentAt: #loadingOrder) disable</body><body><B>loadingOrderButtonEnable	</B>(self builder componentAt: #loadingOrder) enable</body><body><B>removeButtonDisable	</B>(self builder componentAt: #removeButton) disable</body><body><B>removeButtonEnable	</B>(self builder componentAt: #removeButton) enable</body></methods><methods><class-id>UI.ParcelLoaderDialog</class-id> <category>changes</category><body><B>changeList	</B>"The list has changed. Display new and keep current selection."	filenameDisplay := showing value = #fullPath.	self changeListAndKeepSelection: true</body><body><B>changeListAndKeepSelection: aBoolean 	</B>"Change list from filename to parcel name or vice versa. Maintain 	selection if aBoolean is true."	| currentSelection |	currentSelection := parcelList selection.	parcelList list: (self listOfParcels: self allParcels).	aBoolean		ifTrue: 			[| newSelection |			newSelection := currentSelection notNil ifTrue: [filenameDisplay							ifTrue: [allParcels keyAtValue: currentSelection]							ifFalse: [allParcels at: currentSelection]].			currentSelection notNil ifTrue: [parcelList selection: newSelection]]</body><body><B>changePropertyAndButtons	</B>"Either the parcel list or its selection or the selected property has 	changed. Update property display and buttons correspondingly."	parcelList selection isNil		ifTrue: [parcelProperties value: '']		ifFalse: [propertiesDisplay value = #comment				ifTrue: [self comment]				ifFalse: [self version]].	self enableOrDisableAllButtons</body></methods><methods><class-id>UI.ParcelLoaderDialog</class-id> <category>initialization</category><body><B>initialize	</B>super initialize.	filenameDisplay := false.	propertiesDisplay := #comment asValue.	showing := #nameOnly asValue.	parcelProperties := ('\\\\\Please select Default Path or Custom Path to open parcel list.' withCRs asText emphasizeAllWith: (Array with: #bold with: #color -&gt; ColorValue red)) asValue</body><body><B>postBuildWith: aBuilder 	</B>parcelList selectionHolder onChangeSend: #changePropertyAndButtons to: self.	propertiesDisplay onChangeSend: #changePropertyAndButtons to: self.	showing onChangeSend: #changeList to: self</body></methods><methods><class-id>UI.ParcelLoaderDialog</class-id> <category>private</category><body><B>allParcels: anOrderedCollection 	</B>"Given anOrderedCollection of filenames that seem to contain 	parcels, answer dictionary of (full filename asText -&gt; parcel 	name asText) associations, both with the same appropriate emphasis."	| codeReader |	allParcels := Dictionary new.	codeReader := CodeReader new.	anOrderedCollection		do: 			[:element | 			| parcelName pathName properties |			properties := codeReader readInfoFromFileNamed: element asString.			pathName := element asString asText.			parcelName := (properties at: #parcel ifAbsent: ['No Name']) asText.			(Parcel parcelNamed: parcelName) isNil				ifTrue: [allParcels at: (pathName emphasizeAllWith: #bold)						put: (parcelName emphasizeAllWith: #bold)]				ifFalse: [(Parcel parcelNamed: parcelName) version = (properties at: #version ifAbsent: ['No version.'])						ifTrue: [allParcels at: pathName put: parcelName]						ifFalse: [allParcels at: (pathName emphasizeAllWith: #underline)								put: (parcelName emphasizeAllWith: #underline)]]].	^allParcels</body><body><B>buttonsForNoSelection	</B>"No selection in list. Enable or disable buttons accordingly."	self addButtonDisable.	self removeButtonDisable</body><body><B>buttonsForSelection: aText 	</B>"Enable or disable action buttons according to current state."	| emphasis |	emphasis := aText emphasisAt: 1.	(emphasis notNil and: [emphasis = (#color -&gt; ColorValue red) or: [(emphasis class canUnderstand: #includes:)				and: [emphasis includes: #color -&gt; ColorValue red]]])		ifTrue: 			[self addButtonDisable.			self removeButtonEnable]		ifFalse: 			[self addButtonEnable.			self removeButtonDisable]</body><body><B>comment	</B>"Display comment for currently selected parcel."	parcelProperties value: (filenameDisplay		ifTrue: [(self getComment: parcelList selection)]		ifFalse: [(self getComment: (self allParcels keyAtValue: parcelList selection) asString)])</body><body><B>possibleFiles	</B>"Answer files whose filename has the correct parcel extension."	| possibles |	possibles := OrderedCollection new.	Parcel searchPathModel value do: 		[:dirName | 		| dir |		((dir := dirName asLogicalFileSpecification) exists and: [dir isDirectory])			ifTrue: [possibles addAll: (dir filenamesMatching: '*' , Parcel fileExtension)]].	^possibles</body><body><B>version	</B>"Display and answer version information of selected parcel."	| selection fileVersion installedVersion |	selection := Parcel parcelNamed: (self allParcels at: self getFilenameForSelection).	fileVersion := filenameDisplay		ifTrue: [self getVersion: parcelList selection]		ifFalse: [self getVersion: (allParcels keyAtValue: parcelList selection)].	installedVersion := selection notNil				ifTrue: [selection version]				ifFalse: ['Parcel not currently installed.'].	^parcelProperties value: ('File parcel version: ' , fileVersion , '\Installed version: ' , installedVersion) withCRs</body></methods><methods><class-id>UI.ParcelLoaderDialog class</class-id> <category>instance creation</category><body><B>openWith: anOrderedCollection 	</B>^(self new loadList: anOrderedCollection) open</body></methods><methods><class-id>UI.ParcelLoaderDialog class</class-id> <category>constants</category><body><B>helpText	</B>| textStream |	textStream := TextStream on: (String new: 100).	textStream emphasis: #bold; nextPutAll: 'Parcel list conventions:'; cr; emphasis: #plain; 	nextPutAll: '- Normal font: Parcel is already loaded.'; cr; emphasis: #bold; 	nextPutAll: '- Bold font: Parcel is not loaded yet.'; cr; emphasis: #underline; 	nextPutAll: '- Underlined: Parcel is already loaded but file contains a different version.'; cr; emphasis: #color -&gt; ColorValue red; 	nextPutAll: '- Red: Parcel selected for loading.'; cr; cr; emphasis: #bold; 	nextPutAll: 'Parcel Directory box:'; cr; emphasis: #plain; 	nextPutAll: '- Custom - enter your own directory, Default - use directories in VW settings.'; cr; cr; emphasis: #bold; 	nextPutAll: 'Displayed Name box:'; cr; emphasis: #plain; 	nextPutAll: '- File Name / Parcel Name: Display full file name or parcel name only in the list.'; cr; cr; emphasis: #bold; 	nextPutAll: 'Parcels to Load box:'; cr; emphasis: #plain; 	nextPutAll: '- Loading Order button: Shows order in which parcels will be loaded.'; cr; 	nextPutAll: '- Add/Remove buttons: Add or remove selected parcel for loading.'; cr; emphasis: #plain; 	nextPutAll: '- Load all: Load all selected (red) parcels.'; cr; cr; emphasis: #bold; 	nextPutAll: 'Displayed Property box:'; cr; emphasis: #plain; 	nextPutAll: '- Version/Comment: Display version or comment of selected parcel.'.	^textStream contents</body></methods><methods><class-id>Tools.ParcelListBrowserHelper</class-id> <category>actions</category><body><B>loadParcel	</B>| anyChanges |	self changeRequest ifFalse: [ ^self ].	anyChanges := self manager loadParcelFor:  nil.	anyChanges ifFalse: [^self].	self browser updateParcelLists.	self browser updateNamespaceListFull.</body></methods><methods><class-id>Kernel.Parcel class</class-id> <category>api</category><body><B>loadParcelFor: aVisualOrNil 	</B>"UI for reading in a parcel in fast-loading binary format.Answer true if any changes were made."	| aListOfFilenames |	aListOfFilenames := OrderedCollection new: 50.	ParcelLoaderDialog openWith: aListOfFilenames.	aListOfFilenames isEmpty ifTrue: [^false].	aListOfFilenames do: [:aFilename | self loadParcelFrom: aFilename asFilename].	^true</body></methods><methods><class-id>UI.ParcelLoaderDialog class</class-id> <category>interface specs</category><body>windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Parcel Load Dialog' 			#min: #(#{Core.Point} 634 403 ) 			#max: #(#{Core.Point} 634 403 ) 			#bounds: #(#{Graphics.Rectangle} 83 99 717 502 ) 			#isEventDriven: true ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0 0 0.0471464 0 0.623288 0 0.833747 ) 					#name: #parcelList 					#model: #parcelList 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.52911 0 0.935484 0 0.678082 0 0.987593 ) 					#name: #loadButton 					#flags: 40 					#colors: 					#(#{UI.LookPreferences} 						#setForegroundColor: #(#ColorValue #red ) ) 					#model: #loadAction 					#label: 'Load Selections' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.90411 0 0.935484 0 0.996575 0 0.987593 ) 					#name: #cancelButton 					#model: #cancelAction 					#label: 'Cancel' 					#defaultable: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.630137 0 0.0471464 0 1.00342 0 0.833747 ) 					#model: #parcelProperties 					#isReadOnly: false ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.630137 0 -0.00496278 ) 					#label: 'Parcel Properties' ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.708904 0 0.937965 ) 					#model: #propertiesDisplay 					#label: 'Comment' 					#select: #comment ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.708904 0 0.880893 ) 					#model: #propertiesDisplay 					#label: 'Version' 					#select: #version ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.52911 0 0.878412 0 0.678082 0 0.930521 ) 					#name: #removeButton 					#flags: 40 					#model: #removeAction 					#label: '&lt;- Remove' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.373288 0 0.878412 0 0.52226 0 0.930521 ) 					#name: #addButton 					#flags: 40 					#model: #addAction 					#label: 'Add -&gt;' 					#defaultable: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0 -2 0 ) 					#name: #listLegend 					#label: 'Parcels' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.373288 0 0.935484 0 0.52226 0 0.987593 ) 					#name: #loadingOrder 					#flags: 40 					#model: #loadingOrder 					#label: 'Loading Order' 					#defaultable: true ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.202055 0 0.880893 ) 					#model: #showing 					#label: 'File Name' 					#select: #fullPath ) 				#(#{UI.RadioButtonSpec} 					#layout: #(#{Graphics.LayoutOrigin} 0 0.202055 0 0.937965 ) 					#model: #showing 					#label: 'Parcel Name' 					#select: #nameOnly ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 1 0 0 0.836228 0 0.17637 0 0.995037 ) 					#label: 'Parcel directory' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.190068 0 0.836228 0 0.354452 0 0.995037 ) 					#label: 'Displayed Name' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.700342 0 0.836228 0 0.881849 0 0.995037 ) 					#label: 'Displayed Property' ) 				#(#{UI.GroupBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.366438 0 0.836228 0 0.686644 0 0.995037 ) 					#label: 'Parcels to Load' ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.90411 0 0.878412 0 0.996575 0 0.930521 ) 					#model: #helpAction 					#label: 'Help' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0256849 0 0.878412 0 0.15411 0 0.930521 ) 					#model: #customPathAction 					#label: 'Custom' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 0 0.0256849 0 0.935484 0 0.15411 0 0.987593 ) 					#model: #defaultPathAction 					#label: 'Default' 					#defaultable: true ) ) ) )</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>ParcelListBrowserHelper</name><environment>Tools</environment><super>Tools.BrowserHelper</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category></class></st-source>