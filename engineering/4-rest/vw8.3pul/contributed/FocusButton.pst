<?xml version="1.0"?><st-source><!-- Name: FocusButtonComment: This is a goodie parcel.DbIdentifier: bear73DbTrace: 13053DevelopmentPrerequisites: #(#(#any 'UIPainter' ''))PackageName: FocusButtonParcel: #('FocusButton')ParcelName: FocusButtonPrerequisiteParcels: #(#('UIPainter' ''))PrintStringCache: (5i.4  -  1.1,bobw)Version: 5i.4  -  1.1Post-Load Block: 	[:pkg| FocusActionButtonSpec postLoadActionFor: pkg ]Pre-Unload Block: 	[:pkg| FocusActionButtonSpec preUnloadActionFor: pkg ]Date: 6:29:29 AM August 5, 2009 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.7 (aug09.0) of August 5, 2009 on August 5, 2009 at 6:29:29 AM </time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>FocusActionButtonView</name><environment>UI</environment><super>UI.ActionButtonView</super><private>false</private><indexed-type>none</indexed-type><inst-vars>activeImage passiveImage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>FocusButton</category><attributes><package>FocusButton</package></attributes></class><comment><class-id>UI.FocusActionButtonView</class-id><body></body></comment><class><name>FocusActionButtonSpec</name><environment>UI</environment><super>UI.ActionButtonSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>activeImage passiveImage </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>FocusButton</category><attributes><package>FocusButton</package></attributes></class><comment><class-id>UI.FocusActionButtonSpec</class-id><body>This goodie is simple adaption of the Action Button to an typical"Internet-Browser-Button"Typical is, that a developer can define a active and a passive imageon the button.If the mouse is on the button the active button and a border of the button is shown, if the mouse leaves the button the passivebutton without the border is shown.to prevent too much action on the screen, it is recommanded tohave a black&amp;white image as a passive image and as a acrivethe colour version.idea and developed by:Jochen KrebsObjectSharemailto:jochen@objectshare.de(++49) (0) 89/895644-61LochhamerStr. 1182152 MartinsriedGermany</body></comment><class><name>FocusTriggerButtonController</name><environment>UI</environment><super>UI.TriggerButtonController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>FocusButton</category><attributes><package>FocusButton</package></attributes></class><comment><class-id>UI.FocusTriggerButtonController</class-id><body></body></comment><methods><class-id>UI.FocusActionButtonView</class-id> <category>aspects</category><body package="FocusButton" selector="activeImage">activeImage	^activeImage</body><body package="FocusButton" selector="passiveImage">passiveImage	^passiveImage</body></methods><methods><class-id>UI.FocusActionButtonView</class-id> <category>accessing</category><body package="FocusButton" selector="activeImage:">activeImage: aCachedImage 	activeImage := aCachedImage</body><body package="FocusButton" selector="passiveImage:">passiveImage: aCachedImage 	passiveImage := aCachedImage</body></methods><methods><class-id>UI.FocusActionButtonView</class-id> <category>controller accessing</category><body package="FocusButton" selector="defaultControllerClass">defaultControllerClass	^FocusTriggerButtonController</body></methods><methods><class-id>UI.FocusActionButtonView</class-id> <category>private</category><body package="FocusButton" selector="initializeState">initializeState	super initializeState.	state hasBorder: false.</body><body package="FocusButton" selector="redisplayActiveArea">redisplayActiveArea	self simpleRedisplayIn: self normalBox colorBackgroundIfNeeded: false</body></methods><methods><class-id>UI.FocusActionButtonView</class-id> <category>private-visual properties</category><body package="FocusButton" selector="specificHiliteColor">specificHiliteColor	^SymbolicPaint pushButtonBackground</body><body package="FocusButton" selector="specificSelectionBackgroundColor">specificSelectionBackgroundColor	^SymbolicPaint buttonBackground</body><body package="FocusButton" selector="specificSelectionForegroundColor">specificSelectionForegroundColor	^SymbolicPaint buttonBackground</body></methods><methods><class-id>UI.FocusActionButtonSpec</class-id> <category>aspects</category><body package="FocusButton" selector="activeImage">activeImage	^activeImage</body><body package="FocusButton" selector="activeImage:">activeImage: anImage 	activeImage := anImage</body><body package="FocusButton" selector="passiveImage">passiveImage	^passiveImage</body><body package="FocusButton" selector="passiveImage:">passiveImage: anImage 	passiveImage := anImage</body></methods><methods><class-id>UI.FocusActionButtonSpec</class-id> <category>private</category><body package="FocusButton" selector="componentSpecDo:">componentSpecDo: aCollection 		^aCollection doLeafFocusButtonSpec: self</body><body package="FocusButton" selector="dispatchTo:with:">dispatchTo: policy with: builder		policy focusActionButton: self into: builder</body></methods><methods><class-id>UI.FocusActionButtonSpec class</class-id> <category>private-interface building</category><body package="FocusButton" selector="addBindingsTo:for:channel:">addBindingsTo: anIdentityDictionary for: aSpec channel: aValueHolder 	super addBindingsTo: anIdentityDictionary		for: aSpec		channel: aValueHolder.	anIdentityDictionary at: #activeImage		put: (self adapt: aSpec				forAspect: #activeImage				channel: aValueHolder).	anIdentityDictionary at: #passiveImage		put: (self adapt: aSpec				forAspect: #passiveImage				channel: aValueHolder).	^self</body><body package="FocusButton" selector="componentName">componentName	^'Focus Button'</body><body package="FocusButton" selector="specGenerationBlock">specGenerationBlock	^[:ctrlr :point | 	| label spec |	spec := FocusActionButtonSpec 		model: nil		label: (label := '')		layout: ((ctrlr gridPoint: point) extent: 			(ctrlr currentMode value class				placementExtentFor: FocusActionButtonSpec				withLabel: label				inBuilder: ctrlr builder))		properties: #(#canDefault).	spec assignNameFrom: ctrlr.	spec]</body></methods><methods><class-id>UI.FocusActionButtonSpec class</class-id> <category>parcel load/unload/save</category><body package="FocusButton" selector="postLoadActionFor:">postLoadActionFor: aParcel	"A Parcel's post-load action must be a class method taking one	 argument, the Parcel being loaded.  Fill-out this template, and accept.	 Note that you can give the method whatever selector you want.	 You don't have to use postLoadActionFrom:.	 Note that all loaded classes are sent the message postLoad: after	 loading.  The default implementation, ClassDescription&gt;postLoad:	 runs the class's initialize method if it has one.  One may override	 this method to add additional loading behavior.  See also	 ClassDescription&gt;preSave: which is intended to be used along	 with ClassDescription&gt;postLoad: for managing class loading.	 The post-load action can then ignore class initialization and can	 instead concentrate on tasks such as opening windows, etc."	UIPalette addFocusButtonSystemSpecs</body><body package="FocusButton" selector="preUnloadActionFor:">preUnloadActionFor: aParcel	"A Parcel's pre-unload action must be a class method taking one	 argument, the Parcel being unloaded.  Fill-out this template and accept.	 Note that you can give the method whatever selector you want.	 You don't have to use preUnloadActionFor:.	 The pre-unload action should ensure that the Parcel unloads cleanly.	 This usually includes things like checking that any open applications	 derived from the Parcel are closed, and that any long-lived data strutures	 using instances of classes defined in the Parcel are emptied of those	 instances.	ApplicationModel checkUnloadOfApplicationsDefinedBy: aParcel is provided	to close-down any open applications defined by a parcel."	UIPalette removeFocusButtonSystemSpecs</body></methods><methods><class-id>UI.FocusTriggerButtonController</class-id> <category>compare</category><body package="FocusButton" selector="compare:with:">compare: firstImage with: secondImage 	(firstImage isKindOf: CachedImage) ifFalse: [^false].	(secondImage isKindOf: CachedImage) ifFalse: [^false].	((((firstImage height = secondImage height &amp; firstImage paintBasis)		= secondImage paintBasis &amp; firstImage width) = secondImage width		&amp; firstImage height) = secondImage height &amp; firstImage extent)		= secondImage extent ifTrue: [^true].	^false</body></methods><methods><class-id>UI.FocusTriggerButtonController</class-id> <category>cursor</category><body package="FocusButton" selector="viewHasCursorWithEvent:">viewHasCursorWithEvent: anEvent 	| aSensor aView |	(anEvent isKindOf: MouseMovedEvent) ifFalse: [^true].	view == nil ifTrue: [^false].	anEvent hasPoint ifFalse: [^false].	aSensor := self sensor.	(aView := view bounds containsPoint: (aSensor mousePointForEvent: anEvent))		ifTrue: 			[ (self compare: self view label with: self view activeImage) ifFalse: 					[self view hasBorder: true.					self view redisplayActiveArea.					self view label: self view activeImage]]		ifFalse: 			[(self compare: self view label with: self view passiveImage) ifFalse: 					[self view hasBorder: false.						self view redisplayActiveArea.					self view label: self view passiveImage]].	^aView</body></methods><methods><class-id>UI.UILookPolicy</class-id> <category>focus-button</category><body package="FocusButton" selector="focusActionButton:into:">focusActionButton: spec into: builder | component model hasSelector | model := spec modelInBuilder: builder. spec isDecorated  ifTrue: [component := self focusButtonClass model: model]  ifFalse: [component := self undecoratedActionButtonClass model: model]. self  setTheLabelFor: spec  component: component  in: builder. component controller: FocusTriggerButtonController new. self  setDispatcherOf: component  fromSpec: spec  builder: builder. spec tabable  ifTrue:   [component widgetState isTabStop: true.   builder sendKeyboardTo: component]. spec defaultable ifTrue: [component canDefault: true]. spec isDefault  ifTrue:   [component beDefault.   builder defaultAction: component]. hasSelector := false. spec activeImage notNil &amp; builder source notNil ifTrue: [(builder sourceclass isKindOf: Metaclass)   ifTrue:    [builder source class selectors do: [:x | x = spec activeImage asSymbolifTrue: [hasSelector := true]].    hasSelector ifTrue: [component activeImage: (builder source perform:spec activeImage asSymbol)].    hasSelector := false.    builder source class selectors do: [:x | x = spec passiveImage asSymbolifTrue: [hasSelector := true]].    hasSelector ifTrue: [component passiveImage: (builder source perform:spec passiveImage asSymbol)]]   ifFalse:    [component activeImage: (builder source class perform: spec activeImageasSymbol).    component passiveImage: (builder source class perform: spec passiveImageasSymbol)]]. component widgetState isEnabled: spec initiallyEnabled. builder isEditing ifFalse: [component widgetState isVisible: specinitiallyVisible]. builder component: component. builder wrapWith: (self simpleWrapperFor: spec). builder applyLayout: spec layout. builder wrapWith: (self simpleWidgetWrapperOn: builder spec: spec)</body><body package="FocusButton" selector="focusButtonClass">focusButtonClass		^FocusActionButtonView</body></methods><methods><class-id>Tools.UIPalette class</class-id> <category>integration of focusbutton</category><body package="FocusButton" selector="addFocusButtonSystemSpecs">addFocusButtonSystemSpecs	self focusButtonSpecsForPalette do: 		[:each | 		(self activeSpecsList includes: each) ifFalse: [self activeSpecsList add: each]]</body><body package="FocusButton" selector="focusButtonSpecsForPalette">focusButtonSpecsForPalette	^#(#{UI.FocusActionButtonSpec})</body><body package="FocusButton" selector="removeFocusButtonSystemSpecs">removeFocusButtonSystemSpecs	| specsList |	specsList := self activeSpecsList copy.	self focusButtonSpecsForPalette do: 		[:each | 		(specsList includes: each) ifTrue: [self activeSpecsList remove: each]]</body></methods><methods><class-id>UI.UISpecEnumerator</class-id> <category>secondary dispatch</category><body package="FocusButton" selector="doLeafFocusButtonSpec:">doLeafFocusButtonSpec: aSpec		self doLeafButtonSpec: aSpec</body></methods><methods><class-id>UI.AspectEnumerator</class-id> <category>secondary dispatch</category><body package="FocusButton" selector="doLeafFocusButtonSpec:">doLeafFocusButtonSpec: aSpec	|  m |	m := aSpec model.	m == nil ifTrue: [incompletes add: aSpec.  ^self].	actions at: m put: aSpec defaultModel.</body></methods><methods><class-id>UI.FocusActionButtonSpec class</class-id> <category>interface specs</category><body package="FocusButton" selector="basicsEditSpecLiteral">basicsEditSpecLiteral	"UIPainter new openOnClass: self andSelector: #basicsEditSpecLiteral"	&lt;resource: #canvas&gt;	^#(#FullSpec #window: #(#WindowSpec #label: ' ' #min: #(#Point 298 187) #max: #(#Point 298 243) #bounds: #(#Rectangle 363 263 661 506)) #component: #(#SpecCollection #collection: #(#(#LabelSpec #layout: #(#AlignmentOrigin 0 0.5 4 0 0.5 0) #label: 'Focus Button') #(#LabelSpec #layout: #(#AlignmentOrigin 10 0 117 0 0 1) #label: 'ID:') #(#LabelSpec #layout: #(#AlignmentOrigin 10 0 86 0 0 1) #label: 'Action:') #(#SubCanvasSpec #layout: #(#LayoutFrame 10 0 28 0 -10 1 59 0) #flags: 0 #minorKey: #labelConstructorSpec #clientKey: #labelConstructor) #(#CheckBoxSpec #layout: #(#Point 12 178) #model: #isDefault #label: 'Be Default') #(#CheckBoxSpec #layout: #(#Point 12 198) #model: #defaultable #label: 'Size as Default') #(#CheckBoxSpec #layout: #(#Point 12 217) #model: #hasImageOrientedLabel #tabable: true #label: 'Label Is Image') #(#LabelSpec #layout: #(#Point 10 125) #label: 'Active Image') #(#LabelSpec #layout: #(#Point 10 156) #label: 'Passive Image') #(#InputFieldSpec #properties: #(#PropertyListDictionary #dragExitSelector #dragLeaveSelectorAspect: #dragEnterSelector #dragEnterSelectorAspect: #dropSelector #dropInSelectorAspect: #dragOverSelector #dragOverSelectorAspect:) #layout: #(#LayoutFrame 122 0 59 0 -10 1 84 0) #name: #modelField #model: #model #menu: #fieldMenu) #(#InputFieldSpec #layout: #(#LayoutFrame 122 0 90 0 -10 1 115 0) #model: #name #menu: #fieldMenu) #(#InputFieldSpec #layout: #(#LayoutFrame 122 0 121 0 -10 1 146 0) #model: #activeImage #menu: #fieldMenu #type: #string) #(#InputFieldSpec #layout: #(#LayoutFrame 122 0 152 0 -10 1 177 0) #model: #passiveImage #menu: #fieldMenu #type: #string))))</body><body package="FocusButton" selector="detailsEditSpec">detailsEditSpec	"UIPainter new openOnClass: self andSelector: #detailsEditSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: ' ' 			#min: #(#Point 238 239 ) 			#max: #(#Point 238 239 ) 			#bounds: #(#Rectangle 281 181 519 420 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#MenuButtonSpec 					#layout: #(#LayoutFrame 86 0 35 0 -10 1 57 0 ) 					#model: #style 					#menu: #fontMenu ) 				#(#CheckBoxSpec 					#layout: #(#Point 10 68 ) 					#model: #isDefault 					#tabable: true 					#label: 'Be Default' ) 				#(#CheckBoxSpec 					#layout: #(#Point 10 88 ) 					#model: #defaultable 					#tabable: true 					#label: 'Size as Default' ) 				#(#CheckBoxSpec 					#layout: #(#Point 10 108 ) 					#model: #isOpaque 					#tabable: true 					#label: 'Opaque' ) 				#(#CheckBoxSpec 					#layout: #(#Point 10 128 ) 					#model: #tabable 					#tabable: true 					#label: 'Can Tab' ) 				#(#CheckBoxSpec 					#layout: #(#Point 10 148 ) 					#model: #initiallyDisabled 					#tabable: true 					#label: 'Initially Disabled' ) 				#(#CheckBoxSpec 					#layout: #(#Point 10 168 ) 					#model: #initiallyInvisible 					#tabable: true 					#label: 'Initially Invisible' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 10 0 59 0 0 1 ) 					#label: 'Font:' ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 0 0.5 4 0 0.5 0 ) 					#label: #componentName ) ) ) )</body></methods><methods><class-id>UI.FocusActionButtonSpec class</class-id> <category>resources</category><body package="FocusButton" selector="paletteIcon">paletteIcon	&lt;resource: #image&gt;	^CachedImage on: (Image			extent: 26 @ 26			depth: 3			bitsPerPixel: 4			palette: (MappedPalette withColors: ((Array new: 5)						at: 1 put: ColorValue black;						at: 2 put: (ColorValue							scaledRed: 3699							scaledGreen: 3699							scaledBlue: 3699);						at: 3 put: ColorValue white;						at: 4 put: (ColorValue							scaledRed: 6605							scaledGreen: 6605							scaledBlue: 6605);						at: 5 put: (ColorValue							scaledRed: 5548							scaledGreen: 5548							scaledBlue: 5548); yourself))			usingBits: (ByteArray fromPackedString: '@@@@@@@@@@@@@@@@@@@@@@H"H"H"H"H"H"H"H!@@@@@BL3L3L3L3L3L3L3LP@@@@@#L3L3L3L3L3L3L3D@@@@@H3L3L3L3L3L3L3L1@@@@@BL3L3L3L3L3L3L3LP@@@@@#L3L3L3L3L3L3L3D@@@@@H3L"H"H"H"H"HCL1@@@@@BL3IDQDQDQDQD@3LP@@@@@#L2QDH@@@ADQ@L3D@@@@@H3L$QB@@@DQDPCL1@@@@@BL3IDP @@QDQD@3LP@@@@@#L2QDH@@DQDQ@L3D@@@@@H3L$QB@DPDQDPCL1@@@@@BL3IDP QDPDQD@3LP@@@@@#L2QDQDQDPDQ@L3D@@@@@H3L$QDQDQDQDPCL1@@@@@BL3@@@@@@@@@@@3LP@@@@@#L3L3L3L3L3L3L3D@@@@@H3L3L3L3L3L3L3L1@@@@@BL3L3L3L3L3L3L3LP@@@@@#L3L3L3L3L3L3L3D@@@@@H3L3L3L3L3L3L3L1@@@@@BL3L3L3L3L3L3L3LP@@@@@QDQDQDQDQDQDQDQD@@@@@@@@@@@@@@@@@@@@@@@@@@b'))</body><body package="FocusButton" selector="paletteMonoIcon">paletteMonoIcon		&lt;resource: #image&gt;	^CachedImage on: (Image			extent: 26 @ 26			depth: 1			bitsPerPixel: 1			palette: CoveragePalette monoMaskPalette			usingBits: #[255 255 255 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 135 255 248 192 132 0 12 192 132 0 12 192 132 15 140 192 132 15 12 192 132 14 12 192 132 13 12 192 132 8 140 192 132 0 76 192 132 0 12 192 135 255 252 192 131 255 252 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 128 0 0 192 255 255 255 192 255 255 255 192])</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>UISpecEnumerator</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Support</category><attributes><package>UIBuilder-Support</package></attributes></class><class><name>AspectEnumerator</name><environment>UI</environment><super>UI.UISpecEnumerator</super><private>false</private><indexed-type>none</indexed-type><inst-vars>source bindings actions clients incompletes details </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Support</category><attributes><package>UIBuilder-Support</package></attributes></class><class><name>TriggerButtonController</name><environment>UI</environment><super>UI.BasicButtonController</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Controllers</category><attributes><package>UIBasics-Controllers</package></attributes></class><class><name>ActionButtonView</name><environment>UI</environment><super>UI.PushButtonView</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBasics-Components</category><attributes><package>UIBasics-Components</package></attributes></class><class><name>UILookPolicy</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>systemAttributes systemWidgetAttributes useSystemFontOnWidgets systemMenuAttributes </class-inst-vars><imports></imports><category>UIBuilder-Support</category><attributes><package>UIBuilder-Support</package></attributes></class><class><name>ActionButtonSpec</name><environment>UI</environment><super>UI.ButtonSpec</super><private>false</private><indexed-type>none</indexed-type><inst-vars>isDefault defaultable </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>UIBuilder-Specifications</category><attributes><package>UIBuilder-Specifications</package></attributes></class></st-source>