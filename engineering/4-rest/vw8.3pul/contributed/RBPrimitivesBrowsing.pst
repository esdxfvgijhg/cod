<?xml version="1.0"?><st-source><!-- Name: RBPrimitivesBrowsingNotice: Copyright 2008-2014 Cincom Systems, Inc.  All rights reserved.Comment: Adds menu items for browsing primitives to the Refactoring Browser.  The dialog accepts three styles of primitive indices, separated by commas or spaces.* integers* ranges of the form xxx-yyy* pattern strings that would normally receive match: (e.g.: 1*1, #2)DbIdentifier: bear73DbTrace: 443219DbUsername: nrossDbVersion: 1.3PackageName: RBPrimitivesBrowsingParcel: #('RBPrimitivesBrowsing')ParcelName: RBPrimitivesBrowsingPrintStringCache: (1.3,nross)Version: 1.3Date: 10:39:00 AM July 25, 2014 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.0 (jul14.3) of July 25, 2014 on July 25, 2014 at 10:39:00 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>PrimitiveIndexMatchCriterion</name><environment>Refactory.Browser</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>RBPrimitivesBrowsing</package></attributes></class><class><name>PrimitiveIndexRangeCriterion</name><environment>Refactory.Browser</environment><super>Refactory.Browser.PrimitiveIndexMatchCriterion</super><private>false</private><indexed-type>none</indexed-type><inst-vars>range </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>RBPrimitivesBrowsing</package></attributes></class><class><name>PrimitiveIndexGlobCriterion</name><environment>Refactory.Browser</environment><super>Refactory.Browser.PrimitiveIndexMatchCriterion</super><private>false</private><indexed-type>none</indexed-type><inst-vars>pattern </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>RBPrimitivesBrowsing</package></attributes></class><class><name>IndividualPrimitiveIndexCriterion</name><environment>Refactory.Browser</environment><super>Refactory.Browser.PrimitiveIndexMatchCriterion</super><private>false</private><indexed-type>none</indexed-type><inst-vars>index </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>RBPrimitivesBrowsing</package></attributes></class><methods><class-id>Refactory.Browser.PrimitiveIndexMatchCriterion</class-id> <category>testing</category><body package="RBPrimitivesBrowsing">matches: aPrimitiveIndex	self subclassResponsibility</body></methods><methods><class-id>Refactory.Browser.PrimitiveIndexMatchCriterion class</class-id> <category>testing</category><body package="RBPrimitivesBrowsing">isForString: aString	self subclassResponsibility</body></methods><methods><class-id>Refactory.Browser.PrimitiveIndexMatchCriterion class</class-id> <category>instance creation</category><body package="RBPrimitivesBrowsing">criteriaFor: aString	| spaceTokens tokens answer |	tokens := OrderedCollection new.	spaceTokens := aString trimBlanks tokensBasedOn: Character space.	spaceTokens do: [:each | tokens addAll: (each tokensBasedOn: $,)].	tokens := tokens reject: [:any | any trimBlanks isEmpty].	answer := OrderedCollection new.	tokens do:		[:each |			self subclasses do:				[:some |					| part |					part := some forString: each.					part notNil ifTrue: [answer add: part]				]		].	^answer</body><body package="RBPrimitivesBrowsing">forString: aString	(self isForString: aString) ifFalse: [^nil].	^self privateForString: aString</body></methods><methods><class-id>Refactory.Browser.PrimitiveIndexMatchCriterion class</class-id> <category>private - instance creation</category><body package="RBPrimitivesBrowsing">privateForString: aString	self subclassResponsibility</body></methods><methods><class-id>Refactory.Browser.PrimitiveIndexRangeCriterion</class-id> <category>testing</category><body package="RBPrimitivesBrowsing">matches: aPrimitiveIndex	^self range includes: aPrimitiveIndex</body></methods><methods><class-id>Refactory.Browser.PrimitiveIndexRangeCriterion</class-id> <category>accessing</category><body package="RBPrimitivesBrowsing">range	^range</body><body package="RBPrimitivesBrowsing">range: anObject	range := anObject</body></methods><methods><class-id>Refactory.Browser.PrimitiveIndexRangeCriterion class</class-id> <category>testing</category><body package="RBPrimitivesBrowsing">isForString: aString	^(aString occurrencesOf: $-) = 1 and:		[aString allSatisfy: [:each | each isDigit or: [each = $-]]]</body></methods><methods><class-id>Refactory.Browser.PrimitiveIndexRangeCriterion class</class-id> <category>private - instance creation</category><body package="RBPrimitivesBrowsing">privateForString: aString	| readStream from to dash |	readStream := aString readStream.	from := Number readFrom: readStream.	readStream atEnd ifTrue: [^nil].	dash := readStream next.	dash = $- ifFalse: [^nil].	to := Number readFrom: readStream.	to = 0 ifTrue: [^nil].	from &gt; to ifTrue: [^nil].	readStream atEnd ifFalse: [^nil].	^self new		range: (from to: to);		yourself</body></methods><methods><class-id>Refactory.Browser.PrimitiveIndexGlobCriterion</class-id> <category>testing</category><body package="RBPrimitivesBrowsing">matches: aPrimitiveIndex	^self pattern match: aPrimitiveIndex printString</body></methods><methods><class-id>Refactory.Browser.PrimitiveIndexGlobCriterion</class-id> <category>accessing</category><body package="RBPrimitivesBrowsing">pattern	^pattern</body><body package="RBPrimitivesBrowsing">pattern: anObject	pattern := anObject</body></methods><methods><class-id>Refactory.Browser.PrimitiveIndexGlobCriterion class</class-id> <category>private - instance creation</category><body package="RBPrimitivesBrowsing">privateForString: aString	^self new		pattern: aString;		yourself</body></methods><methods><class-id>Refactory.Browser.PrimitiveIndexGlobCriterion class</class-id> <category>testing</category><body package="RBPrimitivesBrowsing">isForString: aString	^aString anySatisfy: [:each | each = $* or: [each = $#]]</body></methods><methods><class-id>Refactory.Browser.IndividualPrimitiveIndexCriterion</class-id> <category>accessing</category><body package="RBPrimitivesBrowsing">index	^index</body><body package="RBPrimitivesBrowsing">index: anObject	index := anObject</body></methods><methods><class-id>Refactory.Browser.IndividualPrimitiveIndexCriterion</class-id> <category>testing</category><body package="RBPrimitivesBrowsing">matches: aPrimitiveIndex	^self index = aPrimitiveIndex</body></methods><methods><class-id>Refactory.Browser.IndividualPrimitiveIndexCriterion class</class-id> <category>private - instance creation</category><body package="RBPrimitivesBrowsing">privateForString: aString	^self new		index: (Number readFrom: aString readStream);		yourself</body></methods><methods><class-id>Refactory.Browser.IndividualPrimitiveIndexCriterion class</class-id> <category>testing</category><body package="RBPrimitivesBrowsing">isForString: aString	^(aString allSatisfy: [:each | each isDigit])		and: [aString notEmpty]</body></methods><methods><class-id>Refactory.Browser.BrowserEnvironment</class-id> <category>environments</category><body package="RBPrimitivesBrowsing">callersOfIndexedPrimitive: primitiveIndex	^SelectorEnvironment callersOfIndexedPrimitive: primitiveIndex in: self</body></methods><methods><class-id>Refactory.Browser.SelectorEnvironment class</class-id> <category>instance creation</category><body package="RBPrimitivesBrowsing">callersOfIndexedPrimitive: indexString in: anEnvironment	| answer criteria |	criteria := PrimitiveIndexMatchCriterion criteriaFor: indexString.	answer := self		callersOfIndexedPrimitiveMatching:			[:primitiveID | criteria anySatisfy: [:each | each matches: primitiveID]]		in: anEnvironment.	^answer		label: 'Callers of Indexed Primitive ' , indexString;		yourself</body></methods><methods><class-id>Refactory.Browser.SelectorEnvironment class</class-id> <category>private - rb primitives browsing</category><body package="RBPrimitivesBrowsing">callersOfIndexedPrimitiveMatching: aBlock in: anEnvironment	| classDict metaDict |	classDict := Dictionary new.	metaDict := Dictionary new.	self primitiveMethodsIn: anEnvironment do:		[:cls :sel :meth |			(aBlock value: meth primitiveNumber) ifTrue: 				[					| selectors |					selectors := cls isMeta 						ifTrue: [metaDict at: cls soleInstance fullRootName ifAbsentPut: [Set new]]						ifFalse: [classDict at: cls fullRootName ifAbsentPut: [Set new]].					selectors add: sel				]		].	^(self onEnvironment: anEnvironment)		classSelectors: classDict metaClassSelectors: metaDict;		yourself</body><body package="RBPrimitivesBrowsing">primitiveMethodsIn: anEnvironmentdo: aBlock		anEnvironment classesDo: 		[:class | 			class enumerateMethods: 				[:cls :sel :meth |					(meth primitiveNumber notNil and: 							[anEnvironment includesSelector: sel in: cls]) ifTrue:								[aBlock value: cls value: sel value: meth]				]		]</body></methods><methods><class-id>Refactory.Browser.RefactoringBrowser</class-id> <category>actions</category><body package="RBPrimitivesBrowsing">browsePrimitives	&lt;menuItem: 'References to Primitive Number...'		nameKey: nil		menu: #(#findMenu)		position: 20.02&gt;	| searchString |	searchString := self request: 'Enter a primitive index:' initialAnswer: String new.	self showWaitCursorWhile:		[			self class openOnEnvironment:				(self environment callersOfIndexedPrimitive: searchString)		]</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>BrowserEnvironment</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractBrowserEnvironment</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-Environments</category><attributes><package>Browser-Environments</package></attributes></class><class><name>RefactoringBrowser</name><environment>Refactory.Browser</environment><super>Refactory.Browser.AbstractRefactoringBrowser</super><private>false</private><indexed-type>none</indexed-type><inst-vars>policyClass </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Browser-RB UI</category><attributes><package>Browser-BrowserUI</package></attributes></class></st-source>