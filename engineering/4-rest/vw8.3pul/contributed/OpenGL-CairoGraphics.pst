<?xml version="1.0"?><st-source><!-- Name: OpenGL-CairoGraphicsNotice: Copyright (c) 2007-2008 Michael Lucas-SmithPermission is hereby granted, free of charge, to any personobtaining a copy of this software and associated documentationfiles (the "Software"), to deal in the Software withoutrestriction, including without limitation the rights to use,copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom theSoftware is furnished to do so, subject to the followingconditions:The above copyright notice and this permission notice shall beincluded in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIESOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE ANDNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHTHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OROTHER DEALINGS IN THE SOFTWARE.Comment: This package contains the necessary code to allow you to use CairoGraphics ImageSurface's as Textures in OpenGL.DbIdentifier: bear73DbTrace: 205278DevelopmentPrerequisites: #(#(#any 'CairoGraphics' '') #(#any 'OpenGL' ''))ExplicitPrerequisites: #()IgnoredPrerequisites: #()PackageName: OpenGL-CairoGraphicsParcel: #('OpenGL-CairoGraphics')PrerequisiteParcels: #(#('CairoGraphics' '') #('OpenGL' ''))PrintStringCache: (3.0 15,mlucassmith)Version: 3.0 15Date: 8:40:18 AM September 18, 2009 --><time-stamp>From VisualWorksÂ®, Pre-Release 7.7 (sep09.3) of September 18, 2009 on September 18, 2009 at 8:40:18 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Font</name><environment>OpenGL</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>face slant weight fontSize characters texture rectangles ascent descent maximum </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>OpenGL-CairoGraphics</package></attributes></class><comment><class-id>OpenGL.Font</class-id><body>Font is a specialized Texture that can create Text models for you to render in to your scene on an orthogonal projection.</body></comment><methods><class-id>OpenGL.Font</class-id> <category>accessing</category><body package="OpenGL-CairoGraphics" selector="characters">characters	^characters</body><body package="OpenGL-CairoGraphics" selector="characters:">characters: anObject	characters := anObject</body><body package="OpenGL-CairoGraphics" selector="face">face	^face</body><body package="OpenGL-CairoGraphics" selector="face:">face: anObject	face := anObject</body><body package="OpenGL-CairoGraphics" selector="fontSize">fontSize	^fontSize</body><body package="OpenGL-CairoGraphics" selector="fontSize:">fontSize: anObject	fontSize := anObject</body><body package="OpenGL-CairoGraphics" selector="slant">slant	^slant</body><body package="OpenGL-CairoGraphics" selector="slant:">slant: anObject	slant := anObject</body><body package="OpenGL-CairoGraphics" selector="weight">weight	^weight</body><body package="OpenGL-CairoGraphics" selector="weight:">weight: anObject	weight := anObject</body></methods><methods><class-id>OpenGL.Font</class-id> <category>initialize-release</category><body package="OpenGL-CairoGraphics" selector="build">build	| surface context extents position origin extent advance |	surface := CairoGraphics.ImageSurface format: CairoGraphics.CairoFormat argb32 extent: 1 @ 1.	context := surface context.	context selectFontFace: face slant: slant weight: weight.	context fontSize: fontSize.	ascent := context fontExtents ascent.	descent := context fontExtents descent.	maximum := 0 @ (ascent + descent).	rectangles := Array new: characters last - characters first + 1.	1 to: rectangles size do: [:index |		extents := context textExtents: (String with: (index + characters first - 1) asCharacter).		origin := maximum x @ 0.		extent := extents extent.		advance := extents xAdvance @ extents yAdvance.		rectangles at: index put: (Array with: origin with: extent with: advance).		maximum x: maximum x + extents xAdvance + 2].	context release.	surface release.	surface := CairoGraphics.ImageSurface format: CairoGraphics.CairoFormat argb32 extent: maximum ceiling.	context := surface context.	context source: ColorValue white.	context selectFontFace: face slant: slant weight: weight.	context fontSize: fontSize.	position := 0 @ ascent.	rectangles keysAndValuesDo: [:index :rectangle |		context moveTo: position.		context saveWhile: [context showText: (String with: (index + characters first - 1) asCharacter)].		position x: position x + rectangle last x + 2].	context release.	texture := Texture image: surface</body><body package="OpenGL-CairoGraphics" selector="initialize">initialize	face := 'courier new'.	slant := CairoGraphics.FontSlant normal.	weight := CairoGraphics.FontWeight normal.	fontSize := 12.	characters := 32 to: 127.	self build</body><body package="OpenGL-CairoGraphics" selector="release">release	texture ifNotNil: [texture release].	super release</body></methods><methods><class-id>OpenGL.Font</class-id> <category>api</category><body package="OpenGL-CairoGraphics" selector="text:">text: aString	| pointer data textureVectors textureCoordinates position vectors coordinates buffer |	vectors := (Array new: (6 * 4 * aString size)) writeStream.	coordinates := (Array new: (6 * 2 * aString size)) writeStream.	position := 0 @ 0.	aString keysAndValuesDo: [:index :character |		| rectangle origin advance A B C D S T U V offset step |		rectangle := rectangles at: (character asInteger - characters first + 1).		origin := rectangle at: 1.		advance := rectangle at: 3.		A := Array with: position x with: ascent + descent with: 0 with: 1.		B := Array with: position x with: 0 with: 0 with: 1.		C := Array with: position x + advance x with: 0 with: 0 with: 1.		D := Array with: position x + advance x with: ascent + descent with: 0 with: 1.		offset := origin x / maximum x.		step := advance x / maximum x + offset.		S := Array with: offset with: 1.		T := Array with: offset with: 0.		U := Array with: step with: 0.		V := Array with: step with: 1.		vectors nextPutAll: A; nextPutAll: D; nextPutAll: C; nextPutAll: C; nextPutAll: B; nextPutAll: A.		coordinates nextPutAll: S; nextPutAll: V; nextPutAll: U; nextPutAll: U; nextPutAll: T; nextPutAll: S.		position x: position x + advance x].	pointer := gl GLfloat malloc: 6 * 6 * aString size.	data := FloatArray withAll: vectors contents, coordinates contents.	buffer := Buffer newArrayBuffer.	buffer data: data mode: gl STREAM_DRAW.	pointer release.	textureVectors := buffer asAttributeArray: OpenGL.Vector4.	textureCoordinates := buffer asAttributeArray: OpenGL.Vector2 offset: 6 * 4 * aString size.	^OpenGL.RenderState new		uniformAt: 'texture' put: texture;		attributeAt: 'position' put: textureVectors;		attributeAt: 'textureCoordinate' put: textureCoordinates;		indices: (0 to: 6 * aString size - 1);		yourself</body></methods><methods><class-id>OpenGL.Font class</class-id> <category>instance creation</category><body package="OpenGL-CairoGraphics" selector="fromFontDescription:">fromFontDescription: aFontDescription	^self basicNew		face: aFontDescription familyName;		slant: (aFontDescription italic ifTrue: [CairoGraphics.FontSlant italic] ifFalse: [CairoGraphics.FontSlant normal]);		weight: (aFontDescription boldness &gt; 0.5 ifTrue: [CairoGraphics.FontWeight bold] ifFalse: [CairoGraphics.FontWeight normal]);		fontSize: aFontDescription pixelSize;		characters: (32 to: 127);		build;		yourself</body><body package="OpenGL-CairoGraphics" selector="new">new	^super new initialize</body></methods><methods><class-id>CairoGraphics.ImageSurface</class-id> <category>opengl</category><body package="OpenGL-CairoGraphics" selector="half">half	| surface | 	surface := self class format: self format extent: self extent half.	surface newCairoContextWhile: [:cr |		cr scale: 0.5.		cr source: self.		cr paint].	^surface</body><body package="OpenGL-CairoGraphics" selector="textureParameters:">textureParameters: aBlock	aBlock value: OpenGL.gl BGRA value: OpenGL.gl UNSIGNED_BYTE value: self data</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ImageSurface</name><environment>CairoGraphics</environment><super>CairoGraphics.Surface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CairoGraphicsX</category><attributes><package>CairoGraphics</package></attributes></class></st-source>