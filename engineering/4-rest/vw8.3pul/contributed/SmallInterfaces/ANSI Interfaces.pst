<?xml version="1.0"?><st-source><!-- Name: ANSI InterfacesHideSource: falseParcel: ANSI InterfacesPrerequisiteParcels: #(#('SmallInterfaces' ''))SaveSource: trueVersion: x3j20 standard 1.9Pre-Load Block: 	[ :pkg |  pkg addObject: Interface configuration synchronize named: #CurrentInterfaceSynchronizationState.Interface configuration synchronize: false]Post-Load Block: 	[:pkg| #{_Loader} ifDefinedDo: [:loader | loader postLoadActionFor: pkg]]Date: 12:02:46 am April 22, 2000 --><time-stamp>From VisualWorksÂ® NonCommercial, Release 5i.1 of January 24, 2000 on April 22, 2000 at 12:02:46 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>Interfaces</name><environment>Smalltalk</environment><private>false</private><imports>			OtherNameSpace.*			private Smalltalk.*			</imports><category>Interfaces</category></name-space><name-space><name>ANSI</name><environment>Interfaces</environment><private>false</private><imports>			OtherNameSpace.*			private Smalltalk.*			</imports><category>ANSI standard</category></name-space><class><name>IntervalProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.IntervalProtocol</class-id><body>Represents a collection whose elements are numbers which form an arithmetic progression. Elements cannot be accessed externally.</body></comment><class><name>OrderedCollectionFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.OrderedCollectionFactoryProtocol</class-id><body>This protocol defines the behavior of objects that can be used to create fixed sized ordered collections of objects which can be accessed externally using integer keys.</body></comment><class><name>DateAndTimeFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.DateAndTimeFactoryProtocol</class-id><body>Represents protocol for creating an abstraction for a particular day of the year.</body></comment><class><name>exceptionSelectorProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.exceptionSelectorProtocol</class-id><body>This protocol describe the behavior of objects that are used to select an exception handler. In particular, objects that conform to this protocol may occur as the first argument to #on:do: message sent to blocks.</body></comment><class><name>initializableCollectionFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.initializableCollectionFactoryProtocol</class-id><body>This protocol defines the behavior of objects that can be used to create non-empty collections.</body></comment><class><name>ZeroDivideProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ZeroDivideProtocol</class-id><body>This protocol describes the behavior of exceptions that are signalled when an attempt is made to divide some number (the dividend) by zero.</body></comment><class><name>CharacterProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.CharacterProtocol</class-id><body>This protocol describes the behavior that is common to character objects. Character objects serve as the element value for Smalltalk strings. The Smalltalk language provides a literal syntax for character objects. Character objects represent individual elements of an implementation defined execution character set whose individual elements are identified by integer values. These integers are called code points.  Each character object has an associated code point.It is unspecified whether or not each code point is uniquely associated with a unique character object.The execution character set is the character set used by an implementation during execution of a Smalltalk program.  It need not be the same as the character set used by that implementation to encode the definition of Smalltalk programs.</body></comment><class><name>exceptionBuilderProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.exceptionBuilderProtocol</class-id><body>This protocol describes the messages that may be used to set the information about an occurrence of an exception. This information may be retrieved using &lt;exceptionDescription&gt;  protocol. If an object conforming to this protocol is signaled as an exception, any information set in that object using this protocol's messages will also be available for retrival from the signaled exception  that is passed to a handler block.</body></comment><class><name>FractionFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.FractionFactoryProtocol</class-id><body>Represents protocol for creating an exact representation for rational numbers.</body></comment><class><name>WarningProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.WarningProtocol</class-id><body>This protocol describes the behavior of instances of class Warning. These are used to represent exceptional conditions that might occur that are not considered errors but which should be reported to the user. Typically, the actual warning exceptions used by an application will be subclasses of this class.As Warning is explicitly specified  to be subclassable, conforming implementations must implement its behavior in a non-fragile manner.</body></comment><class><name>BagProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.BagProtocol</class-id><body>Represents an unordered, variable sized collection whose elements can be added or removed, but cannot be individually accessed by external keys. A bag is similar to a set but can contain duplicate elements. Elements are duplicates if they are equivalent.</body></comment><class><name>DurationFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.DurationFactoryProtocol</class-id><body>Represents protocol for creating a particular length of time.</body></comment><class><name>failedMessageProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.failedMessageProtocol</class-id><body>This protocol describes the behavior of objects that represent a message that was sent to an object, but was not understood by that object.</body></comment><class><name>StringProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.StringProtocol</class-id><body>Provides protocol for string operations such as copying, storing, comparing, replacing, converting, indexing, and matching.  The element type of &lt;String&gt; is &lt;Character&gt;.  The range of codePoints of characters that may be elements of a &lt;String&gt; is implementation defined.</body></comment><class><name>ReadWriteStreamFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ReadWriteStreamFactoryProtocol</class-id><body>&lt;ReadWriteStreamfactory&gt; provides for the creation of objects conforming to the &lt;WriteStream&gt; protocol whose sequence values are supplied by a collection.</body></comment><class><name>abstractDictionaryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.abstractDictionaryProtocol</class-id><body>Provides protocol for accessing, adding, removing, and iterating over the elements of an unordered collection whose elements are accessed using an explicitly assigned external key.Glossary Entries</body></comment><class><name>collectionStreamProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.collectionStreamProtocol</class-id><body>An object conforming to &lt;collectionStream&gt; has a &lt;sequencedReadableCollection&gt; as its stream backing store.</body></comment><class><name>ExceptionProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ExceptionProtocol</class-id><body>This protocol describes the behavior of instances of class Exception. Typically, actual exceptions used by an application will be either direct or indirect subclasses of this class. Exception combines the behavior of &lt;exceptionBuilder&gt; and &lt;signaledException&gt;.  Instances are used to both supplied inform before an exception is signaled and to pass the information to an exception handler.As Exception is explicitly specified  to be subclassable, conforming implementations must implement its behavior in a non-fragile manner.</body></comment><class><name>SetProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.SetProtocol</class-id><body>Represents an unordered, variable sized collection whose elements can be added or removed, but cannot be individually accessed by external keys. A set is similar to a bag but cannot contain duplicate elements.</body></comment><class><name>rationalProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.rationalProtocol</class-id><body>Rational numbers may be either integers or fractions.  An integer is logically a fraction whose denominator is one. This protocol is necessary because some integer and most fraction operations can produce results that may be either an integer or a fraction.</body></comment><class><name>CharacterFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.CharacterFactoryProtocol</class-id><body>This protocol describes the behavior for accessing character objects.</body></comment><class><name>ZeroDivideFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ZeroDivideFactoryProtocol</class-id><body>This protocol describe the behavior of the global ZeroDivide. It is used to as an exception selector to catch zero divide exceptions and can also be used to signal that a division by zero error has occured. Zero divide exceptions are resumable so any message in this protocol that signal such an exception may ultimately return to their sender. The signaled exceptions generated by this type of object conform to the protocol &lt;ZeroDivide&gt; </body></comment><class><name>sequencedCollectionProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.sequencedCollectionProtocol</class-id><body>Provides protocol for writing to an ordered collection of objects, whose elements can be accessed using external integer keys.</body></comment><class><name>ObjectClassProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ObjectClassProtocol</class-id><body>This protocol describes the behavior the class object whose global identifier is 'Object', which is the traditional root of the class hierarchy.This class must be implemented in such a way that it is not fragile. A class is said to be fragile if it is implemented in such a way that subclasses of that class can change the behavior of any standard-specified method without overriding the implementation of those methods. This can happen when a method is implemented to use an auxiliary method that is not specified in the standard, which the subclass then (possibly unintentionally) overrides. The inherited method will then invoke the subclass' implementation of the auxiliary method rather than the expected implementation in the superclass.One way to ensure that the implementation of a class is not fragile is to ensure that any message sent to self is either part of the specified behavior for that class or has a selector that begins with an underscore. Alternatively, an implementation may use implementation-specific means to implement these methods in a way that makes them non-fragile.</body></comment><class><name>BagFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.BagFactoryProtocol</class-id><body>This protocol defines the behavior of objects that can be used to create objects that conform to the protocol &lt;Bag&gt;.</body></comment><class><name>WarningClassProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.WarningClassProtocol</class-id><body>This protocol describe the behavior of the global Warning. The value of the standard global Warning is a class object that conforms to this protocol. The class Warning is explicitly specified  to be subclassable in a standard conforming program.  Conforming implementations must implement its behaviors in a non-fragile manner.The signaled exceptions generated by this type of object conform to the protocol &lt;Warning&gt;.</body></comment><class><name>niladicValuableProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.niladicValuableProtocol</class-id><body>This protocol describes the behavior for objects supporting the #value selector.</body></comment><class><name>ReadStreamProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ReadStreamProtocol</class-id><body>An object conforming to &lt;ReadStream&gt; has a positionable sequence of values that can be read. The sequence values are provided by a sequenced collection that serves as the stream backing store. </body></comment><class><name>StringFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.StringFactoryProtocol</class-id><body>This protocol defines the behavior of objects that can be used to create objects that conform to &lt;String&gt;.  These objects are created with a specified size.</body></comment><class><name>floatCharacterizationProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.floatCharacterizationProtocol</class-id><body>Objects supporting this protocol characterize a floating point representation for real numbers. These characterizations are required by ISO/IEC 10967 for each precision of floating point numbers provided by an implementation.</body></comment><class><name>MessageNotUnderstoodProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.MessageNotUnderstoodProtocol</class-id><body>This protocol describes the behavior of exceptions that are signalled if the receiver of a message does not have a method with a matching  selector.</body></comment><class><name>puttableStreamProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.puttableStreamProtocol</class-id><body>An object conforming to &lt;puttableStream&gt; allows objects to be added to its past sequence values.</body></comment><class><name>exceptionSignalerProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.exceptionSignalerProtocol</class-id><body>This protocol describes the behavior of signaling an exceptional condition, locating an exception handler, and executing an exception action.</body></comment><class><name>integerProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.integerProtocol</class-id><body>Represents an abstraction for integer numbers whose value is exact. Representations must provide unbounded precision and range, hence the ISO/IEC 10967 integer type parameter bounded is bound to false.</body></comment><class><name>numberProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.numberProtocol</class-id><body>Provides protocol for objects that represent  numeric  quantities and support operations performing arithmetic, arithmetic progressions, and conversion on numerical quantities. The descriptions of messages in this protocol reference specific arithmetic and numerical operations in the ISO/IEC 10967 standard, providing definition-by-reference for these operations.Smalltalk provides for mixed-mode arithmetic with the receiver and argument having different numeric representations. Unless otherwise specified by an individual operation the receiver and argument are first converted to the same numeric representation according to the Default Conversion Table.If multiple representations of &lt;Float&gt; are available, the representations are ordered from smallest to largest precision. This table contains multiple entries for &lt;Float&gt;, designated by a subscript, one for each designation of floating point literal representation. Values that are converted to &lt;Float&gt; are converted to the smallest precision of Float that can represent the number of digits in the original value.An &lt;integer&gt; converted to a &lt;scaledDecimal&gt; will have the scale of the other operand with the fractional digits set to zero.  A &lt;scaledDecimal&gt; converted to a &lt;Fraction&gt; will be a fraction having the same numeric value but having an integer numerator and a denominator which is ten raised to the power of the &lt;scaledDecimal&gt;'s scale factor.The result type of most numeric opeations is based upon the operaand type.  The Default Result Type for all operand types except &lt;Fraction&gt; is the type to which the operands have been converted according to the Default ConversionTable. If the converted operand type is &lt;Fraction&gt; the Default Result Type is &lt;rational&gt;. In all cases where the type of the return value differs from the default result type it is noted in the operation's description.Operations can produce results that are outside the set of representable numbers, or mathematically undefined. It is implementation defined whether errors are raised when results are not representable or if unrepresentable results are wrapped in implementation-defined continuation values or their equivalent. The effect of underflow and overflow is therefore implementation defined.&lt;number&gt; conforms to &lt;magnitude&gt;. All object that implement the &lt;number&gt; protocol or any protocol that conforms to &lt;number&gt; are comparable.</body></comment><class><name>exceptionDescriptionProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.exceptionDescriptionProtocol</class-id><body>This protocol describe the messages that may be used to obtain information about an occurrence of an exception.</body></comment><class><name>gettableStreamProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.gettableStreamProtocol</class-id><body>An object conforming to &lt;gettableStream&gt; can read objects from its future sequence values.</body></comment><class><name>niladicBlockProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.niladicBlockProtocol</class-id><body>This protocol describes the behavior for blocks with no arguments.Objects conforming to this protocol can be created only by the block constructor construct of the Smalltalk language.</body></comment><class><name>dyadicValuableProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.dyadicValuableProtocol</class-id><body>This protocol describes the behavior for objects supporting the #value:value: selector.</body></comment><class><name>WriteStreamFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.WriteStreamFactoryProtocol</class-id><body>&lt;WriteStream Factory&gt; provides for the creation of objects conforming to the &lt;WriteStream&gt; protocol whose sequence values are supplied by a collection.</body></comment><class><name>FileStreamProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.FileStreamProtocol</class-id><body>Provides protocol for streams over external files. The external file serves as the stream backing store. When objects are read or written from a file stream they must be translated from or two an external data representation. File streams have an external stream type that is specified when the stream is created. The external stream type defines the data translation and the sequence value type for the stream. External stream types are specified using &lt;symbol&gt; objects. The standard defines the following external stream types:#'binary'	The external data is treated as sequence of 8-bit bytes. The sequence value type is &lt;integer&gt; with values restricted to the range 0 to 255.#'text' 	The external data is treated as a sequenced of 8-bit characters encoded using an implementation defined external character set.  The sequence value type is &lt;Character&gt; restricted to those specific characters that may be represented in the external character set.Implementations may define other external stream types.</body></comment><class><name>magnitudeProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.magnitudeProtocol</class-id><body>Provides protocol for comparing objects which are linearly ordered with respect to some comparison operation.</body></comment><class><name>TranscriptProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.TranscriptProtocol</class-id><body>An object conforming to &lt;Transcript&gt; is a &lt;puttableStream&gt; for logging status messages from Smalltalk programs. The sequence value type of &lt;Transcript&gt; is &lt;Character&gt;. There may be an implementation defined stream backing store that receives characters written to the stream in an implementatiuon defined manner.</body></comment><class><name>ArrayFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ArrayFactoryProtocol</class-id><body>This protocol defines the behavior of objects that can be used to create objects that conform to &lt;Array&gt;.  These objects are created with a specified size.  If element values are not explicitly provided they default to nil.</body></comment><class><name>DateAndTimeProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.DateAndTimeProtocol</class-id><body>This protocol describes the behavior that is common to date time objects. Date time objects represent individual points in Coordinated Universal Time (UTC) as represented in an implementation defined local time.  The exact properties of local times are unspecified. Local times may differ in their offset from UTC.  A given local time may have different offsets from UTC at different points in time.All dates and times in the UTC local time are in the Gregorian calendar. Date times prior to the adoption of the Gregorian calendar are given in the retrospective astronomical Gregorian calendar. The year 1 B.C. is astronomical Gregorian year 0. The year 2 B.C. is astronomical Gregorian year -1. The year 1 A.D. is astronomical Gregorian year 1. The offset of the UTC local time is zero.</body></comment><class><name>exceptionSetProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.exceptionSetProtocol</class-id><body>This protocol describes the behavior of objects that may be used to group a set of &lt;exceptionSelector&gt; objects into a single &lt;exceptionSelector&gt;. This is useful for establishing a single exception handler that may deal with several different types of exceptions.</body></comment><class><name>classDescriptionProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.classDescriptionProtocol</class-id><body>This protocol describes the behavior of class objects. It provides messages for identifying and locating class objects within the class hierarchy.</body></comment><class><name>SortedCollectionFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.SortedCollectionFactoryProtocol</class-id><body>Represents protocol for creating a variable sized collection of objects whose elements are ordered based on a sort order specified by a two parameter block called the sort block. Elements may be added, removed or inserted, and can be accessed using external integer keys.</body></comment><class><name>ExceptionClassProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ExceptionClassProtocol</class-id><body>This protocol describe the behavior of class objects that are used to create, signal, and select exceptions that exist within a specialization hierarchy.The value of the standard global Exception is a class object that conforms to this protocol. The class Exception is explicitly specified  to be subclassable. Conforming implementations must implement its behaviors in a non-fragile manner.</body></comment><class><name>booleanProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.booleanProtocol</class-id><body>This protocol describes the behavior of the objects that are the values of the reserved identifiers 'true' and 'false'.  These objects are identity objects.Several message specifications include a truth table describing the result of the binary operation implemented by that message. In each table, the value of the receiver is used to locate a row and the value of the argument is used to locate a column, the result being located at the intersection of the row and column.</body></comment><class><name>DurationProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.DurationProtocol</class-id><body>Represents a length of time.</body></comment><class><name>sequencedReadableCollectionProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.sequencedReadableCollectionProtocol</class-id><body>Provides protocol for reading an ordered collection of objects whose elements can be accessed using external integer keys. The keys are between one (1) and the number of elements in the collection, inclusive.</body></comment><class><name>writeFileStreamProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.writeFileStreamProtocol</class-id><body>Provides protocol for storing elements in an external file. The sequence values are provided by the external file which also serves as the stream backing store. A &lt;writeFileStream&gt; is a write-back stream.</body></comment><class><name>NotificationClassProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.NotificationClassProtocol</class-id><body>This protocol describe the behavior of the global Notification. The value of the standard global Notification is a class object that conforms to this protocol. The class Notification is explicitly specified  to be subclassable in a standard conforming program. Conforming implementations must implement its behaviors in a non-fragile manner.The signaled exceptions generated by this type of object conform to the protocol &lt;Notification&gt;.</body></comment><class><name>ReadWriteStreamProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ReadWriteStreamProtocol</class-id><body>An object conforming to &lt;ReadWriteStream&gt; can read from its future sequence values or write to its past sequence values. The sequence values are provided by a collection that serves as the stream backing store. It is implementation defined whether a &lt;ReadWriteStream&gt; is a write-back stream. Even if a &lt;ReadWriteStream&gt; is not a write-back stream, its associated collection may be subject to modification in an unspecified manner as long as it is associated with the stream.</body></comment><class><name>symbolProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.symbolProtocol</class-id><body>Represents an ordered, variable sized and immutable collection of characters. There is a unique object conforming to this protocol for every possible sequence of characters.  Symbols are identity objects.</body></comment><class><name>monadicBlockProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.monadicBlockProtocol</class-id><body>This protocol describes the behavior for blocks with one argument.Objects conforming to this protocol can be created only by the block constructor construct of the Smalltalk language.</body></comment><class><name>readableStringProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.readableStringProtocol</class-id><body>Provides protocol for string operations such as copying, comparing, replacing, converting, indexing, and matching. All objects that conform to the protocol &lt;readableString&gt; are comparable.</body></comment><class><name>signaledExceptionProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.signaledExceptionProtocol</class-id><body>This protocol describes the messages that may be sent to the argument of a handler block. These message are used to explicitly control how execution will continue when it leaves the handler block.</body></comment><class><name>IntervalFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.IntervalFactoryProtocol</class-id><body>Represents protocol for creating a collection whose elements are numbers which form an arithmetic progression.</body></comment><class><name>ObjectProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ObjectProtocol</class-id><body>This protocol describe the behavior that is common to all objects.</body></comment><class><name>sequencedContractibleCollectionProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.sequencedContractibleCollectionProtocol</class-id><body>Provides protocol for removing elements from an ordered collection of objects, whose elements can be accessed using external integer keys.</body></comment><class><name>IdentityDictionaryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.IdentityDictionaryProtocol</class-id><body>This protocol defines the behavior of unordered collections whose elements can be accessed using an explicitly-assigned, external key.  Key equivalence is defined as sending the #== message.</body></comment><class><name>nilProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.nilProtocol</class-id><body>This protocol describes the behavior that is unique to the distinguished immutable, identity object that is the value of the reserved identifier 'nil'.</body></comment><class><name>_Loader</name><environment>Interfaces.ANSI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><class><name>ErrorProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ErrorProtocol</class-id><body>This protocol describes the behavior of instances of class Error. These are used to represent error conditions that prevent the normal continuation of processing. Actual error exceptions used by an application may be subclasses of this class.As Error is explicitly specified  to be subclassable, conforming implementations must implement its behavior in a non-fragile manner.</body></comment><class><name>FloatProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.FloatProtocol</class-id><body>Represents a floating point representation for real numbers, whose value may be approximate. Provides protocol for performing trigonometry, exponentiation, and conversion on numerical quantities. Operations can produce results that are outside the set of representable numbers, or that are mathematically undefined. It is implementation defined whether errors are raised when results are not representable or if unrepresentable results are wrapped in implementation-defined continuation values or their equivalent. The effect of underflow and overflow is therefore implementation defined. It is erroneous if the result of an operation is mathematically undefined.</body></comment><class><name>MessageNotUnderstoodSelectorProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.MessageNotUnderstoodSelectorProtocol</class-id><body>This protocol describe the behavior of the value of the global named MessageNotUnderstood. This object  is used to as an exception selector to catch failed message sends. Message not understood exceptions are resumable so any message in this protocol that signal such an exception may ultimately return to their sender.This object is not specifed as an &lt;exceptionSignaler&gt; or an &lt;exceptionInstantiator&gt;. It as assumed that message not understood exceptions are signaled by the implemention dependent implementaton of the message &lt;Object&gt; #doesNotUnderstand:.</body></comment><class><name>DictionaryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.DictionaryProtocol</class-id><body>Represents an unordered collection whose elements can be accessed using an explicitly assigned external key. Key equivalence is defined as sending the #= message.</body></comment><class><name>extensibleCollectionProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.extensibleCollectionProtocol</class-id><body>Provides protocol for adding elements to and removing elements from a variable sized collection.</body></comment><class><name>collectionProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.collectionProtocol</class-id><body>Provides protocol for manipulating and operating on a collection of objects, called elements, either individually or as a whole. A collection can be fixed or variable sized, ordered or unordered, and its elements may or may not be accessible by external keys.Some implementations of collections may choose to use the hash values, as defined by either the message #hash or the message #identityHash, of either the elements of the collection or the keys by which those elements are accessed (if there are any). If the hash values of such objects are modified, the behavior of any message sent to such a collection is undefined until the message #rehash has been sent to the collection in order to restore the consistency of the collection.</body></comment><class><name>exceptionInstantiatorProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.exceptionInstantiatorProtocol</class-id><body>This protocol describes the instantiation behavior of objects that can create exceptions.</body></comment><class><name>IdentityDictionaryFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.IdentityDictionaryFactoryProtocol</class-id><body>This protocol defines the behavior of objects that can be used to create objects that conform to the protocol &lt;IdentityDictionary&gt;.</body></comment><class><name>ByteArrayProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ByteArrayProtocol</class-id><body>Represents a keyed collection whose element type is &lt;integer&gt; and is limited to the range 0 to 255, inclusive. The elements can be accessed externally using sequential integer keys. The index of the first element is one (1).</body></comment><class><name>ErrorClassProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ErrorClassProtocol</class-id><body>This protocol describe the behavior of the global Error. The value of the standard global Error is a class object that conforms to this protocol. The class Error is explicitly specified  to be subclassable in a standard conforming program. Conforming implementations must implement its behaviors in a non-fragile manner.The signaled exceptions generated by this type of object conform to the protocol &lt;Error&gt;.</body></comment><class><name>SetFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.SetFactoryProtocol</class-id><body>This protocol defines the behavior of objects that can be used to create objects that conform to the protocol &lt;Set&gt;.</body></comment><class><name>WriteStreamProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.WriteStreamProtocol</class-id><body>An object conforming to &lt;WriteStream&gt; has a positionable sequence of values to which new values may be written. The initial sequence values are provided by a collection that serves as the stream backing store. It is implementation defined whether a &lt;WriteStream&gt; is a write-back stream. Even if a &lt;WriteStream&gt; is not a write-back stream, its associated collection may be subject to modification in an unspecified manner as long as it is associated with the stream.</body></comment><class><name>DictionaryFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.DictionaryFactoryProtocol</class-id><body>This protocol defines the behavior of objects that can be used to create objects that conform to the protocol &lt;Dictionary&gt;.</body></comment><class><name>selectorProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.selectorProtocol</class-id><body>Defines the protocol supported by literal message selectors. No behavior is defined by this protocols but objects that conform to is can be used to perform dynamically generated message sends  using &lt;Object&gt; #perform: and related messages.</body></comment><class><name>ArrayProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ArrayProtocol</class-id><body>Represents a keyed collection of objects which can be accessed externally using sequential integer keys. The index of the first element is one (1).</body></comment><class><name>valuableProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.valuableProtocol</class-id><body>This protocol describes the behavior for objects that can be evaluated using variants of the #value message.</body></comment><class><name>SortedCollectionProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.SortedCollectionProtocol</class-id><body>Represents a variable sized collection of objects whose elements are ordered based on a sort order.  The sort order is specified by a &lt;dyadicValuable&gt; called the sort block. Elements may be added, removed or inserted, and can be accessed using external integer keys.</body></comment><class><name>ReadStreamFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ReadStreamFactoryProtocol</class-id><body>&lt;ReadStream Factory&gt; provides for the creation of objects conforming to the &lt;ReadStream&gt; protocol whose sequence values are supplied by a collection.</body></comment><class><name>collectionFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.collectionFactoryProtocol</class-id><body>Provides protocol for creating a collection of objects. A collection can be fixed or variable sized, ordered or unordered, and its elements may or may not be accessible by external keys.</body></comment><class><name>ByteArrayFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.ByteArrayFactoryProtocol</class-id><body>This protocol defines the behavior of objects that can be used to create objects that conform to &lt;ByteArray&gt;.  These objects are created with a specified size.  If the element values are not explicitly provided, they default to 0.</body></comment><class><name>OrderedCollectionProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.OrderedCollectionProtocol</class-id><body>Represents an ordered, variable sized collection of objects. Elements may be added, removed or inserted, and can be accessed using external integer keys.</body></comment><class><name>sequencedStreamProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.sequencedStreamProtocol</class-id><body>An object conforming to &lt;sequencedStream&gt; has a finite number of past and future sequence values. It maintains a position on its sequence values and allows the position to be altered.</body></comment><class><name>instantiatorProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.instantiatorProtocol</class-id><body>This protocol defines the behavior of objects that can be used to create other objects without requiring any additional information.</body></comment><class><name>NotificationProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.NotificationProtocol</class-id><body>This protocol describes the behavior of instances of the class Notification. These are used to represent exceptional conditions that may occur but which are not considered errors. Actual notification exceptions used by an application may be subclasses of this class.As Notification is explicitly specified  to be subclassable, conforming implementations must implement its behavior in a non-fragile manner.</body></comment><class><name>scaledDecimalProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.scaledDecimalProtocol</class-id><body>Provides a numeric representation of fixed point decimal numbers. The representation must be able to accurately represent decimal fractions. The standard recommends that the implementation of this protocol support unbounded precision, with no limit to the number of digits before and after the decimal point. If a bounded implementation is provided, then any operation which exceeds the bounds has an implementation-specified  result.</body></comment><class><name>FractionProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.FractionProtocol</class-id><body>An exact representation for rational numbers. It is unspecific whether the rational number are maintain in a reduced form but messages that reveal the numerator and denominator answer values as if the fraction was reduced.</body></comment><class><name>monadicValuableProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.monadicValuableProtocol</class-id><body>This protocol describes the behavior for objects supporting the value: selector.</body></comment><class><name>readFileStreamProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.readFileStreamProtocol</class-id><body>Provides protocol for traversing and reading elements in an external file. The sequence values are provided by the external file which also serves as the stream backing store. </body></comment><class><name>FileStreamFactoryProtocol</name><environment>Interfaces.ANSI</environment><super>Interface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interfaces</category></class><comment><class-id>Interfaces.ANSI.FileStreamFactoryProtocol</class-id><body>&lt;FileStream Factory&gt; provides for the creation of objects conforming to the &lt;readFileStream&gt; or &lt;writeFileStream&gt;</body></comment><static><name>CurrentInterfaceSynchronizationState</name><environment>Interfaces.ANSI._Loader</environment><private>false</private><constant>false</constant><category>Synchronization</category></static><methods><class-id>Interfaces.ANSI.IntervalProtocol</class-id> <category>sequencedReadableCollectionProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>after: target 	"Answer the object immediately following the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>at: index 	"Answer the element at the position index in the receiver."	^self implementorsResponsibility</body><body>at: index ifAbsent: exceptionBlock 	"Answer the element at the position index in the receiver.  If there is no position corresponding to index in the receiver, then answer the result of evaluating exceptionBlock."	^self implementorsResponsibility</body><body>before: target 	"Answer the object immediately preceding the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>findFirst: discriminator 	"Answer the index of the first element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>findLast: discriminator 	"Answer the index of the last element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>first	"Answer the first element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop do: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop keysAndValuesDo: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with an element of the receiver as the first argument and the element's position (index) as the second."	^self implementorsResponsibility</body><body>indexOf: target 	"Answer the index of the first element of the receiver which is equivalent to target. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>indexOf: target ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is equivalent to target. Answer the result of evaluating exceptionHandler with no parameters if no such element is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer 0 if no such subsequence is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer the result of evaluating exceptionHandler with no parameters if no such subsequence is found."	^self implementorsResponsibility</body><body>keysAndValuesDo: operation 	"Evaluate operation with the index of each element of the receiver, in order, together with the element itself."	^self implementorsResponsibility</body><body>last	"Answer the last element of the receiver."	^self implementorsResponsibility</body><body>reverseDo: operation 	"Evaluate operation with each element of the receiver in the reverse of the receiver's standard traversal order."	^self implementorsResponsibility</body><body>with: otherCollection do: operation 	"Evaluate operation with each element of the receiver and the corresponding element of otherCollection as parameters."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.IntervalProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.IntervalProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.IntervalProtocol</class-id> <category>repertoire</category><body>, operand 	"Answer a new collection which is the concatenation of the receiver and operand."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>copyFrom: start to: stop 	"Answer a new collection containing all of the elements of the receiver between the indices start and stop inclusive. If stop &lt; start, the result has a size of zero."	^self implementorsResponsibility</body><body>copyReplaceAll: targetElements with: replacementElements 	"Answer a new collection in which all subsequences of elements in the receiver matching targetElements are replaced in the new collection by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop with: replacementElements 	"Answer a new collection, containing the same elements as the receiver, but with the elements in the receiver between start and stop inclusive replaced by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which the elements of the receiver between start and stop inclusive have been replaced with replacementElement."	^self implementorsResponsibility</body><body>copyReplacing: targetElement withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which any occurrences of targetElement are replaced by replacementElement."	^self implementorsResponsibility</body><body>copyWith: newElement 	"Answer a new collection containing the same elements as the receiver, with newElement added."	^self implementorsResponsibility</body><body>copyWithout: oldElement 	"Answer a new collection, containing the same elements as the receiver in their original order omitting any elements equivalent to oldElement."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which excludes the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>reverse	"Answer a collection with the elements of the receiver arranged in reverse order."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.OrderedCollectionFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.OrderedCollectionFactoryProtocol</class-id> <category>repertoire</category><body>new	"Create a new object."	^self implementorsResponsibility</body><body>new: count 	"Create a new collection. The parameter count constrains the number of elements in the result."	^self implementorsResponsibility</body><body>with: element1 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 with: element4 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>withAll: newElements 	"Create a collection containing only the elements of newElements."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DateAndTimeFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DateAndTimeFactoryProtocol</class-id> <category>repertoire</category><body>clockPrecision	"Answer a &lt;Duration&gt; such that after that period of time passes, #now is guaranteed to give a different result. "	^self implementorsResponsibility</body><body>now	"Answer a &lt;DateAndTime&gt; representing the current date and time. "	^self implementorsResponsibility</body><body>year: year day: dayOfYear hour: hour minute: minute second: second 	"Answer a &lt;DateAndTime&gt; which is the second second of the minute minute of the hour hour of the day dayOfYear of the year year of the astronomical Gregorian calendar in local time. "	^self implementorsResponsibility</body><body>year: year day: dayOfYear hour: hour minute: minute second: second offset: offset 	"Answer a &lt;DateAndTime&gt; which is the second second of the minute minute of the hour hour of the day dayOfYear of the year year of the astronomical Gregorian calendar offset from UTC by offset. "	^self implementorsResponsibility</body><body>year: year month: month day: dayOfMonth hour: hour minute: minute second: second 	"Answer a &lt;DateAndTime&gt; which is the second second of the minute minute of the hour hour of the day dayOfMonth of the month month of the year year of the astronomical Gregorian calendar in local time. "	^self implementorsResponsibility</body><body>year: year month: month day: dayOfMonth hour: hour minute: minute second: second offset: offset 	"Answer a &lt;DateAndTime&gt; which is the second second of the minute minute of the hour hour of the day dayOfMonth of the month month of the year year of the astronomical Gregorian calendar offset from UTC by offset. "	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.exceptionSelectorProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.exceptionSelectorProtocol</class-id> <category>repertoire</category><body>, anotherException 	"Create an exception set."	^self implementorsResponsibility</body><body>handles: exception 	"Determine whether an exception handler will accept a signaled exception."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.initializableCollectionFactoryProtocol</class-id> <category>collectionFactoryProtocol</category><body>new	"Create a new object."	^self implementorsResponsibility</body><body>new: count 	"Create a new collection. The parameter count constrains the number of elements in the result."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.initializableCollectionFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.initializableCollectionFactoryProtocol</class-id> <category>repertoire</category><body>with: element1 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 with: element4 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>withAll: newElements 	"Create a collection containing all the elements of newElements."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ZeroDivideProtocol</class-id> <category>signaledExceptionProtocol</category><body>isNested	"Determine whether the current exception handler is within the scope of another handler for the same exception."	^self implementorsResponsibility</body><body>outer	"Evaluate the enclosing exception action for the receiver and return."	^self implementorsResponsibility</body><body>pass	"Yield control to the enclosing exception action for the receiver."	^self implementorsResponsibility</body><body>resignalAs: replacementException 	"Signal an alternative exception in place of the receiver."	^self implementorsResponsibility</body><body>resume	"Return from the message that signaled the receiver."	^self implementorsResponsibility</body><body>resume: resumptionValue 	"Return the argument as the value of the message that signaled the receiver."	^self implementorsResponsibility</body><body>retry	"Abort an exception handler and re-evaluate its protected block."	^self implementorsResponsibility</body><body>retryUsing: alternativeBlock 	"Abort an exception handler and evaluate a new block in place of the handler's protected block."	^self implementorsResponsibility</body><body>return	"Return nil as the value of the block protected by the active exception handler."	^self implementorsResponsibility</body><body>return: returnValue 	"Return the argument as the value of the block protected by the active exception handler."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ZeroDivideProtocol</class-id> <category>ErrorProtocol</category><body>defaultAction	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ZeroDivideProtocol</class-id> <category>exceptionBuilderProtocol</category><body>messageText: signalerText 	"Set an exception's message text."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ZeroDivideProtocol</class-id> <category>repertoire</category><body>dividend	"Answer the number that was being divided by zero."	^self implementorsResponsibility</body><body>isResumable	"Determine whether an exception is resumable."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.CharacterProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.CharacterProtocol</class-id> <category>repertoire</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>asLowercase	"Return a character which is equivalent to the lowercase representation of the receiver."	^self implementorsResponsibility</body><body>asString	"Return a new string whose sole element is equivalent to the receiver."	^self implementorsResponsibility</body><body>asUppercase	"Return a character equivalent to the uppercase representation of the receiver."	^self implementorsResponsibility</body><body>codePoint	"Return the encoding value of the receiver."	^self implementorsResponsibility</body><body>isAlphaNumeric	"Test whether the receiver is a letter or digit."	^self implementorsResponsibility</body><body>isDigit	"Test whether the receiver is a digit."	^self implementorsResponsibility</body><body>isLetter	"Test whether the receiver is a letter."	^self implementorsResponsibility</body><body>isLowercase	"Test whether the receiver is a lowercase letter."	^self implementorsResponsibility</body><body>isUppercase	"Test whether the receiver is an uppercase letter."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.exceptionBuilderProtocol</class-id> <category>repertoire</category><body>messageText: signalerText 	"Set an exception's message text."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FractionFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FractionFactoryProtocol</class-id> <category>repertoire</category><body>numerator: top denominator: bottom 	"Answer a new fraction whose numerator is top, and whose denominator is bottom."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WarningProtocol</class-id> <category>signaledExceptionProtocol</category><body>isNested	"Determine whether the current exception handler is within the scope of another handler for the same exception."	^self implementorsResponsibility</body><body>outer	"Evaluate the enclosing exception action for the receiver and return."	^self implementorsResponsibility</body><body>pass	"Yield control to the enclosing exception action for the receiver."	^self implementorsResponsibility</body><body>resignalAs: replacementException 	"Signal an alternative exception in place of the receiver."	^self implementorsResponsibility</body><body>resume	"Return from the message that signaled the receiver."	^self implementorsResponsibility</body><body>resume: resumptionValue 	"Return the argument as the value of the message that signaled the receiver."	^self implementorsResponsibility</body><body>retry	"Abort an exception handler and re-evaluate its protected block."	^self implementorsResponsibility</body><body>retryUsing: alternativeBlock 	"Abort an exception handler and evaluate a new block in place of the handler's protected block."	^self implementorsResponsibility</body><body>return	"Return nil as the value of the block protected by the active exception handler."	^self implementorsResponsibility</body><body>return: returnValue 	"Return the argument as the value of the block protected by the active exception handler."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WarningProtocol</class-id> <category>NotificationProtocol</category><body>isResumable	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WarningProtocol</class-id> <category>exceptionBuilderProtocol</category><body>messageText: signalerText 	"Set an exception's message text."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WarningProtocol</class-id> <category>repertoire</category><body>defaultAction	"The default action taken if the exception is signaled."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.BagProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which includes only the elements in the receiver which cause discriminator to evaluate to false."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains only the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.BagProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.BagProtocol</class-id> <category>extensibleCollectionProtocol</category><body>remove: oldElement 	"Remove the first element of the receiver which is equivalent to oldElement and return the removed element."	^self implementorsResponsibility</body><body>remove: oldElement ifAbsent: exceptionHandler 	"Remove the first element of the receiver which is equivalent to oldElement. If it is not found, answer the result of evaluating exceptionHandler."	^self implementorsResponsibility</body><body>removeAll: oldElements 	"For each element in oldElements, remove the first element from the receiver which is equivalent to this element."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.BagProtocol</class-id> <category>repertoire</category><body>add: newElement 	"Add newElement to the receiver's elements."	^self implementorsResponsibility</body><body>add: newElement withOccurrences: count 	"Add newElement count times to the receiver's elements."	^self implementorsResponsibility</body><body>addAll: newElements 	"Add each element of newElements to the receiver's elements."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DurationFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DurationFactoryProtocol</class-id> <category>repertoire</category><body>days: days hours: hours minutes: minutes seconds: seconds 	"Answer a &lt;Duration&gt; of the number of days, hours, minutes, and seconds. "	^self implementorsResponsibility</body><body>seconds: seconds 	"Answer a &lt;Duration&gt; which is seconds in length "	^self implementorsResponsibility</body><body>zero	"Answer a &lt;Duration&gt; of zero length. "	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.failedMessageProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.failedMessageProtocol</class-id> <category>repertoire</category><body>arguments	"Answer the arguments of the message that could not be sent."	^self implementorsResponsibility</body><body>selector	"Answer the selector of the message that could not be sent."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.StringProtocol</class-id> <category>sequencedReadableCollectionProtocol</category><body>, operand 	"Answer a new collection which is the concatenation of the receiver and operand."	^self implementorsResponsibility</body><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>after: target 	"Answer the object immediately following the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>at: index 	"Answer the element at the position index in the receiver."	^self implementorsResponsibility</body><body>at: index ifAbsent: exceptionBlock 	"Answer the element at the position index in the receiver.  If there is no position corresponding to index in the receiver, then answer the result of evaluating exceptionBlock."	^self implementorsResponsibility</body><body>before: target 	"Answer the object immediately preceding the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>copyFrom: start to: stop 	"Answer a new collection containing all of the elements of the receiver between the indices start and stop inclusive. If stop &lt; start, the result has a size of zero."	^self implementorsResponsibility</body><body>copyReplaceAll: targetElements with: replacementElements 	"Answer a new collection in which all subsequences of elements in the receiver matching targetElements are replaced in the new collection by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop with: replacementElements 	"Answer a new collection, containing the same elements as the receiver, but with the elements in the receiver between start and stop inclusive replaced by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which the elements of the receiver between start and stop inclusive have been replaced with replacementElement."	^self implementorsResponsibility</body><body>copyReplacing: targetElement withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which any occurrences of targetElement are replaced by replacementElement."	^self implementorsResponsibility</body><body>copyWith: newElement 	"Answer a new collection containing the same elements as the receiver, with newElement added."	^self implementorsResponsibility</body><body>copyWithout: oldElement 	"Answer a new collection, containing the same elements as the receiver in their original order omitting any elements equivalent to oldElement."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>findFirst: discriminator 	"Answer the index of the first element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>findLast: discriminator 	"Answer the index of the last element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>first	"Answer the first element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop do: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop keysAndValuesDo: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with an element of the receiver as the first argument and the element's position (index) as the second."	^self implementorsResponsibility</body><body>indexOf: target 	"Answer the index of the first element of the receiver which is equivalent to target. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>indexOf: target ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is equivalent to target. Answer the result of evaluating exceptionHandler with no parameters if no such element is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer 0 if no such subsequence is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer the result of evaluating exceptionHandler with no parameters if no such subsequence is found."	^self implementorsResponsibility</body><body>keysAndValuesDo: operation 	"Evaluate operation with the index of each element of the receiver, in order, together with the element itself."	^self implementorsResponsibility</body><body>last	"Answer the last element of the receiver."	^self implementorsResponsibility</body><body>reverse	"Answer a collection with the elements of the receiver arranged in reverse order."	^self implementorsResponsibility</body><body>reverseDo: operation 	"Evaluate operation with each element of the receiver in the reverse of the receiver's standard traversal order."	^self implementorsResponsibility</body><body>with: otherCollection do: operation 	"Evaluate operation with each element of the receiver and the corresponding element of otherCollection as parameters."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.StringProtocol</class-id> <category>readableStringProtocol</category><body>&lt; operand 	"Answer true if the receiver is less than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&lt;= operand 	"Answer true if the receiver is less than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt; operand 	"Answer true if the receiver is greater than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt;= operand 	"Answer true if the receiver is greater than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>asLowercase	"Answer a new string which contains all of the elements of the receiver converted to their lower case equivalents."	^self implementorsResponsibility</body><body>asSymbol	"Answer a symbol containing the same characters as the receiver."	^self implementorsResponsibility</body><body>asUppercase	"Answer a new string which contains all of the elements of the receiver converted to their upper case equivalents."	^self implementorsResponsibility</body><body>sameAs: operand 	"Answer true if the receiver collates the same as operand. Answer false otherwise."	^self implementorsResponsibility</body><body>subStrings: separators 	"Answer an array containing the substrings in the receiver separated by the elements of separators."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.StringProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.StringProtocol</class-id> <category>magnitudeProtocol</category><body>between: min and: max 	"Answer true if the receiver is less than or equal to max, and greater than or equal to min. Answer false otherwise."	^self implementorsResponsibility</body><body>max: operand 	"Answer the receiver if it is greater than operand. Answer operand otherwise."	^self implementorsResponsibility</body><body>min: operand 	"Answer the receiver if it is less than operand. Answer operand otherwise."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.StringProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which includes only the elements in the receiver which cause discriminator to evaluate to false."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains only the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.StringProtocol</class-id> <category>sequencedCollectionProtocol</category><body>at: index put: newElement 	"Replace the element in the receiver at index with newElement. Answer newElement."	^self implementorsResponsibility</body><body>atAll: indices put: newElement 	"Replace the elements in the receiver specified by indices with newElement."	^self implementorsResponsibility</body><body>atAllPut: newElement 	"Replace all the elements in the receiver with newElement."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop with: replacementElements 	"Replace the elements of the receiver between positions start and stop inclusive, with the elements of replacementElements in their original order. Answer the receiver."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop with: replacementElements startingAt: replacementStart 	"Replace the elements of the receiver between positions start and stop inclusive with the elements of replacementElements, in their original order, starting at position replacementStart. Answer the receiver."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop withObject: replacementElement 	"Replace the elements of the receiver between start and stop inclusive with replacementElement. Answer the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.StringProtocol</class-id> <category>repertoire</category><body>asString	"Answer a string containing the same characters as the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadWriteStreamFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadWriteStreamFactoryProtocol</class-id> <category>repertoire</category><body>with: aCollection 	"Returns a stream that reads the elements of the given collection and can write new elements."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.abstractDictionaryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.abstractDictionaryProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.abstractDictionaryProtocol</class-id> <category>repertoire</category><body>addAll: dictionary 	"Store the elements of dictionary in the receiver at the corresponding keys from dictionary."	^self implementorsResponsibility</body><body>at: key 	"Answer the element at key in the receiver."	^self implementorsResponsibility</body><body>at: key ifAbsent: operation 	"Answer the element at key in the receiver. If key lookup for key fails, then answer the result of evaluating operation."	^self implementorsResponsibility</body><body>at: key ifAbsentPut: operation 	"Answer the element at key in the receiver. If key lookup for key fails, then store and return the result of evaluating operation."	^self implementorsResponsibility</body><body>at: key put: newElement 	"Store newElement at key in the receiver. Answer newElement."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>includesKey: key 	"Answer true if the receiver contains an element stored at key. Answer false otherwise."	^self implementorsResponsibility</body><body>keyAtValue: value 	"Answer a key such that the element stored at this key is equal to value. Answer nil if no such key is found."	^self implementorsResponsibility</body><body>keyAtValue: value ifAbsent: operation 	"Answer a key such that the element stored at this key is equivalent to value. Answer the result of evaluating operation if no such key is found."	^self implementorsResponsibility</body><body>keys	"Answer a collection of keys at which there is an element stored in the receiver."	^self implementorsResponsibility</body><body>keysAndValuesDo: operation 	"Iteratively evaluate operation with each of the receiver's keys and values."	^self implementorsResponsibility</body><body>keysDo: operation 	"Iteratively evaluate operation with each of the receiver's keys at which there are elements stored."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which excludes the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>removeAllKeys: keys 	"Remove any elements from the receiver which are stored at the keys specified in keys."	^self implementorsResponsibility</body><body>removeAllKeys: keys ifAbsent: operation 	"Remove any elements from the receiver which are stored at the keys specified in keys. For any element in keys which is not a valid key of the receiver, evaluate operation with that element as the argument, but do not stop the enumeration."	^self implementorsResponsibility</body><body>removeKey: key 	"Remove the element which is stored at key in the receiver. Answer the removed element."	^self implementorsResponsibility</body><body>removeKey: key ifAbsent: operation 	"Remove the element which is stored at key in the receiver and answer the removed element. Answer the result of evaluating operation if no such key is found in the receiver."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>values	"Answer a collection of the receiver's elements."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.collectionStreamProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.collectionStreamProtocol</class-id> <category>sequencedStreamProtocol</category><body>close	"Disassociate a stream from its backing store."	^self implementorsResponsibility</body><body>isEmpty	"Returns a Boolean indicating whether there are any sequence values in the receiver."	^self implementorsResponsibility</body><body>position	"Returns the current position of the stream."	^self implementorsResponsibility</body><body>position: amount 	"Sets the current position in a stream of values."	^self implementorsResponsibility</body><body>reset	"Resets the position of the receiver to be at the beginning of the stream of values."	^self implementorsResponsibility</body><body>setToEnd	"Set the position of the stream to its end."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.collectionStreamProtocol</class-id> <category>repertoire</category><body>contents	"Returns a collection containing the complete contents of the stream."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ExceptionProtocol</class-id> <category>exceptionBuilderProtocol</category><body>messageText: signalerText 	"Set an exception's message text."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ExceptionProtocol</class-id> <category>signaledExceptionProtocol</category><body>isNested	"Determine whether the current exception handler is within the scope of another handler for the same exception."	^self implementorsResponsibility</body><body>outer	"Evaluate the enclosing exception action for the receiver and return."	^self implementorsResponsibility</body><body>pass	"Yield control to the enclosing exception action for the receiver."	^self implementorsResponsibility</body><body>resignalAs: replacementException 	"Signal an alternative exception in place of the receiver."	^self implementorsResponsibility</body><body>resume	"Return from the message that signaled the receiver."	^self implementorsResponsibility</body><body>resume: resumptionValue 	"Return the argument as the value of the message that signaled the receiver."	^self implementorsResponsibility</body><body>retry	"Abort an exception handler and re-evaluate its protected block."	^self implementorsResponsibility</body><body>retryUsing: alternativeBlock 	"Abort an exception handler and evaluate a new block in place of the handler's protected block."	^self implementorsResponsibility</body><body>return	"Return nil as the value of the block protected by the active exception handler."	^self implementorsResponsibility</body><body>return: returnValue 	"Return the argument as the value of the block protected by the active exception handler."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.SetProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which includes only the elements in the receiver which cause discriminator to evaluate to false."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains only the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.SetProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.SetProtocol</class-id> <category>extensibleCollectionProtocol</category><body>remove: oldElement 	"Remove the first element of the receiver which is equivalent to oldElement and return the removed element."	^self implementorsResponsibility</body><body>remove: oldElement ifAbsent: exceptionHandler 	"Remove the first element of the receiver which is equivalent to oldElement. If it is not found, answer the result of evaluating exceptionHandler."	^self implementorsResponsibility</body><body>removeAll: oldElements 	"For each element in oldElements, remove the first element from the receiver which is equivalent to this element."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.SetProtocol</class-id> <category>repertoire</category><body>add: newElement 	"Add newElement to the receiver's elements."	^self implementorsResponsibility</body><body>addAll: newElements 	"Add each element of newElements to the receiver's elements."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.rationalProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.rationalProtocol</class-id> <category>numberProtocol</category><body>* operand 	"Answer the result of multiplying the receiver by operand."	^self implementorsResponsibility</body><body>+ operand 	"Answer the result of adding operand to the receiver."	^self implementorsResponsibility</body><body>- operand 	"Answer the result of subtracting operand from the receiver."	^self implementorsResponsibility</body><body>/ operand 	"Answer the result of dividing the receiver by operand."	^self implementorsResponsibility</body><body>// operand 	"Answer the truncated quotient resulting from dividing the receiver by operand. The truncation is towards negative infinity."	^self implementorsResponsibility</body><body>&lt; operand 	"Answer true if the receiver is less than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>&gt; operand 	"Answer true if the receiver is greater than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>abs	"Answer the absolute value of the receiver."	^self implementorsResponsibility</body><body>asFloat	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFloatD	"Answer a d precision floating-point number approximating the receiver ."	^self implementorsResponsibility</body><body>asFloatE	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFloatQ	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFraction	"Answer a fraction approximating the receiver."	^self implementorsResponsibility</body><body>asInteger	"Answer an integer approximating the receiver."	^self implementorsResponsibility</body><body>asScaledDecimal: scale 	"Answer a scaled decimal number, with a fractional precision of scale, approximating the receiver."	^self implementorsResponsibility</body><body>ceiling	"Answer the smallest integer greater than or equal to the receiver."	^self implementorsResponsibility</body><body>floor	"Answer the largest integer less than or equal to the receiver."	^self implementorsResponsibility</body><body>fractionPart	"Answer the fractional part of the receiver."	^self implementorsResponsibility</body><body>integerPart	"Answer the integer part of the receiver."	^self implementorsResponsibility</body><body>negated	"Answer the negation of the receiver."	^self implementorsResponsibility</body><body>negative	"Answer true if the receiver is negative."	^self implementorsResponsibility</body><body>positive	"Answer true if the receiver is positive or zero."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>quo: operand 	"Answer the truncated integer quotient resulting from dividing the receiver by operand. Truncation is towards zero."	^self implementorsResponsibility</body><body>raisedTo: operand 	"Answer the receiver raised to the power operand."	^self implementorsResponsibility</body><body>raisedToInteger: operand 	"Answer the receiver raised to the power operand."	^self implementorsResponsibility</body><body>reciprocal	"Answer the reciprocal of the receiver."	^self implementorsResponsibility</body><body>rem: operand 	"Answer the remainder after integer division of the receiver by the operand."	^self implementorsResponsibility</body><body>rounded	"Answer the integer nearest the receiver."	^self implementorsResponsibility</body><body>roundTo: factor 	"Answer the number nearest the receiver that is a multiple of factor."	^self implementorsResponsibility</body><body>sign	"Answer the sign of the receiver."	^self implementorsResponsibility</body><body>sqrt	"Answer the positive square root of the receiver."	^self implementorsResponsibility</body><body>squared	"Answer the receiver squared."	^self implementorsResponsibility</body><body>strictlyPositive	"Answer true if the receiver is greater than zero."	^self implementorsResponsibility</body><body>to: stop 	"Answer an object conforming to &lt;intervalProtocol&gt; which represents an arithmetic progression from the receiver to stop in increments of 1."	^self implementorsResponsibility</body><body>to: stop by: step 	"Answer an interval which represents an arithmetic progression from receiver to stop in increments of step."	^self implementorsResponsibility</body><body>to: stop by: step do: operation 	"Evaluate operation for each element of an interval which represents an arithmetic progression from the receiver to stop in increments of step."	^self implementorsResponsibility</body><body>to: stop do: operation 	"Evaluate operation for each element of an interval which represents an arithmetic progression from receiver to stop in increments of 1."	^self implementorsResponsibility</body><body>truncated	"Answer an integer equal to the receiver truncated towards zero."	^self implementorsResponsibility</body><body>truncateTo: factor 	"Answer the number nearest the receiver truncated towards zero which is a multiple of factor."	^self implementorsResponsibility</body><body>\\ operand 	"Answer the remainder after integer division of the receiver by the operand."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.rationalProtocol</class-id> <category>magnitudeProtocol</category><body>&lt;= operand 	"Answer true if the receiver is less than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt;= operand 	"Answer true if the receiver is greater than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>between: min and: max 	"Answer true if the receiver is less than or equal to max, and greater than or equal to min. Answer false otherwise."	^self implementorsResponsibility</body><body>max: operand 	"Answer the receiver if it is greater than operand. Answer operand otherwise."	^self implementorsResponsibility</body><body>min: operand 	"Answer the receiver if it is less than operand. Answer operand otherwise."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.rationalProtocol</class-id> <category>repertoire</category><body>denominator	"Answer the denominator of the receiver."	^self implementorsResponsibility</body><body>numerator	"Answer the numerator of the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.CharacterFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.CharacterFactoryProtocol</class-id> <category>repertoire</category><body>codePoint: integer 	"Return a character whose encoding value is integer."	^self implementorsResponsibility</body><body>cr	"Return a character representing a carriage-return."	^self implementorsResponsibility</body><body>lf	"Return a character representing a line feed."	^self implementorsResponsibility</body><body>space	"Return a character representing a space."	^self implementorsResponsibility</body><body>tab	"Return a character representing a tab."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ZeroDivideFactoryProtocol</class-id> <category>exceptionSelectorProtocol</category><body>, anotherException 	"Create an exception set."	^self implementorsResponsibility</body><body>handles: exception 	"Determine whether an exception handler will accept a signaled exception."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ZeroDivideFactoryProtocol</class-id> <category>exceptionInstantiatorProtocol</category><body>new	"Create a new object."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ZeroDivideFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ZeroDivideFactoryProtocol</class-id> <category>exceptionSignalerProtocol</category><body>signal: signalerText 	"Signal the occurrence of an exceptional condition with a specified textual description."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ZeroDivideFactoryProtocol</class-id> <category>repertoire</category><body>dividend: argument 	"Signal the occurance of a division by zero."	^self implementorsResponsibility</body><body>signal	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.sequencedCollectionProtocol</class-id> <category>sequencedReadableCollectionProtocol</category><body>, operand 	"Answer a new collection which is the concatenation of the receiver and operand."	^self implementorsResponsibility</body><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>after: target 	"Answer the object immediately following the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>at: index 	"Answer the element at the position index in the receiver."	^self implementorsResponsibility</body><body>at: index ifAbsent: exceptionBlock 	"Answer the element at the position index in the receiver.  If there is no position corresponding to index in the receiver, then answer the result of evaluating exceptionBlock."	^self implementorsResponsibility</body><body>before: target 	"Answer the object immediately preceding the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>copyFrom: start to: stop 	"Answer a new collection containing all of the elements of the receiver between the indices start and stop inclusive. If stop &lt; start, the result has a size of zero."	^self implementorsResponsibility</body><body>copyReplaceAll: targetElements with: replacementElements 	"Answer a new collection in which all subsequences of elements in the receiver matching targetElements are replaced in the new collection by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop with: replacementElements 	"Answer a new collection, containing the same elements as the receiver, but with the elements in the receiver between start and stop inclusive replaced by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which the elements of the receiver between start and stop inclusive have been replaced with replacementElement."	^self implementorsResponsibility</body><body>copyReplacing: targetElement withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which any occurrences of targetElement are replaced by replacementElement."	^self implementorsResponsibility</body><body>copyWith: newElement 	"Answer a new collection containing the same elements as the receiver, with newElement added."	^self implementorsResponsibility</body><body>copyWithout: oldElement 	"Answer a new collection, containing the same elements as the receiver in their original order omitting any elements equivalent to oldElement."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>findFirst: discriminator 	"Answer the index of the first element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>findLast: discriminator 	"Answer the index of the last element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>first	"Answer the first element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop do: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop keysAndValuesDo: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with an element of the receiver as the first argument and the element's position (index) as the second."	^self implementorsResponsibility</body><body>indexOf: target 	"Answer the index of the first element of the receiver which is equivalent to target. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>indexOf: target ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is equivalent to target. Answer the result of evaluating exceptionHandler with no parameters if no such element is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer 0 if no such subsequence is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer the result of evaluating exceptionHandler with no parameters if no such subsequence is found."	^self implementorsResponsibility</body><body>keysAndValuesDo: operation 	"Evaluate operation with the index of each element of the receiver, in order, together with the element itself."	^self implementorsResponsibility</body><body>last	"Answer the last element of the receiver."	^self implementorsResponsibility</body><body>reverse	"Answer a collection with the elements of the receiver arranged in reverse order."	^self implementorsResponsibility</body><body>reverseDo: operation 	"Evaluate operation with each element of the receiver in the reverse of the receiver's standard traversal order."	^self implementorsResponsibility</body><body>with: otherCollection do: operation 	"Evaluate operation with each element of the receiver and the corresponding element of otherCollection as parameters."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.sequencedCollectionProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.sequencedCollectionProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which includes only the elements in the receiver which cause discriminator to evaluate to false."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains only the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.sequencedCollectionProtocol</class-id> <category>repertoire</category><body>at: index put: newElement 	"Replace the element in the receiver at index with newElement. Answer newElement."	^self implementorsResponsibility</body><body>atAll: indices put: newElement 	"Replace the elements in the receiver specified by indices with newElement."	^self implementorsResponsibility</body><body>atAllPut: newElement 	"Replace all the elements in the receiver with newElement."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop with: replacementElements 	"Replace the elements of the receiver between positions start and stop inclusive, with the elements of replacementElements in their original order. Answer the receiver."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop with: replacementElements startingAt: replacementStart 	"Replace the elements of the receiver between positions start and stop inclusive with the elements of replacementElements, in their original order, starting at position replacementStart. Answer the receiver."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop withObject: replacementElement 	"Replace the elements of the receiver between start and stop inclusive with replacementElement. Answer the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ObjectClassProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ObjectClassProtocol</class-id> <category>classDescriptionProtocol</category><body>allSubclasses	"Return all subclasses of a class."	^self implementorsResponsibility</body><body>allSuperclasses	"Return all superclasses of a class."	^self implementorsResponsibility</body><body>name	"Return the name of a class."	^self implementorsResponsibility</body><body>subclasses	"Return direct subclasses of a class."	^self implementorsResponsibility</body><body>superclass	"Return the immediate superclass of a class."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ObjectClassProtocol</class-id> <category>repertoire</category><body>new	"Create a new object."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.BagFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.BagFactoryProtocol</class-id> <category>repertoire</category><body>new	"Create a new object."	^self implementorsResponsibility</body><body>new: count 	"Create a new collection. The parameter count constrains the number of elements in the result."	^self implementorsResponsibility</body><body>with: element1 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 with: element4 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>withAll: newElements 	"Create a collection containing only the elements of newElements."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WarningClassProtocol</class-id> <category>classDescriptionProtocol</category><body>allSubclasses	"Return all subclasses of a class."	^self implementorsResponsibility</body><body>allSuperclasses	"Return all superclasses of a class."	^self implementorsResponsibility</body><body>name	"Return the name of a class."	^self implementorsResponsibility</body><body>subclasses	"Return direct subclasses of a class."	^self implementorsResponsibility</body><body>superclass	"Return the immediate superclass of a class."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WarningClassProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WarningClassProtocol</class-id> <category>exceptionSignalerProtocol</category><body>signal: signalerText 	"Signal the occurrence of an exceptional condition with a specified textual description."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WarningClassProtocol</class-id> <category>ExceptionClassProtocol</category><body>handles: exception 	^self implementorsResponsibility</body><body>signal	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WarningClassProtocol</class-id> <category>exceptionSelectorProtocol</category><body>, anotherException 	"Create an exception set."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WarningClassProtocol</class-id> <category>repertoire</category><body>new	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.niladicValuableProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.niladicValuableProtocol</class-id> <category>valuableProtocol</category><body>valueWithArguments: argumentArray 	"Answers the value of the receiver when applied to the arguments in argumentArray."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.niladicValuableProtocol</class-id> <category>repertoire</category><body>argumentCount	"Answers the number of arguments needed to evaluate the receiver."	^self implementorsResponsibility</body><body>value	"Answers the value of the receiver."	^self implementorsResponsibility</body><body>whileFalse	"Evaluates the receiver until it evaluates to true."	^self implementorsResponsibility</body><body>whileFalse: iterationBlock 	"Evaluates iterationBlock zero or more times until the receiver evaluates to true."	^self implementorsResponsibility</body><body>whileTrue	"Evaluates the receiver until it evaluates to false."	^self implementorsResponsibility</body><body>whileTrue: iterationBlock 	"Evaluates iterationBlock zero or more times until the receiver evaluates to false."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadStreamProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadStreamProtocol</class-id> <category>gettableStreamProtocol</category><body>atEnd	"Returns a Boolean indicating whether the receiver is at the end of its values."	^self implementorsResponsibility</body><body>do: operation 	"Evaluates the argument with each receiver future sequence value, terminating evaluation when there are no more future sequence values."	^self implementorsResponsibility</body><body>next	"Return the next object in the receiver."	^self implementorsResponsibility</body><body>nextLine	"Reads the next line from the stream."	^self implementorsResponsibility</body><body>nextMatchFor: anObject 	"Reads the next object from the stream and returns true if the object is equivalent to the argument and false if not."	^self implementorsResponsibility</body><body>peek	"Returns the next object in the receiver's future sequence values without advancing the receiver's position. Returns nil if the receiver is at end of stream."	^self implementorsResponsibility</body><body>peekFor: anObject 	"Peeks at the next object in the stream and returns true if it matches the argument, and false if not."	^self implementorsResponsibility</body><body>skip: amount 	"Skips the next amount objects in the receiver's future sequence values."	^self implementorsResponsibility</body><body>skipTo: anObject 	"Sets the stream to read the object just after the next occurrence of the argument and returns true. If the argument is not found before the end of the stream is encountered, false is returned."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadStreamProtocol</class-id> <category>sequencedStreamProtocol</category><body>close	"Disassociate a stream from its backing store."	^self implementorsResponsibility</body><body>isEmpty	"Returns a Boolean indicating whether there are any sequence values in the receiver."	^self implementorsResponsibility</body><body>position	"Returns the current position of the stream."	^self implementorsResponsibility</body><body>position: amount 	"Sets the current position in a stream of values."	^self implementorsResponsibility</body><body>reset	"Resets the position of the receiver to be at the beginning of the stream of values."	^self implementorsResponsibility</body><body>setToEnd	"Set the position of the stream to its end."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadStreamProtocol</class-id> <category>collectionStreamProtocol</category><body>contents	"Returns a collection containing the complete contents of the stream."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadStreamProtocol</class-id> <category>repertoire</category><body>next: amount 	"Returns a collection of the next amount objects in the stream."	^self implementorsResponsibility</body><body>upTo: anObject 	"Returns a collection of all of the objects in the receiver up to, but not including, the next occurrence of the argument. Sets the stream to read the object just after the next occurrence of the argument. If the argument is not found and the end of the stream is encountered, an ordered collection of the objects read is returned."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.StringFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.StringFactoryProtocol</class-id> <category>repertoire</category><body>new	"Create a new object."	^self implementorsResponsibility</body><body>new: count 	"Create a new collection. The parameter count constrains the number of elements in the result."	^self implementorsResponsibility</body><body>with: element1 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 with: element4 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>withAll: newElements 	"Create a collection containing only the elements of newElements."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.floatCharacterizationProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.floatCharacterizationProtocol</class-id> <category>repertoire</category><body>denormalized	"Indication of whether the characterized floating point object representation allows denormalized values."	^self implementorsResponsibility</body><body>e	"The closest floating point approximation of the irrational number e."	^self implementorsResponsibility</body><body>emax	"The largest exponent of the characterized floating point object representation."	^self implementorsResponsibility</body><body>emin	"The smallest exponent of the characterized floating point object representation."	^self implementorsResponsibility</body><body>epsilon	"The maximum relative spacing in the characterized floating point object representation."	^self implementorsResponsibility</body><body>fmax	"The largest value allowed by the characterized floating point object representation."	^self implementorsResponsibility</body><body>fmin	"The minimum value allowed by the characterized floating point object representation."	^self implementorsResponsibility</body><body>fminDenormalized	"The minimum denormalized value allowed by the characterized floating point object representation."	^self implementorsResponsibility</body><body>fminNormalized	"The minimum normalized value allowed by the characterized floating point object representation."	^self implementorsResponsibility</body><body>pi	"The closest floating point approximation to Pi."	^self implementorsResponsibility</body><body>precision	"The precision of the characterized floating point object representation."	^self implementorsResponsibility</body><body>radix	"The radix of the characterized floating point object representation."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.MessageNotUnderstoodProtocol</class-id> <category>signaledExceptionProtocol</category><body>isNested	"Determine whether the current exception handler is within the scope of another handler for the same exception."	^self implementorsResponsibility</body><body>outer	"Evaluate the enclosing exception action for the receiver and return."	^self implementorsResponsibility</body><body>pass	"Yield control to the enclosing exception action for the receiver."	^self implementorsResponsibility</body><body>resignalAs: replacementException 	"Signal an alternative exception in place of the receiver."	^self implementorsResponsibility</body><body>resume	"Return from the message that signaled the receiver."	^self implementorsResponsibility</body><body>resume: resumptionValue 	"Return the argument as the value of the message that signaled the receiver."	^self implementorsResponsibility</body><body>retry	"Abort an exception handler and re-evaluate its protected block."	^self implementorsResponsibility</body><body>retryUsing: alternativeBlock 	"Abort an exception handler and evaluate a new block in place of the handler's protected block."	^self implementorsResponsibility</body><body>return	"Return nil as the value of the block protected by the active exception handler."	^self implementorsResponsibility</body><body>return: returnValue 	"Return the argument as the value of the block protected by the active exception handler."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.MessageNotUnderstoodProtocol</class-id> <category>ErrorProtocol</category><body>defaultAction	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.MessageNotUnderstoodProtocol</class-id> <category>exceptionBuilderProtocol</category><body>messageText: signalerText 	"Set an exception's message text."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.MessageNotUnderstoodProtocol</class-id> <category>repertoire</category><body>isResumable	"Determine whether an exception is resumable."	^self implementorsResponsibility</body><body>message	"Answer the selector and arguments of the message that failed."	^self implementorsResponsibility</body><body>receiver	"Answer the receiver  the message that failed."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.puttableStreamProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.puttableStreamProtocol</class-id> <category>repertoire</category><body>cr	"Writes an end-of-line sequence to the receiver."	^self implementorsResponsibility</body><body>flush	"Update a stream's backing store."	^self implementorsResponsibility</body><body>nextPut: anObject 	"Writes the argument to the stream."	^self implementorsResponsibility</body><body>nextPutAll: aCollection 	"Enumerates the argument, adding each element to the receiver"	^self implementorsResponsibility</body><body>space	"Writes a space character to the receiver."	^self implementorsResponsibility</body><body>tab	"Writes a tab character to the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.exceptionSignalerProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.exceptionSignalerProtocol</class-id> <category>repertoire</category><body>signal	"Signal the occurrence of an exceptional condition."	^self implementorsResponsibility</body><body>signal: signalerText 	"Signal the occurrence of an exceptional condition with a specified textual description."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.integerProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.integerProtocol</class-id> <category>numberProtocol</category><body>* operand 	"Answer the result of multiplying the receiver by operand."	^self implementorsResponsibility</body><body>+ operand 	"Answer the result of adding operand to the receiver."	^self implementorsResponsibility</body><body>- operand 	"Answer the result of subtracting operand from the receiver."	^self implementorsResponsibility</body><body>/ operand 	"Answer the result of dividing the receiver by operand."	^self implementorsResponsibility</body><body>// operand 	"Answer the truncated quotient resulting from dividing the receiver by operand. The truncation is towards negative infinity."	^self implementorsResponsibility</body><body>&lt; operand 	"Answer true if the receiver is less than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>&gt; operand 	"Answer true if the receiver is greater than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>abs	"Answer the absolute value of the receiver."	^self implementorsResponsibility</body><body>asFloat	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFloatD	"Answer a d precision floating-point number approximating the receiver ."	^self implementorsResponsibility</body><body>asFloatE	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFloatQ	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFraction	"Answer a fraction approximating the receiver."	^self implementorsResponsibility</body><body>asInteger	"Answer an integer approximating the receiver."	^self implementorsResponsibility</body><body>ceiling	"Answer the smallest integer greater than or equal to the receiver."	^self implementorsResponsibility</body><body>floor	"Answer the largest integer less than or equal to the receiver."	^self implementorsResponsibility</body><body>fractionPart	"Answer the fractional part of the receiver."	^self implementorsResponsibility</body><body>integerPart	"Answer the integer part of the receiver."	^self implementorsResponsibility</body><body>negated	"Answer the negation of the receiver."	^self implementorsResponsibility</body><body>negative	"Answer true if the receiver is negative."	^self implementorsResponsibility</body><body>positive	"Answer true if the receiver is positive or zero."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>quo: operand 	"Answer the truncated integer quotient resulting from dividing the receiver by operand. Truncation is towards zero."	^self implementorsResponsibility</body><body>raisedTo: operand 	"Answer the receiver raised to the power operand."	^self implementorsResponsibility</body><body>raisedToInteger: operand 	"Answer the receiver raised to the power operand."	^self implementorsResponsibility</body><body>reciprocal	"Answer the reciprocal of the receiver."	^self implementorsResponsibility</body><body>rem: operand 	"Answer the remainder after integer division of the receiver by the operand."	^self implementorsResponsibility</body><body>rounded	"Answer the integer nearest the receiver."	^self implementorsResponsibility</body><body>roundTo: factor 	"Answer the number nearest the receiver that is a multiple of factor."	^self implementorsResponsibility</body><body>sign	"Answer the sign of the receiver."	^self implementorsResponsibility</body><body>sqrt	"Answer the positive square root of the receiver."	^self implementorsResponsibility</body><body>squared	"Answer the receiver squared."	^self implementorsResponsibility</body><body>strictlyPositive	"Answer true if the receiver is greater than zero."	^self implementorsResponsibility</body><body>to: stop 	"Answer an object conforming to &lt;intervalProtocol&gt; which represents an arithmetic progression from the receiver to stop in increments of 1."	^self implementorsResponsibility</body><body>to: stop by: step 	"Answer an interval which represents an arithmetic progression from receiver to stop in increments of step."	^self implementorsResponsibility</body><body>to: stop by: step do: operation 	"Evaluate operation for each element of an interval which represents an arithmetic progression from the receiver to stop in increments of step."	^self implementorsResponsibility</body><body>to: stop do: operation 	"Evaluate operation for each element of an interval which represents an arithmetic progression from receiver to stop in increments of 1."	^self implementorsResponsibility</body><body>truncated	"Answer an integer equal to the receiver truncated towards zero."	^self implementorsResponsibility</body><body>truncateTo: factor 	"Answer the number nearest the receiver truncated towards zero which is a multiple of factor."	^self implementorsResponsibility</body><body>\\ operand 	"Answer the remainder after integer division of the receiver by the operand."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.integerProtocol</class-id> <category>rationalProtocol</category><body>denominator	"Answer the denominator of the receiver."	^self implementorsResponsibility</body><body>numerator	"Answer the numerator of the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.integerProtocol</class-id> <category>magnitudeProtocol</category><body>&lt;= operand 	"Answer true if the receiver is less than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt;= operand 	"Answer true if the receiver is greater than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>between: min and: max 	"Answer true if the receiver is less than or equal to max, and greater than or equal to min. Answer false otherwise."	^self implementorsResponsibility</body><body>max: operand 	"Answer the receiver if it is greater than operand. Answer operand otherwise."	^self implementorsResponsibility</body><body>min: operand 	"Answer the receiver if it is less than operand. Answer operand otherwise."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.integerProtocol</class-id> <category>repertoire</category><body>allMask: mask 	"Answer true if all of the bits that are 1 in the binary representation of mask are 1 in the binary representation of the receiver. Answer false otherwise."	^self implementorsResponsibility</body><body>anyMask: mask 	"Answer true if any of the bits that are 1 in the binary representation of mask are 1 in the binary representation of the receiver. Answer false otherwise."	^self implementorsResponsibility</body><body>asScaledDecimal: scale 	"Answer a scaled decimal number, with a fractional precision of scale, approximating the receiver."	^self implementorsResponsibility</body><body>bitAnd: operand 	"Answer the bit-wise logical and of the receiver and the operand."	^self implementorsResponsibility</body><body>bitAt: index 	"Answer the value of the bit at index in the binary representation of the receiver."	^self implementorsResponsibility</body><body>bitAt: index put: value 	"Set the value of the bit at index in the binary representation of the receiver."	^self implementorsResponsibility</body><body>bitOr: operand 	"Answer the logical or of the receiver and operand."	^self implementorsResponsibility</body><body>bitShift: shift 	"Answer the result of logically bit-wise shifting the binary representation of the receiver by shift bits."	^self implementorsResponsibility</body><body>bitXor: operand 	"Answer bit-wise exclusive or of the receiver and the operand."	^self implementorsResponsibility</body><body>even	"Answer true if the receiver is even."	^self implementorsResponsibility</body><body>factorial	"Answer the factorial of the receiver."	^self implementorsResponsibility</body><body>gcd: operand 	"Answer the greatest common divisor of the receiver and operand."	^self implementorsResponsibility</body><body>highBit	"Answer the index of the most significant non-zero bit in the binary representation of the receiver."	^self implementorsResponsibility</body><body>lcm: operand 	"Answer the least common multiple of the receiver and operand."	^self implementorsResponsibility</body><body>noMask: mask 	"Answer true if none of the bits that are 1 in the binary representation of mask are 1 in the binary representation of the receiver. Answer false otherwise."	^self implementorsResponsibility</body><body>odd	"Answer true if the receiver is odd."	^self implementorsResponsibility</body><body>printOn: output base: base showRadix: flag 	"Write a sequence of characters that describes the receiver in radix base with optional radix specifier."	^self implementorsResponsibility</body><body>printStringRadix: base 	"Answer a string which represents the receiver in radix base."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.numberProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.numberProtocol</class-id> <category>magnitudeProtocol</category><body>&lt;= operand 	"Answer true if the receiver is less than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt;= operand 	"Answer true if the receiver is greater than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>between: min and: max 	"Answer true if the receiver is less than or equal to max, and greater than or equal to min. Answer false otherwise."	^self implementorsResponsibility</body><body>max: operand 	"Answer the receiver if it is greater than operand. Answer operand otherwise."	^self implementorsResponsibility</body><body>min: operand 	"Answer the receiver if it is less than operand. Answer operand otherwise."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.numberProtocol</class-id> <category>repertoire</category><body>* operand 	"Answer the result of multiplying the receiver by operand."	^self implementorsResponsibility</body><body>+ operand 	"Answer the result of adding operand to the receiver."	^self implementorsResponsibility</body><body>- operand 	"Answer the result of subtracting operand from the receiver."	^self implementorsResponsibility</body><body>/ operand 	"Answer the result of dividing the receiver by operand."	^self implementorsResponsibility</body><body>// operand 	"Answer the truncated quotient resulting from dividing the receiver by operand. The truncation is towards negative infinity."	^self implementorsResponsibility</body><body>&lt; operand 	"Answer true if the receiver is less than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>&gt; operand 	"Answer true if the receiver is greater than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>abs	"Answer the absolute value of the receiver."	^self implementorsResponsibility</body><body>asFloat	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFloatD	"Answer a d precision floating-point number approximating the receiver ."	^self implementorsResponsibility</body><body>asFloatE	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFloatQ	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFraction	"Answer a fraction approximating the receiver."	^self implementorsResponsibility</body><body>asInteger	"Answer an integer approximating the receiver."	^self implementorsResponsibility</body><body>asScaledDecimal: scale 	"Answer a scaled decimal number, with a fractional precision of scale, approximating the receiver."	^self implementorsResponsibility</body><body>ceiling	"Answer the smallest integer greater than or equal to the receiver."	^self implementorsResponsibility</body><body>floor	"Answer the largest integer less than or equal to the receiver."	^self implementorsResponsibility</body><body>fractionPart	"Answer the fractional part of the receiver."	^self implementorsResponsibility</body><body>integerPart	"Answer the integer part of the receiver."	^self implementorsResponsibility</body><body>negated	"Answer the negation of the receiver."	^self implementorsResponsibility</body><body>negative	"Answer true if the receiver is negative."	^self implementorsResponsibility</body><body>positive	"Answer true if the receiver is positive or zero."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>quo: operand 	"Answer the truncated integer quotient resulting from dividing the receiver by operand. Truncation is towards zero."	^self implementorsResponsibility</body><body>raisedTo: operand 	"Answer the receiver raised to the power operand."	^self implementorsResponsibility</body><body>raisedToInteger: operand 	"Answer the receiver raised to the power operand."	^self implementorsResponsibility</body><body>reciprocal	"Answer the reciprocal of the receiver."	^self implementorsResponsibility</body><body>rem: operand 	"Answer the remainder after integer division of the receiver by the operand."	^self implementorsResponsibility</body><body>rounded	"Answer the integer nearest the receiver."	^self implementorsResponsibility</body><body>roundTo: factor 	"Answer the number nearest the receiver that is a multiple of factor."	^self implementorsResponsibility</body><body>sign	"Answer the sign of the receiver."	^self implementorsResponsibility</body><body>sqrt	"Answer the positive square root of the receiver."	^self implementorsResponsibility</body><body>squared	"Answer the receiver squared."	^self implementorsResponsibility</body><body>strictlyPositive	"Answer true if the receiver is greater than zero."	^self implementorsResponsibility</body><body>to: stop 	"Answer an object conforming to &lt;intervalProtocol&gt; which represents an arithmetic progression from the receiver to stop in increments of 1."	^self implementorsResponsibility</body><body>to: stop by: step 	"Answer an interval which represents an arithmetic progression from receiver to stop in increments of step."	^self implementorsResponsibility</body><body>to: stop by: step do: operation 	"Evaluate operation for each element of an interval which represents an arithmetic progression from the receiver to stop in increments of step."	^self implementorsResponsibility</body><body>to: stop do: operation 	"Evaluate operation for each element of an interval which represents an arithmetic progression from receiver to stop in increments of 1."	^self implementorsResponsibility</body><body>truncated	"Answer an integer equal to the receiver truncated towards zero."	^self implementorsResponsibility</body><body>truncateTo: factor 	"Answer the number nearest the receiver truncated towards zero which is a multiple of factor."	^self implementorsResponsibility</body><body>\\ operand 	"Answer the remainder after integer division of the receiver by the operand."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.exceptionDescriptionProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.exceptionDescriptionProtocol</class-id> <category>repertoire</category><body>defaultAction	"The default action taken if the exception is signaled."	^self implementorsResponsibility</body><body>description	"Return a textual description of the exception."	^self implementorsResponsibility</body><body>isResumable	"Determine whether an exception is resumable."	^self implementorsResponsibility</body><body>messageText	"Return an exception's message text."	^self implementorsResponsibility</body><body>tag	"Return an exception's tag value."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.gettableStreamProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.gettableStreamProtocol</class-id> <category>repertoire</category><body>atEnd	"Returns a Boolean indicating whether the receiver is at the end of its values."	^self implementorsResponsibility</body><body>do: operation 	"Evaluates the argument with each receiver future sequence value, terminating evaluation when there are no more future sequence values."	^self implementorsResponsibility</body><body>next	"Return the next object in the receiver."	^self implementorsResponsibility</body><body>next: amount 	"Returns a collection of the next amount objects in the stream."	^self implementorsResponsibility</body><body>nextLine	"Reads the next line from the stream."	^self implementorsResponsibility</body><body>nextMatchFor: anObject 	"Reads the next object from the stream and returns true if the object is equivalent to the argument and false if not."	^self implementorsResponsibility</body><body>peek	"Returns the next object in the receiver's future sequence values without advancing the receiver's position. Returns nil if the receiver is at end of stream."	^self implementorsResponsibility</body><body>peekFor: anObject 	"Peeks at the next object in the stream and returns true if it matches the argument, and false if not."	^self implementorsResponsibility</body><body>skip: amount 	"Skips the next amount objects in the receiver's future sequence values."	^self implementorsResponsibility</body><body>skipTo: anObject 	"Sets the stream to read the object just after the next occurrence of the argument and returns true. If the argument is not found before the end of the stream is encountered, false is returned."	^self implementorsResponsibility</body><body>upTo: anObject 	"Returns a collection of all of the objects in the receiver up to, but not including, the next occurrence of the argument. Sets the stream to read the object just after the next occurrence of the argument. If the argument is not found and the end of the stream is encountered, an ordered collection of the objects read is returned."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.niladicBlockProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.niladicBlockProtocol</class-id> <category>niladicValuableProtocol</category><body>argumentCount	"Answers the number of arguments needed to evaluate the receiver."	^self implementorsResponsibility</body><body>value	"Answers the value of the receiver."	^self implementorsResponsibility</body><body>whileFalse	"Evaluates the receiver until it evaluates to true."	^self implementorsResponsibility</body><body>whileFalse: iterationBlock 	"Evaluates iterationBlock zero or more times until the receiver evaluates to true."	^self implementorsResponsibility</body><body>whileTrue	"Evaluates the receiver until it evaluates to false."	^self implementorsResponsibility</body><body>whileTrue: iterationBlock 	"Evaluates iterationBlock zero or more times until the receiver evaluates to false."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.niladicBlockProtocol</class-id> <category>valuableProtocol</category><body>valueWithArguments: argumentArray 	"Answers the value of the receiver when applied to the arguments in argumentArray."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.niladicBlockProtocol</class-id> <category>repertoire</category><body>ensure: terminationBlock 	"Evaluate a termination block after evaluating the receiver."	^self implementorsResponsibility</body><body>ifCurtailed: terminationBlock 	"Evaluating the receiver with an abnormal termination action."	^self implementorsResponsibility</body><body>on: selector do: action 	"Evaluate the receiver in the scope of an exception handler."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.dyadicValuableProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.dyadicValuableProtocol</class-id> <category>valuableProtocol</category><body>valueWithArguments: argumentArray 	"Answers the value of the receiver when applied to the arguments in argumentArray."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.dyadicValuableProtocol</class-id> <category>repertoire</category><body>argumentCount	"Answers the number of arguments needed to evaluate the receiver."	^self implementorsResponsibility</body><body>value: argument1 value: argument2 	"Answers the value of the receiver when applied to the arguments."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WriteStreamFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WriteStreamFactoryProtocol</class-id> <category>repertoire</category><body>with: aCollection 	"Returns a stream that appends to the given collection."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FileStreamProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FileStreamProtocol</class-id> <category>sequencedStreamProtocol</category><body>close	"Disassociate a stream from its backing store."	^self implementorsResponsibility</body><body>isEmpty	"Returns a Boolean indicating whether there are any sequence values in the receiver."	^self implementorsResponsibility</body><body>position	"Returns the current position of the stream."	^self implementorsResponsibility</body><body>position: amount 	"Sets the current position in a stream of values."	^self implementorsResponsibility</body><body>reset	"Resets the position of the receiver to be at the beginning of the stream of values."	^self implementorsResponsibility</body><body>setToEnd	"Set the position of the stream to its end."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FileStreamProtocol</class-id> <category>repertoire</category><body>contents	"Returns a collection containing the complete contents of the stream."	^self implementorsResponsibility</body><body>externalType	"Returns a symbol that identifies the external stream type of the receiver."	^self implementorsResponsibility</body><body>isBinary	"Answer wthether the receiver's data is binary."	^self implementorsResponsibility</body><body>isText	"Answer whether the receiver's data is characters."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.magnitudeProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.magnitudeProtocol</class-id> <category>repertoire</category><body>&lt; operand 	"Answer true if the receiver is less than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&lt;= operand 	"Answer true if the receiver is less than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt; operand 	"Answer true if the receiver is greater than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt;= operand 	"Answer true if the receiver is greater than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>between: min and: max 	"Answer true if the receiver is less than or equal to max, and greater than or equal to min. Answer false otherwise."	^self implementorsResponsibility</body><body>max: operand 	"Answer the receiver if it is greater than operand. Answer operand otherwise."	^self implementorsResponsibility</body><body>min: operand 	"Answer the receiver if it is less than operand. Answer operand otherwise."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.TranscriptProtocol</class-id> <category>puttableStreamProtocol</category><body>cr	"Writes an end-of-line sequence to the receiver."	^self implementorsResponsibility</body><body>flush	"Update a stream's backing store."	^self implementorsResponsibility</body><body>nextPut: anObject 	"Writes the argument to the stream."	^self implementorsResponsibility</body><body>nextPutAll: aCollection 	"Enumerates the argument, adding each element to the receiver"	^self implementorsResponsibility</body><body>space	"Writes a space character to the receiver."	^self implementorsResponsibility</body><body>tab	"Writes a tab character to the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.TranscriptProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ArrayFactoryProtocol</class-id> <category>repertoire</category><body>new	"Create a new object."	^self implementorsResponsibility</body><body>new: count 	"Create a new collection. The parameter count constrains the number of elements in the result."	^self implementorsResponsibility</body><body>with: element1 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 with: element4 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>withAll: newElements 	"Create a collection containing only the elements of newElements."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ArrayFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DateAndTimeProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DateAndTimeProtocol</class-id> <category>magnitudeProtocol</category><body>&lt;= operand 	"Answer true if the receiver is less than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt;= operand 	"Answer true if the receiver is greater than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>between: min and: max 	"Answer true if the receiver is less than or equal to max, and greater than or equal to min. Answer false otherwise."	^self implementorsResponsibility</body><body>max: operand 	"Answer the receiver if it is greater than operand. Answer operand otherwise."	^self implementorsResponsibility</body><body>min: operand 	"Answer the receiver if it is less than operand. Answer operand otherwise."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DateAndTimeProtocol</class-id> <category>repertoire</category><body>+ operand 	"Answer the result of adding operand to the receiver. "	^self implementorsResponsibility</body><body>- operand 	"Answer the result of adding operand to the receiver. "	^self implementorsResponsibility</body><body>&lt; operand 	"Answer true if the receiver is less than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>&gt; operand 	"Answer true if the receiver is greater than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>asLocal	"Answer a &lt;DateAndTimeProtocol&gt; that represents the same UTC time as the receiver but in the local time specified by the implementation. "	^self implementorsResponsibility</body><body>asUTC	"Answer a &lt;DateAndTimeProtocol&gt; that represents the same absolute time as the receiver but in the local time UTC. "	^self implementorsResponsibility</body><body>dayOfMonth	"Answer the number of the day in the month in the local time of the receiver which includes the receiver. "	^self implementorsResponsibility</body><body>dayOfWeek	"Answer the number of the day in the week, in the local time of the receiver, which includes the receiver. "	^self implementorsResponsibility</body><body>dayOfWeekAbbreviation	"Answer the abbreviation of the name, in the local time of the receiver, of the day of the week which includes the receiver. "	^self implementorsResponsibility</body><body>dayOfWeekName	"Answer the name, in the local time of the receiver, of the day of the week which includes the receiver. "	^self implementorsResponsibility</body><body>dayOfYear	"Answer the number of the day in the year, in the local time of the receiver, which includes the receiver. "	^self implementorsResponsibility</body><body>hour	"Answer the number of the hour in the day, in the local time of the receiver, which includes the receiver. "	^self implementorsResponsibility</body><body>hour12	"Answer the hour in the day in the 12-hour clock of the local time of the receiver. "	^self implementorsResponsibility</body><body>hour24	"Answer the hour in the day in the 24-hour clock of the local time of the receiver. "	^self implementorsResponsibility</body><body>isLeapYear	"Test for leap year. "	^self implementorsResponsibility</body><body>meridianAbbreviation	"Answer the abbreviation, in the local time of the receiver, of the name of the half of the day, which includes the receiver. "	^self implementorsResponsibility</body><body>minute	"Answer the minute of the hour in the local time of the receiver. "	^self implementorsResponsibility</body><body>month	"Answer the number of the month in the year, in the local time of the receiver, which includes the receiver. "	^self implementorsResponsibility</body><body>monthAbbreviation	"Answer the abbreviation of the name of the month, in the local time of the receiver, which includes the receiver. "	^self implementorsResponsibility</body><body>monthName	"Answer the name of the month, in the local time of the receiver, which includes the receiver. "	^self implementorsResponsibility</body><body>offset	"Answer the difference between the local time of the receiver and UTC at the time of the receiver. "	^self implementorsResponsibility</body><body>offset: offset 	"Answer a &lt;DateAndTimeProtocol&gt; equivalent to the receiver but with its local time being offset from UTC by offset. "	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>second	"Answer the second of the minute of the local time of the receiver. "	^self implementorsResponsibility</body><body>timeZoneAbbreviation	"Answer the abbreviation of the name, in the local time of the receiver, of the time zone of the receiver. "	^self implementorsResponsibility</body><body>timeZoneName	"Answer the name in the local time of the receiver of the time zone of the receiver. "	^self implementorsResponsibility</body><body>year	"Answer the number of the year in the local time of the receiver which includes the receiver. "	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.exceptionSetProtocol</class-id> <category>exceptionSelectorProtocol</category><body>handles: exception 	"Determine whether an exception handler will accept a signaled exception."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.exceptionSetProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.exceptionSetProtocol</class-id> <category>repertoire</category><body>, anotherException 	"Return an exception set that contains the receiver and the argument exception. This is commonly used to specify a set of exception selectors for an exception handler."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.classDescriptionProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.classDescriptionProtocol</class-id> <category>repertoire</category><body>allSubclasses	"Return all subclasses of a class."	^self implementorsResponsibility</body><body>allSuperclasses	"Return all superclasses of a class."	^self implementorsResponsibility</body><body>name	"Return the name of a class."	^self implementorsResponsibility</body><body>subclasses	"Return direct subclasses of a class."	^self implementorsResponsibility</body><body>superclass	"Return the immediate superclass of a class."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.SortedCollectionFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.SortedCollectionFactoryProtocol</class-id> <category>repertoire</category><body>new	"Create a new object."	^self implementorsResponsibility</body><body>new: count 	"Create a new collection. The parameter count constrains the number of elements in the result."	^self implementorsResponsibility</body><body>sortBlock: sortBlock 	"Create a new sorted collection with sortBlock as the sort block."	^self implementorsResponsibility</body><body>with: element1 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 with: element4 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>withAll: newElements 	"Create a collection containing only the elements of newElements."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ExceptionClassProtocol</class-id> <category>classDescriptionProtocol</category><body>allSubclasses	"Return all subclasses of a class."	^self implementorsResponsibility</body><body>allSuperclasses	"Return all superclasses of a class."	^self implementorsResponsibility</body><body>name	"Return the name of a class."	^self implementorsResponsibility</body><body>subclasses	"Return direct subclasses of a class."	^self implementorsResponsibility</body><body>superclass	"Return the immediate superclass of a class."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ExceptionClassProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ExceptionClassProtocol</class-id> <category>exceptionSelectorProtocol</category><body>, anotherException 	"Create an exception set."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ExceptionClassProtocol</class-id> <category>exceptionSignalerProtocol</category><body>signal: signalerText 	"Signal the occurrence of an exceptional condition with a specified textual description."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ExceptionClassProtocol</class-id> <category>repertoire</category><body>handles: exception 	^self implementorsResponsibility</body><body>new	^self implementorsResponsibility</body><body>signal	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.booleanProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.booleanProtocol</class-id> <category>repertoire</category><body>&amp; operand 	"Logical and - Boolean conjunction."	^self implementorsResponsibility</body><body>and: operand 	"'Short circuit' logical and."	^self implementorsResponsibility</body><body>eqv: operand 	"Boolean equivalence."	^self implementorsResponsibility</body><body>ifFalse: operand 	"Evaluate the argument if receiver is false."	^self implementorsResponsibility</body><body>ifFalse: falseOperand ifTrue: trueOperand 	"Selectively evaluate one of the arguments."	^self implementorsResponsibility</body><body>ifTrue: operand 	"Evaluate the argument if the receiver is true."	^self implementorsResponsibility</body><body>ifTrue: trueOperand ifFalse: falseOperand 	"Selectively evaluate one of the arguments."	^self implementorsResponsibility</body><body>not	"Logical not - Boolean negation."	^self implementorsResponsibility</body><body>or: operand 	"'Short circuit' logical or."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>xor: operand 	"Boolean exclusive or."	^self implementorsResponsibility</body><body>| operand 	"Logical or - Boolean disjunction."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DurationProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DurationProtocol</class-id> <category>magnitudeProtocol</category><body>&lt;= operand 	"Answer true if the receiver is less than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt;= operand 	"Answer true if the receiver is greater than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>between: min and: max 	"Answer true if the receiver is less than or equal to max, and greater than or equal to min. Answer false otherwise."	^self implementorsResponsibility</body><body>max: operand 	"Answer the receiver if it is greater than operand. Answer operand otherwise."	^self implementorsResponsibility</body><body>min: operand 	"Answer the receiver if it is less than operand. Answer operand otherwise."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DurationProtocol</class-id> <category>repertoire</category><body>* operand 	"Answer the result of multiplying the receiver by operand."	^self implementorsResponsibility</body><body>+ operand 	"Answer the result of adding operand to the receiver. "	^self implementorsResponsibility</body><body>- operand 	"Answer the result of subtracting the operand from the receiver."	^self implementorsResponsibility</body><body>/ operand 	"Answer the result of dividing the receiver by operand. "	^self implementorsResponsibility</body><body>&lt; operand 	"Answer true if the receiver is less than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>&gt; operand 	"Answer true if the receiver is greater than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>abs	"Answer the absolute value of the receiver. "	^self implementorsResponsibility</body><body>asSeconds	"Answer the total number of seconds in the length of time represented by the receiver. "	^self implementorsResponsibility</body><body>days	"Answer the number of complete days in the receiver. "	^self implementorsResponsibility</body><body>hours	"Answer the number of complete hours in the receiver. "	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>seconds	"Answer the number of seconds in the receiver. "	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.sequencedReadableCollectionProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.sequencedReadableCollectionProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which includes only the elements in the receiver which cause discriminator to evaluate to false."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains only the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.sequencedReadableCollectionProtocol</class-id> <category>repertoire</category><body>, operand 	"Answer a new collection which is the concatenation of the receiver and operand."	^self implementorsResponsibility</body><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>after: target 	"Answer the object immediately following the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>at: index 	"Answer the element at the position index in the receiver."	^self implementorsResponsibility</body><body>at: index ifAbsent: exceptionBlock 	"Answer the element at the position index in the receiver.  If there is no position corresponding to index in the receiver, then answer the result of evaluating exceptionBlock."	^self implementorsResponsibility</body><body>before: target 	"Answer the object immediately preceding the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>copyFrom: start to: stop 	"Answer a new collection containing all of the elements of the receiver between the indices start and stop inclusive. If stop &lt; start, the result has a size of zero."	^self implementorsResponsibility</body><body>copyReplaceAll: targetElements with: replacementElements 	"Answer a new collection in which all subsequences of elements in the receiver matching targetElements are replaced in the new collection by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop with: replacementElements 	"Answer a new collection, containing the same elements as the receiver, but with the elements in the receiver between start and stop inclusive replaced by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which the elements of the receiver between start and stop inclusive have been replaced with replacementElement."	^self implementorsResponsibility</body><body>copyReplacing: targetElement withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which any occurrences of targetElement are replaced by replacementElement."	^self implementorsResponsibility</body><body>copyWith: newElement 	"Answer a new collection containing the same elements as the receiver, with newElement added."	^self implementorsResponsibility</body><body>copyWithout: oldElement 	"Answer a new collection, containing the same elements as the receiver in their original order omitting any elements equivalent to oldElement."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>findFirst: discriminator 	"Answer the index of the first element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>findLast: discriminator 	"Answer the index of the last element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>first	"Answer the first element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop do: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop keysAndValuesDo: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with an element of the receiver as the first argument and the element's position (index) as the second."	^self implementorsResponsibility</body><body>indexOf: target 	"Answer the index of the first element of the receiver which is equivalent to target. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>indexOf: target ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is equivalent to target. Answer the result of evaluating exceptionHandler with no parameters if no such element is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer 0 if no such subsequence is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer the result of evaluating exceptionHandler with no parameters if no such subsequence is found."	^self implementorsResponsibility</body><body>keysAndValuesDo: operation 	"Evaluate operation with the index of each element of the receiver, in order, together with the element itself."	^self implementorsResponsibility</body><body>last	"Answer the last element of the receiver."	^self implementorsResponsibility</body><body>reverse	"Answer a collection with the elements of the receiver arranged in reverse order."	^self implementorsResponsibility</body><body>reverseDo: operation 	"Evaluate operation with each element of the receiver in the reverse of the receiver's standard traversal order."	^self implementorsResponsibility</body><body>with: otherCollection do: operation 	"Evaluate operation with each element of the receiver and the corresponding element of otherCollection as parameters."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.writeFileStreamProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.writeFileStreamProtocol</class-id> <category>FileStreamProtocol</category><body>contents	"Returns a collection containing the complete contents of the stream."	^self implementorsResponsibility</body><body>externalType	"Returns a symbol that identifies the external stream type of the receiver."	^self implementorsResponsibility</body><body>isBinary	"Answer wthether the receiver's data is binary."	^self implementorsResponsibility</body><body>isText	"Answer whether the receiver's data is characters."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.writeFileStreamProtocol</class-id> <category>sequencedStreamProtocol</category><body>close	"Disassociate a stream from its backing store."	^self implementorsResponsibility</body><body>isEmpty	"Returns a Boolean indicating whether there are any sequence values in the receiver."	^self implementorsResponsibility</body><body>position	"Returns the current position of the stream."	^self implementorsResponsibility</body><body>position: amount 	"Sets the current position in a stream of values."	^self implementorsResponsibility</body><body>reset	"Resets the position of the receiver to be at the beginning of the stream of values."	^self implementorsResponsibility</body><body>setToEnd	"Set the position of the stream to its end."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.writeFileStreamProtocol</class-id> <category>puttableStreamProtocol</category><body>cr	"Writes an end-of-line sequence to the receiver."	^self implementorsResponsibility</body><body>flush	"Update a stream's backing store."	^self implementorsResponsibility</body><body>nextPut: anObject 	"Writes the argument to the stream."	^self implementorsResponsibility</body><body>nextPutAll: aCollection 	"Enumerates the argument, adding each element to the receiver"	^self implementorsResponsibility</body><body>space	"Writes a space character to the receiver."	^self implementorsResponsibility</body><body>tab	"Writes a tab character to the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.NotificationClassProtocol</class-id> <category>classDescriptionProtocol</category><body>allSubclasses	"Return all subclasses of a class."	^self implementorsResponsibility</body><body>allSuperclasses	"Return all superclasses of a class."	^self implementorsResponsibility</body><body>name	"Return the name of a class."	^self implementorsResponsibility</body><body>subclasses	"Return direct subclasses of a class."	^self implementorsResponsibility</body><body>superclass	"Return the immediate superclass of a class."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.NotificationClassProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.NotificationClassProtocol</class-id> <category>exceptionSignalerProtocol</category><body>signal: signalerText 	"Signal the occurrence of an exceptional condition with a specified textual description."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.NotificationClassProtocol</class-id> <category>ExceptionClassProtocol</category><body>handles: exception 	^self implementorsResponsibility</body><body>signal	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.NotificationClassProtocol</class-id> <category>exceptionSelectorProtocol</category><body>, anotherException 	"Create an exception set."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.NotificationClassProtocol</class-id> <category>repertoire</category><body>new	"Return a newly created object initialized to a standard initial state."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadWriteStreamProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadWriteStreamProtocol</class-id> <category>gettableStreamProtocol</category><body>atEnd	"Returns a Boolean indicating whether the receiver is at the end of its values."	^self implementorsResponsibility</body><body>do: operation 	"Evaluates the argument with each receiver future sequence value, terminating evaluation when there are no more future sequence values."	^self implementorsResponsibility</body><body>next	"Return the next object in the receiver."	^self implementorsResponsibility</body><body>nextLine	"Reads the next line from the stream."	^self implementorsResponsibility</body><body>nextMatchFor: anObject 	"Reads the next object from the stream and returns true if the object is equivalent to the argument and false if not."	^self implementorsResponsibility</body><body>peek	"Returns the next object in the receiver's future sequence values without advancing the receiver's position. Returns nil if the receiver is at end of stream."	^self implementorsResponsibility</body><body>peekFor: anObject 	"Peeks at the next object in the stream and returns true if it matches the argument, and false if not."	^self implementorsResponsibility</body><body>skip: amount 	"Skips the next amount objects in the receiver's future sequence values."	^self implementorsResponsibility</body><body>skipTo: anObject 	"Sets the stream to read the object just after the next occurrence of the argument and returns true. If the argument is not found before the end of the stream is encountered, false is returned."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadWriteStreamProtocol</class-id> <category>sequencedStreamProtocol</category><body>close	"Disassociate a stream from its backing store."	^self implementorsResponsibility</body><body>isEmpty	"Returns a Boolean indicating whether there are any sequence values in the receiver."	^self implementorsResponsibility</body><body>position	"Returns the current position of the stream."	^self implementorsResponsibility</body><body>position: amount 	"Sets the current position in a stream of values."	^self implementorsResponsibility</body><body>reset	"Resets the position of the receiver to be at the beginning of the stream of values."	^self implementorsResponsibility</body><body>setToEnd	"Set the position of the stream to its end."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadWriteStreamProtocol</class-id> <category>collectionStreamProtocol</category><body>contents	"Returns a collection containing the complete contents of the stream."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadWriteStreamProtocol</class-id> <category>ReadStreamProtocol</category><body>next: amount 	"Returns a collection of the next amount objects in the stream."	^self implementorsResponsibility</body><body>upTo: anObject 	"Returns a collection of all of the objects in the receiver up to, but not including, the next occurrence of the argument. Sets the stream to read the object just after the next occurrence of the argument. If the argument is not found and the end of the stream is encountered, an ordered collection of the objects read is returned."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadWriteStreamProtocol</class-id> <category>puttableStreamProtocol</category><body>cr	"Writes an end-of-line sequence to the receiver."	^self implementorsResponsibility</body><body>flush	"Update a stream's backing store."	^self implementorsResponsibility</body><body>nextPut: anObject 	"Writes the argument to the stream."	^self implementorsResponsibility</body><body>nextPutAll: aCollection 	"Enumerates the argument, adding each element to the receiver"	^self implementorsResponsibility</body><body>space	"Writes a space character to the receiver."	^self implementorsResponsibility</body><body>tab	"Writes a tab character to the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.symbolProtocol</class-id> <category>sequencedReadableCollectionProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>after: target 	"Answer the object immediately following the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>at: index 	"Answer the element at the position index in the receiver."	^self implementorsResponsibility</body><body>at: index ifAbsent: exceptionBlock 	"Answer the element at the position index in the receiver.  If there is no position corresponding to index in the receiver, then answer the result of evaluating exceptionBlock."	^self implementorsResponsibility</body><body>before: target 	"Answer the object immediately preceding the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>copyFrom: start to: stop 	"Answer a new collection containing all of the elements of the receiver between the indices start and stop inclusive. If stop &lt; start, the result has a size of zero."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which the elements of the receiver between start and stop inclusive have been replaced with replacementElement."	^self implementorsResponsibility</body><body>copyWithout: oldElement 	"Answer a new collection, containing the same elements as the receiver in their original order omitting any elements equivalent to oldElement."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>findFirst: discriminator 	"Answer the index of the first element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>findLast: discriminator 	"Answer the index of the last element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>first	"Answer the first element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop do: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop keysAndValuesDo: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with an element of the receiver as the first argument and the element's position (index) as the second."	^self implementorsResponsibility</body><body>indexOf: target 	"Answer the index of the first element of the receiver which is equivalent to target. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>indexOf: target ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is equivalent to target. Answer the result of evaluating exceptionHandler with no parameters if no such element is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer 0 if no such subsequence is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer the result of evaluating exceptionHandler with no parameters if no such subsequence is found."	^self implementorsResponsibility</body><body>keysAndValuesDo: operation 	"Evaluate operation with the index of each element of the receiver, in order, together with the element itself."	^self implementorsResponsibility</body><body>last	"Answer the last element of the receiver."	^self implementorsResponsibility</body><body>reverse	"Answer a collection with the elements of the receiver arranged in reverse order."	^self implementorsResponsibility</body><body>reverseDo: operation 	"Evaluate operation with each element of the receiver in the reverse of the receiver's standard traversal order."	^self implementorsResponsibility</body><body>with: otherCollection do: operation 	"Evaluate operation with each element of the receiver and the corresponding element of otherCollection as parameters."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.symbolProtocol</class-id> <category>readableStringProtocol</category><body>, operand 	"Answer a new collection which is the concatenation of the receiver and operand."	^self implementorsResponsibility</body><body>&lt; operand 	"Answer true if the receiver is less than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&lt;= operand 	"Answer true if the receiver is less than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt; operand 	"Answer true if the receiver is greater than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt;= operand 	"Answer true if the receiver is greater than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>asLowercase	"Answer a new string which contains all of the elements of the receiver converted to their lower case equivalents."	^self implementorsResponsibility</body><body>asUppercase	"Answer a new string which contains all of the elements of the receiver converted to their upper case equivalents."	^self implementorsResponsibility</body><body>copyReplaceAll: targetElements with: replacementElements 	"Answer a new collection in which all subsequences of elements in the receiver matching targetElements are replaced in the new collection by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop with: replacementElements 	"Answer a new collection, containing the same elements as the receiver, but with the elements in the receiver between start and stop inclusive replaced by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplacing: targetElement withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which any occurrences of targetElement are replaced by replacementElement."	^self implementorsResponsibility</body><body>copyWith: newElement 	"Answer a new collection containing the same elements as the receiver, with newElement added."	^self implementorsResponsibility</body><body>sameAs: operand 	"Answer true if the receiver collates the same as operand. Answer false otherwise."	^self implementorsResponsibility</body><body>subStrings: separators 	"Answer an array containing the substrings in the receiver separated by the elements of separators."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.symbolProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.symbolProtocol</class-id> <category>magnitudeProtocol</category><body>between: min and: max 	"Answer true if the receiver is less than or equal to max, and greater than or equal to min. Answer false otherwise."	^self implementorsResponsibility</body><body>max: operand 	"Answer the receiver if it is greater than operand. Answer operand otherwise."	^self implementorsResponsibility</body><body>min: operand 	"Answer the receiver if it is less than operand. Answer operand otherwise."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.symbolProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which includes only the elements in the receiver which cause discriminator to evaluate to false."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains only the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.symbolProtocol</class-id> <category>repertoire</category><body>asString	"Answer a string containing the same characters as the receiver."	^self implementorsResponsibility</body><body>asSymbol	"Answer a symbol containing the same characters as the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.monadicBlockProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.monadicBlockProtocol</class-id> <category>valuableProtocol</category><body>valueWithArguments: argumentArray 	"Answers the value of the receiver when applied to the arguments in argumentArray."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.monadicBlockProtocol</class-id> <category>monadicValuableProtocol</category><body>argumentCount	"Answers the number of arguments needed to evaluate the receiver."	^self implementorsResponsibility</body><body>value: argument 	"Answers the value of the receiver when applied to the argument."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.readableStringProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.readableStringProtocol</class-id> <category>magnitudeProtocol</category><body>between: min and: max 	"Answer true if the receiver is less than or equal to max, and greater than or equal to min. Answer false otherwise."	^self implementorsResponsibility</body><body>max: operand 	"Answer the receiver if it is greater than operand. Answer operand otherwise."	^self implementorsResponsibility</body><body>min: operand 	"Answer the receiver if it is less than operand. Answer operand otherwise."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.readableStringProtocol</class-id> <category>sequencedReadableCollectionProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>after: target 	"Answer the object immediately following the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>at: index 	"Answer the element at the position index in the receiver."	^self implementorsResponsibility</body><body>at: index ifAbsent: exceptionBlock 	"Answer the element at the position index in the receiver.  If there is no position corresponding to index in the receiver, then answer the result of evaluating exceptionBlock."	^self implementorsResponsibility</body><body>before: target 	"Answer the object immediately preceding the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>copyFrom: start to: stop 	"Answer a new collection containing all of the elements of the receiver between the indices start and stop inclusive. If stop &lt; start, the result has a size of zero."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which the elements of the receiver between start and stop inclusive have been replaced with replacementElement."	^self implementorsResponsibility</body><body>copyWithout: oldElement 	"Answer a new collection, containing the same elements as the receiver in their original order omitting any elements equivalent to oldElement."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>findFirst: discriminator 	"Answer the index of the first element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>findLast: discriminator 	"Answer the index of the last element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>first	"Answer the first element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop do: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop keysAndValuesDo: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with an element of the receiver as the first argument and the element's position (index) as the second."	^self implementorsResponsibility</body><body>indexOf: target 	"Answer the index of the first element of the receiver which is equivalent to target. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>indexOf: target ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is equivalent to target. Answer the result of evaluating exceptionHandler with no parameters if no such element is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer 0 if no such subsequence is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer the result of evaluating exceptionHandler with no parameters if no such subsequence is found."	^self implementorsResponsibility</body><body>keysAndValuesDo: operation 	"Evaluate operation with the index of each element of the receiver, in order, together with the element itself."	^self implementorsResponsibility</body><body>last	"Answer the last element of the receiver."	^self implementorsResponsibility</body><body>reverse	"Answer a collection with the elements of the receiver arranged in reverse order."	^self implementorsResponsibility</body><body>reverseDo: operation 	"Evaluate operation with each element of the receiver in the reverse of the receiver's standard traversal order."	^self implementorsResponsibility</body><body>with: otherCollection do: operation 	"Evaluate operation with each element of the receiver and the corresponding element of otherCollection as parameters."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.readableStringProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which includes only the elements in the receiver which cause discriminator to evaluate to false."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains only the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.readableStringProtocol</class-id> <category>repertoire</category><body>, operand 	"Answer a new collection which is the concatenation of the receiver and operand."	^self implementorsResponsibility</body><body>&lt; operand 	"Answer true if the receiver is less than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&lt;= operand 	"Answer true if the receiver is less than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt; operand 	"Answer true if the receiver is greater than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt;= operand 	"Answer true if the receiver is greater than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>asLowercase	"Answer a new string which contains all of the elements of the receiver converted to their lower case equivalents."	^self implementorsResponsibility</body><body>asString	"Answer a string containing the same characters as the receiver."	^self implementorsResponsibility</body><body>asSymbol	"Answer a symbol containing the same characters as the receiver."	^self implementorsResponsibility</body><body>asUppercase	"Answer a new string which contains all of the elements of the receiver converted to their upper case equivalents."	^self implementorsResponsibility</body><body>copyReplaceAll: targetElements with: replacementElements 	"Answer a new collection in which all subsequences of elements in the receiver matching targetElements are replaced in the new collection by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop with: replacementElements 	"Answer a new collection, containing the same elements as the receiver, but with the elements in the receiver between start and stop inclusive replaced by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplacing: targetElement withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which any occurrences of targetElement are replaced by replacementElement."	^self implementorsResponsibility</body><body>copyWith: newElement 	"Answer a new collection containing the same elements as the receiver, with newElement added."	^self implementorsResponsibility</body><body>sameAs: operand 	"Answer true if the receiver collates the same as operand. Answer false otherwise."	^self implementorsResponsibility</body><body>subStrings: separators 	"Answer an array containing the substrings in the receiver separated by the elements of separators."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.signaledExceptionProtocol</class-id> <category>repertoire</category><body>isNested	"Determine whether the current exception handler is within the scope of another handler for the same exception."	^self implementorsResponsibility</body><body>outer	"Evaluate the enclosing exception action for the receiver and return."	^self implementorsResponsibility</body><body>pass	"Yield control to the enclosing exception action for the receiver."	^self implementorsResponsibility</body><body>resignalAs: replacementException 	"Signal an alternative exception in place of the receiver."	^self implementorsResponsibility</body><body>resume	"Return from the message that signaled the receiver."	^self implementorsResponsibility</body><body>resume: resumptionValue 	"Return the argument as the value of the message that signaled the receiver."	^self implementorsResponsibility</body><body>retry	"Abort an exception handler and re-evaluate its protected block."	^self implementorsResponsibility</body><body>retryUsing: alternativeBlock 	"Abort an exception handler and evaluate a new block in place of the handler's protected block."	^self implementorsResponsibility</body><body>return	"Return nil as the value of the block protected by the active exception handler."	^self implementorsResponsibility</body><body>return: returnValue 	"Return the argument as the value of the block protected by the active exception handler."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.IntervalFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.IntervalFactoryProtocol</class-id> <category>repertoire</category><body>from: start to: stop 	"Answer an interval which represents an arithmetic progression from start to stop in increments of 1."	^self implementorsResponsibility</body><body>from: start to: stop by: step 	"Answer an interval which represents an arithmetic progression from start to stop in increments of step."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ObjectProtocol</class-id> <category>repertoire</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.sequencedContractibleCollectionProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.sequencedContractibleCollectionProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which includes only the elements in the receiver which cause discriminator to evaluate to false."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains only the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.sequencedContractibleCollectionProtocol</class-id> <category>repertoire</category><body>removeAtIndex: index 	"Remove the element of the receiver at position index, and answer the removed element."	^self implementorsResponsibility</body><body>removeFirst	"Remove and answer the first element of the receiver."	^self implementorsResponsibility</body><body>removeLast	"Remove and answer the last element of the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.IdentityDictionaryProtocol</class-id> <category>abstractDictionaryProtocol</category><body>addAll: dictionary 	"Store the elements of dictionary in the receiver at the corresponding keys from dictionary."	^self implementorsResponsibility</body><body>at: key 	"Answer the element at key in the receiver."	^self implementorsResponsibility</body><body>at: key ifAbsent: operation 	"Answer the element at key in the receiver. If key lookup for key fails, then answer the result of evaluating operation."	^self implementorsResponsibility</body><body>at: key ifAbsentPut: operation 	"Answer the element at key in the receiver. If key lookup for key fails, then store and return the result of evaluating operation."	^self implementorsResponsibility</body><body>at: key put: newElement 	"Store newElement at key in the receiver. Answer newElement."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>includesKey: key 	"Answer true if the receiver contains an element stored at key. Answer false otherwise."	^self implementorsResponsibility</body><body>keyAtValue: value 	"Answer a key such that the element stored at this key is equal to value. Answer nil if no such key is found."	^self implementorsResponsibility</body><body>keyAtValue: value ifAbsent: operation 	"Answer a key such that the element stored at this key is equivalent to value. Answer the result of evaluating operation if no such key is found."	^self implementorsResponsibility</body><body>keys	"Answer a collection of keys at which there is an element stored in the receiver."	^self implementorsResponsibility</body><body>keysAndValuesDo: operation 	"Iteratively evaluate operation with each of the receiver's keys and values."	^self implementorsResponsibility</body><body>keysDo: operation 	"Iteratively evaluate operation with each of the receiver's keys at which there are elements stored."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which excludes the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>removeAllKeys: keys 	"Remove any elements from the receiver which are stored at the keys specified in keys."	^self implementorsResponsibility</body><body>removeAllKeys: keys ifAbsent: operation 	"Remove any elements from the receiver which are stored at the keys specified in keys. For any element in keys which is not a valid key of the receiver, evaluate operation with that element as the argument, but do not stop the enumeration."	^self implementorsResponsibility</body><body>removeKey: key 	"Remove the element which is stored at key in the receiver. Answer the removed element."	^self implementorsResponsibility</body><body>removeKey: key ifAbsent: operation 	"Remove the element which is stored at key in the receiver and answer the removed element. Answer the result of evaluating operation if no such key is found in the receiver."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>values	"Answer a collection of the receiver's elements."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.IdentityDictionaryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.IdentityDictionaryProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.nilProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.nilProtocol</class-id> <category>repertoire</category><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI._Loader class</class-id> <category>parcel load/unload/save</category><body>postLoadActionFor: aParcel	"Restore the Interface synchronization state"	Interface configuration synchronize: (aParcel namedObjects at: #CurrentInterfaceSynchronizationState)</body></methods><methods><class-id>Interfaces.ANSI.ErrorProtocol</class-id> <category>signaledExceptionProtocol</category><body>isNested	"Determine whether the current exception handler is within the scope of another handler for the same exception."	^self implementorsResponsibility</body><body>outer	"Evaluate the enclosing exception action for the receiver and return."	^self implementorsResponsibility</body><body>pass	"Yield control to the enclosing exception action for the receiver."	^self implementorsResponsibility</body><body>resignalAs: replacementException 	"Signal an alternative exception in place of the receiver."	^self implementorsResponsibility</body><body>resume	"Return from the message that signaled the receiver."	^self implementorsResponsibility</body><body>resume: resumptionValue 	"Return the argument as the value of the message that signaled the receiver."	^self implementorsResponsibility</body><body>retry	"Abort an exception handler and re-evaluate its protected block."	^self implementorsResponsibility</body><body>retryUsing: alternativeBlock 	"Abort an exception handler and evaluate a new block in place of the handler's protected block."	^self implementorsResponsibility</body><body>return	"Return nil as the value of the block protected by the active exception handler."	^self implementorsResponsibility</body><body>return: returnValue 	"Return the argument as the value of the block protected by the active exception handler."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ErrorProtocol</class-id> <category>exceptionBuilderProtocol</category><body>messageText: signalerText 	"Set an exception's message text."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ErrorProtocol</class-id> <category>repertoire</category><body>defaultAction	^self implementorsResponsibility</body><body>isResumable	"Determine whether an exception is resumable."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FloatProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FloatProtocol</class-id> <category>numberProtocol</category><body>* operand 	"Answer the result of multiplying the receiver by operand."	^self implementorsResponsibility</body><body>+ operand 	"Answer the result of adding operand to the receiver."	^self implementorsResponsibility</body><body>- operand 	"Answer the result of subtracting operand from the receiver."	^self implementorsResponsibility</body><body>/ operand 	"Answer the result of dividing the receiver by operand."	^self implementorsResponsibility</body><body>// operand 	"Answer the truncated quotient resulting from dividing the receiver by operand. The truncation is towards negative infinity."	^self implementorsResponsibility</body><body>&lt; operand 	"Answer true if the receiver is less than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt; operand 	"Answer true if the receiver is greater than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>abs	"Answer the absolute value of the receiver."	^self implementorsResponsibility</body><body>asFloat	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFloatD	"Answer a d precision floating-point number approximating the receiver ."	^self implementorsResponsibility</body><body>asFloatE	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFloatQ	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFraction	"Answer a fraction approximating the receiver."	^self implementorsResponsibility</body><body>asInteger	"Answer an integer approximating the receiver."	^self implementorsResponsibility</body><body>asScaledDecimal: scale 	"Answer a scaled decimal number, with a fractional precision of scale, approximating the receiver."	^self implementorsResponsibility</body><body>ceiling	"Answer the smallest integer greater than or equal to the receiver."	^self implementorsResponsibility</body><body>floor	"Answer the largest integer less than or equal to the receiver."	^self implementorsResponsibility</body><body>fractionPart	"Answer the fractional part of the receiver."	^self implementorsResponsibility</body><body>integerPart	"Answer the integer part of the receiver."	^self implementorsResponsibility</body><body>negated	"Answer the negation of the receiver."	^self implementorsResponsibility</body><body>negative	"Answer true if the receiver is negative."	^self implementorsResponsibility</body><body>positive	"Answer true if the receiver is positive or zero."	^self implementorsResponsibility</body><body>quo: operand 	"Answer the truncated integer quotient resulting from dividing the receiver by operand. Truncation is towards zero."	^self implementorsResponsibility</body><body>raisedTo: operand 	"Answer the receiver raised to the power operand."	^self implementorsResponsibility</body><body>raisedToInteger: operand 	"Answer the receiver raised to the power operand."	^self implementorsResponsibility</body><body>reciprocal	"Answer the reciprocal of the receiver."	^self implementorsResponsibility</body><body>rem: operand 	"Answer the remainder after integer division of the receiver by the operand."	^self implementorsResponsibility</body><body>rounded	"Answer the integer nearest the receiver."	^self implementorsResponsibility</body><body>roundTo: factor 	"Answer the number nearest the receiver that is a multiple of factor."	^self implementorsResponsibility</body><body>sign	"Answer the sign of the receiver."	^self implementorsResponsibility</body><body>sqrt	"Answer the positive square root of the receiver."	^self implementorsResponsibility</body><body>squared	"Answer the receiver squared."	^self implementorsResponsibility</body><body>strictlyPositive	"Answer true if the receiver is greater than zero."	^self implementorsResponsibility</body><body>to: stop 	"Answer an object conforming to &lt;intervalProtocol&gt; which represents an arithmetic progression from the receiver to stop in increments of 1."	^self implementorsResponsibility</body><body>to: stop by: step 	"Answer an interval which represents an arithmetic progression from receiver to stop in increments of step."	^self implementorsResponsibility</body><body>to: stop by: step do: operation 	"Evaluate operation for each element of an interval which represents an arithmetic progression from the receiver to stop in increments of step."	^self implementorsResponsibility</body><body>to: stop do: operation 	"Evaluate operation for each element of an interval which represents an arithmetic progression from receiver to stop in increments of 1."	^self implementorsResponsibility</body><body>truncated	"Answer an integer equal to the receiver truncated towards zero."	^self implementorsResponsibility</body><body>truncateTo: factor 	"Answer the number nearest the receiver truncated towards zero which is a multiple of factor."	^self implementorsResponsibility</body><body>\\ operand 	"Answer the remainder after integer division of the receiver by the operand."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FloatProtocol</class-id> <category>magnitudeProtocol</category><body>&lt;= operand 	"Answer true if the receiver is less than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt;= operand 	"Answer true if the receiver is greater than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>between: min and: max 	"Answer true if the receiver is less than or equal to max, and greater than or equal to min. Answer false otherwise."	^self implementorsResponsibility</body><body>max: operand 	"Answer the receiver if it is greater than operand. Answer operand otherwise."	^self implementorsResponsibility</body><body>min: operand 	"Answer the receiver if it is less than operand. Answer operand otherwise."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FloatProtocol</class-id> <category>repertoire</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>arcCos	"Answer the inverse cosine of the receiver in radians."	^self implementorsResponsibility</body><body>arcSin	"Answer the inverse sine of the receiver in radians."	^self implementorsResponsibility</body><body>arcTan	"Answer the inverse tangent of the receiver in radians."	^self implementorsResponsibility</body><body>cos	"Answer the cosine of the receiver in radians."	^self implementorsResponsibility</body><body>degreesToRadians	"Answer the receiver converted from degrees to radians."	^self implementorsResponsibility</body><body>exp	"Answer the natural exponential of the receiver. This is the inverse of #ln."	^self implementorsResponsibility</body><body>floorLog: operand 	"Answer the largest integer less than or equal to the logarithm to the base operand of the receiver."	^self implementorsResponsibility</body><body>ln	"Answer the natural logarithm of the receiver."	^self implementorsResponsibility</body><body>log: operand 	"Answer the logarithm to the base operand of the receiver."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>radiansToDegrees	"Answer the receiver converted from radians to degrees."	^self implementorsResponsibility</body><body>sin	"Answer the sine of the receiver."	^self implementorsResponsibility</body><body>tan	"Answer the tangent of the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.MessageNotUnderstoodSelectorProtocol</class-id> <category>repertoire</category><body>handles: exception 	"Determine whether an exception handler will accept a signaled exception."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DictionaryProtocol</class-id> <category>abstractDictionaryProtocol</category><body>addAll: dictionary 	"Store the elements of dictionary in the receiver at the corresponding keys from dictionary."	^self implementorsResponsibility</body><body>at: key 	"Answer the element at key in the receiver."	^self implementorsResponsibility</body><body>at: key ifAbsent: operation 	"Answer the element at key in the receiver. If key lookup for key fails, then answer the result of evaluating operation."	^self implementorsResponsibility</body><body>at: key ifAbsentPut: operation 	"Answer the element at key in the receiver. If key lookup for key fails, then store and return the result of evaluating operation."	^self implementorsResponsibility</body><body>at: key put: newElement 	"Store newElement at key in the receiver. Answer newElement."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>includesKey: key 	"Answer true if the receiver contains an element stored at key. Answer false otherwise."	^self implementorsResponsibility</body><body>keyAtValue: value 	"Answer a key such that the element stored at this key is equal to value. Answer nil if no such key is found."	^self implementorsResponsibility</body><body>keyAtValue: value ifAbsent: operation 	"Answer a key such that the element stored at this key is equivalent to value. Answer the result of evaluating operation if no such key is found."	^self implementorsResponsibility</body><body>keys	"Answer a collection of keys at which there is an element stored in the receiver."	^self implementorsResponsibility</body><body>keysAndValuesDo: operation 	"Iteratively evaluate operation with each of the receiver's keys and values."	^self implementorsResponsibility</body><body>keysDo: operation 	"Iteratively evaluate operation with each of the receiver's keys at which there are elements stored."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which excludes the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>removeAllKeys: keys 	"Remove any elements from the receiver which are stored at the keys specified in keys."	^self implementorsResponsibility</body><body>removeAllKeys: keys ifAbsent: operation 	"Remove any elements from the receiver which are stored at the keys specified in keys. For any element in keys which is not a valid key of the receiver, evaluate operation with that element as the argument, but do not stop the enumeration."	^self implementorsResponsibility</body><body>removeKey: key 	"Remove the element which is stored at key in the receiver. Answer the removed element."	^self implementorsResponsibility</body><body>removeKey: key ifAbsent: operation 	"Remove the element which is stored at key in the receiver and answer the removed element. Answer the result of evaluating operation if no such key is found in the receiver."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>values	"Answer a collection of the receiver's elements."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DictionaryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DictionaryProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.extensibleCollectionProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.extensibleCollectionProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which includes only the elements in the receiver which cause discriminator to evaluate to false."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains only the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.extensibleCollectionProtocol</class-id> <category>repertoire</category><body>add: newElement 	"Add newElement to the receiver's elements."	^self implementorsResponsibility</body><body>addAll: newElements 	"Add each element of newElements to the receiver's elements."	^self implementorsResponsibility</body><body>remove: oldElement 	"Remove the first element of the receiver which is equivalent to oldElement and return the removed element."	^self implementorsResponsibility</body><body>remove: oldElement ifAbsent: exceptionHandler 	"Remove the first element of the receiver which is equivalent to oldElement. If it is not found, answer the result of evaluating exceptionHandler."	^self implementorsResponsibility</body><body>removeAll: oldElements 	"For each element in oldElements, remove the first element from the receiver which is equivalent to this element."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.collectionProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.collectionProtocol</class-id> <category>repertoire</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which includes only the elements in the receiver which cause discriminator to evaluate to false."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains only the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.exceptionInstantiatorProtocol</class-id> <category>exceptionSelectorProtocol</category><body>, anotherException 	"Create an exception set."	^self implementorsResponsibility</body><body>handles: exception 	"Determine whether an exception handler will accept a signaled exception."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.exceptionInstantiatorProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.exceptionInstantiatorProtocol</class-id> <category>exceptionSignalerProtocol</category><body>signal: signalerText 	"Signal the occurrence of an exceptional condition with a specified textual description."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.exceptionInstantiatorProtocol</class-id> <category>repertoire</category><body>new	"Create a new object."	^self implementorsResponsibility</body><body>signal	"Signal the occurrence on an exceptional condition."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.IdentityDictionaryFactoryProtocol</class-id> <category>repertoire</category><body>new	"Create a new object."	^self implementorsResponsibility</body><body>new: count 	"Create a new collection. The parameter count constrains the number of elements in the result."	^self implementorsResponsibility</body><body>withAll: newElements 	"Create a collection containing all the elements of newElements."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ByteArrayProtocol</class-id> <category>sequencedReadableCollectionProtocol</category><body>, operand 	"Answer a new collection which is the concatenation of the receiver and operand."	^self implementorsResponsibility</body><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>after: target 	"Answer the object immediately following the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>at: index 	"Answer the element at the position index in the receiver."	^self implementorsResponsibility</body><body>at: index ifAbsent: exceptionBlock 	"Answer the element at the position index in the receiver.  If there is no position corresponding to index in the receiver, then answer the result of evaluating exceptionBlock."	^self implementorsResponsibility</body><body>before: target 	"Answer the object immediately preceding the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>copyFrom: start to: stop 	"Answer a new collection containing all of the elements of the receiver between the indices start and stop inclusive. If stop &lt; start, the result has a size of zero."	^self implementorsResponsibility</body><body>copyReplaceAll: targetElements with: replacementElements 	"Answer a new collection in which all subsequences of elements in the receiver matching targetElements are replaced in the new collection by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop with: replacementElements 	"Answer a new collection, containing the same elements as the receiver, but with the elements in the receiver between start and stop inclusive replaced by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which the elements of the receiver between start and stop inclusive have been replaced with replacementElement."	^self implementorsResponsibility</body><body>copyReplacing: targetElement withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which any occurrences of targetElement are replaced by replacementElement."	^self implementorsResponsibility</body><body>copyWith: newElement 	"Answer a new collection containing the same elements as the receiver, with newElement added."	^self implementorsResponsibility</body><body>copyWithout: oldElement 	"Answer a new collection, containing the same elements as the receiver in their original order omitting any elements equivalent to oldElement."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>findFirst: discriminator 	"Answer the index of the first element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>findLast: discriminator 	"Answer the index of the last element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>first	"Answer the first element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop do: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop keysAndValuesDo: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with an element of the receiver as the first argument and the element's position (index) as the second."	^self implementorsResponsibility</body><body>indexOf: target 	"Answer the index of the first element of the receiver which is equivalent to target. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>indexOf: target ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is equivalent to target. Answer the result of evaluating exceptionHandler with no parameters if no such element is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer 0 if no such subsequence is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer the result of evaluating exceptionHandler with no parameters if no such subsequence is found."	^self implementorsResponsibility</body><body>keysAndValuesDo: operation 	"Evaluate operation with the index of each element of the receiver, in order, together with the element itself."	^self implementorsResponsibility</body><body>last	"Answer the last element of the receiver."	^self implementorsResponsibility</body><body>reverse	"Answer a collection with the elements of the receiver arranged in reverse order."	^self implementorsResponsibility</body><body>reverseDo: operation 	"Evaluate operation with each element of the receiver in the reverse of the receiver's standard traversal order."	^self implementorsResponsibility</body><body>with: otherCollection do: operation 	"Evaluate operation with each element of the receiver and the corresponding element of otherCollection as parameters."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ByteArrayProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ByteArrayProtocol</class-id> <category>sequencedCollectionProtocol</category><body>at: index put: newElement 	"Replace the element in the receiver at index with newElement. Answer newElement."	^self implementorsResponsibility</body><body>atAll: indices put: newElement 	"Replace the elements in the receiver specified by indices with newElement."	^self implementorsResponsibility</body><body>atAllPut: newElement 	"Replace all the elements in the receiver with newElement."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop with: replacementElements 	"Replace the elements of the receiver between positions start and stop inclusive, with the elements of replacementElements in their original order. Answer the receiver."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop with: replacementElements startingAt: replacementStart 	"Replace the elements of the receiver between positions start and stop inclusive with the elements of replacementElements, in their original order, starting at position replacementStart. Answer the receiver."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop withObject: replacementElement 	"Replace the elements of the receiver between start and stop inclusive with replacementElement. Answer the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ByteArrayProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which includes only the elements in the receiver which cause discriminator to evaluate to false."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains only the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ErrorClassProtocol</class-id> <category>classDescriptionProtocol</category><body>allSubclasses	"Return all subclasses of a class."	^self implementorsResponsibility</body><body>allSuperclasses	"Return all superclasses of a class."	^self implementorsResponsibility</body><body>name	"Return the name of a class."	^self implementorsResponsibility</body><body>subclasses	"Return direct subclasses of a class."	^self implementorsResponsibility</body><body>superclass	"Return the immediate superclass of a class."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ErrorClassProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ErrorClassProtocol</class-id> <category>exceptionSignalerProtocol</category><body>signal: signalerText 	"Signal the occurrence of an exceptional condition with a specified textual description."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ErrorClassProtocol</class-id> <category>ExceptionClassProtocol</category><body>handles: exception 	^self implementorsResponsibility</body><body>signal	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ErrorClassProtocol</class-id> <category>exceptionSelectorProtocol</category><body>, anotherException 	"Create an exception set."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ErrorClassProtocol</class-id> <category>repertoire</category><body>new	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.SetFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.SetFactoryProtocol</class-id> <category>repertoire</category><body>new	"Create a new object."	^self implementorsResponsibility</body><body>new: count 	"Create a new collection. The parameter count constrains the number of elements in the result."	^self implementorsResponsibility</body><body>with: element1 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 with: element4 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>withAll: newElements 	"Create a collection containing only the elements of newElements."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WriteStreamProtocol</class-id> <category>puttableStreamProtocol</category><body>cr	"Writes an end-of-line sequence to the receiver."	^self implementorsResponsibility</body><body>flush	"Update a stream's backing store."	^self implementorsResponsibility</body><body>nextPut: anObject 	"Writes the argument to the stream."	^self implementorsResponsibility</body><body>nextPutAll: aCollection 	"Enumerates the argument, adding each element to the receiver"	^self implementorsResponsibility</body><body>space	"Writes a space character to the receiver."	^self implementorsResponsibility</body><body>tab	"Writes a tab character to the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WriteStreamProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WriteStreamProtocol</class-id> <category>sequencedStreamProtocol</category><body>close	"Disassociate a stream from its backing store."	^self implementorsResponsibility</body><body>isEmpty	"Returns a Boolean indicating whether there are any sequence values in the receiver."	^self implementorsResponsibility</body><body>position	"Returns the current position of the stream."	^self implementorsResponsibility</body><body>position: amount 	"Sets the current position in a stream of values."	^self implementorsResponsibility</body><body>reset	"Resets the position of the receiver to be at the beginning of the stream of values."	^self implementorsResponsibility</body><body>setToEnd	"Set the position of the stream to its end."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.WriteStreamProtocol</class-id> <category>collectionStreamProtocol</category><body>contents	"Returns a collection containing the complete contents of the stream."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DictionaryFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.DictionaryFactoryProtocol</class-id> <category>repertoire</category><body>new	"Create a new object."	^self implementorsResponsibility</body><body>new: count 	"Create a new collection. The parameter count constrains the number of elements in the result."	^self implementorsResponsibility</body><body>withAll: newElements 	"Create a collection containing all the elements of newElements."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.selectorProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ArrayProtocol</class-id> <category>sequencedReadableCollectionProtocol</category><body>, operand 	"Answer a new collection which is the concatenation of the receiver and operand."	^self implementorsResponsibility</body><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>after: target 	"Answer the object immediately following the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>at: index 	"Answer the element at the position index in the receiver."	^self implementorsResponsibility</body><body>at: index ifAbsent: exceptionBlock 	"Answer the element at the position index in the receiver.  If there is no position corresponding to index in the receiver, then answer the result of evaluating exceptionBlock."	^self implementorsResponsibility</body><body>before: target 	"Answer the object immediately preceding the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>copyFrom: start to: stop 	"Answer a new collection containing all of the elements of the receiver between the indices start and stop inclusive. If stop &lt; start, the result has a size of zero."	^self implementorsResponsibility</body><body>copyReplaceAll: targetElements with: replacementElements 	"Answer a new collection in which all subsequences of elements in the receiver matching targetElements are replaced in the new collection by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop with: replacementElements 	"Answer a new collection, containing the same elements as the receiver, but with the elements in the receiver between start and stop inclusive replaced by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which the elements of the receiver between start and stop inclusive have been replaced with replacementElement."	^self implementorsResponsibility</body><body>copyReplacing: targetElement withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which any occurrences of targetElement are replaced by replacementElement."	^self implementorsResponsibility</body><body>copyWith: newElement 	"Answer a new collection containing the same elements as the receiver, with newElement added."	^self implementorsResponsibility</body><body>copyWithout: oldElement 	"Answer a new collection, containing the same elements as the receiver in their original order omitting any elements equivalent to oldElement."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>findFirst: discriminator 	"Answer the index of the first element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>findLast: discriminator 	"Answer the index of the last element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>first	"Answer the first element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop do: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop keysAndValuesDo: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with an element of the receiver as the first argument and the element's position (index) as the second."	^self implementorsResponsibility</body><body>indexOf: target 	"Answer the index of the first element of the receiver which is equivalent to target. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>indexOf: target ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is equivalent to target. Answer the result of evaluating exceptionHandler with no parameters if no such element is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer 0 if no such subsequence is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer the result of evaluating exceptionHandler with no parameters if no such subsequence is found."	^self implementorsResponsibility</body><body>keysAndValuesDo: operation 	"Evaluate operation with the index of each element of the receiver, in order, together with the element itself."	^self implementorsResponsibility</body><body>last	"Answer the last element of the receiver."	^self implementorsResponsibility</body><body>reverse	"Answer a collection with the elements of the receiver arranged in reverse order."	^self implementorsResponsibility</body><body>reverseDo: operation 	"Evaluate operation with each element of the receiver in the reverse of the receiver's standard traversal order."	^self implementorsResponsibility</body><body>with: otherCollection do: operation 	"Evaluate operation with each element of the receiver and the corresponding element of otherCollection as parameters."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ArrayProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ArrayProtocol</class-id> <category>sequencedCollectionProtocol</category><body>at: index put: newElement 	"Replace the element in the receiver at index with newElement. Answer newElement."	^self implementorsResponsibility</body><body>atAll: indices put: newElement 	"Replace the elements in the receiver specified by indices with newElement."	^self implementorsResponsibility</body><body>atAllPut: newElement 	"Replace all the elements in the receiver with newElement."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop with: replacementElements 	"Replace the elements of the receiver between positions start and stop inclusive, with the elements of replacementElements in their original order. Answer the receiver."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop with: replacementElements startingAt: replacementStart 	"Replace the elements of the receiver between positions start and stop inclusive with the elements of replacementElements, in their original order, starting at position replacementStart. Answer the receiver."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop withObject: replacementElement 	"Replace the elements of the receiver between start and stop inclusive with replacementElement. Answer the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ArrayProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which includes only the elements in the receiver which cause discriminator to evaluate to false."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains only the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.valuableProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.valuableProtocol</class-id> <category>repertoire</category><body>argumentCount	"Answers the number of arguments needed to evaluate the receiver."	^self implementorsResponsibility</body><body>valueWithArguments: argumentArray 	"Answers the value of the receiver when applied to the arguments in argumentArray."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.SortedCollectionProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which includes only the elements in the receiver which cause discriminator to evaluate to false."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains only the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.SortedCollectionProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.SortedCollectionProtocol</class-id> <category>extensibleCollectionProtocol</category><body>addAll: newElements 	"Add each element of newElements to the receiver's elements."	^self implementorsResponsibility</body><body>remove: oldElement 	"Remove the first element of the receiver which is equivalent to oldElement and return the removed element."	^self implementorsResponsibility</body><body>remove: oldElement ifAbsent: exceptionHandler 	"Remove the first element of the receiver which is equivalent to oldElement. If it is not found, answer the result of evaluating exceptionHandler."	^self implementorsResponsibility</body><body>removeAll: oldElements 	"For each element in oldElements, remove the first element from the receiver which is equivalent to this element."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.SortedCollectionProtocol</class-id> <category>sequencedContractibleCollectionProtocol</category><body>removeAtIndex: index 	"Remove the element of the receiver at position index, and answer the removed element."	^self implementorsResponsibility</body><body>removeFirst	"Remove and answer the first element of the receiver."	^self implementorsResponsibility</body><body>removeLast	"Remove and answer the last element of the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.SortedCollectionProtocol</class-id> <category>sequencedReadableCollectionProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>after: target 	"Answer the object immediately following the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>at: index 	"Answer the element at the position index in the receiver."	^self implementorsResponsibility</body><body>at: index ifAbsent: exceptionBlock 	"Answer the element at the position index in the receiver.  If there is no position corresponding to index in the receiver, then answer the result of evaluating exceptionBlock."	^self implementorsResponsibility</body><body>before: target 	"Answer the object immediately preceding the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>copyFrom: start to: stop 	"Answer a new collection containing all of the elements of the receiver between the indices start and stop inclusive. If stop &lt; start, the result has a size of zero."	^self implementorsResponsibility</body><body>copyWith: newElement 	"Answer a new collection containing the same elements as the receiver, with newElement added."	^self implementorsResponsibility</body><body>copyWithout: oldElement 	"Answer a new collection, containing the same elements as the receiver in their original order omitting any elements equivalent to oldElement."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>findFirst: discriminator 	"Answer the index of the first element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>findLast: discriminator 	"Answer the index of the last element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>first	"Answer the first element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop do: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop keysAndValuesDo: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with an element of the receiver as the first argument and the element's position (index) as the second."	^self implementorsResponsibility</body><body>indexOf: target 	"Answer the index of the first element of the receiver which is equivalent to target. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>indexOf: target ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is equivalent to target. Answer the result of evaluating exceptionHandler with no parameters if no such element is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer 0 if no such subsequence is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer the result of evaluating exceptionHandler with no parameters if no such subsequence is found."	^self implementorsResponsibility</body><body>keysAndValuesDo: operation 	"Evaluate operation with the index of each element of the receiver, in order, together with the element itself."	^self implementorsResponsibility</body><body>last	"Answer the last element of the receiver."	^self implementorsResponsibility</body><body>reverseDo: operation 	"Evaluate operation with each element of the receiver in the reverse of the receiver's standard traversal order."	^self implementorsResponsibility</body><body>with: otherCollection do: operation 	"Evaluate operation with each element of the receiver and the corresponding element of otherCollection as parameters."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.SortedCollectionProtocol</class-id> <category>repertoire</category><body>, operand 	"Answer a new collection which is the concatenation of the receiver and operand."	^self implementorsResponsibility</body><body>add: newElement 	"Add newElement to the receiver's elements."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>copyReplaceAll: targetElements with: replacementElements 	"Answer a new collection in which all subsequences of elements in the receiver matching targetElements are replaced in the new collection by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop with: replacementElements 	"Answer a new collection, containing the same elements as the receiver, but with the elements in the receiver between start and stop inclusive replaced by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which the elements of the receiver between start and stop inclusive have been replaced with replacementElement."	^self implementorsResponsibility</body><body>copyReplacing: targetElement withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which any occurrences of targetElement are replaced by replacementElement."	^self implementorsResponsibility</body><body>reverse	"Answer a collection with the elements of the receiver arranged in reverse order."	^self implementorsResponsibility</body><body>sortBlock	"Answer the receiver's sort block."	^self implementorsResponsibility</body><body>sortBlock: discriminator 	"Set the receiver's sort block to discriminator."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadStreamFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ReadStreamFactoryProtocol</class-id> <category>repertoire</category><body>on: aCollection 	"Returns a stream that reads from the given collection."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.collectionFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.collectionFactoryProtocol</class-id> <category>repertoire</category><body>new	"Create a new object."	^self implementorsResponsibility</body><body>new: count 	"Create a new collection. The parameter count constrains the number of elements in the result."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ByteArrayFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.ByteArrayFactoryProtocol</class-id> <category>repertoire</category><body>new	"Create a new object."	^self implementorsResponsibility</body><body>new: count 	"Create a new collection. The parameter count constrains the number of elements in the result."	^self implementorsResponsibility</body><body>with: element1 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>with: element1 with: element2 with: element3 with: element4 	"Create a collection initially containing the argument elements"	^self implementorsResponsibility</body><body>withAll: newElements 	"Create a collection containing only the elements of newElements."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.OrderedCollectionProtocol</class-id> <category>collectionProtocol</category><body>allSatisfy: discriminator 	"Return true if the discriminator evaluates to true for every element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>anySatisfy: discriminator 	"Return true if the discriminator evaluates to true for any element of the receiver. Otherwise return false."	^self implementorsResponsibility</body><body>asArray	"Answer an array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asBag	"Answer a bag with the same elements as the receiver."	^self implementorsResponsibility</body><body>asByteArray	"Answer a byte array whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asOrderedCollection	"Answer an ordered collection whose elements are the elements of the receiver."	^self implementorsResponsibility</body><body>asSet	"Answer a set with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection	"Answer a sorted collection with the same elements as the receiver."	^self implementorsResponsibility</body><body>asSortedCollection: sortBlock 	"Answer a sorted collection with the same elements as the receiver. The parameter sortBlock is used as the sort block."	^self implementorsResponsibility</body><body>collect: transformer 	"Answer a new collection constructed by gathering the results of evaluating transformer with each element of the receiver."	^self implementorsResponsibility</body><body>detect: discriminator 	"Return the first element of the receiver which causes discriminator to evaluate to true when the element is used as the argument."	^self implementorsResponsibility</body><body>detect: discriminator ifNone: exceptionHandler 	"Return the first element of the receiver which causes discriminator to evaluate to true when used as the argument to the evaluation. Answer the result of evaluating exceptionHandler if no such element is found."	^self implementorsResponsibility</body><body>do: operation separatedBy: separator 	"Evaluate operation with each element of the receiver interspersed by evaluation of separator."	^self implementorsResponsibility</body><body>includes: target 	"Answer true if an element of the receiver is equivalent to target. Answer false otherwise."	^self implementorsResponsibility</body><body>inject: initialValue into: operation 	"Answer the final result of evaluating operation using each element of the receiver and the previous evaluation result as the parameters."	^self implementorsResponsibility</body><body>isEmpty	"Return true if the receiver contains no elements. Return false otherwise."	^self implementorsResponsibility</body><body>notEmpty	"Return true if the receiver contains elements. Return false otherwise."	^self implementorsResponsibility</body><body>occurrencesOf: target 	"Answer the number of elements of the receiver which are equivalent to target."	^self implementorsResponsibility</body><body>rehash	"Re-establish hash invariants, if any."	^self implementorsResponsibility</body><body>reject: discriminator 	"Answer a new collection which includes only the elements in the receiver which cause discriminator to evaluate to false."	^self implementorsResponsibility</body><body>select: discriminator 	"Answer a new collection which contains only the elements in the receiver which cause discriminator to evaluate to true."	^self implementorsResponsibility</body><body>size	"Answer the number of elements in the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.OrderedCollectionProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.OrderedCollectionProtocol</class-id> <category>extensibleCollectionProtocol</category><body>addAll: newElements 	"Add each element of newElements to the receiver's elements."	^self implementorsResponsibility</body><body>remove: oldElement 	"Remove the first element of the receiver which is equivalent to oldElement and return the removed element."	^self implementorsResponsibility</body><body>remove: oldElement ifAbsent: exceptionHandler 	"Remove the first element of the receiver which is equivalent to oldElement. If it is not found, answer the result of evaluating exceptionHandler."	^self implementorsResponsibility</body><body>removeAll: oldElements 	"For each element in oldElements, remove the first element from the receiver which is equivalent to this element."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.OrderedCollectionProtocol</class-id> <category>sequencedContractibleCollectionProtocol</category><body>removeAtIndex: index 	"Remove the element of the receiver at position index, and answer the removed element."	^self implementorsResponsibility</body><body>removeFirst	"Remove and answer the first element of the receiver."	^self implementorsResponsibility</body><body>removeLast	"Remove and answer the last element of the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.OrderedCollectionProtocol</class-id> <category>sequencedReadableCollectionProtocol</category><body>, operand 	"Answer a new collection which is the concatenation of the receiver and operand."	^self implementorsResponsibility</body><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>after: target 	"Answer the object immediately following the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>at: index 	"Answer the element at the position index in the receiver."	^self implementorsResponsibility</body><body>at: index ifAbsent: exceptionBlock 	"Answer the element at the position index in the receiver.  If there is no position corresponding to index in the receiver, then answer the result of evaluating exceptionBlock."	^self implementorsResponsibility</body><body>before: target 	"Answer the object immediately preceding the first element which is equivalent to target in the receiver."	^self implementorsResponsibility</body><body>copyFrom: start to: stop 	"Answer a new collection containing all of the elements of the receiver between the indices start and stop inclusive. If stop &lt; start, the result has a size of zero."	^self implementorsResponsibility</body><body>copyReplaceAll: targetElements with: replacementElements 	"Answer a new collection in which all subsequences of elements in the receiver matching targetElements are replaced in the new collection by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop with: replacementElements 	"Answer a new collection, containing the same elements as the receiver, but with the elements in the receiver between start and stop inclusive replaced by the elements in replacementElements."	^self implementorsResponsibility</body><body>copyReplaceFrom: start to: stop withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which the elements of the receiver between start and stop inclusive have been replaced with replacementElement."	^self implementorsResponsibility</body><body>copyReplacing: targetElement withObject: replacementElement 	"Answer a new collection conforming to the same protocols as the receiver, in which any occurrences of targetElement are replaced by replacementElement."	^self implementorsResponsibility</body><body>copyWith: newElement 	"Answer a new collection containing the same elements as the receiver, with newElement added."	^self implementorsResponsibility</body><body>copyWithout: oldElement 	"Answer a new collection, containing the same elements as the receiver in their original order omitting any elements equivalent to oldElement."	^self implementorsResponsibility</body><body>do: operation 	"Evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>findFirst: discriminator 	"Answer the index of the first element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>findLast: discriminator 	"Answer the index of the last element of the receiver which causes discriminator to evaluate to true when the element is used as the parameter. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>first	"Answer the first element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop do: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with each element of the receiver."	^self implementorsResponsibility</body><body>from: start to: stop keysAndValuesDo: operation 	"For those elements of the receiver between positions start and stop, inclusive, evaluate operation with an element of the receiver as the first argument and the element's position (index) as the second."	^self implementorsResponsibility</body><body>indexOf: target 	"Answer the index of the first element of the receiver which is equivalent to target. Answer zero (0) if no such element is found."	^self implementorsResponsibility</body><body>indexOf: target ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is equivalent to target. Answer the result of evaluating exceptionHandler with no parameters if no such element is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer 0 if no such subsequence is found."	^self implementorsResponsibility</body><body>indexOfSubCollection: targetSequence startingAt: start ifAbsent: exceptionHandler 	"Answer the index of the first element of the receiver which is the start of a subsequence which matches targetSequence. Start searching at index start in the receiver. Answer the result of evaluating exceptionHandler with no parameters if no such subsequence is found."	^self implementorsResponsibility</body><body>keysAndValuesDo: operation 	"Evaluate operation with the index of each element of the receiver, in order, together with the element itself."	^self implementorsResponsibility</body><body>last	"Answer the last element of the receiver."	^self implementorsResponsibility</body><body>reverse	"Answer a collection with the elements of the receiver arranged in reverse order."	^self implementorsResponsibility</body><body>reverseDo: operation 	"Evaluate operation with each element of the receiver in the reverse of the receiver's standard traversal order."	^self implementorsResponsibility</body><body>with: otherCollection do: operation 	"Evaluate operation with each element of the receiver and the corresponding element of otherCollection as parameters."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.OrderedCollectionProtocol</class-id> <category>sequencedCollectionProtocol</category><body>at: index put: newElement 	"Replace the element in the receiver at index with newElement. Answer newElement."	^self implementorsResponsibility</body><body>atAll: indices put: newElement 	"Replace the elements in the receiver specified by indices with newElement."	^self implementorsResponsibility</body><body>atAllPut: newElement 	"Replace all the elements in the receiver with newElement."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop with: replacementElements 	"Replace the elements of the receiver between positions start and stop inclusive, with the elements of replacementElements in their original order. Answer the receiver."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop with: replacementElements startingAt: replacementStart 	"Replace the elements of the receiver between positions start and stop inclusive with the elements of replacementElements, in their original order, starting at position replacementStart. Answer the receiver."	^self implementorsResponsibility</body><body>replaceFrom: start to: stop withObject: replacementElement 	"Replace the elements of the receiver between start and stop inclusive with replacementElement. Answer the receiver."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.OrderedCollectionProtocol</class-id> <category>repertoire</category><body>add: newElement 	"Add newElement to the receiver's elements."	^self implementorsResponsibility</body><body>add: newElement after: target 	"Add newElement to the receiver immediately following the first element which is equivalent to target."	^self implementorsResponsibility</body><body>add: newElement afterIndex: index 	"Add newElement to the receiver immediately following the element at position index."	^self implementorsResponsibility</body><body>add: newElement before: target 	"Add newElement to the receiver immediately before the first element which is equivalent to target."	^self implementorsResponsibility</body><body>add: newElement beforeIndex: index 	"Add newElement to the receiver immediately before the element at position index."	^self implementorsResponsibility</body><body>addAll: newElements after: target 	"Add each element of newElements to the receiver immediately after the first element in the receiver which is equivalent to target. Answer newElements."	^self implementorsResponsibility</body><body>addAll: newElements afterIndex: index 	"Insert the elements of newElements in the receiver immediately after the element at position index. Answer newElements."	^self implementorsResponsibility</body><body>addAll: newElements before: target 	"Add each element of newElements to the receiver immediately before the first element in the receiver which is equivalent to target. Answer newElements."	^self implementorsResponsibility</body><body>addAll: newElements beforeIndex: index 	"Insert the elements of newElements in the receiver immediately before the element at position index. Answer newElements."	^self implementorsResponsibility</body><body>addAllFirst: newElements 	"Add each element of newElements to the beginning of the receiver's elements. Answer newElements."	^self implementorsResponsibility</body><body>addAllLast: newElements 	"Add each element of newElements to the end of the receiver's elements. Answer newElements."	^self implementorsResponsibility</body><body>addFirst: newElement 	"Add newElement to the beginning of the receiver's elements. Answer newElement."	^self implementorsResponsibility</body><body>addLast: newElement 	"Add newElement to the end of the receiver's elements. Answer newElement."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.sequencedStreamProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.sequencedStreamProtocol</class-id> <category>repertoire</category><body>close	"Disassociate a stream from its backing store."	^self implementorsResponsibility</body><body>contents	"Returns a collection containing the complete contents of the stream."	^self implementorsResponsibility</body><body>isEmpty	"Returns a Boolean indicating whether there are any sequence values in the receiver."	^self implementorsResponsibility</body><body>position	"Returns the current position of the stream."	^self implementorsResponsibility</body><body>position: amount 	"Sets the current position in a stream of values."	^self implementorsResponsibility</body><body>reset	"Resets the position of the receiver to be at the beginning of the stream of values."	^self implementorsResponsibility</body><body>setToEnd	"Set the position of the stream to its end."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.instantiatorProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.instantiatorProtocol</class-id> <category>repertoire</category><body>new	"Create a new object."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.NotificationProtocol</class-id> <category>signaledExceptionProtocol</category><body>isNested	"Determine whether the current exception handler is within the scope of another handler for the same exception."	^self implementorsResponsibility</body><body>outer	"Evaluate the enclosing exception action for the receiver and return."	^self implementorsResponsibility</body><body>pass	"Yield control to the enclosing exception action for the receiver."	^self implementorsResponsibility</body><body>resignalAs: replacementException 	"Signal an alternative exception in place of the receiver."	^self implementorsResponsibility</body><body>resume	"Return from the message that signaled the receiver."	^self implementorsResponsibility</body><body>resume: resumptionValue 	"Return the argument as the value of the message that signaled the receiver."	^self implementorsResponsibility</body><body>retry	"Abort an exception handler and re-evaluate its protected block."	^self implementorsResponsibility</body><body>retryUsing: alternativeBlock 	"Abort an exception handler and evaluate a new block in place of the handler's protected block."	^self implementorsResponsibility</body><body>return	"Return nil as the value of the block protected by the active exception handler."	^self implementorsResponsibility</body><body>return: returnValue 	"Return the argument as the value of the block protected by the active exception handler."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.NotificationProtocol</class-id> <category>exceptionBuilderProtocol</category><body>messageText: signalerText 	"Set an exception's message text."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.NotificationProtocol</class-id> <category>repertoire</category><body>defaultAction	^self implementorsResponsibility</body><body>isResumable	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.scaledDecimalProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.scaledDecimalProtocol</class-id> <category>numberProtocol</category><body>* operand 	"Answer the result of multiplying the receiver by operand."	^self implementorsResponsibility</body><body>+ operand 	"Answer the result of adding operand to the receiver."	^self implementorsResponsibility</body><body>- operand 	"Answer the result of subtracting operand from the receiver."	^self implementorsResponsibility</body><body>/ operand 	"Answer the result of dividing the receiver by operand."	^self implementorsResponsibility</body><body>// operand 	"Answer the truncated quotient resulting from dividing the receiver by operand. The truncation is towards negative infinity."	^self implementorsResponsibility</body><body>&lt; operand 	"Answer true if the receiver is less than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>&gt; operand 	"Answer true if the receiver is greater than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>abs	"Answer the absolute value of the receiver."	^self implementorsResponsibility</body><body>asFloat	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFloatD	"Answer a d precision floating-point number approximating the receiver ."	^self implementorsResponsibility</body><body>asFloatE	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFloatQ	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFraction	"Answer a fraction approximating the receiver."	^self implementorsResponsibility</body><body>asInteger	"Answer an integer approximating the receiver."	^self implementorsResponsibility</body><body>asScaledDecimal: scale 	"Answer a scaled decimal number, with a fractional precision of scale, approximating the receiver."	^self implementorsResponsibility</body><body>ceiling	"Answer the smallest integer greater than or equal to the receiver."	^self implementorsResponsibility</body><body>floor	"Answer the largest integer less than or equal to the receiver."	^self implementorsResponsibility</body><body>fractionPart	"Answer the fractional part of the receiver."	^self implementorsResponsibility</body><body>integerPart	"Answer the integer part of the receiver."	^self implementorsResponsibility</body><body>negated	"Answer the negation of the receiver."	^self implementorsResponsibility</body><body>negative	"Answer true if the receiver is negative."	^self implementorsResponsibility</body><body>positive	"Answer true if the receiver is positive or zero."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>quo: operand 	"Answer the truncated integer quotient resulting from dividing the receiver by operand. Truncation is towards zero."	^self implementorsResponsibility</body><body>raisedTo: operand 	"Answer the receiver raised to the power operand."	^self implementorsResponsibility</body><body>raisedToInteger: operand 	"Answer the receiver raised to the power operand."	^self implementorsResponsibility</body><body>reciprocal	"Answer the reciprocal of the receiver."	^self implementorsResponsibility</body><body>rem: operand 	"Answer the remainder after integer division of the receiver by the operand."	^self implementorsResponsibility</body><body>rounded	"Answer the integer nearest the receiver."	^self implementorsResponsibility</body><body>roundTo: factor 	"Answer the number nearest the receiver that is a multiple of factor."	^self implementorsResponsibility</body><body>sign	"Answer the sign of the receiver."	^self implementorsResponsibility</body><body>sqrt	"Answer the positive square root of the receiver."	^self implementorsResponsibility</body><body>squared	"Answer the receiver squared."	^self implementorsResponsibility</body><body>strictlyPositive	"Answer true if the receiver is greater than zero."	^self implementorsResponsibility</body><body>to: stop 	"Answer an object conforming to &lt;intervalProtocol&gt; which represents an arithmetic progression from the receiver to stop in increments of 1."	^self implementorsResponsibility</body><body>to: stop by: step 	"Answer an interval which represents an arithmetic progression from receiver to stop in increments of step."	^self implementorsResponsibility</body><body>to: stop by: step do: operation 	"Evaluate operation for each element of an interval which represents an arithmetic progression from the receiver to stop in increments of step."	^self implementorsResponsibility</body><body>to: stop do: operation 	"Evaluate operation for each element of an interval which represents an arithmetic progression from receiver to stop in increments of 1."	^self implementorsResponsibility</body><body>truncated	"Answer an integer equal to the receiver truncated towards zero."	^self implementorsResponsibility</body><body>truncateTo: factor 	"Answer the number nearest the receiver truncated towards zero which is a multiple of factor."	^self implementorsResponsibility</body><body>\\ operand 	"Answer the remainder after integer division of the receiver by the operand."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.scaledDecimalProtocol</class-id> <category>magnitudeProtocol</category><body>&lt;= operand 	"Answer true if the receiver is less than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt;= operand 	"Answer true if the receiver is greater than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>between: min and: max 	"Answer true if the receiver is less than or equal to max, and greater than or equal to min. Answer false otherwise."	^self implementorsResponsibility</body><body>max: operand 	"Answer the receiver if it is greater than operand. Answer operand otherwise."	^self implementorsResponsibility</body><body>min: operand 	"Answer the receiver if it is less than operand. Answer operand otherwise."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.scaledDecimalProtocol</class-id> <category>repertoire</category><body>scale	"Answer a integer which represents the total number of digits used to represent the fraction part of the receiver, including trailing zeroes."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FractionProtocol</class-id> <category>ObjectProtocol</category><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FractionProtocol</class-id> <category>numberProtocol</category><body>* operand 	"Answer the result of multiplying the receiver by operand."	^self implementorsResponsibility</body><body>+ operand 	"Answer the result of adding operand to the receiver."	^self implementorsResponsibility</body><body>- operand 	"Answer the result of subtracting operand from the receiver."	^self implementorsResponsibility</body><body>/ operand 	"Answer the result of dividing the receiver by operand."	^self implementorsResponsibility</body><body>// operand 	"Answer the truncated quotient resulting from dividing the receiver by operand. The truncation is towards negative infinity."	^self implementorsResponsibility</body><body>&lt; operand 	"Answer true if the receiver is less than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>&gt; operand 	"Answer true if the receiver is greater than operand. Answer false otherwise."	^self implementorsResponsibility</body><body>abs	"Answer the absolute value of the receiver."	^self implementorsResponsibility</body><body>asFloat	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFloatD	"Answer a d precision floating-point number approximating the receiver ."	^self implementorsResponsibility</body><body>asFloatE	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFloatQ	"Answer a floating-point number approximating the receiver."	^self implementorsResponsibility</body><body>asFraction	"Answer a fraction approximating the receiver."	^self implementorsResponsibility</body><body>asInteger	"Answer an integer approximating the receiver."	^self implementorsResponsibility</body><body>asScaledDecimal: scale 	"Answer a scaled decimal number, with a fractional precision of scale, approximating the receiver."	^self implementorsResponsibility</body><body>ceiling	"Answer the smallest integer greater than or equal to the receiver."	^self implementorsResponsibility</body><body>floor	"Answer the largest integer less than or equal to the receiver."	^self implementorsResponsibility</body><body>fractionPart	"Answer the fractional part of the receiver."	^self implementorsResponsibility</body><body>integerPart	"Answer the integer part of the receiver."	^self implementorsResponsibility</body><body>negated	"Answer the negation of the receiver."	^self implementorsResponsibility</body><body>negative	"Answer true if the receiver is negative."	^self implementorsResponsibility</body><body>positive	"Answer true if the receiver is positive or zero."	^self implementorsResponsibility</body><body>quo: operand 	"Answer the truncated integer quotient resulting from dividing the receiver by operand. Truncation is towards zero."	^self implementorsResponsibility</body><body>raisedTo: operand 	"Answer the receiver raised to the power operand."	^self implementorsResponsibility</body><body>raisedToInteger: operand 	"Answer the receiver raised to the power operand."	^self implementorsResponsibility</body><body>reciprocal	"Answer the reciprocal of the receiver."	^self implementorsResponsibility</body><body>rem: operand 	"Answer the remainder after integer division of the receiver by the operand."	^self implementorsResponsibility</body><body>rounded	"Answer the integer nearest the receiver."	^self implementorsResponsibility</body><body>roundTo: factor 	"Answer the number nearest the receiver that is a multiple of factor."	^self implementorsResponsibility</body><body>sign	"Answer the sign of the receiver."	^self implementorsResponsibility</body><body>sqrt	"Answer the positive square root of the receiver."	^self implementorsResponsibility</body><body>squared	"Answer the receiver squared."	^self implementorsResponsibility</body><body>strictlyPositive	"Answer true if the receiver is greater than zero."	^self implementorsResponsibility</body><body>to: stop 	"Answer an object conforming to &lt;intervalProtocol&gt; which represents an arithmetic progression from the receiver to stop in increments of 1."	^self implementorsResponsibility</body><body>to: stop by: step 	"Answer an interval which represents an arithmetic progression from receiver to stop in increments of step."	^self implementorsResponsibility</body><body>to: stop by: step do: operation 	"Evaluate operation for each element of an interval which represents an arithmetic progression from the receiver to stop in increments of step."	^self implementorsResponsibility</body><body>to: stop do: operation 	"Evaluate operation for each element of an interval which represents an arithmetic progression from receiver to stop in increments of 1."	^self implementorsResponsibility</body><body>truncated	"Answer an integer equal to the receiver truncated towards zero."	^self implementorsResponsibility</body><body>truncateTo: factor 	"Answer the number nearest the receiver truncated towards zero which is a multiple of factor."	^self implementorsResponsibility</body><body>\\ operand 	"Answer the remainder after integer division of the receiver by the operand."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FractionProtocol</class-id> <category>magnitudeProtocol</category><body>&lt;= operand 	"Answer true if the receiver is less than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>&gt;= operand 	"Answer true if the receiver is greater than or equal to operand. Answer false otherwise."	^self implementorsResponsibility</body><body>between: min and: max 	"Answer true if the receiver is less than or equal to max, and greater than or equal to min. Answer false otherwise."	^self implementorsResponsibility</body><body>max: operand 	"Answer the receiver if it is greater than operand. Answer operand otherwise."	^self implementorsResponsibility</body><body>min: operand 	"Answer the receiver if it is less than operand. Answer operand otherwise."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FractionProtocol</class-id> <category>repertoire</category><body>denominator	"Answer the denominator of the receiver."	^self implementorsResponsibility</body><body>numerator	"Answer the numerator of the receiver."	^self implementorsResponsibility</body><body>printString	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.monadicValuableProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.monadicValuableProtocol</class-id> <category>valuableProtocol</category><body>valueWithArguments: argumentArray 	"Answers the value of the receiver when applied to the arguments in argumentArray."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.monadicValuableProtocol</class-id> <category>repertoire</category><body>argumentCount	"Answers the number of arguments needed to evaluate the receiver."	^self implementorsResponsibility</body><body>value: argument 	"Answers the value of the receiver when applied to the argument."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.readFileStreamProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.readFileStreamProtocol</class-id> <category>FileStreamProtocol</category><body>contents	"Returns a collection containing the complete contents of the stream."	^self implementorsResponsibility</body><body>externalType	"Returns a symbol that identifies the external stream type of the receiver."	^self implementorsResponsibility</body><body>isBinary	"Answer wthether the receiver's data is binary."	^self implementorsResponsibility</body><body>isText	"Answer whether the receiver's data is characters."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.readFileStreamProtocol</class-id> <category>sequencedStreamProtocol</category><body>close	"Disassociate a stream from its backing store."	^self implementorsResponsibility</body><body>isEmpty	"Returns a Boolean indicating whether there are any sequence values in the receiver."	^self implementorsResponsibility</body><body>position	"Returns the current position of the stream."	^self implementorsResponsibility</body><body>position: amount 	"Sets the current position in a stream of values."	^self implementorsResponsibility</body><body>reset	"Resets the position of the receiver to be at the beginning of the stream of values."	^self implementorsResponsibility</body><body>setToEnd	"Set the position of the stream to its end."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.readFileStreamProtocol</class-id> <category>gettableStreamProtocol</category><body>atEnd	"Returns a Boolean indicating whether the receiver is at the end of its values."	^self implementorsResponsibility</body><body>do: operation 	"Evaluates the argument with each receiver future sequence value, terminating evaluation when there are no more future sequence values."	^self implementorsResponsibility</body><body>next	"Return the next object in the receiver."	^self implementorsResponsibility</body><body>nextLine	"Reads the next line from the stream."	^self implementorsResponsibility</body><body>nextMatchFor: anObject 	"Reads the next object from the stream and returns true if the object is equivalent to the argument and false if not."	^self implementorsResponsibility</body><body>peek	"Returns the next object in the receiver's future sequence values without advancing the receiver's position. Returns nil if the receiver is at end of stream."	^self implementorsResponsibility</body><body>peekFor: anObject 	"Peeks at the next object in the stream and returns true if it matches the argument, and false if not."	^self implementorsResponsibility</body><body>skip: amount 	"Skips the next amount objects in the receiver's future sequence values."	^self implementorsResponsibility</body><body>skipTo: anObject 	"Sets the stream to read the object just after the next occurrence of the argument and returns true. If the argument is not found before the end of the stream is encountered, false is returned."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.readFileStreamProtocol</class-id> <category>repertoire</category><body>next: amount 	"Returns a collection of the next amount objects in the stream."	^self implementorsResponsibility</body><body>upTo: anObject 	"Returns a collection of all of the objects in the receiver up to, but not including, the next occurrence of the argument. Sets the stream to read the object just after the next occurrence of the argument. If the argument is not found and the end of the stream is encountered, an ordered collection of the objects read is returned."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FileStreamFactoryProtocol</class-id> <category>ObjectProtocol</category><body>= comparand 	"Object equivalence test."	^self implementorsResponsibility</body><body>== comparand 	"Object identity test."	^self implementorsResponsibility</body><body>class	"Determine the class of the receiver."	^self implementorsResponsibility</body><body>copy	"Return a copy of the receiver."	^self implementorsResponsibility</body><body>doesNotUnderstand: message 	"A message was sent to the receiver for which the receiver has no behavior."	^self implementorsResponsibility</body><body>error: signalerText 	"Announce an error"	^self implementorsResponsibility</body><body>hash	"Return an integer hash code that can be used in conjunction with an #= comparison."	^self implementorsResponsibility</body><body>identityHash	"Return an integer hash code that can be used in conjunction with an #== (identity) comparison."	^self implementorsResponsibility</body><body>isKindOf: candidateClass 	"Classify an object."	^self implementorsResponsibility</body><body>isMemberOf: candidateClass 	"Determine whether the receiver is an instance of the argument."	^self implementorsResponsibility</body><body>isNil	"Determine if the receiver is the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>notNil	"Determine if the receiver is not the value of the reserved identifier nil."	^self implementorsResponsibility</body><body>perform: selector 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector with: argument1 with: argument2 with: argument3 	"Send a message using a computed message selector."	^self implementorsResponsibility</body><body>perform: selector withArguments: arguments 	"Send a message using a computed message selector and a collection of arguments."	^self implementorsResponsibility</body><body>printOn: target 	"Write a textual description of the receiver to a stream."	^self implementorsResponsibility</body><body>printString	"Return a string that describes the receiver."	^self implementorsResponsibility</body><body>respondsTo: selector 	"Determine if the receiver can respond to a specific message selector."	^self implementorsResponsibility</body><body>yourself	"No operation. Return the receiver as the result."	^self implementorsResponsibility</body><body>~= comparand 	"Object inequality test."	^self implementorsResponsibility</body><body>~~ comparand 	"Negated object identity test."	^self implementorsResponsibility</body></methods><methods><class-id>Interfaces.ANSI.FileStreamFactoryProtocol</class-id> <category>repertoire</category><body>read: fileId 	"Returns a read file stream that reads text from the file with the given name."	^self implementorsResponsibility</body><body>read: fileId type: fileType 	"Returns a read file stream that reads from the file with the given name."	^self implementorsResponsibility</body><body>write: fileId 	"Returns a write file stream that writes text to the file with the given name."	^self implementorsResponsibility</body><body>write: fileId mode: mode 	"Returns a write file stream that writes text to the file with the given name."	^self implementorsResponsibility</body><body>write: fileId mode: mode check: check type: fileType 	"Returns a write file stream that writes to the file with the given name."	^self implementorsResponsibility</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category></class><class><name>Interface</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SmallInterfaces</category></class></st-source>