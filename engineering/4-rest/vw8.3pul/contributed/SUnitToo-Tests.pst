<?xml version="1.0"?><st-source><!-- Name: SUnitToo-TestsComment: Tests for SUnitTooDbIdentifier: bear73DbTrace: 458729DbUsername: smichaelDbVersion: 8.1 - 1DevelopmentPrerequisites: #(#(#any 'SUnitToo' ''))DisregardedPrerequisites: #(#(#name 'Base VisualWorks' #componentType #bundle))PackageName: SUnitToo-TestsParcel: #('SUnitToo-Tests')ParcelName: SUnitToo-TestsPrerequisiteDescriptions: #(#(#name 'SUnitToo' #componentType #package))PrerequisiteParcels: #(#('SUnitToo' ''))PrintStringCache: (8.1 - 1,smichael)Version: 8.1 - 1Date: 11:06:25 AM February 27, 2015 --><time-stamp>From VisualWorksÂ®, Pre-Release 8.1 (feb15.4) of February 27, 2015 on February 27, 2015 at 11:06:25 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>AnotherResource</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo-Tests</package></attributes></class><comment><class-id>SUnit.AnotherResource</class-id><body>An empty resource, just for testing.</body></comment><class><name>SimpleTestResource</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars>runningState hasRun hasSetup hasRanOnce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitToo-Tests</package></attributes></class><class><name>ResourceA_A</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo-Tests</package></attributes></class><class><name>ResultsTest</name><environment>SUnit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>theResult </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo-Tests</package></attributes></class><class><name>ResourceA_C</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo-Tests</package></attributes></class><class><name>TestCaseTest</name><environment>SUnit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>didSetup didTearDown failed errored passed canceled </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo-Tests</package></attributes></class><class><name>TestResourceTest</name><environment>SUnit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>resource </inst-vars><class-inst-vars>currentResourceSet taggedResources </class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitToo-Tests</package></attributes></class><class><name>ResourceB</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo-Tests</package></attributes></class><class><name>TestSuiteTest</name><environment>SUnit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>suite </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo-Tests</package></attributes></class><class><name>ResourceA_B_A</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo-Tests</package></attributes></class><class><name>ResourceA</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo-Tests</package></attributes></class><class><name>ResourceA_B</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo-Tests</package></attributes></class><class><name>ResourceA_B_B</name><environment>SUnit</environment><super>SUnit.TestResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>SUnitToo-Tests</package></attributes></class><class><name>TaggedResourceTest</name><environment>SUnit</environment><super>SUnit.TestCase</super><private>false</private><indexed-type>none</indexed-type><inst-vars>resource </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnitTests</category><attributes><package>SUnitToo-Tests</package></attributes></class><methods><class-id>SUnit.SimpleTestResource</class-id> <category>running</category><body package="SUnitToo-Tests">setHasRanOnce	hasRanOnce := true</body><body package="SUnitToo-Tests">setRun	hasRun := true</body><body package="SUnitToo-Tests">setUp	self runningState: self startedStateSymbol.	self setSetup</body><body package="SUnitToo-Tests">startedStateSymbol	^#started</body><body package="SUnitToo-Tests">stoppedStateSymbol	^#stopped</body><body package="SUnitToo-Tests">tearDown	self runningState: self stoppedStateSymbol</body><body package="SUnitToo-Tests">unsetHasRanOnce	hasRanOnce := false</body><body package="SUnitToo-Tests">unsetRun	hasRun := false</body></methods><methods><class-id>SUnit.SimpleTestResource</class-id> <category>accessing</category><body package="SUnitToo-Tests">runningState	^runningState</body><body package="SUnitToo-Tests">runningState: aSymbol	runningState := aSymbol</body></methods><methods><class-id>SUnit.SimpleTestResource</class-id> <category>testing</category><body package="SUnitToo-Tests">hasRanOnce	^hasRanOnce</body><body package="SUnitToo-Tests">hasRun	^hasRun</body><body package="SUnitToo-Tests">hasSetup	^hasSetup</body><body package="SUnitToo-Tests">isAvailable		^self runningState == self startedStateSymbol</body><body package="SUnitToo-Tests">setSetup	hasSetup := true</body><body package="SUnitToo-Tests">unsetSetup	hasSetup := false</body></methods><methods><class-id>SUnit.SimpleTestResource class</class-id> <category>accessing</category><body package="SUnitToo-Tests">resources	"this will go circular, unless we've written it right"		^Array with: self</body></methods><methods><class-id>SUnit.ResultsTest</class-id> <category>initialize-release</category><body package="SUnitToo-Tests">setUp	theResult := Results new</body></methods><methods><class-id>SUnit.TestCaseTest</class-id> <category>tests</category><body package="SUnitToo-Tests">testAsDefinition	| case definition |	case := self makeTest: #fail.	definition := case asDefinition.	self assert: (definition isKindOf: MethodDefinition).	self assert: definition implementingClass == self class.	self assert: definition inheritingClass == self class.	self assert: definition selector == #fail</body><body package="SUnitToo-Tests">testAsDefinitionInherited	| case definition |	case := self makeTest: #yourself.	definition := case asDefinition.	self assert: (definition isKindOf: MethodDefinition).	self assert: definition implementingClass == Object.	self assert: definition inheritingClass == self class.	self assert: definition selector == #yourself</body><body package="SUnitToo-Tests">testAsMethod	| case method |	case := self makeTest: #fail.	method := case method.	self assert: (method isKindOf: CompiledMethod).	self assert: method mclass == self class.	self assert: method selector == #fail</body><body package="SUnitToo-Tests">testAssert	self assert: true.	self should: [self assert: false] raise: FailedAssertion</body><body package="SUnitToo-Tests">testAssertEquals	self assert: 1 equals: 1.	self should: [self assert: 1 equals: 2] raise: FailedAssertion</body><body package="SUnitToo-Tests">testComparison	| a b c |	a := self makeTest: #fail.	b := self makeTest: #fail.	c := self makeTest: #run.	self deny: a == b.	self assert: a = b.	self assert: a hash = b hash.	self deny: a = c.	self deny: a hash = c hash</body><body package="SUnitToo-Tests">testDeny	self deny: false.	self should: [self deny: true] raise: FailedAssertion</body><body package="SUnitToo-Tests">testErroredEvent	| capturedCase |	capturedCase := nil.	TestCase noResultsWhile: 			[self captureAnnouncements.			capturedCase := self makeTest: #error.			capturedCase run].	self assert: failed isNil.	self assert: errored asTestCase = capturedCase.	self assert: passed isNil.	self assert: canceled isNil</body><body package="SUnitToo-Tests">testFailedEvent	| capturedCase |	capturedCase := nil.	TestCase noResultsWhile: 			[self captureAnnouncements.			capturedCase := self makeTest: #fail.			capturedCase run].	self assert: failed asTestCase = capturedCase.	self assert: errored isNil.	self assert: passed isNil.	self assert: canceled isNil</body><body package="SUnitToo-Tests">testPassedEvent	| capturedCase |	capturedCase := nil.	TestCase noResultsWhile: 			[self captureAnnouncements.			capturedCase := self makeTest: #pass.			capturedCase run].	self assert: failed isNil.	self assert: errored isNil.	self assert: passed asTestCase = capturedCase.	self assert: canceled isNil</body><body package="SUnitToo-Tests">testSetUpAndTearDownFire	| case |	case := self makeTest: #error.	self deny: case didSetup == true.	self deny: case didTearDown == true.	TestCase noResultsWhile: [case run].	self assert: case didSetup.	self assert: case didTearDown</body><body package="SUnitToo-Tests">testShouldRaise	| before after |	before := after := false.	self should: 			[before := true.			1 / 0.			after := true]		raise: ZeroDivide.	self assert: before.	self deny: after</body><body package="SUnitToo-Tests">testSteppingThroughNotificationsDontCauseProblems	"while this test will pass, it is here so I can test it with the 'Step' feature"	self assert: String new readStream next isNil</body></methods><methods><class-id>SUnit.TestCaseTest</class-id> <category>accessing</category><body package="SUnitToo-Tests">canceled: aResult 	canceled := aResult</body><body package="SUnitToo-Tests">captureAnnouncements	TestCase when: Pass send: #passed: to: self.	TestCase when: SomeError send: #errored: to: self.	TestCase when: Failure send: #failed: to: self</body><body package="SUnitToo-Tests">didSetup	^didSetup</body><body package="SUnitToo-Tests">didTearDown	^didTearDown</body><body package="SUnitToo-Tests">errored: aResult 	errored := aResult</body><body package="SUnitToo-Tests">failed: aResult 	failed := aResult</body><body package="SUnitToo-Tests">passed: aResult 	passed := aResult</body></methods><methods><class-id>SUnit.TestCaseTest</class-id> <category>initialize-release</category><body package="SUnitToo-Tests">initialize	didSetup := false</body><body package="SUnitToo-Tests">setUp	didSetup := true.	didTearDown := false.	passed := failed := errored := nil</body><body package="SUnitToo-Tests">tearDown	didTearDown := true.	TestCase unsubscribe: self</body></methods><methods><class-id>SUnit.TestCaseTest</class-id> <category>test tests</category><body package="SUnitToo-Tests">debugExample	self assert: true.	self deny: true.	self assert: true</body><body package="SUnitToo-Tests">error	self __z__o__r__k__</body><body package="SUnitToo-Tests">fail	self assert: false</body><body package="SUnitToo-Tests">makeTest: aSelector 	^self class selector: aSelector</body><body package="SUnitToo-Tests">pass	self assert: true</body></methods><methods><class-id>SUnit.TestCaseTest class</class-id> <category>instance creation</category><body package="SUnitToo-Tests">new	^super new initialize</body></methods><methods><class-id>SUnit.TestResourceTest</class-id> <category>support</category><body package="SUnitToo-Tests">dummy	self assert: true</body><body package="SUnitToo-Tests">error	'foo' odd</body><body package="SUnitToo-Tests">fail	self assert: false</body><body package="SUnitToo-Tests">setRun	resource setRun</body></methods><methods><class-id>SUnit.TestResourceTest</class-id> <category>initialize-release</category><body package="SUnitToo-Tests">setUp		self class setResources: nil.	self class setTaggedResources: nil.</body></methods><methods><class-id>SUnit.TestResourceTest</class-id> <category>tests</category><body package="SUnitToo-Tests">testResourceHandlingWithUnavailableMethodLocalResourceByBindingReference	| test nonexistentResource |	test := self class selector: #unavailableMethodLocalResourceByBindingReference.	nonexistentResource := test resources detect: [:ea | ea class = UnresolvedPseudoResource] ifNone: [nil].	self assert: nonexistentResource notNil.	self assert: nonexistentResource isAvailable not.	self assert: nonexistentResource unresolved = #SimpleNonexistentTestResource.</body><body package="SUnitToo-Tests">testResourceHandlingWithUnavailableMethodLocalResourceBySymbol	| test nonexistentResource |	test := self class selector: #unavailableMethodLocalResourceBySymbol.	nonexistentResource := test resources detect: [:ea | ea class = UnresolvedPseudoResource] ifNone: [nil].	self assert: nonexistentResource notNil.	self assert: nonexistentResource isAvailable not.	self assert: nonexistentResource unresolved = #SimpleNonexistentTestResource.</body></methods><methods><class-id>SUnit.TestResourceTest class</class-id> <category>support</category><body package="SUnitToo-Tests">setResources: anObject	currentResourceSet := anObject</body><body package="SUnitToo-Tests">setTaggedResources: anObject		taggedResources := anObject</body></methods><methods><class-id>SUnit.TestResourceTest class</class-id> <category>resources</category><body package="SUnitToo-Tests">resources	^currentResourceSet ifNil: [#()]</body></methods><methods><class-id>SUnit.TestSuiteTest</class-id> <category>test tests</category><body package="SUnitToo-Tests">sampleTest1</body><body package="SUnitToo-Tests">sampleTest2</body><body package="SUnitToo-Tests">sampleTest3</body><body package="SUnitToo-Tests">sampleTest4</body><body package="SUnitToo-Tests">sampleTest5</body><body package="SUnitToo-Tests">sampleTest6</body></methods><methods><class-id>SUnit.TestSuiteTest</class-id> <category>initialize-release</category><body package="SUnitToo-Tests">setUp	suite := TestSuite new</body></methods><methods><class-id>SUnit.ResourceA class</class-id> <category>accessing</category><body package="SUnitToo-Tests">resources	^Array with: ResourceA_A with: ResourceA_B with: ResourceA_C</body></methods><methods><class-id>SUnit.ResourceA_B class</class-id> <category>accessing</category><body package="SUnitToo-Tests">resources	^Array with: ResourceA_B_A with: ResourceA_B_B</body></methods><methods><class-id>SUnit.ResultsTest</class-id> <category>tests</category><body package="SUnitToo-Tests">addError	&lt;test&gt;	theResult addError: (self class selector: #addError).	self assert: theResult errorsCount = 1.	self deny: theResult allPassed.	self assert: theResult hasErrors.	theResult addError: (self class selector: #addError).	self assert: theResult errorsCount = 1.	theResult addError: (self class selector: #testInitial).	self assert: theResult errorsCount = 2</body><body package="SUnitToo-Tests">addFail	&lt;test&gt;	theResult addFailure: (self class selector: #testAddFail).	self assert: theResult failedCount = 1.	self assert: theResult hasFailures.	self deny: theResult allPassed.	theResult addFailure: (self class selector: #testAddFail).	self assert: theResult failedCount = 1.	theResult addFailure: (self class selector: #testInitial).	self assert: theResult failedCount = 2</body><body package="SUnitToo-Tests">addPass	&lt;test&gt;	theResult addPass: (self class selector: #testAddPass).	self assert: theResult passCount = 1.	theResult addPass: (self class selector: #testAddPass).	self assert: theResult passCount = 1.	theResult addPass: (self class selector: #testInitial).	self assert: theResult passCount = 2.	self assert: theResult allPassed</body><body package="SUnitToo-Tests">initial	&lt;test&gt;	self assert: theResult passCount = 0.	self assert: theResult errorsCount = 0.	self assert: theResult failedCount = 0.	self assert: theResult ranCount = 0.	self assert: theResult allPassed.	self deny: theResult hasErrors.	self deny: theResult hasFailures</body><body package="SUnitToo-Tests">isEmpty	&lt;test&gt;	self assert: theResult isEmpty.	theResult addFailure: (self class selector: #testAddFail).	self deny: theResult isEmpty</body><body package="SUnitToo-Tests">mixedCounts	&lt;test&gt;	theResult addPass: (self class selector: #testAddPass).	theResult addFailure: (self class selector: #testAddFail).	theResult addError: (self class selector: #addError).	theResult addPass: (self class selector: #testMixedCounts).	self deny: theResult allPassed.	self assert: theResult ranCount = 4</body></methods><methods><class-id>SUnit.TestResourceTest</class-id> <category>tests</category><body package="SUnitToo-Tests">classSideResources	&lt;test&gt;	| collection |	self class		setResources: (Array with: SimpleTestResource with: AnotherResource).	collection := self resources.	self assert: collection first = SimpleTestResource.	self assert: collection last = AnotherResource</body><body package="SUnitToo-Tests">classSideResourcesByMethodTag		&lt;test&gt;	| collection |	self class setTaggedResources: (Array with: SimpleTestResource).	collection := self resources.	self assert: (collection includes: SimpleTestResource)</body><body package="SUnitToo-Tests">classSideSingleResourceByMethodTag		&lt;test&gt;	| collection |	self class setTaggedResources: SimpleTestResource.	collection := self resources.	self assert: (collection includes: SimpleTestResource)</body><body package="SUnitToo-Tests">methodLocalResourceByBindingReference	&lt;test&gt;	&lt;uses: #{SimpleTestResource}&gt;	| collection |	collection := self resources.	self assert: (collection includes: SUnit.SimpleTestResource)</body><body package="SUnitToo-Tests">methodLocaleResourceBySymbol	&lt;test&gt;	&lt;uses: #SimpleTestResource&gt;	| collection |	collection := self resources.	self assert: (collection includes: SimpleTestResource)</body><body package="SUnitToo-Tests">orderOfNestedResources	&lt;test&gt;	self class setResources: (Array with: ResourceA with: ResourceB).	self assert: self resources				= ((Array						with: ResourceA_A						with: ResourceA_B_A						with: ResourceA_B_B						with: ResourceA_B)							, (Array with: ResourceA_C with: ResourceA with: ResourceB))</body><body package="SUnitToo-Tests">resourceInitRelease		&lt;test&gt;	| suite |	resource := SimpleTestResource current.	self class setResources: (Array with: resource class).	suite := TestSuite new.	suite addTest: (self class selector: #error).	suite addTest: (self class selector: #fail).	suite addTest: (self class selector: #dummy).	TestCase noResultsWhile: [suite run].	self assert: resource hasSetup</body><body package="SUnitToo-Tests">unavailableMethodLocalResourceByBindingReference	"This test should never be run because it requires a non-existent resource.  It is used as input by	#testResourceHandlingWithUnavailableMethodLocalResourceByBindingReference."	&lt;test&gt;	&lt;uses: #{SimpleNonexistentTestResource}&gt;	self assert: false description: 'This test should never run'.</body><body package="SUnitToo-Tests">unavailableMethodLocalResourceBySymbol	"This test should never be run because it requires a non-existent resource.  It is used as input by	#testResourceHandlingWithUnavailableMethodLocalResourceByBindingReference."	&lt;test&gt;	&lt;uses: #SimpleNonexistentTestResource&gt;	self assert: false description: 'This test should never run'.</body></methods><methods><class-id>SUnit.TestResourceTest class</class-id> <category>resources</category><body package="SUnitToo-Tests">resourceByTag		&lt;resource&gt;	^taggedResources</body></methods><methods><class-id>SUnit.TestSuiteTest</class-id> <category>tests</category><body package="SUnitToo-Tests">casesDontRetain	&lt;test&gt;	| weak case |	case := self class selector: #sampleTest2.	weak := WeakArray with: case.	suite addTest: case.	ObjectMemory globalGarbageCollect.	self assert: weak first = case.	case := nil.	ObjectMemory globalGarbageCollect.	self assert: weak first = 0</body><body package="SUnitToo-Tests">randomTestCasesDo		&lt;test&gt;	| runs run |	suite		addTests:			((1 to: 6)				collect: [:n | self class selector: 'sampleTest' , n printString]).	run := OrderedCollection new.	suite runUsing: [:each | run add: each].	self assert: run size = 6.	runs := Set new.	20		timesRepeat:			[run := OrderedCollection new.			suite runUsing: [:each | run add: each].			runs add: run].	self assert: runs size &lt;= 6 factorial.	self assert: runs size &gt; 1</body><body package="SUnitToo-Tests">testCount		&lt;test&gt;	self assert: suite testCount = 0.	suite		addTests:			((1 to: 6)				collect: [:n | self class selector: 'sampleTest' , n printString]).	self assert: suite testCount = 6</body></methods><methods><class-id>SUnit.TaggedResourceTest</class-id> <category>tests</category><body package="SUnitToo-Tests">multipleClassTaggedResources	&lt;test&gt;	| collection |	collection := self resources.	self assert: collection size = 2.	self assert: (collection includes: ResourceA_B_A).	self assert: (collection includes: ResourceA_B_B).</body></methods><methods><class-id>SUnit.TaggedResourceTest class</class-id> <category>resources</category><body package="SUnitToo-Tests">resourceABA	&lt;resource&gt;	^ResourceA_B_A</body><body package="SUnitToo-Tests">resourceABB	&lt;resource&gt;	^ResourceA_B_B</body><body package="SUnitToo-Tests">resourceNil	&lt;resource&gt;	^nil</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>TestCase</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>testSelector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class><class><name>TestResource</name><environment>SUnit</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>current </class-inst-vars><imports></imports><category>SUnit</category><attributes><package>SUnitToo</package></attributes></class></st-source>