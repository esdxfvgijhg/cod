<?xml version="1.0"?><st-source><!-- Name: GF/ST Visual InspectorNotice: Copyright © 2002,2000,1999 Cincom Systems, Inc.  All Rights Reserved.Comment: This parcel provides a graphical inspector for Smalltalk objects using the GF/ST Smalltalk Graphics Framework.DbIdentifier: bear73DbTrace: 439634DbUsername: kgreekDbVersion: 8.0 - 2DevelopmentPrerequisites: #(#(#any 'GF/ST Base' ''))DialectVersion: VisualWorks 7.9PackageName: GF/ST Visual InspectorParcel: #('GF/ST Visual Inspector')ParcelName: GF/ST Visual InspectorPrerequisiteParcels: #(#('GF/ST Base' ''))PrintStringCache: (8.0 - 2,kgreek)Version: 8.0 - 2Post-Load Block: 	[:pkg| Polymorphic.PsiVisualInspector postLoadFrom: pkg ]Pre-Unload Block: 	[:pkg| Polymorphic.PsiVisualInspector preUnloadFor: pkg ]Date: 1:14:05 PM April 1, 2016 --><time-stamp>From VisualWorks®, Pre-Release 8.2 (apr16.1) of April 1, 2016 on April 1, 2016 at 1:14:05 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>PsiPrimitiveObjectGO</name><environment>Polymorphic</environment><super>Polymorphic.GFTextGO</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object refLocator </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VisualInspecting</category><attributes><package>GF/ST Visual Inspector</package></attributes></class><class><name>PsiAbstractObjectGO</name><environment>Polymorphic</environment><super>Polymorphic.GFCachedGO</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object refLocator displayPolicy </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VisualInspecting</category><attributes><package>GF/ST Visual Inspector</package></attributes></class><class><name>PsiObjectGO</name><environment>Polymorphic</environment><super>Polymorphic.PsiAbstractObjectGO</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dispFields </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VisualInspecting</category><attributes><package>GF/ST Visual Inspector</package></attributes></class><class><name>PsiVariableByteObjectGO</name><environment>Polymorphic</environment><super>Polymorphic.PsiAbstractObjectGO</super><private>false</private><indexed-type>none</indexed-type><inst-vars>radix bytes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VisualInspecting</category><attributes><package>GF/ST Visual Inspector</package></attributes></class><class><name>PsiVisualInspector</name><environment>Polymorphic</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VisualInspecting-VisualInspecting80</category><attributes><package>GF/ST Visual Inspector</package></attributes></class><class><name>PsiVariableObjectGO</name><environment>Polymorphic</environment><super>Polymorphic.PsiObjectGO</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dispIndexedFields </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VisualInspecting</category><attributes><package>GF/ST Visual Inspector</package></attributes></class><class><name>PsiObjectDrawingInterface</name><environment>Polymorphic</environment><super>Polymorphic.GFDrawingInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objects defaultConnector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VisualInspecting-VisualInspecting80</category><attributes><package>GF/ST Visual Inspector</package></attributes></class><class><name>PsiDictionaryGO</name><environment>Polymorphic</environment><super>Polymorphic.PsiObjectGO</super><private>false</private><indexed-type>none</indexed-type><inst-vars>stringFieldMap </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VisualInspecting</category><attributes><package>GF/ST Visual Inspector</package></attributes></class><class><name>PsiOrderedCollectionGO</name><environment>Polymorphic</environment><super>Polymorphic.PsiObjectGO</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VisualInspecting</category><attributes><package>GF/ST Visual Inspector</package></attributes></class><class><name>PsiBorderHighlightHandle</name><environment>Polymorphic</environment><super>Polymorphic.GFHandle</super><private>false</private><indexed-type>none</indexed-type><inst-vars>extent color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VisualInspecting</category><attributes><package>GF/ST Visual Inspector</package></attributes></class><class><name>PsiObjectReferenceHandle</name><environment>Polymorphic</environment><super>Polymorphic.GFHandle</super><private>false</private><indexed-type>none</indexed-type><inst-vars>connector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VisualInspecting</category><attributes><package>GF/ST Visual Inspector</package></attributes></class><shared-variable><name>RemoveFieldGO</name><environment>Polymorphic.PsiAbstractObjectGO</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>GF/ST Visual Inspector</package></attributes></shared-variable><shared-variable><name>ShowNonNilGO</name><environment>Polymorphic.PsiAbstractObjectGO</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>GF/ST Visual Inspector</package></attributes></shared-variable><shared-variable><name>ShowAllGO</name><environment>Polymorphic.PsiAbstractObjectGO</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>GF/ST Visual Inspector</package></attributes></shared-variable><shared-variable><name>RemoveAllGO</name><environment>Polymorphic.PsiAbstractObjectGO</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>GF/ST Visual Inspector</package></attributes></shared-variable><shared-variable><name>SelectionColor</name><environment>Polymorphic.PsiAbstractObjectGO</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>GF/ST Visual Inspector</package></attributes></shared-variable><shared-variable><name>DisplayFont</name><environment>Polymorphic.PsiAbstractObjectGO</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>GF/ST Visual Inspector</package></attributes></shared-variable><methods><class-id>Polymorphic.PsiPrimitiveObjectGO</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">connectionPosition"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Return the position that a connection should be connected to me."	^self refLocator asPoint</body><body package="GF/ST Visual Inspector">defaultHandles"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Answer the default handles of the receiver"	^Array with: self selectionHandle</body><body package="GF/ST Visual Inspector">displayFont	^PsiAbstractObjectGO displayFont</body><body package="GF/ST Visual Inspector">font"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	font == nil ifFalse: [^super font].	^PsiAbstractObjectGO displayFont</body><body package="GF/ST Visual Inspector">initialize"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	super initialize.    refLocator := GFLocator on: self at: #topLeft.</body><body package="GF/ST Visual Inspector">isPsiObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^true</body><body package="GF/ST Visual Inspector">isPsiPrimitiveObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^true</body><body package="GF/ST Visual Inspector">menu    | menu |    (menu := self triggerEvent: #getMenu) == nil ifFalse: [^menu].	^Menu new		addItemLabel: '&amp;Edit Font...'  value: (self class gfMessageClass receiver: self selector: #promptForFont);		addItemLabel: '&amp;Line Color...'  value: (self class gfMessageClass receiver: self selector: #choosePathColor);		addItemGroupLabels: (Array with: 'Delete')  values: (Array with: (self class gfMessageClass receiver: self selector: #removeFromInterface));		yourself</body><body package="GF/ST Visual Inspector">object"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^object</body><body package="GF/ST Visual Inspector">quietlyRemoveFromInterface"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"        self interface quietlyRemovePrimitiveGO: self.</body><body package="GF/ST Visual Inspector">refLocator"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^refLocator</body><body package="GF/ST Visual Inspector">removeFromInterface"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"        self interface removePrimitiveGO: self.</body><body package="GF/ST Visual Inspector">selectionHandle"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^(PsiBorderHighlightHandle on: self at: #offOrigin: with: 0@0)		setExtent;		color: (self class gfMessageClass receiver: PsiAbstractObjectGO selector: #selectionColor).</body><body package="GF/ST Visual Inspector">setObject: anObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	object := anObject.	self text: anObject psiPrimitiveObjectString.</body><body package="GF/ST Visual Inspector">shouldRemove"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^object == nil or: [object == true or: [object == false]]</body><body package="GF/ST Visual Inspector">text: aString	super text: aString.	font := self displayFont.	self guessExtent.</body><body package="GF/ST Visual Inspector">transformHandlesToArrows"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"</body><body package="GF/ST Visual Inspector">transformHandlesToLines"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"</body><body package="GF/ST Visual Inspector">transformHandlesToOrthoArrows"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"</body><body package="GF/ST Visual Inspector">transformHandlesToOrthoPaths"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"</body><body package="GF/ST Visual Inspector">updateConnections"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	"Default is to do nothing"</body></methods><methods><class-id>Polymorphic.PsiPrimitiveObjectGO class</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">object: anObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^self new setObject: anObject</body></methods><methods><class-id>Polymorphic.PsiAbstractObjectGO</class-id> <category>GF/ST</category><body package="GF/ST Visual Inspector">allFieldHandles"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^#()</body><body package="GF/ST Visual Inspector">appendStandardMenuItems: menu    menu        addItemLabel: 'Delete'  value: (self class gfMessageClass receiver: self selector: #removeFromInterface)</body><body package="GF/ST Visual Inspector">basicInspectObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	object basicInspect</body><body package="GF/ST Visual Inspector">browseObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	object browse</body><body package="GF/ST Visual Inspector">connectionPosition"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Return the position that a connection should be connected to me."	^self refLocator asPoint</body><body package="GF/ST Visual Inspector">deletionHandle"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| interface |	interface := self interface.	^(GFHandle on: self at: #offTopLeft: with: 4@4)		displayImage: self class removeFieldGO;		releaseAction: [self removeFromInterface.								interface redraw. ]</body><body package="GF/ST Visual Inspector">deselect"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"     self removeActionsSatisfying: [:event |		(event respondsTo: #receiver) and: [ 			(event receiver class = PsiBorderHighlightHandle) and: [				event selector == #setExtent]]	] forEvent: #damaged</body><body package="GF/ST Visual Inspector">displayFont	^self class displayFont</body><body package="GF/ST Visual Inspector">displayHidden	| area| 	area := 0@0 corner: 20@20.	cache := Pixmap extent: area extent. 	cache pen fill: Color buttonFace. 	self transformFieldHandlesTo: area center.	cache pen drawOutRect3D: area.	self makeCacheScalable.	self transformHandlesToArrows.</body><body package="GF/ST Visual Inspector">displayMenu	| menu titleMenu|	menu := Menu new.	menu  		addItemLabel: '&amp;Collapsed'  value: (self class gfMessageClass receiver: self selector: #setDisplayToHidden);		addItemLabel: '&amp;As String'  value: (self class gfMessageClass receiver: self selector: #setDisplayToString); 		addItemLabel: '&amp;Full'  value: (self class gfMessageClass receiver: self selector: #setDisplayToFull). 	titleMenu := 		(Menu new			addItemLabel: '&amp;Set Title...'  value: (self class gfMessageClass receiver: self selector: #setTitle);			addItemLabel: '&amp;Print String'  value: (self class gfMessageClass receiver: self selector: #setTitleToPrintString);			addItemLabel: '&amp;Class Name'  value: (self class gfMessageClass receiver: self selector: #setTitleToClassName);			yourself			).	menu addItem: ((MenuItem labeled: '&amp;Title') submenu: titleMenu).	displayPolicy = #displayFull ifTrue: [		(menu menuItemAt: 3) disable.	].	displayPolicy = #displayHidden ifTrue: [		(menu menuItemAt: 1) beOn.		(menu menuItemAt: 4) disable.	].	displayPolicy = #displayString ifTrue: [		(menu menuItemAt: 2) beOn.		(menu menuItemAt: 4) disable.	].	^menu</body><body package="GF/ST Visual Inspector">displayString	| proto title area|	title := object printString. 	proto := self prototype: (self maxWidthOf: #() title: title).	area := self totalArea: #() prototype: proto.	cache := Pixmap extent: area extent. 	cache pen fill: Color buttonFace. 	self transformFieldHandlesTo: proto rightCenter.	self displayTitle: title prototype: proto.	cache pen drawOutRect3D: area.	self makeCacheScalable</body><body package="GF/ST Visual Inspector">displayTitle: aString prototype: proto	| pen |	pen := cache pen.	self displayFont installOn: pen.    pen        setForeColorTo: Color black;        setFillColorTo: Color buttonFace;        displayString: aString at: proto origin + (3@(proto height  //2)).    proto translatedByPoint: 0 @ proto height.</body><body package="GF/ST Visual Inspector">fillCache"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	self perform: displayPolicy.</body><body package="GF/ST Visual Inspector">implementationFont	^Screen default defaultFontPolicy findFont: self displayFont</body><body package="GF/ST Visual Inspector">initialize"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    super initialize.    refLocator := GFLocator on: self at: #topLeft.	displayPolicy := #displayFull.</body><body package="GF/ST Visual Inspector">inspectObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	object inspect</body><body package="GF/ST Visual Inspector">isPsiObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^true</body><body package="GF/ST Visual Inspector">isPsiPrimitiveObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^false</body><body package="GF/ST Visual Inspector">maxWidthOf: fields title: title	| max padding font |	padding := 8.	max := 0. 	font := self implementationFont.	fields do: [:each |		max := max max: (font stringWidth: each asString). 	].	^(max max: (font stringWidth: title asString)) + padding</body><body package="GF/ST Visual Inspector">object"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    ^object</body><body package="GF/ST Visual Inspector">openMenu	| menu |	menu := Menu new.    menu        addItemLabel: 'Visual Inspector'  value: (self class gfMessageClass receiver: self selector: #visualInspectObject);        addItemLabel: 'Standard Inspector'  value: (self class gfMessageClass receiver: self selector: #inspectObject);        addItemLabel: 'Basic Inspector'  value: (self class gfMessageClass receiver: self selector: #basicInspectObject);        addItemLabel: 'Class Browser'  value: (self class gfMessageClass receiver: self selector: #browseObject).	^menu</body><body package="GF/ST Visual Inspector">prototype: width    ^5@5 extent: (width max: 20)@self implementationFont height + 4</body><body package="GF/ST Visual Inspector">quietlyRemoveFromInterface"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    self interface quietlyRemoveObject: object.</body><body package="GF/ST Visual Inspector">refLocator"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    ^refLocator</body><body package="GF/ST Visual Inspector">removeFromInterface"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    self interface removeObject: object.</body><body package="GF/ST Visual Inspector">select"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"The receiver has been selected"	super select.	self moveToLast.</body><body package="GF/ST Visual Inspector">selectionHandle"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^(PsiBorderHighlightHandle on: self at: #offOrigin: with: 0@0)		setExtent;		color: (self class gfMessageClass receiver: PsiAbstractObjectGO selector: #selectionColor).</body><body package="GF/ST Visual Inspector">setDisplayToFull"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| selected |	displayPolicy := #displayFull.	(selected := (self interface selections includes: self)) 		ifTrue: [ self interface quietlyRemoveHandlesFor: self ].	self damageDuring: [self damageCache].	selected ifTrue: [ self interface addHandlesFor: self ].</body><body package="GF/ST Visual Inspector">setDisplayToHidden"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| selected |	displayPolicy := #displayHidden.	(selected := (self interface selections includes: self)) 		ifTrue: [ self interface quietlyRemoveHandlesFor: self ].	self damageDuring: [self damageCache].	selected ifTrue: [ self interface addHandlesFor: self ].</body><body package="GF/ST Visual Inspector">setDisplayToString"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| selected |	displayPolicy := #displayString.	(selected := (self interface selections includes: self)) 		ifTrue: [ self interface quietlyRemoveHandlesFor: self ].	self damageDuring: [self damageCache].	selected ifTrue: [ self interface addHandlesFor: self ].</body><body package="GF/ST Visual Inspector">setObject: anObject origin: aPoint"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    object := anObject.    self origin: aPoint.</body><body package="GF/ST Visual Inspector">setTitle"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| title |	title := self class gfPrompterClass prompt: 'Enter title: ' default: self title.	(title == nil or: [title isEmpty]) ifTrue: [^self].	self title: title.</body><body package="GF/ST Visual Inspector">setTitleToClassName"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	self title: object class name.</body><body package="GF/ST Visual Inspector">setTitleToPrintString"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	self title: object printString.</body><body package="GF/ST Visual Inspector">shouldRemove"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^false</body><body package="GF/ST Visual Inspector">standardMenu"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Answer the standard menu of the receiver"	| menu |	(menu := Menu new).	menu 		addItem: ((MenuItem labeled: '&amp;Display') submenu: self displayMenu);		addItem: ((MenuItem labeled: '&amp;Open') submenu: self openMenu).	self appendStandardMenuItems: menu.	^menu</body><body package="GF/ST Visual Inspector">title"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| title |	(title := self triggerEvent: #getTitle) == nil ifTrue: [		title := object class name.	].	^title</body><body package="GF/ST Visual Inspector">title: aString"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| selected |	displayPolicy := #displayFull.	self removeActionsForEvent: #getTitle.	self when: #getTitle send: #yourself to: aString. 	(selected := (self interface selections includes: self)) 		ifTrue: [ self interface quietlyRemoveHandlesFor: self ].	self damageDuring: [self damageCache].	selected ifTrue: [ self interface addHandlesFor: self ].	self redraw</body><body package="GF/ST Visual Inspector">totalArea: fields prototype: proto"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| size |	size := fields isEmpty ifTrue: [1] ifFalse: [fields size + 1].	^(0@0 extent: (proto width @ (size * proto height)) + (14@9))</body><body package="GF/ST Visual Inspector">transformFieldHandlesTo: aPoint"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^self subclassResponsibility</body><body package="GF/ST Visual Inspector">transformHandlesToArrows"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	self allFieldHandles do: [:each |		each becomeDependentArrow	].</body><body package="GF/ST Visual Inspector">transformHandlesToLines"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	self allFieldHandles do: [:each |		each becomeDependentLine	].</body><body package="GF/ST Visual Inspector">transformHandlesToOrthoArrows"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	self allFieldHandles do: [:each |		each becomeDependentOrthogonalArrow	].</body><body package="GF/ST Visual Inspector">transformHandlesToOrthoPaths"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	self allFieldHandles do: [:each |		each becomeDependentOrthogonalPath	].</body><body package="GF/ST Visual Inspector">updateConnections"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	"Default is to do nothing"</body><body package="GF/ST Visual Inspector">visualInspectObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	object psiVisualInspect</body></methods><methods><class-id>Polymorphic.PsiAbstractObjectGO</class-id> <category>scaling</category><body package="GF/ST Visual Inspector">extent"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    "Answer the extent of the display area of the receiver"    cache isNil ifTrue: [self fillCache].    ^self unscaledExtent</body><body package="GF/ST Visual Inspector">makeCacheScalable	cache := GFScalingImage sourceImage: cache asImage scale: 1</body><body package="GF/ST Visual Inspector">unscaledExtent	^cache unscaledExtent</body></methods><methods><class-id>Polymorphic.PsiAbstractObjectGO class</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">displayFont"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    ^DisplayFont == nil 		ifTrue: [ Screen default defaultFontPolicy defaultFont fontDescription copy name: nil ]		ifFalse: [ DisplayFont ]</body><body package="GF/ST Visual Inspector">displayFont: aFont"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	DisplayFont := aFont</body><body package="GF/ST Visual Inspector">eventsTriggered"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Answer the events triggered"    eventsTriggered isNil ifTrue: [        (eventsTriggered := Set new)            addAll: self superclass eventsTriggered;            add: #getTitle.    ].    ^eventsTriggered</body><body package="GF/ST Visual Inspector">initialize	"PsiAbstractObjectGO initialize"	RemoveAllGO := (GFPolylineGO withPoints: (Array with: 0@3 with: 3@0 with: 6@3)) width: 2.	RemoveFieldGO := self makeRemoveFieldGO.	ShowAllGO := (GFPolylineGO withPoints: (Array with: 0@0 with: 3@3 with: 6@0)) width: 2.	ShowNonNilGO := self makeShowNonNilGO</body><body package="GF/ST Visual Inspector">initializeFontAndColor	"PsiAbstractObjectGO initializeFontAndColor"	DisplayFont := nil.	SelectionColor := Color red.</body><body package="GF/ST Visual Inspector">makeRemoveFieldGO "Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| line1 line2 comp |	line1 := (GFLineGO start: 0@1 stop: 5@6) color: self selectionColor.	line2 := (GFLineGO start: 0@6 stop: 5@1) color: self selectionColor.	comp := GFCompositeGO graphicObjects: (Array with: line1 with: line2).	comp hideVisibleAreaIndicator.	^comp</body><body package="GF/ST Visual Inspector">makeShowNonNilGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| circle color line comp |	circle := (GFEllipseGO new        width: 1        color: (color := RGBColor red)        fillColor: nil)        setEllipse: (0@0 extent: 6@6).	line := GFLineGO start: 2@2 stop: 4@4.	line color: color.	comp := GFCompositeGO graphicObjects: (Array with: line with: circle).	comp hideVisibleAreaIndicator.	^comp</body><body package="GF/ST Visual Inspector">new"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    ^super new initialize</body><body package="GF/ST Visual Inspector">object: anObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"        ^self new setObject: anObject origin: 0@0</body><body package="GF/ST Visual Inspector">object: anObject at: aPoint"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"        ^self new setObject: anObject origin: aPoint</body><body package="GF/ST Visual Inspector">removeAllGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^RemoveAllGO</body><body package="GF/ST Visual Inspector">removeFieldGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^RemoveFieldGO</body><body package="GF/ST Visual Inspector">selectionColor"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"		^SelectionColor</body><body package="GF/ST Visual Inspector">selectionColor: aColor"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"		SelectionColor := aColor.	RemoveFieldGO isNil ifTrue: [^self].	RemoveFieldGO graphicObjects do: [:each |		each color: self selectionColor.	].</body><body package="GF/ST Visual Inspector">showAllGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^ShowAllGO</body><body package="GF/ST Visual Inspector">showNonNilGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^ShowNonNilGO</body></methods><methods><class-id>Polymorphic.PsiObjectGO</class-id> <category>GF/ST</category><body package="GF/ST Visual Inspector">addField: field"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| refGO handle selected |	self interface hideHandlesWhile: [		(selected := (self interface selections includes: self)) 			ifTrue: [ self interface quietlyRemoveHandlesFor: self ].		handle := self addFieldHandle: field.		self damageDuring: [			self damageCache; fillCache.		].		(refGO := (self interface objectGOFor: (self fieldValue: field))) == nil ifFalse: [			handle addConnectionTo: refGO in: self interface.		].		selected ifTrue: [ self interface addHandlesFor: self ].		self redraw	].</body><body package="GF/ST Visual Inspector">addFieldAction: field"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^Message new		receiver: self;		selector: #addField:;		arguments: (Array with: field);		yourself</body><body package="GF/ST Visual Inspector">addFieldHandle: field"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| handle |	dispFields at: field put: (handle := PsiObjectReferenceHandle on: self at: #offTopLeft: with: 0@0).	(self interface isSelected: self) ifTrue: [		self interface addHandleNoUpdate: handle.	].	^handle</body><body package="GF/ST Visual Inspector">allDisplayedFields"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^dispFields keys asSortedCollection</body><body package="GF/ST Visual Inspector">allFieldHandles"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^dispFields values</body><body package="GF/ST Visual Inspector">allFieldNames"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^object class allInstVarNames</body><body package="GF/ST Visual Inspector">appendRemoveFieldActionsTo: aMenu	self allDisplayedFields asSortedCollection do: [:each |		aMenu addItemLabel: each asString value: (MessageSend receiver: self selector: #removeField: arguments: (Array with: each)).	].</body><body package="GF/ST Visual Inspector">appendShowFieldActionsTo: aMenu	self availableFieldNames do: [:each |		aMenu addItemLabel: each asString value: (MessageSend receiver: self selector: #addField: arguments: (Array with: each)).	].</body><body package="GF/ST Visual Inspector">availableFieldNames"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    ^self allFieldNames asOrderedCollection removeAll: self allDisplayedFields; yourself</body><body package="GF/ST Visual Inspector">controlHandles"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| handles |	handles := OrderedCollection new.		self availableFieldNames size = 0 ifFalse: [handles add: self showAllHandle].	self isShowingFields ifTrue: [handles add: self removeAllHandle ].	handles add: self showNonNilHandle.	^handles</body><body package="GF/ST Visual Inspector">defaultHandles"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Answer the default handles of the receiver"	displayPolicy = #displayFull ifFalse: [ 		^Array 			with: self selectionHandle			with: self deletionHandle	].	 ^OrderedCollection new		add: self selectionHandle;		add: self deletionHandle;		addAll: dispFields values asArray;		addAll: self controlHandles;		addAll: self deleteFieldHandles;		yourself</body><body package="GF/ST Visual Inspector">deleteField: field"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	(dispFields at: field) deleteIn: self interface.	dispFields removeKey: field.	self damageDuring: [self damageCache]</body><body package="GF/ST Visual Inspector">deleteFieldHandles"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| handle fields handles |	handles := OrderedCollection  new.	fields := self allDisplayedFields.	fields do: [ :field | 			handle := GFHandle on: self at: #locateField: with: field.			handle releaseAction: (self class gfMessageClass receiver: self selector: #removeField: arguments: (Array with: field)).			handle displayImage: self class removeFieldGO.			handles add: handle].	^handles</body><body package="GF/ST Visual Inspector">displayAllFields"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| refGO handle displayed |	displayed := self allDisplayedFields.	self allFieldNames do: [:field |		(displayed includes: field) ifFalse: [			handle := self addFieldHandle: field.	    	(refGO := (self interface objectGOFor: (self fieldValue: field))) == nil ifFalse: [	        	handle addConnectionTo: refGO in: self interface.    	]].	].</body><body package="GF/ST Visual Inspector">displayAllNonNilFields"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| refGO handle displayed |	displayed := self allDisplayedFields.	self nonNilFieldNames do: [:field |		(displayed includes: field) ifFalse: [	    	handle := self addFieldHandle: field.    		(refGO := (self interface objectGOFor: (self fieldValue: field))) == nil ifFalse: [        		handle addConnectionTo: refGO in: self interface.    		]].	].</body><body package="GF/ST Visual Inspector">displayField: field prototype: proto	| pen |	pen := cache pen.	self displayFont installOn: pen.    pen        setForeColorTo: Color black;        "centerText: field asString at: (proto center down: 2)"		displayStringCentered: field asString offsetBy: (0@(proto center y + 4)).    (dispFields at: field) updateOffset: proto rightCenter.</body><body package="GF/ST Visual Inspector">displayFields: fields prototype: proto 	fields isEmpty ifTrue: [^self].     1 to: fields size - 1 do: [:i |		self displayField: (fields at: i) prototype: proto.    	cache pen displayLineFrom: proto bottomLeft to: proto rightBottom.		proto translatedByPoint: 0 @ proto height.    ].     self displayField: fields last prototype: proto.	proto translatedByPoint: 0 @ proto height.</body><body package="GF/ST Visual Inspector">displayFull    | fields title  proto outArea inArea|	fields := self allDisplayedFields.    title := self title.    proto := self prototype: (self maxWidthOf: fields title: title).	outArea := self totalArea: fields prototype: proto.    cache := Pixmap extent: outArea extent.    cache pen fill: Color buttonFace.     inArea := Rectangle leftTop: (proto bottomLeft rightAndDown: 1@4) rightBottom: (proto rightBottom x + 2) @ (fields size + 1 * proto height + 3).	inArea := inArea expandBy: 2@2.    self displayTitle: title prototype: proto.    self displayFields: fields prototype: proto.    cache pen drawOutRect3D: outArea.    fields isEmpty ifFalse: [ cache pen drawInRect3D: inArea ].	self makeCacheScalable</body><body package="GF/ST Visual Inspector">fieldHandle: field"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^dispFields at: field</body><body package="GF/ST Visual Inspector">fieldValue: aField"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^aField psiFieldValueOf: object</body><body package="GF/ST Visual Inspector">fieldsAvailable"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^self availableFieldNames isEmpty not</body><body package="GF/ST Visual Inspector">initialize"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    super initialize.    dispFields := Dictionary new.</body><body package="GF/ST Visual Inspector">isShowingFields"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^dispFields isEmpty not</body><body package="GF/ST Visual Inspector">isValidField: field"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^(self allFieldNames includes: field)</body><body package="GF/ST Visual Inspector">locateField: field"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^((self origin x) @ (self fieldHandle: field) displayBox top ) rightAndDown: (8@2)</body><body package="GF/ST Visual Inspector">nonNilFieldNames"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    ^self allFieldNames reject: [:each | 		(self fieldValue: each) == nil	]</body><body package="GF/ST Visual Inspector">objectReferenceBy: aHandle"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    ^self fieldValue: (dispFields keyAtValue: aHandle)</body><body package="GF/ST Visual Inspector">pathMenu    ^self interface pathMenu</body><body package="GF/ST Visual Inspector">removeAllDisplayedFields "Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"  	dispFields keys do: [:field |    	(dispFields at: field) deleteIn: self interface.  		dispFields removeKey: field. 	].</body><body package="GF/ST Visual Inspector">removeAllFields"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved" 	| selected |	(selected := (self interface selections includes: self)) 		ifTrue: [ self interface quietlyRemoveHandlesFor: self ].	self removeAllDisplayedFields.	selected ifTrue: [ self interface addHandlesFor: self ].	self damageDuring: [		self damageCache; fillCache.	].	self redraw</body><body package="GF/ST Visual Inspector">removeAllHandle	^(GFHandle on: self								at: #offOrigin:								with: (((self extent x //2) - 7) @ ( self implementationFont height + 4 )))			displayImage: (self class removeAllGO);			releaseAction: [ self removeAllFields.										self interface selection: self ];			yourself</body><body package="GF/ST Visual Inspector">removeAllNilFields "Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"  	self allDisplayedFields do: [:field |		(self fieldValue: field) == nil ifTrue: [ 			self removeFieldHandle: field.		].	].</body><body package="GF/ST Visual Inspector">removeField: field"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| selected |	self interface hideHandlesWhile: [		(selected := (self interface selections includes: self)) 			ifTrue: [ self interface quietlyRemoveHandlesFor: self ].		self removeFieldHandle: field.    		self damageDuring: [			self damageCache; fillCache.		].		selected ifTrue: [ self interface addHandlesFor: self ].		self redraw	].</body><body package="GF/ST Visual Inspector">removeFieldHandle: field"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"     (dispFields at: field) deleteIn: self interface.    dispFields removeKey: field.</body><body package="GF/ST Visual Inspector">removeFromInterface"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| interface |	interface := self interface.	self allFieldHandles do: [:each |		each deleteIn: interface.	].		super removeFromInterface</body><body package="GF/ST Visual Inspector">removeMenu	| menu |		menu := Menu new.	self allDisplayedFields do: [:each |		menu addItemLabel: each asString value: (MessageSend receiver: self selector: #removeField: arguments: (Array with: each)).	].	^menu</body><body package="GF/ST Visual Inspector">resetConnector: go"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    self allFieldHandles do: [:h |		h connector == go ifTrue: [ h resetConnector ]	]</body><body package="GF/ST Visual Inspector">select"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"The receiver has been selected"	super select.	self allFieldHandles do: [ :field | 		field connector == nil ifFalse: [ (field connector) moveToLast; willDamage ]	].</body><body package="GF/ST Visual Inspector">setField: field toValue: aValue"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	field psiFieldOf: object setValue: aValue</body><body package="GF/ST Visual Inspector">setReference: aRefHandle to: aGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	self setField: (dispFields keyAtValue: aRefHandle) toValue: aGO object</body><body package="GF/ST Visual Inspector">showAllFields"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| selected | 	self interface hideHandlesWhile: [		(selected := (self interface selections includes: self)) 			ifTrue: [ self interface quietlyRemoveHandlesFor: self ].   		self displayAllFields.		self damageDuring: [	   		self damageCache; fillCache.  		].		selected ifTrue: [ self interface addHandlesFor: self ]. 		self redraw.	].</body><body package="GF/ST Visual Inspector">showAllHandle	^(GFHandle on: self								at: #offOrigin:								with: (((self extent x //2) + 3) @ ( self implementationFont height + 4 )))			displayImage: (self class showAllGO);			releaseAction: [ self showAllFields ];			yourself</body><body package="GF/ST Visual Inspector">showMenu 	| showMenu fieldMenu fieldMenuItem |	showMenu := Menu new.	showMenu		addItemLabel: 'None'  value: (self class gfMessageClass receiver: self selector: #removeAllFields);		addItemLabel: 'Non-Nil'  value: (self class gfMessageClass receiver: self selector: #showNonNilFields);		addItemLabel: 'Connected'  value: (self class gfMessageClass receiver: self selector: #showReferencedFields);		addItemLabel: 'All'  value: (self class gfMessageClass receiver: self selector: #showAllFields).	fieldMenuItem := MenuItem labeled: 'Specific'.	fieldMenu := Menu new.	self appendShowFieldActionsTo: fieldMenu.	showMenu addItemGroup: (Array with: (fieldMenuItem submenu: fieldMenu)). 	self fieldsAvailable ifFalse: [		fieldMenuItem disable.	].	^showMenu</body><body package="GF/ST Visual Inspector">showNonNilFields"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved" 	| selected |	self interface hideHandlesWhile: [		(selected := (self interface selections includes: self)) 			ifTrue: [ self interface quietlyRemoveHandlesFor: self ].		self 			removeAllNilFields;			displayAllNonNilFields.		self damageDuring: [			self damageCache; fillCache.		].		selected ifTrue: [ self interface addHandlesFor: self ].   		self redraw.	].</body><body package="GF/ST Visual Inspector">showNonNilHandle	^(GFHandle on: self								at: #offOrigin:								with: (((self extent x //2) - 15 ) @ ( self implementationFont height + 5 )))			displayImage: (self class showNonNilGO);			releaseAction: [ self showNonNilFields ];			yourself</body><body package="GF/ST Visual Inspector">showReferencedFields"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved" 	| selected |		self interface hideHandlesWhile: [		(selected := (self interface selections includes: self)) 			ifTrue: [ self interface quietlyRemoveHandlesFor: self ].		self allDisplayedFields do: [:each |			(self fieldHandle: each) isReferenced ifFalse: [				self removeFieldHandle: each			].		].		self damageDuring: [			self damageCache; fillCache.		].		selected ifTrue: [ self interface addHandlesFor: self ].		self redraw.	].</body><body package="GF/ST Visual Inspector">standardMenu"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Answer the standard menu of the receiver"	| menu pathItem removeItem showItem |	menu := super standardMenu.	pathItem := ((MenuItem labeled: 'Paths') submenu: self pathMenu).	removeItem := ((MenuItem labeled: 'Remove Field') submenu: self removeMenu).	showItem := ((MenuItem labeled: 'Show Fields') submenu: self showMenu).	(displayPolicy = #displayFull or: [self isShowingFields]) 		ifTrue: [ menu addItemGroup: (Array with: pathItem) ]		ifFalse: [ menu addItem: pathItem ].	menu addItem: removeItem. 	menu addItem: showItem.	self isShowingFields 		ifFalse: [			pathItem disable.			removeItem disable.		]. 	^menu</body><body package="GF/ST Visual Inspector">transformFieldHandlesTo: aPoint"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	self allFieldHandles do: [:each |		each updateOffset: aPoint	].</body><body package="GF/ST Visual Inspector">unscaledExtent	^cache unscaledExtent</body><body package="GF/ST Visual Inspector">updateConnections"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	self allFieldNames do: [:each |		(self isValidField: each) ifFalse: [			self deleteField: each		].	].	dispFields do: [:each |		each updateConnection	].</body></methods><methods><class-id>Polymorphic.PsiVariableByteObjectGO</class-id> <category>GF/ST</category><body package="GF/ST Visual Inspector">bytes: anInteger"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	bytes := anInteger.	self damageDuring: [self damageCache].</body><body package="GF/ST Visual Inspector">bytesDisplayMenu	| menu checked |	menu := Menu new		addItemLabel: '&amp;1' value: (MessageSend receiver: self selector: #bytes: arguments: (Array with: 1));		addItemLabel: '&amp;2' value: (MessageSend receiver: self selector: #bytes: arguments: (Array with: 2));		addItemLabel: '&amp;4' value: (MessageSend receiver: self selector: #bytes: arguments: (Array with: 4)).	checked := menu menuItemWithValue: radix ifNone: [nil].	checked == nil ifFalse: [ checked beOn ].	^menu</body><body package="GF/ST Visual Inspector">defaultHandles"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Answer the default handles of the receiver"	 	^OrderedCollection new		add: self selectionHandle;		add: self deletionHandle;		yourself.</body><body package="GF/ST Visual Inspector">displayBinary"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^object dumpStringBase: 2 bytes: bytes.</body><body package="GF/ST Visual Inspector">displayCharacter"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^object asString</body><body package="GF/ST Visual Inspector">displayDecimal"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^object dumpStringBase: 10 bytes: bytes.</body><body package="GF/ST Visual Inspector">displayHexadecimal"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^object dumpStringBase: 16 bytes: bytes.</body><body package="GF/ST Visual Inspector">displayMenu"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved" 	"title = 'Display' "	| menu checked bytesMenu |	(menu := Menu new)        addItemLabel: '&amp;Binary' value: (MessageSend receiver: self selector: #radix: arguments: (Array with: #displayBinary));        addItemLabel: '&amp;Octal' value: (MessageSend receiver: self selector: #radix: arguments: (Array with: #displayOctal));        addItemLabel: '&amp;Decimal' value: (MessageSend receiver: self selector: #radix: arguments: (Array with: #displayDecimal));        addItemLabel: '&amp;Hexadecimal' value: (MessageSend receiver: self selector: #radix: arguments: (Array with: #displayHexadecimal));		addItemLabel: '&amp;Character' value: (MessageSend receiver: self selector: #radix: arguments: (Array with: #displayCharacter)).	checked := menu menuItemWithValue: radix ifNone: [nil].	checked == nil ifFalse: [ checked beOn ].	bytesMenu := MenuItem labeled: 'Bytes'.	bytesMenu submenu: self bytesDisplayMenu.	menu addItem: bytesMenu.	radix = #displayCharacter ifTrue: [		bytesMenu disable.	].	^menu</body><body package="GF/ST Visual Inspector">displayOctal"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^object dumpStringBase: 8 bytes: bytes.</body><body package="GF/ST Visual Inspector">fillCache	| string stream extent pen |	string :=  self perform: radix.	cache := Pixmap extent: (extent := self lineCount: string).	stream := ReadStream on: string.	self displayFont installOn: (pen := cache pen).	pen		fill: Color buttonFace;		setFillColorTo: Color buttonFace;		setForeColorTo: Color black;		displayString: stream nextLine at: (4@(pen font height + 2)).	pen drawOutRect3D: (0@0 extent: extent).	self makeCacheScalable</body><body package="GF/ST Visual Inspector">initialize"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	super initialize.	radix := #displayHexadecimal.	bytes := 1.</body><body package="GF/ST Visual Inspector">lineCount: aString	| stream lines font |	stream := ReadStream on: aString.	lines := 0@0.	font := self implementationFont.	[stream atEnd] whileFalse: [		lines y:  lines y + 1.		lines x: (lines x max: (font stringWidth: stream nextLine)).	].	lines 		x: lines x + 10;		y: lines y * font height+ 10.	^lines</body><body package="GF/ST Visual Inspector">radix: aSymbol"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	radix := aSymbol.	self damageDuring: [self damageCache].</body><body package="GF/ST Visual Inspector">setObject: anObject origin: aPoint"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	super setObject: anObject origin: aPoint.	anObject isString ifTrue: [		radix := #displayCharacter	].</body></methods><methods><class-id>Polymorphic.PsiVisualInspector</class-id> <category>Drag Drop</category><body package="GF/ST Visual Inspector">allowDropFrom: context	^true</body><body package="GF/ST Visual Inspector">dragObjOver: context	^(self allowDropFrom: context)		ifTrue: [ #dropEffectMove ]		ifFalse: [ #dropEffectNone ].</body><body package="GF/ST Visual Inspector">objectDrop: context	(self allowDropFrom: context)		ifFalse: [ ^#dropEffectNone ].	self interface 		addObject: 			(context sourceData clientData at: #PsiDD				ifAbsent: [ context sourceData clientData at: context sourceData clientData keys asOrderedCollection first])</body></methods><methods><class-id>Polymorphic.PsiVisualInspector</class-id> <category>aspects</category><body package="GF/ST Visual Inspector">gfView	^GFDrawingPane forInterface: self interface</body><body package="GF/ST Visual Inspector">interface	interface isNil ifTrue: [ interface := PsiObjectDrawingInterface newWithDrawing ].	^interface</body></methods><methods><class-id>Polymorphic.PsiVisualInspector</class-id> <category>initialize-release</category><body package="GF/ST Visual Inspector">changeRequest	interface release.	^true.</body></methods><methods><class-id>Polymorphic.PsiVisualInspector</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">addObject: anObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    interface addObject: anObject</body></methods><methods><class-id>Polymorphic.PsiVisualInspector class</class-id> <category>parcel load/unload/save</category><body package="GF/ST Visual Inspector">postLoadFrom: aParcel	| stream workspace |	PsiAbstractObjectGO initialize.	PsiAbstractObjectGO initializeFontAndColor.	PsiAbstractObjectGO resetEventsTriggered.	stream := TextStream on: (String new: 1024).	stream		emphasis: #bold;		nextPutAll: 'Visual Inspector (TM) installed.'; cr;		emphasis: nil;		nextPutAll: 'Copyright (C) 2003-1999 Cincom Systems, Inc.'; cr;		nextPutAll: 'All Rights Reserved'; cr; cr;		nextPutAll: 'To visually inspect an object send the message psiVisualInspect'; cr;		nextPutAll: 'to the desired object.  For example: ';cr;		nextPutAll: '     Transcript psiVisualInspect'.	workspace := Workspace new.	workspace currentTextPage documentModel value: stream contents.	workspace open.	workspace builder window label: 'GF/ST Visual Inspector Workspace'.	workspace builder window displayBox: (30@150 extent: 400@350).</body><body package="GF/ST Visual Inspector">preUnloadFor: aParcel	"Close any open applications."	| definedAppClasses |	definedAppClasses := aParcel definedClasses select: [:c| c inheritsFrom: ApplicationModel].	ScheduledControllers scheduledControllers do:		[:ctrlr |		(definedAppClasses contains: [:dac| ctrlr model isKindOf: dac]) ifTrue:			[ctrlr closeAndUnschedule]]</body></methods><methods><class-id>Polymorphic.PsiVisualInspector class</class-id> <category>interface specs</category><body package="GF/ST Visual Inspector">open	^(self openOn: self new withSpec: #windowSpec) source</body><body package="GF/ST Visual Inspector">openOn: anObject	self open addObject: anObject</body></methods><methods><class-id>Polymorphic.PsiVariableObjectGO</class-id> <category>GF/ST</category><body package="GF/ST Visual Inspector">addFieldHandle: field"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| handle |	field isString ifTrue: [^super addFieldHandle: field].	dispIndexedFields at: field put: (handle := PsiObjectReferenceHandle on: self at: #offTopLeft: with: 0@0).	(self interface isSelected: self) ifTrue: [		self interface addHandle: handle.	].	^handle</body><body package="GF/ST Visual Inspector">allDisplayedFields"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^super allDisplayedFields asArray, dispIndexedFields keys asSortedCollection</body><body package="GF/ST Visual Inspector">allFieldHandles"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^super allFieldHandles addAll: dispIndexedFields values; yourself</body><body package="GF/ST Visual Inspector">allFieldNames"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^super allFieldNames asArray, (1 to: object basicSize)</body><body package="GF/ST Visual Inspector">availableFields"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^super availableFields or: [self availableIndexedVarNames isEmpty not]</body><body package="GF/ST Visual Inspector">availableIndexedFields"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    ^(1 to: object basicSize) asOrderedCollection removeAll: dispIndexedFields keys; yourself</body><body package="GF/ST Visual Inspector">defaultHandles "Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Answer the default handles of the receiver"	displayPolicy = #displayFull ifTrue: [    	^super defaultHandles, dispIndexedFields values asArray	].	^#()</body><body package="GF/ST Visual Inspector">deleteField: field"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	(dispFields includesKey: field) ifTrue: [		^super deleteField: field	].	(dispIndexedFields at: field) deleteIn: self interface.	dispIndexedFields removeKey: field.	self damageDuring: [self damageCache].</body><body package="GF/ST Visual Inspector">displayField: field prototype: proto	| pen |	pen := cache pen.	self displayFont installOn: pen.	field isString ifTrue: [^super displayField: field prototype: proto].	pen		setForeColorTo: Color black;			displayStringCentered: field asString offsetBy: (0@(proto center y + 4)).	(dispIndexedFields at: field) updateOffset: proto rightCenter.</body><body package="GF/ST Visual Inspector">fieldHandle: field"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	field isString ifTrue: [^super fieldHandle: field].	^dispIndexedFields at: field</body><body package="GF/ST Visual Inspector">initialize"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    super initialize.    dispIndexedFields := Dictionary new.</body><body package="GF/ST Visual Inspector">isShowingFields"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^super isShowingFields or: [dispIndexedFields isEmpty not]</body><body package="GF/ST Visual Inspector">nonNilIndexes"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^(1 to: object basicSize) reject: [:i | (object psiIndexedFieldValue: i) == nil]</body><body package="GF/ST Visual Inspector">objectReferenceBy: aHandle"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    ^self fieldValue: (dispFields keyAtValue: aHandle ifAbsent: [dispIndexedFields keyAtValue: aHandle])</body><body package="GF/ST Visual Inspector">removeAllDisplayedFields  "Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	super removeAllDisplayedFields.	dispIndexedFields keys do: [:index |   		(dispIndexedFields at: index) deleteIn: self interface.   		dispIndexedFields removeKey: index. 	].</body><body package="GF/ST Visual Inspector">removeFieldHandle: field"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved" 	field isString ifTrue: [^super removeFieldHandle: field].    (dispIndexedFields at: field) deleteIn: self interface.    dispIndexedFields removeKey: field.</body><body package="GF/ST Visual Inspector">setReference: aRefHandle to: aGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	self 		setField: (dispFields keyAtValue: aRefHandle ifAbsent: [dispIndexedFields keyAtValue: aRefHandle]) 		toValue: aGO object</body><body package="GF/ST Visual Inspector">updateConnections"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	super updateConnections.	dispIndexedFields do: [:each |		each updateConnection	].</body></methods><methods><class-id>Polymorphic.PsiObjectDrawingInterface</class-id> <category>Drag Drop</category><body package="GF/ST Visual Inspector">startDragAt: pt	| data ds dm go key |	go := self graphicObjectAt: pt.	go isNil ifTrue: [ ^self ].	key := #PsiDD.	data := DragDropData new.	data key: key.	data contextWindow: display displayPane topComponent.	data contextWidget: display displayPane.	data contextApplication: self.	data clientData: IdentityDictionary new.	data clientData at: key put: go object. 	ds := DropSource new.	dm := 		DragDropManager 			withDropSource: ds			withData: data.	dm doDragDrop</body></methods><methods><class-id>Polymorphic.PsiObjectDrawingInterface</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">addObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| object cursorPoint |	object := self class gfPrompterClass prompt: 'Enter expression' defaultExpression: ''.	object == nil ifTrue: [^self].	(cursorPoint := self cursorPoint) isNil ifTrue: [cursorPoint := 0@0].	self addObject: object at: cursorPoint</body><body package="GF/ST Visual Inspector">addObject: anObject	| go |	anObject == nil ifTrue: [^anObject psiObjectGO]. 	^objects 		at: anObject 		ifAbsent: [			self addGO: (go := anObject psiObjectGO).			go isPsiPrimitiveObjectGO				ifTrue: [go]				ifFalse: [objects at: anObject put: go].		].</body><body package="GF/ST Visual Inspector">addObject: anObject at: aPoint"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| go |	(objects includesKey: anObject) ifTrue: [		^objects at: anObject	].	(go := anObject psiObjectGO) isPsiPrimitiveObjectGO ifFalse: [		objects at: anObject put: go.	].	go origin: aPoint.	self addGO: go.	^go</body><body package="GF/ST Visual Inspector">connectorStart: start stop: stop"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    | cl sel |    cl := self class connectorClasses at: defaultConnector ifAbsent: [ self class connectorClasses first ].    sel := self class connectorSelectors at: defaultConnector ifAbsent: [ self class connectorSelectors first ].    ^cl perform: sel withArguments: (Array with: start with: stop)</body><body package="GF/ST Visual Inspector">defaultConnector: symbol    "Do nothing for now.  Later this is where the menubar's menu will be updated to reflect the current default connection type."	| map |	map := #(arrow line oArrow oPath).	defaultConnector := map indexOf: symbol ifAbsent: [ 1 ].</body><body package="GF/ST Visual Inspector">initialize"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	super initialize.	self noUndo.	objects := (#{LogicalIdentityDictionary} valueOrDo: [IdentityDictionary]) new.	defaultConnector := 1</body><body package="GF/ST Visual Inspector">menu "Copyright (c) 1993 Polymorphic Software, Inc."	| menu |	(menu :=  Menu new)		addItemLabel: '&amp;Add Object...'  value: (self class gfMessageClass receiver: self selector: #addObject);		addItemLabel: 'Delete Selections'  value: (self class gfMessageClass receiver: self selector: #removeSelections);		addItemLabel: '&amp;Update'  value: (self class gfMessageClass receiver: self selector: #updateConnections);	addItemGroupLabels: (Array with: 'Set &amp;Font...') values: (Array with: (self class gfMessageClass receiver: self selector: #setFont));		addItemLabel: 'Set Selection &amp;Color...'  value: (self class gfMessageClass receiver: self selector: #setSelectionColor);		addItemLabel: '&amp;Print...'  value: (self class gfMessageClass receiver: self selector: #outputToPrinter).	(self respondsTo: #outputToPrinter) ifFalse: [		menu disableItem: #outputToPrinter.	].	menu addItemGroup: (Array with: ((MenuItem labeled: '&amp;View') submenu: self scaleMenu)).	menu addItemGroup: (Array with: ((MenuItem labeled: 'Pa&amp;ths') submenu: self pathMenu)).	^menu</body><body package="GF/ST Visual Inspector">menuLabel"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    ^'\uVisual Inspector' replaceEscapeCharacters</body><body package="GF/ST Visual Inspector">objectGOFor: anObject "Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	anObject == nil ifTrue: [^nil].	^objects at: anObject ifAbsent: [nil]</body><body package="GF/ST Visual Inspector">objectGOFor: anObject ifAbsentPutAt: aPoint"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| newGO |	anObject == nil ifTrue: [		newGO := anObject psiObjectGO.		newGO origin: aPoint.		self addGO: newGO.		^newGO	].	^objects at: anObject ifAbsent: [		newGO := anObject psiObjectGO.		newGO origin: aPoint.		self addGO: newGO.		newGO isPsiPrimitiveObjectGO ifFalse: [			objects at: anObject put: newGO		].		newGO	]</body><body package="GF/ST Visual Inspector">objectGosSelected"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| gos |	self selections isEmpty ifTrue: [^nil].	gos := self selections select: [:each | each isPsiObjectGO].	gos isEmpty ifTrue: [^nil].	^gos</body><body package="GF/ST Visual Inspector">pathMenu    | menu |    menu := Menu new.    menu		addItemLabel: 'All &amp;Arrows'  value: (self class gfMessageClass receiver: self selector: #transformPathsToArrows);		addItemLabel: 'All &amp;Lines'  value: (self class gfMessageClass receiver: self selector: #transformPathsToLines);		addItemLabel: 'All Orthogonal A&amp;rrows'  value: (self class gfMessageClass receiver: self selector: #transformPathsToOrthoArrows);		addItemLabel: 'All Orthogonal Li&amp;nes'  value: (self class gfMessageClass receiver: self selector: #transformPathsToOrthoPaths).	(menu menuItemAt: defaultConnector) beOn.    ^menu</body><body package="GF/ST Visual Inspector">quietlyRemoveObject: anObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| go removeCollection |   	(go := self objectGOFor: anObject) == nil ifTrue: [^self].	self quietlyRemoveHandlesFor: go.	removeCollection := OrderedCollection new.	removeCollection := self connectorsUsing: go.	objects removeKey: anObject ifAbsent: [].	removeCollection do: [ :each |		each stopObject == go ifTrue: [ each startObject resetConnector: each ]].	removeCollection add: go.	drawing quietlyRemoveAll: removeCollection.	removeCollection do: [ :each | each release ].</body><body package="GF/ST Visual Inspector">quietlyRemovePrimitiveGO: go"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    | removeCollection |    removeCollection := OrderedCollection new.    removeCollection := self connectorsUsing: go.    removeCollection do: [ :each |        each stopObject == go ifTrue: [ each startObject resetConnector: each ]].    removeCollection add: go.    drawing quietlyRemoveAll: removeCollection.	removeCollection do: [ :each | each release ].</body><body package="GF/ST Visual Inspector">removeObject: anObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| go removeCollection |   	(go := self objectGOFor: anObject) == nil ifTrue: [^self].	self quietlyRemoveHandlesFor: go.	removeCollection := OrderedCollection new.	removeCollection := self connectorsUsing: go.	objects removeKey: anObject ifAbsent: [].	removeCollection do: [ :each |		each stopObject == go ifTrue: [ each startObject resetConnector: each ]].	removeCollection add: go.	drawing removeAll: removeCollection.	removeCollection do: [ :each | each release ].</body><body package="GF/ST Visual Inspector">removePrimitiveGO: go"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| removeCollection |	self quietlyRemoveHandlesFor: go.	removeCollection := OrderedCollection new.	removeCollection := self connectorsUsing: go.	removeCollection do: [ :each |		each stopObject == go ifTrue: [ each startObject resetConnector: each ]].	removeCollection add: go.	drawing removeAll: removeCollection.	removeCollection do: [ :each | each release ].</body><body package="GF/ST Visual Inspector">removeSelections"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| selected |		(selected := self objectGosSelected) isNil ifTrue: [^self].	self objectGosSelected do: [ :each |				self quietlyRemoveHandlesFor: each.				each quietlyRemoveFromInterface ].	self repairDamage</body><body package="GF/ST Visual Inspector">selectObject: anObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	self noSelections.	self selection: (objects at: anObject ifAbsent: [^self])</body><body package="GF/ST Visual Inspector">selectedObject "Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| objectGOs |    (objectGOs :=  self objectGosSelected) isNil ifTrue: [^nil].	^objectGOs first object</body><body package="GF/ST Visual Inspector">selectedObjects"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| objectGOs |    (objectGOs :=  self objectGosSelected) isNil ifTrue: [^nil].	^objectGOs collect: [:each | each object]</body><body package="GF/ST Visual Inspector">setDragObject: dragSession"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"        "Private - set the selected object to drag."    | dragDropObjects objectGOs |    (objectGOs :=  self objectGosSelected) isNil ifTrue: [^nil].	dragDropObjects := OrderedCollection new.	objectGOs do: [:each |  		dragDropObjects add: (			dragSession objectClass new        	object: each object;        	format: 'object' data:  each object).	].    dragSession objects: dragDropObjects</body><body package="GF/ST Visual Inspector">setFont		| newFont |	newFont := GFFontChooser pickAFontDefaultValue: PsiAbstractObjectGO displayFont fontDescription.	newFont isNil ifTrue: [ ^self ].	PsiAbstractObjectGO displayFont: newFont.	objects do: [:each |		each damageDuring: [each damageCache].	].    self repairDamage.</body><body package="GF/ST Visual Inspector">setSelectionColor"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    | color |    (color := Color pickAColor: 'Choose Selection Color' initialColor: PsiAbstractObjectGO selectionColor) == nil ifTrue: [^self].    PsiAbstractObjectGO selectionColor: color.</body><body package="GF/ST Visual Inspector">transformPathsToArrows"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    objects do: [:each |        each transformHandlesToArrows    ].    self defaultConnector: #arrow.    self repairDamage</body><body package="GF/ST Visual Inspector">transformPathsToLines"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    objects do: [:each |        each transformHandlesToLines    ].    self defaultConnector: #line.    self repairDamage</body><body package="GF/ST Visual Inspector">transformPathsToOrthoArrows"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    objects do: [:each |        each transformHandlesToOrthoArrows    ].    self defaultConnector: #oArrow.    self repairDamage</body><body package="GF/ST Visual Inspector">transformPathsToOrthoPaths"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    objects do: [:each |        each transformHandlesToOrthoPaths    ].    self defaultConnector: #oPath.    self repairDamage</body><body package="GF/ST Visual Inspector">updateConnections"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	self class gfCursorClass execute changeFor: [		objects do: [:each | each updateConnections].	].	self repairDamage.</body></methods><methods><class-id>Polymorphic.PsiObjectDrawingInterface class</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">connectorClasses"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| c |	c := Array new: 4.	c at: 1 put: GFDependentLineGO.	c at: 2 put: GFDependentLineGO.	c at: 3 put: GFDependentOrthogonalPathGO.	c at: 4 put: GFDependentOrthogonalPathGO.	^c</body><body package="GF/ST Visual Inspector">connectorOptions"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    ^#(arrow line oArrow oPath)</body><body package="GF/ST Visual Inspector">connectorSelectors"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| c |	c := Array new: 4.	c at: 1 put: #arrowStartLocation:stopLocation:.	c at: 2 put: #startLocation:stopLocation:.	c at: 3 put: #arrowStartLocationRight:stopLocationLeft:.	c at: 4 put: #startLocationRight:stopLocationLeft:.	^c</body><body package="GF/ST Visual Inspector">defaultPalette"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    "Answer the default palette of the tools I can use."	^GFToolPalette new		addCategory: (GFCategory new defaultTool: GFSelectionTool new; yourself);		yourself.</body><body package="GF/ST Visual Inspector">openOn: aDrawing"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    ^self openOn: aDrawing withLabel: 'Graphical Inspector'</body></methods><methods><class-id>Polymorphic.PsiDictionaryGO</class-id> <category>GF/ST</category><body package="GF/ST Visual Inspector">addKey"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| key |		key := self class gfPrompterClass prompt: 'Enter key expression' defaultExpression: ''.	key == nil ifTrue: [^self].	object at: key put: nil.	self interface hideHandlesWhile: [		self 			updateConnections;			addField: key asString.	].</body><body package="GF/ST Visual Inspector">allFieldNames"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^stringFieldMap keys asSortedCollection</body><body package="GF/ST Visual Inspector">buildStringFieldMap"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	stringFieldMap := Dictionary new.	object keys do: [:each |		stringFieldMap at: each asString put: each	].</body><body package="GF/ST Visual Inspector">fieldValue: aField"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^object at: (stringFieldMap at: aField)</body><body package="GF/ST Visual Inspector">setField: field toValue: aValue"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	object at: (stringFieldMap at: field) put: aValue</body><body package="GF/ST Visual Inspector">setObject: anObject origin: aPoint"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	super setObject: anObject origin: aPoint.	self buildStringFieldMap</body><body package="GF/ST Visual Inspector">standardMenu"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Answer the standard menu of the receiver"	| menu |	menu := super standardMenu.	menu         addItemLabel: 'Add Key' value: (MessageSend receiver: self selector: #addKey).	^menu</body><body package="GF/ST Visual Inspector">updateConnections"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| prevMap | 	prevMap := stringFieldMap.	self buildStringFieldMap. 	prevMap keys do: [:each |		(self isValidField: each) ifFalse: [			self deleteField: each		].	].	dispFields do: [:each |		each updateConnection	].</body></methods><methods><class-id>Polymorphic.PsiOrderedCollectionGO</class-id> <category>GF/ST</category><body package="GF/ST Visual Inspector">allFieldNames"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^1 to: object size</body><body package="GF/ST Visual Inspector">fieldValue: aField"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^object at: aField</body><body package="GF/ST Visual Inspector">setField: field toValue: aValue"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	object at: field put: aValue</body></methods><methods><class-id>Polymorphic.PsiBorderHighlightHandle</class-id> <category>GF/ST</category><body package="GF/ST Visual Inspector">color: aColor"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	color := aColor</body><body package="GF/ST Visual Inspector">containsPoint: aPoint"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Answer whether or not the receiver's area contains a point"	^false</body><body package="GF/ST Visual Inspector">displayWith: aPen"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"The central display routine.  Display the image of the receiver,	 using aPen.  The receiver should make no assumptions regarding	 the state of the pen, and is not responsible for resetting the pen	 to the previous state.	"    aPen        setLineWidthTo: 2; 		setForeColorTo: color evaluate;        displayRectangularBorder: (self origin extent: self extent)</body><body package="GF/ST Visual Inspector">extent"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Answer the extent of the display area of the receiver"	extent isNil ifTrue: [ self setExtent ].	^extent</body><body package="GF/ST Visual Inspector">extent: aPoint"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	extent := aPoint</body><body package="GF/ST Visual Inspector">initialize"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	super initialize.	color := Color black.</body><body package="GF/ST Visual Inspector">isActive"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"        ^false</body><body package="GF/ST Visual Inspector">origin"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Answer the origin of the receiver"        ^locator asPoint</body><body package="GF/ST Visual Inspector">setExtent	self owner notNil ifTrue: [ self extent: self owner unscaledExtent ]</body><body package="GF/ST Visual Inspector">setLocator: aLocator"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    super setLocator: aLocator.	self owner when: #damaged send: #setExtent to: self</body></methods><methods><class-id>Polymorphic.PsiObjectReferenceHandle</class-id> <category>GF/ST</category><body package="GF/ST Visual Inspector">addConnectionTo: anObjectGO in: anInterface"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    connector := anInterface connectorStart: locator stop: anObjectGO refLocator.    connector color: RGBColor blue.    connector        when: #generateHandles send: #noHandles to: connector;        when: #getMenu send: #connectionMenu to: self.    anInterface quietlyAddGO: connector</body><body package="GF/ST Visual Inspector">becomeDependentArrow"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved" 	"Transform the receiver into a dependent arrow"    (connector isNil or: [ connector container isNil ]) ifTrue: [^self].    connector := connector becomeDependentArrow.    connector        when: #generateHandles send: #noHandles to: connector;        when: #getMenu send: #connectionMenu to: self.</body><body package="GF/ST Visual Inspector">becomeDependentLine"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved" 	"Transform the receiver into a dependent line"    (connector isNil or: [ connector container isNil ]) ifTrue: [^self].    connector := connector becomeDependentLine.    connector        when: #generateHandles send: #noHandles to: connector;        when: #getMenu send: #connectionMenu to: self.</body><body package="GF/ST Visual Inspector">becomeDependentOrthogonalArrow"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved" 	"Transform the receiver into a dependent orthogonal arrow"    (connector isNil or: [ connector container isNil ]) ifTrue: [^self].    connector := connector becomeDependentOrthogonalArrow.    connector        when: #generateHandles send: #noHandles to: connector;        when: #getMenu send: #connectionMenu to: self.    connector damageDuring: [        connector            startDirection: GFOrthogonalPathGO directionRight;            endDirection: GFOrthogonalPathGO directionLeft;            connect    ].</body><body package="GF/ST Visual Inspector">becomeDependentOrthogonalPath"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved" 	"Transform the receiver into a dependent orthogonal path"    (connector isNil or: [ connector container isNil ]) ifTrue: [^self].    connector := connector becomeDependentOrthogonalPath.    connector        when: #generateHandles send: #noHandles to: connector;        when: #getMenu send: #connectionMenu to: self.    connector damageDuring: [        connector            startDirection: GFOrthogonalPathGO directionRight;            endDirection: GFOrthogonalPathGO directionLeft;            connect    ].</body><body package="GF/ST Visual Inspector">button1DoubleClickInvoke: anInterface"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"The receiver has been invoked with by a  double click with the button 1 down"	connector isNil ifTrue: [^self].	connector stopObject shouldRemove ifTrue: [		anInterface removeNoUpdate: connector stopObject.	].	anInterface removeNoUpdate: connector.	connector release.	connector := nil. 	anInterface redraw.</body><body package="GF/ST Visual Inspector">connectionMenu 	| menu transformMenu |	menu := Menu new. 	menu addItem: ((MenuItem labeled: 'Line Width') submenu: connector pathMenu).	connector appendLineColorItemTo: menu.	transformMenu := self transformMenu.	menu addItem: ((MenuItem labeled: 'Transform') submenu: transformMenu).	menu addItemLabel: 'Delete' value: (MessageSend receiver: self selector: #deleteConnection).	^menu</body><body package="GF/ST Visual Inspector">connector"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    ^connector</body><body package="GF/ST Visual Inspector">deleteConnection"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	connector isNil ifTrue: [^self].	self deleteConnectionIn: connector interface.</body><body package="GF/ST Visual Inspector">deleteConnectionIn: anInterface"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"     	anInterface removeNoUpdate: connector.	connector release.	connector := nil.	anInterface redraw.</body><body package="GF/ST Visual Inspector">deleteIn: anInterface"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"   	anInterface removeHandleNoUpdate: self.	connector isNil ifTrue: [^self].	connector stopObject shouldRemove ifTrue: [		anInterface removeNoUpdate: connector stopObject.	].	anInterface removeNoUpdate: connector.	connector release.	connector := nil.</body><body package="GF/ST Visual Inspector">findTarget: anInterface "Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    | aGO myCenter aPen targetPoint color rect |    aPen := anInterface pen.    targetPoint := myCenter := self center.	color := RGBColor blue.	rect := 0@0 extent: 1@1.    anInterface trackMouse: [:newPoint |        anInterface            damageRegion: (rect := (Rectangle vertex: myCenter vertex: targetPoint)                                expandedByScalar: 2);            repairDamage.        aGO := anInterface graphicObjectAt: newPoint.        (aGO = self                or: [(self isFor: aGO)                    or: [aGO notNil and: [aGO isPsiObjectGO not]]])            ifTrue: [aGO := nil].        targetPoint := aGO isNil                        ifTrue: [newPoint]                        ifFalse: [aGO connectionPosition].        aPen            setStyle: 0			color: color			width: 1;            displayLineFrom: myCenter to: targetPoint.    ].    anInterface        damageRegion: rect;        repairDamage.    ^aGO</body><body package="GF/ST Visual Inspector">invoke: anInterface"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Invoke the receiver in the context of anInterface.  The first thing we need	 to do is store the memento for the receiver.	"	| aGO |	(connector notNil or: [anInterface shiftDown]) ifTrue: [^self invokeConnect: anInterface].    anInterface hideHandlesWhile: [        aGO := anInterface objectGOFor: (self objectReferenced) ifAbsentPutAt: self origin + (10@10) . 		self addConnectionTo: aGO in: anInterface    ].	anInterface redraw.</body><body package="GF/ST Visual Inspector">invokeConnect: anInterface"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    | aGO |    aGO := self findTarget: anInterface.    aGO isNil ifTrue: [^anInterface showHandles].	connector notNil ifTrue: [		connector stopObject shouldRemove ifTrue: [			anInterface removeNoUpdate: connector stopObject.		].		anInterface removeNoUpdate: connector.		connector release.	].    anInterface 		hideHandlesWhile: [ self addConnectionTo: aGO in: anInterface];		redraw.	self owner setReference: self to: aGO.</body><body package="GF/ST Visual Inspector">isReferenced"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^connector notNil</body><body package="GF/ST Visual Inspector">objectReferenced"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^self owner objectReferenceBy: self</body><body package="GF/ST Visual Inspector">resetConnector"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"    connector := nil</body><body package="GF/ST Visual Inspector">transformMenu	| menu |	menu := connector transformMenu.	menu values do: [ :each | each receiver: self ].	^menu</body><body package="GF/ST Visual Inspector">updateConnection"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	| go new interface |	connector isNil ifTrue: [^self]. 	connector stopObject object == (new := self objectReferenced) ifTrue: [^self].		interface := self owner interface.	connector stopObject shouldRemove ifTrue: [		interface removeNoUpdate: connector stopObject.	].	interface removeNoUpdate: connector.	connector release. 	connector := nil.	(go := interface objectGOFor: new) == nil ifTrue: [^self].	self addConnectionTo: go in: interface.</body><body package="GF/ST Visual Inspector">updateConnector"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	connector startConstraint evaluate.</body><body package="GF/ST Visual Inspector">updateOffset: aPoint"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	locator arguments: (Array with: aPoint).</body></methods><methods><class-id>Core.Integer</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">psiFieldOf: anObject setValue: value"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^anObject psiSetIndexedField: self toValue: value</body><body package="GF/ST Visual Inspector">psiFieldValueOf: anObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^anObject psiIndexedFieldValue: self</body><body package="GF/ST Visual Inspector">psiObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^Polymorphic.PsiPrimitiveObjectGO object: self</body><body package="GF/ST Visual Inspector">psiPrimitiveObjectString"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^'&lt;', self printString, '&gt;'</body></methods><methods><class-id>Core.String</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">dumpOn: aStream base: radix bytes: oneTwoFour        "Dump the receiver's bytes onto aStream using        the given radix, and oneTwoFour specifying the number        of bytes per chunk."    | fieldWidth string lineLength columnIndex byte asciiStream   byteValues |	#PolymorphicAdded.    byteValues :=  #( 1 256 65536 16777216 ).    lineLength := 16.    fieldWidth := ( ( ( 2 raisedToInteger: oneTwoFour * 8 ) - 1 ) printStringRadix: radix ) size.    columnIndex := 0.    1 to: self size by: oneTwoFour do: [ :byteIndex |        byte := 0.        1 to: oneTwoFour do: [:i |            byteIndex + i - 1 &gt; self size ifFalse: [                byte := byte + ( ( self at: byteIndex + i - 1 ) asInteger * ( byteValues at: i ) ) ] ].        byteIndex - 1 \\ lineLength = 0 ifTrue: [            asciiStream := WriteStream on: String new.            string := byteIndex  - 1 printStringRadix: 16.            aStream nextPutAll: '&lt;16r', string, '&gt;  ' ].        string := byte printStringRadix: radix.        aStream nextPutAll: string, ' '.        byteIndex \\ 4 = 0 ifTrue: [ aStream nextPutAll: ' ' ].        1 to: oneTwoFour do: [:i |            byteIndex + i - 1 &gt; self size ifFalse: [                byte := (self at: (byteIndex + i - 1)) asInteger.                asciiStream nextPut: ( byte &lt; 32 ifTrue: [ $. ] ifFalse: [ byte asCharacter ] ) ] ].        byteIndex + oneTwoFour - 1 \\ lineLength = 0 ifTrue: [            aStream nextPutAll: ' ', asciiStream contents; cr ] ].    self size \\ lineLength = 0 ifFalse: [        self size + 1 to: ( self size + lineLength truncateTo: lineLength ) do: [ :byteIndex |            aStream nextPutAll: ( ( String new: fieldWidth + 1 ) atAllPut: $ ).            byteIndex \\ 4 = 0 ifTrue: [ aStream nextPutAll: ' ' ] ].        aStream nextPutAll: ' ', asciiStream contents ]</body><body package="GF/ST Visual Inspector">psiFieldOf: anObject setValue: value"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^anObject psiSetField: self toValue: value</body><body package="GF/ST Visual Inspector">psiFieldValueOf: anObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^anObject psiFieldValue: self</body></methods><methods><class-id>Core.Object</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">dumpOn: aStream base: radix bytes: oneTwoFour        "Dump the receiver's bytes onto aStream using        the given radix, and oneTwoFour specifying the number        of bytes per chunk."    | fieldWidth string lineLength columnIndex byte asciiStream padLength extra byteValues |	#PolymorphicAdded.    byteValues :=  #( 1 256 65536 16777216 ).    lineLength := 16.    fieldWidth := ( ( ( 2 raisedToInteger: oneTwoFour * 8 ) - 1 ) radix: radix showRadix: false ) size.    columnIndex := 0.    1 to: self size by: oneTwoFour do: [ :byteIndex |        byte := 0.        1 to: oneTwoFour do: [:i |            byteIndex + i - 1 &gt; self size ifFalse: [                byte := byte + ( ( self at: byteIndex + i - 1 ) * ( byteValues at: i ) ) ] ].        byteIndex - 1 \\ lineLength = 0 ifTrue: [            asciiStream := String new asStream.            string := byteIndex  - 1 printPaddedWith: $0 to: 4 base: 16.            aStream nextPutAll: '&lt;16r', string, '&gt;  ' ].        string := byte printPaddedWith: $0 to: fieldWidth base: radix.        aStream nextPutAll: string, ' '.        byteIndex \\ 4 = 0 ifTrue: [ aStream nextPutAll: ' ' ].        1 to: oneTwoFour do: [:i |            byteIndex + i - 1 &gt; self size ifFalse: [                byte := self at: byteIndex + i - 1.                asciiStream nextPut: ( byte &lt; 32 ifTrue: [ $. ] ifFalse: [ byte asCharacter ] ) ] ].        byteIndex + oneTwoFour - 1 \\ lineLength = 0 ifTrue: [            aStream nextPutAll: ' ', asciiStream contents; cr ] ].    self size \\ lineLength = 0 ifFalse: [        self size + 1 to: ( self size + lineLength truncateTo: lineLength ) do: [ :byteIndex |            aStream nextPutAll: ( ( String new: fieldWidth + 1 ) atAllPut: $ ).            byteIndex \\ 4 = 0 ifTrue: [ aStream nextPutAll: ' ' ] ].        aStream nextPutAll: ' ', asciiStream contents ]</body><body package="GF/ST Visual Inspector">dumpStringBase: radix bytes: oneTwoFour        "Answer a String which contains a dump of the receiver's bytes        in the given radix, where oneTwoFour specifies the number        of bytes per chunk."    | aStream |	#PolymorphicAdded.    aStream := WriteStream on: String new.    self dumpOn: aStream base: radix bytes: oneTwoFour.    ^aStream contents</body><body package="GF/ST Visual Inspector">psiFieldValue: aString"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^self instVarAt: (self class allInstVarNames indexOf: aString)</body><body package="GF/ST Visual Inspector">psiIndexedFieldValue: anInteger"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^self basicAt: anInteger</body><body package="GF/ST Visual Inspector">psiObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	"Answer the graphic object for the receiver" 	#PolymorphicAdded.	self class isPointers not ifTrue: [^Polymorphic.PsiVariableByteObjectGO object: self].	self class isVariable ifTrue: [^Polymorphic.PsiVariableObjectGO object: self].	^Polymorphic.PsiObjectGO object: self</body><body package="GF/ST Visual Inspector">psiSetField: aString toValue: anObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	self 		instVarAt: (self class allInstVarNames indexOf: aString)		put: anObject</body><body package="GF/ST Visual Inspector">psiSetIndexedField: index toValue: anObject"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	self basicAt: index put: anObject</body><body package="GF/ST Visual Inspector">psiVisualInspect"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved" 	#PolymorphicAdded.	Polymorphic.PsiVisualInspector openOn: self</body></methods><methods><class-id>Core.Symbol</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">psiObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^Polymorphic.PsiPrimitiveObjectGO object: self</body><body package="GF/ST Visual Inspector">psiPrimitiveObjectString"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^'&lt;', self storeString, '&gt;'</body></methods><methods><class-id>Polymorphic.GFGraphicObject</class-id> <category>GF/ST</category><body package="GF/ST Visual Inspector">isPsiObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^false</body></methods><methods><class-id>Polymorphic.GFDrawingInterface</class-id> <category>Drag Drop</category><body package="GF/ST Visual Inspector">startDragAt: pt	"ignore for now"	self button1Down: pt</body></methods><methods><class-id>Core.Process</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">psiObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^Polymorphic.PsiObjectGO object: self</body></methods><methods><class-id>Core.Dictionary</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">psiObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^Polymorphic.PsiDictionaryGO object: self</body></methods><methods><class-id>Polymorphic.GFHandle</class-id> <category>GF/ST</category><body package="GF/ST Visual Inspector">isPsiObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	^false</body></methods><methods><class-id>Core.UndefinedObject</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">psiObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^Polymorphic.PsiPrimitiveObjectGO object: self</body><body package="GF/ST Visual Inspector">psiPrimitiveObjectString"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^'&lt;nil&gt;'</body></methods><methods><class-id>Core.Boolean</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">psiObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^Polymorphic.PsiPrimitiveObjectGO object: self</body><body package="GF/ST Visual Inspector">psiPrimitiveObjectString"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^'&lt;', self printString, '&gt;'</body></methods><methods><class-id>Tools.Inspector</class-id> <category>drag drop</category><body package="GF/ST Visual Inspector">buildInSubCanvas: spec withBuilder: aBuilder 	"This is being overridden in a slimy attempt to avoid 	overwriting base code.	A better approach would be to install the callbacks 	directly into the spec by editing #windowSpec so that 	the list pane has the callbacks already installed in it.  	The best approach would be to add some hook into 	the building of a window to allow mutation of the spec 	before it is used, but this would also entail changing 	base code.  However, there is no place to do this that 	would not require some overwriting of base code 	(#specificationFor: is NOT always used as a means of	getting the spec so we cannot hook into there).	This is the closest that this can be done without 	changing base code and causing versioning issues."	self psiInjectDragDropIntoSpec: spec.	^super buildInSubCanvas: spec withBuilder: aBuilder</body><body package="GF/ST Visual Inspector">dragOK: ctrl	^true</body><body package="GF/ST Visual Inspector">hookUpWindow: windowClassOrNil spec: spec builder: aBuilder	"This is being overridden in a slimy attempt to avoid 	overwriting base code.	A better approach would be to install the callbacks 	directly into the spec by editing #windowSpec so that 	the list pane has the callbacks already installed in it.  	The best approach would be to add some hook into 	the building of a window to allow mutation of the spec 	before it is used, but this would also entail changing 	base code.  However, there is no place to do this that 	would not require some overwriting of base code 	(#specificationFor: is NOT always used as a means of	getting the spec so we cannot hook into there).	This is the closest that this can be done without 	changing base code and causing versioning issues."	self psiInjectDragDropIntoSpec: spec.	^super hookUpWindow: windowClassOrNil spec: spec builder: aBuilder</body><body package="GF/ST Visual Inspector">psiInjectDragDropIntoSpec: spec	"This method injects the drag-drop properties into the spec	for the #fieldList"	| fieldListSpec prop |	InputState default shiftDown ifTrue: [ self halt ].	fieldListSpec := spec componentSpec collection detect: [ :subSpec | subSpec name = #fieldList ] ifNone: [ nil ].	fieldListSpec == nil ifTrue: [ ^self ].	(prop := fieldListSpec properties)		isNil ifTrue: [ prop := PropertyListDictionary new ].	prop at: #dragOkSelector  put: #dragOK:.	prop at:  #dragStartSelector put: #startDragDrop:.	fieldListSpec properties: prop.</body><body package="GF/ST Visual Inspector">startDragDrop: ctrl	| data ds dm key |	key := #Object.	data := DragDropData new.	data key: key.	data contextWindow: ctrl view topComponent.	data contextWidget: ctrl view.	data contextApplication: self.	data clientData: IdentityDictionary new.	data clientData at: key put: self fieldValue.	ds := DropSource new.	dm := 		DragDropManager 			withDropSource: ds			withData: data.	dm doDragDrop</body></methods><methods><class-id>Core.Float</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">psiObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^Polymorphic.PsiPrimitiveObjectGO object: self</body><body package="GF/ST Visual Inspector">psiPrimitiveObjectString"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^'&lt;', self printString, '&gt;'</body></methods><methods><class-id>Polymorphic.GFDrawingPane</class-id> <category>GF/ST</category><body package="GF/ST Visual Inspector">startDragAt: aPoint"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved""Private - Left button has been pressed down."	| point |	point := displaySystem transformPoint: aPoint.	displaySystem interface startDragAt: point.</body></methods><methods><class-id>Core.OrderedCollection</class-id> <category>visual inspecting</category><body package="GF/ST Visual Inspector">psiObjectGO"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	#PolymorphicAdded.	^Polymorphic.PsiOrderedCollectionGO object: self</body></methods><methods><class-id>Polymorphic.PsiVisualInspector class</class-id> <category>interface specs</category><body package="GF/ST Visual Inspector">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Visual Inspector' 			#bounds: #(#Rectangle 342 327 542 527 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#ArbitraryComponentSpec 					#properties: 					#(#PropertyListDictionary #dragOverSelector 						#dragObjOver: #dropSelector 						#objectDrop: ) 					#layout: #(#LayoutFrame 0 0 0 0 0 1 0 1 ) 					#name: #view 					#flags: 11 					#component: #gfView ) ) ) )</body></methods><initialize><class-id>Polymorphic.PsiAbstractObjectGO</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>GFGraphicObject</name><environment>Polymorphic</environment><super>Polymorphic.PsiEventModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>container prev next </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFST</category><attributes><package>GF/ST Base</package></attributes></class><class><name>GFCachedGO</name><environment>Polymorphic</environment><super>Polymorphic.GFGraphicObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cache origin </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFST</category><attributes><package>GF/ST Base</package></attributes></class><class><name>Float</name><environment>Core</environment><super>Core.LimitedPrecisionReal</super><private>false</private><indexed-type>bytes</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>GFDrawingPane</name><environment>Polymorphic</environment><super>UI.View</super><private>false</private><indexed-type>none</indexed-type><inst-vars>displaySystem scrollPoint pagePoint pen </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFST-GFInterface-GFDisplay-GFDisplay80</category><attributes><package>GF/ST Base</package></attributes></class><class><name>String</name><environment>Core</environment><super>Core.CharacterArray</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>Symbol</name><environment>Core</environment><super>Core.String</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Text</category><attributes><package>Collections-Text</package></attributes></class><class><name>Dictionary</name><environment>Core</environment><super>Core.Set</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Unordered</category><attributes><package>Collections-Unordered</package></attributes></class><class><name>Process</name><environment>Core</environment><super>Core.Link</super><private>false</private><indexed-type>none</indexed-type><inst-vars>suspendedContext priority myList systemRecords interruptProtect environment isSystem name debugger locale </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Processes</category><attributes><package>Kernel-Processes</package></attributes></class><class><name>GFDrawingInterface</name><environment>Polymorphic</environment><super>Polymorphic.PsiEventModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>palette selections handles drawing display hideHandles memento </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFST-GFInterface</category><attributes><package>GF/ST Base</package></attributes></class><class><name>OrderedCollection</name><environment>Core</environment><super>Core.SequenceableCollection</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>firstIndex lastIndex </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Collections-Sequenceable</category><attributes><package>Collections-Sequenceable</package></attributes></class><class><name>GFHandle</name><environment>Polymorphic</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>description releaseAction locator mementoType displayGO snapToGrid limit </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFST-GFHandles</category><attributes><package>GF/ST Base</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>Inspector</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>object field fieldList properties history showAllFields </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Inspector</category><attributes><package>Tools-Inspector</package></attributes></class><class><name>Boolean</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Integer</name><environment>Core</environment><super>Core.Number</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Magnitude-Numbers</category><attributes><package>Magnitude-Numbers</package></attributes></class><class><name>GFTextGO</name><environment>Polymorphic</environment><super>Polymorphic.GFGraphicObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>box text font color </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFST</category><attributes><package>GF/ST Base</package></attributes></class><class><name>UndefinedObject</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class></st-source>