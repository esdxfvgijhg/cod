<?xml version="1.0"?><st-source><!-- Name: GF/ST OrgChartNotice: Copyright © 2002,2000,1999 Cincom Systems, Inc.  All Rights Reserved.DbIdentifier: bear73DbTrace: 478272DbUsername: kgreekDbVersion: 8.2 - 1DevelopmentPrerequisites: #(#(#any 'GF/ST GraphLayout' ''))PackageName: GF/ST OrgChartParcel: #('GF/ST OrgChart')ParcelName: GF/ST OrgChartPrerequisiteParcels: #(#('GF/ST GraphLayout' ''))PrintStringCache: (8.2 - 1,kgreek)Version: 8.2 - 1Post-Load Block: 	[:pkg| Polymorphic.GFOrgChartEditor postLoadActionFor: pkg ]Date: 1:14:05 PM April 1, 2016 --><time-stamp>From VisualWorks®, Pre-Release 8.2 (apr16.1) of April 1, 2016 on April 1, 2016 at 1:14:05 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>GFOrgChartEmployee</name><environment>Polymorphic</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name title supervisor subordinates </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFOrgChartDemo</category><attributes><package>GF/ST OrgChart</package></attributes></class><class><name>GFOrgChartEditor</name><environment>Polymorphic</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>gfView interface employees headHoncho nodeGOs lines arrows vertical employeesBuffer title employeesList organizations name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFOrgChartDemo-GFOrgChartDemo80</category><attributes><package>GF/ST OrgChart</package></attributes></class><shared-variable><name>Organizations</name><environment>Polymorphic.GFOrgChartEditor</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>GF/ST OrgChart</package></attributes></shared-variable><methods><class-id>Polymorphic.GFOrgChartEmployee</class-id> <category>access</category><body package="GF/ST OrgChart">addSubordinate: anEmployee	subordinates add: anEmployee</body><body package="GF/ST OrgChart">copyEmpty	^self		copy;		supervisor: nil;		subordinates: Set new</body><body package="GF/ST OrgChart">name	^name</body><body package="GF/ST OrgChart">name: aString	name := aString</body><body package="GF/ST OrgChart">printOn: aStream	super printOn: aStream.	aStream nextPutAll: ' : '.	name printOn: aStream.</body><body package="GF/ST OrgChart">removeSubordinate: anEmployee	subordinates remove: anEmployee ifAbsent: []</body><body package="GF/ST OrgChart">subordinates	^subordinates</body><body package="GF/ST OrgChart">subordinates: aSet	subordinates := aSet</body><body package="GF/ST OrgChart">supervisor	^supervisor</body><body package="GF/ST OrgChart">supervisor: aSupervisor 	supervisor notNil ifTrue: [		supervisor removeSubordinate: self.	].	(supervisor := aSupervisor) isNil ifTrue: [^self].	aSupervisor addSubordinate: self.</body><body package="GF/ST OrgChart">title	^title</body><body package="GF/ST OrgChart">title: aString	title := aString</body></methods><methods><class-id>Polymorphic.GFOrgChartEmployee</class-id> <category>initialize-release</category><body package="GF/ST OrgChart">initialize	self subordinates: Set new</body></methods><methods><class-id>Polymorphic.GFOrgChartEmployee class</class-id> <category>As yet unclassified</category><body package="GF/ST OrgChart">name: aNameString title: aTitleString	^self new		name: aNameString;		title: aTitleString</body><body package="GF/ST OrgChart">new	^super new initialize</body></methods><methods><class-id>Polymorphic.GFOrgChartEditor</class-id> <category>actions</category><body package="GF/ST OrgChart">addEmployee	| empName empTitle employee |	empName := self name value.	empTitle := self title value.	(empName isNil or: [empTitle isNil ]) ifTrue: [^self]. 	(empName isEmpty or: [empTitle isEmpty]) ifTrue: [^self]. 	(employee := self selectedOrganization at: empName ifAbsentPut: [GFOrgChartEmployee new])			name: empName;			title: empTitle.	self updateEmployees.	(nodeGOs includesKey: name) ifTrue: [self redisplayWithRefresh: employee]</body><body package="GF/ST OrgChart">addOrganization	| org |	org := Dialog request: 'Organization name:' initialAnswer: ''.	(org == nil or: [org isEmpty]) ifTrue: [^self].	Organizations at: org put: Dictionary new.	self updateOrganizations: org</body><body package="GF/ST OrgChart">breakConnections	| employee |	(employee := self selectedEmployee) == nil ifTrue: [^self].	(Dialog confirm: 'Break connections for employee: ', employee name, '?') ifFalse: [^self].	self breakConnectionsFor: employee.	self		updateEmployees;		updateEntryFields: nil;		redisplayWithRefresh: employee</body><body package="GF/ST OrgChart">copyAllEmployees	employeesBuffer := Set new: employees size.	employees do: [ :each | employeesBuffer add: each copyEmpty]</body><body package="GF/ST OrgChart">copyEmployee	employeesBuffer := Set with: self selectedEmployee copyEmpty</body><body package="GF/ST OrgChart">pasteEmployee	employeesBuffer do: [ :each | employees at: each name put: each].	self updateEmployees</body><body package="GF/ST OrgChart">print	interface outputToPrinter</body><body package="GF/ST OrgChart">removeEmployee	| employee employeeName reassignBlock |	(employee := self selectedEmployee) == nil ifTrue: [^self].	employeeName := employee name.	(Dialog confirm: 'Remove employee: ', employeeName, '?') ifFalse: [^self].	employee supervisor isNil		ifTrue: [			reassignBlock := [:each | 				each supervisor: nil.				headHoncho add: each. ]]		ifFalse: [			reassignBlock := [:each | each supervisor: employee supervisor]].	employee subordinates do: reassignBlock.	self breakConnectionsFor: employee.	employees removeKey: employeeName ifAbsent: [nil].	self		updateEmployees;		updateEntryFields: nil;		redisplay.	interface repairDamage</body><body package="GF/ST OrgChart">removeOrganization	| org |	org := self organizations value.	(Dialog confirm: 'Remove organization: ', org) ifFalse: [^self].	Organizations removeKey: org ifAbsent: [].	self updateOrganizations: nil</body><body package="GF/ST OrgChart">toggleArrowLine	| button |	button := self paneAt: #arrowLineButton.	arrows := arrows not.	arrows		ifTrue: [button labelString: 'Arrows']		ifFalse: [button labelString: 'Lines'].	self redisplayWithRefresh: self selectedEmployee</body><body package="GF/ST OrgChart">toggleConnectionType	| button |	button := self paneAt: #connectionTypeButton.	lines := lines not.	lines		ifTrue: [button labelString: 'Straight']		ifFalse: [button labelString: 'Orthogonal'].	self redisplayWithRefresh: self selectedEmployee</body><body package="GF/ST OrgChart">toggleOrientation	| button |	button := self paneAt: #orientationButton.	vertical := vertical not.	vertical		ifTrue: [button labelString: 'Vertical']		ifFalse: [button labelString: 'Horizontal'].	self redisplayWithRefresh: self selectedEmployee</body><body package="GF/ST OrgChart">zoomIn	interface zoomIn</body><body package="GF/ST OrgChart">zoomOut	interface zoomOut</body></methods><methods><class-id>Polymorphic.GFOrgChartEditor</class-id> <category>private</category><body package="GF/ST OrgChart">breakConnectionsFor: employee	| supervisor |	(supervisor := employee supervisor) == nil ifFalse: [supervisor removeSubordinate: employee].	employee subordinates copy do: [ :each |		each supervisor: nil.		each subordinates size ~= 0 ifTrue: [headHoncho add: each].	].	headHoncho remove: employee ifAbsent: []</body><body package="GF/ST OrgChart">createEmployeeGO: aGFNodeGO	| nameGO rrGO h v nameFontDesc titleFontDesc titleGO nameWidth titleWidth anEmployee |	anEmployee := aGFNodeGO node value.	"First, create the GFTextGO's and GFRoundedRectangle"	nameFontDesc := FontDescription new family: 'arial'; pixelSize: 12; boldness: 0.9; italic: false; name: nil.	nameGO := GFTextGO text: anEmployee name.	nameGO font: nameFontDesc.	nameWidth := nameGO boundingBox width.	titleFontDesc := FontDescription new family: 'arial'; pixelSize: 8; boldness: 0.0; italic: true; name: nil.	titleGO := GFTextGO text: anEmployee title.	titleGO font: titleFontDesc.	titleWidth := titleGO boundingBox width.	h := 3 * (nameWidth max: titleWidth) // 2.	v := 5 * nameGO boundingBox height // 2.	nameGO translateBy: (h - nameWidth // 2) @ 2.	titleGO translateBy: (h - titleWidth // 2) @ (v // 2 + 2).	rrGO := GFRoundedRectangleGO rectangle: (0@0 extent: h@v) cornerEllipse: 20@20.	rrGO fillColor: Color cyan. 	aGFNodeGO		cacheFlag: false;		when: #select send: #selectEmployeeGO: to: self with: rrGO;		when: #deselect send: #deselectEmployeeGO: to: self with: rrGO;		when: #generateHandles send: #noHandles to: aGFNodeGO;		setGraphicObjects: (Array with: nameGO with: titleGO with: rrGO);		metaObject: anEmployee.	nodeGOs at: anEmployee name put: aGFNodeGO.	^aGFNodeGO</body><body package="GF/ST OrgChart">deselectEmployeeGO: aRoundedRectangleGO	aRoundedRectangleGO interface == nil ifTrue: [^self].	aRoundedRectangleGO damageDuring: [		aRoundedRectangleGO			fillColor: Color cyan.	].	interface redraw</body><body package="GF/ST OrgChart">displayRoots: rootEmployees	| layout |	layout := GFTreeLayout forGraph: (FwRootedGraph ordered																roots: rootEmployees																children: [:node | node subordinates]).	layout perform: self orientation.	layout		setCreateNodeGOAction: [:nodeGO |				self createEmployeeGO: nodeGO			];		setCreateLineGOAction: (layout perform: self lineGOAction);		setCreateLabelGOAction: [:nodeAndLineAssoc :label | ].	layout		setMinParentChildSpace: 30 ;		setMinSiblingSpace: 10 ;		setMargins: 10 ;		layout.	"interface drawing 		drawingExtent: (extent := layout graphExtent max: Screen default bounds extent);		visibleArea: (0@0 extent: extent)."	layout rootGOs do: [:each | each recursivelyAddTo: interface].</body><body package="GF/ST OrgChart">dragEmployeeFromList	| emp |	(emp := self selectedEmployee) == nil		ifTrue: [Dialog warn: 'Select an employee first.']		ifFalse: [			interface palette selectTool: (				GFDrawingActionTool new					interface: interface;					activateBlock: [ :drawing | self dropEmployeeIntoOrgChart: emp]					deactivateBlock: [ :drawing | ]			)		]</body><body package="GF/ST OrgChart">dropEmployeeIntoOrgChart: employee	| target supervisor prevSupervisor newOrg |	interface setDefaultTool.	employee == nil ifTrue: [^self bell].	interface drawing graphicObjects isEmpty ifTrue: [		headHoncho := Set with: employee.		^self redisplayWithRefresh: employee.	].	target := interface graphicObjectAt: gfView controller sensor mousePoint.	target == nil ifTrue: [		employee supervisor notNil ifTrue: [ employee supervisor removeSubordinate: employee ].		headHoncho add: employee.		^self redisplayWithRefresh: employee.	].	target isGFGraphNode ifFalse: [^self].	(supervisor := target node value) == employee ifTrue: [^self].	prevSupervisor := employee supervisor.	employee supervisor: supervisor. 	newOrg := FwRootedGraph unordered    					roots: (headHoncho add: target node value; yourself)    					children: [:node | node subordinates]. 	newOrg isCyclic ifTrue: [		employee supervisor: prevSupervisor.		^Dialog warn: 'Cannot create cyclic organizations'.	].	headHoncho := newOrg roots addAll: (newOrg findOrphans collect: [:each | each value]); yourself.	self redisplayWithRefresh: employee</body><body package="GF/ST OrgChart">employeeList	^employees keys asSortedCollection</body><body package="GF/ST OrgChart">employeeSelected	| emp |	(emp := self selectedEmployee) == nil		ifTrue: [self employeeSelected: nil]		ifFalse: [self employeeSelected: emp name]</body><body package="GF/ST OrgChart">employeeSelected: aName	| nodeGO |	self updateEntryFields: aName.	(nodeGO := nodeGOs at: aName ifAbsent: [nil]) == nil		ifTrue: [interface selections: #()]		ifFalse: [interface selections: (Array with: nodeGO)]</body><body package="GF/ST OrgChart">employeesPane	^self paneAt: #employees</body><body package="GF/ST OrgChart">firstSelectedEmployee	| go |	go := interface selections detect: [ :sel | sel isConnectionGO not] ifNone: [nil].	^go == nil		ifTrue: [go]		ifFalse: [go node value]</body><body package="GF/ST OrgChart">lineGOAction	"Return the proper lineGOAction selector for a GFDAGLayout"	^lines		ifTrue: [		"We're using straight line connections"			arrows				ifTrue: [#arrowGOAction]				ifFalse: [#lineGOAction]		]		ifFalse: [		"We're using orthogonal path connections"			vertical				ifTrue: [	"In a vertical orientation"					arrows						ifTrue: [#vertOrthoArrowGOAction]						ifFalse: [#vertOrthoLineGOAction]				]				ifFalse: [	"In a horizontal orientation"					arrows						ifTrue: [#horizOrthoArrowGOAction]						ifFalse: [#horizOrthoLineGOAction]				].		]</body><body package="GF/ST OrgChart">namePane	^self paneAt: #name</body><body package="GF/ST OrgChart">organizationSelected	self organizationSelected: self organizations value</body><body package="GF/ST OrgChart">organizationSelected: aName	self		setEmployees: (Organizations at: aName ifAbsent: [Dictionary new]);		updateEmployees;		updateEntryFields: nil.	nodeGOs do: [:each | each removeActionsForEvent: #deselect].	interface removeAllGOs: interface drawing graphicObjects.	interface drawing 		drawingExtent: Screen default bounds extent;		visibleArea: (0@0 extent: Screen default bounds extent).	headHoncho := (employees select: [ :each | each supervisor == nil and: [ each subordinates isEmpty not] ]) asSet. 	self redisplay</body><body package="GF/ST OrgChart">organizationsMenu	"Return the organizationsMenu for the drop-down"	| orgs |	^Menu		labelArray: (orgs := Organizations keys asSortedCollection)		lines: #()		values: orgs</body><body package="GF/ST OrgChart">organizationsPane	^self paneAt: #organizations</body><body package="GF/ST OrgChart">orientation	"Return the proper orientation selector for a GFDAGLayout"	^vertical		ifTrue: [#vertical]		ifFalse: [#horizontal]</body><body package="GF/ST OrgChart">paneAt: aSymbol	^(self builder componentAt: aSymbol) widget</body><body package="GF/ST OrgChart">redisplay	| roots |	nodeGOs do: [:each | each removeActionsForEvent: #deselect].	interface quietlyRemoveAllGOs: interface drawing graphicObjects.	nodeGOs := Dictionary new.	roots := headHoncho == nil ifTrue: [#()] ifFalse: [headHoncho].	self displayRoots: roots</body><body package="GF/ST OrgChart">redisplayWithRefresh: employee    | employeeName |    self redisplay.    employee == nil ifFalse: [        employeeName := employee name.		(nodeGOs includesKey: employee name) ifTrue: [        	interface selection: (nodeGOs at: employee name).		].        self employeesList selection: employeeName.        self updateEntryFields: employee name.    ]</body><body package="GF/ST OrgChart">selectEmployeeGO: aRoundedRectangleGO	| aName empl |	aRoundedRectangleGO interface == nil ifTrue: [^self].	aRoundedRectangleGO damageDuring: [		aRoundedRectangleGO			fillColor: Color red.	].	aRoundedRectangleGO redraw.	aName := (empl := self firstSelectedEmployee) == nil		ifTrue: [nil]		ifFalse: [empl name].	self employeesList selection = aName ifFalse: [self employeesList selection: aName].	self updateEntryFields: aName</body><body package="GF/ST OrgChart">selectedEmployee	^employees at: self employeesList selection ifAbsent: [nil]</body><body package="GF/ST OrgChart">selectedOrganization	^Organizations at: self organizationsPane currentChoice</body><body package="GF/ST OrgChart">setEmployees: aDictionary	employees := aDictionary</body><body package="GF/ST OrgChart">setOrganizationsUsing: aBuilder	"Set the organizations list using aBuilder where aBuilder can be nil"	aBuilder isNil ifTrue: [^nil].	(aBuilder componentAt: #organizations) widget		menu:			((PluggableAdaptor on: nil asValue)				getBlock: [:m | self organizationsMenu]				putBlock: [:m :v | m value: v]				updateBlock: [:m :a :p | true])		default: nil</body><body package="GF/ST OrgChart">titlePane	^self paneAt: #title</body><body package="GF/ST OrgChart">updateEmployees	self employeesList list: self employeeList</body><body package="GF/ST OrgChart">updateEntryFields: aName	self name value: aName.	aName == nil ifFalse: [self namePane selectFrom: 1 to: aName size].	self title value: (employees at: aName ifAbsent: [GFOrgChartEmployee new]) title</body><body package="GF/ST OrgChart">updateOrganizations: orgName	| orgs org pane |	orgs := Organizations keys asSortedCollection.	orgName == nil		ifTrue: [org := orgs first]		ifFalse: [org := orgName].	pane := self organizationsPane.	pane model value: org.	self organizationSelected: org</body></methods><methods><class-id>Polymorphic.GFOrgChartEditor</class-id> <category>aspects</category><body package="GF/ST OrgChart">employeesList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^employeesList isNil		ifTrue:			[employeesList := SelectionInList new]		ifFalse:			[employeesList]</body><body package="GF/ST OrgChart">gfView		"Return a GFDrawingPane for the aspect of the View"	gfView isNil ifTrue: [ gfView := GFDrawingPane forInterface: self interface ].	^gfView</body><body package="GF/ST OrgChart">interface		"Return the interface; do initialization if required"	interface isNil ifTrue: [ interface := GFDrawingInterface newWithDrawing ].	^interface</body><body package="GF/ST OrgChart">name	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^name isNil		ifTrue:			[name := String new asValue]		ifFalse:			[name]</body><body package="GF/ST OrgChart">organizations	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^organizations isNil		ifTrue:			[organizations := nil asValue]		ifFalse:			[organizations]</body><body package="GF/ST OrgChart">title	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^title isNil		ifTrue:			[title := String new asValue]		ifFalse:			[title]</body></methods><methods><class-id>Polymorphic.GFOrgChartEditor</class-id> <category>initialize-release</category><body package="GF/ST OrgChart">initialize		"Set up the interface and other instance variables"	self interface		noUndo;		setDefaultTool.	nodeGOs := Dictionary new.	vertical := true.	arrows := true.	lines := false.	employeesBuffer := Set new</body><body package="GF/ST OrgChart">postBuildWith: aBuilder	"Set up the drop-down for the organizations"	super postBuildWith: aBuilder.	self		setOrganizationsUsing: aBuilder.	self organizations onChangeSend: #organizationSelected to: self.	self employeesList selectionIndexHolder onChangeSend: #employeeSelected to: self</body></methods><methods><class-id>Polymorphic.GFOrgChartEditor</class-id> <category>drag and drop</category><body package="GF/ST OrgChart">applyEmployeeDrop: aDragContext"A drop has occurred in the OrgChart."	| dict emp |	aDragContext key == self employeeDragKey		ifFalse: [^#dropEffectNone].	dict := aDragContext sourceData clientData.		emp := employees at: (dict at: self employeeDragKey).	self dropEmployeeIntoOrgChart: emp.	^#dropEffectMove.					"Basic Step 7"</body><body package="GF/ST OrgChart">applyEmployeeEnter: aDragContext	aDragContext key == self employeeDragKey		ifFalse: [^#dropEffectNone].	"Basic Step 4"	^#dropEffectMove.					"Basic Step 5"</body><body package="GF/ST OrgChart">applyEmployeeOver: aDragContext	aDragContext key == self employeeDragKey		ifFalse: [^#dropEffectNone].	^#dropEffectMove</body><body package="GF/ST OrgChart">employeeDragKey	^#employee</body><body package="GF/ST OrgChart">startDragOk: obj	^self employeesList selection notNil</body><body package="GF/ST OrgChart">startDragging:  aController	"Drag the currently selected employee. Provide all available information about the context of the employee so that the drop target can use whatever it needs."	| ds dm data |	data := DragDropData new.	data key: self employeeDragKey.	data contextWindow: self builder window.	data contextWidget: aController view.					data contextApplication: self.				data clientData: IdentityDictionary new.	data clientData at: self employeeDragKey put: self employeesList selection.	ds := DropSource new.	dm := DragDropManager 			withDropSource: ds			withData: data.	dm doDragDrop</body></methods><methods><class-id>Polymorphic.GFOrgChartEditor class</class-id> <category>class initialization</category><body package="GF/ST OrgChart">clear	Organizations := nil</body><body package="GF/ST OrgChart">initialize	Organizations := Dictionary new</body><body package="GF/ST OrgChart">initializeForDemo	"self initializeForDemo"	| nameTitles |	self initialize.	nameTitles := Dictionary new		at: 'Goldberg, Adele' put: 'Chairperson';		at: 'Aver, Carolyn' put: 'CFO';		at: 'Lyons, Bill' put: 'President &amp; CEO';		at: 'Cook, T.W.' put: 'VP, Training&amp;Consulting';		at: 'Looney, Kelly' put: 'Manager, Customer Engineering';		at: 'Gabriel, Richard' put: 'VP, Engineering';		at: 'Leibs, David' put: 'Technical Marketer';		at: 'Bay, Duane' put: 'Barbara''s SO';		yourself.	Organizations at: 'PPS' put: Dictionary new.	nameTitles associationsDo: [ :assoc |		(Organizations at: 'PPS') at: assoc key put: (GFOrgChartEmployee name: assoc key title: assoc value)].	nameTitles := Dictionary new		at: 'Anderson, Jim' put: 'Chairperson';		at: 'Carrington, John' put: 'President &amp; CEO';		at: 'Sharfman, Josh' put: 'VP of Development';		at: 'Wirfs-Brock, Allen' put: 'Smalltalk Guru';		at: 'Murphy, Tom' put: 'VS Product Manager';		at: 'Goldman, Dan' put: 'VP in charge of Hal';		at: 'Noparstak, Barbara' put: 'Director';		yourself.	Organizations at: 'Digitalk' put: Dictionary new.	nameTitles associationsDo: [ :assoc | 		(Organizations at: 'Digitalk') at: assoc key put: (GFOrgChartEmployee name: assoc key title: assoc value)].</body></methods><methods><class-id>Polymorphic.GFOrgChartEditor class</class-id> <category>opening</category><body package="GF/ST OrgChart">openForDemo	"GFOrgChartEditor openForDemo"	self initializeForDemo.	^self openOn: (self new						organizationSelected: 'PPS';						yourself)</body><body package="GF/ST OrgChart">postLoadActionFor: aParcel	GFOrgChartEditor openForDemo</body></methods><methods><class-id>Polymorphic.GFOrgChartEditor class</class-id> <category>parcel load/unload</category><body package="GF/ST OrgChart">postLoadFrom: aParcel	GFOrgChartEditor openForDemo</body><body package="GF/ST OrgChart">preUnloadFor: aParcel	"Close any open applications."	| definedAppClasses |	definedAppClasses := aParcel definedClasses select: [:c| c inheritsFrom: ApplicationModel].	ScheduledControllers scheduledControllers do:		[:ctrlr |		(definedAppClasses contains: [:dac| ctrlr model isKindOf: dac]) ifTrue:			[ctrlr closeAndUnschedule]]</body></methods><methods><class-id>Polymorphic.GFOrgChartEditor class</class-id> <category>interface specs</category><body package="GF/ST OrgChart">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Organization Chart Editor' 			#bounds: #(#Rectangle 196 672 756 1003 ) ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#MenuButtonSpec 					#layout: #(#Rectangle 52 6 206 27 ) 					#name: #organizations 					#model: #organizations ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 40 0 6 0 1 0 ) 					#label: 'Org.' ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 5 31 104 57 ) 					#model: #addOrganization 					#label: 'Add' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 107 31 206 57 ) 					#model: #removeOrganization 					#label: 'Remove' 					#defaultable: true ) 				#(#LabelSpec 					#layout: #(#Point 5 63 ) 					#label: 'Employees' ) 				#(#SequenceViewSpec 					#properties: 					#(#PropertyListDictionary #dragOkSelector 						#startDragOk: #dragStartSelector 						#startDragging: ) 					#layout: #(#LayoutFrame 7 0 85 0 205 0 -99 1 ) 					#name: #employees 					#model: #employeesList 					#menu: #employeesMenu ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 56 0 -86 1 1 0 ) 					#label: 'Name' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 59 0 -87 1 205 0 -64 1 ) 					#name: #name 					#model: #name ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin 56 0 -56 1 1 0 ) 					#label: 'Title' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 59 0 -57 1 205 0 -34 1 ) 					#name: #title 					#model: #title ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 5 0 -29 1 104 0 -3 1 ) 					#model: #addEmployee 					#label: 'Add' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 107 0 -29 1 206 0 -3 1 ) 					#model: #removeEmployee 					#label: 'Remove' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 210 5 293 57 ) 					#name: #orientationButton 					#model: #toggleOrientation 					#label: 'Vertical' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 296 5 392 57 ) 					#name: #connectionTypeButton 					#model: #toggleConnectionType 					#label: 'Orthogonal' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 395 5 468 57 ) 					#name: #arrowLineButton 					#model: #toggleArrowLine 					#label: 'Arrow' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 471 5 555 33 ) 					#model: #print 					#label: 'Print' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 471 34 511 57 ) 					#model: #zoomIn 					#label: '+' 					#defaultable: true ) 				#(#ActionButtonSpec 					#layout: #(#Rectangle 517 34 555 57 ) 					#model: #zoomOut 					#label: '-' 					#defaultable: true ) 				#(#ArbitraryComponentSpec 					#properties: 					#(#PropertyListDictionary #dropSelector 						#applyEmployeeDrop: #dragOverSelector 						#applyEmployeeOver: #dragEnterSelector 						#applyEmployeeEnter: ) 					#layout: #(#LayoutFrame 210 0 61 0 -6 1 -5 1 ) 					#name: #gfView 					#flags: 11 					#component: #gfView ) ) ) )</body></methods><methods><class-id>Polymorphic.GFOrgChartEditor class</class-id> <category>resources</category><body package="GF/ST OrgChart">employeesMenu	"UIMenuEditor new openOnClass: self andSelector: #employeesMenu"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#label: 'Copy' ) 			#(#MenuItem 				#label: 'Paste' ) 			#(#MenuItem 				#label: 'Copy All' ) 			#(#MenuItem 				#label: 'Add to Chart' ) ) #(2 1 1 ) #(#copyEmployee #pasteEmployee #copyAllEmployees #dragEmployeeFromList ) ) decodeAsLiteralArray</body></methods><initialize><class-id>Polymorphic.GFOrgChartEditor</class-id></initialize><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class></st-source>