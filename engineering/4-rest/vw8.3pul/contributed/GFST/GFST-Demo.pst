<?xml version="1.0"?><st-source><!-- Name: GF/ST DemoNotice: Copyright © 2002,2000,1999 Cincom Systems, Inc.  All Rights Reserved.Comment: This parcel contains a demonstration framework for the GF/ST Graphics Framework for Smalltalk.  Loading the Parcel opens a Launcher from which you can start a number of demonstrations.DbIdentifier: bear73DbTrace: 57208DbUsername: kgreekDbVersion: 7.4 - 1DevelopmentPrerequisites: #(#(#any 'GF/ST Base' '') #(#any 'GF/ST Visual Inspector' ''))PackageName: GF/ST DemoParcel: #('GF/ST Demo')ParcelName: GF/ST DemoPrerequisiteParcels: #(#('GF/ST Base' '') #('GF/ST Visual Inspector' ''))PrintStringCache: (7.4 - 1,kgreek)Version: 7.4 - 1Post-Load Block: 	[:pkg| Polymorphic.GFDemoLauncher postLoadFrom: pkg ]Pre-Unload Block: 	[:pkg| Polymorphic.GFDemoLauncher preUnloadFor: pkg ]Date: 1:14:05 PM April 1, 2016 --><time-stamp>From VisualWorks®, Pre-Release 8.2 (apr16.1) of April 1, 2016 on April 1, 2016 at 1:14:05 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Node</name><environment>Polymorphic</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name nextNode </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>InterestingObjects</category><attributes><package>GF/ST Demo</package></attributes></class><class><name>Workstation</name><environment>Polymorphic</environment><super>Polymorphic.Node</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>InterestingObjects</category><attributes><package>GF/ST Demo</package></attributes></class><class><name>FileServer</name><environment>Polymorphic</environment><super>Polymorphic.Node</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>InterestingObjects</category><attributes><package>GF/ST Demo</package></attributes></class><class><name>PsiDemoVisualInspector</name><environment>Polymorphic</environment><super>Polymorphic.PsiVisualInspector</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFDemo-GFDemo80</category><attributes><package>GF/ST Demo</package></attributes></class><class><name>GFAboutDialog</name><environment>Polymorphic</environment><super>UI.SimpleDialog</super><private>false</private><indexed-type>none</indexed-type><inst-vars>address copyright figureInterface spinProcess </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFDemo-GFDemo80</category><attributes><package>GF/ST Demo</package></attributes></class><class><name>Figure</name><environment>Polymorphic</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>points pitch yaw roll perspective globalOrigin faceOrder origin faceSorter </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFTesting</category><attributes><package>GF/ST Demo</package></attributes></class><class><name>Cube</name><environment>Polymorphic</environment><super>Polymorphic.Figure</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dim </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFTesting</category><attributes><package>GF/ST Demo</package></attributes></class><class><name>PsiSolid</name><environment>Polymorphic</environment><super>Polymorphic.Cube</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFTesting</category><attributes><package>GF/ST Demo</package></attributes></class><class><name>GFNetworkNode</name><environment>Polymorphic</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name connections weights </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GoFigureGoodies</category><attributes><package>GF/ST Demo</package></attributes></class><comment><class-id>Polymorphic.GFNetworkNode</class-id><body>GFNetworkNode class comment:    Description:        The GFNetworkNode class is the domain model for nodes on a network.  A 		GFNetworkNode knows who it connects to as well as a weight for each 		connection.  Even though these things correspond one-to-one, it seemed 		easier to let weights be indexed by GFNetworkNode in a dictionary, since 		weights are set dynamically by someone externally (e.g., by the 		GFNetworkEditor user).    Instance Variables:        connections &lt;OrderedCollection of: GFNetworkNode&gt;	The collection of 			GFNetworkNodes that I connect to and which connect to me.		name &lt;String&gt;		What's in a name?		weights &lt;Dictionary withKeys: GFNetworkNode withValues: Number&gt;		Weights 			are used conceptually to hold how heavy the network traffic is between 			two nodes.    Usage:        See GFNetworkEditor.  Note that when you use a GFNetworkNode and you connect 		it to another node, it tells that node to update its connections.  The byproduct of this 		behavior is that if you delete a node in your application, other nodes may be holding 		onto it.  Therefore, you should be careful to disconnect things first using #disconnectAll.</body></comment><class><name>CubeInterface</name><environment>Polymorphic</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>figures interface gos spinProcess animateButton </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFTesting</category><attributes><package>GF/ST Demo</package></attributes></class><class><name>GFNetworkEditor</name><environment>Polymorphic</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>weight gfView nodeGOs interface balancing balanceProcess </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GoFigureGoodies-GoFigureGoodies80</category><attributes><package>GF/ST Demo</package></attributes></class><comment><class-id>Polymorphic.GFNetworkEditor</class-id><body>GFNetworkEditor class comment:	Description:        The GFNetworkEditor class provides an example of basic GF/ST usage, including:            - Creating GO's (see #nodeGOFor:)            - Grouping GO's into a GroupGO (see #nodeGOFor:)            - Creating a GFDrawingInterface and tying it to the ApplicationModel (see #initialize)            - Hooking into GO events to take action in the GFNetworkEditor, such as:                #select, #deselect, #generateHandles (see #addNode and #handlesFor:)            - Telling GO's to move on the screen programmatically (as opposed to letting                the user move them (see #stepNetwork)            - Tying GO's to underlying domain models (see GFNetworkNode class as well                as #addNode and #nodeGOFor: here)            - Letting GO's hold onto the object they are displaying via the metaObject property                (see #nodeGOFor:)               - Specializing handle display location and connection behavior                (see #handlesFor:, which is invoked for a GO because we hook into #generateHandles)    Instance Variables:        weight &lt;ValueHolder&gt;        Holds the value of the slider used to set connection weights        gfView &lt;GFDrawingPane&gt;   The drawing pane.  Note that #gfView is the aspect of the ViewHolder widget.        interface &lt;GFDrawingInterface&gt;        An instance of GFDrawingInterface, your main way to manipulate            a GFDrawing and the GO's in it.        nodeGOs &lt;OrderedCollection of: GFGroupGO&gt;        An OrderedCollection of GO's that represent            instances of GFNetworkNode.  Each GO in the collection can tell you what GFNetworkNode it displays            by asking for its metaObject.        balancing &lt;Boolean&gt;    A Boolean; true means that a background process is balancing the network,            causing the display to update; otherwise, false.        balancingProcess &lt;Process&gt;    An instance of a Process that is created when you balance the network            using #balanceNetwork.  We want to hold onto this so we can terminate it using #haltNetwork.    Usage:        To open the GFNetworkEditor, evaluate:            GFNetworkEditor open.</body></comment><class><name>InterestingObjectGenerator</name><environment>Polymorphic</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>InterestingObjects</category><attributes><package>GF/ST Demo</package></attributes></class><class><name>Pyramid</name><environment>Polymorphic</environment><super>Polymorphic.Figure</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dim </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFTesting</category><attributes><package>GF/ST Demo</package></attributes></class><class><name>GFDemoLauncher</name><environment>Polymorphic</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFDemo-GFDemo80</category><attributes><package>GF/ST Demo</package></attributes></class><class><name>PsiDemoObjectDrawingInterface</name><environment>Polymorphic</environment><super>Polymorphic.PsiObjectDrawingInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>InterestingObjects-InterestingObjects80</category><attributes><package>GF/ST Demo</package></attributes></class><class><name>TokenRingNetwork</name><environment>Polymorphic</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name nodes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>InterestingObjects</category><attributes><package>GF/ST Demo</package></attributes></class><methods><class-id>Polymorphic.Node</class-id> <category>GF/ST</category><body package="GF/ST Demo">initialize    name := 'Unnamed'</body><body package="GF/ST Demo">name: aString    name := aString</body><body package="GF/ST Demo">nextNode    ^nextNode</body><body package="GF/ST Demo">nextNode: aNode    nextNode := aNode</body><body package="GF/ST Demo">printOn: aStream    ^aStream nextPutAll: self class name, ': ', name</body></methods><methods><class-id>Polymorphic.Node class</class-id> <category>GF/ST</category><body package="GF/ST Demo">new    ^super new initialize</body></methods><methods><class-id>Polymorphic.PsiDemoVisualInspector</class-id> <category>aspects</category><body package="GF/ST Demo">interface"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	interface isNil ifTrue: [ interface := PsiDemoObjectDrawingInterface newWithDrawing ].	^interface</body></methods><methods><class-id>Polymorphic.GFAboutDialog</class-id> <category>initialize-release</category><body package="GF/ST Demo">postBuildWith: aBuilder"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	self addPsiSolid.	close onChangeSend: #changeRequest to: self</body><body package="GF/ST Demo">postOpenWith: aBuilder"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	self startSpin</body><body package="GF/ST Demo">startSpin"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    spinProcess := [	Object errorSignal		handle: [ :ex | self stopSpin.					ex return ]		do: [[ true ] whileTrue: [	            figureInterface  	              changeYaw: 15      	          pitch: 4      	          roll: 10      	          forFigure: 1.			Processor yield]]	] forkAt: Processor userBackgroundPriority.</body><body package="GF/ST Demo">stopSpin"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    spinProcess notNil ifTrue: [ spinProcess terminate ].</body></methods><methods><class-id>Polymorphic.GFAboutDialog</class-id> <category>aspects</category><body package="GF/ST Demo">address"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	^address isNil		ifTrue:			[address := self class address asValue]		ifFalse:			[address]</body><body package="GF/ST Demo">copyright"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	^copyright isNil		ifTrue:			[copyright := self class copyright asValue]		ifFalse:			[copyright]</body><body package="GF/ST Demo">figureInterface"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	figureInterface isNil 		ifTrue: [figureInterface := CubeInterface new initialize.				figureInterface interface: (GFDrawingInterface newWithDrawing). 				figureInterface interface drawing drawingExtent: (60@50).].	^figureInterface</body><body package="GF/ST Demo">gfView"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	^ScrollWrapper on: (GFDrawingPane forInterface: self figureInterface interface)</body></methods><methods><class-id>Polymorphic.GFAboutDialog</class-id> <category>As yet unclassified</category><body package="GF/ST Demo">changeRequest"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	self stopSpin.	^true</body></methods><methods><class-id>Polymorphic.GFAboutDialog</class-id> <category>private</category><body package="GF/ST Demo">spinProcess"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	^spinProcess</body></methods><methods><class-id>Polymorphic.GFAboutDialog</class-id> <category>figures</category><body package="GF/ST Demo">addPsiSolid"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    figureInterface addPsiSolidAt: 0@0.    figureInterface figures first globalOrigin: 50@45.    figureInterface figures first setYaw: 6.26 pitch: 5.76 roll: 6.28.    figureInterface updateFigureIndex: figureInterface figures size.    figureInterface interface disableMenu.    figureInterface interface selectTool: GFTool new.</body></methods><methods><class-id>Polymorphic.GFAboutDialog class</class-id> <category>constants</category><body package="GF/ST Demo">address"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	^'Cincom Systems, Inc. \ www.cincomsmalltalk.com' withCRs</body><body package="GF/ST Demo">copyright"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	^'Copyright (C) 1995, Polymorphic Software, Inc.  All rights reserved.\Copyright (C) 1999-2001 Cincom Systems, Inc.All Rights Reserved' withCRs</body></methods><methods><class-id>Polymorphic.Figure</class-id> <category>GF/ST</category><body package="GF/ST Demo">changeLocationBy: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    origin translatedByPoint: delta.    self computePoints.</body><body package="GF/ST Demo">changeLocationTo: pt"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    origin := pt.    self computePoints.</body><body package="GF/ST Demo">changePitch: p yawBy: y"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    yaw := yaw + y.    pitch := pitch + p.    self computePoints.</body><body package="GF/ST Demo">changeYaw: y pitch: p roll: r"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    yaw := yaw + y.    pitch := pitch + p.    roll := roll + r.    self computePoints.</body><body package="GF/ST Demo">computeNewFaceOrderFrom: rawFigure"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    | fSort xe ye ze pointIndices u1 u2 u3 v1 v2 v3 nVec wx wy wz sideSelectors|    sideSelectors := self class faceSelectors.    fSort := Array new: sideSelectors size.    "vector of the view"    xe := (roll sin) * (yaw cos).    ye := (yaw sin) * (roll sin).    ze := roll cos.    1 to: sideSelectors size do: [ :side |            pointIndices := self perform: (sideSelectors at: side).            "u represents the vector from the firstPoint to the second point of the face"            u1 := ((rawFigure at: (pointIndices at: 2)) at: 1) - ((rawFigure at: (pointIndices at: 1)) at: 1).            u2 := ((rawFigure at: (pointIndices at: 2)) at: 2) - ((rawFigure at: (pointIndices at: 1)) at: 2).            u3 := ((rawFigure at: (pointIndices at: 2)) at: 3) - ((rawFigure at: (pointIndices at: 1)) at: 3).            "v represents the vector from the firstPoint to the third point of the face"            v1 := ((rawFigure at: (pointIndices at: 3)) at: 1) - ((rawFigure at: (pointIndices at: 1)) at: 1).            v2 := ((rawFigure at: (pointIndices at: 3)) at: 2) - ((rawFigure at: (pointIndices at: 1)) at: 2).            v3 := ((rawFigure at: (pointIndices at: 3)) at: 3) - ((rawFigure at: (pointIndices at: 1)) at: 3).            "nVec is the normalized vector to the plane defined by u and v"            nVec := (Array new: 3).            nVec at: 1 put: ((u2 * v3) - (v2 * u3)).            nVec at: 2 put: ((u3 * v1) - (v3 * u1)).            nVec at: 3 put: ((u1 * v2) - (v1 * u2)).            wx := xe - ((rawFigure at: (pointIndices at: 1)) at: 1).            wy := ye - ((rawFigure at: (pointIndices at: 1)) at: 2).            wz := ze - ((rawFigure at: (pointIndices at: 1)) at: 3).            fSort at: side put: (Array with: side with: (((nVec at: 1) * wx) + ((nVec at: 2) * wy) + ((nVec at: 3) * wz))).    ].    faceSorter sortOnNewCollection: fSort.    faceOrder := faceSorter asOrderedCollection</body><body package="GF/ST Demo">computePoints"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    "This is open coded for speed and because this is simply a proof of concept"    | cr1 cr2 cr3 sr1 sr2 sr3 xa ya za x y z figure yArray rho |    rho := 300.    cr1 := yaw cos.    sr1 := yaw sin.    cr2 := roll cos.    sr2 := roll sin.    cr3 := pitch cos.    sr3 := pitch sin.    figure := self rawFigure.    yArray := Array new: figure size.    1 to: figure size do: [ :i |        xa := (cr1 * ((figure at: i) at: 1)) - (sr1 * ((figure at: i) at: 2)).        ya := (sr1 * ((figure at: i) at: 1)) + (cr1 * ((figure at: i) at: 2)).        (figure at: i) at: 1 put: (x := ( (cr2 * xa) + (sr2 * ((figure at: i) at: 3))) + origin x).        za := (cr2 * ((figure at: i) at: 3)) - (sr2 * xa).        (figure at: i) at: 2 put: (y := ((cr3 * ya) - (sr3 * za))+ rho).        (figure at: i) at: 3 put: (z := ((sr3 * ya) + (cr3 * za)) + origin y).        y rounded = 0            ifTrue: [ points at: i put: (0@0) ]            ifFalse: [ points at: i put: (((x / y) * perspective) rounded + globalOrigin x) @ (((z / y) * perspective) rounded + globalOrigin y)].        ].        self computeNewFaceOrderFrom: figure.</body><body package="GF/ST Demo">faceOrder"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^faceOrder collect: [ :each | each at: 1 ]</body><body package="GF/ST Demo">faceOrderVerbose"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^faceOrder</body><body package="GF/ST Demo">faceSelectors"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^self class faceSelectors</body><body package="GF/ST Demo">globalOrigin: aPoint"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    globalOrigin := aPoint.</body><body package="GF/ST Demo">initFaceOrder"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    self subclassResponsibility</body><body package="GF/ST Demo">initialize"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    points := Array new: self rawFigure size.    self initFaceOrder.    pitch := 6.28.    yaw := 6.28.    roll := 6.28.    perspective := 500.0.    globalOrigin := 200@200.    origin := 0@0.    faceSorter := (SortedCollection new: faceOrder size) sortBlock: [ :y1 :y2 | (y1 at: 2) &gt;= (y2 at: 2) ].    self computePoints.</body><body package="GF/ST Demo">pitch"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^pitch</body><body package="GF/ST Demo">polygonFor: faceSelector"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    | tArray pts ptArray|    ptArray := self perform: faceSelector.    tArray := (Array new: (ptArray size + 1)).    1 to: tArray size - 1 do: [ :i |        tArray at: i put: (points at: (ptArray at: i)) deepCopy].    tArray at: tArray size put: (tArray at: 1).    ^tArray</body><body package="GF/ST Demo">rawFigure"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^self subclassResponsibility</body><body package="GF/ST Demo">roll"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^roll</body><body package="GF/ST Demo">setYaw: y pitch: p roll: r"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    yaw := y.    pitch := p.    roll := r.    self computePoints.</body><body package="GF/ST Demo">yaw"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^yaw</body></methods><methods><class-id>Polymorphic.Figure class</class-id> <category>GF/ST</category><body package="GF/ST Demo">faceSelectors"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^self subclassResponsibility</body></methods><methods><class-id>Polymorphic.Cube</class-id> <category>GF/ST</category><body package="GF/ST Demo">changeRawXBy: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    dim at: 1 put: ((dim at: 1) + delta)</body><body package="GF/ST Demo">changeRawYBy: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    dim at: 2 put: ((dim at: 2) + delta)</body><body package="GF/ST Demo">changeRawZBy: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    dim at: 3 put: ((dim at: 3) + delta)</body><body package="GF/ST Demo">changeXBy: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    self changeRawXBy: delta x/2.    self computePoints.</body><body package="GF/ST Demo">changeYBy: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    self changeRawYBy: delta y/2.    self computePoints.</body><body package="GF/ST Demo">changeZBy: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    self changeRawZBy: delta y /2.    self computePoints.</body><body package="GF/ST Demo">depth"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^self rawY</body><body package="GF/ST Demo">f1Points"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    "front"    ^#(1 2 3 4)</body><body package="GF/ST Demo">f2Points"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"   "left face"    ^#(8 5 1 4)</body><body package="GF/ST Demo">f3Points"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved""top face"    ^#(5 6 2 1)</body><body package="GF/ST Demo">f4Points"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    "bottom face"    ^#(4 3 7 8)</body><body package="GF/ST Demo">f5Points"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    "right face"    ^#( 6 7 3 2)</body><body package="GF/ST Demo">f6Points"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    "back face"    ^#(8 7 6 5)</body><body package="GF/ST Demo">faceAt: i"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^self class faceSelectors at: i</body><body package="GF/ST Demo">initDimensions"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    dim := Array with: 15 with: 15 with: 15</body><body package="GF/ST Demo">initFaceOrder"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    faceOrder := #(1 2 3 4 5 6).</body><body package="GF/ST Demo">initialize"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    self initDimensions.    super initialize.</body><body package="GF/ST Demo">rawFigure"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    | x y z |    x := self rawX.    y := self rawY.    z := self rawZ.    ^(Array new: 8)            at: 1 put: (Array with: x negated                                      with: y negated                                      with: z negated);            at: 2 put: (Array with: x                                      with: y negated                                      with: z negated);            at: 3 put: (Array with: x                                      with: y negated                                      with: z);            at: 4 put: (Array with: x negated                                      with: y negated                                      with: z);            at: 5 put: (Array with: x negated                                      with: y                                      with: z negated);            at: 6 put: (Array with: x                                      with: y                                      with: z negated);            at: 7 put: (Array with: x                                      with: y                                      with: z );            at: 8 put: (Array with: x negated                                      with: y                                      with: z);            yourself</body><body package="GF/ST Demo">rawX"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^dim at: 1</body><body package="GF/ST Demo">rawY"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^dim at: 2</body><body package="GF/ST Demo">rawZ"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^dim at: 3</body></methods><methods><class-id>Polymorphic.Cube class</class-id> <category>GF/ST</category><body package="GF/ST Demo">faceSelectors"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^#(f1Points f2Points f3Points f4Points f5Points f6Points)</body></methods><methods><class-id>Polymorphic.PsiSolid</class-id> <category>GF/ST</category><body package="GF/ST Demo">f1Points    "front"    ^#(1 5 4)</body><body package="GF/ST Demo">f2Points    "front left"    ^#(1 2 5)</body><body package="GF/ST Demo">f3Points    "top"    ^#(1 4 3)</body><body package="GF/ST Demo">f4Points    "right front"    ^#(1 3 2 )</body><body package="GF/ST Demo">f5Points    "bottom"    ^#(6 4 5)</body><body package="GF/ST Demo">f6Points    "back"    ^#(6 5 2)</body><body package="GF/ST Demo">f7Points    "back left"    ^#(6 3 4)</body><body package="GF/ST Demo">f8Points    "back right"    ^#(6 2 3)</body><body package="GF/ST Demo">initDimensions"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    dim := Array with: 15 with: 15 with: 21</body><body package="GF/ST Demo">initFaceOrder"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    faceOrder := #(1 2 3 4 5 6 7 8).</body><body package="GF/ST Demo">rawFigure    | x y z |    x := self rawX.    y := self rawY.    z := self rawZ.    ^(Array new: 6)            at: 1 put: (Array with: 0                                      with: 0                                      with: z);            at: 2 put: (Array with: x negated                                      with: y                                      with: 0);            at: 3 put: (Array with: x                                      with: y                                      with: 0);            at: 4 put: (Array with: x                                      with: y negated                                      with: 0);            at: 5 put: (Array with: x negated                                      with: y negated                                      with: 0 );            at: 6 put: (Array with: 0                                      with: 0                                      with: z negated );            yourself</body><body package="GF/ST Demo">rawX    ^dim at: 1</body><body package="GF/ST Demo">rawY    ^dim at: 2</body><body package="GF/ST Demo">rawZ    ^dim at: 3</body></methods><methods><class-id>Polymorphic.PsiSolid class</class-id> <category>GF/ST</category><body package="GF/ST Demo">faceSelectors    ^#(f1Points f2Points f3Points f4Points f5Points f6Points f7Points f8Points)</body></methods><methods><class-id>Polymorphic.GFNetworkNode</class-id> <category>accessing-connections</category><body package="GF/ST Demo">breakConnectionFrom: aNode        "The node aNode sends me this message when someone tells it to disconnect from me.        I should remove it from my list of connections and weights."    (connections includes: aNode) ifTrue: [        connections remove: aNode.        weights removeKey: aNode.    ].</body><body package="GF/ST Demo">breakConnectionTo: aNode        "Break my connection to aNode and tell it to break its connection from me."    (connections includes: aNode) ifTrue: [        connections remove: aNode.        weights removeKey: aNode.        aNode breakConnectionFrom: self.    ].</body><body package="GF/ST Demo">connectFrom: aNode        "The node aNode sends me this message to let me know it connected to me.        I need to update my connections and weights."    (connections includes: aNode) ifFalse: [        connections add: aNode.        self weightAt: aNode put: 0.    ].</body><body package="GF/ST Demo">connectTo: aNode        "Connect me to aNode by adding it to my connections and adding a key to my weights.        Then, tell aNode that it is being connected from me."    aNode == self ifTrue: [^nil].    (connections includes: aNode) ifFalse: [        connections add: aNode.        self weightAt: aNode put: 0.        aNode connectFrom: self.    ].</body><body package="GF/ST Demo">connections        "Return my collection of GFNetworkNodes I connect to."    ^connections</body><body package="GF/ST Demo">disconnectAll        "Sever all my connections to all other nodes.        I need to copy my connections first because I'm going to be modifying        the collection in #breakConnectionTo:"    connections copy do: [ :node | self breakConnectionTo: node]</body><body package="GF/ST Demo">disconnectFrom: aNode        "Disconnect me from aNode."    self breakConnectionTo: aNode</body></methods><methods><class-id>Polymorphic.GFNetworkNode</class-id> <category>accessing</category><body package="GF/ST Demo">name    ^name</body><body package="GF/ST Demo">name: aName    name := aName</body></methods><methods><class-id>Polymorphic.GFNetworkNode</class-id> <category>accessing-weights</category><body package="GF/ST Demo">weightAt: aNode        "Return the weight of the connection between me and aNode.        If aNode does not exist as one of my connections, signal an error."    | nodeName |    ^self weightAt: aNode ifAbsent: [        nodeName := aNode == nil ifTrue: ['nil'] ifFalse: [aNode name].        self error: 'Weight for connection to ', nodeName, ' does not exist'.    ]</body><body package="GF/ST Demo">weightAt: aNode ifAbsent: aBlock        "Return the weight of the connection between me and aNode.        If aNode does not exist as one of my connections, evaluate aBlock."    ^weights at: aNode ifAbsent: aBlock</body><body package="GF/ST Demo">weightAt: aNode put: aNumber        "Set the weight of the connection between me and aNode to aNumber."    weights at: aNode put: aNumber</body></methods><methods><class-id>Polymorphic.GFNetworkNode</class-id> <category>initialize-release</category><body package="GF/ST Demo">initialize        "Set my instance variables to the appropriate kinds of objects."    self name: 'Unnamed'.    connections := OrderedCollection new.    weights := Dictionary new</body></methods><methods><class-id>Polymorphic.GFNetworkNode</class-id> <category>printing</category><body package="GF/ST Demo">printOn: aStream        "Provide a little bit more useful information for printString than my class name."    super printOn: aStream.    aStream nextPutAll: ' named: ', name</body></methods><methods><class-id>Polymorphic.GFNetworkNode class</class-id> <category>instance creation</category><body package="GF/ST Demo">new        "Return a new initialized instance of me"    ^super new initialize</body></methods><methods><class-id>Polymorphic.CubeInterface</class-id> <category>GF/ST</category><body package="GF/ST Demo">addButtons	"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	| go buttons spec |	buttons := OrderedCollection new: 5.	go := GFHostWidgetGO area: (1@1 extent: 72@35).	go disableInteraction.	go setHostWidget: (spec := GFHostWidgetGO defaultButtonWidget).	spec widget labelString: 'Clear'.	go when: #select send: #clear to: self.	buttons add: go.	go := GFHostWidgetGO area: (72@1 extent: 72@35).	go disableInteraction.	go setHostWidget: (spec := GFHostWidgetGO defaultButtonWidget).	spec widget labelString: 'Cube'.	go when: #select send: #addCube to: self.	buttons add: go.	go := GFHostWidgetGO area: (144@1 extent: 72@35).	go disableInteraction.	go setHostWidget: (spec := GFHostWidgetGO defaultButtonWidget).	spec widget labelString: 'Pyramid'.	go when: #select send: #addPyramid to: self.	buttons add: go.	go := GFHostWidgetGO area: (216@1 extent: 72@35).	go disableInteraction.	go setHostWidget: (spec := GFHostWidgetGO defaultButtonWidget).	spec widget labelString: 'Tensegrity'.	go when: #select send: #addPsiSolid to: self.	buttons add: go.	go := GFHostWidgetGO area: (288@1 extent: 72@35).	go disableInteraction.	go setHostWidget: (spec := GFHostWidgetGO defaultButtonWidget).	spec widget labelString: 'Animate'.	go when: #select send: #toggleAnimation to: self.	go metaObject: #animateButton.	go widget disable.	animateButton := go.	buttons add: go.	buttons do: 		[:each | 		interface addGO: each. 		each resetHostWidget ].</body><body package="GF/ST Demo">addCube"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"   self addFigure: Cube new initialize.   self updateFigureIndex: figures size.   spinProcess == nil ifTrue: [ interface selections: (Array with: gos last first container) ].	animateButton widget enable.</body><body package="GF/ST Demo">addFigure: aFigure"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	| composite gCol sides colors side color go |	sides := aFigure class faceSelectors.	gCol := OrderedCollection new: (sides size + 1).	(colors := OrderedCollection new: 6)		add: Color darkPink;		add: Color white;		add: Color blue;		add: Color green;		add: Color yellow. 	composite := GFCompositeGO new.	1 to: sides size			do: [ :i |				side := sides at: i.				color := colors at: ((i rem: colors size) + 1).				go :=  GFPolylineGO withPoints: (aFigure polygonFor: side).				go fillColor: color.				go when: #needsPositionHandle					 send: #pressHandleForFigureIndex:					 to: self					 with: (gos size + 1).				go when: #generateHandles					 send: #handlesForFigureIndex:					 to: self					 with: (gos size + 1).				go when: #getMenu					 send: #menuForFigureIndex:					 to: self					 with: (Array with: go with: (gos size + 1)).				gCol add: go.				composite addLast: go.				go metaObject: self ].	composite when: #needsPositionHandle					 send: #pressHandleForFigureIndex:					 to: self					 with: (gos size + 1).	composite when: #generateHandles					 send: #handlesForFigureIndex:					 to: self					 with: (gos size + 1).	composite when: #getMenu					 send: #menuForFigureIndex:					 to: self					 with: (Array with: nil with: (figures size + 1)).	composite visibleArea: composite firstGO displayBox.	composite metaObject: self.	gCol add: composite.	interface quietlyAddGO: composite.	figures add: aFigure.	self gos add: gCol.</body><body package="GF/ST Demo">addPsiSolid"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	| lines container |	lines := Array new: 3.	self addFigure: PsiSolid new initialize.	1 to: ( figures last faceSelectors size )			do: [ :i |					((gos last) at: i) fillColor: nil.					((gos last) at: i) when: #getMenu					 send: #menuForPsiSolidIndex:					 to: self					 with: (Array with: ((gos last) at: i) with: (gos size)) ].	container := gos last first container.	lines at: 1 put: (GFDependentLineGO					   startLocation: (GFLocator on: (gos last at:1) at: #point: with: 1)					   stopLocation:  (GFLocator on: (gos last at:8) at: #point: with: 1)).	(lines at: 1) color: Color red.	lines at: 2 put: (GFDependentLineGO					   startLocation: (GFLocator on: (gos last at: 2) at: #point: with: 2)					   stopLocation:  (GFLocator on: (gos last at: 7) at: #point: with: 3)).	(lines at: 2) color: Color blue.	lines at: 3 put: (GFDependentLineGO					   startLocation: (GFLocator on: (gos last at: 4) at: #point: with: 2)					   stopLocation:  (GFLocator on: (gos last at: 5) at: #point: with: 3)).	(lines at: 3) color: Color green.	lines do: [ :line |		line width: 3.		container addLast: line.		line disableMenu ].	self updateFigureIndex: figures size.	spinProcess == nil ifTrue: [interface selections: (Array with: container).].	animateButton widget enable.</body><body package="GF/ST Demo">addPsiSolidAt: pt"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	| lines container |	lines := Array new: 3.	self addFigure: PsiSolid new initialize.	figures last changeLocationTo: pt.	1 to: ( figures last faceSelectors size ) do: [ :i | ((gos last) at: i) fillColor: nil ].	container := gos last last.	lines at: 1 put: (GFDependentLineGO					   startLocation: (GFLocator on: (gos last at:1) at: #point: with: 1)					   stopLocation:  (GFLocator on: (gos last at:8) at: #point: with: 1)).	(lines at: 1) color: Color red.	lines at: 2 put: (GFDependentLineGO					   startLocation: (GFLocator on: (gos last at: 2) at: #point: with: 2)					   stopLocation:  (GFLocator on: (gos last at: 7) at: #point: with: 3)).	(lines at: 2) color: Color blue.	lines at: 3 put: (GFDependentLineGO					   startLocation: (GFLocator on: (gos last at: 4) at: #point: with: 2)					   stopLocation:  (GFLocator on: (gos last at: 5) at: #point: with: 3)).	(lines at: 3) color: Color green.	lines do: [ :line |		line width: 3.		container addLast: line ].	self updateFigureIndex: figures size.</body><body package="GF/ST Demo">addPyramid"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	self addFigure: Pyramid new initialize.	self updateFigureIndex: figures size.	spinProcess == nil ifTrue: [ interface selections: (Array with: gos last first container) ].	animateButton widget enable.</body><body package="GF/ST Demo">changeLocation: i delta: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    (figures at: i) changeLocationBy: delta /2.    self updateFigureIndex: i</body><body package="GF/ST Demo">changeX: i delta: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    (figures  at: i) changeXBy: (delta x @ delta y negated).    self updateFigureIndex: i</body><body package="GF/ST Demo">changeY: i delta: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    (figures  at: i) changeYBy: (delta x @ delta y negated).    self updateFigureIndex: i</body><body package="GF/ST Demo">changeYaw: y pitch: p roll: r forFigure: i"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    (figures  at: i) changeYaw: y / 75 pitch: p / 75  roll: r / 75.    self updateFigureIndex: i.</body><body package="GF/ST Demo">changeZ: i delta: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    (figures  at: i) changeZBy: (delta x @ delta y negated).    self updateFigureIndex: i</body><body package="GF/ST Demo">clearSpinProcess	spinProcess := nil.</body><body package="GF/ST Demo">figureAt: i"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^figures at: i ifAbsent: [ nil ]</body><body package="GF/ST Demo">figures"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^figures</body><body package="GF/ST Demo">gos"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^gos isNil ifTrue: [ gos := OrderedCollection new ] ifFalse: [ gos ]</body><body package="GF/ST Demo">handlesForFigureIndex: i"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    | f1 |	spinProcess notNil ifTrue: [ ^Array new ].    f1 :=  (gos at: i) last.    ^(OrderedCollection new:4)        add: ((GFParameterizedTrackHandle                        on: f1                        at: #topLeft                        change: (self class gfMessageClass receiver: self selector: #changeZ:delta:)                        with: i)                         scrollFlag: false;						limit: false;                        displayImage: (GFTextGO text: 'Z') );        add: ((GFParameterizedTrackHandle                        on: f1                        at: #bottomRight                        change:  (self class gfMessageClass receiver: self selector: #changeX:delta:)                        with: i)                         scrollFlag: false;						limit: false;                        displayImage: (GFTextGO text: 'X'));        add: ((GFParameterizedTrackHandle                        on: f1                        at: #bottomLeft                        change: (self class gfMessageClass receiver: self selector: #changeY:delta:)                        with: i)                         scrollFlag: false;						limit: false;                        displayImage: (GFTextGO text: 'Y'));        add: (( GFParameterizedTrackHandle                        on: f1                        at: #center                        change: (self class gfMessageClass receiver: self selector: #yawAndPitchOf:delta:)                        with: i) 						limit: false;                        scrollFlag: false);        yourself.</body><body package="GF/ST Demo">initialize"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    figures  := OrderedCollection new.    gos := OrderedCollection new.</body><body package="GF/ST Demo">interface"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^interface</body><body package="GF/ST Demo">interface: aPsiDrawingInterface"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    interface := aPsiDrawingInterface</body><body package="GF/ST Demo">open"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    | aDrawingPane aWindow |    self initialize.    interface := GFDrawingInterface newWithDrawing.    interface drawing drawingExtent: 363@290.    interface drawing when: #getMenu send: #drawingMenu to: self.    aDrawingPane := GFDrawingPane forInterface: interface.    aWindow := ApplicationWindow model: self label: '3-D Figures' minimumSize: 375@300.	aWindow component: (ScrollWrapper on: aDrawingPane at: 0@0).	aDrawingPane bounds:(0@0 extent: 373@300).    aWindow open.    self addButtons.    interface selectTool: GFFocusTool new.    aDrawingPane addDependent: self.</body><body package="GF/ST Demo">pressHandleForFigureIndex: i"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	spinProcess == nil ifFalse: [ ^nil ].	^(GFParameterizedTrackHandle			on: ((gos at: i) last)			at: #center			change: (self class gfMessageClass receiver: self selector: #changeLocation:delta:)			with: i)</body><body package="GF/ST Demo">release"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	self stopAnimation.    (interface notNil and: [ interface drawing graphicObjects size &gt; 0] )        ifTrue: [ interface drawing graphicObjects                            do: [ :fig | fig do: [ :each | each release: self.                     each release ]]].    interface release.    gos := nil.    interface := nil.    figures := nil.</body><body package="GF/ST Demo">scheduleSpinProcessTerminate	| sem | 	sem := Semaphore new.	[ spinProcess terminate.	   self clearSpinProcess.	sem signal. ] forkAt: spinProcess priority.	sem wait.</body><body package="GF/ST Demo">setAnimationButtonLabel: label"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	animateButton widget labelString: label.</body><body package="GF/ST Demo">spinProcess	^spinProcess</body><body package="GF/ST Demo">startAnimation	spinProcess == nil ifFalse: [^self].	self setAnimationButtonLabel: 'Stop'.	interface hideHandles.	spinProcess :=  [		[ true ] whileTrue: [			1 to: figures size do: 				[:idx|				self					changeYaw: 15					pitch: 4					roll: 10					forFigure: idx.				].			Processor yield.			]		] forkAt: Processor userBackgroundPriority</body><body package="GF/ST Demo">stopAnimation	spinProcess isNil ifFalse: [		self setAnimationButtonLabel: 'Animate'.		self scheduleSpinProcessTerminate.		interface unhideHandles.	]</body><body package="GF/ST Demo">toggleAnimation	spinProcess == nil 		ifTrue: [self startAnimation	]		ifFalse: [self stopAnimation].	(GFMessage receiver: interface selector: #noSelections) performDeferred</body><body package="GF/ST Demo">update: aSymbol"Copyright (C) 1995 Polymorphic Software, Inc.  All Rights Reserved"	aSymbol == #releasing		ifTrue: [ ^self release ].	^super update: aSymbol</body><body package="GF/ST Demo">updateFigureIndex: i"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    | sides pointArray figureGOs figure fo points origin corner |    figure := figures at: i.    sides := figure faceSelectors.    figureGOs := gos at: i.    fo := figure faceOrder.    fo reverseDo: [ :face |            points := (figure polygonFor: (sides at: face )).            (figureGOs at: face ) resetPoints: points.            origin isNil ifTrue: [ origin := corner := points at: 1 ].            points do: [ :pt | origin := origin leftMostAndHighest: pt.                                      corner := corner rightMostAndLowest: pt].            (figureGOs at: face ) moveToLast.            ].    figureGOs last damageDuring: [            figureGOs last resetVisibleArea.            ].    interface repairDamage.</body><body package="GF/ST Demo">yawAndPitchOf: i delta: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    (figures  at: i) changePitch: delta y negated / 75 yawBy: delta x / 75.    self updateFigureIndex: i.</body></methods><methods><class-id>Polymorphic.CubeInterface</class-id> <category>menu</category><body package="GF/ST Demo">drawingMenu"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    | menu |   menu := self menu        addItemLabel: 'Add Cube' value: (MessageSend receiver: self selector: #addCube);        addItemLabel: 'Add Pyramid' value: (MessageSend receiver: self selector: #addPyramid);        addItemLabel: 'Add PSI Solid' value: (MessageSend receiver: self selector: #addPsiSolid).    "Smalltalk isRunTime ifFalse: [ menu appendItem: 'inspect' selector: #inspect ]."    ^menu</body><body package="GF/ST Demo">menu"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"   ^Menu new</body><body package="GF/ST Demo">menuForFigureIndex: figureIndexArray"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	| go |	go := figureIndexArray at: 1.	^Menu new		addItem: ((MenuItem labeled: 'Face') submenu:				(Menu new					addItem: ((MenuItem labeled: 'Face') submenu: ( go pathMenu ));					addItemLabel: 'Line Color...' value: (self class gfMessageClass receiver: go selector: #choosePathColor);					addItemLabel: 'Fill Color...' value: (self class gfMessageClass receiver: go selector: #chooseFillColor);					addItemLabel: 'Transparent' value: (self class gfMessageClass receiver: go selector: #transparent)));		yourself</body><body package="GF/ST Demo">menuForPsiSolidIndex: figureIndexArray"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	| go |	go := figureIndexArray at: 1.	^Menu new		addItem: ((MenuItem labeled: 'Face') submenu:				(Menu new					addItem: ((MenuItem labeled: 'Face') submenu: ( go pathMenu ));					addItemLabel: 'Line Color...' value: (self class gfMessageClass receiver: go selector: #choosePathColor)));		yourself</body></methods><methods><class-id>Polymorphic.CubeInterface</class-id> <category>microDoc</category><body package="GF/ST Demo">clear"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	self stopAnimation.	gos do: [ :each | interface removeGO: each last ].	self initialize.	animateButton widget disable.</body></methods><methods><class-id>Polymorphic.CubeInterface class</class-id> <category>GF/ST</category><body package="GF/ST Demo">open"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^CubeInterface new open</body></methods><methods><class-id>Polymorphic.GFNetworkEditor</class-id> <category>private</category><body package="GF/ST Demo">connectionLocationFor: aNetworkNodeGO        "Private - Return the location of the connection handle and locator,        relative to the center of aNetworkNodeGO"    ^0 @ (aNetworkNodeGO boundingBox height // 2 up: 5)</body><body package="GF/ST Demo">handlesFor: aNetworkNodeGO        "Private - Return the handles for aNetworkNodeGO.        We only want a connection handle, and we want to specialize its behavior."    | connectionHandle go node |    "The real node is the metaObject for aNetworkNodeGO"    node := aNetworkNodeGO metaObject.    "Offset the thing downward from the center"    connectionHandle := GFConnectionHandle            on: aNetworkNodeGO            at: #offCenter:            with: (self connectionLocationFor: aNetworkNodeGO).    connectionHandle setLocatorGenerationAction: [ :toGO :point |        self locatorFor: toGO.    ].    "Don't let the user connect to connections or to nodes that you already connect to"    connectionHandle setFindTargetAction: [ :int :point |        ((go := int graphicObjectAt: point) == nil or: [go isConnectionGO])            ifTrue: [nil]            ifFalse: [                (go metaObject connections includes: node)                    ifTrue: [nil]                    ifFalse: [go]            ]    ].    "Connect to the offset position in the target figure, not the center"    connectionHandle setTargetPositionAction: [ :toGO | toGO center + (self connectionLocationFor: toGO)].    "After connecting, set up the events for the connectionGO and make things pretty"    connectionHandle setConnectedAction: [ :conn :toGO |        "Don't forget to connect the real thing"        node connectTo: toGO metaObject.        conn            when: #select send: #updateWeightFor: to: self with: conn;            when: #deselect send: #updateWeightFor: to: self with: nil.        conn interface            sendToBack: conn;            selections: (OrderedCollection with: toGO).    ].    "Return the handles, since this method is invoked when the #generateHandles event is signaled"    ^OrderedCollection with: connectionHandle</body><body package="GF/ST Demo">locatorFor: aNetworkNodeGO        "Private - Return the locator; i.e., the object that is used to determine the point that a        DependentLineGO connects to."    ^GFLocator        on: aNetworkNodeGO        at: #offCenter:        with: (self connectionLocationFor: aNetworkNodeGO)</body><body package="GF/ST Demo">nodeGOFor: aNode        "Private - Return a GO that is appropriate for aNode.        We chose to use a GFGroupGO made of a GFRoundedRectangle and a label."    | textGO rrGO h v nodeGO stringWidth radius charWidth |    "First, create the GFTextGO and GFRoundedRectangle"    stringWidth := (self builder window graphicsContext font stringWidth: aNode name) max: 10.    charWidth := self builder window graphicsContext font widthOf: aNode name first.    h := (3 * stringWidth // 2) max: 20.    v := 3 * self builder window graphicsContext font height // 2.    radius := 5.    textGO := GFTextGO text: aNode name.    "VisualWorks strings appear to be started at the center of the first character"    textGO translateBy: (h - stringWidth // 2) + (charWidth // 2) @ 1.    rrGO := GFRoundedRectangleGO rectangle: (0@0 extent: h@v) cornerEllipse: radius @ radius.    rrGO fillColor: Color yellow.    "Then, create the GFGroupGO and add them to it"    nodeGO := GFGroupGO graphicObjects: (Array with: textGO with: rrGO).    "We will need to know what GFNetworkNode this thing represents, so we'll use the metaObject"    nodeGO metaObject: aNode.    ^nodeGO</body><body package="GF/ST Demo">updateWeight        "Private - Someone used the scroll bar or selected a GO.        Update the display and/or set the weight of the connection."    | connection scrollBar |    scrollBar := self builder componentAt: #scrollBar.    (interface selections size = 1 and: [(connection := interface selections first) isConnectionGO])        ifTrue: [            scrollBar enable.            self weightAtConnection: connection put: self weight value.        ]        ifFalse: [self updateWeightFor: nil].</body><body package="GF/ST Demo">updateWeightFor: aConnectionGO        "Private - Update the display of weight to reflect the value for aConnectionGO"    | w |    aConnectionGO == nil        ifTrue: [		self weight setValue: 0.            (self builder componentAt: #scrollBar) invalidate; disable.        ]        ifFalse: [            w := self weightAtConnection: aConnectionGO.            (self builder componentAt: #scrollBar) enable.		self weight value: w.        ]</body><body package="GF/ST Demo">weightAtConnection: aConnectionGO        "Private - Return the weight of the connection between the nodes connected by aConnectionGO.        Only GFNetworkNodes know about weights, not the GO's."    ^aConnectionGO startObject metaObject weightAt: aConnectionGO stopObject metaObject</body><body package="GF/ST Demo">weightAtConnection: aConnectionGO put: aNumber        "Private - Set the weight of the connection between the nodes connected by aConnectionGO.        Only GFNetworkNodes know about weights, not the GO's."    ^aConnectionGO startObject metaObject weightAt: aConnectionGO stopObject metaObject put: aNumber</body></methods><methods><class-id>Polymorphic.GFNetworkEditor</class-id> <category>aspects</category><body package="GF/ST Demo">gfView		"Return a GFDrawingPane for the aspect of the View"	gfView isNil ifTrue: [ gfView := GFDrawingPane forInterface: self interface ].	^gfView</body><body package="GF/ST Demo">interface		"Return the interface; do initialization if required"	interface isNil ifTrue: [ interface := GFDrawingInterface newWithDrawing ].	^interface</body><body package="GF/ST Demo">weight	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^weight isNil		ifTrue:			[weight := 0 asValue]		ifFalse:			[weight]</body></methods><methods><class-id>Polymorphic.GFNetworkEditor</class-id> <category>actions</category><body package="GF/ST Demo">addNode        "Add a node to the display."    | name node nodeGO |    name := self class gfPrompterClass prompt: 'Enter node name' default: ''.    (name == nil or: [name isEmpty]) ifTrue: [^nil].    "First, create the GFNetworkNode domain model"    node := GFNetworkNode new name: name.    "Then, make a GO for it"    nodeGO := self nodeGOFor: node.    nodeGO        when: #generateHandles send: #handlesFor: to: self with: nodeGO;            "We want to know when it is selected and deselected so we can update other panes"        when: #select send: #updateWeight to: self;        when: #deselect send: #updateWeight to: self;            "and put it in the middle of the pane without regard to where it's been scrolled."        origin: interface visibleRectangle center.	nodeGO cacheFlag: false.    "Finally, add the GO to the interface (draw it) and keep track of it in our own list for convenience"    interface addGO: nodeGO.    nodeGOs add: nodeGO</body><body package="GF/ST Demo">balanceNetwork        "Start a background process that invokes stepNetwork until haltNetwork is        invoked manually, or because the network is balanced"    balancing ifTrue: [^nil].    self haltNetwork.    balanceProcess := [        balancing := true.        interface noSelections.        [balancing] whileTrue: [            self stepNetwork.            Processor yield.        ].    ] forkAt: Processor userBackgroundPriority</body><body package="GF/ST Demo">deleteNode        "Delete any selections that are nodes, as opposed to connections."    interface selections copy do: [ :nodeGO |        nodeGO isConnectionGO ifFalse: [            "Remove any connectors to the node GO"            (interface connectorsUsing: nodeGO) do: [ :conn | interface removeGO: conn].            "Remove the node GO from the interface and from our collection of them"            interface removeGO: nodeGO.            nodeGOs remove: nodeGO.            "GFNetworkNodes keep track of the nodes they connect to.  If we're            deleting one, we better be sure we disconnect it from any remaining nodes.            Make a copy of the connections, since we'll be modifying that collection when we            disconnect nodes.  When we're done, ain't nobody holding onto it anymore.            The metaObject holds onto the actual GFNetworkNode."            nodeGO metaObject disconnectAll.        ].    ]</body><body package="GF/ST Demo">haltNetwork        "Stop the balancing background process"    balancing := false.    balanceProcess == nil ifFalse: [balanceProcess terminate].    balanceProcess := nil</body><body package="GF/ST Demo">stepNetwork        "Compute new locations for the network nodes based loosely on an n-body solution.        Nodes repulse one another based on ther proximity.        Connections between nodes act as springs to hold them together.        The stronger the 'weight', the stronger the spring.        Sure, the method is ugly, but what do you want?"    | j numberOfNodes n1 n2 delta sum spring center center1 pairForce    distance pointZero repulsiveConstant stepSize force |    (numberOfNodes := nodeGOs size) == 0 ifTrue: [^self].    force := Array new: numberOfNodes.    pointZero := 0@0.    center := interface interface visibleRectangle center.    repulsiveConstant := (200000 / numberOfNodes sqrt) truncated.    "First, calculate the new velocities of each node by calculating the    force that each has on the others."    1 to: numberOfNodes do: [ :i | force at: i put: pointZero].    1 to: numberOfNodes do: [ :i |        n1 := nodeGOs at: i.        center1 := n1 center.        "Make all nodes attracted to the center of the picture"        sum := force at: i.        center ~= center1 ifTrue: [ sum := sum + ((center - center1) unitVector * 10)].        n1 metaObject connections do: [ :n2Node |            n2 := nodeGOs detect: [ :go | go metaObject == n2Node].            j := nodeGOs indexOf: n2.            delta := center1 - n2 center.            delta = pointZero ifFalse: [                distance := (delta x * delta x) + (delta y * delta y).                pairForce := (delta unitVector * repulsiveConstant) / distance.                spring := n1 metaObject weightAt: n2Node ifAbsent: [0].                spring ~~ 0 ifTrue: [pairForce := pairForce - (delta unitVector * spring) truncated].                sum := sum + pairForce.                force at: j put: (force at: j) - pairForce]            ].        force at: i put: sum].    "Last, move each node.  Stop when forces are small.  This stops the jitters."    stepSize := force inject: 0 into: [ :max :elem | (elem x abs max: elem y abs) max: max].    stepSize // 10 &lt; 1 ifTrue: [        self bell.        ^self haltNetwork].    1 to: numberOfNodes do: [:i | (nodeGOs at: i) translateBy: (force at: i) // 10].    interface redraw</body></methods><methods><class-id>Polymorphic.GFNetworkEditor</class-id> <category>initialize-release</category><body package="GF/ST Demo">initialize		"Set up the interface an other instance variables"	self interface		noUndo;		disableMenu;		setDefaultTool.	nodeGOs := OrderedCollection new.	balancing := false.</body><body package="GF/ST Demo">postBuildWith: aBuilder		"Connect the slider change to me"	self weight onChangeSend: #updateWeight to: self</body></methods><methods><class-id>Polymorphic.GFNetworkEditor</class-id> <category>menu</category><body package="GF/ST Demo">networkMenu        "Private - Return the Network menu"    ^Menu new            addItemLabel: '&amp;Add node...'  value: (self class gfMessageClass receiver: self selector: #addNode);            addItemLabel: '&amp;Delete node'  value: (self class gfMessageClass receiver: self selector: #deleteNode);            yourself</body></methods><methods><class-id>Polymorphic.InterestingObjectGenerator class</class-id> <category>GF/ST</category><body package="GF/ST Demo">network    ^TokenRingNetwork new        name: 'GoFigure! Net';        addNode: (Node new name: 'Michaelangelo');        addNode: (Node new name: 'Donatello');        addNode: (Workstation new name: 'Raphael');        addNode: (FileServer new name: 'Splinter');        addNode: (Node new name: 'April');        connect</body><body package="GF/ST Demo">stoogesMenu	| menu |	menu := Menu		labelArray: #( 'Larry' 'Moe' 'Curly' 'Shemp' )		lines: #(3)		values: #(tom allen dan hal).	^menu</body></methods><methods><class-id>Polymorphic.Pyramid</class-id> <category>GF/ST</category><body package="GF/ST Demo">changeRawXBy: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    dim at: 1 put: ((dim at: 1) + delta)</body><body package="GF/ST Demo">changeRawYBy: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    dim at: 2 put: ((dim at: 2) + delta)</body><body package="GF/ST Demo">changeRawZBy: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    dim at: 3 put: ((dim at: 3) + delta)</body><body package="GF/ST Demo">changeXBy: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    self changeRawXBy: delta x/2.    self computePoints.</body><body package="GF/ST Demo">changeYBy: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    self changeRawYBy: delta y/2.    self computePoints.</body><body package="GF/ST Demo">changeZBy: delta"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    self changeRawZBy: delta y /2.    self computePoints.</body><body package="GF/ST Demo">f1Points"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    "Bottom"    ^#(1 2 3 4)</body><body package="GF/ST Demo">f2Points"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    "Front"    ^#(2 1 5)</body><body package="GF/ST Demo">f3Points"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    "Right"    ^#(3 2 5)</body><body package="GF/ST Demo">f4Points"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    "Back"    ^#(4 3 5)</body><body package="GF/ST Demo">f5Points"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    "Left"    ^#(1 4 5)</body><body package="GF/ST Demo">initDimensions"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    dim := Array with: 15 with: 15 with: -15</body><body package="GF/ST Demo">initFaceOrder"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    faceOrder := #(1 2 3 4 5).</body><body package="GF/ST Demo">initialize"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    self initDimensions.    super initialize.</body><body package="GF/ST Demo">rawFigure"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    | x y z |    x := self rawX.    y := self rawY.    z := self rawZ.    ^(Array new: 5)            at: 1 put: (Array with: x negated                                      with: y negated                                      with: z negated);            at: 2 put: (Array with: x                                      with: y negated                                      with: z negated);            at: 3 put: (Array with: x                                      with: y                                      with: z negated);            at: 4 put: (Array with: x negated                                      with: y                                      with: z negated);            at: 5 put: (Array with: 0                                      with: 0                                      with: z);            yourself</body><body package="GF/ST Demo">rawX"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^dim at: 1</body><body package="GF/ST Demo">rawY"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^dim at: 2</body><body package="GF/ST Demo">rawZ"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^dim at: 3</body></methods><methods><class-id>Polymorphic.Pyramid class</class-id> <category>GF/ST</category><body package="GF/ST Demo">faceSelectors"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    ^#(f1Points f2Points f3Points f4Points f5Points)</body></methods><methods><class-id>Polymorphic.GFDemoLauncher</class-id> <category>actions</category><body package="GF/ST Demo">aboutGoFigure"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    GFAboutDialog new open</body><body package="GF/ST Demo">helpFileName"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	^(#{GFIsRuntime} valueOrDo: [false])		ifTrue: ['gfdvw.hlp']		"Runtime demo help file"		ifFalse: ['gfstvw.hlp']	"Development help file"</body><body package="GF/ST Demo">initInterface"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    | buttons |    interface selectTool: GFFocusTool new.    buttons := OrderedCollection new.    buttons add: (GFButtonGO new                                origin: 10@10                                image: (GFTool stockIconFor: 'DrawingTool')                                mask: (GFTool stockIconFor: 'DrawingMask')).    buttons last whenClickedSend: #openDrawing to: self.    buttons add:  (GFButtonGO new                                origin: 90@10                                image: (GFTool stockIconFor: '3d')                                mask: (GFTool stockIconFor: '3dMask')).    buttons last whenClickedSend: #openCube to: self.    buttons add:  (GFButtonGO new                                origin: 170@10                                image: (GFTool stockIconFor: 'Inspector')                                mask: (GFTool stockIconFor: 'InspectorMask')).    buttons last whenClickedSend: #openInspector to: self.    buttons add:  (GFButtonGO new                                origin: 250@10                                image: (GFTool stockIconFor: 'About')                                mask: (GFTool stockIconFor: 'AboutMask')).    buttons last whenClickedSend: #aboutGoFigure to: self.    buttons add:  (GFButtonGO new                                origin: 330@10                                image: (GFTool stockIconFor: 'Help')                                mask: (GFTool stockIconFor: 'HelpMask')).    buttons last whenClickedSend: #openHelp to: self.    buttons do: [ :each | interface addGO: each ].	interface drawing disableMenu.</body><body package="GF/ST Demo">openCube"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    CubeInterface open</body><body package="GF/ST Demo">openDrawing"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"    GFDrawingInterface open</body><body package="GF/ST Demo">openHelp	"Copyright (C) 1993-1995 Polymorphic Software, Inc. 	All Rights Reserved"	(OSHandle currentPlatformID tokensBasedOn: Character space) first = 'win32' ifFalse: 		[^Dialog warn: 'This feature available only under Windows or Windows NT.'].	#{Win95SystemSupport} ifDefinedDo:		[:win95SystemSupport| |helpDir|		helpDir := '$(VISUALWORKS)\contributed\gfst' asLogicalFileSpecification.		[helpDir exists] whileFalse: 			[| entry |			entry := Dialog requestFileName: 'Directory for help file ' , self helpFileName default: helpDir asResolvedString.			entry isEmpty ifTrue: [^self].			helpDir := entry asLogicalFileSpecification].		win95SystemSupport openHelpFile: (helpDir construct: self helpFileName) asResolvedString]</body><body package="GF/ST Demo">openInspector	"Copyright (C) 1993-1995 Polymorphic Software, Inc. 	All Rights Reserved"	(#{GFIsRuntime} valueOrDo: [false])		ifTrue: 			[#{PsiDemoVisualInspector} 				ifDefinedDo: [:inspector | inspector open]				elseDo: [Dialog warn: 'Demo Visual Inspector not available']]		ifFalse: [PsiVisualInspector open]</body></methods><methods><class-id>Polymorphic.GFDemoLauncher</class-id> <category>view</category><body package="GF/ST Demo">gfView"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	^GFDrawingPane forInterface: self interface</body><body package="GF/ST Demo">interface"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	interface isNil ifTrue: [ interface := GFDrawingInterface newWithDrawing ].	^interface</body></methods><methods><class-id>Polymorphic.GFDemoLauncher</class-id> <category>initialize-release</category><body package="GF/ST Demo">changeRequest"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	self release.	(#{GFIsRuntime} valueOrDo: [false]) ifTrue: 		[ObjectMemory quit].		"This is a runtime version and we should exit the image"	^true</body><body package="GF/ST Demo">exit"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	self builder window controller close</body><body package="GF/ST Demo">initialize"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	self interface.</body><body package="GF/ST Demo">postBuildWith: aBuilder"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	self initInterface</body><body package="GF/ST Demo">release"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	super release.	interface notNil ifTrue: [		interface drawing graphicObjects do: [ :each | each release].		interface release.	].	(#{GFIsRuntime} valueOrDo: [false]) ifTrue:		[ObjectMemory quit]</body></methods><methods><class-id>Polymorphic.GFDemoLauncher class</class-id> <category>parcel load/unload</category><body package="GF/ST Demo">postLoadFrom: aParcel	GFDemoLauncher open</body><body package="GF/ST Demo">preUnloadFor: aParcel	"Close any open applications."	| definedAppClasses |	definedAppClasses := aParcel definedClasses select: [:c| c inheritsFrom: Model].	ScheduledControllers scheduledControllers do:		[:ctrlr |		(definedAppClasses contains: [:dac| ctrlr model isKindOf: dac]) ifTrue:			[ctrlr closeAndUnschedule]]</body></methods><methods><class-id>Polymorphic.PsiDemoObjectDrawingInterface</class-id> <category>GF/ST</category><body package="GF/ST Demo">addObjectMenu		^Menu new		addItemLabel: '&amp;Network' value: (MessageSend receiver: self selector: #network);		addItemLabel: '&amp;Menu' value: (MessageSend receiver: self selector: #stoogesMenu).</body><body package="GF/ST Demo">menu "Copyright (c) 1993 Polymorphic Software, Inc."    | menu |	(menu :=  Menu new)		addItem: ((MenuItem labeled: '&amp;Add Object...') submenu: self addObjectMenu);		addItemLabel:'Delete Selections' value: (MessageSend receiver: self selector: #removeSelections);		addItemLabel:'&amp;Update' value: (MessageSend receiver: self selector: #updateConnections);		addItemGroupLabels: (Array with: 'Set &amp;Font...') values: (Array with: (self class gfMessageClass receiver: self selector: #setFont));		addItemLabel:'Set Selection &amp;Color...' value: (MessageSend receiver: self selector: #setSelectionColor);		addItemLabel:'&amp;Print...' value: (MessageSend receiver: self selector: #outputToPrinter).		menu addItemGroup: (Array with: ((MenuItem labeled:'Transform') submenu: self pathMenu)).    ^menu</body><body package="GF/ST Demo">network	| cursorPoint |	(cursorPoint := self cursorPoint) isNil ifTrue: [cursorPoint := 0@0].	self addObject: InterestingObjectGenerator network at: cursorPoint</body><body package="GF/ST Demo">stoogesMenu	| cursorPoint |	(cursorPoint := self cursorPoint) isNil ifTrue: [cursorPoint := 0@0].	self addObject: InterestingObjectGenerator stoogesMenu at: cursorPoint</body></methods><methods><class-id>Polymorphic.TokenRingNetwork</class-id> <category>GF/ST</category><body package="GF/ST Demo">addNode: aNode    nodes add: aNode</body><body package="GF/ST Demo">connect    1 to: nodes size - 1 do: [ :i | (nodes at: i) nextNode: (nodes at: (i + 1))].    (nodes at: nodes size) nextNode: nodes first</body><body package="GF/ST Demo">initialize    nodes := OrderedCollection new.    name := 'Unnamed'</body><body package="GF/ST Demo">name: aString    name := aString</body><body package="GF/ST Demo">printOn: aStream    ^aStream nextPutAll: self class name, ': ', name</body><body package="GF/ST Demo">removeNode: aNode    nodes remove: aNode</body></methods><methods><class-id>Polymorphic.TokenRingNetwork class</class-id> <category>GF/ST</category><body package="GF/ST Demo">new    ^super new initialize</body></methods><methods><class-id>Polymorphic.GFDrawingInterface class</class-id> <category>examples</category><body package="GF/ST Demo">addExampleDiagramFor: go"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	| labels arrows points plugGO pathGO finalCollection pointGO scale displayOffsetPoint displayPoint connectionOffsetPoint arrowGO |	scale := 2.0@2.0.	finalCollection := OrderedCollection new.	plugGO := go startPlug go copy.	plugGO scaleBy: scale.	plugGO width: (go startPlug go width * scale x) ceiling.	plugGO translateTo: (130@70 - plugGO center).	points := OrderedCollection new.	pointGO := GFEllipseGO ellipse: (0@0 extent: 15@15).	pointGO width: 2.	pointGO fillColor: RGBColor yellow.	points add: ((pointGO copy) translateTo: (displayOffsetPoint := plugGO origin - pointGO center)).	points add: ((pointGO copy) translateTo: (displayPoint := (plugGO origin - (go startPlug displayOffset scaleBy: scale)) - pointGO center)).	points add: ((pointGO copy) translateTo: (connectionOffsetPoint := (displayPoint + (go startPlug connectionOffset scaleBy: scale)))).	pathGO := GFPolylineGO withPoints: (go points collect: [ :each | each scaleBy: scale ]).	pathGO translateTo: displayPoint + pointGO center.	pathGO width: (go width * scale x) ceiling.	labels := OrderedCollection new.	labels add: (GFTextGO text: ('displayOffset (', go startPlug displayOffset printString, ')')).	labels add: (GFTextGO text: 'displayPoint').	labels add: (GFTextGO text: ('connectionOffset (', go startPlug connectionOffset printString, ')')).	(labels at: 1) translateTo: 20@5.	(labels at: 2) translateTo: 10@105.	(labels at: 3) translateTo: 100 @ 125.	arrows := OrderedCollection new.	arrowGO := GFLineGO arrowStart: 0@0 stop: 50@0.	arrowGO width: 2.	arrowGO color: RGBColor red.	arrows add: ((arrowGO copy) start: displayPoint + pointGO leftCenter - (5@0) stop: displayOffsetPoint + pointGO leftCenter - (5@0)).	arrows add: ((arrowGO copy) start: displayPoint + pointGO bottomCenter + (0@5) stop: connectionOffsetPoint + pointGO bottomCenter + (0@5)).	arrowGO color: RGBColor black.	"displayOffset label arrow"	arrows add: ((arrowGO copy) start: ((labels at: 1) bottomLeft + (10@0)) stop: ((arrows at: 1) offCenter: -4@0)).	"displayPoint label arrow"	arrows add: ((arrowGO copy) start: (labels at: 2) topCenter stop: displayPoint + pointGO bottomLeft).	"connectionOffset label arrow"	arrows add: ((arrowGO copy) start: (labels at: 3) topCenter - (25@0) stop: ((arrows at: 2) offCenter: (0@3))).	finalCollection 		add: pathGO;		add: plugGO;		addAll: points;		addAll: labels;		addAll: arrows.	finalCollection do: [ :each | each disableInteraction ].	^finalCollection</body><body package="GF/ST Demo">circleLineEndExample"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	"GFDrawingInterface circleLineEndExample"	| plugGO |	plugGO := GFEllipseGO ellipse: (0@0 extent: 30@30).	plugGO fillColor: RGBColor green.	self makePluggableAndDiagram: plugGO</body><body package="GF/ST Demo">makePluggableAndDiagram: plugGO"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	| interface lineGO points gos |	"create the points for a polyline"	points := OrderedCollection new.	points 		add: 0@0;		add: 60@0;		add: 75@20;		add: 100@20.	"create polyline"	lineGO := GFPolylineGO withPoints: points.	"take the GO passed in and make an endplug that uses it, 	then make that be the startPlug of the polyline just created."	lineGO startPlug: plugGO asGFEndPlug.	"Now set the three control points for the plug, the displayPoint, displayOffset	and the connectionOffset"	(lineGO startPlug) 		displayPoint: (lineGO points at: 1);		displayOffset: 0@(plugGO extent y / 2) floor negated;		connectionOffset: (plugGO rightCenter x - 2) @ 0.	"translate the polyline to where we want it to be displayed"	lineGO translateTo: 100@150.		"Make a call that will return a collection of GOs that constitute the 	diagram of the three control points of a line end plug"	gos := self addExampleDiagramFor: lineGO.	"This line sets up the polyline so that when a position handle is 	requested of it, a trackHandle is used.  This is needed so that 	ONLY the polyline is moved when it is clicked on and not all GOs	that are selected in the interface (which is the default behavior of 	a polyline)."	lineGO when: #needsPositionHandle send: #positionOf: to: GFTrackHandle with: lineGO.	"open and add all GOs through the interface"	interface := GFDrawingInterface open.	gos do: [ :each | interface addGO: each ].	interface addGO: lineGO.	"disable all menus for the drawing (including the ability	of the GOs within the drawing to popup menus)"	interface disableMenu.</body><body package="GF/ST Demo">rectangleLineEndExample"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	"GFDrawingInterface rectangleLineEndExample"	| plugGO |	plugGO := GFRectangleGO rectangle: (0@0 extent: 30@20).	plugGO fillColor: RGBColor gray.	self makePluggableAndDiagram: plugGO</body><body package="GF/ST Demo">triangleLineEndExample"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	"GFDrawingInterface triangleLineEndExample"	| plugGO |	plugGO := GFPolylineGO withPoints: (OrderedCollection with: 0@0 with: 0@40 with: 30@20).	plugGO makeClosed.	plugGO fillColor: RGBColor cyan.	self makePluggableAndDiagram: plugGO</body></methods><methods><class-id>Polymorphic.GFDrawing</class-id> <category>GF/ST</category><body package="GF/ST Demo">edit	"Copyright (C) 1993-1995 Polymorphic Software, Inc.  All Rights Reserved"	"Edit the receiver"    GFDrawingInterface openOn: self</body></methods><methods><class-id>Polymorphic.GFAboutDialog class</class-id> <category>interface specs</category><body package="GF/ST Demo">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'About GF/ST' 			#min: #(#{Core.Point} 351 262 ) 			#max: #(#{Core.Point} 351 262 ) 			#bounds: #(#{Graphics.Rectangle} 800 600 1151 862 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ArbitraryComponentSpec} 					#layout: #(#{Graphics.LayoutFrame} -123 1 55 0 -23 1 155 0 ) 					#name: #view 					#component: #gfView ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 5 0 39 0 -127 1 158 0 ) 					#flags: 4 					#model: #address 					#alignment: #center 					#isReadOnly: true 					#tabRequiresControl: true ) 				#(#{UI.LabelSpec} 					#layout: #(#{UI.AlignmentOrigin} 0 0.5 35 0 0.5 1 ) 					#label: 'This package provided by:' 					#style: #large ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} -28 0.5 -34 1 28 0.5 -4 1 ) 					#model: #accept 					#label: 'OK' 					#isDefault: true 					#defaultable: true ) 				#(#{UI.TextEditorSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 -103 1 -6 1 -36 1 ) 					#flags: 4 					#model: #copyright 					#alignment: #center 					#style: #small 					#isReadOnly: true 					#tabRequiresControl: true ) ) ) )</body></methods><methods><class-id>Polymorphic.GFNetworkEditor class</class-id> <category>interface specs</category><body package="GF/ST Demo">windowSpec	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'Network Editor' 			#bounds: #(#Rectangle 184 150 598 350 ) 			#flags: 4 			#menu: #networkMenubar ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#ArbitraryComponentSpec 					#layout: #(#LayoutFrame 0 0 0 0 0 1 -49 1 ) 					#name: #gfView 					#flags: 11 					#component: #gfView ) 				#(#SliderSpec 					#layout: #(#LayoutFrame 0 0 -18 1 0 1 0 1 ) 					#name: #scrollBar 					#model: #weight 					#orientation: #horizontal 					#start: 0 					#stop: 100 					#step: 1 ) 				#(#LabelSpec 					#layout: #(#AlignmentOrigin -34 0.25 -20 1 0 1 ) 					#label: 'Weight:' ) 				#(#InputFieldSpec 					#layout: #(#LayoutFrame 11 0.25 -46 1 49 0.25 -22 1 ) 					#flags: 0 					#model: #weight 					#isReadOnly: true 					#type: #number 					#formatString: '##0' ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 0 0.502392 -46 1 -2 0.75 -21 1 ) 					#model: #balanceNetwork 					#label: 'Balance' ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 2 0.75 -46 1 -2 0.87 -21 1 ) 					#model: #stepNetwork 					#label: 'Step' ) 				#(#ActionButtonSpec 					#layout: #(#LayoutFrame 2 0.87 -46 1 -2 1 -21 1 ) 					#model: #haltNetwork 					#label: 'Halt' ) ) ) )</body></methods><methods><class-id>Polymorphic.GFNetworkEditor class</class-id> <category>resources</category><body package="GF/ST Demo">networkMenubar	"UIMenuEditor new openOnClass: self andSelector: #networkMenubar"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#label: 'Network' 				#accessCharacterPosition: 1 				#submenu: #(#Menu #(						#(#MenuItem 							#label: 'Add node...' 							#accessCharacterPosition: 1 ) 						#(#MenuItem 							#label: 'Delete node' 							#accessCharacterPosition: 1 ) ) #(2 ) #(#addNode #deleteNode ) ) ) ) #(1 ) #(nil ) ) decodeAsLiteralArray</body></methods><methods><class-id>Polymorphic.GFDemoLauncher class</class-id> <category>interface specs</category><body package="GF/ST Demo">windowSpec"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	"UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#FullSpec 		#window: 		#(#WindowSpec 			#label: 'GF/ST Launcher' 			#min: #(#Point 408 89 ) 			#max: #(#Point 408 89 ) 			#bounds: #(#Rectangle 218 286 626 375 ) 			#flags: 4 			#menu: #menubar ) 		#component: 		#(#SpecCollection 			#collection: #(				#(#ArbitraryComponentSpec 					#layout: #(#LayoutFrame 0 0 0 0 0 1 0 1 ) 					#name: #gfView 					#component: #gfView ) ) ) )</body></methods><methods><class-id>Polymorphic.GFDemoLauncher class</class-id> <category>resources</category><body package="GF/ST Demo">menubar"Copyright (C) 1993-1996 Polymorphic Software, Inc.  All Rights Reserved"	"UIMenuEditor new openOnClass: self andSelector: #menubar"	&lt;resource: #menu&gt;	^#(#Menu #(			#(#MenuItem 				#label: 'File' 				#accessCharacterPosition: 1				#submenu: #(#Menu #(						#(#MenuItem 							#label: 'Exit' 							#accessCharacterPosition: 2) ) #(1 ) #(#exit ) ) ) 			#(#MenuItem 				#label: 'Demo'				#accessCharacterPosition: 1 				#submenu: #(#Menu #(						#(#MenuItem 							#label: 'Drawing Editor' 							#accessCharacterPosition: 1) 						#(#MenuItem 							#label: '3-D Figures' 							#accessCharacterPosition: 5) 						#(#MenuItem 							#label: 'Visual Inspector' 							#accessCharacterPosition: 1) ) #(3 ) #(#openDrawing #openCube #openInspector ) ) ) 			#(#MenuItem 				#label: 'Help' 				#accessCharacterPosition: 1				#submenu: #(#Menu #(						#(#MenuItem 							#label: 'Contents' 							#accessCharacterPosition: 1) 						#(#MenuItem 							#label: 'About GF/ST' 							#accessCharacterPosition: 1) ) #(1 1 ) #(#openHelp #aboutGoFigure ) ) ) ) #(3 ) #(nil nil nil ) ) decodeAsLiteralArray</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>Model</name><environment>UI</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>dependents </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>ApplicationModel</name><environment>UI</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>builder uiSession eventHandlers </inst-vars><class-inst-vars>savedWindowInformation </class-inst-vars><imports></imports><category>UIBuilder-Framework</category><attributes><package>UIBuilder-Framework</package></attributes></class><class><name>GFDrawing</name><environment>Polymorphic</environment><super>Polymorphic.GFCompositeGO</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstGO lastGO coordSystem displayGrid gridColor </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GFST</category><attributes><package>GF/ST Base</package></attributes></class><class><name>PsiVisualInspector</name><environment>Polymorphic</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>interface </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VisualInspecting-VisualInspecting80</category><attributes><package>GF/ST Visual Inspector</package></attributes></class><class><name>SimpleDialog</name><environment>UI</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>close accept cancel preBuildBlock postBuildBlock postOpenBlock escapeIsCancel parentView useParentColors </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Interface-Dialogs</category><attributes><package>Interface-Dialogs</package></attributes></class><class><name>PsiObjectDrawingInterface</name><environment>Polymorphic</environment><super>Polymorphic.GFDrawingInterface</super><private>false</private><indexed-type>none</indexed-type><inst-vars>objects defaultConnector </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VisualInspecting-VisualInspecting80</category><attributes><package>GF/ST Visual Inspector</package></attributes></class></st-source>