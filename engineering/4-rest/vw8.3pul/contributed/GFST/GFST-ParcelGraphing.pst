<?xml version="1.0"?><st-source><!-- Name: GF/ST Parcel GraphingNotice: Copyright © 2002,2000,1999 Cincom Systems, Inc.  All Rights Reserved.DbIdentifier: bear73DbTrace: 207792DbUsername: kgreekDbVersion: 7.7 - 1DevelopmentPrerequisites: #(#(#any 'GF/ST GraphLayout' '') #(#any 'GF/ST Visual Inspector' ''))PackageName: GF/ST Parcel GraphingParcel: #('GF/ST Parcel Graphing')ParcelName: GF/ST Parcel GraphingPrerequisiteParcels: #(#('GF/ST GraphLayout' '') #('GF/ST Visual Inspector' ''))PrintStringCache: (7.7 - 1,kgreek)Version: 7.7 - 1Date: 1:14:05 PM April 1, 2016 --><time-stamp>From VisualWorks®, Pre-Release 8.2 (apr16.1) of April 1, 2016 on April 1, 2016 at 1:14:05 PM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>Polymorphic.GFDAGLayout class</class-id> <category>parcel graphing</category><body package="GF/ST Parcel Graphing">allParcelsOnDiskDependents	"	GFDAGLayout allParcelsOnDiskDependents 	"	| possibles fn fileName info forward reverse |	possibles := OrderedCollection new.	Parcel searchPathModel value do: 		[:dirName | 		| dir |		((dir := dirName asLogicalFileSpecification) exists and: [dir isDirectory])			ifTrue: [possibles addAllLast: ((dir filenamesMatching: '*' , Parcel fileExtension)						asSortedCollection: [:f1 :f2 | f1 asString &lt;= f2 asString])]].	forward := Dictionary new.	possibles		do: 			[:portableFilename | 			fn := portableFilename asFilename.			fileName := fn asString.			info := nil.			((fileName includes: $.)				and: [(fileName copyFrom: (fileName lastIndexOf: $.)						to: fileName size)						= Parcel fileExtension])				ifTrue: 					[| codeReader |					codeReader := CodeReader new.					info := codeReader readInfoFromFileNamed: fileName].			(info includesKey: #parcel) ifTrue:				[forward at: (info at: #parcel)					put: (info at: #prerequisiteParcels)]].	reverse := Dictionary new.	reverse at: 'root' put: SortedCollection new.	forward keysAndValuesDo: [:key :value | value isEmpty			ifTrue: [(reverse at: 'root')					add: key]			ifFalse: [value do: [:each | (reverse at: each first ifAbsentPut: [SortedCollection new])						add: key]]].	GFDAGLayout		layoutHorizontalRoots: (Array with: 'root')		childrenBlock: [:parcelName | reverse at: parcelName ifAbsent: [OrderedCollection new]]		goSelector: #psiObjectGO		label: 'Parcels on Disk Dependents'</body><body package="GF/ST Parcel Graphing">leafParcelsOnDiskPrerequisites	"	GFDAGLayout leafParcelsOnDiskPrerequisites 	"	| possibles fn fileName info forward missing leaves |	possibles := OrderedCollection new.	Parcel searchPathModel value do: 		[:dirName | 		| dir |		((dir := dirName asLogicalFileSpecification) exists and: [dir isDirectory])			ifTrue: [possibles addAllLast: ((dir filenamesMatching: '*' , Parcel fileExtension)						asSortedCollection: [:f1 :f2 | f1 asString &lt;= f2 asString])]].	forward := Dictionary new.	possibles		do: 			[:portableFilename | 			fn := portableFilename asFilename.			fileName := fn asString.			info := nil.			((fileName includes: $.)				and: [(fileName copyFrom: (fileName lastIndexOf: $.)						to: fileName size)						= Parcel fileExtension])				ifTrue: 					[| codeReader |					codeReader := CodeReader new.					info := codeReader readInfoFromFileNamed: fileName].			(info includesKey: #parcel) ifTrue:				[forward at: (info at: #parcel)					put: ((info at: #prerequisiteParcels) collect: [:each | each first])]].	missing := Set new.	leaves := Set new.	forward values do: [:each | each do: [:pair | missing add: pair first]].	forward keysDo: [:each | missing remove: each ifAbsent: [leaves add: each]].	GFDAGLayout		layoutHorizontalRoots: leaves asArray asSortedCollection		childrenBlock: [:parcelName | forward at: parcelName ifAbsent: [OrderedCollection new]]		goSelector: #psiObjectGO</body><body package="GF/ST Parcel Graphing">loadedParcelsDependents	"	GFDAGLayout loadedParcelsDependents 	"	| possibles forward reverse |	possibles := Parcel parcels select: [:ea| ea isLoaded].	forward := Dictionary new.	possibles do: 		[:aParcel |		forward at: aParcel name put: ((aParcel loadedPrerequisites reject:[:ea| ea isNil]) collect: [:ea| ea name])].	reverse := Dictionary new.	reverse at: 'root' put: SortedCollection new.	forward keysAndValuesDo:		[:key :value |		value isEmpty			ifTrue: [(reverse at: 'root')					add: key]			ifFalse: [value do: [:each | (reverse at: each ifAbsentPut: [SortedCollection new])						add: key]]].	GFDAGLayout		layoutHorizontalRoots: (Array with: 'root')		childrenBlock: [:parcelName | reverse at: parcelName ifAbsent: [OrderedCollection new]]		goSelector: #psiObjectGO		label: 'Parcels on Disk Dependents'</body><body package="GF/ST Parcel Graphing">missingParcelsOnDisk	"	GFDAGLayout missingParcelsOnDisk 	"	| possibles fn fileName info forward missing leaves reverse |	possibles := OrderedCollection new.	Parcel searchPathModel value do: 		[:dirName | 		| dir |		((dir := dirName asLogicalFileSpecification) exists and: [dir isDirectory])			ifTrue: [possibles addAllLast: ((dir filenamesMatching: '*' , Parcel fileExtension)						asSortedCollection: [:f1 :f2 | f1 asString &lt;= f2 asString])]].	forward := Dictionary new.	possibles		do: 			[:portableFilename | 			fn := portableFilename asFilename.			fileName := fn asString.			info := nil.			((fileName includes: $.)				and: [(fileName copyFrom: (fileName lastIndexOf: $.)						to: fileName size)						= Parcel fileExtension])				ifTrue: 					[| codeReader |					codeReader := CodeReader new.					info := codeReader readInfoFromFileNamed: fileName].			(info includesKey: #parcel) ifTrue:				[forward at: (info at: #parcel)					put: (info at: #prerequisiteParcels)]].	missing := Set new.	leaves := Set new.	forward values do: 		[ :each | each do: [ :pair | missing add: pair first ] ] .	forward keysDo: [ :each | missing remove: each ifAbsent: [leaves add: each] ].	reverse := Dictionary new.	reverse at: 'root' put: SortedCollection new.	forward keysAndValuesDo: 		[ :key :value | 		value isEmpty 			ifTrue: [ (reverse at: 'root' ) add: key ]			ifFalse: [ 				value do: 					[ :each |					( reverse at: each first ifAbsentPut: [ SortedCollection new ] ) add: key ] 					]		].	missing do: [ :each | ( reverse at: 'MISSING' ifAbsentPut: [ SortedCollection new ] ) add:  each ].	GFDAGLayout		layoutHorizontalRoots: missing "(Array with: 'MISSING')"		childrenBlock: [:parcelName | reverse at: parcelName ifAbsent: [  OrderedCollection new ] ]		goSelector: #psiObjectGO</body><body package="GF/ST Parcel Graphing">parcelPrerequisites	GFDAGLayout		layoutHorizontalRoots: (Array with: 'GF/ST Parcel Graphing')		childrenBlock: [:parcelName | (Parcel parcelNamed: parcelName) loadedPrerequisites collect: [:parcel | parcel name]]		goSelector: #psiObjectGO</body><body package="GF/ST Parcel Graphing">parcelPrerequisites: aString	GFDAGLayout		layoutHorizontalRoots: (Array with: aString)		childrenBlock: [:parcelName | (Parcel parcelNamed: parcelName) loadedPrerequisites collect: [:parcel | parcel name]]		goSelector: #psiObjectGO</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>actions</category><body package="GF/ST Parcel Graphing">toolsParcelFilePrerequisites	&lt;menuItem: 'Parcel Files Prerequisites Graph'		nameKey: nil		menu: #(#menuBar #tools)		position: 12.902&gt;			Cursor wait showWhile: [Polymorphic.GFDAGLayout allParcelsOnDiskDependents]</body><body package="GF/ST Parcel Graphing">toolsParcelPrerequisites	&lt;menuItem: 'Parcel Prerequisites Graph'		nameKey: nil		menu: #(#menuBar #tools)		position: 12.901&gt;		Polymorphic.GFDAGLayout loadedParcelsDependents</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector transcriptView statusBar </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>